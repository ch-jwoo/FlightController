
FlightController_STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c7f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a4  0802ca98  0802ca98  0003ca98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802df3c  0802df3c  00040714  2**0
                  CONTENTS
  4 .ARM          00000008  0802df3c  0802df3c  0003df3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802df44  0802df44  00040714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0802df44  0802df44  0003df44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802df68  0802df68  0003df68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000714  24000000  0802df6c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cb3c  24000718  0802e680  00040718  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400d254  0802e680  0004d254  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040714  2**0
                  CONTENTS, READONLY
 12 .debug_info   00098baa  00000000  00000000  00040742  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000f7aa  00000000  00000000  000d92ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003628  00000000  00000000  000e8a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003148  00000000  00000000  000ec0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004d259  00000000  00000000  000ef208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00044fcc  00000000  00000000  0013c461  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0019bb27  00000000  00000000  0018142d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0031cf54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f3a4  00000000  00000000  0031cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000718 	.word	0x24000718
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802ca80 	.word	0x0802ca80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400071c 	.word	0x2400071c
 80002dc:	0802ca80 	.word	0x0802ca80

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004ce:	f1a4 0401 	sub.w	r4, r4, #1
 80004d2:	d1e9      	bne.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_ldivmod>:
 8000708:	b97b      	cbnz	r3, 800072a <__aeabi_ldivmod+0x22>
 800070a:	b972      	cbnz	r2, 800072a <__aeabi_ldivmod+0x22>
 800070c:	2900      	cmp	r1, #0
 800070e:	bfbe      	ittt	lt
 8000710:	2000      	movlt	r0, #0
 8000712:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000716:	e006      	blt.n	8000726 <__aeabi_ldivmod+0x1e>
 8000718:	bf08      	it	eq
 800071a:	2800      	cmpeq	r0, #0
 800071c:	bf1c      	itt	ne
 800071e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000722:	f04f 30ff 	movne.w	r0, #4294967295
 8000726:	f000 b9bd 	b.w	8000aa4 <__aeabi_idiv0>
 800072a:	f1ad 0c08 	sub.w	ip, sp, #8
 800072e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000732:	2900      	cmp	r1, #0
 8000734:	db09      	blt.n	800074a <__aeabi_ldivmod+0x42>
 8000736:	2b00      	cmp	r3, #0
 8000738:	db1a      	blt.n	8000770 <__aeabi_ldivmod+0x68>
 800073a:	f000 f84d 	bl	80007d8 <__udivmoddi4>
 800073e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000746:	b004      	add	sp, #16
 8000748:	4770      	bx	lr
 800074a:	4240      	negs	r0, r0
 800074c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	db1b      	blt.n	800078c <__aeabi_ldivmod+0x84>
 8000754:	f000 f840 	bl	80007d8 <__udivmoddi4>
 8000758:	f8dd e004 	ldr.w	lr, [sp, #4]
 800075c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000760:	b004      	add	sp, #16
 8000762:	4240      	negs	r0, r0
 8000764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000768:	4252      	negs	r2, r2
 800076a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800076e:	4770      	bx	lr
 8000770:	4252      	negs	r2, r2
 8000772:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000776:	f000 f82f 	bl	80007d8 <__udivmoddi4>
 800077a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000782:	b004      	add	sp, #16
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	4770      	bx	lr
 800078c:	4252      	negs	r2, r2
 800078e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000792:	f000 f821 	bl	80007d8 <__udivmoddi4>
 8000796:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079e:	b004      	add	sp, #16
 80007a0:	4252      	negs	r2, r2
 80007a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a6:	4770      	bx	lr

080007a8 <__aeabi_uldivmod>:
 80007a8:	b953      	cbnz	r3, 80007c0 <__aeabi_uldivmod+0x18>
 80007aa:	b94a      	cbnz	r2, 80007c0 <__aeabi_uldivmod+0x18>
 80007ac:	2900      	cmp	r1, #0
 80007ae:	bf08      	it	eq
 80007b0:	2800      	cmpeq	r0, #0
 80007b2:	bf1c      	itt	ne
 80007b4:	f04f 31ff 	movne.w	r1, #4294967295
 80007b8:	f04f 30ff 	movne.w	r0, #4294967295
 80007bc:	f000 b972 	b.w	8000aa4 <__aeabi_idiv0>
 80007c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007c8:	f000 f806 	bl	80007d8 <__udivmoddi4>
 80007cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	4688      	mov	r8, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14b      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4615      	mov	r5, r2
 80007ea:	d967      	bls.n	80008bc <__udivmoddi4+0xe4>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0720 	rsb	r7, r2, #32
 80007f6:	fa01 f302 	lsl.w	r3, r1, r2
 80007fa:	fa20 f707 	lsr.w	r7, r0, r7
 80007fe:	4095      	lsls	r5, r2
 8000800:	ea47 0803 	orr.w	r8, r7, r3
 8000804:	4094      	lsls	r4, r2
 8000806:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800080a:	0c23      	lsrs	r3, r4, #16
 800080c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000810:	fa1f fc85 	uxth.w	ip, r5
 8000814:	fb0e 8817 	mls	r8, lr, r7, r8
 8000818:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081c:	fb07 f10c 	mul.w	r1, r7, ip
 8000820:	4299      	cmp	r1, r3
 8000822:	d909      	bls.n	8000838 <__udivmoddi4+0x60>
 8000824:	18eb      	adds	r3, r5, r3
 8000826:	f107 30ff 	add.w	r0, r7, #4294967295
 800082a:	f080 811b 	bcs.w	8000a64 <__udivmoddi4+0x28c>
 800082e:	4299      	cmp	r1, r3
 8000830:	f240 8118 	bls.w	8000a64 <__udivmoddi4+0x28c>
 8000834:	3f02      	subs	r7, #2
 8000836:	442b      	add	r3, r5
 8000838:	1a5b      	subs	r3, r3, r1
 800083a:	b2a4      	uxth	r4, r4
 800083c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000840:	fb0e 3310 	mls	r3, lr, r0, r3
 8000844:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000848:	fb00 fc0c 	mul.w	ip, r0, ip
 800084c:	45a4      	cmp	ip, r4
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x8c>
 8000850:	192c      	adds	r4, r5, r4
 8000852:	f100 33ff 	add.w	r3, r0, #4294967295
 8000856:	f080 8107 	bcs.w	8000a68 <__udivmoddi4+0x290>
 800085a:	45a4      	cmp	ip, r4
 800085c:	f240 8104 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000860:	3802      	subs	r0, #2
 8000862:	442c      	add	r4, r5
 8000864:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000868:	eba4 040c 	sub.w	r4, r4, ip
 800086c:	2700      	movs	r7, #0
 800086e:	b11e      	cbz	r6, 8000878 <__udivmoddi4+0xa0>
 8000870:	40d4      	lsrs	r4, r2
 8000872:	2300      	movs	r3, #0
 8000874:	e9c6 4300 	strd	r4, r3, [r6]
 8000878:	4639      	mov	r1, r7
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d909      	bls.n	8000896 <__udivmoddi4+0xbe>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80eb 	beq.w	8000a5e <__udivmoddi4+0x286>
 8000888:	2700      	movs	r7, #0
 800088a:	e9c6 0100 	strd	r0, r1, [r6]
 800088e:	4638      	mov	r0, r7
 8000890:	4639      	mov	r1, r7
 8000892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000896:	fab3 f783 	clz	r7, r3
 800089a:	2f00      	cmp	r7, #0
 800089c:	d147      	bne.n	800092e <__udivmoddi4+0x156>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d302      	bcc.n	80008a8 <__udivmoddi4+0xd0>
 80008a2:	4282      	cmp	r2, r0
 80008a4:	f200 80fa 	bhi.w	8000a9c <__udivmoddi4+0x2c4>
 80008a8:	1a84      	subs	r4, r0, r2
 80008aa:	eb61 0303 	sbc.w	r3, r1, r3
 80008ae:	2001      	movs	r0, #1
 80008b0:	4698      	mov	r8, r3
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d0e0      	beq.n	8000878 <__udivmoddi4+0xa0>
 80008b6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ba:	e7dd      	b.n	8000878 <__udivmoddi4+0xa0>
 80008bc:	b902      	cbnz	r2, 80008c0 <__udivmoddi4+0xe8>
 80008be:	deff      	udf	#255	; 0xff
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	f040 808f 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008ca:	1b49      	subs	r1, r1, r5
 80008cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008d0:	fa1f f885 	uxth.w	r8, r5
 80008d4:	2701      	movs	r7, #1
 80008d6:	fbb1 fcfe 	udiv	ip, r1, lr
 80008da:	0c23      	lsrs	r3, r4, #16
 80008dc:	fb0e 111c 	mls	r1, lr, ip, r1
 80008e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e4:	fb08 f10c 	mul.w	r1, r8, ip
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ec:	18eb      	adds	r3, r5, r3
 80008ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4299      	cmp	r1, r3
 80008f6:	f200 80cd 	bhi.w	8000a94 <__udivmoddi4+0x2bc>
 80008fa:	4684      	mov	ip, r0
 80008fc:	1a59      	subs	r1, r3, r1
 80008fe:	b2a3      	uxth	r3, r4
 8000900:	fbb1 f0fe 	udiv	r0, r1, lr
 8000904:	fb0e 1410 	mls	r4, lr, r0, r1
 8000908:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800090c:	fb08 f800 	mul.w	r8, r8, r0
 8000910:	45a0      	cmp	r8, r4
 8000912:	d907      	bls.n	8000924 <__udivmoddi4+0x14c>
 8000914:	192c      	adds	r4, r5, r4
 8000916:	f100 33ff 	add.w	r3, r0, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x14a>
 800091c:	45a0      	cmp	r8, r4
 800091e:	f200 80b6 	bhi.w	8000a8e <__udivmoddi4+0x2b6>
 8000922:	4618      	mov	r0, r3
 8000924:	eba4 0408 	sub.w	r4, r4, r8
 8000928:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800092c:	e79f      	b.n	800086e <__udivmoddi4+0x96>
 800092e:	f1c7 0c20 	rsb	ip, r7, #32
 8000932:	40bb      	lsls	r3, r7
 8000934:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000938:	ea4e 0e03 	orr.w	lr, lr, r3
 800093c:	fa01 f407 	lsl.w	r4, r1, r7
 8000940:	fa20 f50c 	lsr.w	r5, r0, ip
 8000944:	fa21 f30c 	lsr.w	r3, r1, ip
 8000948:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800094c:	4325      	orrs	r5, r4
 800094e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000952:	0c2c      	lsrs	r4, r5, #16
 8000954:	fb08 3319 	mls	r3, r8, r9, r3
 8000958:	fa1f fa8e 	uxth.w	sl, lr
 800095c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000960:	fb09 f40a 	mul.w	r4, r9, sl
 8000964:	429c      	cmp	r4, r3
 8000966:	fa02 f207 	lsl.w	r2, r2, r7
 800096a:	fa00 f107 	lsl.w	r1, r0, r7
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1e 0303 	adds.w	r3, lr, r3
 8000974:	f109 30ff 	add.w	r0, r9, #4294967295
 8000978:	f080 8087 	bcs.w	8000a8a <__udivmoddi4+0x2b2>
 800097c:	429c      	cmp	r4, r3
 800097e:	f240 8084 	bls.w	8000a8a <__udivmoddi4+0x2b2>
 8000982:	f1a9 0902 	sub.w	r9, r9, #2
 8000986:	4473      	add	r3, lr
 8000988:	1b1b      	subs	r3, r3, r4
 800098a:	b2ad      	uxth	r5, r5
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3310 	mls	r3, r8, r0, r3
 8000994:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000998:	fb00 fa0a 	mul.w	sl, r0, sl
 800099c:	45a2      	cmp	sl, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1e 0404 	adds.w	r4, lr, r4
 80009a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a8:	d26b      	bcs.n	8000a82 <__udivmoddi4+0x2aa>
 80009aa:	45a2      	cmp	sl, r4
 80009ac:	d969      	bls.n	8000a82 <__udivmoddi4+0x2aa>
 80009ae:	3802      	subs	r0, #2
 80009b0:	4474      	add	r4, lr
 80009b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009b6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ba:	eba4 040a 	sub.w	r4, r4, sl
 80009be:	454c      	cmp	r4, r9
 80009c0:	46c2      	mov	sl, r8
 80009c2:	464b      	mov	r3, r9
 80009c4:	d354      	bcc.n	8000a70 <__udivmoddi4+0x298>
 80009c6:	d051      	beq.n	8000a6c <__udivmoddi4+0x294>
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d069      	beq.n	8000aa0 <__udivmoddi4+0x2c8>
 80009cc:	ebb1 050a 	subs.w	r5, r1, sl
 80009d0:	eb64 0403 	sbc.w	r4, r4, r3
 80009d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80009d8:	40fd      	lsrs	r5, r7
 80009da:	40fc      	lsrs	r4, r7
 80009dc:	ea4c 0505 	orr.w	r5, ip, r5
 80009e0:	e9c6 5400 	strd	r5, r4, [r6]
 80009e4:	2700      	movs	r7, #0
 80009e6:	e747      	b.n	8000878 <__udivmoddi4+0xa0>
 80009e8:	f1c2 0320 	rsb	r3, r2, #32
 80009ec:	fa20 f703 	lsr.w	r7, r0, r3
 80009f0:	4095      	lsls	r5, r2
 80009f2:	fa01 f002 	lsl.w	r0, r1, r2
 80009f6:	fa21 f303 	lsr.w	r3, r1, r3
 80009fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009fe:	4338      	orrs	r0, r7
 8000a00:	0c01      	lsrs	r1, r0, #16
 8000a02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a06:	fa1f f885 	uxth.w	r8, r5
 8000a0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a12:	fb07 f308 	mul.w	r3, r7, r8
 8000a16:	428b      	cmp	r3, r1
 8000a18:	fa04 f402 	lsl.w	r4, r4, r2
 8000a1c:	d907      	bls.n	8000a2e <__udivmoddi4+0x256>
 8000a1e:	1869      	adds	r1, r5, r1
 8000a20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a24:	d22f      	bcs.n	8000a86 <__udivmoddi4+0x2ae>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d92d      	bls.n	8000a86 <__udivmoddi4+0x2ae>
 8000a2a:	3f02      	subs	r7, #2
 8000a2c:	4429      	add	r1, r5
 8000a2e:	1acb      	subs	r3, r1, r3
 8000a30:	b281      	uxth	r1, r0
 8000a32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a3e:	fb00 f308 	mul.w	r3, r0, r8
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d907      	bls.n	8000a56 <__udivmoddi4+0x27e>
 8000a46:	1869      	adds	r1, r5, r1
 8000a48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a4c:	d217      	bcs.n	8000a7e <__udivmoddi4+0x2a6>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d915      	bls.n	8000a7e <__udivmoddi4+0x2a6>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4429      	add	r1, r5
 8000a56:	1ac9      	subs	r1, r1, r3
 8000a58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a5c:	e73b      	b.n	80008d6 <__udivmoddi4+0xfe>
 8000a5e:	4637      	mov	r7, r6
 8000a60:	4630      	mov	r0, r6
 8000a62:	e709      	b.n	8000878 <__udivmoddi4+0xa0>
 8000a64:	4607      	mov	r7, r0
 8000a66:	e6e7      	b.n	8000838 <__udivmoddi4+0x60>
 8000a68:	4618      	mov	r0, r3
 8000a6a:	e6fb      	b.n	8000864 <__udivmoddi4+0x8c>
 8000a6c:	4541      	cmp	r1, r8
 8000a6e:	d2ab      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000a74:	eb69 020e 	sbc.w	r2, r9, lr
 8000a78:	3801      	subs	r0, #1
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	e7a4      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a7e:	4660      	mov	r0, ip
 8000a80:	e7e9      	b.n	8000a56 <__udivmoddi4+0x27e>
 8000a82:	4618      	mov	r0, r3
 8000a84:	e795      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a86:	4667      	mov	r7, ip
 8000a88:	e7d1      	b.n	8000a2e <__udivmoddi4+0x256>
 8000a8a:	4681      	mov	r9, r0
 8000a8c:	e77c      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a8e:	3802      	subs	r0, #2
 8000a90:	442c      	add	r4, r5
 8000a92:	e747      	b.n	8000924 <__udivmoddi4+0x14c>
 8000a94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a98:	442b      	add	r3, r5
 8000a9a:	e72f      	b.n	80008fc <__udivmoddi4+0x124>
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	e708      	b.n	80008b2 <__udivmoddi4+0xda>
 8000aa0:	4637      	mov	r7, r6
 8000aa2:	e6e9      	b.n	8000878 <__udivmoddi4+0xa0>

08000aa4 <__aeabi_idiv0>:
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>:
Motor m3(&htim1, TIM_CHANNEL_1);
Motor m4(&htim3, TIM_CHANNEL_4);
Motor m5(&htim3, TIM_CHANNEL_2);
Motor m6(&htim3, TIM_CHANNEL_1);

Motor::Motor(TIM_HandleTypeDef *htim, uint32_t Channel)
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	: htim(htim)
	, Channel(Channel)
	, pwm(1000)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ac6:	811a      	strh	r2, [r3, #8]
{ }
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_ZN2FC5Motor5startEv>:

void Motor::start(){
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim, Channel);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4610      	mov	r0, r2
 8000aea:	f01d fa27 	bl	801df3c <HAL_TIM_PWM_Start>
	setPWM(1000);
 8000aee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 f804 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_ZN2FC5Motor6setPWMEt>:

void Motor::stop(){
	HAL_TIMEx_PWMN_Stop(htim, Channel);
}

void Motor::setPWM(uint16_t pwm){
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
	if(pwm < MIN_PWM) 			pwm = MIN_PWM;
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b12:	d203      	bcs.n	8000b1c <_ZN2FC5Motor6setPWMEt+0x1c>
 8000b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b18:	807b      	strh	r3, [r7, #2]
 8000b1a:	e006      	b.n	8000b2a <_ZN2FC5Motor6setPWMEt+0x2a>
	else if(pwm > MAX_PWM)		pwm = MAX_PWM;
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b22:	d902      	bls.n	8000b2a <_ZN2FC5Motor6setPWMEt+0x2a>
 8000b24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b28:	807b      	strh	r3, [r7, #2]

	this->pwm = pwm;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	887a      	ldrh	r2, [r7, #2]
 8000b2e:	811a      	strh	r2, [r3, #8]

	/*
	 *  pwm(1000 ~ 2000) scale to CCR register value(10500 ~ 21000);
	 */
	uint16_t output = (pwm - MIN_PWM) * ((MAX_CCR - MIN_CCR) / (MAX_PWM - MIN_PWM)) + MIN_CCR;
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	461a      	mov	r2, r3
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	4413      	add	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d105      	bne.n	8000b52 <_ZN2FC5Motor6setPWMEt+0x52>
 8000b46:	89fa      	ldrh	r2, [r7, #14]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b50:	e02c      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d105      	bne.n	8000b66 <_ZN2FC5Motor6setPWMEt+0x66>
 8000b5a:	89fa      	ldrh	r2, [r7, #14]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b64:	e022      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d105      	bne.n	8000b7a <_ZN2FC5Motor6setPWMEt+0x7a>
 8000b6e:	89fa      	ldrh	r2, [r7, #14]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b78:	e018      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b0c      	cmp	r3, #12
 8000b80:	d105      	bne.n	8000b8e <_ZN2FC5Motor6setPWMEt+0x8e>
 8000b82:	89fa      	ldrh	r2, [r7, #14]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b8c:	e00e      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b10      	cmp	r3, #16
 8000b94:	d105      	bne.n	8000ba2 <_ZN2FC5Motor6setPWMEt+0xa2>
 8000b96:	89fa      	ldrh	r2, [r7, #14]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000ba0:	e004      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000ba2:	89fa      	ldrh	r2, [r7, #14]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_Z41__static_initialization_and_destruction_0ii>:

} /* namespace FC */
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d122      	bne.n	8000c0e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d11d      	bne.n	8000c0e <_Z41__static_initialization_and_destruction_0ii+0x56>
Motor m1(&htim1, TIM_CHANNEL_3);
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	4910      	ldr	r1, [pc, #64]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000bd8:	f7ff ff66 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m2(&htim1, TIM_CHANNEL_4);
 8000bdc:	220c      	movs	r2, #12
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000be0:	480f      	ldr	r0, [pc, #60]	; (8000c20 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000be2:	f7ff ff61 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m3(&htim1, TIM_CHANNEL_1);
 8000be6:	2200      	movs	r2, #0
 8000be8:	490b      	ldr	r1, [pc, #44]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000bec:	f7ff ff5c 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m4(&htim3, TIM_CHANNEL_4);
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000bf6:	f7ff ff57 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m5(&htim3, TIM_CHANNEL_2);
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	490a      	ldr	r1, [pc, #40]	; (8000c28 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000c00:	f7ff ff52 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m6(&htim3, TIM_CHANNEL_1);
 8000c04:	2200      	movs	r2, #0
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000c0a:	f7ff ff4d 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
} /* namespace FC */
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2400c5e0 	.word	0x2400c5e0
 8000c1c:	24000734 	.word	0x24000734
 8000c20:	24000740 	.word	0x24000740
 8000c24:	2400074c 	.word	0x2400074c
 8000c28:	2400c594 	.word	0x2400c594
 8000c2c:	24000758 	.word	0x24000758
 8000c30:	24000764 	.word	0x24000764
 8000c34:	24000770 	.word	0x24000770

08000c38 <_GLOBAL__sub_I__ZN2FC2m1E>:
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff ffb9 	bl	8000bb8 <_Z41__static_initialization_and_destruction_0ii>
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <IST8310+0x24>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 8000c56:	f000 f8f7 	bl	8000e48 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 8000c5a:	210b      	movs	r1, #11
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f000 f8e1 	bl	8000e24 <IST8310_write_reg>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24001320 	.word	0x24001320

08000c70 <IST8310_i2cRxCpltCallback>:

	HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
	bm_i2cFlag = bm_i2cIST8310;

}
uint8_t IST8310_i2cRxCpltCallback(){
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return 0;
 8000c74:	4b5a      	ldr	r3, [pc, #360]	; (8000de0 <IST8310_i2cRxCpltCallback+0x170>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d001      	beq.n	8000c80 <IST8310_i2cRxCpltCallback+0x10>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e098      	b.n	8000db2 <IST8310_i2cRxCpltCallback+0x142>

	bm_i2cFlag = bm_i2cIdle;
 8000c80:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <IST8310_i2cRxCpltCallback+0x170>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 8000c86:	4b57      	ldr	r3, [pc, #348]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c88:	795b      	ldrb	r3, [r3, #5]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b55      	ldr	r3, [pc, #340]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c90:	791b      	ldrb	r3, [r3, #4]
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	4b52      	ldr	r3, [pc, #328]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c9a:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 8000c9c:	4b51      	ldr	r3, [pc, #324]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c9e:	79db      	ldrb	r3, [r3, #7]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	4b4f      	ldr	r3, [pc, #316]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000ca6:	799b      	ldrb	r3, [r3, #6]
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	4b4d      	ldr	r3, [pc, #308]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cb0:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 8000cb2:	4b4c      	ldr	r3, [pc, #304]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cb4:	7a5b      	ldrb	r3, [r3, #9]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cbc:	7a1b      	ldrb	r3, [r3, #8]
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cc6:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8000cc8:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cd6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8000dc0 <IST8310_i2cRxCpltCallback+0x150>
 8000cda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce2:	dc45      	bgt.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
 8000ce4:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000ce6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cf2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000dc8 <IST8310_i2cRxCpltCallback+0x158>
 8000cf6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfe:	d437      	bmi.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000d00:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d02:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8000d0e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000dc0 <IST8310_i2cRxCpltCallback+0x150>
 8000d12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	dc29      	bgt.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d2a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000dc8 <IST8310_i2cRxCpltCallback+0x158>
 8000d2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d36:	d41b      	bmi.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d3a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000d46:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000dd0 <IST8310_i2cRxCpltCallback+0x160>
 8000d4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d52:	dc0d      	bgt.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d62:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000dd8 <IST8310_i2cRxCpltCallback+0x168>
 8000d66:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	d501      	bpl.n	8000d74 <IST8310_i2cRxCpltCallback+0x104>
	{
		return 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	e01e      	b.n	8000db2 <IST8310_i2cRxCpltCallback+0x142>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d76:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d7a:	ee07 3a90 	vmov	s15, r3
 8000d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d84:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d8e:	ee07 3a90 	vmov	s15, r3
 8000d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d98:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d9e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000dac:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	55555556 	.word	0x55555556
 8000dc4:	40b4d655 	.word	0x40b4d655
 8000dc8:	55555556 	.word	0x55555556
 8000dcc:	c0b4d655 	.word	0xc0b4d655
 8000dd0:	aaaaaaab 	.word	0xaaaaaaab
 8000dd4:	40c0472a 	.word	0x40c0472a
 8000dd8:	aaaaaaab 	.word	0xaaaaaaab
 8000ddc:	c0c0472a 	.word	0xc0c0472a
 8000de0:	2400133c 	.word	0x2400133c
 8000de4:	24001320 	.word	0x24001320

08000de8 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <IST8310_write+0x38>)
 8000dfa:	6818      	ldr	r0, [r3, #0]
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	b299      	uxth	r1, r3
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	2264      	movs	r2, #100	; 0x64
 8000e06:	9202      	str	r2, [sp, #8]
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	460a      	mov	r2, r1
 8000e12:	211c      	movs	r1, #28
 8000e14:	f015 ff30 	bl	8016c78 <HAL_I2C_Mem_Write>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	24001320 	.word	0x24001320

08000e24 <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 8000e34:	1db9      	adds	r1, r7, #6
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffd4 	bl	8000de8 <IST8310_write>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f7ff ffe8 	bl	8000e24 <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 8000e54:	2124      	movs	r1, #36	; 0x24
 8000e56:	2041      	movs	r0, #65	; 0x41
 8000e58:	f7ff ffe4 	bl	8000e24 <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 8000e5c:	21c0      	movs	r1, #192	; 0xc0
 8000e5e:	2042      	movs	r0, #66	; 0x42
 8000e60:	f7ff ffe0 	bl	8000e24 <IST8310_write_reg>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <Lidar1D_CaptureCallback>:
	if(HAL_TIM_IC_Start_IT(lidar1D.htim, lidar1D.indirectChannel) != HAL_OK) Error_Handler();
	return HAL_OK;
}


void Lidar1D_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	if(htim->Instance != lidar1D.htim->Instance) return;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d118      	bne.n	8000eb0 <Lidar1D_CaptureCallback+0x48>

	if(htim->Channel == lidar1D.activeChannel1){
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7f1a      	ldrb	r2, [r3, #28]
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000e84:	7b1b      	ldrb	r3, [r3, #12]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d104      	bne.n	8000e94 <Lidar1D_CaptureCallback+0x2c>
//		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		lidar1D.htim->Instance->CNT = 0;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(htim->Channel == lidar1D.activeChannel2){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7f1a      	ldrb	r2, [r3, #28]
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000e9a:	7b5b      	ldrb	r3, [r3, #13]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d108      	bne.n	8000eb2 <Lidar1D_CaptureCallback+0x4a>
		lidar1D.distance_mm = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f01d fcb2 	bl	801e80c <HAL_TIM_ReadCapturedValue>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	e000      	b.n	8000eb2 <Lidar1D_CaptureCallback+0x4a>
	if(htim->Instance != lidar1D.htim->Instance) return;
 8000eb0:	bf00      	nop
	}
}
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2400077c 	.word	0x2400077c

08000ebc <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 8000ec4:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <MPU9250+0xec>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <MPU9250+0xec>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MPU9250+0xec>)
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <MPU9250+0xec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <MPU9250+0xec>)
 8000ede:	2206      	movs	r2, #6
 8000ee0:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <MPU9250+0xec>)
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <MPU9250+0xec>)
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MPU9250+0xec>)
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 8000efa:	2206      	movs	r2, #6
 8000efc:	2100      	movs	r1, #0
 8000efe:	482b      	ldr	r0, [pc, #172]	; (8000fac <MPU9250+0xf0>)
 8000f00:	f02a fd65 	bl	802b9ce <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 8000f04:	2206      	movs	r2, #6
 8000f06:	2100      	movs	r1, #0
 8000f08:	4829      	ldr	r0, [pc, #164]	; (8000fb0 <MPU9250+0xf4>)
 8000f0a:	f02a fd60 	bl	802b9ce <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 8000f0e:	2206      	movs	r2, #6
 8000f10:	2100      	movs	r1, #0
 8000f12:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <MPU9250+0xf8>)
 8000f14:	f02a fd5b 	bl	802b9ce <memset>
	mpu9250.tmpCount = 0;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MPU9250+0xec>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 8000f1e:	220c      	movs	r2, #12
 8000f20:	2100      	movs	r1, #0
 8000f22:	4825      	ldr	r0, [pc, #148]	; (8000fb8 <MPU9250+0xfc>)
 8000f24:	f02a fd53 	bl	802b9ce <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 8000f28:	220c      	movs	r2, #12
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MPU9250+0x100>)
 8000f2e:	f02a fd4e 	bl	802b9ce <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 8000f32:	220c      	movs	r2, #12
 8000f34:	2100      	movs	r1, #0
 8000f36:	4822      	ldr	r0, [pc, #136]	; (8000fc0 <MPU9250+0x104>)
 8000f38:	f02a fd49 	bl	802b9ce <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <MPU9250+0x108>)
 8000f42:	f02a fd44 	bl	802b9ce <memset>
	mpu9250.tmp = 0;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MPU9250+0xec>)
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 8000f4e:	220e      	movs	r2, #14
 8000f50:	2100      	movs	r1, #0
 8000f52:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <MPU9250+0x10c>)
 8000f54:	f02a fd3b 	bl	802b9ce <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 8000f58:	2207      	movs	r2, #7
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	481b      	ldr	r0, [pc, #108]	; (8000fcc <MPU9250+0x110>)
 8000f5e:	f02a fd36 	bl	802b9ce <memset>
	mpu9250.AK8963_lastUpdate = 0;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MPU9250+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MPU9250+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MPU9250+0xec>)
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <MPU9250+0x114>)
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MPU9250+0xec>)
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <MPU9250+0x118>)
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MPU9250+0xec>)
 8000f80:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <MPU9250+0x11c>)
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 8000f84:	f000 fa22 	bl	80013cc <MPU9250_getMres>
	MPU9250_getGres();
 8000f88:	f000 fa3c 	bl	8001404 <MPU9250_getGres>
	MPU9250_getAres();
 8000f8c:	f000 fa6c 	bl	8001468 <MPU9250_getAres>

	MPU9250_resetMPU9250();
 8000f90:	f000 fa98 	bl	80014c4 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 8000f94:	f000 fb84 	bl	80016a0 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 8000f98:	f000 fb0e 	bl	80015b8 <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 8000f9c:	f000 fa9e 	bl	80014dc <MPU9250_initAK8963>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24000fa4 	.word	0x24000fa4
 8000fac:	24000fb8 	.word	0x24000fb8
 8000fb0:	24000fbe 	.word	0x24000fbe
 8000fb4:	24000fc4 	.word	0x24000fc4
 8000fb8:	24000fcc 	.word	0x24000fcc
 8000fbc:	24000fe4 	.word	0x24000fe4
 8000fc0:	24000ff0 	.word	0x24000ff0
 8000fc4:	24000ffc 	.word	0x24000ffc
 8000fc8:	2400100c 	.word	0x2400100c
 8000fcc:	2400101a 	.word	0x2400101a
 8000fd0:	438c0000 	.word	0x438c0000
 8000fd4:	438e8000 	.word	0x438e8000
 8000fd8:	43a50000 	.word	0x43a50000

08000fdc <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MPU9250_updateDMA+0x38>)
 8000fe4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10f      	bne.n	800100c <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MPU9250_updateDMA+0x38>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MPU9250_updateDMA+0x38>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	230e      	movs	r3, #14
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MPU9250_updateDMA+0x3c>)
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	223b      	movs	r2, #59	; 0x3b
 8001004:	21d0      	movs	r1, #208	; 0xd0
 8001006:	f016 f8fb 	bl	8017200 <HAL_I2C_Mem_Read_DMA>
 800100a:	e000      	b.n	800100e <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 800100c:	bf00      	nop
}
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	24000fa4 	.word	0x24000fa4
 8001018:	2400100c 	.word	0x2400100c

0800101c <MPU9250_i2cRxCpltCallback>:

uint8_t MPU9250_i2cRxCpltCallback(){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af02      	add	r7, sp, #8
	static uint8_t res = 0;
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001024:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001028:	2b01      	cmp	r3, #1
 800102a:	d12a      	bne.n	8001082 <MPU9250_i2cRxCpltCallback+0x66>
		if(MPU9250_calRawData() != MPU9250_Fail){
 800102c:	f000 f848 	bl	80010c0 <MPU9250_calRawData>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <MPU9250_i2cRxCpltCallback+0x24>
			MPU9250_calCalibValue();
 8001036:	f000 f8c5 	bl	80011c4 <MPU9250_calCalibValue>
			res = 1;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MPU9250_i2cRxCpltCallback+0x9c>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 8001040:	f025 fe48 	bl	8026cd4 <xTaskGetTickCount>
 8001044:	4602      	mov	r2, r0
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b0a      	cmp	r3, #10
 8001050:	d926      	bls.n	80010a0 <MPU9250_i2cRxCpltCallback+0x84>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001054:	2202      	movs	r2, #2
 8001056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	2307      	movs	r3, #7
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MPU9250_i2cRxCpltCallback+0xa0>)
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	2118      	movs	r1, #24
 800106c:	f016 f8c8 	bl	8017200 <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 8001070:	f025 fe30 	bl	8026cd4 <xTaskGetTickCount>
 8001074:	4602      	mov	r2, r0
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return res;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MPU9250_i2cRxCpltCallback+0x9c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	e014      	b.n	80010ac <MPU9250_i2cRxCpltCallback+0x90>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001084:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001088:	2b02      	cmp	r3, #2
 800108a:	d109      	bne.n	80010a0 <MPU9250_i2cRxCpltCallback+0x84>
		if(AK8963_calRawData() == MPU9250_Success){
 800108c:	f000 f90c 	bl	80012a8 <AK8963_calRawData>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d104      	bne.n	80010a0 <MPU9250_i2cRxCpltCallback+0x84>
			AK8963_calCalibValue();
 8001096:	f000 f945 	bl	8001324 <AK8963_calCalibValue>
			res = 2;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MPU9250_i2cRxCpltCallback+0x9c>)
 800109c:	2202      	movs	r2, #2
 800109e:	701a      	strb	r2, [r3, #0]
		}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	return res;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <MPU9250_i2cRxCpltCallback+0x9c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000fa4 	.word	0x24000fa4
 80010b8:	24000790 	.word	0x24000790
 80010bc:	2400101a 	.word	0x2400101a

080010c0 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 80010c4:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010c6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010d0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21b      	sxth	r3, r3
 80010da:	b29b      	uxth	r3, r3
 80010dc:	425b      	negs	r3, r3
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010e4:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010e8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010f2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	425b      	negs	r3, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	b21a      	sxth	r2, r3
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001106:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MPU9250_calRawData+0x100>)
 800110a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001114:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21b      	sxth	r3, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	425b      	negs	r3, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001128:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <MPU9250_calRawData+0x100>)
 800112c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001136:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001142:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001146:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001150:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MPU9250_calRawData+0x100>)
 800115c:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001160:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MPU9250_calRawData+0x100>)
 800116a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001176:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MPU9250_calRawData+0x100>)
 800117a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001184:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21a      	sxth	r2, r3
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001190:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001194:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10b      	bne.n	80011b4 <MPU9250_calRawData+0xf4>
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MPU9250_calRawData+0x100>)
 800119e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <MPU9250_calRawData+0xf4>
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MPU9250_calRawData+0x100>)
 80011a8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <MPU9250_calRawData+0xf4>
 80011b0:	2300      	movs	r3, #0
 80011b2:	e000      	b.n	80011b6 <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	24000fa4 	.word	0x24000fa4

080011c4 <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011e2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001200:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001206:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001214:	edd3 7a02 	vldr	s15, [r3, #8]
 8001218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 800121e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001224:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001232:	edd3 7a03 	vldr	s15, [r3, #12]
 8001236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012a4 <MPU9250_calCalibValue+0xe0>
 800123e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001244:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 800124a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001258:	edd3 7a03 	vldr	s15, [r3, #12]
 800125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001260:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012a4 <MPU9250_calCalibValue+0xe0>
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 800126a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001270:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 800127e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001286:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012a4 <MPU9250_calCalibValue+0xe0>
 800128a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001290:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	24000fa4 	.word	0x24000fa4
 80012a4:	3c8efa35 	.word	0x3c8efa35

080012a8 <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <AK8963_calRawData+0x78>)
 80012ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <AK8963_calRawData+0x16>
 80012ba:	2300      	movs	r3, #0
 80012bc:	e02b      	b.n	8001316 <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <AK8963_calRawData+0x78>)
 80012c0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <AK8963_calRawData+0x78>)
 80012ca:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <AK8963_calRawData+0x78>)
 80012d6:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <AK8963_calRawData+0x78>)
 80012da:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <AK8963_calRawData+0x78>)
 80012e4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <AK8963_calRawData+0x78>)
 80012f0:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <AK8963_calRawData+0x78>)
 80012f4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <AK8963_calRawData+0x78>)
 80012fe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21b      	sxth	r3, r3
 8001308:	b29b      	uxth	r3, r3
 800130a:	425b      	negs	r3, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <AK8963_calRawData+0x78>)
 8001312:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	24000fa4 	.word	0x24000fa4

08001324 <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800132a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001338:	edd3 7a04 	vldr	s15, [r3, #16]
 800133c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001342:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800134c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001356:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800135c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800136a:	edd3 7a04 	vldr	s15, [r3, #16]
 800136e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001374:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800137e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001388:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800138e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800139c:	edd3 7a04 	vldr	s15, [r3, #16]
 80013a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 80013a6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 80013b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80013b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 80013ba:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	24000fa4 	.word	0x24000fa4

080013cc <MPU9250_getMres>:

void MPU9250_getMres() {
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MPU9250_getMres+0x2c>)
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <MPU9250_getMres+0x12>
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d004      	beq.n	80013e6 <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 80013dc:	e007      	b.n	80013ee <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MPU9250_getMres+0x2c>)
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <MPU9250_getMres+0x30>)
 80013e2:	611a      	str	r2, [r3, #16]
		  break;
 80013e4:	e003      	b.n	80013ee <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <MPU9250_getMres+0x2c>)
 80013e8:	4a05      	ldr	r2, [pc, #20]	; (8001400 <MPU9250_getMres+0x34>)
 80013ea:	611a      	str	r2, [r3, #16]
		  break;
 80013ec:	bf00      	nop
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	24000fa4 	.word	0x24000fa4
 80013fc:	40bfebff 	.word	0x40bfebff
 8001400:	3fbfebff 	.word	0x3fbfebff

08001404 <MPU9250_getGres>:

void MPU9250_getGres() {
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MPU9250_getGres+0x50>)
 800140a:	795b      	ldrb	r3, [r3, #5]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d81b      	bhi.n	8001448 <MPU9250_getGres+0x44>
 8001410:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <MPU9250_getGres+0x14>)
 8001412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001416:	bf00      	nop
 8001418:	08001429 	.word	0x08001429
 800141c:	08001431 	.word	0x08001431
 8001420:	08001439 	.word	0x08001439
 8001424:	08001441 	.word	0x08001441
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MPU9250_getGres+0x50>)
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <MPU9250_getGres+0x54>)
 800142c:	60da      	str	r2, [r3, #12]
          break;
 800142e:	e00b      	b.n	8001448 <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MPU9250_getGres+0x50>)
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <MPU9250_getGres+0x58>)
 8001434:	60da      	str	r2, [r3, #12]
          break;
 8001436:	e007      	b.n	8001448 <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MPU9250_getGres+0x50>)
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <MPU9250_getGres+0x5c>)
 800143c:	60da      	str	r2, [r3, #12]
          break;
 800143e:	e003      	b.n	8001448 <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <MPU9250_getGres+0x50>)
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <MPU9250_getGres+0x60>)
 8001444:	60da      	str	r2, [r3, #12]
          break;
 8001446:	bf00      	nop
  }
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	24000fa4 	.word	0x24000fa4
 8001458:	3bfa0000 	.word	0x3bfa0000
 800145c:	3c7a0000 	.word	0x3c7a0000
 8001460:	3cfa0000 	.word	0x3cfa0000
 8001464:	3d7a0000 	.word	0x3d7a0000

08001468 <MPU9250_getAres>:


void MPU9250_getAres() {
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MPU9250_getAres+0x58>)
 800146e:	791b      	ldrb	r3, [r3, #4]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d81f      	bhi.n	80014b4 <MPU9250_getAres+0x4c>
 8001474:	a201      	add	r2, pc, #4	; (adr r2, 800147c <MPU9250_getAres+0x14>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	0800148d 	.word	0x0800148d
 8001480:	08001497 	.word	0x08001497
 8001484:	080014a1 	.word	0x080014a1
 8001488:	080014ab 	.word	0x080014ab
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MPU9250_getAres+0x58>)
 800148e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001492:	609a      	str	r2, [r3, #8]
          break;
 8001494:	e00e      	b.n	80014b4 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MPU9250_getAres+0x58>)
 8001498:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800149c:	609a      	str	r2, [r3, #8]
          break;
 800149e:	e009      	b.n	80014b4 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MPU9250_getAres+0x58>)
 80014a2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80014a6:	609a      	str	r2, [r3, #8]
          break;
 80014a8:	e004      	b.n	80014b4 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <MPU9250_getAres+0x58>)
 80014ac:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80014b0:	609a      	str	r2, [r3, #8]
          break;
 80014b2:	bf00      	nop
  }
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	24000fa4 	.word	0x24000fa4

080014c4 <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	216b      	movs	r1, #107	; 0x6b
 80014cc:	20d0      	movs	r0, #208	; 0xd0
 80014ce:	f000 fb3f 	bl	8001b50 <MPU9250_writeByte>
    HAL_Delay(10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f011 fdcc 	bl	8013070 <HAL_Delay>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80014e2:	2200      	movs	r2, #0
 80014e4:	210a      	movs	r1, #10
 80014e6:	2018      	movs	r0, #24
 80014e8:	f000 fb32 	bl	8001b50 <MPU9250_writeByte>
	HAL_Delay(10);
 80014ec:	200a      	movs	r0, #10
 80014ee:	f011 fdbf 	bl	8013070 <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80014f2:	220f      	movs	r2, #15
 80014f4:	210a      	movs	r1, #10
 80014f6:	2018      	movs	r0, #24
 80014f8:	f000 fb2a 	bl	8001b50 <MPU9250_writeByte>
	HAL_Delay(10);
 80014fc:	200a      	movs	r0, #10
 80014fe:	f011 fdb7 	bl	8013070 <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2203      	movs	r2, #3
 8001506:	2110      	movs	r1, #16
 8001508:	2018      	movs	r0, #24
 800150a:	f000 fb3f 	bl	8001b8c <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	3b80      	subs	r3, #128	; 0x80
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800151a:	eddf 6a25 	vldr	s13, [pc, #148]	; 80015b0 <MPU9250_initAK8963+0xd4>
 800151e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 800152c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001530:	797b      	ldrb	r3, [r7, #5]
 8001532:	3b80      	subs	r3, #128	; 0x80
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80015b0 <MPU9250_initAK8963+0xd4>
 8001540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 800154e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 8001552:	79bb      	ldrb	r3, [r7, #6]
 8001554:	3b80      	subs	r3, #128	; 0x80
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155e:	eddf 6a14 	vldr	s13, [pc, #80]	; 80015b0 <MPU9250_initAK8963+0xd4>
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800156a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 8001570:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001574:	2200      	movs	r2, #0
 8001576:	210a      	movs	r1, #10
 8001578:	2018      	movs	r0, #24
 800157a:	f000 fae9 	bl	8001b50 <MPU9250_writeByte>
	HAL_Delay(10);
 800157e:	200a      	movs	r0, #10
 8001580:	f011 fd76 	bl	8013070 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 8001586:	799b      	ldrb	r3, [r3, #6]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b25a      	sxtb	r2, r3
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 800158e:	79db      	ldrb	r3, [r3, #7]
 8001590:	b25b      	sxtb	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b25b      	sxtb	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	210a      	movs	r1, #10
 800159c:	2018      	movs	r0, #24
 800159e:	f000 fad7 	bl	8001b50 <MPU9250_writeByte>
	HAL_Delay(10);
 80015a2:	200a      	movs	r0, #10
 80015a4:	f011 fd64 	bl	8013070 <HAL_Delay>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	43800000 	.word	0x43800000
 80015b4:	24000fa4 	.word	0x24000fa4

080015b8 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80015be:	2200      	movs	r2, #0
 80015c0:	216b      	movs	r1, #107	; 0x6b
 80015c2:	20d0      	movs	r0, #208	; 0xd0
 80015c4:	f000 fac4 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80015c8:	2064      	movs	r0, #100	; 0x64
 80015ca:	f011 fd51 	bl	8013070 <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80015ce:	2201      	movs	r2, #1
 80015d0:	216b      	movs	r1, #107	; 0x6b
 80015d2:	20d0      	movs	r0, #208	; 0xd0
 80015d4:	f000 fabc 	bl	8001b50 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 80015d8:	2203      	movs	r2, #3
 80015da:	211a      	movs	r1, #26
 80015dc:	20d0      	movs	r0, #208	; 0xd0
 80015de:	f000 fab7 	bl	8001b50 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80015e2:	2204      	movs	r2, #4
 80015e4:	2119      	movs	r1, #25
 80015e6:	20d0      	movs	r0, #208	; 0xd0
 80015e8:	f000 fab2 	bl	8001b50 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80015ec:	211b      	movs	r1, #27
 80015ee:	20d0      	movs	r0, #208	; 0xd0
 80015f0:	f000 faee 	bl	8001bd0 <MPU9250_readByte>
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f023 0302 	bic.w	r3, r3, #2
 80015fe:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f023 0318 	bic.w	r3, r3, #24
 8001606:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <MPU9250_initMPU9250+0xe4>)
 800160a:	795b      	ldrb	r3, [r3, #5]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	b25a      	sxtb	r2, r3
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4313      	orrs	r3, r2
 8001616:	b25b      	sxtb	r3, r3
 8001618:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	461a      	mov	r2, r3
 800161e:	211b      	movs	r1, #27
 8001620:	20d0      	movs	r0, #208	; 0xd0
 8001622:	f000 fa95 	bl	8001b50 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8001626:	211c      	movs	r1, #28
 8001628:	20d0      	movs	r0, #208	; 0xd0
 800162a:	f000 fad1 	bl	8001bd0 <MPU9250_readByte>
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f023 0318 	bic.w	r3, r3, #24
 8001638:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <MPU9250_initMPU9250+0xe4>)
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	b25a      	sxtb	r2, r3
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	4313      	orrs	r3, r2
 8001648:	b25b      	sxtb	r3, r3
 800164a:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	461a      	mov	r2, r3
 8001650:	211c      	movs	r1, #28
 8001652:	20d0      	movs	r0, #208	; 0xd0
 8001654:	f000 fa7c 	bl	8001b50 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8001658:	211d      	movs	r1, #29
 800165a:	20d0      	movs	r0, #208	; 0xd0
 800165c:	f000 fab8 	bl	8001bd0 <MPU9250_readByte>
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f023 030f 	bic.w	r3, r3, #15
 800166a:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f043 0303 	orr.w	r3, r3, #3
 8001672:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	461a      	mov	r2, r3
 8001678:	211d      	movs	r1, #29
 800167a:	20d0      	movs	r0, #208	; 0xd0
 800167c:	f000 fa68 	bl	8001b50 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001680:	2222      	movs	r2, #34	; 0x22
 8001682:	2137      	movs	r1, #55	; 0x37
 8001684:	20d0      	movs	r0, #208	; 0xd0
 8001686:	f000 fa63 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800168a:	2201      	movs	r2, #1
 800168c:	2138      	movs	r1, #56	; 0x38
 800168e:	20d0      	movs	r0, #208	; 0xd0
 8001690:	f000 fa5e 	bl	8001b50 <MPU9250_writeByte>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24000fa4 	.word	0x24000fa4

080016a0 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b094      	sub	sp, #80	; 0x50
 80016a4:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	216b      	movs	r1, #107	; 0x6b
 80016c2:	20d0      	movs	r0, #208	; 0xd0
 80016c4:	f000 fa44 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(100);
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	f011 fcd1 	bl	8013070 <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 80016ce:	2201      	movs	r2, #1
 80016d0:	216b      	movs	r1, #107	; 0x6b
 80016d2:	20d0      	movs	r0, #208	; 0xd0
 80016d4:	f000 fa3c 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 80016d8:	2200      	movs	r2, #0
 80016da:	216c      	movs	r1, #108	; 0x6c
 80016dc:	20d0      	movs	r0, #208	; 0xd0
 80016de:	f000 fa37 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(200);
 80016e2:	20c8      	movs	r0, #200	; 0xc8
 80016e4:	f011 fcc4 	bl	8013070 <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 80016e8:	2200      	movs	r2, #0
 80016ea:	2138      	movs	r1, #56	; 0x38
 80016ec:	20d0      	movs	r0, #208	; 0xd0
 80016ee:	f000 fa2f 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 80016f2:	2200      	movs	r2, #0
 80016f4:	2123      	movs	r1, #35	; 0x23
 80016f6:	20d0      	movs	r0, #208	; 0xd0
 80016f8:	f000 fa2a 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 80016fc:	2200      	movs	r2, #0
 80016fe:	216b      	movs	r1, #107	; 0x6b
 8001700:	20d0      	movs	r0, #208	; 0xd0
 8001702:	f000 fa25 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001706:	2200      	movs	r2, #0
 8001708:	2124      	movs	r1, #36	; 0x24
 800170a:	20d0      	movs	r0, #208	; 0xd0
 800170c:	f000 fa20 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001710:	2200      	movs	r2, #0
 8001712:	216a      	movs	r1, #106	; 0x6a
 8001714:	20d0      	movs	r0, #208	; 0xd0
 8001716:	f000 fa1b 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 800171a:	220c      	movs	r2, #12
 800171c:	216a      	movs	r1, #106	; 0x6a
 800171e:	20d0      	movs	r0, #208	; 0xd0
 8001720:	f000 fa16 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(15);
 8001724:	200f      	movs	r0, #15
 8001726:	f011 fca3 	bl	8013070 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 800172a:	2201      	movs	r2, #1
 800172c:	211a      	movs	r1, #26
 800172e:	20d0      	movs	r0, #208	; 0xd0
 8001730:	f000 fa0e 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001734:	2200      	movs	r2, #0
 8001736:	2119      	movs	r1, #25
 8001738:	20d0      	movs	r0, #208	; 0xd0
 800173a:	f000 fa09 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800173e:	2200      	movs	r2, #0
 8001740:	211b      	movs	r1, #27
 8001742:	20d0      	movs	r0, #208	; 0xd0
 8001744:	f000 fa04 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001748:	2200      	movs	r2, #0
 800174a:	211c      	movs	r1, #28
 800174c:	20d0      	movs	r0, #208	; 0xd0
 800174e:	f000 f9ff 	bl	8001b50 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	216a      	movs	r1, #106	; 0x6a
 8001756:	20d0      	movs	r0, #208	; 0xd0
 8001758:	f000 f9fa 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 800175c:	2278      	movs	r2, #120	; 0x78
 800175e:	2123      	movs	r1, #35	; 0x23
 8001760:	20d0      	movs	r0, #208	; 0xd0
 8001762:	f000 f9f5 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001766:	2028      	movs	r0, #40	; 0x28
 8001768:	f011 fc82 	bl	8013070 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800176c:	2200      	movs	r2, #0
 800176e:	2123      	movs	r1, #35	; 0x23
 8001770:	20d0      	movs	r0, #208	; 0xd0
 8001772:	f000 f9ed 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001776:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800177a:	2202      	movs	r2, #2
 800177c:	2172      	movs	r1, #114	; 0x72
 800177e:	20d0      	movs	r0, #208	; 0xd0
 8001780:	f000 fa04 	bl	8001b8c <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001784:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b21a      	sxth	r2, r3
 800178c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21b      	sxth	r3, r3
 8001796:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 800179a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800179e:	4ab3      	ldr	r2, [pc, #716]	; (8001a6c <MPU9250_calibrateMPU9250+0x3cc>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80017b0:	e071      	b.n	8001896 <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80017b2:	2300      	movs	r3, #0
 80017b4:	813b      	strh	r3, [r7, #8]
 80017b6:	2300      	movs	r3, #0
 80017b8:	817b      	strh	r3, [r7, #10]
 80017ba:	2300      	movs	r3, #0
 80017bc:	81bb      	strh	r3, [r7, #12]
 80017be:	2300      	movs	r3, #0
 80017c0:	803b      	strh	r3, [r7, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	807b      	strh	r3, [r7, #2]
 80017c6:	2300      	movs	r3, #0
 80017c8:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80017ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ce:	220c      	movs	r2, #12
 80017d0:	2174      	movs	r1, #116	; 0x74
 80017d2:	20d0      	movs	r0, #208	; 0xd0
 80017d4:	f000 f9da 	bl	8001b8c <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80017d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	b21a      	sxth	r2, r3
 80017e0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80017ec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001800:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800180c:	b21b      	sxth	r3, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	b21b      	sxth	r3, r3
 8001812:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001814:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	b21a      	sxth	r2, r3
 800181c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	b21b      	sxth	r3, r3
 8001826:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001828:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b21a      	sxth	r2, r3
 8001830:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001834:	b21b      	sxth	r3, r3
 8001836:	4313      	orrs	r3, r2
 8001838:	b21b      	sxth	r3, r3
 800183a:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 800183c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21a      	sxth	r2, r3
 8001844:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001860:	4413      	add	r3, r2
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001874:	4413      	add	r3, r2
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800187e:	4413      	add	r3, r2
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001884:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 800188c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001890:	3301      	adds	r3, #1
 8001892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001896:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800189a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800189e:	429a      	cmp	r2, r3
 80018a0:	d387      	bcc.n	80017b2 <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80018a2:	6a3a      	ldr	r2, [r7, #32]
 80018a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ac:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 80018ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 80018c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 80018d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 80018de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 80018ea:	4b61      	ldr	r3, [pc, #388]	; (8001a70 <MPU9250_calibrateMPU9250+0x3d0>)
 80018ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80018f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fc:	ee17 3a90 	vmov	r3, s15
 8001900:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	dd05      	ble.n	8001916 <MPU9250_calibrateMPU9250+0x276>
 800190a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800190c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
 8001914:	e004      	b.n	8001920 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001918:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800191c:	4413      	add	r3, r2
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	425b      	negs	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	da00      	bge.n	800192a <MPU9250_calibrateMPU9250+0x28a>
 8001928:	3303      	adds	r3, #3
 800192a:	109b      	asrs	r3, r3, #2
 800192c:	121b      	asrs	r3, r3, #8
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	425b      	negs	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	da00      	bge.n	800193e <MPU9250_calibrateMPU9250+0x29e>
 800193c:	3303      	adds	r3, #3
 800193e:	109b      	asrs	r3, r3, #2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	425b      	negs	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	da00      	bge.n	8001950 <MPU9250_calibrateMPU9250+0x2b0>
 800194e:	3303      	adds	r3, #3
 8001950:	109b      	asrs	r3, r3, #2
 8001952:	121b      	asrs	r3, r3, #8
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	425b      	negs	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	da00      	bge.n	8001964 <MPU9250_calibrateMPU9250+0x2c4>
 8001962:	3303      	adds	r3, #3
 8001964:	109b      	asrs	r3, r3, #2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	425b      	negs	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	da00      	bge.n	8001976 <MPU9250_calibrateMPU9250+0x2d6>
 8001974:	3303      	adds	r3, #3
 8001976:	109b      	asrs	r3, r3, #2
 8001978:	121b      	asrs	r3, r3, #8
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	425b      	negs	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	da00      	bge.n	800198a <MPU9250_calibrateMPU9250+0x2ea>
 8001988:	3303      	adds	r3, #3
 800198a:	109b      	asrs	r3, r3, #2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8001992:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001996:	461a      	mov	r2, r3
 8001998:	2113      	movs	r1, #19
 800199a:	20d0      	movs	r0, #208	; 0xd0
 800199c:	f000 f8d8 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 80019a0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80019a4:	461a      	mov	r2, r3
 80019a6:	2114      	movs	r1, #20
 80019a8:	20d0      	movs	r0, #208	; 0xd0
 80019aa:	f000 f8d1 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 80019ae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80019b2:	461a      	mov	r2, r3
 80019b4:	2115      	movs	r1, #21
 80019b6:	20d0      	movs	r0, #208	; 0xd0
 80019b8:	f000 f8ca 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 80019bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019c0:	461a      	mov	r2, r3
 80019c2:	2116      	movs	r1, #22
 80019c4:	20d0      	movs	r0, #208	; 0xd0
 80019c6:	f000 f8c3 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 80019ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019ce:	461a      	mov	r2, r3
 80019d0:	2117      	movs	r1, #23
 80019d2:	20d0      	movs	r0, #208	; 0xd0
 80019d4:	f000 f8bc 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 80019d8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80019dc:	461a      	mov	r2, r3
 80019de:	2118      	movs	r1, #24
 80019e0:	20d0      	movs	r0, #208	; 0xd0
 80019e2:	f000 f8b5 	bl	8001b50 <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80019f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019f6:	2202      	movs	r2, #2
 80019f8:	2177      	movs	r1, #119	; 0x77
 80019fa:	20d0      	movs	r0, #208	; 0xd0
 80019fc:	f000 f8c6 	bl	8001b8c <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a00:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8001a12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a16:	2202      	movs	r2, #2
 8001a18:	217a      	movs	r1, #122	; 0x7a
 8001a1a:	20d0      	movs	r0, #208	; 0xd0
 8001a1c:	f000 f8b6 	bl	8001b8c <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a20:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8001a32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a36:	2202      	movs	r2, #2
 8001a38:	217d      	movs	r1, #125	; 0x7d
 8001a3a:	20d0      	movs	r0, #208	; 0xd0
 8001a3c:	f000 f8a6 	bl	8001b8c <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a40:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001a52:	2301      	movs	r3, #1
 8001a54:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001a56:	2300      	movs	r3, #0
 8001a58:	743b      	strb	r3, [r7, #16]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	747b      	strb	r3, [r7, #17]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001a68:	e01e      	b.n	8001aa8 <MPU9250_calibrateMPU9250+0x408>
 8001a6a:	bf00      	nop
 8001a6c:	aaaaaaab 	.word	0xaaaaaaab
 8001a70:	24000fa4 	.word	0x24000fa4
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001a74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001a7e:	4413      	add	r3, r2
 8001a80:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001a84:	461a      	mov	r2, r3
 8001a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <MPU9250_calibrateMPU9250+0x3fe>
 8001a8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001a96:	4413      	add	r3, r2
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 8001a9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001aa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d9e1      	bls.n	8001a74 <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da00      	bge.n	8001aba <MPU9250_calibrateMPU9250+0x41a>
 8001ab8:	3307      	adds	r3, #7
 8001aba:	10db      	asrs	r3, r3, #3
 8001abc:	425b      	negs	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da00      	bge.n	8001acc <MPU9250_calibrateMPU9250+0x42c>
 8001aca:	3307      	adds	r3, #7
 8001acc:	10db      	asrs	r3, r3, #3
 8001ace:	425b      	negs	r3, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <MPU9250_calibrateMPU9250+0x43e>
 8001adc:	3307      	adds	r3, #7
 8001ade:	10db      	asrs	r3, r3, #3
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	121b      	asrs	r3, r3, #8
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001af8:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001afc:	7c3b      	ldrb	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	121b      	asrs	r3, r3, #8
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b18:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001b1c:	7c7b      	ldrb	r3, [r7, #17]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	121b      	asrs	r3, r3, #8
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b38:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b3c:	7cbb      	ldrb	r3, [r7, #18]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	; 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af04      	add	r7, sp, #16
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	71bb      	strb	r3, [r7, #6]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MPU9250_writeByte+0x38>)
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	b299      	uxth	r1, r3
 8001b6a:	79bb      	ldrb	r3, [r7, #6]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	2364      	movs	r3, #100	; 0x64
 8001b70:	9302      	str	r3, [sp, #8]
 8001b72:	2301      	movs	r3, #1
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	1d7b      	adds	r3, r7, #5
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f015 f87c 	bl	8016c78 <HAL_I2C_Mem_Write>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	24000fa4 	.word	0x24000fa4

08001b8c <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	71bb      	strb	r3, [r7, #6]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MPU9250_readBytes+0x40>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	b299      	uxth	r1, r3
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	b29c      	uxth	r4, r3
 8001bac:	797b      	ldrb	r3, [r7, #5]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2264      	movs	r2, #100	; 0x64
 8001bb2:	9202      	str	r2, [sp, #8]
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	f015 f96f 	bl	8016ea0 <HAL_I2C_Mem_Read>
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	24000fa4 	.word	0x24000fa4

08001bd0 <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460a      	mov	r2, r1
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 8001be0:	f107 030f 	add.w	r3, r7, #15
 8001be4:	79b9      	ldrb	r1, [r7, #6]
 8001be6:	79f8      	ldrb	r0, [r7, #7]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f7ff ffcf 	bl	8001b8c <MPU9250_readBytes>
	return data;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <BME280_init>:
#include "bme280.h"
#include "math.h"

BME280_t bme280 = {0,};

void BME280_init(I2C_HandleTypeDef *hi2c, uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	4608      	mov	r0, r1
 8001c02:	4611      	mov	r1, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	70fb      	strb	r3, [r7, #3]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70bb      	strb	r3, [r7, #2]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	707b      	strb	r3, [r7, #1]
	bme280.hi2c = hi2c;
 8001c12:	4a74      	ldr	r2, [pc, #464]	; (8001de4 <BME280_init+0x1ec>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6013      	str	r3, [r2, #0]
	BME280_reset();
 8001c18:	f000 f962 	bl	8001ee0 <BME280_reset>
	// Configure the BME280
	// Set H oversampling rate
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 8001c1c:	78bb      	ldrb	r3, [r7, #2]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	21f2      	movs	r1, #242	; 0xf2
 8001c28:	20ec      	movs	r0, #236	; 0xec
 8001c2a:	f000 fb8d 	bl	8002348 <BME280_writeByte>
	// Set T and P oversampling rates and sensor mode
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 8001c2e:	787b      	ldrb	r3, [r7, #1]
 8001c30:	015b      	lsls	r3, r3, #5
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	21f4      	movs	r1, #244	; 0xf4
 8001c4c:	20ec      	movs	r0, #236	; 0xec
 8001c4e:	f000 fb7b 	bl	8002348 <BME280_writeByte>
	// Set standby time interval in normal mode and bandwidth
	BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 8001c52:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	b25a      	sxtb	r2, r3
 8001c5a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	21f5      	movs	r1, #245	; 0xf5
 8001c6c:	20ec      	movs	r0, #236	; 0xec
 8001c6e:	f000 fb6b 	bl	8002348 <BME280_writeByte>

	//wait.
	HAL_Delay(50);
 8001c72:	2032      	movs	r0, #50	; 0x32
 8001c74:	f011 f9fc 	bl	8013070 <HAL_Delay>
	uint8_t calib[26];
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	221a      	movs	r2, #26
 8001c7e:	2188      	movs	r1, #136	; 0x88
 8001c80:	20ec      	movs	r0, #236	; 0xec
 8001c82:	f000 fb7f 	bl	8002384 <BME280_readBytes>
	bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 8001c86:	7a7b      	ldrb	r3, [r7, #9]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	7a3b      	ldrb	r3, [r7, #8]
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <BME280_init+0x1ec>)
 8001c98:	821a      	strh	r2, [r3, #16]
	bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	7abb      	ldrb	r3, [r7, #10]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <BME280_init+0x1ec>)
 8001caa:	831a      	strh	r2, [r3, #24]
	bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 8001cac:	7b7b      	ldrb	r3, [r7, #13]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	7b3b      	ldrb	r3, [r7, #12]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <BME280_init+0x1ec>)
 8001cbc:	835a      	strh	r2, [r3, #26]
	bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	7bbb      	ldrb	r3, [r7, #14]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <BME280_init+0x1ec>)
 8001cd0:	825a      	strh	r2, [r3, #18]
	bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 8001cd2:	7c7b      	ldrb	r3, [r7, #17]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	7c3b      	ldrb	r3, [r7, #16]
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <BME280_init+0x1ec>)
 8001ce2:	839a      	strh	r2, [r3, #28]
	bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	7cbb      	ldrb	r3, [r7, #18]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <BME280_init+0x1ec>)
 8001cf4:	83da      	strh	r2, [r3, #30]
	bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 8001cf6:	7d7b      	ldrb	r3, [r7, #21]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	7d3b      	ldrb	r3, [r7, #20]
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <BME280_init+0x1ec>)
 8001d06:	841a      	strh	r2, [r3, #32]
	bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	7dbb      	ldrb	r3, [r7, #22]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <BME280_init+0x1ec>)
 8001d18:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 8001d1a:	7e7b      	ldrb	r3, [r7, #25]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	7e3b      	ldrb	r3, [r7, #24]
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <BME280_init+0x1ec>)
 8001d2a:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 8001d2c:	7efb      	ldrb	r3, [r7, #27]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	7ebb      	ldrb	r3, [r7, #26]
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <BME280_init+0x1ec>)
 8001d3c:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 8001d3e:	7f7b      	ldrb	r3, [r7, #29]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	7f3b      	ldrb	r3, [r7, #28]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <BME280_init+0x1ec>)
 8001d4e:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 8001d50:	7ffb      	ldrb	r3, [r7, #31]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	7fbb      	ldrb	r3, [r7, #30]
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <BME280_init+0x1ec>)
 8001d60:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280._dig_H1 = calib[25];
 8001d62:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <BME280_init+0x1ec>)
 8001d68:	735a      	strb	r2, [r3, #13]
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	2207      	movs	r2, #7
 8001d70:	21e1      	movs	r1, #225	; 0xe1
 8001d72:	20ec      	movs	r0, #236	; 0xec
 8001d74:	f000 fb06 	bl	8002384 <BME280_readBytes>
	bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 8001d78:	7a7b      	ldrb	r3, [r7, #9]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	7a3b      	ldrb	r3, [r7, #8]
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <BME280_init+0x1ec>)
 8001d88:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280._dig_H3 = calib[2];
 8001d8a:	7aba      	ldrb	r2, [r7, #10]
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <BME280_init+0x1ec>)
 8001d8e:	739a      	strb	r2, [r3, #14]
	bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	021a      	lsls	r2, r3, #8
 8001d94:	7b3b      	ldrb	r3, [r7, #12]
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	111b      	asrs	r3, r3, #4
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <BME280_init+0x1ec>)
 8001da2:	829a      	strh	r2, [r3, #20]
	bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 8001da4:	7b7b      	ldrb	r3, [r7, #13]
 8001da6:	021a      	lsls	r2, r3, #8
 8001da8:	7b3b      	ldrb	r3, [r7, #12]
 8001daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dae:	4313      	orrs	r3, r2
 8001db0:	111b      	asrs	r3, r3, #4
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <BME280_init+0x1ec>)
 8001db6:	82da      	strh	r2, [r3, #22]
	bme280._dig_H6 = calib[6];
 8001db8:	7bba      	ldrb	r2, [r7, #14]
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <BME280_init+0x1ec>)
 8001dbc:	73da      	strb	r2, [r3, #15]

	/* dump trash value */
	for(int i=0; i<10; i++){
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	e008      	b.n	8001dd6 <BME280_init+0x1de>
		BME280_readTemperature();
 8001dc4:	f000 f895 	bl	8001ef2 <BME280_readTemperature>
		BME280_readPressure();
 8001dc8:	f000 f8a9 	bl	8001f1e <BME280_readPressure>
		BME280_readHumidity();
 8001dcc:	f000 f8bd 	bl	8001f4a <BME280_readHumidity>
	for(int i=0; i<10; i++){
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	2b09      	cmp	r3, #9
 8001dda:	ddf3      	ble.n	8001dc4 <BME280_init+0x1cc>
	}
}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	24000794 	.word	0x24000794

08001de8 <BME280_readIT>:

void BME280_readIT(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
	if(bm_i2cFlag == bm_i2cIdle){
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <BME280_readIT+0x30>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10e      	bne.n	8001e14 <BME280_readIT+0x2c>
		HAL_I2C_Mem_Read_IT(bme280.hi2c, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <BME280_readIT+0x34>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <BME280_readIT+0x38>)
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2301      	movs	r3, #1
 8001e04:	22f7      	movs	r2, #247	; 0xf7
 8001e06:	21ec      	movs	r1, #236	; 0xec
 8001e08:	f015 f964 	bl	80170d4 <HAL_I2C_Mem_Read_IT>
		bm_i2cFlag = bm_i2cBME280;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <BME280_readIT+0x30>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
		return;
 8001e12:	bf00      	nop
	}
}
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2400133c 	.word	0x2400133c
 8001e1c:	24000794 	.word	0x24000794
 8001e20:	24000798 	.word	0x24000798
 8001e24:	00000000 	.word	0x00000000

08001e28 <BME280_i2cRxCpltCallback>:

uint8_t BME280_i2cRxCpltCallback(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return 0;
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <BME280_i2cRxCpltCallback+0xb0>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d001      	beq.n	8001e38 <BME280_i2cRxCpltCallback+0x10>
 8001e34:	2300      	movs	r3, #0
 8001e36:	e044      	b.n	8001ec2 <BME280_i2cRxCpltCallback+0x9a>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e3a:	791b      	ldrb	r3, [r3, #4]
 8001e3c:	061a      	lsls	r2, r3, #24
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e40:	795b      	ldrb	r3, [r3, #5]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	431a      	orrs	r2, r3
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e48:	799b      	ldrb	r3, [r3, #6]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	131b      	asrs	r3, r3, #12
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e58:	79db      	ldrb	r3, [r3, #7]
 8001e5a:	061a      	lsls	r2, r3, #24
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e5e:	7a1b      	ldrb	r3, [r3, #8]
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e66:	7a5b      	ldrb	r3, [r3, #9]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	131b      	asrs	r3, r3, #12
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e70:	6353      	str	r3, [r2, #52]	; 0x34

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f8b8 	bl	8001fec <BME280_compensate_P>
 8001e7c:	ee07 0a90 	vmov	s15, r0
 8001e80:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e84:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001ec8 <BME280_i2cRxCpltCallback+0xa0>
 8001e88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e92:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f86a 	bl	8001f74 <BME280_compensate_T>
 8001ea0:	ee07 0a90 	vmov	s15, r0
 8001ea4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ea8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001ed0 <BME280_i2cRxCpltCallback+0xa8>
 8001eac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001eb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001eb6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

    bm_i2cFlag = bm_i2cIdle;
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <BME280_i2cRxCpltCallback+0xb0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	40d90000 	.word	0x40d90000
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40590000 	.word	0x40590000
 8001ed8:	2400133c 	.word	0x2400133c
 8001edc:	24000794 	.word	0x24000794

08001ee0 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 8001ee4:	22b6      	movs	r2, #182	; 0xb6
 8001ee6:	21e0      	movs	r1, #224	; 0xe0
 8001ee8:	20ec      	movs	r0, #236	; 0xec
 8001eea:	f000 fa2d 	bl	8002348 <BME280_writeByte>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <BME280_readTemperature>:

int32_t BME280_readTemperature(){
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_TEMP_MSB, 3, &rawData[0]);
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2203      	movs	r2, #3
 8001efc:	21fa      	movs	r1, #250	; 0xfa
 8001efe:	20ec      	movs	r0, #236	; 0xec
 8001f00:	f000 fa40 	bl	8002384 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8001f04:	793b      	ldrb	r3, [r7, #4]
 8001f06:	061a      	lsls	r2, r3, #24
 8001f08:	797b      	ldrb	r3, [r7, #5]
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	79bb      	ldrb	r3, [r7, #6]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	4313      	orrs	r3, r2
 8001f14:	131b      	asrs	r3, r3, #12
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <BME280_readPressure>:

int32_t BME280_readPressure(){
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_PRESS_MSB, 3, &rawData[0]);
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2203      	movs	r2, #3
 8001f28:	21f7      	movs	r1, #247	; 0xf7
 8001f2a:	20ec      	movs	r0, #236	; 0xec
 8001f2c:	f000 fa2a 	bl	8002384 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8001f30:	793b      	ldrb	r3, [r7, #4]
 8001f32:	061a      	lsls	r2, r3, #24
 8001f34:	797b      	ldrb	r3, [r7, #5]
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	131b      	asrs	r3, r3, #12
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <BME280_readHumidity>:
int16_t BME280_readHumidity(){
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_HUM_MSB, 2, &rawData[0]);
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2202      	movs	r2, #2
 8001f54:	21fd      	movs	r1, #253	; 0xfd
 8001f56:	20ec      	movs	r0, #236	; 0xec
 8001f58:	f000 fa14 	bl	8002384 <BME280_readBytes>
	  return (int16_t) (((int16_t) rawData[0] << 8 | rawData[1]) );
 8001f5c:	793b      	ldrb	r3, [r7, #4]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	797b      	ldrb	r3, [r7, #5]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b21b      	sxth	r3, r3
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <BME280_compensate_T>:



// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	10da      	asrs	r2, r3, #3
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001f82:	8a1b      	ldrh	r3, [r3, #16]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001f8a:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	12db      	asrs	r3, r3, #11
 8001f94:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	111b      	asrs	r3, r3, #4
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001f9c:	8a12      	ldrh	r2, [r2, #16]
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	1112      	asrs	r2, r2, #4
 8001fa4:	4910      	ldr	r1, [pc, #64]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001fa6:	8a09      	ldrh	r1, [r1, #16]
 8001fa8:	1a52      	subs	r2, r2, r1
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	131b      	asrs	r3, r3, #12
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001fb2:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	139b      	asrs	r3, r3, #14
 8001fbc:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
	  T = (bme280._t_fine * 5 + 128) >> 8;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3380      	adds	r3, #128	; 0x80
 8001fd4:	121b      	asrs	r3, r3, #8
 8001fd6:	60fb      	str	r3, [r7, #12]
	  return T;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	24000794 	.word	0x24000794

08001fec <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 8001fec:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001ff0:	b088      	sub	sp, #32
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <BME280_compensate_P+0x1a0>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002000:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002004:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002008:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	fb02 f203 	mul.w	r2, r2, r3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	441a      	add	r2, r3
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fba1 3403 	umull	r3, r4, r1, r3
 8002026:	4422      	add	r2, r4
 8002028:	4614      	mov	r4, r2
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <BME280_compensate_P+0x1a0>)
 800202c:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8002030:	b211      	sxth	r1, r2
 8002032:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002036:	fb01 f504 	mul.w	r5, r1, r4
 800203a:	fb03 f002 	mul.w	r0, r3, r2
 800203e:	4428      	add	r0, r5
 8002040:	fba3 3401 	umull	r3, r4, r3, r1
 8002044:	1902      	adds	r2, r0, r4
 8002046:	4614      	mov	r4, r2
 8002048:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800204c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 8002050:	4b4e      	ldr	r3, [pc, #312]	; (800218c <BME280_compensate_P+0x1a0>)
 8002052:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002056:	b21b      	sxth	r3, r3
 8002058:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	fb04 f102 	mul.w	r1, r4, r2
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	fb03 f202 	mul.w	r2, r3, r2
 8002068:	1888      	adds	r0, r1, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	fba2 1203 	umull	r1, r2, r2, r3
 8002070:	1883      	adds	r3, r0, r2
 8002072:	461a      	mov	r2, r3
 8002074:	f04f 0500 	mov.w	r5, #0
 8002078:	f04f 0600 	mov.w	r6, #0
 800207c:	0456      	lsls	r6, r2, #17
 800207e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8002082:	044d      	lsls	r5, r1, #17
 8002084:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002088:	186b      	adds	r3, r5, r1
 800208a:	eb46 0402 	adc.w	r4, r6, r2
 800208e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <BME280_compensate_P+0x1a0>)
 8002094:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002098:	b219      	sxth	r1, r3
 800209a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800209e:	f04f 0500 	mov.w	r5, #0
 80020a2:	f04f 0600 	mov.w	r6, #0
 80020a6:	00ce      	lsls	r6, r1, #3
 80020a8:	2500      	movs	r5, #0
 80020aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80020ae:	186b      	adds	r3, r5, r1
 80020b0:	eb46 0402 	adc.w	r4, r6, r2
 80020b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	fb02 f203 	mul.w	r2, r2, r3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	441a      	add	r2, r3
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fba1 3403 	umull	r3, r4, r1, r3
 80020d2:	4422      	add	r2, r4
 80020d4:	4614      	mov	r4, r2
 80020d6:	4a2d      	ldr	r2, [pc, #180]	; (800218c <BME280_compensate_P+0x1a0>)
 80020d8:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 80020dc:	b211      	sxth	r1, r2
 80020de:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80020e2:	fb01 f504 	mul.w	r5, r1, r4
 80020e6:	fb03 f002 	mul.w	r0, r3, r2
 80020ea:	4428      	add	r0, r5
 80020ec:	fba3 3401 	umull	r3, r4, r3, r1
 80020f0:	1902      	adds	r2, r0, r4
 80020f2:	4614      	mov	r4, r2
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	0a19      	lsrs	r1, r3, #8
 80020fe:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002102:	1222      	asrs	r2, r4, #8
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <BME280_compensate_P+0x1a0>)
 8002106:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800210a:	b21b      	sxth	r3, r3
 800210c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002110:	69b8      	ldr	r0, [r7, #24]
 8002112:	fb04 f500 	mul.w	r5, r4, r0
 8002116:	69f8      	ldr	r0, [r7, #28]
 8002118:	fb03 f000 	mul.w	r0, r3, r0
 800211c:	4428      	add	r0, r5
 800211e:	69bd      	ldr	r5, [r7, #24]
 8002120:	fba5 5603 	umull	r5, r6, r5, r3
 8002124:	1983      	adds	r3, r0, r6
 8002126:	461e      	mov	r6, r3
 8002128:	f04f 0b00 	mov.w	fp, #0
 800212c:	f04f 0c00 	mov.w	ip, #0
 8002130:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002134:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002138:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 800213c:	eb1b 0301 	adds.w	r3, fp, r1
 8002140:	eb4c 0402 	adc.w	r4, ip, r2
 8002144:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 8002148:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800214c:	1c19      	adds	r1, r3, #0
 800214e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <BME280_compensate_P+0x1a0>)
 8002154:	8a5b      	ldrh	r3, [r3, #18]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f04f 0400 	mov.w	r4, #0
 800215c:	fb03 f502 	mul.w	r5, r3, r2
 8002160:	fb01 f004 	mul.w	r0, r1, r4
 8002164:	4428      	add	r0, r5
 8002166:	fba1 3403 	umull	r3, r4, r1, r3
 800216a:	1902      	adds	r2, r0, r4
 800216c:	4614      	mov	r4, r2
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	1061      	asrs	r1, r4, #1
 8002178:	17e2      	asrs	r2, r4, #31
 800217a:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 800217e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002182:	4323      	orrs	r3, r4
 8002184:	d104      	bne.n	8002190 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 8002186:	2300      	movs	r3, #0
 8002188:	e0d7      	b.n	800233a <BME280_compensate_P+0x34e>
 800218a:	bf00      	nop
 800218c:	24000794 	.word	0x24000794
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002196:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800219a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	ea4f 0963 	mov.w	r9, r3, asr #1
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80021aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80021ae:	4645      	mov	r5, r8
 80021b0:	464e      	mov	r6, r9
 80021b2:	1aed      	subs	r5, r5, r3
 80021b4:	eb66 0604 	sbc.w	r6, r6, r4
 80021b8:	46a8      	mov	r8, r5
 80021ba:	46b1      	mov	r9, r6
 80021bc:	eb18 0308 	adds.w	r3, r8, r8
 80021c0:	eb49 0409 	adc.w	r4, r9, r9
 80021c4:	4698      	mov	r8, r3
 80021c6:	46a1      	mov	r9, r4
 80021c8:	eb18 0805 	adds.w	r8, r8, r5
 80021cc:	eb49 0906 	adc.w	r9, r9, r6
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80021dc:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80021e0:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80021e4:	eb18 0801 	adds.w	r8, r8, r1
 80021e8:	eb49 0902 	adc.w	r9, r9, r2
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80021f8:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80021fc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002200:	4688      	mov	r8, r1
 8002202:	4691      	mov	r9, r2
 8002204:	eb18 0805 	adds.w	r8, r8, r5
 8002208:	eb49 0906 	adc.w	r9, r9, r6
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002218:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800221c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002220:	4688      	mov	r8, r1
 8002222:	4691      	mov	r9, r2
 8002224:	eb18 0005 	adds.w	r0, r8, r5
 8002228:	eb49 0106 	adc.w	r1, r9, r6
 800222c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002230:	f7fe fa6a 	bl	8000708 <__aeabi_ldivmod>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <BME280_compensate_P+0x358>)
 800223e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002242:	b219      	sxth	r1, r3
 8002244:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002248:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	f04f 0400 	mov.w	r4, #0
 8002254:	0b6b      	lsrs	r3, r5, #13
 8002256:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800225a:	1374      	asrs	r4, r6, #13
 800225c:	fb03 f502 	mul.w	r5, r3, r2
 8002260:	fb01 f004 	mul.w	r0, r1, r4
 8002264:	4428      	add	r0, r5
 8002266:	fba1 1203 	umull	r1, r2, r1, r3
 800226a:	1883      	adds	r3, r0, r2
 800226c:	461a      	mov	r2, r3
 800226e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	f04f 0400 	mov.w	r4, #0
 800227a:	0b6b      	lsrs	r3, r5, #13
 800227c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002280:	1374      	asrs	r4, r6, #13
 8002282:	fb03 f502 	mul.w	r5, r3, r2
 8002286:	fb01 f004 	mul.w	r0, r1, r4
 800228a:	4428      	add	r0, r5
 800228c:	fba1 1203 	umull	r1, r2, r1, r3
 8002290:	1883      	adds	r3, r0, r2
 8002292:	461a      	mov	r2, r3
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	f04f 0400 	mov.w	r4, #0
 800229c:	0e4b      	lsrs	r3, r1, #25
 800229e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80022a2:	1654      	asrs	r4, r2, #25
 80022a4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <BME280_compensate_P+0x358>)
 80022aa:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80022ae:	b21b      	sxth	r3, r3
 80022b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	fb04 f102 	mul.w	r1, r4, r2
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	fb03 f202 	mul.w	r2, r3, r2
 80022c0:	1888      	adds	r0, r1, r2
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	fba2 1203 	umull	r1, r2, r2, r3
 80022c8:	1883      	adds	r3, r0, r2
 80022ca:	461a      	mov	r2, r3
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	f04f 0400 	mov.w	r4, #0
 80022d4:	0ccb      	lsrs	r3, r1, #19
 80022d6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80022da:	14d4      	asrs	r4, r2, #19
 80022dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 80022e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80022e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80022e8:	eb11 0803 	adds.w	r8, r1, r3
 80022ec:	eb42 0904 	adc.w	r9, r2, r4
 80022f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80022f4:	eb13 0508 	adds.w	r5, r3, r8
 80022f8:	eb44 0609 	adc.w	r6, r4, r9
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	0a29      	lsrs	r1, r5, #8
 8002306:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800230a:	1232      	asrs	r2, r6, #8
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <BME280_compensate_P+0x358>)
 800230e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002312:	b21d      	sxth	r5, r3
 8002314:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002318:	f04f 0800 	mov.w	r8, #0
 800231c:	f04f 0900 	mov.w	r9, #0
 8002320:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002324:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002328:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800232c:	eb18 0301 	adds.w	r3, r8, r1
 8002330:	eb49 0402 	adc.w	r4, r9, r2
 8002334:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 8002338:	68bb      	ldr	r3, [r7, #8]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002344:	24000794 	.word	0x24000794

08002348 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af04      	add	r7, sp, #16
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
 8002352:	460b      	mov	r3, r1
 8002354:	71bb      	strb	r3, [r7, #6]
 8002356:	4613      	mov	r3, r2
 8002358:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(bme280.hi2c, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <BME280_writeByte+0x38>)
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	b299      	uxth	r1, r3
 8002362:	79bb      	ldrb	r3, [r7, #6]
 8002364:	b29a      	uxth	r2, r3
 8002366:	2364      	movs	r3, #100	; 0x64
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	2301      	movs	r3, #1
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	1d7b      	adds	r3, r7, #5
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2301      	movs	r3, #1
 8002374:	f014 fc80 	bl	8016c78 <HAL_I2C_Mem_Write>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	24000794 	.word	0x24000794

08002384 <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b087      	sub	sp, #28
 8002388:	af04      	add	r7, sp, #16
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
 8002390:	460b      	mov	r3, r1
 8002392:	71bb      	strb	r3, [r7, #6]
 8002394:	4613      	mov	r3, r2
 8002396:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(bme280.hi2c, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <BME280_readBytes+0x40>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	b299      	uxth	r1, r3
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	b29c      	uxth	r4, r3
 80023a4:	797b      	ldrb	r3, [r7, #5]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2264      	movs	r2, #100	; 0x64
 80023aa:	9202      	str	r2, [sp, #8]
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2301      	movs	r3, #1
 80023b4:	4622      	mov	r2, r4
 80023b6:	f014 fd73 	bl	8016ea0 <HAL_I2C_Mem_Read>
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd90      	pop	{r4, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	24000794 	.word	0x24000794

080023c8 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <TM_GPS_Init+0x124>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <TM_GPS_Init+0x128>)
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 80023de:	4844      	ldr	r0, [pc, #272]	; (80024f0 <TM_GPS_Init+0x128>)
 80023e0:	f001 f9ac 	bl	800373c <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	4a41      	ldr	r2, [pc, #260]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023ee:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 80023f0:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f8:	4a3e      	ldr	r2, [pc, #248]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023fa:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002406:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <TM_GPS_Init+0x12c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f043 0320 	orr.w	r3, r3, #32
 8002410:	4a38      	ldr	r2, [pc, #224]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002412:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	4a35      	ldr	r2, [pc, #212]	; (80024f4 <TM_GPS_Init+0x12c>)
 800241e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 8002420:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <TM_GPS_Init+0x12c>)
 800242a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 800242c:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <TM_GPS_Init+0x12c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f043 0310 	orr.w	r3, r3, #16
 8002434:	4a2f      	ldr	r2, [pc, #188]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002436:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 8002438:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <TM_GPS_Init+0x12c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002440:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002442:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	4a29      	ldr	r2, [pc, #164]	; (80024f4 <TM_GPS_Init+0x12c>)
 800244e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002458:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <TM_GPS_Init+0x12c>)
 800245a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <TM_GPS_Init+0x12c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002464:	4a23      	ldr	r2, [pc, #140]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002466:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 8002468:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <TM_GPS_Init+0x12c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002472:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <TM_GPS_Init+0x12c>)
 800247e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002488:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <TM_GPS_Init+0x12c>)
 800248a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <TM_GPS_Init+0x12c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002494:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002496:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <TM_GPS_Init+0x12c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024a2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024ae:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024ba:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024c6:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 80024c8:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <TM_GPS_Init+0x128>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <TM_GPS_Init+0x128>)
 80024d2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80024d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024da:	4907      	ldr	r1, [pc, #28]	; (80024f8 <TM_GPS_Init+0x130>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f01c ff97 	bl	801f410 <HAL_UART_Receive_DMA>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	24000928 	.word	0x24000928
 80024f0:	240010c8 	.word	0x240010c8
 80024f4:	240007f8 	.word	0x240007f8
 80024f8:	240011f4 	.word	0x240011f4

080024fc <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update(UART_HandleTypeDef* huart) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	if(huart->Instance != gpsUart.huart->Instance) return TM_GPS_Result_None;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <TM_GPS_Update+0x74>)
 800250a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <TM_GPS_Update+0x1c>
 8002514:	2303      	movs	r3, #3
 8002516:	e027      	b.n	8002568 <TM_GPS_Update+0x6c>

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	e013      	b.n	800254a <TM_GPS_Update+0x4e>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <TM_GPS_Update+0x74>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4413      	add	r3, r2
 8002528:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	480f      	ldr	r0, [pc, #60]	; (8002570 <TM_GPS_Update+0x74>)
 8002532:	f000 f8d9 	bl	80026e8 <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <TM_GPS_Update+0x74>)
 8002538:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <TM_GPS_Update+0x48>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3301      	adds	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002550:	dbe7      	blt.n	8002522 <TM_GPS_Update+0x26>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <TM_GPS_Update+0x78>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <TM_GPS_Update+0x6a>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <TM_GPS_Update+0x74>)
 800255c:	2202      	movs	r2, #2
 800255e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002562:	2302      	movs	r3, #2
 8002564:	e000      	b.n	8002568 <TM_GPS_Update+0x6c>
	}
	
	/* We have old data */
//	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);

	return result;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	240010c8 	.word	0x240010c8
 8002574:	24000928 	.word	0x24000928

08002578 <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002582:	4603      	mov	r3, r0
 8002584:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	2b0e      	cmp	r3, #14
 800258a:	f200 8086 	bhi.w	800269a <TM_GPS_ConvertSpeed+0x122>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <TM_GPS_ConvertSpeed+0x1c>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025d1 	.word	0x080025d1
 8002598:	080025df 	.word	0x080025df
 800259c:	080025ed 	.word	0x080025ed
 80025a0:	080025fb 	.word	0x080025fb
 80025a4:	08002609 	.word	0x08002609
 80025a8:	08002617 	.word	0x08002617
 80025ac:	08002625 	.word	0x08002625
 80025b0:	08002633 	.word	0x08002633
 80025b4:	08002641 	.word	0x08002641
 80025b8:	0800264f 	.word	0x0800264f
 80025bc:	0800265d 	.word	0x0800265d
 80025c0:	0800266b 	.word	0x0800266b
 80025c4:	08002679 	.word	0x08002679
 80025c8:	08002687 	.word	0x08002687
 80025cc:	08002695 	.word	0x08002695
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 80025d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80026ac <TM_GPS_ConvertSpeed+0x134>
 80025d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025dc:	e05f      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 80025de:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80026b0 <TM_GPS_ConvertSpeed+0x138>
 80025e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ea:	e058      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 80025ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80026b4 <TM_GPS_ConvertSpeed+0x13c>
 80025f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f8:	e051      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 80025fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fe:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80026b8 <TM_GPS_ConvertSpeed+0x140>
 8002602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002606:	e04a      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002608:	edd7 7a01 	vldr	s15, [r7, #4]
 800260c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80026bc <TM_GPS_ConvertSpeed+0x144>
 8002610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002614:	e043      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002616:	edd7 7a01 	vldr	s15, [r7, #4]
 800261a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80026c0 <TM_GPS_ConvertSpeed+0x148>
 800261e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002622:	e03c      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 8002624:	edd7 7a01 	vldr	s15, [r7, #4]
 8002628:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80026c4 <TM_GPS_ConvertSpeed+0x14c>
 800262c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002630:	e035      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 8002632:	edd7 7a01 	vldr	s15, [r7, #4]
 8002636:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80026c8 <TM_GPS_ConvertSpeed+0x150>
 800263a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263e:	e02e      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 8002640:	edd7 7a01 	vldr	s15, [r7, #4]
 8002644:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80026cc <TM_GPS_ConvertSpeed+0x154>
 8002648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264c:	e027      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 800264e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002652:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026d0 <TM_GPS_ConvertSpeed+0x158>
 8002656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265a:	e020      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 800265c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002660:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80026d4 <TM_GPS_ConvertSpeed+0x15c>
 8002664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002668:	e019      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 800266a:	edd7 7a01 	vldr	s15, [r7, #4]
 800266e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80026d8 <TM_GPS_ConvertSpeed+0x160>
 8002672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002676:	e012      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 8002678:	edd7 7a01 	vldr	s15, [r7, #4]
 800267c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80026dc <TM_GPS_ConvertSpeed+0x164>
 8002680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002684:	e00b      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002686:	edd7 7a01 	vldr	s15, [r7, #4]
 800268a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80026e0 <TM_GPS_ConvertSpeed+0x168>
 800268e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002692:	e004      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002694:	edd7 7a01 	vldr	s15, [r7, #4]
 8002698:	e001      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 800269a:	eddf 7a12 	vldr	s15, [pc, #72]	; 80026e4 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 800269e:	eeb0 0a67 	vmov.f32	s0, s15
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	3a06bdf5 	.word	0x3a06bdf5
 80026b0:	3f03afb8 	.word	0x3f03afb8
 80026b4:	3fed0e56 	.word	0x3fed0e56
 80026b8:	41f6f5c3 	.word	0x41f6f5c3
 80026bc:	39a79d68 	.word	0x39a79d68
 80026c0:	3f9353f8 	.word	0x3f9353f8
 80026c4:	3fd81062 	.word	0x3fd81062
 80026c8:	42ca999a 	.word	0x42ca999a
 80026cc:	4201999a 	.word	0x4201999a
 80026d0:	44f30000 	.word	0x44f30000
 80026d4:	43426666 	.word	0x43426666
 80026d8:	42508f5c 	.word	0x42508f5c
 80026dc:	45438000 	.word	0x45438000
 80026e0:	4331b333 	.word	0x4331b333
 80026e4:	00000000 	.word	0x00000000

080026e8 <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fff3 	bl	80036e0 <TM_GPS_INT_FlagsOk>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f001 f81b 	bl	800373c <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	2b24      	cmp	r3, #36	; 0x24
 8002712:	d116      	bne.n	8002742 <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002714:	4b5d      	ldr	r3, [pc, #372]	; (800288c <TM_GPS_INT_Do+0x1a4>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 800271a:	4b5d      	ldr	r3, [pc, #372]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 8002720:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	b2d1      	uxtb	r1, r2
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002736:	7011      	strb	r1, [r2, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	4a58      	ldr	r2, [pc, #352]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	5453      	strb	r3, [r2, r1]
 8002740:	e09b      	b.n	800287a <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	2b2c      	cmp	r3, #44	; 0x2c
 8002746:	d120      	bne.n	800278a <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 8002748:	4b51      	ldr	r3, [pc, #324]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	4053      	eors	r3, r2
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 8002754:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	b2d1      	uxtb	r1, r2
 800275e:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002760:	7011      	strb	r1, [r2, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4b4d      	ldr	r3, [pc, #308]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 8002766:	2100      	movs	r1, #0
 8002768:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f001 f80a 	bl	8003784 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8a1 	bl	80028b8 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b45      	ldr	r3, [pc, #276]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002780:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002782:	4b45      	ldr	r3, [pc, #276]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e077      	b.n	800287a <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	2b0a      	cmp	r3, #10
 800278e:	d113      	bne.n	80027b8 <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002796:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <TM_GPS_INT_Do+0x1b8>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d16d      	bne.n	800287a <TM_GPS_INT_Do+0x192>
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <TM_GPS_INT_Do+0x1bc>)
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <TM_GPS_INT_Do+0x1c0>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d167      	bne.n	800287a <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 80027aa:	4b40      	ldr	r3, [pc, #256]	; (80028ac <TM_GPS_INT_Do+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b2:	4a3e      	ldr	r2, [pc, #248]	; (80028ac <TM_GPS_INT_Do+0x1c4>)
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e060      	b.n	800287a <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	2b0d      	cmp	r3, #13
 80027bc:	d128      	bne.n	8002810 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	b2d1      	uxtb	r1, r2
 80027c6:	4a34      	ldr	r2, [pc, #208]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 80027c8:	7011      	strb	r1, [r2, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 80027ce:	2100      	movs	r1, #0
 80027d0:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 80027d2:	4b32      	ldr	r3, [pc, #200]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 ff58 	bl	800368c <TM_GPS_INT_Hex2Dec>
 80027dc:	4603      	mov	r3, r0
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	b2dc      	uxtb	r4, r3
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 ff50 	bl	800368c <TM_GPS_INT_Hex2Dec>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4423      	add	r3, r4
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <TM_GPS_INT_Do+0x1c8>)
 80027f4:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 80027f6:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <TM_GPS_INT_Do+0x1c8>)
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d002      	beq.n	8002808 <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 ff9a 	bl	800373c <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e034      	b.n	800287a <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	2b2a      	cmp	r3, #42	; 0x2a
 8002814:	d11c      	bne.n	8002850 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <TM_GPS_INT_Do+0x1a4>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	b2d1      	uxtb	r1, r2
 8002824:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002826:	7011      	strb	r1, [r2, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 ffa7 	bl	8003784 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f83e 	bl	80028b8 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002846:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e014      	b.n	800287a <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <TM_GPS_INT_Do+0x1a4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	4053      	eors	r3, r2
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 8002864:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	b2d1      	uxtb	r1, r2
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002870:	7011      	strb	r1, [r2, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	4a09      	ldr	r2, [pc, #36]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fdf0 	bl	8003460 <TM_GPS_INT_Return>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	bf00      	nop
 800288c:	240007f3 	.word	0x240007f3
 8002890:	240007f1 	.word	0x240007f1
 8002894:	240007ef 	.word	0x240007ef
 8002898:	240007f0 	.word	0x240007f0
 800289c:	240007e0 	.word	0x240007e0
 80028a0:	24000000 	.word	0x24000000
 80028a4:	24000933 	.word	0x24000933
 80028a8:	24000934 	.word	0x24000934
 80028ac:	240007f4 	.word	0x240007f4
 80028b0:	240007f2 	.word	0x240007f2
 80028b4:	00000000 	.word	0x00000000

080028b8 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	ed2d 8b02 	vpush	{d8}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 80028c4:	4bc2      	ldr	r3, [pc, #776]	; (8002bd0 <TM_GPS_INT_CheckTerm+0x318>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d134      	bne.n	8002936 <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 80028cc:	49c1      	ldr	r1, [pc, #772]	; (8002bd4 <TM_GPS_INT_CheckTerm+0x31c>)
 80028ce:	48c2      	ldr	r0, [pc, #776]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 80028d0:	f000 fe76 	bl	80035c0 <TM_GPS_INT_StringStartsWith>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 80028da:	4bc0      	ldr	r3, [pc, #768]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e023      	b.n	800292a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 80028e2:	49bf      	ldr	r1, [pc, #764]	; (8002be0 <TM_GPS_INT_CheckTerm+0x328>)
 80028e4:	48bc      	ldr	r0, [pc, #752]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 80028e6:	f000 fe6b 	bl	80035c0 <TM_GPS_INT_StringStartsWith>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 80028f0:	4bba      	ldr	r3, [pc, #744]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e018      	b.n	800292a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 80028f8:	49ba      	ldr	r1, [pc, #744]	; (8002be4 <TM_GPS_INT_CheckTerm+0x32c>)
 80028fa:	48b7      	ldr	r0, [pc, #732]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 80028fc:	f000 fe60 	bl	80035c0 <TM_GPS_INT_StringStartsWith>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8002906:	4bb5      	ldr	r3, [pc, #724]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 8002908:	2202      	movs	r2, #2
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e00d      	b.n	800292a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 800290e:	49b6      	ldr	r1, [pc, #728]	; (8002be8 <TM_GPS_INT_CheckTerm+0x330>)
 8002910:	48b1      	ldr	r0, [pc, #708]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 8002912:	f000 fe55 	bl	80035c0 <TM_GPS_INT_StringStartsWith>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 800291c:	4baf      	ldr	r3, [pc, #700]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 800291e:	2203      	movs	r2, #3
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e002      	b.n	800292a <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 8002924:	4bad      	ldr	r3, [pc, #692]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 8002926:	2204      	movs	r2, #4
 8002928:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 800292a:	49ab      	ldr	r1, [pc, #684]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 800292c:	48af      	ldr	r0, [pc, #700]	; (8002bec <TM_GPS_INT_CheckTerm+0x334>)
 800292e:	f029 fc47 	bl	802c1c0 <strcpy>
 8002932:	f000 bd7b 	b.w	800342c <TM_GPS_INT_CheckTerm+0xb74>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8002936:	4ba9      	ldr	r3, [pc, #676]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	015b      	lsls	r3, r3, #5
 800293c:	4aa4      	ldr	r2, [pc, #656]	; (8002bd0 <TM_GPS_INT_CheckTerm+0x318>)
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	4313      	orrs	r3, r2
 8002942:	3b01      	subs	r3, #1
 8002944:	2b62      	cmp	r3, #98	; 0x62
 8002946:	f200 84d9 	bhi.w	80032fc <TM_GPS_INT_CheckTerm+0xa44>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <TM_GPS_INT_CheckTerm+0x98>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002e41 	.word	0x08002e41
 8002954:	08002add 	.word	0x08002add
 8002958:	08002b9d 	.word	0x08002b9d
 800295c:	08002c01 	.word	0x08002c01
 8002960:	08002cc1 	.word	0x08002cc1
 8002964:	08002d09 	.word	0x08002d09
 8002968:	08002ce7 	.word	0x08002ce7
 800296c:	080032fd 	.word	0x080032fd
 8002970:	08002d2b 	.word	0x08002d2b
 8002974:	080032fd 	.word	0x080032fd
 8002978:	080032fd 	.word	0x080032fd
 800297c:	080032fd 	.word	0x080032fd
 8002980:	080032fd 	.word	0x080032fd
 8002984:	080032fd 	.word	0x080032fd
 8002988:	080032fd 	.word	0x080032fd
 800298c:	080032fd 	.word	0x080032fd
 8002990:	080032fd 	.word	0x080032fd
 8002994:	080032fd 	.word	0x080032fd
 8002998:	080032fd 	.word	0x080032fd
 800299c:	080032fd 	.word	0x080032fd
 80029a0:	080032fd 	.word	0x080032fd
 80029a4:	080032fd 	.word	0x080032fd
 80029a8:	080032fd 	.word	0x080032fd
 80029ac:	080032fd 	.word	0x080032fd
 80029b0:	080032fd 	.word	0x080032fd
 80029b4:	080032fd 	.word	0x080032fd
 80029b8:	080032fd 	.word	0x080032fd
 80029bc:	080032fd 	.word	0x080032fd
 80029c0:	080032fd 	.word	0x080032fd
 80029c4:	080032fd 	.word	0x080032fd
 80029c8:	080032fd 	.word	0x080032fd
 80029cc:	080032fd 	.word	0x080032fd
 80029d0:	080032fd 	.word	0x080032fd
 80029d4:	08003045 	.word	0x08003045
 80029d8:	080032fd 	.word	0x080032fd
 80029dc:	080032fd 	.word	0x080032fd
 80029e0:	080032fd 	.word	0x080032fd
 80029e4:	080032fd 	.word	0x080032fd
 80029e8:	08002f29 	.word	0x08002f29
 80029ec:	08003069 	.word	0x08003069
 80029f0:	08002fab 	.word	0x08002fab
 80029f4:	080032fd 	.word	0x080032fd
 80029f8:	080032fd 	.word	0x080032fd
 80029fc:	080032fd 	.word	0x080032fd
 8002a00:	080032fd 	.word	0x080032fd
 8002a04:	080032fd 	.word	0x080032fd
 8002a08:	080032fd 	.word	0x080032fd
 8002a0c:	080032fd 	.word	0x080032fd
 8002a10:	080032fd 	.word	0x080032fd
 8002a14:	080032fd 	.word	0x080032fd
 8002a18:	080032fd 	.word	0x080032fd
 8002a1c:	080032fd 	.word	0x080032fd
 8002a20:	080032fd 	.word	0x080032fd
 8002a24:	080032fd 	.word	0x080032fd
 8002a28:	080032fd 	.word	0x080032fd
 8002a2c:	080032fd 	.word	0x080032fd
 8002a30:	080032fd 	.word	0x080032fd
 8002a34:	080032fd 	.word	0x080032fd
 8002a38:	080032fd 	.word	0x080032fd
 8002a3c:	080032fd 	.word	0x080032fd
 8002a40:	080032fd 	.word	0x080032fd
 8002a44:	080032fd 	.word	0x080032fd
 8002a48:	080032fd 	.word	0x080032fd
 8002a4c:	080032fd 	.word	0x080032fd
 8002a50:	080032fd 	.word	0x080032fd
 8002a54:	08003269 	.word	0x08003269
 8002a58:	0800328d 	.word	0x0800328d
 8002a5c:	0800328d 	.word	0x0800328d
 8002a60:	0800328d 	.word	0x0800328d
 8002a64:	0800328d 	.word	0x0800328d
 8002a68:	0800328d 	.word	0x0800328d
 8002a6c:	0800328d 	.word	0x0800328d
 8002a70:	0800328d 	.word	0x0800328d
 8002a74:	0800328d 	.word	0x0800328d
 8002a78:	0800328d 	.word	0x0800328d
 8002a7c:	0800328d 	.word	0x0800328d
 8002a80:	0800328d 	.word	0x0800328d
 8002a84:	0800328d 	.word	0x0800328d
 8002a88:	0800315d 	.word	0x0800315d
 8002a8c:	080030e3 	.word	0x080030e3
 8002a90:	080031d7 	.word	0x080031d7
 8002a94:	080032fd 	.word	0x080032fd
 8002a98:	080032fd 	.word	0x080032fd
 8002a9c:	080032fd 	.word	0x080032fd
 8002aa0:	080032fd 	.word	0x080032fd
 8002aa4:	080032fd 	.word	0x080032fd
 8002aa8:	080032fd 	.word	0x080032fd
 8002aac:	080032fd 	.word	0x080032fd
 8002ab0:	080032fd 	.word	0x080032fd
 8002ab4:	080032fd 	.word	0x080032fd
 8002ab8:	080032fd 	.word	0x080032fd
 8002abc:	080032fd 	.word	0x080032fd
 8002ac0:	080032fd 	.word	0x080032fd
 8002ac4:	080032fd 	.word	0x080032fd
 8002ac8:	080032fd 	.word	0x080032fd
 8002acc:	080032fd 	.word	0x080032fd
 8002ad0:	080032fd 	.word	0x080032fd
 8002ad4:	080032fd 	.word	0x080032fd
 8002ad8:	080032d9 	.word	0x080032d9
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002adc:	f107 0308 	add.w	r3, r7, #8
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	483d      	ldr	r0, [pc, #244]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 8002ae4:	f000 fd89 	bl	80035fa <TM_GPS_INT_Atoi>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4a40      	ldr	r2, [pc, #256]	; (8002bf0 <TM_GPS_INT_CheckTerm+0x338>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b00:	ed83 7b00 	vstr	d7, [r3]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 8002b04:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b06:	ed93 6b00 	vldr	d6, [r3]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <TM_GPS_INT_CheckTerm+0x338>)
 8002b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2164      	movs	r1, #100	; 0x64
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	ee07 3a90 	vmov	s15, r3
 8002b20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b24:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002bf8 <TM_GPS_INT_CheckTerm+0x340>
 8002b28:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8002b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b36:	ed83 7b00 	vstr	d7, [r3]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 8002b44:	4413      	add	r3, r2
 8002b46:	f107 0208 	add.w	r2, r7, #8
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fd54 	bl	80035fa <TM_GPS_INT_Atoi>
 8002b52:	4603      	mov	r3, r0
 8002b54:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	4619      	mov	r1, r3
 8002b64:	200a      	movs	r0, #10
 8002b66:	f000 fd75 	bl	8003654 <TM_GPS_INT_Pow>
 8002b6a:	ee07 0a90 	vmov	s15, r0
 8002b6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b72:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002bc8 <TM_GPS_INT_CheckTerm+0x310>
 8002b76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b7a:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b80:	ed93 7b00 	vldr	d7, [r3]
 8002b84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b8a:	ed83 7b00 	vstr	d7, [r3]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <TM_GPS_INT_CheckTerm+0x344>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <TM_GPS_INT_CheckTerm+0x344>)
 8002b98:	6013      	str	r3, [r2, #0]
			break;
 8002b9a:	e3b2      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b53      	cmp	r3, #83	; 0x53
 8002ba2:	d107      	bne.n	8002bb4 <TM_GPS_INT_CheckTerm+0x2fc>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002ba6:	ed93 7b00 	vldr	d7, [r3]
 8002baa:	eeb1 7b47 	vneg.f64	d7, d7
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002bb0:	ed83 7b00 	vstr	d7, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <TM_GPS_INT_CheckTerm+0x344>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <TM_GPS_INT_CheckTerm+0x344>)
 8002bbe:	6013      	str	r3, [r2, #0]
			break;
 8002bc0:	e39f      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
 8002bc2:	bf00      	nop
 8002bc4:	f3af 8000 	nop.w
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	404e0000 	.word	0x404e0000
 8002bd0:	240007ef 	.word	0x240007ef
 8002bd4:	0802ca98 	.word	0x0802ca98
 8002bd8:	240007e0 	.word	0x240007e0
 8002bdc:	24000000 	.word	0x24000000
 8002be0:	0802caa0 	.word	0x0802caa0
 8002be4:	0802caa8 	.word	0x0802caa8
 8002be8:	0802cab0 	.word	0x0802cab0
 8002bec:	2400092c 	.word	0x2400092c
 8002bf0:	51eb851f 	.word	0x51eb851f
 8002bf4:	24000800 	.word	0x24000800
 8002bf8:	42700000 	.word	0x42700000
 8002bfc:	240007f4 	.word	0x240007f4
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	4619      	mov	r1, r3
 8002c06:	48c0      	ldr	r0, [pc, #768]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002c08:	f000 fcf7 	bl	80035fa <TM_GPS_INT_Atoi>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4abe      	ldr	r2, [pc, #760]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c22:	4bbb      	ldr	r3, [pc, #748]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002c24:	ed83 7b02 	vstr	d7, [r3, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 8002c28:	4bb9      	ldr	r3, [pc, #740]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002c2a:	ed93 6b02 	vldr	d6, [r3, #8]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4bb6      	ldr	r3, [pc, #728]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002c32:	fba3 1302 	umull	r1, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2164      	movs	r1, #100	; 0x64
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c48:	eddf 5ab2 	vldr	s11, [pc, #712]	; 8002f14 <TM_GPS_INT_CheckTerm+0x65c>
 8002c4c:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8002c50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c58:	4bad      	ldr	r3, [pc, #692]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002c5a:	ed83 7b02 	vstr	d7, [r3, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	3301      	adds	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	4aa8      	ldr	r2, [pc, #672]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002c68:	4413      	add	r3, r2
 8002c6a:	f107 0208 	add.w	r2, r7, #8
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fcc2 	bl	80035fa <TM_GPS_INT_Atoi>
 8002c76:	4603      	mov	r3, r0
 8002c78:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	ee07 3a90 	vmov	s15, r3
 8002c80:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	4619      	mov	r1, r3
 8002c88:	200a      	movs	r0, #10
 8002c8a:	f000 fce3 	bl	8003654 <TM_GPS_INT_Pow>
 8002c8e:	ee07 0a90 	vmov	s15, r0
 8002c92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c96:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8002f00 <TM_GPS_INT_CheckTerm+0x648>
 8002c9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c9e:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002ca2:	4b9b      	ldr	r3, [pc, #620]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002ca4:	ed93 7b02 	vldr	d7, [r3, #8]
 8002ca8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002cac:	4b98      	ldr	r3, [pc, #608]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002cae:	ed83 7b02 	vstr	d7, [r3, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 8002cb2:	4b99      	ldr	r3, [pc, #612]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	4a97      	ldr	r2, [pc, #604]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002cbc:	6013      	str	r3, [r2, #0]
			break;
 8002cbe:	e320      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 8002cc0:	4b91      	ldr	r3, [pc, #580]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b57      	cmp	r3, #87	; 0x57
 8002cc6:	d107      	bne.n	8002cd8 <TM_GPS_INT_CheckTerm+0x420>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 8002cc8:	4b91      	ldr	r3, [pc, #580]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002cca:	ed93 7b02 	vldr	d7, [r3, #8]
 8002cce:	eeb1 7b47 	vneg.f64	d7, d7
 8002cd2:	4b8f      	ldr	r3, [pc, #572]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002cd4:	ed83 7b02 	vstr	d7, [r3, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 8002cd8:	4b8f      	ldr	r3, [pc, #572]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f043 0320 	orr.w	r3, r3, #32
 8002ce0:	4a8d      	ldr	r2, [pc, #564]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002ce2:	6013      	str	r3, [r2, #0]
			break;
 8002ce4:	e30d      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	4619      	mov	r1, r3
 8002cec:	4886      	ldr	r0, [pc, #536]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002cee:	f000 fc84 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b86      	ldr	r3, [pc, #536]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002cf8:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 8002cfa:	4b87      	ldr	r3, [pc, #540]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	4a85      	ldr	r2, [pc, #532]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002d04:	6013      	str	r3, [r2, #0]
			break;
 8002d06:	e2fc      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	487e      	ldr	r0, [pc, #504]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002d10:	f000 fc73 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b7d      	ldr	r3, [pc, #500]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002d1a:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 8002d1c:	4b7e      	ldr	r3, [pc, #504]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	4a7c      	ldr	r2, [pc, #496]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002d26:	6013      	str	r3, [r2, #0]
			break;
 8002d28:	e2eb      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 8002d2a:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b2d      	cmp	r3, #45	; 0x2d
 8002d30:	d145      	bne.n	8002dbe <TM_GPS_INT_CheckTerm+0x506>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 8002d32:	f107 0308 	add.w	r3, r7, #8
 8002d36:	4619      	mov	r1, r3
 8002d38:	4878      	ldr	r0, [pc, #480]	; (8002f1c <TM_GPS_INT_CheckTerm+0x664>)
 8002d3a:	f000 fc5e 	bl	80035fa <TM_GPS_INT_Atoi>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4c:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002d4e:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	3301      	adds	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002d62:	4413      	add	r3, r2
 8002d64:	f107 0208 	add.w	r2, r7, #8
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fc45 	bl	80035fa <TM_GPS_INT_Atoi>
 8002d70:	4603      	mov	r3, r0
 8002d72:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	4619      	mov	r1, r3
 8002d82:	200a      	movs	r0, #10
 8002d84:	f000 fc66 	bl	8003654 <TM_GPS_INT_Pow>
 8002d88:	ee07 0a90 	vmov	s15, r0
 8002d8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d90:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002d94:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002d96:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002da2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002da6:	4b5a      	ldr	r3, [pc, #360]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002da8:	edc3 7a04 	vstr	s15, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 8002dac:	4b58      	ldr	r3, [pc, #352]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002dae:	edd3 7a04 	vldr	s15, [r3, #16]
 8002db2:	eef1 7a67 	vneg.f32	s15, s15
 8002db6:	4b56      	ldr	r3, [pc, #344]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002db8:	edc3 7a04 	vstr	s15, [r3, #16]
 8002dbc:	e039      	b.n	8002e32 <TM_GPS_INT_CheckTerm+0x57a>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002dbe:	f107 0308 	add.w	r3, r7, #8
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4850      	ldr	r0, [pc, #320]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002dc6:	f000 fc18 	bl	80035fa <TM_GPS_INT_Atoi>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	ee07 3a90 	vmov	s15, r3
 8002dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002dda:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	3301      	adds	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002de8:	4413      	add	r3, r2
 8002dea:	f107 0208 	add.w	r2, r7, #8
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fc02 	bl	80035fa <TM_GPS_INT_Atoi>
 8002df6:	4603      	mov	r3, r0
 8002df8:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	4619      	mov	r1, r3
 8002e08:	200a      	movs	r0, #10
 8002e0a:	f000 fc23 	bl	8003654 <TM_GPS_INT_Pow>
 8002e0e:	ee07 0a90 	vmov	s15, r0
 8002e12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002e16:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002e1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e2c:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002e2e:	edc3 7a04 	vstr	s15, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f043 0310 	orr.w	r3, r3, #16
 8002e3a:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002e3c:	6013      	str	r3, [r2, #0]
			break;
 8002e3e:	e260      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002e40:	f107 0308 	add.w	r3, r7, #8
 8002e44:	4619      	mov	r1, r3
 8002e46:	4830      	ldr	r0, [pc, #192]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002e48:	f000 fbd7 	bl	80035fa <TM_GPS_INT_Atoi>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002e54:	fba3 1302 	umull	r1, r3, r3, r2
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	2164      	movs	r1, #100	; 0x64
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002e66:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002f20 <TM_GPS_INT_CheckTerm+0x668>
 8002e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e7e:	ee17 2a90 	vmov	r2, s15
 8002e82:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002e84:	fb83 1302 	smull	r1, r3, r3, r2
 8002e88:	1159      	asrs	r1, r3, #5
 8002e8a:	17d3      	asrs	r3, r2, #31
 8002e8c:	1acb      	subs	r3, r1, r3
 8002e8e:	2164      	movs	r1, #100	; 0x64
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002e9a:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002f24 <TM_GPS_INT_CheckTerm+0x66c>
 8002eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb2:	ee17 2a90 	vmov	r2, s15
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002eb8:	fb83 1302 	smull	r1, r3, r3, r2
 8002ebc:	1159      	asrs	r1, r3, #5
 8002ebe:	17d3      	asrs	r3, r2, #31
 8002ec0:	1acb      	subs	r3, r1, r3
 8002ec2:	2164      	movs	r1, #100	; 0x64
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002ece:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002eda:	4413      	add	r3, r2
 8002edc:	f107 0208 	add.w	r2, r7, #8
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fb89 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002eee:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef8:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002efa:	6013      	str	r3, [r2, #0]
			break;
 8002efc:	e201      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
 8002efe:	bf00      	nop
 8002f00:	00000000 	.word	0x00000000
 8002f04:	404e0000 	.word	0x404e0000
 8002f08:	240007e0 	.word	0x240007e0
 8002f0c:	51eb851f 	.word	0x51eb851f
 8002f10:	24000800 	.word	0x24000800
 8002f14:	42700000 	.word	0x42700000
 8002f18:	240007f4 	.word	0x240007f4
 8002f1c:	240007e1 	.word	0x240007e1
 8002f20:	3c23d70a 	.word	0x3c23d70a
 8002f24:	38d1b717 	.word	0x38d1b717
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	48c8      	ldr	r0, [pc, #800]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8002f30:	f000 fb63 	bl	80035fa <TM_GPS_INT_Atoi>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f42:	4bc4      	ldr	r3, [pc, #784]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f44:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	4abf      	ldr	r2, [pc, #764]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8002f52:	4413      	add	r3, r2
 8002f54:	f107 0208 	add.w	r2, r7, #8
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fb4d 	bl	80035fa <TM_GPS_INT_Atoi>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	4619      	mov	r1, r3
 8002f76:	200a      	movs	r0, #10
 8002f78:	f000 fb6c 	bl	8003654 <TM_GPS_INT_Pow>
 8002f7c:	ee07 0a90 	vmov	s15, r0
 8002f80:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002f84:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002f88:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002f8c:	4bb1      	ldr	r3, [pc, #708]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f96:	4baf      	ldr	r3, [pc, #700]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f98:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 8002f9c:	4bae      	ldr	r3, [pc, #696]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	4aac      	ldr	r2, [pc, #688]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002fa6:	6013      	str	r3, [r2, #0]
			break;
 8002fa8:	e1ab      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002faa:	f107 0308 	add.w	r3, r7, #8
 8002fae:	4619      	mov	r1, r3
 8002fb0:	48a7      	ldr	r0, [pc, #668]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8002fb2:	f000 fb22 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4ba8      	ldr	r3, [pc, #672]	; (800325c <TM_GPS_INT_CheckTerm+0x9a4>)
 8002fba:	fba3 1302 	umull	r1, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2164      	movs	r1, #100	; 0x64
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4ba2      	ldr	r3, [pc, #648]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8002fcc:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd8:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8003260 <TM_GPS_INT_CheckTerm+0x9a8>
 8002fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe4:	ee17 2a90 	vmov	r2, s15
 8002fe8:	4b9c      	ldr	r3, [pc, #624]	; (800325c <TM_GPS_INT_CheckTerm+0x9a4>)
 8002fea:	fb83 1302 	smull	r1, r3, r3, r2
 8002fee:	1159      	asrs	r1, r3, #5
 8002ff0:	17d3      	asrs	r3, r2, #31
 8002ff2:	1acb      	subs	r3, r1, r3
 8002ff4:	2164      	movs	r1, #100	; 0x64
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b95      	ldr	r3, [pc, #596]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003000:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003264 <TM_GPS_INT_CheckTerm+0x9ac>
 8003010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003018:	ee17 2a90 	vmov	r2, s15
 800301c:	4b8f      	ldr	r3, [pc, #572]	; (800325c <TM_GPS_INT_CheckTerm+0x9a4>)
 800301e:	fb83 1302 	smull	r1, r3, r3, r2
 8003022:	1159      	asrs	r1, r3, #5
 8003024:	17d3      	asrs	r3, r2, #31
 8003026:	1acb      	subs	r3, r1, r3
 8003028:	2164      	movs	r1, #100	; 0x64
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003034:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 8003036:	4b88      	ldr	r3, [pc, #544]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303e:	4a86      	ldr	r2, [pc, #536]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003040:	6013      	str	r3, [r2, #0]
			break;
 8003042:	e15e      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 8003044:	4b82      	ldr	r3, [pc, #520]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b41      	cmp	r3, #65	; 0x41
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	4b7f      	ldr	r3, [pc, #508]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 800305a:	4b7f      	ldr	r3, [pc, #508]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003062:	4a7d      	ldr	r2, [pc, #500]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003064:	6013      	str	r3, [r2, #0]
			break;
 8003066:	e14c      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003068:	f107 0308 	add.w	r3, r7, #8
 800306c:	4619      	mov	r1, r3
 800306e:	4878      	ldr	r0, [pc, #480]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003070:	f000 fac3 	bl	80035fa <TM_GPS_INT_Atoi>
 8003074:	4603      	mov	r3, r0
 8003076:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003082:	4b74      	ldr	r3, [pc, #464]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003084:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	3301      	adds	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	4a6f      	ldr	r2, [pc, #444]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003092:	4413      	add	r3, r2
 8003094:	f107 0208 	add.w	r2, r7, #8
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f000 faad 	bl	80035fa <TM_GPS_INT_Atoi>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	4619      	mov	r1, r3
 80030b2:	200a      	movs	r0, #10
 80030b4:	f000 face 	bl	8003654 <TM_GPS_INT_Pow>
 80030b8:	ee07 0a90 	vmov	s15, r0
 80030bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c0:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80030c4:	4b63      	ldr	r3, [pc, #396]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80030c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80030ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ce:	4b61      	ldr	r3, [pc, #388]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80030d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 80030d4:	4b60      	ldr	r3, [pc, #384]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030dc:	4a5e      	ldr	r2, [pc, #376]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030de:	6013      	str	r3, [r2, #0]
			break;
 80030e0:	e10f      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80030e2:	f107 0308 	add.w	r3, r7, #8
 80030e6:	4619      	mov	r1, r3
 80030e8:	4859      	ldr	r0, [pc, #356]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 80030ea:	f000 fa86 	bl	80035fa <TM_GPS_INT_Atoi>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fc:	4b55      	ldr	r3, [pc, #340]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80030fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	3301      	adds	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	4a51      	ldr	r2, [pc, #324]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 800310c:	4413      	add	r3, r2
 800310e:	f107 0208 	add.w	r2, r7, #8
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fa70 	bl	80035fa <TM_GPS_INT_Atoi>
 800311a:	4603      	mov	r3, r0
 800311c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	4619      	mov	r1, r3
 800312c:	200a      	movs	r0, #10
 800312e:	f000 fa91 	bl	8003654 <TM_GPS_INT_Pow>
 8003132:	ee07 0a90 	vmov	s15, r0
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800313e:	4b45      	ldr	r3, [pc, #276]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003140:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003148:	4b42      	ldr	r3, [pc, #264]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 800314a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 800314e:	4b42      	ldr	r3, [pc, #264]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003156:	4a40      	ldr	r2, [pc, #256]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003158:	6013      	str	r3, [r2, #0]
			break;
 800315a:	e0d2      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800315c:	f107 0308 	add.w	r3, r7, #8
 8003160:	4619      	mov	r1, r3
 8003162:	483b      	ldr	r0, [pc, #236]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003164:	f000 fa49 	bl	80035fa <TM_GPS_INT_Atoi>
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003178:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	3301      	adds	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	4a32      	ldr	r2, [pc, #200]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003186:	4413      	add	r3, r2
 8003188:	f107 0208 	add.w	r2, r7, #8
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fa33 	bl	80035fa <TM_GPS_INT_Atoi>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	4619      	mov	r1, r3
 80031a6:	200a      	movs	r0, #10
 80031a8:	f000 fa54 	bl	8003654 <TM_GPS_INT_Pow>
 80031ac:	ee07 0a90 	vmov	s15, r0
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80031b8:	4b26      	ldr	r3, [pc, #152]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80031ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80031be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80031c4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 80031d2:	6013      	str	r3, [r2, #0]
			break;
 80031d4:	e095      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	4619      	mov	r1, r3
 80031dc:	481c      	ldr	r0, [pc, #112]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 80031de:	f000 fa0c 	bl	80035fa <TM_GPS_INT_Atoi>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80031f2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3301      	adds	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003200:	4413      	add	r3, r2
 8003202:	f107 0208 	add.w	r2, r7, #8
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f9f6 	bl	80035fa <TM_GPS_INT_Atoi>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	4619      	mov	r1, r3
 8003220:	200a      	movs	r0, #10
 8003222:	f000 fa17 	bl	8003654 <TM_GPS_INT_Pow>
 8003226:	ee07 0a90 	vmov	s15, r0
 800322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322e:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003234:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 800323e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800324a:	4a03      	ldr	r2, [pc, #12]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 800324c:	6013      	str	r3, [r2, #0]
			break;
 800324e:	e058      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
 8003250:	240007e0 	.word	0x240007e0
 8003254:	24000800 	.word	0x24000800
 8003258:	240007f4 	.word	0x240007f4
 800325c:	51eb851f 	.word	0x51eb851f
 8003260:	3c23d70a 	.word	0x3c23d70a
 8003264:	38d1b717 	.word	0x38d1b717
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	4619      	mov	r1, r3
 800326e:	4872      	ldr	r0, [pc, #456]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 8003270:	f000 f9c3 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	4b70      	ldr	r3, [pc, #448]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 800327a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 800327e:	4b70      	ldr	r3, [pc, #448]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003286:	4a6e      	ldr	r2, [pc, #440]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 8003288:	6013      	str	r3, [r2, #0]
			break;
 800328a:	e03a      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800328c:	f107 0308 	add.w	r3, r7, #8
 8003290:	4619      	mov	r1, r3
 8003292:	4869      	ldr	r0, [pc, #420]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 8003294:	f000 f9b1 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	3b03      	subs	r3, #3
 80032a0:	b2d1      	uxtb	r1, r2
 80032a2:	4a66      	ldr	r2, [pc, #408]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80032a4:	4413      	add	r3, r2
 80032a6:	460a      	mov	r2, r1
 80032a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 80032ac:	4b66      	ldr	r3, [pc, #408]	; (8003448 <TM_GPS_INT_CheckTerm+0xb90>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	4b64      	ldr	r3, [pc, #400]	; (8003448 <TM_GPS_INT_CheckTerm+0xb90>)
 80032b6:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 80032b8:	4b60      	ldr	r3, [pc, #384]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80032ba:	7d1a      	ldrb	r2, [r3, #20]
 80032bc:	4b62      	ldr	r3, [pc, #392]	; (8003448 <TM_GPS_INT_CheckTerm+0xb90>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d11d      	bne.n	8003300 <TM_GPS_INT_CheckTerm+0xa48>
				ids_count = 0;						/* Reset count, we have all statements */
 80032c4:	4b60      	ldr	r3, [pc, #384]	; (8003448 <TM_GPS_INT_CheckTerm+0xb90>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 80032ca:	4b5d      	ldr	r3, [pc, #372]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d2:	4a5b      	ldr	r2, [pc, #364]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 80032d4:	6013      	str	r3, [r2, #0]
			}
			break;
 80032d6:	e013      	b.n	8003300 <TM_GPS_INT_CheckTerm+0xa48>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	4619      	mov	r1, r3
 80032de:	4856      	ldr	r0, [pc, #344]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 80032e0:	f000 f98b 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	4b54      	ldr	r3, [pc, #336]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80032ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 80032ee:	4b54      	ldr	r3, [pc, #336]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	4a52      	ldr	r2, [pc, #328]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 80032f8:	6013      	str	r3, [r2, #0]
			break;
 80032fa:	e002      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
#endif
		default: 
			break;
 80032fc:	bf00      	nop
 80032fe:	e000      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
			break;
 8003300:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 8003302:	4b52      	ldr	r3, [pc, #328]	; (800344c <TM_GPS_INT_CheckTerm+0xb94>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b03      	cmp	r3, #3
 8003308:	f040 8090 	bne.w	800342c <TM_GPS_INT_CheckTerm+0xb74>
		if (GPS_Term_Number == 1) {
 800330c:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d109      	bne.n	8003328 <TM_GPS_INT_CheckTerm+0xa70>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 8003314:	f107 0308 	add.w	r3, r7, #8
 8003318:	4619      	mov	r1, r3
 800331a:	4847      	ldr	r0, [pc, #284]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 800331c:	f000 f96d 	bl	80035fa <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	4b4a      	ldr	r3, [pc, #296]	; (8003450 <TM_GPS_INT_CheckTerm+0xb98>)
 8003326:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d109      	bne.n	8003344 <TM_GPS_INT_CheckTerm+0xa8c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 8003330:	f107 0308 	add.w	r3, r7, #8
 8003334:	4619      	mov	r1, r3
 8003336:	4840      	ldr	r0, [pc, #256]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 8003338:	f000 f95f 	bl	80035fa <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b44      	ldr	r3, [pc, #272]	; (8003454 <TM_GPS_INT_CheckTerm+0xb9c>)
 8003342:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 8003344:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d96f      	bls.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 800334c:	f107 0308 	add.w	r3, r7, #8
 8003350:	4619      	mov	r1, r3
 8003352:	4839      	ldr	r0, [pc, #228]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 8003354:	f000 f951 	bl	80035fa <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	3b04      	subs	r3, #4
 800335e:	b2da      	uxtb	r2, r3
 8003360:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003362:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 8003364:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 8003370:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 8003372:	4b38      	ldr	r3, [pc, #224]	; (8003454 <TM_GPS_INT_CheckTerm+0xb9c>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	333f      	adds	r3, #63	; 0x3f
 8003378:	b2db      	uxtb	r3, r3
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	b2db      	uxtb	r3, r3
 8003386:	4413      	add	r3, r2
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 800338c:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 800338e:	4b32      	ldr	r3, [pc, #200]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b17      	cmp	r3, #23
 8003394:	d84a      	bhi.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8003396:	4b31      	ldr	r3, [pc, #196]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10e      	bne.n	80033bc <TM_GPS_INT_CheckTerm+0xb04>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4619      	mov	r1, r3
 80033a6:	b2d0      	uxtb	r0, r2
 80033a8:	4a24      	ldr	r2, [pc, #144]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80033aa:	460b      	mov	r3, r1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	440b      	add	r3, r1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	3346      	adds	r3, #70	; 0x46
 80033b6:	4602      	mov	r2, r0
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e037      	b.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 1) {
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10e      	bne.n	80033e2 <TM_GPS_INT_CheckTerm+0xb2a>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	b2d0      	uxtb	r0, r2
 80033ce:	4a1b      	ldr	r2, [pc, #108]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80033d0:	460b      	mov	r3, r1
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	440b      	add	r3, r1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	3347      	adds	r3, #71	; 0x47
 80033dc:	4602      	mov	r2, r0
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e024      	b.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 2) {
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d10e      	bne.n	8003408 <TM_GPS_INT_CheckTerm+0xb50>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	b290      	uxth	r0, r2
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80033f6:	460b      	mov	r3, r1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	440b      	add	r3, r1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	3348      	adds	r3, #72	; 0x48
 8003402:	4602      	mov	r2, r0
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	e011      	b.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 3) {
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d10d      	bne.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	b2d0      	uxtb	r0, r2
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 800341c:	460b      	mov	r3, r1
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	440b      	add	r3, r1
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	334a      	adds	r3, #74	; 0x4a
 8003428:	4602      	mov	r2, r0
 800342a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	ecbd 8b02 	vpop	{d8}
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	240007e0 	.word	0x240007e0
 800343c:	24000800 	.word	0x24000800
 8003440:	240007f4 	.word	0x240007f4
 8003444:	240007ef 	.word	0x240007ef
 8003448:	24000937 	.word	0x24000937
 800344c:	24000000 	.word	0x24000000
 8003450:	24000933 	.word	0x24000933
 8003454:	24000934 	.word	0x24000934
 8003458:	24000935 	.word	0x24000935
 800345c:	24000936 	.word	0x24000936

08003460 <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f939 	bl	80036e0 <TM_GPS_INT_FlagsOk>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 808d 	beq.w	8003590 <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 8003476:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <TM_GPS_INT_Return+0x158>)
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 800347c:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800347e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003488:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800348a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8003494:	4b49      	ldr	r3, [pc, #292]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 8003496:	7d1a      	ldrb	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 800349c:	4b47      	ldr	r3, [pc, #284]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800349e:	7d5a      	ldrb	r2, [r3, #21]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 80034a4:	4b45      	ldr	r3, [pc, #276]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a43      	ldr	r2, [pc, #268]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034b0:	3316      	adds	r3, #22
 80034b2:	3216      	adds	r2, #22
 80034b4:	6811      	ldr	r1, [r2, #0]
 80034b6:	6019      	str	r1, [r3, #0]
 80034b8:	8892      	ldrh	r2, [r2, #4]
 80034ba:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3d      	ldr	r2, [pc, #244]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034c8:	331c      	adds	r3, #28
 80034ca:	321c      	adds	r2, #28
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4611      	mov	r1, r2
 80034d0:	8019      	strh	r1, [r3, #0]
 80034d2:	3302      	adds	r3, #2
 80034d4:	0c12      	lsrs	r2, r2, #16
 80034d6:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 80034d8:	4b38      	ldr	r3, [pc, #224]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034da:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 80034ec:	4b33      	ldr	r3, [pc, #204]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 80034fc:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 8003506:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	e00d      	b.n	8003532 <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	4928      	ldr	r1, [pc, #160]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800351c:	440a      	add	r2, r1
 800351e:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	460a      	mov	r2, r1
 8003528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	3301      	adds	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b0b      	cmp	r3, #11
 8003536:	d9ee      	bls.n	8003516 <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 8003538:	4b20      	ldr	r3, [pc, #128]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800353a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e019      	b.n	800357e <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	7bf9      	ldrb	r1, [r7, #15]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	440b      	add	r3, r1
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4403      	add	r3, r0
 800355a:	f103 0046 	add.w	r0, r3, #70	; 0x46
 800355e:	4917      	ldr	r1, [pc, #92]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	440b      	add	r3, r1
 800356a:	f103 0246 	add.w	r2, r3, #70	; 0x46
 800356e:	4603      	mov	r3, r0
 8003570:	6811      	ldr	r1, [r2, #0]
 8003572:	6019      	str	r1, [r3, #0]
 8003574:	8892      	ldrh	r2, [r2, #4]
 8003576:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	3301      	adds	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b17      	cmp	r3, #23
 8003582:	d9e2      	bls.n	800354a <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 800358c:	2300      	movs	r3, #0
 800358e:	e00e      	b.n	80035ae <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <TM_GPS_INT_Return+0x158>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 80035a0:	2302      	movs	r3, #2
 80035a2:	e004      	b.n	80035ae <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 80035ac:	2301      	movs	r3, #1
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	24000928 	.word	0x24000928
 80035bc:	24000800 	.word	0x24000800

080035c0 <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	while (*str) {
 80035ca:	e00b      	b.n	80035e4 <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	603a      	str	r2, [r7, #0]
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1c59      	adds	r1, r3, #1
 80035d8:	6079      	str	r1, [r7, #4]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e004      	b.n	80035ee <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ef      	bne.n	80035cc <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 80035ec:	2301      	movs	r3, #1
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 800360e:	e012      	b.n	8003636 <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4619      	mov	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	440b      	add	r3, r1
 8003628:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	601a      	str	r2, [r3, #0]
		count++;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	3301      	adds	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b2f      	cmp	r3, #47	; 0x2f
 800363c:	d903      	bls.n	8003646 <TM_GPS_INT_Atoi+0x4c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b39      	cmp	r3, #57	; 0x39
 8003644:	d9e4      	bls.n	8003610 <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	460a      	mov	r2, r1
 800365e:	71fb      	strb	r3, [r7, #7]
 8003660:	4613      	mov	r3, r2
 8003662:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 8003664:	2301      	movs	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003668:	e004      	b.n	8003674 <TM_GPS_INT_Pow+0x20>
		ret *= x;
 800366a:	79fa      	ldrb	r2, [r7, #7]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	1e5a      	subs	r2, r3, #1
 8003678:	71ba      	strb	r2, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f5      	bne.n	800366a <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	2b2f      	cmp	r3, #47	; 0x2f
 800369a:	d906      	bls.n	80036aa <TM_GPS_INT_Hex2Dec+0x1e>
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b39      	cmp	r3, #57	; 0x39
 80036a0:	d803      	bhi.n	80036aa <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	3b30      	subs	r3, #48	; 0x30
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e014      	b.n	80036d4 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d906      	bls.n	80036be <TM_GPS_INT_Hex2Dec+0x32>
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	2b46      	cmp	r3, #70	; 0x46
 80036b4:	d803      	bhi.n	80036be <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	3b37      	subs	r3, #55	; 0x37
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	e00a      	b.n	80036d4 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	2b60      	cmp	r3, #96	; 0x60
 80036c2:	d906      	bls.n	80036d2 <TM_GPS_INT_Hex2Dec+0x46>
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	2b66      	cmp	r3, #102	; 0x66
 80036c8:	d803      	bhi.n	80036d2 <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	3b57      	subs	r3, #87	; 0x57
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	e000      	b.n	80036d4 <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <TM_GPS_INT_FlagsOk+0x54>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <TM_GPS_INT_FlagsOk+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d118      	bne.n	8003726 <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	e00d      	b.n	8003716 <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	333e      	adds	r3, #62	; 0x3e
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	7ddb      	ldrb	r3, [r3, #23]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 800370c:	2300      	movs	r3, #0
 800370e:	e00b      	b.n	8003728 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	3301      	adds	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	429a      	cmp	r2, r3
 8003720:	d3eb      	bcc.n	80036fa <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	240007f4 	.word	0x240007f4
 8003738:	240007f8 	.word	0x240007f8

0800373c <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <TM_GPS_INT_ClearFlags+0x44>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e00a      	b.n	8003766 <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	333e      	adds	r3, #62	; 0x3e
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	3301      	adds	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	429a      	cmp	r2, r3
 8003770:	d3ee      	bcc.n	8003750 <TM_GPS_INT_ClearFlags+0x14>
	}
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	240007f4 	.word	0x240007f4

08003784 <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 800378c:	4baf      	ldr	r3, [pc, #700]	; (8003a4c <TM_GPS_INT_CheckEmpty+0x2c8>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 8151 	bne.w	8003a38 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003796:	4bae      	ldr	r3, [pc, #696]	; (8003a50 <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	015b      	lsls	r3, r3, #5
 800379c:	4aad      	ldr	r2, [pc, #692]	; (8003a54 <TM_GPS_INT_CheckEmpty+0x2d0>)
 800379e:	7812      	ldrb	r2, [r2, #0]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	3b01      	subs	r3, #1
 80037a4:	2b62      	cmp	r3, #98	; 0x62
 80037a6:	f200 8149 	bhi.w	8003a3c <TM_GPS_INT_CheckEmpty+0x2b8>
 80037aa:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <TM_GPS_INT_CheckEmpty+0x2c>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	0800399f 	.word	0x0800399f
 80037b4:	0800393d 	.word	0x0800393d
 80037b8:	0800394b 	.word	0x0800394b
 80037bc:	08003959 	.word	0x08003959
 80037c0:	08003967 	.word	0x08003967
 80037c4:	08003983 	.word	0x08003983
 80037c8:	08003975 	.word	0x08003975
 80037cc:	08003a3d 	.word	0x08003a3d
 80037d0:	08003991 	.word	0x08003991
 80037d4:	08003a3d 	.word	0x08003a3d
 80037d8:	08003a3d 	.word	0x08003a3d
 80037dc:	08003a3d 	.word	0x08003a3d
 80037e0:	08003a3d 	.word	0x08003a3d
 80037e4:	08003a3d 	.word	0x08003a3d
 80037e8:	08003a3d 	.word	0x08003a3d
 80037ec:	08003a3d 	.word	0x08003a3d
 80037f0:	08003a3d 	.word	0x08003a3d
 80037f4:	08003a3d 	.word	0x08003a3d
 80037f8:	08003a3d 	.word	0x08003a3d
 80037fc:	08003a3d 	.word	0x08003a3d
 8003800:	08003a3d 	.word	0x08003a3d
 8003804:	08003a3d 	.word	0x08003a3d
 8003808:	08003a3d 	.word	0x08003a3d
 800380c:	08003a3d 	.word	0x08003a3d
 8003810:	08003a3d 	.word	0x08003a3d
 8003814:	08003a3d 	.word	0x08003a3d
 8003818:	08003a3d 	.word	0x08003a3d
 800381c:	08003a3d 	.word	0x08003a3d
 8003820:	08003a3d 	.word	0x08003a3d
 8003824:	08003a3d 	.word	0x08003a3d
 8003828:	08003a3d 	.word	0x08003a3d
 800382c:	08003a3d 	.word	0x08003a3d
 8003830:	08003a3d 	.word	0x08003a3d
 8003834:	080039c9 	.word	0x080039c9
 8003838:	08003a3d 	.word	0x08003a3d
 800383c:	08003a3d 	.word	0x08003a3d
 8003840:	08003a3d 	.word	0x08003a3d
 8003844:	08003a3d 	.word	0x08003a3d
 8003848:	080039ad 	.word	0x080039ad
 800384c:	080039d7 	.word	0x080039d7
 8003850:	080039bb 	.word	0x080039bb
 8003854:	08003a3d 	.word	0x08003a3d
 8003858:	08003a3d 	.word	0x08003a3d
 800385c:	08003a3d 	.word	0x08003a3d
 8003860:	08003a3d 	.word	0x08003a3d
 8003864:	08003a3d 	.word	0x08003a3d
 8003868:	08003a3d 	.word	0x08003a3d
 800386c:	08003a3d 	.word	0x08003a3d
 8003870:	08003a3d 	.word	0x08003a3d
 8003874:	08003a3d 	.word	0x08003a3d
 8003878:	08003a3d 	.word	0x08003a3d
 800387c:	08003a3d 	.word	0x08003a3d
 8003880:	08003a3d 	.word	0x08003a3d
 8003884:	08003a3d 	.word	0x08003a3d
 8003888:	08003a3d 	.word	0x08003a3d
 800388c:	08003a3d 	.word	0x08003a3d
 8003890:	08003a3d 	.word	0x08003a3d
 8003894:	08003a3d 	.word	0x08003a3d
 8003898:	08003a3d 	.word	0x08003a3d
 800389c:	08003a3d 	.word	0x08003a3d
 80038a0:	08003a3d 	.word	0x08003a3d
 80038a4:	08003a3d 	.word	0x08003a3d
 80038a8:	08003a3d 	.word	0x08003a3d
 80038ac:	08003a3d 	.word	0x08003a3d
 80038b0:	08003a3d 	.word	0x08003a3d
 80038b4:	08003a0f 	.word	0x08003a0f
 80038b8:	08003a1d 	.word	0x08003a1d
 80038bc:	08003a1d 	.word	0x08003a1d
 80038c0:	08003a1d 	.word	0x08003a1d
 80038c4:	08003a1d 	.word	0x08003a1d
 80038c8:	08003a1d 	.word	0x08003a1d
 80038cc:	08003a1d 	.word	0x08003a1d
 80038d0:	08003a1d 	.word	0x08003a1d
 80038d4:	08003a1d 	.word	0x08003a1d
 80038d8:	08003a1d 	.word	0x08003a1d
 80038dc:	08003a1d 	.word	0x08003a1d
 80038e0:	08003a1d 	.word	0x08003a1d
 80038e4:	08003a1d 	.word	0x08003a1d
 80038e8:	080039f3 	.word	0x080039f3
 80038ec:	080039e5 	.word	0x080039e5
 80038f0:	08003a01 	.word	0x08003a01
 80038f4:	08003a3d 	.word	0x08003a3d
 80038f8:	08003a3d 	.word	0x08003a3d
 80038fc:	08003a3d 	.word	0x08003a3d
 8003900:	08003a3d 	.word	0x08003a3d
 8003904:	08003a3d 	.word	0x08003a3d
 8003908:	08003a3d 	.word	0x08003a3d
 800390c:	08003a3d 	.word	0x08003a3d
 8003910:	08003a3d 	.word	0x08003a3d
 8003914:	08003a3d 	.word	0x08003a3d
 8003918:	08003a3d 	.word	0x08003a3d
 800391c:	08003a3d 	.word	0x08003a3d
 8003920:	08003a3d 	.word	0x08003a3d
 8003924:	08003a3d 	.word	0x08003a3d
 8003928:	08003a3d 	.word	0x08003a3d
 800392c:	08003a3d 	.word	0x08003a3d
 8003930:	08003a3d 	.word	0x08003a3d
 8003934:	08003a3d 	.word	0x08003a3d
 8003938:	08003a2b 	.word	0x08003a2b
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	4a44      	ldr	r2, [pc, #272]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	e079      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 800394a:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003952:	4a41      	ldr	r2, [pc, #260]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e072      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 8003958:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e06b      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 8003966:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f043 0320 	orr.w	r3, r3, #32
 800396e:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e064      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 8003974:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	4a36      	ldr	r2, [pc, #216]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e05d      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 8003982:	4b35      	ldr	r3, [pc, #212]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f043 0308 	orr.w	r3, r3, #8
 800398a:	4a33      	ldr	r2, [pc, #204]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e056      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f043 0310 	orr.w	r3, r3, #16
 8003998:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e04f      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 800399e:	4b2e      	ldr	r3, [pc, #184]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a6:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e048      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 80039ac:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e041      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 80039ba:	4b27      	ldr	r3, [pc, #156]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e03a      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e033      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039de:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e02c      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 80039e4:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ec:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e025      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 80039f2:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039fa:	4a17      	ldr	r2, [pc, #92]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e01e      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a08:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e017      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a16:	4a10      	ldr	r2, [pc, #64]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e010      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a24:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a26:	6013      	str	r3, [r2, #0]
				break;
 8003a28:	e009      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a32:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e002      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 8003a3c:	bf00      	nop
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	240007f0 	.word	0x240007f0
 8003a50:	24000000 	.word	0x24000000
 8003a54:	240007ef 	.word	0x240007ef
 8003a58:	240007f4 	.word	0x240007f4

08003a5c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a66:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a6a:	eef0 7ae7 	vabs.f32	s15, s15
 8003a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a86:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a8a:	fefa 7a67 	vrintp.f32	s15, s15
 8003a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aaa:	fefb 7a67 	vrintm.f32	s15, s15
 8003aae:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <_Z13rt_roundf_snff>:

// Const memory section
// Definition for custom storage class: Const
const real32_T Max_angle_coef = 0.5F;  // Referenced by: '<S1>/Max_angle_coef'
real32_T rt_roundf_snf(real32_T u)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if (std::abs(u) < 8.388608E+6F) {
 8003ac6:	ed97 0a01 	vldr	s0, [r7, #4]
 8003aca:	f7ff ffc7 	bl	8003a5c <_ZSt3absf>
 8003ace:	eeb0 7a40 	vmov.f32	s14, s0
 8003ad2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003b68 <_Z13rt_roundf_snff+0xac>
 8003ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ade:	bf4c      	ite	mi
 8003ae0:	2301      	movmi	r3, #1
 8003ae2:	2300      	movpl	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d034      	beq.n	8003b54 <_Z13rt_roundf_snff+0x98>
    if (u >= 0.5F) {
 8003aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afa:	db0c      	blt.n	8003b16 <_Z13rt_roundf_snff+0x5a>
      y = std::floor(u + 0.5F);
 8003afc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b08:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0c:	f7ff ffc6 	bl	8003a9c <_ZSt5floorf>
 8003b10:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b14:	e020      	b.n	8003b58 <_Z13rt_roundf_snff+0x9c>
    } else if (u > -0.5F) {
 8003b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b1a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	dd08      	ble.n	8003b3a <_Z13rt_roundf_snff+0x7e>
      y = u * 0.0F;
 8003b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b2c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003b6c <_Z13rt_roundf_snff+0xb0>
 8003b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b34:	edc7 7a03 	vstr	s15, [r7, #12]
 8003b38:	e00e      	b.n	8003b58 <_Z13rt_roundf_snff+0x9c>
    } else {
      y = std::ceil(u - 0.5F);
 8003b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b46:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4a:	f7ff ff97 	bl	8003a7c <_ZSt4ceilf>
 8003b4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b52:	e001      	b.n	8003b58 <_Z13rt_roundf_snff+0x9c>
    }
  } else {
    y = u;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  return y;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	ee07 3a90 	vmov	s15, r3
}
 8003b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	4b000000 	.word	0x4b000000
 8003b6c:	00000000 	.word	0x00000000

08003b70 <_ZN23px4_AlgorithmModelClass4stepEv>:

// Model step function
void px4_AlgorithmModelClass::step()
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  // Gain: '<S1>/Max_angle_coef' incorporates:
  //   Inport: '<Root>/set_pitch'
  //   Inport: '<Root>/set_roll'

  Second_att_control_codeblock__B.Max_angle_coef_m[0] = Max_angle_coef *
    Second_att_control_codeblock__U.set_roll;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
  Second_att_control_codeblock__B.Max_angle_coef_m[0] = Max_angle_coef *
 8003b7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	edc3 7a00 	vstr	s15, [r3]
  Second_att_control_codeblock__B.Max_angle_coef_m[1] = Max_angle_coef *
    Second_att_control_codeblock__U.set_pitch;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
  Second_att_control_codeblock__B.Max_angle_coef_m[1] = Max_angle_coef *
 8003b92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	edc3 7a01 	vstr	s15, [r3, #4]

  // Sum: '<S4>/Sum' incorporates:
  //   Inport: '<Root>/Roll'

  Second_att_control_codeblock__B.pitchrollerror =
    Second_att_control_codeblock__B.Max_angle_coef_m[0] -
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	ed93 7a00 	vldr	s14, [r3]
    Second_att_control_codeblock__U.Roll;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
    Second_att_control_codeblock__B.Max_angle_coef_m[0] -
 8003bac:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror =
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	edc3 7a02 	vstr	s15, [r3, #8]

  // Gain: '<S4>/P_pr'
  Second_att_control_codeblock__B.P_pr = Angle_rate_roll_PI_kP *
    Second_att_control_codeblock__B.pitchrollerror;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	ed93 7a02 	vldr	s14, [r3, #8]
  Second_att_control_codeblock__B.P_pr = Angle_rate_roll_PI_kP *
 8003bbc:	4bb0      	ldr	r3, [pc, #704]	; (8003e80 <_ZN23px4_AlgorithmModelClass4stepEv+0x310>)
 8003bbe:	edd3 7a00 	vldr	s15, [r3]
 8003bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	edc3 7a03 	vstr	s15, [r3, #12]

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]

  // Gain: '<S4>/I_pr'
  Second_att_control_codeblock__B.I_pr = Angle_rate_roll_PI_kI *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	ed93 7a04 	vldr	s14, [r3, #16]
  Second_att_control_codeblock__B.I_pr = Angle_rate_roll_PI_kI *
 8003bdc:	4ba9      	ldr	r3, [pc, #676]	; (8003e84 <_ZN23px4_AlgorithmModelClass4stepEv+0x314>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	edc3 7a05 	vstr	s15, [r3, #20]

  // Sum: '<S4>/Sum16'
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	ed93 7a03 	vldr	s14, [r3, #12]
    + Second_att_control_codeblock__B.I_pr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	edc3 7a06 	vstr	s15, [r3, #24]

  // Sum: '<S5>/Sum' incorporates:
  //   Inport: '<Root>/p'

  Second_att_control_codeblock__B.pitchrollerror_b =
    Second_att_control_codeblock__B.P_pr_m - Second_att_control_codeblock__U.p;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	ed93 7a06 	vldr	s14, [r3, #24]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_b =
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	edc3 7a07 	vstr	s15, [r3, #28]

  // Gain: '<S5>/P_pr'
  Second_att_control_codeblock__B.P_pr_b = kP_Roll_rate_PID *
    Second_att_control_codeblock__B.pitchrollerror_b;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	ed93 7a07 	vldr	s14, [r3, #28]
  Second_att_control_codeblock__B.P_pr_b = kP_Roll_rate_PID *
 8003c1e:	4b9a      	ldr	r3, [pc, #616]	; (8003e88 <_ZN23px4_AlgorithmModelClass4stepEv+0x318>)
 8003c20:	edd3 7a00 	vldr	s15, [r3]
 8003c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	edc3 7a08 	vstr	s15, [r3, #32]

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

  // Gain: '<S5>/I_pr'
  Second_att_control_codeblock__B.I_pr_d = kI_Roll_rate_PID *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
  Second_att_control_codeblock__B.I_pr_d = kI_Roll_rate_PID *
 8003c3e:	4b93      	ldr	r3, [pc, #588]	; (8003e8c <_ZN23px4_AlgorithmModelClass4stepEv+0x31c>)
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  //
  //  About '<S7>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp =
    Second_att_control_codeblock__B.pitchrollerror_b *
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock__P.TSamp_WtEt;
 8003c54:	4b8e      	ldr	r3, [pc, #568]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003c56:	edd3 7a07 	vldr	s15, [r3, #28]
    Second_att_control_codeblock__B.pitchrollerror_b *
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp =
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1 =
    Second_att_control_codeblock_DW.UD_DSTATE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
  Second_att_control_codeblock__B.Uk1 =
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
  //
  //  Block description for '<S7>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Uk1;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8003c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // Gain: '<S5>/D_pr'
  Second_att_control_codeblock__B.D_pr = kD_Roll_rate_PID *
    Second_att_control_codeblock__B.Diff;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
  Second_att_control_codeblock__B.D_pr = kD_Roll_rate_PID *
 8003c8a:	4b82      	ldr	r3, [pc, #520]	; (8003e94 <_ZN23px4_AlgorithmModelClass4stepEv+0x324>)
 8003c8c:	edd3 7a00 	vldr	s15, [r3]
 8003c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  // Sum: '<S5>/Sum16'
  Second_att_control_codeblock__B.P_pr_d =
    (Second_att_control_codeblock__B.P_pr_b +
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	ed93 7a08 	vldr	s14, [r3, #32]
     Second_att_control_codeblock__B.I_pr_d) +
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    (Second_att_control_codeblock__B.P_pr_b +
 8003ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
     Second_att_control_codeblock__B.I_pr_d) +
 8003cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_d =
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // Saturate: '<S5>/Saturation'
  u0 = Second_att_control_codeblock__B.P_pr_d;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation_LowerSat;
 8003cc0:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation_UpperSat;
 8003cc6:	4b72      	ldr	r3, [pc, #456]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 8003ccc:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cdc:	dd03      	ble.n	8003ce6 <_ZN23px4_AlgorithmModelClass4stepEv+0x176>
    Second_att_control_codeblock__B.Saturation = u2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ce4:	e00f      	b.n	8003d06 <_ZN23px4_AlgorithmModelClass4stepEv+0x196>
  } else if (u0 < u1) {
 8003ce6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf6:	d503      	bpl.n	8003d00 <_ZN23px4_AlgorithmModelClass4stepEv+0x190>
    Second_att_control_codeblock__B.Saturation = u1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8003cfe:	e002      	b.n	8003d06 <_ZN23px4_AlgorithmModelClass4stepEv+0x196>
  } else {
    Second_att_control_codeblock__B.Saturation = u0;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

  // End of Saturate: '<S5>/Saturation'

  // Gain: '<S5>/Gain'
  Second_att_control_codeblock__B.Gain =
    Second_att_control_codeblock__P.Gain_Gain *
 8003d06:	4b62      	ldr	r3, [pc, #392]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003d08:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
    Second_att_control_codeblock__B.Saturation;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    Second_att_control_codeblock__P.Gain_Gain *
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain =
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  // Sum: '<S4>/Sum2' incorporates:
  //   Inport: '<Root>/Pitch'

  Second_att_control_codeblock__B.pitchrollerror_m =
    Second_att_control_codeblock__B.Max_angle_coef_m[1] -
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	ed93 7a01 	vldr	s14, [r3, #4]
    Second_att_control_codeblock__U.Pitch;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
    Second_att_control_codeblock__B.Max_angle_coef_m[1] -
 8003d28:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_m =
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  // Gain: '<S4>/P_pr1'
  Second_att_control_codeblock__B.P_pr1 = Angle_rate_pitch_kP *
    Second_att_control_codeblock__B.pitchrollerror_m;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
  Second_att_control_codeblock__B.P_pr1 = Angle_rate_pitch_kP *
 8003d38:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <_ZN23px4_AlgorithmModelClass4stepEv+0x328>)
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	651a      	str	r2, [r3, #80]	; 0x50

  // Gain: '<S4>/I_pr1'
  Second_att_control_codeblock__B.I_pr1 = Angle_rate_pitch_kI *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
  Second_att_control_codeblock__B.I_pr1 = Angle_rate_pitch_kI *
 8003d58:	4b50      	ldr	r3, [pc, #320]	; (8003e9c <_ZN23px4_AlgorithmModelClass4stepEv+0x32c>)
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Sum: '<S4>/Sum1'
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    + Second_att_control_codeblock__B.I_pr1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d74:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Sum: '<S5>/Sum1' incorporates:
  //   Inport: '<Root>/q'

  Second_att_control_codeblock__B.pitchrollerror_i =
    Second_att_control_codeblock__B.P_pr_o - Second_att_control_codeblock__U.q;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_i =
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  // Gain: '<S5>/P_pr1'
  Second_att_control_codeblock__B.P_pr1_p = kP_Pitch_rate_PID *
    Second_att_control_codeblock__B.pitchrollerror_i;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
  Second_att_control_codeblock__B.P_pr1_p = kP_Pitch_rate_PID *
 8003d9a:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <_ZN23px4_AlgorithmModelClass4stepEv+0x330>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	665a      	str	r2, [r3, #100]	; 0x64

  // Gain: '<S5>/I_pr1'
  Second_att_control_codeblock__B.I_pr1_j = kI_Pitch_rate_PID *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
  Second_att_control_codeblock__B.I_pr1_j = kI_Pitch_rate_PID *
 8003dba:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <_ZN23px4_AlgorithmModelClass4stepEv+0x334>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
  //
  //  About '<S8>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp_h =
    Second_att_control_codeblock__B.pitchrollerror_i *
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__P.TSamp_WtEt_l;
 8003dd0:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003dd2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
    Second_att_control_codeblock__B.pitchrollerror_i *
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp_h =
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1_i =
    Second_att_control_codeblock_DW.UD_DSTATE_e;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
  Second_att_control_codeblock__B.Uk1_i =
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	671a      	str	r2, [r3, #112]	; 0x70
  //  Block description for '<S8>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff_l =
    Second_att_control_codeblock__B.TSamp_h -
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
    Second_att_control_codeblock__B.Uk1_i;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
    Second_att_control_codeblock__B.TSamp_h -
 8003df6:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Diff_l =
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

  // Gain: '<S5>/D_pr1'
  Second_att_control_codeblock__B.D_pr1 = kD_Pitch_rate_PID *
    Second_att_control_codeblock__B.Diff_l;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
  Second_att_control_codeblock__B.D_pr1 = kD_Pitch_rate_PID *
 8003e06:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <_ZN23px4_AlgorithmModelClass4stepEv+0x338>)
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

  // Sum: '<S5>/Sum2'
  Second_att_control_codeblock__B.P_pr_j =
    (Second_att_control_codeblock__B.P_pr1_p +
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
     Second_att_control_codeblock__B.I_pr1_j) +
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    (Second_att_control_codeblock__B.P_pr1_p +
 8003e22:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
     Second_att_control_codeblock__B.I_pr1_j) +
 8003e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_j =
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  // Saturate: '<S5>/Saturation1'
  u0 = Second_att_control_codeblock__B.P_pr_j;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3a:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation1_LowerSat;
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation1_UpperSat;
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 8003e48:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	dd04      	ble.n	8003e64 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f4>
    Second_att_control_codeblock__B.Saturation1 = u2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003e62:	e027      	b.n	8003eb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x344>
  } else if (u0 < u1) {
 8003e64:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e68:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e74:	d51a      	bpl.n	8003eac <_ZN23px4_AlgorithmModelClass4stepEv+0x33c>
    Second_att_control_codeblock__B.Saturation1 = u1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003e7e:	e019      	b.n	8003eb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x344>
 8003e80:	24000010 	.word	0x24000010
 8003e84:	2400000c 	.word	0x2400000c
 8003e88:	24000030 	.word	0x24000030
 8003e8c:	24000024 	.word	0x24000024
 8003e90:	24000038 	.word	0x24000038
 8003e94:	2400001c 	.word	0x2400001c
 8003e98:	24000008 	.word	0x24000008
 8003e9c:	24000004 	.word	0x24000004
 8003ea0:	2400002c 	.word	0x2400002c
 8003ea4:	24000020 	.word	0x24000020
 8003ea8:	24000018 	.word	0x24000018
  } else {
    Second_att_control_codeblock__B.Saturation1 = u0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  // End of Saturate: '<S5>/Saturation1'

  // Gain: '<S5>/Gain1'
  Second_att_control_codeblock__B.Gain1 =
    Second_att_control_codeblock__P.Gain1_Gain *
 8003eb4:	4bbb      	ldr	r3, [pc, #748]	; (80041a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x634>)
 8003eb6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    Second_att_control_codeblock__B.Saturation1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
    Second_att_control_codeblock__P.Gain1_Gain *
 8003ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain1 =
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

  // Sum: '<S6>/Sum' incorporates:
  //   Inport: '<Root>/r'
  //   Inport: '<Root>/set_yaw'

  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
    - Second_att_control_codeblock__U.r;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

  // Gain: '<S6>/Gain'
  Second_att_control_codeblock__B.Gain_f = Yaw_angel_rate_P *
    Second_att_control_codeblock__B.Sum;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
  Second_att_control_codeblock__B.Gain_f = Yaw_angel_rate_P *
 8003ee6:	4bb0      	ldr	r3, [pc, #704]	; (80041a8 <_ZN23px4_AlgorithmModelClass4stepEv+0x638>)
 8003ee8:	edd3 7a00 	vldr	s15, [r3]
 8003eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

  // Gain: '<S46>/Proportional Gain'
  Second_att_control_codeblock__B.ProportionalGain = kP_Yaw_rate_PID *
    Second_att_control_codeblock__B.Gain_f;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
  Second_att_control_codeblock__B.ProportionalGain = kP_Yaw_rate_PID *
 8003efc:	4bab      	ldr	r3, [pc, #684]	; (80041ac <_ZN23px4_AlgorithmModelClass4stepEv+0x63c>)
 8003efe:	edd3 7a00 	vldr	s15, [r3]
 8003f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

  // DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock__B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
  Second_att_control_codeblock__B.Integrator =
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  // Sum: '<S50>/Sum'
  Second_att_control_codeblock__B.Sum_f =
    Second_att_control_codeblock__B.ProportionalGain +
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
    Second_att_control_codeblock__B.Integrator;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
    Second_att_control_codeblock__B.ProportionalGain +
 8003f24:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum_f =
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

  // MATLAB Function: '<S1>/pwm_out1' incorporates:
  //   Inport: '<Root>/set_thrust'

  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003f34:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 8003f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8003f48:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003f4c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003f50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 8003f5e:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 8003f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	f7ff fda7 	bl	8003abc <_Z13rt_roundf_snff>
 8003f6e:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8003f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f76:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8003f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	d511      	bpl.n	8003fa8 <_ZN23px4_AlgorithmModelClass4stepEv+0x438>
    if (u0 >= 0.0F) {
 8003f84:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	db07      	blt.n	8003fa2 <_ZN23px4_AlgorithmModelClass4stepEv+0x432>
      y = static_cast<uint16_T>(u0);
 8003f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9a:	ee17 3a90 	vmov	r3, s15
 8003f9e:	837b      	strh	r3, [r7, #26]
 8003fa0:	e005      	b.n	8003fae <_ZN23px4_AlgorithmModelClass4stepEv+0x43e>
    } else {
      y = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	837b      	strh	r3, [r7, #26]
 8003fa6:	e002      	b.n	8003fae <_ZN23px4_AlgorithmModelClass4stepEv+0x43e>
    }
  } else {
    y = MAX_uint16_T;
 8003fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fac:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8003fae:	8b7b      	ldrh	r3, [r7, #26]
 8003fb0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003fb4:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbc:	d302      	bcc.n	8003fc4 <_ZN23px4_AlgorithmModelClass4stepEv+0x454>
    tmp = 65535U;
 8003fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fc2:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M1 = static_cast<uint16_T>(tmp);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
                       Second_att_control_codeblock__B.Sum_f) *
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 8003fda:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8003fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003fe8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003fec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 8003ffa:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 8003ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004002:	eeb0 0a67 	vmov.f32	s0, s15
 8004006:	f7ff fd59 	bl	8003abc <_Z13rt_roundf_snff>
 800400a:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800400e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004012:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401e:	d511      	bpl.n	8004044 <_ZN23px4_AlgorithmModelClass4stepEv+0x4d4>
    if (u0 >= 0.0F) {
 8004020:	edd7 7a05 	vldr	s15, [r7, #20]
 8004024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	db07      	blt.n	800403e <_ZN23px4_AlgorithmModelClass4stepEv+0x4ce>
      y = static_cast<uint16_T>(u0);
 800402e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004036:	ee17 3a90 	vmov	r3, s15
 800403a:	837b      	strh	r3, [r7, #26]
 800403c:	e005      	b.n	800404a <_ZN23px4_AlgorithmModelClass4stepEv+0x4da>
    } else {
      y = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	837b      	strh	r3, [r7, #26]
 8004042:	e002      	b.n	800404a <_ZN23px4_AlgorithmModelClass4stepEv+0x4da>
    }
  } else {
    y = MAX_uint16_T;
 8004044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004048:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 800404a:	8b7b      	ldrh	r3, [r7, #26]
 800404c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004050:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d302      	bcc.n	8004060 <_ZN23px4_AlgorithmModelClass4stepEv+0x4f0>
    tmp = 65535U;
 800405a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800405e:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M2 = static_cast<uint16_T>(tmp);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004070:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004074:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        Second_att_control_codeblock__B.Gain1) -
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 800407e:	ee37 7a27 	vadd.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain1) -
 8004088:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004092:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004096:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800409a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80040a4:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 80040a8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 80040ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b0:	eeb0 0a67 	vmov.f32	s0, s15
 80040b4:	f7ff fd02 	bl	8003abc <_Z13rt_roundf_snff>
 80040b8:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 80040bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80040c0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 80040c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	d511      	bpl.n	80040f2 <_ZN23px4_AlgorithmModelClass4stepEv+0x582>
    if (u0 >= 0.0F) {
 80040ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80040d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040da:	db07      	blt.n	80040ec <_ZN23px4_AlgorithmModelClass4stepEv+0x57c>
      y = static_cast<uint16_T>(u0);
 80040dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80040e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e4:	ee17 3a90 	vmov	r3, s15
 80040e8:	837b      	strh	r3, [r7, #26]
 80040ea:	e005      	b.n	80040f8 <_ZN23px4_AlgorithmModelClass4stepEv+0x588>
    } else {
      y = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	837b      	strh	r3, [r7, #26]
 80040f0:	e002      	b.n	80040f8 <_ZN23px4_AlgorithmModelClass4stepEv+0x588>
    }
  } else {
    y = MAX_uint16_T;
 80040f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040f6:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80040f8:	8b7b      	ldrh	r3, [r7, #26]
 80040fa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80040fe:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004106:	d302      	bcc.n	800410e <_ZN23px4_AlgorithmModelClass4stepEv+0x59e>
    tmp = 65535U;
 8004108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800410c:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M3 = static_cast<uint16_T>(tmp);
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800411e:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8004128:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800412c:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004130:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 800413a:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004144:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004148:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800414c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004156:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 800415a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 800415e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004162:	eeb0 0a67 	vmov.f32	s0, s15
 8004166:	f7ff fca9 	bl	8003abc <_Z13rt_roundf_snff>
 800416a:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800416e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004172:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	d51b      	bpl.n	80041b8 <_ZN23px4_AlgorithmModelClass4stepEv+0x648>
    if (u0 >= 0.0F) {
 8004180:	edd7 7a05 	vldr	s15, [r7, #20]
 8004184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418c:	db07      	blt.n	800419e <_ZN23px4_AlgorithmModelClass4stepEv+0x62e>
      y = static_cast<uint16_T>(u0);
 800418e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004196:	ee17 3a90 	vmov	r3, s15
 800419a:	837b      	strh	r3, [r7, #26]
 800419c:	e00f      	b.n	80041be <_ZN23px4_AlgorithmModelClass4stepEv+0x64e>
    } else {
      y = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	837b      	strh	r3, [r7, #26]
 80041a2:	e00c      	b.n	80041be <_ZN23px4_AlgorithmModelClass4stepEv+0x64e>
 80041a4:	24000038 	.word	0x24000038
 80041a8:	24000014 	.word	0x24000014
 80041ac:	24000034 	.word	0x24000034
 80041b0:	447a0000 	.word	0x447a0000
 80041b4:	47800000 	.word	0x47800000
    }
  } else {
    y = MAX_uint16_T;
 80041b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041bc:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80041be:	8b7b      	ldrh	r3, [r7, #26]
 80041c0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80041c4:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d302      	bcc.n	80041d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x664>
    tmp = 65535U;
 80041ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041d2:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M4 = static_cast<uint16_T>(tmp);
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80041ea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80041ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80041f2:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 80041fc:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004206:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800420a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800420e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004218:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 800421c:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 8004220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004224:	eeb0 0a67 	vmov.f32	s0, s15
 8004228:	f7ff fc48 	bl	8003abc <_Z13rt_roundf_snff>
 800422c:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8004230:	edd7 7a05 	vldr	s15, [r7, #20]
 8004234:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	d511      	bpl.n	8004266 <_ZN23px4_AlgorithmModelClass4stepEv+0x6f6>
    if (u0 >= 0.0F) {
 8004242:	edd7 7a05 	vldr	s15, [r7, #20]
 8004246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	db07      	blt.n	8004260 <_ZN23px4_AlgorithmModelClass4stepEv+0x6f0>
      y = static_cast<uint16_T>(u0);
 8004250:	edd7 7a05 	vldr	s15, [r7, #20]
 8004254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004258:	ee17 3a90 	vmov	r3, s15
 800425c:	837b      	strh	r3, [r7, #26]
 800425e:	e005      	b.n	800426c <_ZN23px4_AlgorithmModelClass4stepEv+0x6fc>
    } else {
      y = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	837b      	strh	r3, [r7, #26]
 8004264:	e002      	b.n	800426c <_ZN23px4_AlgorithmModelClass4stepEv+0x6fc>
    }
  } else {
    y = MAX_uint16_T;
 8004266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800426a:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 800426c:	8b7b      	ldrh	r3, [r7, #26]
 800426e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004272:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427a:	d302      	bcc.n	8004282 <_ZN23px4_AlgorithmModelClass4stepEv+0x712>
    tmp = 65535U;
 800427c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004280:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M5 = static_cast<uint16_T>(tmp);
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004292:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004296:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        -Second_att_control_codeblock__B.Gain1) -
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 80042a0:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        -Second_att_control_codeblock__B.Gain1) -
 80042aa:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 80042b4:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80042b8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80042bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80042c6:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 80042ca:	ed1f 7a47 	vldr	s14, [pc, #-284]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 80042ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d2:	eeb0 0a67 	vmov.f32	s0, s15
 80042d6:	f7ff fbf1 	bl	8003abc <_Z13rt_roundf_snff>
 80042da:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 80042de:	edd7 7a05 	vldr	s15, [r7, #20]
 80042e2:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 80042e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ee:	d511      	bpl.n	8004314 <_ZN23px4_AlgorithmModelClass4stepEv+0x7a4>
    if (u0 >= 0.0F) {
 80042f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80042f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	db07      	blt.n	800430e <_ZN23px4_AlgorithmModelClass4stepEv+0x79e>
      y = static_cast<uint16_T>(u0);
 80042fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	ee17 3a90 	vmov	r3, s15
 800430a:	837b      	strh	r3, [r7, #26]
 800430c:	e005      	b.n	800431a <_ZN23px4_AlgorithmModelClass4stepEv+0x7aa>
    } else {
      y = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	837b      	strh	r3, [r7, #26]
 8004312:	e002      	b.n	800431a <_ZN23px4_AlgorithmModelClass4stepEv+0x7aa>
    }
  } else {
    y = MAX_uint16_T;
 8004314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004318:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 800431a:	8b7b      	ldrh	r3, [r7, #26]
 800431c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004320:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d302      	bcc.n	8004330 <_ZN23px4_AlgorithmModelClass4stepEv+0x7c0>
    tmp = 65535U;
 800432a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800432e:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M6 = static_cast<uint16_T>(tmp);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

  // End of MATLAB Function: '<S1>/pwm_out1'

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M1 >
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004340:	4b60      	ldr	r3, [pc, #384]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M1 >
 8004346:	429a      	cmp	r2, r3
 8004348:	d904      	bls.n	8004354 <_ZN23px4_AlgorithmModelClass4stepEv+0x7e4>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800434a:	4b5e      	ldr	r3, [pc, #376]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800434c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004350:	837b      	strh	r3, [r7, #26]
 8004352:	e010      	b.n	8004376 <_ZN23px4_AlgorithmModelClass4stepEv+0x806>
  } else if (Second_att_control_codeblock__B.M1 <
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 800435a:	4b5a      	ldr	r3, [pc, #360]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800435c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M1 <
 8004360:	429a      	cmp	r2, r3
 8004362:	d204      	bcs.n	800436e <_ZN23px4_AlgorithmModelClass4stepEv+0x7fe>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004364:	4b57      	ldr	r3, [pc, #348]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800436a:	837b      	strh	r3, [r7, #26]
 800436c:	e003      	b.n	8004376 <_ZN23px4_AlgorithmModelClass4stepEv+0x806>
  } else {
    y = Second_att_control_codeblock__B.M1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8004374:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[0] = y;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8b7a      	ldrh	r2, [r7, #26]
 800437a:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M2 >
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004384:	4b4f      	ldr	r3, [pc, #316]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M2 >
 800438a:	429a      	cmp	r2, r3
 800438c:	d904      	bls.n	8004398 <_ZN23px4_AlgorithmModelClass4stepEv+0x828>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800438e:	4b4d      	ldr	r3, [pc, #308]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004390:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004394:	837b      	strh	r3, [r7, #26]
 8004396:	e010      	b.n	80043ba <_ZN23px4_AlgorithmModelClass4stepEv+0x84a>
  } else if (Second_att_control_codeblock__B.M2 <
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 800439e:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M2 <
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d204      	bcs.n	80043b2 <_ZN23px4_AlgorithmModelClass4stepEv+0x842>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80043a8:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043ae:	837b      	strh	r3, [r7, #26]
 80043b0:	e003      	b.n	80043ba <_ZN23px4_AlgorithmModelClass4stepEv+0x84a>
  } else {
    y = Second_att_control_codeblock__B.M2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80043b8:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[1] = y;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8b7a      	ldrh	r2, [r7, #26]
 80043be:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M3 >
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 80043c8:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M3 >
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d904      	bls.n	80043dc <_ZN23px4_AlgorithmModelClass4stepEv+0x86c>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 80043d2:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043d8:	837b      	strh	r3, [r7, #26]
 80043da:	e010      	b.n	80043fe <_ZN23px4_AlgorithmModelClass4stepEv+0x88e>
  } else if (Second_att_control_codeblock__B.M3 <
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 80043e2:	4b38      	ldr	r3, [pc, #224]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M3 <
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d204      	bcs.n	80043f6 <_ZN23px4_AlgorithmModelClass4stepEv+0x886>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80043ec:	4b35      	ldr	r3, [pc, #212]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043f2:	837b      	strh	r3, [r7, #26]
 80043f4:	e003      	b.n	80043fe <_ZN23px4_AlgorithmModelClass4stepEv+0x88e>
  } else {
    y = Second_att_control_codeblock__B.M3;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80043fc:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[2] = y;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8b7a      	ldrh	r2, [r7, #26]
 8004402:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M4 >
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800440e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M4 >
 8004412:	429a      	cmp	r2, r3
 8004414:	d904      	bls.n	8004420 <_ZN23px4_AlgorithmModelClass4stepEv+0x8b0>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004416:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004418:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800441c:	837b      	strh	r3, [r7, #26]
 800441e:	e010      	b.n	8004442 <_ZN23px4_AlgorithmModelClass4stepEv+0x8d2>
  } else if (Second_att_control_codeblock__B.M4 <
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004426:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004428:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M4 <
 800442c:	429a      	cmp	r2, r3
 800442e:	d204      	bcs.n	800443a <_ZN23px4_AlgorithmModelClass4stepEv+0x8ca>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004430:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004432:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004436:	837b      	strh	r3, [r7, #26]
 8004438:	e003      	b.n	8004442 <_ZN23px4_AlgorithmModelClass4stepEv+0x8d2>
  } else {
    y = Second_att_control_codeblock__B.M4;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8004440:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[3] = y;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8b7a      	ldrh	r2, [r7, #26]
 8004446:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M5 >
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M5 >
 8004456:	429a      	cmp	r2, r3
 8004458:	d904      	bls.n	8004464 <_ZN23px4_AlgorithmModelClass4stepEv+0x8f4>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800445a:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800445c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004460:	837b      	strh	r3, [r7, #26]
 8004462:	e010      	b.n	8004486 <_ZN23px4_AlgorithmModelClass4stepEv+0x916>
  } else if (Second_att_control_codeblock__B.M5 <
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800446c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M5 <
 8004470:	429a      	cmp	r2, r3
 8004472:	d204      	bcs.n	800447e <_ZN23px4_AlgorithmModelClass4stepEv+0x90e>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004474:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800447a:	837b      	strh	r3, [r7, #26]
 800447c:	e003      	b.n	8004486 <_ZN23px4_AlgorithmModelClass4stepEv+0x916>
  } else {
    y = Second_att_control_codeblock__B.M5;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004484:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[4] = y;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8b7a      	ldrh	r2, [r7, #26]
 800448a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M6 >
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004496:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M6 >
 800449a:	429a      	cmp	r2, r3
 800449c:	d904      	bls.n	80044a8 <_ZN23px4_AlgorithmModelClass4stepEv+0x938>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80044a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80044a4:	837b      	strh	r3, [r7, #26]
 80044a6:	e013      	b.n	80044d0 <_ZN23px4_AlgorithmModelClass4stepEv+0x960>
  } else if (Second_att_control_codeblock__B.M6 <
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80044b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M6 <
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d207      	bcs.n	80044c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x958>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80044b8:	4b02      	ldr	r3, [pc, #8]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80044ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80044be:	837b      	strh	r3, [r7, #26]
 80044c0:	e006      	b.n	80044d0 <_ZN23px4_AlgorithmModelClass4stepEv+0x960>
 80044c2:	bf00      	nop
 80044c4:	24000038 	.word	0x24000038
  } else {
    y = Second_att_control_codeblock__B.M6;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80044ce:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[5] = y;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8b7a      	ldrh	r2, [r7, #26]
 80044d4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

  // Delay: '<S5>/Delay'
  Second_att_control_codeblock__B.Delay =
    Second_att_control_codeblock_DW.Delay_DSTATE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  Second_att_control_codeblock__B.Delay =
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  // Gain: '<S5>/antiWU_Gain'
  Second_att_control_codeblock__B.antiWU_Gain =
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 80044e4:	4b52      	ldr	r3, [pc, #328]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 80044e6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
    Second_att_control_codeblock__B.Delay;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 80044f0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain =
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

  // Sum: '<S5>/Add'
  Second_att_control_codeblock__B.Add =
    Second_att_control_codeblock__B.pitchrollerror_b -
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock__B.antiWU_Gain;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004506:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add =
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  // Delay: '<S5>/Delay1'
  Second_att_control_codeblock__B.Delay1 =
    Second_att_control_codeblock_DW.Delay1_DSTATE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  Second_att_control_codeblock__B.Delay1 =
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  // Gain: '<S5>/antiWU_Gain1'
  Second_att_control_codeblock__B.antiWU_Gain1 =
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 800451c:	4b44      	ldr	r3, [pc, #272]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 800451e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__B.Delay1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain1 =
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac

  // Sum: '<S5>/Add1'
  Second_att_control_codeblock__B.Add1 =
    Second_att_control_codeblock__B.pitchrollerror_i -
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__B.antiWU_Gain1;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
    Second_att_control_codeblock__B.pitchrollerror_i -
 800453e:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add1 =
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

  // Gain: '<S38>/Integral Gain'
  Second_att_control_codeblock__B.IntegralGain = kI_Yaw_rate_PID *
    Second_att_control_codeblock__B.Gain_f;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
  Second_att_control_codeblock__B.IntegralGain = kI_Yaw_rate_PID *
 800454e:	4b39      	ldr	r3, [pc, #228]	; (8004634 <_ZN23px4_AlgorithmModelClass4stepEv+0xac4>)
 8004550:	edd3 7a00 	vldr	s15, [r3]
 8004554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004564:	4b32      	ldr	r3, [pc, #200]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004566:	edd3 6a03 	vldr	s13, [r3, #12]
    Second_att_control_codeblock__B.pitchrollerror;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	edd3 7a02 	vldr	s15, [r3, #8]
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004570:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004584:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004586:	edd3 6a05 	vldr	s13, [r3, #20]
    Second_att_control_codeblock__B.Add;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004590:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 8004594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__B.TSamp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  Second_att_control_codeblock_DW.UD_DSTATE =
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 80045b0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.pitchrollerror_m;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 80045ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 80045be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 80045ce:	4b18      	ldr	r3, [pc, #96]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 80045d0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
    Second_att_control_codeblock__B.Add1;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 80045da:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 80045de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__B.TSamp_h;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  // Update for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
    Second_att_control_codeblock__P.Integrator_gainval *
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 80045fa:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
    Second_att_control_codeblock__B.IntegralGain;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
    Second_att_control_codeblock__P.Integrator_gainval *
 8004604:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8004608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

  // Update for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  Second_att_control_codeblock_DW.Delay_DSTATE =
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // Update for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8004626:	bf00      	nop
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	24000038 	.word	0x24000038
 8004634:	24000028 	.word	0x24000028

08004638 <_ZN23px4_AlgorithmModelClass10initializeEv>:

// Model initialize function
void px4_AlgorithmModelClass::initialize()
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC;
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004642:	691a      	ldr	r2, [r3, #16]
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC_k;
 800464a:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 800464c:	699a      	ldr	r2, [r3, #24]
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__P.DiscreteDerivative_ICPrevScaled;
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004656:	681a      	ldr	r2, [r3, #0]
  Second_att_control_codeblock_DW.UD_DSTATE =
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC;
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC_j;
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 800466a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__P.DiscreteDerivative1_ICPrevScale;
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004674:	685a      	ldr	r2, [r3, #4]
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  // InitializeConditions for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE =
    Second_att_control_codeblock__P.DiscretePIDController_InitialCo;
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 800467e:	689a      	ldr	r2, [r3, #8]
  Second_att_control_codeblock_DW.Integrator_DSTATE =
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  // InitializeConditions for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__P.Delay_InitialCondition;
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  Second_att_control_codeblock_DW.Delay_DSTATE =
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // InitializeConditions for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__P.Delay1_InitialCondition;
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004692:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	24000038 	.word	0x24000038

080046ac <_ZN23px4_AlgorithmModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
px4_AlgorithmModelClass::px4_AlgorithmModelClass():
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  Second_att_control_codeblock__B()
  ,Second_att_control_codeblock_DW()
  ,Second_att_control_codeblock__U()
  ,Second_att_control_codeblock__Y()
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	23c4      	movs	r3, #196	; 0xc4
 80046ba:	461a      	mov	r2, r3
 80046bc:	2100      	movs	r1, #0
 80046be:	f027 f986 	bl	802b9ce <memset>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	33c4      	adds	r3, #196	; 0xc4
 80046c6:	2224      	movs	r2, #36	; 0x24
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f027 f97f 	bl	802b9ce <memset>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	33e8      	adds	r3, #232	; 0xe8
 80046d4:	2224      	movs	r2, #36	; 0x24
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f027 f978 	bl	802b9ce <memset>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
{
  // Currently there is no constructor body generated.
}
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <_ZN25positionControlModelClass4stepEv>:
                                          //  Referenced by: '<S189>/Proportional Gain'


// Model step function
void positionControlModelClass::step()
{
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b08f      	sub	sp, #60	; 0x3c
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  real_T u2;

  // DataTypeConversion: '<S1>/Data Type Conversion' incorporates:
  //   Inport: '<Root>/estim_yaw'

  positionControl_B.DataTypeConversion = positionControl_U.estim_yaw;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	edd3 7aca 	vldr	s15, [r3, #808]	; 0x328
 8004706:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S8>/Trigonometric Function'
  cosOut = positionControl_B.DataTypeConversion;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004716:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = std::sin(cosOut);
 800471a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800471e:	f024 f9f3 	bl	8028b08 <sin>
 8004722:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
  cosOut = std::cos(cosOut);
 8004726:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800472a:	f024 f939 	bl	80289a0 <cos>
 800472e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.TrigonometricFunction_o1 = sinOut;
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004738:	e9c2 3402 	strd	r3, r4, [r2, #8]
  positionControl_B.TrigonometricFunction_o2 = cosOut;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004742:	e9c2 3404 	strd	r3, r4, [r2, #16]

  // SignalConversion generated from: '<S8>/Vector Concatenate'
  positionControl_B.MatrixConcatenate[0] =
    positionControl_B.TrigonometricFunction_o2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_B.MatrixConcatenate[0] =
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	e9c2 3406 	strd	r3, r4, [r2, #24]

  // Gain: '<S8>/Gain'
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 8004752:	4b8e      	ldr	r3, [pc, #568]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 8004754:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
    positionControl_B.TrigonometricFunction_o1;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	ed93 7b02 	vldr	d7, [r3, #8]
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 800475e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	ed83 7b08 	vstr	d7, [r3, #32]

  // SignalConversion generated from: '<S8>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[2] =
    positionControl_B.TrigonometricFunction_o1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_B.MatrixConcatenate[2] =
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

  // SignalConversion generated from: '<S8>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[3] =
    positionControl_B.TrigonometricFunction_o2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_B.MatrixConcatenate[3] =
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

  // Sum: '<S1>/Add' incorporates:
  //   Inport: '<Root>/estim_x'
  //   Inport: '<Root>/set_x'

  positionControl_B.x_error = positionControl_U.set_x -
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	ed93 6bce 	vldr	d6, [r3, #824]	; 0x338
    positionControl_U.estim_x;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	ed93 7bd4 	vldr	d7, [r3, #848]	; 0x350
  positionControl_B.x_error = positionControl_U.set_x -
 800478c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

  // Gain: '<S45>/Proportional Gain'
  positionControl_B.ProportionalGain = pos_x_P * positionControl_B.x_error;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 800479c:	4b7c      	ldr	r3, [pc, #496]	; (8004990 <_ZN25positionControlModelClass4stepEv+0x298>)
 800479e:	ed93 7b00 	vldr	d7, [r3]
 80047a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

  // DiscreteIntegrator: '<S40>/Integrator'
  positionControl_B.Integrator = positionControl_DW.Integrator_DSTATE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	e9d3 34b2 	ldrd	r3, r4, [r3, #712]	; 0x2c8
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

  // Gain: '<S34>/Derivative Gain'
  positionControl_B.DerivativeGain = pos_x_D * positionControl_B.x_error;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80047be:	4b75      	ldr	r3, [pc, #468]	; (8004994 <_ZN25positionControlModelClass4stepEv+0x29c>)
 80047c0:	ed93 7b00 	vldr	d7, [r3]
 80047c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

  // DiscreteIntegrator: '<S35>/Filter'
  positionControl_B.Filter = positionControl_DW.Filter_DSTATE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	e9d3 34b4 	ldrd	r3, r4, [r3, #720]	; 0x2d0
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

  // Sum: '<S35>/SumD'
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
    positionControl_B.Filter;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 80047e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

  // Gain: '<S43>/Filter Coefficient'
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 80047f0:	4b66      	ldr	r3, [pc, #408]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 80047f2:	ed93 6b26 	vldr	d6, [r3, #152]	; 0x98
    positionControl_B.SumD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 80047fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68

  // Sum: '<S49>/Sum'
  positionControl_B.Sum = positionControl_B.ProportionalGain +
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
    positionControl_B.Integrator + positionControl_B.FilterCoefficient;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
  positionControl_B.Sum = positionControl_B.ProportionalGain +
 8004812:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator + positionControl_B.FilterCoefficient;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800481c:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum = positionControl_B.ProportionalGain +
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70

  // Saturate: '<S47>/Saturation'
  cosOut = positionControl_B.Sum;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800482c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController_LowerSaturationLi;
 8004830:	4b56      	ldr	r3, [pc, #344]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 8004832:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8004836:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController_UpperSaturationLi;
 800483a:	4b54      	ldr	r3, [pc, #336]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 800483c:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8004840:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004844:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004848:	ed97 7b08 	vldr	d7, [r7, #32]
 800484c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	dd05      	ble.n	8004862 <_ZN25positionControlModelClass4stepEv+0x16a>
    positionControl_B.Saturation = u2;
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800485c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8004860:	e013      	b.n	800488a <_ZN25positionControlModelClass4stepEv+0x192>
  } else if (cosOut < sinOut) {
 8004862:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004866:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800486a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800486e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004872:	d505      	bpl.n	8004880 <_ZN25positionControlModelClass4stepEv+0x188>
    positionControl_B.Saturation = sinOut;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800487a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 800487e:	e004      	b.n	800488a <_ZN25positionControlModelClass4stepEv+0x192>
  } else {
    positionControl_B.Saturation = cosOut;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004886:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

  // Sum: '<S1>/Add4' incorporates:
  //   Inport: '<Root>/estim_y'
  //   Inport: '<Root>/set_y'

  positionControl_B.y_error = positionControl_U.set_y -
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	ed93 6bd0 	vldr	d6, [r3, #832]	; 0x340
    positionControl_U.estim_y;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
  positionControl_B.y_error = positionControl_U.set_y -
 8004896:	ee36 7b47 	vsub.f64	d7, d6, d7
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80

  // Gain: '<S237>/Proportional Gain'
  positionControl_B.ProportionalGain_p = pos_y_P * positionControl_B.y_error;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 80048a6:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <_ZN25positionControlModelClass4stepEv+0x2a0>)
 80048a8:	ed93 7b00 	vldr	d7, [r3]
 80048ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88

  // DiscreteIntegrator: '<S232>/Integrator'
  positionControl_B.Integrator_f = positionControl_DW.Integrator_DSTATE_k;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	e9d3 34b6 	ldrd	r3, r4, [r3, #728]	; 0x2d8
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90

  // Gain: '<S226>/Derivative Gain'
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 80048c2:	4b32      	ldr	r3, [pc, #200]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 80048c4:	ed93 6b00 	vldr	d6, [r3]
    positionControl_B.y_error;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 80048ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98

  // DiscreteIntegrator: '<S227>/Filter'
  positionControl_B.Filter_p = positionControl_DW.Filter_DSTATE_m;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

  // Sum: '<S227>/SumD'
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	ed93 6b26 	vldr	d6, [r3, #152]	; 0x98
    positionControl_B.Filter_p;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 80048f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8

  // Gain: '<S235>/Filter Coefficient'
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 80048fc:	ed93 6b28 	vldr	d6, [r3, #160]	; 0xa0
    positionControl_B.SumD_k;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 8004906:	ee26 7b07 	vmul.f64	d7, d6, d7
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0

  // Sum: '<S241>/Sum'
  positionControl_B.Sum_k = positionControl_B.ProportionalGain_p +
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
    positionControl_B.Integrator_f + positionControl_B.FilterCoefficient_n;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
  positionControl_B.Sum_k = positionControl_B.ProportionalGain_p +
 800491c:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_f + positionControl_B.FilterCoefficient_n;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004926:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_k = positionControl_B.ProportionalGain_p +
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8

  // Saturate: '<S239>/Saturation'
  cosOut = positionControl_B.Sum_k;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 8004936:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController4_LowerSaturationL;
 800493a:	4b14      	ldr	r3, [pc, #80]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 800493c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004940:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController4_UpperSaturationL;
 8004944:	4b11      	ldr	r3, [pc, #68]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 8004946:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 800494a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 800494e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004952:	ed97 7b08 	vldr	d7, [r7, #32]
 8004956:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800495a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495e:	dd05      	ble.n	800496c <_ZN25positionControlModelClass4stepEv+0x274>
    positionControl_B.Saturation_o = u2;
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004966:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 800496a:	e01c      	b.n	80049a6 <_ZN25positionControlModelClass4stepEv+0x2ae>
  } else if (cosOut < sinOut) {
 800496c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004970:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004974:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497c:	d50e      	bpl.n	800499c <_ZN25positionControlModelClass4stepEv+0x2a4>
    positionControl_B.Saturation_o = sinOut;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004984:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 8004988:	e00d      	b.n	80049a6 <_ZN25positionControlModelClass4stepEv+0x2ae>
 800498a:	bf00      	nop
 800498c:	24000118 	.word	0x24000118
 8004990:	240000b0 	.word	0x240000b0
 8004994:	24000938 	.word	0x24000938
 8004998:	240000d8 	.word	0x240000d8
  } else {
    positionControl_B.Saturation_o = cosOut;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80049a2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

  // Sum: '<S1>/Add1' incorporates:
  //   Inport: '<Root>/estim_dx'
  //   Inport: '<Root>/estim_dy'

  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	ed93 6bda 	vldr	d6, [r3, #872]	; 0x368
    positionControl_B.Saturation;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 80049b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	ed93 6bdc 	vldr	d6, [r3, #880]	; 0x370
    positionControl_B.Saturation_o;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 80049c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0

  // Product: '<S1>/Matrix Multiply'
  cosOut = positionControl_B.MatrixConcatenate[0];
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80049d8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_B.MatrixConcatenate[1];
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80049e2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_B.MatrixConcatenate[2];
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80049ec:	e9c7 3408 	strd	r3, r4, [r7, #32]
  tmp = positionControl_B.MatrixConcatenate[3];
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80049f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
  tmp_0 = positionControl_B.Add1[0];
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8004a00:	e9c7 3404 	strd	r3, r4, [r7, #16]
  tmp_1 = positionControl_B.Add1[1];
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 8004a0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
  cosOut *= tmp_0;
 8004a0e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004a12:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a1a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  cosOut += u2 * tmp_1;
 8004a1e:	ed97 6b08 	vldr	d6, [r7, #32]
 8004a22:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a2a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004a2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a32:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  positionControl_B.vel_error[0] = cosOut;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004a3c:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
  sinOut *= tmp_0;
 8004a40:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004a44:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a4c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  sinOut += tmp * tmp_1;
 8004a50:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a54:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a5c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004a60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a64:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  positionControl_B.vel_error[1] = sinOut;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004a6e:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0

  // Gain: '<S285>/Proportional Gain'
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
    positionControl_B.vel_error[1];
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	ed93 6b38 	vldr	d6, [r3, #224]	; 0xe0
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
 8004a78:	4b7f      	ldr	r3, [pc, #508]	; (8004c78 <_ZN25positionControlModelClass4stepEv+0x580>)
 8004a7a:	ed93 7b00 	vldr	d7, [r3]
 8004a7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8

  // DiscreteIntegrator: '<S280>/Integrator'
  positionControl_B.Integrator_h = positionControl_DW.Integrator_DSTATE_f;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

  // Gain: '<S274>/Derivative Gain'
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
    positionControl_B.vel_error[1];
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	ed93 6b38 	vldr	d6, [r3, #224]	; 0xe0
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
 8004a9a:	4b78      	ldr	r3, [pc, #480]	; (8004c7c <_ZN25positionControlModelClass4stepEv+0x584>)
 8004a9c:	ed93 7b00 	vldr	d7, [r3]
 8004aa0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8

  // DiscreteIntegrator: '<S275>/Filter'
  positionControl_B.Filter_g = positionControl_DW.Filter_DSTATE_j;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	e9d3 34bc 	ldrd	r3, r4, [r3, #752]	; 0x2f0
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100

  // Sum: '<S275>/SumD'
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	ed93 6b3e 	vldr	d6, [r3, #248]	; 0xf8
    positionControl_B.Filter_g;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 8004ac2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108

  // Gain: '<S283>/Filter Coefficient'
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 8004acc:	4b6c      	ldr	r3, [pc, #432]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004ace:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
    positionControl_B.SumD_f;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 8004ad8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110

  // Sum: '<S289>/Sum'
  positionControl_B.Sum_m = positionControl_B.ProportionalGain_m +
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	ed93 6b3a 	vldr	d6, [r3, #232]	; 0xe8
    positionControl_B.Integrator_h + positionControl_B.FilterCoefficient_e;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
  positionControl_B.Sum_m = positionControl_B.ProportionalGain_m +
 8004aee:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_h + positionControl_B.FilterCoefficient_e;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8004af8:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_m = positionControl_B.ProportionalGain_m +
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118

  // Saturate: '<S287>/Saturation'
  cosOut = positionControl_B.Sum_m;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	e9d3 3446 	ldrd	r3, r4, [r3, #280]	; 0x118
 8004b08:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController5_LowerSaturationL;
 8004b0c:	4b5c      	ldr	r3, [pc, #368]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004b0e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8004b12:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController5_UpperSaturationL;
 8004b16:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004b18:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 8004b1c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004b20:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004b24:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	dd05      	ble.n	8004b3e <_ZN25positionControlModelClass4stepEv+0x446>
    positionControl_B.Saturation_l = u2;
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b38:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 8004b3c:	e013      	b.n	8004b66 <_ZN25positionControlModelClass4stepEv+0x46e>
  } else if (cosOut < sinOut) {
 8004b3e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004b42:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004b46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4e:	d505      	bpl.n	8004b5c <_ZN25positionControlModelClass4stepEv+0x464>
    positionControl_B.Saturation_l = sinOut;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004b56:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 8004b5a:	e004      	b.n	8004b66 <_ZN25positionControlModelClass4stepEv+0x46e>
  } else {
    positionControl_B.Saturation_l = cosOut;
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004b62:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
  }

  // End of Saturate: '<S287>/Saturation'

  // Gain: '<S1>/Gain1'
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 8004b66:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004b68:	ed93 6b52 	vldr	d6, [r3, #328]	; 0x148
    positionControl_B.Saturation_l;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 8004b72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128

  // Outport: '<Root>/des_roll' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion3'

  positionControl_Y.des_roll = static_cast<real32_T>(positionControl_B.Gain1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 8004b82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	edc3 7ae0 	vstr	s15, [r3, #896]	; 0x380

  // Gain: '<S93>/Proportional Gain'
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
    positionControl_B.vel_error[0];
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	ed93 6b36 	vldr	d6, [r3, #216]	; 0xd8
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
 8004b92:	4b3c      	ldr	r3, [pc, #240]	; (8004c84 <_ZN25positionControlModelClass4stepEv+0x58c>)
 8004b94:	ed93 7b00 	vldr	d7, [r3]
 8004b98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130

  // DiscreteIntegrator: '<S88>/Integrator'
  positionControl_B.Integrator_c = positionControl_DW.Integrator_DSTATE_m;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	e9d3 34be 	ldrd	r3, r4, [r3, #760]	; 0x2f8
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138

  // Gain: '<S82>/Derivative Gain'
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
    positionControl_B.vel_error[0];
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	ed93 6b36 	vldr	d6, [r3, #216]	; 0xd8
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
 8004bb4:	4b34      	ldr	r3, [pc, #208]	; (8004c88 <_ZN25positionControlModelClass4stepEv+0x590>)
 8004bb6:	ed93 7b00 	vldr	d7, [r3]
 8004bba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140

  // DiscreteIntegrator: '<S83>/Filter'
  positionControl_B.Filter_i = positionControl_DW.Filter_DSTATE_d;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	e9d3 34c0 	ldrd	r3, r4, [r3, #768]	; 0x300
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	e9c2 3452 	strd	r3, r4, [r2, #328]	; 0x148

  // Sum: '<S83>/SumD'
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	ed93 6b50 	vldr	d6, [r3, #320]	; 0x140
    positionControl_B.Filter_i;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 8004bdc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150

  // Gain: '<S91>/Filter Coefficient'
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 8004be6:	4b26      	ldr	r3, [pc, #152]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004be8:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
    positionControl_B.SumD_h;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 8004bf2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158

  // Sum: '<S97>/Sum'
  positionControl_B.Sum_o = positionControl_B.ProportionalGain_h +
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	ed93 6b4c 	vldr	d6, [r3, #304]	; 0x130
    positionControl_B.Integrator_c + positionControl_B.FilterCoefficient_f;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
  positionControl_B.Sum_o = positionControl_B.ProportionalGain_h +
 8004c08:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_c + positionControl_B.FilterCoefficient_f;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8004c12:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_o = positionControl_B.ProportionalGain_h +
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160

  // Saturate: '<S95>/Saturation'
  cosOut = positionControl_B.Sum_o;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	e9d3 3458 	ldrd	r3, r4, [r3, #352]	; 0x160
 8004c22:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController1_LowerSaturationL;
 8004c26:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004c28:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004c2c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController1_UpperSaturationL;
 8004c30:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004c32:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8004c36:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004c3a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004c3e:	ed97 7b08 	vldr	d7, [r7, #32]
 8004c42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	dd05      	ble.n	8004c58 <_ZN25positionControlModelClass4stepEv+0x560>
    positionControl_B.Saturation_j = u2;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004c52:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 8004c56:	e01e      	b.n	8004c96 <_ZN25positionControlModelClass4stepEv+0x59e>
  } else if (cosOut < sinOut) {
 8004c58:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004c5c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004c60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c68:	d510      	bpl.n	8004c8c <_ZN25positionControlModelClass4stepEv+0x594>
    positionControl_B.Saturation_j = sinOut;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004c70:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 8004c74:	e00f      	b.n	8004c96 <_ZN25positionControlModelClass4stepEv+0x59e>
 8004c76:	bf00      	nop
 8004c78:	240000f0 	.word	0x240000f0
 8004c7c:	240000e0 	.word	0x240000e0
 8004c80:	24000118 	.word	0x24000118
 8004c84:	240000c8 	.word	0x240000c8
 8004c88:	240000b8 	.word	0x240000b8
  } else {
    positionControl_B.Saturation_j = cosOut;
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004c92:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168

  // Outport: '<Root>/des_pitch' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion2'

  positionControl_Y.des_pitch = static_cast<real32_T>
    (positionControl_B.Saturation_j);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
  positionControl_Y.des_pitch = static_cast<real32_T>
 8004c9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	edc3 7ae1 	vstr	s15, [r3, #900]	; 0x384

  // Sum: '<S1>/Sum' incorporates:
  //   Inport: '<Root>/set_yaw'

  positionControl_B.Sum_my = positionControl_U.set_yaw -
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	ed93 6bcc 	vldr	d6, [r3, #816]	; 0x330
    positionControl_B.DataTypeConversion;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	ed93 7b00 	vldr	d7, [r3]
  positionControl_B.Sum_my = positionControl_U.set_yaw -
 8004cb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

  // Gain: '<S1>/Gain'
  positionControl_B.Gain = Yaw_angleToRate_P * positionControl_B.Sum_my;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	ed93 6b5c 	vldr	d6, [r3, #368]	; 0x170
 8004cc2:	4ba7      	ldr	r3, [pc, #668]	; (8004f60 <_ZN25positionControlModelClass4stepEv+0x868>)
 8004cc4:	ed93 7b00 	vldr	d7, [r3]
 8004cc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178

  // Outport: '<Root>/des_yaw_rate' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion1'

  positionControl_Y.des_yaw_rate = static_cast<real32_T>(positionControl_B.Gain);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004cd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	edc3 7ae2 	vstr	s15, [r3, #904]	; 0x388

  // Sum: '<S1>/Add2' incorporates:
  //   Inport: '<Root>/estim_z'
  //   Inport: '<Root>/set_z'

  positionControl_B.alt_error = positionControl_U.set_z -
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	ed93 6bd2 	vldr	d6, [r3, #840]	; 0x348
    positionControl_U.estim_z;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	ed93 7bd8 	vldr	d7, [r3, #864]	; 0x360
  positionControl_B.alt_error = positionControl_U.set_z -
 8004cee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180

  // Gain: '<S141>/Proportional Gain'
  positionControl_B.ProportionalGain_p4 = pos_z_P * positionControl_B.alt_error;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	ed93 6b60 	vldr	d6, [r3, #384]	; 0x180
 8004cfe:	4b99      	ldr	r3, [pc, #612]	; (8004f64 <_ZN25positionControlModelClass4stepEv+0x86c>)
 8004d00:	ed93 7b00 	vldr	d7, [r3]
 8004d04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188

  // DiscreteIntegrator: '<S136>/Integrator'
  positionControl_B.Integrator_b = positionControl_DW.Integrator_DSTATE_j;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	e9d3 34c2 	ldrd	r3, r4, [r3, #776]	; 0x308
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	e9c2 3464 	strd	r3, r4, [r2, #400]	; 0x190

  // Gain: '<S130>/Derivative Gain'
  positionControl_B.DerivativeGain_b = pos_z_D * positionControl_B.alt_error;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	ed93 6b60 	vldr	d6, [r3, #384]	; 0x180
 8004d20:	4b91      	ldr	r3, [pc, #580]	; (8004f68 <_ZN25positionControlModelClass4stepEv+0x870>)
 8004d22:	ed93 7b00 	vldr	d7, [r3]
 8004d26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198

  // DiscreteIntegrator: '<S131>/Filter'
  positionControl_B.Filter_o = positionControl_DW.Filter_DSTATE_mf;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	e9d3 34c4 	ldrd	r3, r4, [r3, #784]	; 0x310
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

  // Sum: '<S131>/SumD'
  positionControl_B.SumD_m = positionControl_B.DerivativeGain_b -
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	ed93 6b66 	vldr	d6, [r3, #408]	; 0x198
    positionControl_B.Filter_o;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
  positionControl_B.SumD_m = positionControl_B.DerivativeGain_b -
 8004d48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8

  // Gain: '<S139>/Filter Coefficient'
  positionControl_B.FilterCoefficient_d = positionControl_P.PIDController2_N *
 8004d52:	4b86      	ldr	r3, [pc, #536]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004d54:	ed93 6b2e 	vldr	d6, [r3, #184]	; 0xb8
    positionControl_B.SumD_m;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
  positionControl_B.FilterCoefficient_d = positionControl_P.PIDController2_N *
 8004d5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0

  // Sum: '<S145>/Sum'
  positionControl_B.Sum_f = positionControl_B.ProportionalGain_p4 +
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	ed93 6b62 	vldr	d6, [r3, #392]	; 0x188
    positionControl_B.Integrator_b + positionControl_B.FilterCoefficient_d;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
  positionControl_B.Sum_f = positionControl_B.ProportionalGain_p4 +
 8004d74:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_b + positionControl_B.FilterCoefficient_d;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8004d7e:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_f = positionControl_B.ProportionalGain_p4 +
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8

  // Saturate: '<S143>/Saturation'
  cosOut = positionControl_B.Sum_f;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	e9d3 346e 	ldrd	r3, r4, [r3, #440]	; 0x1b8
 8004d8e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController2_LowerSaturationL;
 8004d92:	4b76      	ldr	r3, [pc, #472]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004d94:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8004d98:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController2_UpperSaturationL;
 8004d9c:	4b73      	ldr	r3, [pc, #460]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004d9e:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8004da2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004da6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004daa:	ed97 7b08 	vldr	d7, [r7, #32]
 8004dae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db6:	dd05      	ble.n	8004dc4 <_ZN25positionControlModelClass4stepEv+0x6cc>
    positionControl_B.Saturation_m = u2;
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004dbe:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
 8004dc2:	e013      	b.n	8004dec <_ZN25positionControlModelClass4stepEv+0x6f4>
  } else if (cosOut < sinOut) {
 8004dc4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004dc8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004dcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd4:	d505      	bpl.n	8004de2 <_ZN25positionControlModelClass4stepEv+0x6ea>
    positionControl_B.Saturation_m = sinOut;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004ddc:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
 8004de0:	e004      	b.n	8004dec <_ZN25positionControlModelClass4stepEv+0x6f4>
  } else {
    positionControl_B.Saturation_m = cosOut;
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004de8:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
  // End of Saturate: '<S143>/Saturation'

  // Sum: '<S1>/Add3' incorporates:
  //   Inport: '<Root>/estim_dz'

  positionControl_B.vz_error = positionControl_B.Saturation_m -
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	ed93 6b70 	vldr	d6, [r3, #448]	; 0x1c0
    positionControl_U.estim_dz;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	ed93 7bde 	vldr	d7, [r3, #888]	; 0x378
  positionControl_B.vz_error = positionControl_B.Saturation_m -
 8004df8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8

  // Gain: '<S189>/Proportional Gain'
  positionControl_B.ProportionalGain_k = pos_z_vel_P *
    positionControl_B.vz_error;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	ed93 6b72 	vldr	d6, [r3, #456]	; 0x1c8
  positionControl_B.ProportionalGain_k = pos_z_vel_P *
 8004e08:	4b59      	ldr	r3, [pc, #356]	; (8004f70 <_ZN25positionControlModelClass4stepEv+0x878>)
 8004e0a:	ed93 7b00 	vldr	d7, [r3]
 8004e0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0

  // DiscreteIntegrator: '<S184>/Integrator'
  positionControl_B.Integrator_p = positionControl_DW.Integrator_DSTATE_b;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	e9d3 34c6 	ldrd	r3, r4, [r3, #792]	; 0x318
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	e9c2 3476 	strd	r3, r4, [r2, #472]	; 0x1d8

  // Gain: '<S178>/Derivative Gain'
  positionControl_B.DerivativeGain_pu = pos_z_vel_D * positionControl_B.vz_error;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	ed93 6b72 	vldr	d6, [r3, #456]	; 0x1c8
 8004e2a:	4b52      	ldr	r3, [pc, #328]	; (8004f74 <_ZN25positionControlModelClass4stepEv+0x87c>)
 8004e2c:	ed93 7b00 	vldr	d7, [r3]
 8004e30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0

  // DiscreteIntegrator: '<S179>/Filter'
  positionControl_B.Filter_m = positionControl_DW.Filter_DSTATE_e;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	e9d3 34c8 	ldrd	r3, r4, [r3, #800]	; 0x320
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	e9c2 347a 	strd	r3, r4, [r2, #488]	; 0x1e8

  // Sum: '<S179>/SumD'
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	ed93 6b78 	vldr	d6, [r3, #480]	; 0x1e0
    positionControl_B.Filter_m;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 8004e52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	ed83 7b7c 	vstr	d7, [r3, #496]	; 0x1f0

  // Gain: '<S187>/Filter Coefficient'
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 8004e5c:	4b43      	ldr	r3, [pc, #268]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004e5e:	ed93 6b30 	vldr	d6, [r3, #192]	; 0xc0
    positionControl_B.SumD_b;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	ed93 7b7c 	vldr	d7, [r3, #496]	; 0x1f0
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 8004e68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	ed83 7b7e 	vstr	d7, [r3, #504]	; 0x1f8

  // Sum: '<S193>/Sum'
  positionControl_B.Sum_c = positionControl_B.ProportionalGain_k +
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	ed93 6b74 	vldr	d6, [r3, #464]	; 0x1d0
    positionControl_B.Integrator_p + positionControl_B.FilterCoefficient_a;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
  positionControl_B.Sum_c = positionControl_B.ProportionalGain_k +
 8004e7e:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_p + positionControl_B.FilterCoefficient_a;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
 8004e88:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_c = positionControl_B.ProportionalGain_k +
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	ed83 7b80 	vstr	d7, [r3, #512]	; 0x200

  // Saturate: '<S191>/Saturation'
  cosOut = positionControl_B.Sum_c;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	e9d3 3480 	ldrd	r3, r4, [r3, #512]	; 0x200
 8004e98:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController3_LowerSaturationL;
 8004e9c:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004e9e:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8004ea2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController3_UpperSaturationL;
 8004ea6:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004ea8:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 8004eac:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004eb0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004eb4:	ed97 7b08 	vldr	d7, [r7, #32]
 8004eb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	dd05      	ble.n	8004ece <_ZN25positionControlModelClass4stepEv+0x7d6>
    positionControl_B.Saturation_li = u2;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004ec8:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208
 8004ecc:	e013      	b.n	8004ef6 <_ZN25positionControlModelClass4stepEv+0x7fe>
  } else if (cosOut < sinOut) {
 8004ece:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004ed2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004ed6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	d505      	bpl.n	8004eec <_ZN25positionControlModelClass4stepEv+0x7f4>
    positionControl_B.Saturation_li = sinOut;
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004ee6:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208
 8004eea:	e004      	b.n	8004ef6 <_ZN25positionControlModelClass4stepEv+0x7fe>
  } else {
    positionControl_B.Saturation_li = cosOut;
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004ef2:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208

  // Outport: '<Root>/des_Thrust' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion4'

  positionControl_Y.des_Thrust = static_cast<real32_T>
    (positionControl_B.Saturation_li);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	ed93 7b82 	vldr	d7, [r3, #520]	; 0x208
  positionControl_Y.des_Thrust = static_cast<real32_T>
 8004efc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	edc3 7ae3 	vstr	s15, [r3, #908]	; 0x38c

  // Gain: '<S37>/Integral Gain'
  positionControl_B.IntegralGain = pos_x_I * positionControl_B.x_error;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <_ZN25positionControlModelClass4stepEv+0x880>)
 8004f0e:	ed93 7b00 	vldr	d7, [r3]
 8004f12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	ed83 7b84 	vstr	d7, [r3, #528]	; 0x210

  // Gain: '<S81>/ZeroGain'
  positionControl_B.ZeroGain = positionControl_P.ZeroGain_Gain *
 8004f1c:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004f1e:	ed93 6b60 	vldr	d6, [r3, #384]	; 0x180
    positionControl_B.Sum_o;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
  positionControl_B.ZeroGain = positionControl_P.ZeroGain_Gain *
 8004f28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218

  // DeadZone: '<S81>/DeadZone'
  if (positionControl_B.Sum_o >
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	ed93 6b58 	vldr	d6, [r3, #352]	; 0x160
      positionControl_P.PIDController1_UpperSaturationL) {
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004f3a:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
  if (positionControl_B.Sum_o >
 8004f3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	dd19      	ble.n	8004f7c <_ZN25positionControlModelClass4stepEv+0x884>
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	ed93 6b58 	vldr	d6, [r3, #352]	; 0x160
      positionControl_P.PIDController1_UpperSaturationL;
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004f50:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 8004f54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	ed83 7b88 	vstr	d7, [r3, #544]	; 0x220
 8004f5e:	e02b      	b.n	8004fb8 <_ZN25positionControlModelClass4stepEv+0x8c0>
 8004f60:	240000a0 	.word	0x240000a0
 8004f64:	240000f8 	.word	0x240000f8
 8004f68:	24000940 	.word	0x24000940
 8004f6c:	24000118 	.word	0x24000118
 8004f70:	24000110 	.word	0x24000110
 8004f74:	24000100 	.word	0x24000100
 8004f78:	240000a8 	.word	0x240000a8
  } else if (positionControl_B.Sum_o >=
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	ed93 6b58 	vldr	d6, [r3, #352]	; 0x160
             positionControl_P.PIDController1_LowerSaturationL) {
 8004f82:	4baf      	ldr	r3, [pc, #700]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 8004f84:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
  } else if (positionControl_B.Sum_o >=
 8004f88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	db07      	blt.n	8004fa2 <_ZN25positionControlModelClass4stepEv+0x8aa>
    positionControl_B.DeadZone = 0.0;
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	f04f 0400 	mov.w	r4, #0
 8004f9c:	e9c2 3488 	strd	r3, r4, [r2, #544]	; 0x220
 8004fa0:	e00a      	b.n	8004fb8 <_ZN25positionControlModelClass4stepEv+0x8c0>
  } else {
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	ed93 6b58 	vldr	d6, [r3, #352]	; 0x160
      positionControl_P.PIDController1_LowerSaturationL;
 8004fa8:	4ba5      	ldr	r3, [pc, #660]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 8004faa:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 8004fae:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	ed83 7b88 	vstr	d7, [r3, #544]	; 0x220
  }

  // End of DeadZone: '<S81>/DeadZone'

  // RelationalOperator: '<S81>/NotEqual'
  positionControl_B.NotEqual = positionControl_B.ZeroGain !=
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	ed93 6b86 	vldr	d6, [r3, #536]	; 0x218
    positionControl_B.DeadZone;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
  positionControl_B.NotEqual = positionControl_B.ZeroGain !=
 8004fc4:	eeb4 6b47 	vcmp.f64	d6, d7
 8004fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fcc:	bf14      	ite	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	2300      	moveq	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be

  // Signum: '<S81>/SignPreSat'
  cosOut = positionControl_B.DeadZone;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	e9d3 3488 	ldrd	r3, r4, [r3, #544]	; 0x220
 8004fe2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 8004fe6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004fea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff2:	d506      	bpl.n	8005002 <_ZN25positionControlModelClass4stepEv+0x90a>
    positionControl_B.SignPreSat = -1.0;
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	4c92      	ldr	r4, [pc, #584]	; (8005244 <_ZN25positionControlModelClass4stepEv+0xb4c>)
 8004ffc:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
 8005000:	e012      	b.n	8005028 <_ZN25positionControlModelClass4stepEv+0x930>
  } else if (cosOut > 0.0) {
 8005002:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005006:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800500a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500e:	dd06      	ble.n	800501e <_ZN25positionControlModelClass4stepEv+0x926>
    positionControl_B.SignPreSat = 1.0;
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	4c8c      	ldr	r4, [pc, #560]	; (8005248 <_ZN25positionControlModelClass4stepEv+0xb50>)
 8005018:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
 800501c:	e004      	b.n	8005028 <_ZN25positionControlModelClass4stepEv+0x930>
  } else {
    positionControl_B.SignPreSat = cosOut;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005024:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
  }

  // End of Signum: '<S81>/SignPreSat'

  // DataTypeConversion: '<S81>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat), 256.0);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	ed93 7b8a 	vldr	d7, [r3, #552]	; 0x228
 800502e:	eeb0 0b47 	vmov.f64	d0, d7
 8005032:	f023 fcf1 	bl	8028a18 <floor>
 8005036:	eeb0 7b40 	vmov.f64	d7, d0
 800503a:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8005238 <_ZN25positionControlModelClass4stepEv+0xb40>
 800503e:	eeb0 0b47 	vmov.f64	d0, d7
 8005042:	f023 fe21 	bl	8028c88 <fmod>
 8005046:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 800504a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800504e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	d50d      	bpl.n	8005074 <_ZN25positionControlModelClass4stepEv+0x97c>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 8005058:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800505c:	eeb1 7b47 	vneg.f64	d7, d7
 8005060:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005064:	edc7 7a00 	vstr	s15, [r7]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 800506c:	425b      	negs	r3, r3
 800506e:	b2db      	uxtb	r3, r3
 8005070:	b25b      	sxtb	r3, r3
 8005072:	e008      	b.n	8005086 <_ZN25positionControlModelClass4stepEv+0x98e>
    (static_cast<uint8_T>(cosOut))));
 8005074:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005078:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800507c:	edc7 7a00 	vstr	s15, [r7]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 8005084:	b25b      	sxtb	r3, r3
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	f882 32b8 	strb.w	r3, [r2, #696]	; 0x2b8

  // Gain: '<S85>/Integral Gain'
  positionControl_B.IntegralGain_k = pos_x_vel_I * positionControl_B.vel_error[0];
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	ed93 6b36 	vldr	d6, [r3, #216]	; 0xd8
 8005092:	4b6e      	ldr	r3, [pc, #440]	; (800524c <_ZN25positionControlModelClass4stepEv+0xb54>)
 8005094:	ed93 7b00 	vldr	d7, [r3]
 8005098:	ee26 7b07 	vmul.f64	d7, d6, d7
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	ed83 7b8c 	vstr	d7, [r3, #560]	; 0x230

  // Signum: '<S81>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_k;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	e9d3 348c 	ldrd	r3, r4, [r3, #560]	; 0x230
 80050a8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 80050ac:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80050b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	d506      	bpl.n	80050c8 <_ZN25positionControlModelClass4stepEv+0x9d0>
    positionControl_B.SignPreIntegrator = -1.0;
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	4c60      	ldr	r4, [pc, #384]	; (8005244 <_ZN25positionControlModelClass4stepEv+0xb4c>)
 80050c2:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238
 80050c6:	e012      	b.n	80050ee <_ZN25positionControlModelClass4stepEv+0x9f6>
  } else if (cosOut > 0.0) {
 80050c8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80050cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d4:	dd06      	ble.n	80050e4 <_ZN25positionControlModelClass4stepEv+0x9ec>
    positionControl_B.SignPreIntegrator = 1.0;
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	4c5a      	ldr	r4, [pc, #360]	; (8005248 <_ZN25positionControlModelClass4stepEv+0xb50>)
 80050de:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238
 80050e2:	e004      	b.n	80050ee <_ZN25positionControlModelClass4stepEv+0x9f6>
  } else {
    positionControl_B.SignPreIntegrator = cosOut;
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80050ea:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238
  }

  // End of Signum: '<S81>/SignPreIntegrator'

  // DataTypeConversion: '<S81>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator), 256.0);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	ed93 7b8e 	vldr	d7, [r3, #568]	; 0x238
 80050f4:	eeb0 0b47 	vmov.f64	d0, d7
 80050f8:	f023 fc8e 	bl	8028a18 <floor>
 80050fc:	eeb0 7b40 	vmov.f64	d7, d0
 8005100:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8005238 <_ZN25positionControlModelClass4stepEv+0xb40>
 8005104:	eeb0 0b47 	vmov.f64	d0, d7
 8005108:	f023 fdbe 	bl	8028c88 <fmod>
 800510c:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 8005110:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005114:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	d50d      	bpl.n	800513a <_ZN25positionControlModelClass4stepEv+0xa42>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>(static_cast<
    uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>(static_cast<
 800511e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005122:	eeb1 7b47 	vneg.f64	d7, d7
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>(static_cast<
 8005126:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800512a:	edc7 7a00 	vstr	s15, [r7]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 8005132:	425b      	negs	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	b25b      	sxtb	r3, r3
 8005138:	e008      	b.n	800514c <_ZN25positionControlModelClass4stepEv+0xa54>
    uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>(static_cast<
 800513a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800513e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005142:	edc7 7a00 	vstr	s15, [r7]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 800514a:	b25b      	sxtb	r3, r3
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	f882 32b9 	strb.w	r3, [r2, #697]	; 0x2b9
    uint8_T>(cosOut))));

  // RelationalOperator: '<S81>/Equal1'
  positionControl_B.Equal1 = positionControl_B.DataTypeConv1 ==
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f993 22b8 	ldrsb.w	r2, [r3, #696]	; 0x2b8
    positionControl_B.DataTypeConv2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f993 32b9 	ldrsb.w	r3, [r3, #697]	; 0x2b9
  positionControl_B.Equal1 = positionControl_B.DataTypeConv1 ==
 800515e:	429a      	cmp	r2, r3
 8005160:	bf0c      	ite	eq
 8005162:	2301      	moveq	r3, #1
 8005164:	2300      	movne	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf

  // Logic: '<S81>/AND3'
  positionControl_B.AND3 = positionControl_B.NotEqual &&
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
 8005176:	2b00      	cmp	r3, #0
 8005178:	d006      	beq.n	8005188 <_ZN25positionControlModelClass4stepEv+0xa90>
    positionControl_B.Equal1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 32bf 	ldrb.w	r3, [r3, #703]	; 0x2bf
  positionControl_B.AND3 = positionControl_B.NotEqual &&
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <_ZN25positionControlModelClass4stepEv+0xa90>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <_ZN25positionControlModelClass4stepEv+0xa92>
 8005188:	2300      	movs	r3, #0
 800518a:	461a      	mov	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0

  // Switch: '<S81>/Switch' incorporates:
  //   Constant: '<S81>/Constant1'

  if (positionControl_B.AND3) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d006      	beq.n	80051aa <_ZN25positionControlModelClass4stepEv+0xab2>
    positionControl_B.Switch = positionControl_P.Constant1_Value;
 800519c:	4b28      	ldr	r3, [pc, #160]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 800519e:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240
 80051a8:	e005      	b.n	80051b6 <_ZN25positionControlModelClass4stepEv+0xabe>
  } else {
    positionControl_B.Switch = positionControl_B.IntegralGain_k;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	e9d3 348c 	ldrd	r3, r4, [r3, #560]	; 0x230
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240
  }

  // End of Switch: '<S81>/Switch'

  // Gain: '<S229>/Integral Gain'
  positionControl_B.IntegralGain_o = pos_y_I * positionControl_B.y_error;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 80051bc:	4b24      	ldr	r3, [pc, #144]	; (8005250 <_ZN25positionControlModelClass4stepEv+0xb58>)
 80051be:	ed93 7b00 	vldr	d7, [r3]
 80051c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	ed83 7b92 	vstr	d7, [r3, #584]	; 0x248

  // Gain: '<S273>/ZeroGain'
  positionControl_B.ZeroGain_b = positionControl_P.ZeroGain_Gain_m *
 80051cc:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 80051ce:	ed93 6b62 	vldr	d6, [r3, #392]	; 0x188
    positionControl_B.Sum_m;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
  positionControl_B.ZeroGain_b = positionControl_P.ZeroGain_Gain_m *
 80051d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	ed83 7b94 	vstr	d7, [r3, #592]	; 0x250

  // DeadZone: '<S273>/DeadZone'
  if (positionControl_B.Sum_m >
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	ed93 6b46 	vldr	d6, [r3, #280]	; 0x118
      positionControl_P.PIDController5_UpperSaturationL) {
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 80051ea:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
  if (positionControl_B.Sum_m >
 80051ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	dd0b      	ble.n	8005210 <_ZN25positionControlModelClass4stepEv+0xb18>
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	ed93 6b46 	vldr	d6, [r3, #280]	; 0x118
      positionControl_P.PIDController5_UpperSaturationL;
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 8005200:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005204:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	ed83 7b96 	vstr	d7, [r3, #600]	; 0x258
 800520e:	e02c      	b.n	800526a <_ZN25positionControlModelClass4stepEv+0xb72>
  } else if (positionControl_B.Sum_m >=
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	ed93 6b46 	vldr	d6, [r3, #280]	; 0x118
             positionControl_P.PIDController5_LowerSaturationL) {
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 8005218:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
  } else if (positionControl_B.Sum_m >=
 800521c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	db16      	blt.n	8005254 <_ZN25positionControlModelClass4stepEv+0xb5c>
    positionControl_B.DeadZone_m = 0.0;
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	e9c2 3496 	strd	r3, r4, [r2, #600]	; 0x258
 8005234:	e019      	b.n	800526a <_ZN25positionControlModelClass4stepEv+0xb72>
 8005236:	bf00      	nop
 8005238:	00000000 	.word	0x00000000
 800523c:	40700000 	.word	0x40700000
 8005240:	24000118 	.word	0x24000118
 8005244:	bff00000 	.word	0xbff00000
 8005248:	3ff00000 	.word	0x3ff00000
 800524c:	240000c0 	.word	0x240000c0
 8005250:	240000d0 	.word	0x240000d0
  } else {
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	ed93 6b46 	vldr	d6, [r3, #280]	; 0x118
      positionControl_P.PIDController5_LowerSaturationL;
 800525a:	4ba5      	ldr	r3, [pc, #660]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 800525c:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005260:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	ed83 7b96 	vstr	d7, [r3, #600]	; 0x258
  }

  // End of DeadZone: '<S273>/DeadZone'

  // RelationalOperator: '<S273>/NotEqual'
  positionControl_B.NotEqual_p = positionControl_B.ZeroGain_b !=
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	ed93 6b94 	vldr	d6, [r3, #592]	; 0x250
    positionControl_B.DeadZone_m;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	ed93 7b96 	vldr	d7, [r3, #600]	; 0x258
  positionControl_B.NotEqual_p = positionControl_B.ZeroGain_b !=
 8005276:	eeb4 6b47 	vcmp.f64	d6, d7
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1

  // Signum: '<S273>/SignPreSat'
  cosOut = positionControl_B.DeadZone_m;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8005294:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 8005298:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800529c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80052a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a4:	d506      	bpl.n	80052b4 <_ZN25positionControlModelClass4stepEv+0xbbc>
    positionControl_B.SignPreSat_n = -1.0;
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	4c91      	ldr	r4, [pc, #580]	; (80054f4 <_ZN25positionControlModelClass4stepEv+0xdfc>)
 80052ae:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260
 80052b2:	e012      	b.n	80052da <_ZN25positionControlModelClass4stepEv+0xbe2>
  } else if (cosOut > 0.0) {
 80052b4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80052b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80052bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c0:	dd06      	ble.n	80052d0 <_ZN25positionControlModelClass4stepEv+0xbd8>
    positionControl_B.SignPreSat_n = 1.0;
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	4c8b      	ldr	r4, [pc, #556]	; (80054f8 <_ZN25positionControlModelClass4stepEv+0xe00>)
 80052ca:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260
 80052ce:	e004      	b.n	80052da <_ZN25positionControlModelClass4stepEv+0xbe2>
  } else {
    positionControl_B.SignPreSat_n = cosOut;
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80052d6:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260
  }

  // End of Signum: '<S273>/SignPreSat'

  // DataTypeConversion: '<S273>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat_n), 256.0);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	ed93 7b98 	vldr	d7, [r3, #608]	; 0x260
 80052e0:	eeb0 0b47 	vmov.f64	d0, d7
 80052e4:	f023 fb98 	bl	8028a18 <floor>
 80052e8:	eeb0 7b40 	vmov.f64	d7, d0
 80052ec:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 80054e8 <_ZN25positionControlModelClass4stepEv+0xdf0>
 80052f0:	eeb0 0b47 	vmov.f64	d0, d7
 80052f4:	f023 fcc8 	bl	8028c88 <fmod>
 80052f8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv1_e = static_cast<int8_T>(cosOut < 0.0 ?
 80052fc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005300:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005308:	d50d      	bpl.n	8005326 <_ZN25positionControlModelClass4stepEv+0xc2e>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 800530a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800530e:	eeb1 7b47 	vneg.f64	d7, d7
 8005312:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005316:	edc7 7a00 	vstr	s15, [r7]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_e = static_cast<int8_T>(cosOut < 0.0 ?
 800531e:	425b      	negs	r3, r3
 8005320:	b2db      	uxtb	r3, r3
 8005322:	b25b      	sxtb	r3, r3
 8005324:	e008      	b.n	8005338 <_ZN25positionControlModelClass4stepEv+0xc40>
    (static_cast<uint8_T>(cosOut))));
 8005326:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800532a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800532e:	edc7 7a00 	vstr	s15, [r7]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_e = static_cast<int8_T>(cosOut < 0.0 ?
 8005336:	b25b      	sxtb	r3, r3
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	f882 32ba 	strb.w	r3, [r2, #698]	; 0x2ba

  // Gain: '<S277>/Integral Gain'
  positionControl_B.IntegralGain_b = pos_y_vel_I * positionControl_B.vel_error[1];
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	ed93 6b38 	vldr	d6, [r3, #224]	; 0xe0
 8005344:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <_ZN25positionControlModelClass4stepEv+0xe04>)
 8005346:	ed93 7b00 	vldr	d7, [r3]
 800534a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	ed83 7b9a 	vstr	d7, [r3, #616]	; 0x268

  // Signum: '<S273>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_b;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 800535a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 800535e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005362:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	d506      	bpl.n	800537a <_ZN25positionControlModelClass4stepEv+0xc82>
    positionControl_B.SignPreIntegrator_n = -1.0;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	4c60      	ldr	r4, [pc, #384]	; (80054f4 <_ZN25positionControlModelClass4stepEv+0xdfc>)
 8005374:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270
 8005378:	e012      	b.n	80053a0 <_ZN25positionControlModelClass4stepEv+0xca8>
  } else if (cosOut > 0.0) {
 800537a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800537e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005386:	dd06      	ble.n	8005396 <_ZN25positionControlModelClass4stepEv+0xc9e>
    positionControl_B.SignPreIntegrator_n = 1.0;
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	4c5a      	ldr	r4, [pc, #360]	; (80054f8 <_ZN25positionControlModelClass4stepEv+0xe00>)
 8005390:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270
 8005394:	e004      	b.n	80053a0 <_ZN25positionControlModelClass4stepEv+0xca8>
  } else {
    positionControl_B.SignPreIntegrator_n = cosOut;
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800539c:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270
  }

  // End of Signum: '<S273>/SignPreIntegrator'

  // DataTypeConversion: '<S273>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator_n), 256.0);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	ed93 7b9c 	vldr	d7, [r3, #624]	; 0x270
 80053a6:	eeb0 0b47 	vmov.f64	d0, d7
 80053aa:	f023 fb35 	bl	8028a18 <floor>
 80053ae:	eeb0 7b40 	vmov.f64	d7, d0
 80053b2:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 80054e8 <_ZN25positionControlModelClass4stepEv+0xdf0>
 80053b6:	eeb0 0b47 	vmov.f64	d0, d7
 80053ba:	f023 fc65 	bl	8028c88 <fmod>
 80053be:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv2_a = static_cast<int8_T>(cosOut < 0.0 ?
 80053c2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80053c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	d50d      	bpl.n	80053ec <_ZN25positionControlModelClass4stepEv+0xcf4>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 80053d0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80053d4:	eeb1 7b47 	vneg.f64	d7, d7
 80053d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80053dc:	edc7 7a00 	vstr	s15, [r7]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_a = static_cast<int8_T>(cosOut < 0.0 ?
 80053e4:	425b      	negs	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	b25b      	sxtb	r3, r3
 80053ea:	e008      	b.n	80053fe <_ZN25positionControlModelClass4stepEv+0xd06>
    (static_cast<uint8_T>(cosOut))));
 80053ec:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80053f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80053f4:	edc7 7a00 	vstr	s15, [r7]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_a = static_cast<int8_T>(cosOut < 0.0 ?
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	f882 32bb 	strb.w	r3, [r2, #699]	; 0x2bb

  // RelationalOperator: '<S273>/Equal1'
  positionControl_B.Equal1_c = positionControl_B.DataTypeConv1_e ==
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f993 22ba 	ldrsb.w	r2, [r3, #698]	; 0x2ba
    positionControl_B.DataTypeConv2_a;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f993 32bb 	ldrsb.w	r3, [r3, #699]	; 0x2bb
  positionControl_B.Equal1_c = positionControl_B.DataTypeConv1_e ==
 8005410:	429a      	cmp	r2, r3
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2

  // Logic: '<S273>/AND3'
  positionControl_B.AND3_n = positionControl_B.NotEqual_p &&
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d006      	beq.n	800543a <_ZN25positionControlModelClass4stepEv+0xd42>
    positionControl_B.Equal1_c;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
  positionControl_B.AND3_n = positionControl_B.NotEqual_p &&
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <_ZN25positionControlModelClass4stepEv+0xd42>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <_ZN25positionControlModelClass4stepEv+0xd44>
 800543a:	2300      	movs	r3, #0
 800543c:	461a      	mov	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3

  // Switch: '<S273>/Switch' incorporates:
  //   Constant: '<S273>/Constant1'

  if (positionControl_B.AND3_n) {
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 32c3 	ldrb.w	r3, [r3, #707]	; 0x2c3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d006      	beq.n	800545c <_ZN25positionControlModelClass4stepEv+0xd64>
    positionControl_B.Switch_m = positionControl_P.Constant1_Value_n;
 800544e:	4b28      	ldr	r3, [pc, #160]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 8005450:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	e9c2 349e 	strd	r3, r4, [r2, #632]	; 0x278
 800545a:	e005      	b.n	8005468 <_ZN25positionControlModelClass4stepEv+0xd70>
  } else {
    positionControl_B.Switch_m = positionControl_B.IntegralGain_b;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	e9c2 349e 	strd	r3, r4, [r2, #632]	; 0x278
  }

  // End of Switch: '<S273>/Switch'

  // Gain: '<S133>/Integral Gain'
  positionControl_B.IntegralGain_f = pos_z_I * positionControl_B.alt_error;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	ed93 6b60 	vldr	d6, [r3, #384]	; 0x180
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <_ZN25positionControlModelClass4stepEv+0xe08>)
 8005470:	ed93 7b00 	vldr	d7, [r3]
 8005474:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	ed83 7ba0 	vstr	d7, [r3, #640]	; 0x280

  // Gain: '<S177>/ZeroGain'
  positionControl_B.ZeroGain_e = positionControl_P.ZeroGain_Gain_h *
 800547e:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 8005480:	ed93 6b64 	vldr	d6, [r3, #400]	; 0x190
    positionControl_B.Sum_c;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	ed93 7b80 	vldr	d7, [r3, #512]	; 0x200
  positionControl_B.ZeroGain_e = positionControl_P.ZeroGain_Gain_h *
 800548a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	ed83 7ba2 	vstr	d7, [r3, #648]	; 0x288

  // DeadZone: '<S177>/DeadZone'
  if (positionControl_B.Sum_c >
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	ed93 6b80 	vldr	d6, [r3, #512]	; 0x200
      positionControl_P.PIDController3_UpperSaturationL) {
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 800549c:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
  if (positionControl_B.Sum_c >
 80054a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a8:	dd0b      	ble.n	80054c2 <_ZN25positionControlModelClass4stepEv+0xdca>
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	ed93 6b80 	vldr	d6, [r3, #512]	; 0x200
      positionControl_P.PIDController3_UpperSaturationL;
 80054b0:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 80054b2:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 80054b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	ed83 7ba4 	vstr	d7, [r3, #656]	; 0x290
 80054c0:	e02b      	b.n	800551a <_ZN25positionControlModelClass4stepEv+0xe22>
  } else if (positionControl_B.Sum_c >=
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	ed93 6b80 	vldr	d6, [r3, #512]	; 0x200
             positionControl_P.PIDController3_LowerSaturationL) {
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 80054ca:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
  } else if (positionControl_B.Sum_c >=
 80054ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	db15      	blt.n	8005504 <_ZN25positionControlModelClass4stepEv+0xe0c>
    positionControl_B.DeadZone_e = 0.0;
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	f04f 0400 	mov.w	r4, #0
 80054e2:	e9c2 34a4 	strd	r3, r4, [r2, #656]	; 0x290
 80054e6:	e018      	b.n	800551a <_ZN25positionControlModelClass4stepEv+0xe22>
 80054e8:	00000000 	.word	0x00000000
 80054ec:	40700000 	.word	0x40700000
 80054f0:	24000118 	.word	0x24000118
 80054f4:	bff00000 	.word	0xbff00000
 80054f8:	3ff00000 	.word	0x3ff00000
 80054fc:	240000e8 	.word	0x240000e8
 8005500:	24000948 	.word	0x24000948
  } else {
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	ed93 6b80 	vldr	d6, [r3, #512]	; 0x200
      positionControl_P.PIDController3_LowerSaturationL;
 800550a:	4b83      	ldr	r3, [pc, #524]	; (8005718 <_ZN25positionControlModelClass4stepEv+0x1020>)
 800550c:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 8005510:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	ed83 7ba4 	vstr	d7, [r3, #656]	; 0x290
  }

  // End of DeadZone: '<S177>/DeadZone'

  // RelationalOperator: '<S177>/NotEqual'
  positionControl_B.NotEqual_o = positionControl_B.ZeroGain_e !=
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	ed93 6ba2 	vldr	d6, [r3, #648]	; 0x288
    positionControl_B.DeadZone_e;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	ed93 7ba4 	vldr	d7, [r3, #656]	; 0x290
  positionControl_B.NotEqual_o = positionControl_B.ZeroGain_e !=
 8005526:	eeb4 6b47 	vcmp.f64	d6, d7
 800552a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f883 22c4 	strb.w	r2, [r3, #708]	; 0x2c4

  // Signum: '<S177>/SignPreSat'
  cosOut = positionControl_B.DeadZone_e;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	e9d3 34a4 	ldrd	r3, r4, [r3, #656]	; 0x290
 8005544:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 8005548:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800554c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005554:	d506      	bpl.n	8005564 <_ZN25positionControlModelClass4stepEv+0xe6c>
    positionControl_B.SignPreSat_h = -1.0;
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	4c6f      	ldr	r4, [pc, #444]	; (800571c <_ZN25positionControlModelClass4stepEv+0x1024>)
 800555e:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298
 8005562:	e012      	b.n	800558a <_ZN25positionControlModelClass4stepEv+0xe92>
  } else if (cosOut > 0.0) {
 8005564:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005568:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800556c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005570:	dd06      	ble.n	8005580 <_ZN25positionControlModelClass4stepEv+0xe88>
    positionControl_B.SignPreSat_h = 1.0;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	4c69      	ldr	r4, [pc, #420]	; (8005720 <_ZN25positionControlModelClass4stepEv+0x1028>)
 800557a:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298
 800557e:	e004      	b.n	800558a <_ZN25positionControlModelClass4stepEv+0xe92>
  } else {
    positionControl_B.SignPreSat_h = cosOut;
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005586:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298
  }

  // End of Signum: '<S177>/SignPreSat'

  // DataTypeConversion: '<S177>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat_h), 256.0);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	ed93 7ba6 	vldr	d7, [r3, #664]	; 0x298
 8005590:	eeb0 0b47 	vmov.f64	d0, d7
 8005594:	f023 fa40 	bl	8028a18 <floor>
 8005598:	eeb0 7b40 	vmov.f64	d7, d0
 800559c:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8005710 <_ZN25positionControlModelClass4stepEv+0x1018>
 80055a0:	eeb0 0b47 	vmov.f64	d0, d7
 80055a4:	f023 fb70 	bl	8028c88 <fmod>
 80055a8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv1_m = static_cast<int8_T>(cosOut < 0.0 ?
 80055ac:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80055b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80055b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b8:	d50d      	bpl.n	80055d6 <_ZN25positionControlModelClass4stepEv+0xede>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 80055ba:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80055be:	eeb1 7b47 	vneg.f64	d7, d7
 80055c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055c6:	edc7 7a00 	vstr	s15, [r7]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_m = static_cast<int8_T>(cosOut < 0.0 ?
 80055ce:	425b      	negs	r3, r3
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	e008      	b.n	80055e8 <_ZN25positionControlModelClass4stepEv+0xef0>
    (static_cast<uint8_T>(cosOut))));
 80055d6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80055da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055de:	edc7 7a00 	vstr	s15, [r7]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_m = static_cast<int8_T>(cosOut < 0.0 ?
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	f882 32bc 	strb.w	r3, [r2, #700]	; 0x2bc

  // Gain: '<S181>/Integral Gain'
  positionControl_B.IntegralGain_l = pos_z_vel_I * positionControl_B.vz_error;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	ed93 6b72 	vldr	d6, [r3, #456]	; 0x1c8
 80055f4:	4b4b      	ldr	r3, [pc, #300]	; (8005724 <_ZN25positionControlModelClass4stepEv+0x102c>)
 80055f6:	ed93 7b00 	vldr	d7, [r3]
 80055fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	ed83 7ba8 	vstr	d7, [r3, #672]	; 0x2a0

  // Signum: '<S177>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_l;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	e9d3 34a8 	ldrd	r3, r4, [r3, #672]	; 0x2a0
 800560a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 800560e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005612:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561a:	d506      	bpl.n	800562a <_ZN25positionControlModelClass4stepEv+0xf32>
    positionControl_B.SignPreIntegrator_d = -1.0;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	4c3e      	ldr	r4, [pc, #248]	; (800571c <_ZN25positionControlModelClass4stepEv+0x1024>)
 8005624:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8
 8005628:	e012      	b.n	8005650 <_ZN25positionControlModelClass4stepEv+0xf58>
  } else if (cosOut > 0.0) {
 800562a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800562e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	dd06      	ble.n	8005646 <_ZN25positionControlModelClass4stepEv+0xf4e>
    positionControl_B.SignPreIntegrator_d = 1.0;
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	4c38      	ldr	r4, [pc, #224]	; (8005720 <_ZN25positionControlModelClass4stepEv+0x1028>)
 8005640:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8
 8005644:	e004      	b.n	8005650 <_ZN25positionControlModelClass4stepEv+0xf58>
  } else {
    positionControl_B.SignPreIntegrator_d = cosOut;
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800564c:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8
  }

  // End of Signum: '<S177>/SignPreIntegrator'

  // DataTypeConversion: '<S177>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator_d), 256.0);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	ed93 7baa 	vldr	d7, [r3, #680]	; 0x2a8
 8005656:	eeb0 0b47 	vmov.f64	d0, d7
 800565a:	f023 f9dd 	bl	8028a18 <floor>
 800565e:	eeb0 7b40 	vmov.f64	d7, d0
 8005662:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8005710 <_ZN25positionControlModelClass4stepEv+0x1018>
 8005666:	eeb0 0b47 	vmov.f64	d0, d7
 800566a:	f023 fb0d 	bl	8028c88 <fmod>
 800566e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv2_j = static_cast<int8_T>(cosOut < 0.0 ?
 8005672:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005676:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567e:	d50d      	bpl.n	800569c <_ZN25positionControlModelClass4stepEv+0xfa4>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 8005680:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005684:	eeb1 7b47 	vneg.f64	d7, d7
 8005688:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800568c:	edc7 7a00 	vstr	s15, [r7]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_j = static_cast<int8_T>(cosOut < 0.0 ?
 8005694:	425b      	negs	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	b25b      	sxtb	r3, r3
 800569a:	e008      	b.n	80056ae <_ZN25positionControlModelClass4stepEv+0xfb6>
    (static_cast<uint8_T>(cosOut))));
 800569c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80056a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80056a4:	edc7 7a00 	vstr	s15, [r7]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_j = static_cast<int8_T>(cosOut < 0.0 ?
 80056ac:	b25b      	sxtb	r3, r3
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	f882 32bd 	strb.w	r3, [r2, #701]	; 0x2bd

  // RelationalOperator: '<S177>/Equal1'
  positionControl_B.Equal1_i = positionControl_B.DataTypeConv1_m ==
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f993 22bc 	ldrsb.w	r2, [r3, #700]	; 0x2bc
    positionControl_B.DataTypeConv2_j;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f993 32bd 	ldrsb.w	r3, [r3, #701]	; 0x2bd
  positionControl_B.Equal1_i = positionControl_B.DataTypeConv1_m ==
 80056c0:	429a      	cmp	r2, r3
 80056c2:	bf0c      	ite	eq
 80056c4:	2301      	moveq	r3, #1
 80056c6:	2300      	movne	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f883 22c5 	strb.w	r2, [r3, #709]	; 0x2c5

  // Logic: '<S177>/AND3'
  positionControl_B.AND3_nv = positionControl_B.NotEqual_o &&
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 32c4 	ldrb.w	r3, [r3, #708]	; 0x2c4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <_ZN25positionControlModelClass4stepEv+0xff2>
    positionControl_B.Equal1_i;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 32c5 	ldrb.w	r3, [r3, #709]	; 0x2c5
  positionControl_B.AND3_nv = positionControl_B.NotEqual_o &&
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <_ZN25positionControlModelClass4stepEv+0xff2>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <_ZN25positionControlModelClass4stepEv+0xff4>
 80056ea:	2300      	movs	r3, #0
 80056ec:	461a      	mov	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6

  // Switch: '<S177>/Switch' incorporates:
  //   Constant: '<S177>/Constant1'

  if (positionControl_B.AND3_nv) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 32c6 	ldrb.w	r3, [r3, #710]	; 0x2c6
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d014      	beq.n	8005728 <_ZN25positionControlModelClass4stepEv+0x1030>
    positionControl_B.Switch_e = positionControl_P.Constant1_Value_k;
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <_ZN25positionControlModelClass4stepEv+0x1020>)
 8005700:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	e9c2 34ac 	strd	r3, r4, [r2, #688]	; 0x2b0
 800570a:	e013      	b.n	8005734 <_ZN25positionControlModelClass4stepEv+0x103c>
 800570c:	f3af 8000 	nop.w
 8005710:	00000000 	.word	0x00000000
 8005714:	40700000 	.word	0x40700000
 8005718:	24000118 	.word	0x24000118
 800571c:	bff00000 	.word	0xbff00000
 8005720:	3ff00000 	.word	0x3ff00000
 8005724:	24000108 	.word	0x24000108
  } else {
    positionControl_B.Switch_e = positionControl_B.IntegralGain_l;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	e9d3 34a8 	ldrd	r3, r4, [r3, #672]	; 0x2a0
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	e9c2 34ac 	strd	r3, r4, [r2, #688]	; 0x2b0
  }

  // End of Switch: '<S177>/Switch'

  // Update for DiscreteIntegrator: '<S40>/Integrator'
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	ed93 6bb2 	vldr	d6, [r3, #712]	; 0x2c8
 800573a:	4b60      	ldr	r3, [pc, #384]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800573c:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
    positionControl_B.IntegralGain;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 8005746:	ee25 7b07 	vmul.f64	d7, d5, d7
 800574a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	ed83 7bb2 	vstr	d7, [r3, #712]	; 0x2c8

  // Update for DiscreteIntegrator: '<S35>/Filter'
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	ed93 6bb4 	vldr	d6, [r3, #720]	; 0x2d0
 800575a:	4b58      	ldr	r3, [pc, #352]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800575c:	ed93 5b48 	vldr	d5, [r3, #288]	; 0x120
    positionControl_B.FilterCoefficient;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 8005766:	ee25 7b07 	vmul.f64	d7, d5, d7
 800576a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	ed83 7bb4 	vstr	d7, [r3, #720]	; 0x2d0

  // Update for DiscreteIntegrator: '<S232>/Integrator'
  positionControl_DW.Integrator_DSTATE_k +=
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	ed93 6bb6 	vldr	d6, [r3, #728]	; 0x2d8
    positionControl_P.Integrator_gainval_l * positionControl_B.IntegralGain_o;
 800577a:	4b50      	ldr	r3, [pc, #320]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800577c:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	ed93 7b92 	vldr	d7, [r3, #584]	; 0x248
 8005786:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_k +=
 800578a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	ed83 7bb6 	vstr	d7, [r3, #728]	; 0x2d8

  // Update for DiscreteIntegrator: '<S227>/Filter'
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	ed93 6bb8 	vldr	d6, [r3, #736]	; 0x2e0
 800579a:	4b48      	ldr	r3, [pc, #288]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800579c:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
    positionControl_B.FilterCoefficient_n;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 80057a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80057aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	ed83 7bb8 	vstr	d7, [r3, #736]	; 0x2e0

  // Update for DiscreteIntegrator: '<S280>/Integrator'
  positionControl_DW.Integrator_DSTATE_f +=
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	ed93 6bba 	vldr	d6, [r3, #744]	; 0x2e8
    positionControl_P.Integrator_gainval_k * positionControl_B.Switch_m;
 80057ba:	4b40      	ldr	r3, [pc, #256]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 80057bc:	ed93 5b4e 	vldr	d5, [r3, #312]	; 0x138
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	ed93 7b9e 	vldr	d7, [r3, #632]	; 0x278
 80057c6:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_f +=
 80057ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	ed83 7bba 	vstr	d7, [r3, #744]	; 0x2e8

  // Update for DiscreteIntegrator: '<S275>/Filter'
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	ed93 6bbc 	vldr	d6, [r3, #752]	; 0x2f0
 80057da:	4b38      	ldr	r3, [pc, #224]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 80057dc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
    positionControl_B.FilterCoefficient_e;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 80057e6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80057ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	ed83 7bbc 	vstr	d7, [r3, #752]	; 0x2f0

  // Update for DiscreteIntegrator: '<S88>/Integrator'
  positionControl_DW.Integrator_DSTATE_m +=
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	ed93 6bbe 	vldr	d6, [r3, #760]	; 0x2f8
    positionControl_P.Integrator_gainval_lc * positionControl_B.Switch;
 80057fa:	4b30      	ldr	r3, [pc, #192]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 80057fc:	ed93 5b54 	vldr	d5, [r3, #336]	; 0x150
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	ed93 7b90 	vldr	d7, [r3, #576]	; 0x240
 8005806:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_m +=
 800580a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	ed83 7bbe 	vstr	d7, [r3, #760]	; 0x2f8

  // Update for DiscreteIntegrator: '<S83>/Filter'
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	ed93 6bc0 	vldr	d6, [r3, #768]	; 0x300
 800581a:	4b28      	ldr	r3, [pc, #160]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800581c:	ed93 5b56 	vldr	d5, [r3, #344]	; 0x158
    positionControl_B.FilterCoefficient_f;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 8005826:	ee25 7b07 	vmul.f64	d7, d5, d7
 800582a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	ed83 7bc0 	vstr	d7, [r3, #768]	; 0x300

  // Update for DiscreteIntegrator: '<S136>/Integrator'
  positionControl_DW.Integrator_DSTATE_j +=
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	ed93 6bc2 	vldr	d6, [r3, #776]	; 0x308
    positionControl_P.Integrator_gainval_o * positionControl_B.IntegralGain_f;
 800583a:	4b20      	ldr	r3, [pc, #128]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800583c:	ed93 5b58 	vldr	d5, [r3, #352]	; 0x160
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 8005846:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_j +=
 800584a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	ed83 7bc2 	vstr	d7, [r3, #776]	; 0x308

  // Update for DiscreteIntegrator: '<S131>/Filter'
  positionControl_DW.Filter_DSTATE_mf += positionControl_P.Filter_gainval_f *
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	ed93 6bc4 	vldr	d6, [r3, #784]	; 0x310
 800585a:	4b18      	ldr	r3, [pc, #96]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800585c:	ed93 5b5a 	vldr	d5, [r3, #360]	; 0x168
    positionControl_B.FilterCoefficient_d;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
  positionControl_DW.Filter_DSTATE_mf += positionControl_P.Filter_gainval_f *
 8005866:	ee25 7b07 	vmul.f64	d7, d5, d7
 800586a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	ed83 7bc4 	vstr	d7, [r3, #784]	; 0x310

  // Update for DiscreteIntegrator: '<S184>/Integrator'
  positionControl_DW.Integrator_DSTATE_b +=
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	ed93 6bc6 	vldr	d6, [r3, #792]	; 0x318
    positionControl_P.Integrator_gainval_a * positionControl_B.Switch_e;
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800587c:	ed93 5b5c 	vldr	d5, [r3, #368]	; 0x170
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	ed93 7bac 	vldr	d7, [r3, #688]	; 0x2b0
 8005886:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_b +=
 800588a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	ed83 7bc6 	vstr	d7, [r3, #792]	; 0x318

  // Update for DiscreteIntegrator: '<S179>/Filter'
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	ed93 6bc8 	vldr	d6, [r3, #800]	; 0x320
 800589a:	4b08      	ldr	r3, [pc, #32]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800589c:	ed93 5b5e 	vldr	d5, [r3, #376]	; 0x178
    positionControl_B.FilterCoefficient_a;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 80058a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80058aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	ed83 7bc8 	vstr	d7, [r3, #800]	; 0x320
}
 80058b4:	bf00      	nop
 80058b6:	373c      	adds	r7, #60	; 0x3c
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd90      	pop	{r4, r7, pc}
 80058bc:	24000118 	.word	0x24000118

080058c0 <_ZN25positionControlModelClass10initializeEv>:

// Model initialize function
void positionControlModelClass::initialize()
{
 80058c0:	b490      	push	{r4, r7}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S40>/Integrator'
  positionControl_DW.Integrator_DSTATE =
    positionControl_P.PIDController_InitialConditio_c;
 80058c8:	4b26      	ldr	r3, [pc, #152]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058ca:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
  positionControl_DW.Integrator_DSTATE =
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	e9c2 34b2 	strd	r3, r4, [r2, #712]	; 0x2c8

  // InitializeConditions for DiscreteIntegrator: '<S35>/Filter'
  positionControl_DW.Filter_DSTATE =
    positionControl_P.PIDController_InitialConditionF;
 80058d4:	4b23      	ldr	r3, [pc, #140]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058d6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_DW.Filter_DSTATE =
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	e9c2 34b4 	strd	r3, r4, [r2, #720]	; 0x2d0

  // InitializeConditions for DiscreteIntegrator: '<S232>/Integrator'
  positionControl_DW.Integrator_DSTATE_k =
    positionControl_P.PIDController4_InitialConditi_i;
 80058e0:	4b20      	ldr	r3, [pc, #128]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058e2:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
  positionControl_DW.Integrator_DSTATE_k =
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	e9c2 34b6 	strd	r3, r4, [r2, #728]	; 0x2d8

  // InitializeConditions for DiscreteIntegrator: '<S227>/Filter'
  positionControl_DW.Filter_DSTATE_m =
    positionControl_P.PIDController4_InitialCondition;
 80058ec:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058ee:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_DW.Filter_DSTATE_m =
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	e9c2 34b8 	strd	r3, r4, [r2, #736]	; 0x2e0

  // InitializeConditions for DiscreteIntegrator: '<S280>/Integrator'
  positionControl_DW.Integrator_DSTATE_f =
    positionControl_P.PIDController5_InitialConditi_c;
 80058f8:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058fa:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
  positionControl_DW.Integrator_DSTATE_f =
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8

  // InitializeConditions for DiscreteIntegrator: '<S275>/Filter'
  positionControl_DW.Filter_DSTATE_j =
    positionControl_P.PIDController5_InitialCondition;
 8005904:	4b17      	ldr	r3, [pc, #92]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005906:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
  positionControl_DW.Filter_DSTATE_j =
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	e9c2 34bc 	strd	r3, r4, [r2, #752]	; 0x2f0

  // InitializeConditions for DiscreteIntegrator: '<S88>/Integrator'
  positionControl_DW.Integrator_DSTATE_m =
    positionControl_P.PIDController1_InitialConditi_a;
 8005910:	4b14      	ldr	r3, [pc, #80]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005912:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
  positionControl_DW.Integrator_DSTATE_m =
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	e9c2 34be 	strd	r3, r4, [r2, #760]	; 0x2f8

  // InitializeConditions for DiscreteIntegrator: '<S83>/Filter'
  positionControl_DW.Filter_DSTATE_d =
    positionControl_P.PIDController1_InitialCondition;
 800591c:	4b11      	ldr	r3, [pc, #68]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 800591e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
  positionControl_DW.Filter_DSTATE_d =
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	e9c2 34c0 	strd	r3, r4, [r2, #768]	; 0x300

  // InitializeConditions for DiscreteIntegrator: '<S136>/Integrator'
  positionControl_DW.Integrator_DSTATE_j =
    positionControl_P.PIDController2_InitialConditi_n;
 8005928:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 800592a:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
  positionControl_DW.Integrator_DSTATE_j =
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	e9c2 34c2 	strd	r3, r4, [r2, #776]	; 0x308

  // InitializeConditions for DiscreteIntegrator: '<S131>/Filter'
  positionControl_DW.Filter_DSTATE_mf =
    positionControl_P.PIDController2_InitialCondition;
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005936:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
  positionControl_DW.Filter_DSTATE_mf =
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	e9c2 34c4 	strd	r3, r4, [r2, #784]	; 0x310

  // InitializeConditions for DiscreteIntegrator: '<S184>/Integrator'
  positionControl_DW.Integrator_DSTATE_b =
    positionControl_P.PIDController3_InitialConditi_d;
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005942:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
  positionControl_DW.Integrator_DSTATE_b =
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	e9c2 34c6 	strd	r3, r4, [r2, #792]	; 0x318

  // InitializeConditions for DiscreteIntegrator: '<S179>/Filter'
  positionControl_DW.Filter_DSTATE_e =
    positionControl_P.PIDController3_InitialCondition;
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 800594e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
  positionControl_DW.Filter_DSTATE_e =
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	e9c2 34c8 	strd	r3, r4, [r2, #800]	; 0x320
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bc90      	pop	{r4, r7}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	24000118 	.word	0x24000118

08005968 <_ZN25positionControlModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
positionControlModelClass::positionControlModelClass():
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  positionControl_B()
  ,positionControl_DW()
  ,positionControl_U()
  ,positionControl_Y()
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4618      	mov	r0, r3
 8005974:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 8005978:	461a      	mov	r2, r3
 800597a:	2100      	movs	r1, #0
 800597c:	f026 f827 	bl	802b9ce <memset>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8005986:	2260      	movs	r2, #96	; 0x60
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f026 f81f 	bl	802b9ce <memset>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8005996:	2258      	movs	r2, #88	; 0x58
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f026 f817 	bl	802b9ce <memset>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	605a      	str	r2, [r3, #4]
 80059ac:	609a      	str	r2, [r3, #8]
 80059ae:	60da      	str	r2, [r3, #12]
{
  // Currently there is no constructor body generated.
}
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	ed87 0b00 	vstr	d0, [r7]
 80059c4:	ed97 7b00 	vldr	d7, [r7]
 80059c8:	eeb0 7bc7 	vabs.f64	d7, d7
 80059cc:	eeb0 0b47 	vmov.f64	d0, d7
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <rtGetNaN>:
  //
  // Initialize rtNaN needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetNaN(void)
  {
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80059e2:	2340      	movs	r3, #64	; 0x40
 80059e4:	60fb      	str	r3, [r7, #12]
    real_T nan = 0.0;
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	f04f 0400 	mov.w	r4, #0
 80059ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d108      	bne.n	8005a0a <rtGetNaN+0x2e>
      nan = rtGetNaNF();
 80059f8:	f000 f81a 	bl	8005a30 <rtGetNaNF>
 80059fc:	eef0 7a40 	vmov.f32	s15, s0
 8005a00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a04:	ed87 7b04 	vstr	d7, [r7, #16]
 8005a08:	e007      	b.n	8005a1a <rtGetNaN+0x3e>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <rtGetNaN+0x50>)
 8005a0c:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	603b      	str	r3, [r7, #0]
      nan = tmpVal.fltVal;
 8005a12:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a16:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return nan;
 8005a1a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005a1e:	ec44 3b17 	vmov	d7, r3, r4
  }
 8005a22:	eeb0 0b47 	vmov.f64	d0, d7
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd90      	pop	{r4, r7, pc}
 8005a2c:	fff80000 	.word	0xfff80000

08005a30 <rtGetNaNF>:
  //
  // Initialize rtNaNF needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetNaNF(void)
  {
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
    IEEESingle nanF = { { 0 } };
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	607b      	str	r3, [r7, #4]

    nanF.wordL.wordLuint = 0xFFC00000U;
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <rtGetNaNF+0x24>)
 8005a3e:	607b      	str	r3, [r7, #4]
    return nanF.wordL.wordLreal;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	ee07 3a90 	vmov	s15, r3
  }
 8005a46:	eeb0 0a67 	vmov.f32	s0, s15
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	ffc00000 	.word	0xffc00000

08005a58 <rt_InitInfAndNaN>:
  //
  // Initialize the rtInf, rtMinusInf, and rtNaN needed by the
  // generated code. NaN is initialized as non-signaling. Assumes IEEE.
  //
  static void rt_InitInfAndNaN(size_t realSize)
  {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
    (void) (realSize);
    rtNaN = rtGetNaN();
 8005a60:	f7ff ffbc 	bl	80059dc <rtGetNaN>
 8005a64:	eeb0 7b40 	vmov.f64	d7, d0
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <rt_InitInfAndNaN+0x64>)
 8005a6a:	ed83 7b00 	vstr	d7, [r3]
    rtNaNF = rtGetNaNF();
 8005a6e:	f7ff ffdf 	bl	8005a30 <rtGetNaNF>
 8005a72:	eef0 7a40 	vmov.f32	s15, s0
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <rt_InitInfAndNaN+0x68>)
 8005a78:	edc3 7a00 	vstr	s15, [r3]
    rtInf = rtGetInf();
 8005a7c:	f000 f8a0 	bl	8005bc0 <rtGetInf>
 8005a80:	eeb0 7b40 	vmov.f64	d7, d0
 8005a84:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <rt_InitInfAndNaN+0x6c>)
 8005a86:	ed83 7b00 	vstr	d7, [r3]
    rtInfF = rtGetInfF();
 8005a8a:	f000 f8c3 	bl	8005c14 <rtGetInfF>
 8005a8e:	eef0 7a40 	vmov.f32	s15, s0
 8005a92:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <rt_InitInfAndNaN+0x70>)
 8005a94:	edc3 7a00 	vstr	s15, [r3]
    rtMinusInf = rtGetMinusInf();
 8005a98:	f000 f8cc 	bl	8005c34 <rtGetMinusInf>
 8005a9c:	eeb0 7b40 	vmov.f64	d7, d0
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <rt_InitInfAndNaN+0x74>)
 8005aa2:	ed83 7b00 	vstr	d7, [r3]
    rtMinusInfF = rtGetMinusInfF();
 8005aa6:	f000 f8ef 	bl	8005c88 <rtGetMinusInfF>
 8005aaa:	eef0 7a40 	vmov.f32	s15, s0
 8005aae:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <rt_InitInfAndNaN+0x78>)
 8005ab0:	edc3 7a00 	vstr	s15, [r3]
  }
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	24000960 	.word	0x24000960
 8005ac0:	24000970 	.word	0x24000970
 8005ac4:	24000950 	.word	0x24000950
 8005ac8:	24000968 	.word	0x24000968
 8005acc:	24000958 	.word	0x24000958
 8005ad0:	2400096c 	.word	0x2400096c

08005ad4 <rtIsInf>:

  // Test if value is infinite
  static boolean_T rtIsInf(real_T value)
  {
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	ed87 0b00 	vstr	d0, [r7]
    return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8005ade:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <rtIsInf+0x44>)
 8005ae0:	ed93 7b00 	vldr	d7, [r3]
 8005ae4:	ed97 6b00 	vldr	d6, [r7]
 8005ae8:	eeb4 6b47 	vcmp.f64	d6, d7
 8005aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af0:	d009      	beq.n	8005b06 <rtIsInf+0x32>
 8005af2:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <rtIsInf+0x48>)
 8005af4:	ed93 7b00 	vldr	d7, [r3]
 8005af8:	ed97 6b00 	vldr	d6, [r7]
 8005afc:	eeb4 6b47 	vcmp.f64	d6, d7
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	d101      	bne.n	8005b0a <rtIsInf+0x36>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <rtIsInf+0x38>
 8005b0a:	2300      	movs	r3, #0
  }
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	24000950 	.word	0x24000950
 8005b1c:	24000958 	.word	0x24000958

08005b20 <rtIsNaN>:
    return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
  }

  // Test if value is not a number
  static boolean_T rtIsNaN(real_T value)
  {
 8005b20:	b590      	push	{r4, r7, lr}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	ed87 0b00 	vstr	d0, [r7]
    boolean_T result = (boolean_T) 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005b2e:	2340      	movs	r3, #64	; 0x40
 8005b30:	613b      	str	r3, [r7, #16]
    if (bitsPerReal == 32U) {
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d10a      	bne.n	8005b4e <rtIsNaN+0x2e>
      result = rtIsNaNF((real32_T)value);
 8005b38:	ed97 7b00 	vldr	d7, [r7]
 8005b3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005b40:	eeb0 0a67 	vmov.f32	s0, s15
 8005b44:	f000 f820 	bl	8005b88 <rtIsNaNF>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	75fb      	strb	r3, [r7, #23]
 8005b4c:	e015      	b.n	8005b7a <rtIsNaN+0x5a>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.fltVal = value;
 8005b4e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b52:	e9c7 3402 	strd	r3, r4, [r7, #8]
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <rtIsNaN+0x64>)
 8005b5a:	4013      	ands	r3, r2
                           0x7FF00000 &&
 8005b5c:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <rtIsNaN+0x64>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d109      	bne.n	8005b76 <rtIsNaN+0x56>
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
                           0x7FF00000 &&
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <rtIsNaN+0x52>
                            (tmpVal.bitVal.words.wordL != 0) ));
 8005b6c:	68bb      	ldr	r3, [r7, #8]
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <rtIsNaN+0x56>
                           0x7FF00000 &&
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <rtIsNaN+0x58>
 8005b76:	2300      	movs	r3, #0
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8005b78:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
  }
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd90      	pop	{r4, r7, pc}
 8005b84:	7ff00000 	.word	0x7ff00000

08005b88 <rtIsNaNF>:

  // Test if single-precision value is not a number
  static boolean_T rtIsNaNF(real32_T value)
  {
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	ed87 0a01 	vstr	s0, [r7, #4]
    IEEESingle tmp;
    tmp.wordL.wordLreal = value;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8005b9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005ba0:	d106      	bne.n	8005bb0 <rtIsNaNF+0x28>
                       (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f3c3 0316 	ubfx	r3, r3, #0, #23
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <rtIsNaNF+0x28>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <rtIsNaNF+0x2a>
 8005bb0:	2300      	movs	r3, #0
  }
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <rtGetInf>:
  //
  // Initialize rtInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetInf(void)
  {
 8005bc0:	b590      	push	{r4, r7, lr}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005bc6:	2340      	movs	r3, #64	; 0x40
 8005bc8:	60fb      	str	r3, [r7, #12]
    real_T inf = 0.0;
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	f04f 0400 	mov.w	r4, #0
 8005bd2:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d108      	bne.n	8005bee <rtGetInf+0x2e>
      inf = rtGetInfF();
 8005bdc:	f000 f81a 	bl	8005c14 <rtGetInfF>
 8005be0:	eef0 7a40 	vmov.f32	s15, s0
 8005be4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005be8:	ed87 7b04 	vstr	d7, [r7, #16]
 8005bec:	e007      	b.n	8005bfe <rtGetInf+0x3e>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8005bee:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <rtGetInf+0x50>)
 8005bf0:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	603b      	str	r3, [r7, #0]
      inf = tmpVal.fltVal;
 8005bf6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005bfa:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return inf;
 8005bfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005c02:	ec44 3b17 	vmov	d7, r3, r4
  }
 8005c06:	eeb0 0b47 	vmov.f64	d0, d7
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd90      	pop	{r4, r7, pc}
 8005c10:	7ff00000 	.word	0x7ff00000

08005c14 <rtGetInfF>:
  //
  // Initialize rtInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetInfF(void)
  {
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
    IEEESingle infF;
    infF.wordL.wordLuint = 0x7F800000U;
 8005c1a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8005c1e:	607b      	str	r3, [r7, #4]
    return infF.wordL.wordLreal;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	ee07 3a90 	vmov	s15, r3
  }
 8005c26:	eeb0 0a67 	vmov.f32	s0, s15
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <rtGetMinusInf>:
  //
  // Initialize rtMinusInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetMinusInf(void)
  {
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005c3a:	2340      	movs	r3, #64	; 0x40
 8005c3c:	60fb      	str	r3, [r7, #12]
    real_T minf = 0.0;
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	f04f 0400 	mov.w	r4, #0
 8005c46:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	d108      	bne.n	8005c62 <rtGetMinusInf+0x2e>
      minf = rtGetMinusInfF();
 8005c50:	f000 f81a 	bl	8005c88 <rtGetMinusInfF>
 8005c54:	eef0 7a40 	vmov.f32	s15, s0
 8005c58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c5c:	ed87 7b04 	vstr	d7, [r7, #16]
 8005c60:	e007      	b.n	8005c72 <rtGetMinusInf+0x3e>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8005c62:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <rtGetMinusInf+0x50>)
 8005c64:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	603b      	str	r3, [r7, #0]
      minf = tmpVal.fltVal;
 8005c6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005c6e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return minf;
 8005c72:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005c76:	ec44 3b17 	vmov	d7, r3, r4
  }
 8005c7a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd90      	pop	{r4, r7, pc}
 8005c84:	fff00000 	.word	0xfff00000

08005c88 <rtGetMinusInfF>:
  //
  // Initialize rtMinusInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetMinusInfF(void)
  {
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
    IEEESingle minfF;
    minfF.wordL.wordLuint = 0xFF800000U;
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <rtGetMinusInfF+0x20>)
 8005c90:	607b      	str	r3, [r7, #4]
    return minfF.wordL.wordLreal;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	ee07 3a90 	vmov	s15, r3
  }
 8005c98:	eeb0 0a67 	vmov.f32	s0, s15
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	ff800000 	.word	0xff800000
 8005cac:	00000000 	.word	0x00000000

08005cb0 <_Z11rt_modd_snfdd>:
}

real_T rt_modd_snf(real_T u0, real_T u1)
{
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b08b      	sub	sp, #44	; 0x2c
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	ed87 0b02 	vstr	d0, [r7, #8]
 8005cba:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  boolean_T yEq;
  real_T q;
  y = u0;
 8005cbe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005cc2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (u1 == 0.0) {
 8005cc6:	ed97 7b00 	vldr	d7, [r7]
 8005cca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd2:	d10c      	bne.n	8005cee <_Z11rt_modd_snfdd+0x3e>
    if (u0 == 0.0) {
 8005cd4:	ed97 7b02 	vldr	d7, [r7, #8]
 8005cd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce0:	f040 80e2 	bne.w	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
      y = u1;
 8005ce4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005ce8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8005cec:	e0dc      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
    }
  } else if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {
 8005cee:	ed97 0b02 	vldr	d0, [r7, #8]
 8005cf2:	f7ff ff15 	bl	8005b20 <rtIsNaN>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10d      	bne.n	8005d18 <_Z11rt_modd_snfdd+0x68>
 8005cfc:	ed97 0b00 	vldr	d0, [r7]
 8005d00:	f7ff ff0e 	bl	8005b20 <rtIsNaN>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <_Z11rt_modd_snfdd+0x68>
 8005d0a:	ed97 0b02 	vldr	d0, [r7, #8]
 8005d0e:	f7ff fee1 	bl	8005ad4 <rtIsInf>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <_Z11rt_modd_snfdd+0x6c>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <_Z11rt_modd_snfdd+0x6e>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <_Z11rt_modd_snfdd+0x7e>
    y = (rtNaN);
 8005d22:	4b6b      	ldr	r3, [pc, #428]	; (8005ed0 <_Z11rt_modd_snfdd+0x220>)
 8005d24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d28:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8005d2c:	e0bc      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
  } else if (u0 == 0.0) {
 8005d2e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3a:	d108      	bne.n	8005d4e <_Z11rt_modd_snfdd+0x9e>
    y = 0.0 / u1;
 8005d3c:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8005ec0 <_Z11rt_modd_snfdd+0x210>
 8005d40:	ed97 6b00 	vldr	d6, [r7]
 8005d44:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005d48:	ed87 7b08 	vstr	d7, [r7, #32]
 8005d4c:	e0ac      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
  } else if (rtIsInf(u1)) {
 8005d4e:	ed97 0b00 	vldr	d0, [r7]
 8005d52:	f7ff febf 	bl	8005ad4 <rtIsInf>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bf14      	ite	ne
 8005d5c:	2301      	movne	r3, #1
 8005d5e:	2300      	moveq	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01d      	beq.n	8005da2 <_Z11rt_modd_snfdd+0xf2>
    if ((u1 < 0.0) != (u0 < 0.0)) {
 8005d66:	ed97 7b00 	vldr	d7, [r7]
 8005d6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d72:	bf4c      	ite	mi
 8005d74:	2301      	movmi	r3, #1
 8005d76:	2300      	movpl	r3, #0
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	bf4c      	ite	mi
 8005d88:	2301      	movmi	r3, #1
 8005d8a:	2300      	movpl	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	4053      	eors	r3, r2
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8088 	beq.w	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
      y = u1;
 8005d98:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005d9c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8005da0:	e082      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
    }
  } else {
    y = std::fmod(u0, u1);
 8005da2:	ed97 1b00 	vldr	d1, [r7]
 8005da6:	ed97 0b02 	vldr	d0, [r7, #8]
 8005daa:	f022 ff6d 	bl	8028c88 <fmod>
 8005dae:	ed87 0b08 	vstr	d0, [r7, #32]
    yEq = (y == 0.0);
 8005db2:	ed97 7b08 	vldr	d7, [r7, #32]
 8005db6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2301      	moveq	r3, #1
 8005dc2:	2300      	movne	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	77fb      	strb	r3, [r7, #31]
    if ((!yEq) && (u1 > std::floor(u1))) {
 8005dc8:	7ffb      	ldrb	r3, [r7, #31]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d140      	bne.n	8005e50 <_Z11rt_modd_snfdd+0x1a0>
 8005dce:	ed97 0b00 	vldr	d0, [r7]
 8005dd2:	f022 fe21 	bl	8028a18 <floor>
 8005dd6:	eeb0 6b40 	vmov.f64	d6, d0
 8005dda:	ed97 7b00 	vldr	d7, [r7]
 8005dde:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de6:	dd33      	ble.n	8005e50 <_Z11rt_modd_snfdd+0x1a0>
      q = std::abs(u0 / u1);
 8005de8:	ed97 6b02 	vldr	d6, [r7, #8]
 8005dec:	ed97 7b00 	vldr	d7, [r7]
 8005df0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005df4:	eeb0 0b45 	vmov.f64	d0, d5
 8005df8:	f7ff fddf 	bl	80059ba <_ZSt3absd>
 8005dfc:	ed87 0b04 	vstr	d0, [r7, #16]
      yEq = !(std::abs(q - std::floor(q + 0.5)) > DBL_EPSILON * q);
 8005e00:	ed97 7b04 	vldr	d7, [r7, #16]
 8005e04:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8005e08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e0c:	eeb0 0b47 	vmov.f64	d0, d7
 8005e10:	f022 fe02 	bl	8028a18 <floor>
 8005e14:	eeb0 6b40 	vmov.f64	d6, d0
 8005e18:	ed97 7b04 	vldr	d7, [r7, #16]
 8005e1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e20:	eeb0 0b47 	vmov.f64	d0, d7
 8005e24:	f7ff fdc9 	bl	80059ba <_ZSt3absd>
 8005e28:	eeb0 5b40 	vmov.f64	d5, d0
 8005e2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005e30:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8005ec8 <_Z11rt_modd_snfdd+0x218>
 8005e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e38:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e40:	bfcc      	ite	gt
 8005e42:	2301      	movgt	r3, #1
 8005e44:	2300      	movle	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f083 0301 	eor.w	r3, r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	77fb      	strb	r3, [r7, #31]
    }

    if (yEq) {
 8005e50:	7ffb      	ldrb	r3, [r7, #31]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <_Z11rt_modd_snfdd+0x1b8>
      y = u1 * 0.0;
 8005e56:	ed97 7b00 	vldr	d7, [r7]
 8005e5a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8005ec0 <_Z11rt_modd_snfdd+0x210>
 8005e5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e62:	ed87 7b08 	vstr	d7, [r7, #32]
 8005e66:	e01f      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
    } else {
      if ((u0 < 0.0) != (u1 < 0.0)) {
 8005e68:	ed97 7b02 	vldr	d7, [r7, #8]
 8005e6c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e74:	bf4c      	ite	mi
 8005e76:	2301      	movmi	r3, #1
 8005e78:	2300      	movpl	r3, #0
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	ed97 7b00 	vldr	d7, [r7]
 8005e80:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e88:	bf4c      	ite	mi
 8005e8a:	2301      	movmi	r3, #1
 8005e8c:	2300      	movpl	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4053      	eors	r3, r2
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
        y += u1;
 8005e98:	ed97 6b08 	vldr	d6, [r7, #32]
 8005e9c:	ed97 7b00 	vldr	d7, [r7]
 8005ea0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005ea4:	ed87 7b08 	vstr	d7, [r7, #32]
      }
    }
  }

  return y;
 8005ea8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005eac:	ec44 3b17 	vmov	d7, r3, r4
}
 8005eb0:	eeb0 0b47 	vmov.f64	d0, d7
 8005eb4:	372c      	adds	r7, #44	; 0x2c
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd90      	pop	{r4, r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	f3af 8000 	nop.w
	...
 8005ecc:	3cb00000 	.word	0x3cb00000
 8005ed0:	24000960 	.word	0x24000960
 8005ed4:	00000000 	.word	0x00000000

08005ed8 <_Z13rt_atan2d_snfdd>:

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	ed87 0b02 	vstr	d0, [r7, #8]
 8005ee2:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  int32_T tmp;
  int32_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8005ee6:	ed97 0b02 	vldr	d0, [r7, #8]
 8005eea:	f7ff fe19 	bl	8005b20 <rtIsNaN>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <_Z13rt_atan2d_snfdd+0x2a>
 8005ef4:	ed97 0b00 	vldr	d0, [r7]
 8005ef8:	f7ff fe12 	bl	8005b20 <rtIsNaN>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <_Z13rt_atan2d_snfdd+0x2e>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <_Z13rt_atan2d_snfdd+0x30>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <_Z13rt_atan2d_snfdd+0x40>
    y = (rtNaN);
 8005f0c:	4b44      	ldr	r3, [pc, #272]	; (8006020 <_Z13rt_atan2d_snfdd+0x148>)
 8005f0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f12:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8005f16:	e06f      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
 8005f18:	ed97 0b02 	vldr	d0, [r7, #8]
 8005f1c:	f7ff fdda 	bl	8005ad4 <rtIsInf>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <_Z13rt_atan2d_snfdd+0x60>
 8005f26:	ed97 0b00 	vldr	d0, [r7]
 8005f2a:	f7ff fdd3 	bl	8005ad4 <rtIsInf>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <_Z13rt_atan2d_snfdd+0x60>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <_Z13rt_atan2d_snfdd+0x62>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02c      	beq.n	8005f98 <_Z13rt_atan2d_snfdd+0xc0>
    if (u1 > 0.0) {
 8005f3e:	ed97 7b00 	vldr	d7, [r7]
 8005f42:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4a:	dd02      	ble.n	8005f52 <_Z13rt_atan2d_snfdd+0x7a>
      tmp = 1;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e002      	b.n	8005f58 <_Z13rt_atan2d_snfdd+0x80>
    } else {
      tmp = -1;
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295
 8005f56:	617b      	str	r3, [r7, #20]
    }

    if (u0 > 0.0) {
 8005f58:	ed97 7b02 	vldr	d7, [r7, #8]
 8005f5c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	dd02      	ble.n	8005f6c <_Z13rt_atan2d_snfdd+0x94>
      tmp_0 = 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	e002      	b.n	8005f72 <_Z13rt_atan2d_snfdd+0x9a>
    } else {
      tmp_0 = -1;
 8005f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f70:	613b      	str	r3, [r7, #16]
    }

    y = atan2(static_cast<real_T>(tmp_0), static_cast<real_T>(tmp));
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	ee07 3a90 	vmov	s15, r3
 8005f78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	ee06 3a90 	vmov	s13, r3
 8005f82:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005f86:	eeb0 1b46 	vmov.f64	d1, d6
 8005f8a:	eeb0 0b47 	vmov.f64	d0, d7
 8005f8e:	f022 fe79 	bl	8028c84 <atan2>
 8005f92:	ed87 0b06 	vstr	d0, [r7, #24]
 8005f96:	e02f      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
  } else if (u1 == 0.0) {
 8005f98:	ed97 7b00 	vldr	d7, [r7]
 8005f9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa4:	d120      	bne.n	8005fe8 <_Z13rt_atan2d_snfdd+0x110>
    if (u0 > 0.0) {
 8005fa6:	ed97 7b02 	vldr	d7, [r7, #8]
 8005faa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	dd05      	ble.n	8005fc0 <_Z13rt_atan2d_snfdd+0xe8>
      y = RT_PI / 2.0;
 8005fb4:	a416      	add	r4, pc, #88	; (adr r4, 8006010 <_Z13rt_atan2d_snfdd+0x138>)
 8005fb6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005fba:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8005fbe:	e01b      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
    } else if (u0 < 0.0) {
 8005fc0:	ed97 7b02 	vldr	d7, [r7, #8]
 8005fc4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fcc:	d505      	bpl.n	8005fda <_Z13rt_atan2d_snfdd+0x102>
      y = -(RT_PI / 2.0);
 8005fce:	a412      	add	r4, pc, #72	; (adr r4, 8006018 <_Z13rt_atan2d_snfdd+0x140>)
 8005fd0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005fd4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8005fd8:	e00e      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
    } else {
      y = 0.0;
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	f04f 0400 	mov.w	r4, #0
 8005fe2:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8005fe6:	e007      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
    }
  } else {
    y = atan2(u0, u1);
 8005fe8:	ed97 1b00 	vldr	d1, [r7]
 8005fec:	ed97 0b02 	vldr	d0, [r7, #8]
 8005ff0:	f022 fe48 	bl	8028c84 <atan2>
 8005ff4:	ed87 0b06 	vstr	d0, [r7, #24]
  }

  return y;
 8005ff8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005ffc:	ec44 3b17 	vmov	d7, r3, r4
}
 8006000:	eeb0 0b47 	vmov.f64	d0, d7
 8006004:	3724      	adds	r7, #36	; 0x24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd90      	pop	{r4, r7, pc}
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w
 8006010:	54442d18 	.word	0x54442d18
 8006014:	3ff921fb 	.word	0x3ff921fb
 8006018:	54442d18 	.word	0x54442d18
 800601c:	bff921fb 	.word	0xbff921fb
 8006020:	24000960 	.word	0x24000960

08006024 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>:

// Function for MATLAB Function: '<S14>/Correct'
void positionEstimatorModelClass::EKFCorrector_correctStateAndCov(real_T x[6],
  real_T P_0[36], const real_T y[4], const real_T Pxy[24], const real_T Pyy[16],
  const real_T dHdx[24])
{
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 800602a:	af00      	add	r7, sp, #0
 800602c:	f107 040c 	add.w	r4, r7, #12
 8006030:	6020      	str	r0, [r4, #0]
 8006032:	f107 0008 	add.w	r0, r7, #8
 8006036:	6001      	str	r1, [r0, #0]
 8006038:	1d39      	adds	r1, r7, #4
 800603a:	600a      	str	r2, [r1, #0]
 800603c:	463a      	mov	r2, r7
 800603e:	6013      	str	r3, [r2, #0]
  int32_T d;
  int32_T ijA;
  real_T X_1[36];
  real_T P_1[36];
  int8_T ipiv_0;
  for (b_j = 0; b_j < 16; b_j++) {
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006046:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800604a:	2b0f      	cmp	r3, #15
 800604c:	dc15      	bgt.n	800607a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x56>
    A[b_j] = Pyy[b_j];
 800604e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8006058:	4413      	add	r3, r2
 800605a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800605e:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006062:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006066:	00d2      	lsls	r2, r2, #3
 8006068:	440a      	add	r2, r1
 800606a:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 16; b_j++) {
 800606e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006072:	3301      	adds	r3, #1
 8006074:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006078:	e7e5      	b.n	8006046 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x22>
  }

  ipiv[0] = 1;
 800607a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800607e:	2201      	movs	r2, #1
 8006080:	701a      	strb	r2, [r3, #0]
  ipiv[1] = 2;
 8006082:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006086:	2202      	movs	r2, #2
 8006088:	705a      	strb	r2, [r3, #1]
  ipiv[2] = 3;
 800608a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800608e:	2203      	movs	r2, #3
 8006090:	709a      	strb	r2, [r3, #2]
  ipiv[3] = 4;
 8006092:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006096:	2204      	movs	r2, #4
 8006098:	70da      	strb	r2, [r3, #3]
  for (b_j = 0; b_j < 3; b_j++) {
 800609a:	2300      	movs	r3, #0
 800609c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80060a0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	f300 81ea 	bgt.w	800647e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x45a>
    c = b_j * 5;
 80060aa:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
    jA = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c;
 80060be:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80060c2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    smax = std::abs(A[c]);
 80060c6:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80060ca:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4413      	add	r3, r2
 80060d2:	ed93 7b00 	vldr	d7, [r3]
 80060d6:	eeb0 0b47 	vmov.f64	d0, d7
 80060da:	f7ff fc6e 	bl	80059ba <_ZSt3absd>
 80060de:	ed87 0bee 	vstr	d0, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 80060e2:	2302      	movs	r3, #2
 80060e4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80060e8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80060ec:	f1c3 0304 	rsb	r3, r3, #4
 80060f0:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80060f4:	429a      	cmp	r2, r3
 80060f6:	dc2a      	bgt.n	800614e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x12a>
      ix++;
 80060f8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80060fc:	3301      	adds	r3, #1
 80060fe:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      b_y = std::abs(A[ix]);
 8006102:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006106:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	ed93 7b00 	vldr	d7, [r3]
 8006112:	eeb0 0b47 	vmov.f64	d0, d7
 8006116:	f7ff fc50 	bl	80059ba <_ZSt3absd>
 800611a:	ed87 0be8 	vstr	d0, [r7, #928]	; 0x3a0
      if (b_y > smax) {
 800611e:	ed97 6be8 	vldr	d6, [r7, #928]	; 0x3a0
 8006122:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006126:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612e:	dd08      	ble.n	8006142 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x11e>
        jA = iy - 1;
 8006130:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006134:	3b01      	subs	r3, #1
 8006136:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
        smax = b_y;
 800613a:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 800613e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 8006142:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006146:	3301      	adds	r3, #1
 8006148:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800614c:	e7cc      	b.n	80060e8 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc4>
      }
    }

    if (A[c + jA] != 0.0) {
 800614e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006152:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006156:	4413      	add	r3, r2
 8006158:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	ed93 7b00 	vldr	d7, [r3]
 8006164:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	f000 8103 	beq.w	8006376 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x352>
      if (jA != 0) {
 8006170:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80cb 	beq.w	8006310 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x2ec>
        ipiv[b_j] = static_cast<int8_T>((b_j + jA) + 1);
 800617a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800617e:	b2da      	uxtb	r2, r3
 8006180:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	4413      	add	r3, r2
 8006188:	b2db      	uxtb	r3, r3
 800618a:	3301      	adds	r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	b259      	sxtb	r1, r3
 8006190:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8006194:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006198:	4413      	add	r3, r2
 800619a:	460a      	mov	r2, r1
 800619c:	701a      	strb	r2, [r3, #0]
        ix = b_j;
 800619e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80061a2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy = b_j + jA;
 80061a6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80061aa:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80061ae:	4413      	add	r3, r2
 80061b0:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 80061b4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80061b8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061c4:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 80061c8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80061cc:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061d8:	f507 7116 	add.w	r1, r7, #600	; 0x258
 80061dc:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80061e0:	00d2      	lsls	r2, r2, #3
 80061e2:	440a      	add	r2, r1
 80061e4:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80061e8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80061ec:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	441a      	add	r2, r3
 80061f4:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80061f8:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 80061fc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006200:	3304      	adds	r3, #4
 8006202:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006206:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800620a:	3304      	adds	r3, #4
 800620c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 8006210:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006214:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006220:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006224:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006228:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4413      	add	r3, r2
 8006230:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006234:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006238:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800623c:	00d2      	lsls	r2, r2, #3
 800623e:	440a      	add	r2, r1
 8006240:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 8006244:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006248:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	441a      	add	r2, r3
 8006250:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006254:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 8006258:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800625c:	3304      	adds	r3, #4
 800625e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006262:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006266:	3304      	adds	r3, #4
 8006268:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 800626c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006270:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	4413      	add	r3, r2
 8006278:	e9d3 3400 	ldrd	r3, r4, [r3]
 800627c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006280:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006284:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	4413      	add	r3, r2
 800628c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006290:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006294:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006298:	00d2      	lsls	r2, r2, #3
 800629a:	440a      	add	r2, r1
 800629c:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80062a0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80062a4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	441a      	add	r2, r3
 80062ac:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80062b0:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 80062b4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80062b8:	3304      	adds	r3, #4
 80062ba:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 80062be:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80062c2:	3304      	adds	r3, #4
 80062c4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 80062c8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80062cc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062d8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 80062dc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80062e0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4413      	add	r3, r2
 80062e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062ec:	f507 7116 	add.w	r1, r7, #600	; 0x258
 80062f0:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80062f4:	00d2      	lsls	r2, r2, #3
 80062f6:	440a      	add	r2, r1
 80062f8:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80062fc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006300:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	441a      	add	r2, r3
 8006308:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800630c:	e9c2 3400 	strd	r3, r4, [r2]
      }

      jA = (c - b_j) + 4;
 8006310:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006314:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	3304      	adds	r3, #4
 800631c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (ix = c + 1; ix < jA; ix++) {
 8006320:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006324:	3301      	adds	r3, #1
 8006326:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800632a:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800632e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006332:	429a      	cmp	r2, r3
 8006334:	da1f      	bge.n	8006376 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x352>
        A[ix] /= A[c];
 8006336:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800633a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	4413      	add	r3, r2
 8006342:	ed93 5b00 	vldr	d5, [r3]
 8006346:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800634a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4413      	add	r3, r2
 8006352:	ed93 6b00 	vldr	d6, [r3]
 8006356:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800635a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800635e:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	4413      	add	r3, r2
 8006366:	ed83 7b00 	vstr	d7, [r3]
      for (ix = c + 1; ix < jA; ix++) {
 800636a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800636e:	3301      	adds	r3, #1
 8006370:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8006374:	e7d9      	b.n	800632a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x306>
      }
    }

    jA = c;
 8006376:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800637a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c + 4;
 800637e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006382:	3304      	adds	r3, #4
 8006384:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800638e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006392:	f1c3 0302 	rsb	r3, r3, #2
 8006396:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800639a:	429a      	cmp	r2, r3
 800639c:	dc69      	bgt.n	8006472 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x44e>
      if (A[ix] != 0.0) {
 800639e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80063a2:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	ed93 7b00 	vldr	d7, [r3]
 80063ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b6:	d04c      	beq.n	8006452 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x42e>
        smax = -A[ix];
 80063b8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80063bc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4413      	add	r3, r2
 80063c4:	ed93 7b00 	vldr	d7, [r3]
 80063c8:	eeb1 7b47 	vneg.f64	d7, d7
 80063cc:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
        c_ix = c + 1;
 80063d0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80063d4:	3301      	adds	r3, #1
 80063d6:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        d = (jA - b_j) + 8;
 80063da:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80063de:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	3308      	adds	r3, #8
 80063e6:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
        for (ijA = jA + 5; ijA < d; ijA++) {
 80063ea:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80063ee:	3305      	adds	r3, #5
 80063f0:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80063f4:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 80063f8:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80063fc:	429a      	cmp	r2, r3
 80063fe:	da28      	bge.n	8006452 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x42e>
          A[ijA] += A[c_ix] * smax;
 8006400:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006404:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	4413      	add	r3, r2
 800640c:	ed93 6b00 	vldr	d6, [r3]
 8006410:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006414:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	ed93 5b00 	vldr	d5, [r3]
 8006420:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006424:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006428:	ee36 7b07 	vadd.f64	d7, d6, d7
 800642c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006430:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	ed83 7b00 	vstr	d7, [r3]
          c_ix++;
 800643c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006440:	3301      	adds	r3, #1
 8006442:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        for (ijA = jA + 5; ijA < d; ijA++) {
 8006446:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800644a:	3301      	adds	r3, #1
 800644c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8006450:	e7d0      	b.n	80063f4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x3d0>
        }
      }

      ix += 4;
 8006452:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006456:	3304      	adds	r3, #4
 8006458:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      jA += 4;
 800645c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006460:	3304      	adds	r3, #4
 8006462:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8006466:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800646a:	3301      	adds	r3, #1
 800646c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006470:	e78d      	b.n	800638e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x36a>
  for (b_j = 0; b_j < 3; b_j++) {
 8006472:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006476:	3301      	adds	r3, #1
 8006478:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800647c:	e610      	b.n	80060a0 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7c>
    }
  }

  for (b_j = 0; b_j < 24; b_j++) {
 800647e:	2300      	movs	r3, #0
 8006480:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006484:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006488:	2b17      	cmp	r3, #23
 800648a:	dc16      	bgt.n	80064ba <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x496>
    X_0[b_j] = Pxy[b_j];
 800648c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8006496:	4413      	add	r3, r2
 8006498:	e9d3 3400 	ldrd	r3, r4, [r3]
 800649c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80064a0:	00d2      	lsls	r2, r2, #3
 80064a2:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80064a6:	440a      	add	r2, r1
 80064a8:	3af8      	subs	r2, #248	; 0xf8
 80064aa:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 24; b_j++) {
 80064ae:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80064b2:	3301      	adds	r3, #1
 80064b4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80064b8:	e7e4      	b.n	8006484 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x460>
  }

  for (b_j = 0; b_j < 4; b_j++) {
 80064ba:	2300      	movs	r3, #0
 80064bc:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80064c0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	f300 80b4 	bgt.w	8006632 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x60e>
    jA = 6 * b_j;
 80064ca:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80064ce:	4613      	mov	r3, r2
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	4413      	add	r3, r2
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = b_j << 2;
 80064da:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy < b_j; iy++) {
 80064e4:	2300      	movs	r3, #0
 80064e6:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80064ea:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80064ee:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80064f2:	429a      	cmp	r2, r3
 80064f4:	da5d      	bge.n	80065b2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x58e>
      c_ix = 6 * iy;
 80064f6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 8006506:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800650a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800650e:	4413      	add	r3, r2
 8006510:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	ed93 7b00 	vldr	d7, [r3]
 800651c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006524:	d03f      	beq.n	80065a6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x582>
        for (c = 0; c < 6; c++) {
 8006526:	2300      	movs	r3, #0
 8006528:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800652c:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006530:	2b05      	cmp	r3, #5
 8006532:	dc38      	bgt.n	80065a6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x582>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 8006534:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006538:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800653c:	4413      	add	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006544:	4413      	add	r3, r2
 8006546:	3bf8      	subs	r3, #248	; 0xf8
 8006548:	ed93 6b00 	vldr	d6, [r3]
 800654c:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006550:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006554:	4413      	add	r3, r2
 8006556:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	ed93 5b00 	vldr	d5, [r3]
 8006562:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006566:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800656a:	4413      	add	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006572:	4413      	add	r3, r2
 8006574:	3bf8      	subs	r3, #248	; 0xf8
 8006576:	ed93 7b00 	vldr	d7, [r3]
 800657a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800657e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006582:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006586:	4413      	add	r3, r2
 8006588:	ee36 7b47 	vsub.f64	d7, d6, d7
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006592:	4413      	add	r3, r2
 8006594:	3bf8      	subs	r3, #248	; 0xf8
 8006596:	ed83 7b00 	vstr	d7, [r3]
        for (c = 0; c < 6; c++) {
 800659a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800659e:	3301      	adds	r3, #1
 80065a0:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80065a4:	e7c2      	b.n	800652c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x508>
    for (iy = 0; iy < b_j; iy++) {
 80065a6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80065aa:	3301      	adds	r3, #1
 80065ac:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80065b0:	e79b      	b.n	80064ea <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x4c6>
        }
      }
    }

    smax = 1.0 / A[b_j + ix];
 80065b2:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80065b6:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80065ba:	4413      	add	r3, r2
 80065bc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	ed93 6b00 	vldr	d6, [r3]
 80065c8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80065cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80065d0:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    for (c = 0; c < 6; c++) {
 80065d4:	2300      	movs	r3, #0
 80065d6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80065da:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80065de:	2b05      	cmp	r3, #5
 80065e0:	dc21      	bgt.n	8006626 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x602>
      X_0[c + jA] *= smax;
 80065e2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80065e6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80065ea:	4413      	add	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80065f2:	4413      	add	r3, r2
 80065f4:	3bf8      	subs	r3, #248	; 0xf8
 80065f6:	ed93 6b00 	vldr	d6, [r3]
 80065fa:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80065fe:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006602:	4413      	add	r3, r2
 8006604:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006608:	ee26 7b07 	vmul.f64	d7, d6, d7
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006612:	4413      	add	r3, r2
 8006614:	3bf8      	subs	r3, #248	; 0xf8
 8006616:	ed83 7b00 	vstr	d7, [r3]
    for (c = 0; c < 6; c++) {
 800661a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800661e:	3301      	adds	r3, #1
 8006620:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006624:	e7d9      	b.n	80065da <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x5b6>
  for (b_j = 0; b_j < 4; b_j++) {
 8006626:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800662a:	3301      	adds	r3, #1
 800662c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006630:	e746      	b.n	80064c0 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x49c>
    }
  }

  for (b_j = 3; b_j >= 0; b_j--) {
 8006632:	2303      	movs	r3, #3
 8006634:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006638:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800663c:	2b00      	cmp	r3, #0
 800663e:	db7b      	blt.n	8006738 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x714>
    jA = 6 * b_j;
 8006640:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006644:	4613      	mov	r3, r2
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	4413      	add	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = (b_j << 2) - 1;
 8006650:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	3b01      	subs	r3, #1
 8006658:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = b_j + 2; iy < 5; iy++) {
 800665c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006660:	3302      	adds	r3, #2
 8006662:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006666:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800666a:	2b04      	cmp	r3, #4
 800666c:	dc5e      	bgt.n	800672c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x708>
      c_ix = (iy - 1) * 6;
 800666e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006672:	1e5a      	subs	r2, r3, #1
 8006674:	4613      	mov	r3, r2
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	4413      	add	r3, r2
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 8006680:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006684:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006688:	4413      	add	r3, r2
 800668a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	ed93 7b00 	vldr	d7, [r3]
 8006696:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669e:	d03f      	beq.n	8006720 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6fc>
        for (c = 0; c < 6; c++) {
 80066a0:	2300      	movs	r3, #0
 80066a2:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80066a6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	dc38      	bgt.n	8006720 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6fc>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 80066ae:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80066b2:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80066b6:	4413      	add	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80066be:	4413      	add	r3, r2
 80066c0:	3bf8      	subs	r3, #248	; 0xf8
 80066c2:	ed93 6b00 	vldr	d6, [r3]
 80066c6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80066ca:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80066ce:	4413      	add	r3, r2
 80066d0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	4413      	add	r3, r2
 80066d8:	ed93 5b00 	vldr	d5, [r3]
 80066dc:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80066e0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80066e4:	4413      	add	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80066ec:	4413      	add	r3, r2
 80066ee:	3bf8      	subs	r3, #248	; 0xf8
 80066f0:	ed93 7b00 	vldr	d7, [r3]
 80066f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80066f8:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80066fc:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006700:	4413      	add	r3, r2
 8006702:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 800670c:	4413      	add	r3, r2
 800670e:	3bf8      	subs	r3, #248	; 0xf8
 8006710:	ed83 7b00 	vstr	d7, [r3]
        for (c = 0; c < 6; c++) {
 8006714:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006718:	3301      	adds	r3, #1
 800671a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800671e:	e7c2      	b.n	80066a6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x682>
    for (iy = b_j + 2; iy < 5; iy++) {
 8006720:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006724:	3301      	adds	r3, #1
 8006726:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800672a:	e79c      	b.n	8006666 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x642>
  for (b_j = 3; b_j >= 0; b_j--) {
 800672c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006730:	3b01      	subs	r3, #1
 8006732:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006736:	e77f      	b.n	8006638 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x614>
        }
      }
    }
  }

  for (b_j = 2; b_j >= 0; b_j--) {
 8006738:	2302      	movs	r3, #2
 800673a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800673e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006742:	2b00      	cmp	r3, #0
 8006744:	db6f      	blt.n	8006826 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x802>
    ipiv_0 = ipiv[b_j];
 8006746:	f507 7215 	add.w	r2, r7, #596	; 0x254
 800674a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800674e:	4413      	add	r3, r2
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
    if (b_j + 1 != ipiv_0) {
 8006756:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 8006760:	429a      	cmp	r2, r3
 8006762:	d05a      	beq.n	800681a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7f6>
      jA = ipiv_0 - 1;
 8006764:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 8006768:	3b01      	subs	r3, #1
 800676a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (c = 0; c < 6; c++) {
 800676e:	2300      	movs	r3, #0
 8006770:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006774:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006778:	2b05      	cmp	r3, #5
 800677a:	dc4e      	bgt.n	800681a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7f6>
        smax = X_0[6 * b_j + c];
 800677c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006780:	4613      	mov	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4413      	add	r3, r2
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006796:	4413      	add	r3, r2
 8006798:	3bf8      	subs	r3, #248	; 0xf8
 800679a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800679e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        X_0[c + 6 * b_j] = X_0[6 * jA + c];
 80067a2:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80067a6:	4613      	mov	r3, r2
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4413      	add	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80067b4:	18d1      	adds	r1, r2, r3
 80067b6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	461a      	mov	r2, r3
 80067c4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80067c8:	441a      	add	r2, r3
 80067ca:	00cb      	lsls	r3, r1, #3
 80067cc:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80067d0:	440b      	add	r3, r1
 80067d2:	3bf8      	subs	r3, #248	; 0xf8
 80067d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067d8:	00d2      	lsls	r2, r2, #3
 80067da:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80067de:	440a      	add	r2, r1
 80067e0:	3af8      	subs	r2, #248	; 0xf8
 80067e2:	e9c2 3400 	strd	r3, r4, [r2]
        X_0[c + 6 * jA] = smax;
 80067e6:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80067ea:	4613      	mov	r3, r2
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	4413      	add	r3, r2
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	461a      	mov	r2, r3
 80067f4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80067f8:	4413      	add	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006800:	4413      	add	r3, r2
 8006802:	f1a3 02f8 	sub.w	r2, r3, #248	; 0xf8
 8006806:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800680a:	e9c2 3400 	strd	r3, r4, [r2]
      for (c = 0; c < 6; c++) {
 800680e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006812:	3301      	adds	r3, #1
 8006814:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006818:	e7ac      	b.n	8006774 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x750>
  for (b_j = 2; b_j >= 0; b_j--) {
 800681a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800681e:	3b01      	subs	r3, #1
 8006820:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006824:	e78b      	b.n	800673e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x71a>
      }
    }
  }

  for (b_j = 0; b_j < 6; b_j++) {
 8006826:	2300      	movs	r3, #0
 8006828:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800682c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006830:	2b05      	cmp	r3, #5
 8006832:	f300 81fe 	bgt.w	8006c32 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc0e>
    smax = X_0[b_j] * y[0];
 8006836:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006840:	4413      	add	r3, r2
 8006842:	3bf8      	subs	r3, #248	; 0xf8
 8006844:	ed93 6b00 	vldr	d6, [r3]
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	ed93 7b00 	vldr	d7, [r3]
 8006850:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006854:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 6] * y[1];
 8006858:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800685c:	3306      	adds	r3, #6
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006864:	4413      	add	r3, r2
 8006866:	3bf8      	subs	r3, #248	; 0xf8
 8006868:	ed93 6b00 	vldr	d6, [r3]
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3308      	adds	r3, #8
 8006872:	ed93 7b00 	vldr	d7, [r3]
 8006876:	ee26 7b07 	vmul.f64	d7, d6, d7
 800687a:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 800687e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006882:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 12] * y[2];
 8006886:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800688a:	330c      	adds	r3, #12
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006892:	4413      	add	r3, r2
 8006894:	3bf8      	subs	r3, #248	; 0xf8
 8006896:	ed93 6b00 	vldr	d6, [r3]
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3310      	adds	r3, #16
 80068a0:	ed93 7b00 	vldr	d7, [r3]
 80068a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80068a8:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 80068ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80068b0:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 18] * y[3];
 80068b4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80068b8:	3312      	adds	r3, #18
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80068c0:	4413      	add	r3, r2
 80068c2:	3bf8      	subs	r3, #248	; 0xf8
 80068c4:	ed93 6b00 	vldr	d6, [r3]
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3318      	adds	r3, #24
 80068ce:	ed93 7b00 	vldr	d7, [r3]
 80068d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80068d6:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 80068da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80068de:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    x[b_j] += smax;
 80068e2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	f107 0208 	add.w	r2, r7, #8
 80068ec:	6812      	ldr	r2, [r2, #0]
 80068ee:	4413      	add	r3, r2
 80068f0:	ed93 6b00 	vldr	d6, [r3]
 80068f4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	4413      	add	r3, r2
 8006902:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006906:	ee36 7b07 	vadd.f64	d7, d6, d7
 800690a:	ed83 7b00 	vstr	d7, [r3]
    for (c = 0; c < 6; c++) {
 800690e:	2300      	movs	r3, #0
 8006910:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006914:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006918:	2b05      	cmp	r3, #5
 800691a:	f300 8118 	bgt.w	8006b4e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xb2a>
      X_1[b_j + 6 * c] = 0.0;
 800691e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006922:	4613      	mov	r3, r2
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	4413      	add	r3, r2
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	461a      	mov	r2, r3
 800692c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006930:	4413      	add	r3, r2
 8006932:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	441a      	add	r2, r3
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	f04f 0400 	mov.w	r4, #0
 8006942:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006946:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800694a:	4613      	mov	r3, r2
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4413      	add	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	461a      	mov	r2, r3
 8006954:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006958:	4413      	add	r3, r2
 800695a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	4413      	add	r3, r2
 8006962:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006966:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[c << 2] * X_0[b_j];
 800696a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006976:	4413      	add	r3, r2
 8006978:	ed93 6b00 	vldr	d6, [r3]
 800697c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006986:	4413      	add	r3, r2
 8006988:	3bf8      	subs	r3, #248	; 0xf8
 800698a:	ed93 7b00 	vldr	d7, [r3]
 800698e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006992:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006996:	ee36 7b07 	vadd.f64	d7, d6, d7
 800699a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 800699e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80069a2:	4613      	mov	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	4413      	add	r3, r2
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	461a      	mov	r2, r3
 80069ac:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069b0:	4413      	add	r3, r2
 80069b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	441a      	add	r2, r3
 80069ba:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80069be:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 80069c2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80069c6:	4613      	mov	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	461a      	mov	r2, r3
 80069d0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069d4:	4413      	add	r3, r2
 80069d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	4413      	add	r3, r2
 80069de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069e2:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 1] * X_0[b_j + 6];
 80069e6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	3301      	adds	r3, #1
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80069f4:	4413      	add	r3, r2
 80069f6:	ed93 6b00 	vldr	d6, [r3]
 80069fa:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069fe:	3306      	adds	r3, #6
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006a06:	4413      	add	r3, r2
 8006a08:	3bf8      	subs	r3, #248	; 0xf8
 8006a0a:	ed93 7b00 	vldr	d7, [r3]
 8006a0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006a12:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006a16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a1a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006a1e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006a22:	4613      	mov	r3, r2
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	4413      	add	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006a30:	4413      	add	r3, r2
 8006a32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	441a      	add	r2, r3
 8006a3a:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006a3e:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006a42:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006a46:	4613      	mov	r3, r2
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	4413      	add	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006a54:	4413      	add	r3, r2
 8006a56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a62:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 2] * X_0[b_j + 12];
 8006a66:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006a74:	4413      	add	r3, r2
 8006a76:	ed93 6b00 	vldr	d6, [r3]
 8006a7a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006a7e:	330c      	adds	r3, #12
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006a86:	4413      	add	r3, r2
 8006a88:	3bf8      	subs	r3, #248	; 0xf8
 8006a8a:	ed93 7b00 	vldr	d7, [r3]
 8006a8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006a92:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006a96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a9a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006a9e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	441a      	add	r2, r3
 8006aba:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006abe:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006ac2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	4413      	add	r3, r2
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	4413      	add	r3, r2
 8006ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ae2:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 3] * X_0[b_j + 18];
 8006ae6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	3303      	adds	r3, #3
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006af4:	4413      	add	r3, r2
 8006af6:	ed93 6b00 	vldr	d6, [r3]
 8006afa:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006afe:	3312      	adds	r3, #18
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006b06:	4413      	add	r3, r2
 8006b08:	3bf8      	subs	r3, #248	; 0xf8
 8006b0a:	ed93 7b00 	vldr	d7, [r3]
 8006b0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006b12:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006b16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b1a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006b1e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b30:	4413      	add	r3, r2
 8006b32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	441a      	add	r2, r3
 8006b3a:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006b3e:	e9c2 3400 	strd	r3, r4, [r2]
    for (c = 0; c < 6; c++) {
 8006b42:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006b46:	3301      	adds	r3, #1
 8006b48:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006b4c:	e6e2      	b.n	8006914 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x8f0>
    }

    for (c = 0; c < 6; c++) {
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006b54:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	dc64      	bgt.n	8006c26 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc02>
      smax = 0.0;
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	f04f 0400 	mov.w	r4, #0
 8006b64:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8006b6e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	dc2d      	bgt.n	8006bd2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xbae>
        smax += X_1[6 * jA + b_j] * P_0[6 * c + jA];
 8006b76:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	461a      	mov	r2, r3
 8006b84:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b88:	4413      	add	r3, r2
 8006b8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	4413      	add	r3, r2
 8006b92:	ed93 6b00 	vldr	d6, [r3]
 8006b96:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006ba8:	4413      	add	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	1d3a      	adds	r2, r7, #4
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	ed93 7b00 	vldr	d7, [r3]
 8006bb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006bba:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006bbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006bc2:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 8006bc6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006bca:	3301      	adds	r3, #1
 8006bcc:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8006bd0:	e7cd      	b.n	8006b6e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xb4a>
      }

      P_1[b_j + 6 * c] = P_0[6 * c + b_j] - smax;
 8006bd2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4413      	add	r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	461a      	mov	r2, r3
 8006be0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006be4:	4413      	add	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	1d3a      	adds	r2, r7, #4
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	4413      	add	r3, r2
 8006bee:	ed93 6b00 	vldr	d6, [r3]
 8006bf2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c04:	4413      	add	r3, r2
 8006c06:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006c0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c0e:	f107 0210 	add.w	r2, r7, #16
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4413      	add	r3, r2
 8006c16:	ed83 7b00 	vstr	d7, [r3]
    for (c = 0; c < 6; c++) {
 8006c1a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006c24:	e796      	b.n	8006b54 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xb30>
  for (b_j = 0; b_j < 6; b_j++) {
 8006c26:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c30:	e5fc      	b.n	800682c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x808>
    }
  }

  for (b_j = 0; b_j < 36; b_j++) {
 8006c32:	2300      	movs	r3, #0
 8006c34:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c38:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c3c:	2b23      	cmp	r3, #35	; 0x23
 8006c3e:	dc15      	bgt.n	8006c6c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc48>
    P_0[b_j] = P_1[b_j];
 8006c40:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	1d3a      	adds	r2, r7, #4
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	441a      	add	r2, r3
 8006c4c:	f107 0110 	add.w	r1, r7, #16
 8006c50:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	440b      	add	r3, r1
 8006c58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c5c:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 36; b_j++) {
 8006c60:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c64:	3301      	adds	r3, #1
 8006c66:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c6a:	e7e5      	b.n	8006c38 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc14>
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	f507 7775 	add.w	r7, r7, #980	; 0x3d4
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}
	...

08006c78 <_ZN27positionEstimatorModelClass4stepEv>:

// Model step function
void positionEstimatorModelClass::step()
{
 8006c78:	b590      	push	{r4, r7, lr}
 8006c7a:	ed2d 8b02 	vpush	{d8}
 8006c7e:	f6ad 0de4 	subw	sp, sp, #2276	; 0x8e4
 8006c82:	af04      	add	r7, sp, #16
 8006c84:	1d3b      	adds	r3, r7, #4
 8006c86:	6018      	str	r0, [r3, #0]
    0.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  // Abs: '<S34>/Abs' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Abs = std::abs(rtU.HOME_lla[0]);
 8006c88:	1d3b      	adds	r3, r7, #4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8006c90:	ed93 7b00 	vldr	d7, [r3]
 8006c94:	eeb0 0b47 	vmov.f64	d0, d7
 8006c98:	f7fe fe8f 	bl	80059ba <_ZSt3absd>
 8006c9c:	eeb0 7b40 	vmov.f64	d7, d0
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 8006ca8:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S35>/Compare' incorporates:
  //   Constant: '<S35>/Constant'

  rtDW.Compare = (rtDW.Abs > rtP.CompareToConstant_const);
 8006cac:	1d3b      	adds	r3, r7, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 8006cb4:	ed93 6b00 	vldr	d6, [r3]
 8006cb8:	4ba0      	ldr	r3, [pc, #640]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006cba:	ed93 7b00 	vldr	d7, [r3]
 8006cbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc6:	bfcc      	ite	gt
 8006cc8:	2301      	movgt	r3, #1
 8006cca:	2300      	movle	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	1d3b      	adds	r3, r7, #4
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38

  // Switch: '<S34>/Switch' incorporates:
  //   Inport: '<Root>/HOME_lla'

  if (rtDW.Compare) {
 8006cd8:	1d3b      	adds	r3, r7, #4
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f893 3c38 	ldrb.w	r3, [r3, #3128]	; 0xc38
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d045      	beq.n	8006d70 <_ZN27positionEstimatorModelClass4stepEv+0xf8>
    // Bias: '<S34>/Bias' incorporates:
    //   Inport: '<Root>/HOME_lla'

    rtDW.Bias_m = rtU.HOME_lla[0] + rtP.Bias_Bias_al;
 8006ce4:	1d3b      	adds	r3, r7, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8006cec:	ed93 6b00 	vldr	d6, [r3]
 8006cf0:	4b92      	ldr	r3, [pc, #584]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006cf2:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8006cf6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006cfa:	1d3b      	adds	r3, r7, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8006d02:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S34>/Math Function1' incorporates:
    //   Constant: '<S34>/Constant2'

    rtDW.MathFunction1_i = rt_modd_snf(rtDW.Bias_m, rtP.Constant2_Value_j);
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8006d0e:	ed93 7b00 	vldr	d7, [r3]
 8006d12:	4b8a      	ldr	r3, [pc, #552]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006d14:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 8006d18:	eeb0 1b46 	vmov.f64	d1, d6
 8006d1c:	eeb0 0b47 	vmov.f64	d0, d7
 8006d20:	f7fe ffc6 	bl	8005cb0 <_Z11rt_modd_snfdd>
 8006d24:	eeb0 7b40 	vmov.f64	d7, d0
 8006d28:	1d3b      	adds	r3, r7, #4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8006d30:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S34>/Bias1'
    rtDW.Bias1_k = rtDW.MathFunction1_i + rtP.Bias1_Bias_k;
 8006d34:	1d3b      	adds	r3, r7, #4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8006d3c:	ed93 6b00 	vldr	d6, [r3]
 8006d40:	4b7e      	ldr	r3, [pc, #504]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006d42:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8006d46:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d4a:	1d3b      	adds	r3, r7, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 8006d52:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch = rtDW.Bias1_k;
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 8006d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d62:	1d3a      	adds	r2, r7, #4
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8006d6a:	e9c2 3400 	strd	r3, r4, [r2]
 8006d6e:	e00b      	b.n	8006d88 <_ZN27positionEstimatorModelClass4stepEv+0x110>
  } else {
    rtDW.Switch = rtU.HOME_lla[0];
 8006d70:	1d3b      	adds	r3, r7, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8006d78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d7c:	1d3a      	adds	r2, r7, #4
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8006d84:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Switch: '<S34>/Switch'

  // Abs: '<S31>/Abs1'
  rtDW.Abs1 = std::abs(rtDW.Switch);
 8006d88:	1d3b      	adds	r3, r7, #4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8006d90:	ed93 7b00 	vldr	d7, [r3]
 8006d94:	eeb0 0b47 	vmov.f64	d0, d7
 8006d98:	f7fe fe0f 	bl	80059ba <_ZSt3absd>
 8006d9c:	eeb0 7b40 	vmov.f64	d7, d0
 8006da0:	1d3b      	adds	r3, r7, #4
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8006da8:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S33>/Compare' incorporates:
  //   Constant: '<S33>/Constant'

  rtDW.Compare_c = (rtDW.Abs1 > rtP.CompareToConstant_const_d);
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8006db4:	ed93 6b00 	vldr	d6, [r3]
 8006db8:	4b60      	ldr	r3, [pc, #384]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006dba:	ed93 7b02 	vldr	d7, [r3, #8]
 8006dbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc6:	bfcc      	ite	gt
 8006dc8:	2301      	movgt	r3, #1
 8006dca:	2300      	movle	r3, #0
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	1d3b      	adds	r3, r7, #4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f883 2c39 	strb.w	r2, [r3, #3129]	; 0xc39
  // Switch: '<S31>/Switch' incorporates:
  //   Constant: '<S22>/Constant'
  //   Constant: '<S22>/Constant1'
  //   Switch: '<S22>/Switch1'

  if (rtDW.Compare_c) {
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f893 3c39 	ldrb.w	r3, [r3, #3129]	; 0xc39
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80b3 	beq.w	8006f4c <_ZN27positionEstimatorModelClass4stepEv+0x2d4>
    // Bias: '<S31>/Bias'
    rtDW.Bias_d = rtDW.Abs1 + rtP.Bias_Bias_e;
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8006dee:	ed93 6b00 	vldr	d6, [r3]
 8006df2:	4b52      	ldr	r3, [pc, #328]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006df4:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8006df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006dfc:	1d3b      	adds	r3, r7, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8006e04:	ed83 7b00 	vstr	d7, [r3]

    // Gain: '<S31>/Gain'
    rtDW.Gain = rtP.Gain_Gain_n * rtDW.Bias_d;
 8006e08:	4b4c      	ldr	r3, [pc, #304]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006e0a:	ed93 6b28 	vldr	d6, [r3, #160]	; 0xa0
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8006e16:	ed93 7b00 	vldr	d7, [r3]
 8006e1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8006e26:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S31>/Bias1'
    rtDW.Bias1_o = rtDW.Gain + rtP.Bias1_Bias_c;
 8006e2a:	1d3b      	adds	r3, r7, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8006e32:	ed93 6b00 	vldr	d6, [r3]
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006e38:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8006e3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e40:	1d3b      	adds	r3, r7, #4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8006e48:	ed83 7b00 	vstr	d7, [r3]

    // Signum: '<S31>/Sign1'
    u = rtDW.Switch;
 8006e4c:	1d3b      	adds	r3, r7, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8006e54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e58:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8006e5c:	e9c2 3400 	strd	r3, r4, [r2]
    if (u < 0.0) {
 8006e60:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006e64:	ed93 7b00 	vldr	d7, [r3]
 8006e68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e70:	d509      	bpl.n	8006e86 <_ZN27positionEstimatorModelClass4stepEv+0x20e>
      rtDW.Sign1 = -1.0;
 8006e72:	1d3b      	adds	r3, r7, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f503 623d 	add.w	r2, r3, #3024	; 0xbd0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	4c30      	ldr	r4, [pc, #192]	; (8006f40 <_ZN27positionEstimatorModelClass4stepEv+0x2c8>)
 8006e80:	e9c2 3400 	strd	r3, r4, [r2]
 8006e84:	e02f      	b.n	8006ee6 <_ZN27positionEstimatorModelClass4stepEv+0x26e>
    } else if (u > 0.0) {
 8006e86:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006e8a:	ed93 7b00 	vldr	d7, [r3]
 8006e8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e96:	dd09      	ble.n	8006eac <_ZN27positionEstimatorModelClass4stepEv+0x234>
      rtDW.Sign1 = 1.0;
 8006e98:	1d3b      	adds	r3, r7, #4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f503 623d 	add.w	r2, r3, #3024	; 0xbd0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	4c27      	ldr	r4, [pc, #156]	; (8006f44 <_ZN27positionEstimatorModelClass4stepEv+0x2cc>)
 8006ea6:	e9c2 3400 	strd	r3, r4, [r2]
 8006eaa:	e01c      	b.n	8006ee6 <_ZN27positionEstimatorModelClass4stepEv+0x26e>
    } else if (u == 0.0) {
 8006eac:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006eb0:	ed93 7b00 	vldr	d7, [r3]
 8006eb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebc:	d10a      	bne.n	8006ed4 <_ZN27positionEstimatorModelClass4stepEv+0x25c>
      rtDW.Sign1 = 0.0;
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f503 623d 	add.w	r2, r3, #3024	; 0xbd0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	f04f 0400 	mov.w	r4, #0
 8006ece:	e9c2 3400 	strd	r3, r4, [r2]
 8006ed2:	e008      	b.n	8006ee6 <_ZN27positionEstimatorModelClass4stepEv+0x26e>
    } else {
      rtDW.Sign1 = (rtNaN);
 8006ed4:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <_ZN27positionEstimatorModelClass4stepEv+0x2d0>)
 8006ed6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006eda:	1d3a      	adds	r2, r7, #4
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	f502 623d 	add.w	r2, r2, #3024	; 0xbd0
 8006ee2:	e9c2 3400 	strd	r3, r4, [r2]
    }

    // End of Signum: '<S31>/Sign1'

    // Product: '<S31>/Divide1'
    rtDW.Divide1 = rtDW.Sign1 * rtDW.Bias1_o;
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8006eee:	ed93 6b00 	vldr	d6, [r3]
 8006ef2:	1d3b      	adds	r3, r7, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8006efa:	ed93 7b00 	vldr	d7, [r3]
 8006efe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8006f0a:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_b = rtDW.Divide1;
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8006f16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f1a:	1d3a      	adds	r2, r7, #4
 8006f1c:	6812      	ldr	r2, [r2, #0]
 8006f1e:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8006f22:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1 = rtP.Constant_Value_m;
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006f28:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8006f2c:	1d3a      	adds	r2, r7, #4
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8006f34:	e9c2 3400 	strd	r3, r4, [r2]
 8006f38:	e01d      	b.n	8006f76 <_ZN27positionEstimatorModelClass4stepEv+0x2fe>
 8006f3a:	bf00      	nop
 8006f3c:	240002b0 	.word	0x240002b0
 8006f40:	bff00000 	.word	0xbff00000
 8006f44:	3ff00000 	.word	0x3ff00000
 8006f48:	24000960 	.word	0x24000960
  } else {
    rtDW.Switch_b = rtDW.Switch;
 8006f4c:	1d3b      	adds	r3, r7, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8006f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f58:	1d3a      	adds	r2, r7, #4
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8006f60:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1 = rtP.Constant1_Value_f;
 8006f64:	4b98      	ldr	r3, [pc, #608]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8006f66:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8006f6a:	1d3a      	adds	r2, r7, #4
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8006f72:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Switch: '<S31>/Switch'

  // Sum: '<S22>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Sum = rtDW.Switch1 + rtU.HOME_lla[1];
 8006f76:	1d3b      	adds	r3, r7, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8006f7e:	ed93 6b00 	vldr	d6, [r3]
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006f8a:	ed93 7b00 	vldr	d7, [r3]
 8006f8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f92:	1d3b      	adds	r3, r7, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006f9a:	ed83 7b00 	vstr	d7, [r3]

  // Abs: '<S32>/Abs'
  rtDW.Abs_i = std::abs(rtDW.Sum);
 8006f9e:	1d3b      	adds	r3, r7, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006fa6:	ed93 7b00 	vldr	d7, [r3]
 8006faa:	eeb0 0b47 	vmov.f64	d0, d7
 8006fae:	f7fe fd04 	bl	80059ba <_ZSt3absd>
 8006fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8006fb6:	1d3b      	adds	r3, r7, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8006fbe:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S36>/Compare' incorporates:
  //   Constant: '<S36>/Constant'

  rtDW.Compare_d = (rtDW.Abs_i > rtP.CompareToConstant_const_j);
 8006fc2:	1d3b      	adds	r3, r7, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8006fca:	ed93 6b00 	vldr	d6, [r3]
 8006fce:	4b7e      	ldr	r3, [pc, #504]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8006fd0:	ed93 7b04 	vldr	d7, [r3, #16]
 8006fd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	bfcc      	ite	gt
 8006fde:	2301      	movgt	r3, #1
 8006fe0:	2300      	movle	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f883 2c3a 	strb.w	r2, [r3, #3130]	; 0xc3a

  // Switch: '<S32>/Switch'
  if (rtDW.Compare_d) {
 8006fee:	1d3b      	adds	r3, r7, #4
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f893 3c3a 	ldrb.w	r3, [r3, #3130]	; 0xc3a
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d045      	beq.n	8007086 <_ZN27positionEstimatorModelClass4stepEv+0x40e>
    // Bias: '<S32>/Bias'
    rtDW.Bias = rtDW.Sum + rtP.Bias_Bias_d;
 8006ffa:	1d3b      	adds	r3, r7, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007002:	ed93 6b00 	vldr	d6, [r3]
 8007006:	4b70      	ldr	r3, [pc, #448]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007008:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 800700c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007010:	1d3b      	adds	r3, r7, #4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8007018:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S32>/Math Function1' incorporates:
    //   Constant: '<S32>/Constant2'

    rtDW.MathFunction1 = rt_modd_snf(rtDW.Bias, rtP.Constant2_Value_k);
 800701c:	1d3b      	adds	r3, r7, #4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8007024:	ed93 7b00 	vldr	d7, [r3]
 8007028:	4b67      	ldr	r3, [pc, #412]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 800702a:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 800702e:	eeb0 1b46 	vmov.f64	d1, d6
 8007032:	eeb0 0b47 	vmov.f64	d0, d7
 8007036:	f7fe fe3b 	bl	8005cb0 <_Z11rt_modd_snfdd>
 800703a:	eeb0 7b40 	vmov.f64	d7, d0
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007046:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S32>/Bias1'
    rtDW.Bias1 = rtDW.MathFunction1 + rtP.Bias1_Bias_cz;
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007052:	ed93 6b00 	vldr	d6, [r3]
 8007056:	4b5c      	ldr	r3, [pc, #368]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007058:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 800705c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007060:	1d3b      	adds	r3, r7, #4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8007068:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_h = rtDW.Bias1;
 800706c:	1d3b      	adds	r3, r7, #4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8007074:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007078:	1d3a      	adds	r2, r7, #4
 800707a:	6812      	ldr	r2, [r2, #0]
 800707c:	f602 2248 	addw	r2, r2, #2632	; 0xa48
 8007080:	e9c2 3400 	strd	r3, r4, [r2]
 8007084:	e00b      	b.n	800709e <_ZN27positionEstimatorModelClass4stepEv+0x426>
  } else {
    rtDW.Switch_h = rtDW.Sum;
 8007086:	1d3b      	adds	r3, r7, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800708e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007092:	1d3a      	adds	r2, r7, #4
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	f602 2248 	addw	r2, r2, #2632	; 0xa48
 800709a:	e9c2 3400 	strd	r3, r4, [r2]

  // Sum: '<S20>/Sum1' incorporates:
  //   Inport: '<Root>/lat'
  //   Inport: '<Root>/lon'

  rtDW.Sum1[0] = rtU.lat - rtDW.Switch_b;
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 80070a6:	ed93 6b00 	vldr	d6, [r3]
 80070aa:	1d3b      	adds	r3, r7, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80070b2:	ed93 7b00 	vldr	d7, [r3]
 80070b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80070ba:	1d3b      	adds	r3, r7, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	ed83 7b00 	vstr	d7, [r3]
  rtDW.Sum1[1] = rtU.lon - rtDW.Switch_h;
 80070c2:	1d3b      	adds	r3, r7, #4
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80070ca:	ed93 6b00 	vldr	d6, [r3]
 80070ce:	1d3b      	adds	r3, r7, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f603 2348 	addw	r3, r3, #2632	; 0xa48
 80070d6:	ed93 7b00 	vldr	d7, [r3]
 80070da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80070de:	1d3b      	adds	r3, r7, #4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	ed83 7b02 	vstr	d7, [r3, #8]

  // Abs: '<S28>/Abs'
  rtDW.Abs_b = std::abs(rtDW.Sum1[0]);
 80070e6:	1d3b      	adds	r3, r7, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	ed93 7b00 	vldr	d7, [r3]
 80070ee:	eeb0 0b47 	vmov.f64	d0, d7
 80070f2:	f7fe fc62 	bl	80059ba <_ZSt3absd>
 80070f6:	eeb0 7b40 	vmov.f64	d7, d0
 80070fa:	1d3b      	adds	r3, r7, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 8007102:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S29>/Compare' incorporates:
  //   Constant: '<S29>/Constant'

  rtDW.Compare_ds = (rtDW.Abs_b > rtP.CompareToConstant_const_n);
 8007106:	1d3b      	adds	r3, r7, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 800710e:	ed93 6b00 	vldr	d6, [r3]
 8007112:	4b2d      	ldr	r3, [pc, #180]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007114:	ed93 7b06 	vldr	d7, [r3, #24]
 8007118:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007120:	bfcc      	ite	gt
 8007122:	2301      	movgt	r3, #1
 8007124:	2300      	movle	r3, #0
 8007126:	b2db      	uxtb	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f883 2c3b 	strb.w	r2, [r3, #3131]	; 0xc3b

  // Switch: '<S28>/Switch'
  if (rtDW.Compare_ds) {
 8007132:	1d3b      	adds	r3, r7, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f893 3c3b 	ldrb.w	r3, [r3, #3131]	; 0xc3b
 800713a:	2b00      	cmp	r3, #0
 800713c:	d046      	beq.n	80071cc <_ZN27positionEstimatorModelClass4stepEv+0x554>
    // Bias: '<S28>/Bias'
    rtDW.Bias_e = rtDW.Sum1[0] + rtP.Bias_Bias_b;
 800713e:	1d3b      	adds	r3, r7, #4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	ed93 6b00 	vldr	d6, [r3]
 8007146:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007148:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800714c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8007158:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S28>/Math Function1' incorporates:
    //   Constant: '<S28>/Constant2'

    rtDW.MathFunction1_o = rt_modd_snf(rtDW.Bias_e, rtP.Constant2_Value);
 800715c:	1d3b      	adds	r3, r7, #4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8007164:	ed93 7b00 	vldr	d7, [r3]
 8007168:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 800716a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800716e:	eeb0 1b46 	vmov.f64	d1, d6
 8007172:	eeb0 0b47 	vmov.f64	d0, d7
 8007176:	f7fe fd9b 	bl	8005cb0 <_Z11rt_modd_snfdd>
 800717a:	eeb0 7b40 	vmov.f64	d7, d0
 800717e:	1d3b      	adds	r3, r7, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007186:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S28>/Bias1'
    rtDW.Bias1_oh = rtDW.MathFunction1_o + rtP.Bias1_Bias_p;
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007192:	ed93 6b00 	vldr	d6, [r3]
 8007196:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007198:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800719c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071a0:	1d3b      	adds	r3, r7, #4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 80071a8:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_f = rtDW.Bias1_oh;
 80071ac:	1d3b      	adds	r3, r7, #4
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 80071b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071b8:	1d3a      	adds	r2, r7, #4
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	f602 2258 	addw	r2, r2, #2648	; 0xa58
 80071c0:	e9c2 3400 	strd	r3, r4, [r2]
 80071c4:	e00c      	b.n	80071e0 <_ZN27positionEstimatorModelClass4stepEv+0x568>
 80071c6:	bf00      	nop
 80071c8:	240002b0 	.word	0x240002b0
  } else {
    rtDW.Switch_f = rtDW.Sum1[0];
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071d4:	1d3a      	adds	r2, r7, #4
 80071d6:	6812      	ldr	r2, [r2, #0]
 80071d8:	f602 2258 	addw	r2, r2, #2648	; 0xa58
 80071dc:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Switch: '<S28>/Switch'

  // Abs: '<S25>/Abs1'
  rtDW.Abs1_j = std::abs(rtDW.Switch_f);
 80071e0:	1d3b      	adds	r3, r7, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80071e8:	ed93 7b00 	vldr	d7, [r3]
 80071ec:	eeb0 0b47 	vmov.f64	d0, d7
 80071f0:	f7fe fbe3 	bl	80059ba <_ZSt3absd>
 80071f4:	eeb0 7b40 	vmov.f64	d7, d0
 80071f8:	1d3b      	adds	r3, r7, #4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8007200:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S27>/Compare' incorporates:
  //   Constant: '<S27>/Constant'

  rtDW.Compare_m = (rtDW.Abs1_j > rtP.CompareToConstant_const_e);
 8007204:	1d3b      	adds	r3, r7, #4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 800720c:	ed93 6b00 	vldr	d6, [r3]
 8007210:	4bad      	ldr	r3, [pc, #692]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007212:	ed93 7b08 	vldr	d7, [r3, #32]
 8007216:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800721a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721e:	bfcc      	ite	gt
 8007220:	2301      	movgt	r3, #1
 8007222:	2300      	movle	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	1d3b      	adds	r3, r7, #4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f883 2c3c 	strb.w	r2, [r3, #3132]	; 0xc3c
  // Switch: '<S25>/Switch' incorporates:
  //   Constant: '<S21>/Constant'
  //   Constant: '<S21>/Constant1'
  //   Switch: '<S21>/Switch1'

  if (rtDW.Compare_m) {
 8007230:	1d3b      	adds	r3, r7, #4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f893 3c3c 	ldrb.w	r3, [r3, #3132]	; 0xc3c
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 80aa 	beq.w	8007392 <_ZN27positionEstimatorModelClass4stepEv+0x71a>
    // Bias: '<S25>/Bias'
    rtDW.Bias_mj = rtDW.Abs1_j + rtP.Bias_Bias;
 800723e:	1d3b      	adds	r3, r7, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8007246:	ed93 6b00 	vldr	d6, [r3]
 800724a:	4b9f      	ldr	r3, [pc, #636]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800724c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8007250:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007254:	1d3b      	adds	r3, r7, #4
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 800725c:	ed83 7b00 	vstr	d7, [r3]

    // Gain: '<S25>/Gain'
    rtDW.Gain_c = rtP.Gain_Gain * rtDW.Bias_mj;
 8007260:	4b99      	ldr	r3, [pc, #612]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007262:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 800726e:	ed93 7b00 	vldr	d7, [r3]
 8007272:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007276:	1d3b      	adds	r3, r7, #4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 800727e:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S25>/Bias1'
    rtDW.Bias1_n = rtDW.Gain_c + rtP.Bias1_Bias;
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 800728a:	ed93 6b00 	vldr	d6, [r3]
 800728e:	4b8e      	ldr	r3, [pc, #568]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007290:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8007294:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007298:	1d3b      	adds	r3, r7, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 80072a0:	ed83 7b00 	vstr	d7, [r3]

    // Signum: '<S25>/Sign1'
    u = rtDW.Switch_f;
 80072a4:	1d3b      	adds	r3, r7, #4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80072ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072b0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80072b4:	e9c2 3400 	strd	r3, r4, [r2]
    if (u < 0.0) {
 80072b8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80072bc:	ed93 7b00 	vldr	d7, [r3]
 80072c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80072c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c8:	d509      	bpl.n	80072de <_ZN27positionEstimatorModelClass4stepEv+0x666>
      rtDW.Sign1_g = -1.0;
 80072ca:	1d3b      	adds	r3, r7, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f603 4228 	addw	r2, r3, #3112	; 0xc28
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	4c7d      	ldr	r4, [pc, #500]	; (80074cc <_ZN27positionEstimatorModelClass4stepEv+0x854>)
 80072d8:	e9c2 3400 	strd	r3, r4, [r2]
 80072dc:	e02f      	b.n	800733e <_ZN27positionEstimatorModelClass4stepEv+0x6c6>
    } else if (u > 0.0) {
 80072de:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80072e2:	ed93 7b00 	vldr	d7, [r3]
 80072e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80072ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ee:	dd09      	ble.n	8007304 <_ZN27positionEstimatorModelClass4stepEv+0x68c>
      rtDW.Sign1_g = 1.0;
 80072f0:	1d3b      	adds	r3, r7, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f603 4228 	addw	r2, r3, #3112	; 0xc28
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	4c74      	ldr	r4, [pc, #464]	; (80074d0 <_ZN27positionEstimatorModelClass4stepEv+0x858>)
 80072fe:	e9c2 3400 	strd	r3, r4, [r2]
 8007302:	e01c      	b.n	800733e <_ZN27positionEstimatorModelClass4stepEv+0x6c6>
    } else if (u == 0.0) {
 8007304:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007308:	ed93 7b00 	vldr	d7, [r3]
 800730c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	d10a      	bne.n	800732c <_ZN27positionEstimatorModelClass4stepEv+0x6b4>
      rtDW.Sign1_g = 0.0;
 8007316:	1d3b      	adds	r3, r7, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f603 4228 	addw	r2, r3, #3112	; 0xc28
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	f04f 0400 	mov.w	r4, #0
 8007326:	e9c2 3400 	strd	r3, r4, [r2]
 800732a:	e008      	b.n	800733e <_ZN27positionEstimatorModelClass4stepEv+0x6c6>
    } else {
      rtDW.Sign1_g = (rtNaN);
 800732c:	4b69      	ldr	r3, [pc, #420]	; (80074d4 <_ZN27positionEstimatorModelClass4stepEv+0x85c>)
 800732e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007332:	1d3a      	adds	r2, r7, #4
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 800733a:	e9c2 3400 	strd	r3, r4, [r2]
    }

    // End of Signum: '<S25>/Sign1'

    // Product: '<S25>/Divide1'
    rtDW.Divide1_h = rtDW.Sign1_g * rtDW.Bias1_n;
 800733e:	1d3b      	adds	r3, r7, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8007346:	ed93 6b00 	vldr	d6, [r3]
 800734a:	1d3b      	adds	r3, r7, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8007352:	ed93 7b00 	vldr	d7, [r3]
 8007356:	ee26 7b07 	vmul.f64	d7, d6, d7
 800735a:	1d3b      	adds	r3, r7, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8007362:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_j = rtDW.Divide1_h;
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800736e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007372:	1d3a      	adds	r2, r7, #4
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	f602 2268 	addw	r2, r2, #2664	; 0xa68
 800737a:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1_b = rtP.Constant_Value;
 800737e:	4b52      	ldr	r3, [pc, #328]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007380:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007384:	1d3a      	adds	r2, r7, #4
 8007386:	6812      	ldr	r2, [r2, #0]
 8007388:	f502 6227 	add.w	r2, r2, #2672	; 0xa70
 800738c:	e9c2 3400 	strd	r3, r4, [r2]
 8007390:	e014      	b.n	80073bc <_ZN27positionEstimatorModelClass4stepEv+0x744>
  } else {
    rtDW.Switch_j = rtDW.Switch_f;
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800739a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800739e:	1d3a      	adds	r2, r7, #4
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	f602 2268 	addw	r2, r2, #2664	; 0xa68
 80073a6:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1_b = rtP.Constant1_Value;
 80073aa:	4b47      	ldr	r3, [pc, #284]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 80073ac:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80073b0:	1d3a      	adds	r2, r7, #4
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	f502 6227 	add.w	r2, r2, #2672	; 0xa70
 80073b8:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Switch: '<S25>/Switch'

  // Sum: '<S21>/Sum'
  rtDW.Sum_j = rtDW.Switch1_b + rtDW.Sum1[1];
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 80073c4:	ed93 6b00 	vldr	d6, [r3]
 80073c8:	1d3b      	adds	r3, r7, #4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80073d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 80073dc:	ed83 7b00 	vstr	d7, [r3]

  // Abs: '<S26>/Abs'
  rtDW.Abs_b0 = std::abs(rtDW.Sum_j);
 80073e0:	1d3b      	adds	r3, r7, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 80073e8:	ed93 7b00 	vldr	d7, [r3]
 80073ec:	eeb0 0b47 	vmov.f64	d0, d7
 80073f0:	f7fe fae3 	bl	80059ba <_ZSt3absd>
 80073f4:	eeb0 7b40 	vmov.f64	d7, d0
 80073f8:	1d3b      	adds	r3, r7, #4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8007400:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S30>/Compare' incorporates:
  //   Constant: '<S30>/Constant'

  rtDW.Compare_k = (rtDW.Abs_b0 > rtP.CompareToConstant_const_ei);
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 800740c:	ed93 6b00 	vldr	d6, [r3]
 8007410:	4b2d      	ldr	r3, [pc, #180]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007412:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8007416:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800741a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741e:	bfcc      	ite	gt
 8007420:	2301      	movgt	r3, #1
 8007422:	2300      	movle	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	461a      	mov	r2, r3
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f883 2c3d 	strb.w	r2, [r3, #3133]	; 0xc3d

  // Switch: '<S26>/Switch'
  if (rtDW.Compare_k) {
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f893 3c3d 	ldrb.w	r3, [r3, #3133]	; 0xc3d
 8007438:	2b00      	cmp	r3, #0
 800743a:	d04d      	beq.n	80074d8 <_ZN27positionEstimatorModelClass4stepEv+0x860>
    // Bias: '<S26>/Bias'
    rtDW.Bias_j = rtDW.Sum_j + rtP.Bias_Bias_a;
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8007444:	ed93 6b00 	vldr	d6, [r3]
 8007448:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800744a:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800744e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007452:	1d3b      	adds	r3, r7, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 800745a:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S26>/Math Function1' incorporates:
    //   Constant: '<S26>/Constant2'

    rtDW.MathFunction1_h = rt_modd_snf(rtDW.Bias_j, rtP.Constant2_Value_g);
 800745e:	1d3b      	adds	r3, r7, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8007466:	ed93 7b00 	vldr	d7, [r3]
 800746a:	4b17      	ldr	r3, [pc, #92]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800746c:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8007470:	eeb0 1b46 	vmov.f64	d1, d6
 8007474:	eeb0 0b47 	vmov.f64	d0, d7
 8007478:	f7fe fc1a 	bl	8005cb0 <_Z11rt_modd_snfdd>
 800747c:	eeb0 7b40 	vmov.f64	d7, d0
 8007480:	1d3b      	adds	r3, r7, #4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8007488:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S26>/Bias1'
    rtDW.Bias1_p = rtDW.MathFunction1_h + rtP.Bias1_Bias_l;
 800748c:	1d3b      	adds	r3, r7, #4
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8007494:	ed93 6b00 	vldr	d6, [r3]
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800749a:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 800749e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 80074aa:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_m = rtDW.Bias1_p;
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 80074b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074ba:	1d3a      	adds	r2, r7, #4
 80074bc:	6812      	ldr	r2, [r2, #0]
 80074be:	f602 2288 	addw	r2, r2, #2696	; 0xa88
 80074c2:	e9c2 3400 	strd	r3, r4, [r2]
 80074c6:	e013      	b.n	80074f0 <_ZN27positionEstimatorModelClass4stepEv+0x878>
 80074c8:	240002b0 	.word	0x240002b0
 80074cc:	bff00000 	.word	0xbff00000
 80074d0:	3ff00000 	.word	0x3ff00000
 80074d4:	24000960 	.word	0x24000960
  } else {
    rtDW.Switch_m = rtDW.Sum_j;
 80074d8:	1d3b      	adds	r3, r7, #4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 80074e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074e4:	1d3a      	adds	r2, r7, #4
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	f602 2288 	addw	r2, r2, #2696	; 0xa88
 80074ec:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Switch: '<S26>/Switch'

  // UnitConversion: '<S24>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion[0] = 0.017453292519943295 * rtDW.Switch_j;
 80074f0:	1d3b      	adds	r3, r7, #4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 80074f8:	ed93 7b00 	vldr	d7, [r3]
 80074fc:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8007868 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 8007500:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007504:	1d3b      	adds	r3, r7, #4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	ed83 7b04 	vstr	d7, [r3, #16]
  rtDW.UnitConversion[1] = 0.017453292519943295 * rtDW.Switch_m;
 800750c:	1d3b      	adds	r3, r7, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8007514:	ed93 7b00 	vldr	d7, [r3]
 8007518:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 8007868 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 800751c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007520:	1d3b      	adds	r3, r7, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	ed83 7b06 	vstr	d7, [r3, #24]

  // Sum: '<S41>/Sum' incorporates:
  //   Constant: '<S41>/Constant'
  //   Constant: '<S41>/f'

  rtDW.Sum_a = rtP.f_Value - rtP.Constant_Value_c;
 8007528:	4bd1      	ldr	r3, [pc, #836]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800752a:	ed93 6b42 	vldr	d6, [r3, #264]	; 0x108
 800752e:	4bd0      	ldr	r3, [pc, #832]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 8007530:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8007534:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007538:	1d3b      	adds	r3, r7, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8007540:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S42>/Product1'
  rtDW.Product1 = rtDW.Sum_a * rtDW.Sum_a;
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 800754c:	ed93 6b00 	vldr	d6, [r3]
 8007550:	1d3b      	adds	r3, r7, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8007558:	ed93 7b00 	vldr	d7, [r3]
 800755c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007560:	1d3b      	adds	r3, r7, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f603 2398 	addw	r3, r3, #2712	; 0xa98
 8007568:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S42>/Sum1' incorporates:
  //   Constant: '<S42>/Constant'

  rtDW.Sum1_e = rtP.Constant_Value_a - rtDW.Product1;
 800756c:	4bc0      	ldr	r3, [pc, #768]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800756e:	ed93 6b3e 	vldr	d6, [r3, #248]	; 0xf8
 8007572:	1d3b      	adds	r3, r7, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f603 2398 	addw	r3, r3, #2712	; 0xa98
 800757a:	ed93 7b00 	vldr	d7, [r3]
 800757e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007582:	1d3b      	adds	r3, r7, #4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 800758a:	ed83 7b00 	vstr	d7, [r3]

  // Sqrt: '<S42>/sqrt'
  rtDW.sqrt_c = std::sqrt(rtDW.Sum1_e);
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 8007596:	ed93 7b00 	vldr	d7, [r3]
 800759a:	eeb0 0b47 	vmov.f64	d0, d7
 800759e:	f021 fcf7 	bl	8028f90 <sqrt>
 80075a2:	eeb0 7b40 	vmov.f64	d7, d0
 80075a6:	1d3b      	adds	r3, r7, #4
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80075ae:	ed83 7b00 	vstr	d7, [r3]

  // UnitConversion: '<S39>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_m = 0.017453292519943295 * rtDW.Switch_b;
 80075b2:	1d3b      	adds	r3, r7, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80075ba:	ed93 7b00 	vldr	d7, [r3]
 80075be:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8007868 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 80075c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075c6:	1d3b      	adds	r3, r7, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 80075ce:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S40>/Trigonometric Function1'
  rtDW.TrigonometricFunction1 = std::sin(rtDW.UnitConversion_m);
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 80075da:	ed93 7b00 	vldr	d7, [r3]
 80075de:	eeb0 0b47 	vmov.f64	d0, d7
 80075e2:	f021 fa91 	bl	8028b08 <sin>
 80075e6:	eeb0 7b40 	vmov.f64	d7, d0
 80075ea:	1d3b      	adds	r3, r7, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80075f2:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S40>/Product1'
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 80075f6:	1d3b      	adds	r3, r7, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80075fe:	ed93 6b00 	vldr	d6, [r3]
 8007602:	1d3b      	adds	r3, r7, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 800760a:	ed93 7b00 	vldr	d7, [r3]
 800760e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 800761a:	ed93 7b00 	vldr	d7, [r3]
 800761e:	ee26 6b07 	vmul.f64	d6, d6, d7
    rtDW.TrigonometricFunction1;
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 800762a:	ed93 7b00 	vldr	d7, [r3]
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 800762e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007632:	1d3b      	adds	r3, r7, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 800763a:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S40>/Sum1' incorporates:
  //   Constant: '<S40>/Constant'

  rtDW.Sum1_c = rtP.Constant_Value_f - rtDW.Product1_n;
 800763e:	4b8c      	ldr	r3, [pc, #560]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 8007640:	ed93 6b3c 	vldr	d6, [r3, #240]	; 0xf0
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 800764c:	ed93 7b00 	vldr	d7, [r3]
 8007650:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007654:	1d3b      	adds	r3, r7, #4
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 800765c:	ed83 7b00 	vstr	d7, [r3]

  // Sqrt: '<S38>/sqrt'
  rtDW.sqrt_d = std::sqrt(rtDW.Sum1_c);
 8007660:	1d3b      	adds	r3, r7, #4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8007668:	ed93 7b00 	vldr	d7, [r3]
 800766c:	eeb0 0b47 	vmov.f64	d0, d7
 8007670:	f021 fc8e 	bl	8028f90 <sqrt>
 8007674:	eeb0 7b40 	vmov.f64	d7, d0
 8007678:	1d3b      	adds	r3, r7, #4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8007680:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product1' incorporates:
  //   Constant: '<S38>/Constant1'

  rtDW.Rn = rtP.Constant1_Value_d / rtDW.sqrt_d;
 8007684:	4b7a      	ldr	r3, [pc, #488]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 8007686:	ed93 5b3a 	vldr	d5, [r3, #232]	; 0xe8
 800768a:	1d3b      	adds	r3, r7, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8007692:	ed93 6b00 	vldr	d6, [r3]
 8007696:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 80076a2:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product2'
  rtDW.Product2 = rtDW.sqrt_c * rtDW.sqrt_c;
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80076ae:	ed93 6b00 	vldr	d6, [r3]
 80076b2:	1d3b      	adds	r3, r7, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80076ba:	ed93 7b00 	vldr	d7, [r3]
 80076be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80076c2:	1d3b      	adds	r3, r7, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 80076ca:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S38>/Sum1' incorporates:
  //   Constant: '<S38>/Constant'

  rtDW.Sum1_g = rtP.Constant_Value_ch - rtDW.Product2;
 80076ce:	4b68      	ldr	r3, [pc, #416]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 80076d0:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80076d4:	1d3b      	adds	r3, r7, #4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 80076dc:	ed93 7b00 	vldr	d7, [r3]
 80076e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80076e4:	1d3b      	adds	r3, r7, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 80076ec:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product3'
  rtDW.Rm = rtDW.Rn * rtDW.Sum1_g / rtDW.Sum1_c;
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 80076f8:	ed93 6b00 	vldr	d6, [r3]
 80076fc:	1d3b      	adds	r3, r7, #4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 8007704:	ed93 7b00 	vldr	d7, [r3]
 8007708:	ee26 5b07 	vmul.f64	d5, d6, d7
 800770c:	1d3b      	adds	r3, r7, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8007714:	ed93 6b00 	vldr	d6, [r3]
 8007718:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800771c:	1d3b      	adds	r3, r7, #4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8007724:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S38>/Trigonometric Function1' incorporates:
  //   Constant: '<S38>/Constant2'

  rtDW.TrigonometricFunction1_l = rt_atan2d_snf(rtP.Constant2_Value_h, rtDW.Rm);
 8007728:	4b51      	ldr	r3, [pc, #324]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800772a:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 800772e:	1d3b      	adds	r3, r7, #4
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8007736:	ed93 6b00 	vldr	d6, [r3]
 800773a:	eeb0 1b46 	vmov.f64	d1, d6
 800773e:	eeb0 0b47 	vmov.f64	d0, d7
 8007742:	f7fe fbc9 	bl	8005ed8 <_Z13rt_atan2d_snfdd>
 8007746:	eeb0 7b40 	vmov.f64	d7, d0
 800774a:	1d3b      	adds	r3, r7, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8007752:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/dNorth'
  rtDW.dNorth = rtDW.UnitConversion[0] / rtDW.TrigonometricFunction1_l;
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	ed93 5b04 	vldr	d5, [r3, #16]
 800775e:	1d3b      	adds	r3, r7, #4
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8007766:	ed93 6b00 	vldr	d6, [r3]
 800776a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800776e:	1d3b      	adds	r3, r7, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007776:	ed83 7b00 	vstr	d7, [r3]
  // UnitConversion: '<S37>/Unit Conversion' incorporates:
  //   Constant: '<S3>/flat-x_from_N'

  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_p = 0.017453292519943295 * rtP.flatx_from_N_Value;
 800777a:	4b3d      	ldr	r3, [pc, #244]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800777c:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8007780:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8007868 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 8007784:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007788:	1d3b      	adds	r3, r7, #4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8007790:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S23>/SinCos'
  a22 = rtDW.UnitConversion_p;
 8007794:	1d3b      	adds	r3, r7, #4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 800779c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077a0:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 80077a4:	e9c2 3400 	strd	r3, r4, [r2]
  epsilon = std::sin(a22);
 80077a8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80077ac:	ed93 0b00 	vldr	d0, [r3]
 80077b0:	f021 f9aa 	bl	8028b08 <sin>
 80077b4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80077b8:	ed83 0b00 	vstr	d0, [r3]
  a22 = std::cos(a22);
 80077bc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80077c0:	ed93 0b00 	vldr	d0, [r3]
 80077c4:	f021 f8ec 	bl	80289a0 <cos>
 80077c8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80077cc:	ed83 0b00 	vstr	d0, [r3]
  rtDW.SinCos_o1 = epsilon;
 80077d0:	1d3b      	adds	r3, r7, #4
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f503 6231 	add.w	r2, r3, #2832	; 0xb10
 80077d8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80077dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077e0:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.SinCos_o2 = a22;
 80077e4:	1d3b      	adds	r3, r7, #4
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f603 3218 	addw	r2, r3, #2840	; 0xb18
 80077ec:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80077f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077f4:	e9c2 3400 	strd	r3, r4, [r2]

  // Product: '<S23>/x*cos'
  rtDW.xcos = rtDW.dNorth * rtDW.SinCos_o2;
 80077f8:	1d3b      	adds	r3, r7, #4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	ed93 6b00 	vldr	d6, [r3]
 8007804:	1d3b      	adds	r3, r7, #4
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 800780c:	ed93 7b00 	vldr	d7, [r3]
 8007810:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007814:	1d3b      	adds	r3, r7, #4
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 800781c:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S38>/Trigonometric Function'
  rtDW.TrigonometricFunction = std::cos(rtDW.UnitConversion_m);
 8007820:	1d3b      	adds	r3, r7, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8007828:	ed93 7b00 	vldr	d7, [r3]
 800782c:	eeb0 0b47 	vmov.f64	d0, d7
 8007830:	f021 f8b6 	bl	80289a0 <cos>
 8007834:	eeb0 7b40 	vmov.f64	d7, d0
 8007838:	1d3b      	adds	r3, r7, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8007840:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product4'
  rtDW.Product4 = rtDW.Rn * rtDW.TrigonometricFunction;
 8007844:	1d3b      	adds	r3, r7, #4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 800784c:	ed93 6b00 	vldr	d6, [r3]
 8007850:	1d3b      	adds	r3, r7, #4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8007858:	ed93 7b00 	vldr	d7, [r3]
 800785c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007860:	1d3b      	adds	r3, r7, #4
 8007862:	e007      	b.n	8007874 <_ZN27positionEstimatorModelClass4stepEv+0xbfc>
 8007864:	f3af 8000 	nop.w
 8007868:	a2529d39 	.word	0xa2529d39
 800786c:	3f91df46 	.word	0x3f91df46
 8007870:	240002b0 	.word	0x240002b0
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 800787a:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S38>/Trigonometric Function2' incorporates:
  //   Constant: '<S38>/Constant3'

  rtDW.TrigonometricFunction2 = rt_atan2d_snf(rtP.Constant3_Value, rtDW.Product4);
 800787e:	4bc4      	ldr	r3, [pc, #784]	; (8007b90 <_ZN27positionEstimatorModelClass4stepEv+0xf18>)
 8007880:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8007884:	1d3b      	adds	r3, r7, #4
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 800788c:	ed93 6b00 	vldr	d6, [r3]
 8007890:	eeb0 1b46 	vmov.f64	d1, d6
 8007894:	eeb0 0b47 	vmov.f64	d0, d7
 8007898:	f7fe fb1e 	bl	8005ed8 <_Z13rt_atan2d_snfdd>
 800789c:	eeb0 7b40 	vmov.f64	d7, d0
 80078a0:	1d3b      	adds	r3, r7, #4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 80078a8:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/dEast'
  rtDW.dEast = 1.0 / rtDW.TrigonometricFunction2 * rtDW.UnitConversion[1];
 80078ac:	1d3b      	adds	r3, r7, #4
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 80078b4:	ed93 7b00 	vldr	d7, [r3]
 80078b8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80078bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	ed93 7b06 	vldr	d7, [r3, #24]
 80078c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80078cc:	1d3b      	adds	r3, r7, #4
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80078d4:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/y*sin'
  rtDW.ysin = rtDW.dEast * rtDW.SinCos_o1;
 80078d8:	1d3b      	adds	r3, r7, #4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80078e0:	ed93 6b00 	vldr	d6, [r3]
 80078e4:	1d3b      	adds	r3, r7, #4
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80078ec:	ed93 7b00 	vldr	d7, [r3]
 80078f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80078f4:	1d3b      	adds	r3, r7, #4
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 80078fc:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S23>/Sum2'
  rtDW.Px = rtDW.xcos + rtDW.ysin;
 8007900:	1d3b      	adds	r3, r7, #4
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8007908:	ed93 6b00 	vldr	d6, [r3]
 800790c:	1d3b      	adds	r3, r7, #4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 8007914:	ed93 7b00 	vldr	d7, [r3]
 8007918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800791c:	1d3b      	adds	r3, r7, #4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 8007924:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/x*sin'
  rtDW.xsin = rtDW.dNorth * rtDW.SinCos_o1;
 8007928:	1d3b      	adds	r3, r7, #4
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007930:	ed93 6b00 	vldr	d6, [r3]
 8007934:	1d3b      	adds	r3, r7, #4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 800793c:	ed93 7b00 	vldr	d7, [r3]
 8007940:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007944:	1d3b      	adds	r3, r7, #4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 800794c:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/y*cos'
  rtDW.ycos = rtDW.dEast * rtDW.SinCos_o2;
 8007950:	1d3b      	adds	r3, r7, #4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8007958:	ed93 6b00 	vldr	d6, [r3]
 800795c:	1d3b      	adds	r3, r7, #4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 8007964:	ed93 7b00 	vldr	d7, [r3]
 8007968:	ee26 7b07 	vmul.f64	d7, d6, d7
 800796c:	1d3b      	adds	r3, r7, #4
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 8007974:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S23>/Sum3'
  rtDW.Py = rtDW.ycos - rtDW.xsin;
 8007978:	1d3b      	adds	r3, r7, #4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 8007980:	ed93 6b00 	vldr	d6, [r3]
 8007984:	1d3b      	adds	r3, r7, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 800798c:	ed93 7b00 	vldr	d7, [r3]
 8007990:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 800799c:	ed83 7b00 	vstr	d7, [r3]

  // DataTypeConversion: '<S2>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1 = (rtU.AhrsFlag != 0.0);
 80079a0:	1d3b      	adds	r3, r7, #4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 80079a8:	ed93 7b00 	vldr	d7, [r3]
 80079ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b4:	bf14      	ite	ne
 80079b6:	2301      	movne	r3, #1
 80079b8:	2300      	moveq	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	1d3b      	adds	r3, r7, #4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f883 2c3e 	strb.w	r2, [r3, #3134]	; 0xc3e

  // Outputs for Enabled SubSystem: '<S2>/Correct1' incorporates:
  //   EnablePort: '<S13>/Enable'

  if (rtDW.DataTypeConversion_Enable1) {
 80079c6:	1d3b      	adds	r3, r7, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f893 3c3e 	ldrb.w	r3, [r3, #3134]	; 0xc3e
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 85af 	beq.w	8008532 <_ZN27positionEstimatorModelClass4stepEv+0x18ba>
    // DataStoreRead: '<S13>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 80079d4:	2300      	movs	r3, #0
 80079d6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80079da:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80079de:	2b05      	cmp	r3, #5
 80079e0:	dc18      	bgt.n	8007a14 <_ZN27positionEstimatorModelClass4stepEv+0xd9c>
      rtDW.DataStoreReadX_p[i] = rtDW.x_p[i];
 80079e2:	1d3b      	adds	r3, r7, #4
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80079ea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4413      	add	r3, r2
 80079f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079f6:	1d3a      	adds	r2, r7, #4
 80079f8:	6811      	ldr	r1, [r2, #0]
 80079fa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80079fe:	3292      	adds	r2, #146	; 0x92
 8007a00:	00d2      	lsls	r2, r2, #3
 8007a02:	440a      	add	r2, r1
 8007a04:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8007a08:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007a12:	e7e2      	b.n	80079da <_ZN27positionEstimatorModelClass4stepEv+0xd62>
    // SignalConversion generated from: '<S17>/ SFunction ' incorporates:
    //   Inport: '<Root>/ax'
    //   Inport: '<Root>/ay'
    //   MATLAB Function: '<S13>/Correct'

    rtDW.TmpSignalConversionAtSFunctio_i[0] = rtU.ax;
 8007a14:	1d3b      	adds	r3, r7, #4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 8007a1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a20:	1d3a      	adds	r2, r7, #4
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	f502 6298 	add.w	r2, r2, #1216	; 0x4c0
 8007a28:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.TmpSignalConversionAtSFunctio_i[1] = rtU.ay;
 8007a2c:	1d3b      	adds	r3, r7, #4
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8007a34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a38:	1d3a      	adds	r2, r7, #4
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	f502 6299 	add.w	r2, r2, #1224	; 0x4c8
 8007a40:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S13>/Correct' incorporates:
    //   Constant: '<S2>/BlockOrdering'

    rtDW.blockOrdering_f = rtP.BlockOrdering_Value;
 8007a44:	4b52      	ldr	r3, [pc, #328]	; (8007b90 <_ZN27positionEstimatorModelClass4stepEv+0xf18>)
 8007a46:	f893 23e5 	ldrb.w	r2, [r3, #997]	; 0x3e5
 8007a4a:	1d3b      	adds	r3, r7, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
    blockOrdering = rtDW.blockOrdering_f;
 8007a52:	1d3b      	adds	r3, r7, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8007a5a:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_f = blockOrdering;
 8007a5e:	1d3b      	adds	r3, r7, #4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8007a66:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
    for (i = 0; i < 36; i++) {
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007a70:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007a74:	2b23      	cmp	r3, #35	; 0x23
 8007a76:	dc32      	bgt.n	8007ade <_ZN27positionEstimatorModelClass4stepEv+0xe66>
      // DataStoreRead: '<S13>/Data Store ReadP'
      rtDW.P_k[i] = rtDW.P_n_c[i];
 8007a78:	1d3b      	adds	r3, r7, #4
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007a80:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	4413      	add	r3, r2
 8007a88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a8c:	1d3a      	adds	r2, r7, #4
 8007a8e:	6811      	ldr	r1, [r2, #0]
 8007a90:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007a94:	32a0      	adds	r2, #160	; 0xa0
 8007a96:	00d2      	lsls	r2, r2, #3
 8007a98:	440a      	add	r2, r1
 8007a9a:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S13>/Correct'
      u = rtDW.P_k[i];
 8007a9e:	1d3b      	adds	r3, r7, #4
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007aa6:	33a0      	adds	r3, #160	; 0xa0
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	4413      	add	r3, r2
 8007aac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ab0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007ab4:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_k[i] = u;
 8007ab8:	1d3b      	adds	r3, r7, #4
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007ac0:	33a0      	adds	r3, #160	; 0xa0
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	441a      	add	r2, r3
 8007ac6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007aca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ace:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 8007ad2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007adc:	e7c8      	b.n	8007a70 <_ZN27positionEstimatorModelClass4stepEv+0xdf8>
    }

    // MATLAB Function: '<S13>/Correct' incorporates:
    //   Constant: '<S2>/R1'

    for (r1 = 0; r1 < 6; r1++) {
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007ae4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007ae8:	2b05      	cmp	r3, #5
 8007aea:	f300 80b1 	bgt.w	8007c50 <_ZN27positionEstimatorModelClass4stepEv+0xfd8>
      for (i = 0; i < 6; i++) {
 8007aee:	2300      	movs	r3, #0
 8007af0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007af4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007af8:	2b05      	cmp	r3, #5
 8007afa:	dc16      	bgt.n	8007b2a <_ZN27positionEstimatorModelClass4stepEv+0xeb2>
        imvec[i] = rtDW.DataStoreReadX_p[i];
 8007afc:	1d3b      	adds	r3, r7, #4
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007b04:	3392      	adds	r3, #146	; 0x92
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	4413      	add	r3, r2
 8007b0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b0e:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8007b12:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007b16:	00d2      	lsls	r2, r2, #3
 8007b18:	440a      	add	r2, r1
 8007b1a:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 6; i++) {
 8007b1e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007b22:	3301      	adds	r3, #1
 8007b24:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007b28:	e7e4      	b.n	8007af4 <_ZN27positionEstimatorModelClass4stepEv+0xe7c>
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_p[r1]);
 8007b2a:	1d3b      	adds	r3, r7, #4
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007b32:	3392      	adds	r3, #146	; 0x92
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	4413      	add	r3, r2
 8007b38:	ed93 7b00 	vldr	d7, [r3]
 8007b3c:	eeb0 0b47 	vmov.f64	d0, d7
 8007b40:	f7fd ff3b 	bl	80059ba <_ZSt3absd>
 8007b44:	eeb0 6b40 	vmov.f64	d6, d0
 8007b48:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007b88 <_ZN27positionEstimatorModelClass4stepEv+0xf10>
 8007b4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007b50:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007b54:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8007b58:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007b5c:	ed93 7b00 	vldr	d7, [r3]
 8007b60:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8007b88 <_ZN27positionEstimatorModelClass4stepEv+0xf10>
 8007b64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6c:	d408      	bmi.n	8007b80 <_ZN27positionEstimatorModelClass4stepEv+0xf08>
 8007b6e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007b72:	ed93 0b00 	vldr	d0, [r3]
 8007b76:	f7fd ffd3 	bl	8005b20 <rtIsNaN>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d009      	beq.n	8007b94 <_ZN27positionEstimatorModelClass4stepEv+0xf1c>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e008      	b.n	8007b96 <_ZN27positionEstimatorModelClass4stepEv+0xf1e>
 8007b84:	f3af 8000 	nop.w
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	3e500000 	.word	0x3e500000
 8007b90:	240002b0 	.word	0x240002b0
 8007b94:	2300      	movs	r3, #0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d006      	beq.n	8007ba8 <_ZN27positionEstimatorModelClass4stepEv+0xf30>
        epsilon = 1.4901161193847656E-8;
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	4ce5      	ldr	r4, [pc, #916]	; (8007f34 <_ZN27positionEstimatorModelClass4stepEv+0x12bc>)
 8007ba0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007ba4:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec[r1] = rtDW.DataStoreReadX_p[r1] + epsilon;
 8007ba8:	1d3b      	adds	r3, r7, #4
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007bb0:	3392      	adds	r3, #146	; 0x92
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	ed93 6b00 	vldr	d6, [r3]
 8007bba:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007bbe:	ed93 7b00 	vldr	d7, [r3]
 8007bc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007bc6:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8007bca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	ed83 7b00 	vstr	d7, [r3]
      dHdx[r1 << 1] = (imvec[4] - rtDW.DataStoreReadX_p[4]) / epsilon;
 8007bd6:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007bda:	ed93 6b08 	vldr	d6, [r3, #32]
 8007bde:	1d3b      	adds	r3, r7, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8007be6:	ed93 7b00 	vldr	d7, [r3]
 8007bea:	ee36 5b47 	vsub.f64	d5, d6, d7
 8007bee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007bf8:	ed92 6b00 	vldr	d6, [r2]
 8007bfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007c00:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	4413      	add	r3, r2
 8007c08:	ed83 7b00 	vstr	d7, [r3]
      dHdx[(r1 << 1) + 1] = (imvec[5] - rtDW.DataStoreReadX_p[5]) / epsilon;
 8007c0c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007c10:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8007c14:	1d3b      	adds	r3, r7, #4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8007c1c:	ed93 7b00 	vldr	d7, [r3]
 8007c20:	ee36 5b47 	vsub.f64	d5, d6, d7
 8007c24:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007c30:	ed92 6b00 	vldr	d6, [r2]
 8007c34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007c38:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	4413      	add	r3, r2
 8007c40:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 6; r1++) {
 8007c44:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007c48:	3301      	adds	r3, #1
 8007c4a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007c4e:	e749      	b.n	8007ae4 <_ZN27positionEstimatorModelClass4stepEv+0xe6c>
    }

    for (r1 = 0; r1 < 6; r1++) {
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007c56:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007c5a:	2b05      	cmp	r3, #5
 8007c5c:	f300 808a 	bgt.w	8007d74 <_ZN27positionEstimatorModelClass4stepEv+0x10fc>
      for (i = 0; i < 2; i++) {
 8007c60:	2300      	movs	r3, #0
 8007c62:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007c66:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	dc7c      	bgt.n	8007d68 <_ZN27positionEstimatorModelClass4stepEv+0x10f0>
        Pxy[r1 + 6 * i] = 0.0;
 8007c6e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007c72:	4613      	mov	r3, r2
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	4413      	add	r3, r2
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007c80:	4413      	add	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007c88:	4413      	add	r3, r2
 8007c8a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
 8007c8e:	f04f 0300 	mov.w	r3, #0
 8007c92:	f04f 0400 	mov.w	r4, #0
 8007c96:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007ca0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007ca4:	2b05      	cmp	r3, #5
 8007ca6:	dc59      	bgt.n	8007d5c <_ZN27positionEstimatorModelClass4stepEv+0x10e4>
          u = Pxy[6 * i + r1];
 8007ca8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007cac:	4613      	mov	r3, r2
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	4413      	add	r3, r2
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007cba:	4413      	add	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007cc2:	4413      	add	r3, r2
 8007cc4:	3b90      	subs	r3, #144	; 0x90
 8007cc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cca:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007cce:	e9c2 3400 	strd	r3, r4, [r2]
          u += rtDW.P_k[6 * k + r1] * dHdx[(k << 1) + i];
 8007cd2:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	4413      	add	r3, r2
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007ce4:	4413      	add	r3, r2
 8007ce6:	1d3a      	adds	r2, r7, #4
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	33a0      	adds	r3, #160	; 0xa0
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	ed93 6b00 	vldr	d6, [r3]
 8007cf4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007cf8:	005a      	lsls	r2, r3, #1
 8007cfa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007cfe:	4413      	add	r3, r2
 8007d00:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	4413      	add	r3, r2
 8007d08:	ed93 7b00 	vldr	d7, [r3]
 8007d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007d10:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007d14:	ed93 6b00 	vldr	d6, [r3]
 8007d18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007d1c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007d20:	ed83 7b00 	vstr	d7, [r3]
          Pxy[r1 + 6 * i] = u;
 8007d24:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007d28:	4613      	mov	r3, r2
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	4413      	add	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	461a      	mov	r2, r3
 8007d32:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d36:	4413      	add	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007d3e:	4413      	add	r3, r2
 8007d40:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
 8007d44:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007d48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d4c:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007d50:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007d54:	3301      	adds	r3, #1
 8007d56:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007d5a:	e7a1      	b.n	8007ca0 <_ZN27positionEstimatorModelClass4stepEv+0x1028>
      for (i = 0; i < 2; i++) {
 8007d5c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007d60:	3301      	adds	r3, #1
 8007d62:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007d66:	e77e      	b.n	8007c66 <_ZN27positionEstimatorModelClass4stepEv+0xfee>
    for (r1 = 0; r1 < 6; r1++) {
 8007d68:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007d72:	e770      	b.n	8007c56 <_ZN27positionEstimatorModelClass4stepEv+0xfde>
        }
      }
    }

    for (r1 = 0; r1 < 2; r1++) {
 8007d74:	2300      	movs	r3, #0
 8007d76:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007d7a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	f300 80e2 	bgt.w	8007f48 <_ZN27positionEstimatorModelClass4stepEv+0x12d0>
      for (i = 0; i < 6; i++) {
 8007d84:	2300      	movs	r3, #0
 8007d86:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007d8a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	dc6b      	bgt.n	8007e6a <_ZN27positionEstimatorModelClass4stepEv+0x11f2>
        gain[r1 + (i << 1)] = 0.0;
 8007d92:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007d96:	005a      	lsls	r2, r3, #1
 8007d98:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	441a      	add	r2, r3
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	f04f 0400 	mov.w	r4, #0
 8007dae:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007db2:	2300      	movs	r3, #0
 8007db4:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007db8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007dbc:	2b05      	cmp	r3, #5
 8007dbe:	dc4e      	bgt.n	8007e5e <_ZN27positionEstimatorModelClass4stepEv+0x11e6>
          u = gain[(i << 1) + r1];
 8007dc0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007dc4:	005a      	lsls	r2, r3, #1
 8007dc6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007dca:	4413      	add	r3, r2
 8007dcc:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dd8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007ddc:	e9c2 3400 	strd	r3, r4, [r2]
          u += dHdx[(k << 1) + r1] * rtDW.P_k[6 * i + k];
 8007de0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007de4:	005a      	lsls	r2, r3, #1
 8007de6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007dea:	4413      	add	r3, r2
 8007dec:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	4413      	add	r3, r2
 8007df4:	ed93 6b00 	vldr	d6, [r3]
 8007df8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	4413      	add	r3, r2
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	461a      	mov	r2, r3
 8007e06:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007e0a:	4413      	add	r3, r2
 8007e0c:	1d3a      	adds	r2, r7, #4
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	33a0      	adds	r3, #160	; 0xa0
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4413      	add	r3, r2
 8007e16:	ed93 7b00 	vldr	d7, [r3]
 8007e1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e1e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e22:	ed93 6b00 	vldr	d6, [r3]
 8007e26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007e2a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e2e:	ed83 7b00 	vstr	d7, [r3]
          gain[r1 + (i << 1)] = u;
 8007e32:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007e36:	005a      	lsls	r2, r3, #1
 8007e38:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	441a      	add	r2, r3
 8007e46:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e4e:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007e52:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007e56:	3301      	adds	r3, #1
 8007e58:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007e5c:	e7ac      	b.n	8007db8 <_ZN27positionEstimatorModelClass4stepEv+0x1140>
      for (i = 0; i < 6; i++) {
 8007e5e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007e62:	3301      	adds	r3, #1
 8007e64:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007e68:	e78f      	b.n	8007d8a <_ZN27positionEstimatorModelClass4stepEv+0x1112>
        }
      }

      for (i = 0; i < 2; i++) {
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007e70:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	dc61      	bgt.n	8007f3c <_ZN27positionEstimatorModelClass4stepEv+0x12c4>
        u = 0.0;
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	f04f 0400 	mov.w	r4, #0
 8007e80:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007e84:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007e8e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	dc29      	bgt.n	8007eea <_ZN27positionEstimatorModelClass4stepEv+0x1272>
          u += gain[(k << 1) + r1] * dHdx[(k << 1) + i];
 8007e96:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007e9a:	005a      	lsls	r2, r3, #1
 8007e9c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	ed93 6b00 	vldr	d6, [r3]
 8007eae:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007eb2:	005a      	lsls	r2, r3, #1
 8007eb4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007eb8:	4413      	add	r3, r2
 8007eba:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	ed93 7b00 	vldr	d7, [r3]
 8007ec6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007eca:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007ece:	ed93 6b00 	vldr	d6, [r3]
 8007ed2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007ed6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007eda:	ed83 7b00 	vstr	d7, [r3]
        for (k = 0; k < 6; k++) {
 8007ede:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007ee8:	e7d1      	b.n	8007e8e <_ZN27positionEstimatorModelClass4stepEv+0x1216>
        }

        Pyy[r1 + (i << 1)] = rtP.R1_Value[(i << 1) + r1] + u;
 8007eea:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007eee:	005a      	lsls	r2, r3, #1
 8007ef0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007ef4:	4413      	add	r3, r2
 8007ef6:	4a10      	ldr	r2, [pc, #64]	; (8007f38 <_ZN27positionEstimatorModelClass4stepEv+0x12c0>)
 8007ef8:	3336      	adds	r3, #54	; 0x36
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	ed93 6b00 	vldr	d6, [r3]
 8007f02:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007f06:	005a      	lsls	r2, r3, #1
 8007f08:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007f12:	ed92 7b00 	vldr	d7, [r2]
 8007f16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007f20:	4413      	add	r3, r2
 8007f22:	3bb0      	subs	r3, #176	; 0xb0
 8007f24:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 2; i++) {
 8007f28:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007f32:	e79d      	b.n	8007e70 <_ZN27positionEstimatorModelClass4stepEv+0x11f8>
 8007f34:	3e500000 	.word	0x3e500000
 8007f38:	240002b0 	.word	0x240002b0
    for (r1 = 0; r1 < 2; r1++) {
 8007f3c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007f40:	3301      	adds	r3, #1
 8007f42:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007f46:	e718      	b.n	8007d7a <_ZN27positionEstimatorModelClass4stepEv+0x1102>
      }
    }

    if (std::abs(Pyy[1]) > std::abs(Pyy[0])) {
 8007f48:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8007f4c:	ed93 7b00 	vldr	d7, [r3]
 8007f50:	eeb0 0b47 	vmov.f64	d0, d7
 8007f54:	f7fd fd31 	bl	80059ba <_ZSt3absd>
 8007f58:	eeb0 8b40 	vmov.f64	d8, d0
 8007f5c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8007f60:	ed93 7b00 	vldr	d7, [r3]
 8007f64:	eeb0 0b47 	vmov.f64	d0, d7
 8007f68:	f7fd fd27 	bl	80059ba <_ZSt3absd>
 8007f6c:	eeb0 7b40 	vmov.f64	d7, d0
 8007f70:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f78:	bfcc      	ite	gt
 8007f7a:	2301      	movgt	r3, #1
 8007f7c:	2300      	movle	r3, #0
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d006      	beq.n	8007f92 <_ZN27positionEstimatorModelClass4stepEv+0x131a>
      r1 = 1;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007f90:	e005      	b.n	8007f9e <_ZN27positionEstimatorModelClass4stepEv+0x1326>
    } else {
      r1 = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 1;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    }

    epsilon = Pyy[i] / Pyy[r1];
 8007f9e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007fa8:	4413      	add	r3, r2
 8007faa:	3bb0      	subs	r3, #176	; 0xb0
 8007fac:	ed93 5b00 	vldr	d5, [r3]
 8007fb0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007fba:	4413      	add	r3, r2
 8007fbc:	3bb0      	subs	r3, #176	; 0xb0
 8007fbe:	ed93 6b00 	vldr	d6, [r3]
 8007fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007fc6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007fca:	ed83 7b00 	vstr	d7, [r3]
    a22 = Pyy[i + 2] - Pyy[r1 + 2] * epsilon;
 8007fce:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007fd2:	3302      	adds	r3, #2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007fda:	4413      	add	r3, r2
 8007fdc:	3bb0      	subs	r3, #176	; 0xb0
 8007fde:	ed93 6b00 	vldr	d6, [r3]
 8007fe2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007fe6:	3302      	adds	r3, #2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007fee:	4413      	add	r3, r2
 8007ff0:	3bb0      	subs	r3, #176	; 0xb0
 8007ff2:	ed93 5b00 	vldr	d5, [r3]
 8007ff6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007ffa:	ed93 7b00 	vldr	d7, [r3]
 8007ffe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008002:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008006:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800800a:	ed83 7b00 	vstr	d7, [r3]
    for (k = 0; k < 6; k++) {
 800800e:	2300      	movs	r3, #0
 8008010:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008014:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008018:	2b05      	cmp	r3, #5
 800801a:	f300 80a0 	bgt.w	800815e <_ZN27positionEstimatorModelClass4stepEv+0x14e6>
      gain[k + 6 * r1] = Pxy[k] / Pyy[r1];
 800801e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008022:	00db      	lsls	r3, r3, #3
 8008024:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008028:	4413      	add	r3, r2
 800802a:	3b90      	subs	r3, #144	; 0x90
 800802c:	ed93 5b00 	vldr	d5, [r3]
 8008030:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 800803a:	4413      	add	r3, r2
 800803c:	3bb0      	subs	r3, #176	; 0xb0
 800803e:	ed93 6b00 	vldr	d6, [r3]
 8008042:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008046:	4613      	mov	r3, r2
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	4413      	add	r3, r2
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	461a      	mov	r2, r3
 8008050:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008054:	4413      	add	r3, r2
 8008056:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800805a:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	ed83 7b00 	vstr	d7, [r3]
      gain[k + 6 * i] = (Pxy[k + 6] - gain[6 * r1 + k] * Pyy[r1 + 2]) / a22;
 8008066:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800806a:	3306      	adds	r3, #6
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008072:	4413      	add	r3, r2
 8008074:	3b90      	subs	r3, #144	; 0x90
 8008076:	ed93 6b00 	vldr	d6, [r3]
 800807a:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800807e:	4613      	mov	r3, r2
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	4413      	add	r3, r2
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800808c:	4413      	add	r3, r2
 800808e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	4413      	add	r3, r2
 8008096:	ed93 5b00 	vldr	d5, [r3]
 800809a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800809e:	3302      	adds	r3, #2
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80080a6:	4413      	add	r3, r2
 80080a8:	3bb0      	subs	r3, #176	; 0xb0
 80080aa:	ed93 7b00 	vldr	d7, [r3]
 80080ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80080b2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80080b6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80080ba:	4613      	mov	r3, r2
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	4413      	add	r3, r2
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	461a      	mov	r2, r3
 80080c4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80080c8:	4413      	add	r3, r2
 80080ca:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 80080ce:	ed92 6b00 	vldr	d6, [r2]
 80080d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80080d6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	4413      	add	r3, r2
 80080de:	ed83 7b00 	vstr	d7, [r3]
      gain[k + 6 * r1] -= gain[6 * i + k] * epsilon;
 80080e2:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80080e6:	4613      	mov	r3, r2
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	4413      	add	r3, r2
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	461a      	mov	r2, r3
 80080f0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80080f4:	4413      	add	r3, r2
 80080f6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	4413      	add	r3, r2
 80080fe:	ed93 6b00 	vldr	d6, [r3]
 8008102:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008106:	4613      	mov	r3, r2
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	4413      	add	r3, r2
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	461a      	mov	r2, r3
 8008110:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008114:	4413      	add	r3, r2
 8008116:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4413      	add	r3, r2
 800811e:	ed93 5b00 	vldr	d5, [r3]
 8008122:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008126:	ed93 7b00 	vldr	d7, [r3]
 800812a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800812e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008132:	4613      	mov	r3, r2
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	4413      	add	r3, r2
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	461a      	mov	r2, r3
 800813c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008140:	4413      	add	r3, r2
 8008142:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008146:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	4413      	add	r3, r2
 800814e:	ed83 7b00 	vstr	d7, [r3]
    for (k = 0; k < 6; k++) {
 8008152:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008156:	3301      	adds	r3, #1
 8008158:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800815c:	e75a      	b.n	8008014 <_ZN27positionEstimatorModelClass4stepEv+0x139c>
    }

    a22 = rtDW.TmpSignalConversionAtSFunctio_i[0] - rtDW.DataStoreReadX_p[4];
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008166:	ed93 6b00 	vldr	d6, [r3]
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8008172:	ed93 7b00 	vldr	d7, [r3]
 8008176:	ee36 7b47 	vsub.f64	d7, d6, d7
 800817a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800817e:	ed83 7b00 	vstr	d7, [r3]
    epsilon = rtDW.TmpSignalConversionAtSFunctio_i[1] - rtDW.DataStoreReadX_p[5];
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 800818a:	ed93 6b00 	vldr	d6, [r3]
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8008196:	ed93 7b00 	vldr	d7, [r3]
 800819a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800819e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80081a2:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 6; r1++) {
 80081a6:	2300      	movs	r3, #0
 80081a8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80081ac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80081b0:	2b05      	cmp	r3, #5
 80081b2:	f300 816d 	bgt.w	8008490 <_ZN27positionEstimatorModelClass4stepEv+0x1818>
      u = gain[r1] * a22;
 80081b6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80081ba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	4413      	add	r3, r2
 80081c2:	ed93 7b00 	vldr	d7, [r3]
 80081c6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80081ca:	ed93 6b00 	vldr	d6, [r3]
 80081ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80081d2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80081d6:	ed83 7b00 	vstr	d7, [r3]
      u += gain[r1 + 6] * epsilon;
 80081da:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80081de:	3306      	adds	r3, #6
 80081e0:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4413      	add	r3, r2
 80081e8:	ed93 6b00 	vldr	d6, [r3]
 80081ec:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80081f0:	ed93 7b00 	vldr	d7, [r3]
 80081f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80081f8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80081fc:	ed93 6b00 	vldr	d6, [r3]
 8008200:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008204:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008208:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_n[r1] = rtDW.DataStoreReadX_p[r1] + u;
 800820c:	1d3b      	adds	r3, r7, #4
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008214:	3392      	adds	r3, #146	; 0x92
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4413      	add	r3, r2
 800821a:	ed93 6b00 	vldr	d6, [r3]
 800821e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008222:	ed93 7b00 	vldr	d7, [r3]
 8008226:	ee36 7b07 	vadd.f64	d7, d6, d7
 800822a:	1d3b      	adds	r3, r7, #4
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008232:	339a      	adds	r3, #154	; 0x9a
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4413      	add	r3, r2
 8008238:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 6; i++) {
 800823c:	2300      	movs	r3, #0
 800823e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008242:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008246:	2b05      	cmp	r3, #5
 8008248:	f300 80a6 	bgt.w	8008398 <_ZN27positionEstimatorModelClass4stepEv+0x1720>
        gain_0[r1 + 6 * i] = 0.0;
 800824c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008250:	4613      	mov	r3, r2
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	4413      	add	r3, r2
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	461a      	mov	r2, r3
 800825a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800825e:	4413      	add	r3, r2
 8008260:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	441a      	add	r2, r3
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	f04f 0400 	mov.w	r4, #0
 8008270:	e9c2 3400 	strd	r3, r4, [r2]
        u = gain_0[6 * i + r1];
 8008274:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008278:	4613      	mov	r3, r2
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	4413      	add	r3, r2
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	461a      	mov	r2, r3
 8008282:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008286:	4413      	add	r3, r2
 8008288:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	4413      	add	r3, r2
 8008290:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008294:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008298:	e9c2 3400 	strd	r3, r4, [r2]
        u += dHdx[i << 1] * gain[r1];
 800829c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	4413      	add	r3, r2
 80082aa:	ed93 6b00 	vldr	d6, [r3]
 80082ae:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80082b2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	ed93 7b00 	vldr	d7, [r3]
 80082be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80082c2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80082c6:	ed93 6b00 	vldr	d6, [r3]
 80082ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80082ce:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80082d2:	ed83 7b00 	vstr	d7, [r3]
        gain_0[r1 + 6 * i] = u;
 80082d6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80082da:	4613      	mov	r3, r2
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	4413      	add	r3, r2
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	461a      	mov	r2, r3
 80082e4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80082e8:	4413      	add	r3, r2
 80082ea:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	441a      	add	r2, r3
 80082f2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80082f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082fa:	e9c2 3400 	strd	r3, r4, [r2]
        u = gain_0[6 * i + r1];
 80082fe:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008302:	4613      	mov	r3, r2
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	4413      	add	r3, r2
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	461a      	mov	r2, r3
 800830c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008310:	4413      	add	r3, r2
 8008312:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	4413      	add	r3, r2
 800831a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800831e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008322:	e9c2 3400 	strd	r3, r4, [r2]
        u += dHdx[(i << 1) + 1] * gain[r1 + 6];
 8008326:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	3301      	adds	r3, #1
 800832e:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	4413      	add	r3, r2
 8008336:	ed93 6b00 	vldr	d6, [r3]
 800833a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800833e:	3306      	adds	r3, #6
 8008340:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	4413      	add	r3, r2
 8008348:	ed93 7b00 	vldr	d7, [r3]
 800834c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008350:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008354:	ed93 6b00 	vldr	d6, [r3]
 8008358:	ee36 7b07 	vadd.f64	d7, d6, d7
 800835c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008360:	ed83 7b00 	vstr	d7, [r3]
        gain_0[r1 + 6 * i] = u;
 8008364:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008368:	4613      	mov	r3, r2
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	4413      	add	r3, r2
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	461a      	mov	r2, r3
 8008372:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008376:	4413      	add	r3, r2
 8008378:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	441a      	add	r2, r3
 8008380:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008384:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008388:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 6; i++) {
 800838c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008390:	3301      	adds	r3, #1
 8008392:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008396:	e754      	b.n	8008242 <_ZN27positionEstimatorModelClass4stepEv+0x15ca>
      }

      for (i = 0; i < 6; i++) {
 8008398:	2300      	movs	r3, #0
 800839a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800839e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80083a2:	2b05      	cmp	r3, #5
 80083a4:	dc6e      	bgt.n	8008484 <_ZN27positionEstimatorModelClass4stepEv+0x180c>
        u = 0.0;
 80083a6:	f04f 0300 	mov.w	r3, #0
 80083aa:	f04f 0400 	mov.w	r4, #0
 80083ae:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80083b2:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 80083b6:	2300      	movs	r3, #0
 80083b8:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80083bc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80083c0:	2b05      	cmp	r3, #5
 80083c2:	dc32      	bgt.n	800842a <_ZN27positionEstimatorModelClass4stepEv+0x17b2>
          u += gain_0[6 * k + r1] * rtDW.P_k[6 * i + k];
 80083c4:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 80083c8:	4613      	mov	r3, r2
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	4413      	add	r3, r2
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	461a      	mov	r2, r3
 80083d2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80083d6:	4413      	add	r3, r2
 80083d8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	4413      	add	r3, r2
 80083e0:	ed93 6b00 	vldr	d6, [r3]
 80083e4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80083e8:	4613      	mov	r3, r2
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	4413      	add	r3, r2
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	461a      	mov	r2, r3
 80083f2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80083f6:	4413      	add	r3, r2
 80083f8:	1d3a      	adds	r2, r7, #4
 80083fa:	6812      	ldr	r2, [r2, #0]
 80083fc:	33a0      	adds	r3, #160	; 0xa0
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	4413      	add	r3, r2
 8008402:	ed93 7b00 	vldr	d7, [r3]
 8008406:	ee26 7b07 	vmul.f64	d7, d6, d7
 800840a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800840e:	ed93 6b00 	vldr	d6, [r3]
 8008412:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008416:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800841a:	ed83 7b00 	vstr	d7, [r3]
        for (k = 0; k < 6; k++) {
 800841e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008422:	3301      	adds	r3, #1
 8008424:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008428:	e7c8      	b.n	80083bc <_ZN27positionEstimatorModelClass4stepEv+0x1744>
        }

        a_0[r1 + 6 * i] = rtDW.P_k[6 * i + r1] - u;
 800842a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800842e:	4613      	mov	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4413      	add	r3, r2
 8008434:	005b      	lsls	r3, r3, #1
 8008436:	461a      	mov	r2, r3
 8008438:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800843c:	4413      	add	r3, r2
 800843e:	1d3a      	adds	r2, r7, #4
 8008440:	6812      	ldr	r2, [r2, #0]
 8008442:	33a0      	adds	r3, #160	; 0xa0
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	4413      	add	r3, r2
 8008448:	ed93 6b00 	vldr	d6, [r3]
 800844c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008450:	4613      	mov	r3, r2
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	4413      	add	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	461a      	mov	r2, r3
 800845a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800845e:	4413      	add	r3, r2
 8008460:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008464:	ed92 7b00 	vldr	d7, [r2]
 8008468:	ee36 7b47 	vsub.f64	d7, d6, d7
 800846c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008470:	00db      	lsls	r3, r3, #3
 8008472:	4413      	add	r3, r2
 8008474:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 6; i++) {
 8008478:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800847c:	3301      	adds	r3, #1
 800847e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008482:	e78c      	b.n	800839e <_ZN27positionEstimatorModelClass4stepEv+0x1726>
    for (r1 = 0; r1 < 6; r1++) {
 8008484:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008488:	3301      	adds	r3, #1
 800848a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800848e:	e68d      	b.n	80081ac <_ZN27positionEstimatorModelClass4stepEv+0x1534>
      }
    }

    for (i = 0; i < 36; i++) {
 8008490:	2300      	movs	r3, #0
 8008492:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008496:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800849a:	2b23      	cmp	r3, #35	; 0x23
 800849c:	dc29      	bgt.n	80084f2 <_ZN27positionEstimatorModelClass4stepEv+0x187a>
      rtDW.P_k[i] = a_0[i];
 800849e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80084a2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	4413      	add	r3, r2
 80084aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084ae:	1d3a      	adds	r2, r7, #4
 80084b0:	6811      	ldr	r1, [r2, #0]
 80084b2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80084b6:	32a0      	adds	r2, #160	; 0xa0
 80084b8:	00d2      	lsls	r2, r2, #3
 80084ba:	440a      	add	r2, r1
 80084bc:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S13>/Data Store WriteP'
      rtDW.P_n_c[i] = rtDW.P_k[i];
 80084c0:	1d3b      	adds	r3, r7, #4
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084c8:	33a0      	adds	r3, #160	; 0xa0
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084d2:	1d3a      	adds	r2, r7, #4
 80084d4:	6811      	ldr	r1, [r2, #0]
 80084d6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80084da:	f502 728c 	add.w	r2, r2, #280	; 0x118
 80084de:	00d2      	lsls	r2, r2, #3
 80084e0:	440a      	add	r2, r1
 80084e2:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 80084e6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084ea:	3301      	adds	r3, #1
 80084ec:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80084f0:	e7d1      	b.n	8008496 <_ZN27positionEstimatorModelClass4stepEv+0x181e>
    }

    // DataStoreWrite: '<S13>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 80084f2:	2300      	movs	r3, #0
 80084f4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80084f8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084fc:	2b05      	cmp	r3, #5
 80084fe:	dc18      	bgt.n	8008532 <_ZN27positionEstimatorModelClass4stepEv+0x18ba>
      rtDW.x_p[i] = rtDW.xNew_n[i];
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008508:	339a      	adds	r3, #154	; 0x9a
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	4413      	add	r3, r2
 800850e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008512:	1d3a      	adds	r2, r7, #4
 8008514:	6811      	ldr	r1, [r2, #0]
 8008516:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800851a:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800851e:	00d2      	lsls	r2, r2, #3
 8008520:	440a      	add	r2, r1
 8008522:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8008526:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800852a:	3301      	adds	r3, #1
 800852c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008530:	e7e2      	b.n	80084f8 <_ZN27positionEstimatorModelClass4stepEv+0x1880>

  // Logic: '<Root>/Logical Operator' incorporates:
  //   Inport: '<Root>/GPS_switch'
  //   Inport: '<Root>/GpsFlag'

  rtDW.LogicalOperator = ((rtU.GPS_switch != 0.0) && (rtU.GpsFlag != 0.0));
 8008532:	1d3b      	adds	r3, r7, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 800853a:	ed93 7b00 	vldr	d7, [r3]
 800853e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	d00c      	beq.n	8008562 <_ZN27positionEstimatorModelClass4stepEv+0x18ea>
 8008548:	1d3b      	adds	r3, r7, #4
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 8008550:	ed93 7b00 	vldr	d7, [r3]
 8008554:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800855c:	d001      	beq.n	8008562 <_ZN27positionEstimatorModelClass4stepEv+0x18ea>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <_ZN27positionEstimatorModelClass4stepEv+0x18ec>
 8008562:	2300      	movs	r3, #0
 8008564:	461a      	mov	r2, r3
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f883 2c3f 	strb.w	r2, [r3, #3135]	; 0xc3f

  // Outputs for Enabled SubSystem: '<S2>/Correct2' incorporates:
  //   EnablePort: '<S14>/Enable'

  if (rtDW.LogicalOperator) {
 800856e:	1d3b      	adds	r3, r7, #4
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f893 3c3f 	ldrb.w	r3, [r3, #3135]	; 0xc3f
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 83ae 	beq.w	8008cd8 <_ZN27positionEstimatorModelClass4stepEv+0x2060>
    // DataStoreRead: '<S14>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 800857c:	2300      	movs	r3, #0
 800857e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008582:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008586:	2b05      	cmp	r3, #5
 8008588:	dc18      	bgt.n	80085bc <_ZN27positionEstimatorModelClass4stepEv+0x1944>
      rtDW.DataStoreReadX_j[i] = rtDW.x_p[i];
 800858a:	1d3b      	adds	r3, r7, #4
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008592:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800859e:	1d3a      	adds	r2, r7, #4
 80085a0:	6811      	ldr	r1, [r2, #0]
 80085a2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80085a6:	325e      	adds	r2, #94	; 0x5e
 80085a8:	00d2      	lsls	r2, r2, #3
 80085aa:	440a      	add	r2, r1
 80085ac:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 80085b0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80085b4:	3301      	adds	r3, #1
 80085b6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80085ba:	e7e2      	b.n	8008582 <_ZN27positionEstimatorModelClass4stepEv+0x190a>
    // SignalConversion generated from: '<S18>/ SFunction ' incorporates:
    //   Inport: '<Root>/vx'
    //   Inport: '<Root>/vy'
    //   MATLAB Function: '<S14>/Correct'

    rtDW.TmpSignalConversionAtSFunctionI[0] = rtDW.Px;
 80085bc:	1d3b      	adds	r3, r7, #4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 80085c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085c8:	1d3a      	adds	r2, r7, #4
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	e9c2 34c8 	strd	r3, r4, [r2, #800]	; 0x320
    rtDW.TmpSignalConversionAtSFunctionI[1] = rtDW.Py;
 80085d0:	1d3b      	adds	r3, r7, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 80085d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085dc:	1d3a      	adds	r2, r7, #4
 80085de:	6812      	ldr	r2, [r2, #0]
 80085e0:	e9c2 34ca 	strd	r3, r4, [r2, #808]	; 0x328
    rtDW.TmpSignalConversionAtSFunctionI[2] = rtU.vx;
 80085e4:	1d3b      	adds	r3, r7, #4
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 80085ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085f0:	1d3a      	adds	r2, r7, #4
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	e9c2 34cc 	strd	r3, r4, [r2, #816]	; 0x330
    rtDW.TmpSignalConversionAtSFunctionI[3] = rtU.vy;
 80085f8:	1d3b      	adds	r3, r7, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8008600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008604:	1d3a      	adds	r2, r7, #4
 8008606:	6812      	ldr	r2, [r2, #0]
 8008608:	e9c2 34ce 	strd	r3, r4, [r2, #824]	; 0x338

    // MATLAB Function: '<S14>/Correct'
    rtDW.blockOrdering = rtDW.blockOrdering_f;
 800860c:	1d3b      	adds	r3, r7, #4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f893 2c44 	ldrb.w	r2, [r3, #3140]	; 0xc44
 8008614:	1d3b      	adds	r3, r7, #4
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43
    blockOrdering = rtDW.blockOrdering;
 800861c:	1d3b      	adds	r3, r7, #4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f893 3c43 	ldrb.w	r3, [r3, #3139]	; 0xc43
 8008624:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering = blockOrdering;
 8008628:	1d3b      	adds	r3, r7, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8008630:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43
    for (i = 0; i < 36; i++) {
 8008634:	2300      	movs	r3, #0
 8008636:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800863a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800863e:	2b23      	cmp	r3, #35	; 0x23
 8008640:	dc32      	bgt.n	80086a8 <_ZN27positionEstimatorModelClass4stepEv+0x1a30>
      // DataStoreRead: '<S14>/Data Store ReadP'
      rtDW.P_f[i] = rtDW.P_n_c[i];
 8008642:	1d3b      	adds	r3, r7, #4
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800864a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	4413      	add	r3, r2
 8008652:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008656:	1d3a      	adds	r2, r7, #4
 8008658:	6811      	ldr	r1, [r2, #0]
 800865a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800865e:	326e      	adds	r2, #110	; 0x6e
 8008660:	00d2      	lsls	r2, r2, #3
 8008662:	440a      	add	r2, r1
 8008664:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S14>/Correct'
      u = rtDW.P_f[i];
 8008668:	1d3b      	adds	r3, r7, #4
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008670:	336e      	adds	r3, #110	; 0x6e
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4413      	add	r3, r2
 8008676:	e9d3 3400 	ldrd	r3, r4, [r3]
 800867a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800867e:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_f[i] = u;
 8008682:	1d3b      	adds	r3, r7, #4
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800868a:	336e      	adds	r3, #110	; 0x6e
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	441a      	add	r2, r3
 8008690:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008694:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008698:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 800869c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086a0:	3301      	adds	r3, #1
 80086a2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80086a6:	e7c8      	b.n	800863a <_ZN27positionEstimatorModelClass4stepEv+0x19c2>
    }

    // MATLAB Function: '<S14>/Correct' incorporates:
    //   Constant: '<S2>/R2'

    for (r1 = 0; r1 < 6; r1++) {
 80086a8:	2300      	movs	r3, #0
 80086aa:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80086ae:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80086b2:	2b05      	cmp	r3, #5
 80086b4:	f300 80d9 	bgt.w	800886a <_ZN27positionEstimatorModelClass4stepEv+0x1bf2>
      for (i = 0; i < 6; i++) {
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80086be:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086c2:	2b05      	cmp	r3, #5
 80086c4:	dc16      	bgt.n	80086f4 <_ZN27positionEstimatorModelClass4stepEv+0x1a7c>
        imvec[i] = rtDW.DataStoreReadX_j[i];
 80086c6:	1d3b      	adds	r3, r7, #4
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086ce:	335e      	adds	r3, #94	; 0x5e
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	4413      	add	r3, r2
 80086d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086d8:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 80086dc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80086e0:	00d2      	lsls	r2, r2, #3
 80086e2:	440a      	add	r2, r1
 80086e4:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 6; i++) {
 80086e8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086ec:	3301      	adds	r3, #1
 80086ee:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80086f2:	e7e4      	b.n	80086be <_ZN27positionEstimatorModelClass4stepEv+0x1a46>
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_j[r1]);
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80086fc:	335e      	adds	r3, #94	; 0x5e
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	ed93 7b00 	vldr	d7, [r3]
 8008706:	eeb0 0b47 	vmov.f64	d0, d7
 800870a:	f7fd f956 	bl	80059ba <_ZSt3absd>
 800870e:	eeb0 6b40 	vmov.f64	d6, d0
 8008712:	ed9f 7bb5 	vldr	d7, [pc, #724]	; 80089e8 <_ZN27positionEstimatorModelClass4stepEv+0x1d70>
 8008716:	ee26 7b07 	vmul.f64	d7, d6, d7
 800871a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800871e:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8008722:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008726:	ed93 7b00 	vldr	d7, [r3]
 800872a:	ed9f 6baf 	vldr	d6, [pc, #700]	; 80089e8 <_ZN27positionEstimatorModelClass4stepEv+0x1d70>
 800872e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008736:	d408      	bmi.n	800874a <_ZN27positionEstimatorModelClass4stepEv+0x1ad2>
 8008738:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800873c:	ed93 0b00 	vldr	d0, [r3]
 8008740:	f7fd f9ee 	bl	8005b20 <rtIsNaN>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <_ZN27positionEstimatorModelClass4stepEv+0x1ad6>
 800874a:	2301      	movs	r3, #1
 800874c:	e000      	b.n	8008750 <_ZN27positionEstimatorModelClass4stepEv+0x1ad8>
 800874e:	2300      	movs	r3, #0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <_ZN27positionEstimatorModelClass4stepEv+0x1aea>
        epsilon = 1.4901161193847656E-8;
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	4ca5      	ldr	r4, [pc, #660]	; (80089f0 <_ZN27positionEstimatorModelClass4stepEv+0x1d78>)
 800875a:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800875e:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec[r1] = rtDW.DataStoreReadX_j[r1] + epsilon;
 8008762:	1d3b      	adds	r3, r7, #4
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800876a:	335e      	adds	r3, #94	; 0x5e
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4413      	add	r3, r2
 8008770:	ed93 6b00 	vldr	d6, [r3]
 8008774:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008778:	ed93 7b00 	vldr	d7, [r3]
 800877c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008780:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8008784:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	4413      	add	r3, r2
 800878c:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[r1 << 2] = (imvec[0] - rtDW.DataStoreReadX_j[0]) / epsilon;
 8008790:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8008794:	ed93 6b00 	vldr	d6, [r3]
 8008798:	1d3b      	adds	r3, r7, #4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	ed93 7bbc 	vldr	d7, [r3, #752]	; 0x2f0
 80087a0:	ee36 5b47 	vsub.f64	d5, d6, d7
 80087a4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80087ae:	ed92 6b00 	vldr	d6, [r2]
 80087b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80087b6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4413      	add	r3, r2
 80087be:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[(r1 << 2) + 1] = (imvec[1] - rtDW.DataStoreReadX_j[1]) / epsilon;
 80087c2:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80087c6:	ed93 6b02 	vldr	d6, [r3, #8]
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	ed93 7bbe 	vldr	d7, [r3, #760]	; 0x2f8
 80087d2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80087d6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	3301      	adds	r3, #1
 80087de:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80087e2:	ed92 6b00 	vldr	d6, [r2]
 80087e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80087ea:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	4413      	add	r3, r2
 80087f2:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[(r1 << 2) + 2] = (imvec[2] - rtDW.DataStoreReadX_j[2]) / epsilon;
 80087f6:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80087fa:	ed93 6b04 	vldr	d6, [r3, #16]
 80087fe:	1d3b      	adds	r3, r7, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	ed93 7bc0 	vldr	d7, [r3, #768]	; 0x300
 8008806:	ee36 5b47 	vsub.f64	d5, d6, d7
 800880a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	3302      	adds	r3, #2
 8008812:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8008816:	ed92 6b00 	vldr	d6, [r2]
 800881a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800881e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	4413      	add	r3, r2
 8008826:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[(r1 << 2) + 3] = (imvec[3] - rtDW.DataStoreReadX_j[3]) / epsilon;
 800882a:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800882e:	ed93 6b06 	vldr	d6, [r3, #24]
 8008832:	1d3b      	adds	r3, r7, #4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	ed93 7bc2 	vldr	d7, [r3, #776]	; 0x308
 800883a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800883e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	3303      	adds	r3, #3
 8008846:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800884a:	ed92 6b00 	vldr	d6, [r2]
 800884e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008852:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	4413      	add	r3, r2
 800885a:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 6; r1++) {
 800885e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008862:	3301      	adds	r3, #1
 8008864:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008868:	e721      	b.n	80086ae <_ZN27positionEstimatorModelClass4stepEv+0x1a36>
    }

    for (i = 0; i < 6; i++) {
 800886a:	2300      	movs	r3, #0
 800886c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008870:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008874:	2b05      	cmp	r3, #5
 8008876:	dc16      	bgt.n	80088a6 <_ZN27positionEstimatorModelClass4stepEv+0x1c2e>
      imvec[i] = rtDW.DataStoreReadX_j[i];
 8008878:	1d3b      	adds	r3, r7, #4
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008880:	335e      	adds	r3, #94	; 0x5e
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	4413      	add	r3, r2
 8008886:	e9d3 3400 	ldrd	r3, r4, [r3]
 800888a:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 800888e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008892:	00d2      	lsls	r2, r2, #3
 8008894:	440a      	add	r2, r1
 8008896:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800889a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800889e:	3301      	adds	r3, #1
 80088a0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80088a4:	e7e4      	b.n	8008870 <_ZN27positionEstimatorModelClass4stepEv+0x1bf8>
    }

    for (r1 = 0; r1 < 4; r1++) {
 80088a6:	2300      	movs	r3, #0
 80088a8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80088ac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	f300 809f 	bgt.w	80089f4 <_ZN27positionEstimatorModelClass4stepEv+0x1d7c>
      for (i = 0; i < 6; i++) {
 80088b6:	2300      	movs	r3, #0
 80088b8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80088bc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80088c0:	2b05      	cmp	r3, #5
 80088c2:	dc6b      	bgt.n	800899c <_ZN27positionEstimatorModelClass4stepEv+0x1d24>
        dHdx_2[r1 + (i << 2)] = 0.0;
 80088c4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80088c8:	009a      	lsls	r2, r3, #2
 80088ca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80088ce:	4413      	add	r3, r2
 80088d0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80088d4:	00db      	lsls	r3, r3, #3
 80088d6:	441a      	add	r2, r3
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	f04f 0400 	mov.w	r4, #0
 80088e0:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80088ea:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80088ee:	2b05      	cmp	r3, #5
 80088f0:	dc4e      	bgt.n	8008990 <_ZN27positionEstimatorModelClass4stepEv+0x1d18>
          u = dHdx_2[(i << 2) + r1];
 80088f2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80088f6:	009a      	lsls	r2, r3, #2
 80088f8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80088fc:	4413      	add	r3, r2
 80088fe:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	4413      	add	r3, r2
 8008906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800890a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800890e:	e9c2 3400 	strd	r3, r4, [r2]
          u += dHdx_0[(k << 2) + r1] * rtDW.P_f[6 * i + k];
 8008912:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008916:	009a      	lsls	r2, r3, #2
 8008918:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800891c:	4413      	add	r3, r2
 800891e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	4413      	add	r3, r2
 8008926:	ed93 6b00 	vldr	d6, [r3]
 800892a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800892e:	4613      	mov	r3, r2
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	4413      	add	r3, r2
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	461a      	mov	r2, r3
 8008938:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800893c:	4413      	add	r3, r2
 800893e:	1d3a      	adds	r2, r7, #4
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	336e      	adds	r3, #110	; 0x6e
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	4413      	add	r3, r2
 8008948:	ed93 7b00 	vldr	d7, [r3]
 800894c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008950:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008954:	ed93 6b00 	vldr	d6, [r3]
 8008958:	ee36 7b07 	vadd.f64	d7, d6, d7
 800895c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008960:	ed83 7b00 	vstr	d7, [r3]
          dHdx_2[r1 + (i << 2)] = u;
 8008964:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008968:	009a      	lsls	r2, r3, #2
 800896a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800896e:	4413      	add	r3, r2
 8008970:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	441a      	add	r2, r3
 8008978:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800897c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008980:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008984:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008988:	3301      	adds	r3, #1
 800898a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800898e:	e7ac      	b.n	80088ea <_ZN27positionEstimatorModelClass4stepEv+0x1c72>
      for (i = 0; i < 6; i++) {
 8008990:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008994:	3301      	adds	r3, #1
 8008996:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800899a:	e78f      	b.n	80088bc <_ZN27positionEstimatorModelClass4stepEv+0x1c44>
        }
      }

      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 800899c:	1d3b      	adds	r3, r7, #4
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089a4:	3364      	adds	r3, #100	; 0x64
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	4413      	add	r3, r2
 80089aa:	ed93 6b00 	vldr	d6, [r3]
        rtDW.DataStoreReadX_j[r1];
 80089ae:	1d3b      	adds	r3, r7, #4
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089b6:	335e      	adds	r3, #94	; 0x5e
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	4413      	add	r3, r2
 80089bc:	ed93 7b00 	vldr	d7, [r3]
      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 80089c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80089c4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80089ce:	4413      	add	r3, r2
 80089d0:	3bb0      	subs	r3, #176	; 0xb0
 80089d2:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 4; r1++) {
 80089d6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089da:	3301      	adds	r3, #1
 80089dc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80089e0:	e764      	b.n	80088ac <_ZN27positionEstimatorModelClass4stepEv+0x1c34>
 80089e2:	bf00      	nop
 80089e4:	f3af 8000 	nop.w
 80089e8:	00000000 	.word	0x00000000
 80089ec:	3e500000 	.word	0x3e500000
 80089f0:	3e500000 	.word	0x3e500000
    }

    for (r1 = 0; r1 < 6; r1++) {
 80089f4:	2300      	movs	r3, #0
 80089f6:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80089fa:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089fe:	2b05      	cmp	r3, #5
 8008a00:	f300 8085 	bgt.w	8008b0e <_ZN27positionEstimatorModelClass4stepEv+0x1e96>
      for (i = 0; i < 4; i++) {
 8008a04:	2300      	movs	r3, #0
 8008a06:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008a0a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	dc77      	bgt.n	8008b02 <_ZN27positionEstimatorModelClass4stepEv+0x1e8a>
        tmp[r1 + 6 * i] = 0.0;
 8008a12:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008a16:	4613      	mov	r3, r2
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	4413      	add	r3, r2
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a24:	4413      	add	r3, r2
 8008a26:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	441a      	add	r2, r3
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	f04f 0400 	mov.w	r4, #0
 8008a36:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008a40:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	dc56      	bgt.n	8008af6 <_ZN27positionEstimatorModelClass4stepEv+0x1e7e>
          u = tmp[6 * i + r1];
 8008a48:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	4413      	add	r3, r2
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	461a      	mov	r2, r3
 8008a56:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	4413      	add	r3, r2
 8008a64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a68:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008a6c:	e9c2 3400 	strd	r3, r4, [r2]
          u += rtDW.P_f[6 * k + r1] * dHdx_0[(k << 2) + i];
 8008a70:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8008a74:	4613      	mov	r3, r2
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	4413      	add	r3, r2
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a82:	4413      	add	r3, r2
 8008a84:	1d3a      	adds	r2, r7, #4
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	336e      	adds	r3, #110	; 0x6e
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	ed93 6b00 	vldr	d6, [r3]
 8008a92:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008a96:	009a      	lsls	r2, r3, #2
 8008a98:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	ed93 7b00 	vldr	d7, [r3]
 8008aaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008aae:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008ab2:	ed93 6b00 	vldr	d6, [r3]
 8008ab6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008aba:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008abe:	ed83 7b00 	vstr	d7, [r3]
          tmp[r1 + 6 * i] = u;
 8008ac2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4413      	add	r3, r2
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	441a      	add	r2, r3
 8008ade:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ae6:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008aea:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008aee:	3301      	adds	r3, #1
 8008af0:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008af4:	e7a4      	b.n	8008a40 <_ZN27positionEstimatorModelClass4stepEv+0x1dc8>
      for (i = 0; i < 4; i++) {
 8008af6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008afa:	3301      	adds	r3, #1
 8008afc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008b00:	e783      	b.n	8008a0a <_ZN27positionEstimatorModelClass4stepEv+0x1d92>
    for (r1 = 0; r1 < 6; r1++) {
 8008b02:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b06:	3301      	adds	r3, #1
 8008b08:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008b0c:	e775      	b.n	80089fa <_ZN27positionEstimatorModelClass4stepEv+0x1d82>
        }
      }
    }

    for (r1 = 0; r1 < 4; r1++) {
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008b14:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	dc69      	bgt.n	8008bf0 <_ZN27positionEstimatorModelClass4stepEv+0x1f78>
      for (i = 0; i < 4; i++) {
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008b22:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	dc5c      	bgt.n	8008be4 <_ZN27positionEstimatorModelClass4stepEv+0x1f6c>
        u = 0.0;
 8008b2a:	f04f 0300 	mov.w	r3, #0
 8008b2e:	f04f 0400 	mov.w	r4, #0
 8008b32:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008b36:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008b40:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b44:	2b05      	cmp	r3, #5
 8008b46:	dc29      	bgt.n	8008b9c <_ZN27positionEstimatorModelClass4stepEv+0x1f24>
          u += dHdx_2[(k << 2) + r1] * dHdx_0[(k << 2) + i];
 8008b48:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b4c:	009a      	lsls	r2, r3, #2
 8008b4e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b52:	4413      	add	r3, r2
 8008b54:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	4413      	add	r3, r2
 8008b5c:	ed93 6b00 	vldr	d6, [r3]
 8008b60:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b64:	009a      	lsls	r2, r3, #2
 8008b66:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	4413      	add	r3, r2
 8008b74:	ed93 7b00 	vldr	d7, [r3]
 8008b78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b7c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008b80:	ed93 6b00 	vldr	d6, [r3]
 8008b84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008b88:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008b8c:	ed83 7b00 	vstr	d7, [r3]
        for (k = 0; k < 6; k++) {
 8008b90:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b94:	3301      	adds	r3, #1
 8008b96:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008b9a:	e7d1      	b.n	8008b40 <_ZN27positionEstimatorModelClass4stepEv+0x1ec8>
        }

        dHdx_3[r1 + (i << 2)] = rtP.R2_Value[(i << 2) + r1] + u;
 8008b9c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ba0:	009a      	lsls	r2, r3, #2
 8008ba2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ba6:	4413      	add	r3, r2
 8008ba8:	4a6b      	ldr	r2, [pc, #428]	; (8008d58 <_ZN27positionEstimatorModelClass4stepEv+0x20e0>)
 8008baa:	3325      	adds	r3, #37	; 0x25
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	4413      	add	r3, r2
 8008bb0:	ed93 6b00 	vldr	d6, [r3]
 8008bb4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008bb8:	009a      	lsls	r2, r3, #2
 8008bba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008bc4:	ed92 7b00 	vldr	d7, [r2]
 8008bc8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008bcc:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	4413      	add	r3, r2
 8008bd4:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 4; i++) {
 8008bd8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008bdc:	3301      	adds	r3, #1
 8008bde:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008be2:	e79e      	b.n	8008b22 <_ZN27positionEstimatorModelClass4stepEv+0x1eaa>
    for (r1 = 0; r1 < 4; r1++) {
 8008be4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008be8:	3301      	adds	r3, #1
 8008bea:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008bee:	e791      	b.n	8008b14 <_ZN27positionEstimatorModelClass4stepEv+0x1e9c>
      }
    }

    EKFCorrector_correctStateAndCov(imvec, rtDW.P_f, Pyy, tmp, dHdx_3, dHdx_0);
 8008bf0:	1d3b      	adds	r3, r7, #4
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f503 725c 	add.w	r2, r3, #880	; 0x370
 8008bf8:	f507 6402 	add.w	r4, r7, #2080	; 0x820
 8008bfc:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8008c00:	1d38      	adds	r0, r7, #4
 8008c02:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8008c06:	9302      	str	r3, [sp, #8]
 8008c08:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	4623      	mov	r3, r4
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	f7fd fa04 	bl	8006024 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>
    for (i = 0; i < 6; i++) {
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c22:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	dc16      	bgt.n	8008c58 <_ZN27positionEstimatorModelClass4stepEv+0x1fe0>
      rtDW.xNew_g[i] = imvec[i];
 8008c2a:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8008c2e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	4413      	add	r3, r2
 8008c36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c3a:	1d3a      	adds	r2, r7, #4
 8008c3c:	6811      	ldr	r1, [r2, #0]
 8008c3e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008c42:	3268      	adds	r2, #104	; 0x68
 8008c44:	00d2      	lsls	r2, r2, #3
 8008c46:	440a      	add	r2, r1
 8008c48:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8008c4c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c50:	3301      	adds	r3, #1
 8008c52:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c56:	e7e4      	b.n	8008c22 <_ZN27positionEstimatorModelClass4stepEv+0x1faa>
    }

    // DataStoreWrite: '<S14>/Data Store WriteP'
    for (i = 0; i < 36; i++) {
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c5e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c62:	2b23      	cmp	r3, #35	; 0x23
 8008c64:	dc18      	bgt.n	8008c98 <_ZN27positionEstimatorModelClass4stepEv+0x2020>
      rtDW.P_n_c[i] = rtDW.P_f[i];
 8008c66:	1d3b      	adds	r3, r7, #4
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c6e:	336e      	adds	r3, #110	; 0x6e
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	4413      	add	r3, r2
 8008c74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c78:	1d3a      	adds	r2, r7, #4
 8008c7a:	6811      	ldr	r1, [r2, #0]
 8008c7c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008c80:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8008c84:	00d2      	lsls	r2, r2, #3
 8008c86:	440a      	add	r2, r1
 8008c88:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 8008c8c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c90:	3301      	adds	r3, #1
 8008c92:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c96:	e7e2      	b.n	8008c5e <_ZN27positionEstimatorModelClass4stepEv+0x1fe6>
    }

    // End of DataStoreWrite: '<S14>/Data Store WriteP'

    // DataStoreWrite: '<S14>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c9e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ca2:	2b05      	cmp	r3, #5
 8008ca4:	dc18      	bgt.n	8008cd8 <_ZN27positionEstimatorModelClass4stepEv+0x2060>
      rtDW.x_p[i] = rtDW.xNew_g[i];
 8008ca6:	1d3b      	adds	r3, r7, #4
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cae:	3368      	adds	r3, #104	; 0x68
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cb8:	1d3a      	adds	r2, r7, #4
 8008cba:	6811      	ldr	r1, [r2, #0]
 8008cbc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008cc0:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 8008cc4:	00d2      	lsls	r2, r2, #3
 8008cc6:	440a      	add	r2, r1
 8008cc8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8008ccc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008cd6:	e7e2      	b.n	8008c9e <_ZN27positionEstimatorModelClass4stepEv+0x2026>

  // End of Outputs for SubSystem: '<S2>/Correct2'

  // Outputs for Atomic SubSystem: '<S2>/Output'
  // DataStoreRead: '<S15>/Data Store Read'
  for (i = 0; i < 6; i++) {
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008cde:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ce2:	2b05      	cmp	r3, #5
 8008ce4:	dc18      	bgt.n	8008d18 <_ZN27positionEstimatorModelClass4stepEv+0x20a0>
    rtDW.DataStoreRead[i] = rtDW.x_p[i];
 8008ce6:	1d3b      	adds	r3, r7, #4
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	4413      	add	r3, r2
 8008cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cfa:	1d3a      	adds	r2, r7, #4
 8008cfc:	6811      	ldr	r1, [r2, #0]
 8008cfe:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008d02:	3234      	adds	r2, #52	; 0x34
 8008d04:	00d2      	lsls	r2, r2, #3
 8008d06:	440a      	add	r2, r1
 8008d08:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 8008d0c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d10:	3301      	adds	r3, #1
 8008d12:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d16:	e7e2      	b.n	8008cde <_ZN27positionEstimatorModelClass4stepEv+0x2066>
  }

  // End of DataStoreRead: '<S15>/Data Store Read'

  // DataStoreRead: '<S15>/Data Store Read1'
  for (i = 0; i < 36; i++) {
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d1e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d22:	2b23      	cmp	r3, #35	; 0x23
 8008d24:	dc1a      	bgt.n	8008d5c <_ZN27positionEstimatorModelClass4stepEv+0x20e4>
    rtDW.DataStoreRead1[i] = rtDW.P_n_c[i];
 8008d26:	1d3b      	adds	r3, r7, #4
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d2e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	4413      	add	r3, r2
 8008d36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d3a:	1d3a      	adds	r2, r7, #4
 8008d3c:	6811      	ldr	r1, [r2, #0]
 8008d3e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008d42:	323a      	adds	r2, #58	; 0x3a
 8008d44:	00d2      	lsls	r2, r2, #3
 8008d46:	440a      	add	r2, r1
 8008d48:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 8008d4c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d50:	3301      	adds	r3, #1
 8008d52:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d56:	e7e2      	b.n	8008d1e <_ZN27positionEstimatorModelClass4stepEv+0x20a6>
 8008d58:	240002b0 	.word	0x240002b0
  }

  // End of DataStoreRead: '<S15>/Data Store Read1'

  // Inport: '<S15>/uBlockOrdering'
  rtDW.uBlockOrdering = rtDW.blockOrdering;
 8008d5c:	1d3b      	adds	r3, r7, #4
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f893 2c43 	ldrb.w	r2, [r3, #3139]	; 0xc43
 8008d64:	1d3b      	adds	r3, r7, #4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f883 2c42 	strb.w	r2, [r3, #3138]	; 0xc42

  // End of Outputs for SubSystem: '<S2>/Output'

  // Outport: '<Root>/estiX'
  rtY.estiX = rtDW.DataStoreRead[0];
 8008d6c:	1d3b      	adds	r3, r7, #4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	e9d3 3468 	ldrd	r3, r4, [r3, #416]	; 0x1a0
 8008d74:	1d3a      	adds	r2, r7, #4
 8008d76:	6812      	ldr	r2, [r2, #0]
 8008d78:	f502 624d 	add.w	r2, r2, #3280	; 0xcd0
 8008d7c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiY'
  rtY.estiY = rtDW.DataStoreRead[1];
 8008d80:	1d3b      	adds	r3, r7, #4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	e9d3 346a 	ldrd	r3, r4, [r3, #424]	; 0x1a8
 8008d88:	1d3a      	adds	r2, r7, #4
 8008d8a:	6812      	ldr	r2, [r2, #0]
 8008d8c:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8008d90:	e9c2 3400 	strd	r3, r4, [r2]

  // Gain: '<Root>/NED_convert' incorporates:
  //   Inport: '<Root>/baroZ'

  rtDW.NED_convert = rtP.NED_convert_Gain * rtU.baroZ;
 8008d94:	4ba2      	ldr	r3, [pc, #648]	; (8009020 <_ZN27positionEstimatorModelClass4stepEv+0x23a8>)
 8008d96:	ed93 6b76 	vldr	d6, [r3, #472]	; 0x1d8
 8008d9a:	1d3b      	adds	r3, r7, #4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8008da2:	ed93 7b00 	vldr	d7, [r3]
 8008da6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008daa:	1d3b      	adds	r3, r7, #4
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8008db2:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S20>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'
  //   Inport: '<Root>/alt'

  rtDW.alt = rtU.alt + rtU.HOME_lla[2];
 8008db6:	1d3b      	adds	r3, r7, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 8008dbe:	ed93 6b00 	vldr	d6, [r3]
 8008dc2:	1d3b      	adds	r3, r7, #4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f503 634c 	add.w	r3, r3, #3264	; 0xcc0
 8008dca:	ed93 7b00 	vldr	d7, [r3]
 8008dce:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008dd2:	1d3b      	adds	r3, r7, #4
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 8008dda:	ed83 7b00 	vstr	d7, [r3]

  // UnaryMinus: '<S20>/Ze2height'
  rtDW.Pz = -rtDW.alt;
 8008dde:	1d3b      	adds	r3, r7, #4
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 8008de6:	ed93 7b00 	vldr	d7, [r3]
 8008dea:	eeb1 7b47 	vneg.f64	d7, d7
 8008dee:	1d3b      	adds	r3, r7, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 8008df6:	ed83 7b00 	vstr	d7, [r3]

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1_a = (rtU.AhrsFlag != 0.0);
 8008dfa:	1d3b      	adds	r3, r7, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 8008e02:	ed93 7b00 	vldr	d7, [r3]
 8008e06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0e:	bf14      	ite	ne
 8008e10:	2301      	movne	r3, #1
 8008e12:	2300      	moveq	r3, #0
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	1d3b      	adds	r3, r7, #4
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f883 2c40 	strb.w	r2, [r3, #3136]	; 0xc40

  // Outputs for Enabled SubSystem: '<S1>/Correct1' incorporates:
  //   EnablePort: '<S4>/Enable'

  if (rtDW.DataTypeConversion_Enable1_a) {
 8008e20:	1d3b      	adds	r3, r7, #4
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f893 3c40 	ldrb.w	r3, [r3, #3136]	; 0xc40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8382 	beq.w	8009532 <_ZN27positionEstimatorModelClass4stepEv+0x28ba>
    // DataStoreRead: '<S4>/Data Store ReadX'
    rtDW.DataStoreReadX_o[0] = rtDW.x[0];
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8008e36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e3a:	1d3a      	adds	r2, r7, #4
 8008e3c:	6812      	ldr	r2, [r2, #0]
 8008e3e:	f502 62fd 	add.w	r2, r2, #2024	; 0x7e8
 8008e42:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[1] = rtDW.x[1];
 8008e46:	1d3b      	adds	r3, r7, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8008e4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e52:	1d3a      	adds	r2, r7, #4
 8008e54:	6812      	ldr	r2, [r2, #0]
 8008e56:	f502 62fe 	add.w	r2, r2, #2032	; 0x7f0
 8008e5a:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[2] = rtDW.x[2];
 8008e5e:	1d3b      	adds	r3, r7, #4
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8008e66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e6a:	1d3a      	adds	r2, r7, #4
 8008e6c:	6812      	ldr	r2, [r2, #0]
 8008e6e:	f502 62ff 	add.w	r2, r2, #2040	; 0x7f8
 8008e72:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/BlockOrdering'

    rtDW.blockOrdering_k = rtP.BlockOrdering_Value_b;
 8008e76:	4b6a      	ldr	r3, [pc, #424]	; (8009020 <_ZN27positionEstimatorModelClass4stepEv+0x23a8>)
 8008e78:	f893 23e6 	ldrb.w	r2, [r3, #998]	; 0x3e6
 8008e7c:	1d3b      	adds	r3, r7, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
    blockOrdering = rtDW.blockOrdering_k;
 8008e84:	1d3b      	adds	r3, r7, #4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f893 3c48 	ldrb.w	r3, [r3, #3144]	; 0xc48
 8008e8c:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_k = blockOrdering;
 8008e90:	1d3b      	adds	r3, r7, #4
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8008e98:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
    for (i = 0; i < 9; i++) {
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008ea2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	dc35      	bgt.n	8008f16 <_ZN27positionEstimatorModelClass4stepEv+0x229e>
      // DataStoreRead: '<S4>/Data Store ReadP'
      rtDW.P_g[i] = rtDW.P_i_m[i];
 8008eaa:	1d3b      	adds	r3, r7, #4
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008eb2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	4413      	add	r3, r2
 8008eba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ebe:	1d3a      	adds	r2, r7, #4
 8008ec0:	6811      	ldr	r1, [r2, #0]
 8008ec2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008ec6:	f202 1203 	addw	r2, r2, #259	; 0x103
 8008eca:	00d2      	lsls	r2, r2, #3
 8008ecc:	440a      	add	r2, r1
 8008ece:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S4>/Correct'
      u = rtDW.P_g[i];
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008eda:	f203 1303 	addw	r3, r3, #259	; 0x103
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	4413      	add	r3, r2
 8008ee2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ee6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008eea:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_g[i] = u;
 8008eee:	1d3b      	adds	r3, r7, #4
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ef6:	f203 1303 	addw	r3, r3, #259	; 0x103
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	441a      	add	r2, r3
 8008efe:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008f02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f06:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8008f0a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008f0e:	3301      	adds	r3, #1
 8008f10:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008f14:	e7c5      	b.n	8008ea2 <_ZN27positionEstimatorModelClass4stepEv+0x222a>

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/R1'
    //   Inport: '<Root>/az'

    for (r1 = 0; r1 < 3; r1++) {
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008f1c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	f300 8081 	bgt.w	8009028 <_ZN27positionEstimatorModelClass4stepEv+0x23b0>
      imvec_0[2] = rtDW.DataStoreReadX_o[2];
 8008f26:	1d3b      	adds	r3, r7, #4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8008f2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f32:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8008f36:	e9c2 3404 	strd	r3, r4, [r2, #16]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_o[r1]);
 8008f3a:	1d3b      	adds	r3, r7, #4
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008f42:	33fd      	adds	r3, #253	; 0xfd
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	4413      	add	r3, r2
 8008f48:	ed93 7b00 	vldr	d7, [r3]
 8008f4c:	eeb0 0b47 	vmov.f64	d0, d7
 8008f50:	f7fc fd33 	bl	80059ba <_ZSt3absd>
 8008f54:	eeb0 6b40 	vmov.f64	d6, d0
 8008f58:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009018 <_ZN27positionEstimatorModelClass4stepEv+0x23a0>
 8008f5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008f60:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008f64:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8008f68:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008f6c:	ed93 7b00 	vldr	d7, [r3]
 8008f70:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8009018 <_ZN27positionEstimatorModelClass4stepEv+0x23a0>
 8008f74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7c:	d408      	bmi.n	8008f90 <_ZN27positionEstimatorModelClass4stepEv+0x2318>
 8008f7e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008f82:	ed93 0b00 	vldr	d0, [r3]
 8008f86:	f7fc fdcb 	bl	8005b20 <rtIsNaN>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <_ZN27positionEstimatorModelClass4stepEv+0x231c>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <_ZN27positionEstimatorModelClass4stepEv+0x231e>
 8008f94:	2300      	movs	r3, #0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d006      	beq.n	8008fa8 <_ZN27positionEstimatorModelClass4stepEv+0x2330>
        epsilon = 1.4901161193847656E-8;
 8008f9a:	f04f 0300 	mov.w	r3, #0
 8008f9e:	4c21      	ldr	r4, [pc, #132]	; (8009024 <_ZN27positionEstimatorModelClass4stepEv+0x23ac>)
 8008fa0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8008fa4:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_o[r1] + epsilon;
 8008fa8:	1d3b      	adds	r3, r7, #4
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008fb0:	33fd      	adds	r3, #253	; 0xfd
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	ed93 6b00 	vldr	d6, [r3]
 8008fba:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008fbe:	ed93 7b00 	vldr	d7, [r3]
 8008fc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008fc6:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8008fca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	4413      	add	r3, r2
 8008fd2:	ed83 7b00 	vstr	d7, [r3]
      dHdx_1[r1] = (imvec_0[2] - rtDW.DataStoreReadX_o[2]) / epsilon;
 8008fd6:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8008fda:	ed93 6b04 	vldr	d6, [r3, #16]
 8008fde:	1d3b      	adds	r3, r7, #4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8008fe6:	ed93 7b00 	vldr	d7, [r3]
 8008fea:	ee36 5b47 	vsub.f64	d5, d6, d7
 8008fee:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008ff2:	ed93 6b00 	vldr	d6, [r3]
 8008ff6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008ffa:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8008ffe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	4413      	add	r3, r2
 8009006:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 800900a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800900e:	3301      	adds	r3, #1
 8009010:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009014:	e782      	b.n	8008f1c <_ZN27positionEstimatorModelClass4stepEv+0x22a4>
 8009016:	bf00      	nop
 8009018:	00000000 	.word	0x00000000
 800901c:	3e500000 	.word	0x3e500000
 8009020:	240002b0 	.word	0x240002b0
 8009024:	3e500000 	.word	0x3e500000
    }

    u = 0.0;
 8009028:	f04f 0300 	mov.w	r3, #0
 800902c:	f04f 0400 	mov.w	r4, #0
 8009030:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009034:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009038:	2300      	movs	r3, #0
 800903a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800903e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009042:	2b02      	cmp	r3, #2
 8009044:	dc70      	bgt.n	8009128 <_ZN27positionEstimatorModelClass4stepEv+0x24b0>
      a22 = rtDW.P_g[3 * r1] * dHdx_1[0];
 8009046:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800904a:	4613      	mov	r3, r2
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	4413      	add	r3, r2
 8009050:	1d3a      	adds	r2, r7, #4
 8009052:	6812      	ldr	r2, [r2, #0]
 8009054:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	4413      	add	r3, r2
 800905c:	ed93 6b00 	vldr	d6, [r3]
 8009060:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009064:	ed93 7b00 	vldr	d7, [r3]
 8009068:	ee26 7b07 	vmul.f64	d7, d6, d7
 800906c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009070:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_g[3 * r1 + 1] * dHdx_1[1];
 8009074:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009078:	4613      	mov	r3, r2
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	4413      	add	r3, r2
 800907e:	3301      	adds	r3, #1
 8009080:	1d3a      	adds	r2, r7, #4
 8009082:	6812      	ldr	r2, [r2, #0]
 8009084:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	4413      	add	r3, r2
 800908c:	ed93 6b00 	vldr	d6, [r3]
 8009090:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009094:	ed93 7b02 	vldr	d7, [r3, #8]
 8009098:	ee26 7b07 	vmul.f64	d7, d6, d7
 800909c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80090a0:	ed93 6b00 	vldr	d6, [r3]
 80090a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80090a8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80090ac:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_g[3 * r1 + 2] * dHdx_1[2];
 80090b0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80090b4:	4613      	mov	r3, r2
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	4413      	add	r3, r2
 80090ba:	3302      	adds	r3, #2
 80090bc:	1d3a      	adds	r2, r7, #4
 80090be:	6812      	ldr	r2, [r2, #0]
 80090c0:	f203 1303 	addw	r3, r3, #259	; 0x103
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	4413      	add	r3, r2
 80090c8:	ed93 6b00 	vldr	d6, [r3]
 80090cc:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80090d0:	ed93 7b04 	vldr	d7, [r3, #16]
 80090d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80090d8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80090dc:	ed93 6b00 	vldr	d6, [r3]
 80090e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80090e4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80090e8:	ed83 7b00 	vstr	d7, [r3]
      u += a22 * dHdx_1[r1];
 80090ec:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80090f0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	4413      	add	r3, r2
 80090f8:	ed93 6b00 	vldr	d6, [r3]
 80090fc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009100:	ed93 7b00 	vldr	d7, [r3]
 8009104:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009108:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800910c:	ed93 6b00 	vldr	d6, [r3]
 8009110:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009114:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009118:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 800911c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009120:	3301      	adds	r3, #1
 8009122:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009126:	e78a      	b.n	800903e <_ZN27positionEstimatorModelClass4stepEv+0x23c6>
    }

    epsilon = u + rtP.R1_Value_j;
 8009128:	4bd5      	ldr	r3, [pc, #852]	; (8009480 <_ZN27positionEstimatorModelClass4stepEv+0x2808>)
 800912a:	ed93 7b80 	vldr	d7, [r3, #512]	; 0x200
 800912e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009132:	ed93 6b00 	vldr	d6, [r3]
 8009136:	ee36 7b07 	vadd.f64	d7, d6, d7
 800913a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800913e:	ed83 7b00 	vstr	d7, [r3]
    a22 = rtU.az - rtDW.DataStoreReadX_o[2];
 8009142:	1d3b      	adds	r3, r7, #4
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 800914a:	ed93 6b00 	vldr	d6, [r3]
 800914e:	1d3b      	adds	r3, r7, #4
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8009156:	ed93 7b00 	vldr	d7, [r3]
 800915a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800915e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009162:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 8009166:	2300      	movs	r3, #0
 8009168:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800916c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009170:	2b02      	cmp	r3, #2
 8009172:	f300 8089 	bgt.w	8009288 <_ZN27positionEstimatorModelClass4stepEv+0x2610>
      u = rtDW.P_g[i] * dHdx_1[0];
 8009176:	1d3b      	adds	r3, r7, #4
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800917e:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	4413      	add	r3, r2
 8009186:	ed93 6b00 	vldr	d6, [r3]
 800918a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800918e:	ed93 7b00 	vldr	d7, [r3]
 8009192:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009196:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800919a:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_g[i + 3] * dHdx_1[1];
 800919e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80091a2:	3303      	adds	r3, #3
 80091a4:	1d3a      	adds	r2, r7, #4
 80091a6:	6812      	ldr	r2, [r2, #0]
 80091a8:	f203 1303 	addw	r3, r3, #259	; 0x103
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	4413      	add	r3, r2
 80091b0:	ed93 6b00 	vldr	d6, [r3]
 80091b4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80091b8:	ed93 7b02 	vldr	d7, [r3, #8]
 80091bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80091c0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80091c4:	ed93 6b00 	vldr	d6, [r3]
 80091c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80091cc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80091d0:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_g[i + 6] * dHdx_1[2];
 80091d4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80091d8:	3306      	adds	r3, #6
 80091da:	1d3a      	adds	r2, r7, #4
 80091dc:	6812      	ldr	r2, [r2, #0]
 80091de:	f203 1303 	addw	r3, r3, #259	; 0x103
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	4413      	add	r3, r2
 80091e6:	ed93 6b00 	vldr	d6, [r3]
 80091ea:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80091ee:	ed93 7b04 	vldr	d7, [r3, #16]
 80091f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80091f6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80091fa:	ed93 6b00 	vldr	d6, [r3]
 80091fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009202:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009206:	ed83 7b00 	vstr	d7, [r3]
      u /= epsilon;
 800920a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800920e:	ed93 5b00 	vldr	d5, [r3]
 8009212:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009216:	ed93 6b00 	vldr	d6, [r3]
 800921a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800921e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009222:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_o[i] = u * a22 + rtDW.DataStoreReadX_o[i];
 8009226:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800922a:	ed93 6b00 	vldr	d6, [r3]
 800922e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009232:	ed93 7b00 	vldr	d7, [r3]
 8009236:	ee26 6b07 	vmul.f64	d6, d6, d7
 800923a:	1d3b      	adds	r3, r7, #4
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009242:	33fd      	adds	r3, #253	; 0xfd
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	4413      	add	r3, r2
 8009248:	ed93 7b00 	vldr	d7, [r3]
 800924c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009250:	1d3b      	adds	r3, r7, #4
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009258:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4413      	add	r3, r2
 8009260:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[i] = u;
 8009264:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009268:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	441a      	add	r2, r3
 8009270:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009274:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009278:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800927c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009280:	3301      	adds	r3, #1
 8009282:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009286:	e771      	b.n	800916c <_ZN27positionEstimatorModelClass4stepEv+0x24f4>
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009288:	2300      	movs	r3, #0
 800928a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800928e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009292:	2b02      	cmp	r3, #2
 8009294:	dc52      	bgt.n	800933c <_ZN27positionEstimatorModelClass4stepEv+0x26c4>
      u = dHdx_1[r1];
 8009296:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800929a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4413      	add	r3, r2
 80092a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80092a6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80092aa:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 80092ae:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80092b2:	ed93 6b00 	vldr	d6, [r3]
 80092b6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80092ba:	4613      	mov	r3, r2
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	4413      	add	r3, r2
 80092c0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80092c4:	ed92 7b00 	vldr	d7, [r2]
 80092c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80092cc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	4413      	add	r3, r2
 80092d4:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 80092d8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80092dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80092e0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80092e4:	4613      	mov	r3, r2
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	4413      	add	r3, r2
 80092ea:	3301      	adds	r3, #1
 80092ec:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80092f0:	ed92 7b00 	vldr	d7, [r2]
 80092f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80092f8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80092fc:	00db      	lsls	r3, r3, #3
 80092fe:	4413      	add	r3, r2
 8009300:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 8009304:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009308:	ed93 6b04 	vldr	d6, [r3, #16]
 800930c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009310:	4613      	mov	r3, r2
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	4413      	add	r3, r2
 8009316:	3302      	adds	r3, #2
 8009318:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800931c:	ed92 7b00 	vldr	d7, [r2]
 8009320:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009324:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	4413      	add	r3, r2
 800932c:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009330:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009334:	3301      	adds	r3, #1
 8009336:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800933a:	e7a8      	b.n	800928e <_ZN27positionEstimatorModelClass4stepEv+0x2616>
    }

    for (r1 = 0; r1 < 3; r1++) {
 800933c:	2300      	movs	r3, #0
 800933e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009342:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009346:	2b02      	cmp	r3, #2
 8009348:	f300 809c 	bgt.w	8009484 <_ZN27positionEstimatorModelClass4stepEv+0x280c>
      for (i = 0; i < 3; i++) {
 800934c:	2300      	movs	r3, #0
 800934e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009352:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009356:	2b02      	cmp	r3, #2
 8009358:	f300 808b 	bgt.w	8009472 <_ZN27positionEstimatorModelClass4stepEv+0x27fa>
        u = rtDW.P_g[3 * r1] * imvec_1[i];
 800935c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009360:	4613      	mov	r3, r2
 8009362:	005b      	lsls	r3, r3, #1
 8009364:	4413      	add	r3, r2
 8009366:	1d3a      	adds	r2, r7, #4
 8009368:	6812      	ldr	r2, [r2, #0]
 800936a:	f203 1303 	addw	r3, r3, #259	; 0x103
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	ed93 6b00 	vldr	d6, [r3]
 8009376:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800937a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	ed93 7b00 	vldr	d7, [r3]
 8009386:	ee26 7b07 	vmul.f64	d7, d6, d7
 800938a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800938e:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_g[3 * r1 + 1] * imvec_1[i + 3];
 8009392:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009396:	4613      	mov	r3, r2
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	4413      	add	r3, r2
 800939c:	3301      	adds	r3, #1
 800939e:	1d3a      	adds	r2, r7, #4
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	f203 1303 	addw	r3, r3, #259	; 0x103
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	ed93 6b00 	vldr	d6, [r3]
 80093ae:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093b2:	3303      	adds	r3, #3
 80093b4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	4413      	add	r3, r2
 80093bc:	ed93 7b00 	vldr	d7, [r3]
 80093c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80093c4:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80093c8:	ed93 6b00 	vldr	d6, [r3]
 80093cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80093d0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80093d4:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_g[3 * r1 + 2] * imvec_1[i + 6];
 80093d8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80093dc:	4613      	mov	r3, r2
 80093de:	005b      	lsls	r3, r3, #1
 80093e0:	4413      	add	r3, r2
 80093e2:	3302      	adds	r3, #2
 80093e4:	1d3a      	adds	r2, r7, #4
 80093e6:	6812      	ldr	r2, [r2, #0]
 80093e8:	f203 1303 	addw	r3, r3, #259	; 0x103
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	4413      	add	r3, r2
 80093f0:	ed93 6b00 	vldr	d6, [r3]
 80093f4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093f8:	3306      	adds	r3, #6
 80093fa:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	4413      	add	r3, r2
 8009402:	ed93 7b00 	vldr	d7, [r3]
 8009406:	ee26 7b07 	vmul.f64	d7, d6, d7
 800940a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800940e:	ed93 6b00 	vldr	d6, [r3]
 8009412:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009416:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800941a:	ed83 7b00 	vstr	d7, [r3]
        a[i + 3 * r1] = rtDW.P_g[3 * r1 + i] - u;
 800941e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009422:	4613      	mov	r3, r2
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	441a      	add	r2, r3
 8009428:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800942c:	4413      	add	r3, r2
 800942e:	1d3a      	adds	r2, r7, #4
 8009430:	6812      	ldr	r2, [r2, #0]
 8009432:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	4413      	add	r3, r2
 800943a:	ed93 6b00 	vldr	d6, [r3]
 800943e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009442:	4613      	mov	r3, r2
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	441a      	add	r2, r3
 8009448:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800944c:	4413      	add	r3, r2
 800944e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009452:	ed92 7b00 	vldr	d7, [r2]
 8009456:	ee36 7b47 	vsub.f64	d7, d6, d7
 800945a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	4413      	add	r3, r2
 8009462:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 3; i++) {
 8009466:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800946a:	3301      	adds	r3, #1
 800946c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009470:	e76f      	b.n	8009352 <_ZN27positionEstimatorModelClass4stepEv+0x26da>
    for (r1 = 0; r1 < 3; r1++) {
 8009472:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009476:	3301      	adds	r3, #1
 8009478:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800947c:	e761      	b.n	8009342 <_ZN27positionEstimatorModelClass4stepEv+0x26ca>
 800947e:	bf00      	nop
 8009480:	240002b0 	.word	0x240002b0
      }
    }

    for (i = 0; i < 9; i++) {
 8009484:	2300      	movs	r3, #0
 8009486:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800948a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800948e:	2b08      	cmp	r3, #8
 8009490:	dc2b      	bgt.n	80094ea <_ZN27positionEstimatorModelClass4stepEv+0x2872>
      rtDW.P_g[i] = a[i];
 8009492:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8009496:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	4413      	add	r3, r2
 800949e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094a2:	1d3a      	adds	r2, r7, #4
 80094a4:	6811      	ldr	r1, [r2, #0]
 80094a6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80094aa:	f202 1203 	addw	r2, r2, #259	; 0x103
 80094ae:	00d2      	lsls	r2, r2, #3
 80094b0:	440a      	add	r2, r1
 80094b2:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S4>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_g[i];
 80094b6:	1d3b      	adds	r3, r7, #4
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094be:	f203 1303 	addw	r3, r3, #259	; 0x103
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4413      	add	r3, r2
 80094c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094ca:	1d3a      	adds	r2, r7, #4
 80094cc:	6811      	ldr	r1, [r2, #0]
 80094ce:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80094d2:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 80094d6:	00d2      	lsls	r2, r2, #3
 80094d8:	440a      	add	r2, r1
 80094da:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 80094de:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094e2:	3301      	adds	r3, #1
 80094e4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80094e8:	e7cf      	b.n	800948a <_ZN27positionEstimatorModelClass4stepEv+0x2812>
    }

    // DataStoreWrite: '<S4>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_o[0];
 80094ea:	1d3b      	adds	r3, r7, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094f6:	1d3a      	adds	r2, r7, #4
 80094f8:	6812      	ldr	r2, [r2, #0]
 80094fa:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 80094fe:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_o[1];
 8009502:	1d3b      	adds	r3, r7, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800950a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800950e:	1d3a      	adds	r2, r7, #4
 8009510:	6812      	ldr	r2, [r2, #0]
 8009512:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 8009516:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_o[2];
 800951a:	1d3b      	adds	r3, r7, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8009522:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009526:	1d3a      	adds	r2, r7, #4
 8009528:	6812      	ldr	r2, [r2, #0]
 800952a:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800952e:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Outputs for SubSystem: '<S1>/Correct1'

  // Outputs for Enabled SubSystem: '<S1>/Correct2' incorporates:
  //   EnablePort: '<S5>/Enable'

  if (rtDW.LogicalOperator) {
 8009532:	1d3b      	adds	r3, r7, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f893 3c3f 	ldrb.w	r3, [r3, #3135]	; 0xc3f
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 8370 	beq.w	8009c20 <_ZN27positionEstimatorModelClass4stepEv+0x2fa8>
    // DataStoreRead: '<S5>/Data Store ReadX'
    rtDW.DataStoreReadX_m[0] = rtDW.x[0];
 8009540:	1d3b      	adds	r3, r7, #4
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8009548:	e9d3 3400 	ldrd	r3, r4, [r3]
 800954c:	1d3a      	adds	r2, r7, #4
 800954e:	6812      	ldr	r2, [r2, #0]
 8009550:	f502 62ee 	add.w	r2, r2, #1904	; 0x770
 8009554:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_m[1] = rtDW.x[1];
 8009558:	1d3b      	adds	r3, r7, #4
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8009560:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009564:	1d3a      	adds	r2, r7, #4
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	f502 62ef 	add.w	r2, r2, #1912	; 0x778
 800956c:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_m[2] = rtDW.x[2];
 8009570:	1d3b      	adds	r3, r7, #4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8009578:	e9d3 3400 	ldrd	r3, r4, [r3]
 800957c:	1d3a      	adds	r2, r7, #4
 800957e:	6812      	ldr	r2, [r2, #0]
 8009580:	f502 62f0 	add.w	r2, r2, #1920	; 0x780
 8009584:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S5>/Correct'
    rtDW.blockOrdering_n = rtDW.blockOrdering_k;
 8009588:	1d3b      	adds	r3, r7, #4
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f893 2c48 	ldrb.w	r2, [r3, #3144]	; 0xc48
 8009590:	1d3b      	adds	r3, r7, #4
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47
    blockOrdering = rtDW.blockOrdering_n;
 8009598:	1d3b      	adds	r3, r7, #4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f893 3c47 	ldrb.w	r3, [r3, #3143]	; 0xc47
 80095a0:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_n = blockOrdering;
 80095a4:	1d3b      	adds	r3, r7, #4
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 80095ac:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47
    for (i = 0; i < 9; i++) {
 80095b0:	2300      	movs	r3, #0
 80095b2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80095b6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095ba:	2b08      	cmp	r3, #8
 80095bc:	dc32      	bgt.n	8009624 <_ZN27positionEstimatorModelClass4stepEv+0x29ac>
      // DataStoreRead: '<S5>/Data Store ReadP'
      rtDW.P_c[i] = rtDW.P_i_m[i];
 80095be:	1d3b      	adds	r3, r7, #4
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095c6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	4413      	add	r3, r2
 80095ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095d2:	1d3a      	adds	r2, r7, #4
 80095d4:	6811      	ldr	r1, [r2, #0]
 80095d6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80095da:	32f4      	adds	r2, #244	; 0xf4
 80095dc:	00d2      	lsls	r2, r2, #3
 80095de:	440a      	add	r2, r1
 80095e0:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S5>/Correct'
      u = rtDW.P_c[i];
 80095e4:	1d3b      	adds	r3, r7, #4
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095ec:	33f4      	adds	r3, #244	; 0xf4
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4413      	add	r3, r2
 80095f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095f6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80095fa:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_c[i] = u;
 80095fe:	1d3b      	adds	r3, r7, #4
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009606:	33f4      	adds	r3, #244	; 0xf4
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	441a      	add	r2, r3
 800960c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009610:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009614:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009618:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800961c:	3301      	adds	r3, #1
 800961e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009622:	e7c8      	b.n	80095b6 <_ZN27positionEstimatorModelClass4stepEv+0x293e>
    }

    // MATLAB Function: '<S5>/Correct' incorporates:
    //   Constant: '<S1>/R2'

    for (r1 = 0; r1 < 3; r1++) {
 8009624:	2300      	movs	r3, #0
 8009626:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800962a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800962e:	2b02      	cmp	r3, #2
 8009630:	dc77      	bgt.n	8009722 <_ZN27positionEstimatorModelClass4stepEv+0x2aaa>
      imvec_0[0] = rtDW.DataStoreReadX_m[0];
 8009632:	1d3b      	adds	r3, r7, #4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800963a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800963e:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009642:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_m[r1]);
 8009646:	1d3b      	adds	r3, r7, #4
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800964e:	33ee      	adds	r3, #238	; 0xee
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	4413      	add	r3, r2
 8009654:	ed93 7b00 	vldr	d7, [r3]
 8009658:	eeb0 0b47 	vmov.f64	d0, d7
 800965c:	f7fc f9ad 	bl	80059ba <_ZSt3absd>
 8009660:	eeb0 6b40 	vmov.f64	d6, d0
 8009664:	ed9f 7bc4 	vldr	d7, [pc, #784]	; 8009978 <_ZN27positionEstimatorModelClass4stepEv+0x2d00>
 8009668:	ee26 7b07 	vmul.f64	d7, d6, d7
 800966c:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009670:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8009674:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009678:	ed93 7b00 	vldr	d7, [r3]
 800967c:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8009978 <_ZN27positionEstimatorModelClass4stepEv+0x2d00>
 8009680:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009688:	d408      	bmi.n	800969c <_ZN27positionEstimatorModelClass4stepEv+0x2a24>
 800968a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800968e:	ed93 0b00 	vldr	d0, [r3]
 8009692:	f7fc fa45 	bl	8005b20 <rtIsNaN>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <_ZN27positionEstimatorModelClass4stepEv+0x2a28>
 800969c:	2301      	movs	r3, #1
 800969e:	e000      	b.n	80096a2 <_ZN27positionEstimatorModelClass4stepEv+0x2a2a>
 80096a0:	2300      	movs	r3, #0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d006      	beq.n	80096b4 <_ZN27positionEstimatorModelClass4stepEv+0x2a3c>
        epsilon = 1.4901161193847656E-8;
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	4cb5      	ldr	r4, [pc, #724]	; (8009980 <_ZN27positionEstimatorModelClass4stepEv+0x2d08>)
 80096ac:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80096b0:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_m[r1] + epsilon;
 80096b4:	1d3b      	adds	r3, r7, #4
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80096bc:	33ee      	adds	r3, #238	; 0xee
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	4413      	add	r3, r2
 80096c2:	ed93 6b00 	vldr	d6, [r3]
 80096c6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80096ca:	ed93 7b00 	vldr	d7, [r3]
 80096ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80096d2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80096d6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	4413      	add	r3, r2
 80096de:	ed83 7b00 	vstr	d7, [r3]
      dHdx_1[r1] = (imvec_0[0] - rtDW.DataStoreReadX_m[0]) / epsilon;
 80096e2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80096e6:	ed93 6b00 	vldr	d6, [r3]
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80096f2:	ed93 7b00 	vldr	d7, [r3]
 80096f6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80096fa:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80096fe:	ed93 6b00 	vldr	d6, [r3]
 8009702:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009706:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800970a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	4413      	add	r3, r2
 8009712:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009716:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800971a:	3301      	adds	r3, #1
 800971c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009720:	e783      	b.n	800962a <_ZN27positionEstimatorModelClass4stepEv+0x29b2>
    }

    u = 0.0;
 8009722:	f04f 0300 	mov.w	r3, #0
 8009726:	f04f 0400 	mov.w	r4, #0
 800972a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800972e:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009732:	2300      	movs	r3, #0
 8009734:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009738:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800973c:	2b02      	cmp	r3, #2
 800973e:	dc6d      	bgt.n	800981c <_ZN27positionEstimatorModelClass4stepEv+0x2ba4>
      a22 = rtDW.P_c[3 * r1] * dHdx_1[0];
 8009740:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009744:	4613      	mov	r3, r2
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	4413      	add	r3, r2
 800974a:	1d3a      	adds	r2, r7, #4
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	33f4      	adds	r3, #244	; 0xf4
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	4413      	add	r3, r2
 8009754:	ed93 6b00 	vldr	d6, [r3]
 8009758:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800975c:	ed93 7b00 	vldr	d7, [r3]
 8009760:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009764:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009768:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_c[3 * r1 + 1] * dHdx_1[1];
 800976c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009770:	4613      	mov	r3, r2
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	4413      	add	r3, r2
 8009776:	3301      	adds	r3, #1
 8009778:	1d3a      	adds	r2, r7, #4
 800977a:	6812      	ldr	r2, [r2, #0]
 800977c:	33f4      	adds	r3, #244	; 0xf4
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	4413      	add	r3, r2
 8009782:	ed93 6b00 	vldr	d6, [r3]
 8009786:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800978a:	ed93 7b02 	vldr	d7, [r3, #8]
 800978e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009792:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009796:	ed93 6b00 	vldr	d6, [r3]
 800979a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800979e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80097a2:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_c[3 * r1 + 2] * dHdx_1[2];
 80097a6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80097aa:	4613      	mov	r3, r2
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	4413      	add	r3, r2
 80097b0:	3302      	adds	r3, #2
 80097b2:	1d3a      	adds	r2, r7, #4
 80097b4:	6812      	ldr	r2, [r2, #0]
 80097b6:	33f4      	adds	r3, #244	; 0xf4
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	4413      	add	r3, r2
 80097bc:	ed93 6b00 	vldr	d6, [r3]
 80097c0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80097c4:	ed93 7b04 	vldr	d7, [r3, #16]
 80097c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097cc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80097d0:	ed93 6b00 	vldr	d6, [r3]
 80097d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80097d8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80097dc:	ed83 7b00 	vstr	d7, [r3]
      u += a22 * dHdx_1[r1];
 80097e0:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80097e4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	4413      	add	r3, r2
 80097ec:	ed93 6b00 	vldr	d6, [r3]
 80097f0:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80097f4:	ed93 7b00 	vldr	d7, [r3]
 80097f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097fc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009800:	ed93 6b00 	vldr	d6, [r3]
 8009804:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009808:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800980c:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009810:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009814:	3301      	adds	r3, #1
 8009816:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800981a:	e78d      	b.n	8009738 <_ZN27positionEstimatorModelClass4stepEv+0x2ac0>
    }

    epsilon = u + rtP.R2_Value_g;
 800981c:	4b59      	ldr	r3, [pc, #356]	; (8009984 <_ZN27positionEstimatorModelClass4stepEv+0x2d0c>)
 800981e:	ed93 7b7c 	vldr	d7, [r3, #496]	; 0x1f0
 8009822:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009826:	ed93 6b00 	vldr	d6, [r3]
 800982a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800982e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009832:	ed83 7b00 	vstr	d7, [r3]
    a22 = rtDW.Pz - rtDW.DataStoreReadX_m[0];
 8009836:	1d3b      	adds	r3, r7, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 800983e:	ed93 6b00 	vldr	d6, [r3]
 8009842:	1d3b      	adds	r3, r7, #4
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800984a:	ed93 7b00 	vldr	d7, [r3]
 800984e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009852:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009856:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 800985a:	2300      	movs	r3, #0
 800985c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009860:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009864:	2b02      	cmp	r3, #2
 8009866:	f300 808f 	bgt.w	8009988 <_ZN27positionEstimatorModelClass4stepEv+0x2d10>
      u = rtDW.P_c[i] * dHdx_1[0];
 800986a:	1d3b      	adds	r3, r7, #4
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009872:	33f4      	adds	r3, #244	; 0xf4
 8009874:	00db      	lsls	r3, r3, #3
 8009876:	4413      	add	r3, r2
 8009878:	ed93 6b00 	vldr	d6, [r3]
 800987c:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009880:	ed93 7b00 	vldr	d7, [r3]
 8009884:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009888:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800988c:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_c[i + 3] * dHdx_1[1];
 8009890:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009894:	3303      	adds	r3, #3
 8009896:	1d3a      	adds	r2, r7, #4
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	33f4      	adds	r3, #244	; 0xf4
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	4413      	add	r3, r2
 80098a0:	ed93 6b00 	vldr	d6, [r3]
 80098a4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80098a8:	ed93 7b02 	vldr	d7, [r3, #8]
 80098ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80098b0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098b4:	ed93 6b00 	vldr	d6, [r3]
 80098b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80098bc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098c0:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_c[i + 6] * dHdx_1[2];
 80098c4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80098c8:	3306      	adds	r3, #6
 80098ca:	1d3a      	adds	r2, r7, #4
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	33f4      	adds	r3, #244	; 0xf4
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	4413      	add	r3, r2
 80098d4:	ed93 6b00 	vldr	d6, [r3]
 80098d8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80098dc:	ed93 7b04 	vldr	d7, [r3, #16]
 80098e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80098e4:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098e8:	ed93 6b00 	vldr	d6, [r3]
 80098ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80098f0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098f4:	ed83 7b00 	vstr	d7, [r3]
      u /= epsilon;
 80098f8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098fc:	ed93 5b00 	vldr	d5, [r3]
 8009900:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009904:	ed93 6b00 	vldr	d6, [r3]
 8009908:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800990c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009910:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_g1[i] = u * a22 + rtDW.DataStoreReadX_m[i];
 8009914:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009918:	ed93 6b00 	vldr	d6, [r3]
 800991c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009920:	ed93 7b00 	vldr	d7, [r3]
 8009924:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009928:	1d3b      	adds	r3, r7, #4
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009930:	33ee      	adds	r3, #238	; 0xee
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	4413      	add	r3, r2
 8009936:	ed93 7b00 	vldr	d7, [r3]
 800993a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800993e:	1d3b      	adds	r3, r7, #4
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009946:	33f1      	adds	r3, #241	; 0xf1
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	4413      	add	r3, r2
 800994c:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[i] = u;
 8009950:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009954:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	441a      	add	r2, r3
 800995c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009960:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009964:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 8009968:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800996c:	3301      	adds	r3, #1
 800996e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009972:	e775      	b.n	8009860 <_ZN27positionEstimatorModelClass4stepEv+0x2be8>
 8009974:	f3af 8000 	nop.w
 8009978:	00000000 	.word	0x00000000
 800997c:	3e500000 	.word	0x3e500000
 8009980:	3e500000 	.word	0x3e500000
 8009984:	240002b0 	.word	0x240002b0
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009988:	2300      	movs	r3, #0
 800998a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800998e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009992:	2b02      	cmp	r3, #2
 8009994:	dc52      	bgt.n	8009a3c <_ZN27positionEstimatorModelClass4stepEv+0x2dc4>
      u = dHdx_1[r1];
 8009996:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800999a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	4413      	add	r3, r2
 80099a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099a6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80099aa:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 80099ae:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80099b2:	ed93 6b00 	vldr	d6, [r3]
 80099b6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80099ba:	4613      	mov	r3, r2
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4413      	add	r3, r2
 80099c0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80099c4:	ed92 7b00 	vldr	d7, [r2]
 80099c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80099cc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	4413      	add	r3, r2
 80099d4:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 80099d8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80099dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80099e0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80099e4:	4613      	mov	r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	4413      	add	r3, r2
 80099ea:	3301      	adds	r3, #1
 80099ec:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80099f0:	ed92 7b00 	vldr	d7, [r2]
 80099f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80099f8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	4413      	add	r3, r2
 8009a00:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 8009a04:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009a08:	ed93 6b04 	vldr	d6, [r3, #16]
 8009a0c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009a10:	4613      	mov	r3, r2
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	4413      	add	r3, r2
 8009a16:	3302      	adds	r3, #2
 8009a18:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009a1c:	ed92 7b00 	vldr	d7, [r2]
 8009a20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a24:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009a28:	00db      	lsls	r3, r3, #3
 8009a2a:	4413      	add	r3, r2
 8009a2c:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009a30:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009a34:	3301      	adds	r3, #1
 8009a36:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009a3a:	e7a8      	b.n	800998e <_ZN27positionEstimatorModelClass4stepEv+0x2d16>
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009a42:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	f300 8095 	bgt.w	8009b76 <_ZN27positionEstimatorModelClass4stepEv+0x2efe>
      for (i = 0; i < 3; i++) {
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009a52:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	f300 8087 	bgt.w	8009b6a <_ZN27positionEstimatorModelClass4stepEv+0x2ef2>
        u = rtDW.P_c[3 * r1] * imvec_1[i];
 8009a5c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009a60:	4613      	mov	r3, r2
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	4413      	add	r3, r2
 8009a66:	1d3a      	adds	r2, r7, #4
 8009a68:	6812      	ldr	r2, [r2, #0]
 8009a6a:	33f4      	adds	r3, #244	; 0xf4
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	4413      	add	r3, r2
 8009a70:	ed93 6b00 	vldr	d6, [r3]
 8009a74:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009a78:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	4413      	add	r3, r2
 8009a80:	ed93 7b00 	vldr	d7, [r3]
 8009a84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a88:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009a8c:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_c[3 * r1 + 1] * imvec_1[i + 3];
 8009a90:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	1d3a      	adds	r2, r7, #4
 8009a9e:	6812      	ldr	r2, [r2, #0]
 8009aa0:	33f4      	adds	r3, #244	; 0xf4
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	4413      	add	r3, r2
 8009aa6:	ed93 6b00 	vldr	d6, [r3]
 8009aaa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009aae:	3303      	adds	r3, #3
 8009ab0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	ed93 7b00 	vldr	d7, [r3]
 8009abc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ac0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009ac4:	ed93 6b00 	vldr	d6, [r3]
 8009ac8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009acc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009ad0:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_c[3 * r1 + 2] * imvec_1[i + 6];
 8009ad4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009ad8:	4613      	mov	r3, r2
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	4413      	add	r3, r2
 8009ade:	3302      	adds	r3, #2
 8009ae0:	1d3a      	adds	r2, r7, #4
 8009ae2:	6812      	ldr	r2, [r2, #0]
 8009ae4:	33f4      	adds	r3, #244	; 0xf4
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	4413      	add	r3, r2
 8009aea:	ed93 6b00 	vldr	d6, [r3]
 8009aee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009af2:	3306      	adds	r3, #6
 8009af4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	4413      	add	r3, r2
 8009afc:	ed93 7b00 	vldr	d7, [r3]
 8009b00:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b04:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009b08:	ed93 6b00 	vldr	d6, [r3]
 8009b0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009b10:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009b14:	ed83 7b00 	vstr	d7, [r3]
        a[i + 3 * r1] = rtDW.P_c[3 * r1 + i] - u;
 8009b18:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	441a      	add	r2, r3
 8009b22:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b26:	4413      	add	r3, r2
 8009b28:	1d3a      	adds	r2, r7, #4
 8009b2a:	6812      	ldr	r2, [r2, #0]
 8009b2c:	33f4      	adds	r3, #244	; 0xf4
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	4413      	add	r3, r2
 8009b32:	ed93 6b00 	vldr	d6, [r3]
 8009b36:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	005b      	lsls	r3, r3, #1
 8009b3e:	441a      	add	r2, r3
 8009b40:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b44:	4413      	add	r3, r2
 8009b46:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009b4a:	ed92 7b00 	vldr	d7, [r2]
 8009b4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009b52:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	4413      	add	r3, r2
 8009b5a:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 3; i++) {
 8009b5e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b62:	3301      	adds	r3, #1
 8009b64:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009b68:	e773      	b.n	8009a52 <_ZN27positionEstimatorModelClass4stepEv+0x2dda>
    for (r1 = 0; r1 < 3; r1++) {
 8009b6a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009b6e:	3301      	adds	r3, #1
 8009b70:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009b74:	e765      	b.n	8009a42 <_ZN27positionEstimatorModelClass4stepEv+0x2dca>
      }
    }

    for (i = 0; i < 9; i++) {
 8009b76:	2300      	movs	r3, #0
 8009b78:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009b7c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	dc29      	bgt.n	8009bd8 <_ZN27positionEstimatorModelClass4stepEv+0x2f60>
      rtDW.P_c[i] = a[i];
 8009b84:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8009b88:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	4413      	add	r3, r2
 8009b90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b94:	1d3a      	adds	r2, r7, #4
 8009b96:	6811      	ldr	r1, [r2, #0]
 8009b98:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009b9c:	32f4      	adds	r2, #244	; 0xf4
 8009b9e:	00d2      	lsls	r2, r2, #3
 8009ba0:	440a      	add	r2, r1
 8009ba2:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S5>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_c[i];
 8009ba6:	1d3b      	adds	r3, r7, #4
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009bae:	33f4      	adds	r3, #244	; 0xf4
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	4413      	add	r3, r2
 8009bb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bb8:	1d3a      	adds	r2, r7, #4
 8009bba:	6811      	ldr	r1, [r2, #0]
 8009bbc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009bc0:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 8009bc4:	00d2      	lsls	r2, r2, #3
 8009bc6:	440a      	add	r2, r1
 8009bc8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009bcc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009bd6:	e7d1      	b.n	8009b7c <_ZN27positionEstimatorModelClass4stepEv+0x2f04>
    }

    // DataStoreWrite: '<S5>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_g1[0];
 8009bd8:	1d3b      	adds	r3, r7, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8009be0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009be4:	1d3a      	adds	r2, r7, #4
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 8009bec:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_g1[1];
 8009bf0:	1d3b      	adds	r3, r7, #4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8009bf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bfc:	1d3a      	adds	r2, r7, #4
 8009bfe:	6812      	ldr	r2, [r2, #0]
 8009c00:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 8009c04:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_g1[2];
 8009c08:	1d3b      	adds	r3, r7, #4
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8009c10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c14:	1d3a      	adds	r2, r7, #4
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 8009c1c:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Outputs for SubSystem: '<S1>/Correct2'

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable3' incorporates:
  //   Inport: '<Root>/BaroFlag'

  rtDW.DataTypeConversion_Enable3 = (rtU.BaroFlag != 0.0);
 8009c20:	1d3b      	adds	r3, r7, #4
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8009c28:	ed93 7b00 	vldr	d7, [r3]
 8009c2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c34:	bf14      	ite	ne
 8009c36:	2301      	movne	r3, #1
 8009c38:	2300      	moveq	r3, #0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	1d3b      	adds	r3, r7, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f883 2c41 	strb.w	r2, [r3, #3137]	; 0xc41

  // Outputs for Enabled SubSystem: '<S1>/Correct3' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (rtDW.DataTypeConversion_Enable3) {
 8009c46:	1d3b      	adds	r3, r7, #4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f893 3c41 	ldrb.w	r3, [r3, #3137]	; 0xc41
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 836e 	beq.w	800a330 <_ZN27positionEstimatorModelClass4stepEv+0x36b8>
    // DataStoreRead: '<S6>/Data Store ReadX'
    rtDW.DataStoreReadX_i[0] = rtDW.x[0];
 8009c54:	1d3b      	adds	r3, r7, #4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8009c5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c60:	1d3a      	adds	r2, r7, #4
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	f502 62df 	add.w	r2, r2, #1784	; 0x6f8
 8009c68:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[1] = rtDW.x[1];
 8009c6c:	1d3b      	adds	r3, r7, #4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8009c74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c78:	1d3a      	adds	r2, r7, #4
 8009c7a:	6812      	ldr	r2, [r2, #0]
 8009c7c:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 8009c80:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[2] = rtDW.x[2];
 8009c84:	1d3b      	adds	r3, r7, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8009c8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c90:	1d3a      	adds	r2, r7, #4
 8009c92:	6812      	ldr	r2, [r2, #0]
 8009c94:	f502 62e1 	add.w	r2, r2, #1800	; 0x708
 8009c98:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S6>/Correct'
    rtDW.blockOrdering_p = rtDW.blockOrdering_n;
 8009c9c:	1d3b      	adds	r3, r7, #4
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f893 2c47 	ldrb.w	r2, [r3, #3143]	; 0xc47
 8009ca4:	1d3b      	adds	r3, r7, #4
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46
    blockOrdering = rtDW.blockOrdering_p;
 8009cac:	1d3b      	adds	r3, r7, #4
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f893 3c46 	ldrb.w	r3, [r3, #3142]	; 0xc46
 8009cb4:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_p = blockOrdering;
 8009cb8:	1d3b      	adds	r3, r7, #4
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8009cc0:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46
    for (i = 0; i < 9; i++) {
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009cca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	dc32      	bgt.n	8009d38 <_ZN27positionEstimatorModelClass4stepEv+0x30c0>
      // DataStoreRead: '<S6>/Data Store ReadP'
      rtDW.P_a[i] = rtDW.P_i_m[i];
 8009cd2:	1d3b      	adds	r3, r7, #4
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009cda:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	4413      	add	r3, r2
 8009ce2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ce6:	1d3a      	adds	r2, r7, #4
 8009ce8:	6811      	ldr	r1, [r2, #0]
 8009cea:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009cee:	32e5      	adds	r2, #229	; 0xe5
 8009cf0:	00d2      	lsls	r2, r2, #3
 8009cf2:	440a      	add	r2, r1
 8009cf4:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S6>/Correct'
      u = rtDW.P_a[i];
 8009cf8:	1d3b      	adds	r3, r7, #4
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d00:	33e5      	adds	r3, #229	; 0xe5
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	4413      	add	r3, r2
 8009d06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d0a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009d0e:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_a[i] = u;
 8009d12:	1d3b      	adds	r3, r7, #4
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d1a:	33e5      	adds	r3, #229	; 0xe5
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	441a      	add	r2, r3
 8009d20:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009d24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d28:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009d2c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d30:	3301      	adds	r3, #1
 8009d32:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009d36:	e7c8      	b.n	8009cca <_ZN27positionEstimatorModelClass4stepEv+0x3052>
    }

    // MATLAB Function: '<S6>/Correct' incorporates:
    //   Constant: '<S1>/R3'

    for (r1 = 0; r1 < 3; r1++) {
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009d3e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	dc77      	bgt.n	8009e36 <_ZN27positionEstimatorModelClass4stepEv+0x31be>
      imvec_0[0] = rtDW.DataStoreReadX_i[0];
 8009d46:	1d3b      	adds	r3, r7, #4
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8009d4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d52:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009d56:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_i[r1]);
 8009d5a:	1d3b      	adds	r3, r7, #4
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009d62:	33df      	adds	r3, #223	; 0xdf
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	4413      	add	r3, r2
 8009d68:	ed93 7b00 	vldr	d7, [r3]
 8009d6c:	eeb0 0b47 	vmov.f64	d0, d7
 8009d70:	f7fb fe23 	bl	80059ba <_ZSt3absd>
 8009d74:	eeb0 6b40 	vmov.f64	d6, d0
 8009d78:	ed9f 7bc3 	vldr	d7, [pc, #780]	; 800a088 <_ZN27positionEstimatorModelClass4stepEv+0x3410>
 8009d7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d80:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009d84:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8009d88:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009d8c:	ed93 7b00 	vldr	d7, [r3]
 8009d90:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 800a088 <_ZN27positionEstimatorModelClass4stepEv+0x3410>
 8009d94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9c:	d408      	bmi.n	8009db0 <_ZN27positionEstimatorModelClass4stepEv+0x3138>
 8009d9e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009da2:	ed93 0b00 	vldr	d0, [r3]
 8009da6:	f7fb febb 	bl	8005b20 <rtIsNaN>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <_ZN27positionEstimatorModelClass4stepEv+0x313c>
 8009db0:	2301      	movs	r3, #1
 8009db2:	e000      	b.n	8009db6 <_ZN27positionEstimatorModelClass4stepEv+0x313e>
 8009db4:	2300      	movs	r3, #0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d006      	beq.n	8009dc8 <_ZN27positionEstimatorModelClass4stepEv+0x3150>
        epsilon = 1.4901161193847656E-8;
 8009dba:	f04f 0300 	mov.w	r3, #0
 8009dbe:	4cb4      	ldr	r4, [pc, #720]	; (800a090 <_ZN27positionEstimatorModelClass4stepEv+0x3418>)
 8009dc0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8009dc4:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_i[r1] + epsilon;
 8009dc8:	1d3b      	adds	r3, r7, #4
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009dd0:	33df      	adds	r3, #223	; 0xdf
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	ed93 6b00 	vldr	d6, [r3]
 8009dda:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009dde:	ed93 7b00 	vldr	d7, [r3]
 8009de2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009de6:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009dea:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	4413      	add	r3, r2
 8009df2:	ed83 7b00 	vstr	d7, [r3]
      dHdx_1[r1] = (imvec_0[0] - rtDW.DataStoreReadX_i[0]) / epsilon;
 8009df6:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009dfa:	ed93 6b00 	vldr	d6, [r3]
 8009dfe:	1d3b      	adds	r3, r7, #4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8009e06:	ed93 7b00 	vldr	d7, [r3]
 8009e0a:	ee36 5b47 	vsub.f64	d5, d6, d7
 8009e0e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009e12:	ed93 6b00 	vldr	d6, [r3]
 8009e16:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009e1a:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8009e1e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009e22:	00db      	lsls	r3, r3, #3
 8009e24:	4413      	add	r3, r2
 8009e26:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009e2a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009e2e:	3301      	adds	r3, #1
 8009e30:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009e34:	e783      	b.n	8009d3e <_ZN27positionEstimatorModelClass4stepEv+0x30c6>
    }

    u = 0.0;
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	f04f 0400 	mov.w	r4, #0
 8009e3e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009e42:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009e46:	2300      	movs	r3, #0
 8009e48:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009e4c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	dc6d      	bgt.n	8009f30 <_ZN27positionEstimatorModelClass4stepEv+0x32b8>
      a22 = rtDW.P_a[3 * r1] * dHdx_1[0];
 8009e54:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009e58:	4613      	mov	r3, r2
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	4413      	add	r3, r2
 8009e5e:	1d3a      	adds	r2, r7, #4
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	33e5      	adds	r3, #229	; 0xe5
 8009e64:	00db      	lsls	r3, r3, #3
 8009e66:	4413      	add	r3, r2
 8009e68:	ed93 6b00 	vldr	d6, [r3]
 8009e6c:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009e70:	ed93 7b00 	vldr	d7, [r3]
 8009e74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009e78:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009e7c:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_a[3 * r1 + 1] * dHdx_1[1];
 8009e80:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009e84:	4613      	mov	r3, r2
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	4413      	add	r3, r2
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	1d3a      	adds	r2, r7, #4
 8009e8e:	6812      	ldr	r2, [r2, #0]
 8009e90:	33e5      	adds	r3, #229	; 0xe5
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	4413      	add	r3, r2
 8009e96:	ed93 6b00 	vldr	d6, [r3]
 8009e9a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009e9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ea2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ea6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009eaa:	ed93 6b00 	vldr	d6, [r3]
 8009eae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009eb2:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009eb6:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_a[3 * r1 + 2] * dHdx_1[2];
 8009eba:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4413      	add	r3, r2
 8009ec4:	3302      	adds	r3, #2
 8009ec6:	1d3a      	adds	r2, r7, #4
 8009ec8:	6812      	ldr	r2, [r2, #0]
 8009eca:	33e5      	adds	r3, #229	; 0xe5
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	4413      	add	r3, r2
 8009ed0:	ed93 6b00 	vldr	d6, [r3]
 8009ed4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009ed8:	ed93 7b04 	vldr	d7, [r3, #16]
 8009edc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ee0:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009ee4:	ed93 6b00 	vldr	d6, [r3]
 8009ee8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009eec:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009ef0:	ed83 7b00 	vstr	d7, [r3]
      u += a22 * dHdx_1[r1];
 8009ef4:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8009ef8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009efc:	00db      	lsls	r3, r3, #3
 8009efe:	4413      	add	r3, r2
 8009f00:	ed93 6b00 	vldr	d6, [r3]
 8009f04:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009f08:	ed93 7b00 	vldr	d7, [r3]
 8009f0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009f10:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009f14:	ed93 6b00 	vldr	d6, [r3]
 8009f18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f1c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009f20:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009f24:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009f28:	3301      	adds	r3, #1
 8009f2a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009f2e:	e78d      	b.n	8009e4c <_ZN27positionEstimatorModelClass4stepEv+0x31d4>
    }

    epsilon = u + rtP.R3_Value;
 8009f30:	4b58      	ldr	r3, [pc, #352]	; (800a094 <_ZN27positionEstimatorModelClass4stepEv+0x341c>)
 8009f32:	ed93 7b78 	vldr	d7, [r3, #480]	; 0x1e0
 8009f36:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009f3a:	ed93 6b00 	vldr	d6, [r3]
 8009f3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f42:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009f46:	ed83 7b00 	vstr	d7, [r3]
    a22 = rtDW.NED_convert - rtDW.DataStoreReadX_i[0];
 8009f4a:	1d3b      	adds	r3, r7, #4
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8009f52:	ed93 6b00 	vldr	d6, [r3]
 8009f56:	1d3b      	adds	r3, r7, #4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8009f5e:	ed93 7b00 	vldr	d7, [r3]
 8009f62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009f66:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009f6a:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009f74:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	f300 808d 	bgt.w	800a098 <_ZN27positionEstimatorModelClass4stepEv+0x3420>
      u = rtDW.P_a[i] * dHdx_1[0];
 8009f7e:	1d3b      	adds	r3, r7, #4
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009f86:	33e5      	adds	r3, #229	; 0xe5
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	4413      	add	r3, r2
 8009f8c:	ed93 6b00 	vldr	d6, [r3]
 8009f90:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009f94:	ed93 7b00 	vldr	d7, [r3]
 8009f98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009f9c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009fa0:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_a[i + 3] * dHdx_1[1];
 8009fa4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009fa8:	3303      	adds	r3, #3
 8009faa:	1d3a      	adds	r2, r7, #4
 8009fac:	6812      	ldr	r2, [r2, #0]
 8009fae:	33e5      	adds	r3, #229	; 0xe5
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	ed93 6b00 	vldr	d6, [r3]
 8009fb8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009fbc:	ed93 7b02 	vldr	d7, [r3, #8]
 8009fc0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009fc4:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009fc8:	ed93 6b00 	vldr	d6, [r3]
 8009fcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009fd0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009fd4:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_a[i + 6] * dHdx_1[2];
 8009fd8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009fdc:	3306      	adds	r3, #6
 8009fde:	1d3a      	adds	r2, r7, #4
 8009fe0:	6812      	ldr	r2, [r2, #0]
 8009fe2:	33e5      	adds	r3, #229	; 0xe5
 8009fe4:	00db      	lsls	r3, r3, #3
 8009fe6:	4413      	add	r3, r2
 8009fe8:	ed93 6b00 	vldr	d6, [r3]
 8009fec:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009ff0:	ed93 7b04 	vldr	d7, [r3, #16]
 8009ff4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ff8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009ffc:	ed93 6b00 	vldr	d6, [r3]
 800a000:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a004:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a008:	ed83 7b00 	vstr	d7, [r3]
      u /= epsilon;
 800a00c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a010:	ed93 5b00 	vldr	d5, [r3]
 800a014:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a018:	ed93 6b00 	vldr	d6, [r3]
 800a01c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a020:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a024:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_p[i] = u * a22 + rtDW.DataStoreReadX_i[i];
 800a028:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a02c:	ed93 6b00 	vldr	d6, [r3]
 800a030:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a034:	ed93 7b00 	vldr	d7, [r3]
 800a038:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a03c:	1d3b      	adds	r3, r7, #4
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a044:	33df      	adds	r3, #223	; 0xdf
 800a046:	00db      	lsls	r3, r3, #3
 800a048:	4413      	add	r3, r2
 800a04a:	ed93 7b00 	vldr	d7, [r3]
 800a04e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a052:	1d3b      	adds	r3, r7, #4
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a05a:	33e2      	adds	r3, #226	; 0xe2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	4413      	add	r3, r2
 800a060:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[i] = u;
 800a064:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800a068:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	441a      	add	r2, r3
 800a070:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a074:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a078:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a07c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a080:	3301      	adds	r3, #1
 800a082:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a086:	e775      	b.n	8009f74 <_ZN27positionEstimatorModelClass4stepEv+0x32fc>
 800a088:	00000000 	.word	0x00000000
 800a08c:	3e500000 	.word	0x3e500000
 800a090:	3e500000 	.word	0x3e500000
 800a094:	240002b0 	.word	0x240002b0
    }

    for (r1 = 0; r1 < 3; r1++) {
 800a098:	2300      	movs	r3, #0
 800a09a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a09e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	dc52      	bgt.n	800a14c <_ZN27positionEstimatorModelClass4stepEv+0x34d4>
      u = dHdx_1[r1];
 800a0a6:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800a0aa:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0b6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a0ba:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 800a0be:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a0c2:	ed93 6b00 	vldr	d6, [r3]
 800a0c6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a0d4:	ed92 7b00 	vldr	d7, [r2]
 800a0d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a0dc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a0e0:	00db      	lsls	r3, r3, #3
 800a0e2:	4413      	add	r3, r2
 800a0e4:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 800a0e8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a0ec:	ed93 6b02 	vldr	d6, [r3, #8]
 800a0f0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a100:	ed92 7b00 	vldr	d7, [r2]
 800a104:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a108:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	4413      	add	r3, r2
 800a110:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 800a114:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a118:	ed93 6b04 	vldr	d6, [r3, #16]
 800a11c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a120:	4613      	mov	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	4413      	add	r3, r2
 800a126:	3302      	adds	r3, #2
 800a128:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a12c:	ed92 7b00 	vldr	d7, [r2]
 800a130:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a134:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a138:	00db      	lsls	r3, r3, #3
 800a13a:	4413      	add	r3, r2
 800a13c:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 800a140:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a144:	3301      	adds	r3, #1
 800a146:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a14a:	e7a8      	b.n	800a09e <_ZN27positionEstimatorModelClass4stepEv+0x3426>
    }

    for (r1 = 0; r1 < 3; r1++) {
 800a14c:	2300      	movs	r3, #0
 800a14e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a152:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a156:	2b02      	cmp	r3, #2
 800a158:	f300 8095 	bgt.w	800a286 <_ZN27positionEstimatorModelClass4stepEv+0x360e>
      for (i = 0; i < 3; i++) {
 800a15c:	2300      	movs	r3, #0
 800a15e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a162:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a166:	2b02      	cmp	r3, #2
 800a168:	f300 8087 	bgt.w	800a27a <_ZN27positionEstimatorModelClass4stepEv+0x3602>
        u = rtDW.P_a[3 * r1] * imvec_1[i];
 800a16c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a170:	4613      	mov	r3, r2
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	4413      	add	r3, r2
 800a176:	1d3a      	adds	r2, r7, #4
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	33e5      	adds	r3, #229	; 0xe5
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	4413      	add	r3, r2
 800a180:	ed93 6b00 	vldr	d6, [r3]
 800a184:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a188:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a18c:	00db      	lsls	r3, r3, #3
 800a18e:	4413      	add	r3, r2
 800a190:	ed93 7b00 	vldr	d7, [r3]
 800a194:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a198:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a19c:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_a[3 * r1 + 1] * imvec_1[i + 3];
 800a1a0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	4413      	add	r3, r2
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	1d3a      	adds	r2, r7, #4
 800a1ae:	6812      	ldr	r2, [r2, #0]
 800a1b0:	33e5      	adds	r3, #229	; 0xe5
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	4413      	add	r3, r2
 800a1b6:	ed93 6b00 	vldr	d6, [r3]
 800a1ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a1be:	3303      	adds	r3, #3
 800a1c0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	4413      	add	r3, r2
 800a1c8:	ed93 7b00 	vldr	d7, [r3]
 800a1cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a1d0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a1d4:	ed93 6b00 	vldr	d6, [r3]
 800a1d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a1dc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a1e0:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_a[3 * r1 + 2] * imvec_1[i + 6];
 800a1e4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	4413      	add	r3, r2
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	1d3a      	adds	r2, r7, #4
 800a1f2:	6812      	ldr	r2, [r2, #0]
 800a1f4:	33e5      	adds	r3, #229	; 0xe5
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	ed93 6b00 	vldr	d6, [r3]
 800a1fe:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a202:	3306      	adds	r3, #6
 800a204:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	4413      	add	r3, r2
 800a20c:	ed93 7b00 	vldr	d7, [r3]
 800a210:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a214:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a218:	ed93 6b00 	vldr	d6, [r3]
 800a21c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a220:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a224:	ed83 7b00 	vstr	d7, [r3]
        a[i + 3 * r1] = rtDW.P_a[3 * r1 + i] - u;
 800a228:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a22c:	4613      	mov	r3, r2
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	441a      	add	r2, r3
 800a232:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a236:	4413      	add	r3, r2
 800a238:	1d3a      	adds	r2, r7, #4
 800a23a:	6812      	ldr	r2, [r2, #0]
 800a23c:	33e5      	adds	r3, #229	; 0xe5
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	4413      	add	r3, r2
 800a242:	ed93 6b00 	vldr	d6, [r3]
 800a246:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a24a:	4613      	mov	r3, r2
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	441a      	add	r2, r3
 800a250:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a254:	4413      	add	r3, r2
 800a256:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a25a:	ed92 7b00 	vldr	d7, [r2]
 800a25e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a262:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	4413      	add	r3, r2
 800a26a:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 3; i++) {
 800a26e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a272:	3301      	adds	r3, #1
 800a274:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a278:	e773      	b.n	800a162 <_ZN27positionEstimatorModelClass4stepEv+0x34ea>
    for (r1 = 0; r1 < 3; r1++) {
 800a27a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a27e:	3301      	adds	r3, #1
 800a280:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a284:	e765      	b.n	800a152 <_ZN27positionEstimatorModelClass4stepEv+0x34da>
      }
    }

    for (i = 0; i < 9; i++) {
 800a286:	2300      	movs	r3, #0
 800a288:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a28c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a290:	2b08      	cmp	r3, #8
 800a292:	dc29      	bgt.n	800a2e8 <_ZN27positionEstimatorModelClass4stepEv+0x3670>
      rtDW.P_a[i] = a[i];
 800a294:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a298:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	4413      	add	r3, r2
 800a2a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2a4:	1d3a      	adds	r2, r7, #4
 800a2a6:	6811      	ldr	r1, [r2, #0]
 800a2a8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a2ac:	32e5      	adds	r2, #229	; 0xe5
 800a2ae:	00d2      	lsls	r2, r2, #3
 800a2b0:	440a      	add	r2, r1
 800a2b2:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S6>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_a[i];
 800a2b6:	1d3b      	adds	r3, r7, #4
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a2be:	33e5      	adds	r3, #229	; 0xe5
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	4413      	add	r3, r2
 800a2c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2c8:	1d3a      	adds	r2, r7, #4
 800a2ca:	6811      	ldr	r1, [r2, #0]
 800a2cc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a2d0:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800a2d4:	00d2      	lsls	r2, r2, #3
 800a2d6:	440a      	add	r2, r1
 800a2d8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800a2dc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a2e6:	e7d1      	b.n	800a28c <_ZN27positionEstimatorModelClass4stepEv+0x3614>
    }

    // DataStoreWrite: '<S6>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_p[0];
 800a2e8:	1d3b      	adds	r3, r7, #4
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800a2f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2f4:	1d3a      	adds	r2, r7, #4
 800a2f6:	6812      	ldr	r2, [r2, #0]
 800a2f8:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800a2fc:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_p[1];
 800a300:	1d3b      	adds	r3, r7, #4
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a308:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a30c:	1d3a      	adds	r2, r7, #4
 800a30e:	6812      	ldr	r2, [r2, #0]
 800a310:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800a314:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_p[2];
 800a318:	1d3b      	adds	r3, r7, #4
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a320:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a324:	1d3a      	adds	r2, r7, #4
 800a326:	6812      	ldr	r2, [r2, #0]
 800a328:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800a32c:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Correct3'

  // Outputs for Atomic SubSystem: '<S1>/Output'
  // DataStoreRead: '<S7>/Data Store Read'
  rtDW.DataStoreRead_f[0] = rtDW.x[0];
 800a330:	1d3b      	adds	r3, r7, #4
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800a338:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a33c:	1d3a      	adds	r2, r7, #4
 800a33e:	6812      	ldr	r2, [r2, #0]
 800a340:	f502 62d3 	add.w	r2, r2, #1688	; 0x698
 800a344:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[1] = rtDW.x[1];
 800a348:	1d3b      	adds	r3, r7, #4
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800a350:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a354:	1d3a      	adds	r2, r7, #4
 800a356:	6812      	ldr	r2, [r2, #0]
 800a358:	f502 62d4 	add.w	r2, r2, #1696	; 0x6a0
 800a35c:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[2] = rtDW.x[2];
 800a360:	1d3b      	adds	r3, r7, #4
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800a368:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a36c:	1d3a      	adds	r2, r7, #4
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	f502 62d5 	add.w	r2, r2, #1704	; 0x6a8
 800a374:	e9c2 3400 	strd	r3, r4, [r2]

  // Inport: '<S7>/uBlockOrdering'
  rtDW.uBlockOrdering_b = rtDW.blockOrdering_p;
 800a378:	1d3b      	adds	r3, r7, #4
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f893 2c46 	ldrb.w	r2, [r3, #3142]	; 0xc46
 800a380:	1d3b      	adds	r3, r7, #4
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45

  // End of Outputs for SubSystem: '<S1>/Output'

  // Outport: '<Root>/estiZ'
  rtY.estiZ = rtDW.DataStoreRead_f[0];
 800a388:	1d3b      	adds	r3, r7, #4
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800a390:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a394:	1d3a      	adds	r2, r7, #4
 800a396:	6812      	ldr	r2, [r2, #0]
 800a398:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800a39c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVX'
  rtY.estiVX = rtDW.DataStoreRead[2];
 800a3a0:	1d3b      	adds	r3, r7, #4
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	e9d3 346c 	ldrd	r3, r4, [r3, #432]	; 0x1b0
 800a3a8:	1d3a      	adds	r2, r7, #4
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	f602 42e8 	addw	r2, r2, #3304	; 0xce8
 800a3b0:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVY'
  rtY.estiVY = rtDW.DataStoreRead[3];
 800a3b4:	1d3b      	adds	r3, r7, #4
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	e9d3 346e 	ldrd	r3, r4, [r3, #440]	; 0x1b8
 800a3bc:	1d3a      	adds	r2, r7, #4
 800a3be:	6812      	ldr	r2, [r2, #0]
 800a3c0:	f502 624f 	add.w	r2, r2, #3312	; 0xcf0
 800a3c4:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVZ'
  rtY.estiVZ = rtDW.DataStoreRead_f[1];
 800a3c8:	1d3b      	adds	r3, r7, #4
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800a3d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3d4:	1d3a      	adds	r2, r7, #4
 800a3d6:	6812      	ldr	r2, [r2, #0]
 800a3d8:	f602 42f8 	addw	r2, r2, #3320	; 0xcf8
 800a3dc:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAX'
  rtY.estiAX = rtDW.DataStoreRead[4];
 800a3e0:	1d3b      	adds	r3, r7, #4
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	e9d3 3470 	ldrd	r3, r4, [r3, #448]	; 0x1c0
 800a3e8:	1d3a      	adds	r2, r7, #4
 800a3ea:	6812      	ldr	r2, [r2, #0]
 800a3ec:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800a3f0:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAY'
  rtY.estiAY = rtDW.DataStoreRead[5];
 800a3f4:	1d3b      	adds	r3, r7, #4
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	e9d3 3472 	ldrd	r3, r4, [r3, #456]	; 0x1c8
 800a3fc:	1d3a      	adds	r2, r7, #4
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	f602 5208 	addw	r2, r2, #3336	; 0xd08
 800a404:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAZ'
  rtY.estiAZ = rtDW.DataStoreRead_f[2];
 800a408:	1d3b      	adds	r3, r7, #4
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 800a410:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a414:	1d3a      	adds	r2, r7, #4
 800a416:	6812      	ldr	r2, [r2, #0]
 800a418:	f502 6251 	add.w	r2, r2, #3344	; 0xd10
 800a41c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outputs for Atomic SubSystem: '<S1>/Predict'
  // DataStoreRead: '<S8>/Data Store ReadX'
  rtDW.DataStoreReadX_g[0] = rtDW.x[0];
 800a420:	1d3b      	adds	r3, r7, #4
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800a428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a42c:	1d3a      	adds	r2, r7, #4
 800a42e:	6812      	ldr	r2, [r2, #0]
 800a430:	f502 62c4 	add.w	r2, r2, #1568	; 0x620
 800a434:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[1] = rtDW.x[1];
 800a438:	1d3b      	adds	r3, r7, #4
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800a440:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a444:	1d3a      	adds	r2, r7, #4
 800a446:	6812      	ldr	r2, [r2, #0]
 800a448:	f502 62c5 	add.w	r2, r2, #1576	; 0x628
 800a44c:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[2] = rtDW.x[2];
 800a450:	1d3b      	adds	r3, r7, #4
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800a458:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a45c:	1d3a      	adds	r2, r7, #4
 800a45e:	6812      	ldr	r2, [r2, #0]
 800a460:	f502 62c6 	add.w	r2, r2, #1584	; 0x630
 800a464:	e9c2 3400 	strd	r3, r4, [r2]

  // Outputs for Atomic SubSystem: '<S1>/Output'
  for (i = 0; i < 9; i++) {
 800a468:	2300      	movs	r3, #0
 800a46a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a46e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a472:	2b08      	cmp	r3, #8
 800a474:	dc45      	bgt.n	800a502 <_ZN27positionEstimatorModelClass4stepEv+0x388a>
    // DataStoreRead: '<S7>/Data Store Read1'
    rtDW.DataStoreRead1_h[i] = rtDW.P_i_m[i];
 800a476:	1d3b      	adds	r3, r7, #4
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a47e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	4413      	add	r3, r2
 800a486:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a48a:	1d3a      	adds	r2, r7, #4
 800a48c:	6811      	ldr	r1, [r2, #0]
 800a48e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a492:	32d6      	adds	r2, #214	; 0xd6
 800a494:	00d2      	lsls	r2, r2, #3
 800a496:	440a      	add	r2, r1
 800a498:	e9c2 3400 	strd	r3, r4, [r2]

    // DataStoreRead: '<S8>/Data Store ReadP'
    rtDW.P_i[i] = rtDW.P_i_m[i];
 800a49c:	1d3b      	adds	r3, r7, #4
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	4413      	add	r3, r2
 800a4ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4b0:	1d3a      	adds	r2, r7, #4
 800a4b2:	6811      	ldr	r1, [r2, #0]
 800a4b4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a4b8:	32ca      	adds	r2, #202	; 0xca
 800a4ba:	00d2      	lsls	r2, r2, #3
 800a4bc:	440a      	add	r2, r1
 800a4be:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S8>/Predict'
    u = rtDW.P_i[i];
 800a4c2:	1d3b      	adds	r3, r7, #4
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4ca:	33ca      	adds	r3, #202	; 0xca
 800a4cc:	00db      	lsls	r3, r3, #3
 800a4ce:	4413      	add	r3, r2
 800a4d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4d4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a4d8:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_i[i] = u;
 800a4dc:	1d3b      	adds	r3, r7, #4
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4e4:	33ca      	adds	r3, #202	; 0xca
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	441a      	add	r2, r3
 800a4ea:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a4ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4f2:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800a4f6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a500:	e7b5      	b.n	800a46e <_ZN27positionEstimatorModelClass4stepEv+0x37f6>
  // End of Outputs for SubSystem: '<S1>/Output'

  // MATLAB Function: '<S8>/Predict' incorporates:
  //   Constant: '<S1>/Q'

  for (r1 = 0; r1 < 3; r1++) {
 800a502:	2300      	movs	r3, #0
 800a504:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a508:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	f300 8239 	bgt.w	800a984 <_ZN27positionEstimatorModelClass4stepEv+0x3d0c>
    u = 0.0;
 800a512:	f04f 0300 	mov.w	r3, #0
 800a516:	f04f 0400 	mov.w	r4, #0
 800a51a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a51e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a522:	2300      	movs	r3, #0
 800a524:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a528:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	f300 8109 	bgt.w	800a744 <_ZN27positionEstimatorModelClass4stepEv+0x3acc>
      u += a_1[3 * i + r1] * rtDW.DataStoreReadX_g[i];
 800a532:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a536:	4613      	mov	r3, r2
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	441a      	add	r2, r3
 800a53c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a540:	4413      	add	r3, r2
 800a542:	4a7f      	ldr	r2, [pc, #508]	; (800a740 <_ZN27positionEstimatorModelClass4stepEv+0x3ac8>)
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	4413      	add	r3, r2
 800a548:	ed93 6b00 	vldr	d6, [r3]
 800a54c:	1d3b      	adds	r3, r7, #4
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a554:	33c4      	adds	r3, #196	; 0xc4
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	4413      	add	r3, r2
 800a55a:	ed93 7b00 	vldr	d7, [r3]
 800a55e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a562:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a566:	ed93 6b00 	vldr	d6, [r3]
 800a56a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a56e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a572:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = 0.0;
 800a576:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a57a:	4613      	mov	r3, r2
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	441a      	add	r2, r3
 800a580:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a584:	4413      	add	r3, r2
 800a586:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	441a      	add	r2, r3
 800a58e:	f04f 0300 	mov.w	r3, #0
 800a592:	f04f 0400 	mov.w	r4, #0
 800a596:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800a59a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a59e:	4613      	mov	r3, r2
 800a5a0:	005b      	lsls	r3, r3, #1
 800a5a2:	441a      	add	r2, r3
 800a5a4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	4413      	add	r3, r2
 800a5b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5b6:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a5ba:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i] * a_1[r1];
 800a5be:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	4413      	add	r3, r2
 800a5c8:	1d3a      	adds	r2, r7, #4
 800a5ca:	6812      	ldr	r2, [r2, #0]
 800a5cc:	33ca      	adds	r3, #202	; 0xca
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	4413      	add	r3, r2
 800a5d2:	ed93 6b00 	vldr	d6, [r3]
 800a5d6:	4a5a      	ldr	r2, [pc, #360]	; (800a740 <_ZN27positionEstimatorModelClass4stepEv+0x3ac8>)
 800a5d8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	4413      	add	r3, r2
 800a5e0:	ed93 7b00 	vldr	d7, [r3]
 800a5e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a5e8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a5ec:	ed93 6b00 	vldr	d6, [r3]
 800a5f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a5f4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a5f8:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = a22;
 800a5fc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a600:	4613      	mov	r3, r2
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	441a      	add	r2, r3
 800a606:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a60a:	4413      	add	r3, r2
 800a60c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	441a      	add	r2, r3
 800a614:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a618:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a61c:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800a620:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a624:	4613      	mov	r3, r2
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	441a      	add	r2, r3
 800a62a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a62e:	4413      	add	r3, r2
 800a630:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	4413      	add	r3, r2
 800a638:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a63c:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a640:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 1] * a_1[r1 + 3];
 800a644:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a648:	4613      	mov	r3, r2
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	4413      	add	r3, r2
 800a64e:	3301      	adds	r3, #1
 800a650:	1d3a      	adds	r2, r7, #4
 800a652:	6812      	ldr	r2, [r2, #0]
 800a654:	33ca      	adds	r3, #202	; 0xca
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	4413      	add	r3, r2
 800a65a:	ed93 6b00 	vldr	d6, [r3]
 800a65e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a662:	3303      	adds	r3, #3
 800a664:	4a36      	ldr	r2, [pc, #216]	; (800a740 <_ZN27positionEstimatorModelClass4stepEv+0x3ac8>)
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	4413      	add	r3, r2
 800a66a:	ed93 7b00 	vldr	d7, [r3]
 800a66e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a672:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a676:	ed93 6b00 	vldr	d6, [r3]
 800a67a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a67e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a682:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = a22;
 800a686:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a68a:	4613      	mov	r3, r2
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	441a      	add	r2, r3
 800a690:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a694:	4413      	add	r3, r2
 800a696:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	441a      	add	r2, r3
 800a69e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a6a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6a6:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800a6aa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	441a      	add	r2, r3
 800a6b4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a6be:	00db      	lsls	r3, r3, #3
 800a6c0:	4413      	add	r3, r2
 800a6c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6c6:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a6ca:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 2] * a_1[r1 + 6];
 800a6ce:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	4413      	add	r3, r2
 800a6d8:	3302      	adds	r3, #2
 800a6da:	1d3a      	adds	r2, r7, #4
 800a6dc:	6812      	ldr	r2, [r2, #0]
 800a6de:	33ca      	adds	r3, #202	; 0xca
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	4413      	add	r3, r2
 800a6e4:	ed93 6b00 	vldr	d6, [r3]
 800a6e8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a6ec:	3306      	adds	r3, #6
 800a6ee:	4a14      	ldr	r2, [pc, #80]	; (800a740 <_ZN27positionEstimatorModelClass4stepEv+0x3ac8>)
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	4413      	add	r3, r2
 800a6f4:	ed93 7b00 	vldr	d7, [r3]
 800a6f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a6fc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a700:	ed93 6b00 	vldr	d6, [r3]
 800a704:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a708:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a70c:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = a22;
 800a710:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a714:	4613      	mov	r3, r2
 800a716:	005b      	lsls	r3, r3, #1
 800a718:	441a      	add	r2, r3
 800a71a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a71e:	4413      	add	r3, r2
 800a720:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	441a      	add	r2, r3
 800a728:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a72c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a730:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a734:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a738:	3301      	adds	r3, #1
 800a73a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a73e:	e6f3      	b.n	800a528 <_ZN27positionEstimatorModelClass4stepEv+0x38b0>
 800a740:	0802cd38 	.word	0x0802cd38
    }

    rtDW.xNew_k[r1] = u;
 800a744:	1d3b      	adds	r3, r7, #4
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a74c:	33c7      	adds	r3, #199	; 0xc7
 800a74e:	00db      	lsls	r3, r3, #3
 800a750:	441a      	add	r2, r3
 800a752:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a756:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a75a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a75e:	2300      	movs	r3, #0
 800a760:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a764:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a768:	2b02      	cmp	r3, #2
 800a76a:	f300 8105 	bgt.w	800a978 <_ZN27positionEstimatorModelClass4stepEv+0x3d00>
      a[r1 + 3 * i] = 0.0;
 800a76e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a772:	4613      	mov	r3, r2
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	441a      	add	r2, r3
 800a778:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a77c:	4413      	add	r3, r2
 800a77e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	441a      	add	r2, r3
 800a786:	f04f 0300 	mov.w	r3, #0
 800a78a:	f04f 0400 	mov.w	r4, #0
 800a78e:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800a792:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a796:	4613      	mov	r3, r2
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	441a      	add	r2, r3
 800a79c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	4413      	add	r3, r2
 800a7aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7ae:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a7b2:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i] * imvec_1[r1];
 800a7b6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	4413      	add	r3, r2
 800a7c0:	4acd      	ldr	r2, [pc, #820]	; (800aaf8 <_ZN27positionEstimatorModelClass4stepEv+0x3e80>)
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	4413      	add	r3, r2
 800a7c6:	ed93 6b00 	vldr	d6, [r3]
 800a7ca:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a7ce:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a7d2:	00db      	lsls	r3, r3, #3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	ed93 7b00 	vldr	d7, [r3]
 800a7da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a7de:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a7e2:	ed93 6b00 	vldr	d6, [r3]
 800a7e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a7ea:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a7ee:	ed83 7b00 	vstr	d7, [r3]
      a[r1 + 3 * i] = a22;
 800a7f2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	441a      	add	r2, r3
 800a7fc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a800:	4413      	add	r3, r2
 800a802:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	441a      	add	r2, r3
 800a80a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a80e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a812:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800a816:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a81a:	4613      	mov	r3, r2
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	441a      	add	r2, r3
 800a820:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a824:	4413      	add	r3, r2
 800a826:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	4413      	add	r3, r2
 800a82e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a832:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a836:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 1] * imvec_1[r1 + 3];
 800a83a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a83e:	4613      	mov	r3, r2
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	4413      	add	r3, r2
 800a844:	3301      	adds	r3, #1
 800a846:	4aac      	ldr	r2, [pc, #688]	; (800aaf8 <_ZN27positionEstimatorModelClass4stepEv+0x3e80>)
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	4413      	add	r3, r2
 800a84c:	ed93 6b00 	vldr	d6, [r3]
 800a850:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a854:	3303      	adds	r3, #3
 800a856:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	4413      	add	r3, r2
 800a85e:	ed93 7b00 	vldr	d7, [r3]
 800a862:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a866:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a86a:	ed93 6b00 	vldr	d6, [r3]
 800a86e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a872:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a876:	ed83 7b00 	vstr	d7, [r3]
      a[r1 + 3 * i] = a22;
 800a87a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a87e:	4613      	mov	r3, r2
 800a880:	005b      	lsls	r3, r3, #1
 800a882:	441a      	add	r2, r3
 800a884:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a888:	4413      	add	r3, r2
 800a88a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	441a      	add	r2, r3
 800a892:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a896:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a89a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800a89e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	441a      	add	r2, r3
 800a8a8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8ba:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a8be:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 2] * imvec_1[r1 + 6];
 800a8c2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	4413      	add	r3, r2
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	4a8a      	ldr	r2, [pc, #552]	; (800aaf8 <_ZN27positionEstimatorModelClass4stepEv+0x3e80>)
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	ed93 6b00 	vldr	d6, [r3]
 800a8d8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a8dc:	3306      	adds	r3, #6
 800a8de:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	ed93 7b00 	vldr	d7, [r3]
 800a8ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a8ee:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a8f2:	ed93 6b00 	vldr	d6, [r3]
 800a8f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a8fa:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a8fe:	ed83 7b00 	vstr	d7, [r3]
      a[r1 + 3 * i] = a22;
 800a902:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a906:	4613      	mov	r3, r2
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	441a      	add	r2, r3
 800a90c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a910:	4413      	add	r3, r2
 800a912:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	441a      	add	r2, r3
 800a91a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a91e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a922:	e9c2 3400 	strd	r3, r4, [r2]
      b_a[i + 3 * r1] = b_a_1[i] * rtP.Q_Value * b_a_1[r1];
 800a926:	4a75      	ldr	r2, [pc, #468]	; (800aafc <_ZN27positionEstimatorModelClass4stepEv+0x3e84>)
 800a928:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a92c:	00db      	lsls	r3, r3, #3
 800a92e:	4413      	add	r3, r2
 800a930:	ed93 6b00 	vldr	d6, [r3]
 800a934:	4b72      	ldr	r3, [pc, #456]	; (800ab00 <_ZN27positionEstimatorModelClass4stepEv+0x3e88>)
 800a936:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 800a93a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a93e:	4a6f      	ldr	r2, [pc, #444]	; (800aafc <_ZN27positionEstimatorModelClass4stepEv+0x3e84>)
 800a940:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a944:	00db      	lsls	r3, r3, #3
 800a946:	4413      	add	r3, r2
 800a948:	ed93 7b00 	vldr	d7, [r3]
 800a94c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a950:	4613      	mov	r3, r2
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	441a      	add	r2, r3
 800a956:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a95a:	4413      	add	r3, r2
 800a95c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a960:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	4413      	add	r3, r2
 800a968:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 800a96c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a970:	3301      	adds	r3, #1
 800a972:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a976:	e6f5      	b.n	800a764 <_ZN27positionEstimatorModelClass4stepEv+0x3aec>
  for (r1 = 0; r1 < 3; r1++) {
 800a978:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a97c:	3301      	adds	r3, #1
 800a97e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a982:	e5c1      	b.n	800a508 <_ZN27positionEstimatorModelClass4stepEv+0x3890>
    }
  }

  for (i = 0; i < 9; i++) {
 800a984:	2300      	movs	r3, #0
 800a986:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a98a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a98e:	2b08      	cmp	r3, #8
 800a990:	dc33      	bgt.n	800a9fa <_ZN27positionEstimatorModelClass4stepEv+0x3d82>
    rtDW.P_i[i] = a[i] + b_a[i];
 800a992:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a996:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	4413      	add	r3, r2
 800a99e:	ed93 6b00 	vldr	d6, [r3]
 800a9a2:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a9a6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	4413      	add	r3, r2
 800a9ae:	ed93 7b00 	vldr	d7, [r3]
 800a9b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a9b6:	1d3b      	adds	r3, r7, #4
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9be:	33ca      	adds	r3, #202	; 0xca
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	4413      	add	r3, r2
 800a9c4:	ed83 7b00 	vstr	d7, [r3]

    // DataStoreWrite: '<S8>/Data Store WriteP'
    rtDW.P_i_m[i] = rtDW.P_i[i];
 800a9c8:	1d3b      	adds	r3, r7, #4
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9d0:	33ca      	adds	r3, #202	; 0xca
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	4413      	add	r3, r2
 800a9d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9da:	1d3a      	adds	r2, r7, #4
 800a9dc:	6811      	ldr	r1, [r2, #0]
 800a9de:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a9e2:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800a9e6:	00d2      	lsls	r2, r2, #3
 800a9e8:	440a      	add	r2, r1
 800a9ea:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800a9ee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a9f8:	e7c7      	b.n	800a98a <_ZN27positionEstimatorModelClass4stepEv+0x3d12>
  }

  // DataStoreWrite: '<S8>/Data Store WriteX'
  rtDW.x[0] = rtDW.xNew_k[0];
 800a9fa:	1d3b      	adds	r3, r7, #4
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 800aa02:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa06:	1d3a      	adds	r2, r7, #4
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800aa0e:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[1] = rtDW.xNew_k[1];
 800aa12:	1d3b      	adds	r3, r7, #4
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800aa1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa1e:	1d3a      	adds	r2, r7, #4
 800aa20:	6812      	ldr	r2, [r2, #0]
 800aa22:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800aa26:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[2] = rtDW.xNew_k[2];
 800aa2a:	1d3b      	adds	r3, r7, #4
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 800aa32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa36:	1d3a      	adds	r2, r7, #4
 800aa38:	6812      	ldr	r2, [r2, #0]
 800aa3a:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800aa3e:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Predict'

  // Outputs for Atomic SubSystem: '<S2>/Predict'
  // DataStoreRead: '<S16>/Data Store ReadX'
  for (i = 0; i < 6; i++) {
 800aa42:	2300      	movs	r3, #0
 800aa44:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aa48:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa4c:	2b05      	cmp	r3, #5
 800aa4e:	dc18      	bgt.n	800aa82 <_ZN27positionEstimatorModelClass4stepEv+0x3e0a>
    rtDW.DataStoreReadX[i] = rtDW.x_p[i];
 800aa50:	1d3b      	adds	r3, r7, #4
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa58:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	4413      	add	r3, r2
 800aa60:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa64:	1d3a      	adds	r2, r7, #4
 800aa66:	6811      	ldr	r1, [r2, #0]
 800aa68:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800aa6c:	3204      	adds	r2, #4
 800aa6e:	00d2      	lsls	r2, r2, #3
 800aa70:	440a      	add	r2, r1
 800aa72:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800aa76:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aa80:	e7e2      	b.n	800aa48 <_ZN27positionEstimatorModelClass4stepEv+0x3dd0>
  }

  // End of DataStoreRead: '<S16>/Data Store ReadX'
  for (i = 0; i < 36; i++) {
 800aa82:	2300      	movs	r3, #0
 800aa84:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aa88:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa8c:	2b23      	cmp	r3, #35	; 0x23
 800aa8e:	dc39      	bgt.n	800ab04 <_ZN27positionEstimatorModelClass4stepEv+0x3e8c>
    // DataStoreRead: '<S16>/Data Store ReadP'
    rtDW.P_n[i] = rtDW.P_n_c[i];
 800aa90:	1d3b      	adds	r3, r7, #4
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa98:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	4413      	add	r3, r2
 800aaa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaa4:	1d3a      	adds	r2, r7, #4
 800aaa6:	6811      	ldr	r1, [r2, #0]
 800aaa8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800aaac:	3210      	adds	r2, #16
 800aaae:	00d2      	lsls	r2, r2, #3
 800aab0:	440a      	add	r2, r1
 800aab2:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S16>/Predict'
    u = rtDW.P_n[i];
 800aab6:	1d3b      	adds	r3, r7, #4
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aabe:	3310      	adds	r3, #16
 800aac0:	00db      	lsls	r3, r3, #3
 800aac2:	4413      	add	r3, r2
 800aac4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aac8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800aacc:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_n[i] = u;
 800aad0:	1d3b      	adds	r3, r7, #4
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aad8:	3310      	adds	r3, #16
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	441a      	add	r2, r3
 800aade:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800aae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aae6:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800aaea:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aaee:	3301      	adds	r3, #1
 800aaf0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aaf4:	e7c8      	b.n	800aa88 <_ZN27positionEstimatorModelClass4stepEv+0x3e10>
 800aaf6:	bf00      	nop
 800aaf8:	0802cd80 	.word	0x0802cd80
 800aafc:	0802cdc8 	.word	0x0802cdc8
 800ab00:	240002b0 	.word	0x240002b0
  }

  // MATLAB Function: '<S16>/Predict' incorporates:
  //   Constant: '<S2>/Q'

  for (r1 = 0; r1 < 6; r1++) {
 800ab04:	2300      	movs	r3, #0
 800ab06:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ab0a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	f300 8169 	bgt.w	800ade6 <_ZN27positionEstimatorModelClass4stepEv+0x416e>
    u = 0.0;
 800ab14:	f04f 0300 	mov.w	r3, #0
 800ab18:	f04f 0400 	mov.w	r4, #0
 800ab1c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800ab20:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800ab24:	2300      	movs	r3, #0
 800ab26:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ab2a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ab2e:	2b05      	cmp	r3, #5
 800ab30:	f300 809f 	bgt.w	800ac72 <_ZN27positionEstimatorModelClass4stepEv+0x3ffa>
      u += a_2[6 * i + r1] * rtDW.DataStoreReadX[i];
 800ab34:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ab38:	4613      	mov	r3, r2
 800ab3a:	005b      	lsls	r3, r3, #1
 800ab3c:	4413      	add	r3, r2
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	461a      	mov	r2, r3
 800ab42:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ab46:	4413      	add	r3, r2
 800ab48:	4ad8      	ldr	r2, [pc, #864]	; (800aeac <_ZN27positionEstimatorModelClass4stepEv+0x4234>)
 800ab4a:	00db      	lsls	r3, r3, #3
 800ab4c:	4413      	add	r3, r2
 800ab4e:	ed93 6b00 	vldr	d6, [r3]
 800ab52:	1d3b      	adds	r3, r7, #4
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	4413      	add	r3, r2
 800ab60:	ed93 7b00 	vldr	d7, [r3]
 800ab64:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ab68:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ab6c:	ed93 6b00 	vldr	d6, [r3]
 800ab70:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ab74:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ab78:	ed83 7b00 	vstr	d7, [r3]
      gain_0[r1 + 6 * i] = 0.0;
 800ab7c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ab80:	4613      	mov	r3, r2
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	4413      	add	r3, r2
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	461a      	mov	r2, r3
 800ab8a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ab8e:	4413      	add	r3, r2
 800ab90:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	441a      	add	r2, r3
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800aba4:	2300      	movs	r3, #0
 800aba6:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800abaa:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800abae:	2b05      	cmp	r3, #5
 800abb0:	dc59      	bgt.n	800ac66 <_ZN27positionEstimatorModelClass4stepEv+0x3fee>
        a22 = gain_0[6 * i + r1];
 800abb2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800abb6:	4613      	mov	r3, r2
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4413      	add	r3, r2
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	461a      	mov	r2, r3
 800abc0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800abc4:	4413      	add	r3, r2
 800abc6:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800abca:	00db      	lsls	r3, r3, #3
 800abcc:	4413      	add	r3, r2
 800abce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abd2:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800abd6:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += a_2[6 * k + r1] * rtDW.P_n[6 * i + k];
 800abda:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800abde:	4613      	mov	r3, r2
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	4413      	add	r3, r2
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	461a      	mov	r2, r3
 800abe8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800abec:	4413      	add	r3, r2
 800abee:	4aaf      	ldr	r2, [pc, #700]	; (800aeac <_ZN27positionEstimatorModelClass4stepEv+0x4234>)
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	4413      	add	r3, r2
 800abf4:	ed93 6b00 	vldr	d6, [r3]
 800abf8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800abfc:	4613      	mov	r3, r2
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	4413      	add	r3, r2
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	461a      	mov	r2, r3
 800ac06:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800ac0a:	4413      	add	r3, r2
 800ac0c:	1d3a      	adds	r2, r7, #4
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	3310      	adds	r3, #16
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	4413      	add	r3, r2
 800ac16:	ed93 7b00 	vldr	d7, [r3]
 800ac1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ac1e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ac22:	ed93 6b00 	vldr	d6, [r3]
 800ac26:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ac2a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ac2e:	ed83 7b00 	vstr	d7, [r3]
        gain_0[r1 + 6 * i] = a22;
 800ac32:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ac36:	4613      	mov	r3, r2
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	4413      	add	r3, r2
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ac44:	4413      	add	r3, r2
 800ac46:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	441a      	add	r2, r3
 800ac4e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ac52:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac56:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800ac5a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800ac5e:	3301      	adds	r3, #1
 800ac60:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800ac64:	e7a1      	b.n	800abaa <_ZN27positionEstimatorModelClass4stepEv+0x3f32>
    for (i = 0; i < 6; i++) {
 800ac66:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ac70:	e75b      	b.n	800ab2a <_ZN27positionEstimatorModelClass4stepEv+0x3eb2>
      }
    }

    rtDW.xNew[r1] = u;
 800ac72:	1d3b      	adds	r3, r7, #4
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ac7a:	330a      	adds	r3, #10
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	441a      	add	r2, r3
 800ac80:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ac84:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac88:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ac92:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ac96:	2b05      	cmp	r3, #5
 800ac98:	f300 809f 	bgt.w	800adda <_ZN27positionEstimatorModelClass4stepEv+0x4162>
      a_0[r1 + 6 * i] = 0.0;
 800ac9c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800aca0:	4613      	mov	r3, r2
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	4413      	add	r3, r2
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	461a      	mov	r2, r3
 800acaa:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800acae:	4413      	add	r3, r2
 800acb0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800acb4:	00db      	lsls	r3, r3, #3
 800acb6:	441a      	add	r2, r3
 800acb8:	f04f 0300 	mov.w	r3, #0
 800acbc:	f04f 0400 	mov.w	r4, #0
 800acc0:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800acc4:	2300      	movs	r3, #0
 800acc6:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800acca:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800acce:	2b05      	cmp	r3, #5
 800acd0:	dc58      	bgt.n	800ad84 <_ZN27positionEstimatorModelClass4stepEv+0x410c>
        a22 = a_0[6 * i + r1];
 800acd2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800acd6:	4613      	mov	r3, r2
 800acd8:	005b      	lsls	r3, r3, #1
 800acda:	4413      	add	r3, r2
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	461a      	mov	r2, r3
 800ace0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ace4:	4413      	add	r3, r2
 800ace6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	4413      	add	r3, r2
 800acee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acf2:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800acf6:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += gain_0[6 * k + r1] * b_0[6 * i + k];
 800acfa:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800acfe:	4613      	mov	r3, r2
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	4413      	add	r3, r2
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	461a      	mov	r2, r3
 800ad08:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	4413      	add	r3, r2
 800ad16:	ed93 6b00 	vldr	d6, [r3]
 800ad1a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ad1e:	4613      	mov	r3, r2
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	4413      	add	r3, r2
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	461a      	mov	r2, r3
 800ad28:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800ad2c:	4413      	add	r3, r2
 800ad2e:	4a60      	ldr	r2, [pc, #384]	; (800aeb0 <_ZN27positionEstimatorModelClass4stepEv+0x4238>)
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	4413      	add	r3, r2
 800ad34:	ed93 7b00 	vldr	d7, [r3]
 800ad38:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ad3c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ad40:	ed93 6b00 	vldr	d6, [r3]
 800ad44:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ad48:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ad4c:	ed83 7b00 	vstr	d7, [r3]
        a_0[r1 + 6 * i] = a22;
 800ad50:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ad54:	4613      	mov	r3, r2
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	4413      	add	r3, r2
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ad62:	4413      	add	r3, r2
 800ad64:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	441a      	add	r2, r3
 800ad6c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ad70:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad74:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800ad78:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800ad82:	e7a2      	b.n	800acca <_ZN27positionEstimatorModelClass4stepEv+0x4052>
      }

      b_a_0[i + 6 * r1] = b_a_2[i] * rtP.Q_Value_c * b_a_2[r1];
 800ad84:	4a4b      	ldr	r2, [pc, #300]	; (800aeb4 <_ZN27positionEstimatorModelClass4stepEv+0x423c>)
 800ad86:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	ed93 6b00 	vldr	d6, [r3]
 800ad92:	4b49      	ldr	r3, [pc, #292]	; (800aeb8 <_ZN27positionEstimatorModelClass4stepEv+0x4240>)
 800ad94:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 800ad98:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad9c:	4a45      	ldr	r2, [pc, #276]	; (800aeb4 <_ZN27positionEstimatorModelClass4stepEv+0x423c>)
 800ad9e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	4413      	add	r3, r2
 800ada6:	ed93 7b00 	vldr	d7, [r3]
 800adaa:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800adae:	4613      	mov	r3, r2
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	4413      	add	r3, r2
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	461a      	mov	r2, r3
 800adb8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800adbc:	4413      	add	r3, r2
 800adbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 800adc2:	f107 0208 	add.w	r2, r7, #8
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	4413      	add	r3, r2
 800adca:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 6; i++) {
 800adce:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800add2:	3301      	adds	r3, #1
 800add4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800add8:	e75b      	b.n	800ac92 <_ZN27positionEstimatorModelClass4stepEv+0x401a>
  for (r1 = 0; r1 < 6; r1++) {
 800adda:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800adde:	3301      	adds	r3, #1
 800ade0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ade4:	e691      	b.n	800ab0a <_ZN27positionEstimatorModelClass4stepEv+0x3e92>
    }
  }

  for (i = 0; i < 36; i++) {
 800ade6:	2300      	movs	r3, #0
 800ade8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800adec:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800adf0:	2b23      	cmp	r3, #35	; 0x23
 800adf2:	dc33      	bgt.n	800ae5c <_ZN27positionEstimatorModelClass4stepEv+0x41e4>
    rtDW.P_n[i] = a_0[i] + b_a_0[i];
 800adf4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800adf8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	4413      	add	r3, r2
 800ae00:	ed93 6b00 	vldr	d6, [r3]
 800ae04:	f107 0208 	add.w	r2, r7, #8
 800ae08:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	4413      	add	r3, r2
 800ae10:	ed93 7b00 	vldr	d7, [r3]
 800ae14:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ae18:	1d3b      	adds	r3, r7, #4
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae20:	3310      	adds	r3, #16
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	4413      	add	r3, r2
 800ae26:	ed83 7b00 	vstr	d7, [r3]

    // DataStoreWrite: '<S16>/Data Store WriteP'
    rtDW.P_n_c[i] = rtDW.P_n[i];
 800ae2a:	1d3b      	adds	r3, r7, #4
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae32:	3310      	adds	r3, #16
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	4413      	add	r3, r2
 800ae38:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae3c:	1d3a      	adds	r2, r7, #4
 800ae3e:	6811      	ldr	r1, [r2, #0]
 800ae40:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ae44:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800ae48:	00d2      	lsls	r2, r2, #3
 800ae4a:	440a      	add	r2, r1
 800ae4c:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800ae50:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae54:	3301      	adds	r3, #1
 800ae56:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ae5a:	e7c7      	b.n	800adec <_ZN27positionEstimatorModelClass4stepEv+0x4174>
  }

  // DataStoreWrite: '<S16>/Data Store WriteX'
  for (i = 0; i < 6; i++) {
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ae62:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae66:	2b05      	cmp	r3, #5
 800ae68:	dc18      	bgt.n	800ae9c <_ZN27positionEstimatorModelClass4stepEv+0x4224>
    rtDW.x_p[i] = rtDW.xNew[i];
 800ae6a:	1d3b      	adds	r3, r7, #4
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae72:	330a      	adds	r3, #10
 800ae74:	00db      	lsls	r3, r3, #3
 800ae76:	4413      	add	r3, r2
 800ae78:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae7c:	1d3a      	adds	r2, r7, #4
 800ae7e:	6811      	ldr	r1, [r2, #0]
 800ae80:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ae84:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800ae88:	00d2      	lsls	r2, r2, #3
 800ae8a:	440a      	add	r2, r1
 800ae8c:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800ae90:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae94:	3301      	adds	r3, #1
 800ae96:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ae9a:	e7e2      	b.n	800ae62 <_ZN27positionEstimatorModelClass4stepEv+0x41ea>
  }

  // End of DataStoreWrite: '<S16>/Data Store WriteX'
  // End of Outputs for SubSystem: '<S2>/Predict'
}
 800ae9c:	bf00      	nop
 800ae9e:	f607 07d4 	addw	r7, r7, #2260	; 0x8d4
 800aea2:	46bd      	mov	sp, r7
 800aea4:	ecbd 8b02 	vpop	{d8}
 800aea8:	bd90      	pop	{r4, r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	0802cde0 	.word	0x0802cde0
 800aeb0:	0802cf30 	.word	0x0802cf30
 800aeb4:	0802cf00 	.word	0x0802cf00
 800aeb8:	240002b0 	.word	0x240002b0

0800aebc <_ZN27positionEstimatorModelClass10initializeEv>:

// Model initialize function
void positionEstimatorModelClass::initialize()
{
 800aebc:	b590      	push	{r4, r7, lr}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));
 800aec4:	2008      	movs	r0, #8
 800aec6:	f7fa fdc7 	bl	8005a58 <rt_InitInfAndNaN>

  {
    int32_T i;

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - P'
    for (i = 0; i < 9; i++) {
 800aeca:	2300      	movs	r3, #0
 800aecc:	60fb      	str	r3, [r7, #12]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b08      	cmp	r3, #8
 800aed2:	dc12      	bgt.n	800aefa <_ZN27positionEstimatorModelClass10initializeEv+0x3e>
      rtDW.P_i_m[i] = rtP.DataStoreMemoryP_InitialValue[i];
 800aed4:	4a3e      	ldr	r2, [pc, #248]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3344      	adds	r3, #68	; 0x44
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	4413      	add	r3, r2
 800aede:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aee2:	6879      	ldr	r1, [r7, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800aeea:	00d2      	lsls	r2, r2, #3
 800aeec:	440a      	add	r2, r1
 800aeee:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3301      	adds	r3, #1
 800aef6:	60fb      	str	r3, [r7, #12]
 800aef8:	e7e9      	b.n	800aece <_ZN27positionEstimatorModelClass10initializeEv+0x12>
    }

    // End of Start for DataStoreMemory: '<S1>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - x'
    rtDW.x[0] = rtP.DataStoreMemoryx_InitialValue[0];
 800aefa:	4b35      	ldr	r3, [pc, #212]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800aefc:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800af06:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtP.DataStoreMemoryx_InitialValue[1];
 800af0a:	4b31      	ldr	r3, [pc, #196]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af0c:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800af16:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtP.DataStoreMemoryx_InitialValue[2];
 800af1a:	4b2d      	ldr	r3, [pc, #180]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af1c:	e9d3 349e 	ldrd	r3, r4, [r3, #632]	; 0x278
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800af26:	e9c2 3400 	strd	r3, r4, [r2]

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - P'
    for (i = 0; i < 36; i++) {
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b23      	cmp	r3, #35	; 0x23
 800af32:	dc12      	bgt.n	800af5a <_ZN27positionEstimatorModelClass10initializeEv+0x9e>
      rtDW.P_n_c[i] = rtP.DataStoreMemoryP_InitialValue_m[i];
 800af34:	4a26      	ldr	r2, [pc, #152]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3352      	adds	r3, #82	; 0x52
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	4413      	add	r3, r2
 800af3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af42:	6879      	ldr	r1, [r7, #4]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800af4a:	00d2      	lsls	r2, r2, #3
 800af4c:	440a      	add	r2, r1
 800af4e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3301      	adds	r3, #1
 800af56:	60fb      	str	r3, [r7, #12]
 800af58:	e7e9      	b.n	800af2e <_ZN27positionEstimatorModelClass10initializeEv+0x72>
    }

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - x'
    for (i = 0; i < 6; i++) {
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b05      	cmp	r3, #5
 800af62:	dc12      	bgt.n	800af8a <_ZN27positionEstimatorModelClass10initializeEv+0xce>
      rtDW.x_p[i] = rtP.DataStoreMemoryx_InitialValue_j[i];
 800af64:	4a1a      	ldr	r2, [pc, #104]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	3376      	adds	r3, #118	; 0x76
 800af6a:	00db      	lsls	r3, r3, #3
 800af6c:	4413      	add	r3, r2
 800af6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af72:	6879      	ldr	r1, [r7, #4]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800af7a:	00d2      	lsls	r2, r2, #3
 800af7c:	440a      	add	r2, r1
 800af7e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3301      	adds	r3, #1
 800af86:	60fb      	str	r3, [r7, #12]
 800af88:	e7e9      	b.n	800af5e <_ZN27positionEstimatorModelClass10initializeEv+0xa2>

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - x'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct1'
    // SystemInitialize for Outport: '<S13>/yBlockOrdering'
    rtDW.blockOrdering_f = rtP.yBlockOrdering_Y0_a;
 800af8a:	4b11      	ldr	r3, [pc, #68]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af8c:	f893 23e3 	ldrb.w	r2, [r3, #995]	; 0x3e3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

    // End of SystemInitialize for SubSystem: '<S2>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct2'
    // SystemInitialize for Outport: '<S14>/yBlockOrdering'
    rtDW.blockOrdering = rtP.yBlockOrdering_Y0_g;
 800af96:	4b0e      	ldr	r3, [pc, #56]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af98:	f893 23e4 	ldrb.w	r2, [r3, #996]	; 0x3e4
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43

    // End of SystemInitialize for SubSystem: '<S2>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct1'
    // SystemInitialize for Outport: '<S4>/yBlockOrdering'
    rtDW.blockOrdering_k = rtP.yBlockOrdering_Y0;
 800afa2:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800afa4:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48

    // End of SystemInitialize for SubSystem: '<S1>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct2'
    // SystemInitialize for Outport: '<S5>/yBlockOrdering'
    rtDW.blockOrdering_n = rtP.yBlockOrdering_Y0_k;
 800afae:	4b08      	ldr	r3, [pc, #32]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800afb0:	f893 23e1 	ldrb.w	r2, [r3, #993]	; 0x3e1
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47

    // End of SystemInitialize for SubSystem: '<S1>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct3'
    // SystemInitialize for Outport: '<S6>/yBlockOrdering'
    rtDW.blockOrdering_p = rtP.yBlockOrdering_Y0_b;
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800afbc:	f893 23e2 	ldrb.w	r2, [r3, #994]	; 0x3e2
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46

    // End of SystemInitialize for SubSystem: '<S1>/Correct3'
  }
}
 800afc6:	bf00      	nop
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd90      	pop	{r4, r7, pc}
 800afce:	bf00      	nop
 800afd0:	240002b0 	.word	0x240002b0

0800afd4 <_ZN27positionEstimatorModelClassC1Ev>:

// Constructor
positionEstimatorModelClass::positionEstimatorModelClass():
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  rtDW()
  ,rtU()
  ,rtY()
  ,rtM()
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4618      	mov	r0, r3
 800afe0:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 800afe4:	461a      	mov	r2, r3
 800afe6:	2100      	movs	r1, #0
 800afe8:	f020 fcf1 	bl	802b9ce <memset>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 800aff2:	2280      	movs	r2, #128	; 0x80
 800aff4:	2100      	movs	r1, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f020 fce9 	bl	802b9ce <memset>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 800b002:	2248      	movs	r2, #72	; 0x48
 800b004:	2100      	movs	r1, #0
 800b006:	4618      	mov	r0, r3
 800b008:	f020 fce1 	bl	802b9ce <memset>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
{
  // Currently there is no constructor body generated.
}
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	ed87 0a01 	vstr	s0, [r7, #4]
 800b028:	ed97 0a01 	vldr	s0, [r7, #4]
 800b02c:	f01d fffc 	bl	8029028 <asinf>
 800b030:	eef0 7a40 	vmov.f32	s15, s0
 800b034:	eeb0 0a67 	vmov.f32	s0, s15
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	ed87 0a01 	vstr	s0, [r7, #4]
 800b048:	edc7 0a00 	vstr	s1, [r7]
 800b04c:	edd7 0a00 	vldr	s1, [r7]
 800b050:	ed97 0a01 	vldr	s0, [r7, #4]
 800b054:	f01e f83c 	bl	80290d0 <atan2f>
 800b058:	eef0 7a40 	vmov.f32	s15, s0
 800b05c:	eeb0 0a67 	vmov.f32	s0, s15
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800b066:	b580      	push	{r7, lr}
 800b068:	b082      	sub	sp, #8
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	ed87 0a01 	vstr	s0, [r7, #4]
 800b070:	ed97 0a01 	vldr	s0, [r7, #4]
 800b074:	f01e f830 	bl	80290d8 <sqrtf>
 800b078:	eef0 7a40 	vmov.f32	s15, s0
 800b07c:	eeb0 0a67 	vmov.f32	s0, s15
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:
	 *  \return variable is updated(true), variable is not updated(false)
	 *
	 *  setFunction :
	 *  \param[in]		variable		msgBus data is changed to input data
	 */
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 800b086:	b4b0      	push	{r4, r5, r7}
 800b088:	b085      	sub	sp, #20
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
 800b090:	2300      	movs	r3, #0
 800b092:	73fb      	strb	r3, [r7, #15]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0a0:	42a2      	cmp	r2, r4
 800b0a2:	bf08      	it	eq
 800b0a4:	4299      	cmpeq	r1, r3
 800b0a6:	d001      	beq.n	800b0ac <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x26>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	73fb      	strb	r3, [r7, #15]
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4614      	mov	r4, r2
 800b0b2:	461d      	mov	r5, r3
 800b0b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b0bc:	e884 0003 	stmia.w	r4, {r0, r1}
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bcb0      	pop	{r4, r5, r7}
 800b0ca:	4770      	bx	lr

0800b0cc <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 800b0cc:	b4b0      	push	{r4, r5, r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	73fb      	strb	r3, [r7, #15]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800b0e6:	42a2      	cmp	r2, r4
 800b0e8:	bf08      	it	eq
 800b0ea:	4299      	cmpeq	r1, r3
 800b0ec:	d001      	beq.n	800b0f2 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x26>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	73fb      	strb	r3, [r7, #15]
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4615      	mov	r5, r2
 800b0f8:	f103 0418 	add.w	r4, r3, #24
 800b0fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b100:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b104:	e885 0003 	stmia.w	r5, {r0, r1}
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	4618      	mov	r0, r3
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	bcb0      	pop	{r4, r5, r7}
 800b112:	4770      	bx	lr

0800b114 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 800b114:	b4b0      	push	{r4, r5, r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
 800b11e:	2300      	movs	r3, #0
 800b120:	73fb      	strb	r3, [r7, #15]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800b12e:	42a2      	cmp	r2, r4
 800b130:	bf08      	it	eq
 800b132:	4299      	cmpeq	r1, r3
 800b134:	d001      	beq.n	800b13a <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x26>
 800b136:	2301      	movs	r3, #1
 800b138:	73fb      	strb	r3, [r7, #15]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4615      	mov	r5, r2
 800b140:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800b144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b14c:	e885 0003 	stmia.w	r5, {r0, r1}
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	bcb0      	pop	{r4, r5, r7}
 800b15a:	4770      	bx	lr

0800b15c <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:

    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
    SIMPLE_FUNC_IMPL(VehiclePositionSP, VehiclePositionSP, vehiclePositionSP)
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800b15c:	b4b0      	push	{r4, r5, r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800b16e:	4615      	mov	r5, r2
 800b170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b178:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b17c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	bcb0      	pop	{r4, r5, r7}
 800b188:	4770      	bx	lr

0800b18a <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 800b18a:	b4b0      	push	{r4, r5, r7}
 800b18c:	b083      	sub	sp, #12
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	6039      	str	r1, [r7, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800b19c:	4615      	mov	r5, r2
 800b19e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b1a6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b1aa:	bf00      	nop
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bcb0      	pop	{r4, r5, r7}
 800b1b2:	4770      	bx	lr

0800b1b4 <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 800b1b4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800b1b8:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800b1ba:	4b0e      	ldr	r3, [pc, #56]	; (800b1f4 <_ZL11microsecondv+0x40>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	f04f 0200 	mov.w	r2, #0
 800b1c4:	f04f 0b00 	mov.w	fp, #0
 800b1c8:	f04f 0c00 	mov.w	ip, #0
 800b1cc:	468c      	mov	ip, r1
 800b1ce:	f04f 0b00 	mov.w	fp, #0
 800b1d2:	4a09      	ldr	r2, [pc, #36]	; (800b1f8 <_ZL11microsecondv+0x44>)
 800b1d4:	6812      	ldr	r2, [r2, #0]
 800b1d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b1d8:	4611      	mov	r1, r2
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	ea4b 0301 	orr.w	r3, fp, r1
 800b1e2:	ea4c 0402 	orr.w	r4, ip, r2
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	24000974 	.word	0x24000974
 800b1f8:	2400c62c 	.word	0x2400c62c

0800b1fc <_ZN2FC10ModuleAHRSC1Ev>:
#include "Lib/Matrix/matrix/Quaternion.hpp"
#include "cmath"

namespace FC{

ModuleAHRS::ModuleAHRS()
 800b1fc:	b590      	push	{r4, r7, lr}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
	, lastUpdate{0}
	, beta{0.6f}
	, q0{1.0f}
	, q1{0.0f}
	, q2{0.0f}
	, q3{0.0f}
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	461a      	mov	r2, r3
 800b208:	2300      	movs	r3, #0
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	6053      	str	r3, [r2, #4]
 800b20e:	6093      	str	r3, [r2, #8]
 800b210:	60d3      	str	r3, [r2, #12]
 800b212:	6113      	str	r3, [r2, #16]
 800b214:	6153      	str	r3, [r2, #20]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3318      	adds	r3, #24
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
 800b21e:	605a      	str	r2, [r3, #4]
 800b220:	609a      	str	r2, [r3, #8]
 800b222:	60da      	str	r2, [r3, #12]
 800b224:	611a      	str	r2, [r3, #16]
 800b226:	615a      	str	r2, [r3, #20]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	3330      	adds	r3, #48	; 0x30
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
 800b230:	605a      	str	r2, [r3, #4]
 800b232:	609a      	str	r2, [r3, #8]
 800b234:	60da      	str	r2, [r3, #12]
 800b236:	611a      	str	r2, [r3, #16]
 800b238:	615a      	str	r2, [r3, #20]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3348      	adds	r3, #72	; 0x48
 800b23e:	2228      	movs	r2, #40	; 0x28
 800b240:	2100      	movs	r1, #0
 800b242:	4618      	mov	r0, r3
 800b244:	f020 fbc3 	bl	802b9ce <memset>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3370      	adds	r3, #112	; 0x70
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	605a      	str	r2, [r3, #4]
 800b252:	609a      	str	r2, [r3, #8]
 800b254:	60da      	str	r2, [r3, #12]
 800b256:	611a      	str	r2, [r3, #16]
 800b258:	615a      	str	r2, [r3, #20]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	f04f 0300 	mov.w	r3, #0
 800b260:	f04f 0400 	mov.w	r4, #0
 800b264:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a0e      	ldr	r2, [pc, #56]	; (800b2a4 <_ZN2FC10ModuleAHRSC1Ev+0xa8>)
 800b26c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b276:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f04f 0200 	mov.w	r2, #0
 800b280:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f04f 0200 	mov.w	r2, #0
 800b28a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f04f 0200 	mov.w	r2, #0
 800b294:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
{

}
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4618      	mov	r0, r3
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd90      	pop	{r4, r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	3f19999a 	.word	0x3f19999a

0800b2a8 <_ZN2FC10ModuleAHRS7oneStepEv>:

void ModuleAHRS::oneStep(){
 800b2a8:	b590      	push	{r4, r7, lr}
 800b2aa:	b09d      	sub	sp, #116	; 0x74
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
	/* receive data */
	msgBus.getBodyAccel(&this->bodyAccelSub);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	48c1      	ldr	r0, [pc, #772]	; (800b5bc <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800b2b6:	f7ff fee6 	bl	800b086 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
	msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	3318      	adds	r3, #24
 800b2be:	4619      	mov	r1, r3
 800b2c0:	48be      	ldr	r0, [pc, #760]	; (800b5bc <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800b2c2:	f7ff ff03 	bl	800b0cc <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
//						   bodyAccelSub.xyz[2],
//						   bodyMagSub.xyz[0],
//						   bodyMagSub.xyz[1],
//						   bodyMagSub.xyz[2]);
//	}
	msgBus.getBodyMag(&this->bodyMagSub);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3330      	adds	r3, #48	; 0x30
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	48bb      	ldr	r0, [pc, #748]	; (800b5bc <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800b2ce:	f7ff ff21 	bl	800b114 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
	MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	edd3 7a08 	vldr	s15, [r3, #32]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	ed93 6a02 	vldr	s12, [r3, #8]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	edd3 5a03 	vldr	s11, [r3, #12]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	ed93 5a04 	vldr	s10, [r3, #16]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 800b308:	eeb0 3a64 	vmov.f32	s6, s9
 800b30c:	eef0 2a45 	vmov.f32	s5, s10
 800b310:	eeb0 2a65 	vmov.f32	s4, s11
 800b314:	eef0 1a46 	vmov.f32	s3, s12
 800b318:	eeb0 1a66 	vmov.f32	s2, s13
 800b31c:	eef0 0a47 	vmov.f32	s1, s14
 800b320:	eeb0 0a67 	vmov.f32	s0, s15
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f94f 	bl	800b5c8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
					   bodyMagSub.xyz[1],
					   bodyMagSub.xyz[2]);

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
	roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b34a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b34e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800b35e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b36e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b372:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b386:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b39e:	eef0 0a67 	vmov.f32	s1, s15
 800b3a2:	eeb0 0a46 	vmov.f32	s0, s12
 800b3a6:	f7ff fe4a 	bl	800b03e <_ZSt5atan2ff>
 800b3aa:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b3ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b3ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b3d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b3da:	f7ff fe20 	bl	800b01e <_ZSt4asinf>
 800b3de:	eef0 7a40 	vmov.f32	s15, s0
 800b3e2:	eef1 7a67 	vneg.f32	s15, s15
 800b3e6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b3f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b40a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b40e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800b41e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b42e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b432:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b446:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b45a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b45e:	eef0 0a67 	vmov.f32	s1, s15
 800b462:	eeb0 0a46 	vmov.f32	s0, s12
 800b466:	f7ff fdea 	bl	800b03e <_ZSt5atan2ff>
 800b46a:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64

	matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800b486:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b48a:	eef0 1a46 	vmov.f32	s3, s12
 800b48e:	eeb0 1a66 	vmov.f32	s2, s13
 800b492:	eef0 0a47 	vmov.f32	s1, s14
 800b496:	eeb0 0a67 	vmov.f32	s0, s15
 800b49a:	4618      	mov	r0, r3
 800b49c:	f001 fb5f 	bl	800cb5e <_ZN6matrix10QuaternionIfEC1Effff>
	matrix::Dcmf dcm(quat/*.inversed()*/);		/* body -> NED DCM */
 800b4a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b4a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f001 fbab 	bl	800cc06 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
	matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
								   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	edd3 7a02 	vldr	s15, [r3, #8]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	ed93 7a03 	vldr	s14, [r3, #12]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	edd3 6a04 	vldr	s13, [r3, #16]
 800b4c2:	f107 0318 	add.w	r3, r7, #24
 800b4c6:	eeb0 1a66 	vmov.f32	s2, s13
 800b4ca:	eef0 0a47 	vmov.f32	s1, s14
 800b4ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f001 fce0 	bl	800ce98 <_ZN6matrix7Vector3IfEC1Efff>

	matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 800b4d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4dc:	f107 0218 	add.w	r2, r7, #24
 800b4e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f001 fd04 	bl	800cef2 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 800b4ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b4ee:	f107 030c 	add.w	r3, r7, #12
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f001 fd4d 	bl	800cf94 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

	attitudePub.timestamp = microsecond();
 800b4fa:	f7ff fe5b 	bl	800b1b4 <_ZL11microsecondv>
 800b4fe:	4603      	mov	r3, r0
 800b500:	460c      	mov	r4, r1
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	attitudePub.q[0] = this->q0;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	651a      	str	r2, [r3, #80]	; 0x50
	attitudePub.q[1] = this->q1;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	655a      	str	r2, [r3, #84]	; 0x54
	attitudePub.q[2] = this->q2;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	659a      	str	r2, [r3, #88]	; 0x58
	attitudePub.q[3] = this->q3;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	65da      	str	r2, [r3, #92]	; 0x5c
	attitudePub.roll = roll;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b534:	661a      	str	r2, [r3, #96]	; 0x60
	attitudePub.pitch = pitch;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b53a:	665a      	str	r2, [r3, #100]	; 0x64
	attitudePub.yaw = yaw;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b540:	669a      	str	r2, [r3, #104]	; 0x68

	msgBus.setAttitude(attitudePub);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	3348      	adds	r3, #72	; 0x48
 800b546:	4619      	mov	r1, r3
 800b548:	481c      	ldr	r0, [pc, #112]	; (800b5bc <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800b54a:	f7ff fe07 	bl	800b15c <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

	nedAccelPub.timestamp = microsecond();
 800b54e:	f7ff fe31 	bl	800b1b4 <_ZL11microsecondv>
 800b552:	4603      	mov	r3, r0
 800b554:	460c      	mov	r4, r1
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	nedAccelPub.xyz[0] = tempNedAccel(0);
 800b55c:	f107 030c 	add.w	r3, r7, #12
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f001 fd3c 	bl	800cfe0 <_ZN6matrix6VectorIfLj3EEclEj>
 800b568:	4603      	mov	r3, r0
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	679a      	str	r2, [r3, #120]	; 0x78
	nedAccelPub.xyz[1] = tempNedAccel(1);
 800b570:	f107 030c 	add.w	r3, r7, #12
 800b574:	2101      	movs	r1, #1
 800b576:	4618      	mov	r0, r3
 800b578:	f001 fd32 	bl	800cfe0 <_ZN6matrix6VectorIfLj3EEclEj>
 800b57c:	4603      	mov	r3, r0
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	67da      	str	r2, [r3, #124]	; 0x7c
	nedAccelPub.xyz[2] = tempNedAccel(2);
 800b584:	f107 030c 	add.w	r3, r7, #12
 800b588:	2102      	movs	r1, #2
 800b58a:	4618      	mov	r0, r3
 800b58c:	f001 fd28 	bl	800cfe0 <_ZN6matrix6VectorIfLj3EEclEj>
 800b590:	4603      	mov	r3, r0
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	msgBus.setNedAccel(nedAccelPub);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3370      	adds	r3, #112	; 0x70
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4806      	ldr	r0, [pc, #24]	; (800b5bc <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800b5a2:	f7ff fdf2 	bl	800b18a <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>

	/* Freq class variable */
	freqCnt++;
 800b5a6:	4b06      	ldr	r3, [pc, #24]	; (800b5c0 <_ZN2FC10ModuleAHRS7oneStepEv+0x318>)
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <_ZN2FC10ModuleAHRS7oneStepEv+0x318>)
 800b5b0:	801a      	strh	r2, [r3, #0]
}
 800b5b2:	bf00      	nop
 800b5b4:	3774      	adds	r7, #116	; 0x74
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd90      	pop	{r4, r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	24000a50 	.word	0x24000a50
 800b5c0:	24000978 	.word	0x24000978
 800b5c4:	00000000 	.word	0x00000000

0800b5c8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 800b5c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b5cc:	b0ae      	sub	sp, #184	; 0xb8
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6278      	str	r0, [r7, #36]	; 0x24
 800b5d2:	ed87 0a08 	vstr	s0, [r7, #32]
 800b5d6:	edc7 0a07 	vstr	s1, [r7, #28]
 800b5da:	ed87 1a06 	vstr	s2, [r7, #24]
 800b5de:	edc7 1a05 	vstr	s3, [r7, #20]
 800b5e2:	ed87 2a04 	vstr	s4, [r7, #16]
 800b5e6:	edc7 2a03 	vstr	s5, [r7, #12]
 800b5ea:	ed87 3a02 	vstr	s6, [r7, #8]
 800b5ee:	edc7 3a01 	vstr	s7, [r7, #4]
 800b5f2:	ed87 4a00 	vstr	s8, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800b5f6:	edd7 7a02 	vldr	s15, [r7, #8]
 800b5fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b602:	d11e      	bne.n	800b642 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
 800b604:	edd7 7a01 	vldr	s15, [r7, #4]
 800b608:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b610:	d117      	bne.n	800b642 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
 800b612:	edd7 7a00 	vldr	s15, [r7]
 800b616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61e:	d110      	bne.n	800b642 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800b620:	edd7 2a03 	vldr	s5, [r7, #12]
 800b624:	ed97 2a04 	vldr	s4, [r7, #16]
 800b628:	edd7 1a05 	vldr	s3, [r7, #20]
 800b62c:	ed97 1a06 	vldr	s2, [r7, #24]
 800b630:	edd7 0a07 	vldr	s1, [r7, #28]
 800b634:	ed97 0a08 	vldr	s0, [r7, #32]
 800b638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b63a:	f000 feed 	bl	800c418 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 800b63e:	f000 bed9 	b.w	800c3f4 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe2c>
		return;
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b648:	eeb1 7a67 	vneg.f32	s14, s15
 800b64c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b650:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800b65a:	edd7 7a07 	vldr	s15, [r7, #28]
 800b65e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b662:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800b66c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b674:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b678:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b67c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b680:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b68a:	edd7 7a08 	vldr	s15, [r7, #32]
 800b68e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800b698:	edd7 7a06 	vldr	s15, [r7, #24]
 800b69c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800b6aa:	edd7 7a07 	vldr	s15, [r7, #28]
 800b6ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b6ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b6c8:	edd7 7a07 	vldr	s15, [r7, #28]
 800b6cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b6d6:	edd7 7a06 	vldr	s15, [r7, #24]
 800b6da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6de:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800b6e8:	edd7 7a08 	vldr	s15, [r7, #32]
 800b6ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b6f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6fc:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b706:	edd7 7a06 	vldr	s15, [r7, #24]
 800b70a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b714:	edd7 7a07 	vldr	s15, [r7, #28]
 800b718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b71c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800b726:	edd7 7a08 	vldr	s15, [r7, #32]
 800b72a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b72e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b732:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b73a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800b73e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b742:	edd7 7a05 	vldr	s15, [r7, #20]
 800b746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b74a:	edd7 6a04 	vldr	s13, [r7, #16]
 800b74e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b75a:	edd7 6a03 	vldr	s13, [r7, #12]
 800b75e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b76a:	eeb0 0a67 	vmov.f32	s0, s15
 800b76e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b770:	f001 f998 	bl	800caa4 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800b774:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 800b778:	ed97 7a05 	vldr	s14, [r7, #20]
 800b77c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b780:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b784:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 800b788:	ed97 7a04 	vldr	s14, [r7, #16]
 800b78c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b794:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 800b798:	ed97 7a03 	vldr	s14, [r7, #12]
 800b79c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b7a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a4:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800b7a8:	ed97 7a02 	vldr	s14, [r7, #8]
 800b7ac:	edd7 7a02 	vldr	s15, [r7, #8]
 800b7b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7b4:	edd7 6a01 	vldr	s13, [r7, #4]
 800b7b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b7bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b7c4:	edd7 6a00 	vldr	s13, [r7]
 800b7c8:	edd7 7a00 	vldr	s15, [r7]
 800b7cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7d4:	eeb0 0a67 	vmov.f32	s0, s15
 800b7d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7da:	f001 f963 	bl	800caa4 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800b7de:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 800b7e2:	ed97 7a02 	vldr	s14, [r7, #8]
 800b7e6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ee:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 800b7f2:	ed97 7a01 	vldr	s14, [r7, #4]
 800b7f6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7fe:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 800b802:	ed97 7a00 	vldr	s14, [r7]
 800b806:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b80a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80e:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800b818:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b81c:	ed97 7a02 	vldr	s14, [r7, #8]
 800b820:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b824:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800b82e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b832:	ed97 7a01 	vldr	s14, [r7, #4]
 800b836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800b844:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b848:	ed97 7a00 	vldr	s14, [r7]
 800b84c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b850:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b85a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b85e:	ed97 7a02 	vldr	s14, [r7, #8]
 800b862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b866:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800b870:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b874:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b87e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b882:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b88c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b890:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b89a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b89e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800b8a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8b6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b8c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ce:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800b8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8f6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b91a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b91e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b932:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b946:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b960:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b96e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b982:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800b992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b996:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800b99a:	ed97 7a02 	vldr	s14, [r7, #8]
 800b99e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800b9a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800b9ac:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b9b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800b9be:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b9c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9ca:	edd7 6a02 	vldr	s13, [r7, #8]
 800b9ce:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800b9d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9da:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800b9de:	edd7 7a01 	vldr	s15, [r7, #4]
 800b9e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b9ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9f4:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800b9f8:	edd7 7a00 	vldr	s15, [r7]
 800b9fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ba06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba0e:	edd7 6a02 	vldr	s13, [r7, #8]
 800ba12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ba16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba1e:	edd7 6a02 	vldr	s13, [r7, #8]
 800ba22:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ba26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba2e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800ba38:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800ba3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba40:	edd7 6a01 	vldr	s13, [r7, #4]
 800ba44:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800ba48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800ba56:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ba5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba64:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800ba68:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800ba6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba70:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba74:	edd7 6a01 	vldr	s13, [r7, #4]
 800ba78:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800ba7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba80:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba84:	edd7 6a01 	vldr	s13, [r7, #4]
 800ba88:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ba8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba90:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba94:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800ba98:	edd7 7a00 	vldr	s15, [r7]
 800ba9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800baa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800baae:	edd7 6a01 	vldr	s13, [r7, #4]
 800bab2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800bab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800babe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 800bac2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800bac6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800baca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bace:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800bad2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800bad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bada:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bade:	eeb0 0a67 	vmov.f32	s0, s15
 800bae2:	f7ff fac0 	bl	800b066 <_ZSt4sqrtf>
 800bae6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800baea:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800baee:	eeb1 7a67 	vneg.f32	s14, s15
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800baf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800bb02:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800bb06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb0e:	edd7 6a00 	vldr	s13, [r7]
 800bb12:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800bb16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800bb24:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800bb28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb30:	edd7 6a00 	vldr	s13, [r7]
 800bb34:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bb38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb40:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800bb44:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800bb52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb5a:	edd7 6a00 	vldr	s13, [r7]
 800bb5e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800bb62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb66:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb6a:	edd7 6a00 	vldr	s13, [r7]
 800bb6e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800bb72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb7a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 800bb7e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bb82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb86:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 800bb8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bb8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb92:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800bb96:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800bb9a:	eeb1 7a67 	vneg.f32	s14, s15
 800bb9e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800bba2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800bba6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bbaa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bbae:	edd7 7a05 	vldr	s15, [r7, #20]
 800bbb2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bbb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800bbbe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800bbc2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bbc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bbca:	edd7 7a04 	vldr	s15, [r7, #16]
 800bbce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bbd2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bbd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bbda:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800bbe4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bbe8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bbec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bbf0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800bbf4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bbf8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800bbfc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bc00:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bc04:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bc08:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800bc0c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800bc10:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800bc14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc18:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800bc1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bc20:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc24:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bc28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bc30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bc34:	eef1 6a67 	vneg.f32	s13, s15
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800bc3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc44:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800bc48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bc50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bc54:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800bc58:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bc5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bc60:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bc64:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bc68:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800bc6c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800bc70:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800bc74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc78:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800bc7c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bc80:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc84:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bc88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc92:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800bc96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bc9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bc9e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800bca2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800bca6:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bcaa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bcae:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bcb2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800bcb6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bcba:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800bcbe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800bcc2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800bcc6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bcca:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800bcce:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bcd2:	edd7 7a00 	vldr	s15, [r7]
 800bcd6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bcda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bcde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bce2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800bce6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800bcea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800bcee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bcf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcf6:	edd7 7a05 	vldr	s15, [r7, #20]
 800bcfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcfe:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bd02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd06:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800bd0a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800bd0e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bd12:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bd16:	edd7 7a04 	vldr	s15, [r7, #16]
 800bd1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bd1e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800bd22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd26:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800bd30:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800bd34:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800bd38:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bd3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd40:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bd44:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bd48:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800bd4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd50:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bd54:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd58:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bd5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd60:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800bd6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bd6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bd72:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bd76:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800bd7a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bd7e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800bd82:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bd86:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bd8a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bd8e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800bd92:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800bd96:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800bd9a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bd9e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800bda2:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bda6:	edd7 7a02 	vldr	s15, [r7, #8]
 800bdaa:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bdae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb8:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800bdbc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bdc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800bdca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bdce:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bdd2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bdd6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800bdda:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bdde:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bde2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bde6:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bdea:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800bdee:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800bdf2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800bdf6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bdfa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800bdfe:	ee36 6a27 	vadd.f32	s12, s12, s15
 800be02:	edd7 7a01 	vldr	s15, [r7, #4]
 800be06:	ee76 7a67 	vsub.f32	s15, s12, s15
 800be0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be14:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800be18:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800be1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800be26:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800be2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800be2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800be32:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800be36:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800be3a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800be3e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800be42:	ee26 6a27 	vmul.f32	s12, s12, s15
 800be46:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800be4a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800be4e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800be52:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800be56:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800be5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800be5e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800be62:	ee36 6a27 	vadd.f32	s12, s12, s15
 800be66:	edd7 7a00 	vldr	s15, [r7]
 800be6a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800be6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800be7a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800be7e:	eeb1 7a67 	vneg.f32	s14, s15
 800be82:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800be86:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800be8a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800be8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800be92:	edd7 7a05 	vldr	s15, [r7, #20]
 800be96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800be9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be9e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800bea2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800bea6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800beaa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800beae:	edd7 7a04 	vldr	s15, [r7, #16]
 800beb2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800beb6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800beba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800bec8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800becc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800bed0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bed4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bed8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bedc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bee0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800bee4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bee8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800beec:	edd7 7a03 	vldr	s15, [r7, #12]
 800bef0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bef8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800befc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800bf00:	eef1 6a67 	vneg.f32	s13, s15
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800bf0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800bf14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bf18:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bf1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bf20:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bf24:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800bf28:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bf2c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800bf30:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bf34:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bf38:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bf3c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800bf40:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800bf44:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800bf48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bf4c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800bf50:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bf54:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf58:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bf5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf60:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800bf6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bf6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf74:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800bf78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bf7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bf80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bf84:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800bf88:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bf8c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bf90:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bf94:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bf98:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800bf9c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800bfa0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800bfa4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bfa8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800bfac:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bfb0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfb4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bfb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800bfc6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bfca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800bfd4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800bfd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bfdc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bfe0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800bfe4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800bfe8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bfec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800bff0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bff4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800bff8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bffc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800c000:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800c004:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800c008:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c00c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800c010:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c014:	edd7 7a00 	vldr	s15, [r7]
 800c018:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c01c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c020:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c024:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800c028:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c02c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c030:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c034:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c038:	edd7 7a05 	vldr	s15, [r7, #20]
 800c03c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c040:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800c044:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c048:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800c04c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c050:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800c054:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c058:	edd7 7a04 	vldr	s15, [r7, #16]
 800c05c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c060:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800c064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c06c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c070:	eef1 6a67 	vneg.f32	s13, s15
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c07a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c080:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800c084:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c088:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c08c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c090:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c094:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800c098:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c09c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c0a0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c0a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800c0a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800c0ac:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800c0b0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800c0b4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800c0b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c0bc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800c0c0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c0c4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c0cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c0d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800c0d8:	eef1 6a67 	vneg.f32	s13, s15
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800c0e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800c0ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c0f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c0f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c0f8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800c0fc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c100:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c104:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800c108:	ee26 6a27 	vmul.f32	s12, s12, s15
 800c10c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800c110:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800c114:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c118:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c11c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800c120:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c124:	edd7 7a01 	vldr	s15, [r7, #4]
 800c128:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c12c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c130:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c136:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800c13a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800c13e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c142:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800c146:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c14a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c14e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800c152:	ee26 6a27 	vmul.f32	s12, s12, s15
 800c156:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c15a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800c15e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800c162:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800c166:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800c16a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c16e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800c172:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c176:	edd7 7a00 	vldr	s15, [r7]
 800c17a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c17e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c182:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c186:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800c18a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c18e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c192:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c196:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800c19a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c19e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1a6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800c1aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c1ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1b6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c1ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c1be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1c6:	eeb0 0a67 	vmov.f32	s0, s15
 800c1ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1cc:	f000 fc6a 	bl	800caa4 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800c1d0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 800c1d4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c1d8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 800c1e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c1ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 800c1f4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c1f8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c200:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 800c204:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c208:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c20c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c210:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c21a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c222:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c22a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 800c22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c230:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c234:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c23c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c240:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c244:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c24e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c256:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800c25a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c25e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 800c262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c264:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c268:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c270:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800c274:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c278:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)/1000000.0;	/*[second]*/
 800c27c:	f7fe ff9a 	bl	800b1b4 <_ZL11microsecondv>
 800c280:	460a      	mov	r2, r1
 800c282:	4601      	mov	r1, r0
 800c284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c286:	e9d3 bc22 	ldrd	fp, ip, [r3, #136]	; 0x88
 800c28a:	460b      	mov	r3, r1
 800c28c:	4614      	mov	r4, r2
 800c28e:	ebb3 030b 	subs.w	r3, r3, fp
 800c292:	eb64 040c 	sbc.w	r4, r4, ip
 800c296:	4618      	mov	r0, r3
 800c298:	4621      	mov	r1, r4
 800c29a:	f7f4 f9ff 	bl	800069c <__aeabi_ul2d>
 800c29e:	ec41 0b15 	vmov	d5, r0, r1
 800c2a2:	ed9f 6b57 	vldr	d6, [pc, #348]	; 800c400 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe38>
 800c2a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c2aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c2ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 800c2b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c2ba:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800c408 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe40>
 800c2be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c6:	dd01      	ble.n	800c2cc <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xd04>
 800c2c8:	4b51      	ldr	r3, [pc, #324]	; (800c410 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe48>)
 800c2ca:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ce:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c2d2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2d6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c2da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ea:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800c2ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2f2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800c2f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c306:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800c30a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c30e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800c326:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c32a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c32e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c332:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c338:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c344:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800c348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c354:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c35c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c36c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c370:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c384:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c388:	eeb0 0a67 	vmov.f32	s0, s15
 800c38c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c38e:	f000 fb89 	bl	800caa4 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800c392:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 800c396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c398:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c39c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ac:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800c3b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ba:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800c3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c0:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800c3c4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c3c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ce:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800c3d8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c3dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800c3e6:	f7fe fee5 	bl	800b1b4 <_ZL11microsecondv>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	460c      	mov	r4, r1
 800c3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3f0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800c3f4:	37b8      	adds	r7, #184	; 0xb8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800c3fc:	f3af 8000 	nop.w
 800c400:	00000000 	.word	0x00000000
 800c404:	412e8480 	.word	0x412e8480
 800c408:	47ae147b 	.word	0x47ae147b
 800c40c:	3f847ae1 	.word	0x3f847ae1
 800c410:	3c23d70a 	.word	0x3c23d70a
 800c414:	00000000 	.word	0x00000000

0800c418 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800c418:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c41c:	b0a0      	sub	sp, #128	; 0x80
 800c41e:	af00      	add	r7, sp, #0
 800c420:	61f8      	str	r0, [r7, #28]
 800c422:	ed87 0a06 	vstr	s0, [r7, #24]
 800c426:	edc7 0a05 	vstr	s1, [r7, #20]
 800c42a:	ed87 1a04 	vstr	s2, [r7, #16]
 800c42e:	edc7 1a03 	vstr	s3, [r7, #12]
 800c432:	ed87 2a02 	vstr	s4, [r7, #8]
 800c436:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c440:	eeb1 7a67 	vneg.f32	s14, s15
 800c444:	edd7 7a06 	vldr	s15, [r7, #24]
 800c448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c452:	edd7 7a05 	vldr	s15, [r7, #20]
 800c456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c45a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800c464:	edd7 7a04 	vldr	s15, [r7, #16]
 800c468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c46c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c470:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c474:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c478:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c482:	edd7 7a06 	vldr	s15, [r7, #24]
 800c486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c490:	edd7 7a04 	vldr	s15, [r7, #16]
 800c494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c498:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800c4a2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c4b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4b6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c4c0:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800c4ce:	edd7 7a04 	vldr	s15, [r7, #16]
 800c4d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800c4e0:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c4f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4f4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c4fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800c502:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800c50c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c514:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c51e:	edd7 7a06 	vldr	s15, [r7, #24]
 800c522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c52a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c52e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c532:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800c536:	ed97 7a03 	vldr	s14, [r7, #12]
 800c53a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c53e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c542:	edd7 6a02 	vldr	s13, [r7, #8]
 800c546:	edd7 7a02 	vldr	s15, [r7, #8]
 800c54a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c54e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c552:	edd7 6a01 	vldr	s13, [r7, #4]
 800c556:	edd7 7a01 	vldr	s15, [r7, #4]
 800c55a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c55e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c562:	eeb0 0a67 	vmov.f32	s0, s15
 800c566:	69f8      	ldr	r0, [r7, #28]
 800c568:	f000 fa9c 	bl	800caa4 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800c56c:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 800c570:	ed97 7a03 	vldr	s14, [r7, #12]
 800c574:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c57c:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 800c580:	ed97 7a02 	vldr	s14, [r7, #8]
 800c584:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c58c:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 800c590:	ed97 7a01 	vldr	s14, [r7, #4]
 800c594:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c59c:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800c5a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c5aa:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c5b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c5b8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c5c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c5c6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c5d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c5d4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800c5de:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c5e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5e6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c5f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c5f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c602:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c60a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c614:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800c618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c61c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c626:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800c62a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c62e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800c63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c642:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c652:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c656:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c67e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800c682:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800c686:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c68a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c68e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800c692:	edd7 7a03 	vldr	s15, [r7, #12]
 800c696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c69a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c69e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c6a2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c6a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6ae:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800c6b2:	edd7 7a02 	vldr	s15, [r7, #8]
 800c6b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6be:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800c6c2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800c6c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c6ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6ce:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800c6d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c6d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c6e2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c6e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c6f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6f8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800c6fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c704:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c708:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c70c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c710:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800c714:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c71c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c720:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800c724:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c72c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c730:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800c734:	edd7 7a01 	vldr	s15, [r7, #4]
 800c738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c73c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c740:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800c744:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c748:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c74c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c75a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800c75e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c76a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800c76e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c77a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800c77e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c78a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800c78e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c792:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800c796:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c79a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c79e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7a2:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800c7a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c7aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7b2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800c7b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800c7c6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c7ca:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c7ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c7d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7dc:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800c7e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c7ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c7f0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800c7f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c7fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c802:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c806:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800c80a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c80e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c812:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c816:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800c81a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c81e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c822:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c826:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800c82a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c82e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c832:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c836:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c83a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c83e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c842:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c846:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c84a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c84e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c852:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c856:	eeb0 0a67 	vmov.f32	s0, s15
 800c85a:	69f8      	ldr	r0, [r7, #28]
 800c85c:	f000 f922 	bl	800caa4 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800c860:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 800c864:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c868:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c86c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c870:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 800c874:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c878:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c87c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c880:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 800c884:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c888:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c890:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 800c894:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c898:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c89c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c8aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8b2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800c8b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8ba:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c8c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c8c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8cc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800c8d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8d4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c8de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8e6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800c8ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8ee:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c8f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c900:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c904:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c908:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)/1000000.0;			/*[second]*/
 800c90c:	f7fe fc52 	bl	800b1b4 <_ZL11microsecondv>
 800c910:	460a      	mov	r2, r1
 800c912:	4601      	mov	r1, r0
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	e9d3 bc22 	ldrd	fp, ip, [r3, #136]	; 0x88
 800c91a:	460b      	mov	r3, r1
 800c91c:	4614      	mov	r4, r2
 800c91e:	ebb3 030b 	subs.w	r3, r3, fp
 800c922:	eb64 040c 	sbc.w	r4, r4, ip
 800c926:	4618      	mov	r0, r3
 800c928:	4621      	mov	r1, r4
 800c92a:	f7f3 feb7 	bl	800069c <__aeabi_ul2d>
 800c92e:	ec41 0b15 	vmov	d5, r0, r1
 800c932:	ed9f 6b57 	vldr	d6, [pc, #348]	; 800ca90 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x678>
 800c936:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c93a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c93e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 800c942:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c946:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c94a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800ca98 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x680>
 800c94e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c956:	dd01      	ble.n	800c95c <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x544>
 800c958:	4b51      	ldr	r3, [pc, #324]	; (800caa0 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x688>)
 800c95a:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c962:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c966:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800c96a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c96e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800c97e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c982:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800c986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800c99a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c99e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800c9a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800c9b6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c9ba:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800c9be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800c9d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c9e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c9fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca00:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ca10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca18:	eeb0 0a67 	vmov.f32	s0, s15
 800ca1c:	69f8      	ldr	r0, [r7, #28]
 800ca1e:	f000 f841 	bl	800caa4 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800ca22:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ca2c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ca30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800ca40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ca44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800ca54:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ca58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800ca68:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ca6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800ca76:	f7fe fb9d 	bl	800b1b4 <_ZL11microsecondv>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	69fa      	ldr	r2, [r7, #28]
 800ca80:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800ca84:	bf00      	nop
 800ca86:	3780      	adds	r7, #128	; 0x80
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ca8e:	bf00      	nop
 800ca90:	00000000 	.word	0x00000000
 800ca94:	412e8480 	.word	0x412e8480
 800ca98:	47ae147b 	.word	0x47ae147b
 800ca9c:	3f847ae1 	.word	0x3f847ae1
 800caa0:	3c23d70a 	.word	0x3c23d70a

0800caa4 <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 800caa4:	b480      	push	{r7}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 800cab0:	edd7 7a00 	vldr	s15, [r7]
 800cab4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cabc:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800cac4:	f107 0310 	add.w	r3, r7, #16
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	105a      	asrs	r2, r3, #1
 800cad0:	4b12      	ldr	r3, [pc, #72]	; (800cb1c <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 800cad2:	1a9b      	subs	r3, r3, r2
 800cad4:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800cad6:	f107 030c 	add.w	r3, r7, #12
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800cade:	ed97 7a04 	vldr	s14, [r7, #16]
 800cae2:	edd7 7a05 	vldr	s15, [r7, #20]
 800cae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caea:	edd7 7a04 	vldr	s15, [r7, #16]
 800caee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800caf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cafa:	edd7 7a04 	vldr	s15, [r7, #16]
 800cafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb02:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	ee07 3a90 	vmov	s15, r3
}
 800cb0c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb10:	371c      	adds	r7, #28
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	5f3759df 	.word	0x5f3759df

0800cb20 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	6053      	str	r3, [r2, #4]
 800cb32:	6093      	str	r3, [r2, #8]
 800cb34:	60d3      	str	r3, [r2, #12]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4618      	mov	r0, r3
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7ff ffe6 	bl	800cb20 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4618      	mov	r0, r3
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b088      	sub	sp, #32
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6178      	str	r0, [r7, #20]
 800cb66:	ed87 0a04 	vstr	s0, [r7, #16]
 800cb6a:	edc7 0a03 	vstr	s1, [r7, #12]
 800cb6e:	ed87 1a02 	vstr	s2, [r7, #8]
 800cb72:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7ff ffe3 	bl	800cb44 <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	2100      	movs	r1, #0
 800cb86:	4618      	mov	r0, r3
 800cb88:	f000 fa4a 	bl	800d020 <_ZN6matrix6VectorIfLj4EEclEj>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	6013      	str	r3, [r2, #0]
        q(1) = b;
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	2101      	movs	r1, #1
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 fa42 	bl	800d020 <_ZN6matrix6VectorIfLj4EEclEj>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6013      	str	r3, [r2, #0]
        q(2) = c;
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	2102      	movs	r1, #2
 800cba6:	4618      	mov	r0, r3
 800cba8:	f000 fa3a 	bl	800d020 <_ZN6matrix6VectorIfLj4EEclEj>
 800cbac:	4602      	mov	r2, r0
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	6013      	str	r3, [r2, #0]
        q(3) = d;
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	2103      	movs	r1, #3
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 fa32 	bl	800d020 <_ZN6matrix6VectorIfLj4EEclEj>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6013      	str	r3, [r2, #0]
    }
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3720      	adds	r7, #32
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	2324      	movs	r3, #36	; 0x24
 800cbda:	461a      	mov	r2, r3
 800cbdc:	2100      	movs	r1, #0
 800cbde:	f01e fef6 	bl	802b9ce <memset>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff ffe8 	bl	800cbcc <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 800cc06:	b580      	push	{r7, lr}
 800cc08:	ed2d 8b02 	vpush	{d8}
 800cc0c:	b092      	sub	sp, #72	; 0x48
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	6039      	str	r1, [r7, #0]
    {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff ffe8 	bl	800cbec <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	2100      	movs	r1, #0
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 fa1b 	bl	800d060 <_ZNK6matrix6VectorIfLj4EEclEj>
 800cc2a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2101      	movs	r1, #1
 800cc32:	4618      	mov	r0, r3
 800cc34:	f000 fa14 	bl	800d060 <_ZNK6matrix6VectorIfLj4EEclEj>
 800cc38:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2102      	movs	r1, #2
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fa0d 	bl	800d060 <_ZNK6matrix6VectorIfLj4EEclEj>
 800cc46:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	2103      	movs	r1, #3
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 fa06 	bl	800d060 <_ZNK6matrix6VectorIfLj4EEclEj>
 800cc54:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 800cc58:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800cc5c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800cc60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc64:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 800cc68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800cc6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cc70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc74:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 800cc78:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800cc7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800cc80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc84:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 800cc88:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800cc8c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cc90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 800cc98:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800cc9c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cca4:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 800cca8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ccac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ccb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccb4:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 800ccb8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ccbc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ccc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccc4:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 800ccc8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800cccc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ccd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd4:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 800ccd8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ccdc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cce4:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 800cce8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ccf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccf4:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 800ccf8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ccfc:	edd7 7a08 	vldr	s15, [r7, #32]
 800cd00:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd04:	edd7 7a05 	vldr	s15, [r7, #20]
 800cd08:	ee37 8a67 	vsub.f32	s16, s14, s15
 800cd0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd0e:	2200      	movs	r2, #0
 800cd10:	2100      	movs	r1, #0
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 f9c6 	bl	800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd1e:	ee78 7a67 	vsub.f32	s15, s16, s15
 800cd22:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 800cd26:	ed97 7a07 	vldr	s14, [r7, #28]
 800cd2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cd2e:	ee37 8a67 	vsub.f32	s16, s14, s15
 800cd32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd34:	2201      	movs	r2, #1
 800cd36:	2100      	movs	r1, #0
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 f9b3 	bl	800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	ee78 7a08 	vadd.f32	s15, s16, s16
 800cd44:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 800cd48:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd4c:	edd7 7a06 	vldr	s15, [r7, #24]
 800cd50:	ee37 8a27 	vadd.f32	s16, s14, s15
 800cd54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd56:	2202      	movs	r2, #2
 800cd58:	2100      	movs	r1, #0
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 f9a2 	bl	800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800cd60:	4603      	mov	r3, r0
 800cd62:	ee78 7a08 	vadd.f32	s15, s16, s16
 800cd66:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 800cd6a:	ed97 7a07 	vldr	s14, [r7, #28]
 800cd6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cd72:	ee37 8a27 	vadd.f32	s16, s14, s15
 800cd76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 f991 	bl	800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800cd82:	4603      	mov	r3, r0
 800cd84:	ee78 7a08 	vadd.f32	s15, s16, s16
 800cd88:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 800cd8c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800cd90:	edd7 7a08 	vldr	s15, [r7, #32]
 800cd94:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd98:	edd7 7a05 	vldr	s15, [r7, #20]
 800cd9c:	ee37 8a27 	vadd.f32	s16, s14, s15
 800cda0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cda2:	2201      	movs	r2, #1
 800cda4:	2101      	movs	r1, #1
 800cda6:	4618      	mov	r0, r3
 800cda8:	f000 f97c 	bl	800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800cdac:	4603      	mov	r3, r0
 800cdae:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdb2:	ee78 7a67 	vsub.f32	s15, s16, s15
 800cdb6:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 800cdba:	ed97 7a04 	vldr	s14, [r7, #16]
 800cdbe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800cdc2:	ee37 8a67 	vsub.f32	s16, s14, s15
 800cdc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdc8:	2202      	movs	r2, #2
 800cdca:	2101      	movs	r1, #1
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 f969 	bl	800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	ee78 7a08 	vadd.f32	s15, s16, s16
 800cdd8:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 800cddc:	ed97 7a06 	vldr	s14, [r7, #24]
 800cde0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cde4:	ee37 8a67 	vsub.f32	s16, s14, s15
 800cde8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdea:	2200      	movs	r2, #0
 800cdec:	2102      	movs	r1, #2
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 f958 	bl	800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	ee78 7a08 	vadd.f32	s15, s16, s16
 800cdfa:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 800cdfe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800ce02:	edd7 7a04 	vldr	s15, [r7, #16]
 800ce06:	ee37 8a27 	vadd.f32	s16, s14, s15
 800ce0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	2102      	movs	r1, #2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 f947 	bl	800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800ce16:	4603      	mov	r3, r0
 800ce18:	ee78 7a08 	vadd.f32	s15, s16, s16
 800ce1c:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 800ce20:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ce24:	edd7 7a08 	vldr	s15, [r7, #32]
 800ce28:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce2c:	edd7 7a05 	vldr	s15, [r7, #20]
 800ce30:	ee37 8a67 	vsub.f32	s16, s14, s15
 800ce34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce36:	2202      	movs	r2, #2
 800ce38:	2102      	movs	r1, #2
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 f932 	bl	800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800ce40:	4603      	mov	r3, r0
 800ce42:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce46:	ee78 7a27 	vadd.f32	s15, s16, s15
 800ce4a:	edc3 7a00 	vstr	s15, [r3]
    }
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	3748      	adds	r7, #72	; 0x48
 800ce54:	46bd      	mov	sp, r7
 800ce56:	ecbd 8b02 	vpop	{d8}
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	461a      	mov	r2, r3
 800ce68:	2300      	movs	r3, #0
 800ce6a:	6013      	str	r3, [r2, #0]
 800ce6c:	6053      	str	r3, [r2, #4]
 800ce6e:	6093      	str	r3, [r2, #8]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4618      	mov	r0, r3
 800ce74:	370c      	adds	r7, #12
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr

0800ce7e <_ZN6matrix6VectorIfLj3EEC1Ev>:
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b082      	sub	sp, #8
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff ffe7 	bl	800ce5c <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	ed87 0a02 	vstr	s0, [r7, #8]
 800cea4:	edc7 0a01 	vstr	s1, [r7, #4]
 800cea8:	ed87 1a00 	vstr	s2, [r7]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7ff ffe5 	bl	800ce7e <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	617b      	str	r3, [r7, #20]
        v(0) = x;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	2100      	movs	r1, #0
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 f88f 	bl	800cfe0 <_ZN6matrix6VectorIfLj3EEclEj>
 800cec2:	4602      	mov	r2, r0
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	6013      	str	r3, [r2, #0]
        v(1) = y;
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2101      	movs	r1, #1
 800cecc:	4618      	mov	r0, r3
 800cece:	f000 f887 	bl	800cfe0 <_ZN6matrix6VectorIfLj3EEclEj>
 800ced2:	4602      	mov	r2, r0
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6013      	str	r3, [r2, #0]
        v(2) = z;
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	2102      	movs	r1, #2
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 f87f 	bl	800cfe0 <_ZN6matrix6VectorIfLj3EEclEj>
 800cee2:	4602      	mov	r2, r0
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	6013      	str	r3, [r2, #0]
    }
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	4618      	mov	r0, r3
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 800cef2:	b580      	push	{r7, lr}
 800cef4:	ed2d 8b02 	vpush	{d8}
 800cef8:	b088      	sub	sp, #32
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	60f8      	str	r0, [r7, #12]
 800cefe:	60b9      	str	r1, [r7, #8]
 800cf00:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	461a      	mov	r2, r3
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	6013      	str	r3, [r2, #0]
 800cf0e:	6053      	str	r3, [r2, #4]
 800cf10:	6093      	str	r3, [r2, #8]
        res.setZero();
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 f8f4 	bl	800d100 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 800cf18:	2300      	movs	r3, #0
 800cf1a:	61fb      	str	r3, [r7, #28]
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d831      	bhi.n	800cf86 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 800cf22:	2300      	movs	r3, #0
 800cf24:	61bb      	str	r3, [r7, #24]
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d128      	bne.n	800cf7e <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d81f      	bhi.n	800cf76 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 800cf36:	697a      	ldr	r2, [r7, #20]
 800cf38:	69f9      	ldr	r1, [r7, #28]
 800cf3a:	6938      	ldr	r0, [r7, #16]
 800cf3c:	f000 f918 	bl	800d170 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 800cf40:	eeb0 8a40 	vmov.f32	s16, s0
 800cf44:	69ba      	ldr	r2, [r7, #24]
 800cf46:	6979      	ldr	r1, [r7, #20]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 f943 	bl	800d1d4 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 800cf4e:	eef0 7a40 	vmov.f32	s15, s0
 800cf52:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cf56:	69ba      	ldr	r2, [r7, #24]
 800cf58:	69f9      	ldr	r1, [r7, #28]
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f000 f8de 	bl	800d11c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800cf60:	4603      	mov	r3, r0
 800cf62:	edd3 7a00 	vldr	s15, [r3]
 800cf66:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cf6a:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	3301      	adds	r3, #1
 800cf72:	617b      	str	r3, [r7, #20]
 800cf74:	e7dc      	b.n	800cf30 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	61bb      	str	r3, [r7, #24]
 800cf7c:	e7d3      	b.n	800cf26 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	3301      	adds	r3, #1
 800cf82:	61fb      	str	r3, [r7, #28]
 800cf84:	e7ca      	b.n	800cf1c <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 800cf86:	bf00      	nop
    }
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	3720      	adds	r7, #32
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	ecbd 8b02 	vpop	{d8}
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6839      	ldr	r1, [r7, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f000 f944 	bl	800d230 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b082      	sub	sp, #8
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	6039      	str	r1, [r7, #0]
    {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	6053      	str	r3, [r2, #4]
 800cfc6:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	220c      	movs	r2, #12
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f01e fcf2 	bl	802b9b8 <memcpy>
    }
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
	...

0800cfe0 <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d905      	bls.n	800cffc <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 800cff0:	4b08      	ldr	r3, [pc, #32]	; (800d014 <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 800cff2:	4a09      	ldr	r2, [pc, #36]	; (800d018 <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 800cff4:	2137      	movs	r1, #55	; 0x37
 800cff6:	4809      	ldr	r0, [pc, #36]	; (800d01c <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 800cff8:	f01e fc84 	bl	802b904 <__assert_func>

        MatrixM1 &v = *this;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800d000:	2200      	movs	r2, #0
 800d002:	6839      	ldr	r1, [r7, #0]
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f000 f889 	bl	800d11c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800d00a:	4603      	mov	r3, r0
    }
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	0802cab8 	.word	0x0802cab8
 800d018:	0802d4b4 	.word	0x0802d4b4
 800d01c:	0802cac0 	.word	0x0802cac0

0800d020 <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b03      	cmp	r3, #3
 800d02e:	d905      	bls.n	800d03c <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 800d030:	4b08      	ldr	r3, [pc, #32]	; (800d054 <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 800d032:	4a09      	ldr	r2, [pc, #36]	; (800d058 <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 800d034:	2137      	movs	r1, #55	; 0x37
 800d036:	4809      	ldr	r0, [pc, #36]	; (800d05c <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 800d038:	f01e fc64 	bl	802b904 <__assert_func>
        MatrixM1 &v = *this;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800d040:	2200      	movs	r2, #0
 800d042:	6839      	ldr	r1, [r7, #0]
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 f903 	bl	800d250 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 800d04a:	4603      	mov	r3, r0
    }
 800d04c:	4618      	mov	r0, r3
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	0802cab8 	.word	0x0802cab8
 800d058:	0802d050 	.word	0x0802d050
 800d05c:	0802cac0 	.word	0x0802cac0

0800d060 <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2b03      	cmp	r3, #3
 800d06e:	d905      	bls.n	800d07c <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 800d070:	4b09      	ldr	r3, [pc, #36]	; (800d098 <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 800d072:	4a0a      	ldr	r2, [pc, #40]	; (800d09c <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 800d074:	212e      	movs	r1, #46	; 0x2e
 800d076:	480a      	ldr	r0, [pc, #40]	; (800d0a0 <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 800d078:	f01e fc44 	bl	802b904 <__assert_func>
        const MatrixM1 &v = *this;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800d080:	2200      	movs	r2, #0
 800d082:	6839      	ldr	r1, [r7, #0]
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f000 f90d 	bl	800d2a4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 800d08a:	eef0 7a40 	vmov.f32	s15, s0
    }
 800d08e:	eeb0 0a67 	vmov.f32	s0, s15
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	0802cab8 	.word	0x0802cab8
 800d09c:	0802d154 	.word	0x0802d154
 800d0a0:	0802cac0 	.word	0x0802cac0

0800d0a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d905      	bls.n	800d0c2 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800d0b6:	4b0e      	ldr	r3, [pc, #56]	; (800d0f0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 800d0b8:	4a0e      	ldr	r2, [pc, #56]	; (800d0f4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800d0ba:	216e      	movs	r1, #110	; 0x6e
 800d0bc:	480e      	ldr	r0, [pc, #56]	; (800d0f8 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800d0be:	f01e fc21 	bl	802b904 <__assert_func>
        assert(j < N);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d905      	bls.n	800d0d4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800d0c8:	4b0c      	ldr	r3, [pc, #48]	; (800d0fc <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800d0ca:	4a0a      	ldr	r2, [pc, #40]	; (800d0f4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800d0cc:	2170      	movs	r1, #112	; 0x70
 800d0ce:	480a      	ldr	r0, [pc, #40]	; (800d0f8 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800d0d0:	f01e fc18 	bl	802b904 <__assert_func>
        return _data[i][j];
 800d0d4:	68ba      	ldr	r2, [r7, #8]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	005b      	lsls	r3, r3, #1
 800d0da:	4413      	add	r3, r2
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	4413      	add	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	4413      	add	r3, r2
    }
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	0802cab8 	.word	0x0802cab8
 800d0f4:	0802d264 	.word	0x0802d264
 800d0f8:	0802cafc 	.word	0x0802cafc
 800d0fc:	0802cb38 	.word	0x0802cb38

0800d100 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	220c      	movs	r2, #12
 800d10c:	2100      	movs	r1, #0
 800d10e:	4618      	mov	r0, r3
 800d110:	f01e fc5d 	bl	802b9ce <memset>
    }
 800d114:	bf00      	nop
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d905      	bls.n	800d13a <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800d12e:	4b0c      	ldr	r3, [pc, #48]	; (800d160 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 800d130:	4a0c      	ldr	r2, [pc, #48]	; (800d164 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800d132:	216e      	movs	r1, #110	; 0x6e
 800d134:	480c      	ldr	r0, [pc, #48]	; (800d168 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800d136:	f01e fbe5 	bl	802b904 <__assert_func>
        assert(j < N);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d005      	beq.n	800d14c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800d140:	4b0a      	ldr	r3, [pc, #40]	; (800d16c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800d142:	4a08      	ldr	r2, [pc, #32]	; (800d164 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800d144:	2170      	movs	r1, #112	; 0x70
 800d146:	4808      	ldr	r0, [pc, #32]	; (800d168 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800d148:	f01e fbdc 	bl	802b904 <__assert_func>
        return _data[i][j];
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4413      	add	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	4413      	add	r3, r2
    }
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	0802cab8 	.word	0x0802cab8
 800d164:	0802d424 	.word	0x0802d424
 800d168:	0802cafc 	.word	0x0802cafc
 800d16c:	0802cb38 	.word	0x0802cb38

0800d170 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d905      	bls.n	800d18e <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800d182:	4b10      	ldr	r3, [pc, #64]	; (800d1c4 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800d184:	4a10      	ldr	r2, [pc, #64]	; (800d1c8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800d186:	2164      	movs	r1, #100	; 0x64
 800d188:	4810      	ldr	r0, [pc, #64]	; (800d1cc <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800d18a:	f01e fbbb 	bl	802b904 <__assert_func>
        assert(j < N);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2b02      	cmp	r3, #2
 800d192:	d905      	bls.n	800d1a0 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800d194:	4b0e      	ldr	r3, [pc, #56]	; (800d1d0 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 800d196:	4a0c      	ldr	r2, [pc, #48]	; (800d1c8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800d198:	2166      	movs	r1, #102	; 0x66
 800d19a:	480c      	ldr	r0, [pc, #48]	; (800d1cc <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800d19c:	f01e fbb2 	bl	802b904 <__assert_func>
        return _data[i][j];
 800d1a0:	68f9      	ldr	r1, [r7, #12]
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	005b      	lsls	r3, r3, #1
 800d1a8:	4413      	add	r3, r2
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	440b      	add	r3, r1
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	ee07 3a90 	vmov	s15, r3
    }
 800d1b8:	eeb0 0a67 	vmov.f32	s0, s15
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	0802cab8 	.word	0x0802cab8
 800d1c8:	0802d2f4 	.word	0x0802d2f4
 800d1cc:	0802cafc 	.word	0x0802cafc
 800d1d0:	0802cb38 	.word	0x0802cb38

0800d1d4 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	2b02      	cmp	r3, #2
 800d1e4:	d905      	bls.n	800d1f2 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800d1e6:	4b0e      	ldr	r3, [pc, #56]	; (800d220 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800d1e8:	4a0e      	ldr	r2, [pc, #56]	; (800d224 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800d1ea:	2164      	movs	r1, #100	; 0x64
 800d1ec:	480e      	ldr	r0, [pc, #56]	; (800d228 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800d1ee:	f01e fb89 	bl	802b904 <__assert_func>
        assert(j < N);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d005      	beq.n	800d204 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800d1f8:	4b0c      	ldr	r3, [pc, #48]	; (800d22c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 800d1fa:	4a0a      	ldr	r2, [pc, #40]	; (800d224 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800d1fc:	2166      	movs	r1, #102	; 0x66
 800d1fe:	480a      	ldr	r0, [pc, #40]	; (800d228 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800d200:	f01e fb80 	bl	802b904 <__assert_func>
        return _data[i][j];
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	68b9      	ldr	r1, [r7, #8]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	440b      	add	r3, r1
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	4413      	add	r3, r2
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	ee07 3a90 	vmov	s15, r3
    }
 800d216:	eeb0 0a67 	vmov.f32	s0, s15
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	0802cab8 	.word	0x0802cab8
 800d224:	0802d38c 	.word	0x0802d38c
 800d228:	0802cafc 	.word	0x0802cafc
 800d22c:	0802cb38 	.word	0x0802cb38

0800d230 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	4618      	mov	r0, r3
 800d240:	f7ff feb7 	bl	800cfb2 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4618      	mov	r0, r3
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
	...

0800d250 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d905      	bls.n	800d26e <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800d262:	4b0c      	ldr	r3, [pc, #48]	; (800d294 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 800d264:	4a0c      	ldr	r2, [pc, #48]	; (800d298 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800d266:	216e      	movs	r1, #110	; 0x6e
 800d268:	480c      	ldr	r0, [pc, #48]	; (800d29c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800d26a:	f01e fb4b 	bl	802b904 <__assert_func>
        assert(j < N);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d005      	beq.n	800d280 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800d274:	4b0a      	ldr	r3, [pc, #40]	; (800d2a0 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800d276:	4a08      	ldr	r2, [pc, #32]	; (800d298 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800d278:	2170      	movs	r1, #112	; 0x70
 800d27a:	4808      	ldr	r0, [pc, #32]	; (800d29c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800d27c:	f01e fb42 	bl	802b904 <__assert_func>
        return _data[i][j];
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4413      	add	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	4413      	add	r3, r2
    }
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	0802cab8 	.word	0x0802cab8
 800d298:	0802d0c4 	.word	0x0802d0c4
 800d29c:	0802cafc 	.word	0x0802cafc
 800d2a0:	0802cb38 	.word	0x0802cb38

0800d2a4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	2b03      	cmp	r3, #3
 800d2b4:	d905      	bls.n	800d2c2 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800d2b6:	4b0e      	ldr	r3, [pc, #56]	; (800d2f0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800d2b8:	4a0e      	ldr	r2, [pc, #56]	; (800d2f4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800d2ba:	2164      	movs	r1, #100	; 0x64
 800d2bc:	480e      	ldr	r0, [pc, #56]	; (800d2f8 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800d2be:	f01e fb21 	bl	802b904 <__assert_func>
        assert(j < N);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d005      	beq.n	800d2d4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800d2c8:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 800d2ca:	4a0a      	ldr	r2, [pc, #40]	; (800d2f4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800d2cc:	2166      	movs	r1, #102	; 0x66
 800d2ce:	480a      	ldr	r0, [pc, #40]	; (800d2f8 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800d2d0:	f01e fb18 	bl	802b904 <__assert_func>
        return _data[i][j];
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	68b9      	ldr	r1, [r7, #8]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	440b      	add	r3, r1
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	ee07 3a90 	vmov	s15, r3
    }
 800d2e6:	eeb0 0a67 	vmov.f32	s0, s15
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	0802cab8 	.word	0x0802cab8
 800d2f4:	0802d1cc 	.word	0x0802d1cc
 800d2f8:	0802cafc 	.word	0x0802cafc
 800d2fc:	0802cb38 	.word	0x0802cb38

0800d300 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 800d300:	b490      	push	{r4, r7}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
 800d30a:	2300      	movs	r3, #0
 800d30c:	73fb      	strb	r3, [r7, #15]
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 800d31a:	42a2      	cmp	r2, r4
 800d31c:	bf08      	it	eq
 800d31e:	4299      	cmpeq	r1, r3
 800d320:	d001      	beq.n	800d326 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE+0x26>
 800d322:	2301      	movs	r3, #1
 800d324:	73fb      	strb	r3, [r7, #15]
 800d326:	683a      	ldr	r2, [r7, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4614      	mov	r4, r2
 800d32c:	33a8      	adds	r3, #168	; 0xa8
 800d32e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d334:	7bfb      	ldrb	r3, [r7, #15]
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bc90      	pop	{r4, r7}
 800d33e:	4770      	bx	lr

0800d340 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 800d340:	b4b0      	push	{r4, r5, r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
 800d34a:	2300      	movs	r3, #0
 800d34c:	73fb      	strb	r3, [r7, #15]
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 800d35a:	42a2      	cmp	r2, r4
 800d35c:	bf08      	it	eq
 800d35e:	4299      	cmpeq	r1, r3
 800d360:	d001      	beq.n	800d366 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE+0x26>
 800d362:	2301      	movs	r3, #1
 800d364:	73fb      	strb	r3, [r7, #15]
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4615      	mov	r5, r2
 800d36c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800d370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d374:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d378:	e885 0003 	stmia.w	r5, {r0, r1}
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	bcb0      	pop	{r4, r5, r7}
 800d386:	4770      	bx	lr

0800d388 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>:
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800d388:	b4b0      	push	{r4, r5, r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
 800d392:	2300      	movs	r3, #0
 800d394:	73fb      	strb	r3, [r7, #15]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 800d3a2:	42a2      	cmp	r2, r4
 800d3a4:	bf08      	it	eq
 800d3a6:	4299      	cmpeq	r1, r3
 800d3a8:	d001      	beq.n	800d3ae <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x26>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	73fb      	strb	r3, [r7, #15]
 800d3ae:	683a      	ldr	r2, [r7, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4615      	mov	r5, r2
 800d3b4:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800d3b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d3bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d3c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d3c4:	e885 0003 	stmia.w	r5, {r0, r1}
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bcb0      	pop	{r4, r5, r7}
 800d3d2:	4770      	bx	lr

0800d3d4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>:

    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)

    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 800d3d4:	b490      	push	{r4, r7}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	73fb      	strb	r3, [r7, #15]
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d3ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d3f2:	42a2      	cmp	r2, r4
 800d3f4:	bf08      	it	eq
 800d3f6:	4299      	cmpeq	r1, r3
 800d3f8:	d001      	beq.n	800d3fe <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x2a>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	73fb      	strb	r3, [r7, #15]
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4614      	mov	r4, r2
 800d404:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d40a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bc90      	pop	{r4, r7}
 800d418:	4770      	bx	lr

0800d41a <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>:

    SIMPLE_FUNC_IMPL(Health, Health, health)

    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 800d41a:	b4b0      	push	{r4, r5, r7}
 800d41c:	b083      	sub	sp, #12
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	6039      	str	r1, [r7, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800d42c:	4615      	mov	r5, r2
 800d42e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d432:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d436:	e884 0003 	stmia.w	r4, {r0, r1}
 800d43a:	bf00      	nop
 800d43c:	370c      	adds	r7, #12
 800d43e:	46bd      	mov	sp, r7
 800d440:	bcb0      	pop	{r4, r5, r7}
 800d442:	4770      	bx	lr

0800d444 <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>:
  ~px4_AlgorithmModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_Second_att_control_codeb_T
 800d444:	b4b0      	push	{r4, r5, r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
    * pExtU_Second_att_control_codeb_T)
  {
    Second_att_control_codeblock__U = *pExtU_Second_att_control_codeb_T;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 800d456:	4615      	mov	r5, r2
 800d458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d45a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d45c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d45e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	6023      	str	r3, [r4, #0]
  }
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	bcb0      	pop	{r4, r5, r7}
 800d46c:	4770      	bx	lr

0800d46e <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const px4_AlgorithmModelClass::ExtY_Second_att_control_codeb_T
    & getExternalOutputs() const
 800d46e:	b480      	push	{r7}
 800d470:	b083      	sub	sp, #12
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  {
    return Second_att_control_codeblock__Y;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f503 7386 	add.w	r3, r3, #268	; 0x10c
  }
 800d47c:	4618      	mov	r0, r3
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800d488:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800d48c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800d48e:	4b0e      	ldr	r3, [pc, #56]	; (800d4c8 <_ZL11microsecondv+0x40>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4619      	mov	r1, r3
 800d494:	f04f 0200 	mov.w	r2, #0
 800d498:	f04f 0b00 	mov.w	fp, #0
 800d49c:	f04f 0c00 	mov.w	ip, #0
 800d4a0:	468c      	mov	ip, r1
 800d4a2:	f04f 0b00 	mov.w	fp, #0
 800d4a6:	4a09      	ldr	r2, [pc, #36]	; (800d4cc <_ZL11microsecondv+0x44>)
 800d4a8:	6812      	ldr	r2, [r2, #0]
 800d4aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	f04f 0200 	mov.w	r2, #0
 800d4b2:	ea4b 0301 	orr.w	r3, fp, r1
 800d4b6:	ea4c 0402 	orr.w	r4, ip, r2
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	4621      	mov	r1, r4
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	2400097c 	.word	0x2400097c
 800d4cc:	2400c62c 	.word	0x2400c62c

0800d4d0 <_ZN2FCL3mapEtttff>:

#include "Constant.h"

namespace FC{

static float map(uint16_t value, uint16_t in_min, uint16_t in_max, float out_min, float out_max){
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	ed87 0a01 	vstr	s0, [r7, #4]
 800d4dc:	edc7 0a00 	vstr	s1, [r7]
 800d4e0:	81fb      	strh	r3, [r7, #14]
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	81bb      	strh	r3, [r7, #12]
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	817b      	strh	r3, [r7, #10]
	return (float)(value - in_min)*(out_max - out_min) / (in_max - in_min) + out_min;
 800d4ea:	89fa      	ldrh	r2, [r7, #14]
 800d4ec:	89bb      	ldrh	r3, [r7, #12]
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	ee07 3a90 	vmov	s15, r3
 800d4f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d4f8:	edd7 6a00 	vldr	s13, [r7]
 800d4fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d500:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d504:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d508:	897a      	ldrh	r2, [r7, #10]
 800d50a:	89bb      	ldrh	r3, [r7, #12]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	ee07 3a90 	vmov	s15, r3
 800d512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d51a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d51e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800d522:	eeb0 0a67 	vmov.f32	s0, s15
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <_ZN2FC24ModuleAttitudeControllerC1Ev>:
#include "Utils/function.h"
#include "printf.h"

namespace FC {

ModuleAttitudeController::ModuleAttitudeController(){}
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7f7 f8b6 	bl	80046ac <_ZN23px4_AlgorithmModelClassC1Ev>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4618      	mov	r0, r3
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <_ZN2FC24ModuleAttitudeController7oneStepEv>:

void ModuleAttitudeController::oneStep(){
 800d54c:	b5b0      	push	{r4, r5, r7, lr}
 800d54e:	b092      	sub	sp, #72	; 0x48
 800d550:	af04      	add	r7, sp, #16
 800d552:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d55a:	4619      	mov	r1, r3
 800d55c:	4840      	ldr	r0, [pc, #256]	; (800d660 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800d55e:	f7ff ff39 	bl	800d3d4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>

	/* not armed */
	if(modeFlagSub.armMode != Command::Arm){
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800d568:	2b08      	cmp	r3, #8
 800d56a:	d012      	beq.n	800d592 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x46>
		setMotor(1000, 1000, 1000, 1000, 1000, 1000);
 800d56c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d570:	9302      	str	r3, [sp, #8]
 800d572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d586:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 f8f4 	bl	800d778 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
 800d590:	e062      	b.n	800d658 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x10c>
//		armFlag = true;
//		initialize();
//	}

	/* manual control */
	if(modeFlagSub.flightMode == Command::ControlAttitude){
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d103      	bne.n	800d5a4 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x58>
		setFromRC();
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 f88b 	bl	800d6b8 <_ZN2FC24ModuleAttitudeController9setFromRCEv>
 800d5a2:	e002      	b.n	800d5aa <_ZN2FC24ModuleAttitudeController7oneStepEv+0x5e>
	}
	/* position control */
	else{
		setFromPositionController();
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 f85d 	bl	800d664 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>
	}

	ExtU_Second_att_control_codeb_T input;
	input.set_pitch = targetPitch;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800d5b0:	633b      	str	r3, [r7, #48]	; 0x30
	input.set_roll = targetRoll;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800d5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	input.set_yaw = targetYawRate;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800d5c0:	637b      	str	r3, [r7, #52]	; 0x34
	input.set_thrust = targetThrottle;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800d5c8:	62bb      	str	r3, [r7, #40]	; 0x28

	msgBus.getAttitude(&attitudeSub);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4823      	ldr	r0, [pc, #140]	; (800d660 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800d5d4:	f7ff fed8 	bl	800d388 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	msgBus.getBodyAngularVelocity(&bodyAngularVelocitySub);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d5de:	4619      	mov	r1, r3
 800d5e0:	481f      	ldr	r0, [pc, #124]	; (800d660 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800d5e2:	f7fd fd73 	bl	800b0cc <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	input.Roll = attitudeSub.roll;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800d5ec:	617b      	str	r3, [r7, #20]
	input.Pitch = attitudeSub.pitch;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800d5f4:	61bb      	str	r3, [r7, #24]
	input.p = bodyAngularVelocitySub.xyz[0];
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800d5fc:	61fb      	str	r3, [r7, #28]
	input.q = bodyAngularVelocitySub.xyz[1];
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d604:	623b      	str	r3, [r7, #32]
	input.r = bodyAngularVelocitySub.xyz[2];
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d60c:	627b      	str	r3, [r7, #36]	; 0x24

	/* matlab codegen function */
	setExternalInputs(&input);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f107 0214 	add.w	r2, r7, #20
 800d614:	4611      	mov	r1, r2
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff ff14 	bl	800d444 <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>
	step();
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4618      	mov	r0, r3
 800d620:	f7f6 faa6 	bl	8003b70 <_ZN23px4_AlgorithmModelClass4stepEv>
	ExtY_Second_att_control_codeb_T output = getExternalOutputs();
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff ff21 	bl	800d46e <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>
 800d62c:	4602      	mov	r2, r0
 800d62e:	f107 0308 	add.w	r3, r7, #8
 800d632:	6810      	ldr	r0, [r2, #0]
 800d634:	6851      	ldr	r1, [r2, #4]
 800d636:	6892      	ldr	r2, [r2, #8]
 800d638:	c307      	stmia	r3!, {r0, r1, r2}

	/* set motor pwm */
	setMotor((uint16_t)output.PWM_OUT[0],
 800d63a:	8938      	ldrh	r0, [r7, #8]
			 (uint16_t)output.PWM_OUT[1],
 800d63c:	897c      	ldrh	r4, [r7, #10]
			 (uint16_t)output.PWM_OUT[2],
 800d63e:	89bd      	ldrh	r5, [r7, #12]
			 (uint16_t)output.PWM_OUT[3],
 800d640:	89fb      	ldrh	r3, [r7, #14]
			 (uint16_t)output.PWM_OUT[4],
 800d642:	8a3a      	ldrh	r2, [r7, #16]
			 (uint16_t)output.PWM_OUT[5]);
 800d644:	8a79      	ldrh	r1, [r7, #18]
	setMotor((uint16_t)output.PWM_OUT[0],
 800d646:	9102      	str	r1, [sp, #8]
 800d648:	9201      	str	r2, [sp, #4]
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	462b      	mov	r3, r5
 800d64e:	4622      	mov	r2, r4
 800d650:	4601      	mov	r1, r0
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f890 	bl	800d778 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
}
 800d658:	3738      	adds	r7, #56	; 0x38
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bdb0      	pop	{r4, r5, r7, pc}
 800d65e:	bf00      	nop
 800d660:	24000a50 	.word	0x24000a50

0800d664 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>:

void ModuleAttitudeController::setFromPositionController(){
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
	msgBus.getVehicleAttitueSP(&vehicleAttitudeSpSub);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d672:	4619      	mov	r1, r3
 800d674:	480f      	ldr	r0, [pc, #60]	; (800d6b4 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv+0x50>)
 800d676:	f7ff fe63 	bl	800d340 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
	targetRoll = vehicleAttitudeSpSub.roll;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	targetPitch = vehicleAttitudeSpSub.pitch;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	targetYawRate = vehicleAttitudeSpSub.yawRate;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	targetThrottle = vehicleAttitudeSpSub.throttle;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
}
 800d6aa:	bf00      	nop
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	24000a50 	.word	0x24000a50

0800d6b8 <_ZN2FC24ModuleAttitudeController9setFromRCEv>:

void ModuleAttitudeController::setFromRC(){
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	msgBus.getController(&controllerSub);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4829      	ldr	r0, [pc, #164]	; (800d770 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xb8>)
 800d6ca:	f7ff fe19 	bl	800d300 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
//	targetRoll = (float)(controllerSub.roll - 1500)/500.0;				/* map 1000~2000 to -1 ~ 1 */
//	targetPitch = -(float)(controllerSub.pitch - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
//	targetYawRate = (float)(controllerSub.yaw - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
//	targetThrottle = (float)(controllerSub.throttle - 1000)/1000.0;		/* map 1000~2000 to 0 ~ 1 */
	targetRoll = map(controllerSub.roll, 1000, 2000, -1.0, 1.0);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 800d6d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800d6d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d6dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d6e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7ff fef3 	bl	800d4d0 <_ZN2FCL3mapEtttff>
 800d6ea:	eef0 7a40 	vmov.f32	s15, s0
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
	targetPitch = map(controllerSub.pitch, 1000, 2000, -1.0, 1.0);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800d6fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800d6fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d702:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d706:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff fee0 	bl	800d4d0 <_ZN2FCL3mapEtttff>
 800d710:	eef0 7a40 	vmov.f32	s15, s0
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
	targetYawRate = map(controllerSub.yaw, 1000, 2000, -1.0, 1.0);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800d720:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800d724:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d728:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d72c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d730:	4618      	mov	r0, r3
 800d732:	f7ff fecd 	bl	800d4d0 <_ZN2FCL3mapEtttff>
 800d736:	eef0 7a40 	vmov.f32	s15, s0
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	edc3 7a6c 	vstr	s15, [r3, #432]	; 0x1b0
	targetThrottle = map(controllerSub.throttle, 1000, 2000, 0.0, 1.0);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
 800d746:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800d74a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800d774 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xbc>
 800d74e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d752:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff feba 	bl	800d4d0 <_ZN2FCL3mapEtttff>
 800d75c:	eef0 7a40 	vmov.f32	s15, s0
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
}
 800d766:	bf00      	nop
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	24000a50 	.word	0x24000a50
 800d774:	00000000 	.word	0x00000000

0800d778 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>:

void ModuleAttitudeController::setMotor(uint16_t pwm1, uint16_t pwm2, uint16_t pwm3, uint16_t pwm4, uint16_t pwm5, uint16_t pwm6){
 800d778:	b590      	push	{r4, r7, lr}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	4608      	mov	r0, r1
 800d782:	4611      	mov	r1, r2
 800d784:	461a      	mov	r2, r3
 800d786:	4603      	mov	r3, r0
 800d788:	817b      	strh	r3, [r7, #10]
 800d78a:	460b      	mov	r3, r1
 800d78c:	813b      	strh	r3, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	80fb      	strh	r3, [r7, #6]
	m1.setPWM(pwm1);
 800d792:	897b      	ldrh	r3, [r7, #10]
 800d794:	4619      	mov	r1, r3
 800d796:	4824      	ldr	r0, [pc, #144]	; (800d828 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb0>)
 800d798:	f7f3 f9b2 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m2.setPWM(pwm2);
 800d79c:	893b      	ldrh	r3, [r7, #8]
 800d79e:	4619      	mov	r1, r3
 800d7a0:	4822      	ldr	r0, [pc, #136]	; (800d82c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb4>)
 800d7a2:	f7f3 f9ad 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m3.setPWM(pwm3);
 800d7a6:	88fb      	ldrh	r3, [r7, #6]
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4821      	ldr	r0, [pc, #132]	; (800d830 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb8>)
 800d7ac:	f7f3 f9a8 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m4.setPWM(pwm4);
 800d7b0:	8c3b      	ldrh	r3, [r7, #32]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	481f      	ldr	r0, [pc, #124]	; (800d834 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xbc>)
 800d7b6:	f7f3 f9a3 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m5.setPWM(pwm5);
 800d7ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7bc:	4619      	mov	r1, r3
 800d7be:	481e      	ldr	r0, [pc, #120]	; (800d838 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc0>)
 800d7c0:	f7f3 f99e 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m6.setPWM(pwm6);
 800d7c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	481c      	ldr	r0, [pc, #112]	; (800d83c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc4>)
 800d7ca:	f7f3 f999 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>

	motorPwmSub.timestamp = microsecond();
 800d7ce:	f7ff fe5b 	bl	800d488 <_ZL11microsecondv>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	460c      	mov	r4, r1
 800d7d6:	68fa      	ldr	r2, [r7, #12]
 800d7d8:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 800d7dc:	e9c2 3400 	strd	r3, r4, [r2]
	motorPwmSub.m1 = pwm1;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	897a      	ldrh	r2, [r7, #10]
 800d7e4:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	motorPwmSub.m2 = pwm2;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	893a      	ldrh	r2, [r7, #8]
 800d7ec:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
	motorPwmSub.m3 = pwm3;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	88fa      	ldrh	r2, [r7, #6]
 800d7f4:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	motorPwmSub.m4 = pwm4;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	8c3a      	ldrh	r2, [r7, #32]
 800d7fc:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
	motorPwmSub.m5 = pwm5;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d804:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
	motorPwmSub.m6 = pwm6;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d80c:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

	msgBus.setMotorPWM(motorPwmSub);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d816:	4619      	mov	r1, r3
 800d818:	4809      	ldr	r0, [pc, #36]	; (800d840 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc8>)
 800d81a:	f7ff fdfe 	bl	800d41a <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>
}
 800d81e:	bf00      	nop
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	bd90      	pop	{r4, r7, pc}
 800d826:	bf00      	nop
 800d828:	24000734 	.word	0x24000734
 800d82c:	24000740 	.word	0x24000740
 800d830:	2400074c 	.word	0x2400074c
 800d834:	24000758 	.word	0x24000758
 800d838:	24000764 	.word	0x24000764
 800d83c:	24000770 	.word	0x24000770
 800d840:	24000a50 	.word	0x24000a50

0800d844 <_ZN2FC12ModuleBuzzer4mainEv>:
	.mq_mem = &Buzzer_QueueBuffer,
	.mq_size = sizeof(Buzzer_QueueBuffer)
};


void ModuleBuzzer::main() {
 800d844:	b580      	push	{r7, lr}
 800d846:	b08e      	sub	sp, #56	; 0x38
 800d848:	af00      	add	r7, sp, #0
	 *  TIM4, TIM_CHANNEL_1
	 *  PCLK 100Mhz
	 *  Prescaler 0
	 *  Counter Period 10-1
	 */
	ModuleBuzzer buzzer(&htim4, TIM_CHANNEL_1, 100000000);
 800d84a:	1d38      	adds	r0, r7, #4
 800d84c:	4b12      	ldr	r3, [pc, #72]	; (800d898 <_ZN2FC12ModuleBuzzer4mainEv+0x54>)
 800d84e:	2200      	movs	r2, #0
 800d850:	4912      	ldr	r1, [pc, #72]	; (800d89c <_ZN2FC12ModuleBuzzer4mainEv+0x58>)
 800d852:	f000 f827 	bl	800d8a4 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>

	BuzzerCommand rcvResult;
	while(1){
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 800d856:	4b12      	ldr	r3, [pc, #72]	; (800d8a0 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 800d858:	6818      	ldr	r0, [r3, #0]
 800d85a:	4639      	mov	r1, r7
 800d85c:	f04f 33ff 	mov.w	r3, #4294967295
 800d860:	2200      	movs	r2, #0
 800d862:	f017 fcf7 	bl	8025254 <osMessageQueueGet>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	bf0c      	ite	eq
 800d86c:	2301      	moveq	r3, #1
 800d86e:	2300      	movne	r3, #0
 800d870:	b2db      	uxtb	r3, r3
 800d872:	2b00      	cmp	r3, #0
 800d874:	d006      	beq.n	800d884 <_ZN2FC12ModuleBuzzer4mainEv+0x40>
			buzzer.commandHandler(rcvResult);
 800d876:	683a      	ldr	r2, [r7, #0]
 800d878:	1d3b      	adds	r3, r7, #4
 800d87a:	4611      	mov	r1, r2
 800d87c:	4618      	mov	r0, r3
 800d87e:	f000 f881 	bl	800d984 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>
 800d882:	e004      	b.n	800d88e <_ZN2FC12ModuleBuzzer4mainEv+0x4a>
//			osDelay(10);
		}
		else{
			osMessageQueueReset(Buzzer_QueueHandle);
 800d884:	4b06      	ldr	r3, [pc, #24]	; (800d8a0 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4618      	mov	r0, r3
 800d88a:	f017 fd9d 	bl	80253c8 <osMessageQueueReset>
		}
		osDelay(10);
 800d88e:	200a      	movs	r0, #10
 800d890:	f017 f9e6 	bl	8024c60 <osDelay>
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 800d894:	e7df      	b.n	800d856 <_ZN2FC12ModuleBuzzer4mainEv+0x12>
 800d896:	bf00      	nop
 800d898:	05f5e100 	.word	0x05f5e100
 800d89c:	2400c548 	.word	0x2400c548
 800d8a0:	24000980 	.word	0x24000980

0800d8a4 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>:
	}
}

ModuleBuzzer::ModuleBuzzer(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t CLK)
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
 800d8b0:	603b      	str	r3, [r7, #0]
	: A{Z1, Z2, Z5, Z6}
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	330c      	adds	r3, #12
 800d8b6:	2228      	movs	r2, #40	; 0x28
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f01e f887 	bl	802b9ce <memset>
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	4a17      	ldr	r2, [pc, #92]	; (800d920 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x7c>)
 800d8c4:	60da      	str	r2, [r3, #12]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	4a16      	ldr	r2, [pc, #88]	; (800d924 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x80>)
 800d8ca:	611a      	str	r2, [r3, #16]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	4a16      	ldr	r2, [pc, #88]	; (800d928 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x84>)
 800d8d0:	615a      	str	r2, [r3, #20]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4a15      	ldr	r2, [pc, #84]	; (800d92c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x88>)
 800d8d6:	619a      	str	r2, [r3, #24]
{
	  /* creation of Buzzer_Queue */
	  Buzzer_QueueHandle = osMessageQueueNew (3, sizeof(BuzzerCommand), &Buzzer_Queue_attributes);
 800d8d8:	4a15      	ldr	r2, [pc, #84]	; (800d930 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x8c>)
 800d8da:	2104      	movs	r1, #4
 800d8dc:	2003      	movs	r0, #3
 800d8de:	f017 fbbf 	bl	8025060 <osMessageQueueNew>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	4b13      	ldr	r3, [pc, #76]	; (800d934 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x90>)
 800d8e6:	601a      	str	r2, [r3, #0]

	  this->htim = htim;
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	601a      	str	r2, [r3, #0]
	  this->Channel = Channel;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	605a      	str	r2, [r3, #4]
	  this->CLK = CLK/10;		/* 10 : AutoReload Register+1 */
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	4a10      	ldr	r2, [pc, #64]	; (800d938 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x94>)
 800d8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d8fc:	08da      	lsrs	r2, r3, #3
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_PRESCALER(htim, this->CLK / 4000);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	689a      	ldr	r2, [r3, #8]
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	490c      	ldr	r1, [pc, #48]	; (800d93c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x98>)
 800d90c:	fba1 1202 	umull	r1, r2, r1, r2
 800d910:	0a12      	lsrs	r2, r2, #8
 800d912:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	0003f7a0 	.word	0x0003f7a0
 800d924:	00042e50 	.word	0x00042e50
 800d928:	00045948 	.word	0x00045948
 800d92c:	0005cc60 	.word	0x0005cc60
 800d930:	0802d528 	.word	0x0802d528
 800d934:	24000980 	.word	0x24000980
 800d938:	cccccccd 	.word	0xcccccccd
 800d93c:	10624dd3 	.word	0x10624dd3

0800d940 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>:


bool ModuleBuzzer::sendCommand(BuzzerCommand cmd){
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Buzzer_QueueHandle) != 0){
 800d948:	4b0d      	ldr	r3, [pc, #52]	; (800d980 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f017 fcf3 	bl	8025338 <osMessageQueueGetSpace>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	bf14      	ite	ne
 800d958:	2301      	movne	r3, #1
 800d95a:	2300      	moveq	r3, #0
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d008      	beq.n	800d974 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x34>
		osMessageQueuePut(Buzzer_QueueHandle, (void*)&cmd, 0, 0);
 800d962:	4b07      	ldr	r3, [pc, #28]	; (800d980 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 800d964:	6818      	ldr	r0, [r3, #0]
 800d966:	1d39      	adds	r1, r7, #4
 800d968:	2300      	movs	r3, #0
 800d96a:	2200      	movs	r2, #0
 800d96c:	f017 fbfe 	bl	802516c <osMessageQueuePut>
		return true;
 800d970:	2301      	movs	r3, #1
 800d972:	e000      	b.n	800d976 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x36>
	}
	return false;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	24000980 	.word	0x24000980

0800d984 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>:

void ModuleBuzzer::commandHandler(BuzzerCommand result){
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
	switch(result){
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	2b03      	cmp	r3, #3
 800d992:	d81b      	bhi.n	800d9cc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
 800d994:	a201      	add	r2, pc, #4	; (adr r2, 800d99c <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x18>)
 800d996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d99a:	bf00      	nop
 800d99c:	0800d9ad 	.word	0x0800d9ad
 800d9a0:	0800d9b5 	.word	0x0800d9b5
 800d9a4:	0800d9bd 	.word	0x0800d9bd
 800d9a8:	0800d9c5 	.word	0x0800d9c5
	case BuzzerCommand::Armed:
		armed();
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 f811 	bl	800d9d4 <_ZN2FC12ModuleBuzzer5armedEv>
		break;
 800d9b2:	e00b      	b.n	800d9cc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::DisArmed:
		disarmed();
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 f817 	bl	800d9e8 <_ZN2FC12ModuleBuzzer8disarmedEv>
		break;
 800d9ba:	e007      	b.n	800d9cc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Success:
		success();
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f827 	bl	800da10 <_ZN2FC12ModuleBuzzer7successEv>
		break;
 800d9c2:	e003      	b.n	800d9cc <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Denied:
		denied();
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 f819 	bl	800d9fc <_ZN2FC12ModuleBuzzer6deniedEv>
		break;
 800d9ca:	bf00      	nop
	}
}
 800d9cc:	bf00      	nop
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <_ZN2FC12ModuleBuzzer5armedEv>:

void ModuleBuzzer::armed(){
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
	//TODO armed sound
}
 800d9dc:	bf00      	nop
 800d9de:	370c      	adds	r7, #12
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <_ZN2FC12ModuleBuzzer8disarmedEv>:

void ModuleBuzzer::disarmed(){
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
	//TODO disarmed sound
}
 800d9f0:	bf00      	nop
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <_ZN2FC12ModuleBuzzer6deniedEv>:

void ModuleBuzzer::denied(){
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
	//TODO denied sound
}
 800da04:	bf00      	nop
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <_ZN2FC12ModuleBuzzer7successEv>:

void ModuleBuzzer::success(){
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
//
//		/* Make each note sound and cut 1 mileecond */
//		HAL_TIM_PWM_Stop(htim, Channel);
//		osDelay(10);
//	}
	HAL_TIM_PWM_Start(htim, Channel);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	4619      	mov	r1, r3
 800da22:	4610      	mov	r0, r2
 800da24:	f010 fa8a 	bl	801df3c <HAL_TIM_PWM_Start>
	osDelay(2000);
 800da28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800da2c:	f017 f918 	bl	8024c60 <osDelay>
	HAL_TIM_PWM_Stop(htim, Channel);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	4619      	mov	r1, r3
 800da3a:	4610      	mov	r0, r2
 800da3c:	f010 fb50 	bl	801e0e0 <HAL_TIM_PWM_Stop>
}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>:
    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 800da48:	b490      	push	{r4, r7}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 800da5a:	4613      	mov	r3, r2
 800da5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bc90      	pop	{r4, r7}
 800da6a:	4770      	bx	lr

0800da6c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800da6c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800da70:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800da72:	4b0e      	ldr	r3, [pc, #56]	; (800daac <_ZL11microsecondv+0x40>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4619      	mov	r1, r3
 800da78:	f04f 0200 	mov.w	r2, #0
 800da7c:	f04f 0b00 	mov.w	fp, #0
 800da80:	f04f 0c00 	mov.w	ip, #0
 800da84:	468c      	mov	ip, r1
 800da86:	f04f 0b00 	mov.w	fp, #0
 800da8a:	4a09      	ldr	r2, [pc, #36]	; (800dab0 <_ZL11microsecondv+0x44>)
 800da8c:	6812      	ldr	r2, [r2, #0]
 800da8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800da90:	4611      	mov	r1, r2
 800da92:	f04f 0200 	mov.w	r2, #0
 800da96:	ea4b 0301 	orr.w	r3, fp, r1
 800da9a:	ea4c 0402 	orr.w	r4, ip, r2
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	4621      	mov	r1, r4
 800daa2:	46bd      	mov	sp, r7
 800daa4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop
 800daac:	240009e0 	.word	0x240009e0
 800dab0:	2400c62c 	.word	0x2400c62c

0800dab4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum PcSignal signal){
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	4603      	mov	r3, r0
 800dabc:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(PC_TaskHandle, signal);
 800dabe:	4b05      	ldr	r3, [pc, #20]	; (800dad4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE+0x20>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	79fa      	ldrb	r2, [r7, #7]
 800dac4:	4611      	mov	r1, r2
 800dac6:	4618      	mov	r0, r3
 800dac8:	f016 ff50 	bl	802496c <osThreadFlagsSet>
	}
 800dacc:	bf00      	nop
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	240094a0 	.word	0x240094a0

0800dad8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum AcSignal signal){
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	4603      	mov	r3, r0
 800dae0:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(AC_TaskHandle, signal);
 800dae2:	4b05      	ldr	r3, [pc, #20]	; (800daf8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE+0x20>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	79fa      	ldrb	r2, [r7, #7]
 800dae8:	4611      	mov	r1, r2
 800daea:	4618      	mov	r0, r3
 800daec:	f016 ff3e 	bl	802496c <osThreadFlagsSet>
	}
 800daf0:	bf00      	nop
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	24009440 	.word	0x24009440

0800dafc <_ZN2FC15ModuleCommanderC1Ev>:
  .cb_size = sizeof(Commander_QueueControlBlock),
  .mq_mem = &Commander_QueueBuffer,
  .mq_size = sizeof(Commander_QueueBuffer)
};

ModuleCommander::ModuleCommander(){
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	461a      	mov	r2, r3
 800db08:	2300      	movs	r3, #0
 800db0a:	6013      	str	r3, [r2, #0]
 800db0c:	6053      	str	r3, [r2, #4]
 800db0e:	6093      	str	r3, [r2, #8]
 800db10:	60d3      	str	r3, [r2, #12]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	3310      	adds	r3, #16
 800db16:	2220      	movs	r2, #32
 800db18:	2100      	movs	r1, #0
 800db1a:	4618      	mov	r0, r3
 800db1c:	f01d ff57 	bl	802b9ce <memset>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	3330      	adds	r3, #48	; 0x30
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]
 800db28:	605a      	str	r2, [r3, #4]
 800db2a:	609a      	str	r2, [r3, #8]
 800db2c:	60da      	str	r2, [r3, #12]
	  /* creation of Command_Queue */
	  Commander_QueueHandle = osMessageQueueNew (3, sizeof(Command), &Commander_Queue_attributes);
 800db2e:	4a06      	ldr	r2, [pc, #24]	; (800db48 <_ZN2FC15ModuleCommanderC1Ev+0x4c>)
 800db30:	2104      	movs	r1, #4
 800db32:	2003      	movs	r0, #3
 800db34:	f017 fa94 	bl	8025060 <osMessageQueueNew>
 800db38:	4602      	mov	r2, r0
 800db3a:	4b04      	ldr	r3, [pc, #16]	; (800db4c <_ZN2FC15ModuleCommanderC1Ev+0x50>)
 800db3c:	601a      	str	r2, [r3, #0]
}
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4618      	mov	r0, r3
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	0802d540 	.word	0x0802d540
 800db4c:	240009e4 	.word	0x240009e4

0800db50 <_ZN2FC15ModuleCommander4mainEv>:

void ModuleCommander::main(){
 800db50:	b580      	push	{r7, lr}
 800db52:	b092      	sub	sp, #72	; 0x48
 800db54:	af00      	add	r7, sp, #0
	ModuleCommander moduleCommander;
 800db56:	f107 0308 	add.w	r3, r7, #8
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff ffce 	bl	800dafc <_ZN2FC15ModuleCommanderC1Ev>

	osDelay(1500);
 800db60:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800db64:	f017 f87c 	bl	8024c60 <osDelay>
	sensorAccel.setBias();
 800db68:	4814      	ldr	r0, [pc, #80]	; (800dbbc <_ZN2FC15ModuleCommander4mainEv+0x6c>)
 800db6a:	f001 f9cd 	bl	800ef08 <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 800db6e:	4814      	ldr	r0, [pc, #80]	; (800dbc0 <_ZN2FC15ModuleCommander4mainEv+0x70>)
 800db70:	f001 fdc2 	bl	800f6f8 <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setSeaLevelPressure(26.0); /* inha univ. altitude */
 800db74:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 800db78:	4812      	ldr	r0, [pc, #72]	; (800dbc4 <_ZN2FC15ModuleCommander4mainEv+0x74>)
 800db7a:	f001 fba5 	bl	800f2c8 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>
	sensorBaro.setRefAltitude();
 800db7e:	4811      	ldr	r0, [pc, #68]	; (800dbc4 <_ZN2FC15ModuleCommander4mainEv+0x74>)
 800db80:	f001 fbbb 	bl	800f2fa <_ZN2FC10SensorBaro14setRefAltitudeEv>
	osDelay(500);
 800db84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db88:	f017 f86a 	bl	8024c60 <osDelay>

	while(1){
		Command rcvCommand;
		if(osMessageQueueGet(Commander_QueueHandle, (void*)&rcvCommand, NULL, osWaitForever) == osOK){
 800db8c:	4b0e      	ldr	r3, [pc, #56]	; (800dbc8 <_ZN2FC15ModuleCommander4mainEv+0x78>)
 800db8e:	6818      	ldr	r0, [r3, #0]
 800db90:	1d39      	adds	r1, r7, #4
 800db92:	f04f 33ff 	mov.w	r3, #4294967295
 800db96:	2200      	movs	r2, #0
 800db98:	f017 fb5c 	bl	8025254 <osMessageQueueGet>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	bf0c      	ite	eq
 800dba2:	2301      	moveq	r3, #1
 800dba4:	2300      	movne	r3, #0
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d0ef      	beq.n	800db8c <_ZN2FC15ModuleCommander4mainEv+0x3c>
			moduleCommander.commandHandler(rcvCommand);
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	f107 0308 	add.w	r3, r7, #8
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 f83d 	bl	800dc34 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>
		}
	}
 800dbba:	e7e7      	b.n	800db8c <_ZN2FC15ModuleCommander4mainEv+0x3c>
 800dbbc:	24000e30 	.word	0x24000e30
 800dbc0:	24000f10 	.word	0x24000f10
 800dbc4:	24000e70 	.word	0x24000e70
 800dbc8:	240009e4 	.word	0x240009e4

0800dbcc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>:
}

bool ModuleCommander::sendCommand(Command cmd){
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Commander_QueueHandle) != 0){
 800dbd4:	4b0d      	ldr	r3, [pc, #52]	; (800dc0c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f017 fbad 	bl	8025338 <osMessageQueueGetSpace>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	bf14      	ite	ne
 800dbe4:	2301      	movne	r3, #1
 800dbe6:	2300      	moveq	r3, #0
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d008      	beq.n	800dc00 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x34>
		osMessageQueuePut(Commander_QueueHandle, (void*)&cmd, 0, 0);
 800dbee:	4b07      	ldr	r3, [pc, #28]	; (800dc0c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 800dbf0:	6818      	ldr	r0, [r3, #0]
 800dbf2:	1d39      	adds	r1, r7, #4
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f017 fab8 	bl	802516c <osMessageQueuePut>
		return true;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e000      	b.n	800dc02 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x36>
	}
	return false;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	240009e4 	.word	0x240009e4

0800dc10 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>:

void ModuleCommander::sendSignal(enum CmdSignal signal){
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	71fb      	strb	r3, [r7, #7]
	osThreadFlagsSet(Commander_TaskHandle, signal);
 800dc1a:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE+0x20>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	79fa      	ldrb	r2, [r7, #7]
 800dc20:	4611      	mov	r1, r2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f016 fea2 	bl	802496c <osThreadFlagsSet>
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	24008fb0 	.word	0x24008fb0

0800dc34 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>:

bool ModuleCommander::commandHandler(Command cmd){
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
	switch(cmd){
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b0a      	cmp	r3, #10
 800dc42:	d847      	bhi.n	800dcd4 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa0>
 800dc44:	a201      	add	r2, pc, #4	; (adr r2, 800dc4c <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x18>)
 800dc46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc4a:	bf00      	nop
 800dc4c:	0800dc79 	.word	0x0800dc79
 800dc50:	0800dc83 	.word	0x0800dc83
 800dc54:	0800dc83 	.word	0x0800dc83
 800dc58:	0800dc8f 	.word	0x0800dc8f
 800dc5c:	0800dc99 	.word	0x0800dc99
 800dc60:	0800dca3 	.word	0x0800dca3
 800dc64:	0800dcad 	.word	0x0800dcad
 800dc68:	0800dcd5 	.word	0x0800dcd5
 800dc6c:	0800dcb7 	.word	0x0800dcb7
 800dc70:	0800dcc1 	.word	0x0800dcc1
 800dc74:	0800dccb 	.word	0x0800dccb
	case Command::ControlAttitude:
		return toAttitude();
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 f831 	bl	800dce0 <_ZN2FC15ModuleCommander10toAttitudeEv>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	e029      	b.n	800dcd6 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::ControlALT:
	case Command::ControlPosition:
		return toPosition(cmd);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f84f 	bl	800dd28 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	e023      	b.n	800dcd6 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoWaypoint:
		return toWaypoint();
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f886 	bl	800dda0 <_ZN2FC15ModuleCommander10toWaypointEv>
 800dc94:	4603      	mov	r3, r0
 800dc96:	e01e      	b.n	800dcd6 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoRTL:
		return toRTL();
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f88c 	bl	800ddb6 <_ZN2FC15ModuleCommander5toRTLEv>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	e019      	b.n	800dcd6 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoTakeoff:
		return toTakeoff();
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f892 	bl	800ddcc <_ZN2FC15ModuleCommander9toTakeoffEv>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	e014      	b.n	800dcd6 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoLand:
		return toLand();
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f898 	bl	800dde2 <_ZN2FC15ModuleCommander6toLandEv>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	e00f      	b.n	800dcd6 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;

	case Command::Arm:
		return toArm();
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 f89e 	bl	800ddf8 <_ZN2FC15ModuleCommander5toArmEv>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	e00a      	b.n	800dcd6 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::DisArm:
		return toDisArm();
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f8dd 	bl	800de80 <_ZN2FC15ModuleCommander8toDisArmEv>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	e005      	b.n	800dcd6 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;

	case Command::MotorCalibration:
		return toMotorCalibration();
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f8fa 	bl	800dec4 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	e000      	b.n	800dcd6 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	}
	return false;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop

0800dce0 <_ZN2FC15ModuleCommander10toAttitudeEv>:

bool ModuleCommander::toAttitude(){
 800dce0:	b590      	push	{r4, r7, lr}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
	/*
	 * check condition of attitude control
	 */


	resetController();
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 f93b 	bl	800df64 <_ZN2FC15ModuleCommander15resetControllerEv>
	/* change to attitude */
	modeFlagPub.timestamp = microsecond();
 800dcee:	f7ff febd 	bl	800da6c <_ZL11microsecondv>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	460c      	mov	r4, r1
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = Command::ControlAttitude;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	3330      	adds	r3, #48	; 0x30
 800dd06:	4619      	mov	r1, r3
 800dd08:	4806      	ldr	r0, [pc, #24]	; (800dd24 <_ZN2FC15ModuleCommander10toAttitudeEv+0x44>)
 800dd0a:	f7ff fe9d 	bl	800da48 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 f912 	bl	800df38 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800dd14:	2002      	movs	r0, #2
 800dd16:	f7ff fe13 	bl	800d940 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 800dd1a:	2301      	movs	r3, #1
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd90      	pop	{r4, r7, pc}
 800dd24:	24000a50 	.word	0x24000a50

0800dd28 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE>:

bool ModuleCommander::toPosition(Command cmd){
 800dd28:	b590      	push	{r4, r7, lr}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
	//TODO check condition of position controller

	/* set position controller */
	ModulePositionController::setSignal(PC_start);
 800dd32:	2002      	movs	r0, #2
 800dd34:	f7ff febe 	bl	800dab4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
	if(!(osThreadFlagsWait(CMD_ACK, osFlagsWaitAny, 500) & CMD_ACK)){
 800dd38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	2001      	movs	r0, #1
 800dd40:	f016 fefa 	bl	8024b38 <osThreadFlagsWait>
 800dd44:	4603      	mov	r3, r0
 800dd46:	f003 0301 	and.w	r3, r3, #1
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	bf0c      	ite	eq
 800dd4e:	2301      	moveq	r3, #1
 800dd50:	2300      	movne	r3, #0
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d004      	beq.n	800dd62 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE+0x3a>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 800dd58:	2003      	movs	r0, #3
 800dd5a:	f7ff fdf1 	bl	800d940 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	e018      	b.n	800dd94 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE+0x6c>
	}

	/* reset */
	resetController();
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f8fe 	bl	800df64 <_ZN2FC15ModuleCommander15resetControllerEv>

	/* mode set */
	modeFlagPub.timestamp = microsecond();
 800dd68:	f7ff fe80 	bl	800da6c <_ZL11microsecondv>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	460c      	mov	r4, r1
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = cmd;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3330      	adds	r3, #48	; 0x30
 800dd80:	4619      	mov	r1, r3
 800dd82:	4806      	ldr	r0, [pc, #24]	; (800dd9c <_ZN2FC15ModuleCommander10toPositionENS_7CommandE+0x74>)
 800dd84:	f7ff fe60 	bl	800da48 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 f8d5 	bl	800df38 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800dd8e:	2002      	movs	r0, #2
 800dd90:	f7ff fdd6 	bl	800d940 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd90      	pop	{r4, r7, pc}
 800dd9c:	24000a50 	.word	0x24000a50

0800dda0 <_ZN2FC15ModuleCommander10toWaypointEv>:

bool ModuleCommander::toWaypoint(){
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
	//TODO change to waypoint autopilot
}
 800dda8:	bf00      	nop
 800ddaa:	4618      	mov	r0, r3
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <_ZN2FC15ModuleCommander5toRTLEv>:

bool ModuleCommander::toRTL(){
 800ddb6:	b480      	push	{r7}
 800ddb8:	b083      	sub	sp, #12
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
	//TODO change to auto RTL
}
 800ddbe:	bf00      	nop
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <_ZN2FC15ModuleCommander9toTakeoffEv>:

bool ModuleCommander::toTakeoff(){
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
	//TODO change to auto takeoff
}
 800ddd4:	bf00      	nop
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	370c      	adds	r7, #12
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr

0800dde2 <_ZN2FC15ModuleCommander6toLandEv>:

bool ModuleCommander::toLand(){
 800dde2:	b480      	push	{r7}
 800dde4:	b083      	sub	sp, #12
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
	//TODO change to auto land
}
 800ddea:	bf00      	nop
 800ddec:	4618      	mov	r0, r3
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <_ZN2FC15ModuleCommander5toArmEv>:

bool ModuleCommander::toArm(){
 800ddf8:	b590      	push	{r4, r7, lr}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
	//TODO check arm condition

	/* toArm condition */
	msgBus.getController(&controllerSub);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4619      	mov	r1, r3
 800de04:	481a      	ldr	r0, [pc, #104]	; (800de70 <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 800de06:	f7ff fa7b 	bl	800d300 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
	if(controllerSub.throttle > 1050){
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	89db      	ldrh	r3, [r3, #14]
 800de0e:	f240 421a 	movw	r2, #1050	; 0x41a
 800de12:	4293      	cmp	r3, r2
 800de14:	d904      	bls.n	800de20 <_ZN2FC15ModuleCommander5toArmEv+0x28>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 800de16:	2003      	movs	r0, #3
 800de18:	f7ff fd92 	bl	800d940 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false; /* can't arm */
 800de1c:	2300      	movs	r3, #0
 800de1e:	e022      	b.n	800de66 <_ZN2FC15ModuleCommander5toArmEv+0x6e>
	}

	/* arm initialize */
	sensorAccel.setBias();
 800de20:	4814      	ldr	r0, [pc, #80]	; (800de74 <_ZN2FC15ModuleCommander5toArmEv+0x7c>)
 800de22:	f001 f871 	bl	800ef08 <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 800de26:	4814      	ldr	r0, [pc, #80]	; (800de78 <_ZN2FC15ModuleCommander5toArmEv+0x80>)
 800de28:	f001 fc66 	bl	800f6f8 <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setRefAltitude();
 800de2c:	4813      	ldr	r0, [pc, #76]	; (800de7c <_ZN2FC15ModuleCommander5toArmEv+0x84>)
 800de2e:	f001 fa64 	bl	800f2fa <_ZN2FC10SensorBaro14setRefAltitudeEv>
	resetController();
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 f896 	bl	800df64 <_ZN2FC15ModuleCommander15resetControllerEv>
	osDelay(150);					/* wait sensor calibration */
 800de38:	2096      	movs	r0, #150	; 0x96
 800de3a:	f016 ff11 	bl	8024c60 <osDelay>

	modeFlagPub.timestamp = microsecond();
 800de3e:	f7ff fe15 	bl	800da6c <_ZL11microsecondv>
 800de42:	4603      	mov	r3, r0
 800de44:	460c      	mov	r4, r1
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::Arm;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2208      	movs	r2, #8
 800de50:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	3330      	adds	r3, #48	; 0x30
 800de56:	4619      	mov	r1, r3
 800de58:	4805      	ldr	r0, [pc, #20]	; (800de70 <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 800de5a:	f7ff fdf5 	bl	800da48 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800de5e:	2002      	movs	r0, #2
 800de60:	f7ff fd6e 	bl	800d940 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 800de64:	2301      	movs	r3, #1
}
 800de66:	4618      	mov	r0, r3
 800de68:	370c      	adds	r7, #12
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd90      	pop	{r4, r7, pc}
 800de6e:	bf00      	nop
 800de70:	24000a50 	.word	0x24000a50
 800de74:	24000e30 	.word	0x24000e30
 800de78:	24000f10 	.word	0x24000f10
 800de7c:	24000e70 	.word	0x24000e70

0800de80 <_ZN2FC15ModuleCommander8toDisArmEv>:

bool ModuleCommander::toDisArm(){
 800de80:	b590      	push	{r4, r7, lr}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
//	   pwm.m4 > DISARM_PWM && pwm.m5 > DISARM_PWM && pwm.m6 > DISARM_PWM){
//		/* can't disarm */
//
//	}

	modeFlagPub.timestamp = microsecond();
 800de88:	f7ff fdf0 	bl	800da6c <_ZL11microsecondv>
 800de8c:	4603      	mov	r3, r0
 800de8e:	460c      	mov	r4, r1
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::DisArm;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2209      	movs	r2, #9
 800de9a:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	3330      	adds	r3, #48	; 0x30
 800dea0:	4619      	mov	r1, r3
 800dea2:	4807      	ldr	r0, [pc, #28]	; (800dec0 <_ZN2FC15ModuleCommander8toDisArmEv+0x40>)
 800dea4:	f7ff fdd0 	bl	800da48 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 f845 	bl	800df38 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800deae:	2002      	movs	r0, #2
 800deb0:	f7ff fd46 	bl	800d940 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 800deb4:	2301      	movs	r3, #1
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	bd90      	pop	{r4, r7, pc}
 800debe:	bf00      	nop
 800dec0:	24000a50 	.word	0x24000a50

0800dec4 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>:

bool ModuleCommander::toMotorCalibration(){
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
	osKernelLock();
 800decc:	f016 fc48 	bl	8024760 <osKernelLock>

	struct Controller ctl;

	while(1){
		msgBus.getController(&ctl);
 800ded0:	f107 0308 	add.w	r3, r7, #8
 800ded4:	4619      	mov	r1, r3
 800ded6:	4811      	ldr	r0, [pc, #68]	; (800df1c <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x58>)
 800ded8:	f7ff fa12 	bl	800d300 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

		m1.setPWM(ctl.throttle);
 800dedc:	8afb      	ldrh	r3, [r7, #22]
 800dede:	4619      	mov	r1, r3
 800dee0:	480f      	ldr	r0, [pc, #60]	; (800df20 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x5c>)
 800dee2:	f7f2 fe0d 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m2.setPWM(ctl.throttle);
 800dee6:	8afb      	ldrh	r3, [r7, #22]
 800dee8:	4619      	mov	r1, r3
 800deea:	480e      	ldr	r0, [pc, #56]	; (800df24 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x60>)
 800deec:	f7f2 fe08 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m3.setPWM(ctl.throttle);
 800def0:	8afb      	ldrh	r3, [r7, #22]
 800def2:	4619      	mov	r1, r3
 800def4:	480c      	ldr	r0, [pc, #48]	; (800df28 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x64>)
 800def6:	f7f2 fe03 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m4.setPWM(ctl.throttle);
 800defa:	8afb      	ldrh	r3, [r7, #22]
 800defc:	4619      	mov	r1, r3
 800defe:	480b      	ldr	r0, [pc, #44]	; (800df2c <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x68>)
 800df00:	f7f2 fdfe 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m5.setPWM(ctl.throttle);
 800df04:	8afb      	ldrh	r3, [r7, #22]
 800df06:	4619      	mov	r1, r3
 800df08:	4809      	ldr	r0, [pc, #36]	; (800df30 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x6c>)
 800df0a:	f7f2 fdf9 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m6.setPWM(ctl.throttle);
 800df0e:	8afb      	ldrh	r3, [r7, #22]
 800df10:	4619      	mov	r1, r3
 800df12:	4808      	ldr	r0, [pc, #32]	; (800df34 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x70>)
 800df14:	f7f2 fdf4 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		msgBus.getController(&ctl);
 800df18:	e7da      	b.n	800ded0 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0xc>
 800df1a:	bf00      	nop
 800df1c:	24000a50 	.word	0x24000a50
 800df20:	24000734 	.word	0x24000734
 800df24:	24000740 	.word	0x24000740
 800df28:	2400074c 	.word	0x2400074c
 800df2c:	24000758 	.word	0x24000758
 800df30:	24000764 	.word	0x24000764
 800df34:	24000770 	.word	0x24000770

0800df38 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>:
	}
	osKernelUnlock();
}

bool ModuleCommander::stopTheOtherTask(){
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df44:	2b00      	cmp	r3, #0
 800df46:	d004      	beq.n	800df52 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x1a>
 800df48:	2b00      	cmp	r3, #0
 800df4a:	db06      	blt.n	800df5a <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
 800df4c:	2b03      	cmp	r3, #3
 800df4e:	dc04      	bgt.n	800df5a <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
	case Command::ControlPosition:
	case Command::ControlALT:
		//TODO stop auto controller
	case Command::AutoWaypoint:
		//??
		break;
 800df50:	e002      	b.n	800df58 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x20>
		ModulePositionController::setSignal(PC_stop);
 800df52:	2004      	movs	r0, #4
 800df54:	f7ff fdae 	bl	800dab4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		break;
 800df58:	bf00      	nop
	}
}
 800df5a:	bf00      	nop
 800df5c:	4618      	mov	r0, r3
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <_ZN2FC15ModuleCommander15resetControllerEv>:

void ModuleCommander::resetController(){
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df70:	2b00      	cmp	r3, #0
 800df72:	d006      	beq.n	800df82 <_ZN2FC15ModuleCommander15resetControllerEv+0x1e>
 800df74:	2b00      	cmp	r3, #0
 800df76:	db08      	blt.n	800df8a <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
 800df78:	2b03      	cmp	r3, #3
 800df7a:	dc06      	bgt.n	800df8a <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
	case Command::AutoWaypoint:
		//TODO initialize auto controller
		/* not break */
	case Command::ControlPosition:
	case Command::ControlALT:
		ModulePositionController::setSignal(PC_reset);
 800df7c:	2008      	movs	r0, #8
 800df7e:	f7ff fd99 	bl	800dab4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		/* not break */
	case Command::ControlAttitude:
		ModuleAttitudeController::setSignal(AC_reset);
 800df82:	2002      	movs	r0, #2
 800df84:	f7ff fda8 	bl	800dad8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
		break;
 800df88:	bf00      	nop
	}
}
 800df8a:	bf00      	nop
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>:
  ~positionEstimatorModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU* pExtU)
 800df92:	b580      	push	{r7, lr}
 800df94:	b082      	sub	sp, #8
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	6039      	str	r1, [r7, #0]
  {
    rtU = *pExtU;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	2280      	movs	r2, #128	; 0x80
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f01d fd05 	bl	802b9b8 <memcpy>
  }
 800dfae:	bf00      	nop
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const positionEstimatorModelClass::ExtY & getExternalOutputs() const
 800dfb6:	b480      	push	{r7}
 800dfb8:	b083      	sub	sp, #12
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
  {
    return rtY;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
  }
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 800dfd0:	b590      	push	{r4, r7, lr}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
 800dfda:	2300      	movs	r3, #0
 800dfdc:	73fb      	strb	r3, [r7, #15]
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 800dfea:	42a2      	cmp	r2, r4
 800dfec:	bf08      	it	eq
 800dfee:	4299      	cmpeq	r1, r3
 800dff0:	d001      	beq.n	800dff6 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE+0x26>
 800dff2:	2301      	movs	r3, #1
 800dff4:	73fb      	strb	r3, [r7, #15]
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4610      	mov	r0, r2
 800dffc:	3348      	adds	r3, #72	; 0x48
 800dffe:	2248      	movs	r2, #72	; 0x48
 800e000:	4619      	mov	r1, r3
 800e002:	f01d fcd9 	bl	802b9b8 <memcpy>
 800e006:	7bfb      	ldrb	r3, [r7, #15]
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd90      	pop	{r4, r7, pc}

0800e010 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 800e010:	b4b0      	push	{r4, r5, r7}
 800e012:	b085      	sub	sp, #20
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
 800e01a:	2300      	movs	r3, #0
 800e01c:	73fb      	strb	r3, [r7, #15]
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	e9d3 1200 	ldrd	r1, r2, [r3]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800e02a:	42a2      	cmp	r2, r4
 800e02c:	bf08      	it	eq
 800e02e:	4299      	cmpeq	r1, r3
 800e030:	d001      	beq.n	800e036 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE+0x26>
 800e032:	2301      	movs	r3, #1
 800e034:	73fb      	strb	r3, [r7, #15]
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4615      	mov	r5, r2
 800e03c:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800e040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e044:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e048:	e885 0003 	stmia.w	r5, {r0, r1}
 800e04c:	7bfb      	ldrb	r3, [r7, #15]
 800e04e:	4618      	mov	r0, r3
 800e050:	3714      	adds	r7, #20
 800e052:	46bd      	mov	sp, r7
 800e054:	bcb0      	pop	{r4, r5, r7}
 800e056:	4770      	bx	lr

0800e058 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 800e058:	b4b0      	push	{r4, r5, r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
 800e062:	2300      	movs	r3, #0
 800e064:	73fb      	strb	r3, [r7, #15]
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	e9d3 1200 	ldrd	r1, r2, [r3]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e072:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e076:	42a2      	cmp	r2, r4
 800e078:	bf08      	it	eq
 800e07a:	4299      	cmpeq	r1, r3
 800e07c:	d001      	beq.n	800e082 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x2a>
 800e07e:	2301      	movs	r3, #1
 800e080:	73fb      	strb	r3, [r7, #15]
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4615      	mov	r5, r2
 800e088:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800e08c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e08e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e090:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e094:	e885 0003 	stmia.w	r5, {r0, r1}
 800e098:	7bfb      	ldrb	r3, [r7, #15]
 800e09a:	4618      	mov	r0, r3
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bcb0      	pop	{r4, r5, r7}
 800e0a2:	4770      	bx	lr

0800e0a4 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	683a      	ldr	r2, [r7, #0]
 800e0b2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e0b6:	4611      	mov	r1, r2
 800e0b8:	2248      	movs	r2, #72	; 0x48
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f01d fc7c 	bl	802b9b8 <memcpy>
 800e0c0:	bf00      	nop
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800e0c8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800e0cc:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800e0ce:	4b0e      	ldr	r3, [pc, #56]	; (800e108 <_ZL11microsecondv+0x40>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	f04f 0200 	mov.w	r2, #0
 800e0d8:	f04f 0b00 	mov.w	fp, #0
 800e0dc:	f04f 0c00 	mov.w	ip, #0
 800e0e0:	468c      	mov	ip, r1
 800e0e2:	f04f 0b00 	mov.w	fp, #0
 800e0e6:	4a09      	ldr	r2, [pc, #36]	; (800e10c <_ZL11microsecondv+0x44>)
 800e0e8:	6812      	ldr	r2, [r2, #0]
 800e0ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e0ec:	4611      	mov	r1, r2
 800e0ee:	f04f 0200 	mov.w	r2, #0
 800e0f2:	ea4b 0301 	orr.w	r3, fp, r1
 800e0f6:	ea4c 0402 	orr.w	r4, ip, r2
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	46bd      	mov	sp, r7
 800e100:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop
 800e108:	24000a44 	.word	0x24000a44
 800e10c:	2400c62c 	.word	0x2400c62c

0800e110 <_ZN2FC9ModuleINSC1Ev>:
#include "Utils/Constant.h"

namespace FC {


ModuleINS::ModuleINS()
 800e110:	b590      	push	{r4, r7, lr}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
	: refLat(0)
	, refLon(0)
	, refAlt(0)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fc ff5a 	bl	800afd4 <_ZN27positionEstimatorModelClassC1Ev>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f603 6208 	addw	r2, r3, #3592	; 0xe08
 800e126:	f04f 0300 	mov.w	r3, #0
 800e12a:	f04f 0400 	mov.w	r4, #0
 800e12e:	e9c2 3400 	strd	r3, r4, [r2]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f503 6261 	add.w	r2, r3, #3600	; 0xe10
 800e138:	f04f 0300 	mov.w	r3, #0
 800e13c:	f04f 0400 	mov.w	r4, #0
 800e140:	e9c2 3400 	strd	r3, r4, [r2]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f603 6318 	addw	r3, r3, #3608	; 0xe18
 800e14a:	f04f 0200 	mov.w	r2, #0
 800e14e:	601a      	str	r2, [r3, #0]
{}
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4618      	mov	r0, r3
 800e154:	370c      	adds	r7, #12
 800e156:	46bd      	mov	sp, r7
 800e158:	bd90      	pop	{r4, r7, pc}
 800e15a:	0000      	movs	r0, r0
 800e15c:	0000      	movs	r0, r0
	...

0800e160 <_ZN2FC9ModuleINS7onestepEv>:

void ModuleINS::onestep(){
 800e160:	b590      	push	{r4, r7, lr}
 800e162:	b0b5      	sub	sp, #212	; 0xd4
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
	ExtU input;

	if(msgBus.getNedAccel(&nedAccelSub)){
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 800e16e:	4619      	mov	r1, r3
 800e170:	487b      	ldr	r0, [pc, #492]	; (800e360 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800e172:	f7ff ff71 	bl	800e058 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d024      	beq.n	800e1c6 <_ZN2FC9ModuleINS7onestepEv+0x66>
		input.AhrsFlag = true;
 800e17c:	f04f 0300 	mov.w	r3, #0
 800e180:	4c78      	ldr	r4, [pc, #480]	; (800e364 <_ZN2FC9ModuleINS7onestepEv+0x204>)
 800e182:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		input.ax = nedAccelSub.xyz[0];
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 800e18c:	edd3 7a00 	vldr	s15, [r3]
 800e190:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e194:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
		input.ay = nedAccelSub.xyz[1];
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f603 5354 	addw	r3, r3, #3412	; 0xd54
 800e19e:	edd3 7a00 	vldr	s15, [r3]
 800e1a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e1a6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		input.az = nedAccelSub.xyz[2] - FC_GRAVITY_ACCEERATION;		/* subtract gravity */
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f603 5358 	addw	r3, r3, #3416	; 0xd58
 800e1b0:	edd3 7a00 	vldr	s15, [r3]
 800e1b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e1b8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e358 <_ZN2FC9ModuleINS7onestepEv+0x1f8>
 800e1bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e1c0:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
 800e1c4:	e005      	b.n	800e1d2 <_ZN2FC9ModuleINS7onestepEv+0x72>
	}
	else input.AhrsFlag = false;
 800e1c6:	f04f 0300 	mov.w	r3, #0
 800e1ca:	f04f 0400 	mov.w	r4, #0
 800e1ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	if(msgBus.getGPS(&gpsSub)){
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f503 6356 	add.w	r3, r3, #3424	; 0xd60
 800e1d8:	4619      	mov	r1, r3
 800e1da:	4861      	ldr	r0, [pc, #388]	; (800e360 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800e1dc:	f7ff fef8 	bl	800dfd0 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d006      	beq.n	800e1f4 <_ZN2FC9ModuleINS7onestepEv+0x94>
		input.GpsFlag = false;
 800e1e6:	f04f 0300 	mov.w	r3, #0
 800e1ea:	f04f 0400 	mov.w	r4, #0
 800e1ee:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 800e1f2:	e005      	b.n	800e200 <_ZN2FC9ModuleINS7onestepEv+0xa0>
	}
	else input.GpsFlag = false;
 800e1f4:	f04f 0300 	mov.w	r3, #0
 800e1f8:	f04f 0400 	mov.w	r4, #0
 800e1fc:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	if(msgBus.getBarometer(&baroSub)){
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f603 53a8 	addw	r3, r3, #3496	; 0xda8
 800e206:	4619      	mov	r1, r3
 800e208:	4855      	ldr	r0, [pc, #340]	; (800e360 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800e20a:	f7ff ff01 	bl	800e010 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00e      	beq.n	800e232 <_ZN2FC9ModuleINS7onestepEv+0xd2>
		input.BaroFlag = true;
 800e214:	f04f 0300 	mov.w	r3, #0
 800e218:	4c52      	ldr	r4, [pc, #328]	; (800e364 <_ZN2FC9ModuleINS7onestepEv+0x204>)
 800e21a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		input.baroZ = baroSub.altitude;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
 800e224:	edd3 7a00 	vldr	s15, [r3]
 800e228:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e22c:	ed87 7b2a 	vstr	d7, [r7, #168]	; 0xa8
 800e230:	e005      	b.n	800e23e <_ZN2FC9ModuleINS7onestepEv+0xde>
	}
	else input.BaroFlag = false;
 800e232:	f04f 0300 	mov.w	r3, #0
 800e236:	f04f 0400 	mov.w	r4, #0
 800e23a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0

	setExternalInputs(&input);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e244:	4611      	mov	r1, r2
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff fea3 	bl	800df92 <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>
	step();
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4618      	mov	r0, r3
 800e250:	f7f8 fd12 	bl	8006c78 <_ZN27positionEstimatorModelClass4stepEv>
	ExtY output = getExternalOutputs();
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	4618      	mov	r0, r3
 800e258:	f7ff fead 	bl	800dfb6 <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>
 800e25c:	4602      	mov	r2, r0
 800e25e:	f107 0308 	add.w	r3, r7, #8
 800e262:	4611      	mov	r1, r2
 800e264:	2248      	movs	r2, #72	; 0x48
 800e266:	4618      	mov	r0, r3
 800e268:	f01d fba6 	bl	802b9b8 <memcpy>


	localPositionPub.timestamp = microsecond();
 800e26c:	f7ff ff2c 	bl	800e0c8 <_ZL11microsecondv>
 800e270:	4603      	mov	r3, r0
 800e272:	460c      	mov	r4, r1
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	f502 625c 	add.w	r2, r2, #3520	; 0xdc0
 800e27a:	e9c2 3400 	strd	r3, r4, [r2]
	localPositionPub.ax = (float)output.estiAX;
 800e27e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800e282:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f503 635e 	add.w	r3, r3, #3552	; 0xde0
 800e28c:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.ay = (float)output.estiAY;
 800e290:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800e294:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f603 53e4 	addw	r3, r3, #3556	; 0xde4
 800e29e:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.az = (float)output.estiAZ;
 800e2a2:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800e2a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f603 53e8 	addw	r3, r3, #3560	; 0xde8
 800e2b0:	edc3 7a00 	vstr	s15, [r3]

	localPositionPub.vx = (float)output.estiVX;
 800e2b4:	ed97 7b08 	vldr	d7, [r7, #32]
 800e2b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 800e2c2:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.vy = (float)output.estiVY;
 800e2c6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800e2ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 800e2d4:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.vz = (float)output.estiVZ;
 800e2d8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800e2dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800e2e6:	edc3 7a00 	vstr	s15, [r3]

	localPositionPub.x = (float)output.estiX;
 800e2ea:	ed97 7b02 	vldr	d7, [r7, #8]
 800e2ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 800e2f8:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.y = (float)output.estiY;
 800e2fc:	ed97 7b04 	vldr	d7, [r7, #16]
 800e300:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f603 53cc 	addw	r3, r3, #3532	; 0xdcc
 800e30a:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.z = (float)output.estiZ;
 800e30e:	ed97 7b06 	vldr	d7, [r7, #24]
 800e312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 800e31c:	edc3 7a00 	vstr	s15, [r3]

	msgBus.getAttitude(&attitudeSub);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800e326:	4619      	mov	r1, r3
 800e328:	480d      	ldr	r0, [pc, #52]	; (800e360 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800e32a:	f7ff f82d 	bl	800d388 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	localPositionPub.yaw = attitudeSub.yaw;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f603 53ec 	addw	r3, r3, #3564	; 0xdec
 800e33c:	601a      	str	r2, [r3, #0]

	msgBus.setLocalPosition(localPositionPub);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 800e344:	4619      	mov	r1, r3
 800e346:	4806      	ldr	r0, [pc, #24]	; (800e360 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800e348:	f7ff feac 	bl	800e0a4 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>
}
 800e34c:	bf00      	nop
 800e34e:	37d4      	adds	r7, #212	; 0xd4
 800e350:	46bd      	mov	sp, r7
 800e352:	bd90      	pop	{r4, r7, pc}
 800e354:	f3af 8000 	nop.w
 800e358:	3a92a305 	.word	0x3a92a305
 800e35c:	40239d01 	.word	0x40239d01
 800e360:	24000a50 	.word	0x24000a50
 800e364:	3ff00000 	.word	0x3ff00000

0800e368 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	ed87 0a01 	vstr	s0, [r7, #4]
 800e372:	ed97 0a01 	vldr	s0, [r7, #4]
 800e376:	f01a fc03 	bl	8028b80 <cosf>
 800e37a:	eef0 7a40 	vmov.f32	s15, s0
 800e37e:	eeb0 0a67 	vmov.f32	s0, s15
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	ed87 0a01 	vstr	s0, [r7, #4]
 800e392:	ed97 0a01 	vldr	s0, [r7, #4]
 800e396:	f01a fc33 	bl	8028c00 <sinf>
 800e39a:	eef0 7a40 	vmov.f32	s15, s0
 800e39e:	eeb0 0a67 	vmov.f32	s0, s15
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <_ZN25positionControlModelClass17setExternalInputsEPK22ExtU_positionControl_T>:
  void setBlockParameters(const P_positionControl_T *ppositionControl_P);

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_positionControl_T* pExtU_positionControl_T)
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  {
    positionControl_U = *pExtU_positionControl_T;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	683a      	ldr	r2, [r7, #0]
 800e3b6:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800e3ba:	4611      	mov	r1, r2
 800e3bc:	2258      	movs	r2, #88	; 0x58
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f01d fafa 	bl	802b9b8 <memcpy>
  }
 800e3c4:	bf00      	nop
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <_ZNK25positionControlModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const ExtY_positionControl_T & getExternalOutputs() const
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  {
    return positionControl_Y;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f503 7360 	add.w	r3, r3, #896	; 0x380
  }
 800e3da:	4618      	mov	r0, r3
 800e3dc:	370c      	adds	r7, #12
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr

0800e3e6 <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 800e3e6:	b4b0      	push	{r4, r5, r7}
 800e3e8:	b083      	sub	sp, #12
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
 800e3ee:	6039      	str	r1, [r7, #0]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	683a      	ldr	r2, [r7, #0]
 800e3f4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800e3f8:	4615      	mov	r5, r2
 800e3fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e402:	e884 0003 	stmia.w	r4, {r0, r1}
 800e406:	bf00      	nop
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bcb0      	pop	{r4, r5, r7}
 800e40e:	4770      	bx	lr

0800e410 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 800e410:	b590      	push	{r4, r7, lr}
 800e412:	b085      	sub	sp, #20
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
 800e41a:	2300      	movs	r3, #0
 800e41c:	73fb      	strb	r3, [r7, #15]
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	e9d3 1200 	ldrd	r1, r2, [r3]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e42a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e42e:	42a2      	cmp	r2, r4
 800e430:	bf08      	it	eq
 800e432:	4299      	cmpeq	r1, r3
 800e434:	d001      	beq.n	800e43a <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE+0x2a>
 800e436:	2301      	movs	r3, #1
 800e438:	73fb      	strb	r3, [r7, #15]
 800e43a:	683a      	ldr	r2, [r7, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4610      	mov	r0, r2
 800e440:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e444:	2248      	movs	r2, #72	; 0x48
 800e446:	4619      	mov	r1, r3
 800e448:	f01d fab6 	bl	802b9b8 <memcpy>
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
 800e44e:	4618      	mov	r0, r3
 800e450:	3714      	adds	r7, #20
 800e452:	46bd      	mov	sp, r7
 800e454:	bd90      	pop	{r4, r7, pc}
	...

0800e458 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800e458:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800e45c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800e45e:	4b0e      	ldr	r3, [pc, #56]	; (800e498 <_ZL11microsecondv+0x40>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4619      	mov	r1, r3
 800e464:	f04f 0200 	mov.w	r2, #0
 800e468:	f04f 0b00 	mov.w	fp, #0
 800e46c:	f04f 0c00 	mov.w	ip, #0
 800e470:	468c      	mov	ip, r1
 800e472:	f04f 0b00 	mov.w	fp, #0
 800e476:	4a09      	ldr	r2, [pc, #36]	; (800e49c <_ZL11microsecondv+0x44>)
 800e478:	6812      	ldr	r2, [r2, #0]
 800e47a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e47c:	4611      	mov	r1, r2
 800e47e:	f04f 0200 	mov.w	r2, #0
 800e482:	ea4b 0301 	orr.w	r3, fp, r1
 800e486:	ea4c 0402 	orr.w	r4, ip, r2
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	4621      	mov	r1, r4
 800e48e:	46bd      	mov	sp, r7
 800e490:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop
 800e498:	24000a48 	.word	0x24000a48
 800e49c:	2400c62c 	.word	0x2400c62c

0800e4a0 <_ZN2FCL3mapEtttff>:
static float map(uint16_t value, uint16_t in_min, uint16_t in_max, float out_min, float out_max){
 800e4a0:	b480      	push	{r7}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	ed87 0a01 	vstr	s0, [r7, #4]
 800e4ac:	edc7 0a00 	vstr	s1, [r7]
 800e4b0:	81fb      	strh	r3, [r7, #14]
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	81bb      	strh	r3, [r7, #12]
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	817b      	strh	r3, [r7, #10]
	return (float)(value - in_min)*(out_max - out_min) / (in_max - in_min) + out_min;
 800e4ba:	89fa      	ldrh	r2, [r7, #14]
 800e4bc:	89bb      	ldrh	r3, [r7, #12]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	ee07 3a90 	vmov	s15, r3
 800e4c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e4c8:	edd7 6a00 	vldr	s13, [r7]
 800e4cc:	edd7 7a01 	vldr	s15, [r7, #4]
 800e4d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e4d4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800e4d8:	897a      	ldrh	r2, [r7, #10]
 800e4da:	89bb      	ldrh	r3, [r7, #12]
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	ee07 3a90 	vmov	s15, r3
 800e4e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800e4ee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800e4f2:	eeb0 0a67 	vmov.f32	s0, s15
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <_ZN2FCL15radianThresholdEf>:

static float radianThreshold(float radian){
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	ed87 0a01 	vstr	s0, [r7, #4]
	while(radian >= FC_PI){
 800e50a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e50e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e512:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 800e580 <_ZN2FCL15radianThresholdEf+0x80>
 800e516:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e51e:	da00      	bge.n	800e522 <_ZN2FCL15radianThresholdEf+0x22>
 800e520:	e00c      	b.n	800e53c <_ZN2FCL15radianThresholdEf+0x3c>
		radian -= FC_2PI;
 800e522:	edd7 7a01 	vldr	s15, [r7, #4]
 800e526:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e52a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800e588 <_ZN2FCL15radianThresholdEf+0x88>
 800e52e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e532:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e536:	edc7 7a01 	vstr	s15, [r7, #4]
	while(radian >= FC_PI){
 800e53a:	e7e6      	b.n	800e50a <_ZN2FCL15radianThresholdEf+0xa>
	}
	while(radian <= -FC_PI){
 800e53c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e544:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800e590 <_ZN2FCL15radianThresholdEf+0x90>
 800e548:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e550:	d80c      	bhi.n	800e56c <_ZN2FCL15radianThresholdEf+0x6c>
		radian += FC_2PI;
 800e552:	edd7 7a01 	vldr	s15, [r7, #4]
 800e556:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e55a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 800e588 <_ZN2FCL15radianThresholdEf+0x88>
 800e55e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e562:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e566:	edc7 7a01 	vstr	s15, [r7, #4]
	while(radian <= -FC_PI){
 800e56a:	e7e7      	b.n	800e53c <_ZN2FCL15radianThresholdEf+0x3c>
	}
	return radian;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	ee07 3a90 	vmov	s15, r3
}
 800e572:	eeb0 0a67 	vmov.f32	s0, s15
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr
 800e580:	54442d18 	.word	0x54442d18
 800e584:	400921fb 	.word	0x400921fb
 800e588:	54442d18 	.word	0x54442d18
 800e58c:	401921fb 	.word	0x401921fb
 800e590:	54442d18 	.word	0x54442d18
 800e594:	c00921fb 	.word	0xc00921fb

0800e598 <_ZN2FC24ModulePositionControllerC1Ev>:
#include "Utils/function.h"
#include "Utils/Constant.h"
#include "printf.h"
namespace FC {

ModulePositionController::ModulePositionController() {
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7f7 f9e0 	bl	8005968 <_ZN25positionControlModelClassC1Ev>
	// TODO Auto-generated constructor stub
}
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3708      	adds	r7, #8
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
	...

0800e5b4 <_ZN2FC24ModulePositionController7oneStepEv>:

void ModulePositionController::oneStep(){
 800e5b4:	b590      	push	{r4, r7, lr}
 800e5b6:	b09d      	sub	sp, #116	; 0x74
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	4878      	ldr	r0, [pc, #480]	; (800e7a8 <_ZN2FC24ModulePositionController7oneStepEv+0x1f4>)
 800e5c6:	f7fe ff05 	bl	800d3d4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	msgBus.getLocalPosition(&localPositionSub);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	4875      	ldr	r0, [pc, #468]	; (800e7a8 <_ZN2FC24ModulePositionController7oneStepEv+0x1f4>)
 800e5d4:	f7ff ff1c 	bl	800e410 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>

	if(modeFlagSub.flightMode == Command::ControlPosition || modeFlagSub.flightMode == Command::ControlALT){
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	d004      	beq.n	800e5ec <_ZN2FC24ModulePositionController7oneStepEv+0x38>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d103      	bne.n	800e5f4 <_ZN2FC24ModulePositionController7oneStepEv+0x40>
		setFromRC();
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 f8dd 	bl	800e7ac <_ZN2FC24ModulePositionController9setFromRCEv>
 800e5f2:	e002      	b.n	800e5fa <_ZN2FC24ModulePositionController7oneStepEv+0x46>
	}
	else{
		setFromAutoController();
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fa2d 	bl	800ea54 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>
	}

	ExtU_positionControl_T input;

	input.set_x = targetX;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800e600:	edd3 7a00 	vldr	s15, [r3]
 800e604:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e608:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	input.set_y = targetY;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f203 4334 	addw	r3, r3, #1076	; 0x434
 800e612:	edd3 7a00 	vldr	s15, [r3]
 800e616:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e61a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	input.set_z = -targetZ;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800e624:	edd3 7a00 	vldr	s15, [r3]
 800e628:	eef1 7a67 	vneg.f32	s15, s15
 800e62c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e630:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	input.set_yaw = targetYaw;;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800e63a:	edd3 7a00 	vldr	s15, [r3]
 800e63e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e642:	ed87 7b08 	vstr	d7, [r7, #32]

	input.estim_dx = localPositionSub.vx;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	edd3 7ae9 	vldr	s15, [r3, #932]	; 0x3a4
 800e64c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e650:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	input.estim_dy = localPositionSub.vy;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	edd3 7aea 	vldr	s15, [r3, #936]	; 0x3a8
 800e65a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e65e:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
	input.estim_dz = localPositionSub.vz;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	edd3 7aeb 	vldr	s15, [r3, #940]	; 0x3ac
 800e668:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e66c:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	input.estim_x = localPositionSub.x;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	edd3 7ae6 	vldr	s15, [r3, #920]	; 0x398
 800e676:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e67a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	input.estim_y = localPositionSub.y;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	edd3 7ae7 	vldr	s15, [r3, #924]	; 0x39c
 800e684:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e688:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	input.estim_z = localPositionSub.z;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	edd3 7ae8 	vldr	s15, [r3, #928]	; 0x3a0
 800e692:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e696:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	input.estim_yaw = localPositionSub.yaw;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800e6a0:	61bb      	str	r3, [r7, #24]

	setExternalInputs(&input);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f107 0218 	add.w	r2, r7, #24
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fe7c 	bl	800e3a8 <_ZN25positionControlModelClass17setExternalInputsEPK22ExtU_positionControl_T>
	step();
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7f6 f820 	bl	80046f8 <_ZN25positionControlModelClass4stepEv>
	ExtY_positionControl_T output = getExternalOutputs();
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff fe86 	bl	800e3cc <_ZNK25positionControlModelClass18getExternalOutputsEv>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	f107 0408 	add.w	r4, r7, #8
 800e6c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	vehicleAttitudeSpPub.timestamp = microsecond();
 800e6cc:	f7ff fec4 	bl	800e458 <_ZL11microsecondv>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	460c      	mov	r4, r1
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	f502 6283 	add.w	r2, r2, #1048	; 0x418
 800e6da:	e9c2 3400 	strd	r3, r4, [r2]
	vehicleAttitudeSpPub.throttle = output.des_Thrust;
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800e6e6:	601a      	str	r2, [r3, #0]


	/* position control mode */
	if(modeFlagSub.flightMode == Command::ControlPosition){
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	d10f      	bne.n	800e712 <_ZN2FC24ModulePositionController7oneStepEv+0x15e>
		vehicleAttitudeSpPub.pitch = output.des_pitch;
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800e6fa:	601a      	str	r2, [r3, #0]
		vehicleAttitudeSpPub.roll = output.des_roll;
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800e704:	601a      	str	r2, [r3, #0]
		vehicleAttitudeSpPub.yawRate = output.des_yaw_rate;
 800e706:	693a      	ldr	r2, [r7, #16]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800e70e:	601a      	str	r2, [r3, #0]
 800e710:	e03e      	b.n	800e790 <_ZN2FC24ModulePositionController7oneStepEv+0x1dc>
	}
	/* alt hold mode */
	else {
		vehicleAttitudeSpPub.pitch = map(controllerSub.pitch, 1000, 2000, -1.0, 1.0);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 800e718:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e71c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e720:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e724:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e728:	4618      	mov	r0, r3
 800e72a:	f7ff feb9 	bl	800e4a0 <_ZN2FCL3mapEtttff>
 800e72e:	eef0 7a40 	vmov.f32	s15, s0
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800e738:	edc3 7a00 	vstr	s15, [r3]
		vehicleAttitudeSpPub.roll = map(controllerSub.roll, 1000, 2000, -1.0, 1.0);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 800e742:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e746:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e74a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e74e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff fea4 	bl	800e4a0 <_ZN2FCL3mapEtttff>
 800e758:	eef0 7a40 	vmov.f32	s15, s0
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800e762:	edc3 7a00 	vstr	s15, [r3]
		vehicleAttitudeSpPub.yawRate = map(controllerSub.yaw, 1000, 2000, -1.0, 1.0);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800e76c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e770:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e774:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e778:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7ff fe8f 	bl	800e4a0 <_ZN2FCL3mapEtttff>
 800e782:	eef0 7a40 	vmov.f32	s15, s0
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800e78c:	edc3 7a00 	vstr	s15, [r3]
	}
	msgBus.setVehicleAttitueSP(vehicleAttitudeSpPub);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800e796:	4619      	mov	r1, r3
 800e798:	4803      	ldr	r0, [pc, #12]	; (800e7a8 <_ZN2FC24ModulePositionController7oneStepEv+0x1f4>)
 800e79a:	f7ff fe24 	bl	800e3e6 <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>
}
 800e79e:	bf00      	nop
 800e7a0:	3774      	adds	r7, #116	; 0x74
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd90      	pop	{r4, r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	24000a50 	.word	0x24000a50

0800e7ac <_ZN2FC24ModulePositionController9setFromRCEv>:

void ModulePositionController::setFromRC(){
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	ed2d 8b02 	vpush	{d8}
 800e7b2:	b086      	sub	sp, #24
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
	static bool rollStickSet = false;
	static bool pitchStickSet = false;
	float roll;
	float pitch;

	msgBus.getController(&controllerSub);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e7be:	4619      	mov	r1, r3
 800e7c0:	489d      	ldr	r0, [pc, #628]	; (800ea38 <_ZN2FC24ModulePositionController9setFromRCEv+0x28c>)
 800e7c2:	f7fe fd9d 	bl	800d300 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

	if( 1500 - STICK_THRESHOLD < controllerSub.throttle && controllerSub.throttle < 1500 + STICK_THRESHOLD){
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800e7cc:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800e7d0:	d917      	bls.n	800e802 <_ZN2FC24ModulePositionController9setFromRCEv+0x56>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800e7d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e7dc:	d211      	bcs.n	800e802 <_ZN2FC24ModulePositionController9setFromRCEv+0x56>
		// set altitude
		if(!throtleStickSet){
 800e7de:	4b97      	ldr	r3, [pc, #604]	; (800ea3c <_ZN2FC24ModulePositionController9setFromRCEv+0x290>)
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	f083 0301 	eor.w	r3, r3, #1
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d027      	beq.n	800e83c <_ZN2FC24ModulePositionController9setFromRCEv+0x90>
			targetZ = localPositionSub.z;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800e7f8:	601a      	str	r2, [r3, #0]
			throtleStickSet = true;
 800e7fa:	4b90      	ldr	r3, [pc, #576]	; (800ea3c <_ZN2FC24ModulePositionController9setFromRCEv+0x290>)
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	701a      	strb	r2, [r3, #0]
		if(!throtleStickSet){
 800e800:	e01c      	b.n	800e83c <_ZN2FC24ModulePositionController9setFromRCEv+0x90>
		}
	}
	else{
		targetZ = localPositionSub.z - map(controllerSub.throttle, 1000, 2000, -MAX_VELTICAL, MAX_VELTICAL);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	ed93 8ae8 	vldr	s16, [r3, #928]	; 0x3a0
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800e80e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e812:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e816:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e81a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e81e:	4618      	mov	r0, r3
 800e820:	f7ff fe3e 	bl	800e4a0 <_ZN2FCL3mapEtttff>
 800e824:	eef0 7a40 	vmov.f32	s15, s0
 800e828:	ee78 7a67 	vsub.f32	s15, s16, s15
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800e832:	edc3 7a00 	vstr	s15, [r3]
		throtleStickSet = false;
 800e836:	4b81      	ldr	r3, [pc, #516]	; (800ea3c <_ZN2FC24ModulePositionController9setFromRCEv+0x290>)
 800e838:	2200      	movs	r2, #0
 800e83a:	701a      	strb	r2, [r3, #0]
	}

	if( 1500 - STICK_THRESHOLD < controllerSub.yaw && controllerSub.yaw < 1500 + STICK_THRESHOLD){
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800e842:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800e846:	d917      	bls.n	800e878 <_ZN2FC24ModulePositionController9setFromRCEv+0xcc>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800e84e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e852:	d211      	bcs.n	800e878 <_ZN2FC24ModulePositionController9setFromRCEv+0xcc>
		// set altitude
		if(!yawStickSet){
 800e854:	4b7a      	ldr	r3, [pc, #488]	; (800ea40 <_ZN2FC24ModulePositionController9setFromRCEv+0x294>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	f083 0301 	eor.w	r3, r3, #1
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d037      	beq.n	800e8d2 <_ZN2FC24ModulePositionController9setFromRCEv+0x126>
			targetYaw = localPositionSub.yaw;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800e86e:	601a      	str	r2, [r3, #0]
			yawStickSet = true;
 800e870:	4b73      	ldr	r3, [pc, #460]	; (800ea40 <_ZN2FC24ModulePositionController9setFromRCEv+0x294>)
 800e872:	2201      	movs	r2, #1
 800e874:	701a      	strb	r2, [r3, #0]
		if(!yawStickSet){
 800e876:	e02c      	b.n	800e8d2 <_ZN2FC24ModulePositionController9setFromRCEv+0x126>
		}
	}
	else{
		targetYaw = localPositionSub.yaw + map(controllerSub.yaw, 1000, 2000, -MAX_YAW, MAX_YAW);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	ed93 8aef 	vldr	s16, [r3, #956]	; 0x3bc
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800e884:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ea44 <_ZN2FC24ModulePositionController9setFromRCEv+0x298>
 800e888:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800ea48 <_ZN2FC24ModulePositionController9setFromRCEv+0x29c>
 800e88c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e890:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff fe03 	bl	800e4a0 <_ZN2FCL3mapEtttff>
 800e89a:	eef0 7a40 	vmov.f32	s15, s0
 800e89e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800e8a8:	edc3 7a00 	vstr	s15, [r3]
		targetYaw = radianThreshold(targetYaw);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800e8b2:	edd3 7a00 	vldr	s15, [r3]
 800e8b6:	eeb0 0a67 	vmov.f32	s0, s15
 800e8ba:	f7ff fe21 	bl	800e500 <_ZN2FCL15radianThresholdEf>
 800e8be:	eef0 7a40 	vmov.f32	s15, s0
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800e8c8:	edc3 7a00 	vstr	s15, [r3]
		yawStickSet = false;
 800e8cc:	4b5c      	ldr	r3, [pc, #368]	; (800ea40 <_ZN2FC24ModulePositionController9setFromRCEv+0x294>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	701a      	strb	r2, [r3, #0]
	}

	if(1500 - STICK_THRESHOLD < controllerSub.roll && controllerSub.roll < 1500 + STICK_THRESHOLD){
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 800e8d8:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800e8dc:	d913      	bls.n	800e906 <_ZN2FC24ModulePositionController9setFromRCEv+0x15a>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 800e8e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e8e8:	d20d      	bcs.n	800e906 <_ZN2FC24ModulePositionController9setFromRCEv+0x15a>
		if(!rollStickSet){
 800e8ea:	4b58      	ldr	r3, [pc, #352]	; (800ea4c <_ZN2FC24ModulePositionController9setFromRCEv+0x2a0>)
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	f083 0301 	eor.w	r3, r3, #1
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d019      	beq.n	800e92c <_ZN2FC24ModulePositionController9setFromRCEv+0x180>
			roll = 0;
 800e8f8:	f04f 0300 	mov.w	r3, #0
 800e8fc:	617b      	str	r3, [r7, #20]
			rollStickSet = true;
 800e8fe:	4b53      	ldr	r3, [pc, #332]	; (800ea4c <_ZN2FC24ModulePositionController9setFromRCEv+0x2a0>)
 800e900:	2201      	movs	r2, #1
 800e902:	701a      	strb	r2, [r3, #0]
		if(!rollStickSet){
 800e904:	e012      	b.n	800e92c <_ZN2FC24ModulePositionController9setFromRCEv+0x180>
		}
	}
	else{
		roll = map(controllerSub.roll, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* roll */
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 800e90c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e910:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e914:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e918:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7ff fdbf 	bl	800e4a0 <_ZN2FCL3mapEtttff>
 800e922:	ed87 0a05 	vstr	s0, [r7, #20]
		rollStickSet = false;
 800e926:	4b49      	ldr	r3, [pc, #292]	; (800ea4c <_ZN2FC24ModulePositionController9setFromRCEv+0x2a0>)
 800e928:	2200      	movs	r2, #0
 800e92a:	701a      	strb	r2, [r3, #0]
	}
	if(1500 - STICK_THRESHOLD < controllerSub.pitch && controllerSub.pitch < 1500 + STICK_THRESHOLD){
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 800e932:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800e936:	d913      	bls.n	800e960 <_ZN2FC24ModulePositionController9setFromRCEv+0x1b4>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 800e93e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e942:	d20d      	bcs.n	800e960 <_ZN2FC24ModulePositionController9setFromRCEv+0x1b4>
		if(!pitchStickSet){
 800e944:	4b42      	ldr	r3, [pc, #264]	; (800ea50 <_ZN2FC24ModulePositionController9setFromRCEv+0x2a4>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	f083 0301 	eor.w	r3, r3, #1
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d019      	beq.n	800e986 <_ZN2FC24ModulePositionController9setFromRCEv+0x1da>
			pitch = 0;
 800e952:	f04f 0300 	mov.w	r3, #0
 800e956:	613b      	str	r3, [r7, #16]
			pitchStickSet = true;
 800e958:	4b3d      	ldr	r3, [pc, #244]	; (800ea50 <_ZN2FC24ModulePositionController9setFromRCEv+0x2a4>)
 800e95a:	2201      	movs	r2, #1
 800e95c:	701a      	strb	r2, [r3, #0]
		if(!pitchStickSet){
 800e95e:	e012      	b.n	800e986 <_ZN2FC24ModulePositionController9setFromRCEv+0x1da>
		}
	}
	else{
		pitch = map(controllerSub.pitch, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* pitch */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 800e966:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e96a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e96e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e972:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e976:	4618      	mov	r0, r3
 800e978:	f7ff fd92 	bl	800e4a0 <_ZN2FCL3mapEtttff>
 800e97c:	ed87 0a04 	vstr	s0, [r7, #16]
		pitchStickSet = false;
 800e980:	4b33      	ldr	r3, [pc, #204]	; (800ea50 <_ZN2FC24ModulePositionController9setFromRCEv+0x2a4>)
 800e982:	2200      	movs	r2, #0
 800e984:	701a      	strb	r2, [r3, #0]
	}
//	float roll = map(controllerSub.roll, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* roll */
//	float pitch = map(controllerSub.pitch, 1000, 2000, -MAX_HORISION, MAX_HORISION);	/* pitch */
//	targetYaw = map(controllerSub.yaw, 1000, 2000, -MAX_YAW, MAX_YAW);

	if( !rollStickSet || !pitchStickSet){
 800e986:	4b31      	ldr	r3, [pc, #196]	; (800ea4c <_ZN2FC24ModulePositionController9setFromRCEv+0x2a0>)
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	f083 0301 	eor.w	r3, r3, #1
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	2b00      	cmp	r3, #0
 800e992:	d106      	bne.n	800e9a2 <_ZN2FC24ModulePositionController9setFromRCEv+0x1f6>
 800e994:	4b2e      	ldr	r3, [pc, #184]	; (800ea50 <_ZN2FC24ModulePositionController9setFromRCEv+0x2a4>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f083 0301 	eor.w	r3, r3, #1
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d043      	beq.n	800ea2a <_ZN2FC24ModulePositionController9setFromRCEv+0x27e>
		float cosYaw = cos(localPositionSub.yaw);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	edd3 7aef 	vldr	s15, [r3, #956]	; 0x3bc
 800e9a8:	eeb0 0a67 	vmov.f32	s0, s15
 800e9ac:	f7ff fcdc 	bl	800e368 <_ZSt3cosf>
 800e9b0:	ed87 0a03 	vstr	s0, [r7, #12]
		float sinYaw = sin(localPositionSub.yaw);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	edd3 7aef 	vldr	s15, [r3, #956]	; 0x3bc
 800e9ba:	eeb0 0a67 	vmov.f32	s0, s15
 800e9be:	f7ff fce3 	bl	800e388 <_ZSt3sinf>
 800e9c2:	ed87 0a02 	vstr	s0, [r7, #8]
		targetX = localPositionSub.x + pitch*cosYaw + -roll*sinYaw;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	ed93 7ae6 	vldr	s14, [r3, #920]	; 0x398
 800e9cc:	edd7 6a04 	vldr	s13, [r7, #16]
 800e9d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800e9d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e9dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800e9e0:	eef1 6a67 	vneg.f32	s13, s15
 800e9e4:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800e9f6:	edc3 7a00 	vstr	s15, [r3]
		targetY = localPositionSub.y + pitch*sinYaw + roll*cosYaw;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	ed93 7ae7 	vldr	s14, [r3, #924]	; 0x39c
 800ea00:	edd7 6a04 	vldr	s13, [r7, #16]
 800ea04:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea10:	edd7 6a05 	vldr	s13, [r7, #20]
 800ea14:	edd7 7a03 	vldr	s15, [r7, #12]
 800ea18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f203 4334 	addw	r3, r3, #1076	; 0x434
 800ea26:	edc3 7a00 	vstr	s15, [r3]
	}
//	targetZ += localPositionSub.z;
//	targetYaw += localPositionSub.yaw;
}
 800ea2a:	bf00      	nop
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	ecbd 8b02 	vpop	{d8}
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	24000a50 	.word	0x24000a50
 800ea3c:	24000a4c 	.word	0x24000a4c
 800ea40:	24000a4d 	.word	0x24000a4d
 800ea44:	3fc90fd8 	.word	0x3fc90fd8
 800ea48:	bfc90fd8 	.word	0xbfc90fd8
 800ea4c:	24000a4e 	.word	0x24000a4e
 800ea50:	24000a4f 	.word	0x24000a4f

0800ea54 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>:

void ModulePositionController::setFromAutoController(){
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
	//TODO add struct VehiclePositionSP, convert to target
}
 800ea5c:	bf00      	nop
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <_ZN2FC6MsgBusC1Ev>:
	MsgBus()
 800ea68:	b590      	push	{r4, r7, lr}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
		, health{0}
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	461a      	mov	r2, r3
 800ea74:	2300      	movs	r3, #0
 800ea76:	6013      	str	r3, [r2, #0]
 800ea78:	6053      	str	r3, [r2, #4]
 800ea7a:	6093      	str	r3, [r2, #8]
 800ea7c:	60d3      	str	r3, [r2, #12]
 800ea7e:	6113      	str	r3, [r2, #16]
 800ea80:	6153      	str	r3, [r2, #20]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	3318      	adds	r3, #24
 800ea86:	2200      	movs	r2, #0
 800ea88:	601a      	str	r2, [r3, #0]
 800ea8a:	605a      	str	r2, [r3, #4]
 800ea8c:	609a      	str	r2, [r3, #8]
 800ea8e:	60da      	str	r2, [r3, #12]
 800ea90:	611a      	str	r2, [r3, #16]
 800ea92:	615a      	str	r2, [r3, #20]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	3330      	adds	r3, #48	; 0x30
 800ea98:	2200      	movs	r2, #0
 800ea9a:	601a      	str	r2, [r3, #0]
 800ea9c:	605a      	str	r2, [r3, #4]
 800ea9e:	609a      	str	r2, [r3, #8]
 800eaa0:	60da      	str	r2, [r3, #12]
 800eaa2:	611a      	str	r2, [r3, #16]
 800eaa4:	615a      	str	r2, [r3, #20]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	3348      	adds	r3, #72	; 0x48
 800eaaa:	2248      	movs	r2, #72	; 0x48
 800eaac:	2100      	movs	r1, #0
 800eaae:	4618      	mov	r0, r3
 800eab0:	f01c ff8d 	bl	802b9ce <memset>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	3390      	adds	r3, #144	; 0x90
 800eab8:	2200      	movs	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	605a      	str	r2, [r3, #4]
 800eabe:	609a      	str	r2, [r3, #8]
 800eac0:	60da      	str	r2, [r3, #12]
 800eac2:	611a      	str	r2, [r3, #16]
 800eac4:	615a      	str	r2, [r3, #20]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	33a8      	adds	r3, #168	; 0xa8
 800eaca:	2200      	movs	r2, #0
 800eacc:	601a      	str	r2, [r3, #0]
 800eace:	605a      	str	r2, [r3, #4]
 800ead0:	609a      	str	r2, [r3, #8]
 800ead2:	60da      	str	r2, [r3, #12]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	33f0      	adds	r3, #240	; 0xf0
 800ead8:	2228      	movs	r2, #40	; 0x28
 800eada:	2100      	movs	r1, #0
 800eadc:	4618      	mov	r0, r3
 800eade:	f01c ff76 	bl	802b9ce <memset>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800eae8:	2200      	movs	r2, #0
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	605a      	str	r2, [r3, #4]
 800eaee:	609a      	str	r2, [r3, #8]
 800eaf0:	60da      	str	r2, [r3, #12]
 800eaf2:	611a      	str	r2, [r3, #16]
 800eaf4:	615a      	str	r2, [r3, #20]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800eafc:	f04f 0300 	mov.w	r3, #0
 800eb00:	f04f 0400 	mov.w	r4, #0
 800eb04:	e9c2 3400 	strd	r3, r4, [r2]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2209      	movs	r2, #9
 800eb0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800eb1e:	2220      	movs	r2, #32
 800eb20:	2100      	movs	r1, #0
 800eb22:	4618      	mov	r0, r3
 800eb24:	f01c ff53 	bl	802b9ce <memset>
	{}
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd90      	pop	{r4, r7, pc}
	...

0800eb34 <_Z41__static_initialization_and_destruction_0ii>:

namespace FC{

MsgBus msgBus;

}
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d107      	bne.n	800eb54 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d102      	bne.n	800eb54 <_Z41__static_initialization_and_destruction_0ii+0x20>
MsgBus msgBus;
 800eb4e:	4803      	ldr	r0, [pc, #12]	; (800eb5c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800eb50:	f7ff ff8a 	bl	800ea68 <_ZN2FC6MsgBusC1Ev>
}
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	24000a50 	.word	0x24000a50

0800eb60 <_GLOBAL__sub_I__ZN2FC6msgBusE>:
 800eb60:	b580      	push	{r7, lr}
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eb68:	2001      	movs	r0, #1
 800eb6a:	f7ff ffe3 	bl	800eb34 <_Z41__static_initialization_and_destruction_0ii>
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 800eb70:	b490      	push	{r4, r7}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	683a      	ldr	r2, [r7, #0]
 800eb7e:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 800eb82:	4613      	mov	r3, r2
 800eb84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eb8a:	bf00      	nop
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bc90      	pop	{r4, r7}
 800eb92:	4770      	bx	lr

0800eb94 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800eb94:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800eb98:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800eb9a:	4b0e      	ldr	r3, [pc, #56]	; (800ebd4 <_ZL11microsecondv+0x40>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	f04f 0200 	mov.w	r2, #0
 800eba4:	f04f 0b00 	mov.w	fp, #0
 800eba8:	f04f 0c00 	mov.w	ip, #0
 800ebac:	468c      	mov	ip, r1
 800ebae:	f04f 0b00 	mov.w	fp, #0
 800ebb2:	4a09      	ldr	r2, [pc, #36]	; (800ebd8 <_ZL11microsecondv+0x44>)
 800ebb4:	6812      	ldr	r2, [r2, #0]
 800ebb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ebb8:	4611      	mov	r1, r2
 800ebba:	f04f 0200 	mov.w	r2, #0
 800ebbe:	ea4b 0301 	orr.w	r3, fp, r1
 800ebc2:	ea4c 0402 	orr.w	r4, ip, r2
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	4621      	mov	r1, r4
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	24000e00 	.word	0x24000e00
 800ebd8:	2400c62c 	.word	0x2400c62c

0800ebdc <_ZL11millisecondv>:

static __inline uint32_t millisecond(){
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800ebe0:	f004 fa3a 	bl	8013058 <HAL_GetTick>
 800ebe4:	4603      	mov	r3, r0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <_ZN2FC2RCC1Ev>:

#define ARMING_THRESHOLD 1500

class RC : public Freq<RC>{
public:
	RC() : start(false) {}
 800ebea:	b480      	push	{r7}
 800ebec:	b083      	sub	sp, #12
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	761a      	strb	r2, [r3, #24]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	370c      	adds	r7, #12
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr
	...

0800ec08 <_ZN2FC2RC5setRCEtttttt>:
RC rc;

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode)
{
 800ec08:	b590      	push	{r4, r7, lr}
 800ec0a:	b08b      	sub	sp, #44	; 0x2c
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	4608      	mov	r0, r1
 800ec12:	4611      	mov	r1, r2
 800ec14:	461a      	mov	r2, r3
 800ec16:	4603      	mov	r3, r0
 800ec18:	817b      	strh	r3, [r7, #10]
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	813b      	strh	r3, [r7, #8]
 800ec1e:	4613      	mov	r3, r2
 800ec20:	80fb      	strh	r3, [r7, #6]
	if(start == false && throttle > MOTOR_CALIBRATION_THROTLE){
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	7e1b      	ldrb	r3, [r3, #24]
 800ec26:	f083 0301 	eor.w	r3, r3, #1
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d007      	beq.n	800ec40 <_ZN2FC2RC5setRCEtttttt+0x38>
 800ec30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ec32:	f240 729e 	movw	r2, #1950	; 0x79e
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d902      	bls.n	800ec40 <_ZN2FC2RC5setRCEtttttt+0x38>
		ModuleCommander::sendCommand(Command::MotorCalibration);
 800ec3a:	200a      	movs	r0, #10
 800ec3c:	f7fe ffc6 	bl	800dbcc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
	}
	start = true;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2201      	movs	r2, #1
 800ec44:	761a      	strb	r2, [r3, #24]

	/* cotnroller publish */
	this->controllerPub.timestamp = microsecond();
 800ec46:	f7ff ffa5 	bl	800eb94 <_ZL11microsecondv>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	e9c2 3400 	strd	r3, r4, [r2]
	this->controllerPub.roll = roll;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	897a      	ldrh	r2, [r7, #10]
 800ec58:	811a      	strh	r2, [r3, #8]
	this->controllerPub.pitch = pitch;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	893a      	ldrh	r2, [r7, #8]
 800ec5e:	815a      	strh	r2, [r3, #10]
	this->controllerPub.yaw = yaw;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	88fa      	ldrh	r2, [r7, #6]
 800ec64:	819a      	strh	r2, [r3, #12]
	this->controllerPub.throttle = throttle;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ec6a:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controllerPub);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	484e      	ldr	r0, [pc, #312]	; (800edac <_ZN2FC2RC5setRCEtttttt+0x1a4>)
 800ec72:	f7ff ff7d 	bl	800eb70 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>

	/* arming */
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);							/* current arm mode */
 800ec76:	f107 0310 	add.w	r3, r7, #16
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	484b      	ldr	r0, [pc, #300]	; (800edac <_ZN2FC2RC5setRCEtttttt+0x1a4>)
 800ec7e:	f7fe fba9 	bl	800d3d4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	Command rcvArmFlag = Command::DisArm;						/* request arm mode */
 800ec82:	2309      	movs	r3, #9
 800ec84:	627b      	str	r3, [r7, #36]	; 0x24
	if( armming > ARMING_THRESHOLD ) rcvArmFlag = Command::Arm;
 800ec86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec88:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d901      	bls.n	800ec94 <_ZN2FC2RC5setRCEtttttt+0x8c>
 800ec90:	2308      	movs	r3, #8
 800ec92:	627b      	str	r3, [r7, #36]	; 0x24
	if(modeFlag.armMode != rcvArmFlag && millisecond()-lastArmReq > 500){
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d00a      	beq.n	800ecb2 <_ZN2FC2RC5setRCEtttttt+0xaa>
 800ec9c:	f7ff ff9e 	bl	800ebdc <_ZL11millisecondv>
 800eca0:	4602      	mov	r2, r0
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ecac:	d901      	bls.n	800ecb2 <_ZN2FC2RC5setRCEtttttt+0xaa>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e000      	b.n	800ecb4 <_ZN2FC2RC5setRCEtttttt+0xac>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d007      	beq.n	800ecc8 <_ZN2FC2RC5setRCEtttttt+0xc0>
		ModuleCommander::sendCommand(rcvArmFlag); /* send command */
 800ecb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecba:	f7fe ff87 	bl	800dbcc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
		lastArmReq = millisecond();
 800ecbe:	f7ff ff8d 	bl	800ebdc <_ZL11millisecondv>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	611a      	str	r2, [r3, #16]
	}

	if(millisecond() - lastModeReq > 500){
 800ecc8:	f7ff ff88 	bl	800ebdc <_ZL11millisecondv>
 800eccc:	4602      	mov	r2, r0
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	1ad3      	subs	r3, r2, r3
 800ecd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ecd8:	bf8c      	ite	hi
 800ecda:	2301      	movhi	r3, #1
 800ecdc:	2300      	movls	r3, #0
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d058      	beq.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
		if(mode > FLIGHT_ATTITUDE_MODE_THRSHOLD){
 800ece4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ece8:	f240 726c 	movw	r2, #1900	; 0x76c
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d90b      	bls.n	800ed08 <_ZN2FC2RC5setRCEtttttt+0x100>
			if(modeFlag.flightMode != Command::ControlAttitude){
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d04f      	beq.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlAttitude); /* send command */
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	f7fe ff68 	bl	800dbcc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800ecfc:	f7ff ff6e 	bl	800ebdc <_ZL11millisecondv>
 800ed00:	4602      	mov	r2, r0
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	615a      	str	r2, [r3, #20]
 800ed06:	e046      	b.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_POSITION_MODE_THRSHOLD){
 800ed08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ed0c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d90b      	bls.n	800ed2c <_ZN2FC2RC5setRCEtttttt+0x124>
			if(modeFlag.flightMode != Command::ControlPosition){
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	d03d      	beq.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 800ed1a:	2002      	movs	r0, #2
 800ed1c:	f7fe ff56 	bl	800dbcc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800ed20:	f7ff ff5c 	bl	800ebdc <_ZL11millisecondv>
 800ed24:	4602      	mov	r2, r0
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	615a      	str	r2, [r3, #20]
 800ed2a:	e034      	b.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_AUTO_MODE_THRSHOLD){ /* FLIGHT_AUTO_MODE_THRSHOLD */
 800ed2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ed30:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d90b      	bls.n	800ed50 <_ZN2FC2RC5setRCEtttttt+0x148>
			if(modeFlag.flightMode != Command::AutoWaypoint){
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	2b03      	cmp	r3, #3
 800ed3c:	d02b      	beq.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 800ed3e:	2002      	movs	r0, #2
 800ed40:	f7fe ff44 	bl	800dbcc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800ed44:	f7ff ff4a 	bl	800ebdc <_ZL11millisecondv>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	615a      	str	r2, [r3, #20]
 800ed4e:	e022      	b.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_RTL_MODE_THRSHOLD){
 800ed50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ed54:	f240 5246 	movw	r2, #1350	; 0x546
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d90b      	bls.n	800ed74 <_ZN2FC2RC5setRCEtttttt+0x16c>
			if(modeFlag.flightMode != Command::AutoRTL){
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d019      	beq.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::AutoRTL); /* send command */
 800ed62:	2004      	movs	r0, #4
 800ed64:	f7fe ff32 	bl	800dbcc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800ed68:	f7ff ff38 	bl	800ebdc <_ZL11millisecondv>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	615a      	str	r2, [r3, #20]
 800ed72:	e010      	b.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_ALT_MODE_THRSHOLD){
 800ed74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ed78:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d90a      	bls.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
			if(modeFlag.flightMode != Command::ControlALT){
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d007      	beq.n	800ed96 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlALT); /* send command */
 800ed86:	2001      	movs	r0, #1
 800ed88:	f7fe ff20 	bl	800dbcc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800ed8c:	f7ff ff26 	bl	800ebdc <_ZL11millisecondv>
 800ed90:	4602      	mov	r2, r0
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	615a      	str	r2, [r3, #20]
			}
		}
	}

	/* Freq class variable */
	freqCnt++;
 800ed96:	4b06      	ldr	r3, [pc, #24]	; (800edb0 <_ZN2FC2RC5setRCEtttttt+0x1a8>)
 800ed98:	881b      	ldrh	r3, [r3, #0]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	b29a      	uxth	r2, r3
 800ed9e:	4b04      	ldr	r3, [pc, #16]	; (800edb0 <_ZN2FC2RC5setRCEtttttt+0x1a8>)
 800eda0:	801a      	strh	r2, [r3, #0]
}
 800eda2:	bf00      	nop
 800eda4:	372c      	adds	r7, #44	; 0x2c
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd90      	pop	{r4, r7, pc}
 800edaa:	bf00      	nop
 800edac:	24000a50 	.word	0x24000a50
 800edb0:	24000e28 	.word	0x24000e28

0800edb4 <_Z41__static_initialization_and_destruction_0ii>:
}
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d107      	bne.n	800edd4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edca:	4293      	cmp	r3, r2
 800edcc:	d102      	bne.n	800edd4 <_Z41__static_initialization_and_destruction_0ii+0x20>
RC rc;
 800edce:	4803      	ldr	r0, [pc, #12]	; (800eddc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800edd0:	f7ff ff0b 	bl	800ebea <_ZN2FC2RCC1Ev>
}
 800edd4:	bf00      	nop
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	24000e08 	.word	0x24000e08

0800ede0 <_GLOBAL__sub_I__ZN2FC2rcE>:
 800ede0:	b580      	push	{r7, lr}
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ede8:	2001      	movs	r0, #1
 800edea:	f7ff ffe3 	bl	800edb4 <_Z41__static_initialization_and_destruction_0ii>
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 800edf0:	b4b0      	push	{r4, r5, r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	4614      	mov	r4, r2
 800ee00:	461d      	mov	r5, r3
 800ee02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee06:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ee0a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ee0e:	bf00      	nop
 800ee10:	370c      	adds	r7, #12
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bcb0      	pop	{r4, r5, r7}
 800ee16:	4770      	bx	lr

0800ee18 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800ee18:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800ee1c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800ee1e:	4b0e      	ldr	r3, [pc, #56]	; (800ee58 <_ZL11microsecondv+0x40>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4619      	mov	r1, r3
 800ee24:	f04f 0200 	mov.w	r2, #0
 800ee28:	f04f 0b00 	mov.w	fp, #0
 800ee2c:	f04f 0c00 	mov.w	ip, #0
 800ee30:	468c      	mov	ip, r1
 800ee32:	f04f 0b00 	mov.w	fp, #0
 800ee36:	4a09      	ldr	r2, [pc, #36]	; (800ee5c <_ZL11microsecondv+0x44>)
 800ee38:	6812      	ldr	r2, [r2, #0]
 800ee3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ee3c:	4611      	mov	r1, r2
 800ee3e:	f04f 0200 	mov.w	r2, #0
 800ee42:	ea4b 0301 	orr.w	r3, fp, r1
 800ee46:	ea4c 0402 	orr.w	r4, ip, r2
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	24000e2c 	.word	0x24000e2c
 800ee5c:	2400c62c 	.word	0x2400c62c

0800ee60 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>:

    /*
     *  signal to AHRS main function
     *  this function is called by SensorAccel, SensorGyro (peripheral interface)
     */
    static inline void setSignal(enum AhrsSignal signal){
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	4603      	mov	r3, r0
 800ee68:	71fb      	strb	r3, [r7, #7]
    	switch(signal){
 800ee6a:	79fb      	ldrb	r3, [r7, #7]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d002      	beq.n	800ee76 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x16>
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d008      	beq.n	800ee86 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x26>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
        	break;
    	case AHRS_fromGyro:
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
    	}
    }
 800ee74:	e00d      	b.n	800ee92 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
 800ee76:	4b09      	ldr	r3, [pc, #36]	; (800ee9c <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2101      	movs	r1, #1
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f015 fd75 	bl	802496c <osThreadFlagsSet>
        	break;
 800ee82:	bf00      	nop
    }
 800ee84:	e005      	b.n	800ee92 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
 800ee86:	4b05      	ldr	r3, [pc, #20]	; (800ee9c <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2102      	movs	r1, #2
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f015 fd6d 	bl	802496c <osThreadFlagsSet>
    }
 800ee92:	bf00      	nop
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	240098a4 	.word	0x240098a4

0800eea0 <_ZN2FC11SensorAccelC1Ev>:

namespace FC{

SensorAccel sensorAccel;

SensorAccel::SensorAccel()
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
: bodyAccel{0,}, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	2300      	movs	r3, #0
 800eeae:	6013      	str	r3, [r2, #0]
 800eeb0:	6053      	str	r3, [r2, #4]
 800eeb2:	6093      	str	r3, [r2, #8]
 800eeb4:	60d3      	str	r3, [r2, #12]
 800eeb6:	6113      	str	r3, [r2, #16]
 800eeb8:	6153      	str	r3, [r2, #20]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f04f 0200 	mov.w	r2, #0
 800eec0:	619a      	str	r2, [r3, #24]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f04f 0200 	mov.w	r2, #0
 800eec8:	61da      	str	r2, [r3, #28]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f04f 0200 	mov.w	r2, #0
 800eed0:	621a      	str	r2, [r3, #32]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f04f 0200 	mov.w	r2, #0
 800eed8:	625a      	str	r2, [r3, #36]	; 0x24
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f04f 0200 	mov.w	r2, #0
 800eee0:	629a      	str	r2, [r3, #40]	; 0x28
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f04f 0200 	mov.w	r2, #0
 800eee8:	62da      	str	r2, [r3, #44]	; 0x2c
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2200      	movs	r2, #0
 800eef6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4618      	mov	r0, r3
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <_ZN2FC11SensorAccel7setBiasEv>:

void SensorAccel::setBias(){
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2201      	movs	r2, #1
 800ef14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f04f 0200 	mov.w	r2, #0
 800ef26:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f04f 0200 	mov.w	r2, #0
 800ef2e:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f04f 0200 	mov.w	r2, #0
 800ef36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ef38:	bf00      	nop
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <_ZN2FC11SensorAccel8setAccelEfff>:

void SensorAccel::setAccel(float x, float y, float z){
 800ef44:	b590      	push	{r4, r7, lr}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	ed87 0a02 	vstr	s0, [r7, #8]
 800ef50:	edc7 0a01 	vstr	s1, [r7, #4]
 800ef54:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 800ef58:	edd7 7a02 	vldr	s15, [r7, #8]
 800ef5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef64:	d10d      	bne.n	800ef82 <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 800ef66:	edd7 7a01 	vldr	s15, [r7, #4]
 800ef6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef72:	d106      	bne.n	800ef82 <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 800ef74:	edd7 7a00 	vldr	s15, [r7]
 800ef78:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef80:	d041      	beq.n	800f006 <_ZN2FC11SensorAccel8setAccelEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d008      	beq.n	800ef9e <_ZN2FC11SensorAccel8setAccelEfff+0x5a>
 800ef8c:	ed97 1a00 	vldr	s2, [r7]
 800ef90:	edd7 0a01 	vldr	s1, [r7, #4]
 800ef94:	ed97 0a02 	vldr	s0, [r7, #8]
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f000 f83d 	bl	800f018 <_ZN2FC11SensorAccel10calAverageEfff>

	this->bodyAccel.timestamp = microsecond();
 800ef9e:	f7ff ff3b 	bl	800ee18 <_ZL11microsecondv>
 800efa2:	4603      	mov	r3, r0
 800efa4:	460c      	mov	r4, r1
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x - biasX;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	edd3 7a06 	vldr	s15, [r3, #24]
 800efb2:	ed97 7a02 	vldr	s14, [r7, #8]
 800efb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAccel.xyz[1] = y - biasY;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	edd3 7a07 	vldr	s15, [r3, #28]
 800efc6:	ed97 7a01 	vldr	s14, [r7, #4]
 800efca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAccel.xyz[2] = z - biasZ;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	edd3 7a08 	vldr	s15, [r3, #32]
 800efda:	ed97 7a00 	vldr	s14, [r7]
 800efde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	4619      	mov	r1, r3
 800efec:	4808      	ldr	r0, [pc, #32]	; (800f010 <_ZN2FC11SensorAccel8setAccelEfff+0xcc>)
 800efee:	f7ff feff 	bl	800edf0 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
	ModuleAHRS::setSignal(AHRS_fromAccel);
 800eff2:	2001      	movs	r0, #1
 800eff4:	f7ff ff34 	bl	800ee60 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	/* Freq class variable */
	freqCnt++;
 800eff8:	4b06      	ldr	r3, [pc, #24]	; (800f014 <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 800effa:	881b      	ldrh	r3, [r3, #0]
 800effc:	3301      	adds	r3, #1
 800effe:	b29a      	uxth	r2, r3
 800f000:	4b04      	ldr	r3, [pc, #16]	; (800f014 <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 800f002:	801a      	strh	r2, [r3, #0]
 800f004:	e000      	b.n	800f008 <_ZN2FC11SensorAccel8setAccelEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 800f006:	bf00      	nop
}
 800f008:	3714      	adds	r7, #20
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd90      	pop	{r4, r7, pc}
 800f00e:	bf00      	nop
 800f010:	24000a50 	.word	0x24000a50
 800f014:	24000e68 	.word	0x24000e68

0800f018 <_ZN2FC11SensorAccel10calAverageEfff>:

void SensorAccel::calAverage(float x, float y, float z){
 800f018:	b480      	push	{r7}
 800f01a:	b087      	sub	sp, #28
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	ed87 0a02 	vstr	s0, [r7, #8]
 800f024:	edc7 0a01 	vstr	s1, [r7, #4]
 800f028:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f032:	3b01      	subs	r3, #1
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 800f03a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f03e:	ee07 3a90 	vmov	s15, r3
 800f042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f046:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f050:	edd7 7a05 	vldr	s15, [r7, #20]
 800f054:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f05c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f060:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f064:	edd7 7a02 	vldr	s15, [r7, #8]
 800f068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f06c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800f07c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f080:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f088:	edd7 7a05 	vldr	s15, [r7, #20]
 800f08c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f090:	edd7 7a01 	vldr	s15, [r7, #4]
 800f094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800f0a8:	edd7 7a05 	vldr	s15, [r7, #20]
 800f0ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f0b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800f0b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f0bc:	edd7 7a00 	vldr	s15, [r7]
 800f0c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f0c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f0e4:	2b14      	cmp	r3, #20
 800f0e6:	d919      	bls.n	800f11c <_ZN2FC11SensorAccel10calAverageEfff+0x104>
		calBiasFlag = false;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	619a      	str	r2, [r3, #24]
		biasY = averY;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	61da      	str	r2, [r3, #28]
		biasZ = averZ - FC_GRAVITY_ACCEERATION;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f106:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f10a:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800f128 <_ZN2FC11SensorAccel10calAverageEfff+0x110>
 800f10e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f112:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	edc3 7a08 	vstr	s15, [r3, #32]
	}
}
 800f11c:	bf00      	nop
 800f11e:	371c      	adds	r7, #28
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr
 800f128:	3a92a305 	.word	0x3a92a305
 800f12c:	40239d01 	.word	0x40239d01

0800f130 <_Z41__static_initialization_and_destruction_0ii>:

}
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d107      	bne.n	800f150 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f146:	4293      	cmp	r3, r2
 800f148:	d102      	bne.n	800f150 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorAccel sensorAccel;
 800f14a:	4803      	ldr	r0, [pc, #12]	; (800f158 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800f14c:	f7ff fea8 	bl	800eea0 <_ZN2FC11SensorAccelC1Ev>
}
 800f150:	bf00      	nop
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	24000e30 	.word	0x24000e30

0800f15c <_GLOBAL__sub_I__ZN2FC11sensorAccelE>:
 800f15c:	b580      	push	{r7, lr}
 800f15e:	af00      	add	r7, sp, #0
 800f160:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f164:	2001      	movs	r0, #1
 800f166:	f7ff ffe3 	bl	800f130 <_Z41__static_initialization_and_destruction_0ii>
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 800f16c:	b4b0      	push	{r4, r5, r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	683a      	ldr	r2, [r7, #0]
 800f17a:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800f17e:	4615      	mov	r5, r2
 800f180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f184:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f188:	e884 0003 	stmia.w	r4, {r0, r1}
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	bcb0      	pop	{r4, r5, r7}
 800f194:	4770      	bx	lr
	...

0800f198 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800f198:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f19c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800f19e:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <_ZL11microsecondv+0x40>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	f04f 0200 	mov.w	r2, #0
 800f1a8:	f04f 0b00 	mov.w	fp, #0
 800f1ac:	f04f 0c00 	mov.w	ip, #0
 800f1b0:	468c      	mov	ip, r1
 800f1b2:	f04f 0b00 	mov.w	fp, #0
 800f1b6:	4a09      	ldr	r2, [pc, #36]	; (800f1dc <_ZL11microsecondv+0x44>)
 800f1b8:	6812      	ldr	r2, [r2, #0]
 800f1ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f1bc:	4611      	mov	r1, r2
 800f1be:	f04f 0200 	mov.w	r2, #0
 800f1c2:	ea4b 0301 	orr.w	r3, fp, r1
 800f1c6:	ea4c 0402 	orr.w	r4, ip, r2
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	4621      	mov	r1, r4
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f1d4:	4770      	bx	lr
 800f1d6:	bf00      	nop
 800f1d8:	24000e6c 	.word	0x24000e6c
 800f1dc:	2400c62c 	.word	0x2400c62c

0800f1e0 <_ZN2FC10SensorBaroC1Ev>:

namespace FC{

class SensorBaro : public Freq<SensorBaro>{
public:
	SensorBaro()
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
	: barometerPub{0, }
	, seaLevelPressure(1013.25)
	, pressure(0)
	, temperature(0)
	, altitude(0)
	, refAltitude(0)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	6013      	str	r3, [r2, #0]
 800f1f0:	6053      	str	r3, [r2, #4]
 800f1f2:	6093      	str	r3, [r2, #8]
 800f1f4:	60d3      	str	r3, [r2, #12]
 800f1f6:	6113      	str	r3, [r2, #16]
 800f1f8:	6153      	str	r3, [r2, #20]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a0c      	ldr	r2, [pc, #48]	; (800f230 <_ZN2FC10SensorBaroC1Ev+0x50>)
 800f1fe:	619a      	str	r2, [r3, #24]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f04f 0200 	mov.w	r2, #0
 800f206:	61da      	str	r2, [r3, #28]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f04f 0200 	mov.w	r2, #0
 800f20e:	621a      	str	r2, [r3, #32]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f04f 0200 	mov.w	r2, #0
 800f216:	625a      	str	r2, [r3, #36]	; 0x24
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f04f 0200 	mov.w	r2, #0
 800f21e:	629a      	str	r2, [r3, #40]	; 0x28
	{}
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	4618      	mov	r0, r3
 800f224:	370c      	adds	r7, #12
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	447d5000 	.word	0x447d5000

0800f234 <_ZN2FC10SensorBaro7setBaroEff>:

namespace FC{

SensorBaro sensorBaro;

void SensorBaro::setBaro(float pressure, float temperature){
 800f234:	b590      	push	{r4, r7, lr}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f240:	edc7 0a01 	vstr	s1, [r7, #4]
	/* invalid pressure */
//	if(pressure > 1200.0 || pressure < 900.0) return;

	this->pressure = pressure;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	61da      	str	r2, [r3, #28]
	this->temperature = temperature;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	621a      	str	r2, [r3, #32]
	this->altitude = calAltitude(seaLevelPressure, pressure);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	edd3 7a06 	vldr	s15, [r3, #24]
 800f256:	edd7 0a02 	vldr	s1, [r7, #8]
 800f25a:	eeb0 0a67 	vmov.f32	s0, s15
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f000 f87e 	bl	800f360 <_ZN2FC10SensorBaro11calAltitudeEff>
 800f264:	eef0 7a40 	vmov.f32	s15, s0
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->barometerPub.timestamp = microsecond();
 800f26e:	f7ff ff93 	bl	800f198 <_ZL11microsecondv>
 800f272:	4603      	mov	r3, r0
 800f274:	460c      	mov	r4, r1
 800f276:	68fa      	ldr	r2, [r7, #12]
 800f278:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometerPub.pressure = this->pressure;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	69da      	ldr	r2, [r3, #28]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	609a      	str	r2, [r3, #8]
	this->barometerPub.temperature = this->temperature;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6a1a      	ldr	r2, [r3, #32]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	60da      	str	r2, [r3, #12]
	this->barometerPub.altitude = this->altitude - refAltitude;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	edc3 7a04 	vstr	s15, [r3, #16]

	msgBus.setBarometer(this->barometerPub);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4806      	ldr	r0, [pc, #24]	; (800f2c0 <_ZN2FC10SensorBaro7setBaroEff+0x8c>)
 800f2a8:	f7ff ff60 	bl	800f16c <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>

	/* Freq class variable */
	freqCnt++;
 800f2ac:	4b05      	ldr	r3, [pc, #20]	; (800f2c4 <_ZN2FC10SensorBaro7setBaroEff+0x90>)
 800f2ae:	881b      	ldrh	r3, [r3, #0]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	4b03      	ldr	r3, [pc, #12]	; (800f2c4 <_ZN2FC10SensorBaro7setBaroEff+0x90>)
 800f2b6:	801a      	strh	r2, [r3, #0]
}
 800f2b8:	bf00      	nop
 800f2ba:	3714      	adds	r7, #20
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd90      	pop	{r4, r7, pc}
 800f2c0:	24000a50 	.word	0x24000a50
 800f2c4:	24000ea0 	.word	0x24000ea0

0800f2c8 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>:

void SensorBaro::setSeaLevelPressure(float altitude){
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	ed87 0a00 	vstr	s0, [r7]
	seaLevelPressure = calSeaLevelPressure(altitude, pressure);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	edd3 7a07 	vldr	s15, [r3, #28]
 800f2da:	eef0 0a67 	vmov.f32	s1, s15
 800f2de:	ed97 0a00 	vldr	s0, [r7]
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 f86c 	bl	800f3c0 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>
 800f2e8:	eef0 7a40 	vmov.f32	s15, s0
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800f2f2:	bf00      	nop
 800f2f4:	3708      	adds	r7, #8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <_ZN2FC10SensorBaro14setRefAltitudeEv>:

void SensorBaro::setRefAltitude(){
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b082      	sub	sp, #8
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
	refAltitude = calAltitude(seaLevelPressure, pressure);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	edd3 7a06 	vldr	s15, [r3, #24]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	ed93 7a07 	vldr	s14, [r3, #28]
 800f30e:	eef0 0a47 	vmov.f32	s1, s14
 800f312:	eeb0 0a67 	vmov.f32	s0, s15
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 f822 	bl	800f360 <_ZN2FC10SensorBaro11calAltitudeEff>
 800f31c:	eef0 7a40 	vmov.f32	s15, s0
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800f326:	bf00      	nop
 800f328:	3708      	adds	r7, #8
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800f32e:	b580      	push	{r7, lr}
 800f330:	b084      	sub	sp, #16
 800f332:	af00      	add	r7, sp, #0
 800f334:	ed87 0a03 	vstr	s0, [r7, #12]
 800f338:	ed87 1b00 	vstr	d1, [r7]
      return pow(__type(__x), __type(__y));
 800f33c:	edd7 7a03 	vldr	s15, [r7, #12]
 800f340:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f344:	ed97 1b00 	vldr	d1, [r7]
 800f348:	eeb0 0b47 	vmov.f64	d0, d7
 800f34c:	f019 fcf0 	bl	8028d30 <pow>
 800f350:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800f354:	eeb0 0b47 	vmov.f64	d0, d7
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
	...

0800f360 <_ZN2FC10SensorBaro11calAltitudeEff>:

float SensorBaro::calAltitude(float seaLevel, float pressure){
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	ed87 0a02 	vstr	s0, [r7, #8]
 800f36c:	edc7 0a01 	vstr	s1, [r7, #4]
	return 44330.0 * (1.0 - pow(pressure / seaLevel, 0.1903));
 800f370:	ed97 7a01 	vldr	s14, [r7, #4]
 800f374:	edd7 7a02 	vldr	s15, [r7, #8]
 800f378:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f37c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800f3b0 <_ZN2FC10SensorBaro11calAltitudeEff+0x50>
 800f380:	eeb0 0a66 	vmov.f32	s0, s13
 800f384:	f7ff ffd3 	bl	800f32e <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800f388:	eeb0 6b40 	vmov.f64	d6, d0
 800f38c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f390:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f394:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800f3b8 <_ZN2FC10SensorBaro11calAltitudeEff+0x58>
 800f398:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f39c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800f3a0:	eeb0 0a67 	vmov.f32	s0, s15
 800f3a4:	3710      	adds	r7, #16
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	f3af 8000 	nop.w
 800f3b0:	1a36e2eb 	.word	0x1a36e2eb
 800f3b4:	3fc85bc0 	.word	0x3fc85bc0
 800f3b8:	00000000 	.word	0x00000000
 800f3bc:	40e5a540 	.word	0x40e5a540

0800f3c0 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>:

float SensorBaro::calSeaLevelPressure(float altitude, float pressure){
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	ed2d 8b02 	vpush	{d8}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	ed87 0a02 	vstr	s0, [r7, #8]
 800f3d0:	edc7 0a01 	vstr	s1, [r7, #4]
	return pressure / pow(1.0 - (altitude / 44330.0), 5.255);
 800f3d4:	edd7 7a01 	vldr	s15, [r7, #4]
 800f3d8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800f3dc:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800f3e4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 800f420 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x60>
 800f3e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f3ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f3f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f3f4:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800f428 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x68>
 800f3f8:	eeb0 0b47 	vmov.f64	d0, d7
 800f3fc:	f019 fc98 	bl	8028d30 <pow>
 800f400:	eeb0 6b40 	vmov.f64	d6, d0
 800f404:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800f408:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800f40c:	eeb0 0a67 	vmov.f32	s0, s15
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	ecbd 8b02 	vpop	{d8}
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	f3af 8000 	nop.w
 800f420:	00000000 	.word	0x00000000
 800f424:	40e5a540 	.word	0x40e5a540
 800f428:	b851eb85 	.word	0xb851eb85
 800f42c:	4015051e 	.word	0x4015051e

0800f430 <_Z41__static_initialization_and_destruction_0ii>:


}
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d107      	bne.n	800f450 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f446:	4293      	cmp	r3, r2
 800f448:	d102      	bne.n	800f450 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorBaro sensorBaro;
 800f44a:	4803      	ldr	r0, [pc, #12]	; (800f458 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800f44c:	f7ff fec8 	bl	800f1e0 <_ZN2FC10SensorBaroC1Ev>
}
 800f450:	bf00      	nop
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}
 800f458:	24000e70 	.word	0x24000e70

0800f45c <_GLOBAL__sub_I__ZN2FC10sensorBaroE>:
 800f45c:	b580      	push	{r7, lr}
 800f45e:	af00      	add	r7, sp, #0
 800f460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f464:	2001      	movs	r0, #1
 800f466:	f7ff ffe3 	bl	800f430 <_Z41__static_initialization_and_destruction_0ii>
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	683a      	ldr	r2, [r7, #0]
 800f47a:	3348      	adds	r3, #72	; 0x48
 800f47c:	4611      	mov	r1, r2
 800f47e:	2248      	movs	r2, #72	; 0x48
 800f480:	4618      	mov	r0, r3
 800f482:	f01c fa99 	bl	802b9b8 <memcpy>
 800f486:	bf00      	nop
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
	...

0800f490 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800f490:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f494:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800f496:	4b0e      	ldr	r3, [pc, #56]	; (800f4d0 <_ZL11microsecondv+0x40>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4619      	mov	r1, r3
 800f49c:	f04f 0200 	mov.w	r2, #0
 800f4a0:	f04f 0b00 	mov.w	fp, #0
 800f4a4:	f04f 0c00 	mov.w	ip, #0
 800f4a8:	468c      	mov	ip, r1
 800f4aa:	f04f 0b00 	mov.w	fp, #0
 800f4ae:	4a09      	ldr	r2, [pc, #36]	; (800f4d4 <_ZL11microsecondv+0x44>)
 800f4b0:	6812      	ldr	r2, [r2, #0]
 800f4b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f4b4:	4611      	mov	r1, r2
 800f4b6:	f04f 0200 	mov.w	r2, #0
 800f4ba:	ea4b 0301 	orr.w	r3, fp, r1
 800f4be:	ea4c 0402 	orr.w	r4, ip, r2
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f4cc:	4770      	bx	lr
 800f4ce:	bf00      	nop
 800f4d0:	24000ea4 	.word	0x24000ea4
 800f4d4:	2400c62c 	.word	0x2400c62c

0800f4d8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:
SensorGPS sensorGPS;

void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 800f4d8:	b590      	push	{r4, r7, lr}
 800f4da:	b091      	sub	sp, #68	; 0x44
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f4e0:	ed87 0b08 	vstr	d0, [r7, #32]
 800f4e4:	ed87 1b06 	vstr	d1, [r7, #24]
 800f4e8:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 800f4ec:	edc7 2a05 	vstr	s5, [r7, #20]
 800f4f0:	ed87 3a04 	vstr	s6, [r7, #16]
 800f4f4:	edc7 3a03 	vstr	s7, [r7, #12]
 800f4f8:	ed87 4a02 	vstr	s8, [r7, #8]
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	71fb      	strb	r3, [r7, #7]
 800f500:	4613      	mov	r3, r2
 800f502:	71bb      	strb	r3, [r7, #6]

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 800f504:	edd7 7a04 	vldr	s15, [r7, #16]
 800f508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f50c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800f5e0 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x108>
 800f510:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f514:	ed9f 5b34 	vldr	d5, [pc, #208]	; 800f5e8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x110>
 800f518:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f51c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f520:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 800f524:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800f528:	f7fe ff1e 	bl	800e368 <_ZSt3cosf>
 800f52c:	eeb0 7a40 	vmov.f32	s14, s0
 800f530:	edd7 7a05 	vldr	s15, [r7, #20]
 800f534:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f538:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 800f53c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800f540:	f7fe ff22 	bl	800e388 <_ZSt3sinf>
 800f544:	eeb0 7a40 	vmov.f32	s14, s0
 800f548:	edd7 7a05 	vldr	s15, [r7, #20]
 800f54c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f550:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 800f554:	f7ff ff9c 	bl	800f490 <_ZL11microsecondv>
 800f558:	4603      	mov	r3, r0
 800f55a:	460c      	mov	r4, r1
 800f55c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f55e:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 800f562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f564:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800f568:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 800f56c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f56e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f572:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 800f576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f578:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f57c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 800f580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f584:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 800f586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f588:	697a      	ldr	r2, [r7, #20]
 800f58a:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 800f58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f590:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 800f592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f596:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 800f598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59a:	f04f 0200 	mov.w	r2, #0
 800f59e:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 800f5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5a4:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 800f5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 800f5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 800f5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b4:	79fa      	ldrb	r2, [r7, #7]
 800f5b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 800f5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5bc:	79ba      	ldrb	r2, [r7, #6]
 800f5be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 800f5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	480a      	ldr	r0, [pc, #40]	; (800f5f0 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x118>)
 800f5c8:	f7ff ff50 	bl	800f46c <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>

	/* Freq class variable */
	freqCnt++;
 800f5cc:	4b09      	ldr	r3, [pc, #36]	; (800f5f4 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x11c>)
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	4b07      	ldr	r3, [pc, #28]	; (800f5f4 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x11c>)
 800f5d6:	801a      	strh	r2, [r3, #0]

}
 800f5d8:	bf00      	nop
 800f5da:	3744      	adds	r7, #68	; 0x44
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd90      	pop	{r4, r7, pc}
 800f5e0:	54442d18 	.word	0x54442d18
 800f5e4:	400921fb 	.word	0x400921fb
 800f5e8:	00000000 	.word	0x00000000
 800f5ec:	40668000 	.word	0x40668000
 800f5f0:	24000a50 	.word	0x24000a50
 800f5f4:	24000f08 	.word	0x24000f08

0800f5f8 <_Z41__static_initialization_and_destruction_0ii>:

}
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
 800f602:	bf00      	nop
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <_GLOBAL__sub_I__ZN2FC9sensorGPSE>:
 800f60e:	b580      	push	{r7, lr}
 800f610:	af00      	add	r7, sp, #0
 800f612:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f616:	2001      	movs	r0, #1
 800f618:	f7ff ffee 	bl	800f5f8 <_Z41__static_initialization_and_destruction_0ii>
 800f61c:	bd80      	pop	{r7, pc}

0800f61e <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 800f61e:	b4b0      	push	{r4, r5, r7}
 800f620:	b083      	sub	sp, #12
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
 800f626:	6039      	str	r1, [r7, #0]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	683a      	ldr	r2, [r7, #0]
 800f62c:	f103 0418 	add.w	r4, r3, #24
 800f630:	4615      	mov	r5, r2
 800f632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f636:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f63a:	e884 0003 	stmia.w	r4, {r0, r1}
 800f63e:	bf00      	nop
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	bcb0      	pop	{r4, r5, r7}
 800f646:	4770      	bx	lr

0800f648 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800f648:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f64c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800f64e:	4b0e      	ldr	r3, [pc, #56]	; (800f688 <_ZL11microsecondv+0x40>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	4619      	mov	r1, r3
 800f654:	f04f 0200 	mov.w	r2, #0
 800f658:	f04f 0b00 	mov.w	fp, #0
 800f65c:	f04f 0c00 	mov.w	ip, #0
 800f660:	468c      	mov	ip, r1
 800f662:	f04f 0b00 	mov.w	fp, #0
 800f666:	4a09      	ldr	r2, [pc, #36]	; (800f68c <_ZL11microsecondv+0x44>)
 800f668:	6812      	ldr	r2, [r2, #0]
 800f66a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f66c:	4611      	mov	r1, r2
 800f66e:	f04f 0200 	mov.w	r2, #0
 800f672:	ea4b 0301 	orr.w	r3, fp, r1
 800f676:	ea4c 0402 	orr.w	r4, ip, r2
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	4621      	mov	r1, r4
 800f67e:	46bd      	mov	sp, r7
 800f680:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop
 800f688:	24000f0c 	.word	0x24000f0c
 800f68c:	2400c62c 	.word	0x2400c62c

0800f690 <_ZN2FC10SensorGyroC1Ev>:

namespace FC{

SensorGyro sensorGyro;

SensorGyro::SensorGyro()
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
: bodyAngularVelocity{0, }
, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	461a      	mov	r2, r3
 800f69c:	2300      	movs	r3, #0
 800f69e:	6013      	str	r3, [r2, #0]
 800f6a0:	6053      	str	r3, [r2, #4]
 800f6a2:	6093      	str	r3, [r2, #8]
 800f6a4:	60d3      	str	r3, [r2, #12]
 800f6a6:	6113      	str	r3, [r2, #16]
 800f6a8:	6153      	str	r3, [r2, #20]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f04f 0200 	mov.w	r2, #0
 800f6b0:	619a      	str	r2, [r3, #24]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f04f 0200 	mov.w	r2, #0
 800f6b8:	61da      	str	r2, [r3, #28]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f04f 0200 	mov.w	r2, #0
 800f6c0:	621a      	str	r2, [r3, #32]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f04f 0200 	mov.w	r2, #0
 800f6c8:	625a      	str	r2, [r3, #36]	; 0x24
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f04f 0200 	mov.w	r2, #0
 800f6d0:	629a      	str	r2, [r3, #40]	; 0x28
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f04f 0200 	mov.w	r2, #0
 800f6d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <_ZN2FC10SensorGyro7setBiasEv>:

void SensorGyro::setBias(){
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2201      	movs	r2, #1
 800f704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f04f 0200 	mov.w	r2, #0
 800f716:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f04f 0200 	mov.w	r2, #0
 800f71e:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f04f 0200 	mov.w	r2, #0
 800f726:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f728:	bf00      	nop
 800f72a:	370c      	adds	r7, #12
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <_ZN2FC10SensorGyro7setGyroEfff>:

void SensorGyro::setGyro(float x, float y, float z){
 800f734:	b590      	push	{r4, r7, lr}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f740:	edc7 0a01 	vstr	s1, [r7, #4]
 800f744:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 800f748:	edd7 7a02 	vldr	s15, [r7, #8]
 800f74c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f754:	d10d      	bne.n	800f772 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 800f756:	edd7 7a01 	vldr	s15, [r7, #4]
 800f75a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f762:	d106      	bne.n	800f772 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 800f764:	edd7 7a00 	vldr	s15, [r7]
 800f768:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f770:	d041      	beq.n	800f7f6 <_ZN2FC10SensorGyro7setGyroEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d008      	beq.n	800f78e <_ZN2FC10SensorGyro7setGyroEfff+0x5a>
 800f77c:	ed97 1a00 	vldr	s2, [r7]
 800f780:	edd7 0a01 	vldr	s1, [r7, #4]
 800f784:	ed97 0a02 	vldr	s0, [r7, #8]
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f000 f83d 	bl	800f808 <_ZN2FC10SensorGyro10calAverageEfff>

	this->bodyAngularVelocity.timestamp = microsecond();
 800f78e:	f7ff ff5b 	bl	800f648 <_ZL11microsecondv>
 800f792:	4603      	mov	r3, r0
 800f794:	460c      	mov	r4, r1
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x - biasX;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	edd3 7a06 	vldr	s15, [r3, #24]
 800f7a2:	ed97 7a02 	vldr	s14, [r7, #8]
 800f7a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y - biasY;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	edd3 7a07 	vldr	s15, [r3, #28]
 800f7b6:	ed97 7a01 	vldr	s14, [r7, #4]
 800f7ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z - biasZ;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	edd3 7a08 	vldr	s15, [r3, #32]
 800f7ca:	ed97 7a00 	vldr	s14, [r7]
 800f7ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	4619      	mov	r1, r3
 800f7dc:	4808      	ldr	r0, [pc, #32]	; (800f800 <_ZN2FC10SensorGyro7setGyroEfff+0xcc>)
 800f7de:	f7ff ff1e 	bl	800f61e <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
	ModuleAHRS::setSignal(AHRS_fromGyro);
 800f7e2:	2002      	movs	r0, #2
 800f7e4:	f7ff fb3c 	bl	800ee60 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	freqCnt++;
 800f7e8:	4b06      	ldr	r3, [pc, #24]	; (800f804 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	4b04      	ldr	r3, [pc, #16]	; (800f804 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 800f7f2:	801a      	strh	r2, [r3, #0]
 800f7f4:	e000      	b.n	800f7f8 <_ZN2FC10SensorGyro7setGyroEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 800f7f6:	bf00      	nop
}
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd90      	pop	{r4, r7, pc}
 800f7fe:	bf00      	nop
 800f800:	24000a50 	.word	0x24000a50
 800f804:	24000f48 	.word	0x24000f48

0800f808 <_ZN2FC10SensorGyro10calAverageEfff>:

void SensorGyro::calAverage(float x, float y, float z){
 800f808:	b480      	push	{r7}
 800f80a:	b087      	sub	sp, #28
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	ed87 0a02 	vstr	s0, [r7, #8]
 800f814:	edc7 0a01 	vstr	s1, [r7, #4]
 800f818:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f822:	3b01      	subs	r3, #1
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 800f82a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f82e:	ee07 3a90 	vmov	s15, r3
 800f832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f836:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f840:	edd7 7a05 	vldr	s15, [r7, #20]
 800f844:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f84c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f850:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f854:	edd7 7a02 	vldr	s15, [r7, #8]
 800f858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f85c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800f86c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f870:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f878:	edd7 7a05 	vldr	s15, [r7, #20]
 800f87c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f880:	edd7 7a01 	vldr	s15, [r7, #4]
 800f884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800f898:	edd7 7a05 	vldr	s15, [r7, #20]
 800f89c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8a4:	edd7 7a05 	vldr	s15, [r7, #20]
 800f8a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f8ac:	edd7 7a00 	vldr	s15, [r7]
 800f8b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f8d4:	2b14      	cmp	r3, #20
 800f8d6:	d90f      	bls.n	800f8f8 <_ZN2FC10SensorGyro10calAverageEfff+0xf0>
		calBiasFlag = false;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	619a      	str	r2, [r3, #24]
		biasY = averY;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	61da      	str	r2, [r3, #28]
		biasZ = averZ;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	621a      	str	r2, [r3, #32]
	}
}
 800f8f8:	bf00      	nop
 800f8fa:	371c      	adds	r7, #28
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr

0800f904 <_Z41__static_initialization_and_destruction_0ii>:

}
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2b01      	cmp	r3, #1
 800f912:	d107      	bne.n	800f924 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d102      	bne.n	800f924 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorGyro sensorGyro;
 800f91e:	4803      	ldr	r0, [pc, #12]	; (800f92c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800f920:	f7ff feb6 	bl	800f690 <_ZN2FC10SensorGyroC1Ev>
}
 800f924:	bf00      	nop
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	24000f10 	.word	0x24000f10

0800f930 <_GLOBAL__sub_I__ZN2FC10sensorGyroE>:
 800f930:	b580      	push	{r7, lr}
 800f932:	af00      	add	r7, sp, #0
 800f934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f938:	2001      	movs	r0, #1
 800f93a:	f7ff ffe3 	bl	800f904 <_Z41__static_initialization_and_destruction_0ii>
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 800f940:	b4b0      	push	{r4, r5, r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	683a      	ldr	r2, [r7, #0]
 800f94e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800f952:	4615      	mov	r5, r2
 800f954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f958:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f95c:	e884 0003 	stmia.w	r4, {r0, r1}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	bcb0      	pop	{r4, r5, r7}
 800f968:	4770      	bx	lr
	...

0800f96c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800f96c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f970:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800f972:	4b0e      	ldr	r3, [pc, #56]	; (800f9ac <_ZL11microsecondv+0x40>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4619      	mov	r1, r3
 800f978:	f04f 0200 	mov.w	r2, #0
 800f97c:	f04f 0b00 	mov.w	fp, #0
 800f980:	f04f 0c00 	mov.w	ip, #0
 800f984:	468c      	mov	ip, r1
 800f986:	f04f 0b00 	mov.w	fp, #0
 800f98a:	4a09      	ldr	r2, [pc, #36]	; (800f9b0 <_ZL11microsecondv+0x44>)
 800f98c:	6812      	ldr	r2, [r2, #0]
 800f98e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f990:	4611      	mov	r1, r2
 800f992:	f04f 0200 	mov.w	r2, #0
 800f996:	ea4b 0301 	orr.w	r3, fp, r1
 800f99a:	ea4c 0402 	orr.w	r4, ip, r2
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	24000f4c 	.word	0x24000f4c
 800f9b0:	2400c62c 	.word	0x2400c62c

0800f9b4 <_ZN2FC9SensorMagC1Ev>:

namespace FC{

SensorMag sensorMag;

SensorMag::SensorMag()
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
: bodyMag{0, }
, startCalibrationFlag(false)
, endCalibrationFlag(false)
, bias{-216.450f,-276.416f, -170.502f}
, scale{0.95011f, 1.04095f, 1.01334f}
, min{0, }, max{0, }
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	461a      	mov	r2, r3
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	6013      	str	r3, [r2, #0]
 800f9c4:	6053      	str	r3, [r2, #4]
 800f9c6:	6093      	str	r3, [r2, #8]
 800f9c8:	60d3      	str	r3, [r2, #12]
 800f9ca:	6113      	str	r3, [r2, #16]
 800f9cc:	6153      	str	r3, [r2, #20]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	761a      	strb	r2, [r3, #24]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	765a      	strb	r2, [r3, #25]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a0e      	ldr	r2, [pc, #56]	; (800fa18 <_ZN2FC9SensorMagC1Ev+0x64>)
 800f9de:	331c      	adds	r3, #28
 800f9e0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f9e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4a0c      	ldr	r2, [pc, #48]	; (800fa1c <_ZN2FC9SensorMagC1Ev+0x68>)
 800f9ea:	3328      	adds	r3, #40	; 0x28
 800f9ec:	ca07      	ldmia	r2, {r0, r1, r2}
 800f9ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	3334      	adds	r3, #52	; 0x34
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	601a      	str	r2, [r3, #0]
 800f9fa:	605a      	str	r2, [r3, #4]
 800f9fc:	609a      	str	r2, [r3, #8]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	3340      	adds	r3, #64	; 0x40
 800fa02:	2200      	movs	r2, #0
 800fa04:	601a      	str	r2, [r3, #0]
 800fa06:	605a      	str	r2, [r3, #4]
 800fa08:	609a      	str	r2, [r3, #8]
	 * 		biasZ = -170.502f
	 * 		scaleX = 0.95011f
	 * 		scaleY = 1.04095f
	 * 		scaleZ = 1.01334f
	 */
}
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr
 800fa18:	0802cb60 	.word	0x0802cb60
 800fa1c:	0802cb6c 	.word	0x0802cb6c

0800fa20 <_ZN2FC9SensorMag6setMagEfff>:

void SensorMag::setMag(float x, float y, float z){
 800fa20:	b590      	push	{r4, r7, lr}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	ed87 0a02 	vstr	s0, [r7, #8]
 800fa2c:	edc7 0a01 	vstr	s1, [r7, #4]
 800fa30:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 800fa34:	edd7 7a02 	vldr	s15, [r7, #8]
 800fa38:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa40:	d10d      	bne.n	800fa5e <_ZN2FC9SensorMag6setMagEfff+0x3e>
 800fa42:	edd7 7a01 	vldr	s15, [r7, #4]
 800fa46:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4e:	d106      	bne.n	800fa5e <_ZN2FC9SensorMag6setMagEfff+0x3e>
 800fa50:	edd7 7a00 	vldr	s15, [r7]
 800fa54:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5c:	d04c      	beq.n	800faf8 <_ZN2FC9SensorMag6setMagEfff+0xd8>

	if(startCalibrationFlag) calCalibration(x, y, z);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	7e1b      	ldrb	r3, [r3, #24]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d008      	beq.n	800fa78 <_ZN2FC9SensorMag6setMagEfff+0x58>
 800fa66:	ed97 1a00 	vldr	s2, [r7]
 800fa6a:	edd7 0a01 	vldr	s1, [r7, #4]
 800fa6e:	ed97 0a02 	vldr	s0, [r7, #8]
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f000 f848 	bl	800fb08 <_ZN2FC9SensorMag14calCalibrationEfff>

	this->bodyMag.timestamp = microsecond();
 800fa78:	f7ff ff78 	bl	800f96c <_ZL11microsecondv>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	460c      	mov	r4, r1
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = (x - bias[0])*scale[0];
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	edd3 7a07 	vldr	s15, [r3, #28]
 800fa8c:	ed97 7a02 	vldr	s14, [r7, #8]
 800fa90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fa9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyMag.xyz[1] = (y - bias[1])*scale[1];
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	edd3 7a08 	vldr	s15, [r3, #32]
 800faaa:	ed97 7a01 	vldr	s14, [r7, #4]
 800faae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800fab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyMag.xyz[2] = (z - bias[2])*scale[2];
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800fac8:	ed97 7a00 	vldr	s14, [r7]
 800facc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800fad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4619      	mov	r1, r3
 800fae4:	4806      	ldr	r0, [pc, #24]	; (800fb00 <_ZN2FC9SensorMag6setMagEfff+0xe0>)
 800fae6:	f7ff ff2b 	bl	800f940 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>

	/* Freq class variable */
	freqCnt++;
 800faea:	4b06      	ldr	r3, [pc, #24]	; (800fb04 <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 800faec:	881b      	ldrh	r3, [r3, #0]
 800faee:	3301      	adds	r3, #1
 800faf0:	b29a      	uxth	r2, r3
 800faf2:	4b04      	ldr	r3, [pc, #16]	; (800fb04 <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 800faf4:	801a      	strh	r2, [r3, #0]
 800faf6:	e000      	b.n	800fafa <_ZN2FC9SensorMag6setMagEfff+0xda>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 800faf8:	bf00      	nop
}
 800fafa:	3714      	adds	r7, #20
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd90      	pop	{r4, r7, pc}
 800fb00:	24000a50 	.word	0x24000a50
 800fb04:	24000fa0 	.word	0x24000fa0

0800fb08 <_ZN2FC9SensorMag14calCalibrationEfff>:

void SensorMag::endCalibration(){
	endCalibrationFlag = true;
}

void SensorMag::calCalibration(float x, float y, float z){
 800fb08:	b480      	push	{r7}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	ed87 0a02 	vstr	s0, [r7, #8]
 800fb14:	edc7 0a01 	vstr	s1, [r7, #4]
 800fb18:	ed87 1a00 	vstr	s2, [r7]
	if(x > max[0]) max[0] = x;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800fb22:	ed97 7a02 	vldr	s14, [r7, #8]
 800fb26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb2e:	dd02      	ble.n	800fb36 <_ZN2FC9SensorMag14calCalibrationEfff+0x2e>
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	68ba      	ldr	r2, [r7, #8]
 800fb34:	641a      	str	r2, [r3, #64]	; 0x40
	if(y > max[1]) max[1] = y;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800fb3c:	ed97 7a01 	vldr	s14, [r7, #4]
 800fb40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb48:	dd02      	ble.n	800fb50 <_ZN2FC9SensorMag14calCalibrationEfff+0x48>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	645a      	str	r2, [r3, #68]	; 0x44
	if(z > max[2]) max[2] = z;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800fb56:	ed97 7a00 	vldr	s14, [r7]
 800fb5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb62:	dd02      	ble.n	800fb6a <_ZN2FC9SensorMag14calCalibrationEfff+0x62>
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	683a      	ldr	r2, [r7, #0]
 800fb68:	649a      	str	r2, [r3, #72]	; 0x48

	if(x < min[0]) min[0] = x;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800fb70:	ed97 7a02 	vldr	s14, [r7, #8]
 800fb74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb7c:	d502      	bpl.n	800fb84 <_ZN2FC9SensorMag14calCalibrationEfff+0x7c>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	635a      	str	r2, [r3, #52]	; 0x34
	if(y < min[1]) min[1] = y;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800fb8a:	ed97 7a01 	vldr	s14, [r7, #4]
 800fb8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb96:	d502      	bpl.n	800fb9e <_ZN2FC9SensorMag14calCalibrationEfff+0x96>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	639a      	str	r2, [r3, #56]	; 0x38
	if(z < min[2]) min[2] = z;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800fba4:	ed97 7a00 	vldr	s14, [r7]
 800fba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb0:	d502      	bpl.n	800fbb8 <_ZN2FC9SensorMag14calCalibrationEfff+0xb0>
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	683a      	ldr	r2, [r7, #0]
 800fbb6:	63da      	str	r2, [r3, #60]	; 0x3c

	if(endCalibrationFlag/* end */){
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	7e5b      	ldrb	r3, [r3, #25]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f000 8091 	beq.w	800fce4 <_ZN2FC9SensorMag14calCalibrationEfff+0x1dc>
		/* get hard iron correction */
		bias[0] = (max[0] + min[0])/2;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800fbce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fbd2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fbd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	edc3 7a07 	vstr	s15, [r3, #28]
		bias[1] = (max[1] + min[1])/2;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800fbec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fbf0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fbf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	edc3 7a08 	vstr	s15, [r3, #32]
		bias[2] = (max[2] + min[2])/2;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800fc0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fc0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fc12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		/* get soft iron correction estimate */
		scale[0] = (max[0] - min[0])/2;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800fc28:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fc30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = (max[1] - min[1])/2;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800fc46:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc4a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fc4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = (max[2] - min[2])/2;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800fc64:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fc6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		float avgRad = (scale[0] + scale[1] + scale[2])/3.0f;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800fc82:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800fc8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fc90:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800fc94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fc98:	edc7 7a05 	vstr	s15, [r7, #20]

		scale[0] = avgRad/scale[0];
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fca2:	edd7 6a05 	vldr	s13, [r7, #20]
 800fca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = avgRad/scale[1];
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800fcb6:	edd7 6a05 	vldr	s13, [r7, #20]
 800fcba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = avgRad/scale[2];
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800fcca:	edd7 6a05 	vldr	s13, [r7, #20]
 800fcce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		startCalibrationFlag = false;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	761a      	strb	r2, [r3, #24]
		endCalibrationFlag = false;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2200      	movs	r2, #0
 800fce2:	765a      	strb	r2, [r3, #25]
	}
}
 800fce4:	bf00      	nop
 800fce6:	371c      	adds	r7, #28
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <_Z41__static_initialization_and_destruction_0ii>:

}
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d107      	bne.n	800fd10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d102      	bne.n	800fd10 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorMag sensorMag;
 800fd0a:	4803      	ldr	r0, [pc, #12]	; (800fd18 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800fd0c:	f7ff fe52 	bl	800f9b4 <_ZN2FC9SensorMagC1Ev>
}
 800fd10:	bf00      	nop
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	24000f50 	.word	0x24000f50

0800fd1c <_GLOBAL__sub_I__ZN2FC9sensorMagE>:
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fd24:	2001      	movs	r0, #1
 800fd26:	f7ff ffe3 	bl	800fcf0 <_Z41__static_initialization_and_destruction_0ii>
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 800fd2c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800fd30:	b085      	sub	sp, #20
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	60bb      	str	r3, [r7, #8]
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	2b3f      	cmp	r3, #63	; 0x3f
 800fd44:	dc16      	bgt.n	800fd74 <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 800fd46:	2201      	movs	r2, #1
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800fd4e:	4619      	mov	r1, r3
 800fd50:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800fd54:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fd58:	ea03 0b01 	and.w	fp, r3, r1
 800fd5c:	ea04 0c02 	and.w	ip, r4, r2
 800fd60:	ea5b 030c 	orrs.w	r3, fp, ip
 800fd64:	d002      	beq.n	800fd6c <_bitCount64+0x40>
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
 800fd68:	3301      	adds	r3, #1
 800fd6a:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	60bb      	str	r3, [r7, #8]
 800fd72:	e7e5      	b.n	800fd40 <_bitCount64+0x14>
	}
	return cnt;
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3714      	adds	r7, #20
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800fd80:	4770      	bx	lr
	...

0800fd84 <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 800fd8c:	4a12      	ldr	r2, [pc, #72]	; (800fdd8 <SBUS_init+0x54>)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 800fd92:	2219      	movs	r2, #25
 800fd94:	2100      	movs	r1, #0
 800fd96:	4811      	ldr	r0, [pc, #68]	; (800fddc <SBUS_init+0x58>)
 800fd98:	f01b fe19 	bl	802b9ce <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 800fd9c:	2219      	movs	r2, #25
 800fd9e:	2100      	movs	r1, #0
 800fda0:	480f      	ldr	r0, [pc, #60]	; (800fde0 <SBUS_init+0x5c>)
 800fda2:	f01b fe14 	bl	802b9ce <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 800fda6:	2224      	movs	r2, #36	; 0x24
 800fda8:	2100      	movs	r1, #0
 800fdaa:	480e      	ldr	r0, [pc, #56]	; (800fde4 <SBUS_init+0x60>)
 800fdac:	f01b fe0f 	bl	802b9ce <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 800fdb0:	2224      	movs	r2, #36	; 0x24
 800fdb2:	2100      	movs	r1, #0
 800fdb4:	480c      	ldr	r0, [pc, #48]	; (800fde8 <SBUS_init+0x64>)
 800fdb6:	f01b fe0a 	bl	802b9ce <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 800fdba:	4b07      	ldr	r3, [pc, #28]	; (800fdd8 <SBUS_init+0x54>)
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 800fdc2:	4b05      	ldr	r3, [pc, #20]	; (800fdd8 <SBUS_init+0x54>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2219      	movs	r2, #25
 800fdc8:	4904      	ldr	r1, [pc, #16]	; (800fddc <SBUS_init+0x58>)
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f00f fb20 	bl	801f410 <HAL_UART_Receive_DMA>
}
 800fdd0:	bf00      	nop
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	24001030 	.word	0x24001030
 800fddc:	24001034 	.word	0x24001034
 800fde0:	2400104d 	.word	0x2400104d
 800fde4:	24001066 	.word	0x24001066
 800fde8:	2400108a 	.word	0x2400108a

0800fdec <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 800fdec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fdf0:	b082      	sub	sp, #8
 800fdf2:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 800fdf4:	4b3a      	ldr	r3, [pc, #232]	; (800fee0 <SBUS_decoding+0xf4>)
 800fdf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fdfa:	f003 0308 	and.w	r3, r3, #8
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d005      	beq.n	800fe0e <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 800fe02:	4b37      	ldr	r3, [pc, #220]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	e1f6      	b.n	80101fc <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 800fe0e:	4b34      	ldr	r3, [pc, #208]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe10:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800fe14:	3301      	adds	r3, #1
 800fe16:	b2da      	uxtb	r2, r3
 800fe18:	4b31      	ldr	r3, [pc, #196]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe1a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800fe1e:	4b30      	ldr	r3, [pc, #192]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe20:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800fe24:	2b40      	cmp	r3, #64	; 0x40
 800fe26:	bf0c      	ite	eq
 800fe28:	2301      	moveq	r3, #1
 800fe2a:	2300      	movne	r3, #0
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d003      	beq.n	800fe3a <SBUS_decoding+0x4e>
 800fe32:	4b2b      	ldr	r3, [pc, #172]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe34:	2200      	movs	r2, #0
 800fe36:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 800fe3a:	4b29      	ldr	r3, [pc, #164]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fe40:	f003 0304 	and.w	r3, r3, #4
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d013      	beq.n	800fe70 <SBUS_decoding+0x84>
 800fe48:	4b25      	ldr	r3, [pc, #148]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe4a:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 800fe4e:	4b24      	ldr	r3, [pc, #144]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe50:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800fe54:	4618      	mov	r0, r3
 800fe56:	2301      	movs	r3, #1
 800fe58:	4083      	lsls	r3, r0
 800fe5a:	469b      	mov	fp, r3
 800fe5c:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800fe60:	ea4b 0301 	orr.w	r3, fp, r1
 800fe64:	ea4c 0402 	orr.w	r4, ip, r2
 800fe68:	4a1d      	ldr	r2, [pc, #116]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe6a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 800fe6e:	e013      	b.n	800fe98 <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 800fe70:	4b1b      	ldr	r3, [pc, #108]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe72:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 800fe76:	4b1a      	ldr	r3, [pc, #104]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe78:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	2301      	movs	r3, #1
 800fe80:	4083      	lsls	r3, r0
 800fe82:	43db      	mvns	r3, r3
 800fe84:	469b      	mov	fp, r3
 800fe86:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800fe8a:	ea0b 0301 	and.w	r3, fp, r1
 800fe8e:	ea0c 0402 	and.w	r4, ip, r2
 800fe92:	4a13      	ldr	r2, [pc, #76]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe94:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 800fe98:	4b11      	ldr	r3, [pc, #68]	; (800fee0 <SBUS_decoding+0xf4>)
 800fe9a:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800fe9e:	4618      	mov	r0, r3
 800fea0:	4621      	mov	r1, r4
 800fea2:	f7ff ff43 	bl	800fd2c <_bitCount64>
 800fea6:	4603      	mov	r3, r0
 800fea8:	461a      	mov	r2, r3
 800feaa:	4b0d      	ldr	r3, [pc, #52]	; (800fee0 <SBUS_decoding+0xf4>)
 800feac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 800feb0:	4b0b      	ldr	r3, [pc, #44]	; (800fee0 <SBUS_decoding+0xf4>)
 800feb2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800feb6:	2b14      	cmp	r3, #20
 800feb8:	d904      	bls.n	800fec4 <SBUS_decoding+0xd8>
 800feba:	4b09      	ldr	r3, [pc, #36]	; (800fee0 <SBUS_decoding+0xf4>)
 800febc:	2201      	movs	r2, #1
 800febe:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800fec2:	e003      	b.n	800fecc <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 800fec4:	4b06      	ldr	r3, [pc, #24]	; (800fee0 <SBUS_decoding+0xf4>)
 800fec6:	2202      	movs	r2, #2
 800fec8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 800fecc:	4b04      	ldr	r3, [pc, #16]	; (800fee0 <SBUS_decoding+0xf4>)
 800fece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fed2:	f003 0304 	and.w	r3, r3, #4
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d004      	beq.n	800fee4 <SBUS_decoding+0xf8>
 800feda:	2300      	movs	r3, #0
 800fedc:	e18e      	b.n	80101fc <SBUS_decoding+0x410>
 800fede:	bf00      	nop
 800fee0:	24001030 	.word	0x24001030

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 800fee4:	4ba7      	ldr	r3, [pc, #668]	; (8010184 <SBUS_decoding+0x398>)
 800fee6:	7f9b      	ldrb	r3, [r3, #30]
 800fee8:	b21a      	sxth	r2, r3
 800feea:	4ba6      	ldr	r3, [pc, #664]	; (8010184 <SBUS_decoding+0x398>)
 800feec:	7fdb      	ldrb	r3, [r3, #31]
 800feee:	021b      	lsls	r3, r3, #8
 800fef0:	b21b      	sxth	r3, r3
 800fef2:	4313      	orrs	r3, r2
 800fef4:	b21b      	sxth	r3, r3
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	4ba1      	ldr	r3, [pc, #644]	; (8010184 <SBUS_decoding+0x398>)
 800ff00:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 800ff02:	4ba0      	ldr	r3, [pc, #640]	; (8010184 <SBUS_decoding+0x398>)
 800ff04:	7fdb      	ldrb	r3, [r3, #31]
 800ff06:	10db      	asrs	r3, r3, #3
 800ff08:	b21a      	sxth	r2, r3
 800ff0a:	4b9e      	ldr	r3, [pc, #632]	; (8010184 <SBUS_decoding+0x398>)
 800ff0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff10:	015b      	lsls	r3, r3, #5
 800ff12:	b21b      	sxth	r3, r3
 800ff14:	4313      	orrs	r3, r2
 800ff16:	b21b      	sxth	r3, r3
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	4b98      	ldr	r3, [pc, #608]	; (8010184 <SBUS_decoding+0x398>)
 800ff22:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 800ff24:	4b97      	ldr	r3, [pc, #604]	; (8010184 <SBUS_decoding+0x398>)
 800ff26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff2a:	119b      	asrs	r3, r3, #6
 800ff2c:	b21a      	sxth	r2, r3
 800ff2e:	4b95      	ldr	r3, [pc, #596]	; (8010184 <SBUS_decoding+0x398>)
 800ff30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ff34:	009b      	lsls	r3, r3, #2
 800ff36:	b21b      	sxth	r3, r3
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	b21a      	sxth	r2, r3
 800ff3c:	4b91      	ldr	r3, [pc, #580]	; (8010184 <SBUS_decoding+0x398>)
 800ff3e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ff42:	029b      	lsls	r3, r3, #10
 800ff44:	b21b      	sxth	r3, r3
 800ff46:	4313      	orrs	r3, r2
 800ff48:	b21b      	sxth	r3, r3
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff50:	b29a      	uxth	r2, r3
 800ff52:	4b8c      	ldr	r3, [pc, #560]	; (8010184 <SBUS_decoding+0x398>)
 800ff54:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 800ff56:	4b8b      	ldr	r3, [pc, #556]	; (8010184 <SBUS_decoding+0x398>)
 800ff58:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ff5c:	105b      	asrs	r3, r3, #1
 800ff5e:	b21a      	sxth	r2, r3
 800ff60:	4b88      	ldr	r3, [pc, #544]	; (8010184 <SBUS_decoding+0x398>)
 800ff62:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ff66:	01db      	lsls	r3, r3, #7
 800ff68:	b21b      	sxth	r3, r3
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	b21b      	sxth	r3, r3
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	4b83      	ldr	r3, [pc, #524]	; (8010184 <SBUS_decoding+0x398>)
 800ff78:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 800ff7a:	4b82      	ldr	r3, [pc, #520]	; (8010184 <SBUS_decoding+0x398>)
 800ff7c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ff80:	111b      	asrs	r3, r3, #4
 800ff82:	b21a      	sxth	r2, r3
 800ff84:	4b7f      	ldr	r3, [pc, #508]	; (8010184 <SBUS_decoding+0x398>)
 800ff86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ff8a:	011b      	lsls	r3, r3, #4
 800ff8c:	b21b      	sxth	r3, r3
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	b21b      	sxth	r3, r3
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	4b7a      	ldr	r3, [pc, #488]	; (8010184 <SBUS_decoding+0x398>)
 800ff9c:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 800ff9e:	4b79      	ldr	r3, [pc, #484]	; (8010184 <SBUS_decoding+0x398>)
 800ffa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ffa4:	11db      	asrs	r3, r3, #7
 800ffa6:	b21a      	sxth	r2, r3
 800ffa8:	4b76      	ldr	r3, [pc, #472]	; (8010184 <SBUS_decoding+0x398>)
 800ffaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ffae:	005b      	lsls	r3, r3, #1
 800ffb0:	b21b      	sxth	r3, r3
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	b21a      	sxth	r2, r3
 800ffb6:	4b73      	ldr	r3, [pc, #460]	; (8010184 <SBUS_decoding+0x398>)
 800ffb8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ffbc:	025b      	lsls	r3, r3, #9
 800ffbe:	b21b      	sxth	r3, r3
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	b21b      	sxth	r3, r3
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	4b6d      	ldr	r3, [pc, #436]	; (8010184 <SBUS_decoding+0x398>)
 800ffce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 800ffd2:	4b6c      	ldr	r3, [pc, #432]	; (8010184 <SBUS_decoding+0x398>)
 800ffd4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ffd8:	109b      	asrs	r3, r3, #2
 800ffda:	b21a      	sxth	r2, r3
 800ffdc:	4b69      	ldr	r3, [pc, #420]	; (8010184 <SBUS_decoding+0x398>)
 800ffde:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ffe2:	019b      	lsls	r3, r3, #6
 800ffe4:	b21b      	sxth	r3, r3
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	b21b      	sxth	r3, r3
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fff0:	b29a      	uxth	r2, r3
 800fff2:	4b64      	ldr	r3, [pc, #400]	; (8010184 <SBUS_decoding+0x398>)
 800fff4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 800fff8:	4b62      	ldr	r3, [pc, #392]	; (8010184 <SBUS_decoding+0x398>)
 800fffa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800fffe:	115b      	asrs	r3, r3, #5
 8010000:	b21a      	sxth	r2, r3
 8010002:	4b60      	ldr	r3, [pc, #384]	; (8010184 <SBUS_decoding+0x398>)
 8010004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010008:	00db      	lsls	r3, r3, #3
 801000a:	b21b      	sxth	r3, r3
 801000c:	4313      	orrs	r3, r2
 801000e:	b21b      	sxth	r3, r3
 8010010:	b29b      	uxth	r3, r3
 8010012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010016:	b29a      	uxth	r2, r3
 8010018:	4b5a      	ldr	r3, [pc, #360]	; (8010184 <SBUS_decoding+0x398>)
 801001a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 801001e:	4b59      	ldr	r3, [pc, #356]	; (8010184 <SBUS_decoding+0x398>)
 8010020:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010024:	b21a      	sxth	r2, r3
 8010026:	4b57      	ldr	r3, [pc, #348]	; (8010184 <SBUS_decoding+0x398>)
 8010028:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801002c:	021b      	lsls	r3, r3, #8
 801002e:	b21b      	sxth	r3, r3
 8010030:	4313      	orrs	r3, r2
 8010032:	b21b      	sxth	r3, r3
 8010034:	b29b      	uxth	r3, r3
 8010036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801003a:	b29a      	uxth	r2, r3
 801003c:	4b51      	ldr	r3, [pc, #324]	; (8010184 <SBUS_decoding+0x398>)
 801003e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 8010042:	4b50      	ldr	r3, [pc, #320]	; (8010184 <SBUS_decoding+0x398>)
 8010044:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010048:	10db      	asrs	r3, r3, #3
 801004a:	b21a      	sxth	r2, r3
 801004c:	4b4d      	ldr	r3, [pc, #308]	; (8010184 <SBUS_decoding+0x398>)
 801004e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010052:	015b      	lsls	r3, r3, #5
 8010054:	b21b      	sxth	r3, r3
 8010056:	4313      	orrs	r3, r2
 8010058:	b21b      	sxth	r3, r3
 801005a:	b29b      	uxth	r3, r3
 801005c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010060:	b29a      	uxth	r2, r3
 8010062:	4b48      	ldr	r3, [pc, #288]	; (8010184 <SBUS_decoding+0x398>)
 8010064:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 8010068:	4b46      	ldr	r3, [pc, #280]	; (8010184 <SBUS_decoding+0x398>)
 801006a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801006e:	119b      	asrs	r3, r3, #6
 8010070:	b21a      	sxth	r2, r3
 8010072:	4b44      	ldr	r3, [pc, #272]	; (8010184 <SBUS_decoding+0x398>)
 8010074:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	b21b      	sxth	r3, r3
 801007c:	4313      	orrs	r3, r2
 801007e:	b21a      	sxth	r2, r3
 8010080:	4b40      	ldr	r3, [pc, #256]	; (8010184 <SBUS_decoding+0x398>)
 8010082:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010086:	029b      	lsls	r3, r3, #10
 8010088:	b21b      	sxth	r3, r3
 801008a:	4313      	orrs	r3, r2
 801008c:	b21b      	sxth	r3, r3
 801008e:	b29b      	uxth	r3, r3
 8010090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010094:	b29a      	uxth	r2, r3
 8010096:	4b3b      	ldr	r3, [pc, #236]	; (8010184 <SBUS_decoding+0x398>)
 8010098:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 801009c:	4b39      	ldr	r3, [pc, #228]	; (8010184 <SBUS_decoding+0x398>)
 801009e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100a2:	105b      	asrs	r3, r3, #1
 80100a4:	b21a      	sxth	r2, r3
 80100a6:	4b37      	ldr	r3, [pc, #220]	; (8010184 <SBUS_decoding+0x398>)
 80100a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80100ac:	01db      	lsls	r3, r3, #7
 80100ae:	b21b      	sxth	r3, r3
 80100b0:	4313      	orrs	r3, r2
 80100b2:	b21b      	sxth	r3, r3
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	4b31      	ldr	r3, [pc, #196]	; (8010184 <SBUS_decoding+0x398>)
 80100be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 80100c2:	4b30      	ldr	r3, [pc, #192]	; (8010184 <SBUS_decoding+0x398>)
 80100c4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80100c8:	111b      	asrs	r3, r3, #4
 80100ca:	b21a      	sxth	r2, r3
 80100cc:	4b2d      	ldr	r3, [pc, #180]	; (8010184 <SBUS_decoding+0x398>)
 80100ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80100d2:	011b      	lsls	r3, r3, #4
 80100d4:	b21b      	sxth	r3, r3
 80100d6:	4313      	orrs	r3, r2
 80100d8:	b21b      	sxth	r3, r3
 80100da:	b29b      	uxth	r3, r3
 80100dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100e0:	b29a      	uxth	r2, r3
 80100e2:	4b28      	ldr	r3, [pc, #160]	; (8010184 <SBUS_decoding+0x398>)
 80100e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 80100e8:	4b26      	ldr	r3, [pc, #152]	; (8010184 <SBUS_decoding+0x398>)
 80100ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80100ee:	11db      	asrs	r3, r3, #7
 80100f0:	b21a      	sxth	r2, r3
 80100f2:	4b24      	ldr	r3, [pc, #144]	; (8010184 <SBUS_decoding+0x398>)
 80100f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	b21b      	sxth	r3, r3
 80100fc:	4313      	orrs	r3, r2
 80100fe:	b21a      	sxth	r2, r3
 8010100:	4b20      	ldr	r3, [pc, #128]	; (8010184 <SBUS_decoding+0x398>)
 8010102:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010106:	025b      	lsls	r3, r3, #9
 8010108:	b21b      	sxth	r3, r3
 801010a:	4313      	orrs	r3, r2
 801010c:	b21b      	sxth	r3, r3
 801010e:	b29b      	uxth	r3, r3
 8010110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010114:	b29a      	uxth	r2, r3
 8010116:	4b1b      	ldr	r3, [pc, #108]	; (8010184 <SBUS_decoding+0x398>)
 8010118:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 801011c:	4b19      	ldr	r3, [pc, #100]	; (8010184 <SBUS_decoding+0x398>)
 801011e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010122:	109b      	asrs	r3, r3, #2
 8010124:	b21a      	sxth	r2, r3
 8010126:	4b17      	ldr	r3, [pc, #92]	; (8010184 <SBUS_decoding+0x398>)
 8010128:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801012c:	019b      	lsls	r3, r3, #6
 801012e:	b21b      	sxth	r3, r3
 8010130:	4313      	orrs	r3, r2
 8010132:	b21b      	sxth	r3, r3
 8010134:	b29b      	uxth	r3, r3
 8010136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801013a:	b29a      	uxth	r2, r3
 801013c:	4b11      	ldr	r3, [pc, #68]	; (8010184 <SBUS_decoding+0x398>)
 801013e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 8010142:	4b10      	ldr	r3, [pc, #64]	; (8010184 <SBUS_decoding+0x398>)
 8010144:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010148:	115b      	asrs	r3, r3, #5
 801014a:	b21a      	sxth	r2, r3
 801014c:	4b0d      	ldr	r3, [pc, #52]	; (8010184 <SBUS_decoding+0x398>)
 801014e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010152:	00db      	lsls	r3, r3, #3
 8010154:	b21b      	sxth	r3, r3
 8010156:	4313      	orrs	r3, r2
 8010158:	b21b      	sxth	r3, r3
 801015a:	b29b      	uxth	r3, r3
 801015c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010160:	b29a      	uxth	r2, r3
 8010162:	4b08      	ldr	r3, [pc, #32]	; (8010184 <SBUS_decoding+0x398>)
 8010164:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 8010168:	4b06      	ldr	r3, [pc, #24]	; (8010184 <SBUS_decoding+0x398>)
 801016a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801016e:	f003 0301 	and.w	r3, r3, #1
 8010172:	2b00      	cmp	r3, #0
 8010174:	d008      	beq.n	8010188 <SBUS_decoding+0x39c>
 8010176:	4b03      	ldr	r3, [pc, #12]	; (8010184 <SBUS_decoding+0x398>)
 8010178:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801017c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8010180:	e007      	b.n	8010192 <SBUS_decoding+0x3a6>
 8010182:	bf00      	nop
 8010184:	24001030 	.word	0x24001030
 8010188:	4b1f      	ldr	r3, [pc, #124]	; (8010208 <SBUS_decoding+0x41c>)
 801018a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801018e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 8010192:	4b1d      	ldr	r3, [pc, #116]	; (8010208 <SBUS_decoding+0x41c>)
 8010194:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010198:	f003 0302 	and.w	r3, r3, #2
 801019c:	2b00      	cmp	r3, #0
 801019e:	d005      	beq.n	80101ac <SBUS_decoding+0x3c0>
 80101a0:	4b19      	ldr	r3, [pc, #100]	; (8010208 <SBUS_decoding+0x41c>)
 80101a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80101a6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80101aa:	e004      	b.n	80101b6 <SBUS_decoding+0x3ca>
 80101ac:	4b16      	ldr	r3, [pc, #88]	; (8010208 <SBUS_decoding+0x41c>)
 80101ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80101b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 80101b6:	2300      	movs	r3, #0
 80101b8:	607b      	str	r3, [r7, #4]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2b11      	cmp	r3, #17
 80101be:	dc1c      	bgt.n	80101fa <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 80101c0:	4a11      	ldr	r2, [pc, #68]	; (8010208 <SBUS_decoding+0x41c>)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	3318      	adds	r3, #24
 80101c6:	005b      	lsls	r3, r3, #1
 80101c8:	4413      	add	r3, r2
 80101ca:	88db      	ldrh	r3, [r3, #6]
 80101cc:	461a      	mov	r2, r3
 80101ce:	4613      	mov	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4413      	add	r3, r2
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	da00      	bge.n	80101da <SBUS_decoding+0x3ee>
 80101d8:	3307      	adds	r3, #7
 80101da:	10db      	asrs	r3, r3, #3
 80101dc:	b29b      	uxth	r3, r3
 80101de:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80101e2:	b299      	uxth	r1, r3
 80101e4:	4a08      	ldr	r2, [pc, #32]	; (8010208 <SBUS_decoding+0x41c>)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	332c      	adds	r3, #44	; 0x2c
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	4413      	add	r3, r2
 80101ee:	460a      	mov	r2, r1
 80101f0:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	3301      	adds	r3, #1
 80101f6:	607b      	str	r3, [r7, #4]
 80101f8:	e7df      	b.n	80101ba <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 80101fa:	2301      	movs	r3, #1
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010206:	bf00      	nop
 8010208:	24001030 	.word	0x24001030

0801020c <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 8010212:	2300      	movs	r3, #0
 8010214:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 8010216:	4b37      	ldr	r3, [pc, #220]	; (80102f4 <SBUS_uartRxCpltCallback+0xe8>)
 8010218:	2200      	movs	r2, #0
 801021a:	701a      	strb	r2, [r3, #0]
 801021c:	4b35      	ldr	r3, [pc, #212]	; (80102f4 <SBUS_uartRxCpltCallback+0xe8>)
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b18      	cmp	r3, #24
 8010222:	d862      	bhi.n	80102ea <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 8010224:	4b33      	ldr	r3, [pc, #204]	; (80102f4 <SBUS_uartRxCpltCallback+0xe8>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	461a      	mov	r2, r3
 801022a:	4b33      	ldr	r3, [pc, #204]	; (80102f8 <SBUS_uartRxCpltCallback+0xec>)
 801022c:	4413      	add	r3, r2
 801022e:	791a      	ldrb	r2, [r3, #4]
 8010230:	4b32      	ldr	r3, [pc, #200]	; (80102fc <SBUS_uartRxCpltCallback+0xf0>)
 8010232:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 8010234:	4b32      	ldr	r3, [pc, #200]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d120      	bne.n	801027e <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 801023c:	4b2f      	ldr	r3, [pc, #188]	; (80102fc <SBUS_uartRxCpltCallback+0xf0>)
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	2b0f      	cmp	r3, #15
 8010242:	d118      	bne.n	8010276 <SBUS_uartRxCpltCallback+0x6a>
 8010244:	4b2f      	ldr	r3, [pc, #188]	; (8010304 <SBUS_uartRxCpltCallback+0xf8>)
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d005      	beq.n	8010258 <SBUS_uartRxCpltCallback+0x4c>
 801024c:	4b2d      	ldr	r3, [pc, #180]	; (8010304 <SBUS_uartRxCpltCallback+0xf8>)
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	f003 030f 	and.w	r3, r3, #15
 8010254:	2b00      	cmp	r3, #0
 8010256:	d10e      	bne.n	8010276 <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 8010258:	4b29      	ldr	r3, [pc, #164]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	4619      	mov	r1, r3
 801025e:	4b27      	ldr	r3, [pc, #156]	; (80102fc <SBUS_uartRxCpltCallback+0xf0>)
 8010260:	781a      	ldrb	r2, [r3, #0]
 8010262:	4b25      	ldr	r3, [pc, #148]	; (80102f8 <SBUS_uartRxCpltCallback+0xec>)
 8010264:	440b      	add	r3, r1
 8010266:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8010268:	4b25      	ldr	r3, [pc, #148]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	3301      	adds	r3, #1
 801026e:	b2da      	uxtb	r2, r3
 8010270:	4b23      	ldr	r3, [pc, #140]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 8010272:	701a      	strb	r2, [r3, #0]
 8010274:	e02e      	b.n	80102d4 <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 8010276:	4b22      	ldr	r3, [pc, #136]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 8010278:	2200      	movs	r2, #0
 801027a:	701a      	strb	r2, [r3, #0]
 801027c:	e02a      	b.n	80102d4 <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 801027e:	4b20      	ldr	r3, [pc, #128]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2b18      	cmp	r3, #24
 8010284:	d80d      	bhi.n	80102a2 <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 8010286:	4b1e      	ldr	r3, [pc, #120]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	4619      	mov	r1, r3
 801028c:	4b1b      	ldr	r3, [pc, #108]	; (80102fc <SBUS_uartRxCpltCallback+0xf0>)
 801028e:	781a      	ldrb	r2, [r3, #0]
 8010290:	4b19      	ldr	r3, [pc, #100]	; (80102f8 <SBUS_uartRxCpltCallback+0xec>)
 8010292:	440b      	add	r3, r1
 8010294:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8010296:	4b1a      	ldr	r3, [pc, #104]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	3301      	adds	r3, #1
 801029c:	b2da      	uxtb	r2, r3
 801029e:	4b18      	ldr	r3, [pc, #96]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 80102a0:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 80102a2:	4b17      	ldr	r3, [pc, #92]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	2b19      	cmp	r3, #25
 80102a8:	d114      	bne.n	80102d4 <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 80102aa:	4b14      	ldr	r3, [pc, #80]	; (80102fc <SBUS_uartRxCpltCallback+0xf0>)
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d005      	beq.n	80102be <SBUS_uartRxCpltCallback+0xb2>
 80102b2:	4b12      	ldr	r3, [pc, #72]	; (80102fc <SBUS_uartRxCpltCallback+0xf0>)
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	f003 030f 	and.w	r3, r3, #15
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d107      	bne.n	80102ce <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 80102be:	4b10      	ldr	r3, [pc, #64]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 80102c4:	f7ff fd92 	bl	800fdec <SBUS_decoding>
 80102c8:	4603      	mov	r3, r0
 80102ca:	71fb      	strb	r3, [r7, #7]
 80102cc:	e002      	b.n	80102d4 <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 80102ce:	4b0c      	ldr	r3, [pc, #48]	; (8010300 <SBUS_uartRxCpltCallback+0xf4>)
 80102d0:	2200      	movs	r2, #0
 80102d2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 80102d4:	4b09      	ldr	r3, [pc, #36]	; (80102fc <SBUS_uartRxCpltCallback+0xf0>)
 80102d6:	781a      	ldrb	r2, [r3, #0]
 80102d8:	4b0a      	ldr	r3, [pc, #40]	; (8010304 <SBUS_uartRxCpltCallback+0xf8>)
 80102da:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 80102dc:	4b05      	ldr	r3, [pc, #20]	; (80102f4 <SBUS_uartRxCpltCallback+0xe8>)
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	3301      	adds	r3, #1
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	4b03      	ldr	r3, [pc, #12]	; (80102f4 <SBUS_uartRxCpltCallback+0xe8>)
 80102e6:	701a      	strb	r2, [r3, #0]
 80102e8:	e798      	b.n	801021c <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 80102ea:	79fb      	ldrb	r3, [r7, #7]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	240010c3 	.word	0x240010c3
 80102f8:	24001030 	.word	0x24001030
 80102fc:	240010c1 	.word	0x240010c1
 8010300:	240010c0 	.word	0x240010c0
 8010304:	240010c2 	.word	0x240010c2

08010308 <SBUS_getChannel>:
//		printf("%d \t", sbus.compRcValue[i]);
//	}
//	printf("\r\n");
//}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	4603      	mov	r3, r0
 8010310:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 8010312:	79fb      	ldrb	r3, [r7, #7]
 8010314:	3b01      	subs	r3, #1
 8010316:	4a05      	ldr	r2, [pc, #20]	; (801032c <SBUS_getChannel+0x24>)
 8010318:	332c      	adds	r3, #44	; 0x2c
 801031a:	005b      	lsls	r3, r3, #1
 801031c:	4413      	add	r3, r2
 801031e:	885b      	ldrh	r3, [r3, #2]
}
 8010320:	4618      	mov	r0, r3
 8010322:	370c      	adds	r7, #12
 8010324:	46bd      	mov	sp, r7
 8010326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032a:	4770      	bx	lr
 801032c:	24001030 	.word	0x24001030

08010330 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>:
    SIMPLE_FUNC_IMPL(Health, Health, health)
 8010330:	b4b0      	push	{r4, r5, r7}
 8010332:	b085      	sub	sp, #20
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6039      	str	r1, [r7, #0]
 801033a:	2300      	movs	r3, #0
 801033c:	73fb      	strb	r3, [r7, #15]
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	e9d3 1200 	ldrd	r1, r2, [r3]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801034a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801034e:	42a2      	cmp	r2, r4
 8010350:	bf08      	it	eq
 8010352:	4299      	cmpeq	r1, r3
 8010354:	d001      	beq.n	801035a <_ZN2FC6MsgBus9getHealthEPNS_6HealthE+0x2a>
 8010356:	2301      	movs	r3, #1
 8010358:	73fb      	strb	r3, [r7, #15]
 801035a:	683a      	ldr	r2, [r7, #0]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4615      	mov	r5, r2
 8010360:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8010364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010368:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801036c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8010370:	7bfb      	ldrb	r3, [r7, #15]
 8010372:	4618      	mov	r0, r3
 8010374:	3714      	adds	r7, #20
 8010376:	46bd      	mov	sp, r7
 8010378:	bcb0      	pop	{r4, r5, r7}
 801037a:	4770      	bx	lr

0801037c <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>:
 801037c:	b4b0      	push	{r4, r5, r7}
 801037e:	b083      	sub	sp, #12
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 801038e:	4615      	mov	r5, r2
 8010390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010394:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801039c:	bf00      	nop
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bcb0      	pop	{r4, r5, r7}
 80103a4:	4770      	bx	lr

080103a6 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>:
    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 80103a6:	b4b0      	push	{r4, r5, r7}
 80103a8:	b085      	sub	sp, #20
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
 80103ae:	6039      	str	r1, [r7, #0]
 80103b0:	2300      	movs	r3, #0
 80103b2:	73fb      	strb	r3, [r7, #15]
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80103c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80103c4:	42a2      	cmp	r2, r4
 80103c6:	bf08      	it	eq
 80103c8:	4299      	cmpeq	r1, r3
 80103ca:	d001      	beq.n	80103d0 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME+0x2a>
 80103cc:	2301      	movs	r3, #1
 80103ce:	73fb      	strb	r3, [r7, #15]
 80103d0:	683a      	ldr	r2, [r7, #0]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	4615      	mov	r5, r2
 80103d6:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80103da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80103dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80103de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80103e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80103e6:	7bfb      	ldrb	r3, [r7, #15]
 80103e8:	4618      	mov	r0, r3
 80103ea:	3714      	adds	r7, #20
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bcb0      	pop	{r4, r5, r7}
 80103f0:	4770      	bx	lr
	...

080103f4 <_ZN2FC24ModuleAttitudeController4mainEv>:
	static void main(){
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b0ee      	sub	sp, #440	; 0x1b8
 80103f8:	af00      	add	r7, sp, #0
		ModuleAttitudeController attitudeController;
 80103fa:	463b      	mov	r3, r7
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fd f897 	bl	800d530 <_ZN2FC24ModuleAttitudeControllerC1Ev>
			if(osThreadFlagsGet() & AC_reset){
 8010402:	f014 fb65 	bl	8024ad0 <osThreadFlagsGet>
 8010406:	4603      	mov	r3, r0
 8010408:	f003 0302 	and.w	r3, r3, #2
 801040c:	2b00      	cmp	r3, #0
 801040e:	bf14      	ite	ne
 8010410:	2301      	movne	r3, #1
 8010412:	2300      	moveq	r3, #0
 8010414:	b2db      	uxtb	r3, r3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d006      	beq.n	8010428 <_ZN2FC24ModuleAttitudeController4mainEv+0x34>
				osThreadFlagsClear(AC_reset);
 801041a:	2002      	movs	r0, #2
 801041c:	f014 fb08 	bl	8024a30 <osThreadFlagsClear>
				attitudeController.initialize();
 8010420:	463b      	mov	r3, r7
 8010422:	4618      	mov	r0, r3
 8010424:	f7f4 f908 	bl	8004638 <_ZN23px4_AlgorithmModelClass10initializeEv>
			osThreadFlagsWait(AC_fromAHRS, osFlagsWaitAny, osWaitForever);
 8010428:	f04f 32ff 	mov.w	r2, #4294967295
 801042c:	2100      	movs	r1, #0
 801042e:	2001      	movs	r0, #1
 8010430:	f014 fb82 	bl	8024b38 <osThreadFlagsWait>
			attitudeController.oneStep();
 8010434:	463b      	mov	r3, r7
 8010436:	4618      	mov	r0, r3
 8010438:	f7fd f888 	bl	800d54c <_ZN2FC24ModuleAttitudeController7oneStepEv>
			freqCnt++;
 801043c:	4b03      	ldr	r3, [pc, #12]	; (801044c <_ZN2FC24ModuleAttitudeController4mainEv+0x58>)
 801043e:	881b      	ldrh	r3, [r3, #0]
 8010440:	3301      	adds	r3, #1
 8010442:	b29a      	uxth	r2, r3
 8010444:	4b01      	ldr	r3, [pc, #4]	; (801044c <_ZN2FC24ModuleAttitudeController4mainEv+0x58>)
 8010446:	801a      	strh	r2, [r3, #0]
			if(osThreadFlagsGet() & AC_reset){
 8010448:	e7db      	b.n	8010402 <_ZN2FC24ModuleAttitudeController4mainEv+0xe>
 801044a:	bf00      	nop
 801044c:	240013e4 	.word	0x240013e4

08010450 <_ZN2FC10ModuleAHRS4mainEv>:
	/*
	 *  ModuleAHRS main function
	 *  this function is called by CMSIS task function
	 *	wait signal from accelerometer and gyrometer
	 */
    static void main(){
 8010450:	b580      	push	{r7, lr}
 8010452:	b0ac      	sub	sp, #176	; 0xb0
 8010454:	af00      	add	r7, sp, #0
    	ModuleAHRS moduleAHRS;
 8010456:	463b      	mov	r3, r7
 8010458:	4618      	mov	r0, r3
 801045a:	f7fa fecf 	bl	800b1fc <_ZN2FC10ModuleAHRSC1Ev>
    	uint8_t cnt = 0;
 801045e:	2300      	movs	r3, #0
 8010460:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    	while(1){
    		/* wait accel, gyro value set */
//    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
    		moduleAHRS.oneStep();
 8010464:	463b      	mov	r3, r7
 8010466:	4618      	mov	r0, r3
 8010468:	f7fa ff1e 	bl	800b2a8 <_ZN2FC10ModuleAHRS7oneStepEv>
    		if(cnt>4){
 801046c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8010470:	2b04      	cmp	r3, #4
 8010472:	d902      	bls.n	801047a <_ZN2FC10ModuleAHRS4mainEv+0x2a>
        		ModuleAttitudeController::setSignal(AC_fromAHRS);		/* 200hz */
 8010474:	2001      	movs	r0, #1
 8010476:	f7fd fb2f 	bl	800dad8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
    		}

    		cnt++;
 801047a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 801047e:	3301      	adds	r3, #1
 8010480:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    		osDelay(1);			/* 1000hz */
 8010484:	2001      	movs	r0, #1
 8010486:	f014 fbeb 	bl	8024c60 <osDelay>
    		moduleAHRS.oneStep();
 801048a:	e7eb      	b.n	8010464 <_ZN2FC10ModuleAHRS4mainEv+0x14>

0801048c <_ZN2FC24ModulePositionController4mainEv>:

class ModulePositionController : public positionControlModelClass, public Freq<ModulePositionController> {
public:
	ModulePositionController();

	static void main(){
 801048c:	b580      	push	{r7, lr}
 801048e:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8010492:	af00      	add	r7, sp, #0
		uint8_t firstLoop;
		ModulePositionController positionController;
 8010494:	463b      	mov	r3, r7
 8010496:	4618      	mov	r0, r3
 8010498:	f7fe f87e 	bl	800e598 <_ZN2FC24ModulePositionControllerC1Ev>
		while(1){
			firstLoop = 0;
 801049c:	2300      	movs	r3, #0
 801049e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
			/* wait position controller start */
			osThreadFlagsWait(PC_start, osFlagsWaitAny, osWaitForever);
 80104a2:	f04f 32ff 	mov.w	r2, #4294967295
 80104a6:	2100      	movs	r1, #0
 80104a8:	2002      	movs	r0, #2
 80104aa:	f014 fb45 	bl	8024b38 <osThreadFlagsWait>
			while(1){
				/* if first loop or reset command, initialize */
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 80104ae:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d106      	bne.n	80104c4 <_ZN2FC24ModulePositionController4mainEv+0x38>
 80104b6:	f014 fb0b 	bl	8024ad0 <osThreadFlagsGet>
 80104ba:	4603      	mov	r3, r0
 80104bc:	f003 0308 	and.w	r3, r3, #8
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d001      	beq.n	80104c8 <_ZN2FC24ModulePositionController4mainEv+0x3c>
 80104c4:	2301      	movs	r3, #1
 80104c6:	e000      	b.n	80104ca <_ZN2FC24ModulePositionController4mainEv+0x3e>
 80104c8:	2300      	movs	r3, #0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d006      	beq.n	80104dc <_ZN2FC24ModulePositionController4mainEv+0x50>
					osThreadFlagsClear(PC_reset);
 80104ce:	2008      	movs	r0, #8
 80104d0:	f014 faae 	bl	8024a30 <osThreadFlagsClear>
					positionController.initialize();
 80104d4:	463b      	mov	r3, r7
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7f5 f9f2 	bl	80058c0 <_ZN25positionControlModelClass10initializeEv>
				}

				/* wait EKF data */
				osThreadFlagsWait(PC_fromEKF, osFlagsWaitAny, osWaitForever);
 80104dc:	f04f 32ff 	mov.w	r2, #4294967295
 80104e0:	2100      	movs	r1, #0
 80104e2:	2001      	movs	r0, #1
 80104e4:	f014 fb28 	bl	8024b38 <osThreadFlagsWait>
				positionController.oneStep();
 80104e8:	463b      	mov	r3, r7
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fe f862 	bl	800e5b4 <_ZN2FC24ModulePositionController7oneStepEv>

				/* check position controller stop */
				if(osThreadFlagsGet() & PC_stop){
 80104f0:	f014 faee 	bl	8024ad0 <osThreadFlagsGet>
 80104f4:	4603      	mov	r3, r0
 80104f6:	f003 0304 	and.w	r3, r3, #4
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	bf14      	ite	ne
 80104fe:	2301      	movne	r3, #1
 8010500:	2300      	moveq	r3, #0
 8010502:	b2db      	uxtb	r3, r3
 8010504:	2b00      	cmp	r3, #0
 8010506:	d003      	beq.n	8010510 <_ZN2FC24ModulePositionController4mainEv+0x84>
					osThreadFlagsClear(PC_stop);
 8010508:	2004      	movs	r0, #4
 801050a:	f014 fa91 	bl	8024a30 <osThreadFlagsClear>
					break;
 801050e:	e012      	b.n	8010536 <_ZN2FC24ModulePositionController4mainEv+0xaa>
				}

				/* if first loop, send ACK */
				if(firstLoop < 2){
 8010510:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8010514:	2b01      	cmp	r3, #1
 8010516:	d807      	bhi.n	8010528 <_ZN2FC24ModulePositionController4mainEv+0x9c>
					ModuleCommander::sendSignal(CMD_ACK);
 8010518:	2001      	movs	r0, #1
 801051a:	f7fd fb79 	bl	800dc10 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>
					firstLoop++;
 801051e:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8010522:	3301      	adds	r3, #1
 8010524:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
				}
				freqCnt++;
 8010528:	4b03      	ldr	r3, [pc, #12]	; (8010538 <_ZN2FC24ModulePositionController4mainEv+0xac>)
 801052a:	881b      	ldrh	r3, [r3, #0]
 801052c:	3301      	adds	r3, #1
 801052e:	b29a      	uxth	r2, r3
 8010530:	4b01      	ldr	r3, [pc, #4]	; (8010538 <_ZN2FC24ModulePositionController4mainEv+0xac>)
 8010532:	801a      	strh	r2, [r3, #0]
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 8010534:	e7bb      	b.n	80104ae <_ZN2FC24ModulePositionController4mainEv+0x22>
			firstLoop = 0;
 8010536:	e7b1      	b.n	801049c <_ZN2FC24ModulePositionController4mainEv+0x10>
 8010538:	240013e6 	.word	0x240013e6

0801053c <_ZN2FC9ModuleINS4mainEv>:
};

class ModuleINS : public positionEstimatorModelClass, public Freq<ModuleINS> {
public:

	static void main(){
 801053c:	b580      	push	{r7, lr}
 801053e:	f5ad 6d62 	sub.w	sp, sp, #3616	; 0xe20
 8010542:	af00      	add	r7, sp, #0
		ModuleINS moduleINS;
 8010544:	463b      	mov	r3, r7
 8010546:	4618      	mov	r0, r3
 8010548:	f7fd fde2 	bl	800e110 <_ZN2FC9ModuleINSC1Ev>
		moduleINS.initialize();
 801054c:	463b      	mov	r3, r7
 801054e:	4618      	mov	r0, r3
 8010550:	f7fa fcb4 	bl	800aebc <_ZN27positionEstimatorModelClass10initializeEv>
		osDelay(2000);
 8010554:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010558:	f014 fb82 	bl	8024c60 <osDelay>
		while(1){
			moduleINS.onestep();
 801055c:	463b      	mov	r3, r7
 801055e:	4618      	mov	r0, r3
 8010560:	f7fd fdfe 	bl	800e160 <_ZN2FC9ModuleINS7onestepEv>
			ModulePositionController::setSignal(PC_fromEKF);
 8010564:	2001      	movs	r0, #1
 8010566:	f7fd faa5 	bl	800dab4 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
			freqCnt++;
 801056a:	4b05      	ldr	r3, [pc, #20]	; (8010580 <_ZN2FC9ModuleINS4mainEv+0x44>)
 801056c:	881b      	ldrh	r3, [r3, #0]
 801056e:	3301      	adds	r3, #1
 8010570:	b29a      	uxth	r2, r3
 8010572:	4b03      	ldr	r3, [pc, #12]	; (8010580 <_ZN2FC9ModuleINS4mainEv+0x44>)
 8010574:	801a      	strh	r2, [r3, #0]
			osDelay(20);
 8010576:	2014      	movs	r0, #20
 8010578:	f014 fb72 	bl	8024c60 <osDelay>
			moduleINS.onestep();
 801057c:	e7ee      	b.n	801055c <_ZN2FC9ModuleINS4mainEv+0x20>
 801057e:	bf00      	nop
 8010580:	240013e8 	.word	0x240013e8

08010584 <_ZN2FC12ModuleHealth4mainEv>:

namespace FC {

class ModuleHealth {
public:
	static void main(){
 8010584:	b580      	push	{r7, lr}
 8010586:	b08a      	sub	sp, #40	; 0x28
 8010588:	af00      	add	r7, sp, #0
		uint32_t tick;
		tick = osKernelGetTickCount();
 801058a:	f014 f921 	bl	80247d0 <osKernelGetTickCount>
 801058e:	6278      	str	r0, [r7, #36]	; 0x24

		struct Health health;
		while(1){
			tick += 1000;
 8010590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010592:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010596:	627b      	str	r3, [r7, #36]	; 0x24
			osDelayUntil(tick);		/* 1hz */
 8010598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801059a:	f014 fb8f 	bl	8024cbc <osDelayUntil>

			health.accel = SensorAccel::checkFreq();
 801059e:	f000 fd19 	bl	8010fd4 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>
 80105a2:	4603      	mov	r3, r0
 80105a4:	813b      	strh	r3, [r7, #8]
			health.gyro = SensorGyro::checkFreq();
 80105a6:	f000 fd27 	bl	8010ff8 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>
 80105aa:	4603      	mov	r3, r0
 80105ac:	817b      	strh	r3, [r7, #10]
			health.rc = RC::checkFreq();
 80105ae:	f000 fd35 	bl	801101c <_ZN2FC4FreqINS_2RCEE9checkFreqEv>
 80105b2:	4603      	mov	r3, r0
 80105b4:	81bb      	strh	r3, [r7, #12]

			health.mag = SensorMag::checkFreq();
 80105b6:	f000 fd43 	bl	8011040 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>
 80105ba:	4603      	mov	r3, r0
 80105bc:	81fb      	strh	r3, [r7, #14]
			health.gps = SensorGPS::checkFreq();
 80105be:	f000 fd51 	bl	8011064 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>
 80105c2:	4603      	mov	r3, r0
 80105c4:	823b      	strh	r3, [r7, #16]

			health.baro = SensorBaro::checkFreq();
 80105c6:	f000 fd5f 	bl	8011088 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>
 80105ca:	4603      	mov	r3, r0
 80105cc:	827b      	strh	r3, [r7, #18]

			health.ahrs = ModuleAHRS::checkFreq();
 80105ce:	f000 fd6d 	bl	80110ac <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>
 80105d2:	4603      	mov	r3, r0
 80105d4:	82fb      	strh	r3, [r7, #22]
			health.ins = ModuleINS::checkFreq();
 80105d6:	f000 fd7b 	bl	80110d0 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>
 80105da:	4603      	mov	r3, r0
 80105dc:	833b      	strh	r3, [r7, #24]

			health.attitudeController = ModuleAttitudeController::checkFreq();
 80105de:	f000 fd89 	bl	80110f4 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>
 80105e2:	4603      	mov	r3, r0
 80105e4:	837b      	strh	r3, [r7, #26]
			health.positionController = ModulePositionController::checkFreq();
 80105e6:	f000 fd97 	bl	8011118 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>
 80105ea:	4603      	mov	r3, r0
 80105ec:	83bb      	strh	r3, [r7, #28]
			//TODO auto, lidar health check
			health.autoController = 0;
 80105ee:	2300      	movs	r3, #0
 80105f0:	83fb      	strh	r3, [r7, #30]
			health.lidar = 0;
 80105f2:	2300      	movs	r3, #0
 80105f4:	82bb      	strh	r3, [r7, #20]

			msgBus.setHealth(health);
 80105f6:	463b      	mov	r3, r7
 80105f8:	4619      	mov	r1, r3
 80105fa:	480c      	ldr	r0, [pc, #48]	; (801062c <_ZN2FC12ModuleHealth4mainEv+0xa8>)
 80105fc:	f7ff febe 	bl	801037c <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>

			if(health.accel > ACCEL_THRESHOLD &&
 8010600:	893b      	ldrh	r3, [r7, #8]
 8010602:	2b96      	cmp	r3, #150	; 0x96
 8010604:	d9c4      	bls.n	8010590 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.gyro > GYRO_THRESHOLD &&
 8010606:	897b      	ldrh	r3, [r7, #10]
			if(health.accel > ACCEL_THRESHOLD &&
 8010608:	2b96      	cmp	r3, #150	; 0x96
 801060a:	d9c1      	bls.n	8010590 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.rc > RC_THRESHOLD &&
 801060c:	89bb      	ldrh	r3, [r7, #12]
			   health.gyro > GYRO_THRESHOLD &&
 801060e:	2b64      	cmp	r3, #100	; 0x64
 8010610:	d9be      	bls.n	8010590 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.ahrs > AHRS_THRESHOLD &&
 8010612:	8afb      	ldrh	r3, [r7, #22]
			   health.rc > RC_THRESHOLD &&
 8010614:	2b96      	cmp	r3, #150	; 0x96
 8010616:	d9bb      	bls.n	8010590 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.attitudeController > ATTITUDE_CTL_THRESHOLD){
 8010618:	8b7b      	ldrh	r3, [r7, #26]
			   health.ahrs > AHRS_THRESHOLD &&
 801061a:	2b96      	cmp	r3, #150	; 0x96
 801061c:	d9b8      	bls.n	8010590 <_ZN2FC12ModuleHealth4mainEv+0xc>
				/* arm(attitude controller) enable */

				if(health.mag > MAG_THRESHOLD &&
 801061e:	89fb      	ldrh	r3, [r7, #14]
 8010620:	2b32      	cmp	r3, #50	; 0x32
 8010622:	d9b5      	bls.n	8010590 <_ZN2FC12ModuleHealth4mainEv+0xc>
						health.gps > GPS_THRESHOLD &&
 8010624:	8a3b      	ldrh	r3, [r7, #16]
				if(health.mag > MAG_THRESHOLD &&
 8010626:	2b03      	cmp	r3, #3
			tick += 1000;
 8010628:	e7b2      	b.n	8010590 <_ZN2FC12ModuleHealth4mainEv+0xc>
 801062a:	bf00      	nop
 801062c:	24000a50 	.word	0x24000a50

08010630 <_ZN2FC8ModuleSD4mainEv>:

class ModuleSD {
public:
	ModuleSD() = default;

	static void main(){
 8010630:	b5b0      	push	{r4, r5, r7, lr}
 8010632:	b0ca      	sub	sp, #296	; 0x128
 8010634:	af00      	add	r7, sp, #0
		uint8_t writeBuf[256];
		uint32_t bytesWritten = 0;
 8010636:	f107 0320 	add.w	r3, r7, #32
 801063a:	2200      	movs	r2, #0
 801063c:	601a      	str	r2, [r3, #0]
		uint8_t writeLen = 0;
 801063e:	2300      	movs	r3, #0
 8010640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		/*
		 *  TODO
		 *  FR_DISK_ERR		hardware layer error.
		 *  				retry after circuit
		 */
		uint8_t wtext[] = "Hello from SDIO DMA RTOS\n";
 8010644:	1d3b      	adds	r3, r7, #4
 8010646:	4a63      	ldr	r2, [pc, #396]	; (80107d4 <_ZN2FC8ModuleSD4mainEv+0x1a4>)
 8010648:	461c      	mov	r4, r3
 801064a:	4615      	mov	r5, r2
 801064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010654:	c403      	stmia	r4!, {r0, r1}
 8010656:	8022      	strh	r2, [r4, #0]
		/* 1. Mount - 0 */
		f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8010658:	2200      	movs	r2, #0
 801065a:	495f      	ldr	r1, [pc, #380]	; (80107d8 <_ZN2FC8ModuleSD4mainEv+0x1a8>)
 801065c:	485f      	ldr	r0, [pc, #380]	; (80107dc <_ZN2FC8ModuleSD4mainEv+0x1ac>)
 801065e:	f013 fac3 	bl	8023be8 <f_mount>
		osDelay(1000);
 8010662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010666:	f014 fafb 	bl	8024c60 <osDelay>
		printf("try to open file\r\n");
 801066a:	485d      	ldr	r0, [pc, #372]	; (80107e0 <_ZN2FC8ModuleSD4mainEv+0x1b0>)
 801066c:	f01b fcf2 	bl	802c054 <puts>
		if((res = f_open(&SDFile, "0:/test.txt", FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK){
 8010670:	220a      	movs	r2, #10
 8010672:	495c      	ldr	r1, [pc, #368]	; (80107e4 <_ZN2FC8ModuleSD4mainEv+0x1b4>)
 8010674:	485c      	ldr	r0, [pc, #368]	; (80107e8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 8010676:	f013 fb1b 	bl	8023cb0 <f_open>
 801067a:	4603      	mov	r3, r0
 801067c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8010680:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8010684:	2b00      	cmp	r3, #0
 8010686:	bf14      	ite	ne
 8010688:	2301      	movne	r3, #1
 801068a:	2300      	moveq	r3, #0
 801068c:	b2db      	uxtb	r3, r3
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00b      	beq.n	80106aa <_ZN2FC8ModuleSD4mainEv+0x7a>
			/* fail to open file */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8010692:	2200      	movs	r2, #0
 8010694:	2120      	movs	r1, #32
 8010696:	4855      	ldr	r0, [pc, #340]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8010698:	f006 fa44 	bl	8016b24 <HAL_GPIO_WritePin>
			printf("fail to open file %d\r\n", res);
 801069c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80106a0:	4619      	mov	r1, r3
 80106a2:	4853      	ldr	r0, [pc, #332]	; (80107f0 <_ZN2FC8ModuleSD4mainEv+0x1c0>)
 80106a4:	f01b fc62 	bl	802bf6c <iprintf>
 80106a8:	e033      	b.n	8010712 <_ZN2FC8ModuleSD4mainEv+0xe2>
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80106aa:	2201      	movs	r2, #1
 80106ac:	2120      	movs	r1, #32
 80106ae:	484f      	ldr	r0, [pc, #316]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80106b0:	f006 fa38 	bl	8016b24 <HAL_GPIO_WritePin>
			res = f_write(&SDFile, wtext, strlen((char*)wtext), (UINT*)bytesWritten);
 80106b4:	1d3b      	adds	r3, r7, #4
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7ef fe12 	bl	80002e0 <strlen>
 80106bc:	4602      	mov	r2, r0
 80106be:	f107 0320 	add.w	r3, r7, #32
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	1d39      	adds	r1, r7, #4
 80106c6:	4848      	ldr	r0, [pc, #288]	; (80107e8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 80106c8:	f013 fcb7 	bl	802403a <f_write>
 80106cc:	4603      	mov	r3, r0
 80106ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			if((bytesWritten == 0) || (res != FR_OK)){
 80106d2:	f107 0320 	add.w	r3, r7, #32
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d003      	beq.n	80106e4 <_ZN2FC8ModuleSD4mainEv+0xb4>
 80106dc:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d00b      	beq.n	80106fc <_ZN2FC8ModuleSD4mainEv+0xcc>
				/* fail to write file */
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80106e4:	2200      	movs	r2, #0
 80106e6:	2120      	movs	r1, #32
 80106e8:	4840      	ldr	r0, [pc, #256]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80106ea:	f006 fa1b 	bl	8016b24 <HAL_GPIO_WritePin>
				printf("fail to write %d\r\n", res);
 80106ee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80106f2:	4619      	mov	r1, r3
 80106f4:	483f      	ldr	r0, [pc, #252]	; (80107f4 <_ZN2FC8ModuleSD4mainEv+0x1c4>)
 80106f6:	f01b fc39 	bl	802bf6c <iprintf>
 80106fa:	e007      	b.n	801070c <_ZN2FC8ModuleSD4mainEv+0xdc>
			}
			else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80106fc:	2201      	movs	r2, #1
 80106fe:	2120      	movs	r1, #32
 8010700:	483a      	ldr	r0, [pc, #232]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8010702:	f006 fa0f 	bl	8016b24 <HAL_GPIO_WritePin>
				printf("success write\r\n");
 8010706:	483c      	ldr	r0, [pc, #240]	; (80107f8 <_ZN2FC8ModuleSD4mainEv+0x1c8>)
 8010708:	f01b fca4 	bl	802c054 <puts>
			}

			f_close(&SDFile);
 801070c:	4836      	ldr	r0, [pc, #216]	; (80107e8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 801070e:	f013 fec1 	bl	8024494 <f_close>
		}

		while(1){
			/* sdopen */
			if(f_open(&SDFile,"0:/log.txt", FA_CREATE_ALWAYS | FA_WRITE ) != FR_OK){
 8010712:	220a      	movs	r2, #10
 8010714:	4939      	ldr	r1, [pc, #228]	; (80107fc <_ZN2FC8ModuleSD4mainEv+0x1cc>)
 8010716:	4834      	ldr	r0, [pc, #208]	; (80107e8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 8010718:	f013 faca 	bl	8023cb0 <f_open>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	bf14      	ite	ne
 8010722:	2301      	movne	r3, #1
 8010724:	2300      	moveq	r3, #0
 8010726:	b2db      	uxtb	r3, r3
 8010728:	2b00      	cmp	r3, #0
 801072a:	d005      	beq.n	8010738 <_ZN2FC8ModuleSD4mainEv+0x108>
				/* fail to open file */
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 801072c:	2200      	movs	r2, #0
 801072e:	2120      	movs	r1, #32
 8010730:	482e      	ldr	r0, [pc, #184]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8010732:	f006 f9f7 	bl	8016b24 <HAL_GPIO_WritePin>
 8010736:	e049      	b.n	80107cc <_ZN2FC8ModuleSD4mainEv+0x19c>
			}
			else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8010738:	2201      	movs	r2, #1
 801073a:	2120      	movs	r1, #32
 801073c:	482b      	ldr	r0, [pc, #172]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 801073e:	f006 f9f1 	bl	8016b24 <HAL_GPIO_WritePin>
//					}
//					else{
//						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//					}
//				}
				writeLen = sprintf((char*)writeBuf,"hello fucking world\n");
 8010742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010746:	4a2e      	ldr	r2, [pc, #184]	; (8010800 <_ZN2FC8ModuleSD4mainEv+0x1d0>)
 8010748:	461c      	mov	r4, r3
 801074a:	4615      	mov	r5, r2
 801074c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801074e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010750:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010754:	6020      	str	r0, [r4, #0]
 8010756:	3404      	adds	r4, #4
 8010758:	7021      	strb	r1, [r4, #0]
 801075a:	2314      	movs	r3, #20
 801075c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				res = f_write(&SDFile, writeBuf, writeLen, (UINT*)&bytesWritten);
 8010760:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8010764:	f107 0320 	add.w	r3, r7, #32
 8010768:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801076c:	481e      	ldr	r0, [pc, #120]	; (80107e8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 801076e:	f013 fc64 	bl	802403a <f_write>
 8010772:	4603      	mov	r3, r0
 8010774:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				if((bytesWritten == 0) || (res != FR_OK)){
 8010778:	f107 0320 	add.w	r3, r7, #32
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d003      	beq.n	801078a <_ZN2FC8ModuleSD4mainEv+0x15a>
 8010782:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8010786:	2b00      	cmp	r3, #0
 8010788:	d005      	beq.n	8010796 <_ZN2FC8ModuleSD4mainEv+0x166>
					/* fail to write file */
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 801078a:	2200      	movs	r2, #0
 801078c:	2120      	movs	r1, #32
 801078e:	4817      	ldr	r0, [pc, #92]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 8010790:	f006 f9c8 	bl	8016b24 <HAL_GPIO_WritePin>
 8010794:	e004      	b.n	80107a0 <_ZN2FC8ModuleSD4mainEv+0x170>
				}
				else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8010796:	2201      	movs	r2, #1
 8010798:	2120      	movs	r1, #32
 801079a:	4814      	ldr	r0, [pc, #80]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 801079c:	f006 f9c2 	bl	8016b24 <HAL_GPIO_WritePin>
				}

				if(f_close(&SDFile) != FR_OK){
 80107a0:	4811      	ldr	r0, [pc, #68]	; (80107e8 <_ZN2FC8ModuleSD4mainEv+0x1b8>)
 80107a2:	f013 fe77 	bl	8024494 <f_close>
 80107a6:	4603      	mov	r3, r0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	bf14      	ite	ne
 80107ac:	2301      	movne	r3, #1
 80107ae:	2300      	moveq	r3, #0
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d005      	beq.n	80107c2 <_ZN2FC8ModuleSD4mainEv+0x192>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80107b6:	2200      	movs	r2, #0
 80107b8:	2120      	movs	r1, #32
 80107ba:	480c      	ldr	r0, [pc, #48]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80107bc:	f006 f9b2 	bl	8016b24 <HAL_GPIO_WritePin>
 80107c0:	e004      	b.n	80107cc <_ZN2FC8ModuleSD4mainEv+0x19c>
				}
				else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80107c2:	2201      	movs	r2, #1
 80107c4:	2120      	movs	r1, #32
 80107c6:	4809      	ldr	r0, [pc, #36]	; (80107ec <_ZN2FC8ModuleSD4mainEv+0x1bc>)
 80107c8:	f006 f9ac 	bl	8016b24 <HAL_GPIO_WritePin>
				}
			}

			osDelay(5);			/* 10hz */
 80107cc:	2005      	movs	r0, #5
 80107ce:	f014 fa47 	bl	8024c60 <osDelay>
			if(f_open(&SDFile,"0:/log.txt", FA_CREATE_ALWAYS | FA_WRITE ) != FR_OK){
 80107d2:	e79e      	b.n	8010712 <_ZN2FC8ModuleSD4mainEv+0xe2>
 80107d4:	0802cbf8 	.word	0x0802cbf8
 80107d8:	2400cda8 	.word	0x2400cda8
 80107dc:	2400cfdc 	.word	0x2400cfdc
 80107e0:	0802cb78 	.word	0x0802cb78
 80107e4:	0802cb8c 	.word	0x0802cb8c
 80107e8:	2400cdac 	.word	0x2400cdac
 80107ec:	58020000 	.word	0x58020000
 80107f0:	0802cb98 	.word	0x0802cb98
 80107f4:	0802cbb0 	.word	0x0802cbb0
 80107f8:	0802cbc4 	.word	0x0802cbc4
 80107fc:	0802cbd4 	.word	0x0802cbd4
 8010800:	0802cbe0 	.word	0x0802cbe0

08010804 <Health_StartTask>:

void _putchar(char character){
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 10);
}

void Health_StartTask(void *argument){
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
	ModuleHealth::main();
 801080c:	f7ff feba 	bl	8010584 <_ZN2FC12ModuleHealth4mainEv>
}
 8010810:	bf00      	nop
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <Debug_StartTask>:
void Debug_StartTask(void *argument){
 8010818:	b580      	push	{r7, lr}
 801081a:	b0ec      	sub	sp, #432	; 0x1b0
 801081c:	af00      	add	r7, sp, #0
 801081e:	1d3b      	adds	r3, r7, #4
 8010820:	6018      	str	r0, [r3, #0]
	uint32_t tick;
	tick = osKernelGetTickCount();
 8010822:	f013 ffd5 	bl	80247d0 <osKernelGetTickCount>
 8010826:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac

	struct VehicleAttitueSP attitudeSP;
//	osDelay(2000);
//	sensorBaro.setSeaLevelPressure(gps.alt);
	while(1){
		tick += 5;
 801082a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801082e:	3305      	adds	r3, #5
 8010830:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		osDelayUntil(tick);
 8010834:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8010838:	f014 fa40 	bl	8024cbc <osDelayUntil>
		msgBus.getHealth(&health);
 801083c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8010840:	4619      	mov	r1, r3
 8010842:	48a9      	ldr	r0, [pc, #676]	; (8010ae8 <Debug_StartTask+0x2d0>)
 8010844:	f7ff fd74 	bl	8010330 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>
		hzAccel = health.accel;
 8010848:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 801084c:	4ba7      	ldr	r3, [pc, #668]	; (8010aec <Debug_StartTask+0x2d4>)
 801084e:	801a      	strh	r2, [r3, #0]
		hzBaro = health.baro;
 8010850:	f8b7 219a 	ldrh.w	r2, [r7, #410]	; 0x19a
 8010854:	4ba6      	ldr	r3, [pc, #664]	; (8010af0 <Debug_StartTask+0x2d8>)
 8010856:	801a      	strh	r2, [r3, #0]
		hzGyro = health.gyro;
 8010858:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 801085c:	4ba5      	ldr	r3, [pc, #660]	; (8010af4 <Debug_StartTask+0x2dc>)
 801085e:	801a      	strh	r2, [r3, #0]
		hzGPS = health.gps;
 8010860:	f8b7 2198 	ldrh.w	r2, [r7, #408]	; 0x198
 8010864:	4ba4      	ldr	r3, [pc, #656]	; (8010af8 <Debug_StartTask+0x2e0>)
 8010866:	801a      	strh	r2, [r3, #0]
		hzMag = health.mag;
 8010868:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 801086c:	4ba3      	ldr	r3, [pc, #652]	; (8010afc <Debug_StartTask+0x2e4>)
 801086e:	801a      	strh	r2, [r3, #0]
		hzAHRS = health.ahrs;
 8010870:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8010874:	4ba2      	ldr	r3, [pc, #648]	; (8010b00 <Debug_StartTask+0x2e8>)
 8010876:	801a      	strh	r2, [r3, #0]
		hzRC = health.rc;
 8010878:	f8b7 2194 	ldrh.w	r2, [r7, #404]	; 0x194
 801087c:	4ba1      	ldr	r3, [pc, #644]	; (8010b04 <Debug_StartTask+0x2ec>)
 801087e:	801a      	strh	r2, [r3, #0]
		hzAtti = health.attitudeController;
 8010880:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 8010884:	4ba0      	ldr	r3, [pc, #640]	; (8010b08 <Debug_StartTask+0x2f0>)
 8010886:	801a      	strh	r2, [r3, #0]
		hzPos = health.positionController;
 8010888:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 801088c:	4b9f      	ldr	r3, [pc, #636]	; (8010b0c <Debug_StartTask+0x2f4>)
 801088e:	801a      	strh	r2, [r3, #0]
		hzINS = health.ins;
 8010890:	f8b7 21a0 	ldrh.w	r2, [r7, #416]	; 0x1a0
 8010894:	4b9e      	ldr	r3, [pc, #632]	; (8010b10 <Debug_StartTask+0x2f8>)
 8010896:	801a      	strh	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

		msgBus.getMotorPWM(&pwm);
 8010898:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801089c:	4619      	mov	r1, r3
 801089e:	4892      	ldr	r0, [pc, #584]	; (8010ae8 <Debug_StartTask+0x2d0>)
 80108a0:	f7ff fd81 	bl	80103a6 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>
		pwm1 = pwm.m1;
 80108a4:	f8b7 2178 	ldrh.w	r2, [r7, #376]	; 0x178
 80108a8:	4b9a      	ldr	r3, [pc, #616]	; (8010b14 <Debug_StartTask+0x2fc>)
 80108aa:	801a      	strh	r2, [r3, #0]
		pwm2 = pwm.m2;
 80108ac:	f8b7 217a 	ldrh.w	r2, [r7, #378]	; 0x17a
 80108b0:	4b99      	ldr	r3, [pc, #612]	; (8010b18 <Debug_StartTask+0x300>)
 80108b2:	801a      	strh	r2, [r3, #0]
		pwm3 = pwm.m3;
 80108b4:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 80108b8:	4b98      	ldr	r3, [pc, #608]	; (8010b1c <Debug_StartTask+0x304>)
 80108ba:	801a      	strh	r2, [r3, #0]
		pwm4 = pwm.m4;
 80108bc:	f8b7 217e 	ldrh.w	r2, [r7, #382]	; 0x17e
 80108c0:	4b97      	ldr	r3, [pc, #604]	; (8010b20 <Debug_StartTask+0x308>)
 80108c2:	801a      	strh	r2, [r3, #0]
		pwm5 = pwm.m5;
 80108c4:	f8b7 2180 	ldrh.w	r2, [r7, #384]	; 0x180
 80108c8:	4b96      	ldr	r3, [pc, #600]	; (8010b24 <Debug_StartTask+0x30c>)
 80108ca:	801a      	strh	r2, [r3, #0]
		pwm6 = pwm.m6;
 80108cc:	f8b7 2182 	ldrh.w	r2, [r7, #386]	; 0x182
 80108d0:	4b95      	ldr	r3, [pc, #596]	; (8010b28 <Debug_StartTask+0x310>)
 80108d2:	801a      	strh	r2, [r3, #0]

		msgBus.getAttitude(&att);
 80108d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80108d8:	4619      	mov	r1, r3
 80108da:	4883      	ldr	r0, [pc, #524]	; (8010ae8 <Debug_StartTask+0x2d0>)
 80108dc:	f7fc fd54 	bl	800d388 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
		att_roll = att.roll;
 80108e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80108e4:	4a91      	ldr	r2, [pc, #580]	; (8010b2c <Debug_StartTask+0x314>)
 80108e6:	6013      	str	r3, [r2, #0]
		att_pitch = att.pitch;
 80108e8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80108ec:	4a90      	ldr	r2, [pc, #576]	; (8010b30 <Debug_StartTask+0x318>)
 80108ee:	6013      	str	r3, [r2, #0]
		att_yaw = att.yaw;
 80108f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80108f4:	4a8f      	ldr	r2, [pc, #572]	; (8010b34 <Debug_StartTask+0x31c>)
 80108f6:	6013      	str	r3, [r2, #0]

		msgBus.getController(&ctl);
 80108f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80108fc:	4619      	mov	r1, r3
 80108fe:	487a      	ldr	r0, [pc, #488]	; (8010ae8 <Debug_StartTask+0x2d0>)
 8010900:	f7fc fcfe 	bl	800d300 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
		ctl_roll = ctl.roll;
 8010904:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8010908:	4b8b      	ldr	r3, [pc, #556]	; (8010b38 <Debug_StartTask+0x320>)
 801090a:	801a      	strh	r2, [r3, #0]
		ctl_pitch = ctl.pitch;
 801090c:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8010910:	4b8a      	ldr	r3, [pc, #552]	; (8010b3c <Debug_StartTask+0x324>)
 8010912:	801a      	strh	r2, [r3, #0]
		ctl_yaw = ctl.yaw;
 8010914:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8010918:	4b89      	ldr	r3, [pc, #548]	; (8010b40 <Debug_StartTask+0x328>)
 801091a:	801a      	strh	r2, [r3, #0]
		ctl_throtle = ctl.throttle;
 801091c:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8010920:	4b88      	ldr	r3, [pc, #544]	; (8010b44 <Debug_StartTask+0x32c>)
 8010922:	801a      	strh	r2, [r3, #0]

		if(msgBus.getBodyAccel(&bodyAccel)){
 8010924:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010928:	4619      	mov	r1, r3
 801092a:	486f      	ldr	r0, [pc, #444]	; (8010ae8 <Debug_StartTask+0x2d0>)
 801092c:	f7fa fbab 	bl	800b086 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
 8010930:	4603      	mov	r3, r0
 8010932:	2b00      	cmp	r3, #0
 8010934:	d00e      	beq.n	8010954 <Debug_StartTask+0x13c>
			body_ax = bodyAccel.xyz[0];
 8010936:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801093a:	689b      	ldr	r3, [r3, #8]
 801093c:	4a82      	ldr	r2, [pc, #520]	; (8010b48 <Debug_StartTask+0x330>)
 801093e:	6013      	str	r3, [r2, #0]
			body_ay = bodyAccel.xyz[1];
 8010940:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	4a81      	ldr	r2, [pc, #516]	; (8010b4c <Debug_StartTask+0x334>)
 8010948:	6013      	str	r3, [r2, #0]
			body_az = bodyAccel.xyz[2];
 801094a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801094e:	691b      	ldr	r3, [r3, #16]
 8010950:	4a7f      	ldr	r2, [pc, #508]	; (8010b50 <Debug_StartTask+0x338>)
 8010952:	6013      	str	r3, [r2, #0]
		}
		if(msgBus.getBodyAngularVelocity(&bodyAnglularVel)){
 8010954:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010958:	4619      	mov	r1, r3
 801095a:	4863      	ldr	r0, [pc, #396]	; (8010ae8 <Debug_StartTask+0x2d0>)
 801095c:	f7fa fbb6 	bl	800b0cc <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00e      	beq.n	8010984 <Debug_StartTask+0x16c>
			body_gx = bodyAnglularVel.xyz[0];
 8010966:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	4a79      	ldr	r2, [pc, #484]	; (8010b54 <Debug_StartTask+0x33c>)
 801096e:	6013      	str	r3, [r2, #0]
			body_gy = bodyAnglularVel.xyz[1];
 8010970:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	4a78      	ldr	r2, [pc, #480]	; (8010b58 <Debug_StartTask+0x340>)
 8010978:	6013      	str	r3, [r2, #0]
			body_gz = bodyAnglularVel.xyz[2];
 801097a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801097e:	691b      	ldr	r3, [r3, #16]
 8010980:	4a76      	ldr	r2, [pc, #472]	; (8010b5c <Debug_StartTask+0x344>)
 8010982:	6013      	str	r3, [r2, #0]
		}
//		osKernelLock();
		if(msgBus.getBarometer(&baro)){
 8010984:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010988:	4619      	mov	r1, r3
 801098a:	4857      	ldr	r0, [pc, #348]	; (8010ae8 <Debug_StartTask+0x2d0>)
 801098c:	f7fd fb40 	bl	800e010 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	d003      	beq.n	801099e <Debug_StartTask+0x186>
			baro_alt = baro.altitude;
 8010996:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801099a:	4a71      	ldr	r2, [pc, #452]	; (8010b60 <Debug_StartTask+0x348>)
 801099c:	6013      	str	r3, [r2, #0]
//			printf_("baro : %u %f\r\n", (unsigned int)baro.timestamp, baro_alt);
		}

		if(msgBus.getNedAccel(&nedAccel)){
 801099e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a2:	4619      	mov	r1, r3
 80109a4:	4850      	ldr	r0, [pc, #320]	; (8010ae8 <Debug_StartTask+0x2d0>)
 80109a6:	f7fd fb57 	bl	800e058 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 80109aa:	4603      	mov	r3, r0
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00b      	beq.n	80109c8 <Debug_StartTask+0x1b0>
			ned_ax = nedAccel.xyz[0];
 80109b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80109b4:	4a6b      	ldr	r2, [pc, #428]	; (8010b64 <Debug_StartTask+0x34c>)
 80109b6:	6013      	str	r3, [r2, #0]
			ned_ay = nedAccel.xyz[1];
 80109b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109bc:	4a6a      	ldr	r2, [pc, #424]	; (8010b68 <Debug_StartTask+0x350>)
 80109be:	6013      	str	r3, [r2, #0]
			ned_az = nedAccel.xyz[2];
 80109c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80109c4:	4a69      	ldr	r2, [pc, #420]	; (8010b6c <Debug_StartTask+0x354>)
 80109c6:	6013      	str	r3, [r2, #0]
//			printf_("ned accel : %u %f %f %f\r\n", (unsigned int)nedAccel.timestamp, nedAccel.xyz[0], nedAccel.xyz[1], nedAccel.xyz[2]);
		}

		if(msgBus.getGPS(&gps)){
 80109c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80109cc:	4619      	mov	r1, r3
 80109ce:	4846      	ldr	r0, [pc, #280]	; (8010ae8 <Debug_StartTask+0x2d0>)
 80109d0:	f7fd fafe 	bl	800dfd0 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d016      	beq.n	8010a08 <Debug_StartTask+0x1f0>
			gps_lat = gps.lat;
 80109da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80109de:	ed93 7b04 	vldr	d7, [r3, #16]
 80109e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80109e6:	4b62      	ldr	r3, [pc, #392]	; (8010b70 <Debug_StartTask+0x358>)
 80109e8:	edc3 7a00 	vstr	s15, [r3]
			gps_lon = gps.lon;
 80109ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80109f0:	ed93 7b06 	vldr	d7, [r3, #24]
 80109f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80109f8:	4b5e      	ldr	r3, [pc, #376]	; (8010b74 <Debug_StartTask+0x35c>)
 80109fa:	edc3 7a00 	vstr	s15, [r3]
			gps_alt = gps.alt;
 80109fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010a02:	6a1b      	ldr	r3, [r3, #32]
 8010a04:	4a5c      	ldr	r2, [pc, #368]	; (8010b78 <Debug_StartTask+0x360>)
 8010a06:	6013      	str	r3, [r2, #0]
//			printf_("GPS : %u %f %f %f %f %f %f %f %u %f %f\r\n", (unsigned int)gps.timestamp, gps.lat, gps.lon, gps.alt, gps.velN, gps.velE
//						   , gps.direction, gps.vel
//						   , gps.fixType, gps.hdop, gps.vdop);
		}

		if(msgBus.getLocalPosition(&localPosition)){
 8010a08:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	4836      	ldr	r0, [pc, #216]	; (8010ae8 <Debug_StartTask+0x2d0>)
 8010a10:	f7fd fcfe 	bl	800e410 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d017      	beq.n	8010a4a <Debug_StartTask+0x232>
			local_x = localPosition.x;
 8010a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a1e:	4a57      	ldr	r2, [pc, #348]	; (8010b7c <Debug_StartTask+0x364>)
 8010a20:	6013      	str	r3, [r2, #0]
			local_y = localPosition.y;
 8010a22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010a26:	4a56      	ldr	r2, [pc, #344]	; (8010b80 <Debug_StartTask+0x368>)
 8010a28:	6013      	str	r3, [r2, #0]
			local_z = localPosition.z;
 8010a2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010a2e:	4a55      	ldr	r2, [pc, #340]	; (8010b84 <Debug_StartTask+0x36c>)
 8010a30:	6013      	str	r3, [r2, #0]
			local_vx = localPosition.vx;
 8010a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010a36:	4a54      	ldr	r2, [pc, #336]	; (8010b88 <Debug_StartTask+0x370>)
 8010a38:	6013      	str	r3, [r2, #0]
			local_vy = localPosition.vy;
 8010a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a3e:	4a53      	ldr	r2, [pc, #332]	; (8010b8c <Debug_StartTask+0x374>)
 8010a40:	6013      	str	r3, [r2, #0]
			local_vz = localPosition.vz;
 8010a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010a46:	4a52      	ldr	r2, [pc, #328]	; (8010b90 <Debug_StartTask+0x378>)
 8010a48:	6013      	str	r3, [r2, #0]
//			printf_("ned position : %u %f %f %f\r\n", (unsigned int)localPosition.timestamp, local_x, local_y, local_z);
		}

		if(msgBus.getBodyMag(&bodyMag)){
 8010a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a4e:	4619      	mov	r1, r3
 8010a50:	4825      	ldr	r0, [pc, #148]	; (8010ae8 <Debug_StartTask+0x2d0>)
 8010a52:	f7fa fb5f 	bl	800b114 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d00e      	beq.n	8010a7a <Debug_StartTask+0x262>
			mag_x = bodyMag.xyz[0];
 8010a5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	4a4c      	ldr	r2, [pc, #304]	; (8010b94 <Debug_StartTask+0x37c>)
 8010a64:	6013      	str	r3, [r2, #0]
			mag_y = bodyMag.xyz[1];
 8010a66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	4a4a      	ldr	r2, [pc, #296]	; (8010b98 <Debug_StartTask+0x380>)
 8010a6e:	6013      	str	r3, [r2, #0]
			mag_z = bodyMag.xyz[2];
 8010a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a74:	691b      	ldr	r3, [r3, #16]
 8010a76:	4a49      	ldr	r2, [pc, #292]	; (8010b9c <Debug_StartTask+0x384>)
 8010a78:	6013      	str	r3, [r2, #0]
		}

		if(msgBus.getModeFlag(&modeFlag)){
 8010a7a:	f107 0320 	add.w	r3, r7, #32
 8010a7e:	4619      	mov	r1, r3
 8010a80:	4819      	ldr	r0, [pc, #100]	; (8010ae8 <Debug_StartTask+0x2d0>)
 8010a82:	f7fc fca7 	bl	800d3d4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00b      	beq.n	8010aa4 <Debug_StartTask+0x28c>
			mode_arm = (uint8_t)modeFlag.armMode;
 8010a8c:	f107 0320 	add.w	r3, r7, #32
 8010a90:	689b      	ldr	r3, [r3, #8]
 8010a92:	b2da      	uxtb	r2, r3
 8010a94:	4b42      	ldr	r3, [pc, #264]	; (8010ba0 <Debug_StartTask+0x388>)
 8010a96:	701a      	strb	r2, [r3, #0]
			mode_flight = (uint8_t)modeFlag.flightMode;
 8010a98:	f107 0320 	add.w	r3, r7, #32
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	b2da      	uxtb	r2, r3
 8010aa0:	4b40      	ldr	r3, [pc, #256]	; (8010ba4 <Debug_StartTask+0x38c>)
 8010aa2:	701a      	strb	r2, [r3, #0]
		}

		if(msgBus.getVehicleAttitueSP(&attitudeSP)){
 8010aa4:	f107 0308 	add.w	r3, r7, #8
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	480f      	ldr	r0, [pc, #60]	; (8010ae8 <Debug_StartTask+0x2d0>)
 8010aac:	f7fc fc48 	bl	800d340 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d013      	beq.n	8010ade <Debug_StartTask+0x2c6>
			sp_roll = attitudeSP.roll;
 8010ab6:	f107 0308 	add.w	r3, r7, #8
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	4a3a      	ldr	r2, [pc, #232]	; (8010ba8 <Debug_StartTask+0x390>)
 8010abe:	6013      	str	r3, [r2, #0]
			sp_pitch = attitudeSP.pitch;
 8010ac0:	f107 0308 	add.w	r3, r7, #8
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	4a39      	ldr	r2, [pc, #228]	; (8010bac <Debug_StartTask+0x394>)
 8010ac8:	6013      	str	r3, [r2, #0]
			sp_throtle = attitudeSP.throttle;
 8010aca:	f107 0308 	add.w	r3, r7, #8
 8010ace:	695b      	ldr	r3, [r3, #20]
 8010ad0:	4a37      	ldr	r2, [pc, #220]	; (8010bb0 <Debug_StartTask+0x398>)
 8010ad2:	6013      	str	r3, [r2, #0]
			sp_yaw = attitudeSP.yawRate;
 8010ad4:	f107 0308 	add.w	r3, r7, #8
 8010ad8:	691b      	ldr	r3, [r3, #16]
 8010ada:	4a36      	ldr	r2, [pc, #216]	; (8010bb4 <Debug_StartTask+0x39c>)
 8010adc:	6013      	str	r3, [r2, #0]
		}
//		osKernelUnlock();
		channel = m1.Channel;
 8010ade:	4b36      	ldr	r3, [pc, #216]	; (8010bb8 <Debug_StartTask+0x3a0>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a36      	ldr	r2, [pc, #216]	; (8010bbc <Debug_StartTask+0x3a4>)
 8010ae4:	6013      	str	r3, [r2, #0]
		tick += 5;
 8010ae6:	e6a0      	b.n	801082a <Debug_StartTask+0x12>
 8010ae8:	24000a50 	.word	0x24000a50
 8010aec:	2400133e 	.word	0x2400133e
 8010af0:	24001340 	.word	0x24001340
 8010af4:	24001342 	.word	0x24001342
 8010af8:	24001344 	.word	0x24001344
 8010afc:	24001346 	.word	0x24001346
 8010b00:	24001348 	.word	0x24001348
 8010b04:	2400134a 	.word	0x2400134a
 8010b08:	2400134c 	.word	0x2400134c
 8010b0c:	2400134e 	.word	0x2400134e
 8010b10:	24001350 	.word	0x24001350
 8010b14:	24001352 	.word	0x24001352
 8010b18:	24001354 	.word	0x24001354
 8010b1c:	24001356 	.word	0x24001356
 8010b20:	24001358 	.word	0x24001358
 8010b24:	2400135a 	.word	0x2400135a
 8010b28:	2400135c 	.word	0x2400135c
 8010b2c:	24001360 	.word	0x24001360
 8010b30:	24001364 	.word	0x24001364
 8010b34:	24001368 	.word	0x24001368
 8010b38:	2400136c 	.word	0x2400136c
 8010b3c:	2400136e 	.word	0x2400136e
 8010b40:	24001370 	.word	0x24001370
 8010b44:	24001372 	.word	0x24001372
 8010b48:	240013a8 	.word	0x240013a8
 8010b4c:	240013ac 	.word	0x240013ac
 8010b50:	240013b0 	.word	0x240013b0
 8010b54:	240013b4 	.word	0x240013b4
 8010b58:	240013b8 	.word	0x240013b8
 8010b5c:	240013bc 	.word	0x240013bc
 8010b60:	24001374 	.word	0x24001374
 8010b64:	24001378 	.word	0x24001378
 8010b68:	2400137c 	.word	0x2400137c
 8010b6c:	24001380 	.word	0x24001380
 8010b70:	2400139c 	.word	0x2400139c
 8010b74:	240013a0 	.word	0x240013a0
 8010b78:	240013a4 	.word	0x240013a4
 8010b7c:	24001384 	.word	0x24001384
 8010b80:	24001388 	.word	0x24001388
 8010b84:	2400138c 	.word	0x2400138c
 8010b88:	24001390 	.word	0x24001390
 8010b8c:	24001394 	.word	0x24001394
 8010b90:	24001398 	.word	0x24001398
 8010b94:	240013c0 	.word	0x240013c0
 8010b98:	240013c4 	.word	0x240013c4
 8010b9c:	240013c8 	.word	0x240013c8
 8010ba0:	240013dc 	.word	0x240013dc
 8010ba4:	240013dd 	.word	0x240013dd
 8010ba8:	240013cc 	.word	0x240013cc
 8010bac:	240013d0 	.word	0x240013d0
 8010bb0:	240013d4 	.word	0x240013d4
 8010bb4:	240013d8 	.word	0x240013d8
 8010bb8:	24000734 	.word	0x24000734
 8010bbc:	240013e0 	.word	0x240013e0

08010bc0 <MPU9250_StartTask>:

//		osDelay(5);
	}
}

void MPU9250_StartTask(void *argument){
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = osKernelGetTickCount();
 8010bc8:	f013 fe02 	bl	80247d0 <osKernelGetTickCount>
 8010bcc:	60f8      	str	r0, [r7, #12]
	while(1){
		tick += 5;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	3305      	adds	r3, #5
 8010bd2:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick);/* 200hz */
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f014 f871 	bl	8024cbc <osDelayUntil>
		MPU9250_updateDMA();
 8010bda:	f7f0 f9ff 	bl	8000fdc <MPU9250_updateDMA>
		tick += 5;
 8010bde:	e7f6      	b.n	8010bce <MPU9250_StartTask+0xe>

08010be0 <BME280_StartTask>:
	}
}
void BME280_StartTask(void *argument){
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
	while(1){
		BME280_readIT();
 8010be8:	f7f1 f8fe 	bl	8001de8 <BME280_readIT>
		osDelay(20); 			/* 50hz */
 8010bec:	2014      	movs	r0, #20
 8010bee:	f014 f837 	bl	8024c60 <osDelay>
		BME280_readIT();
 8010bf2:	e7f9      	b.n	8010be8 <BME280_StartTask+0x8>

08010bf4 <IST8310_StartTask>:
	}
}
void IST8310_StartTask(void *argument){
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
	while(1){
//		IST8310_updataIT();
		osDelay(10); 			/* 100hz */
 8010bfc:	200a      	movs	r0, #10
 8010bfe:	f014 f82f 	bl	8024c60 <osDelay>
 8010c02:	e7fb      	b.n	8010bfc <IST8310_StartTask+0x8>

08010c04 <SD_StartTask>:
	}
}
void SD_StartTask(void *argument){
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
	ModuleSD::main();
 8010c0c:	f7ff fd10 	bl	8010630 <_ZN2FC8ModuleSD4mainEv>
}
 8010c10:	bf00      	nop
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <AHRS_StartTask>:

void AHRS_StartTask(void *argument){
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
	ModuleAHRS::main();
 8010c20:	f7ff fc16 	bl	8010450 <_ZN2FC10ModuleAHRS4mainEv>
}
 8010c24:	bf00      	nop
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <Commander_StartTask>:

void Commander_StartTask(void *argument){
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
	ModuleCommander::main();
 8010c34:	f7fc ff8c 	bl	800db50 <_ZN2FC15ModuleCommander4mainEv>
}
 8010c38:	bf00      	nop
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <Buzzer_StartTask>:

void Buzzer_StartTask(void *argument){
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
	ModuleBuzzer::main();
 8010c48:	f7fc fdfc 	bl	800d844 <_ZN2FC12ModuleBuzzer4mainEv>
}
 8010c4c:	bf00      	nop
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <AC_StartTask>:

void AC_StartTask(void *argument){
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
	ModuleAttitudeController::main();
 8010c5c:	f7ff fbca 	bl	80103f4 <_ZN2FC24ModuleAttitudeController4mainEv>
}
 8010c60:	bf00      	nop
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <INS_StartTask>:

void INS_StartTask(void *argument){
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
	ModuleINS::main();
 8010c70:	f7ff fc64 	bl	801053c <_ZN2FC9ModuleINS4mainEv>
}
 8010c74:	bf00      	nop
 8010c76:	3708      	adds	r7, #8
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <PC_StartTask>:

void PC_StartTask(void *argument){
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
	ModulePositionController::main();
 8010c84:	f7ff fc02 	bl	801048c <_ZN2FC24ModulePositionController4mainEv>
}
 8010c88:	bf00      	nop
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <cppMain>:
/*
 *  LED signal
 *  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 */

void cppMain(){
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af04      	add	r7, sp, #16
    setvbuf(stdout, NULL, _IONBF, 0);
 8010c96:	4b1f      	ldr	r3, [pc, #124]	; (8010d14 <cppMain+0x84>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	6898      	ldr	r0, [r3, #8]
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	2202      	movs	r2, #2
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	f01b f9df 	bl	802c064 <setvbuf>
    printf("test\r\n");
 8010ca6:	481c      	ldr	r0, [pc, #112]	; (8010d18 <cppMain+0x88>)
 8010ca8:	f01b f9d4 	bl	802c054 <puts>


    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 8010cac:	481b      	ldr	r0, [pc, #108]	; (8010d1c <cppMain+0x8c>)
 8010cae:	f00d f8ad 	bl	801de0c <HAL_TIM_Base_Start_IT>
	 * \setting		i2c1
	 * 				fastmode
	 * 				using global interrupt
	 * 				using dma_rx
	 */
	MPU9250(&hi2c1);
 8010cb2:	481b      	ldr	r0, [pc, #108]	; (8010d20 <cppMain+0x90>)
 8010cb4:	f7f0 f902 	bl	8000ebc <MPU9250>
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(&hi2c2, P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 8010cb8:	2300      	movs	r3, #0
 8010cba:	9302      	str	r3, [sp, #8]
 8010cbc:	2304      	movs	r3, #4
 8010cbe:	9301      	str	r3, [sp, #4]
 8010cc0:	2303      	movs	r3, #3
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	2103      	movs	r1, #3
 8010cca:	4816      	ldr	r0, [pc, #88]	; (8010d24 <cppMain+0x94>)
 8010ccc:	f7f0 ff94 	bl	8001bf8 <BME280_init>
	 * \setting		i2c2
	 * 				fastmode
	 * 				using global interrupt
	 * 	magnetometer in gps module
	 */
	IST8310(&hi2c2);
 8010cd0:	4814      	ldr	r0, [pc, #80]	; (8010d24 <cppMain+0x94>)
 8010cd2:	f7ef ffb9 	bl	8000c48 <IST8310>
	/*
	 *  \setting		uart8
	 *  				baudrate		38400
	 *  				rx_dma(circular)
	 */
    TM_GPS_Init(&huart8);
 8010cd6:	4814      	ldr	r0, [pc, #80]	; (8010d28 <cppMain+0x98>)
 8010cd8:	f7f1 fb76 	bl	80023c8 <TM_GPS_Init>
     *  				word length			9bits
     *  				parity				even
     *  				stop_bits			2
     *  				rx_dma(circular)
     */
	SBUS_init(&huart7);
 8010cdc:	4813      	ldr	r0, [pc, #76]	; (8010d2c <cppMain+0x9c>)
 8010cde:	f7ff f851 	bl	800fd84 <SBUS_init>

//	Lidar1D_init(&htim15, TIM_CHANNEL_1, TIM_CHANNEL_2);
//	Lidar1D_run();

	m1.start();
 8010ce2:	4813      	ldr	r0, [pc, #76]	; (8010d30 <cppMain+0xa0>)
 8010ce4:	f7ef fef7 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m2.start();
 8010ce8:	4812      	ldr	r0, [pc, #72]	; (8010d34 <cppMain+0xa4>)
 8010cea:	f7ef fef4 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m3.start();
 8010cee:	4812      	ldr	r0, [pc, #72]	; (8010d38 <cppMain+0xa8>)
 8010cf0:	f7ef fef1 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m4.start();
 8010cf4:	4811      	ldr	r0, [pc, #68]	; (8010d3c <cppMain+0xac>)
 8010cf6:	f7ef feee 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m5.start();
 8010cfa:	4811      	ldr	r0, [pc, #68]	; (8010d40 <cppMain+0xb0>)
 8010cfc:	f7ef feeb 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m6.start();
 8010d00:	4810      	ldr	r0, [pc, #64]	; (8010d44 <cppMain+0xb4>)
 8010d02:	f7ef fee8 	bl	8000ad6 <_ZN2FC5Motor5startEv>

    std::printf("boot complete\r\n");
 8010d06:	4810      	ldr	r0, [pc, #64]	; (8010d48 <cppMain+0xb8>)
 8010d08:	f01b f9a4 	bl	802c054 <puts>
}
 8010d0c:	bf00      	nop
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	240006b0 	.word	0x240006b0
 8010d18:	0802cc14 	.word	0x0802cc14
 8010d1c:	2400c62c 	.word	0x2400c62c
 8010d20:	2400c36c 	.word	0x2400c36c
 8010d24:	2400c3b8 	.word	0x2400c3b8
 8010d28:	2400c880 	.word	0x2400c880
 8010d2c:	2400c678 	.word	0x2400c678
 8010d30:	24000734 	.word	0x24000734
 8010d34:	24000740 	.word	0x24000740
 8010d38:	2400074c 	.word	0x2400074c
 8010d3c:	24000758 	.word	0x24000758
 8010d40:	24000764 	.word	0x24000764
 8010d44:	24000770 	.word	0x24000770
 8010d48:	0802cc1c 	.word	0x0802cc1c
 8010d4c:	00000000 	.word	0x00000000

08010d50 <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681a      	ldr	r2, [r3, #0]
 8010d5c:	4b46      	ldr	r3, [pc, #280]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d157      	bne.n	8010e16 <HAL_I2C_MemRxCpltCallback+0xc6>
		switch(MPU9250_i2cRxCpltCallback()){
 8010d66:	f7f0 f959 	bl	800101c <MPU9250_i2cRxCpltCallback>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d002      	beq.n	8010d76 <HAL_I2C_MemRxCpltCallback+0x26>
 8010d70:	2b02      	cmp	r3, #2
 8010d72:	d03d      	beq.n	8010df0 <HAL_I2C_MemRxCpltCallback+0xa0>
 8010d74:	e04f      	b.n	8010e16 <HAL_I2C_MemRxCpltCallback+0xc6>
		case 1:
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 8010d76:	4b40      	ldr	r3, [pc, #256]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010d78:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8010d7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010d80:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010e70 <HAL_I2C_MemRxCpltCallback+0x120>
 8010d84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d88:	eef7 5bc7 	vcvt.f32.f64	s11, d7
							   , mpu9250.accel[1]*FC_GRAVITY_ACCEERATION
 8010d8c:	4b3a      	ldr	r3, [pc, #232]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010d8e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8010d92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010d96:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8010e70 <HAL_I2C_MemRxCpltCallback+0x120>
 8010d9a:	ee27 7b06 	vmul.f64	d7, d7, d6
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 8010d9e:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
							   , mpu9250.accel[2]*FC_GRAVITY_ACCEERATION);
 8010da2:	4b35      	ldr	r3, [pc, #212]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010da4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8010da8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010dac:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8010e70 <HAL_I2C_MemRxCpltCallback+0x120>
 8010db0:	ee27 7b06 	vmul.f64	d7, d7, d6
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 8010db4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010db8:	eeb0 1a67 	vmov.f32	s2, s15
 8010dbc:	eef0 0a45 	vmov.f32	s1, s10
 8010dc0:	eeb0 0a65 	vmov.f32	s0, s11
 8010dc4:	482d      	ldr	r0, [pc, #180]	; (8010e7c <HAL_I2C_MemRxCpltCallback+0x12c>)
 8010dc6:	f7fe f8bd 	bl	800ef44 <_ZN2FC11SensorAccel8setAccelEfff>
			sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8010dca:	4b2b      	ldr	r3, [pc, #172]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010dcc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8010dd0:	4b29      	ldr	r3, [pc, #164]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010dd2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8010dd6:	4b28      	ldr	r3, [pc, #160]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010dd8:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8010ddc:	eeb0 1a66 	vmov.f32	s2, s13
 8010de0:	eef0 0a47 	vmov.f32	s1, s14
 8010de4:	eeb0 0a67 	vmov.f32	s0, s15
 8010de8:	4825      	ldr	r0, [pc, #148]	; (8010e80 <HAL_I2C_MemRxCpltCallback+0x130>)
 8010dea:	f7fe fca3 	bl	800f734 <_ZN2FC10SensorGyro7setGyroEfff>
			break;
 8010dee:	e012      	b.n	8010e16 <HAL_I2C_MemRxCpltCallback+0xc6>
		case 2:
			sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
 8010df0:	4b21      	ldr	r3, [pc, #132]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010df2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8010df6:	4b20      	ldr	r3, [pc, #128]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010df8:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8010dfc:	4b1e      	ldr	r3, [pc, #120]	; (8010e78 <HAL_I2C_MemRxCpltCallback+0x128>)
 8010dfe:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8010e02:	eeb0 1a66 	vmov.f32	s2, s13
 8010e06:	eef0 0a47 	vmov.f32	s1, s14
 8010e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8010e0e:	481d      	ldr	r0, [pc, #116]	; (8010e84 <HAL_I2C_MemRxCpltCallback+0x134>)
 8010e10:	f7fe fe06 	bl	800fa20 <_ZN2FC9SensorMag6setMagEfff>
			break;
 8010e14:	bf00      	nop
		}
	}

	if(hi2c->Instance == ist8310.hi2c->Instance){
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	4b1b      	ldr	r3, [pc, #108]	; (8010e88 <HAL_I2C_MemRxCpltCallback+0x138>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d103      	bne.n	8010e2c <HAL_I2C_MemRxCpltCallback+0xdc>
		if(IST8310_i2cRxCpltCallback()){
 8010e24:	f7ef ff24 	bl	8000c70 <IST8310_i2cRxCpltCallback>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	2b00      	cmp	r3, #0
//			sensorMag.setMag(ist8310.raw[0], ist8310.raw[1], ist8310.raw[2]);
		}
	}

	if(hi2c->Instance == bme280.hi2c->Instance){
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	4b16      	ldr	r3, [pc, #88]	; (8010e8c <HAL_I2C_MemRxCpltCallback+0x13c>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d116      	bne.n	8010e68 <HAL_I2C_MemRxCpltCallback+0x118>
		if(BME280_i2cRxCpltCallback()){
 8010e3a:	f7f0 fff5 	bl	8001e28 <BME280_i2cRxCpltCallback>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	bf14      	ite	ne
 8010e44:	2301      	movne	r3, #1
 8010e46:	2300      	moveq	r3, #0
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00c      	beq.n	8010e68 <HAL_I2C_MemRxCpltCallback+0x118>
			sensorBaro.setBaro(bme280.P, bme280.T);
 8010e4e:	4b0f      	ldr	r3, [pc, #60]	; (8010e8c <HAL_I2C_MemRxCpltCallback+0x13c>)
 8010e50:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8010e54:	4b0d      	ldr	r3, [pc, #52]	; (8010e8c <HAL_I2C_MemRxCpltCallback+0x13c>)
 8010e56:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8010e5a:	eef0 0a47 	vmov.f32	s1, s14
 8010e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8010e62:	480b      	ldr	r0, [pc, #44]	; (8010e90 <HAL_I2C_MemRxCpltCallback+0x140>)
 8010e64:	f7fe f9e6 	bl	800f234 <_ZN2FC10SensorBaro7setBaroEff>
		}
	}
}
 8010e68:	bf00      	nop
 8010e6a:	3708      	adds	r7, #8
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	3a92a305 	.word	0x3a92a305
 8010e74:	40239d01 	.word	0x40239d01
 8010e78:	24000fa4 	.word	0x24000fa4
 8010e7c:	24000e30 	.word	0x24000e30
 8010e80:	24000f10 	.word	0x24000f10
 8010e84:	24000f50 	.word	0x24000f50
 8010e88:	24001320 	.word	0x24001320
 8010e8c:	24000794 	.word	0x24000794
 8010e90:	24000e70 	.word	0x24000e70

08010e94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e98:	ed2d 8b06 	vpush	{d8-d10}
 8010e9c:	b087      	sub	sp, #28
 8010e9e:	af04      	add	r7, sp, #16
 8010ea0:	6078      	str	r0, [r7, #4]
	if(huart->Instance == sbus.huart->Instance){
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	4b41      	ldr	r3, [pc, #260]	; (8010fac <HAL_UART_RxCpltCallback+0x118>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d12f      	bne.n	8010f10 <HAL_UART_RxCpltCallback+0x7c>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 8010eb0:	f7ff f9ac 	bl	801020c <SBUS_uartRxCpltCallback>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	bf0c      	ite	eq
 8010eba:	2301      	moveq	r3, #1
 8010ebc:	2300      	movne	r3, #0
 8010ebe:	b2db      	uxtb	r3, r3
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d025      	beq.n	8010f10 <HAL_UART_RxCpltCallback+0x7c>
			rc.setRC(SBUS_getChannel(2),	/* roll */
 8010ec4:	2002      	movs	r0, #2
 8010ec6:	f7ff fa1f 	bl	8010308 <SBUS_getChannel>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	461e      	mov	r6, r3
 8010ece:	2003      	movs	r0, #3
 8010ed0:	f7ff fa1a 	bl	8010308 <SBUS_getChannel>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	4698      	mov	r8, r3
 8010ed8:	2004      	movs	r0, #4
 8010eda:	f7ff fa15 	bl	8010308 <SBUS_getChannel>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4699      	mov	r9, r3
 8010ee2:	2001      	movs	r0, #1
 8010ee4:	f7ff fa10 	bl	8010308 <SBUS_getChannel>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	461c      	mov	r4, r3
 8010eec:	200b      	movs	r0, #11
 8010eee:	f7ff fa0b 	bl	8010308 <SBUS_getChannel>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	461d      	mov	r5, r3
 8010ef6:	2005      	movs	r0, #5
 8010ef8:	f7ff fa06 	bl	8010308 <SBUS_getChannel>
 8010efc:	4603      	mov	r3, r0
 8010efe:	9302      	str	r3, [sp, #8]
 8010f00:	9501      	str	r5, [sp, #4]
 8010f02:	9400      	str	r4, [sp, #0]
 8010f04:	464b      	mov	r3, r9
 8010f06:	4642      	mov	r2, r8
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4829      	ldr	r0, [pc, #164]	; (8010fb0 <HAL_UART_RxCpltCallback+0x11c>)
 8010f0c:	f7fd fe7c 	bl	800ec08 <_ZN2FC2RC5setRCEtttttt>
//							 TM_GPS_ConvertSpeed(gpsUart.gpsData.Speed, TM_GPS_Speed_MeterPerSecond), gpsUart.gpsData.Direction, gpsUart.gpsData.HDOP, gpsUart.gpsData.VDOP,
//							 gpsUart.gpsData.Satellites, gpsUart.gpsData.FixMode, 0/* UTC in microsecond */);
//		}
//	}

	if(TM_GPS_Update(huart) == TM_GPS_Result_NewData && gpsUart.gpsData.Fix != 0 /* gps must fixed */){
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f7f1 faf3 	bl	80024fc <TM_GPS_Update>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d105      	bne.n	8010f28 <HAL_UART_RxCpltCallback+0x94>
 8010f1c:	4b25      	ldr	r3, [pc, #148]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f1e:	7d5b      	ldrb	r3, [r3, #21]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d001      	beq.n	8010f28 <HAL_UART_RxCpltCallback+0x94>
 8010f24:	2301      	movs	r3, #1
 8010f26:	e000      	b.n	8010f2a <HAL_UART_RxCpltCallback+0x96>
 8010f28:	2300      	movs	r3, #0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d037      	beq.n	8010f9e <HAL_UART_RxCpltCallback+0x10a>
		sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 8010f2e:	4b21      	ldr	r3, [pc, #132]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f30:	ed93 8b00 	vldr	d8, [r3]
 8010f34:	4b1f      	ldr	r3, [pc, #124]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f36:	ed93 9b02 	vldr	d9, [r3, #8]
 8010f3a:	4b1e      	ldr	r3, [pc, #120]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f3c:	ed93 aa04 	vldr	s20, [r3, #16]
 8010f40:	4b1c      	ldr	r3, [pc, #112]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f42:	edd3 7a08 	vldr	s15, [r3, #32]
 8010f46:	2001      	movs	r0, #1
 8010f48:	eeb0 0a67 	vmov.f32	s0, s15
 8010f4c:	f7f1 fb14 	bl	8002578 <TM_GPS_ConvertSpeed>
 8010f50:	eeb0 6a40 	vmov.f32	s12, s0
 8010f54:	4b17      	ldr	r3, [pc, #92]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f56:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010f5a:	4b16      	ldr	r3, [pc, #88]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f5c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8010f60:	4b14      	ldr	r3, [pc, #80]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f62:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8010f66:	4b13      	ldr	r3, [pc, #76]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f68:	7d19      	ldrb	r1, [r3, #20]
 8010f6a:	4b12      	ldr	r3, [pc, #72]	; (8010fb4 <HAL_UART_RxCpltCallback+0x120>)
 8010f6c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8010f70:	f04f 0300 	mov.w	r3, #0
 8010f74:	f04f 0400 	mov.w	r4, #0
 8010f78:	e9cd 3400 	strd	r3, r4, [sp]
 8010f7c:	eeb0 4a66 	vmov.f32	s8, s13
 8010f80:	eef0 3a47 	vmov.f32	s7, s14
 8010f84:	eeb0 3a67 	vmov.f32	s6, s15
 8010f88:	eef0 2a46 	vmov.f32	s5, s12
 8010f8c:	eeb0 2a4a 	vmov.f32	s4, s20
 8010f90:	eeb0 1b49 	vmov.f64	d1, d9
 8010f94:	eeb0 0b48 	vmov.f64	d0, d8
 8010f98:	4807      	ldr	r0, [pc, #28]	; (8010fb8 <HAL_UART_RxCpltCallback+0x124>)
 8010f9a:	f7fe fa9d 	bl	800f4d8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
						 TM_GPS_ConvertSpeed(gpsUart.gpsData.Speed, TM_GPS_Speed_MeterPerSecond), gpsUart.gpsData.Direction, gpsUart.gpsData.HDOP, gpsUart.gpsData.VDOP,
						 gpsUart.gpsData.Satellites, gpsUart.gpsData.FixMode, 0/* UTC in microsecond */);
	}
}
 8010f9e:	bf00      	nop
 8010fa0:	370c      	adds	r7, #12
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	ecbd 8b06 	vpop	{d8-d10}
 8010fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fac:	24001030 	.word	0x24001030
 8010fb0:	24000e08 	.word	0x24000e08
 8010fb4:	240010c8 	.word	0x240010c8
 8010fb8:	24000ea8 	.word	0x24000ea8

08010fbc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
	Lidar1D_CaptureCallback(htim);
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7ef ff4f 	bl	8000e68 <Lidar1D_CaptureCallback>
}
 8010fca:	bf00      	nop
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
	...

08010fd4 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>:
template<typename T>
class Freq {
public:
	static uint16_t freqCnt;

	static uint16_t checkFreq(){
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8010fda:	4b06      	ldr	r3, [pc, #24]	; (8010ff4 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8010fdc:	881b      	ldrh	r3, [r3, #0]
 8010fde:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8010fe0:	4b04      	ldr	r3, [pc, #16]	; (8010ff4 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	801a      	strh	r2, [r3, #0]
		return res;
 8010fe6:	88fb      	ldrh	r3, [r7, #6]
	}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr
 8010ff4:	24000e68 	.word	0x24000e68

08010ff8 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8010ff8:	b480      	push	{r7}
 8010ffa:	b083      	sub	sp, #12
 8010ffc:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8010ffe:	4b06      	ldr	r3, [pc, #24]	; (8011018 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 8011000:	881b      	ldrh	r3, [r3, #0]
 8011002:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8011004:	4b04      	ldr	r3, [pc, #16]	; (8011018 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 8011006:	2200      	movs	r2, #0
 8011008:	801a      	strh	r2, [r3, #0]
		return res;
 801100a:	88fb      	ldrh	r3, [r7, #6]
	}
 801100c:	4618      	mov	r0, r3
 801100e:	370c      	adds	r7, #12
 8011010:	46bd      	mov	sp, r7
 8011012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011016:	4770      	bx	lr
 8011018:	24000f48 	.word	0x24000f48

0801101c <_ZN2FC4FreqINS_2RCEE9checkFreqEv>:
	static uint16_t checkFreq(){
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8011022:	4b06      	ldr	r3, [pc, #24]	; (801103c <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 8011024:	881b      	ldrh	r3, [r3, #0]
 8011026:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8011028:	4b04      	ldr	r3, [pc, #16]	; (801103c <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 801102a:	2200      	movs	r2, #0
 801102c:	801a      	strh	r2, [r3, #0]
		return res;
 801102e:	88fb      	ldrh	r3, [r7, #6]
	}
 8011030:	4618      	mov	r0, r3
 8011032:	370c      	adds	r7, #12
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr
 801103c:	24000e28 	.word	0x24000e28

08011040 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8011046:	4b06      	ldr	r3, [pc, #24]	; (8011060 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 8011048:	881b      	ldrh	r3, [r3, #0]
 801104a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 801104c:	4b04      	ldr	r3, [pc, #16]	; (8011060 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 801104e:	2200      	movs	r2, #0
 8011050:	801a      	strh	r2, [r3, #0]
		return res;
 8011052:	88fb      	ldrh	r3, [r7, #6]
	}
 8011054:	4618      	mov	r0, r3
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr
 8011060:	24000fa0 	.word	0x24000fa0

08011064 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801106a:	4b06      	ldr	r3, [pc, #24]	; (8011084 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 801106c:	881b      	ldrh	r3, [r3, #0]
 801106e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8011070:	4b04      	ldr	r3, [pc, #16]	; (8011084 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 8011072:	2200      	movs	r2, #0
 8011074:	801a      	strh	r2, [r3, #0]
		return res;
 8011076:	88fb      	ldrh	r3, [r7, #6]
	}
 8011078:	4618      	mov	r0, r3
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr
 8011084:	24000f08 	.word	0x24000f08

08011088 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801108e:	4b06      	ldr	r3, [pc, #24]	; (80110a8 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 8011090:	881b      	ldrh	r3, [r3, #0]
 8011092:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8011094:	4b04      	ldr	r3, [pc, #16]	; (80110a8 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 8011096:	2200      	movs	r2, #0
 8011098:	801a      	strh	r2, [r3, #0]
		return res;
 801109a:	88fb      	ldrh	r3, [r7, #6]
	}
 801109c:	4618      	mov	r0, r3
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr
 80110a8:	24000ea0 	.word	0x24000ea0

080110ac <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80110b2:	4b06      	ldr	r3, [pc, #24]	; (80110cc <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 80110b4:	881b      	ldrh	r3, [r3, #0]
 80110b6:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80110b8:	4b04      	ldr	r3, [pc, #16]	; (80110cc <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 80110ba:	2200      	movs	r2, #0
 80110bc:	801a      	strh	r2, [r3, #0]
		return res;
 80110be:	88fb      	ldrh	r3, [r7, #6]
	}
 80110c0:	4618      	mov	r0, r3
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr
 80110cc:	24000978 	.word	0x24000978

080110d0 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80110d0:	b480      	push	{r7}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80110d6:	4b06      	ldr	r3, [pc, #24]	; (80110f0 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 80110d8:	881b      	ldrh	r3, [r3, #0]
 80110da:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80110dc:	4b04      	ldr	r3, [pc, #16]	; (80110f0 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 80110de:	2200      	movs	r2, #0
 80110e0:	801a      	strh	r2, [r3, #0]
		return res;
 80110e2:	88fb      	ldrh	r3, [r7, #6]
	}
 80110e4:	4618      	mov	r0, r3
 80110e6:	370c      	adds	r7, #12
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr
 80110f0:	240013e8 	.word	0x240013e8

080110f4 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80110f4:	b480      	push	{r7}
 80110f6:	b083      	sub	sp, #12
 80110f8:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80110fa:	4b06      	ldr	r3, [pc, #24]	; (8011114 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 80110fc:	881b      	ldrh	r3, [r3, #0]
 80110fe:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8011100:	4b04      	ldr	r3, [pc, #16]	; (8011114 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 8011102:	2200      	movs	r2, #0
 8011104:	801a      	strh	r2, [r3, #0]
		return res;
 8011106:	88fb      	ldrh	r3, [r7, #6]
	}
 8011108:	4618      	mov	r0, r3
 801110a:	370c      	adds	r7, #12
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr
 8011114:	240013e4 	.word	0x240013e4

08011118 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8011118:	b480      	push	{r7}
 801111a:	b083      	sub	sp, #12
 801111c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801111e:	4b06      	ldr	r3, [pc, #24]	; (8011138 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8011124:	4b04      	ldr	r3, [pc, #16]	; (8011138 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 8011126:	2200      	movs	r2, #0
 8011128:	801a      	strh	r2, [r3, #0]
		return res;
 801112a:	88fb      	ldrh	r3, [r7, #6]
	}
 801112c:	4618      	mov	r0, r3
 801112e:	370c      	adds	r7, #12
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr
 8011138:	240013e6 	.word	0x240013e6

0801113c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b088      	sub	sp, #32
 8011140:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8011142:	1d3b      	adds	r3, r7, #4
 8011144:	2200      	movs	r2, #0
 8011146:	601a      	str	r2, [r3, #0]
 8011148:	605a      	str	r2, [r3, #4]
 801114a:	609a      	str	r2, [r3, #8]
 801114c:	60da      	str	r2, [r3, #12]
 801114e:	611a      	str	r2, [r3, #16]
 8011150:	615a      	str	r2, [r3, #20]
 8011152:	619a      	str	r2, [r3, #24]

  /** Common config
  */
  hadc3.Instance = ADC3;
 8011154:	4b28      	ldr	r3, [pc, #160]	; (80111f8 <MX_ADC3_Init+0xbc>)
 8011156:	4a29      	ldr	r2, [pc, #164]	; (80111fc <MX_ADC3_Init+0xc0>)
 8011158:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 801115a:	4b27      	ldr	r3, [pc, #156]	; (80111f8 <MX_ADC3_Init+0xbc>)
 801115c:	2200      	movs	r2, #0
 801115e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8011160:	4b25      	ldr	r3, [pc, #148]	; (80111f8 <MX_ADC3_Init+0xbc>)
 8011162:	2200      	movs	r2, #0
 8011164:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8011166:	4b24      	ldr	r3, [pc, #144]	; (80111f8 <MX_ADC3_Init+0xbc>)
 8011168:	2200      	movs	r2, #0
 801116a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801116c:	4b22      	ldr	r3, [pc, #136]	; (80111f8 <MX_ADC3_Init+0xbc>)
 801116e:	2204      	movs	r2, #4
 8011170:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8011172:	4b21      	ldr	r3, [pc, #132]	; (80111f8 <MX_ADC3_Init+0xbc>)
 8011174:	2200      	movs	r2, #0
 8011176:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8011178:	4b1f      	ldr	r3, [pc, #124]	; (80111f8 <MX_ADC3_Init+0xbc>)
 801117a:	2200      	movs	r2, #0
 801117c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 801117e:	4b1e      	ldr	r3, [pc, #120]	; (80111f8 <MX_ADC3_Init+0xbc>)
 8011180:	2201      	movs	r2, #1
 8011182:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8011184:	4b1c      	ldr	r3, [pc, #112]	; (80111f8 <MX_ADC3_Init+0xbc>)
 8011186:	2200      	movs	r2, #0
 8011188:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801118a:	4b1b      	ldr	r3, [pc, #108]	; (80111f8 <MX_ADC3_Init+0xbc>)
 801118c:	2200      	movs	r2, #0
 801118e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011190:	4b19      	ldr	r3, [pc, #100]	; (80111f8 <MX_ADC3_Init+0xbc>)
 8011192:	2200      	movs	r2, #0
 8011194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8011196:	4b18      	ldr	r3, [pc, #96]	; (80111f8 <MX_ADC3_Init+0xbc>)
 8011198:	2200      	movs	r2, #0
 801119a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801119c:	4b16      	ldr	r3, [pc, #88]	; (80111f8 <MX_ADC3_Init+0xbc>)
 801119e:	2200      	movs	r2, #0
 80111a0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80111a2:	4b15      	ldr	r3, [pc, #84]	; (80111f8 <MX_ADC3_Init+0xbc>)
 80111a4:	2200      	movs	r2, #0
 80111a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80111a8:	4b13      	ldr	r3, [pc, #76]	; (80111f8 <MX_ADC3_Init+0xbc>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80111b0:	4811      	ldr	r0, [pc, #68]	; (80111f8 <MX_ADC3_Init+0xbc>)
 80111b2:	f002 f92d 	bl	8013410 <HAL_ADC_Init>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d001      	beq.n	80111c0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80111bc:	f000 fd20 	bl	8011c00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80111c0:	4b0f      	ldr	r3, [pc, #60]	; (8011200 <MX_ADC3_Init+0xc4>)
 80111c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80111c4:	2306      	movs	r3, #6
 80111c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80111c8:	2300      	movs	r3, #0
 80111ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80111cc:	4b0d      	ldr	r3, [pc, #52]	; (8011204 <MX_ADC3_Init+0xc8>)
 80111ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80111d0:	2304      	movs	r3, #4
 80111d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80111d4:	2300      	movs	r3, #0
 80111d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80111d8:	2300      	movs	r3, #0
 80111da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80111dc:	1d3b      	adds	r3, r7, #4
 80111de:	4619      	mov	r1, r3
 80111e0:	4805      	ldr	r0, [pc, #20]	; (80111f8 <MX_ADC3_Init+0xbc>)
 80111e2:	f002 fab5 	bl	8013750 <HAL_ADC_ConfigChannel>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d001      	beq.n	80111f0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80111ec:	f000 fd08 	bl	8011c00 <Error_Handler>
  }

}
 80111f0:	bf00      	nop
 80111f2:	3720      	adds	r7, #32
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}
 80111f8:	24005d3c 	.word	0x24005d3c
 80111fc:	58026000 	.word	0x58026000
 8011200:	04300002 	.word	0x04300002
 8011204:	47ff0000 	.word	0x47ff0000

08011208 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	4a18      	ldr	r2, [pc, #96]	; (8011278 <HAL_ADC_MspInit+0x70>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d129      	bne.n	801126e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 801121a:	4b18      	ldr	r3, [pc, #96]	; (801127c <HAL_ADC_MspInit+0x74>)
 801121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011220:	4a16      	ldr	r2, [pc, #88]	; (801127c <HAL_ADC_MspInit+0x74>)
 8011222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801122a:	4b14      	ldr	r3, [pc, #80]	; (801127c <HAL_ADC_MspInit+0x74>)
 801122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011234:	60fb      	str	r3, [r7, #12]
 8011236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011238:	4b10      	ldr	r3, [pc, #64]	; (801127c <HAL_ADC_MspInit+0x74>)
 801123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801123e:	4a0f      	ldr	r2, [pc, #60]	; (801127c <HAL_ADC_MspInit+0x74>)
 8011240:	f043 0304 	orr.w	r3, r3, #4
 8011244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011248:	4b0c      	ldr	r3, [pc, #48]	; (801127c <HAL_ADC_MspInit+0x74>)
 801124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801124e:	f003 0304 	and.w	r3, r3, #4
 8011252:	60bb      	str	r3, [r7, #8]
 8011254:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8011256:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 801125a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801125e:	f001 ff35 	bl	80130cc <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8011262:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8011266:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801126a:	f001 ff2f 	bl	80130cc <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 801126e:	bf00      	nop
 8011270:	3710      	adds	r7, #16
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	58026000 	.word	0x58026000
 801127c:	58024400 	.word	0x58024400

08011280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011286:	4b15      	ldr	r3, [pc, #84]	; (80112dc <MX_DMA_Init+0x5c>)
 8011288:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801128c:	4a13      	ldr	r2, [pc, #76]	; (80112dc <MX_DMA_Init+0x5c>)
 801128e:	f043 0301 	orr.w	r3, r3, #1
 8011292:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011296:	4b11      	ldr	r3, [pc, #68]	; (80112dc <MX_DMA_Init+0x5c>)
 8011298:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801129c:	f003 0301 	and.w	r3, r3, #1
 80112a0:	607b      	str	r3, [r7, #4]
 80112a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 10, 0);
 80112a4:	2200      	movs	r2, #0
 80112a6:	210a      	movs	r1, #10
 80112a8:	200b      	movs	r0, #11
 80112aa:	f002 ff15 	bl	80140d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80112ae:	200b      	movs	r0, #11
 80112b0:	f002 ff2c 	bl	801410c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 80112b4:	2200      	movs	r2, #0
 80112b6:	210a      	movs	r1, #10
 80112b8:	200c      	movs	r0, #12
 80112ba:	f002 ff0d 	bl	80140d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80112be:	200c      	movs	r0, #12
 80112c0:	f002 ff24 	bl	801410c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80112c4:	2200      	movs	r2, #0
 80112c6:	2105      	movs	r1, #5
 80112c8:	200d      	movs	r0, #13
 80112ca:	f002 ff05 	bl	80140d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80112ce:	200d      	movs	r0, #13
 80112d0:	f002 ff1c 	bl	801410c <HAL_NVIC_EnableIRQ>

}
 80112d4:	bf00      	nop
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	58024400 	.word	0x58024400

080112e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80112e0:	b580      	push	{r7, lr}
 80112e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80112e4:	4a34      	ldr	r2, [pc, #208]	; (80113b8 <MX_FREERTOS_Init+0xd8>)
 80112e6:	2100      	movs	r1, #0
 80112e8:	4834      	ldr	r0, [pc, #208]	; (80113bc <MX_FREERTOS_Init+0xdc>)
 80112ea:	f013 fa99 	bl	8024820 <osThreadNew>
 80112ee:	4602      	mov	r2, r0
 80112f0:	4b33      	ldr	r3, [pc, #204]	; (80113c0 <MX_FREERTOS_Init+0xe0>)
 80112f2:	601a      	str	r2, [r3, #0]

  /* creation of MPU9250_Task */
  MPU9250_TaskHandle = osThreadNew(MPU9250_StartTask, NULL, &MPU9250_Task_attributes);
 80112f4:	4a33      	ldr	r2, [pc, #204]	; (80113c4 <MX_FREERTOS_Init+0xe4>)
 80112f6:	2100      	movs	r1, #0
 80112f8:	4833      	ldr	r0, [pc, #204]	; (80113c8 <MX_FREERTOS_Init+0xe8>)
 80112fa:	f013 fa91 	bl	8024820 <osThreadNew>
 80112fe:	4602      	mov	r2, r0
 8011300:	4b32      	ldr	r3, [pc, #200]	; (80113cc <MX_FREERTOS_Init+0xec>)
 8011302:	601a      	str	r2, [r3, #0]

  /* creation of BME280_Task */
  BME280_TaskHandle = osThreadNew(BME280_StartTask, NULL, &BME280_Task_attributes);
 8011304:	4a32      	ldr	r2, [pc, #200]	; (80113d0 <MX_FREERTOS_Init+0xf0>)
 8011306:	2100      	movs	r1, #0
 8011308:	4832      	ldr	r0, [pc, #200]	; (80113d4 <MX_FREERTOS_Init+0xf4>)
 801130a:	f013 fa89 	bl	8024820 <osThreadNew>
 801130e:	4602      	mov	r2, r0
 8011310:	4b31      	ldr	r3, [pc, #196]	; (80113d8 <MX_FREERTOS_Init+0xf8>)
 8011312:	601a      	str	r2, [r3, #0]

  /* creation of IST8310_Task */
  IST8310_TaskHandle = osThreadNew(IST8310_StartTask, NULL, &IST8310_Task_attributes);
 8011314:	4a31      	ldr	r2, [pc, #196]	; (80113dc <MX_FREERTOS_Init+0xfc>)
 8011316:	2100      	movs	r1, #0
 8011318:	4831      	ldr	r0, [pc, #196]	; (80113e0 <MX_FREERTOS_Init+0x100>)
 801131a:	f013 fa81 	bl	8024820 <osThreadNew>
 801131e:	4602      	mov	r2, r0
 8011320:	4b30      	ldr	r3, [pc, #192]	; (80113e4 <MX_FREERTOS_Init+0x104>)
 8011322:	601a      	str	r2, [r3, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(SD_StartTask, NULL, &SD_Task_attributes);
 8011324:	4a30      	ldr	r2, [pc, #192]	; (80113e8 <MX_FREERTOS_Init+0x108>)
 8011326:	2100      	movs	r1, #0
 8011328:	4830      	ldr	r0, [pc, #192]	; (80113ec <MX_FREERTOS_Init+0x10c>)
 801132a:	f013 fa79 	bl	8024820 <osThreadNew>
 801132e:	4602      	mov	r2, r0
 8011330:	4b2f      	ldr	r3, [pc, #188]	; (80113f0 <MX_FREERTOS_Init+0x110>)
 8011332:	601a      	str	r2, [r3, #0]

  /* creation of AHRS_Task */
  AHRS_TaskHandle = osThreadNew(AHRS_StartTask, NULL, &AHRS_Task_attributes);
 8011334:	4a2f      	ldr	r2, [pc, #188]	; (80113f4 <MX_FREERTOS_Init+0x114>)
 8011336:	2100      	movs	r1, #0
 8011338:	482f      	ldr	r0, [pc, #188]	; (80113f8 <MX_FREERTOS_Init+0x118>)
 801133a:	f013 fa71 	bl	8024820 <osThreadNew>
 801133e:	4602      	mov	r2, r0
 8011340:	4b2e      	ldr	r3, [pc, #184]	; (80113fc <MX_FREERTOS_Init+0x11c>)
 8011342:	601a      	str	r2, [r3, #0]

  /* creation of Commander_Task */
  Commander_TaskHandle = osThreadNew(Commander_StartTask, NULL, &Commander_Task_attributes);
 8011344:	4a2e      	ldr	r2, [pc, #184]	; (8011400 <MX_FREERTOS_Init+0x120>)
 8011346:	2100      	movs	r1, #0
 8011348:	482e      	ldr	r0, [pc, #184]	; (8011404 <MX_FREERTOS_Init+0x124>)
 801134a:	f013 fa69 	bl	8024820 <osThreadNew>
 801134e:	4602      	mov	r2, r0
 8011350:	4b2d      	ldr	r3, [pc, #180]	; (8011408 <MX_FREERTOS_Init+0x128>)
 8011352:	601a      	str	r2, [r3, #0]

  /* creation of Debug_Task */
  Debug_TaskHandle = osThreadNew(Debug_StartTask, NULL, &Debug_Task_attributes);
 8011354:	4a2d      	ldr	r2, [pc, #180]	; (801140c <MX_FREERTOS_Init+0x12c>)
 8011356:	2100      	movs	r1, #0
 8011358:	482d      	ldr	r0, [pc, #180]	; (8011410 <MX_FREERTOS_Init+0x130>)
 801135a:	f013 fa61 	bl	8024820 <osThreadNew>
 801135e:	4602      	mov	r2, r0
 8011360:	4b2c      	ldr	r3, [pc, #176]	; (8011414 <MX_FREERTOS_Init+0x134>)
 8011362:	601a      	str	r2, [r3, #0]

  /* creation of Buzzer_Task */
  Buzzer_TaskHandle = osThreadNew(Buzzer_StartTask, NULL, &Buzzer_Task_attributes);
 8011364:	4a2c      	ldr	r2, [pc, #176]	; (8011418 <MX_FREERTOS_Init+0x138>)
 8011366:	2100      	movs	r1, #0
 8011368:	482c      	ldr	r0, [pc, #176]	; (801141c <MX_FREERTOS_Init+0x13c>)
 801136a:	f013 fa59 	bl	8024820 <osThreadNew>
 801136e:	4602      	mov	r2, r0
 8011370:	4b2b      	ldr	r3, [pc, #172]	; (8011420 <MX_FREERTOS_Init+0x140>)
 8011372:	601a      	str	r2, [r3, #0]

  /* creation of Health_Task */
  Health_TaskHandle = osThreadNew(Health_StartTask, NULL, &Health_Task_attributes);
 8011374:	4a2b      	ldr	r2, [pc, #172]	; (8011424 <MX_FREERTOS_Init+0x144>)
 8011376:	2100      	movs	r1, #0
 8011378:	482b      	ldr	r0, [pc, #172]	; (8011428 <MX_FREERTOS_Init+0x148>)
 801137a:	f013 fa51 	bl	8024820 <osThreadNew>
 801137e:	4602      	mov	r2, r0
 8011380:	4b2a      	ldr	r3, [pc, #168]	; (801142c <MX_FREERTOS_Init+0x14c>)
 8011382:	601a      	str	r2, [r3, #0]

  /* creation of AC_Task */
  AC_TaskHandle = osThreadNew(AC_StartTask, NULL, &AC_Task_attributes);
 8011384:	4a2a      	ldr	r2, [pc, #168]	; (8011430 <MX_FREERTOS_Init+0x150>)
 8011386:	2100      	movs	r1, #0
 8011388:	482a      	ldr	r0, [pc, #168]	; (8011434 <MX_FREERTOS_Init+0x154>)
 801138a:	f013 fa49 	bl	8024820 <osThreadNew>
 801138e:	4602      	mov	r2, r0
 8011390:	4b29      	ldr	r3, [pc, #164]	; (8011438 <MX_FREERTOS_Init+0x158>)
 8011392:	601a      	str	r2, [r3, #0]

  /* creation of INS_Task */
  INS_TaskHandle = osThreadNew(INS_StartTask, NULL, &INS_Task_attributes);
 8011394:	4a29      	ldr	r2, [pc, #164]	; (801143c <MX_FREERTOS_Init+0x15c>)
 8011396:	2100      	movs	r1, #0
 8011398:	4829      	ldr	r0, [pc, #164]	; (8011440 <MX_FREERTOS_Init+0x160>)
 801139a:	f013 fa41 	bl	8024820 <osThreadNew>
 801139e:	4602      	mov	r2, r0
 80113a0:	4b28      	ldr	r3, [pc, #160]	; (8011444 <MX_FREERTOS_Init+0x164>)
 80113a2:	601a      	str	r2, [r3, #0]

  /* creation of PC_Task */
  PC_TaskHandle = osThreadNew(PC_StartTask, NULL, &PC_Task_attributes);
 80113a4:	4a28      	ldr	r2, [pc, #160]	; (8011448 <MX_FREERTOS_Init+0x168>)
 80113a6:	2100      	movs	r1, #0
 80113a8:	4828      	ldr	r0, [pc, #160]	; (801144c <MX_FREERTOS_Init+0x16c>)
 80113aa:	f013 fa39 	bl	8024820 <osThreadNew>
 80113ae:	4602      	mov	r2, r0
 80113b0:	4b27      	ldr	r3, [pc, #156]	; (8011450 <MX_FREERTOS_Init+0x170>)
 80113b2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80113b4:	bf00      	nop
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	0802d558 	.word	0x0802d558
 80113bc:	08011455 	.word	0x08011455
 80113c0:	24005da0 	.word	0x24005da0
 80113c4:	0802d57c 	.word	0x0802d57c
 80113c8:	08010bc1 	.word	0x08010bc1
 80113cc:	2400943c 	.word	0x2400943c
 80113d0:	0802d5a0 	.word	0x0802d5a0
 80113d4:	08010be1 	.word	0x08010be1
 80113d8:	24009908 	.word	0x24009908
 80113dc:	0802d5c4 	.word	0x0802d5c4
 80113e0:	08010bf5 	.word	0x08010bf5
 80113e4:	240065a8 	.word	0x240065a8
 80113e8:	0802d5e8 	.word	0x0802d5e8
 80113ec:	08010c05 	.word	0x08010c05
 80113f0:	24008dac 	.word	0x24008dac
 80113f4:	0802d60c 	.word	0x0802d60c
 80113f8:	08010c19 	.word	0x08010c19
 80113fc:	240098a4 	.word	0x240098a4
 8011400:	0802d630 	.word	0x0802d630
 8011404:	08010c2d 	.word	0x08010c2d
 8011408:	24008fb0 	.word	0x24008fb0
 801140c:	0802d654 	.word	0x0802d654
 8011410:	08010819 	.word	0x08010819
 8011414:	2400926c 	.word	0x2400926c
 8011418:	0802d678 	.word	0x0802d678
 801141c:	08010c41 	.word	0x08010c41
 8011420:	24009904 	.word	0x24009904
 8011424:	0802d69c 	.word	0x0802d69c
 8011428:	08010805 	.word	0x08010805
 801142c:	2400990c 	.word	0x2400990c
 8011430:	0802d6c0 	.word	0x0802d6c0
 8011434:	08010c55 	.word	0x08010c55
 8011438:	24009440 	.word	0x24009440
 801143c:	0802d6e4 	.word	0x0802d6e4
 8011440:	08010c69 	.word	0x08010c69
 8011444:	240065a4 	.word	0x240065a4
 8011448:	0802d708 	.word	0x0802d708
 801144c:	08010c7d 	.word	0x08010c7d
 8011450:	240094a0 	.word	0x240094a0

08011454 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801145c:	2001      	movs	r0, #1
 801145e:	f013 fbff 	bl	8024c60 <osDelay>
 8011462:	e7fb      	b.n	801145c <StartDefaultTask+0x8>

08011464 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA1   ------> S_TIM5_CH2
*/
void MX_GPIO_Init(void)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b08e      	sub	sp, #56	; 0x38
 8011468:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801146e:	2200      	movs	r2, #0
 8011470:	601a      	str	r2, [r3, #0]
 8011472:	605a      	str	r2, [r3, #4]
 8011474:	609a      	str	r2, [r3, #8]
 8011476:	60da      	str	r2, [r3, #12]
 8011478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801147a:	4b8c      	ldr	r3, [pc, #560]	; (80116ac <MX_GPIO_Init+0x248>)
 801147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011480:	4a8a      	ldr	r2, [pc, #552]	; (80116ac <MX_GPIO_Init+0x248>)
 8011482:	f043 0310 	orr.w	r3, r3, #16
 8011486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801148a:	4b88      	ldr	r3, [pc, #544]	; (80116ac <MX_GPIO_Init+0x248>)
 801148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011490:	f003 0310 	and.w	r3, r3, #16
 8011494:	623b      	str	r3, [r7, #32]
 8011496:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011498:	4b84      	ldr	r3, [pc, #528]	; (80116ac <MX_GPIO_Init+0x248>)
 801149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801149e:	4a83      	ldr	r2, [pc, #524]	; (80116ac <MX_GPIO_Init+0x248>)
 80114a0:	f043 0304 	orr.w	r3, r3, #4
 80114a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80114a8:	4b80      	ldr	r3, [pc, #512]	; (80116ac <MX_GPIO_Init+0x248>)
 80114aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114ae:	f003 0304 	and.w	r3, r3, #4
 80114b2:	61fb      	str	r3, [r7, #28]
 80114b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80114b6:	4b7d      	ldr	r3, [pc, #500]	; (80116ac <MX_GPIO_Init+0x248>)
 80114b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114bc:	4a7b      	ldr	r2, [pc, #492]	; (80116ac <MX_GPIO_Init+0x248>)
 80114be:	f043 0320 	orr.w	r3, r3, #32
 80114c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80114c6:	4b79      	ldr	r3, [pc, #484]	; (80116ac <MX_GPIO_Init+0x248>)
 80114c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114cc:	f003 0320 	and.w	r3, r3, #32
 80114d0:	61bb      	str	r3, [r7, #24]
 80114d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80114d4:	4b75      	ldr	r3, [pc, #468]	; (80116ac <MX_GPIO_Init+0x248>)
 80114d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114da:	4a74      	ldr	r2, [pc, #464]	; (80116ac <MX_GPIO_Init+0x248>)
 80114dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80114e4:	4b71      	ldr	r3, [pc, #452]	; (80116ac <MX_GPIO_Init+0x248>)
 80114e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114ee:	617b      	str	r3, [r7, #20]
 80114f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80114f2:	4b6e      	ldr	r3, [pc, #440]	; (80116ac <MX_GPIO_Init+0x248>)
 80114f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80114f8:	4a6c      	ldr	r2, [pc, #432]	; (80116ac <MX_GPIO_Init+0x248>)
 80114fa:	f043 0301 	orr.w	r3, r3, #1
 80114fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011502:	4b6a      	ldr	r3, [pc, #424]	; (80116ac <MX_GPIO_Init+0x248>)
 8011504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011508:	f003 0301 	and.w	r3, r3, #1
 801150c:	613b      	str	r3, [r7, #16]
 801150e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011510:	4b66      	ldr	r3, [pc, #408]	; (80116ac <MX_GPIO_Init+0x248>)
 8011512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011516:	4a65      	ldr	r2, [pc, #404]	; (80116ac <MX_GPIO_Init+0x248>)
 8011518:	f043 0302 	orr.w	r3, r3, #2
 801151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011520:	4b62      	ldr	r3, [pc, #392]	; (80116ac <MX_GPIO_Init+0x248>)
 8011522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011526:	f003 0302 	and.w	r3, r3, #2
 801152a:	60fb      	str	r3, [r7, #12]
 801152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801152e:	4b5f      	ldr	r3, [pc, #380]	; (80116ac <MX_GPIO_Init+0x248>)
 8011530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011534:	4a5d      	ldr	r2, [pc, #372]	; (80116ac <MX_GPIO_Init+0x248>)
 8011536:	f043 0308 	orr.w	r3, r3, #8
 801153a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801153e:	4b5b      	ldr	r3, [pc, #364]	; (80116ac <MX_GPIO_Init+0x248>)
 8011540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011544:	f003 0308 	and.w	r3, r3, #8
 8011548:	60bb      	str	r3, [r7, #8]
 801154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801154c:	4b57      	ldr	r3, [pc, #348]	; (80116ac <MX_GPIO_Init+0x248>)
 801154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011552:	4a56      	ldr	r2, [pc, #344]	; (80116ac <MX_GPIO_Init+0x248>)
 8011554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801155c:	4b53      	ldr	r3, [pc, #332]	; (80116ac <MX_GPIO_Init+0x248>)
 801155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011566:	607b      	str	r3, [r7, #4]
 8011568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WINCH_CONTROL1_Pin|WINCH_CONTROL2_Pin, GPIO_PIN_RESET);
 801156a:	2200      	movs	r2, #0
 801156c:	210c      	movs	r1, #12
 801156e:	4850      	ldr	r0, [pc, #320]	; (80116b0 <MX_GPIO_Init+0x24c>)
 8011570:	f005 fad8 	bl	8016b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|EXTERNAL_LED_CONTROL_Pin, GPIO_PIN_RESET);
 8011574:	2200      	movs	r2, #0
 8011576:	f241 011c 	movw	r1, #4124	; 0x101c
 801157a:	484e      	ldr	r0, [pc, #312]	; (80116b4 <MX_GPIO_Init+0x250>)
 801157c:	f005 fad2 	bl	8016b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8011580:	2200      	movs	r2, #0
 8011582:	2101      	movs	r1, #1
 8011584:	484c      	ldr	r0, [pc, #304]	; (80116b8 <MX_GPIO_Init+0x254>)
 8011586:	f005 facd 	bl	8016b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 801158a:	2200      	movs	r2, #0
 801158c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011590:	484a      	ldr	r0, [pc, #296]	; (80116bc <MX_GPIO_Init+0x258>)
 8011592:	f005 fac7 	bl	8016b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WINCH_CONTROL1_Pin|WINCH_CONTROL2_Pin;
 8011596:	230c      	movs	r3, #12
 8011598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801159a:	2301      	movs	r3, #1
 801159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801159e:	2300      	movs	r3, #0
 80115a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80115a2:	2300      	movs	r3, #0
 80115a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80115a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115aa:	4619      	mov	r1, r3
 80115ac:	4840      	ldr	r0, [pc, #256]	; (80116b0 <MX_GPIO_Init+0x24c>)
 80115ae:	f005 f8f1 	bl	8016794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SD_DETECTION_Pin;
 80115b2:	f242 0320 	movw	r3, #8224	; 0x2020
 80115b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80115b8:	2300      	movs	r3, #0
 80115ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115bc:	2300      	movs	r3, #0
 80115be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80115c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115c4:	4619      	mov	r1, r3
 80115c6:	483e      	ldr	r0, [pc, #248]	; (80116c0 <MX_GPIO_Init+0x25c>)
 80115c8:	f005 f8e4 	bl	8016794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|EXTERNAL_LED_CONTROL_Pin;
 80115cc:	f241 031c 	movw	r3, #4124	; 0x101c
 80115d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80115d2:	2301      	movs	r3, #1
 80115d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115d6:	2300      	movs	r3, #0
 80115d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80115da:	2300      	movs	r3, #0
 80115dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80115de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115e2:	4619      	mov	r1, r3
 80115e4:	4833      	ldr	r0, [pc, #204]	; (80116b4 <MX_GPIO_Init+0x250>)
 80115e6:	f005 f8d5 	bl	8016794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80115ea:	2302      	movs	r3, #2
 80115ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115ee:	2302      	movs	r3, #2
 80115f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115f2:	2300      	movs	r3, #0
 80115f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80115f6:	2300      	movs	r3, #0
 80115f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80115fa:	2302      	movs	r3, #2
 80115fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80115fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011602:	4619      	mov	r1, r3
 8011604:	482f      	ldr	r0, [pc, #188]	; (80116c4 <MX_GPIO_Init+0x260>)
 8011606:	f005 f8c5 	bl	8016794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 801160a:	2301      	movs	r3, #1
 801160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801160e:	2301      	movs	r3, #1
 8011610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011612:	2300      	movs	r3, #0
 8011614:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011616:	2300      	movs	r3, #0
 8011618:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 801161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801161e:	4619      	mov	r1, r3
 8011620:	4825      	ldr	r0, [pc, #148]	; (80116b8 <MX_GPIO_Init+0x254>)
 8011622:	f005 f8b7 	bl	8016794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8011626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801162c:	2301      	movs	r3, #1
 801162e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011630:	2300      	movs	r3, #0
 8011632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011634:	2300      	movs	r3, #0
 8011636:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8011638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801163c:	4619      	mov	r1, r3
 801163e:	481f      	ldr	r0, [pc, #124]	; (80116bc <MX_GPIO_Init+0x258>)
 8011640:	f005 f8a8 	bl	8016794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECTIONG3_Pin;
 8011644:	2308      	movs	r3, #8
 8011646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011648:	2300      	movs	r3, #0
 801164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801164c:	2300      	movs	r3, #0
 801164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECTIONG3_GPIO_Port, &GPIO_InitStruct);
 8011650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011654:	4619      	mov	r1, r3
 8011656:	481c      	ldr	r0, [pc, #112]	; (80116c8 <MX_GPIO_Init+0x264>)
 8011658:	f005 f89c 	bl	8016794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 801165c:	2380      	movs	r3, #128	; 0x80
 801165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011660:	4b1a      	ldr	r3, [pc, #104]	; (80116cc <MX_GPIO_Init+0x268>)
 8011662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011664:	2300      	movs	r3, #0
 8011666:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8011668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801166c:	4619      	mov	r1, r3
 801166e:	4816      	ldr	r0, [pc, #88]	; (80116c8 <MX_GPIO_Init+0x264>)
 8011670:	f005 f890 	bl	8016794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAFETY_SWITCH_Pin;
 8011674:	2380      	movs	r3, #128	; 0x80
 8011676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011678:	2300      	movs	r3, #0
 801167a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801167c:	2300      	movs	r3, #0
 801167e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SAFETY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8011680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011684:	4619      	mov	r1, r3
 8011686:	480d      	ldr	r0, [pc, #52]	; (80116bc <MX_GPIO_Init+0x258>)
 8011688:	f005 f884 	bl	8016794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU9250_INT_Pin;
 801168c:	2320      	movs	r3, #32
 801168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011690:	2300      	movs	r3, #0
 8011692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011694:	2300      	movs	r3, #0
 8011696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MPU9250_INT_GPIO_Port, &GPIO_InitStruct);
 8011698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801169c:	4619      	mov	r1, r3
 801169e:	4806      	ldr	r0, [pc, #24]	; (80116b8 <MX_GPIO_Init+0x254>)
 80116a0:	f005 f878 	bl	8016794 <HAL_GPIO_Init>

}
 80116a4:	bf00      	nop
 80116a6:	3738      	adds	r7, #56	; 0x38
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	58024400 	.word	0x58024400
 80116b0:	58021000 	.word	0x58021000
 80116b4:	58021400 	.word	0x58021400
 80116b8:	58020400 	.word	0x58020400
 80116bc:	58020c00 	.word	0x58020c00
 80116c0:	58020800 	.word	0x58020800
 80116c4:	58020000 	.word	0x58020000
 80116c8:	58021800 	.word	0x58021800
 80116cc:	11110000 	.word	0x11110000

080116d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80116d4:	4b1b      	ldr	r3, [pc, #108]	; (8011744 <MX_I2C1_Init+0x74>)
 80116d6:	4a1c      	ldr	r2, [pc, #112]	; (8011748 <MX_I2C1_Init+0x78>)
 80116d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80116da:	4b1a      	ldr	r3, [pc, #104]	; (8011744 <MX_I2C1_Init+0x74>)
 80116dc:	4a1b      	ldr	r2, [pc, #108]	; (801174c <MX_I2C1_Init+0x7c>)
 80116de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80116e0:	4b18      	ldr	r3, [pc, #96]	; (8011744 <MX_I2C1_Init+0x74>)
 80116e2:	2200      	movs	r2, #0
 80116e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80116e6:	4b17      	ldr	r3, [pc, #92]	; (8011744 <MX_I2C1_Init+0x74>)
 80116e8:	2201      	movs	r2, #1
 80116ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80116ec:	4b15      	ldr	r3, [pc, #84]	; (8011744 <MX_I2C1_Init+0x74>)
 80116ee:	2200      	movs	r2, #0
 80116f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80116f2:	4b14      	ldr	r3, [pc, #80]	; (8011744 <MX_I2C1_Init+0x74>)
 80116f4:	2200      	movs	r2, #0
 80116f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80116f8:	4b12      	ldr	r3, [pc, #72]	; (8011744 <MX_I2C1_Init+0x74>)
 80116fa:	2200      	movs	r2, #0
 80116fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80116fe:	4b11      	ldr	r3, [pc, #68]	; (8011744 <MX_I2C1_Init+0x74>)
 8011700:	2200      	movs	r2, #0
 8011702:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011704:	4b0f      	ldr	r3, [pc, #60]	; (8011744 <MX_I2C1_Init+0x74>)
 8011706:	2200      	movs	r2, #0
 8011708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801170a:	480e      	ldr	r0, [pc, #56]	; (8011744 <MX_I2C1_Init+0x74>)
 801170c:	f005 fa24 	bl	8016b58 <HAL_I2C_Init>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d001      	beq.n	801171a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8011716:	f000 fa73 	bl	8011c00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801171a:	2100      	movs	r1, #0
 801171c:	4809      	ldr	r0, [pc, #36]	; (8011744 <MX_I2C1_Init+0x74>)
 801171e:	f007 fded 	bl	80192fc <HAL_I2CEx_ConfigAnalogFilter>
 8011722:	4603      	mov	r3, r0
 8011724:	2b00      	cmp	r3, #0
 8011726:	d001      	beq.n	801172c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8011728:	f000 fa6a 	bl	8011c00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801172c:	2100      	movs	r1, #0
 801172e:	4805      	ldr	r0, [pc, #20]	; (8011744 <MX_I2C1_Init+0x74>)
 8011730:	f007 fe2f 	bl	8019392 <HAL_I2CEx_ConfigDigitalFilter>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 801173a:	f000 fa61 	bl	8011c00 <Error_Handler>
  }

}
 801173e:	bf00      	nop
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	2400c36c 	.word	0x2400c36c
 8011748:	40005400 	.word	0x40005400
 801174c:	00b03fdb 	.word	0x00b03fdb

08011750 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8011754:	4b1b      	ldr	r3, [pc, #108]	; (80117c4 <MX_I2C2_Init+0x74>)
 8011756:	4a1c      	ldr	r2, [pc, #112]	; (80117c8 <MX_I2C2_Init+0x78>)
 8011758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 801175a:	4b1a      	ldr	r3, [pc, #104]	; (80117c4 <MX_I2C2_Init+0x74>)
 801175c:	4a1b      	ldr	r2, [pc, #108]	; (80117cc <MX_I2C2_Init+0x7c>)
 801175e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8011760:	4b18      	ldr	r3, [pc, #96]	; (80117c4 <MX_I2C2_Init+0x74>)
 8011762:	2200      	movs	r2, #0
 8011764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011766:	4b17      	ldr	r3, [pc, #92]	; (80117c4 <MX_I2C2_Init+0x74>)
 8011768:	2201      	movs	r2, #1
 801176a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801176c:	4b15      	ldr	r3, [pc, #84]	; (80117c4 <MX_I2C2_Init+0x74>)
 801176e:	2200      	movs	r2, #0
 8011770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8011772:	4b14      	ldr	r3, [pc, #80]	; (80117c4 <MX_I2C2_Init+0x74>)
 8011774:	2200      	movs	r2, #0
 8011776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8011778:	4b12      	ldr	r3, [pc, #72]	; (80117c4 <MX_I2C2_Init+0x74>)
 801177a:	2200      	movs	r2, #0
 801177c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801177e:	4b11      	ldr	r3, [pc, #68]	; (80117c4 <MX_I2C2_Init+0x74>)
 8011780:	2200      	movs	r2, #0
 8011782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011784:	4b0f      	ldr	r3, [pc, #60]	; (80117c4 <MX_I2C2_Init+0x74>)
 8011786:	2200      	movs	r2, #0
 8011788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 801178a:	480e      	ldr	r0, [pc, #56]	; (80117c4 <MX_I2C2_Init+0x74>)
 801178c:	f005 f9e4 	bl	8016b58 <HAL_I2C_Init>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d001      	beq.n	801179a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8011796:	f000 fa33 	bl	8011c00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801179a:	2100      	movs	r1, #0
 801179c:	4809      	ldr	r0, [pc, #36]	; (80117c4 <MX_I2C2_Init+0x74>)
 801179e:	f007 fdad 	bl	80192fc <HAL_I2CEx_ConfigAnalogFilter>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d001      	beq.n	80117ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80117a8:	f000 fa2a 	bl	8011c00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80117ac:	2100      	movs	r1, #0
 80117ae:	4805      	ldr	r0, [pc, #20]	; (80117c4 <MX_I2C2_Init+0x74>)
 80117b0:	f007 fdef 	bl	8019392 <HAL_I2CEx_ConfigDigitalFilter>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80117ba:	f000 fa21 	bl	8011c00 <Error_Handler>
  }

}
 80117be:	bf00      	nop
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	2400c3b8 	.word	0x2400c3b8
 80117c8:	40005800 	.word	0x40005800
 80117cc:	00b03fdb 	.word	0x00b03fdb

080117d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b08c      	sub	sp, #48	; 0x30
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80117d8:	f107 031c 	add.w	r3, r7, #28
 80117dc:	2200      	movs	r2, #0
 80117de:	601a      	str	r2, [r3, #0]
 80117e0:	605a      	str	r2, [r3, #4]
 80117e2:	609a      	str	r2, [r3, #8]
 80117e4:	60da      	str	r2, [r3, #12]
 80117e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4a5b      	ldr	r2, [pc, #364]	; (801195c <HAL_I2C_MspInit+0x18c>)
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d16c      	bne.n	80118cc <HAL_I2C_MspInit+0xfc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80117f2:	4b5b      	ldr	r3, [pc, #364]	; (8011960 <HAL_I2C_MspInit+0x190>)
 80117f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80117f8:	4a59      	ldr	r2, [pc, #356]	; (8011960 <HAL_I2C_MspInit+0x190>)
 80117fa:	f043 0302 	orr.w	r3, r3, #2
 80117fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011802:	4b57      	ldr	r3, [pc, #348]	; (8011960 <HAL_I2C_MspInit+0x190>)
 8011804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011808:	f003 0302 	and.w	r3, r3, #2
 801180c:	61bb      	str	r3, [r7, #24]
 801180e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU9250_SCL_Pin|MPU9250_SDA_Pin;
 8011810:	f44f 7310 	mov.w	r3, #576	; 0x240
 8011814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011816:	2312      	movs	r3, #18
 8011818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801181a:	2300      	movs	r3, #0
 801181c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801181e:	2300      	movs	r3, #0
 8011820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011822:	2304      	movs	r3, #4
 8011824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011826:	f107 031c 	add.w	r3, r7, #28
 801182a:	4619      	mov	r1, r3
 801182c:	484d      	ldr	r0, [pc, #308]	; (8011964 <HAL_I2C_MspInit+0x194>)
 801182e:	f004 ffb1 	bl	8016794 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011832:	4b4b      	ldr	r3, [pc, #300]	; (8011960 <HAL_I2C_MspInit+0x190>)
 8011834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8011838:	4a49      	ldr	r2, [pc, #292]	; (8011960 <HAL_I2C_MspInit+0x190>)
 801183a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801183e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8011842:	4b47      	ldr	r3, [pc, #284]	; (8011960 <HAL_I2C_MspInit+0x190>)
 8011844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8011848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801184c:	617b      	str	r3, [r7, #20]
 801184e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8011850:	4b45      	ldr	r3, [pc, #276]	; (8011968 <HAL_I2C_MspInit+0x198>)
 8011852:	4a46      	ldr	r2, [pc, #280]	; (801196c <HAL_I2C_MspInit+0x19c>)
 8011854:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8011856:	4b44      	ldr	r3, [pc, #272]	; (8011968 <HAL_I2C_MspInit+0x198>)
 8011858:	2221      	movs	r2, #33	; 0x21
 801185a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801185c:	4b42      	ldr	r3, [pc, #264]	; (8011968 <HAL_I2C_MspInit+0x198>)
 801185e:	2200      	movs	r2, #0
 8011860:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011862:	4b41      	ldr	r3, [pc, #260]	; (8011968 <HAL_I2C_MspInit+0x198>)
 8011864:	2200      	movs	r2, #0
 8011866:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8011868:	4b3f      	ldr	r3, [pc, #252]	; (8011968 <HAL_I2C_MspInit+0x198>)
 801186a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801186e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011870:	4b3d      	ldr	r3, [pc, #244]	; (8011968 <HAL_I2C_MspInit+0x198>)
 8011872:	2200      	movs	r2, #0
 8011874:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011876:	4b3c      	ldr	r3, [pc, #240]	; (8011968 <HAL_I2C_MspInit+0x198>)
 8011878:	2200      	movs	r2, #0
 801187a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 801187c:	4b3a      	ldr	r3, [pc, #232]	; (8011968 <HAL_I2C_MspInit+0x198>)
 801187e:	2200      	movs	r2, #0
 8011880:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8011882:	4b39      	ldr	r3, [pc, #228]	; (8011968 <HAL_I2C_MspInit+0x198>)
 8011884:	2200      	movs	r2, #0
 8011886:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8011888:	4b37      	ldr	r3, [pc, #220]	; (8011968 <HAL_I2C_MspInit+0x198>)
 801188a:	2200      	movs	r2, #0
 801188c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 801188e:	4836      	ldr	r0, [pc, #216]	; (8011968 <HAL_I2C_MspInit+0x198>)
 8011890:	f002 fc4a 	bl	8014128 <HAL_DMA_Init>
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d001      	beq.n	801189e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 801189a:	f000 f9b1 	bl	8011c00 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4a31      	ldr	r2, [pc, #196]	; (8011968 <HAL_I2C_MspInit+0x198>)
 80118a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80118a4:	4a30      	ldr	r2, [pc, #192]	; (8011968 <HAL_I2C_MspInit+0x198>)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80118aa:	2200      	movs	r2, #0
 80118ac:	2105      	movs	r1, #5
 80118ae:	201f      	movs	r0, #31
 80118b0:	f002 fc12 	bl	80140d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80118b4:	201f      	movs	r0, #31
 80118b6:	f002 fc29 	bl	801410c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80118ba:	2200      	movs	r2, #0
 80118bc:	2105      	movs	r1, #5
 80118be:	2020      	movs	r0, #32
 80118c0:	f002 fc0a 	bl	80140d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80118c4:	2020      	movs	r0, #32
 80118c6:	f002 fc21 	bl	801410c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80118ca:	e042      	b.n	8011952 <HAL_I2C_MspInit+0x182>
  else if(i2cHandle->Instance==I2C2)
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	4a27      	ldr	r2, [pc, #156]	; (8011970 <HAL_I2C_MspInit+0x1a0>)
 80118d2:	4293      	cmp	r3, r2
 80118d4:	d13d      	bne.n	8011952 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80118d6:	4b22      	ldr	r3, [pc, #136]	; (8011960 <HAL_I2C_MspInit+0x190>)
 80118d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80118dc:	4a20      	ldr	r2, [pc, #128]	; (8011960 <HAL_I2C_MspInit+0x190>)
 80118de:	f043 0320 	orr.w	r3, r3, #32
 80118e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80118e6:	4b1e      	ldr	r3, [pc, #120]	; (8011960 <HAL_I2C_MspInit+0x190>)
 80118e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80118ec:	f003 0320 	and.w	r3, r3, #32
 80118f0:	613b      	str	r3, [r7, #16]
 80118f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80118f4:	2303      	movs	r3, #3
 80118f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80118f8:	2312      	movs	r3, #18
 80118fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118fc:	2300      	movs	r3, #0
 80118fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011900:	2300      	movs	r3, #0
 8011902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8011904:	2304      	movs	r3, #4
 8011906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011908:	f107 031c 	add.w	r3, r7, #28
 801190c:	4619      	mov	r1, r3
 801190e:	4819      	ldr	r0, [pc, #100]	; (8011974 <HAL_I2C_MspInit+0x1a4>)
 8011910:	f004 ff40 	bl	8016794 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8011914:	4b12      	ldr	r3, [pc, #72]	; (8011960 <HAL_I2C_MspInit+0x190>)
 8011916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801191a:	4a11      	ldr	r2, [pc, #68]	; (8011960 <HAL_I2C_MspInit+0x190>)
 801191c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011920:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8011924:	4b0e      	ldr	r3, [pc, #56]	; (8011960 <HAL_I2C_MspInit+0x190>)
 8011926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801192e:	60fb      	str	r3, [r7, #12]
 8011930:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 8011932:	2200      	movs	r2, #0
 8011934:	2106      	movs	r1, #6
 8011936:	2021      	movs	r0, #33	; 0x21
 8011938:	f002 fbce 	bl	80140d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 801193c:	2021      	movs	r0, #33	; 0x21
 801193e:	f002 fbe5 	bl	801410c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 8011942:	2200      	movs	r2, #0
 8011944:	2106      	movs	r1, #6
 8011946:	2022      	movs	r0, #34	; 0x22
 8011948:	f002 fbc6 	bl	80140d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 801194c:	2022      	movs	r0, #34	; 0x22
 801194e:	f002 fbdd 	bl	801410c <HAL_NVIC_EnableIRQ>
}
 8011952:	bf00      	nop
 8011954:	3730      	adds	r7, #48	; 0x30
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	40005400 	.word	0x40005400
 8011960:	58024400 	.word	0x58024400
 8011964:	58020400 	.word	0x58020400
 8011968:	2400c404 	.word	0x2400c404
 801196c:	40020040 	.word	0x40020040
 8011970:	40005800 	.word	0x40005800
 8011974:	58021400 	.word	0x58021400

08011978 <msOverFlow>:

static __inline void msOverFlow(){
 8011978:	b480      	push	{r7}
 801197a:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 801197c:	4b04      	ldr	r3, [pc, #16]	; (8011990 <msOverFlow+0x18>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	3301      	adds	r3, #1
 8011982:	4a03      	ldr	r2, [pc, #12]	; (8011990 <msOverFlow+0x18>)
 8011984:	6013      	str	r3, [r2, #0]
}
 8011986:	bf00      	nop
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr
 8011990:	240013ec 	.word	0x240013ec

08011994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8011998:	f001 fb0e 	bl	8012fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801199c:	f000 f82a 	bl	80119f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80119a0:	f7ff fd60 	bl	8011464 <MX_GPIO_Init>
  MX_DMA_Init();
 80119a4:	f7ff fc6c 	bl	8011280 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80119a8:	f001 f882 	bl	8012ab0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80119ac:	f001 fa50 	bl	8012e50 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80119b0:	f7ff fe8e 	bl	80116d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80119b4:	f7ff fecc 	bl	8011750 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80119b8:	f000 f92a 	bl	8011c10 <MX_SDMMC1_SD_Init>
  MX_TIM3_Init();
 80119bc:	f000 fd32 	bl	8012424 <MX_TIM3_Init>
  MX_TIM4_Init();
 80119c0:	f000 fdbe 	bl	8012540 <MX_TIM4_Init>
  MX_UART7_Init();
 80119c4:	f000 ff8a 	bl	80128dc <MX_UART7_Init>
  MX_UART8_Init();
 80119c8:	f000 ffd8 	bl	801297c <MX_UART8_Init>
  MX_USART2_UART_Init();
 80119cc:	f001 f822 	bl	8012a14 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80119d0:	f010 f922 	bl	8021c18 <MX_FATFS_Init>
  MX_ADC3_Init();
 80119d4:	f7ff fbb2 	bl	801113c <MX_ADC3_Init>
  MX_TIM2_Init();
 80119d8:	f000 fcd6 	bl	8012388 <MX_TIM2_Init>
  MX_TIM1_Init();
 80119dc:	f000 fc0e 	bl	80121fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  cppMain();
 80119e0:	f7ff f956 	bl	8010c90 <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80119e4:	f012 fe30 	bl	8024648 <osKernelInitialize>
  MX_FREERTOS_Init();
 80119e8:	f7ff fc7a 	bl	80112e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80119ec:	f012 fe82 	bl	80246f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80119f0:	e7fe      	b.n	80119f0 <main+0x5c>
	...

080119f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b0cc      	sub	sp, #304	; 0x130
 80119f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80119fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80119fe:	224c      	movs	r2, #76	; 0x4c
 8011a00:	2100      	movs	r1, #0
 8011a02:	4618      	mov	r0, r3
 8011a04:	f019 ffe3 	bl	802b9ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011a08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011a0c:	2220      	movs	r2, #32
 8011a0e:	2100      	movs	r1, #0
 8011a10:	4618      	mov	r0, r3
 8011a12:	f019 ffdc 	bl	802b9ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011a16:	f107 0308 	add.w	r3, r7, #8
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	23bc      	movs	r3, #188	; 0xbc
 8011a1e:	461a      	mov	r2, r3
 8011a20:	2100      	movs	r1, #0
 8011a22:	f019 ffd4 	bl	802b9ce <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8011a26:	2002      	movs	r0, #2
 8011a28:	f007 fe48 	bl	80196bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8011a2c:	1d3b      	adds	r3, r7, #4
 8011a2e:	2200      	movs	r2, #0
 8011a30:	601a      	str	r2, [r3, #0]
 8011a32:	4b65      	ldr	r3, [pc, #404]	; (8011bc8 <SystemClock_Config+0x1d4>)
 8011a34:	699b      	ldr	r3, [r3, #24]
 8011a36:	4a64      	ldr	r2, [pc, #400]	; (8011bc8 <SystemClock_Config+0x1d4>)
 8011a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011a3c:	6193      	str	r3, [r2, #24]
 8011a3e:	4b62      	ldr	r3, [pc, #392]	; (8011bc8 <SystemClock_Config+0x1d4>)
 8011a40:	699b      	ldr	r3, [r3, #24]
 8011a42:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8011a46:	1d3b      	adds	r3, r7, #4
 8011a48:	601a      	str	r2, [r3, #0]
 8011a4a:	4b60      	ldr	r3, [pc, #384]	; (8011bcc <SystemClock_Config+0x1d8>)
 8011a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a4e:	4a5f      	ldr	r2, [pc, #380]	; (8011bcc <SystemClock_Config+0x1d8>)
 8011a50:	f043 0301 	orr.w	r3, r3, #1
 8011a54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011a56:	4b5d      	ldr	r3, [pc, #372]	; (8011bcc <SystemClock_Config+0x1d8>)
 8011a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a5a:	f003 0201 	and.w	r2, r3, #1
 8011a5e:	1d3b      	adds	r3, r7, #4
 8011a60:	601a      	str	r2, [r3, #0]
 8011a62:	1d3b      	adds	r3, r7, #4
 8011a64:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8011a66:	bf00      	nop
 8011a68:	4b57      	ldr	r3, [pc, #348]	; (8011bc8 <SystemClock_Config+0x1d4>)
 8011a6a:	699b      	ldr	r3, [r3, #24]
 8011a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a74:	d1f8      	bne.n	8011a68 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8011a76:	4b56      	ldr	r3, [pc, #344]	; (8011bd0 <SystemClock_Config+0x1dc>)
 8011a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a7a:	f023 0303 	bic.w	r3, r3, #3
 8011a7e:	4a54      	ldr	r2, [pc, #336]	; (8011bd0 <SystemClock_Config+0x1dc>)
 8011a80:	f043 0302 	orr.w	r3, r3, #2
 8011a84:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011a86:	2301      	movs	r3, #1
 8011a88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011a90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011a94:	2302      	movs	r3, #2
 8011a96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011a9a:	2302      	movs	r3, #2
 8011a9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8011aa6:	2378      	movs	r3, #120	; 0x78
 8011aa8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8011aac:	2302      	movs	r3, #2
 8011aae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8011ab2:	2314      	movs	r3, #20
 8011ab4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8011ab8:	2302      	movs	r3, #2
 8011aba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8011abe:	230c      	movs	r3, #12
 8011ac0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011ad0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f007 fe3b 	bl	8019750 <HAL_RCC_OscConfig>
 8011ada:	4603      	mov	r3, r0
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d001      	beq.n	8011ae4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8011ae0:	f000 f88e 	bl	8011c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011ae4:	233f      	movs	r3, #63	; 0x3f
 8011ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011aea:	2303      	movs	r3, #3
 8011aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8011af0:	2300      	movs	r3, #0
 8011af2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8011af6:	2308      	movs	r3, #8
 8011af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8011afc:	2340      	movs	r3, #64	; 0x40
 8011afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8011b02:	2340      	movs	r3, #64	; 0x40
 8011b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8011b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8011b10:	2340      	movs	r3, #64	; 0x40
 8011b12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8011b16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011b1a:	2104      	movs	r1, #4
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f008 fa27 	bl	8019f70 <HAL_RCC_ClockConfig>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d001      	beq.n	8011b2c <SystemClock_Config+0x138>
  {
    Error_Handler();
 8011b28:	f000 f86a 	bl	8011c00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8011b2c:	f107 0308 	add.w	r3, r7, #8
 8011b30:	4a28      	ldr	r2, [pc, #160]	; (8011bd4 <SystemClock_Config+0x1e0>)
 8011b32:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8011b34:	f107 0308 	add.w	r3, r7, #8
 8011b38:	2201      	movs	r2, #1
 8011b3a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8011b3c:	f107 0308 	add.w	r3, r7, #8
 8011b40:	2213      	movs	r2, #19
 8011b42:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8011b44:	f107 0308 	add.w	r3, r7, #8
 8011b48:	2202      	movs	r2, #2
 8011b4a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8011b4c:	f107 0308 	add.w	r3, r7, #8
 8011b50:	2202      	movs	r2, #2
 8011b52:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8011b54:	f107 0308 	add.w	r3, r7, #8
 8011b58:	2202      	movs	r2, #2
 8011b5a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8011b5c:	f107 0308 	add.w	r3, r7, #8
 8011b60:	22c0      	movs	r2, #192	; 0xc0
 8011b62:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8011b64:	f107 0308 	add.w	r3, r7, #8
 8011b68:	2220      	movs	r2, #32
 8011b6a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8011b6c:	f107 0308 	add.w	r3, r7, #8
 8011b70:	2200      	movs	r2, #0
 8011b72:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8011b74:	f107 0308 	add.w	r3, r7, #8
 8011b78:	2200      	movs	r2, #0
 8011b7a:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8011b7c:	f107 0308 	add.w	r3, r7, #8
 8011b80:	2200      	movs	r2, #0
 8011b82:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8011b84:	f107 0308 	add.w	r3, r7, #8
 8011b88:	2200      	movs	r2, #0
 8011b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011b8e:	f107 0308 	add.w	r3, r7, #8
 8011b92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8011b9a:	f107 0308 	add.w	r3, r7, #8
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011ba4:	f107 0308 	add.w	r3, r7, #8
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f008 fda7 	bl	801a6fc <HAL_RCCEx_PeriphCLKConfig>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d001      	beq.n	8011bb8 <SystemClock_Config+0x1c4>
  {
    Error_Handler();
 8011bb4:	f000 f824 	bl	8011c00 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011bb8:	f007 fdba 	bl	8019730 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8011bbc:	bf00      	nop
 8011bbe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	58024800 	.word	0x58024800
 8011bcc:	58000400 	.word	0x58000400
 8011bd0:	58024400 	.word	0x58024400
 8011bd4:	000d000a 	.word	0x000d000a

08011bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	msOverFlow();
 8011be0:	f7ff feca 	bl	8011978 <msOverFlow>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	4a04      	ldr	r2, [pc, #16]	; (8011bfc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d101      	bne.n	8011bf2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8011bee:	f001 fa1f 	bl	8013030 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011bf2:	bf00      	nop
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	40001000 	.word	0x40001000

08011c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011c00:	b480      	push	{r7}
 8011c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8011c04:	bf00      	nop
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr
	...

08011c10 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8011c10:	b480      	push	{r7}
 8011c12:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8011c14:	4b0d      	ldr	r3, [pc, #52]	; (8011c4c <MX_SDMMC1_SD_Init+0x3c>)
 8011c16:	4a0e      	ldr	r2, [pc, #56]	; (8011c50 <MX_SDMMC1_SD_Init+0x40>)
 8011c18:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8011c1a:	4b0c      	ldr	r3, [pc, #48]	; (8011c4c <MX_SDMMC1_SD_Init+0x3c>)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8011c20:	4b0a      	ldr	r3, [pc, #40]	; (8011c4c <MX_SDMMC1_SD_Init+0x3c>)
 8011c22:	2200      	movs	r2, #0
 8011c24:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8011c26:	4b09      	ldr	r3, [pc, #36]	; (8011c4c <MX_SDMMC1_SD_Init+0x3c>)
 8011c28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011c2c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8011c2e:	4b07      	ldr	r3, [pc, #28]	; (8011c4c <MX_SDMMC1_SD_Init+0x3c>)
 8011c30:	2200      	movs	r2, #0
 8011c32:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8011c34:	4b05      	ldr	r3, [pc, #20]	; (8011c4c <MX_SDMMC1_SD_Init+0x3c>)
 8011c36:	2200      	movs	r2, #0
 8011c38:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8011c3a:	4b04      	ldr	r3, [pc, #16]	; (8011c4c <MX_SDMMC1_SD_Init+0x3c>)
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	619a      	str	r2, [r3, #24]

}
 8011c40:	bf00      	nop
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr
 8011c4a:	bf00      	nop
 8011c4c:	2400c47c 	.word	0x2400c47c
 8011c50:	52007000 	.word	0x52007000

08011c54 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b08a      	sub	sp, #40	; 0x28
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c5c:	f107 0314 	add.w	r3, r7, #20
 8011c60:	2200      	movs	r2, #0
 8011c62:	601a      	str	r2, [r3, #0]
 8011c64:	605a      	str	r2, [r3, #4]
 8011c66:	609a      	str	r2, [r3, #8]
 8011c68:	60da      	str	r2, [r3, #12]
 8011c6a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	4a36      	ldr	r2, [pc, #216]	; (8011d4c <HAL_SD_MspInit+0xf8>)
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d166      	bne.n	8011d44 <HAL_SD_MspInit+0xf0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8011c76:	4b36      	ldr	r3, [pc, #216]	; (8011d50 <HAL_SD_MspInit+0xfc>)
 8011c78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8011c7c:	4a34      	ldr	r2, [pc, #208]	; (8011d50 <HAL_SD_MspInit+0xfc>)
 8011c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c82:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8011c86:	4b32      	ldr	r3, [pc, #200]	; (8011d50 <HAL_SD_MspInit+0xfc>)
 8011c88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8011c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c90:	613b      	str	r3, [r7, #16]
 8011c92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c94:	4b2e      	ldr	r3, [pc, #184]	; (8011d50 <HAL_SD_MspInit+0xfc>)
 8011c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c9a:	4a2d      	ldr	r2, [pc, #180]	; (8011d50 <HAL_SD_MspInit+0xfc>)
 8011c9c:	f043 0304 	orr.w	r3, r3, #4
 8011ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011ca4:	4b2a      	ldr	r3, [pc, #168]	; (8011d50 <HAL_SD_MspInit+0xfc>)
 8011ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011caa:	f003 0304 	and.w	r3, r3, #4
 8011cae:	60fb      	str	r3, [r7, #12]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011cb2:	4b27      	ldr	r3, [pc, #156]	; (8011d50 <HAL_SD_MspInit+0xfc>)
 8011cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011cb8:	4a25      	ldr	r2, [pc, #148]	; (8011d50 <HAL_SD_MspInit+0xfc>)
 8011cba:	f043 0308 	orr.w	r3, r3, #8
 8011cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011cc2:	4b23      	ldr	r3, [pc, #140]	; (8011d50 <HAL_SD_MspInit+0xfc>)
 8011cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011cc8:	f003 0308 	and.w	r3, r3, #8
 8011ccc:	60bb      	str	r3, [r7, #8]
 8011cce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8011cd0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8011cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cd6:	2302      	movs	r3, #2
 8011cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011cda:	2301      	movs	r3, #1
 8011cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011cde:	2303      	movs	r3, #3
 8011ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8011ce2:	230c      	movs	r3, #12
 8011ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011ce6:	f107 0314 	add.w	r3, r7, #20
 8011cea:	4619      	mov	r1, r3
 8011cec:	4819      	ldr	r0, [pc, #100]	; (8011d54 <HAL_SD_MspInit+0x100>)
 8011cee:	f004 fd51 	bl	8016794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8011cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cf8:	2302      	movs	r3, #2
 8011cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d00:	2303      	movs	r3, #3
 8011d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8011d04:	230c      	movs	r3, #12
 8011d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011d08:	f107 0314 	add.w	r3, r7, #20
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	4811      	ldr	r0, [pc, #68]	; (8011d54 <HAL_SD_MspInit+0x100>)
 8011d10:	f004 fd40 	bl	8016794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011d14:	2304      	movs	r3, #4
 8011d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d18:	2302      	movs	r3, #2
 8011d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d20:	2303      	movs	r3, #3
 8011d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8011d24:	230c      	movs	r3, #12
 8011d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011d28:	f107 0314 	add.w	r3, r7, #20
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	480a      	ldr	r0, [pc, #40]	; (8011d58 <HAL_SD_MspInit+0x104>)
 8011d30:	f004 fd30 	bl	8016794 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8011d34:	2200      	movs	r2, #0
 8011d36:	2100      	movs	r1, #0
 8011d38:	2031      	movs	r0, #49	; 0x31
 8011d3a:	f002 f9cd 	bl	80140d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8011d3e:	2031      	movs	r0, #49	; 0x31
 8011d40:	f002 f9e4 	bl	801410c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8011d44:	bf00      	nop
 8011d46:	3728      	adds	r7, #40	; 0x28
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	52007000 	.word	0x52007000
 8011d50:	58024400 	.word	0x58024400
 8011d54:	58020800 	.word	0x58020800
 8011d58:	58020c00 	.word	0x58020c00

08011d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b083      	sub	sp, #12
 8011d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011d62:	4b0a      	ldr	r3, [pc, #40]	; (8011d8c <HAL_MspInit+0x30>)
 8011d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011d68:	4a08      	ldr	r2, [pc, #32]	; (8011d8c <HAL_MspInit+0x30>)
 8011d6a:	f043 0302 	orr.w	r3, r3, #2
 8011d6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8011d72:	4b06      	ldr	r3, [pc, #24]	; (8011d8c <HAL_MspInit+0x30>)
 8011d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011d78:	f003 0302 	and.w	r3, r3, #2
 8011d7c:	607b      	str	r3, [r7, #4]
 8011d7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011d80:	bf00      	nop
 8011d82:	370c      	adds	r7, #12
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr
 8011d8c:	58024400 	.word	0x58024400

08011d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b08e      	sub	sp, #56	; 0x38
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8011da0:	2200      	movs	r2, #0
 8011da2:	6879      	ldr	r1, [r7, #4]
 8011da4:	2036      	movs	r0, #54	; 0x36
 8011da6:	f002 f997 	bl	80140d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011daa:	2036      	movs	r0, #54	; 0x36
 8011dac:	f002 f9ae 	bl	801410c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011db0:	4b21      	ldr	r3, [pc, #132]	; (8011e38 <HAL_InitTick+0xa8>)
 8011db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8011db6:	4a20      	ldr	r2, [pc, #128]	; (8011e38 <HAL_InitTick+0xa8>)
 8011db8:	f043 0310 	orr.w	r3, r3, #16
 8011dbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8011dc0:	4b1d      	ldr	r3, [pc, #116]	; (8011e38 <HAL_InitTick+0xa8>)
 8011dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8011dc6:	f003 0310 	and.w	r3, r3, #16
 8011dca:	60bb      	str	r3, [r7, #8]
 8011dcc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011dce:	f107 020c 	add.w	r2, r7, #12
 8011dd2:	f107 0310 	add.w	r3, r7, #16
 8011dd6:	4611      	mov	r1, r2
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f008 fc4d 	bl	801a678 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8011dde:	f008 fc1f 	bl	801a620 <HAL_RCC_GetPCLK1Freq>
 8011de2:	4603      	mov	r3, r0
 8011de4:	005b      	lsls	r3, r3, #1
 8011de6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8011de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dea:	4a14      	ldr	r2, [pc, #80]	; (8011e3c <HAL_InitTick+0xac>)
 8011dec:	fba2 2303 	umull	r2, r3, r2, r3
 8011df0:	0c9b      	lsrs	r3, r3, #18
 8011df2:	3b01      	subs	r3, #1
 8011df4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8011df6:	4b12      	ldr	r3, [pc, #72]	; (8011e40 <HAL_InitTick+0xb0>)
 8011df8:	4a12      	ldr	r2, [pc, #72]	; (8011e44 <HAL_InitTick+0xb4>)
 8011dfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8011dfc:	4b10      	ldr	r3, [pc, #64]	; (8011e40 <HAL_InitTick+0xb0>)
 8011dfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011e02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8011e04:	4a0e      	ldr	r2, [pc, #56]	; (8011e40 <HAL_InitTick+0xb0>)
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8011e0a:	4b0d      	ldr	r3, [pc, #52]	; (8011e40 <HAL_InitTick+0xb0>)
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011e10:	4b0b      	ldr	r3, [pc, #44]	; (8011e40 <HAL_InitTick+0xb0>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8011e16:	480a      	ldr	r0, [pc, #40]	; (8011e40 <HAL_InitTick+0xb0>)
 8011e18:	f00b ffa0 	bl	801dd5c <HAL_TIM_Base_Init>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d104      	bne.n	8011e2c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8011e22:	4807      	ldr	r0, [pc, #28]	; (8011e40 <HAL_InitTick+0xb0>)
 8011e24:	f00b fff2 	bl	801de0c <HAL_TIM_Base_Start_IT>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	e000      	b.n	8011e2e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8011e2c:	2301      	movs	r3, #1
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3738      	adds	r7, #56	; 0x38
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	58024400 	.word	0x58024400
 8011e3c:	431bde83 	.word	0x431bde83
 8011e40:	2400c4fc 	.word	0x2400c4fc
 8011e44:	40001000 	.word	0x40001000

08011e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011e48:	b480      	push	{r7}
 8011e4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011e4c:	bf00      	nop
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr

08011e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011e56:	b480      	push	{r7}
 8011e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011e5a:	e7fe      	b.n	8011e5a <HardFault_Handler+0x4>

08011e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011e60:	e7fe      	b.n	8011e60 <MemManage_Handler+0x4>

08011e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011e62:	b480      	push	{r7}
 8011e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011e66:	e7fe      	b.n	8011e66 <BusFault_Handler+0x4>

08011e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011e6c:	e7fe      	b.n	8011e6c <UsageFault_Handler+0x4>

08011e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011e6e:	b480      	push	{r7}
 8011e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011e72:	bf00      	nop
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr

08011e7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8011e80:	4802      	ldr	r0, [pc, #8]	; (8011e8c <DMA1_Stream0_IRQHandler+0x10>)
 8011e82:	f003 f95b 	bl	801513c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8011e86:	bf00      	nop
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	2400c808 	.word	0x2400c808

08011e90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8011e94:	4802      	ldr	r0, [pc, #8]	; (8011ea0 <DMA1_Stream1_IRQHandler+0x10>)
 8011e96:	f003 f951 	bl	801513c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8011e9a:	bf00      	nop
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	2400c790 	.word	0x2400c790

08011ea4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8011ea8:	4802      	ldr	r0, [pc, #8]	; (8011eb4 <DMA1_Stream2_IRQHandler+0x10>)
 8011eaa:	f003 f947 	bl	801513c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8011eae:	bf00      	nop
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	2400c404 	.word	0x2400c404

08011eb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8011ebc:	4802      	ldr	r0, [pc, #8]	; (8011ec8 <I2C1_EV_IRQHandler+0x10>)
 8011ebe:	f005 fa97 	bl	80173f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8011ec2:	bf00      	nop
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	2400c36c 	.word	0x2400c36c

08011ecc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8011ed0:	4802      	ldr	r0, [pc, #8]	; (8011edc <I2C1_ER_IRQHandler+0x10>)
 8011ed2:	f005 faa7 	bl	8017424 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8011ed6:	bf00      	nop
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	2400c36c 	.word	0x2400c36c

08011ee0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8011ee4:	4802      	ldr	r0, [pc, #8]	; (8011ef0 <I2C2_EV_IRQHandler+0x10>)
 8011ee6:	f005 fa83 	bl	80173f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8011eea:	bf00      	nop
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	2400c3b8 	.word	0x2400c3b8

08011ef4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8011ef8:	4802      	ldr	r0, [pc, #8]	; (8011f04 <I2C2_ER_IRQHandler+0x10>)
 8011efa:	f005 fa93 	bl	8017424 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8011efe:	bf00      	nop
 8011f00:	bd80      	pop	{r7, pc}
 8011f02:	bf00      	nop
 8011f04:	2400c3b8 	.word	0x2400c3b8

08011f08 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8011f0c:	4802      	ldr	r0, [pc, #8]	; (8011f18 <SDMMC1_IRQHandler+0x10>)
 8011f0e:	f00a fd2d 	bl	801c96c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8011f12:	bf00      	nop
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	2400c47c 	.word	0x2400c47c

08011f1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8011f20:	4802      	ldr	r0, [pc, #8]	; (8011f2c <TIM6_DAC_IRQHandler+0x10>)
 8011f22:	f00c f973 	bl	801e20c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8011f26:	bf00      	nop
 8011f28:	bd80      	pop	{r7, pc}
 8011f2a:	bf00      	nop
 8011f2c:	2400c4fc 	.word	0x2400c4fc

08011f30 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8011f34:	4802      	ldr	r0, [pc, #8]	; (8011f40 <UART7_IRQHandler+0x10>)
 8011f36:	f00d faf3 	bl	801f520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8011f3a:	bf00      	nop
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	2400c678 	.word	0x2400c678

08011f44 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8011f48:	4802      	ldr	r0, [pc, #8]	; (8011f54 <UART8_IRQHandler+0x10>)
 8011f4a:	f00d fae9 	bl	801f520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8011f4e:	bf00      	nop
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	2400c880 	.word	0x2400c880

08011f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011f58:	b480      	push	{r7}
 8011f5a:	af00      	add	r7, sp, #0
	return 1;
 8011f5c:	2301      	movs	r3, #1
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr

08011f68 <_kill>:

int _kill(int pid, int sig)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8011f72:	f019 fce5 	bl	802b940 <__errno>
 8011f76:	4602      	mov	r2, r0
 8011f78:	2316      	movs	r3, #22
 8011f7a:	6013      	str	r3, [r2, #0]
	return -1;
 8011f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <_exit>:

void _exit (int status)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8011f90:	f04f 31ff 	mov.w	r1, #4294967295
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7ff ffe7 	bl	8011f68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8011f9a:	e7fe      	b.n	8011f9a <_exit+0x12>

08011f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b086      	sub	sp, #24
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011fa8:	2300      	movs	r3, #0
 8011faa:	617b      	str	r3, [r7, #20]
 8011fac:	e00a      	b.n	8011fc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011fae:	f3af 8000 	nop.w
 8011fb2:	4601      	mov	r1, r0
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	1c5a      	adds	r2, r3, #1
 8011fb8:	60ba      	str	r2, [r7, #8]
 8011fba:	b2ca      	uxtb	r2, r1
 8011fbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	617b      	str	r3, [r7, #20]
 8011fc4:	697a      	ldr	r2, [r7, #20]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	dbf0      	blt.n	8011fae <_read+0x12>
	}

return len;
 8011fcc:	687b      	ldr	r3, [r7, #4]
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3718      	adds	r7, #24
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}

08011fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011fd6:	b580      	push	{r7, lr}
 8011fd8:	b086      	sub	sp, #24
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	60f8      	str	r0, [r7, #12]
 8011fde:	60b9      	str	r1, [r7, #8]
 8011fe0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	617b      	str	r3, [r7, #20]
 8011fe6:	e009      	b.n	8011ffc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	1c5a      	adds	r2, r3, #1
 8011fec:	60ba      	str	r2, [r7, #8]
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	617b      	str	r3, [r7, #20]
 8011ffc:	697a      	ldr	r2, [r7, #20]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	429a      	cmp	r2, r3
 8012002:	dbf1      	blt.n	8011fe8 <_write+0x12>
	}
	return len;
 8012004:	687b      	ldr	r3, [r7, #4]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3718      	adds	r7, #24
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}

0801200e <_close>:

int _close(int file)
{
 801200e:	b480      	push	{r7}
 8012010:	b083      	sub	sp, #12
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
	return -1;
 8012016:	f04f 33ff 	mov.w	r3, #4294967295
}
 801201a:	4618      	mov	r0, r3
 801201c:	370c      	adds	r7, #12
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr

08012026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012026:	b480      	push	{r7}
 8012028:	b083      	sub	sp, #12
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
 801202e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012036:	605a      	str	r2, [r3, #4]
	return 0;
 8012038:	2300      	movs	r3, #0
}
 801203a:	4618      	mov	r0, r3
 801203c:	370c      	adds	r7, #12
 801203e:	46bd      	mov	sp, r7
 8012040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012044:	4770      	bx	lr

08012046 <_isatty>:

int _isatty(int file)
{
 8012046:	b480      	push	{r7}
 8012048:	b083      	sub	sp, #12
 801204a:	af00      	add	r7, sp, #0
 801204c:	6078      	str	r0, [r7, #4]
	return 1;
 801204e:	2301      	movs	r3, #1
}
 8012050:	4618      	mov	r0, r3
 8012052:	370c      	adds	r7, #12
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr

0801205c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801205c:	b480      	push	{r7}
 801205e:	b085      	sub	sp, #20
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	607a      	str	r2, [r7, #4]
	return 0;
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3714      	adds	r7, #20
 801206e:	46bd      	mov	sp, r7
 8012070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012074:	4770      	bx	lr
	...

08012078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b086      	sub	sp, #24
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012080:	4a14      	ldr	r2, [pc, #80]	; (80120d4 <_sbrk+0x5c>)
 8012082:	4b15      	ldr	r3, [pc, #84]	; (80120d8 <_sbrk+0x60>)
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801208c:	4b13      	ldr	r3, [pc, #76]	; (80120dc <_sbrk+0x64>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d102      	bne.n	801209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012094:	4b11      	ldr	r3, [pc, #68]	; (80120dc <_sbrk+0x64>)
 8012096:	4a12      	ldr	r2, [pc, #72]	; (80120e0 <_sbrk+0x68>)
 8012098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801209a:	4b10      	ldr	r3, [pc, #64]	; (80120dc <_sbrk+0x64>)
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	4413      	add	r3, r2
 80120a2:	693a      	ldr	r2, [r7, #16]
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d207      	bcs.n	80120b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80120a8:	f019 fc4a 	bl	802b940 <__errno>
 80120ac:	4602      	mov	r2, r0
 80120ae:	230c      	movs	r3, #12
 80120b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80120b2:	f04f 33ff 	mov.w	r3, #4294967295
 80120b6:	e009      	b.n	80120cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80120b8:	4b08      	ldr	r3, [pc, #32]	; (80120dc <_sbrk+0x64>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80120be:	4b07      	ldr	r3, [pc, #28]	; (80120dc <_sbrk+0x64>)
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	4413      	add	r3, r2
 80120c6:	4a05      	ldr	r2, [pc, #20]	; (80120dc <_sbrk+0x64>)
 80120c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80120ca:	68fb      	ldr	r3, [r7, #12]
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3718      	adds	r7, #24
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	24080000 	.word	0x24080000
 80120d8:	00000400 	.word	0x00000400
 80120dc:	240013f0 	.word	0x240013f0
 80120e0:	2400d258 	.word	0x2400d258

080120e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80120e4:	b480      	push	{r7}
 80120e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80120e8:	4b39      	ldr	r3, [pc, #228]	; (80121d0 <SystemInit+0xec>)
 80120ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120ee:	4a38      	ldr	r2, [pc, #224]	; (80121d0 <SystemInit+0xec>)
 80120f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80120f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80120f8:	4b36      	ldr	r3, [pc, #216]	; (80121d4 <SystemInit+0xf0>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f003 030f 	and.w	r3, r3, #15
 8012100:	2b06      	cmp	r3, #6
 8012102:	d807      	bhi.n	8012114 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8012104:	4b33      	ldr	r3, [pc, #204]	; (80121d4 <SystemInit+0xf0>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	f023 030f 	bic.w	r3, r3, #15
 801210c:	4a31      	ldr	r2, [pc, #196]	; (80121d4 <SystemInit+0xf0>)
 801210e:	f043 0307 	orr.w	r3, r3, #7
 8012112:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8012114:	4b30      	ldr	r3, [pc, #192]	; (80121d8 <SystemInit+0xf4>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	4a2f      	ldr	r2, [pc, #188]	; (80121d8 <SystemInit+0xf4>)
 801211a:	f043 0301 	orr.w	r3, r3, #1
 801211e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012120:	4b2d      	ldr	r3, [pc, #180]	; (80121d8 <SystemInit+0xf4>)
 8012122:	2200      	movs	r2, #0
 8012124:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8012126:	4b2c      	ldr	r3, [pc, #176]	; (80121d8 <SystemInit+0xf4>)
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	492b      	ldr	r1, [pc, #172]	; (80121d8 <SystemInit+0xf4>)
 801212c:	4b2b      	ldr	r3, [pc, #172]	; (80121dc <SystemInit+0xf8>)
 801212e:	4013      	ands	r3, r2
 8012130:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8012132:	4b28      	ldr	r3, [pc, #160]	; (80121d4 <SystemInit+0xf0>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f003 030f 	and.w	r3, r3, #15
 801213a:	2b07      	cmp	r3, #7
 801213c:	d907      	bls.n	801214e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 801213e:	4b25      	ldr	r3, [pc, #148]	; (80121d4 <SystemInit+0xf0>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	f023 030f 	bic.w	r3, r3, #15
 8012146:	4a23      	ldr	r2, [pc, #140]	; (80121d4 <SystemInit+0xf0>)
 8012148:	f043 0307 	orr.w	r3, r3, #7
 801214c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 801214e:	4b22      	ldr	r3, [pc, #136]	; (80121d8 <SystemInit+0xf4>)
 8012150:	2200      	movs	r2, #0
 8012152:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8012154:	4b20      	ldr	r3, [pc, #128]	; (80121d8 <SystemInit+0xf4>)
 8012156:	2200      	movs	r2, #0
 8012158:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 801215a:	4b1f      	ldr	r3, [pc, #124]	; (80121d8 <SystemInit+0xf4>)
 801215c:	2200      	movs	r2, #0
 801215e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8012160:	4b1d      	ldr	r3, [pc, #116]	; (80121d8 <SystemInit+0xf4>)
 8012162:	4a1f      	ldr	r2, [pc, #124]	; (80121e0 <SystemInit+0xfc>)
 8012164:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8012166:	4b1c      	ldr	r3, [pc, #112]	; (80121d8 <SystemInit+0xf4>)
 8012168:	4a1e      	ldr	r2, [pc, #120]	; (80121e4 <SystemInit+0x100>)
 801216a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 801216c:	4b1a      	ldr	r3, [pc, #104]	; (80121d8 <SystemInit+0xf4>)
 801216e:	4a1e      	ldr	r2, [pc, #120]	; (80121e8 <SystemInit+0x104>)
 8012170:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8012172:	4b19      	ldr	r3, [pc, #100]	; (80121d8 <SystemInit+0xf4>)
 8012174:	2200      	movs	r2, #0
 8012176:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8012178:	4b17      	ldr	r3, [pc, #92]	; (80121d8 <SystemInit+0xf4>)
 801217a:	4a1b      	ldr	r2, [pc, #108]	; (80121e8 <SystemInit+0x104>)
 801217c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 801217e:	4b16      	ldr	r3, [pc, #88]	; (80121d8 <SystemInit+0xf4>)
 8012180:	2200      	movs	r2, #0
 8012182:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8012184:	4b14      	ldr	r3, [pc, #80]	; (80121d8 <SystemInit+0xf4>)
 8012186:	4a18      	ldr	r2, [pc, #96]	; (80121e8 <SystemInit+0x104>)
 8012188:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 801218a:	4b13      	ldr	r3, [pc, #76]	; (80121d8 <SystemInit+0xf4>)
 801218c:	2200      	movs	r2, #0
 801218e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8012190:	4b11      	ldr	r3, [pc, #68]	; (80121d8 <SystemInit+0xf4>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4a10      	ldr	r2, [pc, #64]	; (80121d8 <SystemInit+0xf4>)
 8012196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801219a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 801219c:	4b0e      	ldr	r3, [pc, #56]	; (80121d8 <SystemInit+0xf4>)
 801219e:	2200      	movs	r2, #0
 80121a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80121a2:	4b12      	ldr	r3, [pc, #72]	; (80121ec <SystemInit+0x108>)
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	4b12      	ldr	r3, [pc, #72]	; (80121f0 <SystemInit+0x10c>)
 80121a8:	4013      	ands	r3, r2
 80121aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80121ae:	d202      	bcs.n	80121b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80121b0:	4b10      	ldr	r3, [pc, #64]	; (80121f4 <SystemInit+0x110>)
 80121b2:	2201      	movs	r2, #1
 80121b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80121b6:	4b10      	ldr	r3, [pc, #64]	; (80121f8 <SystemInit+0x114>)
 80121b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80121bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80121be:	4b04      	ldr	r3, [pc, #16]	; (80121d0 <SystemInit+0xec>)
 80121c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80121c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80121c6:	bf00      	nop
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr
 80121d0:	e000ed00 	.word	0xe000ed00
 80121d4:	52002000 	.word	0x52002000
 80121d8:	58024400 	.word	0x58024400
 80121dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80121e0:	02020200 	.word	0x02020200
 80121e4:	01ff0000 	.word	0x01ff0000
 80121e8:	01010280 	.word	0x01010280
 80121ec:	5c001000 	.word	0x5c001000
 80121f0:	ffff0000 	.word	0xffff0000
 80121f4:	51008108 	.word	0x51008108
 80121f8:	52004000 	.word	0x52004000

080121fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b09a      	sub	sp, #104	; 0x68
 8012200:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8012202:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012206:	2200      	movs	r2, #0
 8012208:	601a      	str	r2, [r3, #0]
 801220a:	605a      	str	r2, [r3, #4]
 801220c:	609a      	str	r2, [r3, #8]
 801220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012210:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012214:	2200      	movs	r2, #0
 8012216:	601a      	str	r2, [r3, #0]
 8012218:	605a      	str	r2, [r3, #4]
 801221a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801221c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012220:	2200      	movs	r2, #0
 8012222:	601a      	str	r2, [r3, #0]
 8012224:	605a      	str	r2, [r3, #4]
 8012226:	609a      	str	r2, [r3, #8]
 8012228:	60da      	str	r2, [r3, #12]
 801222a:	611a      	str	r2, [r3, #16]
 801222c:	615a      	str	r2, [r3, #20]
 801222e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8012230:	1d3b      	adds	r3, r7, #4
 8012232:	222c      	movs	r2, #44	; 0x2c
 8012234:	2100      	movs	r1, #0
 8012236:	4618      	mov	r0, r3
 8012238:	f019 fbc9 	bl	802b9ce <memset>

  htim1.Instance = TIM1;
 801223c:	4b50      	ldr	r3, [pc, #320]	; (8012380 <MX_TIM1_Init+0x184>)
 801223e:	4a51      	ldr	r2, [pc, #324]	; (8012384 <MX_TIM1_Init+0x188>)
 8012240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8012242:	4b4f      	ldr	r3, [pc, #316]	; (8012380 <MX_TIM1_Init+0x184>)
 8012244:	220b      	movs	r2, #11
 8012246:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012248:	4b4d      	ldr	r3, [pc, #308]	; (8012380 <MX_TIM1_Init+0x184>)
 801224a:	2200      	movs	r2, #0
 801224c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000-1;
 801224e:	4b4c      	ldr	r3, [pc, #304]	; (8012380 <MX_TIM1_Init+0x184>)
 8012250:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8012254:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012256:	4b4a      	ldr	r3, [pc, #296]	; (8012380 <MX_TIM1_Init+0x184>)
 8012258:	2200      	movs	r2, #0
 801225a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801225c:	4b48      	ldr	r3, [pc, #288]	; (8012380 <MX_TIM1_Init+0x184>)
 801225e:	2200      	movs	r2, #0
 8012260:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8012262:	4b47      	ldr	r3, [pc, #284]	; (8012380 <MX_TIM1_Init+0x184>)
 8012264:	2280      	movs	r2, #128	; 0x80
 8012266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8012268:	4845      	ldr	r0, [pc, #276]	; (8012380 <MX_TIM1_Init+0x184>)
 801226a:	f00b fd77 	bl	801dd5c <HAL_TIM_Base_Init>
 801226e:	4603      	mov	r3, r0
 8012270:	2b00      	cmp	r3, #0
 8012272:	d001      	beq.n	8012278 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8012274:	f7ff fcc4 	bl	8011c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801227c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 801227e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012282:	4619      	mov	r1, r3
 8012284:	483e      	ldr	r0, [pc, #248]	; (8012380 <MX_TIM1_Init+0x184>)
 8012286:	f00c f9f1 	bl	801e66c <HAL_TIM_ConfigClockSource>
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d001      	beq.n	8012294 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8012290:	f7ff fcb6 	bl	8011c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8012294:	483a      	ldr	r0, [pc, #232]	; (8012380 <MX_TIM1_Init+0x184>)
 8012296:	f00b fdef 	bl	801de78 <HAL_TIM_PWM_Init>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d001      	beq.n	80122a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80122a0:	f7ff fcae 	bl	8011c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80122a4:	2300      	movs	r3, #0
 80122a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80122a8:	2300      	movs	r3, #0
 80122aa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80122ac:	2300      	movs	r3, #0
 80122ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80122b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80122b4:	4619      	mov	r1, r3
 80122b6:	4832      	ldr	r0, [pc, #200]	; (8012380 <MX_TIM1_Init+0x184>)
 80122b8:	f00c ff36 	bl	801f128 <HAL_TIMEx_MasterConfigSynchronization>
 80122bc:	4603      	mov	r3, r0
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d001      	beq.n	80122c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80122c2:	f7ff fc9d 	bl	8011c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80122c6:	2360      	movs	r3, #96	; 0x60
 80122c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80122ca:	2300      	movs	r3, #0
 80122cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80122ce:	2300      	movs	r3, #0
 80122d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80122d2:	2300      	movs	r3, #0
 80122d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80122d6:	2300      	movs	r3, #0
 80122d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80122da:	2300      	movs	r3, #0
 80122dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80122de:	2300      	movs	r3, #0
 80122e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80122e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80122e6:	2200      	movs	r2, #0
 80122e8:	4619      	mov	r1, r3
 80122ea:	4825      	ldr	r0, [pc, #148]	; (8012380 <MX_TIM1_Init+0x184>)
 80122ec:	f00c f8ae 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 80122f0:	4603      	mov	r3, r0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d001      	beq.n	80122fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80122f6:	f7ff fc83 	bl	8011c00 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80122fa:	2304      	movs	r3, #4
 80122fc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80122fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012302:	2208      	movs	r2, #8
 8012304:	4619      	mov	r1, r3
 8012306:	481e      	ldr	r0, [pc, #120]	; (8012380 <MX_TIM1_Init+0x184>)
 8012308:	f00c f8a0 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 801230c:	4603      	mov	r3, r0
 801230e:	2b00      	cmp	r3, #0
 8012310:	d001      	beq.n	8012316 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8012312:	f7ff fc75 	bl	8011c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801231a:	220c      	movs	r2, #12
 801231c:	4619      	mov	r1, r3
 801231e:	4818      	ldr	r0, [pc, #96]	; (8012380 <MX_TIM1_Init+0x184>)
 8012320:	f00c f894 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 8012324:	4603      	mov	r3, r0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d001      	beq.n	801232e <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 801232a:	f7ff fc69 	bl	8011c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801232e:	2300      	movs	r3, #0
 8012330:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8012332:	2300      	movs	r3, #0
 8012334:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8012336:	2300      	movs	r3, #0
 8012338:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801233a:	2300      	movs	r3, #0
 801233c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801233e:	2300      	movs	r3, #0
 8012340:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8012342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012346:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8012348:	2300      	movs	r3, #0
 801234a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801234c:	2300      	movs	r3, #0
 801234e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8012350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012354:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8012356:	2300      	movs	r3, #0
 8012358:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801235a:	2300      	movs	r3, #0
 801235c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 801235e:	1d3b      	adds	r3, r7, #4
 8012360:	4619      	mov	r1, r3
 8012362:	4807      	ldr	r0, [pc, #28]	; (8012380 <MX_TIM1_Init+0x184>)
 8012364:	f00c ff68 	bl	801f238 <HAL_TIMEx_ConfigBreakDeadTime>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d001      	beq.n	8012372 <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 801236e:	f7ff fc47 	bl	8011c00 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8012372:	4803      	ldr	r0, [pc, #12]	; (8012380 <MX_TIM1_Init+0x184>)
 8012374:	f000 f9e2 	bl	801273c <HAL_TIM_MspPostInit>

}
 8012378:	bf00      	nop
 801237a:	3768      	adds	r7, #104	; 0x68
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	2400c5e0 	.word	0x2400c5e0
 8012384:	40010000 	.word	0x40010000

08012388 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b088      	sub	sp, #32
 801238c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801238e:	f107 0310 	add.w	r3, r7, #16
 8012392:	2200      	movs	r2, #0
 8012394:	601a      	str	r2, [r3, #0]
 8012396:	605a      	str	r2, [r3, #4]
 8012398:	609a      	str	r2, [r3, #8]
 801239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801239c:	1d3b      	adds	r3, r7, #4
 801239e:	2200      	movs	r2, #0
 80123a0:	601a      	str	r2, [r3, #0]
 80123a2:	605a      	str	r2, [r3, #4]
 80123a4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80123a6:	4b1e      	ldr	r3, [pc, #120]	; (8012420 <MX_TIM2_Init+0x98>)
 80123a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80123ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 80123ae:	4b1c      	ldr	r3, [pc, #112]	; (8012420 <MX_TIM2_Init+0x98>)
 80123b0:	22ef      	movs	r2, #239	; 0xef
 80123b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80123b4:	4b1a      	ldr	r3, [pc, #104]	; (8012420 <MX_TIM2_Init+0x98>)
 80123b6:	2200      	movs	r2, #0
 80123b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80123ba:	4b19      	ldr	r3, [pc, #100]	; (8012420 <MX_TIM2_Init+0x98>)
 80123bc:	f04f 32ff 	mov.w	r2, #4294967295
 80123c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80123c2:	4b17      	ldr	r3, [pc, #92]	; (8012420 <MX_TIM2_Init+0x98>)
 80123c4:	2200      	movs	r2, #0
 80123c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80123c8:	4b15      	ldr	r3, [pc, #84]	; (8012420 <MX_TIM2_Init+0x98>)
 80123ca:	2200      	movs	r2, #0
 80123cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80123ce:	4814      	ldr	r0, [pc, #80]	; (8012420 <MX_TIM2_Init+0x98>)
 80123d0:	f00b fcc4 	bl	801dd5c <HAL_TIM_Base_Init>
 80123d4:	4603      	mov	r3, r0
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d001      	beq.n	80123de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80123da:	f7ff fc11 	bl	8011c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80123de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80123e4:	f107 0310 	add.w	r3, r7, #16
 80123e8:	4619      	mov	r1, r3
 80123ea:	480d      	ldr	r0, [pc, #52]	; (8012420 <MX_TIM2_Init+0x98>)
 80123ec:	f00c f93e 	bl	801e66c <HAL_TIM_ConfigClockSource>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d001      	beq.n	80123fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80123f6:	f7ff fc03 	bl	8011c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80123fa:	2300      	movs	r3, #0
 80123fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80123fe:	2300      	movs	r3, #0
 8012400:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8012402:	1d3b      	adds	r3, r7, #4
 8012404:	4619      	mov	r1, r3
 8012406:	4806      	ldr	r0, [pc, #24]	; (8012420 <MX_TIM2_Init+0x98>)
 8012408:	f00c fe8e 	bl	801f128 <HAL_TIMEx_MasterConfigSynchronization>
 801240c:	4603      	mov	r3, r0
 801240e:	2b00      	cmp	r3, #0
 8012410:	d001      	beq.n	8012416 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8012412:	f7ff fbf5 	bl	8011c00 <Error_Handler>
  }

}
 8012416:	bf00      	nop
 8012418:	3720      	adds	r7, #32
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	2400c62c 	.word	0x2400c62c

08012424 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b08e      	sub	sp, #56	; 0x38
 8012428:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801242a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801242e:	2200      	movs	r2, #0
 8012430:	601a      	str	r2, [r3, #0]
 8012432:	605a      	str	r2, [r3, #4]
 8012434:	609a      	str	r2, [r3, #8]
 8012436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012438:	f107 031c 	add.w	r3, r7, #28
 801243c:	2200      	movs	r2, #0
 801243e:	601a      	str	r2, [r3, #0]
 8012440:	605a      	str	r2, [r3, #4]
 8012442:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012444:	463b      	mov	r3, r7
 8012446:	2200      	movs	r2, #0
 8012448:	601a      	str	r2, [r3, #0]
 801244a:	605a      	str	r2, [r3, #4]
 801244c:	609a      	str	r2, [r3, #8]
 801244e:	60da      	str	r2, [r3, #12]
 8012450:	611a      	str	r2, [r3, #16]
 8012452:	615a      	str	r2, [r3, #20]
 8012454:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8012456:	4b38      	ldr	r3, [pc, #224]	; (8012538 <MX_TIM3_Init+0x114>)
 8012458:	4a38      	ldr	r2, [pc, #224]	; (801253c <MX_TIM3_Init+0x118>)
 801245a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 801245c:	4b36      	ldr	r3, [pc, #216]	; (8012538 <MX_TIM3_Init+0x114>)
 801245e:	220b      	movs	r2, #11
 8012460:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012462:	4b35      	ldr	r3, [pc, #212]	; (8012538 <MX_TIM3_Init+0x114>)
 8012464:	2200      	movs	r2, #0
 8012466:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8012468:	4b33      	ldr	r3, [pc, #204]	; (8012538 <MX_TIM3_Init+0x114>)
 801246a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 801246e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012470:	4b31      	ldr	r3, [pc, #196]	; (8012538 <MX_TIM3_Init+0x114>)
 8012472:	2200      	movs	r2, #0
 8012474:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8012476:	4b30      	ldr	r3, [pc, #192]	; (8012538 <MX_TIM3_Init+0x114>)
 8012478:	2280      	movs	r2, #128	; 0x80
 801247a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801247c:	482e      	ldr	r0, [pc, #184]	; (8012538 <MX_TIM3_Init+0x114>)
 801247e:	f00b fc6d 	bl	801dd5c <HAL_TIM_Base_Init>
 8012482:	4603      	mov	r3, r0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d001      	beq.n	801248c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8012488:	f7ff fbba 	bl	8011c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801248c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012490:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8012492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012496:	4619      	mov	r1, r3
 8012498:	4827      	ldr	r0, [pc, #156]	; (8012538 <MX_TIM3_Init+0x114>)
 801249a:	f00c f8e7 	bl	801e66c <HAL_TIM_ConfigClockSource>
 801249e:	4603      	mov	r3, r0
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d001      	beq.n	80124a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80124a4:	f7ff fbac 	bl	8011c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80124a8:	4823      	ldr	r0, [pc, #140]	; (8012538 <MX_TIM3_Init+0x114>)
 80124aa:	f00b fce5 	bl	801de78 <HAL_TIM_PWM_Init>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d001      	beq.n	80124b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80124b4:	f7ff fba4 	bl	8011c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80124b8:	2300      	movs	r3, #0
 80124ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80124bc:	2300      	movs	r3, #0
 80124be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80124c0:	f107 031c 	add.w	r3, r7, #28
 80124c4:	4619      	mov	r1, r3
 80124c6:	481c      	ldr	r0, [pc, #112]	; (8012538 <MX_TIM3_Init+0x114>)
 80124c8:	f00c fe2e 	bl	801f128 <HAL_TIMEx_MasterConfigSynchronization>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d001      	beq.n	80124d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80124d2:	f7ff fb95 	bl	8011c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80124d6:	2360      	movs	r3, #96	; 0x60
 80124d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80124da:	2300      	movs	r3, #0
 80124dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80124de:	2300      	movs	r3, #0
 80124e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80124e2:	2304      	movs	r3, #4
 80124e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80124e6:	463b      	mov	r3, r7
 80124e8:	2200      	movs	r2, #0
 80124ea:	4619      	mov	r1, r3
 80124ec:	4812      	ldr	r0, [pc, #72]	; (8012538 <MX_TIM3_Init+0x114>)
 80124ee:	f00b ffad 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d001      	beq.n	80124fc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80124f8:	f7ff fb82 	bl	8011c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80124fc:	463b      	mov	r3, r7
 80124fe:	2204      	movs	r2, #4
 8012500:	4619      	mov	r1, r3
 8012502:	480d      	ldr	r0, [pc, #52]	; (8012538 <MX_TIM3_Init+0x114>)
 8012504:	f00b ffa2 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d001      	beq.n	8012512 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 801250e:	f7ff fb77 	bl	8011c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012512:	463b      	mov	r3, r7
 8012514:	220c      	movs	r2, #12
 8012516:	4619      	mov	r1, r3
 8012518:	4807      	ldr	r0, [pc, #28]	; (8012538 <MX_TIM3_Init+0x114>)
 801251a:	f00b ff97 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 801251e:	4603      	mov	r3, r0
 8012520:	2b00      	cmp	r3, #0
 8012522:	d001      	beq.n	8012528 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8012524:	f7ff fb6c 	bl	8011c00 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8012528:	4803      	ldr	r0, [pc, #12]	; (8012538 <MX_TIM3_Init+0x114>)
 801252a:	f000 f907 	bl	801273c <HAL_TIM_MspPostInit>

}
 801252e:	bf00      	nop
 8012530:	3738      	adds	r7, #56	; 0x38
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	2400c594 	.word	0x2400c594
 801253c:	40000400 	.word	0x40000400

08012540 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b08e      	sub	sp, #56	; 0x38
 8012544:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8012546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801254a:	2200      	movs	r2, #0
 801254c:	601a      	str	r2, [r3, #0]
 801254e:	605a      	str	r2, [r3, #4]
 8012550:	609a      	str	r2, [r3, #8]
 8012552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012554:	f107 031c 	add.w	r3, r7, #28
 8012558:	2200      	movs	r2, #0
 801255a:	601a      	str	r2, [r3, #0]
 801255c:	605a      	str	r2, [r3, #4]
 801255e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012560:	463b      	mov	r3, r7
 8012562:	2200      	movs	r2, #0
 8012564:	601a      	str	r2, [r3, #0]
 8012566:	605a      	str	r2, [r3, #4]
 8012568:	609a      	str	r2, [r3, #8]
 801256a:	60da      	str	r2, [r3, #12]
 801256c:	611a      	str	r2, [r3, #16]
 801256e:	615a      	str	r2, [r3, #20]
 8012570:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8012572:	4b3d      	ldr	r3, [pc, #244]	; (8012668 <MX_TIM4_Init+0x128>)
 8012574:	4a3d      	ldr	r2, [pc, #244]	; (801266c <MX_TIM4_Init+0x12c>)
 8012576:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12-1;
 8012578:	4b3b      	ldr	r3, [pc, #236]	; (8012668 <MX_TIM4_Init+0x128>)
 801257a:	220b      	movs	r2, #11
 801257c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801257e:	4b3a      	ldr	r3, [pc, #232]	; (8012668 <MX_TIM4_Init+0x128>)
 8012580:	2200      	movs	r2, #0
 8012582:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8012584:	4b38      	ldr	r3, [pc, #224]	; (8012668 <MX_TIM4_Init+0x128>)
 8012586:	f649 423f 	movw	r2, #39999	; 0x9c3f
 801258a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801258c:	4b36      	ldr	r3, [pc, #216]	; (8012668 <MX_TIM4_Init+0x128>)
 801258e:	2200      	movs	r2, #0
 8012590:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8012592:	4b35      	ldr	r3, [pc, #212]	; (8012668 <MX_TIM4_Init+0x128>)
 8012594:	2280      	movs	r2, #128	; 0x80
 8012596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8012598:	4833      	ldr	r0, [pc, #204]	; (8012668 <MX_TIM4_Init+0x128>)
 801259a:	f00b fbdf 	bl	801dd5c <HAL_TIM_Base_Init>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d001      	beq.n	80125a8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80125a4:	f7ff fb2c 	bl	8011c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80125a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80125ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80125b2:	4619      	mov	r1, r3
 80125b4:	482c      	ldr	r0, [pc, #176]	; (8012668 <MX_TIM4_Init+0x128>)
 80125b6:	f00c f859 	bl	801e66c <HAL_TIM_ConfigClockSource>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80125c0:	f7ff fb1e 	bl	8011c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80125c4:	4828      	ldr	r0, [pc, #160]	; (8012668 <MX_TIM4_Init+0x128>)
 80125c6:	f00b fc57 	bl	801de78 <HAL_TIM_PWM_Init>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d001      	beq.n	80125d4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80125d0:	f7ff fb16 	bl	8011c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80125d4:	2300      	movs	r3, #0
 80125d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80125d8:	2300      	movs	r3, #0
 80125da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80125dc:	f107 031c 	add.w	r3, r7, #28
 80125e0:	4619      	mov	r1, r3
 80125e2:	4821      	ldr	r0, [pc, #132]	; (8012668 <MX_TIM4_Init+0x128>)
 80125e4:	f00c fda0 	bl	801f128 <HAL_TIMEx_MasterConfigSynchronization>
 80125e8:	4603      	mov	r3, r0
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d001      	beq.n	80125f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80125ee:	f7ff fb07 	bl	8011c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80125f2:	2360      	movs	r3, #96	; 0x60
 80125f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80125f6:	2300      	movs	r3, #0
 80125f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80125fa:	2300      	movs	r3, #0
 80125fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80125fe:	2304      	movs	r3, #4
 8012600:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012602:	463b      	mov	r3, r7
 8012604:	2200      	movs	r2, #0
 8012606:	4619      	mov	r1, r3
 8012608:	4817      	ldr	r0, [pc, #92]	; (8012668 <MX_TIM4_Init+0x128>)
 801260a:	f00b ff1f 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d001      	beq.n	8012618 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8012614:	f7ff faf4 	bl	8011c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012618:	463b      	mov	r3, r7
 801261a:	2204      	movs	r2, #4
 801261c:	4619      	mov	r1, r3
 801261e:	4812      	ldr	r0, [pc, #72]	; (8012668 <MX_TIM4_Init+0x128>)
 8012620:	f00b ff14 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 8012624:	4603      	mov	r3, r0
 8012626:	2b00      	cmp	r3, #0
 8012628:	d001      	beq.n	801262e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 801262a:	f7ff fae9 	bl	8011c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801262e:	463b      	mov	r3, r7
 8012630:	2208      	movs	r2, #8
 8012632:	4619      	mov	r1, r3
 8012634:	480c      	ldr	r0, [pc, #48]	; (8012668 <MX_TIM4_Init+0x128>)
 8012636:	f00b ff09 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d001      	beq.n	8012644 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8012640:	f7ff fade 	bl	8011c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012644:	463b      	mov	r3, r7
 8012646:	220c      	movs	r2, #12
 8012648:	4619      	mov	r1, r3
 801264a:	4807      	ldr	r0, [pc, #28]	; (8012668 <MX_TIM4_Init+0x128>)
 801264c:	f00b fefe 	bl	801e44c <HAL_TIM_PWM_ConfigChannel>
 8012650:	4603      	mov	r3, r0
 8012652:	2b00      	cmp	r3, #0
 8012654:	d001      	beq.n	801265a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8012656:	f7ff fad3 	bl	8011c00 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 801265a:	4803      	ldr	r0, [pc, #12]	; (8012668 <MX_TIM4_Init+0x128>)
 801265c:	f000 f86e 	bl	801273c <HAL_TIM_MspPostInit>

}
 8012660:	bf00      	nop
 8012662:	3738      	adds	r7, #56	; 0x38
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	2400c548 	.word	0x2400c548
 801266c:	40000800 	.word	0x40000800

08012670 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012670:	b480      	push	{r7}
 8012672:	b087      	sub	sp, #28
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	4a2b      	ldr	r2, [pc, #172]	; (801272c <HAL_TIM_Base_MspInit+0xbc>)
 801267e:	4293      	cmp	r3, r2
 8012680:	d10f      	bne.n	80126a2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8012682:	4b2b      	ldr	r3, [pc, #172]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 8012684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012688:	4a29      	ldr	r2, [pc, #164]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 801268a:	f043 0301 	orr.w	r3, r3, #1
 801268e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8012692:	4b27      	ldr	r3, [pc, #156]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 8012694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012698:	f003 0301 	and.w	r3, r3, #1
 801269c:	617b      	str	r3, [r7, #20]
 801269e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80126a0:	e03d      	b.n	801271e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80126aa:	d10f      	bne.n	80126cc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80126ac:	4b20      	ldr	r3, [pc, #128]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 80126ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80126b2:	4a1f      	ldr	r2, [pc, #124]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 80126b4:	f043 0301 	orr.w	r3, r3, #1
 80126b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80126bc:	4b1c      	ldr	r3, [pc, #112]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 80126be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80126c2:	f003 0301 	and.w	r3, r3, #1
 80126c6:	613b      	str	r3, [r7, #16]
 80126c8:	693b      	ldr	r3, [r7, #16]
}
 80126ca:	e028      	b.n	801271e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	4a18      	ldr	r2, [pc, #96]	; (8012734 <HAL_TIM_Base_MspInit+0xc4>)
 80126d2:	4293      	cmp	r3, r2
 80126d4:	d10f      	bne.n	80126f6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80126d6:	4b16      	ldr	r3, [pc, #88]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 80126d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80126dc:	4a14      	ldr	r2, [pc, #80]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 80126de:	f043 0302 	orr.w	r3, r3, #2
 80126e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80126e6:	4b12      	ldr	r3, [pc, #72]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 80126e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80126ec:	f003 0302 	and.w	r3, r3, #2
 80126f0:	60fb      	str	r3, [r7, #12]
 80126f2:	68fb      	ldr	r3, [r7, #12]
}
 80126f4:	e013      	b.n	801271e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	4a0f      	ldr	r2, [pc, #60]	; (8012738 <HAL_TIM_Base_MspInit+0xc8>)
 80126fc:	4293      	cmp	r3, r2
 80126fe:	d10e      	bne.n	801271e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8012700:	4b0b      	ldr	r3, [pc, #44]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 8012702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012706:	4a0a      	ldr	r2, [pc, #40]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 8012708:	f043 0304 	orr.w	r3, r3, #4
 801270c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012710:	4b07      	ldr	r3, [pc, #28]	; (8012730 <HAL_TIM_Base_MspInit+0xc0>)
 8012712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012716:	f003 0304 	and.w	r3, r3, #4
 801271a:	60bb      	str	r3, [r7, #8]
 801271c:	68bb      	ldr	r3, [r7, #8]
}
 801271e:	bf00      	nop
 8012720:	371c      	adds	r7, #28
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop
 801272c:	40010000 	.word	0x40010000
 8012730:	58024400 	.word	0x58024400
 8012734:	40000400 	.word	0x40000400
 8012738:	40000800 	.word	0x40000800

0801273c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b08c      	sub	sp, #48	; 0x30
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012744:	f107 031c 	add.w	r3, r7, #28
 8012748:	2200      	movs	r2, #0
 801274a:	601a      	str	r2, [r3, #0]
 801274c:	605a      	str	r2, [r3, #4]
 801274e:	609a      	str	r2, [r3, #8]
 8012750:	60da      	str	r2, [r3, #12]
 8012752:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	4a57      	ldr	r2, [pc, #348]	; (80128b8 <HAL_TIM_MspPostInit+0x17c>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d120      	bne.n	80127a0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801275e:	4b57      	ldr	r3, [pc, #348]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 8012760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012764:	4a55      	ldr	r2, [pc, #340]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 8012766:	f043 0310 	orr.w	r3, r3, #16
 801276a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801276e:	4b53      	ldr	r3, [pc, #332]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 8012770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012774:	f003 0310 	and.w	r3, r3, #16
 8012778:	61bb      	str	r3, [r7, #24]
 801277a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_14;
 801277c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8012780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012782:	2302      	movs	r3, #2
 8012784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012786:	2300      	movs	r3, #0
 8012788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801278a:	2300      	movs	r3, #0
 801278c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801278e:	2301      	movs	r3, #1
 8012790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012792:	f107 031c 	add.w	r3, r7, #28
 8012796:	4619      	mov	r1, r3
 8012798:	4849      	ldr	r0, [pc, #292]	; (80128c0 <HAL_TIM_MspPostInit+0x184>)
 801279a:	f003 fffb 	bl	8016794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 801279e:	e087      	b.n	80128b0 <HAL_TIM_MspPostInit+0x174>
  else if(timHandle->Instance==TIM3)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4a47      	ldr	r2, [pc, #284]	; (80128c4 <HAL_TIM_MspPostInit+0x188>)
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d15d      	bne.n	8012866 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80127aa:	4b44      	ldr	r3, [pc, #272]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 80127ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80127b0:	4a42      	ldr	r2, [pc, #264]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 80127b2:	f043 0301 	orr.w	r3, r3, #1
 80127b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80127ba:	4b40      	ldr	r3, [pc, #256]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 80127bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80127c0:	f003 0301 	and.w	r3, r3, #1
 80127c4:	617b      	str	r3, [r7, #20]
 80127c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80127c8:	4b3c      	ldr	r3, [pc, #240]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 80127ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80127ce:	4a3b      	ldr	r2, [pc, #236]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 80127d0:	f043 0302 	orr.w	r3, r3, #2
 80127d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80127d8:	4b38      	ldr	r3, [pc, #224]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 80127da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80127de:	f003 0302 	and.w	r3, r3, #2
 80127e2:	613b      	str	r3, [r7, #16]
 80127e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80127e6:	4b35      	ldr	r3, [pc, #212]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 80127e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80127ec:	4a33      	ldr	r2, [pc, #204]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 80127ee:	f043 0304 	orr.w	r3, r3, #4
 80127f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80127f6:	4b31      	ldr	r3, [pc, #196]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 80127f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80127fc:	f003 0304 	and.w	r3, r3, #4
 8012800:	60fb      	str	r3, [r7, #12]
 8012802:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M7_Pin;
 8012804:	2340      	movs	r3, #64	; 0x40
 8012806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012808:	2302      	movs	r3, #2
 801280a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801280c:	2300      	movs	r3, #0
 801280e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012810:	2300      	movs	r3, #0
 8012812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012814:	2302      	movs	r3, #2
 8012816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M7_GPIO_Port, &GPIO_InitStruct);
 8012818:	f107 031c 	add.w	r3, r7, #28
 801281c:	4619      	mov	r1, r3
 801281e:	482a      	ldr	r0, [pc, #168]	; (80128c8 <HAL_TIM_MspPostInit+0x18c>)
 8012820:	f003 ffb8 	bl	8016794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M5_Pin;
 8012824:	2302      	movs	r3, #2
 8012826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012828:	2302      	movs	r3, #2
 801282a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801282c:	2300      	movs	r3, #0
 801282e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012830:	2300      	movs	r3, #0
 8012832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012834:	2302      	movs	r3, #2
 8012836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M5_GPIO_Port, &GPIO_InitStruct);
 8012838:	f107 031c 	add.w	r3, r7, #28
 801283c:	4619      	mov	r1, r3
 801283e:	4823      	ldr	r0, [pc, #140]	; (80128cc <HAL_TIM_MspPostInit+0x190>)
 8012840:	f003 ffa8 	bl	8016794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M6_Pin;
 8012844:	2380      	movs	r3, #128	; 0x80
 8012846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012848:	2302      	movs	r3, #2
 801284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801284c:	2300      	movs	r3, #0
 801284e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012850:	2300      	movs	r3, #0
 8012852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012854:	2302      	movs	r3, #2
 8012856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M6_GPIO_Port, &GPIO_InitStruct);
 8012858:	f107 031c 	add.w	r3, r7, #28
 801285c:	4619      	mov	r1, r3
 801285e:	481c      	ldr	r0, [pc, #112]	; (80128d0 <HAL_TIM_MspPostInit+0x194>)
 8012860:	f003 ff98 	bl	8016794 <HAL_GPIO_Init>
}
 8012864:	e024      	b.n	80128b0 <HAL_TIM_MspPostInit+0x174>
  else if(timHandle->Instance==TIM4)
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4a1a      	ldr	r2, [pc, #104]	; (80128d4 <HAL_TIM_MspPostInit+0x198>)
 801286c:	4293      	cmp	r3, r2
 801286e:	d11f      	bne.n	80128b0 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012870:	4b12      	ldr	r3, [pc, #72]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 8012872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012876:	4a11      	ldr	r2, [pc, #68]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 8012878:	f043 0308 	orr.w	r3, r3, #8
 801287c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012880:	4b0e      	ldr	r3, [pc, #56]	; (80128bc <HAL_TIM_MspPostInit+0x180>)
 8012882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012886:	f003 0308 	and.w	r3, r3, #8
 801288a:	60bb      	str	r3, [r7, #8]
 801288c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_Pin|M4_Pin|M2_Pin|M1_Pin;
 801288e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8012892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012894:	2302      	movs	r3, #2
 8012896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012898:	2300      	movs	r3, #0
 801289a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801289c:	2300      	movs	r3, #0
 801289e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80128a0:	2302      	movs	r3, #2
 80128a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80128a4:	f107 031c 	add.w	r3, r7, #28
 80128a8:	4619      	mov	r1, r3
 80128aa:	480b      	ldr	r0, [pc, #44]	; (80128d8 <HAL_TIM_MspPostInit+0x19c>)
 80128ac:	f003 ff72 	bl	8016794 <HAL_GPIO_Init>
}
 80128b0:	bf00      	nop
 80128b2:	3730      	adds	r7, #48	; 0x30
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	40010000 	.word	0x40010000
 80128bc:	58024400 	.word	0x58024400
 80128c0:	58021000 	.word	0x58021000
 80128c4:	40000400 	.word	0x40000400
 80128c8:	58020000 	.word	0x58020000
 80128cc:	58020400 	.word	0x58020400
 80128d0:	58020800 	.word	0x58020800
 80128d4:	40000800 	.word	0x40000800
 80128d8:	58020c00 	.word	0x58020c00

080128dc <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80128e0:	4b23      	ldr	r3, [pc, #140]	; (8012970 <MX_UART7_Init+0x94>)
 80128e2:	4a24      	ldr	r2, [pc, #144]	; (8012974 <MX_UART7_Init+0x98>)
 80128e4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 80128e6:	4b22      	ldr	r3, [pc, #136]	; (8012970 <MX_UART7_Init+0x94>)
 80128e8:	4a23      	ldr	r2, [pc, #140]	; (8012978 <MX_UART7_Init+0x9c>)
 80128ea:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 80128ec:	4b20      	ldr	r3, [pc, #128]	; (8012970 <MX_UART7_Init+0x94>)
 80128ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80128f2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 80128f4:	4b1e      	ldr	r3, [pc, #120]	; (8012970 <MX_UART7_Init+0x94>)
 80128f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80128fa:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 80128fc:	4b1c      	ldr	r3, [pc, #112]	; (8012970 <MX_UART7_Init+0x94>)
 80128fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012902:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8012904:	4b1a      	ldr	r3, [pc, #104]	; (8012970 <MX_UART7_Init+0x94>)
 8012906:	220c      	movs	r2, #12
 8012908:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801290a:	4b19      	ldr	r3, [pc, #100]	; (8012970 <MX_UART7_Init+0x94>)
 801290c:	2200      	movs	r2, #0
 801290e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8012910:	4b17      	ldr	r3, [pc, #92]	; (8012970 <MX_UART7_Init+0x94>)
 8012912:	2200      	movs	r2, #0
 8012914:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012916:	4b16      	ldr	r3, [pc, #88]	; (8012970 <MX_UART7_Init+0x94>)
 8012918:	2200      	movs	r2, #0
 801291a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801291c:	4b14      	ldr	r3, [pc, #80]	; (8012970 <MX_UART7_Init+0x94>)
 801291e:	2200      	movs	r2, #0
 8012920:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012922:	4b13      	ldr	r3, [pc, #76]	; (8012970 <MX_UART7_Init+0x94>)
 8012924:	2200      	movs	r2, #0
 8012926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8012928:	4811      	ldr	r0, [pc, #68]	; (8012970 <MX_UART7_Init+0x94>)
 801292a:	f00c fd21 	bl	801f370 <HAL_UART_Init>
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d001      	beq.n	8012938 <MX_UART7_Init+0x5c>
  {
    Error_Handler();
 8012934:	f7ff f964 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012938:	2100      	movs	r1, #0
 801293a:	480d      	ldr	r0, [pc, #52]	; (8012970 <MX_UART7_Init+0x94>)
 801293c:	f00d fff2 	bl	8020924 <HAL_UARTEx_SetTxFifoThreshold>
 8012940:	4603      	mov	r3, r0
 8012942:	2b00      	cmp	r3, #0
 8012944:	d001      	beq.n	801294a <MX_UART7_Init+0x6e>
  {
    Error_Handler();
 8012946:	f7ff f95b 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801294a:	2100      	movs	r1, #0
 801294c:	4808      	ldr	r0, [pc, #32]	; (8012970 <MX_UART7_Init+0x94>)
 801294e:	f00e f827 	bl	80209a0 <HAL_UARTEx_SetRxFifoThreshold>
 8012952:	4603      	mov	r3, r0
 8012954:	2b00      	cmp	r3, #0
 8012956:	d001      	beq.n	801295c <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8012958:	f7ff f952 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 801295c:	4804      	ldr	r0, [pc, #16]	; (8012970 <MX_UART7_Init+0x94>)
 801295e:	f00d ffa8 	bl	80208b2 <HAL_UARTEx_DisableFifoMode>
 8012962:	4603      	mov	r3, r0
 8012964:	2b00      	cmp	r3, #0
 8012966:	d001      	beq.n	801296c <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8012968:	f7ff f94a 	bl	8011c00 <Error_Handler>
  }

}
 801296c:	bf00      	nop
 801296e:	bd80      	pop	{r7, pc}
 8012970:	2400c678 	.word	0x2400c678
 8012974:	40007800 	.word	0x40007800
 8012978:	000186a0 	.word	0x000186a0

0801297c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8012980:	4b22      	ldr	r3, [pc, #136]	; (8012a0c <MX_UART8_Init+0x90>)
 8012982:	4a23      	ldr	r2, [pc, #140]	; (8012a10 <MX_UART8_Init+0x94>)
 8012984:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 8012986:	4b21      	ldr	r3, [pc, #132]	; (8012a0c <MX_UART8_Init+0x90>)
 8012988:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 801298c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 801298e:	4b1f      	ldr	r3, [pc, #124]	; (8012a0c <MX_UART8_Init+0x90>)
 8012990:	2200      	movs	r2, #0
 8012992:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8012994:	4b1d      	ldr	r3, [pc, #116]	; (8012a0c <MX_UART8_Init+0x90>)
 8012996:	2200      	movs	r2, #0
 8012998:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 801299a:	4b1c      	ldr	r3, [pc, #112]	; (8012a0c <MX_UART8_Init+0x90>)
 801299c:	2200      	movs	r2, #0
 801299e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80129a0:	4b1a      	ldr	r3, [pc, #104]	; (8012a0c <MX_UART8_Init+0x90>)
 80129a2:	220c      	movs	r2, #12
 80129a4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80129a6:	4b19      	ldr	r3, [pc, #100]	; (8012a0c <MX_UART8_Init+0x90>)
 80129a8:	2200      	movs	r2, #0
 80129aa:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80129ac:	4b17      	ldr	r3, [pc, #92]	; (8012a0c <MX_UART8_Init+0x90>)
 80129ae:	2200      	movs	r2, #0
 80129b0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80129b2:	4b16      	ldr	r3, [pc, #88]	; (8012a0c <MX_UART8_Init+0x90>)
 80129b4:	2200      	movs	r2, #0
 80129b6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80129b8:	4b14      	ldr	r3, [pc, #80]	; (8012a0c <MX_UART8_Init+0x90>)
 80129ba:	2200      	movs	r2, #0
 80129bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80129be:	4b13      	ldr	r3, [pc, #76]	; (8012a0c <MX_UART8_Init+0x90>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80129c4:	4811      	ldr	r0, [pc, #68]	; (8012a0c <MX_UART8_Init+0x90>)
 80129c6:	f00c fcd3 	bl	801f370 <HAL_UART_Init>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d001      	beq.n	80129d4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80129d0:	f7ff f916 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80129d4:	2100      	movs	r1, #0
 80129d6:	480d      	ldr	r0, [pc, #52]	; (8012a0c <MX_UART8_Init+0x90>)
 80129d8:	f00d ffa4 	bl	8020924 <HAL_UARTEx_SetTxFifoThreshold>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d001      	beq.n	80129e6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80129e2:	f7ff f90d 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80129e6:	2100      	movs	r1, #0
 80129e8:	4808      	ldr	r0, [pc, #32]	; (8012a0c <MX_UART8_Init+0x90>)
 80129ea:	f00d ffd9 	bl	80209a0 <HAL_UARTEx_SetRxFifoThreshold>
 80129ee:	4603      	mov	r3, r0
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d001      	beq.n	80129f8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80129f4:	f7ff f904 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80129f8:	4804      	ldr	r0, [pc, #16]	; (8012a0c <MX_UART8_Init+0x90>)
 80129fa:	f00d ff5a 	bl	80208b2 <HAL_UARTEx_DisableFifoMode>
 80129fe:	4603      	mov	r3, r0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d001      	beq.n	8012a08 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8012a04:	f7ff f8fc 	bl	8011c00 <Error_Handler>
  }

}
 8012a08:	bf00      	nop
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	2400c880 	.word	0x2400c880
 8012a10:	40007c00 	.word	0x40007c00

08012a14 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8012a18:	4b23      	ldr	r3, [pc, #140]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a1a:	4a24      	ldr	r2, [pc, #144]	; (8012aac <MX_USART2_UART_Init+0x98>)
 8012a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8012a1e:	4b22      	ldr	r3, [pc, #136]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8012a26:	4b20      	ldr	r3, [pc, #128]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a28:	2200      	movs	r2, #0
 8012a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8012a2c:	4b1e      	ldr	r3, [pc, #120]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a2e:	2200      	movs	r2, #0
 8012a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8012a32:	4b1d      	ldr	r3, [pc, #116]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a34:	2200      	movs	r2, #0
 8012a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8012a38:	4b1b      	ldr	r3, [pc, #108]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a3a:	220c      	movs	r2, #12
 8012a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8012a3e:	4b1a      	ldr	r3, [pc, #104]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a40:	f44f 7240 	mov.w	r2, #768	; 0x300
 8012a44:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8012a46:	4b18      	ldr	r3, [pc, #96]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a48:	2200      	movs	r2, #0
 8012a4a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012a4c:	4b16      	ldr	r3, [pc, #88]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a4e:	2200      	movs	r2, #0
 8012a50:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012a52:	4b15      	ldr	r3, [pc, #84]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a54:	2200      	movs	r2, #0
 8012a56:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012a58:	4b13      	ldr	r3, [pc, #76]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8012a5e:	4812      	ldr	r0, [pc, #72]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a60:	f00c fc86 	bl	801f370 <HAL_UART_Init>
 8012a64:	4603      	mov	r3, r0
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d001      	beq.n	8012a6e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8012a6a:	f7ff f8c9 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012a6e:	2100      	movs	r1, #0
 8012a70:	480d      	ldr	r0, [pc, #52]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a72:	f00d ff57 	bl	8020924 <HAL_UARTEx_SetTxFifoThreshold>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d001      	beq.n	8012a80 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8012a7c:	f7ff f8c0 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012a80:	2100      	movs	r1, #0
 8012a82:	4809      	ldr	r0, [pc, #36]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a84:	f00d ff8c 	bl	80209a0 <HAL_UARTEx_SetRxFifoThreshold>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d001      	beq.n	8012a92 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8012a8e:	f7ff f8b7 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8012a92:	4805      	ldr	r0, [pc, #20]	; (8012aa8 <MX_USART2_UART_Init+0x94>)
 8012a94:	f00d ff0d 	bl	80208b2 <HAL_UARTEx_DisableFifoMode>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d001      	beq.n	8012aa2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8012a9e:	f7ff f8af 	bl	8011c00 <Error_Handler>
  }

}
 8012aa2:	bf00      	nop
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	2400c90c 	.word	0x2400c90c
 8012aac:	40004400 	.word	0x40004400

08012ab0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8012ab4:	4b22      	ldr	r3, [pc, #136]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012ab6:	4a23      	ldr	r2, [pc, #140]	; (8012b44 <MX_USART3_UART_Init+0x94>)
 8012ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8012aba:	4b21      	ldr	r3, [pc, #132]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8012ac2:	4b1f      	ldr	r3, [pc, #124]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8012ac8:	4b1d      	ldr	r3, [pc, #116]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012aca:	2200      	movs	r2, #0
 8012acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8012ace:	4b1c      	ldr	r3, [pc, #112]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8012ad4:	4b1a      	ldr	r3, [pc, #104]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012ad6:	220c      	movs	r2, #12
 8012ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012ada:	4b19      	ldr	r3, [pc, #100]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012adc:	2200      	movs	r2, #0
 8012ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8012ae0:	4b17      	ldr	r3, [pc, #92]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012ae6:	4b16      	ldr	r3, [pc, #88]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012ae8:	2200      	movs	r2, #0
 8012aea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012aec:	4b14      	ldr	r3, [pc, #80]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012aee:	2200      	movs	r2, #0
 8012af0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012af2:	4b13      	ldr	r3, [pc, #76]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012af4:	2200      	movs	r2, #0
 8012af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8012af8:	4811      	ldr	r0, [pc, #68]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012afa:	f00c fc39 	bl	801f370 <HAL_UART_Init>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d001      	beq.n	8012b08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8012b04:	f7ff f87c 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012b08:	2100      	movs	r1, #0
 8012b0a:	480d      	ldr	r0, [pc, #52]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012b0c:	f00d ff0a 	bl	8020924 <HAL_UARTEx_SetTxFifoThreshold>
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d001      	beq.n	8012b1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8012b16:	f7ff f873 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	4808      	ldr	r0, [pc, #32]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012b1e:	f00d ff3f 	bl	80209a0 <HAL_UARTEx_SetRxFifoThreshold>
 8012b22:	4603      	mov	r3, r0
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d001      	beq.n	8012b2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8012b28:	f7ff f86a 	bl	8011c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8012b2c:	4804      	ldr	r0, [pc, #16]	; (8012b40 <MX_USART3_UART_Init+0x90>)
 8012b2e:	f00d fec0 	bl	80208b2 <HAL_UARTEx_DisableFifoMode>
 8012b32:	4603      	mov	r3, r0
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d001      	beq.n	8012b3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8012b38:	f7ff f862 	bl	8011c00 <Error_Handler>
  }

}
 8012b3c:	bf00      	nop
 8012b3e:	bd80      	pop	{r7, pc}
 8012b40:	2400c704 	.word	0x2400c704
 8012b44:	40004800 	.word	0x40004800

08012b48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b090      	sub	sp, #64	; 0x40
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b54:	2200      	movs	r2, #0
 8012b56:	601a      	str	r2, [r3, #0]
 8012b58:	605a      	str	r2, [r3, #4]
 8012b5a:	609a      	str	r2, [r3, #8]
 8012b5c:	60da      	str	r2, [r3, #12]
 8012b5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4aae      	ldr	r2, [pc, #696]	; (8012e20 <HAL_UART_MspInit+0x2d8>)
 8012b66:	4293      	cmp	r3, r2
 8012b68:	d165      	bne.n	8012c36 <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8012b6a:	4bae      	ldr	r3, [pc, #696]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012b70:	4aac      	ldr	r2, [pc, #688]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012b7a:	4baa      	ldr	r3, [pc, #680]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012b80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b86:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012b88:	4ba6      	ldr	r3, [pc, #664]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012b8e:	4aa5      	ldr	r2, [pc, #660]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012b90:	f043 0310 	orr.w	r3, r3, #16
 8012b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012b98:	4ba2      	ldr	r3, [pc, #648]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012b9e:	f003 0310 	and.w	r3, r3, #16
 8012ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8012ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = SBUS_RX_Pin|SBUS_TX_Pin;
 8012ba6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8012baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bac:	2302      	movs	r3, #2
 8012bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8012bb8:	2307      	movs	r3, #7
 8012bba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	4899      	ldr	r0, [pc, #612]	; (8012e28 <HAL_UART_MspInit+0x2e0>)
 8012bc4:	f003 fde6 	bl	8016794 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream1;
 8012bc8:	4b98      	ldr	r3, [pc, #608]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012bca:	4a99      	ldr	r2, [pc, #612]	; (8012e30 <HAL_UART_MspInit+0x2e8>)
 8012bcc:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8012bce:	4b97      	ldr	r3, [pc, #604]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012bd0:	224f      	movs	r2, #79	; 0x4f
 8012bd2:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012bd4:	4b95      	ldr	r3, [pc, #596]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012bda:	4b94      	ldr	r3, [pc, #592]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012bdc:	2200      	movs	r2, #0
 8012bde:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012be0:	4b92      	ldr	r3, [pc, #584]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012be6:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012be8:	4b90      	ldr	r3, [pc, #576]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012bea:	2200      	movs	r2, #0
 8012bec:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012bee:	4b8f      	ldr	r3, [pc, #572]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8012bf4:	4b8d      	ldr	r3, [pc, #564]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012bfa:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012bfc:	4b8b      	ldr	r3, [pc, #556]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012c02:	4b8a      	ldr	r3, [pc, #552]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012c04:	2200      	movs	r2, #0
 8012c06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8012c08:	4888      	ldr	r0, [pc, #544]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012c0a:	f001 fa8d 	bl	8014128 <HAL_DMA_Init>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d001      	beq.n	8012c18 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8012c14:	f7fe fff4 	bl	8011c00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	4a84      	ldr	r2, [pc, #528]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012c1c:	679a      	str	r2, [r3, #120]	; 0x78
 8012c1e:	4a83      	ldr	r2, [pc, #524]	; (8012e2c <HAL_UART_MspInit+0x2e4>)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 10, 0);
 8012c24:	2200      	movs	r2, #0
 8012c26:	210a      	movs	r1, #10
 8012c28:	2052      	movs	r0, #82	; 0x52
 8012c2a:	f001 fa55 	bl	80140d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8012c2e:	2052      	movs	r0, #82	; 0x52
 8012c30:	f001 fa6c 	bl	801410c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8012c34:	e0f0      	b.n	8012e18 <HAL_UART_MspInit+0x2d0>
  else if(uartHandle->Instance==UART8)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4a7e      	ldr	r2, [pc, #504]	; (8012e34 <HAL_UART_MspInit+0x2ec>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d164      	bne.n	8012d0a <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_UART8_CLK_ENABLE();
 8012c40:	4b78      	ldr	r3, [pc, #480]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012c46:	4a77      	ldr	r2, [pc, #476]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012c4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012c50:	4b74      	ldr	r3, [pc, #464]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c5a:	623b      	str	r3, [r7, #32]
 8012c5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012c5e:	4b71      	ldr	r3, [pc, #452]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c64:	4a6f      	ldr	r2, [pc, #444]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012c66:	f043 0310 	orr.w	r3, r3, #16
 8012c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c6e:	4b6d      	ldr	r3, [pc, #436]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c74:	f003 0310 	and.w	r3, r3, #16
 8012c78:	61fb      	str	r3, [r7, #28]
 8012c7a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8012c7c:	2303      	movs	r3, #3
 8012c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c80:	2302      	movs	r3, #2
 8012c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c84:	2300      	movs	r3, #0
 8012c86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8012c8c:	2308      	movs	r3, #8
 8012c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c94:	4619      	mov	r1, r3
 8012c96:	4864      	ldr	r0, [pc, #400]	; (8012e28 <HAL_UART_MspInit+0x2e0>)
 8012c98:	f003 fd7c 	bl	8016794 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8012c9c:	4b66      	ldr	r3, [pc, #408]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012c9e:	4a67      	ldr	r2, [pc, #412]	; (8012e3c <HAL_UART_MspInit+0x2f4>)
 8012ca0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8012ca2:	4b65      	ldr	r3, [pc, #404]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012ca4:	2251      	movs	r2, #81	; 0x51
 8012ca6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012ca8:	4b63      	ldr	r3, [pc, #396]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012caa:	2200      	movs	r2, #0
 8012cac:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012cae:	4b62      	ldr	r3, [pc, #392]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012cb4:	4b60      	ldr	r3, [pc, #384]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012cba:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012cbc:	4b5e      	ldr	r3, [pc, #376]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012cc2:	4b5d      	ldr	r3, [pc, #372]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8012cc8:	4b5b      	ldr	r3, [pc, #364]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012cce:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012cd0:	4b59      	ldr	r3, [pc, #356]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012cd6:	4b58      	ldr	r3, [pc, #352]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cd8:	2200      	movs	r2, #0
 8012cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8012cdc:	4856      	ldr	r0, [pc, #344]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cde:	f001 fa23 	bl	8014128 <HAL_DMA_Init>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d001      	beq.n	8012cec <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8012ce8:	f7fe ff8a 	bl	8011c00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	4a52      	ldr	r2, [pc, #328]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cf0:	679a      	str	r2, [r3, #120]	; 0x78
 8012cf2:	4a51      	ldr	r2, [pc, #324]	; (8012e38 <HAL_UART_MspInit+0x2f0>)
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 10, 0);
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	210a      	movs	r1, #10
 8012cfc:	2053      	movs	r0, #83	; 0x53
 8012cfe:	f001 f9eb 	bl	80140d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8012d02:	2053      	movs	r0, #83	; 0x53
 8012d04:	f001 fa02 	bl	801410c <HAL_NVIC_EnableIRQ>
}
 8012d08:	e086      	b.n	8012e18 <HAL_UART_MspInit+0x2d0>
  else if(uartHandle->Instance==USART2)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	4a4c      	ldr	r2, [pc, #304]	; (8012e40 <HAL_UART_MspInit+0x2f8>)
 8012d10:	4293      	cmp	r3, r2
 8012d12:	d14d      	bne.n	8012db0 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART2_CLK_ENABLE();
 8012d14:	4b43      	ldr	r3, [pc, #268]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012d1a:	4a42      	ldr	r2, [pc, #264]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012d24:	4b3f      	ldr	r3, [pc, #252]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d2e:	61bb      	str	r3, [r7, #24]
 8012d30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012d32:	4b3c      	ldr	r3, [pc, #240]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d38:	4a3a      	ldr	r2, [pc, #232]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012d3a:	f043 0301 	orr.w	r3, r3, #1
 8012d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012d42:	4b38      	ldr	r3, [pc, #224]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d48:	f003 0301 	and.w	r3, r3, #1
 8012d4c:	617b      	str	r3, [r7, #20]
 8012d4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012d50:	4b34      	ldr	r3, [pc, #208]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d56:	4a33      	ldr	r2, [pc, #204]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012d58:	f043 0308 	orr.w	r3, r3, #8
 8012d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012d60:	4b30      	ldr	r3, [pc, #192]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d66:	f003 0308 	and.w	r3, r3, #8
 8012d6a:	613b      	str	r3, [r7, #16]
 8012d6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TELEM_CTS_Pin|TELEM_RX_Pin;
 8012d6e:	2309      	movs	r3, #9
 8012d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d72:	2302      	movs	r3, #2
 8012d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d76:	2300      	movs	r3, #0
 8012d78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012d7e:	2307      	movs	r3, #7
 8012d80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d86:	4619      	mov	r1, r3
 8012d88:	482e      	ldr	r0, [pc, #184]	; (8012e44 <HAL_UART_MspInit+0x2fc>)
 8012d8a:	f003 fd03 	bl	8016794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TELEM_RTS_Pin|TELEM_TX_Pin;
 8012d8e:	2330      	movs	r3, #48	; 0x30
 8012d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d92:	2302      	movs	r3, #2
 8012d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d96:	2300      	movs	r3, #0
 8012d98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012d9e:	2307      	movs	r3, #7
 8012da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012da6:	4619      	mov	r1, r3
 8012da8:	4827      	ldr	r0, [pc, #156]	; (8012e48 <HAL_UART_MspInit+0x300>)
 8012daa:	f003 fcf3 	bl	8016794 <HAL_GPIO_Init>
}
 8012dae:	e033      	b.n	8012e18 <HAL_UART_MspInit+0x2d0>
  else if(uartHandle->Instance==USART3)
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	4a25      	ldr	r2, [pc, #148]	; (8012e4c <HAL_UART_MspInit+0x304>)
 8012db6:	4293      	cmp	r3, r2
 8012db8:	d12e      	bne.n	8012e18 <HAL_UART_MspInit+0x2d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8012dba:	4b1a      	ldr	r3, [pc, #104]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012dc0:	4a18      	ldr	r2, [pc, #96]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012dca:	4b16      	ldr	r3, [pc, #88]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012dd4:	60fb      	str	r3, [r7, #12]
 8012dd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012dd8:	4b12      	ldr	r3, [pc, #72]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012dde:	4a11      	ldr	r2, [pc, #68]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012de0:	f043 0308 	orr.w	r3, r3, #8
 8012de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012de8:	4b0e      	ldr	r3, [pc, #56]	; (8012e24 <HAL_UART_MspInit+0x2dc>)
 8012dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012dee:	f003 0308 	and.w	r3, r3, #8
 8012df2:	60bb      	str	r3, [r7, #8]
 8012df4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8012df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012dfc:	2302      	movs	r3, #2
 8012dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e00:	2300      	movs	r3, #0
 8012e02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e04:	2300      	movs	r3, #0
 8012e06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8012e08:	2307      	movs	r3, #7
 8012e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e10:	4619      	mov	r1, r3
 8012e12:	480d      	ldr	r0, [pc, #52]	; (8012e48 <HAL_UART_MspInit+0x300>)
 8012e14:	f003 fcbe 	bl	8016794 <HAL_GPIO_Init>
}
 8012e18:	bf00      	nop
 8012e1a:	3740      	adds	r7, #64	; 0x40
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	40007800 	.word	0x40007800
 8012e24:	58024400 	.word	0x58024400
 8012e28:	58021000 	.word	0x58021000
 8012e2c:	2400c790 	.word	0x2400c790
 8012e30:	40020028 	.word	0x40020028
 8012e34:	40007c00 	.word	0x40007c00
 8012e38:	2400c808 	.word	0x2400c808
 8012e3c:	40020010 	.word	0x40020010
 8012e40:	40004400 	.word	0x40004400
 8012e44:	58020000 	.word	0x58020000
 8012e48:	58020c00 	.word	0x58020c00
 8012e4c:	40004800 	.word	0x40004800

08012e50 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012e54:	4b15      	ldr	r3, [pc, #84]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e56:	4a16      	ldr	r2, [pc, #88]	; (8012eb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8012e58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012e5a:	4b14      	ldr	r3, [pc, #80]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e5c:	2209      	movs	r2, #9
 8012e5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012e60:	4b12      	ldr	r3, [pc, #72]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e62:	2202      	movs	r2, #2
 8012e64:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012e66:	4b11      	ldr	r3, [pc, #68]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e68:	2200      	movs	r2, #0
 8012e6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012e6c:	4b0f      	ldr	r3, [pc, #60]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e6e:	2202      	movs	r2, #2
 8012e70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8012e72:	4b0e      	ldr	r3, [pc, #56]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e74:	2201      	movs	r2, #1
 8012e76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012e78:	4b0c      	ldr	r3, [pc, #48]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012e7e:	4b0b      	ldr	r3, [pc, #44]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e80:	2200      	movs	r2, #0
 8012e82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8012e84:	4b09      	ldr	r3, [pc, #36]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e86:	2201      	movs	r2, #1
 8012e88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8012e8a:	4b08      	ldr	r3, [pc, #32]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012e90:	4b06      	ldr	r3, [pc, #24]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012e96:	4805      	ldr	r0, [pc, #20]	; (8012eac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8012e98:	f006 fac7 	bl	801942a <HAL_PCD_Init>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d001      	beq.n	8012ea6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8012ea2:	f7fe fead 	bl	8011c00 <Error_Handler>
  }

}
 8012ea6:	bf00      	nop
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	2400c998 	.word	0x2400c998
 8012eb0:	40080000 	.word	0x40080000

08012eb4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b08a      	sub	sp, #40	; 0x28
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ebc:	f107 0314 	add.w	r3, r7, #20
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	601a      	str	r2, [r3, #0]
 8012ec4:	605a      	str	r2, [r3, #4]
 8012ec6:	609a      	str	r2, [r3, #8]
 8012ec8:	60da      	str	r2, [r3, #12]
 8012eca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4a21      	ldr	r2, [pc, #132]	; (8012f58 <HAL_PCD_MspInit+0xa4>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d13b      	bne.n	8012f4e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ed6:	4b21      	ldr	r3, [pc, #132]	; (8012f5c <HAL_PCD_MspInit+0xa8>)
 8012ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012edc:	4a1f      	ldr	r2, [pc, #124]	; (8012f5c <HAL_PCD_MspInit+0xa8>)
 8012ede:	f043 0301 	orr.w	r3, r3, #1
 8012ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012ee6:	4b1d      	ldr	r3, [pc, #116]	; (8012f5c <HAL_PCD_MspInit+0xa8>)
 8012ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012eec:	f003 0301 	and.w	r3, r3, #1
 8012ef0:	613b      	str	r3, [r7, #16]
 8012ef2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8012ef4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8012ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012efa:	2302      	movs	r3, #2
 8012efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012efe:	2300      	movs	r3, #0
 8012f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f02:	2300      	movs	r3, #0
 8012f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012f06:	230a      	movs	r3, #10
 8012f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f0a:	f107 0314 	add.w	r3, r7, #20
 8012f0e:	4619      	mov	r1, r3
 8012f10:	4813      	ldr	r0, [pc, #76]	; (8012f60 <HAL_PCD_MspInit+0xac>)
 8012f12:	f003 fc3f 	bl	8016794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f20:	2300      	movs	r3, #0
 8012f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f24:	f107 0314 	add.w	r3, r7, #20
 8012f28:	4619      	mov	r1, r3
 8012f2a:	480d      	ldr	r0, [pc, #52]	; (8012f60 <HAL_PCD_MspInit+0xac>)
 8012f2c:	f003 fc32 	bl	8016794 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012f30:	4b0a      	ldr	r3, [pc, #40]	; (8012f5c <HAL_PCD_MspInit+0xa8>)
 8012f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012f36:	4a09      	ldr	r2, [pc, #36]	; (8012f5c <HAL_PCD_MspInit+0xa8>)
 8012f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012f3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012f40:	4b06      	ldr	r3, [pc, #24]	; (8012f5c <HAL_PCD_MspInit+0xa8>)
 8012f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012f4a:	60fb      	str	r3, [r7, #12]
 8012f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012f4e:	bf00      	nop
 8012f50:	3728      	adds	r7, #40	; 0x28
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	40080000 	.word	0x40080000
 8012f5c:	58024400 	.word	0x58024400
 8012f60:	58020000 	.word	0x58020000

08012f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012f9c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8012f68:	f7ff f8bc 	bl	80120e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012f6e:	e003      	b.n	8012f78 <LoopCopyDataInit>

08012f70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012f70:	4b0b      	ldr	r3, [pc, #44]	; (8012fa0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8012f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012f76:	3104      	adds	r1, #4

08012f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012f78:	480a      	ldr	r0, [pc, #40]	; (8012fa4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8012f7a:	4b0b      	ldr	r3, [pc, #44]	; (8012fa8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8012f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012f80:	d3f6      	bcc.n	8012f70 <CopyDataInit>
  ldr  r2, =_sbss
 8012f82:	4a0a      	ldr	r2, [pc, #40]	; (8012fac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8012f84:	e002      	b.n	8012f8c <LoopFillZerobss>

08012f86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012f88:	f842 3b04 	str.w	r3, [r2], #4

08012f8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012f8c:	4b08      	ldr	r3, [pc, #32]	; (8012fb0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8012f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012f90:	d3f9      	bcc.n	8012f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012f92:	f018 fced 	bl	802b970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012f96:	f7fe fcfd 	bl	8011994 <main>
  bx  lr    
 8012f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012f9c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8012fa0:	0802df6c 	.word	0x0802df6c
  ldr  r0, =_sdata
 8012fa4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8012fa8:	24000714 	.word	0x24000714
  ldr  r2, =_sbss
 8012fac:	24000718 	.word	0x24000718
  ldr  r3, = _ebss
 8012fb0:	2400d254 	.word	0x2400d254

08012fb4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012fb4:	e7fe      	b.n	8012fb4 <ADC3_IRQHandler>
	...

08012fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012fbe:	2003      	movs	r0, #3
 8012fc0:	f001 f87f 	bl	80140c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012fc4:	f007 f98a 	bl	801a2dc <HAL_RCC_GetSysClockFreq>
 8012fc8:	4601      	mov	r1, r0
 8012fca:	4b15      	ldr	r3, [pc, #84]	; (8013020 <HAL_Init+0x68>)
 8012fcc:	699b      	ldr	r3, [r3, #24]
 8012fce:	0a1b      	lsrs	r3, r3, #8
 8012fd0:	f003 030f 	and.w	r3, r3, #15
 8012fd4:	4a13      	ldr	r2, [pc, #76]	; (8013024 <HAL_Init+0x6c>)
 8012fd6:	5cd3      	ldrb	r3, [r2, r3]
 8012fd8:	f003 031f 	and.w	r3, r3, #31
 8012fdc:	fa21 f303 	lsr.w	r3, r1, r3
 8012fe0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012fe2:	4b0f      	ldr	r3, [pc, #60]	; (8013020 <HAL_Init+0x68>)
 8012fe4:	699b      	ldr	r3, [r3, #24]
 8012fe6:	f003 030f 	and.w	r3, r3, #15
 8012fea:	4a0e      	ldr	r2, [pc, #56]	; (8013024 <HAL_Init+0x6c>)
 8012fec:	5cd3      	ldrb	r3, [r2, r3]
 8012fee:	f003 031f 	and.w	r3, r3, #31
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8012ff8:	4a0b      	ldr	r2, [pc, #44]	; (8013028 <HAL_Init+0x70>)
 8012ffa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012ffc:	4a0b      	ldr	r2, [pc, #44]	; (801302c <HAL_Init+0x74>)
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013002:	2000      	movs	r0, #0
 8013004:	f7fe fec4 	bl	8011d90 <HAL_InitTick>
 8013008:	4603      	mov	r3, r0
 801300a:	2b00      	cmp	r3, #0
 801300c:	d001      	beq.n	8013012 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801300e:	2301      	movs	r3, #1
 8013010:	e002      	b.n	8013018 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8013012:	f7fe fea3 	bl	8011d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	58024400 	.word	0x58024400
 8013024:	0802d72c 	.word	0x0802d72c
 8013028:	2400069c 	.word	0x2400069c
 801302c:	24000698 	.word	0x24000698

08013030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013030:	b480      	push	{r7}
 8013032:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8013034:	4b06      	ldr	r3, [pc, #24]	; (8013050 <HAL_IncTick+0x20>)
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	461a      	mov	r2, r3
 801303a:	4b06      	ldr	r3, [pc, #24]	; (8013054 <HAL_IncTick+0x24>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	4413      	add	r3, r2
 8013040:	4a04      	ldr	r2, [pc, #16]	; (8013054 <HAL_IncTick+0x24>)
 8013042:	6013      	str	r3, [r2, #0]
}
 8013044:	bf00      	nop
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr
 801304e:	bf00      	nop
 8013050:	240006a4 	.word	0x240006a4
 8013054:	2400cda0 	.word	0x2400cda0

08013058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013058:	b480      	push	{r7}
 801305a:	af00      	add	r7, sp, #0
  return uwTick;
 801305c:	4b03      	ldr	r3, [pc, #12]	; (801306c <HAL_GetTick+0x14>)
 801305e:	681b      	ldr	r3, [r3, #0]
}
 8013060:	4618      	mov	r0, r3
 8013062:	46bd      	mov	sp, r7
 8013064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013068:	4770      	bx	lr
 801306a:	bf00      	nop
 801306c:	2400cda0 	.word	0x2400cda0

08013070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013078:	f7ff ffee 	bl	8013058 <HAL_GetTick>
 801307c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013088:	d005      	beq.n	8013096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801308a:	4b09      	ldr	r3, [pc, #36]	; (80130b0 <HAL_Delay+0x40>)
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	461a      	mov	r2, r3
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	4413      	add	r3, r2
 8013094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8013096:	bf00      	nop
 8013098:	f7ff ffde 	bl	8013058 <HAL_GetTick>
 801309c:	4602      	mov	r2, r0
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	1ad3      	subs	r3, r2, r3
 80130a2:	68fa      	ldr	r2, [r7, #12]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d8f7      	bhi.n	8013098 <HAL_Delay+0x28>
  {
  }
}
 80130a8:	bf00      	nop
 80130aa:	3710      	adds	r7, #16
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	240006a4 	.word	0x240006a4

080130b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80130b4:	b480      	push	{r7}
 80130b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80130b8:	4b03      	ldr	r3, [pc, #12]	; (80130c8 <HAL_GetREVID+0x14>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	0c1b      	lsrs	r3, r3, #16
}
 80130be:	4618      	mov	r0, r3
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr
 80130c8:	5c001000 	.word	0x5c001000

080130cc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80130d6:	4b07      	ldr	r3, [pc, #28]	; (80130f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80130d8:	685a      	ldr	r2, [r3, #4]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	43db      	mvns	r3, r3
 80130de:	401a      	ands	r2, r3
 80130e0:	4904      	ldr	r1, [pc, #16]	; (80130f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	4313      	orrs	r3, r2
 80130e6:	604b      	str	r3, [r1, #4]
}
 80130e8:	bf00      	nop
 80130ea:	370c      	adds	r7, #12
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr
 80130f4:	58000400 	.word	0x58000400

080130f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80130f8:	b480      	push	{r7}
 80130fa:	b083      	sub	sp, #12
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	431a      	orrs	r2, r3
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	609a      	str	r2, [r3, #8]
}
 8013112:	bf00      	nop
 8013114:	370c      	adds	r7, #12
 8013116:	46bd      	mov	sp, r7
 8013118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311c:	4770      	bx	lr

0801311e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801311e:	b480      	push	{r7}
 8013120:	b083      	sub	sp, #12
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	689b      	ldr	r3, [r3, #8]
 801312c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	431a      	orrs	r2, r3
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	609a      	str	r2, [r3, #8]
}
 8013138:	bf00      	nop
 801313a:	370c      	adds	r7, #12
 801313c:	46bd      	mov	sp, r7
 801313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013142:	4770      	bx	lr

08013144 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8013144:	b480      	push	{r7}
 8013146:	b083      	sub	sp, #12
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8013154:	4618      	mov	r0, r3
 8013156:	370c      	adds	r7, #12
 8013158:	46bd      	mov	sp, r7
 801315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315e:	4770      	bx	lr

08013160 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8013160:	b480      	push	{r7}
 8013162:	b087      	sub	sp, #28
 8013164:	af00      	add	r7, sp, #0
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	60b9      	str	r1, [r7, #8]
 801316a:	607a      	str	r2, [r7, #4]
 801316c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	3360      	adds	r3, #96	; 0x60
 8013172:	461a      	mov	r2, r3
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	009b      	lsls	r3, r3, #2
 8013178:	4413      	add	r3, r2
 801317a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	430b      	orrs	r3, r1
 801318e:	431a      	orrs	r2, r3
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8013194:	bf00      	nop
 8013196:	371c      	adds	r7, #28
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr

080131a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80131a0:	b480      	push	{r7}
 80131a2:	b085      	sub	sp, #20
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	60f8      	str	r0, [r7, #12]
 80131a8:	60b9      	str	r1, [r7, #8]
 80131aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	691b      	ldr	r3, [r3, #16]
 80131b0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	f003 031f 	and.w	r3, r3, #31
 80131ba:	6879      	ldr	r1, [r7, #4]
 80131bc:	fa01 f303 	lsl.w	r3, r1, r3
 80131c0:	431a      	orrs	r2, r3
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	611a      	str	r2, [r3, #16]
}
 80131c6:	bf00      	nop
 80131c8:	3714      	adds	r7, #20
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr

080131d2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80131d2:	b480      	push	{r7}
 80131d4:	b087      	sub	sp, #28
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	60f8      	str	r0, [r7, #12]
 80131da:	60b9      	str	r1, [r7, #8]
 80131dc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	3360      	adds	r3, #96	; 0x60
 80131e2:	461a      	mov	r2, r3
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	4413      	add	r3, r2
 80131ea:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	431a      	orrs	r2, r3
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	601a      	str	r2, [r3, #0]
  }
}
 80131fc:	bf00      	nop
 80131fe:	371c      	adds	r7, #28
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr

08013208 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8013208:	b480      	push	{r7}
 801320a:	b087      	sub	sp, #28
 801320c:	af00      	add	r7, sp, #0
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	60b9      	str	r1, [r7, #8]
 8013212:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	3330      	adds	r3, #48	; 0x30
 8013218:	461a      	mov	r2, r3
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	0a1b      	lsrs	r3, r3, #8
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	f003 030c 	and.w	r3, r3, #12
 8013224:	4413      	add	r3, r2
 8013226:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	f003 031f 	and.w	r3, r3, #31
 8013232:	211f      	movs	r1, #31
 8013234:	fa01 f303 	lsl.w	r3, r1, r3
 8013238:	43db      	mvns	r3, r3
 801323a:	401a      	ands	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	0e9b      	lsrs	r3, r3, #26
 8013240:	f003 011f 	and.w	r1, r3, #31
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	f003 031f 	and.w	r3, r3, #31
 801324a:	fa01 f303 	lsl.w	r3, r1, r3
 801324e:	431a      	orrs	r2, r3
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8013254:	bf00      	nop
 8013256:	371c      	adds	r7, #28
 8013258:	46bd      	mov	sp, r7
 801325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325e:	4770      	bx	lr

08013260 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8013260:	b480      	push	{r7}
 8013262:	b087      	sub	sp, #28
 8013264:	af00      	add	r7, sp, #0
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	3314      	adds	r3, #20
 8013270:	461a      	mov	r2, r3
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	0e5b      	lsrs	r3, r3, #25
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	f003 0304 	and.w	r3, r3, #4
 801327c:	4413      	add	r3, r2
 801327e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	681a      	ldr	r2, [r3, #0]
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	0d1b      	lsrs	r3, r3, #20
 8013288:	f003 031f 	and.w	r3, r3, #31
 801328c:	2107      	movs	r1, #7
 801328e:	fa01 f303 	lsl.w	r3, r1, r3
 8013292:	43db      	mvns	r3, r3
 8013294:	401a      	ands	r2, r3
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	0d1b      	lsrs	r3, r3, #20
 801329a:	f003 031f 	and.w	r3, r3, #31
 801329e:	6879      	ldr	r1, [r7, #4]
 80132a0:	fa01 f303 	lsl.w	r3, r1, r3
 80132a4:	431a      	orrs	r2, r3
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80132aa:	bf00      	nop
 80132ac:	371c      	adds	r7, #28
 80132ae:	46bd      	mov	sp, r7
 80132b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b4:	4770      	bx	lr
	...

080132b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b085      	sub	sp, #20
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80132d0:	43db      	mvns	r3, r3
 80132d2:	401a      	ands	r2, r3
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f003 0318 	and.w	r3, r3, #24
 80132da:	4908      	ldr	r1, [pc, #32]	; (80132fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80132dc:	40d9      	lsrs	r1, r3
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	400b      	ands	r3, r1
 80132e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80132e6:	431a      	orrs	r2, r3
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80132ee:	bf00      	nop
 80132f0:	3714      	adds	r7, #20
 80132f2:	46bd      	mov	sp, r7
 80132f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f8:	4770      	bx	lr
 80132fa:	bf00      	nop
 80132fc:	000fffff 	.word	0x000fffff

08013300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8013300:	b480      	push	{r7}
 8013302:	b083      	sub	sp, #12
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	689a      	ldr	r2, [r3, #8]
 801330c:	4b04      	ldr	r3, [pc, #16]	; (8013320 <LL_ADC_DisableDeepPowerDown+0x20>)
 801330e:	4013      	ands	r3, r2
 8013310:	687a      	ldr	r2, [r7, #4]
 8013312:	6093      	str	r3, [r2, #8]
}
 8013314:	bf00      	nop
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	5fffffc0 	.word	0x5fffffc0

08013324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8013324:	b480      	push	{r7}
 8013326:	b083      	sub	sp, #12
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	689b      	ldr	r3, [r3, #8]
 8013330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013338:	d101      	bne.n	801333e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801333a:	2301      	movs	r3, #1
 801333c:	e000      	b.n	8013340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801333e:	2300      	movs	r3, #0
}
 8013340:	4618      	mov	r0, r3
 8013342:	370c      	adds	r7, #12
 8013344:	46bd      	mov	sp, r7
 8013346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334a:	4770      	bx	lr

0801334c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 801334c:	b480      	push	{r7}
 801334e:	b083      	sub	sp, #12
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	689a      	ldr	r2, [r3, #8]
 8013358:	4b05      	ldr	r3, [pc, #20]	; (8013370 <LL_ADC_EnableInternalRegulator+0x24>)
 801335a:	4013      	ands	r3, r2
 801335c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8013364:	bf00      	nop
 8013366:	370c      	adds	r7, #12
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr
 8013370:	6fffffc0 	.word	0x6fffffc0

08013374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8013374:	b480      	push	{r7}
 8013376:	b083      	sub	sp, #12
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	689b      	ldr	r3, [r3, #8]
 8013380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013388:	d101      	bne.n	801338e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801338a:	2301      	movs	r3, #1
 801338c:	e000      	b.n	8013390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801338e:	2300      	movs	r3, #0
}
 8013390:	4618      	mov	r0, r3
 8013392:	370c      	adds	r7, #12
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr

0801339c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	689b      	ldr	r3, [r3, #8]
 80133a8:	f003 0301 	and.w	r3, r3, #1
 80133ac:	2b01      	cmp	r3, #1
 80133ae:	d101      	bne.n	80133b4 <LL_ADC_IsEnabled+0x18>
 80133b0:	2301      	movs	r3, #1
 80133b2:	e000      	b.n	80133b6 <LL_ADC_IsEnabled+0x1a>
 80133b4:	2300      	movs	r3, #0
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	370c      	adds	r7, #12
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr

080133c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80133c2:	b480      	push	{r7}
 80133c4:	b083      	sub	sp, #12
 80133c6:	af00      	add	r7, sp, #0
 80133c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	689b      	ldr	r3, [r3, #8]
 80133ce:	f003 0304 	and.w	r3, r3, #4
 80133d2:	2b04      	cmp	r3, #4
 80133d4:	d101      	bne.n	80133da <LL_ADC_REG_IsConversionOngoing+0x18>
 80133d6:	2301      	movs	r3, #1
 80133d8:	e000      	b.n	80133dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80133da:	2300      	movs	r3, #0
}
 80133dc:	4618      	mov	r0, r3
 80133de:	370c      	adds	r7, #12
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr

080133e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80133e8:	b480      	push	{r7}
 80133ea:	b083      	sub	sp, #12
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	689b      	ldr	r3, [r3, #8]
 80133f4:	f003 0308 	and.w	r3, r3, #8
 80133f8:	2b08      	cmp	r3, #8
 80133fa:	d101      	bne.n	8013400 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80133fc:	2301      	movs	r3, #1
 80133fe:	e000      	b.n	8013402 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8013400:	2300      	movs	r3, #0
}
 8013402:	4618      	mov	r0, r3
 8013404:	370c      	adds	r7, #12
 8013406:	46bd      	mov	sp, r7
 8013408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340c:	4770      	bx	lr
	...

08013410 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8013410:	b590      	push	{r4, r7, lr}
 8013412:	b089      	sub	sp, #36	; 0x24
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013418:	2300      	movs	r3, #0
 801341a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801341c:	2300      	movs	r3, #0
 801341e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d101      	bne.n	801342a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8013426:	2301      	movs	r3, #1
 8013428:	e18e      	b.n	8013748 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013434:	2b00      	cmp	r3, #0
 8013436:	d109      	bne.n	801344c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f7fd fee5 	bl	8011208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2200      	movs	r2, #0
 8013442:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2200      	movs	r2, #0
 8013448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	4618      	mov	r0, r3
 8013452:	f7ff ff67 	bl	8013324 <LL_ADC_IsDeepPowerDownEnabled>
 8013456:	4603      	mov	r3, r0
 8013458:	2b00      	cmp	r3, #0
 801345a:	d004      	beq.n	8013466 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	4618      	mov	r0, r3
 8013462:	f7ff ff4d 	bl	8013300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	4618      	mov	r0, r3
 801346c:	f7ff ff82 	bl	8013374 <LL_ADC_IsInternalRegulatorEnabled>
 8013470:	4603      	mov	r3, r0
 8013472:	2b00      	cmp	r3, #0
 8013474:	d113      	bne.n	801349e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	4618      	mov	r0, r3
 801347c:	f7ff ff66 	bl	801334c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8013480:	4b9a      	ldr	r3, [pc, #616]	; (80136ec <HAL_ADC_Init+0x2dc>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	099b      	lsrs	r3, r3, #6
 8013486:	4a9a      	ldr	r2, [pc, #616]	; (80136f0 <HAL_ADC_Init+0x2e0>)
 8013488:	fba2 2303 	umull	r2, r3, r2, r3
 801348c:	099b      	lsrs	r3, r3, #6
 801348e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8013490:	e002      	b.n	8013498 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	3b01      	subs	r3, #1
 8013496:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d1f9      	bne.n	8013492 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7ff ff66 	bl	8013374 <LL_ADC_IsInternalRegulatorEnabled>
 80134a8:	4603      	mov	r3, r0
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d10d      	bne.n	80134ca <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134b2:	f043 0210 	orr.w	r2, r3, #16
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134be:	f043 0201 	orr.w	r2, r3, #1
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80134c6:	2301      	movs	r3, #1
 80134c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7ff ff77 	bl	80133c2 <LL_ADC_REG_IsConversionOngoing>
 80134d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134da:	f003 0310 	and.w	r3, r3, #16
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f040 8129 	bne.w	8013736 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	f040 8125 	bne.w	8013736 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80134f4:	f043 0202 	orr.w	r2, r3, #2
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4618      	mov	r0, r3
 8013502:	f7ff ff4b 	bl	801339c <LL_ADC_IsEnabled>
 8013506:	4603      	mov	r3, r0
 8013508:	2b00      	cmp	r3, #0
 801350a:	d136      	bne.n	801357a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	4a78      	ldr	r2, [pc, #480]	; (80136f4 <HAL_ADC_Init+0x2e4>)
 8013512:	4293      	cmp	r3, r2
 8013514:	d004      	beq.n	8013520 <HAL_ADC_Init+0x110>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	4a77      	ldr	r2, [pc, #476]	; (80136f8 <HAL_ADC_Init+0x2e8>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d10e      	bne.n	801353e <HAL_ADC_Init+0x12e>
 8013520:	4874      	ldr	r0, [pc, #464]	; (80136f4 <HAL_ADC_Init+0x2e4>)
 8013522:	f7ff ff3b 	bl	801339c <LL_ADC_IsEnabled>
 8013526:	4604      	mov	r4, r0
 8013528:	4873      	ldr	r0, [pc, #460]	; (80136f8 <HAL_ADC_Init+0x2e8>)
 801352a:	f7ff ff37 	bl	801339c <LL_ADC_IsEnabled>
 801352e:	4603      	mov	r3, r0
 8013530:	4323      	orrs	r3, r4
 8013532:	2b00      	cmp	r3, #0
 8013534:	bf0c      	ite	eq
 8013536:	2301      	moveq	r3, #1
 8013538:	2300      	movne	r3, #0
 801353a:	b2db      	uxtb	r3, r3
 801353c:	e008      	b.n	8013550 <HAL_ADC_Init+0x140>
 801353e:	486f      	ldr	r0, [pc, #444]	; (80136fc <HAL_ADC_Init+0x2ec>)
 8013540:	f7ff ff2c 	bl	801339c <LL_ADC_IsEnabled>
 8013544:	4603      	mov	r3, r0
 8013546:	2b00      	cmp	r3, #0
 8013548:	bf0c      	ite	eq
 801354a:	2301      	moveq	r3, #1
 801354c:	2300      	movne	r3, #0
 801354e:	b2db      	uxtb	r3, r3
 8013550:	2b00      	cmp	r3, #0
 8013552:	d012      	beq.n	801357a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	4a66      	ldr	r2, [pc, #408]	; (80136f4 <HAL_ADC_Init+0x2e4>)
 801355a:	4293      	cmp	r3, r2
 801355c:	d004      	beq.n	8013568 <HAL_ADC_Init+0x158>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	4a65      	ldr	r2, [pc, #404]	; (80136f8 <HAL_ADC_Init+0x2e8>)
 8013564:	4293      	cmp	r3, r2
 8013566:	d101      	bne.n	801356c <HAL_ADC_Init+0x15c>
 8013568:	4a65      	ldr	r2, [pc, #404]	; (8013700 <HAL_ADC_Init+0x2f0>)
 801356a:	e000      	b.n	801356e <HAL_ADC_Init+0x15e>
 801356c:	4a65      	ldr	r2, [pc, #404]	; (8013704 <HAL_ADC_Init+0x2f4>)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	685b      	ldr	r3, [r3, #4]
 8013572:	4619      	mov	r1, r3
 8013574:	4610      	mov	r0, r2
 8013576:	f7ff fdbf 	bl	80130f8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 801357a:	f7ff fd9b 	bl	80130b4 <HAL_GetREVID>
 801357e:	4602      	mov	r2, r0
 8013580:	f241 0303 	movw	r3, #4099	; 0x1003
 8013584:	429a      	cmp	r2, r3
 8013586:	d914      	bls.n	80135b2 <HAL_ADC_Init+0x1a2>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	689b      	ldr	r3, [r3, #8]
 801358c:	2b10      	cmp	r3, #16
 801358e:	d110      	bne.n	80135b2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	7d5b      	ldrb	r3, [r3, #21]
 8013594:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 801359a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80135a0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	7f1b      	ldrb	r3, [r3, #28]
 80135a6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80135a8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80135aa:	f043 030c 	orr.w	r3, r3, #12
 80135ae:	61bb      	str	r3, [r7, #24]
 80135b0:	e00d      	b.n	80135ce <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	7d5b      	ldrb	r3, [r3, #21]
 80135b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80135bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80135c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	7f1b      	ldrb	r3, [r3, #28]
 80135c8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80135ca:	4313      	orrs	r3, r2
 80135cc:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	7f1b      	ldrb	r3, [r3, #28]
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d106      	bne.n	80135e4 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	6a1b      	ldr	r3, [r3, #32]
 80135da:	3b01      	subs	r3, #1
 80135dc:	045b      	lsls	r3, r3, #17
 80135de:	69ba      	ldr	r2, [r7, #24]
 80135e0:	4313      	orrs	r3, r2
 80135e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d009      	beq.n	8013600 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80135fa:	69ba      	ldr	r2, [r7, #24]
 80135fc:	4313      	orrs	r3, r2
 80135fe:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	68da      	ldr	r2, [r3, #12]
 8013606:	4b40      	ldr	r3, [pc, #256]	; (8013708 <HAL_ADC_Init+0x2f8>)
 8013608:	4013      	ands	r3, r2
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	6812      	ldr	r2, [r2, #0]
 801360e:	69b9      	ldr	r1, [r7, #24]
 8013610:	430b      	orrs	r3, r1
 8013612:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	4618      	mov	r0, r3
 801361a:	f7ff fed2 	bl	80133c2 <LL_ADC_REG_IsConversionOngoing>
 801361e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	4618      	mov	r0, r3
 8013626:	f7ff fedf 	bl	80133e8 <LL_ADC_INJ_IsConversionOngoing>
 801362a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d14a      	bne.n	80136c8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d147      	bne.n	80136c8 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	7d1b      	ldrb	r3, [r3, #20]
 801363c:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8013642:	4313      	orrs	r3, r2
 8013644:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	68da      	ldr	r2, [r3, #12]
 801364c:	4b2f      	ldr	r3, [pc, #188]	; (801370c <HAL_ADC_Init+0x2fc>)
 801364e:	4013      	ands	r3, r2
 8013650:	687a      	ldr	r2, [r7, #4]
 8013652:	6812      	ldr	r2, [r2, #0]
 8013654:	69b9      	ldr	r1, [r7, #24]
 8013656:	430b      	orrs	r3, r1
 8013658:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013660:	2b01      	cmp	r3, #1
 8013662:	d11b      	bne.n	801369c <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013668:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	691a      	ldr	r2, [r3, #16]
 8013670:	4b27      	ldr	r3, [pc, #156]	; (8013710 <HAL_ADC_Init+0x300>)
 8013672:	4013      	ands	r3, r2
 8013674:	687a      	ldr	r2, [r7, #4]
 8013676:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013678:	3a01      	subs	r2, #1
 801367a:	0411      	lsls	r1, r2, #16
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013680:	4311      	orrs	r1, r2
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013686:	4311      	orrs	r1, r2
 8013688:	687a      	ldr	r2, [r7, #4]
 801368a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801368c:	430a      	orrs	r2, r1
 801368e:	431a      	orrs	r2, r3
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f042 0201 	orr.w	r2, r2, #1
 8013698:	611a      	str	r2, [r3, #16]
 801369a:	e007      	b.n	80136ac <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	691a      	ldr	r2, [r3, #16]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	f022 0201 	bic.w	r2, r2, #1
 80136aa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	691b      	ldr	r3, [r3, #16]
 80136b2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	430a      	orrs	r2, r1
 80136c0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f000 fb58 	bl	8013d78 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	2b01      	cmp	r3, #1
 80136ce:	d121      	bne.n	8013714 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136d6:	f023 010f 	bic.w	r1, r3, #15
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	699b      	ldr	r3, [r3, #24]
 80136de:	1e5a      	subs	r2, r3, #1
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	430a      	orrs	r2, r1
 80136e6:	631a      	str	r2, [r3, #48]	; 0x30
 80136e8:	e01c      	b.n	8013724 <HAL_ADC_Init+0x314>
 80136ea:	bf00      	nop
 80136ec:	24000698 	.word	0x24000698
 80136f0:	053e2d63 	.word	0x053e2d63
 80136f4:	40022000 	.word	0x40022000
 80136f8:	40022100 	.word	0x40022100
 80136fc:	58026000 	.word	0x58026000
 8013700:	40022300 	.word	0x40022300
 8013704:	58026300 	.word	0x58026300
 8013708:	fff0c003 	.word	0xfff0c003
 801370c:	ffffbffc 	.word	0xffffbffc
 8013710:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	f022 020f 	bic.w	r2, r2, #15
 8013722:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013728:	f023 0303 	bic.w	r3, r3, #3
 801372c:	f043 0201 	orr.w	r2, r3, #1
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	655a      	str	r2, [r3, #84]	; 0x54
 8013734:	e007      	b.n	8013746 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801373a:	f043 0210 	orr.w	r2, r3, #16
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8013742:	2301      	movs	r3, #1
 8013744:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8013746:	7ffb      	ldrb	r3, [r7, #31]
}
 8013748:	4618      	mov	r0, r3
 801374a:	3724      	adds	r7, #36	; 0x24
 801374c:	46bd      	mov	sp, r7
 801374e:	bd90      	pop	{r4, r7, pc}

08013750 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8013750:	b590      	push	{r4, r7, lr}
 8013752:	b099      	sub	sp, #100	; 0x64
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801375a:	2300      	movs	r3, #0
 801375c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8013760:	2300      	movs	r3, #0
 8013762:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	68db      	ldr	r3, [r3, #12]
 8013768:	4a99      	ldr	r2, [pc, #612]	; (80139d0 <HAL_ADC_ConfigChannel+0x280>)
 801376a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013772:	2b01      	cmp	r3, #1
 8013774:	d101      	bne.n	801377a <HAL_ADC_ConfigChannel+0x2a>
 8013776:	2302      	movs	r3, #2
 8013778:	e2e6      	b.n	8013d48 <HAL_ADC_ConfigChannel+0x5f8>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2201      	movs	r2, #1
 801377e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	4618      	mov	r0, r3
 8013788:	f7ff fe1b 	bl	80133c2 <LL_ADC_REG_IsConversionOngoing>
 801378c:	4603      	mov	r3, r0
 801378e:	2b00      	cmp	r3, #0
 8013790:	f040 82cb 	bne.w	8013d2a <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801379c:	2b00      	cmp	r3, #0
 801379e:	d108      	bne.n	80137b2 <HAL_ADC_ConfigChannel+0x62>
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	0e9b      	lsrs	r3, r3, #26
 80137a6:	f003 031f 	and.w	r3, r3, #31
 80137aa:	2201      	movs	r2, #1
 80137ac:	fa02 f303 	lsl.w	r3, r2, r3
 80137b0:	e00f      	b.n	80137d2 <HAL_ADC_ConfigChannel+0x82>
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80137b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137ba:	fa93 f3a3 	rbit	r3, r3
 80137be:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80137c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137c2:	fab3 f383 	clz	r3, r3
 80137c6:	b2db      	uxtb	r3, r3
 80137c8:	f003 031f 	and.w	r3, r3, #31
 80137cc:	2201      	movs	r2, #1
 80137ce:	fa02 f303 	lsl.w	r3, r2, r3
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	6812      	ldr	r2, [r2, #0]
 80137d6:	69d1      	ldr	r1, [r2, #28]
 80137d8:	687a      	ldr	r2, [r7, #4]
 80137da:	6812      	ldr	r2, [r2, #0]
 80137dc:	430b      	orrs	r3, r1
 80137de:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6818      	ldr	r0, [r3, #0]
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	6859      	ldr	r1, [r3, #4]
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	461a      	mov	r2, r3
 80137ee:	f7ff fd0b 	bl	8013208 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7ff fde3 	bl	80133c2 <LL_ADC_REG_IsConversionOngoing>
 80137fc:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	4618      	mov	r0, r3
 8013804:	f7ff fdf0 	bl	80133e8 <LL_ADC_INJ_IsConversionOngoing>
 8013808:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801380a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801380c:	2b00      	cmp	r3, #0
 801380e:	f040 80b3 	bne.w	8013978 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8013812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013814:	2b00      	cmp	r3, #0
 8013816:	f040 80af 	bne.w	8013978 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6818      	ldr	r0, [r3, #0]
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	6819      	ldr	r1, [r3, #0]
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	689b      	ldr	r3, [r3, #8]
 8013826:	461a      	mov	r2, r3
 8013828:	f7ff fd1a 	bl	8013260 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801382c:	4b69      	ldr	r3, [pc, #420]	; (80139d4 <HAL_ADC_ConfigChannel+0x284>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013838:	d10b      	bne.n	8013852 <HAL_ADC_ConfigChannel+0x102>
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	695a      	ldr	r2, [r3, #20]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	089b      	lsrs	r3, r3, #2
 8013846:	f003 0307 	and.w	r3, r3, #7
 801384a:	005b      	lsls	r3, r3, #1
 801384c:	fa02 f303 	lsl.w	r3, r2, r3
 8013850:	e01d      	b.n	801388e <HAL_ADC_ConfigChannel+0x13e>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	68db      	ldr	r3, [r3, #12]
 8013858:	f003 0310 	and.w	r3, r3, #16
 801385c:	2b00      	cmp	r3, #0
 801385e:	d10b      	bne.n	8013878 <HAL_ADC_ConfigChannel+0x128>
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	695a      	ldr	r2, [r3, #20]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	089b      	lsrs	r3, r3, #2
 801386c:	f003 0307 	and.w	r3, r3, #7
 8013870:	005b      	lsls	r3, r3, #1
 8013872:	fa02 f303 	lsl.w	r3, r2, r3
 8013876:	e00a      	b.n	801388e <HAL_ADC_ConfigChannel+0x13e>
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	695a      	ldr	r2, [r3, #20]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	089b      	lsrs	r3, r3, #2
 8013884:	f003 0304 	and.w	r3, r3, #4
 8013888:	005b      	lsls	r3, r3, #1
 801388a:	fa02 f303 	lsl.w	r3, r2, r3
 801388e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	691b      	ldr	r3, [r3, #16]
 8013894:	2b04      	cmp	r3, #4
 8013896:	d027      	beq.n	80138e8 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	6818      	ldr	r0, [r3, #0]
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	6919      	ldr	r1, [r3, #16]
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138a6:	f7ff fc5b 	bl	8013160 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6818      	ldr	r0, [r3, #0]
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	6919      	ldr	r1, [r3, #16]
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	7e5b      	ldrb	r3, [r3, #25]
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d102      	bne.n	80138c0 <HAL_ADC_ConfigChannel+0x170>
 80138ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80138be:	e000      	b.n	80138c2 <HAL_ADC_ConfigChannel+0x172>
 80138c0:	2300      	movs	r3, #0
 80138c2:	461a      	mov	r2, r3
 80138c4:	f7ff fc85 	bl	80131d2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6818      	ldr	r0, [r3, #0]
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	6919      	ldr	r1, [r3, #16]
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	7e1b      	ldrb	r3, [r3, #24]
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d102      	bne.n	80138de <HAL_ADC_ConfigChannel+0x18e>
 80138d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80138dc:	e000      	b.n	80138e0 <HAL_ADC_ConfigChannel+0x190>
 80138de:	2300      	movs	r3, #0
 80138e0:	461a      	mov	r2, r3
 80138e2:	f7ff fc5d 	bl	80131a0 <LL_ADC_SetDataRightShift>
 80138e6:	e047      	b.n	8013978 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	069b      	lsls	r3, r3, #26
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d107      	bne.n	801390c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801390a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	069b      	lsls	r3, r3, #26
 801391c:	429a      	cmp	r2, r3
 801391e:	d107      	bne.n	8013930 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801392e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	069b      	lsls	r3, r3, #26
 8013940:	429a      	cmp	r2, r3
 8013942:	d107      	bne.n	8013954 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8013952:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801395a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	069b      	lsls	r3, r3, #26
 8013964:	429a      	cmp	r2, r3
 8013966:	d107      	bne.n	8013978 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8013976:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	4618      	mov	r0, r3
 801397e:	f7ff fd0d 	bl	801339c <LL_ADC_IsEnabled>
 8013982:	4603      	mov	r3, r0
 8013984:	2b00      	cmp	r3, #0
 8013986:	f040 81d9 	bne.w	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	6818      	ldr	r0, [r3, #0]
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	6819      	ldr	r1, [r3, #0]
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	68db      	ldr	r3, [r3, #12]
 8013996:	461a      	mov	r2, r3
 8013998:	f7ff fc8e 	bl	80132b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	68db      	ldr	r3, [r3, #12]
 80139a0:	4a0b      	ldr	r2, [pc, #44]	; (80139d0 <HAL_ADC_ConfigChannel+0x280>)
 80139a2:	4293      	cmp	r3, r2
 80139a4:	f040 8101 	bne.w	8013baa <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d10f      	bne.n	80139d8 <HAL_ADC_ConfigChannel+0x288>
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	0e9b      	lsrs	r3, r3, #26
 80139be:	3301      	adds	r3, #1
 80139c0:	f003 031f 	and.w	r3, r3, #31
 80139c4:	2b09      	cmp	r3, #9
 80139c6:	bf94      	ite	ls
 80139c8:	2301      	movls	r3, #1
 80139ca:	2300      	movhi	r3, #0
 80139cc:	b2db      	uxtb	r3, r3
 80139ce:	e016      	b.n	80139fe <HAL_ADC_ConfigChannel+0x2ae>
 80139d0:	47ff0000 	.word	0x47ff0000
 80139d4:	5c001000 	.word	0x5c001000
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80139de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139e0:	fa93 f3a3 	rbit	r3, r3
 80139e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80139e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139e8:	fab3 f383 	clz	r3, r3
 80139ec:	b2db      	uxtb	r3, r3
 80139ee:	3301      	adds	r3, #1
 80139f0:	f003 031f 	and.w	r3, r3, #31
 80139f4:	2b09      	cmp	r3, #9
 80139f6:	bf94      	ite	ls
 80139f8:	2301      	movls	r3, #1
 80139fa:	2300      	movhi	r3, #0
 80139fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d064      	beq.n	8013acc <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d107      	bne.n	8013a1e <HAL_ADC_ConfigChannel+0x2ce>
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	0e9b      	lsrs	r3, r3, #26
 8013a14:	3301      	adds	r3, #1
 8013a16:	069b      	lsls	r3, r3, #26
 8013a18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013a1c:	e00e      	b.n	8013a3c <HAL_ADC_ConfigChannel+0x2ec>
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a26:	fa93 f3a3 	rbit	r3, r3
 8013a2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8013a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a2e:	fab3 f383 	clz	r3, r3
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	3301      	adds	r3, #1
 8013a36:	069b      	lsls	r3, r3, #26
 8013a38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d109      	bne.n	8013a5c <HAL_ADC_ConfigChannel+0x30c>
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	0e9b      	lsrs	r3, r3, #26
 8013a4e:	3301      	adds	r3, #1
 8013a50:	f003 031f 	and.w	r3, r3, #31
 8013a54:	2101      	movs	r1, #1
 8013a56:	fa01 f303 	lsl.w	r3, r1, r3
 8013a5a:	e010      	b.n	8013a7e <HAL_ADC_ConfigChannel+0x32e>
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a64:	fa93 f3a3 	rbit	r3, r3
 8013a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8013a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a6c:	fab3 f383 	clz	r3, r3
 8013a70:	b2db      	uxtb	r3, r3
 8013a72:	3301      	adds	r3, #1
 8013a74:	f003 031f 	and.w	r3, r3, #31
 8013a78:	2101      	movs	r1, #1
 8013a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a7e:	ea42 0103 	orr.w	r1, r2, r3
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d10a      	bne.n	8013aa4 <HAL_ADC_ConfigChannel+0x354>
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	0e9b      	lsrs	r3, r3, #26
 8013a94:	3301      	adds	r3, #1
 8013a96:	f003 021f 	and.w	r2, r3, #31
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	005b      	lsls	r3, r3, #1
 8013a9e:	4413      	add	r3, r2
 8013aa0:	051b      	lsls	r3, r3, #20
 8013aa2:	e011      	b.n	8013ac8 <HAL_ADC_ConfigChannel+0x378>
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aac:	fa93 f3a3 	rbit	r3, r3
 8013ab0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8013ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab4:	fab3 f383 	clz	r3, r3
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	3301      	adds	r3, #1
 8013abc:	f003 021f 	and.w	r2, r3, #31
 8013ac0:	4613      	mov	r3, r2
 8013ac2:	005b      	lsls	r3, r3, #1
 8013ac4:	4413      	add	r3, r2
 8013ac6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013ac8:	430b      	orrs	r3, r1
 8013aca:	e069      	b.n	8013ba0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d107      	bne.n	8013ae8 <HAL_ADC_ConfigChannel+0x398>
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	0e9b      	lsrs	r3, r3, #26
 8013ade:	3301      	adds	r3, #1
 8013ae0:	069b      	lsls	r3, r3, #26
 8013ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013ae6:	e00e      	b.n	8013b06 <HAL_ADC_ConfigChannel+0x3b6>
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013aee:	6a3b      	ldr	r3, [r7, #32]
 8013af0:	fa93 f3a3 	rbit	r3, r3
 8013af4:	61fb      	str	r3, [r7, #28]
  return result;
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	fab3 f383 	clz	r3, r3
 8013afc:	b2db      	uxtb	r3, r3
 8013afe:	3301      	adds	r3, #1
 8013b00:	069b      	lsls	r3, r3, #26
 8013b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d109      	bne.n	8013b26 <HAL_ADC_ConfigChannel+0x3d6>
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	0e9b      	lsrs	r3, r3, #26
 8013b18:	3301      	adds	r3, #1
 8013b1a:	f003 031f 	and.w	r3, r3, #31
 8013b1e:	2101      	movs	r1, #1
 8013b20:	fa01 f303 	lsl.w	r3, r1, r3
 8013b24:	e010      	b.n	8013b48 <HAL_ADC_ConfigChannel+0x3f8>
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013b2c:	69bb      	ldr	r3, [r7, #24]
 8013b2e:	fa93 f3a3 	rbit	r3, r3
 8013b32:	617b      	str	r3, [r7, #20]
  return result;
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	fab3 f383 	clz	r3, r3
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	f003 031f 	and.w	r3, r3, #31
 8013b42:	2101      	movs	r1, #1
 8013b44:	fa01 f303 	lsl.w	r3, r1, r3
 8013b48:	ea42 0103 	orr.w	r1, r2, r3
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d10d      	bne.n	8013b74 <HAL_ADC_ConfigChannel+0x424>
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	0e9b      	lsrs	r3, r3, #26
 8013b5e:	3301      	adds	r3, #1
 8013b60:	f003 021f 	and.w	r2, r3, #31
 8013b64:	4613      	mov	r3, r2
 8013b66:	005b      	lsls	r3, r3, #1
 8013b68:	4413      	add	r3, r2
 8013b6a:	3b1e      	subs	r3, #30
 8013b6c:	051b      	lsls	r3, r3, #20
 8013b6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013b72:	e014      	b.n	8013b9e <HAL_ADC_ConfigChannel+0x44e>
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013b7a:	693b      	ldr	r3, [r7, #16]
 8013b7c:	fa93 f3a3 	rbit	r3, r3
 8013b80:	60fb      	str	r3, [r7, #12]
  return result;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	fab3 f383 	clz	r3, r3
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	f003 021f 	and.w	r2, r3, #31
 8013b90:	4613      	mov	r3, r2
 8013b92:	005b      	lsls	r3, r3, #1
 8013b94:	4413      	add	r3, r2
 8013b96:	3b1e      	subs	r3, #30
 8013b98:	051b      	lsls	r3, r3, #20
 8013b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013b9e:	430b      	orrs	r3, r1
 8013ba0:	683a      	ldr	r2, [r7, #0]
 8013ba2:	6892      	ldr	r2, [r2, #8]
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	f7ff fb5b 	bl	8013260 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	f280 80c4 	bge.w	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	4a65      	ldr	r2, [pc, #404]	; (8013d50 <HAL_ADC_ConfigChannel+0x600>)
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d004      	beq.n	8013bc8 <HAL_ADC_ConfigChannel+0x478>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	4a64      	ldr	r2, [pc, #400]	; (8013d54 <HAL_ADC_ConfigChannel+0x604>)
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	d101      	bne.n	8013bcc <HAL_ADC_ConfigChannel+0x47c>
 8013bc8:	4b63      	ldr	r3, [pc, #396]	; (8013d58 <HAL_ADC_ConfigChannel+0x608>)
 8013bca:	e000      	b.n	8013bce <HAL_ADC_ConfigChannel+0x47e>
 8013bcc:	4b63      	ldr	r3, [pc, #396]	; (8013d5c <HAL_ADC_ConfigChannel+0x60c>)
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7ff fab8 	bl	8013144 <LL_ADC_GetCommonPathInternalCh>
 8013bd4:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	4a5d      	ldr	r2, [pc, #372]	; (8013d50 <HAL_ADC_ConfigChannel+0x600>)
 8013bdc:	4293      	cmp	r3, r2
 8013bde:	d004      	beq.n	8013bea <HAL_ADC_ConfigChannel+0x49a>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	4a5b      	ldr	r2, [pc, #364]	; (8013d54 <HAL_ADC_ConfigChannel+0x604>)
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d10e      	bne.n	8013c08 <HAL_ADC_ConfigChannel+0x4b8>
 8013bea:	4859      	ldr	r0, [pc, #356]	; (8013d50 <HAL_ADC_ConfigChannel+0x600>)
 8013bec:	f7ff fbd6 	bl	801339c <LL_ADC_IsEnabled>
 8013bf0:	4604      	mov	r4, r0
 8013bf2:	4858      	ldr	r0, [pc, #352]	; (8013d54 <HAL_ADC_ConfigChannel+0x604>)
 8013bf4:	f7ff fbd2 	bl	801339c <LL_ADC_IsEnabled>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	4323      	orrs	r3, r4
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	bf0c      	ite	eq
 8013c00:	2301      	moveq	r3, #1
 8013c02:	2300      	movne	r3, #0
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	e008      	b.n	8013c1a <HAL_ADC_ConfigChannel+0x4ca>
 8013c08:	4855      	ldr	r0, [pc, #340]	; (8013d60 <HAL_ADC_ConfigChannel+0x610>)
 8013c0a:	f7ff fbc7 	bl	801339c <LL_ADC_IsEnabled>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	bf0c      	ite	eq
 8013c14:	2301      	moveq	r3, #1
 8013c16:	2300      	movne	r3, #0
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d07b      	beq.n	8013d16 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	4a50      	ldr	r2, [pc, #320]	; (8013d64 <HAL_ADC_ConfigChannel+0x614>)
 8013c24:	4293      	cmp	r3, r2
 8013c26:	d12e      	bne.n	8013c86 <HAL_ADC_ConfigChannel+0x536>
 8013c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d129      	bne.n	8013c86 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	4a4a      	ldr	r2, [pc, #296]	; (8013d60 <HAL_ADC_ConfigChannel+0x610>)
 8013c38:	4293      	cmp	r3, r2
 8013c3a:	d17f      	bne.n	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	4a43      	ldr	r2, [pc, #268]	; (8013d50 <HAL_ADC_ConfigChannel+0x600>)
 8013c42:	4293      	cmp	r3, r2
 8013c44:	d004      	beq.n	8013c50 <HAL_ADC_ConfigChannel+0x500>
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	4a42      	ldr	r2, [pc, #264]	; (8013d54 <HAL_ADC_ConfigChannel+0x604>)
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	d101      	bne.n	8013c54 <HAL_ADC_ConfigChannel+0x504>
 8013c50:	4a41      	ldr	r2, [pc, #260]	; (8013d58 <HAL_ADC_ConfigChannel+0x608>)
 8013c52:	e000      	b.n	8013c56 <HAL_ADC_ConfigChannel+0x506>
 8013c54:	4a41      	ldr	r2, [pc, #260]	; (8013d5c <HAL_ADC_ConfigChannel+0x60c>)
 8013c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	4610      	mov	r0, r2
 8013c60:	f7ff fa5d 	bl	801311e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8013c64:	4b40      	ldr	r3, [pc, #256]	; (8013d68 <HAL_ADC_ConfigChannel+0x618>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	099b      	lsrs	r3, r3, #6
 8013c6a:	4a40      	ldr	r2, [pc, #256]	; (8013d6c <HAL_ADC_ConfigChannel+0x61c>)
 8013c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8013c70:	099b      	lsrs	r3, r3, #6
 8013c72:	005b      	lsls	r3, r3, #1
 8013c74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8013c76:	e002      	b.n	8013c7e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	3b01      	subs	r3, #1
 8013c7c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d1f9      	bne.n	8013c78 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013c84:	e05a      	b.n	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	4a39      	ldr	r2, [pc, #228]	; (8013d70 <HAL_ADC_ConfigChannel+0x620>)
 8013c8c:	4293      	cmp	r3, r2
 8013c8e:	d11e      	bne.n	8013cce <HAL_ADC_ConfigChannel+0x57e>
 8013c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d119      	bne.n	8013cce <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	4a30      	ldr	r2, [pc, #192]	; (8013d60 <HAL_ADC_ConfigChannel+0x610>)
 8013ca0:	4293      	cmp	r3, r2
 8013ca2:	d14b      	bne.n	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	4a29      	ldr	r2, [pc, #164]	; (8013d50 <HAL_ADC_ConfigChannel+0x600>)
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d004      	beq.n	8013cb8 <HAL_ADC_ConfigChannel+0x568>
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	4a28      	ldr	r2, [pc, #160]	; (8013d54 <HAL_ADC_ConfigChannel+0x604>)
 8013cb4:	4293      	cmp	r3, r2
 8013cb6:	d101      	bne.n	8013cbc <HAL_ADC_ConfigChannel+0x56c>
 8013cb8:	4a27      	ldr	r2, [pc, #156]	; (8013d58 <HAL_ADC_ConfigChannel+0x608>)
 8013cba:	e000      	b.n	8013cbe <HAL_ADC_ConfigChannel+0x56e>
 8013cbc:	4a27      	ldr	r2, [pc, #156]	; (8013d5c <HAL_ADC_ConfigChannel+0x60c>)
 8013cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	4610      	mov	r0, r2
 8013cc8:	f7ff fa29 	bl	801311e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013ccc:	e036      	b.n	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	4a28      	ldr	r2, [pc, #160]	; (8013d74 <HAL_ADC_ConfigChannel+0x624>)
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d131      	bne.n	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
 8013cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d12c      	bne.n	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	4a1e      	ldr	r2, [pc, #120]	; (8013d60 <HAL_ADC_ConfigChannel+0x610>)
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d127      	bne.n	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4a17      	ldr	r2, [pc, #92]	; (8013d50 <HAL_ADC_ConfigChannel+0x600>)
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d004      	beq.n	8013d00 <HAL_ADC_ConfigChannel+0x5b0>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	4a16      	ldr	r2, [pc, #88]	; (8013d54 <HAL_ADC_ConfigChannel+0x604>)
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d101      	bne.n	8013d04 <HAL_ADC_ConfigChannel+0x5b4>
 8013d00:	4a15      	ldr	r2, [pc, #84]	; (8013d58 <HAL_ADC_ConfigChannel+0x608>)
 8013d02:	e000      	b.n	8013d06 <HAL_ADC_ConfigChannel+0x5b6>
 8013d04:	4a15      	ldr	r2, [pc, #84]	; (8013d5c <HAL_ADC_ConfigChannel+0x60c>)
 8013d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	4610      	mov	r0, r2
 8013d10:	f7ff fa05 	bl	801311e <LL_ADC_SetCommonPathInternalCh>
 8013d14:	e012      	b.n	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d1a:	f043 0220 	orr.w	r2, r3, #32
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8013d22:	2301      	movs	r3, #1
 8013d24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013d28:	e008      	b.n	8013d3c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d2e:	f043 0220 	orr.w	r2, r3, #32
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8013d36:	2301      	movs	r3, #1
 8013d38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8013d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3764      	adds	r7, #100	; 0x64
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd90      	pop	{r4, r7, pc}
 8013d50:	40022000 	.word	0x40022000
 8013d54:	40022100 	.word	0x40022100
 8013d58:	40022300 	.word	0x40022300
 8013d5c:	58026300 	.word	0x58026300
 8013d60:	58026000 	.word	0x58026000
 8013d64:	cb840000 	.word	0xcb840000
 8013d68:	24000698 	.word	0x24000698
 8013d6c:	053e2d63 	.word	0x053e2d63
 8013d70:	c7520000 	.word	0xc7520000
 8013d74:	cfb80000 	.word	0xcfb80000

08013d78 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b084      	sub	sp, #16
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	4a70      	ldr	r2, [pc, #448]	; (8013f48 <ADC_ConfigureBoostMode+0x1d0>)
 8013d86:	4293      	cmp	r3, r2
 8013d88:	d004      	beq.n	8013d94 <ADC_ConfigureBoostMode+0x1c>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	4a6f      	ldr	r2, [pc, #444]	; (8013f4c <ADC_ConfigureBoostMode+0x1d4>)
 8013d90:	4293      	cmp	r3, r2
 8013d92:	d109      	bne.n	8013da8 <ADC_ConfigureBoostMode+0x30>
 8013d94:	4b6e      	ldr	r3, [pc, #440]	; (8013f50 <ADC_ConfigureBoostMode+0x1d8>)
 8013d96:	689b      	ldr	r3, [r3, #8]
 8013d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	bf14      	ite	ne
 8013da0:	2301      	movne	r3, #1
 8013da2:	2300      	moveq	r3, #0
 8013da4:	b2db      	uxtb	r3, r3
 8013da6:	e008      	b.n	8013dba <ADC_ConfigureBoostMode+0x42>
 8013da8:	4b6a      	ldr	r3, [pc, #424]	; (8013f54 <ADC_ConfigureBoostMode+0x1dc>)
 8013daa:	689b      	ldr	r3, [r3, #8]
 8013dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	bf14      	ite	ne
 8013db4:	2301      	movne	r3, #1
 8013db6:	2300      	moveq	r3, #0
 8013db8:	b2db      	uxtb	r3, r3
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d01a      	beq.n	8013df4 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8013dbe:	f006 fbff 	bl	801a5c0 <HAL_RCC_GetHCLKFreq>
 8013dc2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013dcc:	d006      	beq.n	8013ddc <ADC_ConfigureBoostMode+0x64>
 8013dce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013dd2:	d00b      	beq.n	8013dec <ADC_ConfigureBoostMode+0x74>
 8013dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013dd8:	d000      	beq.n	8013ddc <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8013dda:	e05d      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	0c1b      	lsrs	r3, r3, #16
 8013de2:	68fa      	ldr	r2, [r7, #12]
 8013de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013de8:	60fb      	str	r3, [r7, #12]
        break;
 8013dea:	e055      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	089b      	lsrs	r3, r3, #2
 8013df0:	60fb      	str	r3, [r7, #12]
        break;
 8013df2:	e051      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8013df4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8013df8:	f007 fb6e 	bl	801b4d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8013dfc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8013e06:	d02a      	beq.n	8013e5e <ADC_ConfigureBoostMode+0xe6>
 8013e08:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8013e0c:	d813      	bhi.n	8013e36 <ADC_ConfigureBoostMode+0xbe>
 8013e0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8013e12:	d024      	beq.n	8013e5e <ADC_ConfigureBoostMode+0xe6>
 8013e14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8013e18:	d806      	bhi.n	8013e28 <ADC_ConfigureBoostMode+0xb0>
 8013e1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013e1e:	d01e      	beq.n	8013e5e <ADC_ConfigureBoostMode+0xe6>
 8013e20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8013e24:	d01b      	beq.n	8013e5e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8013e26:	e037      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8013e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013e2c:	d017      	beq.n	8013e5e <ADC_ConfigureBoostMode+0xe6>
 8013e2e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8013e32:	d014      	beq.n	8013e5e <ADC_ConfigureBoostMode+0xe6>
        break;
 8013e34:	e030      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8013e36:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8013e3a:	d021      	beq.n	8013e80 <ADC_ConfigureBoostMode+0x108>
 8013e3c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8013e40:	d806      	bhi.n	8013e50 <ADC_ConfigureBoostMode+0xd8>
 8013e42:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8013e46:	d013      	beq.n	8013e70 <ADC_ConfigureBoostMode+0xf8>
 8013e48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013e4c:	d014      	beq.n	8013e78 <ADC_ConfigureBoostMode+0x100>
        break;
 8013e4e:	e023      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8013e50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8013e54:	d018      	beq.n	8013e88 <ADC_ConfigureBoostMode+0x110>
 8013e56:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8013e5a:	d019      	beq.n	8013e90 <ADC_ConfigureBoostMode+0x118>
        break;
 8013e5c:	e01c      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	0c9b      	lsrs	r3, r3, #18
 8013e64:	005b      	lsls	r3, r3, #1
 8013e66:	68fa      	ldr	r2, [r7, #12]
 8013e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e6c:	60fb      	str	r3, [r7, #12]
        break;
 8013e6e:	e013      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	091b      	lsrs	r3, r3, #4
 8013e74:	60fb      	str	r3, [r7, #12]
        break;
 8013e76:	e00f      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	095b      	lsrs	r3, r3, #5
 8013e7c:	60fb      	str	r3, [r7, #12]
        break;
 8013e7e:	e00b      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	099b      	lsrs	r3, r3, #6
 8013e84:	60fb      	str	r3, [r7, #12]
        break;
 8013e86:	e007      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	09db      	lsrs	r3, r3, #7
 8013e8c:	60fb      	str	r3, [r7, #12]
        break;
 8013e8e:	e003      	b.n	8013e98 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	0a1b      	lsrs	r3, r3, #8
 8013e94:	60fb      	str	r3, [r7, #12]
        break;
 8013e96:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8013e98:	f7ff f90c 	bl	80130b4 <HAL_GetREVID>
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	f241 0303 	movw	r3, #4099	; 0x1003
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d815      	bhi.n	8013ed2 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	4a2b      	ldr	r2, [pc, #172]	; (8013f58 <ADC_ConfigureBoostMode+0x1e0>)
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	d908      	bls.n	8013ec0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	689a      	ldr	r2, [r3, #8]
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013ebc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8013ebe:	e03e      	b.n	8013f3e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	689a      	ldr	r2, [r3, #8]
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013ece:	609a      	str	r2, [r3, #8]
}
 8013ed0:	e035      	b.n	8013f3e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	085b      	lsrs	r3, r3, #1
 8013ed6:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	4a20      	ldr	r2, [pc, #128]	; (8013f5c <ADC_ConfigureBoostMode+0x1e4>)
 8013edc:	4293      	cmp	r3, r2
 8013ede:	d808      	bhi.n	8013ef2 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	689a      	ldr	r2, [r3, #8]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013eee:	609a      	str	r2, [r3, #8]
}
 8013ef0:	e025      	b.n	8013f3e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	4a1a      	ldr	r2, [pc, #104]	; (8013f60 <ADC_ConfigureBoostMode+0x1e8>)
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d80a      	bhi.n	8013f10 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	689b      	ldr	r3, [r3, #8]
 8013f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013f0c:	609a      	str	r2, [r3, #8]
}
 8013f0e:	e016      	b.n	8013f3e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	4a14      	ldr	r2, [pc, #80]	; (8013f64 <ADC_ConfigureBoostMode+0x1ec>)
 8013f14:	4293      	cmp	r3, r2
 8013f16:	d80a      	bhi.n	8013f2e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	689b      	ldr	r3, [r3, #8]
 8013f1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013f2a:	609a      	str	r2, [r3, #8]
}
 8013f2c:	e007      	b.n	8013f3e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	689a      	ldr	r2, [r3, #8]
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8013f3c:	609a      	str	r2, [r3, #8]
}
 8013f3e:	bf00      	nop
 8013f40:	3710      	adds	r7, #16
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
 8013f46:	bf00      	nop
 8013f48:	40022000 	.word	0x40022000
 8013f4c:	40022100 	.word	0x40022100
 8013f50:	40022300 	.word	0x40022300
 8013f54:	58026300 	.word	0x58026300
 8013f58:	01312d00 	.word	0x01312d00
 8013f5c:	005f5e10 	.word	0x005f5e10
 8013f60:	00bebc20 	.word	0x00bebc20
 8013f64:	017d7840 	.word	0x017d7840

08013f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b085      	sub	sp, #20
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f003 0307 	and.w	r3, r3, #7
 8013f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013f78:	4b0b      	ldr	r3, [pc, #44]	; (8013fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8013f7a:	68db      	ldr	r3, [r3, #12]
 8013f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8013f7e:	68ba      	ldr	r2, [r7, #8]
 8013f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013f84:	4013      	ands	r3, r2
 8013f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8013f90:	4b06      	ldr	r3, [pc, #24]	; (8013fac <__NVIC_SetPriorityGrouping+0x44>)
 8013f92:	4313      	orrs	r3, r2
 8013f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8013f96:	4a04      	ldr	r2, [pc, #16]	; (8013fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	60d3      	str	r3, [r2, #12]
}
 8013f9c:	bf00      	nop
 8013f9e:	3714      	adds	r7, #20
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa6:	4770      	bx	lr
 8013fa8:	e000ed00 	.word	0xe000ed00
 8013fac:	05fa0000 	.word	0x05fa0000

08013fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013fb4:	4b04      	ldr	r3, [pc, #16]	; (8013fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	0a1b      	lsrs	r3, r3, #8
 8013fba:	f003 0307 	and.w	r3, r3, #7
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr
 8013fc8:	e000ed00 	.word	0xe000ed00

08013fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013fcc:	b480      	push	{r7}
 8013fce:	b083      	sub	sp, #12
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	db0b      	blt.n	8013ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013fde:	88fb      	ldrh	r3, [r7, #6]
 8013fe0:	f003 021f 	and.w	r2, r3, #31
 8013fe4:	4907      	ldr	r1, [pc, #28]	; (8014004 <__NVIC_EnableIRQ+0x38>)
 8013fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013fea:	095b      	lsrs	r3, r3, #5
 8013fec:	2001      	movs	r0, #1
 8013fee:	fa00 f202 	lsl.w	r2, r0, r2
 8013ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8013ff6:	bf00      	nop
 8013ff8:	370c      	adds	r7, #12
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr
 8014002:	bf00      	nop
 8014004:	e000e100 	.word	0xe000e100

08014008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
 801400e:	4603      	mov	r3, r0
 8014010:	6039      	str	r1, [r7, #0]
 8014012:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014018:	2b00      	cmp	r3, #0
 801401a:	db0a      	blt.n	8014032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	b2da      	uxtb	r2, r3
 8014020:	490c      	ldr	r1, [pc, #48]	; (8014054 <__NVIC_SetPriority+0x4c>)
 8014022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014026:	0112      	lsls	r2, r2, #4
 8014028:	b2d2      	uxtb	r2, r2
 801402a:	440b      	add	r3, r1
 801402c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8014030:	e00a      	b.n	8014048 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	b2da      	uxtb	r2, r3
 8014036:	4908      	ldr	r1, [pc, #32]	; (8014058 <__NVIC_SetPriority+0x50>)
 8014038:	88fb      	ldrh	r3, [r7, #6]
 801403a:	f003 030f 	and.w	r3, r3, #15
 801403e:	3b04      	subs	r3, #4
 8014040:	0112      	lsls	r2, r2, #4
 8014042:	b2d2      	uxtb	r2, r2
 8014044:	440b      	add	r3, r1
 8014046:	761a      	strb	r2, [r3, #24]
}
 8014048:	bf00      	nop
 801404a:	370c      	adds	r7, #12
 801404c:	46bd      	mov	sp, r7
 801404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014052:	4770      	bx	lr
 8014054:	e000e100 	.word	0xe000e100
 8014058:	e000ed00 	.word	0xe000ed00

0801405c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801405c:	b480      	push	{r7}
 801405e:	b089      	sub	sp, #36	; 0x24
 8014060:	af00      	add	r7, sp, #0
 8014062:	60f8      	str	r0, [r7, #12]
 8014064:	60b9      	str	r1, [r7, #8]
 8014066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	f003 0307 	and.w	r3, r3, #7
 801406e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014070:	69fb      	ldr	r3, [r7, #28]
 8014072:	f1c3 0307 	rsb	r3, r3, #7
 8014076:	2b04      	cmp	r3, #4
 8014078:	bf28      	it	cs
 801407a:	2304      	movcs	r3, #4
 801407c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801407e:	69fb      	ldr	r3, [r7, #28]
 8014080:	3304      	adds	r3, #4
 8014082:	2b06      	cmp	r3, #6
 8014084:	d902      	bls.n	801408c <NVIC_EncodePriority+0x30>
 8014086:	69fb      	ldr	r3, [r7, #28]
 8014088:	3b03      	subs	r3, #3
 801408a:	e000      	b.n	801408e <NVIC_EncodePriority+0x32>
 801408c:	2300      	movs	r3, #0
 801408e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014090:	f04f 32ff 	mov.w	r2, #4294967295
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	fa02 f303 	lsl.w	r3, r2, r3
 801409a:	43da      	mvns	r2, r3
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	401a      	ands	r2, r3
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80140a4:	f04f 31ff 	mov.w	r1, #4294967295
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	fa01 f303 	lsl.w	r3, r1, r3
 80140ae:	43d9      	mvns	r1, r3
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80140b4:	4313      	orrs	r3, r2
         );
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3724      	adds	r7, #36	; 0x24
 80140ba:	46bd      	mov	sp, r7
 80140bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c0:	4770      	bx	lr

080140c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80140c2:	b580      	push	{r7, lr}
 80140c4:	b082      	sub	sp, #8
 80140c6:	af00      	add	r7, sp, #0
 80140c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f7ff ff4c 	bl	8013f68 <__NVIC_SetPriorityGrouping>
}
 80140d0:	bf00      	nop
 80140d2:	3708      	adds	r7, #8
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}

080140d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b086      	sub	sp, #24
 80140dc:	af00      	add	r7, sp, #0
 80140de:	4603      	mov	r3, r0
 80140e0:	60b9      	str	r1, [r7, #8]
 80140e2:	607a      	str	r2, [r7, #4]
 80140e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80140e6:	f7ff ff63 	bl	8013fb0 <__NVIC_GetPriorityGrouping>
 80140ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80140ec:	687a      	ldr	r2, [r7, #4]
 80140ee:	68b9      	ldr	r1, [r7, #8]
 80140f0:	6978      	ldr	r0, [r7, #20]
 80140f2:	f7ff ffb3 	bl	801405c <NVIC_EncodePriority>
 80140f6:	4602      	mov	r2, r0
 80140f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80140fc:	4611      	mov	r1, r2
 80140fe:	4618      	mov	r0, r3
 8014100:	f7ff ff82 	bl	8014008 <__NVIC_SetPriority>
}
 8014104:	bf00      	nop
 8014106:	3718      	adds	r7, #24
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}

0801410c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	4603      	mov	r3, r0
 8014114:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801411a:	4618      	mov	r0, r3
 801411c:	f7ff ff56 	bl	8013fcc <__NVIC_EnableIRQ>
}
 8014120:	bf00      	nop
 8014122:	3708      	adds	r7, #8
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8014130:	f7fe ff92 	bl	8013058 <HAL_GetTick>
 8014134:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d101      	bne.n	8014140 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801413c:	2301      	movs	r3, #1
 801413e:	e316      	b.n	801476e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	4a66      	ldr	r2, [pc, #408]	; (80142e0 <HAL_DMA_Init+0x1b8>)
 8014146:	4293      	cmp	r3, r2
 8014148:	d04a      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	4a65      	ldr	r2, [pc, #404]	; (80142e4 <HAL_DMA_Init+0x1bc>)
 8014150:	4293      	cmp	r3, r2
 8014152:	d045      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	4a63      	ldr	r2, [pc, #396]	; (80142e8 <HAL_DMA_Init+0x1c0>)
 801415a:	4293      	cmp	r3, r2
 801415c:	d040      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	4a62      	ldr	r2, [pc, #392]	; (80142ec <HAL_DMA_Init+0x1c4>)
 8014164:	4293      	cmp	r3, r2
 8014166:	d03b      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	4a60      	ldr	r2, [pc, #384]	; (80142f0 <HAL_DMA_Init+0x1c8>)
 801416e:	4293      	cmp	r3, r2
 8014170:	d036      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	4a5f      	ldr	r2, [pc, #380]	; (80142f4 <HAL_DMA_Init+0x1cc>)
 8014178:	4293      	cmp	r3, r2
 801417a:	d031      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	4a5d      	ldr	r2, [pc, #372]	; (80142f8 <HAL_DMA_Init+0x1d0>)
 8014182:	4293      	cmp	r3, r2
 8014184:	d02c      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	4a5c      	ldr	r2, [pc, #368]	; (80142fc <HAL_DMA_Init+0x1d4>)
 801418c:	4293      	cmp	r3, r2
 801418e:	d027      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	4a5a      	ldr	r2, [pc, #360]	; (8014300 <HAL_DMA_Init+0x1d8>)
 8014196:	4293      	cmp	r3, r2
 8014198:	d022      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	4a59      	ldr	r2, [pc, #356]	; (8014304 <HAL_DMA_Init+0x1dc>)
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d01d      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	4a57      	ldr	r2, [pc, #348]	; (8014308 <HAL_DMA_Init+0x1e0>)
 80141aa:	4293      	cmp	r3, r2
 80141ac:	d018      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	4a56      	ldr	r2, [pc, #344]	; (801430c <HAL_DMA_Init+0x1e4>)
 80141b4:	4293      	cmp	r3, r2
 80141b6:	d013      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	4a54      	ldr	r2, [pc, #336]	; (8014310 <HAL_DMA_Init+0x1e8>)
 80141be:	4293      	cmp	r3, r2
 80141c0:	d00e      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	4a53      	ldr	r2, [pc, #332]	; (8014314 <HAL_DMA_Init+0x1ec>)
 80141c8:	4293      	cmp	r3, r2
 80141ca:	d009      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	4a51      	ldr	r2, [pc, #324]	; (8014318 <HAL_DMA_Init+0x1f0>)
 80141d2:	4293      	cmp	r3, r2
 80141d4:	d004      	beq.n	80141e0 <HAL_DMA_Init+0xb8>
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	4a50      	ldr	r2, [pc, #320]	; (801431c <HAL_DMA_Init+0x1f4>)
 80141dc:	4293      	cmp	r3, r2
 80141de:	d101      	bne.n	80141e4 <HAL_DMA_Init+0xbc>
 80141e0:	2301      	movs	r3, #1
 80141e2:	e000      	b.n	80141e6 <HAL_DMA_Init+0xbe>
 80141e4:	2300      	movs	r3, #0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f000 813b 	beq.w	8014462 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2200      	movs	r2, #0
 80141f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2202      	movs	r2, #2
 80141f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	4a37      	ldr	r2, [pc, #220]	; (80142e0 <HAL_DMA_Init+0x1b8>)
 8014202:	4293      	cmp	r3, r2
 8014204:	d04a      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	4a36      	ldr	r2, [pc, #216]	; (80142e4 <HAL_DMA_Init+0x1bc>)
 801420c:	4293      	cmp	r3, r2
 801420e:	d045      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4a34      	ldr	r2, [pc, #208]	; (80142e8 <HAL_DMA_Init+0x1c0>)
 8014216:	4293      	cmp	r3, r2
 8014218:	d040      	beq.n	801429c <HAL_DMA_Init+0x174>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	4a33      	ldr	r2, [pc, #204]	; (80142ec <HAL_DMA_Init+0x1c4>)
 8014220:	4293      	cmp	r3, r2
 8014222:	d03b      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	4a31      	ldr	r2, [pc, #196]	; (80142f0 <HAL_DMA_Init+0x1c8>)
 801422a:	4293      	cmp	r3, r2
 801422c:	d036      	beq.n	801429c <HAL_DMA_Init+0x174>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4a30      	ldr	r2, [pc, #192]	; (80142f4 <HAL_DMA_Init+0x1cc>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d031      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4a2e      	ldr	r2, [pc, #184]	; (80142f8 <HAL_DMA_Init+0x1d0>)
 801423e:	4293      	cmp	r3, r2
 8014240:	d02c      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4a2d      	ldr	r2, [pc, #180]	; (80142fc <HAL_DMA_Init+0x1d4>)
 8014248:	4293      	cmp	r3, r2
 801424a:	d027      	beq.n	801429c <HAL_DMA_Init+0x174>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4a2b      	ldr	r2, [pc, #172]	; (8014300 <HAL_DMA_Init+0x1d8>)
 8014252:	4293      	cmp	r3, r2
 8014254:	d022      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	4a2a      	ldr	r2, [pc, #168]	; (8014304 <HAL_DMA_Init+0x1dc>)
 801425c:	4293      	cmp	r3, r2
 801425e:	d01d      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	4a28      	ldr	r2, [pc, #160]	; (8014308 <HAL_DMA_Init+0x1e0>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d018      	beq.n	801429c <HAL_DMA_Init+0x174>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4a27      	ldr	r2, [pc, #156]	; (801430c <HAL_DMA_Init+0x1e4>)
 8014270:	4293      	cmp	r3, r2
 8014272:	d013      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	4a25      	ldr	r2, [pc, #148]	; (8014310 <HAL_DMA_Init+0x1e8>)
 801427a:	4293      	cmp	r3, r2
 801427c:	d00e      	beq.n	801429c <HAL_DMA_Init+0x174>
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	4a24      	ldr	r2, [pc, #144]	; (8014314 <HAL_DMA_Init+0x1ec>)
 8014284:	4293      	cmp	r3, r2
 8014286:	d009      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	4a22      	ldr	r2, [pc, #136]	; (8014318 <HAL_DMA_Init+0x1f0>)
 801428e:	4293      	cmp	r3, r2
 8014290:	d004      	beq.n	801429c <HAL_DMA_Init+0x174>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	4a21      	ldr	r2, [pc, #132]	; (801431c <HAL_DMA_Init+0x1f4>)
 8014298:	4293      	cmp	r3, r2
 801429a:	d108      	bne.n	80142ae <HAL_DMA_Init+0x186>
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	681a      	ldr	r2, [r3, #0]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	f022 0201 	bic.w	r2, r2, #1
 80142aa:	601a      	str	r2, [r3, #0]
 80142ac:	e007      	b.n	80142be <HAL_DMA_Init+0x196>
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	f022 0201 	bic.w	r2, r2, #1
 80142bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80142be:	e02f      	b.n	8014320 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80142c0:	f7fe feca 	bl	8013058 <HAL_GetTick>
 80142c4:	4602      	mov	r2, r0
 80142c6:	693b      	ldr	r3, [r7, #16]
 80142c8:	1ad3      	subs	r3, r2, r3
 80142ca:	2b05      	cmp	r3, #5
 80142cc:	d928      	bls.n	8014320 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	2220      	movs	r2, #32
 80142d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2203      	movs	r2, #3
 80142d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80142dc:	2301      	movs	r3, #1
 80142de:	e246      	b.n	801476e <HAL_DMA_Init+0x646>
 80142e0:	40020010 	.word	0x40020010
 80142e4:	40020028 	.word	0x40020028
 80142e8:	40020040 	.word	0x40020040
 80142ec:	40020058 	.word	0x40020058
 80142f0:	40020070 	.word	0x40020070
 80142f4:	40020088 	.word	0x40020088
 80142f8:	400200a0 	.word	0x400200a0
 80142fc:	400200b8 	.word	0x400200b8
 8014300:	40020410 	.word	0x40020410
 8014304:	40020428 	.word	0x40020428
 8014308:	40020440 	.word	0x40020440
 801430c:	40020458 	.word	0x40020458
 8014310:	40020470 	.word	0x40020470
 8014314:	40020488 	.word	0x40020488
 8014318:	400204a0 	.word	0x400204a0
 801431c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f003 0301 	and.w	r3, r3, #1
 801432a:	2b00      	cmp	r3, #0
 801432c:	d1c8      	bne.n	80142c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8014336:	697a      	ldr	r2, [r7, #20]
 8014338:	4b83      	ldr	r3, [pc, #524]	; (8014548 <HAL_DMA_Init+0x420>)
 801433a:	4013      	ands	r3, r2
 801433c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8014346:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	691b      	ldr	r3, [r3, #16]
 801434c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014352:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	699b      	ldr	r3, [r3, #24]
 8014358:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801435e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6a1b      	ldr	r3, [r3, #32]
 8014364:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8014366:	697a      	ldr	r2, [r7, #20]
 8014368:	4313      	orrs	r3, r2
 801436a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014370:	2b04      	cmp	r3, #4
 8014372:	d107      	bne.n	8014384 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801437c:	4313      	orrs	r3, r2
 801437e:	697a      	ldr	r2, [r7, #20]
 8014380:	4313      	orrs	r3, r2
 8014382:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8014384:	4b71      	ldr	r3, [pc, #452]	; (801454c <HAL_DMA_Init+0x424>)
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	4b71      	ldr	r3, [pc, #452]	; (8014550 <HAL_DMA_Init+0x428>)
 801438a:	4013      	ands	r3, r2
 801438c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014390:	d328      	bcc.n	80143e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	2b28      	cmp	r3, #40	; 0x28
 8014398:	d903      	bls.n	80143a2 <HAL_DMA_Init+0x27a>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	2b2e      	cmp	r3, #46	; 0x2e
 80143a0:	d917      	bls.n	80143d2 <HAL_DMA_Init+0x2aa>
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	685b      	ldr	r3, [r3, #4]
 80143a6:	2b3e      	cmp	r3, #62	; 0x3e
 80143a8:	d903      	bls.n	80143b2 <HAL_DMA_Init+0x28a>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	2b42      	cmp	r3, #66	; 0x42
 80143b0:	d90f      	bls.n	80143d2 <HAL_DMA_Init+0x2aa>
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	685b      	ldr	r3, [r3, #4]
 80143b6:	2b46      	cmp	r3, #70	; 0x46
 80143b8:	d903      	bls.n	80143c2 <HAL_DMA_Init+0x29a>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	2b48      	cmp	r3, #72	; 0x48
 80143c0:	d907      	bls.n	80143d2 <HAL_DMA_Init+0x2aa>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	2b4e      	cmp	r3, #78	; 0x4e
 80143c8:	d905      	bls.n	80143d6 <HAL_DMA_Init+0x2ae>
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	685b      	ldr	r3, [r3, #4]
 80143ce:	2b52      	cmp	r3, #82	; 0x52
 80143d0:	d801      	bhi.n	80143d6 <HAL_DMA_Init+0x2ae>
 80143d2:	2301      	movs	r3, #1
 80143d4:	e000      	b.n	80143d8 <HAL_DMA_Init+0x2b0>
 80143d6:	2300      	movs	r3, #0
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d003      	beq.n	80143e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	697a      	ldr	r2, [r7, #20]
 80143ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	695b      	ldr	r3, [r3, #20]
 80143f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	f023 0307 	bic.w	r3, r3, #7
 80143fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014400:	697a      	ldr	r2, [r7, #20]
 8014402:	4313      	orrs	r3, r2
 8014404:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801440a:	2b04      	cmp	r3, #4
 801440c:	d117      	bne.n	801443e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014412:	697a      	ldr	r2, [r7, #20]
 8014414:	4313      	orrs	r3, r2
 8014416:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00e      	beq.n	801443e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f002 f82d 	bl	8016480 <DMA_CheckFifoParam>
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	d008      	beq.n	801443e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2240      	movs	r2, #64	; 0x40
 8014430:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	2201      	movs	r2, #1
 8014436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 801443a:	2301      	movs	r3, #1
 801443c:	e197      	b.n	801476e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	697a      	ldr	r2, [r7, #20]
 8014444:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f001 ff68 	bl	801631c <DMA_CalcBaseAndBitshift>
 801444c:	4603      	mov	r3, r0
 801444e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014454:	f003 031f 	and.w	r3, r3, #31
 8014458:	223f      	movs	r2, #63	; 0x3f
 801445a:	409a      	lsls	r2, r3
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	609a      	str	r2, [r3, #8]
 8014460:	e0cd      	b.n	80145fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	4a3b      	ldr	r2, [pc, #236]	; (8014554 <HAL_DMA_Init+0x42c>)
 8014468:	4293      	cmp	r3, r2
 801446a:	d022      	beq.n	80144b2 <HAL_DMA_Init+0x38a>
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	4a39      	ldr	r2, [pc, #228]	; (8014558 <HAL_DMA_Init+0x430>)
 8014472:	4293      	cmp	r3, r2
 8014474:	d01d      	beq.n	80144b2 <HAL_DMA_Init+0x38a>
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4a38      	ldr	r2, [pc, #224]	; (801455c <HAL_DMA_Init+0x434>)
 801447c:	4293      	cmp	r3, r2
 801447e:	d018      	beq.n	80144b2 <HAL_DMA_Init+0x38a>
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	4a36      	ldr	r2, [pc, #216]	; (8014560 <HAL_DMA_Init+0x438>)
 8014486:	4293      	cmp	r3, r2
 8014488:	d013      	beq.n	80144b2 <HAL_DMA_Init+0x38a>
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	4a35      	ldr	r2, [pc, #212]	; (8014564 <HAL_DMA_Init+0x43c>)
 8014490:	4293      	cmp	r3, r2
 8014492:	d00e      	beq.n	80144b2 <HAL_DMA_Init+0x38a>
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	4a33      	ldr	r2, [pc, #204]	; (8014568 <HAL_DMA_Init+0x440>)
 801449a:	4293      	cmp	r3, r2
 801449c:	d009      	beq.n	80144b2 <HAL_DMA_Init+0x38a>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	4a32      	ldr	r2, [pc, #200]	; (801456c <HAL_DMA_Init+0x444>)
 80144a4:	4293      	cmp	r3, r2
 80144a6:	d004      	beq.n	80144b2 <HAL_DMA_Init+0x38a>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	4a30      	ldr	r2, [pc, #192]	; (8014570 <HAL_DMA_Init+0x448>)
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d101      	bne.n	80144b6 <HAL_DMA_Init+0x38e>
 80144b2:	2301      	movs	r3, #1
 80144b4:	e000      	b.n	80144b8 <HAL_DMA_Init+0x390>
 80144b6:	2300      	movs	r3, #0
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	f000 8097 	beq.w	80145ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	4a24      	ldr	r2, [pc, #144]	; (8014554 <HAL_DMA_Init+0x42c>)
 80144c4:	4293      	cmp	r3, r2
 80144c6:	d021      	beq.n	801450c <HAL_DMA_Init+0x3e4>
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	4a22      	ldr	r2, [pc, #136]	; (8014558 <HAL_DMA_Init+0x430>)
 80144ce:	4293      	cmp	r3, r2
 80144d0:	d01c      	beq.n	801450c <HAL_DMA_Init+0x3e4>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	4a21      	ldr	r2, [pc, #132]	; (801455c <HAL_DMA_Init+0x434>)
 80144d8:	4293      	cmp	r3, r2
 80144da:	d017      	beq.n	801450c <HAL_DMA_Init+0x3e4>
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4a1f      	ldr	r2, [pc, #124]	; (8014560 <HAL_DMA_Init+0x438>)
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d012      	beq.n	801450c <HAL_DMA_Init+0x3e4>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a1e      	ldr	r2, [pc, #120]	; (8014564 <HAL_DMA_Init+0x43c>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d00d      	beq.n	801450c <HAL_DMA_Init+0x3e4>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4a1c      	ldr	r2, [pc, #112]	; (8014568 <HAL_DMA_Init+0x440>)
 80144f6:	4293      	cmp	r3, r2
 80144f8:	d008      	beq.n	801450c <HAL_DMA_Init+0x3e4>
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	4a1b      	ldr	r2, [pc, #108]	; (801456c <HAL_DMA_Init+0x444>)
 8014500:	4293      	cmp	r3, r2
 8014502:	d003      	beq.n	801450c <HAL_DMA_Init+0x3e4>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	4a19      	ldr	r2, [pc, #100]	; (8014570 <HAL_DMA_Init+0x448>)
 801450a:	4293      	cmp	r3, r2
 801450c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2200      	movs	r2, #0
 8014512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2202      	movs	r2, #2
 801451a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8014526:	697a      	ldr	r2, [r7, #20]
 8014528:	4b12      	ldr	r3, [pc, #72]	; (8014574 <HAL_DMA_Init+0x44c>)
 801452a:	4013      	ands	r3, r2
 801452c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	2b40      	cmp	r3, #64	; 0x40
 8014534:	d020      	beq.n	8014578 <HAL_DMA_Init+0x450>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	689b      	ldr	r3, [r3, #8]
 801453a:	2b80      	cmp	r3, #128	; 0x80
 801453c:	d102      	bne.n	8014544 <HAL_DMA_Init+0x41c>
 801453e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014542:	e01a      	b.n	801457a <HAL_DMA_Init+0x452>
 8014544:	2300      	movs	r3, #0
 8014546:	e018      	b.n	801457a <HAL_DMA_Init+0x452>
 8014548:	fe10803f 	.word	0xfe10803f
 801454c:	5c001000 	.word	0x5c001000
 8014550:	ffff0000 	.word	0xffff0000
 8014554:	58025408 	.word	0x58025408
 8014558:	5802541c 	.word	0x5802541c
 801455c:	58025430 	.word	0x58025430
 8014560:	58025444 	.word	0x58025444
 8014564:	58025458 	.word	0x58025458
 8014568:	5802546c 	.word	0x5802546c
 801456c:	58025480 	.word	0x58025480
 8014570:	58025494 	.word	0x58025494
 8014574:	fffe000f 	.word	0xfffe000f
 8014578:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801457a:	687a      	ldr	r2, [r7, #4]
 801457c:	68d2      	ldr	r2, [r2, #12]
 801457e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8014580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	691b      	ldr	r3, [r3, #16]
 8014586:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8014588:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	695b      	ldr	r3, [r3, #20]
 801458e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8014590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	699b      	ldr	r3, [r3, #24]
 8014596:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8014598:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	69db      	ldr	r3, [r3, #28]
 801459e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80145a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6a1b      	ldr	r3, [r3, #32]
 80145a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80145a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80145aa:	697a      	ldr	r2, [r7, #20]
 80145ac:	4313      	orrs	r3, r2
 80145ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	697a      	ldr	r2, [r7, #20]
 80145b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	461a      	mov	r2, r3
 80145be:	4b6e      	ldr	r3, [pc, #440]	; (8014778 <HAL_DMA_Init+0x650>)
 80145c0:	4413      	add	r3, r2
 80145c2:	4a6e      	ldr	r2, [pc, #440]	; (801477c <HAL_DMA_Init+0x654>)
 80145c4:	fba2 2303 	umull	r2, r3, r2, r3
 80145c8:	091b      	lsrs	r3, r3, #4
 80145ca:	009a      	lsls	r2, r3, #2
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	f001 fea3 	bl	801631c <DMA_CalcBaseAndBitshift>
 80145d6:	4603      	mov	r3, r0
 80145d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80145de:	f003 031f 	and.w	r3, r3, #31
 80145e2:	2201      	movs	r2, #1
 80145e4:	409a      	lsls	r2, r3
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	605a      	str	r2, [r3, #4]
 80145ea:	e008      	b.n	80145fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2240      	movs	r2, #64	; 0x40
 80145f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	2203      	movs	r2, #3
 80145f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80145fa:	2301      	movs	r3, #1
 80145fc:	e0b7      	b.n	801476e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	4a5f      	ldr	r2, [pc, #380]	; (8014780 <HAL_DMA_Init+0x658>)
 8014604:	4293      	cmp	r3, r2
 8014606:	d072      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	4a5d      	ldr	r2, [pc, #372]	; (8014784 <HAL_DMA_Init+0x65c>)
 801460e:	4293      	cmp	r3, r2
 8014610:	d06d      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	4a5c      	ldr	r2, [pc, #368]	; (8014788 <HAL_DMA_Init+0x660>)
 8014618:	4293      	cmp	r3, r2
 801461a:	d068      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	4a5a      	ldr	r2, [pc, #360]	; (801478c <HAL_DMA_Init+0x664>)
 8014622:	4293      	cmp	r3, r2
 8014624:	d063      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	4a59      	ldr	r2, [pc, #356]	; (8014790 <HAL_DMA_Init+0x668>)
 801462c:	4293      	cmp	r3, r2
 801462e:	d05e      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4a57      	ldr	r2, [pc, #348]	; (8014794 <HAL_DMA_Init+0x66c>)
 8014636:	4293      	cmp	r3, r2
 8014638:	d059      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	4a56      	ldr	r2, [pc, #344]	; (8014798 <HAL_DMA_Init+0x670>)
 8014640:	4293      	cmp	r3, r2
 8014642:	d054      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	4a54      	ldr	r2, [pc, #336]	; (801479c <HAL_DMA_Init+0x674>)
 801464a:	4293      	cmp	r3, r2
 801464c:	d04f      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	4a53      	ldr	r2, [pc, #332]	; (80147a0 <HAL_DMA_Init+0x678>)
 8014654:	4293      	cmp	r3, r2
 8014656:	d04a      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	4a51      	ldr	r2, [pc, #324]	; (80147a4 <HAL_DMA_Init+0x67c>)
 801465e:	4293      	cmp	r3, r2
 8014660:	d045      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	4a50      	ldr	r2, [pc, #320]	; (80147a8 <HAL_DMA_Init+0x680>)
 8014668:	4293      	cmp	r3, r2
 801466a:	d040      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	4a4e      	ldr	r2, [pc, #312]	; (80147ac <HAL_DMA_Init+0x684>)
 8014672:	4293      	cmp	r3, r2
 8014674:	d03b      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	4a4d      	ldr	r2, [pc, #308]	; (80147b0 <HAL_DMA_Init+0x688>)
 801467c:	4293      	cmp	r3, r2
 801467e:	d036      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	4a4b      	ldr	r2, [pc, #300]	; (80147b4 <HAL_DMA_Init+0x68c>)
 8014686:	4293      	cmp	r3, r2
 8014688:	d031      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	4a4a      	ldr	r2, [pc, #296]	; (80147b8 <HAL_DMA_Init+0x690>)
 8014690:	4293      	cmp	r3, r2
 8014692:	d02c      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	4a48      	ldr	r2, [pc, #288]	; (80147bc <HAL_DMA_Init+0x694>)
 801469a:	4293      	cmp	r3, r2
 801469c:	d027      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	4a47      	ldr	r2, [pc, #284]	; (80147c0 <HAL_DMA_Init+0x698>)
 80146a4:	4293      	cmp	r3, r2
 80146a6:	d022      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	4a45      	ldr	r2, [pc, #276]	; (80147c4 <HAL_DMA_Init+0x69c>)
 80146ae:	4293      	cmp	r3, r2
 80146b0:	d01d      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	4a44      	ldr	r2, [pc, #272]	; (80147c8 <HAL_DMA_Init+0x6a0>)
 80146b8:	4293      	cmp	r3, r2
 80146ba:	d018      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	4a42      	ldr	r2, [pc, #264]	; (80147cc <HAL_DMA_Init+0x6a4>)
 80146c2:	4293      	cmp	r3, r2
 80146c4:	d013      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	4a41      	ldr	r2, [pc, #260]	; (80147d0 <HAL_DMA_Init+0x6a8>)
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d00e      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	4a3f      	ldr	r2, [pc, #252]	; (80147d4 <HAL_DMA_Init+0x6ac>)
 80146d6:	4293      	cmp	r3, r2
 80146d8:	d009      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	4a3e      	ldr	r2, [pc, #248]	; (80147d8 <HAL_DMA_Init+0x6b0>)
 80146e0:	4293      	cmp	r3, r2
 80146e2:	d004      	beq.n	80146ee <HAL_DMA_Init+0x5c6>
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	4a3c      	ldr	r2, [pc, #240]	; (80147dc <HAL_DMA_Init+0x6b4>)
 80146ea:	4293      	cmp	r3, r2
 80146ec:	d101      	bne.n	80146f2 <HAL_DMA_Init+0x5ca>
 80146ee:	2301      	movs	r3, #1
 80146f0:	e000      	b.n	80146f4 <HAL_DMA_Init+0x5cc>
 80146f2:	2300      	movs	r3, #0
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d032      	beq.n	801475e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f001 ff3d 	bl	8016578 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	689b      	ldr	r3, [r3, #8]
 8014702:	2b80      	cmp	r3, #128	; 0x80
 8014704:	d102      	bne.n	801470c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	2200      	movs	r2, #0
 801470a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	685a      	ldr	r2, [r3, #4]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014714:	b2d2      	uxtb	r2, r2
 8014716:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801471c:	687a      	ldr	r2, [r7, #4]
 801471e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8014720:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d010      	beq.n	801474c <HAL_DMA_Init+0x624>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	2b08      	cmp	r3, #8
 8014730:	d80c      	bhi.n	801474c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f001 ffba 	bl	80166ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801473c:	2200      	movs	r2, #0
 801473e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8014748:	605a      	str	r2, [r3, #4]
 801474a:	e008      	b.n	801475e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2200      	movs	r2, #0
 8014750:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2200      	movs	r2, #0
 8014756:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2200      	movs	r2, #0
 801475c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2200      	movs	r2, #0
 8014762:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2201      	movs	r2, #1
 8014768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801476c:	2300      	movs	r3, #0
}
 801476e:	4618      	mov	r0, r3
 8014770:	3718      	adds	r7, #24
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}
 8014776:	bf00      	nop
 8014778:	a7fdabf8 	.word	0xa7fdabf8
 801477c:	cccccccd 	.word	0xcccccccd
 8014780:	40020010 	.word	0x40020010
 8014784:	40020028 	.word	0x40020028
 8014788:	40020040 	.word	0x40020040
 801478c:	40020058 	.word	0x40020058
 8014790:	40020070 	.word	0x40020070
 8014794:	40020088 	.word	0x40020088
 8014798:	400200a0 	.word	0x400200a0
 801479c:	400200b8 	.word	0x400200b8
 80147a0:	40020410 	.word	0x40020410
 80147a4:	40020428 	.word	0x40020428
 80147a8:	40020440 	.word	0x40020440
 80147ac:	40020458 	.word	0x40020458
 80147b0:	40020470 	.word	0x40020470
 80147b4:	40020488 	.word	0x40020488
 80147b8:	400204a0 	.word	0x400204a0
 80147bc:	400204b8 	.word	0x400204b8
 80147c0:	58025408 	.word	0x58025408
 80147c4:	5802541c 	.word	0x5802541c
 80147c8:	58025430 	.word	0x58025430
 80147cc:	58025444 	.word	0x58025444
 80147d0:	58025458 	.word	0x58025458
 80147d4:	5802546c 	.word	0x5802546c
 80147d8:	58025480 	.word	0x58025480
 80147dc:	58025494 	.word	0x58025494

080147e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b086      	sub	sp, #24
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	60f8      	str	r0, [r7, #12]
 80147e8:	60b9      	str	r1, [r7, #8]
 80147ea:	607a      	str	r2, [r7, #4]
 80147ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80147ee:	2300      	movs	r3, #0
 80147f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d101      	bne.n	80147fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80147f8:	2301      	movs	r3, #1
 80147fa:	e226      	b.n	8014c4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014802:	2b01      	cmp	r3, #1
 8014804:	d101      	bne.n	801480a <HAL_DMA_Start_IT+0x2a>
 8014806:	2302      	movs	r3, #2
 8014808:	e21f      	b.n	8014c4a <HAL_DMA_Start_IT+0x46a>
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2201      	movs	r2, #1
 801480e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014818:	b2db      	uxtb	r3, r3
 801481a:	2b01      	cmp	r3, #1
 801481c:	f040 820a 	bne.w	8014c34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2202      	movs	r2, #2
 8014824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2200      	movs	r2, #0
 801482c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	4a68      	ldr	r2, [pc, #416]	; (80149d4 <HAL_DMA_Start_IT+0x1f4>)
 8014834:	4293      	cmp	r3, r2
 8014836:	d04a      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	4a66      	ldr	r2, [pc, #408]	; (80149d8 <HAL_DMA_Start_IT+0x1f8>)
 801483e:	4293      	cmp	r3, r2
 8014840:	d045      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	4a65      	ldr	r2, [pc, #404]	; (80149dc <HAL_DMA_Start_IT+0x1fc>)
 8014848:	4293      	cmp	r3, r2
 801484a:	d040      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	4a63      	ldr	r2, [pc, #396]	; (80149e0 <HAL_DMA_Start_IT+0x200>)
 8014852:	4293      	cmp	r3, r2
 8014854:	d03b      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	4a62      	ldr	r2, [pc, #392]	; (80149e4 <HAL_DMA_Start_IT+0x204>)
 801485c:	4293      	cmp	r3, r2
 801485e:	d036      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	4a60      	ldr	r2, [pc, #384]	; (80149e8 <HAL_DMA_Start_IT+0x208>)
 8014866:	4293      	cmp	r3, r2
 8014868:	d031      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	4a5f      	ldr	r2, [pc, #380]	; (80149ec <HAL_DMA_Start_IT+0x20c>)
 8014870:	4293      	cmp	r3, r2
 8014872:	d02c      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	4a5d      	ldr	r2, [pc, #372]	; (80149f0 <HAL_DMA_Start_IT+0x210>)
 801487a:	4293      	cmp	r3, r2
 801487c:	d027      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	4a5c      	ldr	r2, [pc, #368]	; (80149f4 <HAL_DMA_Start_IT+0x214>)
 8014884:	4293      	cmp	r3, r2
 8014886:	d022      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	4a5a      	ldr	r2, [pc, #360]	; (80149f8 <HAL_DMA_Start_IT+0x218>)
 801488e:	4293      	cmp	r3, r2
 8014890:	d01d      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	4a59      	ldr	r2, [pc, #356]	; (80149fc <HAL_DMA_Start_IT+0x21c>)
 8014898:	4293      	cmp	r3, r2
 801489a:	d018      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	4a57      	ldr	r2, [pc, #348]	; (8014a00 <HAL_DMA_Start_IT+0x220>)
 80148a2:	4293      	cmp	r3, r2
 80148a4:	d013      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	4a56      	ldr	r2, [pc, #344]	; (8014a04 <HAL_DMA_Start_IT+0x224>)
 80148ac:	4293      	cmp	r3, r2
 80148ae:	d00e      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	4a54      	ldr	r2, [pc, #336]	; (8014a08 <HAL_DMA_Start_IT+0x228>)
 80148b6:	4293      	cmp	r3, r2
 80148b8:	d009      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	4a53      	ldr	r2, [pc, #332]	; (8014a0c <HAL_DMA_Start_IT+0x22c>)
 80148c0:	4293      	cmp	r3, r2
 80148c2:	d004      	beq.n	80148ce <HAL_DMA_Start_IT+0xee>
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	4a51      	ldr	r2, [pc, #324]	; (8014a10 <HAL_DMA_Start_IT+0x230>)
 80148ca:	4293      	cmp	r3, r2
 80148cc:	d108      	bne.n	80148e0 <HAL_DMA_Start_IT+0x100>
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	681a      	ldr	r2, [r3, #0]
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	f022 0201 	bic.w	r2, r2, #1
 80148dc:	601a      	str	r2, [r3, #0]
 80148de:	e007      	b.n	80148f0 <HAL_DMA_Start_IT+0x110>
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	681a      	ldr	r2, [r3, #0]
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	f022 0201 	bic.w	r2, r2, #1
 80148ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	68b9      	ldr	r1, [r7, #8]
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f001 fb64 	bl	8015fc4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	4a34      	ldr	r2, [pc, #208]	; (80149d4 <HAL_DMA_Start_IT+0x1f4>)
 8014902:	4293      	cmp	r3, r2
 8014904:	d04a      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	4a33      	ldr	r2, [pc, #204]	; (80149d8 <HAL_DMA_Start_IT+0x1f8>)
 801490c:	4293      	cmp	r3, r2
 801490e:	d045      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	4a31      	ldr	r2, [pc, #196]	; (80149dc <HAL_DMA_Start_IT+0x1fc>)
 8014916:	4293      	cmp	r3, r2
 8014918:	d040      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	4a30      	ldr	r2, [pc, #192]	; (80149e0 <HAL_DMA_Start_IT+0x200>)
 8014920:	4293      	cmp	r3, r2
 8014922:	d03b      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	4a2e      	ldr	r2, [pc, #184]	; (80149e4 <HAL_DMA_Start_IT+0x204>)
 801492a:	4293      	cmp	r3, r2
 801492c:	d036      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	4a2d      	ldr	r2, [pc, #180]	; (80149e8 <HAL_DMA_Start_IT+0x208>)
 8014934:	4293      	cmp	r3, r2
 8014936:	d031      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	4a2b      	ldr	r2, [pc, #172]	; (80149ec <HAL_DMA_Start_IT+0x20c>)
 801493e:	4293      	cmp	r3, r2
 8014940:	d02c      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	4a2a      	ldr	r2, [pc, #168]	; (80149f0 <HAL_DMA_Start_IT+0x210>)
 8014948:	4293      	cmp	r3, r2
 801494a:	d027      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	4a28      	ldr	r2, [pc, #160]	; (80149f4 <HAL_DMA_Start_IT+0x214>)
 8014952:	4293      	cmp	r3, r2
 8014954:	d022      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	4a27      	ldr	r2, [pc, #156]	; (80149f8 <HAL_DMA_Start_IT+0x218>)
 801495c:	4293      	cmp	r3, r2
 801495e:	d01d      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	4a25      	ldr	r2, [pc, #148]	; (80149fc <HAL_DMA_Start_IT+0x21c>)
 8014966:	4293      	cmp	r3, r2
 8014968:	d018      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	4a24      	ldr	r2, [pc, #144]	; (8014a00 <HAL_DMA_Start_IT+0x220>)
 8014970:	4293      	cmp	r3, r2
 8014972:	d013      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	4a22      	ldr	r2, [pc, #136]	; (8014a04 <HAL_DMA_Start_IT+0x224>)
 801497a:	4293      	cmp	r3, r2
 801497c:	d00e      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	4a21      	ldr	r2, [pc, #132]	; (8014a08 <HAL_DMA_Start_IT+0x228>)
 8014984:	4293      	cmp	r3, r2
 8014986:	d009      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	4a1f      	ldr	r2, [pc, #124]	; (8014a0c <HAL_DMA_Start_IT+0x22c>)
 801498e:	4293      	cmp	r3, r2
 8014990:	d004      	beq.n	801499c <HAL_DMA_Start_IT+0x1bc>
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	4a1e      	ldr	r2, [pc, #120]	; (8014a10 <HAL_DMA_Start_IT+0x230>)
 8014998:	4293      	cmp	r3, r2
 801499a:	d101      	bne.n	80149a0 <HAL_DMA_Start_IT+0x1c0>
 801499c:	2301      	movs	r3, #1
 801499e:	e000      	b.n	80149a2 <HAL_DMA_Start_IT+0x1c2>
 80149a0:	2300      	movs	r3, #0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d036      	beq.n	8014a14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	f023 021e 	bic.w	r2, r3, #30
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	f042 0216 	orr.w	r2, r2, #22
 80149b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d03e      	beq.n	8014a40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	681a      	ldr	r2, [r3, #0]
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	f042 0208 	orr.w	r2, r2, #8
 80149d0:	601a      	str	r2, [r3, #0]
 80149d2:	e035      	b.n	8014a40 <HAL_DMA_Start_IT+0x260>
 80149d4:	40020010 	.word	0x40020010
 80149d8:	40020028 	.word	0x40020028
 80149dc:	40020040 	.word	0x40020040
 80149e0:	40020058 	.word	0x40020058
 80149e4:	40020070 	.word	0x40020070
 80149e8:	40020088 	.word	0x40020088
 80149ec:	400200a0 	.word	0x400200a0
 80149f0:	400200b8 	.word	0x400200b8
 80149f4:	40020410 	.word	0x40020410
 80149f8:	40020428 	.word	0x40020428
 80149fc:	40020440 	.word	0x40020440
 8014a00:	40020458 	.word	0x40020458
 8014a04:	40020470 	.word	0x40020470
 8014a08:	40020488 	.word	0x40020488
 8014a0c:	400204a0 	.word	0x400204a0
 8014a10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	f023 020e 	bic.w	r2, r3, #14
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	f042 020a 	orr.w	r2, r2, #10
 8014a26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d007      	beq.n	8014a40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	f042 0204 	orr.w	r2, r2, #4
 8014a3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	4a83      	ldr	r2, [pc, #524]	; (8014c54 <HAL_DMA_Start_IT+0x474>)
 8014a46:	4293      	cmp	r3, r2
 8014a48:	d072      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	4a82      	ldr	r2, [pc, #520]	; (8014c58 <HAL_DMA_Start_IT+0x478>)
 8014a50:	4293      	cmp	r3, r2
 8014a52:	d06d      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4a80      	ldr	r2, [pc, #512]	; (8014c5c <HAL_DMA_Start_IT+0x47c>)
 8014a5a:	4293      	cmp	r3, r2
 8014a5c:	d068      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	4a7f      	ldr	r2, [pc, #508]	; (8014c60 <HAL_DMA_Start_IT+0x480>)
 8014a64:	4293      	cmp	r3, r2
 8014a66:	d063      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	4a7d      	ldr	r2, [pc, #500]	; (8014c64 <HAL_DMA_Start_IT+0x484>)
 8014a6e:	4293      	cmp	r3, r2
 8014a70:	d05e      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	4a7c      	ldr	r2, [pc, #496]	; (8014c68 <HAL_DMA_Start_IT+0x488>)
 8014a78:	4293      	cmp	r3, r2
 8014a7a:	d059      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	4a7a      	ldr	r2, [pc, #488]	; (8014c6c <HAL_DMA_Start_IT+0x48c>)
 8014a82:	4293      	cmp	r3, r2
 8014a84:	d054      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	4a79      	ldr	r2, [pc, #484]	; (8014c70 <HAL_DMA_Start_IT+0x490>)
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	d04f      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	4a77      	ldr	r2, [pc, #476]	; (8014c74 <HAL_DMA_Start_IT+0x494>)
 8014a96:	4293      	cmp	r3, r2
 8014a98:	d04a      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	4a76      	ldr	r2, [pc, #472]	; (8014c78 <HAL_DMA_Start_IT+0x498>)
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	d045      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	4a74      	ldr	r2, [pc, #464]	; (8014c7c <HAL_DMA_Start_IT+0x49c>)
 8014aaa:	4293      	cmp	r3, r2
 8014aac:	d040      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	4a73      	ldr	r2, [pc, #460]	; (8014c80 <HAL_DMA_Start_IT+0x4a0>)
 8014ab4:	4293      	cmp	r3, r2
 8014ab6:	d03b      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	4a71      	ldr	r2, [pc, #452]	; (8014c84 <HAL_DMA_Start_IT+0x4a4>)
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d036      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	4a70      	ldr	r2, [pc, #448]	; (8014c88 <HAL_DMA_Start_IT+0x4a8>)
 8014ac8:	4293      	cmp	r3, r2
 8014aca:	d031      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4a6e      	ldr	r2, [pc, #440]	; (8014c8c <HAL_DMA_Start_IT+0x4ac>)
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	d02c      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	4a6d      	ldr	r2, [pc, #436]	; (8014c90 <HAL_DMA_Start_IT+0x4b0>)
 8014adc:	4293      	cmp	r3, r2
 8014ade:	d027      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	4a6b      	ldr	r2, [pc, #428]	; (8014c94 <HAL_DMA_Start_IT+0x4b4>)
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	d022      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	4a6a      	ldr	r2, [pc, #424]	; (8014c98 <HAL_DMA_Start_IT+0x4b8>)
 8014af0:	4293      	cmp	r3, r2
 8014af2:	d01d      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	4a68      	ldr	r2, [pc, #416]	; (8014c9c <HAL_DMA_Start_IT+0x4bc>)
 8014afa:	4293      	cmp	r3, r2
 8014afc:	d018      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	4a67      	ldr	r2, [pc, #412]	; (8014ca0 <HAL_DMA_Start_IT+0x4c0>)
 8014b04:	4293      	cmp	r3, r2
 8014b06:	d013      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	4a65      	ldr	r2, [pc, #404]	; (8014ca4 <HAL_DMA_Start_IT+0x4c4>)
 8014b0e:	4293      	cmp	r3, r2
 8014b10:	d00e      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	4a64      	ldr	r2, [pc, #400]	; (8014ca8 <HAL_DMA_Start_IT+0x4c8>)
 8014b18:	4293      	cmp	r3, r2
 8014b1a:	d009      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4a62      	ldr	r2, [pc, #392]	; (8014cac <HAL_DMA_Start_IT+0x4cc>)
 8014b22:	4293      	cmp	r3, r2
 8014b24:	d004      	beq.n	8014b30 <HAL_DMA_Start_IT+0x350>
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	4a61      	ldr	r2, [pc, #388]	; (8014cb0 <HAL_DMA_Start_IT+0x4d0>)
 8014b2c:	4293      	cmp	r3, r2
 8014b2e:	d101      	bne.n	8014b34 <HAL_DMA_Start_IT+0x354>
 8014b30:	2301      	movs	r3, #1
 8014b32:	e000      	b.n	8014b36 <HAL_DMA_Start_IT+0x356>
 8014b34:	2300      	movs	r3, #0
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d01a      	beq.n	8014b70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d007      	beq.n	8014b58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014b4c:	681a      	ldr	r2, [r3, #0]
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014b56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d007      	beq.n	8014b70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014b6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	4a37      	ldr	r2, [pc, #220]	; (8014c54 <HAL_DMA_Start_IT+0x474>)
 8014b76:	4293      	cmp	r3, r2
 8014b78:	d04a      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	4a36      	ldr	r2, [pc, #216]	; (8014c58 <HAL_DMA_Start_IT+0x478>)
 8014b80:	4293      	cmp	r3, r2
 8014b82:	d045      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	4a34      	ldr	r2, [pc, #208]	; (8014c5c <HAL_DMA_Start_IT+0x47c>)
 8014b8a:	4293      	cmp	r3, r2
 8014b8c:	d040      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	4a33      	ldr	r2, [pc, #204]	; (8014c60 <HAL_DMA_Start_IT+0x480>)
 8014b94:	4293      	cmp	r3, r2
 8014b96:	d03b      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	4a31      	ldr	r2, [pc, #196]	; (8014c64 <HAL_DMA_Start_IT+0x484>)
 8014b9e:	4293      	cmp	r3, r2
 8014ba0:	d036      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	4a30      	ldr	r2, [pc, #192]	; (8014c68 <HAL_DMA_Start_IT+0x488>)
 8014ba8:	4293      	cmp	r3, r2
 8014baa:	d031      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	4a2e      	ldr	r2, [pc, #184]	; (8014c6c <HAL_DMA_Start_IT+0x48c>)
 8014bb2:	4293      	cmp	r3, r2
 8014bb4:	d02c      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	4a2d      	ldr	r2, [pc, #180]	; (8014c70 <HAL_DMA_Start_IT+0x490>)
 8014bbc:	4293      	cmp	r3, r2
 8014bbe:	d027      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	4a2b      	ldr	r2, [pc, #172]	; (8014c74 <HAL_DMA_Start_IT+0x494>)
 8014bc6:	4293      	cmp	r3, r2
 8014bc8:	d022      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	4a2a      	ldr	r2, [pc, #168]	; (8014c78 <HAL_DMA_Start_IT+0x498>)
 8014bd0:	4293      	cmp	r3, r2
 8014bd2:	d01d      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	4a28      	ldr	r2, [pc, #160]	; (8014c7c <HAL_DMA_Start_IT+0x49c>)
 8014bda:	4293      	cmp	r3, r2
 8014bdc:	d018      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	4a27      	ldr	r2, [pc, #156]	; (8014c80 <HAL_DMA_Start_IT+0x4a0>)
 8014be4:	4293      	cmp	r3, r2
 8014be6:	d013      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	4a25      	ldr	r2, [pc, #148]	; (8014c84 <HAL_DMA_Start_IT+0x4a4>)
 8014bee:	4293      	cmp	r3, r2
 8014bf0:	d00e      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	4a24      	ldr	r2, [pc, #144]	; (8014c88 <HAL_DMA_Start_IT+0x4a8>)
 8014bf8:	4293      	cmp	r3, r2
 8014bfa:	d009      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	4a22      	ldr	r2, [pc, #136]	; (8014c8c <HAL_DMA_Start_IT+0x4ac>)
 8014c02:	4293      	cmp	r3, r2
 8014c04:	d004      	beq.n	8014c10 <HAL_DMA_Start_IT+0x430>
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4a21      	ldr	r2, [pc, #132]	; (8014c90 <HAL_DMA_Start_IT+0x4b0>)
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d108      	bne.n	8014c22 <HAL_DMA_Start_IT+0x442>
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	681a      	ldr	r2, [r3, #0]
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	f042 0201 	orr.w	r2, r2, #1
 8014c1e:	601a      	str	r2, [r3, #0]
 8014c20:	e012      	b.n	8014c48 <HAL_DMA_Start_IT+0x468>
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	681a      	ldr	r2, [r3, #0]
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	f042 0201 	orr.w	r2, r2, #1
 8014c30:	601a      	str	r2, [r3, #0]
 8014c32:	e009      	b.n	8014c48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	2200      	movs	r2, #0
 8014c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8014c44:	2301      	movs	r3, #1
 8014c46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8014c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3718      	adds	r7, #24
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	40020010 	.word	0x40020010
 8014c58:	40020028 	.word	0x40020028
 8014c5c:	40020040 	.word	0x40020040
 8014c60:	40020058 	.word	0x40020058
 8014c64:	40020070 	.word	0x40020070
 8014c68:	40020088 	.word	0x40020088
 8014c6c:	400200a0 	.word	0x400200a0
 8014c70:	400200b8 	.word	0x400200b8
 8014c74:	40020410 	.word	0x40020410
 8014c78:	40020428 	.word	0x40020428
 8014c7c:	40020440 	.word	0x40020440
 8014c80:	40020458 	.word	0x40020458
 8014c84:	40020470 	.word	0x40020470
 8014c88:	40020488 	.word	0x40020488
 8014c8c:	400204a0 	.word	0x400204a0
 8014c90:	400204b8 	.word	0x400204b8
 8014c94:	58025408 	.word	0x58025408
 8014c98:	5802541c 	.word	0x5802541c
 8014c9c:	58025430 	.word	0x58025430
 8014ca0:	58025444 	.word	0x58025444
 8014ca4:	58025458 	.word	0x58025458
 8014ca8:	5802546c 	.word	0x5802546c
 8014cac:	58025480 	.word	0x58025480
 8014cb0:	58025494 	.word	0x58025494

08014cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b084      	sub	sp, #16
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d101      	bne.n	8014cc6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	e205      	b.n	80150d2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014ccc:	b2db      	uxtb	r3, r3
 8014cce:	2b02      	cmp	r3, #2
 8014cd0:	d004      	beq.n	8014cdc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2280      	movs	r2, #128	; 0x80
 8014cd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	e1fa      	b.n	80150d2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	4a8c      	ldr	r2, [pc, #560]	; (8014f14 <HAL_DMA_Abort_IT+0x260>)
 8014ce2:	4293      	cmp	r3, r2
 8014ce4:	d04a      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	4a8b      	ldr	r2, [pc, #556]	; (8014f18 <HAL_DMA_Abort_IT+0x264>)
 8014cec:	4293      	cmp	r3, r2
 8014cee:	d045      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	4a89      	ldr	r2, [pc, #548]	; (8014f1c <HAL_DMA_Abort_IT+0x268>)
 8014cf6:	4293      	cmp	r3, r2
 8014cf8:	d040      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	4a88      	ldr	r2, [pc, #544]	; (8014f20 <HAL_DMA_Abort_IT+0x26c>)
 8014d00:	4293      	cmp	r3, r2
 8014d02:	d03b      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	4a86      	ldr	r2, [pc, #536]	; (8014f24 <HAL_DMA_Abort_IT+0x270>)
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	d036      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	4a85      	ldr	r2, [pc, #532]	; (8014f28 <HAL_DMA_Abort_IT+0x274>)
 8014d14:	4293      	cmp	r3, r2
 8014d16:	d031      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	4a83      	ldr	r2, [pc, #524]	; (8014f2c <HAL_DMA_Abort_IT+0x278>)
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d02c      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	4a82      	ldr	r2, [pc, #520]	; (8014f30 <HAL_DMA_Abort_IT+0x27c>)
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	d027      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	4a80      	ldr	r2, [pc, #512]	; (8014f34 <HAL_DMA_Abort_IT+0x280>)
 8014d32:	4293      	cmp	r3, r2
 8014d34:	d022      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	4a7f      	ldr	r2, [pc, #508]	; (8014f38 <HAL_DMA_Abort_IT+0x284>)
 8014d3c:	4293      	cmp	r3, r2
 8014d3e:	d01d      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	4a7d      	ldr	r2, [pc, #500]	; (8014f3c <HAL_DMA_Abort_IT+0x288>)
 8014d46:	4293      	cmp	r3, r2
 8014d48:	d018      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	4a7c      	ldr	r2, [pc, #496]	; (8014f40 <HAL_DMA_Abort_IT+0x28c>)
 8014d50:	4293      	cmp	r3, r2
 8014d52:	d013      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	4a7a      	ldr	r2, [pc, #488]	; (8014f44 <HAL_DMA_Abort_IT+0x290>)
 8014d5a:	4293      	cmp	r3, r2
 8014d5c:	d00e      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	4a79      	ldr	r2, [pc, #484]	; (8014f48 <HAL_DMA_Abort_IT+0x294>)
 8014d64:	4293      	cmp	r3, r2
 8014d66:	d009      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	4a77      	ldr	r2, [pc, #476]	; (8014f4c <HAL_DMA_Abort_IT+0x298>)
 8014d6e:	4293      	cmp	r3, r2
 8014d70:	d004      	beq.n	8014d7c <HAL_DMA_Abort_IT+0xc8>
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	4a76      	ldr	r2, [pc, #472]	; (8014f50 <HAL_DMA_Abort_IT+0x29c>)
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	d101      	bne.n	8014d80 <HAL_DMA_Abort_IT+0xcc>
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	e000      	b.n	8014d82 <HAL_DMA_Abort_IT+0xce>
 8014d80:	2300      	movs	r3, #0
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d065      	beq.n	8014e52 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2204      	movs	r2, #4
 8014d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	4a60      	ldr	r2, [pc, #384]	; (8014f14 <HAL_DMA_Abort_IT+0x260>)
 8014d94:	4293      	cmp	r3, r2
 8014d96:	d04a      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	4a5e      	ldr	r2, [pc, #376]	; (8014f18 <HAL_DMA_Abort_IT+0x264>)
 8014d9e:	4293      	cmp	r3, r2
 8014da0:	d045      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	4a5d      	ldr	r2, [pc, #372]	; (8014f1c <HAL_DMA_Abort_IT+0x268>)
 8014da8:	4293      	cmp	r3, r2
 8014daa:	d040      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	4a5b      	ldr	r2, [pc, #364]	; (8014f20 <HAL_DMA_Abort_IT+0x26c>)
 8014db2:	4293      	cmp	r3, r2
 8014db4:	d03b      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	4a5a      	ldr	r2, [pc, #360]	; (8014f24 <HAL_DMA_Abort_IT+0x270>)
 8014dbc:	4293      	cmp	r3, r2
 8014dbe:	d036      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	4a58      	ldr	r2, [pc, #352]	; (8014f28 <HAL_DMA_Abort_IT+0x274>)
 8014dc6:	4293      	cmp	r3, r2
 8014dc8:	d031      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	4a57      	ldr	r2, [pc, #348]	; (8014f2c <HAL_DMA_Abort_IT+0x278>)
 8014dd0:	4293      	cmp	r3, r2
 8014dd2:	d02c      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	4a55      	ldr	r2, [pc, #340]	; (8014f30 <HAL_DMA_Abort_IT+0x27c>)
 8014dda:	4293      	cmp	r3, r2
 8014ddc:	d027      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	4a54      	ldr	r2, [pc, #336]	; (8014f34 <HAL_DMA_Abort_IT+0x280>)
 8014de4:	4293      	cmp	r3, r2
 8014de6:	d022      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	4a52      	ldr	r2, [pc, #328]	; (8014f38 <HAL_DMA_Abort_IT+0x284>)
 8014dee:	4293      	cmp	r3, r2
 8014df0:	d01d      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	4a51      	ldr	r2, [pc, #324]	; (8014f3c <HAL_DMA_Abort_IT+0x288>)
 8014df8:	4293      	cmp	r3, r2
 8014dfa:	d018      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4a4f      	ldr	r2, [pc, #316]	; (8014f40 <HAL_DMA_Abort_IT+0x28c>)
 8014e02:	4293      	cmp	r3, r2
 8014e04:	d013      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	4a4e      	ldr	r2, [pc, #312]	; (8014f44 <HAL_DMA_Abort_IT+0x290>)
 8014e0c:	4293      	cmp	r3, r2
 8014e0e:	d00e      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	4a4c      	ldr	r2, [pc, #304]	; (8014f48 <HAL_DMA_Abort_IT+0x294>)
 8014e16:	4293      	cmp	r3, r2
 8014e18:	d009      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	4a4b      	ldr	r2, [pc, #300]	; (8014f4c <HAL_DMA_Abort_IT+0x298>)
 8014e20:	4293      	cmp	r3, r2
 8014e22:	d004      	beq.n	8014e2e <HAL_DMA_Abort_IT+0x17a>
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	4a49      	ldr	r2, [pc, #292]	; (8014f50 <HAL_DMA_Abort_IT+0x29c>)
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	d108      	bne.n	8014e40 <HAL_DMA_Abort_IT+0x18c>
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	681a      	ldr	r2, [r3, #0]
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	f022 0201 	bic.w	r2, r2, #1
 8014e3c:	601a      	str	r2, [r3, #0]
 8014e3e:	e147      	b.n	80150d0 <HAL_DMA_Abort_IT+0x41c>
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	681a      	ldr	r2, [r3, #0]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	f022 0201 	bic.w	r2, r2, #1
 8014e4e:	601a      	str	r2, [r3, #0]
 8014e50:	e13e      	b.n	80150d0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	681a      	ldr	r2, [r3, #0]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	f022 020e 	bic.w	r2, r2, #14
 8014e60:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	4a2b      	ldr	r2, [pc, #172]	; (8014f14 <HAL_DMA_Abort_IT+0x260>)
 8014e68:	4293      	cmp	r3, r2
 8014e6a:	d04a      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	4a29      	ldr	r2, [pc, #164]	; (8014f18 <HAL_DMA_Abort_IT+0x264>)
 8014e72:	4293      	cmp	r3, r2
 8014e74:	d045      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	4a28      	ldr	r2, [pc, #160]	; (8014f1c <HAL_DMA_Abort_IT+0x268>)
 8014e7c:	4293      	cmp	r3, r2
 8014e7e:	d040      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4a26      	ldr	r2, [pc, #152]	; (8014f20 <HAL_DMA_Abort_IT+0x26c>)
 8014e86:	4293      	cmp	r3, r2
 8014e88:	d03b      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	4a25      	ldr	r2, [pc, #148]	; (8014f24 <HAL_DMA_Abort_IT+0x270>)
 8014e90:	4293      	cmp	r3, r2
 8014e92:	d036      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	4a23      	ldr	r2, [pc, #140]	; (8014f28 <HAL_DMA_Abort_IT+0x274>)
 8014e9a:	4293      	cmp	r3, r2
 8014e9c:	d031      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	4a22      	ldr	r2, [pc, #136]	; (8014f2c <HAL_DMA_Abort_IT+0x278>)
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d02c      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4a20      	ldr	r2, [pc, #128]	; (8014f30 <HAL_DMA_Abort_IT+0x27c>)
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	d027      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	4a1f      	ldr	r2, [pc, #124]	; (8014f34 <HAL_DMA_Abort_IT+0x280>)
 8014eb8:	4293      	cmp	r3, r2
 8014eba:	d022      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	4a1d      	ldr	r2, [pc, #116]	; (8014f38 <HAL_DMA_Abort_IT+0x284>)
 8014ec2:	4293      	cmp	r3, r2
 8014ec4:	d01d      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	4a1c      	ldr	r2, [pc, #112]	; (8014f3c <HAL_DMA_Abort_IT+0x288>)
 8014ecc:	4293      	cmp	r3, r2
 8014ece:	d018      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	4a1a      	ldr	r2, [pc, #104]	; (8014f40 <HAL_DMA_Abort_IT+0x28c>)
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	d013      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	4a19      	ldr	r2, [pc, #100]	; (8014f44 <HAL_DMA_Abort_IT+0x290>)
 8014ee0:	4293      	cmp	r3, r2
 8014ee2:	d00e      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	4a17      	ldr	r2, [pc, #92]	; (8014f48 <HAL_DMA_Abort_IT+0x294>)
 8014eea:	4293      	cmp	r3, r2
 8014eec:	d009      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	4a16      	ldr	r2, [pc, #88]	; (8014f4c <HAL_DMA_Abort_IT+0x298>)
 8014ef4:	4293      	cmp	r3, r2
 8014ef6:	d004      	beq.n	8014f02 <HAL_DMA_Abort_IT+0x24e>
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	4a14      	ldr	r2, [pc, #80]	; (8014f50 <HAL_DMA_Abort_IT+0x29c>)
 8014efe:	4293      	cmp	r3, r2
 8014f00:	d128      	bne.n	8014f54 <HAL_DMA_Abort_IT+0x2a0>
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	681a      	ldr	r2, [r3, #0]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	f022 0201 	bic.w	r2, r2, #1
 8014f10:	601a      	str	r2, [r3, #0]
 8014f12:	e027      	b.n	8014f64 <HAL_DMA_Abort_IT+0x2b0>
 8014f14:	40020010 	.word	0x40020010
 8014f18:	40020028 	.word	0x40020028
 8014f1c:	40020040 	.word	0x40020040
 8014f20:	40020058 	.word	0x40020058
 8014f24:	40020070 	.word	0x40020070
 8014f28:	40020088 	.word	0x40020088
 8014f2c:	400200a0 	.word	0x400200a0
 8014f30:	400200b8 	.word	0x400200b8
 8014f34:	40020410 	.word	0x40020410
 8014f38:	40020428 	.word	0x40020428
 8014f3c:	40020440 	.word	0x40020440
 8014f40:	40020458 	.word	0x40020458
 8014f44:	40020470 	.word	0x40020470
 8014f48:	40020488 	.word	0x40020488
 8014f4c:	400204a0 	.word	0x400204a0
 8014f50:	400204b8 	.word	0x400204b8
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	f022 0201 	bic.w	r2, r2, #1
 8014f62:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	4a5c      	ldr	r2, [pc, #368]	; (80150dc <HAL_DMA_Abort_IT+0x428>)
 8014f6a:	4293      	cmp	r3, r2
 8014f6c:	d072      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	4a5b      	ldr	r2, [pc, #364]	; (80150e0 <HAL_DMA_Abort_IT+0x42c>)
 8014f74:	4293      	cmp	r3, r2
 8014f76:	d06d      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	4a59      	ldr	r2, [pc, #356]	; (80150e4 <HAL_DMA_Abort_IT+0x430>)
 8014f7e:	4293      	cmp	r3, r2
 8014f80:	d068      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	4a58      	ldr	r2, [pc, #352]	; (80150e8 <HAL_DMA_Abort_IT+0x434>)
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	d063      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	4a56      	ldr	r2, [pc, #344]	; (80150ec <HAL_DMA_Abort_IT+0x438>)
 8014f92:	4293      	cmp	r3, r2
 8014f94:	d05e      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	4a55      	ldr	r2, [pc, #340]	; (80150f0 <HAL_DMA_Abort_IT+0x43c>)
 8014f9c:	4293      	cmp	r3, r2
 8014f9e:	d059      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	4a53      	ldr	r2, [pc, #332]	; (80150f4 <HAL_DMA_Abort_IT+0x440>)
 8014fa6:	4293      	cmp	r3, r2
 8014fa8:	d054      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	4a52      	ldr	r2, [pc, #328]	; (80150f8 <HAL_DMA_Abort_IT+0x444>)
 8014fb0:	4293      	cmp	r3, r2
 8014fb2:	d04f      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	4a50      	ldr	r2, [pc, #320]	; (80150fc <HAL_DMA_Abort_IT+0x448>)
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d04a      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	4a4f      	ldr	r2, [pc, #316]	; (8015100 <HAL_DMA_Abort_IT+0x44c>)
 8014fc4:	4293      	cmp	r3, r2
 8014fc6:	d045      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	4a4d      	ldr	r2, [pc, #308]	; (8015104 <HAL_DMA_Abort_IT+0x450>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d040      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	4a4c      	ldr	r2, [pc, #304]	; (8015108 <HAL_DMA_Abort_IT+0x454>)
 8014fd8:	4293      	cmp	r3, r2
 8014fda:	d03b      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4a4a      	ldr	r2, [pc, #296]	; (801510c <HAL_DMA_Abort_IT+0x458>)
 8014fe2:	4293      	cmp	r3, r2
 8014fe4:	d036      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	4a49      	ldr	r2, [pc, #292]	; (8015110 <HAL_DMA_Abort_IT+0x45c>)
 8014fec:	4293      	cmp	r3, r2
 8014fee:	d031      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	4a47      	ldr	r2, [pc, #284]	; (8015114 <HAL_DMA_Abort_IT+0x460>)
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	d02c      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	4a46      	ldr	r2, [pc, #280]	; (8015118 <HAL_DMA_Abort_IT+0x464>)
 8015000:	4293      	cmp	r3, r2
 8015002:	d027      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	4a44      	ldr	r2, [pc, #272]	; (801511c <HAL_DMA_Abort_IT+0x468>)
 801500a:	4293      	cmp	r3, r2
 801500c:	d022      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	4a43      	ldr	r2, [pc, #268]	; (8015120 <HAL_DMA_Abort_IT+0x46c>)
 8015014:	4293      	cmp	r3, r2
 8015016:	d01d      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	4a41      	ldr	r2, [pc, #260]	; (8015124 <HAL_DMA_Abort_IT+0x470>)
 801501e:	4293      	cmp	r3, r2
 8015020:	d018      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	4a40      	ldr	r2, [pc, #256]	; (8015128 <HAL_DMA_Abort_IT+0x474>)
 8015028:	4293      	cmp	r3, r2
 801502a:	d013      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	4a3e      	ldr	r2, [pc, #248]	; (801512c <HAL_DMA_Abort_IT+0x478>)
 8015032:	4293      	cmp	r3, r2
 8015034:	d00e      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	4a3d      	ldr	r2, [pc, #244]	; (8015130 <HAL_DMA_Abort_IT+0x47c>)
 801503c:	4293      	cmp	r3, r2
 801503e:	d009      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	4a3b      	ldr	r2, [pc, #236]	; (8015134 <HAL_DMA_Abort_IT+0x480>)
 8015046:	4293      	cmp	r3, r2
 8015048:	d004      	beq.n	8015054 <HAL_DMA_Abort_IT+0x3a0>
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	4a3a      	ldr	r2, [pc, #232]	; (8015138 <HAL_DMA_Abort_IT+0x484>)
 8015050:	4293      	cmp	r3, r2
 8015052:	d101      	bne.n	8015058 <HAL_DMA_Abort_IT+0x3a4>
 8015054:	2301      	movs	r3, #1
 8015056:	e000      	b.n	801505a <HAL_DMA_Abort_IT+0x3a6>
 8015058:	2300      	movs	r3, #0
 801505a:	2b00      	cmp	r3, #0
 801505c:	d028      	beq.n	80150b0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015062:	681a      	ldr	r2, [r3, #0]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801506c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015072:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015078:	f003 031f 	and.w	r3, r3, #31
 801507c:	2201      	movs	r2, #1
 801507e:	409a      	lsls	r2, r3
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015088:	687a      	ldr	r2, [r7, #4]
 801508a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801508c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015092:	2b00      	cmp	r3, #0
 8015094:	d00c      	beq.n	80150b0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80150a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150aa:	687a      	ldr	r2, [r7, #4]
 80150ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80150ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2200      	movs	r2, #0
 80150b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2201      	movs	r2, #1
 80150bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d003      	beq.n	80150d0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80150d0:	2300      	movs	r3, #0
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3710      	adds	r7, #16
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
 80150da:	bf00      	nop
 80150dc:	40020010 	.word	0x40020010
 80150e0:	40020028 	.word	0x40020028
 80150e4:	40020040 	.word	0x40020040
 80150e8:	40020058 	.word	0x40020058
 80150ec:	40020070 	.word	0x40020070
 80150f0:	40020088 	.word	0x40020088
 80150f4:	400200a0 	.word	0x400200a0
 80150f8:	400200b8 	.word	0x400200b8
 80150fc:	40020410 	.word	0x40020410
 8015100:	40020428 	.word	0x40020428
 8015104:	40020440 	.word	0x40020440
 8015108:	40020458 	.word	0x40020458
 801510c:	40020470 	.word	0x40020470
 8015110:	40020488 	.word	0x40020488
 8015114:	400204a0 	.word	0x400204a0
 8015118:	400204b8 	.word	0x400204b8
 801511c:	58025408 	.word	0x58025408
 8015120:	5802541c 	.word	0x5802541c
 8015124:	58025430 	.word	0x58025430
 8015128:	58025444 	.word	0x58025444
 801512c:	58025458 	.word	0x58025458
 8015130:	5802546c 	.word	0x5802546c
 8015134:	58025480 	.word	0x58025480
 8015138:	58025494 	.word	0x58025494

0801513c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b08a      	sub	sp, #40	; 0x28
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8015144:	2300      	movs	r3, #0
 8015146:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8015148:	4b67      	ldr	r3, [pc, #412]	; (80152e8 <HAL_DMA_IRQHandler+0x1ac>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4a67      	ldr	r2, [pc, #412]	; (80152ec <HAL_DMA_IRQHandler+0x1b0>)
 801514e:	fba2 2303 	umull	r2, r3, r2, r3
 8015152:	0a9b      	lsrs	r3, r3, #10
 8015154:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801515a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015160:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8015162:	6a3b      	ldr	r3, [r7, #32]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8015168:	69fb      	ldr	r3, [r7, #28]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	4a5f      	ldr	r2, [pc, #380]	; (80152f0 <HAL_DMA_IRQHandler+0x1b4>)
 8015174:	4293      	cmp	r3, r2
 8015176:	d04a      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	4a5d      	ldr	r2, [pc, #372]	; (80152f4 <HAL_DMA_IRQHandler+0x1b8>)
 801517e:	4293      	cmp	r3, r2
 8015180:	d045      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	4a5c      	ldr	r2, [pc, #368]	; (80152f8 <HAL_DMA_IRQHandler+0x1bc>)
 8015188:	4293      	cmp	r3, r2
 801518a:	d040      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	4a5a      	ldr	r2, [pc, #360]	; (80152fc <HAL_DMA_IRQHandler+0x1c0>)
 8015192:	4293      	cmp	r3, r2
 8015194:	d03b      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	4a59      	ldr	r2, [pc, #356]	; (8015300 <HAL_DMA_IRQHandler+0x1c4>)
 801519c:	4293      	cmp	r3, r2
 801519e:	d036      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	4a57      	ldr	r2, [pc, #348]	; (8015304 <HAL_DMA_IRQHandler+0x1c8>)
 80151a6:	4293      	cmp	r3, r2
 80151a8:	d031      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	4a56      	ldr	r2, [pc, #344]	; (8015308 <HAL_DMA_IRQHandler+0x1cc>)
 80151b0:	4293      	cmp	r3, r2
 80151b2:	d02c      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	4a54      	ldr	r2, [pc, #336]	; (801530c <HAL_DMA_IRQHandler+0x1d0>)
 80151ba:	4293      	cmp	r3, r2
 80151bc:	d027      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	4a53      	ldr	r2, [pc, #332]	; (8015310 <HAL_DMA_IRQHandler+0x1d4>)
 80151c4:	4293      	cmp	r3, r2
 80151c6:	d022      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	4a51      	ldr	r2, [pc, #324]	; (8015314 <HAL_DMA_IRQHandler+0x1d8>)
 80151ce:	4293      	cmp	r3, r2
 80151d0:	d01d      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	4a50      	ldr	r2, [pc, #320]	; (8015318 <HAL_DMA_IRQHandler+0x1dc>)
 80151d8:	4293      	cmp	r3, r2
 80151da:	d018      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	4a4e      	ldr	r2, [pc, #312]	; (801531c <HAL_DMA_IRQHandler+0x1e0>)
 80151e2:	4293      	cmp	r3, r2
 80151e4:	d013      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	4a4d      	ldr	r2, [pc, #308]	; (8015320 <HAL_DMA_IRQHandler+0x1e4>)
 80151ec:	4293      	cmp	r3, r2
 80151ee:	d00e      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	4a4b      	ldr	r2, [pc, #300]	; (8015324 <HAL_DMA_IRQHandler+0x1e8>)
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d009      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	4a4a      	ldr	r2, [pc, #296]	; (8015328 <HAL_DMA_IRQHandler+0x1ec>)
 8015200:	4293      	cmp	r3, r2
 8015202:	d004      	beq.n	801520e <HAL_DMA_IRQHandler+0xd2>
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	4a48      	ldr	r2, [pc, #288]	; (801532c <HAL_DMA_IRQHandler+0x1f0>)
 801520a:	4293      	cmp	r3, r2
 801520c:	d101      	bne.n	8015212 <HAL_DMA_IRQHandler+0xd6>
 801520e:	2301      	movs	r3, #1
 8015210:	e000      	b.n	8015214 <HAL_DMA_IRQHandler+0xd8>
 8015212:	2300      	movs	r3, #0
 8015214:	2b00      	cmp	r3, #0
 8015216:	f000 842b 	beq.w	8015a70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801521e:	f003 031f 	and.w	r3, r3, #31
 8015222:	2208      	movs	r2, #8
 8015224:	409a      	lsls	r2, r3
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	4013      	ands	r3, r2
 801522a:	2b00      	cmp	r3, #0
 801522c:	f000 80a2 	beq.w	8015374 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	4a2e      	ldr	r2, [pc, #184]	; (80152f0 <HAL_DMA_IRQHandler+0x1b4>)
 8015236:	4293      	cmp	r3, r2
 8015238:	d04a      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	4a2d      	ldr	r2, [pc, #180]	; (80152f4 <HAL_DMA_IRQHandler+0x1b8>)
 8015240:	4293      	cmp	r3, r2
 8015242:	d045      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	4a2b      	ldr	r2, [pc, #172]	; (80152f8 <HAL_DMA_IRQHandler+0x1bc>)
 801524a:	4293      	cmp	r3, r2
 801524c:	d040      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	4a2a      	ldr	r2, [pc, #168]	; (80152fc <HAL_DMA_IRQHandler+0x1c0>)
 8015254:	4293      	cmp	r3, r2
 8015256:	d03b      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	4a28      	ldr	r2, [pc, #160]	; (8015300 <HAL_DMA_IRQHandler+0x1c4>)
 801525e:	4293      	cmp	r3, r2
 8015260:	d036      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	4a27      	ldr	r2, [pc, #156]	; (8015304 <HAL_DMA_IRQHandler+0x1c8>)
 8015268:	4293      	cmp	r3, r2
 801526a:	d031      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	4a25      	ldr	r2, [pc, #148]	; (8015308 <HAL_DMA_IRQHandler+0x1cc>)
 8015272:	4293      	cmp	r3, r2
 8015274:	d02c      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	4a24      	ldr	r2, [pc, #144]	; (801530c <HAL_DMA_IRQHandler+0x1d0>)
 801527c:	4293      	cmp	r3, r2
 801527e:	d027      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	4a22      	ldr	r2, [pc, #136]	; (8015310 <HAL_DMA_IRQHandler+0x1d4>)
 8015286:	4293      	cmp	r3, r2
 8015288:	d022      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	4a21      	ldr	r2, [pc, #132]	; (8015314 <HAL_DMA_IRQHandler+0x1d8>)
 8015290:	4293      	cmp	r3, r2
 8015292:	d01d      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	4a1f      	ldr	r2, [pc, #124]	; (8015318 <HAL_DMA_IRQHandler+0x1dc>)
 801529a:	4293      	cmp	r3, r2
 801529c:	d018      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	4a1e      	ldr	r2, [pc, #120]	; (801531c <HAL_DMA_IRQHandler+0x1e0>)
 80152a4:	4293      	cmp	r3, r2
 80152a6:	d013      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	4a1c      	ldr	r2, [pc, #112]	; (8015320 <HAL_DMA_IRQHandler+0x1e4>)
 80152ae:	4293      	cmp	r3, r2
 80152b0:	d00e      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	4a1b      	ldr	r2, [pc, #108]	; (8015324 <HAL_DMA_IRQHandler+0x1e8>)
 80152b8:	4293      	cmp	r3, r2
 80152ba:	d009      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	4a19      	ldr	r2, [pc, #100]	; (8015328 <HAL_DMA_IRQHandler+0x1ec>)
 80152c2:	4293      	cmp	r3, r2
 80152c4:	d004      	beq.n	80152d0 <HAL_DMA_IRQHandler+0x194>
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	4a18      	ldr	r2, [pc, #96]	; (801532c <HAL_DMA_IRQHandler+0x1f0>)
 80152cc:	4293      	cmp	r3, r2
 80152ce:	d12f      	bne.n	8015330 <HAL_DMA_IRQHandler+0x1f4>
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	f003 0304 	and.w	r3, r3, #4
 80152da:	2b00      	cmp	r3, #0
 80152dc:	bf14      	ite	ne
 80152de:	2301      	movne	r3, #1
 80152e0:	2300      	moveq	r3, #0
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	e02e      	b.n	8015344 <HAL_DMA_IRQHandler+0x208>
 80152e6:	bf00      	nop
 80152e8:	24000698 	.word	0x24000698
 80152ec:	1b4e81b5 	.word	0x1b4e81b5
 80152f0:	40020010 	.word	0x40020010
 80152f4:	40020028 	.word	0x40020028
 80152f8:	40020040 	.word	0x40020040
 80152fc:	40020058 	.word	0x40020058
 8015300:	40020070 	.word	0x40020070
 8015304:	40020088 	.word	0x40020088
 8015308:	400200a0 	.word	0x400200a0
 801530c:	400200b8 	.word	0x400200b8
 8015310:	40020410 	.word	0x40020410
 8015314:	40020428 	.word	0x40020428
 8015318:	40020440 	.word	0x40020440
 801531c:	40020458 	.word	0x40020458
 8015320:	40020470 	.word	0x40020470
 8015324:	40020488 	.word	0x40020488
 8015328:	400204a0 	.word	0x400204a0
 801532c:	400204b8 	.word	0x400204b8
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	f003 0308 	and.w	r3, r3, #8
 801533a:	2b00      	cmp	r3, #0
 801533c:	bf14      	ite	ne
 801533e:	2301      	movne	r3, #1
 8015340:	2300      	moveq	r3, #0
 8015342:	b2db      	uxtb	r3, r3
 8015344:	2b00      	cmp	r3, #0
 8015346:	d015      	beq.n	8015374 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	681a      	ldr	r2, [r3, #0]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	f022 0204 	bic.w	r2, r2, #4
 8015356:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801535c:	f003 031f 	and.w	r3, r3, #31
 8015360:	2208      	movs	r2, #8
 8015362:	409a      	lsls	r2, r3
 8015364:	6a3b      	ldr	r3, [r7, #32]
 8015366:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801536c:	f043 0201 	orr.w	r2, r3, #1
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015378:	f003 031f 	and.w	r3, r3, #31
 801537c:	69ba      	ldr	r2, [r7, #24]
 801537e:	fa22 f303 	lsr.w	r3, r2, r3
 8015382:	f003 0301 	and.w	r3, r3, #1
 8015386:	2b00      	cmp	r3, #0
 8015388:	d06e      	beq.n	8015468 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4a69      	ldr	r2, [pc, #420]	; (8015534 <HAL_DMA_IRQHandler+0x3f8>)
 8015390:	4293      	cmp	r3, r2
 8015392:	d04a      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	4a67      	ldr	r2, [pc, #412]	; (8015538 <HAL_DMA_IRQHandler+0x3fc>)
 801539a:	4293      	cmp	r3, r2
 801539c:	d045      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	4a66      	ldr	r2, [pc, #408]	; (801553c <HAL_DMA_IRQHandler+0x400>)
 80153a4:	4293      	cmp	r3, r2
 80153a6:	d040      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4a64      	ldr	r2, [pc, #400]	; (8015540 <HAL_DMA_IRQHandler+0x404>)
 80153ae:	4293      	cmp	r3, r2
 80153b0:	d03b      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	4a63      	ldr	r2, [pc, #396]	; (8015544 <HAL_DMA_IRQHandler+0x408>)
 80153b8:	4293      	cmp	r3, r2
 80153ba:	d036      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	4a61      	ldr	r2, [pc, #388]	; (8015548 <HAL_DMA_IRQHandler+0x40c>)
 80153c2:	4293      	cmp	r3, r2
 80153c4:	d031      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	4a60      	ldr	r2, [pc, #384]	; (801554c <HAL_DMA_IRQHandler+0x410>)
 80153cc:	4293      	cmp	r3, r2
 80153ce:	d02c      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	4a5e      	ldr	r2, [pc, #376]	; (8015550 <HAL_DMA_IRQHandler+0x414>)
 80153d6:	4293      	cmp	r3, r2
 80153d8:	d027      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	4a5d      	ldr	r2, [pc, #372]	; (8015554 <HAL_DMA_IRQHandler+0x418>)
 80153e0:	4293      	cmp	r3, r2
 80153e2:	d022      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	4a5b      	ldr	r2, [pc, #364]	; (8015558 <HAL_DMA_IRQHandler+0x41c>)
 80153ea:	4293      	cmp	r3, r2
 80153ec:	d01d      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	4a5a      	ldr	r2, [pc, #360]	; (801555c <HAL_DMA_IRQHandler+0x420>)
 80153f4:	4293      	cmp	r3, r2
 80153f6:	d018      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	4a58      	ldr	r2, [pc, #352]	; (8015560 <HAL_DMA_IRQHandler+0x424>)
 80153fe:	4293      	cmp	r3, r2
 8015400:	d013      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	4a57      	ldr	r2, [pc, #348]	; (8015564 <HAL_DMA_IRQHandler+0x428>)
 8015408:	4293      	cmp	r3, r2
 801540a:	d00e      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	4a55      	ldr	r2, [pc, #340]	; (8015568 <HAL_DMA_IRQHandler+0x42c>)
 8015412:	4293      	cmp	r3, r2
 8015414:	d009      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	4a54      	ldr	r2, [pc, #336]	; (801556c <HAL_DMA_IRQHandler+0x430>)
 801541c:	4293      	cmp	r3, r2
 801541e:	d004      	beq.n	801542a <HAL_DMA_IRQHandler+0x2ee>
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	4a52      	ldr	r2, [pc, #328]	; (8015570 <HAL_DMA_IRQHandler+0x434>)
 8015426:	4293      	cmp	r3, r2
 8015428:	d10a      	bne.n	8015440 <HAL_DMA_IRQHandler+0x304>
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	695b      	ldr	r3, [r3, #20]
 8015430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015434:	2b00      	cmp	r3, #0
 8015436:	bf14      	ite	ne
 8015438:	2301      	movne	r3, #1
 801543a:	2300      	moveq	r3, #0
 801543c:	b2db      	uxtb	r3, r3
 801543e:	e003      	b.n	8015448 <HAL_DMA_IRQHandler+0x30c>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	2300      	movs	r3, #0
 8015448:	2b00      	cmp	r3, #0
 801544a:	d00d      	beq.n	8015468 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015450:	f003 031f 	and.w	r3, r3, #31
 8015454:	2201      	movs	r2, #1
 8015456:	409a      	lsls	r2, r3
 8015458:	6a3b      	ldr	r3, [r7, #32]
 801545a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015460:	f043 0202 	orr.w	r2, r3, #2
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801546c:	f003 031f 	and.w	r3, r3, #31
 8015470:	2204      	movs	r2, #4
 8015472:	409a      	lsls	r2, r3
 8015474:	69bb      	ldr	r3, [r7, #24]
 8015476:	4013      	ands	r3, r2
 8015478:	2b00      	cmp	r3, #0
 801547a:	f000 808f 	beq.w	801559c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	4a2c      	ldr	r2, [pc, #176]	; (8015534 <HAL_DMA_IRQHandler+0x3f8>)
 8015484:	4293      	cmp	r3, r2
 8015486:	d04a      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	4a2a      	ldr	r2, [pc, #168]	; (8015538 <HAL_DMA_IRQHandler+0x3fc>)
 801548e:	4293      	cmp	r3, r2
 8015490:	d045      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	4a29      	ldr	r2, [pc, #164]	; (801553c <HAL_DMA_IRQHandler+0x400>)
 8015498:	4293      	cmp	r3, r2
 801549a:	d040      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	4a27      	ldr	r2, [pc, #156]	; (8015540 <HAL_DMA_IRQHandler+0x404>)
 80154a2:	4293      	cmp	r3, r2
 80154a4:	d03b      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	4a26      	ldr	r2, [pc, #152]	; (8015544 <HAL_DMA_IRQHandler+0x408>)
 80154ac:	4293      	cmp	r3, r2
 80154ae:	d036      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	4a24      	ldr	r2, [pc, #144]	; (8015548 <HAL_DMA_IRQHandler+0x40c>)
 80154b6:	4293      	cmp	r3, r2
 80154b8:	d031      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	4a23      	ldr	r2, [pc, #140]	; (801554c <HAL_DMA_IRQHandler+0x410>)
 80154c0:	4293      	cmp	r3, r2
 80154c2:	d02c      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	4a21      	ldr	r2, [pc, #132]	; (8015550 <HAL_DMA_IRQHandler+0x414>)
 80154ca:	4293      	cmp	r3, r2
 80154cc:	d027      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	4a20      	ldr	r2, [pc, #128]	; (8015554 <HAL_DMA_IRQHandler+0x418>)
 80154d4:	4293      	cmp	r3, r2
 80154d6:	d022      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	4a1e      	ldr	r2, [pc, #120]	; (8015558 <HAL_DMA_IRQHandler+0x41c>)
 80154de:	4293      	cmp	r3, r2
 80154e0:	d01d      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	4a1d      	ldr	r2, [pc, #116]	; (801555c <HAL_DMA_IRQHandler+0x420>)
 80154e8:	4293      	cmp	r3, r2
 80154ea:	d018      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	4a1b      	ldr	r2, [pc, #108]	; (8015560 <HAL_DMA_IRQHandler+0x424>)
 80154f2:	4293      	cmp	r3, r2
 80154f4:	d013      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	4a1a      	ldr	r2, [pc, #104]	; (8015564 <HAL_DMA_IRQHandler+0x428>)
 80154fc:	4293      	cmp	r3, r2
 80154fe:	d00e      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	4a18      	ldr	r2, [pc, #96]	; (8015568 <HAL_DMA_IRQHandler+0x42c>)
 8015506:	4293      	cmp	r3, r2
 8015508:	d009      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	4a17      	ldr	r2, [pc, #92]	; (801556c <HAL_DMA_IRQHandler+0x430>)
 8015510:	4293      	cmp	r3, r2
 8015512:	d004      	beq.n	801551e <HAL_DMA_IRQHandler+0x3e2>
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	4a15      	ldr	r2, [pc, #84]	; (8015570 <HAL_DMA_IRQHandler+0x434>)
 801551a:	4293      	cmp	r3, r2
 801551c:	d12a      	bne.n	8015574 <HAL_DMA_IRQHandler+0x438>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	f003 0302 	and.w	r3, r3, #2
 8015528:	2b00      	cmp	r3, #0
 801552a:	bf14      	ite	ne
 801552c:	2301      	movne	r3, #1
 801552e:	2300      	moveq	r3, #0
 8015530:	b2db      	uxtb	r3, r3
 8015532:	e023      	b.n	801557c <HAL_DMA_IRQHandler+0x440>
 8015534:	40020010 	.word	0x40020010
 8015538:	40020028 	.word	0x40020028
 801553c:	40020040 	.word	0x40020040
 8015540:	40020058 	.word	0x40020058
 8015544:	40020070 	.word	0x40020070
 8015548:	40020088 	.word	0x40020088
 801554c:	400200a0 	.word	0x400200a0
 8015550:	400200b8 	.word	0x400200b8
 8015554:	40020410 	.word	0x40020410
 8015558:	40020428 	.word	0x40020428
 801555c:	40020440 	.word	0x40020440
 8015560:	40020458 	.word	0x40020458
 8015564:	40020470 	.word	0x40020470
 8015568:	40020488 	.word	0x40020488
 801556c:	400204a0 	.word	0x400204a0
 8015570:	400204b8 	.word	0x400204b8
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	2300      	movs	r3, #0
 801557c:	2b00      	cmp	r3, #0
 801557e:	d00d      	beq.n	801559c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015584:	f003 031f 	and.w	r3, r3, #31
 8015588:	2204      	movs	r2, #4
 801558a:	409a      	lsls	r2, r3
 801558c:	6a3b      	ldr	r3, [r7, #32]
 801558e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015594:	f043 0204 	orr.w	r2, r3, #4
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155a0:	f003 031f 	and.w	r3, r3, #31
 80155a4:	2210      	movs	r2, #16
 80155a6:	409a      	lsls	r2, r3
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	4013      	ands	r3, r2
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	f000 80a6 	beq.w	80156fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	4a85      	ldr	r2, [pc, #532]	; (80157cc <HAL_DMA_IRQHandler+0x690>)
 80155b8:	4293      	cmp	r3, r2
 80155ba:	d04a      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	4a83      	ldr	r2, [pc, #524]	; (80157d0 <HAL_DMA_IRQHandler+0x694>)
 80155c2:	4293      	cmp	r3, r2
 80155c4:	d045      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	4a82      	ldr	r2, [pc, #520]	; (80157d4 <HAL_DMA_IRQHandler+0x698>)
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d040      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	4a80      	ldr	r2, [pc, #512]	; (80157d8 <HAL_DMA_IRQHandler+0x69c>)
 80155d6:	4293      	cmp	r3, r2
 80155d8:	d03b      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	4a7f      	ldr	r2, [pc, #508]	; (80157dc <HAL_DMA_IRQHandler+0x6a0>)
 80155e0:	4293      	cmp	r3, r2
 80155e2:	d036      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	4a7d      	ldr	r2, [pc, #500]	; (80157e0 <HAL_DMA_IRQHandler+0x6a4>)
 80155ea:	4293      	cmp	r3, r2
 80155ec:	d031      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	4a7c      	ldr	r2, [pc, #496]	; (80157e4 <HAL_DMA_IRQHandler+0x6a8>)
 80155f4:	4293      	cmp	r3, r2
 80155f6:	d02c      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	4a7a      	ldr	r2, [pc, #488]	; (80157e8 <HAL_DMA_IRQHandler+0x6ac>)
 80155fe:	4293      	cmp	r3, r2
 8015600:	d027      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	4a79      	ldr	r2, [pc, #484]	; (80157ec <HAL_DMA_IRQHandler+0x6b0>)
 8015608:	4293      	cmp	r3, r2
 801560a:	d022      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	4a77      	ldr	r2, [pc, #476]	; (80157f0 <HAL_DMA_IRQHandler+0x6b4>)
 8015612:	4293      	cmp	r3, r2
 8015614:	d01d      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	4a76      	ldr	r2, [pc, #472]	; (80157f4 <HAL_DMA_IRQHandler+0x6b8>)
 801561c:	4293      	cmp	r3, r2
 801561e:	d018      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	4a74      	ldr	r2, [pc, #464]	; (80157f8 <HAL_DMA_IRQHandler+0x6bc>)
 8015626:	4293      	cmp	r3, r2
 8015628:	d013      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	4a73      	ldr	r2, [pc, #460]	; (80157fc <HAL_DMA_IRQHandler+0x6c0>)
 8015630:	4293      	cmp	r3, r2
 8015632:	d00e      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	4a71      	ldr	r2, [pc, #452]	; (8015800 <HAL_DMA_IRQHandler+0x6c4>)
 801563a:	4293      	cmp	r3, r2
 801563c:	d009      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	4a70      	ldr	r2, [pc, #448]	; (8015804 <HAL_DMA_IRQHandler+0x6c8>)
 8015644:	4293      	cmp	r3, r2
 8015646:	d004      	beq.n	8015652 <HAL_DMA_IRQHandler+0x516>
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	4a6e      	ldr	r2, [pc, #440]	; (8015808 <HAL_DMA_IRQHandler+0x6cc>)
 801564e:	4293      	cmp	r3, r2
 8015650:	d10a      	bne.n	8015668 <HAL_DMA_IRQHandler+0x52c>
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	f003 0308 	and.w	r3, r3, #8
 801565c:	2b00      	cmp	r3, #0
 801565e:	bf14      	ite	ne
 8015660:	2301      	movne	r3, #1
 8015662:	2300      	moveq	r3, #0
 8015664:	b2db      	uxtb	r3, r3
 8015666:	e009      	b.n	801567c <HAL_DMA_IRQHandler+0x540>
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	f003 0304 	and.w	r3, r3, #4
 8015672:	2b00      	cmp	r3, #0
 8015674:	bf14      	ite	ne
 8015676:	2301      	movne	r3, #1
 8015678:	2300      	moveq	r3, #0
 801567a:	b2db      	uxtb	r3, r3
 801567c:	2b00      	cmp	r3, #0
 801567e:	d03e      	beq.n	80156fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015684:	f003 031f 	and.w	r3, r3, #31
 8015688:	2210      	movs	r2, #16
 801568a:	409a      	lsls	r2, r3
 801568c:	6a3b      	ldr	r3, [r7, #32]
 801568e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801569a:	2b00      	cmp	r3, #0
 801569c:	d018      	beq.n	80156d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d108      	bne.n	80156be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d024      	beq.n	80156fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	4798      	blx	r3
 80156bc:	e01f      	b.n	80156fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d01b      	beq.n	80156fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	4798      	blx	r3
 80156ce:	e016      	b.n	80156fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d107      	bne.n	80156ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	f022 0208 	bic.w	r2, r2, #8
 80156ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d003      	beq.n	80156fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156fa:	6878      	ldr	r0, [r7, #4]
 80156fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015702:	f003 031f 	and.w	r3, r3, #31
 8015706:	2220      	movs	r2, #32
 8015708:	409a      	lsls	r2, r3
 801570a:	69bb      	ldr	r3, [r7, #24]
 801570c:	4013      	ands	r3, r2
 801570e:	2b00      	cmp	r3, #0
 8015710:	f000 8110 	beq.w	8015934 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	4a2c      	ldr	r2, [pc, #176]	; (80157cc <HAL_DMA_IRQHandler+0x690>)
 801571a:	4293      	cmp	r3, r2
 801571c:	d04a      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	4a2b      	ldr	r2, [pc, #172]	; (80157d0 <HAL_DMA_IRQHandler+0x694>)
 8015724:	4293      	cmp	r3, r2
 8015726:	d045      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	4a29      	ldr	r2, [pc, #164]	; (80157d4 <HAL_DMA_IRQHandler+0x698>)
 801572e:	4293      	cmp	r3, r2
 8015730:	d040      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	4a28      	ldr	r2, [pc, #160]	; (80157d8 <HAL_DMA_IRQHandler+0x69c>)
 8015738:	4293      	cmp	r3, r2
 801573a:	d03b      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	4a26      	ldr	r2, [pc, #152]	; (80157dc <HAL_DMA_IRQHandler+0x6a0>)
 8015742:	4293      	cmp	r3, r2
 8015744:	d036      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	4a25      	ldr	r2, [pc, #148]	; (80157e0 <HAL_DMA_IRQHandler+0x6a4>)
 801574c:	4293      	cmp	r3, r2
 801574e:	d031      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	4a23      	ldr	r2, [pc, #140]	; (80157e4 <HAL_DMA_IRQHandler+0x6a8>)
 8015756:	4293      	cmp	r3, r2
 8015758:	d02c      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	4a22      	ldr	r2, [pc, #136]	; (80157e8 <HAL_DMA_IRQHandler+0x6ac>)
 8015760:	4293      	cmp	r3, r2
 8015762:	d027      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	4a20      	ldr	r2, [pc, #128]	; (80157ec <HAL_DMA_IRQHandler+0x6b0>)
 801576a:	4293      	cmp	r3, r2
 801576c:	d022      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	4a1f      	ldr	r2, [pc, #124]	; (80157f0 <HAL_DMA_IRQHandler+0x6b4>)
 8015774:	4293      	cmp	r3, r2
 8015776:	d01d      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	4a1d      	ldr	r2, [pc, #116]	; (80157f4 <HAL_DMA_IRQHandler+0x6b8>)
 801577e:	4293      	cmp	r3, r2
 8015780:	d018      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	4a1c      	ldr	r2, [pc, #112]	; (80157f8 <HAL_DMA_IRQHandler+0x6bc>)
 8015788:	4293      	cmp	r3, r2
 801578a:	d013      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	4a1a      	ldr	r2, [pc, #104]	; (80157fc <HAL_DMA_IRQHandler+0x6c0>)
 8015792:	4293      	cmp	r3, r2
 8015794:	d00e      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	4a19      	ldr	r2, [pc, #100]	; (8015800 <HAL_DMA_IRQHandler+0x6c4>)
 801579c:	4293      	cmp	r3, r2
 801579e:	d009      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	4a17      	ldr	r2, [pc, #92]	; (8015804 <HAL_DMA_IRQHandler+0x6c8>)
 80157a6:	4293      	cmp	r3, r2
 80157a8:	d004      	beq.n	80157b4 <HAL_DMA_IRQHandler+0x678>
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	4a16      	ldr	r2, [pc, #88]	; (8015808 <HAL_DMA_IRQHandler+0x6cc>)
 80157b0:	4293      	cmp	r3, r2
 80157b2:	d12b      	bne.n	801580c <HAL_DMA_IRQHandler+0x6d0>
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	f003 0310 	and.w	r3, r3, #16
 80157be:	2b00      	cmp	r3, #0
 80157c0:	bf14      	ite	ne
 80157c2:	2301      	movne	r3, #1
 80157c4:	2300      	moveq	r3, #0
 80157c6:	b2db      	uxtb	r3, r3
 80157c8:	e02a      	b.n	8015820 <HAL_DMA_IRQHandler+0x6e4>
 80157ca:	bf00      	nop
 80157cc:	40020010 	.word	0x40020010
 80157d0:	40020028 	.word	0x40020028
 80157d4:	40020040 	.word	0x40020040
 80157d8:	40020058 	.word	0x40020058
 80157dc:	40020070 	.word	0x40020070
 80157e0:	40020088 	.word	0x40020088
 80157e4:	400200a0 	.word	0x400200a0
 80157e8:	400200b8 	.word	0x400200b8
 80157ec:	40020410 	.word	0x40020410
 80157f0:	40020428 	.word	0x40020428
 80157f4:	40020440 	.word	0x40020440
 80157f8:	40020458 	.word	0x40020458
 80157fc:	40020470 	.word	0x40020470
 8015800:	40020488 	.word	0x40020488
 8015804:	400204a0 	.word	0x400204a0
 8015808:	400204b8 	.word	0x400204b8
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	f003 0302 	and.w	r3, r3, #2
 8015816:	2b00      	cmp	r3, #0
 8015818:	bf14      	ite	ne
 801581a:	2301      	movne	r3, #1
 801581c:	2300      	moveq	r3, #0
 801581e:	b2db      	uxtb	r3, r3
 8015820:	2b00      	cmp	r3, #0
 8015822:	f000 8087 	beq.w	8015934 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801582a:	f003 031f 	and.w	r3, r3, #31
 801582e:	2220      	movs	r2, #32
 8015830:	409a      	lsls	r2, r3
 8015832:	6a3b      	ldr	r3, [r7, #32]
 8015834:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801583c:	b2db      	uxtb	r3, r3
 801583e:	2b04      	cmp	r3, #4
 8015840:	d139      	bne.n	80158b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	681a      	ldr	r2, [r3, #0]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	f022 0216 	bic.w	r2, r2, #22
 8015850:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	695a      	ldr	r2, [r3, #20]
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015860:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015866:	2b00      	cmp	r3, #0
 8015868:	d103      	bne.n	8015872 <HAL_DMA_IRQHandler+0x736>
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801586e:	2b00      	cmp	r3, #0
 8015870:	d007      	beq.n	8015882 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	f022 0208 	bic.w	r2, r2, #8
 8015880:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015886:	f003 031f 	and.w	r3, r3, #31
 801588a:	223f      	movs	r2, #63	; 0x3f
 801588c:	409a      	lsls	r2, r3
 801588e:	6a3b      	ldr	r3, [r7, #32]
 8015890:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	2200      	movs	r2, #0
 8015896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2201      	movs	r2, #1
 801589e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f000 834a 	beq.w	8015f40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	4798      	blx	r3
          }
          return;
 80158b4:	e344      	b.n	8015f40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d018      	beq.n	80158f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d108      	bne.n	80158e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d02c      	beq.n	8015934 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	4798      	blx	r3
 80158e2:	e027      	b.n	8015934 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d023      	beq.n	8015934 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	4798      	blx	r3
 80158f4:	e01e      	b.n	8015934 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015900:	2b00      	cmp	r3, #0
 8015902:	d10f      	bne.n	8015924 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	681a      	ldr	r2, [r3, #0]
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	f022 0210 	bic.w	r2, r2, #16
 8015912:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2200      	movs	r2, #0
 8015918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2201      	movs	r2, #1
 8015920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015928:	2b00      	cmp	r3, #0
 801592a:	d003      	beq.n	8015934 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015938:	2b00      	cmp	r3, #0
 801593a:	f000 8306 	beq.w	8015f4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015942:	f003 0301 	and.w	r3, r3, #1
 8015946:	2b00      	cmp	r3, #0
 8015948:	f000 8088 	beq.w	8015a5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2204      	movs	r2, #4
 8015950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	4a7a      	ldr	r2, [pc, #488]	; (8015b44 <HAL_DMA_IRQHandler+0xa08>)
 801595a:	4293      	cmp	r3, r2
 801595c:	d04a      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	4a79      	ldr	r2, [pc, #484]	; (8015b48 <HAL_DMA_IRQHandler+0xa0c>)
 8015964:	4293      	cmp	r3, r2
 8015966:	d045      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	4a77      	ldr	r2, [pc, #476]	; (8015b4c <HAL_DMA_IRQHandler+0xa10>)
 801596e:	4293      	cmp	r3, r2
 8015970:	d040      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	4a76      	ldr	r2, [pc, #472]	; (8015b50 <HAL_DMA_IRQHandler+0xa14>)
 8015978:	4293      	cmp	r3, r2
 801597a:	d03b      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	4a74      	ldr	r2, [pc, #464]	; (8015b54 <HAL_DMA_IRQHandler+0xa18>)
 8015982:	4293      	cmp	r3, r2
 8015984:	d036      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	4a73      	ldr	r2, [pc, #460]	; (8015b58 <HAL_DMA_IRQHandler+0xa1c>)
 801598c:	4293      	cmp	r3, r2
 801598e:	d031      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	4a71      	ldr	r2, [pc, #452]	; (8015b5c <HAL_DMA_IRQHandler+0xa20>)
 8015996:	4293      	cmp	r3, r2
 8015998:	d02c      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	4a70      	ldr	r2, [pc, #448]	; (8015b60 <HAL_DMA_IRQHandler+0xa24>)
 80159a0:	4293      	cmp	r3, r2
 80159a2:	d027      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	4a6e      	ldr	r2, [pc, #440]	; (8015b64 <HAL_DMA_IRQHandler+0xa28>)
 80159aa:	4293      	cmp	r3, r2
 80159ac:	d022      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	4a6d      	ldr	r2, [pc, #436]	; (8015b68 <HAL_DMA_IRQHandler+0xa2c>)
 80159b4:	4293      	cmp	r3, r2
 80159b6:	d01d      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	4a6b      	ldr	r2, [pc, #428]	; (8015b6c <HAL_DMA_IRQHandler+0xa30>)
 80159be:	4293      	cmp	r3, r2
 80159c0:	d018      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	4a6a      	ldr	r2, [pc, #424]	; (8015b70 <HAL_DMA_IRQHandler+0xa34>)
 80159c8:	4293      	cmp	r3, r2
 80159ca:	d013      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	4a68      	ldr	r2, [pc, #416]	; (8015b74 <HAL_DMA_IRQHandler+0xa38>)
 80159d2:	4293      	cmp	r3, r2
 80159d4:	d00e      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	4a67      	ldr	r2, [pc, #412]	; (8015b78 <HAL_DMA_IRQHandler+0xa3c>)
 80159dc:	4293      	cmp	r3, r2
 80159de:	d009      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	4a65      	ldr	r2, [pc, #404]	; (8015b7c <HAL_DMA_IRQHandler+0xa40>)
 80159e6:	4293      	cmp	r3, r2
 80159e8:	d004      	beq.n	80159f4 <HAL_DMA_IRQHandler+0x8b8>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	4a64      	ldr	r2, [pc, #400]	; (8015b80 <HAL_DMA_IRQHandler+0xa44>)
 80159f0:	4293      	cmp	r3, r2
 80159f2:	d108      	bne.n	8015a06 <HAL_DMA_IRQHandler+0x8ca>
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	681a      	ldr	r2, [r3, #0]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	f022 0201 	bic.w	r2, r2, #1
 8015a02:	601a      	str	r2, [r3, #0]
 8015a04:	e007      	b.n	8015a16 <HAL_DMA_IRQHandler+0x8da>
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	681a      	ldr	r2, [r3, #0]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	f022 0201 	bic.w	r2, r2, #1
 8015a14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	3301      	adds	r3, #1
 8015a1a:	60fb      	str	r3, [r7, #12]
 8015a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d307      	bcc.n	8015a32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	f003 0301 	and.w	r3, r3, #1
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d1f2      	bne.n	8015a16 <HAL_DMA_IRQHandler+0x8da>
 8015a30:	e000      	b.n	8015a34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8015a32:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	2200      	movs	r2, #0
 8015a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	f003 0301 	and.w	r3, r3, #1
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d004      	beq.n	8015a54 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2203      	movs	r2, #3
 8015a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8015a52:	e003      	b.n	8015a5c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2201      	movs	r2, #1
 8015a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	f000 8272 	beq.w	8015f4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a6a:	6878      	ldr	r0, [r7, #4]
 8015a6c:	4798      	blx	r3
 8015a6e:	e26c      	b.n	8015f4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	4a43      	ldr	r2, [pc, #268]	; (8015b84 <HAL_DMA_IRQHandler+0xa48>)
 8015a76:	4293      	cmp	r3, r2
 8015a78:	d022      	beq.n	8015ac0 <HAL_DMA_IRQHandler+0x984>
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	4a42      	ldr	r2, [pc, #264]	; (8015b88 <HAL_DMA_IRQHandler+0xa4c>)
 8015a80:	4293      	cmp	r3, r2
 8015a82:	d01d      	beq.n	8015ac0 <HAL_DMA_IRQHandler+0x984>
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	4a40      	ldr	r2, [pc, #256]	; (8015b8c <HAL_DMA_IRQHandler+0xa50>)
 8015a8a:	4293      	cmp	r3, r2
 8015a8c:	d018      	beq.n	8015ac0 <HAL_DMA_IRQHandler+0x984>
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	4a3f      	ldr	r2, [pc, #252]	; (8015b90 <HAL_DMA_IRQHandler+0xa54>)
 8015a94:	4293      	cmp	r3, r2
 8015a96:	d013      	beq.n	8015ac0 <HAL_DMA_IRQHandler+0x984>
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	4a3d      	ldr	r2, [pc, #244]	; (8015b94 <HAL_DMA_IRQHandler+0xa58>)
 8015a9e:	4293      	cmp	r3, r2
 8015aa0:	d00e      	beq.n	8015ac0 <HAL_DMA_IRQHandler+0x984>
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	4a3c      	ldr	r2, [pc, #240]	; (8015b98 <HAL_DMA_IRQHandler+0xa5c>)
 8015aa8:	4293      	cmp	r3, r2
 8015aaa:	d009      	beq.n	8015ac0 <HAL_DMA_IRQHandler+0x984>
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	4a3a      	ldr	r2, [pc, #232]	; (8015b9c <HAL_DMA_IRQHandler+0xa60>)
 8015ab2:	4293      	cmp	r3, r2
 8015ab4:	d004      	beq.n	8015ac0 <HAL_DMA_IRQHandler+0x984>
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	4a39      	ldr	r2, [pc, #228]	; (8015ba0 <HAL_DMA_IRQHandler+0xa64>)
 8015abc:	4293      	cmp	r3, r2
 8015abe:	d101      	bne.n	8015ac4 <HAL_DMA_IRQHandler+0x988>
 8015ac0:	2301      	movs	r3, #1
 8015ac2:	e000      	b.n	8015ac6 <HAL_DMA_IRQHandler+0x98a>
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	f000 823f 	beq.w	8015f4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ad8:	f003 031f 	and.w	r3, r3, #31
 8015adc:	2204      	movs	r2, #4
 8015ade:	409a      	lsls	r2, r3
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	4013      	ands	r3, r2
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	f000 80cd 	beq.w	8015c84 <HAL_DMA_IRQHandler+0xb48>
 8015aea:	693b      	ldr	r3, [r7, #16]
 8015aec:	f003 0304 	and.w	r3, r3, #4
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	f000 80c7 	beq.w	8015c84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015afa:	f003 031f 	and.w	r3, r3, #31
 8015afe:	2204      	movs	r2, #4
 8015b00:	409a      	lsls	r2, r3
 8015b02:	69fb      	ldr	r3, [r7, #28]
 8015b04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015b06:	693b      	ldr	r3, [r7, #16]
 8015b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d049      	beq.n	8015ba4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8015b10:	693b      	ldr	r3, [r7, #16]
 8015b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d109      	bne.n	8015b2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	f000 8210 	beq.w	8015f44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b28:	6878      	ldr	r0, [r7, #4]
 8015b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015b2c:	e20a      	b.n	8015f44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	f000 8206 	beq.w	8015f44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b3c:	6878      	ldr	r0, [r7, #4]
 8015b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015b40:	e200      	b.n	8015f44 <HAL_DMA_IRQHandler+0xe08>
 8015b42:	bf00      	nop
 8015b44:	40020010 	.word	0x40020010
 8015b48:	40020028 	.word	0x40020028
 8015b4c:	40020040 	.word	0x40020040
 8015b50:	40020058 	.word	0x40020058
 8015b54:	40020070 	.word	0x40020070
 8015b58:	40020088 	.word	0x40020088
 8015b5c:	400200a0 	.word	0x400200a0
 8015b60:	400200b8 	.word	0x400200b8
 8015b64:	40020410 	.word	0x40020410
 8015b68:	40020428 	.word	0x40020428
 8015b6c:	40020440 	.word	0x40020440
 8015b70:	40020458 	.word	0x40020458
 8015b74:	40020470 	.word	0x40020470
 8015b78:	40020488 	.word	0x40020488
 8015b7c:	400204a0 	.word	0x400204a0
 8015b80:	400204b8 	.word	0x400204b8
 8015b84:	58025408 	.word	0x58025408
 8015b88:	5802541c 	.word	0x5802541c
 8015b8c:	58025430 	.word	0x58025430
 8015b90:	58025444 	.word	0x58025444
 8015b94:	58025458 	.word	0x58025458
 8015b98:	5802546c 	.word	0x5802546c
 8015b9c:	58025480 	.word	0x58025480
 8015ba0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	f003 0320 	and.w	r3, r3, #32
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d160      	bne.n	8015c70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	4a8c      	ldr	r2, [pc, #560]	; (8015de4 <HAL_DMA_IRQHandler+0xca8>)
 8015bb4:	4293      	cmp	r3, r2
 8015bb6:	d04a      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	4a8a      	ldr	r2, [pc, #552]	; (8015de8 <HAL_DMA_IRQHandler+0xcac>)
 8015bbe:	4293      	cmp	r3, r2
 8015bc0:	d045      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	4a89      	ldr	r2, [pc, #548]	; (8015dec <HAL_DMA_IRQHandler+0xcb0>)
 8015bc8:	4293      	cmp	r3, r2
 8015bca:	d040      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	4a87      	ldr	r2, [pc, #540]	; (8015df0 <HAL_DMA_IRQHandler+0xcb4>)
 8015bd2:	4293      	cmp	r3, r2
 8015bd4:	d03b      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	4a86      	ldr	r2, [pc, #536]	; (8015df4 <HAL_DMA_IRQHandler+0xcb8>)
 8015bdc:	4293      	cmp	r3, r2
 8015bde:	d036      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	4a84      	ldr	r2, [pc, #528]	; (8015df8 <HAL_DMA_IRQHandler+0xcbc>)
 8015be6:	4293      	cmp	r3, r2
 8015be8:	d031      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	4a83      	ldr	r2, [pc, #524]	; (8015dfc <HAL_DMA_IRQHandler+0xcc0>)
 8015bf0:	4293      	cmp	r3, r2
 8015bf2:	d02c      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	4a81      	ldr	r2, [pc, #516]	; (8015e00 <HAL_DMA_IRQHandler+0xcc4>)
 8015bfa:	4293      	cmp	r3, r2
 8015bfc:	d027      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	4a80      	ldr	r2, [pc, #512]	; (8015e04 <HAL_DMA_IRQHandler+0xcc8>)
 8015c04:	4293      	cmp	r3, r2
 8015c06:	d022      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	4a7e      	ldr	r2, [pc, #504]	; (8015e08 <HAL_DMA_IRQHandler+0xccc>)
 8015c0e:	4293      	cmp	r3, r2
 8015c10:	d01d      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	4a7d      	ldr	r2, [pc, #500]	; (8015e0c <HAL_DMA_IRQHandler+0xcd0>)
 8015c18:	4293      	cmp	r3, r2
 8015c1a:	d018      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	4a7b      	ldr	r2, [pc, #492]	; (8015e10 <HAL_DMA_IRQHandler+0xcd4>)
 8015c22:	4293      	cmp	r3, r2
 8015c24:	d013      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	4a7a      	ldr	r2, [pc, #488]	; (8015e14 <HAL_DMA_IRQHandler+0xcd8>)
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	d00e      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	4a78      	ldr	r2, [pc, #480]	; (8015e18 <HAL_DMA_IRQHandler+0xcdc>)
 8015c36:	4293      	cmp	r3, r2
 8015c38:	d009      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	4a77      	ldr	r2, [pc, #476]	; (8015e1c <HAL_DMA_IRQHandler+0xce0>)
 8015c40:	4293      	cmp	r3, r2
 8015c42:	d004      	beq.n	8015c4e <HAL_DMA_IRQHandler+0xb12>
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	4a75      	ldr	r2, [pc, #468]	; (8015e20 <HAL_DMA_IRQHandler+0xce4>)
 8015c4a:	4293      	cmp	r3, r2
 8015c4c:	d108      	bne.n	8015c60 <HAL_DMA_IRQHandler+0xb24>
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	681a      	ldr	r2, [r3, #0]
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	f022 0208 	bic.w	r2, r2, #8
 8015c5c:	601a      	str	r2, [r3, #0]
 8015c5e:	e007      	b.n	8015c70 <HAL_DMA_IRQHandler+0xb34>
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	681a      	ldr	r2, [r3, #0]
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	f022 0204 	bic.w	r2, r2, #4
 8015c6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	f000 8165 	beq.w	8015f44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015c82:	e15f      	b.n	8015f44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c88:	f003 031f 	and.w	r3, r3, #31
 8015c8c:	2202      	movs	r2, #2
 8015c8e:	409a      	lsls	r2, r3
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	4013      	ands	r3, r2
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	f000 80c5 	beq.w	8015e24 <HAL_DMA_IRQHandler+0xce8>
 8015c9a:	693b      	ldr	r3, [r7, #16]
 8015c9c:	f003 0302 	and.w	r3, r3, #2
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	f000 80bf 	beq.w	8015e24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015caa:	f003 031f 	and.w	r3, r3, #31
 8015cae:	2202      	movs	r2, #2
 8015cb0:	409a      	lsls	r2, r3
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d018      	beq.n	8015cf2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d109      	bne.n	8015cde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	f000 813a 	beq.w	8015f48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015cdc:	e134      	b.n	8015f48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	f000 8130 	beq.w	8015f48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015cf0:	e12a      	b.n	8015f48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8015cf2:	693b      	ldr	r3, [r7, #16]
 8015cf4:	f003 0320 	and.w	r3, r3, #32
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d168      	bne.n	8015dce <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	4a38      	ldr	r2, [pc, #224]	; (8015de4 <HAL_DMA_IRQHandler+0xca8>)
 8015d02:	4293      	cmp	r3, r2
 8015d04:	d04a      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	4a37      	ldr	r2, [pc, #220]	; (8015de8 <HAL_DMA_IRQHandler+0xcac>)
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	d045      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	4a35      	ldr	r2, [pc, #212]	; (8015dec <HAL_DMA_IRQHandler+0xcb0>)
 8015d16:	4293      	cmp	r3, r2
 8015d18:	d040      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	4a34      	ldr	r2, [pc, #208]	; (8015df0 <HAL_DMA_IRQHandler+0xcb4>)
 8015d20:	4293      	cmp	r3, r2
 8015d22:	d03b      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	4a32      	ldr	r2, [pc, #200]	; (8015df4 <HAL_DMA_IRQHandler+0xcb8>)
 8015d2a:	4293      	cmp	r3, r2
 8015d2c:	d036      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	4a31      	ldr	r2, [pc, #196]	; (8015df8 <HAL_DMA_IRQHandler+0xcbc>)
 8015d34:	4293      	cmp	r3, r2
 8015d36:	d031      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	4a2f      	ldr	r2, [pc, #188]	; (8015dfc <HAL_DMA_IRQHandler+0xcc0>)
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	d02c      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	4a2e      	ldr	r2, [pc, #184]	; (8015e00 <HAL_DMA_IRQHandler+0xcc4>)
 8015d48:	4293      	cmp	r3, r2
 8015d4a:	d027      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	4a2c      	ldr	r2, [pc, #176]	; (8015e04 <HAL_DMA_IRQHandler+0xcc8>)
 8015d52:	4293      	cmp	r3, r2
 8015d54:	d022      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	4a2b      	ldr	r2, [pc, #172]	; (8015e08 <HAL_DMA_IRQHandler+0xccc>)
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	d01d      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	4a29      	ldr	r2, [pc, #164]	; (8015e0c <HAL_DMA_IRQHandler+0xcd0>)
 8015d66:	4293      	cmp	r3, r2
 8015d68:	d018      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	4a28      	ldr	r2, [pc, #160]	; (8015e10 <HAL_DMA_IRQHandler+0xcd4>)
 8015d70:	4293      	cmp	r3, r2
 8015d72:	d013      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	4a26      	ldr	r2, [pc, #152]	; (8015e14 <HAL_DMA_IRQHandler+0xcd8>)
 8015d7a:	4293      	cmp	r3, r2
 8015d7c:	d00e      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	4a25      	ldr	r2, [pc, #148]	; (8015e18 <HAL_DMA_IRQHandler+0xcdc>)
 8015d84:	4293      	cmp	r3, r2
 8015d86:	d009      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	4a23      	ldr	r2, [pc, #140]	; (8015e1c <HAL_DMA_IRQHandler+0xce0>)
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d004      	beq.n	8015d9c <HAL_DMA_IRQHandler+0xc60>
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	4a22      	ldr	r2, [pc, #136]	; (8015e20 <HAL_DMA_IRQHandler+0xce4>)
 8015d98:	4293      	cmp	r3, r2
 8015d9a:	d108      	bne.n	8015dae <HAL_DMA_IRQHandler+0xc72>
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	681a      	ldr	r2, [r3, #0]
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	f022 0214 	bic.w	r2, r2, #20
 8015daa:	601a      	str	r2, [r3, #0]
 8015dac:	e007      	b.n	8015dbe <HAL_DMA_IRQHandler+0xc82>
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	681a      	ldr	r2, [r3, #0]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	f022 020a 	bic.w	r2, r2, #10
 8015dbc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2201      	movs	r2, #1
 8015dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	f000 80b8 	beq.w	8015f48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015de0:	e0b2      	b.n	8015f48 <HAL_DMA_IRQHandler+0xe0c>
 8015de2:	bf00      	nop
 8015de4:	40020010 	.word	0x40020010
 8015de8:	40020028 	.word	0x40020028
 8015dec:	40020040 	.word	0x40020040
 8015df0:	40020058 	.word	0x40020058
 8015df4:	40020070 	.word	0x40020070
 8015df8:	40020088 	.word	0x40020088
 8015dfc:	400200a0 	.word	0x400200a0
 8015e00:	400200b8 	.word	0x400200b8
 8015e04:	40020410 	.word	0x40020410
 8015e08:	40020428 	.word	0x40020428
 8015e0c:	40020440 	.word	0x40020440
 8015e10:	40020458 	.word	0x40020458
 8015e14:	40020470 	.word	0x40020470
 8015e18:	40020488 	.word	0x40020488
 8015e1c:	400204a0 	.word	0x400204a0
 8015e20:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015e28:	f003 031f 	and.w	r3, r3, #31
 8015e2c:	2208      	movs	r2, #8
 8015e2e:	409a      	lsls	r2, r3
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	4013      	ands	r3, r2
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	f000 8088 	beq.w	8015f4a <HAL_DMA_IRQHandler+0xe0e>
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	f003 0308 	and.w	r3, r3, #8
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	f000 8082 	beq.w	8015f4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	4a41      	ldr	r2, [pc, #260]	; (8015f50 <HAL_DMA_IRQHandler+0xe14>)
 8015e4c:	4293      	cmp	r3, r2
 8015e4e:	d04a      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	4a3f      	ldr	r2, [pc, #252]	; (8015f54 <HAL_DMA_IRQHandler+0xe18>)
 8015e56:	4293      	cmp	r3, r2
 8015e58:	d045      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	4a3e      	ldr	r2, [pc, #248]	; (8015f58 <HAL_DMA_IRQHandler+0xe1c>)
 8015e60:	4293      	cmp	r3, r2
 8015e62:	d040      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	4a3c      	ldr	r2, [pc, #240]	; (8015f5c <HAL_DMA_IRQHandler+0xe20>)
 8015e6a:	4293      	cmp	r3, r2
 8015e6c:	d03b      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	4a3b      	ldr	r2, [pc, #236]	; (8015f60 <HAL_DMA_IRQHandler+0xe24>)
 8015e74:	4293      	cmp	r3, r2
 8015e76:	d036      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	4a39      	ldr	r2, [pc, #228]	; (8015f64 <HAL_DMA_IRQHandler+0xe28>)
 8015e7e:	4293      	cmp	r3, r2
 8015e80:	d031      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	4a38      	ldr	r2, [pc, #224]	; (8015f68 <HAL_DMA_IRQHandler+0xe2c>)
 8015e88:	4293      	cmp	r3, r2
 8015e8a:	d02c      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	4a36      	ldr	r2, [pc, #216]	; (8015f6c <HAL_DMA_IRQHandler+0xe30>)
 8015e92:	4293      	cmp	r3, r2
 8015e94:	d027      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	4a35      	ldr	r2, [pc, #212]	; (8015f70 <HAL_DMA_IRQHandler+0xe34>)
 8015e9c:	4293      	cmp	r3, r2
 8015e9e:	d022      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	4a33      	ldr	r2, [pc, #204]	; (8015f74 <HAL_DMA_IRQHandler+0xe38>)
 8015ea6:	4293      	cmp	r3, r2
 8015ea8:	d01d      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	4a32      	ldr	r2, [pc, #200]	; (8015f78 <HAL_DMA_IRQHandler+0xe3c>)
 8015eb0:	4293      	cmp	r3, r2
 8015eb2:	d018      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	4a30      	ldr	r2, [pc, #192]	; (8015f7c <HAL_DMA_IRQHandler+0xe40>)
 8015eba:	4293      	cmp	r3, r2
 8015ebc:	d013      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	4a2f      	ldr	r2, [pc, #188]	; (8015f80 <HAL_DMA_IRQHandler+0xe44>)
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	d00e      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	4a2d      	ldr	r2, [pc, #180]	; (8015f84 <HAL_DMA_IRQHandler+0xe48>)
 8015ece:	4293      	cmp	r3, r2
 8015ed0:	d009      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	4a2c      	ldr	r2, [pc, #176]	; (8015f88 <HAL_DMA_IRQHandler+0xe4c>)
 8015ed8:	4293      	cmp	r3, r2
 8015eda:	d004      	beq.n	8015ee6 <HAL_DMA_IRQHandler+0xdaa>
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	4a2a      	ldr	r2, [pc, #168]	; (8015f8c <HAL_DMA_IRQHandler+0xe50>)
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	d108      	bne.n	8015ef8 <HAL_DMA_IRQHandler+0xdbc>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	f022 021c 	bic.w	r2, r2, #28
 8015ef4:	601a      	str	r2, [r3, #0]
 8015ef6:	e007      	b.n	8015f08 <HAL_DMA_IRQHandler+0xdcc>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	681a      	ldr	r2, [r3, #0]
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	f022 020e 	bic.w	r2, r2, #14
 8015f06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f0c:	f003 031f 	and.w	r3, r3, #31
 8015f10:	2201      	movs	r2, #1
 8015f12:	409a      	lsls	r2, r3
 8015f14:	69fb      	ldr	r3, [r7, #28]
 8015f16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	2201      	movs	r2, #1
 8015f1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2200      	movs	r2, #0
 8015f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2201      	movs	r2, #1
 8015f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d009      	beq.n	8015f4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	4798      	blx	r3
 8015f3e:	e004      	b.n	8015f4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8015f40:	bf00      	nop
 8015f42:	e002      	b.n	8015f4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015f44:	bf00      	nop
 8015f46:	e000      	b.n	8015f4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015f48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8015f4a:	3728      	adds	r7, #40	; 0x28
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}
 8015f50:	40020010 	.word	0x40020010
 8015f54:	40020028 	.word	0x40020028
 8015f58:	40020040 	.word	0x40020040
 8015f5c:	40020058 	.word	0x40020058
 8015f60:	40020070 	.word	0x40020070
 8015f64:	40020088 	.word	0x40020088
 8015f68:	400200a0 	.word	0x400200a0
 8015f6c:	400200b8 	.word	0x400200b8
 8015f70:	40020410 	.word	0x40020410
 8015f74:	40020428 	.word	0x40020428
 8015f78:	40020440 	.word	0x40020440
 8015f7c:	40020458 	.word	0x40020458
 8015f80:	40020470 	.word	0x40020470
 8015f84:	40020488 	.word	0x40020488
 8015f88:	400204a0 	.word	0x400204a0
 8015f8c:	400204b8 	.word	0x400204b8

08015f90 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8015f90:	b480      	push	{r7}
 8015f92:	b083      	sub	sp, #12
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015f9e:	b2db      	uxtb	r3, r3
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	370c      	adds	r7, #12
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015faa:	4770      	bx	lr

08015fac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8015fac:	b480      	push	{r7}
 8015fae:	b083      	sub	sp, #12
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	370c      	adds	r7, #12
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc2:	4770      	bx	lr

08015fc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015fc4:	b480      	push	{r7}
 8015fc6:	b087      	sub	sp, #28
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	60f8      	str	r0, [r7, #12]
 8015fcc:	60b9      	str	r1, [r7, #8]
 8015fce:	607a      	str	r2, [r7, #4]
 8015fd0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015fd6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015fdc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	4a84      	ldr	r2, [pc, #528]	; (80161f4 <DMA_SetConfig+0x230>)
 8015fe4:	4293      	cmp	r3, r2
 8015fe6:	d072      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	4a82      	ldr	r2, [pc, #520]	; (80161f8 <DMA_SetConfig+0x234>)
 8015fee:	4293      	cmp	r3, r2
 8015ff0:	d06d      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	4a81      	ldr	r2, [pc, #516]	; (80161fc <DMA_SetConfig+0x238>)
 8015ff8:	4293      	cmp	r3, r2
 8015ffa:	d068      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	4a7f      	ldr	r2, [pc, #508]	; (8016200 <DMA_SetConfig+0x23c>)
 8016002:	4293      	cmp	r3, r2
 8016004:	d063      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	4a7e      	ldr	r2, [pc, #504]	; (8016204 <DMA_SetConfig+0x240>)
 801600c:	4293      	cmp	r3, r2
 801600e:	d05e      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	4a7c      	ldr	r2, [pc, #496]	; (8016208 <DMA_SetConfig+0x244>)
 8016016:	4293      	cmp	r3, r2
 8016018:	d059      	beq.n	80160ce <DMA_SetConfig+0x10a>
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	4a7b      	ldr	r2, [pc, #492]	; (801620c <DMA_SetConfig+0x248>)
 8016020:	4293      	cmp	r3, r2
 8016022:	d054      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	4a79      	ldr	r2, [pc, #484]	; (8016210 <DMA_SetConfig+0x24c>)
 801602a:	4293      	cmp	r3, r2
 801602c:	d04f      	beq.n	80160ce <DMA_SetConfig+0x10a>
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	4a78      	ldr	r2, [pc, #480]	; (8016214 <DMA_SetConfig+0x250>)
 8016034:	4293      	cmp	r3, r2
 8016036:	d04a      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	4a76      	ldr	r2, [pc, #472]	; (8016218 <DMA_SetConfig+0x254>)
 801603e:	4293      	cmp	r3, r2
 8016040:	d045      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	4a75      	ldr	r2, [pc, #468]	; (801621c <DMA_SetConfig+0x258>)
 8016048:	4293      	cmp	r3, r2
 801604a:	d040      	beq.n	80160ce <DMA_SetConfig+0x10a>
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	4a73      	ldr	r2, [pc, #460]	; (8016220 <DMA_SetConfig+0x25c>)
 8016052:	4293      	cmp	r3, r2
 8016054:	d03b      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	4a72      	ldr	r2, [pc, #456]	; (8016224 <DMA_SetConfig+0x260>)
 801605c:	4293      	cmp	r3, r2
 801605e:	d036      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	4a70      	ldr	r2, [pc, #448]	; (8016228 <DMA_SetConfig+0x264>)
 8016066:	4293      	cmp	r3, r2
 8016068:	d031      	beq.n	80160ce <DMA_SetConfig+0x10a>
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	4a6f      	ldr	r2, [pc, #444]	; (801622c <DMA_SetConfig+0x268>)
 8016070:	4293      	cmp	r3, r2
 8016072:	d02c      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	4a6d      	ldr	r2, [pc, #436]	; (8016230 <DMA_SetConfig+0x26c>)
 801607a:	4293      	cmp	r3, r2
 801607c:	d027      	beq.n	80160ce <DMA_SetConfig+0x10a>
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	4a6c      	ldr	r2, [pc, #432]	; (8016234 <DMA_SetConfig+0x270>)
 8016084:	4293      	cmp	r3, r2
 8016086:	d022      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	4a6a      	ldr	r2, [pc, #424]	; (8016238 <DMA_SetConfig+0x274>)
 801608e:	4293      	cmp	r3, r2
 8016090:	d01d      	beq.n	80160ce <DMA_SetConfig+0x10a>
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4a69      	ldr	r2, [pc, #420]	; (801623c <DMA_SetConfig+0x278>)
 8016098:	4293      	cmp	r3, r2
 801609a:	d018      	beq.n	80160ce <DMA_SetConfig+0x10a>
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4a67      	ldr	r2, [pc, #412]	; (8016240 <DMA_SetConfig+0x27c>)
 80160a2:	4293      	cmp	r3, r2
 80160a4:	d013      	beq.n	80160ce <DMA_SetConfig+0x10a>
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	4a66      	ldr	r2, [pc, #408]	; (8016244 <DMA_SetConfig+0x280>)
 80160ac:	4293      	cmp	r3, r2
 80160ae:	d00e      	beq.n	80160ce <DMA_SetConfig+0x10a>
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	4a64      	ldr	r2, [pc, #400]	; (8016248 <DMA_SetConfig+0x284>)
 80160b6:	4293      	cmp	r3, r2
 80160b8:	d009      	beq.n	80160ce <DMA_SetConfig+0x10a>
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	4a63      	ldr	r2, [pc, #396]	; (801624c <DMA_SetConfig+0x288>)
 80160c0:	4293      	cmp	r3, r2
 80160c2:	d004      	beq.n	80160ce <DMA_SetConfig+0x10a>
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	4a61      	ldr	r2, [pc, #388]	; (8016250 <DMA_SetConfig+0x28c>)
 80160ca:	4293      	cmp	r3, r2
 80160cc:	d101      	bne.n	80160d2 <DMA_SetConfig+0x10e>
 80160ce:	2301      	movs	r3, #1
 80160d0:	e000      	b.n	80160d4 <DMA_SetConfig+0x110>
 80160d2:	2300      	movs	r3, #0
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d00d      	beq.n	80160f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80160dc:	68fa      	ldr	r2, [r7, #12]
 80160de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80160e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d004      	beq.n	80160f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160ee:	68fa      	ldr	r2, [r7, #12]
 80160f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80160f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	4a3e      	ldr	r2, [pc, #248]	; (80161f4 <DMA_SetConfig+0x230>)
 80160fa:	4293      	cmp	r3, r2
 80160fc:	d04a      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	4a3d      	ldr	r2, [pc, #244]	; (80161f8 <DMA_SetConfig+0x234>)
 8016104:	4293      	cmp	r3, r2
 8016106:	d045      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	4a3b      	ldr	r2, [pc, #236]	; (80161fc <DMA_SetConfig+0x238>)
 801610e:	4293      	cmp	r3, r2
 8016110:	d040      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	4a3a      	ldr	r2, [pc, #232]	; (8016200 <DMA_SetConfig+0x23c>)
 8016118:	4293      	cmp	r3, r2
 801611a:	d03b      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	4a38      	ldr	r2, [pc, #224]	; (8016204 <DMA_SetConfig+0x240>)
 8016122:	4293      	cmp	r3, r2
 8016124:	d036      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	4a37      	ldr	r2, [pc, #220]	; (8016208 <DMA_SetConfig+0x244>)
 801612c:	4293      	cmp	r3, r2
 801612e:	d031      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	4a35      	ldr	r2, [pc, #212]	; (801620c <DMA_SetConfig+0x248>)
 8016136:	4293      	cmp	r3, r2
 8016138:	d02c      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	4a34      	ldr	r2, [pc, #208]	; (8016210 <DMA_SetConfig+0x24c>)
 8016140:	4293      	cmp	r3, r2
 8016142:	d027      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	4a32      	ldr	r2, [pc, #200]	; (8016214 <DMA_SetConfig+0x250>)
 801614a:	4293      	cmp	r3, r2
 801614c:	d022      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	4a31      	ldr	r2, [pc, #196]	; (8016218 <DMA_SetConfig+0x254>)
 8016154:	4293      	cmp	r3, r2
 8016156:	d01d      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	4a2f      	ldr	r2, [pc, #188]	; (801621c <DMA_SetConfig+0x258>)
 801615e:	4293      	cmp	r3, r2
 8016160:	d018      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	4a2e      	ldr	r2, [pc, #184]	; (8016220 <DMA_SetConfig+0x25c>)
 8016168:	4293      	cmp	r3, r2
 801616a:	d013      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	4a2c      	ldr	r2, [pc, #176]	; (8016224 <DMA_SetConfig+0x260>)
 8016172:	4293      	cmp	r3, r2
 8016174:	d00e      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	4a2b      	ldr	r2, [pc, #172]	; (8016228 <DMA_SetConfig+0x264>)
 801617c:	4293      	cmp	r3, r2
 801617e:	d009      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	4a29      	ldr	r2, [pc, #164]	; (801622c <DMA_SetConfig+0x268>)
 8016186:	4293      	cmp	r3, r2
 8016188:	d004      	beq.n	8016194 <DMA_SetConfig+0x1d0>
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	4a28      	ldr	r2, [pc, #160]	; (8016230 <DMA_SetConfig+0x26c>)
 8016190:	4293      	cmp	r3, r2
 8016192:	d101      	bne.n	8016198 <DMA_SetConfig+0x1d4>
 8016194:	2301      	movs	r3, #1
 8016196:	e000      	b.n	801619a <DMA_SetConfig+0x1d6>
 8016198:	2300      	movs	r3, #0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d05a      	beq.n	8016254 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161a2:	f003 031f 	and.w	r3, r3, #31
 80161a6:	223f      	movs	r2, #63	; 0x3f
 80161a8:	409a      	lsls	r2, r3
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	681a      	ldr	r2, [r3, #0]
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80161bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	683a      	ldr	r2, [r7, #0]
 80161c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	689b      	ldr	r3, [r3, #8]
 80161ca:	2b40      	cmp	r3, #64	; 0x40
 80161cc:	d108      	bne.n	80161e0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	68ba      	ldr	r2, [r7, #8]
 80161dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80161de:	e087      	b.n	80162f0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	68ba      	ldr	r2, [r7, #8]
 80161e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	687a      	ldr	r2, [r7, #4]
 80161ee:	60da      	str	r2, [r3, #12]
}
 80161f0:	e07e      	b.n	80162f0 <DMA_SetConfig+0x32c>
 80161f2:	bf00      	nop
 80161f4:	40020010 	.word	0x40020010
 80161f8:	40020028 	.word	0x40020028
 80161fc:	40020040 	.word	0x40020040
 8016200:	40020058 	.word	0x40020058
 8016204:	40020070 	.word	0x40020070
 8016208:	40020088 	.word	0x40020088
 801620c:	400200a0 	.word	0x400200a0
 8016210:	400200b8 	.word	0x400200b8
 8016214:	40020410 	.word	0x40020410
 8016218:	40020428 	.word	0x40020428
 801621c:	40020440 	.word	0x40020440
 8016220:	40020458 	.word	0x40020458
 8016224:	40020470 	.word	0x40020470
 8016228:	40020488 	.word	0x40020488
 801622c:	400204a0 	.word	0x400204a0
 8016230:	400204b8 	.word	0x400204b8
 8016234:	58025408 	.word	0x58025408
 8016238:	5802541c 	.word	0x5802541c
 801623c:	58025430 	.word	0x58025430
 8016240:	58025444 	.word	0x58025444
 8016244:	58025458 	.word	0x58025458
 8016248:	5802546c 	.word	0x5802546c
 801624c:	58025480 	.word	0x58025480
 8016250:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	4a28      	ldr	r2, [pc, #160]	; (80162fc <DMA_SetConfig+0x338>)
 801625a:	4293      	cmp	r3, r2
 801625c:	d022      	beq.n	80162a4 <DMA_SetConfig+0x2e0>
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	4a27      	ldr	r2, [pc, #156]	; (8016300 <DMA_SetConfig+0x33c>)
 8016264:	4293      	cmp	r3, r2
 8016266:	d01d      	beq.n	80162a4 <DMA_SetConfig+0x2e0>
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	4a25      	ldr	r2, [pc, #148]	; (8016304 <DMA_SetConfig+0x340>)
 801626e:	4293      	cmp	r3, r2
 8016270:	d018      	beq.n	80162a4 <DMA_SetConfig+0x2e0>
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	4a24      	ldr	r2, [pc, #144]	; (8016308 <DMA_SetConfig+0x344>)
 8016278:	4293      	cmp	r3, r2
 801627a:	d013      	beq.n	80162a4 <DMA_SetConfig+0x2e0>
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	4a22      	ldr	r2, [pc, #136]	; (801630c <DMA_SetConfig+0x348>)
 8016282:	4293      	cmp	r3, r2
 8016284:	d00e      	beq.n	80162a4 <DMA_SetConfig+0x2e0>
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	4a21      	ldr	r2, [pc, #132]	; (8016310 <DMA_SetConfig+0x34c>)
 801628c:	4293      	cmp	r3, r2
 801628e:	d009      	beq.n	80162a4 <DMA_SetConfig+0x2e0>
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	4a1f      	ldr	r2, [pc, #124]	; (8016314 <DMA_SetConfig+0x350>)
 8016296:	4293      	cmp	r3, r2
 8016298:	d004      	beq.n	80162a4 <DMA_SetConfig+0x2e0>
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	4a1e      	ldr	r2, [pc, #120]	; (8016318 <DMA_SetConfig+0x354>)
 80162a0:	4293      	cmp	r3, r2
 80162a2:	d101      	bne.n	80162a8 <DMA_SetConfig+0x2e4>
 80162a4:	2301      	movs	r3, #1
 80162a6:	e000      	b.n	80162aa <DMA_SetConfig+0x2e6>
 80162a8:	2300      	movs	r3, #0
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d020      	beq.n	80162f0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80162b2:	f003 031f 	and.w	r3, r3, #31
 80162b6:	2201      	movs	r2, #1
 80162b8:	409a      	lsls	r2, r3
 80162ba:	693b      	ldr	r3, [r7, #16]
 80162bc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	683a      	ldr	r2, [r7, #0]
 80162c4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	689b      	ldr	r3, [r3, #8]
 80162ca:	2b40      	cmp	r3, #64	; 0x40
 80162cc:	d108      	bne.n	80162e0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	68ba      	ldr	r2, [r7, #8]
 80162dc:	60da      	str	r2, [r3, #12]
}
 80162de:	e007      	b.n	80162f0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	68ba      	ldr	r2, [r7, #8]
 80162e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	687a      	ldr	r2, [r7, #4]
 80162ee:	60da      	str	r2, [r3, #12]
}
 80162f0:	bf00      	nop
 80162f2:	371c      	adds	r7, #28
 80162f4:	46bd      	mov	sp, r7
 80162f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162fa:	4770      	bx	lr
 80162fc:	58025408 	.word	0x58025408
 8016300:	5802541c 	.word	0x5802541c
 8016304:	58025430 	.word	0x58025430
 8016308:	58025444 	.word	0x58025444
 801630c:	58025458 	.word	0x58025458
 8016310:	5802546c 	.word	0x5802546c
 8016314:	58025480 	.word	0x58025480
 8016318:	58025494 	.word	0x58025494

0801631c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801631c:	b480      	push	{r7}
 801631e:	b085      	sub	sp, #20
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	4a42      	ldr	r2, [pc, #264]	; (8016434 <DMA_CalcBaseAndBitshift+0x118>)
 801632a:	4293      	cmp	r3, r2
 801632c:	d04a      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	4a41      	ldr	r2, [pc, #260]	; (8016438 <DMA_CalcBaseAndBitshift+0x11c>)
 8016334:	4293      	cmp	r3, r2
 8016336:	d045      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	4a3f      	ldr	r2, [pc, #252]	; (801643c <DMA_CalcBaseAndBitshift+0x120>)
 801633e:	4293      	cmp	r3, r2
 8016340:	d040      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	4a3e      	ldr	r2, [pc, #248]	; (8016440 <DMA_CalcBaseAndBitshift+0x124>)
 8016348:	4293      	cmp	r3, r2
 801634a:	d03b      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	4a3c      	ldr	r2, [pc, #240]	; (8016444 <DMA_CalcBaseAndBitshift+0x128>)
 8016352:	4293      	cmp	r3, r2
 8016354:	d036      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	4a3b      	ldr	r2, [pc, #236]	; (8016448 <DMA_CalcBaseAndBitshift+0x12c>)
 801635c:	4293      	cmp	r3, r2
 801635e:	d031      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	4a39      	ldr	r2, [pc, #228]	; (801644c <DMA_CalcBaseAndBitshift+0x130>)
 8016366:	4293      	cmp	r3, r2
 8016368:	d02c      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	4a38      	ldr	r2, [pc, #224]	; (8016450 <DMA_CalcBaseAndBitshift+0x134>)
 8016370:	4293      	cmp	r3, r2
 8016372:	d027      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	4a36      	ldr	r2, [pc, #216]	; (8016454 <DMA_CalcBaseAndBitshift+0x138>)
 801637a:	4293      	cmp	r3, r2
 801637c:	d022      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	4a35      	ldr	r2, [pc, #212]	; (8016458 <DMA_CalcBaseAndBitshift+0x13c>)
 8016384:	4293      	cmp	r3, r2
 8016386:	d01d      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4a33      	ldr	r2, [pc, #204]	; (801645c <DMA_CalcBaseAndBitshift+0x140>)
 801638e:	4293      	cmp	r3, r2
 8016390:	d018      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	4a32      	ldr	r2, [pc, #200]	; (8016460 <DMA_CalcBaseAndBitshift+0x144>)
 8016398:	4293      	cmp	r3, r2
 801639a:	d013      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	4a30      	ldr	r2, [pc, #192]	; (8016464 <DMA_CalcBaseAndBitshift+0x148>)
 80163a2:	4293      	cmp	r3, r2
 80163a4:	d00e      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	4a2f      	ldr	r2, [pc, #188]	; (8016468 <DMA_CalcBaseAndBitshift+0x14c>)
 80163ac:	4293      	cmp	r3, r2
 80163ae:	d009      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	4a2d      	ldr	r2, [pc, #180]	; (801646c <DMA_CalcBaseAndBitshift+0x150>)
 80163b6:	4293      	cmp	r3, r2
 80163b8:	d004      	beq.n	80163c4 <DMA_CalcBaseAndBitshift+0xa8>
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	4a2c      	ldr	r2, [pc, #176]	; (8016470 <DMA_CalcBaseAndBitshift+0x154>)
 80163c0:	4293      	cmp	r3, r2
 80163c2:	d101      	bne.n	80163c8 <DMA_CalcBaseAndBitshift+0xac>
 80163c4:	2301      	movs	r3, #1
 80163c6:	e000      	b.n	80163ca <DMA_CalcBaseAndBitshift+0xae>
 80163c8:	2300      	movs	r3, #0
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d024      	beq.n	8016418 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	3b10      	subs	r3, #16
 80163d6:	4a27      	ldr	r2, [pc, #156]	; (8016474 <DMA_CalcBaseAndBitshift+0x158>)
 80163d8:	fba2 2303 	umull	r2, r3, r2, r3
 80163dc:	091b      	lsrs	r3, r3, #4
 80163de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	f003 0307 	and.w	r3, r3, #7
 80163e6:	4a24      	ldr	r2, [pc, #144]	; (8016478 <DMA_CalcBaseAndBitshift+0x15c>)
 80163e8:	5cd3      	ldrb	r3, [r2, r3]
 80163ea:	461a      	mov	r2, r3
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2b03      	cmp	r3, #3
 80163f4:	d908      	bls.n	8016408 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	461a      	mov	r2, r3
 80163fc:	4b1f      	ldr	r3, [pc, #124]	; (801647c <DMA_CalcBaseAndBitshift+0x160>)
 80163fe:	4013      	ands	r3, r2
 8016400:	1d1a      	adds	r2, r3, #4
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	659a      	str	r2, [r3, #88]	; 0x58
 8016406:	e00d      	b.n	8016424 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	461a      	mov	r2, r3
 801640e:	4b1b      	ldr	r3, [pc, #108]	; (801647c <DMA_CalcBaseAndBitshift+0x160>)
 8016410:	4013      	ands	r3, r2
 8016412:	687a      	ldr	r2, [r7, #4]
 8016414:	6593      	str	r3, [r2, #88]	; 0x58
 8016416:	e005      	b.n	8016424 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8016428:	4618      	mov	r0, r3
 801642a:	3714      	adds	r7, #20
 801642c:	46bd      	mov	sp, r7
 801642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016432:	4770      	bx	lr
 8016434:	40020010 	.word	0x40020010
 8016438:	40020028 	.word	0x40020028
 801643c:	40020040 	.word	0x40020040
 8016440:	40020058 	.word	0x40020058
 8016444:	40020070 	.word	0x40020070
 8016448:	40020088 	.word	0x40020088
 801644c:	400200a0 	.word	0x400200a0
 8016450:	400200b8 	.word	0x400200b8
 8016454:	40020410 	.word	0x40020410
 8016458:	40020428 	.word	0x40020428
 801645c:	40020440 	.word	0x40020440
 8016460:	40020458 	.word	0x40020458
 8016464:	40020470 	.word	0x40020470
 8016468:	40020488 	.word	0x40020488
 801646c:	400204a0 	.word	0x400204a0
 8016470:	400204b8 	.word	0x400204b8
 8016474:	aaaaaaab 	.word	0xaaaaaaab
 8016478:	0802d73c 	.word	0x0802d73c
 801647c:	fffffc00 	.word	0xfffffc00

08016480 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8016480:	b480      	push	{r7}
 8016482:	b085      	sub	sp, #20
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016488:	2300      	movs	r3, #0
 801648a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	699b      	ldr	r3, [r3, #24]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d120      	bne.n	80164d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016498:	2b03      	cmp	r3, #3
 801649a:	d858      	bhi.n	801654e <DMA_CheckFifoParam+0xce>
 801649c:	a201      	add	r2, pc, #4	; (adr r2, 80164a4 <DMA_CheckFifoParam+0x24>)
 801649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164a2:	bf00      	nop
 80164a4:	080164b5 	.word	0x080164b5
 80164a8:	080164c7 	.word	0x080164c7
 80164ac:	080164b5 	.word	0x080164b5
 80164b0:	0801654f 	.word	0x0801654f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d048      	beq.n	8016552 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80164c0:	2301      	movs	r3, #1
 80164c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80164c4:	e045      	b.n	8016552 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80164ce:	d142      	bne.n	8016556 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80164d0:	2301      	movs	r3, #1
 80164d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80164d4:	e03f      	b.n	8016556 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	699b      	ldr	r3, [r3, #24]
 80164da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80164de:	d123      	bne.n	8016528 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164e4:	2b03      	cmp	r3, #3
 80164e6:	d838      	bhi.n	801655a <DMA_CheckFifoParam+0xda>
 80164e8:	a201      	add	r2, pc, #4	; (adr r2, 80164f0 <DMA_CheckFifoParam+0x70>)
 80164ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164ee:	bf00      	nop
 80164f0:	08016501 	.word	0x08016501
 80164f4:	08016507 	.word	0x08016507
 80164f8:	08016501 	.word	0x08016501
 80164fc:	08016519 	.word	0x08016519
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8016500:	2301      	movs	r3, #1
 8016502:	73fb      	strb	r3, [r7, #15]
        break;
 8016504:	e030      	b.n	8016568 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801650a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801650e:	2b00      	cmp	r3, #0
 8016510:	d025      	beq.n	801655e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8016512:	2301      	movs	r3, #1
 8016514:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8016516:	e022      	b.n	801655e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801651c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016520:	d11f      	bne.n	8016562 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8016522:	2301      	movs	r3, #1
 8016524:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8016526:	e01c      	b.n	8016562 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801652c:	2b02      	cmp	r3, #2
 801652e:	d902      	bls.n	8016536 <DMA_CheckFifoParam+0xb6>
 8016530:	2b03      	cmp	r3, #3
 8016532:	d003      	beq.n	801653c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8016534:	e018      	b.n	8016568 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8016536:	2301      	movs	r3, #1
 8016538:	73fb      	strb	r3, [r7, #15]
        break;
 801653a:	e015      	b.n	8016568 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016544:	2b00      	cmp	r3, #0
 8016546:	d00e      	beq.n	8016566 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8016548:	2301      	movs	r3, #1
 801654a:	73fb      	strb	r3, [r7, #15]
    break;
 801654c:	e00b      	b.n	8016566 <DMA_CheckFifoParam+0xe6>
        break;
 801654e:	bf00      	nop
 8016550:	e00a      	b.n	8016568 <DMA_CheckFifoParam+0xe8>
        break;
 8016552:	bf00      	nop
 8016554:	e008      	b.n	8016568 <DMA_CheckFifoParam+0xe8>
        break;
 8016556:	bf00      	nop
 8016558:	e006      	b.n	8016568 <DMA_CheckFifoParam+0xe8>
        break;
 801655a:	bf00      	nop
 801655c:	e004      	b.n	8016568 <DMA_CheckFifoParam+0xe8>
        break;
 801655e:	bf00      	nop
 8016560:	e002      	b.n	8016568 <DMA_CheckFifoParam+0xe8>
        break;
 8016562:	bf00      	nop
 8016564:	e000      	b.n	8016568 <DMA_CheckFifoParam+0xe8>
    break;
 8016566:	bf00      	nop
    }
  }

  return status;
 8016568:	7bfb      	ldrb	r3, [r7, #15]
}
 801656a:	4618      	mov	r0, r3
 801656c:	3714      	adds	r7, #20
 801656e:	46bd      	mov	sp, r7
 8016570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016574:	4770      	bx	lr
 8016576:	bf00      	nop

08016578 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8016578:	b480      	push	{r7}
 801657a:	b085      	sub	sp, #20
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	4a38      	ldr	r2, [pc, #224]	; (801666c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801658c:	4293      	cmp	r3, r2
 801658e:	d022      	beq.n	80165d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	4a36      	ldr	r2, [pc, #216]	; (8016670 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8016596:	4293      	cmp	r3, r2
 8016598:	d01d      	beq.n	80165d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	4a35      	ldr	r2, [pc, #212]	; (8016674 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80165a0:	4293      	cmp	r3, r2
 80165a2:	d018      	beq.n	80165d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	4a33      	ldr	r2, [pc, #204]	; (8016678 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d013      	beq.n	80165d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	4a32      	ldr	r2, [pc, #200]	; (801667c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80165b4:	4293      	cmp	r3, r2
 80165b6:	d00e      	beq.n	80165d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	4a30      	ldr	r2, [pc, #192]	; (8016680 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80165be:	4293      	cmp	r3, r2
 80165c0:	d009      	beq.n	80165d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	4a2f      	ldr	r2, [pc, #188]	; (8016684 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80165c8:	4293      	cmp	r3, r2
 80165ca:	d004      	beq.n	80165d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	4a2d      	ldr	r2, [pc, #180]	; (8016688 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80165d2:	4293      	cmp	r3, r2
 80165d4:	d101      	bne.n	80165da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80165d6:	2301      	movs	r3, #1
 80165d8:	e000      	b.n	80165dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80165da:	2300      	movs	r3, #0
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d01a      	beq.n	8016616 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	b2db      	uxtb	r3, r3
 80165e6:	3b08      	subs	r3, #8
 80165e8:	4a28      	ldr	r2, [pc, #160]	; (801668c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80165ea:	fba2 2303 	umull	r2, r3, r2, r3
 80165ee:	091b      	lsrs	r3, r3, #4
 80165f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80165f2:	68fa      	ldr	r2, [r7, #12]
 80165f4:	4b26      	ldr	r3, [pc, #152]	; (8016690 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80165f6:	4413      	add	r3, r2
 80165f8:	009b      	lsls	r3, r3, #2
 80165fa:	461a      	mov	r2, r3
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	4a24      	ldr	r2, [pc, #144]	; (8016694 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8016604:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	f003 031f 	and.w	r3, r3, #31
 801660c:	2201      	movs	r2, #1
 801660e:	409a      	lsls	r2, r3
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8016614:	e024      	b.n	8016660 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	b2db      	uxtb	r3, r3
 801661c:	3b10      	subs	r3, #16
 801661e:	4a1e      	ldr	r2, [pc, #120]	; (8016698 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8016620:	fba2 2303 	umull	r2, r3, r2, r3
 8016624:	091b      	lsrs	r3, r3, #4
 8016626:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8016628:	68bb      	ldr	r3, [r7, #8]
 801662a:	4a1c      	ldr	r2, [pc, #112]	; (801669c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801662c:	4293      	cmp	r3, r2
 801662e:	d806      	bhi.n	801663e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	4a1b      	ldr	r2, [pc, #108]	; (80166a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8016634:	4293      	cmp	r3, r2
 8016636:	d902      	bls.n	801663e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	3308      	adds	r3, #8
 801663c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801663e:	68fa      	ldr	r2, [r7, #12]
 8016640:	4b18      	ldr	r3, [pc, #96]	; (80166a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8016642:	4413      	add	r3, r2
 8016644:	009b      	lsls	r3, r3, #2
 8016646:	461a      	mov	r2, r3
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	4a16      	ldr	r2, [pc, #88]	; (80166a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8016650:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	f003 031f 	and.w	r3, r3, #31
 8016658:	2201      	movs	r2, #1
 801665a:	409a      	lsls	r2, r3
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8016660:	bf00      	nop
 8016662:	3714      	adds	r7, #20
 8016664:	46bd      	mov	sp, r7
 8016666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666a:	4770      	bx	lr
 801666c:	58025408 	.word	0x58025408
 8016670:	5802541c 	.word	0x5802541c
 8016674:	58025430 	.word	0x58025430
 8016678:	58025444 	.word	0x58025444
 801667c:	58025458 	.word	0x58025458
 8016680:	5802546c 	.word	0x5802546c
 8016684:	58025480 	.word	0x58025480
 8016688:	58025494 	.word	0x58025494
 801668c:	cccccccd 	.word	0xcccccccd
 8016690:	16009600 	.word	0x16009600
 8016694:	58025880 	.word	0x58025880
 8016698:	aaaaaaab 	.word	0xaaaaaaab
 801669c:	400204b8 	.word	0x400204b8
 80166a0:	4002040f 	.word	0x4002040f
 80166a4:	10008200 	.word	0x10008200
 80166a8:	40020880 	.word	0x40020880

080166ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80166ac:	b480      	push	{r7}
 80166ae:	b085      	sub	sp, #20
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	685b      	ldr	r3, [r3, #4]
 80166b8:	b2db      	uxtb	r3, r3
 80166ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d04a      	beq.n	8016758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	2b08      	cmp	r3, #8
 80166c6:	d847      	bhi.n	8016758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	4a25      	ldr	r2, [pc, #148]	; (8016764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80166ce:	4293      	cmp	r3, r2
 80166d0:	d022      	beq.n	8016718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	4a24      	ldr	r2, [pc, #144]	; (8016768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80166d8:	4293      	cmp	r3, r2
 80166da:	d01d      	beq.n	8016718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	4a22      	ldr	r2, [pc, #136]	; (801676c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d018      	beq.n	8016718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	4a21      	ldr	r2, [pc, #132]	; (8016770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80166ec:	4293      	cmp	r3, r2
 80166ee:	d013      	beq.n	8016718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	4a1f      	ldr	r2, [pc, #124]	; (8016774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d00e      	beq.n	8016718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	4a1e      	ldr	r2, [pc, #120]	; (8016778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8016700:	4293      	cmp	r3, r2
 8016702:	d009      	beq.n	8016718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	4a1c      	ldr	r2, [pc, #112]	; (801677c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801670a:	4293      	cmp	r3, r2
 801670c:	d004      	beq.n	8016718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	4a1b      	ldr	r2, [pc, #108]	; (8016780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8016714:	4293      	cmp	r3, r2
 8016716:	d101      	bne.n	801671c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8016718:	2301      	movs	r3, #1
 801671a:	e000      	b.n	801671e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801671c:	2300      	movs	r3, #0
 801671e:	2b00      	cmp	r3, #0
 8016720:	d00a      	beq.n	8016738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8016722:	68fa      	ldr	r2, [r7, #12]
 8016724:	4b17      	ldr	r3, [pc, #92]	; (8016784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8016726:	4413      	add	r3, r2
 8016728:	009b      	lsls	r3, r3, #2
 801672a:	461a      	mov	r2, r3
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	4a15      	ldr	r2, [pc, #84]	; (8016788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8016734:	671a      	str	r2, [r3, #112]	; 0x70
 8016736:	e009      	b.n	801674c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8016738:	68fa      	ldr	r2, [r7, #12]
 801673a:	4b14      	ldr	r3, [pc, #80]	; (801678c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801673c:	4413      	add	r3, r2
 801673e:	009b      	lsls	r3, r3, #2
 8016740:	461a      	mov	r2, r3
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	4a11      	ldr	r2, [pc, #68]	; (8016790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801674a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	3b01      	subs	r3, #1
 8016750:	2201      	movs	r2, #1
 8016752:	409a      	lsls	r2, r3
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8016758:	bf00      	nop
 801675a:	3714      	adds	r7, #20
 801675c:	46bd      	mov	sp, r7
 801675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016762:	4770      	bx	lr
 8016764:	58025408 	.word	0x58025408
 8016768:	5802541c 	.word	0x5802541c
 801676c:	58025430 	.word	0x58025430
 8016770:	58025444 	.word	0x58025444
 8016774:	58025458 	.word	0x58025458
 8016778:	5802546c 	.word	0x5802546c
 801677c:	58025480 	.word	0x58025480
 8016780:	58025494 	.word	0x58025494
 8016784:	1600963f 	.word	0x1600963f
 8016788:	58025940 	.word	0x58025940
 801678c:	1000823f 	.word	0x1000823f
 8016790:	40020940 	.word	0x40020940

08016794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016794:	b480      	push	{r7}
 8016796:	b089      	sub	sp, #36	; 0x24
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
 801679c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801679e:	2300      	movs	r3, #0
 80167a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80167a2:	4b89      	ldr	r3, [pc, #548]	; (80169c8 <HAL_GPIO_Init+0x234>)
 80167a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80167a6:	e194      	b.n	8016ad2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	681a      	ldr	r2, [r3, #0]
 80167ac:	2101      	movs	r1, #1
 80167ae:	69fb      	ldr	r3, [r7, #28]
 80167b0:	fa01 f303 	lsl.w	r3, r1, r3
 80167b4:	4013      	ands	r3, r2
 80167b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80167b8:	693b      	ldr	r3, [r7, #16]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	f000 8186 	beq.w	8016acc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	2b01      	cmp	r3, #1
 80167c6:	d00b      	beq.n	80167e0 <HAL_GPIO_Init+0x4c>
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	2b02      	cmp	r3, #2
 80167ce:	d007      	beq.n	80167e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80167d4:	2b11      	cmp	r3, #17
 80167d6:	d003      	beq.n	80167e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	2b12      	cmp	r3, #18
 80167de:	d130      	bne.n	8016842 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	689b      	ldr	r3, [r3, #8]
 80167e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80167e6:	69fb      	ldr	r3, [r7, #28]
 80167e8:	005b      	lsls	r3, r3, #1
 80167ea:	2203      	movs	r2, #3
 80167ec:	fa02 f303 	lsl.w	r3, r2, r3
 80167f0:	43db      	mvns	r3, r3
 80167f2:	69ba      	ldr	r2, [r7, #24]
 80167f4:	4013      	ands	r3, r2
 80167f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	68da      	ldr	r2, [r3, #12]
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	005b      	lsls	r3, r3, #1
 8016800:	fa02 f303 	lsl.w	r3, r2, r3
 8016804:	69ba      	ldr	r2, [r7, #24]
 8016806:	4313      	orrs	r3, r2
 8016808:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	69ba      	ldr	r2, [r7, #24]
 801680e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	685b      	ldr	r3, [r3, #4]
 8016814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8016816:	2201      	movs	r2, #1
 8016818:	69fb      	ldr	r3, [r7, #28]
 801681a:	fa02 f303 	lsl.w	r3, r2, r3
 801681e:	43db      	mvns	r3, r3
 8016820:	69ba      	ldr	r2, [r7, #24]
 8016822:	4013      	ands	r3, r2
 8016824:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	091b      	lsrs	r3, r3, #4
 801682c:	f003 0201 	and.w	r2, r3, #1
 8016830:	69fb      	ldr	r3, [r7, #28]
 8016832:	fa02 f303 	lsl.w	r3, r2, r3
 8016836:	69ba      	ldr	r2, [r7, #24]
 8016838:	4313      	orrs	r3, r2
 801683a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	69ba      	ldr	r2, [r7, #24]
 8016840:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	68db      	ldr	r3, [r3, #12]
 8016846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8016848:	69fb      	ldr	r3, [r7, #28]
 801684a:	005b      	lsls	r3, r3, #1
 801684c:	2203      	movs	r2, #3
 801684e:	fa02 f303 	lsl.w	r3, r2, r3
 8016852:	43db      	mvns	r3, r3
 8016854:	69ba      	ldr	r2, [r7, #24]
 8016856:	4013      	ands	r3, r2
 8016858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	689a      	ldr	r2, [r3, #8]
 801685e:	69fb      	ldr	r3, [r7, #28]
 8016860:	005b      	lsls	r3, r3, #1
 8016862:	fa02 f303 	lsl.w	r3, r2, r3
 8016866:	69ba      	ldr	r2, [r7, #24]
 8016868:	4313      	orrs	r3, r2
 801686a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	69ba      	ldr	r2, [r7, #24]
 8016870:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	685b      	ldr	r3, [r3, #4]
 8016876:	2b02      	cmp	r3, #2
 8016878:	d003      	beq.n	8016882 <HAL_GPIO_Init+0xee>
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	685b      	ldr	r3, [r3, #4]
 801687e:	2b12      	cmp	r3, #18
 8016880:	d123      	bne.n	80168ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016882:	69fb      	ldr	r3, [r7, #28]
 8016884:	08da      	lsrs	r2, r3, #3
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	3208      	adds	r2, #8
 801688a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801688e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	f003 0307 	and.w	r3, r3, #7
 8016896:	009b      	lsls	r3, r3, #2
 8016898:	220f      	movs	r2, #15
 801689a:	fa02 f303 	lsl.w	r3, r2, r3
 801689e:	43db      	mvns	r3, r3
 80168a0:	69ba      	ldr	r2, [r7, #24]
 80168a2:	4013      	ands	r3, r2
 80168a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	691a      	ldr	r2, [r3, #16]
 80168aa:	69fb      	ldr	r3, [r7, #28]
 80168ac:	f003 0307 	and.w	r3, r3, #7
 80168b0:	009b      	lsls	r3, r3, #2
 80168b2:	fa02 f303 	lsl.w	r3, r2, r3
 80168b6:	69ba      	ldr	r2, [r7, #24]
 80168b8:	4313      	orrs	r3, r2
 80168ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80168bc:	69fb      	ldr	r3, [r7, #28]
 80168be:	08da      	lsrs	r2, r3, #3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	3208      	adds	r2, #8
 80168c4:	69b9      	ldr	r1, [r7, #24]
 80168c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80168d0:	69fb      	ldr	r3, [r7, #28]
 80168d2:	005b      	lsls	r3, r3, #1
 80168d4:	2203      	movs	r2, #3
 80168d6:	fa02 f303 	lsl.w	r3, r2, r3
 80168da:	43db      	mvns	r3, r3
 80168dc:	69ba      	ldr	r2, [r7, #24]
 80168de:	4013      	ands	r3, r2
 80168e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	685b      	ldr	r3, [r3, #4]
 80168e6:	f003 0203 	and.w	r2, r3, #3
 80168ea:	69fb      	ldr	r3, [r7, #28]
 80168ec:	005b      	lsls	r3, r3, #1
 80168ee:	fa02 f303 	lsl.w	r3, r2, r3
 80168f2:	69ba      	ldr	r2, [r7, #24]
 80168f4:	4313      	orrs	r3, r2
 80168f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	69ba      	ldr	r2, [r7, #24]
 80168fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	685b      	ldr	r3, [r3, #4]
 8016902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016906:	2b00      	cmp	r3, #0
 8016908:	f000 80e0 	beq.w	8016acc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801690c:	4b2f      	ldr	r3, [pc, #188]	; (80169cc <HAL_GPIO_Init+0x238>)
 801690e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8016912:	4a2e      	ldr	r2, [pc, #184]	; (80169cc <HAL_GPIO_Init+0x238>)
 8016914:	f043 0302 	orr.w	r3, r3, #2
 8016918:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801691c:	4b2b      	ldr	r3, [pc, #172]	; (80169cc <HAL_GPIO_Init+0x238>)
 801691e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8016922:	f003 0302 	and.w	r3, r3, #2
 8016926:	60fb      	str	r3, [r7, #12]
 8016928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801692a:	4a29      	ldr	r2, [pc, #164]	; (80169d0 <HAL_GPIO_Init+0x23c>)
 801692c:	69fb      	ldr	r3, [r7, #28]
 801692e:	089b      	lsrs	r3, r3, #2
 8016930:	3302      	adds	r3, #2
 8016932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8016938:	69fb      	ldr	r3, [r7, #28]
 801693a:	f003 0303 	and.w	r3, r3, #3
 801693e:	009b      	lsls	r3, r3, #2
 8016940:	220f      	movs	r2, #15
 8016942:	fa02 f303 	lsl.w	r3, r2, r3
 8016946:	43db      	mvns	r3, r3
 8016948:	69ba      	ldr	r2, [r7, #24]
 801694a:	4013      	ands	r3, r2
 801694c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	4a20      	ldr	r2, [pc, #128]	; (80169d4 <HAL_GPIO_Init+0x240>)
 8016952:	4293      	cmp	r3, r2
 8016954:	d052      	beq.n	80169fc <HAL_GPIO_Init+0x268>
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	4a1f      	ldr	r2, [pc, #124]	; (80169d8 <HAL_GPIO_Init+0x244>)
 801695a:	4293      	cmp	r3, r2
 801695c:	d031      	beq.n	80169c2 <HAL_GPIO_Init+0x22e>
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	4a1e      	ldr	r2, [pc, #120]	; (80169dc <HAL_GPIO_Init+0x248>)
 8016962:	4293      	cmp	r3, r2
 8016964:	d02b      	beq.n	80169be <HAL_GPIO_Init+0x22a>
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	4a1d      	ldr	r2, [pc, #116]	; (80169e0 <HAL_GPIO_Init+0x24c>)
 801696a:	4293      	cmp	r3, r2
 801696c:	d025      	beq.n	80169ba <HAL_GPIO_Init+0x226>
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	4a1c      	ldr	r2, [pc, #112]	; (80169e4 <HAL_GPIO_Init+0x250>)
 8016972:	4293      	cmp	r3, r2
 8016974:	d01f      	beq.n	80169b6 <HAL_GPIO_Init+0x222>
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	4a1b      	ldr	r2, [pc, #108]	; (80169e8 <HAL_GPIO_Init+0x254>)
 801697a:	4293      	cmp	r3, r2
 801697c:	d019      	beq.n	80169b2 <HAL_GPIO_Init+0x21e>
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	4a1a      	ldr	r2, [pc, #104]	; (80169ec <HAL_GPIO_Init+0x258>)
 8016982:	4293      	cmp	r3, r2
 8016984:	d013      	beq.n	80169ae <HAL_GPIO_Init+0x21a>
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	4a19      	ldr	r2, [pc, #100]	; (80169f0 <HAL_GPIO_Init+0x25c>)
 801698a:	4293      	cmp	r3, r2
 801698c:	d00d      	beq.n	80169aa <HAL_GPIO_Init+0x216>
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	4a18      	ldr	r2, [pc, #96]	; (80169f4 <HAL_GPIO_Init+0x260>)
 8016992:	4293      	cmp	r3, r2
 8016994:	d007      	beq.n	80169a6 <HAL_GPIO_Init+0x212>
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	4a17      	ldr	r2, [pc, #92]	; (80169f8 <HAL_GPIO_Init+0x264>)
 801699a:	4293      	cmp	r3, r2
 801699c:	d101      	bne.n	80169a2 <HAL_GPIO_Init+0x20e>
 801699e:	2309      	movs	r3, #9
 80169a0:	e02d      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169a2:	230a      	movs	r3, #10
 80169a4:	e02b      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169a6:	2308      	movs	r3, #8
 80169a8:	e029      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169aa:	2307      	movs	r3, #7
 80169ac:	e027      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169ae:	2306      	movs	r3, #6
 80169b0:	e025      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169b2:	2305      	movs	r3, #5
 80169b4:	e023      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169b6:	2304      	movs	r3, #4
 80169b8:	e021      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169ba:	2303      	movs	r3, #3
 80169bc:	e01f      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169be:	2302      	movs	r3, #2
 80169c0:	e01d      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169c2:	2301      	movs	r3, #1
 80169c4:	e01b      	b.n	80169fe <HAL_GPIO_Init+0x26a>
 80169c6:	bf00      	nop
 80169c8:	58000080 	.word	0x58000080
 80169cc:	58024400 	.word	0x58024400
 80169d0:	58000400 	.word	0x58000400
 80169d4:	58020000 	.word	0x58020000
 80169d8:	58020400 	.word	0x58020400
 80169dc:	58020800 	.word	0x58020800
 80169e0:	58020c00 	.word	0x58020c00
 80169e4:	58021000 	.word	0x58021000
 80169e8:	58021400 	.word	0x58021400
 80169ec:	58021800 	.word	0x58021800
 80169f0:	58021c00 	.word	0x58021c00
 80169f4:	58022000 	.word	0x58022000
 80169f8:	58022400 	.word	0x58022400
 80169fc:	2300      	movs	r3, #0
 80169fe:	69fa      	ldr	r2, [r7, #28]
 8016a00:	f002 0203 	and.w	r2, r2, #3
 8016a04:	0092      	lsls	r2, r2, #2
 8016a06:	4093      	lsls	r3, r2
 8016a08:	69ba      	ldr	r2, [r7, #24]
 8016a0a:	4313      	orrs	r3, r2
 8016a0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016a0e:	4938      	ldr	r1, [pc, #224]	; (8016af0 <HAL_GPIO_Init+0x35c>)
 8016a10:	69fb      	ldr	r3, [r7, #28]
 8016a12:	089b      	lsrs	r3, r3, #2
 8016a14:	3302      	adds	r3, #2
 8016a16:	69ba      	ldr	r2, [r7, #24]
 8016a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8016a1c:	697b      	ldr	r3, [r7, #20]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8016a22:	693b      	ldr	r3, [r7, #16]
 8016a24:	43db      	mvns	r3, r3
 8016a26:	69ba      	ldr	r2, [r7, #24]
 8016a28:	4013      	ands	r3, r2
 8016a2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	685b      	ldr	r3, [r3, #4]
 8016a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d003      	beq.n	8016a40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8016a38:	69ba      	ldr	r2, [r7, #24]
 8016a3a:	693b      	ldr	r3, [r7, #16]
 8016a3c:	4313      	orrs	r3, r2
 8016a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8016a40:	697b      	ldr	r3, [r7, #20]
 8016a42:	69ba      	ldr	r2, [r7, #24]
 8016a44:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8016a46:	697b      	ldr	r3, [r7, #20]
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	43db      	mvns	r3, r3
 8016a50:	69ba      	ldr	r2, [r7, #24]
 8016a52:	4013      	ands	r3, r2
 8016a54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	685b      	ldr	r3, [r3, #4]
 8016a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d003      	beq.n	8016a6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8016a62:	69ba      	ldr	r2, [r7, #24]
 8016a64:	693b      	ldr	r3, [r7, #16]
 8016a66:	4313      	orrs	r3, r2
 8016a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	69ba      	ldr	r2, [r7, #24]
 8016a6e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8016a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8016a78:	693b      	ldr	r3, [r7, #16]
 8016a7a:	43db      	mvns	r3, r3
 8016a7c:	69ba      	ldr	r2, [r7, #24]
 8016a7e:	4013      	ands	r3, r2
 8016a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	685b      	ldr	r3, [r3, #4]
 8016a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d003      	beq.n	8016a96 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8016a8e:	69ba      	ldr	r2, [r7, #24]
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	4313      	orrs	r3, r2
 8016a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8016a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a9a:	69bb      	ldr	r3, [r7, #24]
 8016a9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8016a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016aa2:	685b      	ldr	r3, [r3, #4]
 8016aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8016aa6:	693b      	ldr	r3, [r7, #16]
 8016aa8:	43db      	mvns	r3, r3
 8016aaa:	69ba      	ldr	r2, [r7, #24]
 8016aac:	4013      	ands	r3, r2
 8016aae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	685b      	ldr	r3, [r3, #4]
 8016ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d003      	beq.n	8016ac4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8016abc:	69ba      	ldr	r2, [r7, #24]
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	4313      	orrs	r3, r2
 8016ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8016ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016ac8:	69bb      	ldr	r3, [r7, #24]
 8016aca:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8016acc:	69fb      	ldr	r3, [r7, #28]
 8016ace:	3301      	adds	r3, #1
 8016ad0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8016ad2:	683b      	ldr	r3, [r7, #0]
 8016ad4:	681a      	ldr	r2, [r3, #0]
 8016ad6:	69fb      	ldr	r3, [r7, #28]
 8016ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	f47f ae63 	bne.w	80167a8 <HAL_GPIO_Init+0x14>
  }
}
 8016ae2:	bf00      	nop
 8016ae4:	3724      	adds	r7, #36	; 0x24
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr
 8016aee:	bf00      	nop
 8016af0:	58000400 	.word	0x58000400

08016af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8016af4:	b480      	push	{r7}
 8016af6:	b085      	sub	sp, #20
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
 8016afc:	460b      	mov	r3, r1
 8016afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	691a      	ldr	r2, [r3, #16]
 8016b04:	887b      	ldrh	r3, [r7, #2]
 8016b06:	4013      	ands	r3, r2
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d002      	beq.n	8016b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	73fb      	strb	r3, [r7, #15]
 8016b10:	e001      	b.n	8016b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016b12:	2300      	movs	r3, #0
 8016b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8016b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	3714      	adds	r7, #20
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b22:	4770      	bx	lr

08016b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016b24:	b480      	push	{r7}
 8016b26:	b083      	sub	sp, #12
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
 8016b2c:	460b      	mov	r3, r1
 8016b2e:	807b      	strh	r3, [r7, #2]
 8016b30:	4613      	mov	r3, r2
 8016b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8016b34:	787b      	ldrb	r3, [r7, #1]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d003      	beq.n	8016b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016b3a:	887a      	ldrh	r2, [r7, #2]
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8016b40:	e003      	b.n	8016b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8016b42:	887b      	ldrh	r3, [r7, #2]
 8016b44:	041a      	lsls	r2, r3, #16
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	619a      	str	r2, [r3, #24]
}
 8016b4a:	bf00      	nop
 8016b4c:	370c      	adds	r7, #12
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b54:	4770      	bx	lr
	...

08016b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b082      	sub	sp, #8
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d101      	bne.n	8016b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016b66:	2301      	movs	r3, #1
 8016b68:	e07f      	b.n	8016c6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016b70:	b2db      	uxtb	r3, r3
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d106      	bne.n	8016b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	2200      	movs	r2, #0
 8016b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f7fa fe26 	bl	80117d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2224      	movs	r2, #36	; 0x24
 8016b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	681a      	ldr	r2, [r3, #0]
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	f022 0201 	bic.w	r2, r2, #1
 8016b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	685a      	ldr	r2, [r3, #4]
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8016ba8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	689a      	ldr	r2, [r3, #8]
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016bb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	68db      	ldr	r3, [r3, #12]
 8016bbe:	2b01      	cmp	r3, #1
 8016bc0:	d107      	bne.n	8016bd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	689a      	ldr	r2, [r3, #8]
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016bce:	609a      	str	r2, [r3, #8]
 8016bd0:	e006      	b.n	8016be0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	689a      	ldr	r2, [r3, #8]
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8016bde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	68db      	ldr	r3, [r3, #12]
 8016be4:	2b02      	cmp	r3, #2
 8016be6:	d104      	bne.n	8016bf2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016bf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	6859      	ldr	r1, [r3, #4]
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	681a      	ldr	r2, [r3, #0]
 8016bfc:	4b1d      	ldr	r3, [pc, #116]	; (8016c74 <HAL_I2C_Init+0x11c>)
 8016bfe:	430b      	orrs	r3, r1
 8016c00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	68da      	ldr	r2, [r3, #12]
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016c10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	691a      	ldr	r2, [r3, #16]
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	695b      	ldr	r3, [r3, #20]
 8016c1a:	ea42 0103 	orr.w	r1, r2, r3
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	699b      	ldr	r3, [r3, #24]
 8016c22:	021a      	lsls	r2, r3, #8
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	430a      	orrs	r2, r1
 8016c2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	69d9      	ldr	r1, [r3, #28]
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	6a1a      	ldr	r2, [r3, #32]
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	430a      	orrs	r2, r1
 8016c3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	f042 0201 	orr.w	r2, r2, #1
 8016c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	2200      	movs	r2, #0
 8016c50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	2220      	movs	r2, #32
 8016c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2200      	movs	r2, #0
 8016c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8016c68:	2300      	movs	r3, #0
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3708      	adds	r7, #8
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	02008000 	.word	0x02008000

08016c78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b088      	sub	sp, #32
 8016c7c:	af02      	add	r7, sp, #8
 8016c7e:	60f8      	str	r0, [r7, #12]
 8016c80:	4608      	mov	r0, r1
 8016c82:	4611      	mov	r1, r2
 8016c84:	461a      	mov	r2, r3
 8016c86:	4603      	mov	r3, r0
 8016c88:	817b      	strh	r3, [r7, #10]
 8016c8a:	460b      	mov	r3, r1
 8016c8c:	813b      	strh	r3, [r7, #8]
 8016c8e:	4613      	mov	r3, r2
 8016c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016c98:	b2db      	uxtb	r3, r3
 8016c9a:	2b20      	cmp	r3, #32
 8016c9c:	f040 80f9 	bne.w	8016e92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8016ca0:	6a3b      	ldr	r3, [r7, #32]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d002      	beq.n	8016cac <HAL_I2C_Mem_Write+0x34>
 8016ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d105      	bne.n	8016cb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016cb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	e0ed      	b.n	8016e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016cbe:	2b01      	cmp	r3, #1
 8016cc0:	d101      	bne.n	8016cc6 <HAL_I2C_Mem_Write+0x4e>
 8016cc2:	2302      	movs	r3, #2
 8016cc4:	e0e6      	b.n	8016e94 <HAL_I2C_Mem_Write+0x21c>
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	2201      	movs	r2, #1
 8016cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016cce:	f7fc f9c3 	bl	8013058 <HAL_GetTick>
 8016cd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016cd4:	697b      	ldr	r3, [r7, #20]
 8016cd6:	9300      	str	r3, [sp, #0]
 8016cd8:	2319      	movs	r3, #25
 8016cda:	2201      	movs	r2, #1
 8016cdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016ce0:	68f8      	ldr	r0, [r7, #12]
 8016ce2:	f002 f8f9 	bl	8018ed8 <I2C_WaitOnFlagUntilTimeout>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d001      	beq.n	8016cf0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8016cec:	2301      	movs	r3, #1
 8016cee:	e0d1      	b.n	8016e94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	2221      	movs	r2, #33	; 0x21
 8016cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	2240      	movs	r2, #64	; 0x40
 8016cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	2200      	movs	r2, #0
 8016d04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	6a3a      	ldr	r2, [r7, #32]
 8016d0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	2200      	movs	r2, #0
 8016d16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016d18:	88f8      	ldrh	r0, [r7, #6]
 8016d1a:	893a      	ldrh	r2, [r7, #8]
 8016d1c:	8979      	ldrh	r1, [r7, #10]
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	9301      	str	r3, [sp, #4]
 8016d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d24:	9300      	str	r3, [sp, #0]
 8016d26:	4603      	mov	r3, r0
 8016d28:	68f8      	ldr	r0, [r7, #12]
 8016d2a:	f001 f939 	bl	8017fa0 <I2C_RequestMemoryWrite>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d005      	beq.n	8016d40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	2200      	movs	r2, #0
 8016d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8016d3c:	2301      	movs	r3, #1
 8016d3e:	e0a9      	b.n	8016e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	2bff      	cmp	r3, #255	; 0xff
 8016d48:	d90e      	bls.n	8016d68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	22ff      	movs	r2, #255	; 0xff
 8016d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d54:	b2da      	uxtb	r2, r3
 8016d56:	8979      	ldrh	r1, [r7, #10]
 8016d58:	2300      	movs	r3, #0
 8016d5a:	9300      	str	r3, [sp, #0]
 8016d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016d60:	68f8      	ldr	r0, [r7, #12]
 8016d62:	f002 f9db 	bl	801911c <I2C_TransferConfig>
 8016d66:	e00f      	b.n	8016d88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d6c:	b29a      	uxth	r2, r3
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d76:	b2da      	uxtb	r2, r3
 8016d78:	8979      	ldrh	r1, [r7, #10]
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	9300      	str	r3, [sp, #0]
 8016d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016d82:	68f8      	ldr	r0, [r7, #12]
 8016d84:	f002 f9ca 	bl	801911c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016d88:	697a      	ldr	r2, [r7, #20]
 8016d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d8c:	68f8      	ldr	r0, [r7, #12]
 8016d8e:	f002 f8e3 	bl	8018f58 <I2C_WaitOnTXISFlagUntilTimeout>
 8016d92:	4603      	mov	r3, r0
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d001      	beq.n	8016d9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8016d98:	2301      	movs	r3, #1
 8016d9a:	e07b      	b.n	8016e94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016da0:	781a      	ldrb	r2, [r3, #0]
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dac:	1c5a      	adds	r2, r3, #1
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	3b01      	subs	r3, #1
 8016dba:	b29a      	uxth	r2, r3
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dc4:	3b01      	subs	r3, #1
 8016dc6:	b29a      	uxth	r2, r3
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016dd0:	b29b      	uxth	r3, r3
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d034      	beq.n	8016e40 <HAL_I2C_Mem_Write+0x1c8>
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d130      	bne.n	8016e40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016dde:	697b      	ldr	r3, [r7, #20]
 8016de0:	9300      	str	r3, [sp, #0]
 8016de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de4:	2200      	movs	r2, #0
 8016de6:	2180      	movs	r1, #128	; 0x80
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f002 f875 	bl	8018ed8 <I2C_WaitOnFlagUntilTimeout>
 8016dee:	4603      	mov	r3, r0
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d001      	beq.n	8016df8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8016df4:	2301      	movs	r3, #1
 8016df6:	e04d      	b.n	8016e94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016dfc:	b29b      	uxth	r3, r3
 8016dfe:	2bff      	cmp	r3, #255	; 0xff
 8016e00:	d90e      	bls.n	8016e20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	22ff      	movs	r2, #255	; 0xff
 8016e06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e0c:	b2da      	uxtb	r2, r3
 8016e0e:	8979      	ldrh	r1, [r7, #10]
 8016e10:	2300      	movs	r3, #0
 8016e12:	9300      	str	r3, [sp, #0]
 8016e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016e18:	68f8      	ldr	r0, [r7, #12]
 8016e1a:	f002 f97f 	bl	801911c <I2C_TransferConfig>
 8016e1e:	e00f      	b.n	8016e40 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016e24:	b29a      	uxth	r2, r3
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e2e:	b2da      	uxtb	r2, r3
 8016e30:	8979      	ldrh	r1, [r7, #10]
 8016e32:	2300      	movs	r3, #0
 8016e34:	9300      	str	r3, [sp, #0]
 8016e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016e3a:	68f8      	ldr	r0, [r7, #12]
 8016e3c:	f002 f96e 	bl	801911c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016e44:	b29b      	uxth	r3, r3
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d19e      	bne.n	8016d88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016e4a:	697a      	ldr	r2, [r7, #20]
 8016e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016e4e:	68f8      	ldr	r0, [r7, #12]
 8016e50:	f002 f8c2 	bl	8018fd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016e54:	4603      	mov	r3, r0
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d001      	beq.n	8016e5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8016e5a:	2301      	movs	r3, #1
 8016e5c:	e01a      	b.n	8016e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	2220      	movs	r2, #32
 8016e64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	6859      	ldr	r1, [r3, #4]
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	681a      	ldr	r2, [r3, #0]
 8016e70:	4b0a      	ldr	r3, [pc, #40]	; (8016e9c <HAL_I2C_Mem_Write+0x224>)
 8016e72:	400b      	ands	r3, r1
 8016e74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	2220      	movs	r2, #32
 8016e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	2200      	movs	r2, #0
 8016e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	2200      	movs	r2, #0
 8016e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	e000      	b.n	8016e94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8016e92:	2302      	movs	r3, #2
  }
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	3718      	adds	r7, #24
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}
 8016e9c:	fe00e800 	.word	0xfe00e800

08016ea0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b088      	sub	sp, #32
 8016ea4:	af02      	add	r7, sp, #8
 8016ea6:	60f8      	str	r0, [r7, #12]
 8016ea8:	4608      	mov	r0, r1
 8016eaa:	4611      	mov	r1, r2
 8016eac:	461a      	mov	r2, r3
 8016eae:	4603      	mov	r3, r0
 8016eb0:	817b      	strh	r3, [r7, #10]
 8016eb2:	460b      	mov	r3, r1
 8016eb4:	813b      	strh	r3, [r7, #8]
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016ec0:	b2db      	uxtb	r3, r3
 8016ec2:	2b20      	cmp	r3, #32
 8016ec4:	f040 80fd 	bne.w	80170c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8016ec8:	6a3b      	ldr	r3, [r7, #32]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d002      	beq.n	8016ed4 <HAL_I2C_Mem_Read+0x34>
 8016ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d105      	bne.n	8016ee0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016eda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8016edc:	2301      	movs	r3, #1
 8016ede:	e0f1      	b.n	80170c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016ee6:	2b01      	cmp	r3, #1
 8016ee8:	d101      	bne.n	8016eee <HAL_I2C_Mem_Read+0x4e>
 8016eea:	2302      	movs	r3, #2
 8016eec:	e0ea      	b.n	80170c4 <HAL_I2C_Mem_Read+0x224>
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	2201      	movs	r2, #1
 8016ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016ef6:	f7fc f8af 	bl	8013058 <HAL_GetTick>
 8016efa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016efc:	697b      	ldr	r3, [r7, #20]
 8016efe:	9300      	str	r3, [sp, #0]
 8016f00:	2319      	movs	r3, #25
 8016f02:	2201      	movs	r2, #1
 8016f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016f08:	68f8      	ldr	r0, [r7, #12]
 8016f0a:	f001 ffe5 	bl	8018ed8 <I2C_WaitOnFlagUntilTimeout>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d001      	beq.n	8016f18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8016f14:	2301      	movs	r3, #1
 8016f16:	e0d5      	b.n	80170c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	2222      	movs	r2, #34	; 0x22
 8016f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	2240      	movs	r2, #64	; 0x40
 8016f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	6a3a      	ldr	r2, [r7, #32]
 8016f32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016f40:	88f8      	ldrh	r0, [r7, #6]
 8016f42:	893a      	ldrh	r2, [r7, #8]
 8016f44:	8979      	ldrh	r1, [r7, #10]
 8016f46:	697b      	ldr	r3, [r7, #20]
 8016f48:	9301      	str	r3, [sp, #4]
 8016f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f4c:	9300      	str	r3, [sp, #0]
 8016f4e:	4603      	mov	r3, r0
 8016f50:	68f8      	ldr	r0, [r7, #12]
 8016f52:	f001 f879 	bl	8018048 <I2C_RequestMemoryRead>
 8016f56:	4603      	mov	r3, r0
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d005      	beq.n	8016f68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	2200      	movs	r2, #0
 8016f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8016f64:	2301      	movs	r3, #1
 8016f66:	e0ad      	b.n	80170c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f6c:	b29b      	uxth	r3, r3
 8016f6e:	2bff      	cmp	r3, #255	; 0xff
 8016f70:	d90e      	bls.n	8016f90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	22ff      	movs	r2, #255	; 0xff
 8016f76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f7c:	b2da      	uxtb	r2, r3
 8016f7e:	8979      	ldrh	r1, [r7, #10]
 8016f80:	4b52      	ldr	r3, [pc, #328]	; (80170cc <HAL_I2C_Mem_Read+0x22c>)
 8016f82:	9300      	str	r3, [sp, #0]
 8016f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016f88:	68f8      	ldr	r0, [r7, #12]
 8016f8a:	f002 f8c7 	bl	801911c <I2C_TransferConfig>
 8016f8e:	e00f      	b.n	8016fb0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f94:	b29a      	uxth	r2, r3
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f9e:	b2da      	uxtb	r2, r3
 8016fa0:	8979      	ldrh	r1, [r7, #10]
 8016fa2:	4b4a      	ldr	r3, [pc, #296]	; (80170cc <HAL_I2C_Mem_Read+0x22c>)
 8016fa4:	9300      	str	r3, [sp, #0]
 8016fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016faa:	68f8      	ldr	r0, [r7, #12]
 8016fac:	f002 f8b6 	bl	801911c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	9300      	str	r3, [sp, #0]
 8016fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	2104      	movs	r1, #4
 8016fba:	68f8      	ldr	r0, [r7, #12]
 8016fbc:	f001 ff8c 	bl	8018ed8 <I2C_WaitOnFlagUntilTimeout>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d001      	beq.n	8016fca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	e07c      	b.n	80170c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fd4:	b2d2      	uxtb	r2, r2
 8016fd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fdc:	1c5a      	adds	r2, r3, #1
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fe6:	3b01      	subs	r3, #1
 8016fe8:	b29a      	uxth	r2, r3
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	3b01      	subs	r3, #1
 8016ff6:	b29a      	uxth	r2, r3
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017000:	b29b      	uxth	r3, r3
 8017002:	2b00      	cmp	r3, #0
 8017004:	d034      	beq.n	8017070 <HAL_I2C_Mem_Read+0x1d0>
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801700a:	2b00      	cmp	r3, #0
 801700c:	d130      	bne.n	8017070 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801700e:	697b      	ldr	r3, [r7, #20]
 8017010:	9300      	str	r3, [sp, #0]
 8017012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017014:	2200      	movs	r2, #0
 8017016:	2180      	movs	r1, #128	; 0x80
 8017018:	68f8      	ldr	r0, [r7, #12]
 801701a:	f001 ff5d 	bl	8018ed8 <I2C_WaitOnFlagUntilTimeout>
 801701e:	4603      	mov	r3, r0
 8017020:	2b00      	cmp	r3, #0
 8017022:	d001      	beq.n	8017028 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8017024:	2301      	movs	r3, #1
 8017026:	e04d      	b.n	80170c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801702c:	b29b      	uxth	r3, r3
 801702e:	2bff      	cmp	r3, #255	; 0xff
 8017030:	d90e      	bls.n	8017050 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	22ff      	movs	r2, #255	; 0xff
 8017036:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801703c:	b2da      	uxtb	r2, r3
 801703e:	8979      	ldrh	r1, [r7, #10]
 8017040:	2300      	movs	r3, #0
 8017042:	9300      	str	r3, [sp, #0]
 8017044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017048:	68f8      	ldr	r0, [r7, #12]
 801704a:	f002 f867 	bl	801911c <I2C_TransferConfig>
 801704e:	e00f      	b.n	8017070 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017054:	b29a      	uxth	r2, r3
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801705e:	b2da      	uxtb	r2, r3
 8017060:	8979      	ldrh	r1, [r7, #10]
 8017062:	2300      	movs	r3, #0
 8017064:	9300      	str	r3, [sp, #0]
 8017066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801706a:	68f8      	ldr	r0, [r7, #12]
 801706c:	f002 f856 	bl	801911c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017074:	b29b      	uxth	r3, r3
 8017076:	2b00      	cmp	r3, #0
 8017078:	d19a      	bne.n	8016fb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801707a:	697a      	ldr	r2, [r7, #20]
 801707c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801707e:	68f8      	ldr	r0, [r7, #12]
 8017080:	f001 ffaa 	bl	8018fd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8017084:	4603      	mov	r3, r0
 8017086:	2b00      	cmp	r3, #0
 8017088:	d001      	beq.n	801708e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801708a:	2301      	movs	r3, #1
 801708c:	e01a      	b.n	80170c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	2220      	movs	r2, #32
 8017094:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	6859      	ldr	r1, [r3, #4]
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	681a      	ldr	r2, [r3, #0]
 80170a0:	4b0b      	ldr	r3, [pc, #44]	; (80170d0 <HAL_I2C_Mem_Read+0x230>)
 80170a2:	400b      	ands	r3, r1
 80170a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	2220      	movs	r2, #32
 80170aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	2200      	movs	r2, #0
 80170b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	2200      	movs	r2, #0
 80170ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80170be:	2300      	movs	r3, #0
 80170c0:	e000      	b.n	80170c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80170c2:	2302      	movs	r3, #2
  }
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	3718      	adds	r7, #24
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}
 80170cc:	80002400 	.word	0x80002400
 80170d0:	fe00e800 	.word	0xfe00e800

080170d4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b088      	sub	sp, #32
 80170d8:	af02      	add	r7, sp, #8
 80170da:	60f8      	str	r0, [r7, #12]
 80170dc:	4608      	mov	r0, r1
 80170de:	4611      	mov	r1, r2
 80170e0:	461a      	mov	r2, r3
 80170e2:	4603      	mov	r3, r0
 80170e4:	817b      	strh	r3, [r7, #10]
 80170e6:	460b      	mov	r3, r1
 80170e8:	813b      	strh	r3, [r7, #8]
 80170ea:	4613      	mov	r3, r2
 80170ec:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80170f4:	b2db      	uxtb	r3, r3
 80170f6:	2b20      	cmp	r3, #32
 80170f8:	d176      	bne.n	80171e8 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80170fa:	6a3b      	ldr	r3, [r7, #32]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d002      	beq.n	8017106 <HAL_I2C_Mem_Read_IT+0x32>
 8017100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017102:	2b00      	cmp	r3, #0
 8017104:	d105      	bne.n	8017112 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	f44f 7200 	mov.w	r2, #512	; 0x200
 801710c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801710e:	2301      	movs	r3, #1
 8017110:	e06b      	b.n	80171ea <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	699b      	ldr	r3, [r3, #24]
 8017118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801711c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017120:	d101      	bne.n	8017126 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8017122:	2302      	movs	r3, #2
 8017124:	e061      	b.n	80171ea <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801712c:	2b01      	cmp	r3, #1
 801712e:	d101      	bne.n	8017134 <HAL_I2C_Mem_Read_IT+0x60>
 8017130:	2302      	movs	r3, #2
 8017132:	e05a      	b.n	80171ea <HAL_I2C_Mem_Read_IT+0x116>
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	2201      	movs	r2, #1
 8017138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801713c:	f7fb ff8c 	bl	8013058 <HAL_GetTick>
 8017140:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	2222      	movs	r2, #34	; 0x22
 8017146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	2240      	movs	r2, #64	; 0x40
 801714e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	2200      	movs	r2, #0
 8017156:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	6a3a      	ldr	r2, [r7, #32]
 801715c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	4a23      	ldr	r2, [pc, #140]	; (80171f4 <HAL_I2C_Mem_Read_IT+0x120>)
 8017168:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	4a22      	ldr	r2, [pc, #136]	; (80171f8 <HAL_I2C_Mem_Read_IT+0x124>)
 801716e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017174:	b29b      	uxth	r3, r3
 8017176:	2bff      	cmp	r3, #255	; 0xff
 8017178:	d906      	bls.n	8017188 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	22ff      	movs	r2, #255	; 0xff
 801717e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8017180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017184:	617b      	str	r3, [r7, #20]
 8017186:	e007      	b.n	8017198 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801718c:	b29a      	uxth	r2, r3
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8017192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017196:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8017198:	88f8      	ldrh	r0, [r7, #6]
 801719a:	893a      	ldrh	r2, [r7, #8]
 801719c:	8979      	ldrh	r1, [r7, #10]
 801719e:	693b      	ldr	r3, [r7, #16]
 80171a0:	9301      	str	r3, [sp, #4]
 80171a2:	2319      	movs	r3, #25
 80171a4:	9300      	str	r3, [sp, #0]
 80171a6:	4603      	mov	r3, r0
 80171a8:	68f8      	ldr	r0, [r7, #12]
 80171aa:	f000 ff4d 	bl	8018048 <I2C_RequestMemoryRead>
 80171ae:	4603      	mov	r3, r0
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d005      	beq.n	80171c0 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	2200      	movs	r2, #0
 80171b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80171bc:	2301      	movs	r3, #1
 80171be:	e014      	b.n	80171ea <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171c4:	b2da      	uxtb	r2, r3
 80171c6:	8979      	ldrh	r1, [r7, #10]
 80171c8:	4b0c      	ldr	r3, [pc, #48]	; (80171fc <HAL_I2C_Mem_Read_IT+0x128>)
 80171ca:	9300      	str	r3, [sp, #0]
 80171cc:	697b      	ldr	r3, [r7, #20]
 80171ce:	68f8      	ldr	r0, [r7, #12]
 80171d0:	f001 ffa4 	bl	801911c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	2200      	movs	r2, #0
 80171d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80171dc:	2102      	movs	r1, #2
 80171de:	68f8      	ldr	r0, [r7, #12]
 80171e0:	f001 ffca 	bl	8019178 <I2C_Enable_IRQ>

    return HAL_OK;
 80171e4:	2300      	movs	r3, #0
 80171e6:	e000      	b.n	80171ea <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 80171e8:	2302      	movs	r3, #2
  }
}
 80171ea:	4618      	mov	r0, r3
 80171ec:	3718      	adds	r7, #24
 80171ee:	46bd      	mov	sp, r7
 80171f0:	bd80      	pop	{r7, pc}
 80171f2:	bf00      	nop
 80171f4:	ffff0000 	.word	0xffff0000
 80171f8:	080175a3 	.word	0x080175a3
 80171fc:	80002400 	.word	0x80002400

08017200 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b08a      	sub	sp, #40	; 0x28
 8017204:	af02      	add	r7, sp, #8
 8017206:	60f8      	str	r0, [r7, #12]
 8017208:	4608      	mov	r0, r1
 801720a:	4611      	mov	r1, r2
 801720c:	461a      	mov	r2, r3
 801720e:	4603      	mov	r3, r0
 8017210:	817b      	strh	r3, [r7, #10]
 8017212:	460b      	mov	r3, r1
 8017214:	813b      	strh	r3, [r7, #8]
 8017216:	4613      	mov	r3, r2
 8017218:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017220:	b2db      	uxtb	r3, r3
 8017222:	2b20      	cmp	r3, #32
 8017224:	f040 80d5 	bne.w	80173d2 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8017228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722a:	2b00      	cmp	r3, #0
 801722c:	d002      	beq.n	8017234 <HAL_I2C_Mem_Read_DMA+0x34>
 801722e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017230:	2b00      	cmp	r3, #0
 8017232:	d105      	bne.n	8017240 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	f44f 7200 	mov.w	r2, #512	; 0x200
 801723a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801723c:	2301      	movs	r3, #1
 801723e:	e0c9      	b.n	80173d4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	699b      	ldr	r3, [r3, #24]
 8017246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801724a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801724e:	d101      	bne.n	8017254 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8017250:	2302      	movs	r3, #2
 8017252:	e0bf      	b.n	80173d4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801725a:	2b01      	cmp	r3, #1
 801725c:	d101      	bne.n	8017262 <HAL_I2C_Mem_Read_DMA+0x62>
 801725e:	2302      	movs	r3, #2
 8017260:	e0b8      	b.n	80173d4 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2201      	movs	r2, #1
 8017266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801726a:	f7fb fef5 	bl	8013058 <HAL_GetTick>
 801726e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	2222      	movs	r2, #34	; 0x22
 8017274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	2240      	movs	r2, #64	; 0x40
 801727c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	2200      	movs	r2, #0
 8017284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801728a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8017290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	4a51      	ldr	r2, [pc, #324]	; (80173dc <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8017296:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	4a51      	ldr	r2, [pc, #324]	; (80173e0 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 801729c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80172a2:	b29b      	uxth	r3, r3
 80172a4:	2bff      	cmp	r3, #255	; 0xff
 80172a6:	d906      	bls.n	80172b6 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	22ff      	movs	r2, #255	; 0xff
 80172ac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80172ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80172b2:	61fb      	str	r3, [r7, #28]
 80172b4:	e007      	b.n	80172c6 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80172ba:	b29a      	uxth	r2, r3
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80172c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80172c4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80172c6:	88f8      	ldrh	r0, [r7, #6]
 80172c8:	893a      	ldrh	r2, [r7, #8]
 80172ca:	8979      	ldrh	r1, [r7, #10]
 80172cc:	69bb      	ldr	r3, [r7, #24]
 80172ce:	9301      	str	r3, [sp, #4]
 80172d0:	2319      	movs	r3, #25
 80172d2:	9300      	str	r3, [sp, #0]
 80172d4:	4603      	mov	r3, r0
 80172d6:	68f8      	ldr	r0, [r7, #12]
 80172d8:	f000 feb6 	bl	8018048 <I2C_RequestMemoryRead>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d005      	beq.n	80172ee <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	2200      	movs	r2, #0
 80172e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80172ea:	2301      	movs	r3, #1
 80172ec:	e072      	b.n	80173d4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d020      	beq.n	8017338 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172fa:	4a3a      	ldr	r2, [pc, #232]	; (80173e4 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 80172fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017302:	4a39      	ldr	r2, [pc, #228]	; (80173e8 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8017304:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801730a:	2200      	movs	r2, #0
 801730c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017312:	2200      	movs	r2, #0
 8017314:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	3324      	adds	r3, #36	; 0x24
 8017320:	4619      	mov	r1, r3
 8017322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017328:	f7fd fa5a 	bl	80147e0 <HAL_DMA_Start_IT>
 801732c:	4603      	mov	r3, r0
 801732e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8017330:	7dfb      	ldrb	r3, [r7, #23]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d139      	bne.n	80173aa <HAL_I2C_Mem_Read_DMA+0x1aa>
 8017336:	e013      	b.n	8017360 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	2220      	movs	r2, #32
 801733c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	2200      	movs	r2, #0
 8017344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801734c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	2200      	movs	r2, #0
 8017358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801735c:	2301      	movs	r3, #1
 801735e:	e039      	b.n	80173d4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017364:	b2da      	uxtb	r2, r3
 8017366:	8979      	ldrh	r1, [r7, #10]
 8017368:	4b20      	ldr	r3, [pc, #128]	; (80173ec <HAL_I2C_Mem_Read_DMA+0x1ec>)
 801736a:	9300      	str	r3, [sp, #0]
 801736c:	69fb      	ldr	r3, [r7, #28]
 801736e:	68f8      	ldr	r0, [r7, #12]
 8017370:	f001 fed4 	bl	801911c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017378:	b29a      	uxth	r2, r3
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801737e:	1ad3      	subs	r3, r2, r3
 8017380:	b29a      	uxth	r2, r3
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	2200      	movs	r2, #0
 801738a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801738e:	2110      	movs	r1, #16
 8017390:	68f8      	ldr	r0, [r7, #12]
 8017392:	f001 fef1 	bl	8019178 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	681a      	ldr	r2, [r3, #0]
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80173a4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80173a6:	2300      	movs	r3, #0
 80173a8:	e014      	b.n	80173d4 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	2220      	movs	r2, #32
 80173ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	2200      	movs	r2, #0
 80173b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173be:	f043 0210 	orr.w	r2, r3, #16
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	2200      	movs	r2, #0
 80173ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80173ce:	2301      	movs	r3, #1
 80173d0:	e000      	b.n	80173d4 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80173d2:	2302      	movs	r3, #2
  }
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	3720      	adds	r7, #32
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}
 80173dc:	ffff0000 	.word	0xffff0000
 80173e0:	080179fb 	.word	0x080179fb
 80173e4:	08018b97 	.word	0x08018b97
 80173e8:	08018c2d 	.word	0x08018c2d
 80173ec:	80002400 	.word	0x80002400

080173f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b084      	sub	sp, #16
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	699b      	ldr	r3, [r3, #24]
 80173fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801740c:	2b00      	cmp	r3, #0
 801740e:	d005      	beq.n	801741c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017414:	68ba      	ldr	r2, [r7, #8]
 8017416:	68f9      	ldr	r1, [r7, #12]
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	4798      	blx	r3
  }
}
 801741c:	bf00      	nop
 801741e:	3710      	adds	r7, #16
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}

08017424 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b086      	sub	sp, #24
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	699b      	ldr	r3, [r3, #24]
 8017432:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801743c:	697b      	ldr	r3, [r7, #20]
 801743e:	0a1b      	lsrs	r3, r3, #8
 8017440:	f003 0301 	and.w	r3, r3, #1
 8017444:	2b00      	cmp	r3, #0
 8017446:	d010      	beq.n	801746a <HAL_I2C_ER_IRQHandler+0x46>
 8017448:	693b      	ldr	r3, [r7, #16]
 801744a:	09db      	lsrs	r3, r3, #7
 801744c:	f003 0301 	and.w	r3, r3, #1
 8017450:	2b00      	cmp	r3, #0
 8017452:	d00a      	beq.n	801746a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017458:	f043 0201 	orr.w	r2, r3, #1
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017468:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801746a:	697b      	ldr	r3, [r7, #20]
 801746c:	0a9b      	lsrs	r3, r3, #10
 801746e:	f003 0301 	and.w	r3, r3, #1
 8017472:	2b00      	cmp	r3, #0
 8017474:	d010      	beq.n	8017498 <HAL_I2C_ER_IRQHandler+0x74>
 8017476:	693b      	ldr	r3, [r7, #16]
 8017478:	09db      	lsrs	r3, r3, #7
 801747a:	f003 0301 	and.w	r3, r3, #1
 801747e:	2b00      	cmp	r3, #0
 8017480:	d00a      	beq.n	8017498 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017486:	f043 0208 	orr.w	r2, r3, #8
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017496:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8017498:	697b      	ldr	r3, [r7, #20]
 801749a:	0a5b      	lsrs	r3, r3, #9
 801749c:	f003 0301 	and.w	r3, r3, #1
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d010      	beq.n	80174c6 <HAL_I2C_ER_IRQHandler+0xa2>
 80174a4:	693b      	ldr	r3, [r7, #16]
 80174a6:	09db      	lsrs	r3, r3, #7
 80174a8:	f003 0301 	and.w	r3, r3, #1
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d00a      	beq.n	80174c6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174b4:	f043 0202 	orr.w	r2, r3, #2
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80174c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	f003 030b 	and.w	r3, r3, #11
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d003      	beq.n	80174de <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80174d6:	68f9      	ldr	r1, [r7, #12]
 80174d8:	6878      	ldr	r0, [r7, #4]
 80174da:	f001 fa41 	bl	8018960 <I2C_ITError>
  }
}
 80174de:	bf00      	nop
 80174e0:	3718      	adds	r7, #24
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}

080174e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80174e6:	b480      	push	{r7}
 80174e8:	b083      	sub	sp, #12
 80174ea:	af00      	add	r7, sp, #0
 80174ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80174ee:	bf00      	nop
 80174f0:	370c      	adds	r7, #12
 80174f2:	46bd      	mov	sp, r7
 80174f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f8:	4770      	bx	lr

080174fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80174fa:	b480      	push	{r7}
 80174fc:	b083      	sub	sp, #12
 80174fe:	af00      	add	r7, sp, #0
 8017500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8017502:	bf00      	nop
 8017504:	370c      	adds	r7, #12
 8017506:	46bd      	mov	sp, r7
 8017508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750c:	4770      	bx	lr

0801750e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801750e:	b480      	push	{r7}
 8017510:	b083      	sub	sp, #12
 8017512:	af00      	add	r7, sp, #0
 8017514:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8017516:	bf00      	nop
 8017518:	370c      	adds	r7, #12
 801751a:	46bd      	mov	sp, r7
 801751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017520:	4770      	bx	lr

08017522 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017522:	b480      	push	{r7}
 8017524:	b083      	sub	sp, #12
 8017526:	af00      	add	r7, sp, #0
 8017528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801752a:	bf00      	nop
 801752c:	370c      	adds	r7, #12
 801752e:	46bd      	mov	sp, r7
 8017530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017534:	4770      	bx	lr

08017536 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8017536:	b480      	push	{r7}
 8017538:	b083      	sub	sp, #12
 801753a:	af00      	add	r7, sp, #0
 801753c:	6078      	str	r0, [r7, #4]
 801753e:	460b      	mov	r3, r1
 8017540:	70fb      	strb	r3, [r7, #3]
 8017542:	4613      	mov	r3, r2
 8017544:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8017546:	bf00      	nop
 8017548:	370c      	adds	r7, #12
 801754a:	46bd      	mov	sp, r7
 801754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017550:	4770      	bx	lr

08017552 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017552:	b480      	push	{r7}
 8017554:	b083      	sub	sp, #12
 8017556:	af00      	add	r7, sp, #0
 8017558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 801755a:	bf00      	nop
 801755c:	370c      	adds	r7, #12
 801755e:	46bd      	mov	sp, r7
 8017560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017564:	4770      	bx	lr

08017566 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017566:	b480      	push	{r7}
 8017568:	b083      	sub	sp, #12
 801756a:	af00      	add	r7, sp, #0
 801756c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801756e:	bf00      	nop
 8017570:	370c      	adds	r7, #12
 8017572:	46bd      	mov	sp, r7
 8017574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017578:	4770      	bx	lr

0801757a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801757a:	b480      	push	{r7}
 801757c:	b083      	sub	sp, #12
 801757e:	af00      	add	r7, sp, #0
 8017580:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8017582:	bf00      	nop
 8017584:	370c      	adds	r7, #12
 8017586:	46bd      	mov	sp, r7
 8017588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758c:	4770      	bx	lr

0801758e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801758e:	b480      	push	{r7}
 8017590:	b083      	sub	sp, #12
 8017592:	af00      	add	r7, sp, #0
 8017594:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8017596:	bf00      	nop
 8017598:	370c      	adds	r7, #12
 801759a:	46bd      	mov	sp, r7
 801759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a0:	4770      	bx	lr

080175a2 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80175a2:	b580      	push	{r7, lr}
 80175a4:	b088      	sub	sp, #32
 80175a6:	af02      	add	r7, sp, #8
 80175a8:	60f8      	str	r0, [r7, #12]
 80175aa:	60b9      	str	r1, [r7, #8]
 80175ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80175b8:	2b01      	cmp	r3, #1
 80175ba:	d101      	bne.n	80175c0 <I2C_Master_ISR_IT+0x1e>
 80175bc:	2302      	movs	r3, #2
 80175be:	e115      	b.n	80177ec <I2C_Master_ISR_IT+0x24a>
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	2201      	movs	r2, #1
 80175c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80175c8:	697b      	ldr	r3, [r7, #20]
 80175ca:	091b      	lsrs	r3, r3, #4
 80175cc:	f003 0301 	and.w	r3, r3, #1
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d013      	beq.n	80175fc <I2C_Master_ISR_IT+0x5a>
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	091b      	lsrs	r3, r3, #4
 80175d8:	f003 0301 	and.w	r3, r3, #1
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d00d      	beq.n	80175fc <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	2210      	movs	r2, #16
 80175e6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175ec:	f043 0204 	orr.w	r2, r3, #4
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80175f4:	68f8      	ldr	r0, [r7, #12]
 80175f6:	f001 faaa 	bl	8018b4e <I2C_Flush_TXDR>
 80175fa:	e0e2      	b.n	80177c2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80175fc:	697b      	ldr	r3, [r7, #20]
 80175fe:	089b      	lsrs	r3, r3, #2
 8017600:	f003 0301 	and.w	r3, r3, #1
 8017604:	2b00      	cmp	r3, #0
 8017606:	d023      	beq.n	8017650 <I2C_Master_ISR_IT+0xae>
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	089b      	lsrs	r3, r3, #2
 801760c:	f003 0301 	and.w	r3, r3, #1
 8017610:	2b00      	cmp	r3, #0
 8017612:	d01d      	beq.n	8017650 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8017614:	697b      	ldr	r3, [r7, #20]
 8017616:	f023 0304 	bic.w	r3, r3, #4
 801761a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017626:	b2d2      	uxtb	r2, r2
 8017628:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801762e:	1c5a      	adds	r2, r3, #1
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017638:	3b01      	subs	r3, #1
 801763a:	b29a      	uxth	r2, r3
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017644:	b29b      	uxth	r3, r3
 8017646:	3b01      	subs	r3, #1
 8017648:	b29a      	uxth	r2, r3
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801764e:	e0b8      	b.n	80177c2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	085b      	lsrs	r3, r3, #1
 8017654:	f003 0301 	and.w	r3, r3, #1
 8017658:	2b00      	cmp	r3, #0
 801765a:	d01e      	beq.n	801769a <I2C_Master_ISR_IT+0xf8>
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	085b      	lsrs	r3, r3, #1
 8017660:	f003 0301 	and.w	r3, r3, #1
 8017664:	2b00      	cmp	r3, #0
 8017666:	d018      	beq.n	801769a <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801766c:	781a      	ldrb	r2, [r3, #0]
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017678:	1c5a      	adds	r2, r3, #1
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017682:	3b01      	subs	r3, #1
 8017684:	b29a      	uxth	r2, r3
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801768e:	b29b      	uxth	r3, r3
 8017690:	3b01      	subs	r3, #1
 8017692:	b29a      	uxth	r2, r3
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017698:	e093      	b.n	80177c2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801769a:	697b      	ldr	r3, [r7, #20]
 801769c:	09db      	lsrs	r3, r3, #7
 801769e:	f003 0301 	and.w	r3, r3, #1
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d05e      	beq.n	8017764 <I2C_Master_ISR_IT+0x1c2>
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	099b      	lsrs	r3, r3, #6
 80176aa:	f003 0301 	and.w	r3, r3, #1
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d058      	beq.n	8017764 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176b6:	b29b      	uxth	r3, r3
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d041      	beq.n	8017740 <I2C_Master_ISR_IT+0x19e>
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d13d      	bne.n	8017740 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	685b      	ldr	r3, [r3, #4]
 80176ca:	b29b      	uxth	r3, r3
 80176cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80176d0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	2bff      	cmp	r3, #255	; 0xff
 80176da:	d90e      	bls.n	80176fa <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	22ff      	movs	r2, #255	; 0xff
 80176e0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176e6:	b2da      	uxtb	r2, r3
 80176e8:	8a79      	ldrh	r1, [r7, #18]
 80176ea:	2300      	movs	r3, #0
 80176ec:	9300      	str	r3, [sp, #0]
 80176ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80176f2:	68f8      	ldr	r0, [r7, #12]
 80176f4:	f001 fd12 	bl	801911c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80176f8:	e033      	b.n	8017762 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176fe:	b29a      	uxth	r2, r3
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801770c:	d00c      	beq.n	8017728 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017712:	b2da      	uxtb	r2, r3
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8017718:	8a79      	ldrh	r1, [r7, #18]
 801771a:	2300      	movs	r3, #0
 801771c:	9300      	str	r3, [sp, #0]
 801771e:	4603      	mov	r3, r0
 8017720:	68f8      	ldr	r0, [r7, #12]
 8017722:	f001 fcfb 	bl	801911c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017726:	e01c      	b.n	8017762 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801772c:	b2da      	uxtb	r2, r3
 801772e:	8a79      	ldrh	r1, [r7, #18]
 8017730:	2300      	movs	r3, #0
 8017732:	9300      	str	r3, [sp, #0]
 8017734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017738:	68f8      	ldr	r0, [r7, #12]
 801773a:	f001 fcef 	bl	801911c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801773e:	e010      	b.n	8017762 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	685b      	ldr	r3, [r3, #4]
 8017746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801774a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801774e:	d003      	beq.n	8017758 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8017750:	68f8      	ldr	r0, [r7, #12]
 8017752:	f000 fd51 	bl	80181f8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017756:	e034      	b.n	80177c2 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017758:	2140      	movs	r1, #64	; 0x40
 801775a:	68f8      	ldr	r0, [r7, #12]
 801775c:	f001 f900 	bl	8018960 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017760:	e02f      	b.n	80177c2 <I2C_Master_ISR_IT+0x220>
 8017762:	e02e      	b.n	80177c2 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017764:	697b      	ldr	r3, [r7, #20]
 8017766:	099b      	lsrs	r3, r3, #6
 8017768:	f003 0301 	and.w	r3, r3, #1
 801776c:	2b00      	cmp	r3, #0
 801776e:	d028      	beq.n	80177c2 <I2C_Master_ISR_IT+0x220>
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	099b      	lsrs	r3, r3, #6
 8017774:	f003 0301 	and.w	r3, r3, #1
 8017778:	2b00      	cmp	r3, #0
 801777a:	d022      	beq.n	80177c2 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017780:	b29b      	uxth	r3, r3
 8017782:	2b00      	cmp	r3, #0
 8017784:	d119      	bne.n	80177ba <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	685b      	ldr	r3, [r3, #4]
 801778c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017790:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017794:	d015      	beq.n	80177c2 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801779a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801779e:	d108      	bne.n	80177b2 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	685a      	ldr	r2, [r3, #4]
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80177ae:	605a      	str	r2, [r3, #4]
 80177b0:	e007      	b.n	80177c2 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80177b2:	68f8      	ldr	r0, [r7, #12]
 80177b4:	f000 fd20 	bl	80181f8 <I2C_ITMasterSeqCplt>
 80177b8:	e003      	b.n	80177c2 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80177ba:	2140      	movs	r1, #64	; 0x40
 80177bc:	68f8      	ldr	r0, [r7, #12]
 80177be:	f001 f8cf 	bl	8018960 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80177c2:	697b      	ldr	r3, [r7, #20]
 80177c4:	095b      	lsrs	r3, r3, #5
 80177c6:	f003 0301 	and.w	r3, r3, #1
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d009      	beq.n	80177e2 <I2C_Master_ISR_IT+0x240>
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	095b      	lsrs	r3, r3, #5
 80177d2:	f003 0301 	and.w	r3, r3, #1
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d003      	beq.n	80177e2 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80177da:	6979      	ldr	r1, [r7, #20]
 80177dc:	68f8      	ldr	r0, [r7, #12]
 80177de:	f000 fda7 	bl	8018330 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	2200      	movs	r2, #0
 80177e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80177ea:	2300      	movs	r3, #0
}
 80177ec:	4618      	mov	r0, r3
 80177ee:	3718      	adds	r7, #24
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}

080177f4 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b086      	sub	sp, #24
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	60f8      	str	r0, [r7, #12]
 80177fc:	60b9      	str	r1, [r7, #8]
 80177fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017804:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8017806:	68bb      	ldr	r3, [r7, #8]
 8017808:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017810:	2b01      	cmp	r3, #1
 8017812:	d101      	bne.n	8017818 <I2C_Slave_ISR_IT+0x24>
 8017814:	2302      	movs	r3, #2
 8017816:	e0ec      	b.n	80179f2 <I2C_Slave_ISR_IT+0x1fe>
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	2201      	movs	r2, #1
 801781c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017820:	693b      	ldr	r3, [r7, #16]
 8017822:	095b      	lsrs	r3, r3, #5
 8017824:	f003 0301 	and.w	r3, r3, #1
 8017828:	2b00      	cmp	r3, #0
 801782a:	d009      	beq.n	8017840 <I2C_Slave_ISR_IT+0x4c>
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	095b      	lsrs	r3, r3, #5
 8017830:	f003 0301 	and.w	r3, r3, #1
 8017834:	2b00      	cmp	r3, #0
 8017836:	d003      	beq.n	8017840 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8017838:	6939      	ldr	r1, [r7, #16]
 801783a:	68f8      	ldr	r0, [r7, #12]
 801783c:	f000 fe42 	bl	80184c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	091b      	lsrs	r3, r3, #4
 8017844:	f003 0301 	and.w	r3, r3, #1
 8017848:	2b00      	cmp	r3, #0
 801784a:	d04d      	beq.n	80178e8 <I2C_Slave_ISR_IT+0xf4>
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	091b      	lsrs	r3, r3, #4
 8017850:	f003 0301 	and.w	r3, r3, #1
 8017854:	2b00      	cmp	r3, #0
 8017856:	d047      	beq.n	80178e8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801785c:	b29b      	uxth	r3, r3
 801785e:	2b00      	cmp	r3, #0
 8017860:	d128      	bne.n	80178b4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017868:	b2db      	uxtb	r3, r3
 801786a:	2b28      	cmp	r3, #40	; 0x28
 801786c:	d108      	bne.n	8017880 <I2C_Slave_ISR_IT+0x8c>
 801786e:	697b      	ldr	r3, [r7, #20]
 8017870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017874:	d104      	bne.n	8017880 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8017876:	6939      	ldr	r1, [r7, #16]
 8017878:	68f8      	ldr	r0, [r7, #12]
 801787a:	f001 f81b 	bl	80188b4 <I2C_ITListenCplt>
 801787e:	e032      	b.n	80178e6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017886:	b2db      	uxtb	r3, r3
 8017888:	2b29      	cmp	r3, #41	; 0x29
 801788a:	d10e      	bne.n	80178aa <I2C_Slave_ISR_IT+0xb6>
 801788c:	697b      	ldr	r3, [r7, #20]
 801788e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017892:	d00a      	beq.n	80178aa <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	2210      	movs	r2, #16
 801789a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801789c:	68f8      	ldr	r0, [r7, #12]
 801789e:	f001 f956 	bl	8018b4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80178a2:	68f8      	ldr	r0, [r7, #12]
 80178a4:	f000 fce5 	bl	8018272 <I2C_ITSlaveSeqCplt>
 80178a8:	e01d      	b.n	80178e6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	2210      	movs	r2, #16
 80178b0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80178b2:	e096      	b.n	80179e2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	2210      	movs	r2, #16
 80178ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178c0:	f043 0204 	orr.w	r2, r3, #4
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80178c8:	697b      	ldr	r3, [r7, #20]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d004      	beq.n	80178d8 <I2C_Slave_ISR_IT+0xe4>
 80178ce:	697b      	ldr	r3, [r7, #20]
 80178d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80178d4:	f040 8085 	bne.w	80179e2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178dc:	4619      	mov	r1, r3
 80178de:	68f8      	ldr	r0, [r7, #12]
 80178e0:	f001 f83e 	bl	8018960 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80178e4:	e07d      	b.n	80179e2 <I2C_Slave_ISR_IT+0x1ee>
 80178e6:	e07c      	b.n	80179e2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80178e8:	693b      	ldr	r3, [r7, #16]
 80178ea:	089b      	lsrs	r3, r3, #2
 80178ec:	f003 0301 	and.w	r3, r3, #1
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d030      	beq.n	8017956 <I2C_Slave_ISR_IT+0x162>
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	089b      	lsrs	r3, r3, #2
 80178f8:	f003 0301 	and.w	r3, r3, #1
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d02a      	beq.n	8017956 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017904:	b29b      	uxth	r3, r3
 8017906:	2b00      	cmp	r3, #0
 8017908:	d018      	beq.n	801793c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017914:	b2d2      	uxtb	r2, r2
 8017916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801791c:	1c5a      	adds	r2, r3, #1
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017926:	3b01      	subs	r3, #1
 8017928:	b29a      	uxth	r2, r3
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017932:	b29b      	uxth	r3, r3
 8017934:	3b01      	subs	r3, #1
 8017936:	b29a      	uxth	r2, r3
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017940:	b29b      	uxth	r3, r3
 8017942:	2b00      	cmp	r3, #0
 8017944:	d14f      	bne.n	80179e6 <I2C_Slave_ISR_IT+0x1f2>
 8017946:	697b      	ldr	r3, [r7, #20]
 8017948:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801794c:	d04b      	beq.n	80179e6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801794e:	68f8      	ldr	r0, [r7, #12]
 8017950:	f000 fc8f 	bl	8018272 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8017954:	e047      	b.n	80179e6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8017956:	693b      	ldr	r3, [r7, #16]
 8017958:	08db      	lsrs	r3, r3, #3
 801795a:	f003 0301 	and.w	r3, r3, #1
 801795e:	2b00      	cmp	r3, #0
 8017960:	d00a      	beq.n	8017978 <I2C_Slave_ISR_IT+0x184>
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	08db      	lsrs	r3, r3, #3
 8017966:	f003 0301 	and.w	r3, r3, #1
 801796a:	2b00      	cmp	r3, #0
 801796c:	d004      	beq.n	8017978 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 801796e:	6939      	ldr	r1, [r7, #16]
 8017970:	68f8      	ldr	r0, [r7, #12]
 8017972:	f000 fbbd 	bl	80180f0 <I2C_ITAddrCplt>
 8017976:	e037      	b.n	80179e8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	085b      	lsrs	r3, r3, #1
 801797c:	f003 0301 	and.w	r3, r3, #1
 8017980:	2b00      	cmp	r3, #0
 8017982:	d031      	beq.n	80179e8 <I2C_Slave_ISR_IT+0x1f4>
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	085b      	lsrs	r3, r3, #1
 8017988:	f003 0301 	and.w	r3, r3, #1
 801798c:	2b00      	cmp	r3, #0
 801798e:	d02b      	beq.n	80179e8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017994:	b29b      	uxth	r3, r3
 8017996:	2b00      	cmp	r3, #0
 8017998:	d018      	beq.n	80179cc <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801799e:	781a      	ldrb	r2, [r3, #0]
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179aa:	1c5a      	adds	r2, r3, #1
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179b4:	b29b      	uxth	r3, r3
 80179b6:	3b01      	subs	r3, #1
 80179b8:	b29a      	uxth	r2, r3
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179c2:	3b01      	subs	r3, #1
 80179c4:	b29a      	uxth	r2, r3
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80179ca:	e00d      	b.n	80179e8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80179cc:	697b      	ldr	r3, [r7, #20]
 80179ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80179d2:	d002      	beq.n	80179da <I2C_Slave_ISR_IT+0x1e6>
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d106      	bne.n	80179e8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80179da:	68f8      	ldr	r0, [r7, #12]
 80179dc:	f000 fc49 	bl	8018272 <I2C_ITSlaveSeqCplt>
 80179e0:	e002      	b.n	80179e8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80179e2:	bf00      	nop
 80179e4:	e000      	b.n	80179e8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80179e6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	2200      	movs	r2, #0
 80179ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80179f0:	2300      	movs	r3, #0
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3718      	adds	r7, #24
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}

080179fa <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80179fa:	b580      	push	{r7, lr}
 80179fc:	b088      	sub	sp, #32
 80179fe:	af02      	add	r7, sp, #8
 8017a00:	60f8      	str	r0, [r7, #12]
 8017a02:	60b9      	str	r1, [r7, #8]
 8017a04:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017a0c:	2b01      	cmp	r3, #1
 8017a0e:	d101      	bne.n	8017a14 <I2C_Master_ISR_DMA+0x1a>
 8017a10:	2302      	movs	r3, #2
 8017a12:	e0e1      	b.n	8017bd8 <I2C_Master_ISR_DMA+0x1de>
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	2201      	movs	r2, #1
 8017a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	091b      	lsrs	r3, r3, #4
 8017a20:	f003 0301 	and.w	r3, r3, #1
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d017      	beq.n	8017a58 <I2C_Master_ISR_DMA+0x5e>
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	091b      	lsrs	r3, r3, #4
 8017a2c:	f003 0301 	and.w	r3, r3, #1
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d011      	beq.n	8017a58 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	2210      	movs	r2, #16
 8017a3a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a40:	f043 0204 	orr.w	r2, r3, #4
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017a48:	2120      	movs	r1, #32
 8017a4a:	68f8      	ldr	r0, [r7, #12]
 8017a4c:	f001 fb94 	bl	8019178 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017a50:	68f8      	ldr	r0, [r7, #12]
 8017a52:	f001 f87c 	bl	8018b4e <I2C_Flush_TXDR>
 8017a56:	e0ba      	b.n	8017bce <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017a58:	68bb      	ldr	r3, [r7, #8]
 8017a5a:	09db      	lsrs	r3, r3, #7
 8017a5c:	f003 0301 	and.w	r3, r3, #1
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d072      	beq.n	8017b4a <I2C_Master_ISR_DMA+0x150>
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	099b      	lsrs	r3, r3, #6
 8017a68:	f003 0301 	and.w	r3, r3, #1
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d06c      	beq.n	8017b4a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017a7e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a84:	b29b      	uxth	r3, r3
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d04e      	beq.n	8017b28 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	685b      	ldr	r3, [r3, #4]
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017a96:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a9c:	b29b      	uxth	r3, r3
 8017a9e:	2bff      	cmp	r3, #255	; 0xff
 8017aa0:	d906      	bls.n	8017ab0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	22ff      	movs	r2, #255	; 0xff
 8017aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8017aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017aac:	617b      	str	r3, [r7, #20]
 8017aae:	e010      	b.n	8017ad2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ab4:	b29a      	uxth	r2, r3
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017abe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017ac2:	d003      	beq.n	8017acc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ac8:	617b      	str	r3, [r7, #20]
 8017aca:	e002      	b.n	8017ad2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8017acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017ad0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ad6:	b2da      	uxtb	r2, r3
 8017ad8:	8a79      	ldrh	r1, [r7, #18]
 8017ada:	2300      	movs	r3, #0
 8017adc:	9300      	str	r3, [sp, #0]
 8017ade:	697b      	ldr	r3, [r7, #20]
 8017ae0:	68f8      	ldr	r0, [r7, #12]
 8017ae2:	f001 fb1b 	bl	801911c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017aea:	b29a      	uxth	r2, r3
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017af0:	1ad3      	subs	r3, r2, r3
 8017af2:	b29a      	uxth	r2, r3
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017afe:	b2db      	uxtb	r3, r3
 8017b00:	2b22      	cmp	r3, #34	; 0x22
 8017b02:	d108      	bne.n	8017b16 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	681a      	ldr	r2, [r3, #0]
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017b12:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017b14:	e05b      	b.n	8017bce <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	681a      	ldr	r2, [r3, #0]
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017b24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017b26:	e052      	b.n	8017bce <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	685b      	ldr	r3, [r3, #4]
 8017b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017b32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017b36:	d003      	beq.n	8017b40 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8017b38:	68f8      	ldr	r0, [r7, #12]
 8017b3a:	f000 fb5d 	bl	80181f8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8017b3e:	e046      	b.n	8017bce <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017b40:	2140      	movs	r1, #64	; 0x40
 8017b42:	68f8      	ldr	r0, [r7, #12]
 8017b44:	f000 ff0c 	bl	8018960 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8017b48:	e041      	b.n	8017bce <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017b4a:	68bb      	ldr	r3, [r7, #8]
 8017b4c:	099b      	lsrs	r3, r3, #6
 8017b4e:	f003 0301 	and.w	r3, r3, #1
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d029      	beq.n	8017baa <I2C_Master_ISR_DMA+0x1b0>
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	099b      	lsrs	r3, r3, #6
 8017b5a:	f003 0301 	and.w	r3, r3, #1
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d023      	beq.n	8017baa <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d119      	bne.n	8017ba0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	685b      	ldr	r3, [r3, #4]
 8017b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017b7a:	d027      	beq.n	8017bcc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017b84:	d108      	bne.n	8017b98 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	685a      	ldr	r2, [r3, #4]
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017b94:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8017b96:	e019      	b.n	8017bcc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8017b98:	68f8      	ldr	r0, [r7, #12]
 8017b9a:	f000 fb2d 	bl	80181f8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8017b9e:	e015      	b.n	8017bcc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017ba0:	2140      	movs	r1, #64	; 0x40
 8017ba2:	68f8      	ldr	r0, [r7, #12]
 8017ba4:	f000 fedc 	bl	8018960 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8017ba8:	e010      	b.n	8017bcc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	095b      	lsrs	r3, r3, #5
 8017bae:	f003 0301 	and.w	r3, r3, #1
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d00b      	beq.n	8017bce <I2C_Master_ISR_DMA+0x1d4>
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	095b      	lsrs	r3, r3, #5
 8017bba:	f003 0301 	and.w	r3, r3, #1
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d005      	beq.n	8017bce <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8017bc2:	68b9      	ldr	r1, [r7, #8]
 8017bc4:	68f8      	ldr	r0, [r7, #12]
 8017bc6:	f000 fbb3 	bl	8018330 <I2C_ITMasterCplt>
 8017bca:	e000      	b.n	8017bce <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8017bcc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8017bd6:	2300      	movs	r3, #0
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3718      	adds	r7, #24
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}

08017be0 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b088      	sub	sp, #32
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bf0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	d101      	bne.n	8017c04 <I2C_Slave_ISR_DMA+0x24>
 8017c00:	2302      	movs	r3, #2
 8017c02:	e1c8      	b.n	8017f96 <I2C_Slave_ISR_DMA+0x3b6>
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	2201      	movs	r2, #1
 8017c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017c0c:	68bb      	ldr	r3, [r7, #8]
 8017c0e:	095b      	lsrs	r3, r3, #5
 8017c10:	f003 0301 	and.w	r3, r3, #1
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d009      	beq.n	8017c2c <I2C_Slave_ISR_DMA+0x4c>
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	095b      	lsrs	r3, r3, #5
 8017c1c:	f003 0301 	and.w	r3, r3, #1
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d003      	beq.n	8017c2c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8017c24:	68b9      	ldr	r1, [r7, #8]
 8017c26:	68f8      	ldr	r0, [r7, #12]
 8017c28:	f000 fc4c 	bl	80184c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	091b      	lsrs	r3, r3, #4
 8017c30:	f003 0301 	and.w	r3, r3, #1
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	f000 8199 	beq.w	8017f6c <I2C_Slave_ISR_DMA+0x38c>
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	091b      	lsrs	r3, r3, #4
 8017c3e:	f003 0301 	and.w	r3, r3, #1
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	f000 8192 	beq.w	8017f6c <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	0b9b      	lsrs	r3, r3, #14
 8017c4c:	f003 0301 	and.w	r3, r3, #1
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d106      	bne.n	8017c62 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	0bdb      	lsrs	r3, r3, #15
 8017c58:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	f000 817e 	beq.w	8017f5e <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d07c      	beq.n	8017d64 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	0bdb      	lsrs	r3, r3, #15
 8017c6e:	f003 0301 	and.w	r3, r3, #1
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d076      	beq.n	8017d64 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	4a8d      	ldr	r2, [pc, #564]	; (8017eb4 <I2C_Slave_ISR_DMA+0x2d4>)
 8017c7e:	4293      	cmp	r3, r2
 8017c80:	d059      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	4a8b      	ldr	r2, [pc, #556]	; (8017eb8 <I2C_Slave_ISR_DMA+0x2d8>)
 8017c8a:	4293      	cmp	r3, r2
 8017c8c:	d053      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	4a89      	ldr	r2, [pc, #548]	; (8017ebc <I2C_Slave_ISR_DMA+0x2dc>)
 8017c96:	4293      	cmp	r3, r2
 8017c98:	d04d      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	4a87      	ldr	r2, [pc, #540]	; (8017ec0 <I2C_Slave_ISR_DMA+0x2e0>)
 8017ca2:	4293      	cmp	r3, r2
 8017ca4:	d047      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	4a85      	ldr	r2, [pc, #532]	; (8017ec4 <I2C_Slave_ISR_DMA+0x2e4>)
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	d041      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	4a83      	ldr	r2, [pc, #524]	; (8017ec8 <I2C_Slave_ISR_DMA+0x2e8>)
 8017cba:	4293      	cmp	r3, r2
 8017cbc:	d03b      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	4a81      	ldr	r2, [pc, #516]	; (8017ecc <I2C_Slave_ISR_DMA+0x2ec>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d035      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	4a7f      	ldr	r2, [pc, #508]	; (8017ed0 <I2C_Slave_ISR_DMA+0x2f0>)
 8017cd2:	4293      	cmp	r3, r2
 8017cd4:	d02f      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	4a7d      	ldr	r2, [pc, #500]	; (8017ed4 <I2C_Slave_ISR_DMA+0x2f4>)
 8017cde:	4293      	cmp	r3, r2
 8017ce0:	d029      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	4a7b      	ldr	r2, [pc, #492]	; (8017ed8 <I2C_Slave_ISR_DMA+0x2f8>)
 8017cea:	4293      	cmp	r3, r2
 8017cec:	d023      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	4a79      	ldr	r2, [pc, #484]	; (8017edc <I2C_Slave_ISR_DMA+0x2fc>)
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	d01d      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	4a77      	ldr	r2, [pc, #476]	; (8017ee0 <I2C_Slave_ISR_DMA+0x300>)
 8017d02:	4293      	cmp	r3, r2
 8017d04:	d017      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	4a75      	ldr	r2, [pc, #468]	; (8017ee4 <I2C_Slave_ISR_DMA+0x304>)
 8017d0e:	4293      	cmp	r3, r2
 8017d10:	d011      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	4a73      	ldr	r2, [pc, #460]	; (8017ee8 <I2C_Slave_ISR_DMA+0x308>)
 8017d1a:	4293      	cmp	r3, r2
 8017d1c:	d00b      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	4a71      	ldr	r2, [pc, #452]	; (8017eec <I2C_Slave_ISR_DMA+0x30c>)
 8017d26:	4293      	cmp	r3, r2
 8017d28:	d005      	beq.n	8017d36 <I2C_Slave_ISR_DMA+0x156>
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	4a6f      	ldr	r2, [pc, #444]	; (8017ef0 <I2C_Slave_ISR_DMA+0x310>)
 8017d32:	4293      	cmp	r3, r2
 8017d34:	d109      	bne.n	8017d4a <I2C_Slave_ISR_DMA+0x16a>
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	685b      	ldr	r3, [r3, #4]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	bf0c      	ite	eq
 8017d42:	2301      	moveq	r3, #1
 8017d44:	2300      	movne	r3, #0
 8017d46:	b2db      	uxtb	r3, r3
 8017d48:	e008      	b.n	8017d5c <I2C_Slave_ISR_DMA+0x17c>
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	bf0c      	ite	eq
 8017d56:	2301      	moveq	r3, #1
 8017d58:	2300      	movne	r3, #0
 8017d5a:	b2db      	uxtb	r3, r3
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d001      	beq.n	8017d64 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8017d60:	2301      	movs	r3, #1
 8017d62:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d07c      	beq.n	8017e66 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	0b9b      	lsrs	r3, r3, #14
 8017d70:	f003 0301 	and.w	r3, r3, #1
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d076      	beq.n	8017e66 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	4a4d      	ldr	r2, [pc, #308]	; (8017eb4 <I2C_Slave_ISR_DMA+0x2d4>)
 8017d80:	4293      	cmp	r3, r2
 8017d82:	d059      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4a4b      	ldr	r2, [pc, #300]	; (8017eb8 <I2C_Slave_ISR_DMA+0x2d8>)
 8017d8c:	4293      	cmp	r3, r2
 8017d8e:	d053      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	4a49      	ldr	r2, [pc, #292]	; (8017ebc <I2C_Slave_ISR_DMA+0x2dc>)
 8017d98:	4293      	cmp	r3, r2
 8017d9a:	d04d      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	4a47      	ldr	r2, [pc, #284]	; (8017ec0 <I2C_Slave_ISR_DMA+0x2e0>)
 8017da4:	4293      	cmp	r3, r2
 8017da6:	d047      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	4a45      	ldr	r2, [pc, #276]	; (8017ec4 <I2C_Slave_ISR_DMA+0x2e4>)
 8017db0:	4293      	cmp	r3, r2
 8017db2:	d041      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	4a43      	ldr	r2, [pc, #268]	; (8017ec8 <I2C_Slave_ISR_DMA+0x2e8>)
 8017dbc:	4293      	cmp	r3, r2
 8017dbe:	d03b      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	4a41      	ldr	r2, [pc, #260]	; (8017ecc <I2C_Slave_ISR_DMA+0x2ec>)
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	d035      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	4a3f      	ldr	r2, [pc, #252]	; (8017ed0 <I2C_Slave_ISR_DMA+0x2f0>)
 8017dd4:	4293      	cmp	r3, r2
 8017dd6:	d02f      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	4a3d      	ldr	r2, [pc, #244]	; (8017ed4 <I2C_Slave_ISR_DMA+0x2f4>)
 8017de0:	4293      	cmp	r3, r2
 8017de2:	d029      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	4a3b      	ldr	r2, [pc, #236]	; (8017ed8 <I2C_Slave_ISR_DMA+0x2f8>)
 8017dec:	4293      	cmp	r3, r2
 8017dee:	d023      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	4a39      	ldr	r2, [pc, #228]	; (8017edc <I2C_Slave_ISR_DMA+0x2fc>)
 8017df8:	4293      	cmp	r3, r2
 8017dfa:	d01d      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	4a37      	ldr	r2, [pc, #220]	; (8017ee0 <I2C_Slave_ISR_DMA+0x300>)
 8017e04:	4293      	cmp	r3, r2
 8017e06:	d017      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	4a35      	ldr	r2, [pc, #212]	; (8017ee4 <I2C_Slave_ISR_DMA+0x304>)
 8017e10:	4293      	cmp	r3, r2
 8017e12:	d011      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	4a33      	ldr	r2, [pc, #204]	; (8017ee8 <I2C_Slave_ISR_DMA+0x308>)
 8017e1c:	4293      	cmp	r3, r2
 8017e1e:	d00b      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	4a31      	ldr	r2, [pc, #196]	; (8017eec <I2C_Slave_ISR_DMA+0x30c>)
 8017e28:	4293      	cmp	r3, r2
 8017e2a:	d005      	beq.n	8017e38 <I2C_Slave_ISR_DMA+0x258>
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	4a2f      	ldr	r2, [pc, #188]	; (8017ef0 <I2C_Slave_ISR_DMA+0x310>)
 8017e34:	4293      	cmp	r3, r2
 8017e36:	d109      	bne.n	8017e4c <I2C_Slave_ISR_DMA+0x26c>
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	bf0c      	ite	eq
 8017e44:	2301      	moveq	r3, #1
 8017e46:	2300      	movne	r3, #0
 8017e48:	b2db      	uxtb	r3, r3
 8017e4a:	e008      	b.n	8017e5e <I2C_Slave_ISR_DMA+0x27e>
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	685b      	ldr	r3, [r3, #4]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	bf0c      	ite	eq
 8017e58:	2301      	moveq	r3, #1
 8017e5a:	2300      	movne	r3, #0
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d001      	beq.n	8017e66 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8017e62:	2301      	movs	r3, #1
 8017e64:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8017e66:	69fb      	ldr	r3, [r7, #28]
 8017e68:	2b01      	cmp	r3, #1
 8017e6a:	d148      	bne.n	8017efe <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	2b28      	cmp	r3, #40	; 0x28
 8017e76:	d108      	bne.n	8017e8a <I2C_Slave_ISR_DMA+0x2aa>
 8017e78:	69bb      	ldr	r3, [r7, #24]
 8017e7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017e7e:	d104      	bne.n	8017e8a <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8017e80:	68b9      	ldr	r1, [r7, #8]
 8017e82:	68f8      	ldr	r0, [r7, #12]
 8017e84:	f000 fd16 	bl	80188b4 <I2C_ITListenCplt>
 8017e88:	e068      	b.n	8017f5c <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017e90:	b2db      	uxtb	r3, r3
 8017e92:	2b29      	cmp	r3, #41	; 0x29
 8017e94:	d12e      	bne.n	8017ef4 <I2C_Slave_ISR_DMA+0x314>
 8017e96:	69bb      	ldr	r3, [r7, #24]
 8017e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017e9c:	d02a      	beq.n	8017ef4 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	2210      	movs	r2, #16
 8017ea4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8017ea6:	68f8      	ldr	r0, [r7, #12]
 8017ea8:	f000 fe51 	bl	8018b4e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8017eac:	68f8      	ldr	r0, [r7, #12]
 8017eae:	f000 f9e0 	bl	8018272 <I2C_ITSlaveSeqCplt>
 8017eb2:	e053      	b.n	8017f5c <I2C_Slave_ISR_DMA+0x37c>
 8017eb4:	40020010 	.word	0x40020010
 8017eb8:	40020028 	.word	0x40020028
 8017ebc:	40020040 	.word	0x40020040
 8017ec0:	40020058 	.word	0x40020058
 8017ec4:	40020070 	.word	0x40020070
 8017ec8:	40020088 	.word	0x40020088
 8017ecc:	400200a0 	.word	0x400200a0
 8017ed0:	400200b8 	.word	0x400200b8
 8017ed4:	40020410 	.word	0x40020410
 8017ed8:	40020428 	.word	0x40020428
 8017edc:	40020440 	.word	0x40020440
 8017ee0:	40020458 	.word	0x40020458
 8017ee4:	40020470 	.word	0x40020470
 8017ee8:	40020488 	.word	0x40020488
 8017eec:	400204a0 	.word	0x400204a0
 8017ef0:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	2210      	movs	r2, #16
 8017efa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8017efc:	e034      	b.n	8017f68 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	2210      	movs	r2, #16
 8017f04:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f0a:	f043 0204 	orr.w	r2, r3, #4
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017f18:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8017f1a:	69bb      	ldr	r3, [r7, #24]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d003      	beq.n	8017f28 <I2C_Slave_ISR_DMA+0x348>
 8017f20:	69bb      	ldr	r3, [r7, #24]
 8017f22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017f26:	d11f      	bne.n	8017f68 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017f28:	7dfb      	ldrb	r3, [r7, #23]
 8017f2a:	2b21      	cmp	r3, #33	; 0x21
 8017f2c:	d002      	beq.n	8017f34 <I2C_Slave_ISR_DMA+0x354>
 8017f2e:	7dfb      	ldrb	r3, [r7, #23]
 8017f30:	2b29      	cmp	r3, #41	; 0x29
 8017f32:	d103      	bne.n	8017f3c <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	2221      	movs	r2, #33	; 0x21
 8017f38:	631a      	str	r2, [r3, #48]	; 0x30
 8017f3a:	e008      	b.n	8017f4e <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017f3c:	7dfb      	ldrb	r3, [r7, #23]
 8017f3e:	2b22      	cmp	r3, #34	; 0x22
 8017f40:	d002      	beq.n	8017f48 <I2C_Slave_ISR_DMA+0x368>
 8017f42:	7dfb      	ldrb	r3, [r7, #23]
 8017f44:	2b2a      	cmp	r3, #42	; 0x2a
 8017f46:	d102      	bne.n	8017f4e <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	2222      	movs	r2, #34	; 0x22
 8017f4c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f52:	4619      	mov	r1, r3
 8017f54:	68f8      	ldr	r0, [r7, #12]
 8017f56:	f000 fd03 	bl	8018960 <I2C_ITError>
      if (treatdmanack == 1U)
 8017f5a:	e005      	b.n	8017f68 <I2C_Slave_ISR_DMA+0x388>
 8017f5c:	e004      	b.n	8017f68 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	2210      	movs	r2, #16
 8017f64:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017f66:	e011      	b.n	8017f8c <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8017f68:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017f6a:	e00f      	b.n	8017f8c <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	08db      	lsrs	r3, r3, #3
 8017f70:	f003 0301 	and.w	r3, r3, #1
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d009      	beq.n	8017f8c <I2C_Slave_ISR_DMA+0x3ac>
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	08db      	lsrs	r3, r3, #3
 8017f7c:	f003 0301 	and.w	r3, r3, #1
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d003      	beq.n	8017f8c <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8017f84:	68b9      	ldr	r1, [r7, #8]
 8017f86:	68f8      	ldr	r0, [r7, #12]
 8017f88:	f000 f8b2 	bl	80180f0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	2200      	movs	r2, #0
 8017f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8017f94:	2300      	movs	r3, #0
}
 8017f96:	4618      	mov	r0, r3
 8017f98:	3720      	adds	r7, #32
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}
 8017f9e:	bf00      	nop

08017fa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b086      	sub	sp, #24
 8017fa4:	af02      	add	r7, sp, #8
 8017fa6:	60f8      	str	r0, [r7, #12]
 8017fa8:	4608      	mov	r0, r1
 8017faa:	4611      	mov	r1, r2
 8017fac:	461a      	mov	r2, r3
 8017fae:	4603      	mov	r3, r0
 8017fb0:	817b      	strh	r3, [r7, #10]
 8017fb2:	460b      	mov	r3, r1
 8017fb4:	813b      	strh	r3, [r7, #8]
 8017fb6:	4613      	mov	r3, r2
 8017fb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8017fba:	88fb      	ldrh	r3, [r7, #6]
 8017fbc:	b2da      	uxtb	r2, r3
 8017fbe:	8979      	ldrh	r1, [r7, #10]
 8017fc0:	4b20      	ldr	r3, [pc, #128]	; (8018044 <I2C_RequestMemoryWrite+0xa4>)
 8017fc2:	9300      	str	r3, [sp, #0]
 8017fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017fc8:	68f8      	ldr	r0, [r7, #12]
 8017fca:	f001 f8a7 	bl	801911c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017fce:	69fa      	ldr	r2, [r7, #28]
 8017fd0:	69b9      	ldr	r1, [r7, #24]
 8017fd2:	68f8      	ldr	r0, [r7, #12]
 8017fd4:	f000 ffc0 	bl	8018f58 <I2C_WaitOnTXISFlagUntilTimeout>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d001      	beq.n	8017fe2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8017fde:	2301      	movs	r3, #1
 8017fe0:	e02c      	b.n	801803c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017fe2:	88fb      	ldrh	r3, [r7, #6]
 8017fe4:	2b01      	cmp	r3, #1
 8017fe6:	d105      	bne.n	8017ff4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017fe8:	893b      	ldrh	r3, [r7, #8]
 8017fea:	b2da      	uxtb	r2, r3
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	629a      	str	r2, [r3, #40]	; 0x28
 8017ff2:	e015      	b.n	8018020 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017ff4:	893b      	ldrh	r3, [r7, #8]
 8017ff6:	0a1b      	lsrs	r3, r3, #8
 8017ff8:	b29b      	uxth	r3, r3
 8017ffa:	b2da      	uxtb	r2, r3
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018002:	69fa      	ldr	r2, [r7, #28]
 8018004:	69b9      	ldr	r1, [r7, #24]
 8018006:	68f8      	ldr	r0, [r7, #12]
 8018008:	f000 ffa6 	bl	8018f58 <I2C_WaitOnTXISFlagUntilTimeout>
 801800c:	4603      	mov	r3, r0
 801800e:	2b00      	cmp	r3, #0
 8018010:	d001      	beq.n	8018016 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8018012:	2301      	movs	r3, #1
 8018014:	e012      	b.n	801803c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018016:	893b      	ldrh	r3, [r7, #8]
 8018018:	b2da      	uxtb	r2, r3
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	9300      	str	r3, [sp, #0]
 8018024:	69bb      	ldr	r3, [r7, #24]
 8018026:	2200      	movs	r2, #0
 8018028:	2180      	movs	r1, #128	; 0x80
 801802a:	68f8      	ldr	r0, [r7, #12]
 801802c:	f000 ff54 	bl	8018ed8 <I2C_WaitOnFlagUntilTimeout>
 8018030:	4603      	mov	r3, r0
 8018032:	2b00      	cmp	r3, #0
 8018034:	d001      	beq.n	801803a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8018036:	2301      	movs	r3, #1
 8018038:	e000      	b.n	801803c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801803a:	2300      	movs	r3, #0
}
 801803c:	4618      	mov	r0, r3
 801803e:	3710      	adds	r7, #16
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}
 8018044:	80002000 	.word	0x80002000

08018048 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b086      	sub	sp, #24
 801804c:	af02      	add	r7, sp, #8
 801804e:	60f8      	str	r0, [r7, #12]
 8018050:	4608      	mov	r0, r1
 8018052:	4611      	mov	r1, r2
 8018054:	461a      	mov	r2, r3
 8018056:	4603      	mov	r3, r0
 8018058:	817b      	strh	r3, [r7, #10]
 801805a:	460b      	mov	r3, r1
 801805c:	813b      	strh	r3, [r7, #8]
 801805e:	4613      	mov	r3, r2
 8018060:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8018062:	88fb      	ldrh	r3, [r7, #6]
 8018064:	b2da      	uxtb	r2, r3
 8018066:	8979      	ldrh	r1, [r7, #10]
 8018068:	4b20      	ldr	r3, [pc, #128]	; (80180ec <I2C_RequestMemoryRead+0xa4>)
 801806a:	9300      	str	r3, [sp, #0]
 801806c:	2300      	movs	r3, #0
 801806e:	68f8      	ldr	r0, [r7, #12]
 8018070:	f001 f854 	bl	801911c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018074:	69fa      	ldr	r2, [r7, #28]
 8018076:	69b9      	ldr	r1, [r7, #24]
 8018078:	68f8      	ldr	r0, [r7, #12]
 801807a:	f000 ff6d 	bl	8018f58 <I2C_WaitOnTXISFlagUntilTimeout>
 801807e:	4603      	mov	r3, r0
 8018080:	2b00      	cmp	r3, #0
 8018082:	d001      	beq.n	8018088 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8018084:	2301      	movs	r3, #1
 8018086:	e02c      	b.n	80180e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018088:	88fb      	ldrh	r3, [r7, #6]
 801808a:	2b01      	cmp	r3, #1
 801808c:	d105      	bne.n	801809a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801808e:	893b      	ldrh	r3, [r7, #8]
 8018090:	b2da      	uxtb	r2, r3
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	629a      	str	r2, [r3, #40]	; 0x28
 8018098:	e015      	b.n	80180c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801809a:	893b      	ldrh	r3, [r7, #8]
 801809c:	0a1b      	lsrs	r3, r3, #8
 801809e:	b29b      	uxth	r3, r3
 80180a0:	b2da      	uxtb	r2, r3
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80180a8:	69fa      	ldr	r2, [r7, #28]
 80180aa:	69b9      	ldr	r1, [r7, #24]
 80180ac:	68f8      	ldr	r0, [r7, #12]
 80180ae:	f000 ff53 	bl	8018f58 <I2C_WaitOnTXISFlagUntilTimeout>
 80180b2:	4603      	mov	r3, r0
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d001      	beq.n	80180bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80180b8:	2301      	movs	r3, #1
 80180ba:	e012      	b.n	80180e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80180bc:	893b      	ldrh	r3, [r7, #8]
 80180be:	b2da      	uxtb	r2, r3
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80180c6:	69fb      	ldr	r3, [r7, #28]
 80180c8:	9300      	str	r3, [sp, #0]
 80180ca:	69bb      	ldr	r3, [r7, #24]
 80180cc:	2200      	movs	r2, #0
 80180ce:	2140      	movs	r1, #64	; 0x40
 80180d0:	68f8      	ldr	r0, [r7, #12]
 80180d2:	f000 ff01 	bl	8018ed8 <I2C_WaitOnFlagUntilTimeout>
 80180d6:	4603      	mov	r3, r0
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d001      	beq.n	80180e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80180dc:	2301      	movs	r3, #1
 80180de:	e000      	b.n	80180e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80180e0:	2300      	movs	r3, #0
}
 80180e2:	4618      	mov	r0, r3
 80180e4:	3710      	adds	r7, #16
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd80      	pop	{r7, pc}
 80180ea:	bf00      	nop
 80180ec:	80002000 	.word	0x80002000

080180f0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b084      	sub	sp, #16
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018100:	b2db      	uxtb	r3, r3
 8018102:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018106:	2b28      	cmp	r3, #40	; 0x28
 8018108:	d16a      	bne.n	80181e0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	699b      	ldr	r3, [r3, #24]
 8018110:	0c1b      	lsrs	r3, r3, #16
 8018112:	b2db      	uxtb	r3, r3
 8018114:	f003 0301 	and.w	r3, r3, #1
 8018118:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	699b      	ldr	r3, [r3, #24]
 8018120:	0c1b      	lsrs	r3, r3, #16
 8018122:	b29b      	uxth	r3, r3
 8018124:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8018128:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	689b      	ldr	r3, [r3, #8]
 8018130:	b29b      	uxth	r3, r3
 8018132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018136:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	68db      	ldr	r3, [r3, #12]
 801813e:	b29b      	uxth	r3, r3
 8018140:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8018144:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	68db      	ldr	r3, [r3, #12]
 801814a:	2b02      	cmp	r3, #2
 801814c:	d138      	bne.n	80181c0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 801814e:	897b      	ldrh	r3, [r7, #10]
 8018150:	09db      	lsrs	r3, r3, #7
 8018152:	b29a      	uxth	r2, r3
 8018154:	89bb      	ldrh	r3, [r7, #12]
 8018156:	4053      	eors	r3, r2
 8018158:	b29b      	uxth	r3, r3
 801815a:	f003 0306 	and.w	r3, r3, #6
 801815e:	2b00      	cmp	r3, #0
 8018160:	d11c      	bne.n	801819c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8018162:	897b      	ldrh	r3, [r7, #10]
 8018164:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801816a:	1c5a      	adds	r2, r3, #1
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018174:	2b02      	cmp	r3, #2
 8018176:	d13b      	bne.n	80181f0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2200      	movs	r2, #0
 801817c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	2208      	movs	r2, #8
 8018184:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	2200      	movs	r2, #0
 801818a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801818e:	89ba      	ldrh	r2, [r7, #12]
 8018190:	7bfb      	ldrb	r3, [r7, #15]
 8018192:	4619      	mov	r1, r3
 8018194:	6878      	ldr	r0, [r7, #4]
 8018196:	f7ff f9ce 	bl	8017536 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801819a:	e029      	b.n	80181f0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 801819c:	893b      	ldrh	r3, [r7, #8]
 801819e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80181a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80181a4:	6878      	ldr	r0, [r7, #4]
 80181a6:	f001 f84b 	bl	8019240 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	2200      	movs	r2, #0
 80181ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80181b2:	89ba      	ldrh	r2, [r7, #12]
 80181b4:	7bfb      	ldrb	r3, [r7, #15]
 80181b6:	4619      	mov	r1, r3
 80181b8:	6878      	ldr	r0, [r7, #4]
 80181ba:	f7ff f9bc 	bl	8017536 <HAL_I2C_AddrCallback>
}
 80181be:	e017      	b.n	80181f0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80181c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	f001 f83b 	bl	8019240 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	2200      	movs	r2, #0
 80181ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80181d2:	89ba      	ldrh	r2, [r7, #12]
 80181d4:	7bfb      	ldrb	r3, [r7, #15]
 80181d6:	4619      	mov	r1, r3
 80181d8:	6878      	ldr	r0, [r7, #4]
 80181da:	f7ff f9ac 	bl	8017536 <HAL_I2C_AddrCallback>
}
 80181de:	e007      	b.n	80181f0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	2208      	movs	r2, #8
 80181e6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2200      	movs	r2, #0
 80181ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80181f0:	bf00      	nop
 80181f2:	3710      	adds	r7, #16
 80181f4:	46bd      	mov	sp, r7
 80181f6:	bd80      	pop	{r7, pc}

080181f8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b082      	sub	sp, #8
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2200      	movs	r2, #0
 8018204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801820e:	b2db      	uxtb	r3, r3
 8018210:	2b21      	cmp	r3, #33	; 0x21
 8018212:	d115      	bne.n	8018240 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2220      	movs	r2, #32
 8018218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	2211      	movs	r2, #17
 8018220:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	2200      	movs	r2, #0
 8018226:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8018228:	2101      	movs	r1, #1
 801822a:	6878      	ldr	r0, [r7, #4]
 801822c:	f001 f808 	bl	8019240 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2200      	movs	r2, #0
 8018234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8018238:	6878      	ldr	r0, [r7, #4]
 801823a:	f7ff f954 	bl	80174e6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801823e:	e014      	b.n	801826a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	2220      	movs	r2, #32
 8018244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2212      	movs	r2, #18
 801824c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	2200      	movs	r2, #0
 8018252:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8018254:	2102      	movs	r1, #2
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	f000 fff2 	bl	8019240 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	2200      	movs	r2, #0
 8018260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8018264:	6878      	ldr	r0, [r7, #4]
 8018266:	f7ff f948 	bl	80174fa <HAL_I2C_MasterRxCpltCallback>
}
 801826a:	bf00      	nop
 801826c:	3708      	adds	r7, #8
 801826e:	46bd      	mov	sp, r7
 8018270:	bd80      	pop	{r7, pc}

08018272 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8018272:	b580      	push	{r7, lr}
 8018274:	b084      	sub	sp, #16
 8018276:	af00      	add	r7, sp, #0
 8018278:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	2200      	movs	r2, #0
 8018286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	0b9b      	lsrs	r3, r3, #14
 801828e:	f003 0301 	and.w	r3, r3, #1
 8018292:	2b00      	cmp	r3, #0
 8018294:	d008      	beq.n	80182a8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	681a      	ldr	r2, [r3, #0]
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80182a4:	601a      	str	r2, [r3, #0]
 80182a6:	e00d      	b.n	80182c4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	0bdb      	lsrs	r3, r3, #15
 80182ac:	f003 0301 	and.w	r3, r3, #1
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d007      	beq.n	80182c4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	681a      	ldr	r2, [r3, #0]
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80182c2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80182ca:	b2db      	uxtb	r3, r3
 80182cc:	2b29      	cmp	r3, #41	; 0x29
 80182ce:	d112      	bne.n	80182f6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2228      	movs	r2, #40	; 0x28
 80182d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	2221      	movs	r2, #33	; 0x21
 80182dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80182de:	2101      	movs	r1, #1
 80182e0:	6878      	ldr	r0, [r7, #4]
 80182e2:	f000 ffad 	bl	8019240 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	2200      	movs	r2, #0
 80182ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80182ee:	6878      	ldr	r0, [r7, #4]
 80182f0:	f7ff f90d 	bl	801750e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80182f4:	e017      	b.n	8018326 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80182fc:	b2db      	uxtb	r3, r3
 80182fe:	2b2a      	cmp	r3, #42	; 0x2a
 8018300:	d111      	bne.n	8018326 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	2228      	movs	r2, #40	; 0x28
 8018306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	2222      	movs	r2, #34	; 0x22
 801830e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8018310:	2102      	movs	r1, #2
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f000 ff94 	bl	8019240 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	2200      	movs	r2, #0
 801831c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018320:	6878      	ldr	r0, [r7, #4]
 8018322:	f7ff f8fe 	bl	8017522 <HAL_I2C_SlaveRxCpltCallback>
}
 8018326:	bf00      	nop
 8018328:	3710      	adds	r7, #16
 801832a:	46bd      	mov	sp, r7
 801832c:	bd80      	pop	{r7, pc}
	...

08018330 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b086      	sub	sp, #24
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801833a:	683b      	ldr	r3, [r7, #0]
 801833c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	2220      	movs	r2, #32
 8018344:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801834c:	b2db      	uxtb	r3, r3
 801834e:	2b21      	cmp	r3, #33	; 0x21
 8018350:	d107      	bne.n	8018362 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8018352:	2101      	movs	r1, #1
 8018354:	6878      	ldr	r0, [r7, #4]
 8018356:	f000 ff73 	bl	8019240 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	2211      	movs	r2, #17
 801835e:	631a      	str	r2, [r3, #48]	; 0x30
 8018360:	e00c      	b.n	801837c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018368:	b2db      	uxtb	r3, r3
 801836a:	2b22      	cmp	r3, #34	; 0x22
 801836c:	d106      	bne.n	801837c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801836e:	2102      	movs	r1, #2
 8018370:	6878      	ldr	r0, [r7, #4]
 8018372:	f000 ff65 	bl	8019240 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	2212      	movs	r2, #18
 801837a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	6859      	ldr	r1, [r3, #4]
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	681a      	ldr	r2, [r3, #0]
 8018386:	4b4d      	ldr	r3, [pc, #308]	; (80184bc <I2C_ITMasterCplt+0x18c>)
 8018388:	400b      	ands	r3, r1
 801838a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2200      	movs	r2, #0
 8018390:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	4a4a      	ldr	r2, [pc, #296]	; (80184c0 <I2C_ITMasterCplt+0x190>)
 8018396:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8018398:	697b      	ldr	r3, [r7, #20]
 801839a:	091b      	lsrs	r3, r3, #4
 801839c:	f003 0301 	and.w	r3, r3, #1
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d009      	beq.n	80183b8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	2210      	movs	r2, #16
 80183aa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80183b0:	f043 0204 	orr.w	r2, r3, #4
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80183be:	b2db      	uxtb	r3, r3
 80183c0:	2b60      	cmp	r3, #96	; 0x60
 80183c2:	d10b      	bne.n	80183dc <I2C_ITMasterCplt+0xac>
 80183c4:	697b      	ldr	r3, [r7, #20]
 80183c6:	089b      	lsrs	r3, r3, #2
 80183c8:	f003 0301 	and.w	r3, r3, #1
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d005      	beq.n	80183dc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183d6:	b2db      	uxtb	r3, r3
 80183d8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80183da:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80183dc:	6878      	ldr	r0, [r7, #4]
 80183de:	f000 fbb6 	bl	8018b4e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80183e6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80183ee:	b2db      	uxtb	r3, r3
 80183f0:	2b60      	cmp	r3, #96	; 0x60
 80183f2:	d002      	beq.n	80183fa <I2C_ITMasterCplt+0xca>
 80183f4:	693b      	ldr	r3, [r7, #16]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d006      	beq.n	8018408 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80183fe:	4619      	mov	r1, r3
 8018400:	6878      	ldr	r0, [r7, #4]
 8018402:	f000 faad 	bl	8018960 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8018406:	e054      	b.n	80184b2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801840e:	b2db      	uxtb	r3, r3
 8018410:	2b21      	cmp	r3, #33	; 0x21
 8018412:	d124      	bne.n	801845e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	2220      	movs	r2, #32
 8018418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2200      	movs	r2, #0
 8018420:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018428:	b2db      	uxtb	r3, r3
 801842a:	2b40      	cmp	r3, #64	; 0x40
 801842c:	d10b      	bne.n	8018446 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	2200      	movs	r2, #0
 8018432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	2200      	movs	r2, #0
 801843a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 801843e:	6878      	ldr	r0, [r7, #4]
 8018440:	f7ff f891 	bl	8017566 <HAL_I2C_MemTxCpltCallback>
}
 8018444:	e035      	b.n	80184b2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	2200      	movs	r2, #0
 801844a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	2200      	movs	r2, #0
 8018452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8018456:	6878      	ldr	r0, [r7, #4]
 8018458:	f7ff f845 	bl	80174e6 <HAL_I2C_MasterTxCpltCallback>
}
 801845c:	e029      	b.n	80184b2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018464:	b2db      	uxtb	r3, r3
 8018466:	2b22      	cmp	r3, #34	; 0x22
 8018468:	d123      	bne.n	80184b2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	2220      	movs	r2, #32
 801846e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	2200      	movs	r2, #0
 8018476:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801847e:	b2db      	uxtb	r3, r3
 8018480:	2b40      	cmp	r3, #64	; 0x40
 8018482:	d10b      	bne.n	801849c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	2200      	movs	r2, #0
 8018488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	2200      	movs	r2, #0
 8018490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8018494:	6878      	ldr	r0, [r7, #4]
 8018496:	f7f8 fc5b 	bl	8010d50 <HAL_I2C_MemRxCpltCallback>
}
 801849a:	e00a      	b.n	80184b2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	2200      	movs	r2, #0
 80184a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	2200      	movs	r2, #0
 80184a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80184ac:	6878      	ldr	r0, [r7, #4]
 80184ae:	f7ff f824 	bl	80174fa <HAL_I2C_MasterRxCpltCallback>
}
 80184b2:	bf00      	nop
 80184b4:	3718      	adds	r7, #24
 80184b6:	46bd      	mov	sp, r7
 80184b8:	bd80      	pop	{r7, pc}
 80184ba:	bf00      	nop
 80184bc:	fe00e800 	.word	0xfe00e800
 80184c0:	ffff0000 	.word	0xffff0000

080184c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b086      	sub	sp, #24
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
 80184cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80184d6:	683b      	ldr	r3, [r7, #0]
 80184d8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80184e0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	2220      	movs	r2, #32
 80184e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80184ea:	7bfb      	ldrb	r3, [r7, #15]
 80184ec:	2b21      	cmp	r3, #33	; 0x21
 80184ee:	d002      	beq.n	80184f6 <I2C_ITSlaveCplt+0x32>
 80184f0:	7bfb      	ldrb	r3, [r7, #15]
 80184f2:	2b29      	cmp	r3, #41	; 0x29
 80184f4:	d108      	bne.n	8018508 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80184f6:	f248 0101 	movw	r1, #32769	; 0x8001
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f000 fea0 	bl	8019240 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2221      	movs	r2, #33	; 0x21
 8018504:	631a      	str	r2, [r3, #48]	; 0x30
 8018506:	e00d      	b.n	8018524 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018508:	7bfb      	ldrb	r3, [r7, #15]
 801850a:	2b22      	cmp	r3, #34	; 0x22
 801850c:	d002      	beq.n	8018514 <I2C_ITSlaveCplt+0x50>
 801850e:	7bfb      	ldrb	r3, [r7, #15]
 8018510:	2b2a      	cmp	r3, #42	; 0x2a
 8018512:	d107      	bne.n	8018524 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8018514:	f248 0102 	movw	r1, #32770	; 0x8002
 8018518:	6878      	ldr	r0, [r7, #4]
 801851a:	f000 fe91 	bl	8019240 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	2222      	movs	r2, #34	; 0x22
 8018522:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	685a      	ldr	r2, [r3, #4]
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018532:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	6859      	ldr	r1, [r3, #4]
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681a      	ldr	r2, [r3, #0]
 801853e:	4b80      	ldr	r3, [pc, #512]	; (8018740 <I2C_ITSlaveCplt+0x27c>)
 8018540:	400b      	ands	r3, r1
 8018542:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8018544:	6878      	ldr	r0, [r7, #4]
 8018546:	f000 fb02 	bl	8018b4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801854a:	693b      	ldr	r3, [r7, #16]
 801854c:	0b9b      	lsrs	r3, r3, #14
 801854e:	f003 0301 	and.w	r3, r3, #1
 8018552:	2b00      	cmp	r3, #0
 8018554:	d07a      	beq.n	801864c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	681a      	ldr	r2, [r3, #0]
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8018564:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801856a:	2b00      	cmp	r3, #0
 801856c:	f000 8111 	beq.w	8018792 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	4a73      	ldr	r2, [pc, #460]	; (8018744 <I2C_ITSlaveCplt+0x280>)
 8018578:	4293      	cmp	r3, r2
 801857a:	d059      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	4a71      	ldr	r2, [pc, #452]	; (8018748 <I2C_ITSlaveCplt+0x284>)
 8018584:	4293      	cmp	r3, r2
 8018586:	d053      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	4a6f      	ldr	r2, [pc, #444]	; (801874c <I2C_ITSlaveCplt+0x288>)
 8018590:	4293      	cmp	r3, r2
 8018592:	d04d      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	4a6d      	ldr	r2, [pc, #436]	; (8018750 <I2C_ITSlaveCplt+0x28c>)
 801859c:	4293      	cmp	r3, r2
 801859e:	d047      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	4a6b      	ldr	r2, [pc, #428]	; (8018754 <I2C_ITSlaveCplt+0x290>)
 80185a8:	4293      	cmp	r3, r2
 80185aa:	d041      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	4a69      	ldr	r2, [pc, #420]	; (8018758 <I2C_ITSlaveCplt+0x294>)
 80185b4:	4293      	cmp	r3, r2
 80185b6:	d03b      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	4a67      	ldr	r2, [pc, #412]	; (801875c <I2C_ITSlaveCplt+0x298>)
 80185c0:	4293      	cmp	r3, r2
 80185c2:	d035      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	4a65      	ldr	r2, [pc, #404]	; (8018760 <I2C_ITSlaveCplt+0x29c>)
 80185cc:	4293      	cmp	r3, r2
 80185ce:	d02f      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	4a63      	ldr	r2, [pc, #396]	; (8018764 <I2C_ITSlaveCplt+0x2a0>)
 80185d8:	4293      	cmp	r3, r2
 80185da:	d029      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	4a61      	ldr	r2, [pc, #388]	; (8018768 <I2C_ITSlaveCplt+0x2a4>)
 80185e4:	4293      	cmp	r3, r2
 80185e6:	d023      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	4a5f      	ldr	r2, [pc, #380]	; (801876c <I2C_ITSlaveCplt+0x2a8>)
 80185f0:	4293      	cmp	r3, r2
 80185f2:	d01d      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	4a5d      	ldr	r2, [pc, #372]	; (8018770 <I2C_ITSlaveCplt+0x2ac>)
 80185fc:	4293      	cmp	r3, r2
 80185fe:	d017      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	4a5b      	ldr	r2, [pc, #364]	; (8018774 <I2C_ITSlaveCplt+0x2b0>)
 8018608:	4293      	cmp	r3, r2
 801860a:	d011      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	4a59      	ldr	r2, [pc, #356]	; (8018778 <I2C_ITSlaveCplt+0x2b4>)
 8018614:	4293      	cmp	r3, r2
 8018616:	d00b      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	4a57      	ldr	r2, [pc, #348]	; (801877c <I2C_ITSlaveCplt+0x2b8>)
 8018620:	4293      	cmp	r3, r2
 8018622:	d005      	beq.n	8018630 <I2C_ITSlaveCplt+0x16c>
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	4a55      	ldr	r2, [pc, #340]	; (8018780 <I2C_ITSlaveCplt+0x2bc>)
 801862c:	4293      	cmp	r3, r2
 801862e:	d105      	bne.n	801863c <I2C_ITSlaveCplt+0x178>
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	685b      	ldr	r3, [r3, #4]
 8018638:	b29b      	uxth	r3, r3
 801863a:	e004      	b.n	8018646 <I2C_ITSlaveCplt+0x182>
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	685b      	ldr	r3, [r3, #4]
 8018644:	b29b      	uxth	r3, r3
 8018646:	687a      	ldr	r2, [r7, #4]
 8018648:	8553      	strh	r3, [r2, #42]	; 0x2a
 801864a:	e0a2      	b.n	8018792 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801864c:	693b      	ldr	r3, [r7, #16]
 801864e:	0bdb      	lsrs	r3, r3, #15
 8018650:	f003 0301 	and.w	r3, r3, #1
 8018654:	2b00      	cmp	r3, #0
 8018656:	f000 809c 	beq.w	8018792 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	681a      	ldr	r2, [r3, #0]
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018668:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801866e:	2b00      	cmp	r3, #0
 8018670:	f000 808f 	beq.w	8018792 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	4a32      	ldr	r2, [pc, #200]	; (8018744 <I2C_ITSlaveCplt+0x280>)
 801867c:	4293      	cmp	r3, r2
 801867e:	d059      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	4a30      	ldr	r2, [pc, #192]	; (8018748 <I2C_ITSlaveCplt+0x284>)
 8018688:	4293      	cmp	r3, r2
 801868a:	d053      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	4a2e      	ldr	r2, [pc, #184]	; (801874c <I2C_ITSlaveCplt+0x288>)
 8018694:	4293      	cmp	r3, r2
 8018696:	d04d      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	4a2c      	ldr	r2, [pc, #176]	; (8018750 <I2C_ITSlaveCplt+0x28c>)
 80186a0:	4293      	cmp	r3, r2
 80186a2:	d047      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	4a2a      	ldr	r2, [pc, #168]	; (8018754 <I2C_ITSlaveCplt+0x290>)
 80186ac:	4293      	cmp	r3, r2
 80186ae:	d041      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	4a28      	ldr	r2, [pc, #160]	; (8018758 <I2C_ITSlaveCplt+0x294>)
 80186b8:	4293      	cmp	r3, r2
 80186ba:	d03b      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	4a26      	ldr	r2, [pc, #152]	; (801875c <I2C_ITSlaveCplt+0x298>)
 80186c4:	4293      	cmp	r3, r2
 80186c6:	d035      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	4a24      	ldr	r2, [pc, #144]	; (8018760 <I2C_ITSlaveCplt+0x29c>)
 80186d0:	4293      	cmp	r3, r2
 80186d2:	d02f      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	4a22      	ldr	r2, [pc, #136]	; (8018764 <I2C_ITSlaveCplt+0x2a0>)
 80186dc:	4293      	cmp	r3, r2
 80186de:	d029      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	4a20      	ldr	r2, [pc, #128]	; (8018768 <I2C_ITSlaveCplt+0x2a4>)
 80186e8:	4293      	cmp	r3, r2
 80186ea:	d023      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	4a1e      	ldr	r2, [pc, #120]	; (801876c <I2C_ITSlaveCplt+0x2a8>)
 80186f4:	4293      	cmp	r3, r2
 80186f6:	d01d      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	4a1c      	ldr	r2, [pc, #112]	; (8018770 <I2C_ITSlaveCplt+0x2ac>)
 8018700:	4293      	cmp	r3, r2
 8018702:	d017      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	4a1a      	ldr	r2, [pc, #104]	; (8018774 <I2C_ITSlaveCplt+0x2b0>)
 801870c:	4293      	cmp	r3, r2
 801870e:	d011      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	4a18      	ldr	r2, [pc, #96]	; (8018778 <I2C_ITSlaveCplt+0x2b4>)
 8018718:	4293      	cmp	r3, r2
 801871a:	d00b      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	4a16      	ldr	r2, [pc, #88]	; (801877c <I2C_ITSlaveCplt+0x2b8>)
 8018724:	4293      	cmp	r3, r2
 8018726:	d005      	beq.n	8018734 <I2C_ITSlaveCplt+0x270>
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	4a14      	ldr	r2, [pc, #80]	; (8018780 <I2C_ITSlaveCplt+0x2bc>)
 8018730:	4293      	cmp	r3, r2
 8018732:	d127      	bne.n	8018784 <I2C_ITSlaveCplt+0x2c0>
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	685b      	ldr	r3, [r3, #4]
 801873c:	b29b      	uxth	r3, r3
 801873e:	e026      	b.n	801878e <I2C_ITSlaveCplt+0x2ca>
 8018740:	fe00e800 	.word	0xfe00e800
 8018744:	40020010 	.word	0x40020010
 8018748:	40020028 	.word	0x40020028
 801874c:	40020040 	.word	0x40020040
 8018750:	40020058 	.word	0x40020058
 8018754:	40020070 	.word	0x40020070
 8018758:	40020088 	.word	0x40020088
 801875c:	400200a0 	.word	0x400200a0
 8018760:	400200b8 	.word	0x400200b8
 8018764:	40020410 	.word	0x40020410
 8018768:	40020428 	.word	0x40020428
 801876c:	40020440 	.word	0x40020440
 8018770:	40020458 	.word	0x40020458
 8018774:	40020470 	.word	0x40020470
 8018778:	40020488 	.word	0x40020488
 801877c:	400204a0 	.word	0x400204a0
 8018780:	400204b8 	.word	0x400204b8
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	b29b      	uxth	r3, r3
 801878e:	687a      	ldr	r2, [r7, #4]
 8018790:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8018792:	697b      	ldr	r3, [r7, #20]
 8018794:	089b      	lsrs	r3, r3, #2
 8018796:	f003 0301 	and.w	r3, r3, #1
 801879a:	2b00      	cmp	r3, #0
 801879c:	d020      	beq.n	80187e0 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801879e:	697b      	ldr	r3, [r7, #20]
 80187a0:	f023 0304 	bic.w	r3, r3, #4
 80187a4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187b0:	b2d2      	uxtb	r2, r2
 80187b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187b8:	1c5a      	adds	r2, r3, #1
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d00c      	beq.n	80187e0 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80187ca:	3b01      	subs	r3, #1
 80187cc:	b29a      	uxth	r2, r3
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187d6:	b29b      	uxth	r3, r3
 80187d8:	3b01      	subs	r3, #1
 80187da:	b29a      	uxth	r2, r3
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187e4:	b29b      	uxth	r3, r3
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d005      	beq.n	80187f6 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187ee:	f043 0204 	orr.w	r2, r3, #4
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	2200      	movs	r2, #0
 80187fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	2200      	movs	r2, #0
 8018802:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018808:	2b00      	cmp	r3, #0
 801880a:	d010      	beq.n	801882e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018810:	4619      	mov	r1, r3
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f000 f8a4 	bl	8018960 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801881e:	b2db      	uxtb	r3, r3
 8018820:	2b28      	cmp	r3, #40	; 0x28
 8018822:	d141      	bne.n	80188a8 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8018824:	6979      	ldr	r1, [r7, #20]
 8018826:	6878      	ldr	r0, [r7, #4]
 8018828:	f000 f844 	bl	80188b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801882c:	e03c      	b.n	80188a8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018832:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018836:	d014      	beq.n	8018862 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f7ff fd1a 	bl	8018272 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	4a1b      	ldr	r2, [pc, #108]	; (80188b0 <I2C_ITSlaveCplt+0x3ec>)
 8018842:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	2220      	movs	r2, #32
 8018848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	2200      	movs	r2, #0
 8018850:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	2200      	movs	r2, #0
 8018856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801885a:	6878      	ldr	r0, [r7, #4]
 801885c:	f7fe fe79 	bl	8017552 <HAL_I2C_ListenCpltCallback>
}
 8018860:	e022      	b.n	80188a8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018868:	b2db      	uxtb	r3, r3
 801886a:	2b22      	cmp	r3, #34	; 0x22
 801886c:	d10e      	bne.n	801888c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	2220      	movs	r2, #32
 8018872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	2200      	movs	r2, #0
 801887a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	2200      	movs	r2, #0
 8018880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	f7fe fe4c 	bl	8017522 <HAL_I2C_SlaveRxCpltCallback>
}
 801888a:	e00d      	b.n	80188a8 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	2220      	movs	r2, #32
 8018890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2200      	movs	r2, #0
 8018898:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	2200      	movs	r2, #0
 801889e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80188a2:	6878      	ldr	r0, [r7, #4]
 80188a4:	f7fe fe33 	bl	801750e <HAL_I2C_SlaveTxCpltCallback>
}
 80188a8:	bf00      	nop
 80188aa:	3718      	adds	r7, #24
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}
 80188b0:	ffff0000 	.word	0xffff0000

080188b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b082      	sub	sp, #8
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
 80188bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	4a26      	ldr	r2, [pc, #152]	; (801895c <I2C_ITListenCplt+0xa8>)
 80188c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	2200      	movs	r2, #0
 80188c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	2220      	movs	r2, #32
 80188ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	2200      	movs	r2, #0
 80188d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	2200      	movs	r2, #0
 80188de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80188e0:	683b      	ldr	r3, [r7, #0]
 80188e2:	089b      	lsrs	r3, r3, #2
 80188e4:	f003 0301 	and.w	r3, r3, #1
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d022      	beq.n	8018932 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188f6:	b2d2      	uxtb	r2, r2
 80188f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188fe:	1c5a      	adds	r2, r3, #1
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018908:	2b00      	cmp	r3, #0
 801890a:	d012      	beq.n	8018932 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018910:	3b01      	subs	r3, #1
 8018912:	b29a      	uxth	r2, r3
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801891c:	b29b      	uxth	r3, r3
 801891e:	3b01      	subs	r3, #1
 8018920:	b29a      	uxth	r2, r3
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801892a:	f043 0204 	orr.w	r2, r3, #4
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018932:	f248 0103 	movw	r1, #32771	; 0x8003
 8018936:	6878      	ldr	r0, [r7, #4]
 8018938:	f000 fc82 	bl	8019240 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	2210      	movs	r2, #16
 8018942:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2200      	movs	r2, #0
 8018948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f7fe fe00 	bl	8017552 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8018952:	bf00      	nop
 8018954:	3708      	adds	r7, #8
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	ffff0000 	.word	0xffff0000

08018960 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8018960:	b580      	push	{r7, lr}
 8018962:	b084      	sub	sp, #16
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
 8018968:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	2200      	movs	r2, #0
 8018976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	4a5d      	ldr	r2, [pc, #372]	; (8018af4 <I2C_ITError+0x194>)
 801897e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	2200      	movs	r2, #0
 8018984:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	431a      	orrs	r2, r3
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8018992:	7bfb      	ldrb	r3, [r7, #15]
 8018994:	2b28      	cmp	r3, #40	; 0x28
 8018996:	d005      	beq.n	80189a4 <I2C_ITError+0x44>
 8018998:	7bfb      	ldrb	r3, [r7, #15]
 801899a:	2b29      	cmp	r3, #41	; 0x29
 801899c:	d002      	beq.n	80189a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801899e:	7bfb      	ldrb	r3, [r7, #15]
 80189a0:	2b2a      	cmp	r3, #42	; 0x2a
 80189a2:	d10b      	bne.n	80189bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80189a4:	2103      	movs	r1, #3
 80189a6:	6878      	ldr	r0, [r7, #4]
 80189a8:	f000 fc4a 	bl	8019240 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2228      	movs	r2, #40	; 0x28
 80189b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	4a50      	ldr	r2, [pc, #320]	; (8018af8 <I2C_ITError+0x198>)
 80189b8:	635a      	str	r2, [r3, #52]	; 0x34
 80189ba:	e011      	b.n	80189e0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80189bc:	f248 0103 	movw	r1, #32771	; 0x8003
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f000 fc3d 	bl	8019240 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80189cc:	b2db      	uxtb	r3, r3
 80189ce:	2b60      	cmp	r3, #96	; 0x60
 80189d0:	d003      	beq.n	80189da <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2220      	movs	r2, #32
 80189d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	2200      	movs	r2, #0
 80189de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189e4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d039      	beq.n	8018a62 <I2C_ITError+0x102>
 80189ee:	68bb      	ldr	r3, [r7, #8]
 80189f0:	2b11      	cmp	r3, #17
 80189f2:	d002      	beq.n	80189fa <I2C_ITError+0x9a>
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	2b21      	cmp	r3, #33	; 0x21
 80189f8:	d133      	bne.n	8018a62 <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018a08:	d107      	bne.n	8018a1a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	681a      	ldr	r2, [r3, #0]
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8018a18:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f7fd fab6 	bl	8015f90 <HAL_DMA_GetState>
 8018a24:	4603      	mov	r3, r0
 8018a26:	2b01      	cmp	r3, #1
 8018a28:	d017      	beq.n	8018a5a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a2e:	4a33      	ldr	r2, [pc, #204]	; (8018afc <I2C_ITError+0x19c>)
 8018a30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	2200      	movs	r2, #0
 8018a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7fc f938 	bl	8014cb4 <HAL_DMA_Abort_IT>
 8018a44:	4603      	mov	r3, r0
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d04d      	beq.n	8018ae6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a50:	687a      	ldr	r2, [r7, #4]
 8018a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018a54:	4610      	mov	r0, r2
 8018a56:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018a58:	e045      	b.n	8018ae6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	f000 f850 	bl	8018b00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018a60:	e041      	b.n	8018ae6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d039      	beq.n	8018ade <I2C_ITError+0x17e>
 8018a6a:	68bb      	ldr	r3, [r7, #8]
 8018a6c:	2b12      	cmp	r3, #18
 8018a6e:	d002      	beq.n	8018a76 <I2C_ITError+0x116>
 8018a70:	68bb      	ldr	r3, [r7, #8]
 8018a72:	2b22      	cmp	r3, #34	; 0x22
 8018a74:	d133      	bne.n	8018ade <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018a84:	d107      	bne.n	8018a96 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	681a      	ldr	r2, [r3, #0]
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018a94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f7fd fa78 	bl	8015f90 <HAL_DMA_GetState>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	2b01      	cmp	r3, #1
 8018aa4:	d017      	beq.n	8018ad6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018aaa:	4a14      	ldr	r2, [pc, #80]	; (8018afc <I2C_ITError+0x19c>)
 8018aac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018aba:	4618      	mov	r0, r3
 8018abc:	f7fc f8fa 	bl	8014cb4 <HAL_DMA_Abort_IT>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d011      	beq.n	8018aea <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018acc:	687a      	ldr	r2, [r7, #4]
 8018ace:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8018ad0:	4610      	mov	r0, r2
 8018ad2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018ad4:	e009      	b.n	8018aea <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8018ad6:	6878      	ldr	r0, [r7, #4]
 8018ad8:	f000 f812 	bl	8018b00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018adc:	e005      	b.n	8018aea <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8018ade:	6878      	ldr	r0, [r7, #4]
 8018ae0:	f000 f80e 	bl	8018b00 <I2C_TreatErrorCallback>
  }
}
 8018ae4:	e002      	b.n	8018aec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018ae6:	bf00      	nop
 8018ae8:	e000      	b.n	8018aec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018aea:	bf00      	nop
}
 8018aec:	bf00      	nop
 8018aee:	3710      	adds	r7, #16
 8018af0:	46bd      	mov	sp, r7
 8018af2:	bd80      	pop	{r7, pc}
 8018af4:	ffff0000 	.word	0xffff0000
 8018af8:	080177f5 	.word	0x080177f5
 8018afc:	08018e9d 	.word	0x08018e9d

08018b00 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b082      	sub	sp, #8
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018b0e:	b2db      	uxtb	r3, r3
 8018b10:	2b60      	cmp	r3, #96	; 0x60
 8018b12:	d10e      	bne.n	8018b32 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2220      	movs	r2, #32
 8018b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2200      	movs	r2, #0
 8018b20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	2200      	movs	r2, #0
 8018b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8018b2a:	6878      	ldr	r0, [r7, #4]
 8018b2c:	f7fe fd2f 	bl	801758e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018b30:	e009      	b.n	8018b46 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	2200      	movs	r2, #0
 8018b36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8018b40:	6878      	ldr	r0, [r7, #4]
 8018b42:	f7fe fd1a 	bl	801757a <HAL_I2C_ErrorCallback>
}
 8018b46:	bf00      	nop
 8018b48:	3708      	adds	r7, #8
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bd80      	pop	{r7, pc}

08018b4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8018b4e:	b480      	push	{r7}
 8018b50:	b083      	sub	sp, #12
 8018b52:	af00      	add	r7, sp, #0
 8018b54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	699b      	ldr	r3, [r3, #24]
 8018b5c:	f003 0302 	and.w	r3, r3, #2
 8018b60:	2b02      	cmp	r3, #2
 8018b62:	d103      	bne.n	8018b6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	2200      	movs	r2, #0
 8018b6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	699b      	ldr	r3, [r3, #24]
 8018b72:	f003 0301 	and.w	r3, r3, #1
 8018b76:	2b01      	cmp	r3, #1
 8018b78:	d007      	beq.n	8018b8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	699a      	ldr	r2, [r3, #24]
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	f042 0201 	orr.w	r2, r2, #1
 8018b88:	619a      	str	r2, [r3, #24]
  }
}
 8018b8a:	bf00      	nop
 8018b8c:	370c      	adds	r7, #12
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b94:	4770      	bx	lr

08018b96 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018b96:	b580      	push	{r7, lr}
 8018b98:	b084      	sub	sp, #16
 8018b9a:	af00      	add	r7, sp, #0
 8018b9c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ba2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	681a      	ldr	r2, [r3, #0]
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018bb2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bb8:	b29b      	uxth	r3, r3
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d104      	bne.n	8018bc8 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018bbe:	2120      	movs	r1, #32
 8018bc0:	68f8      	ldr	r0, [r7, #12]
 8018bc2:	f000 fad9 	bl	8019178 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8018bc6:	e02d      	b.n	8018c24 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bcc:	68fa      	ldr	r2, [r7, #12]
 8018bce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8018bd0:	441a      	add	r2, r3
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bda:	b29b      	uxth	r3, r3
 8018bdc:	2bff      	cmp	r3, #255	; 0xff
 8018bde:	d903      	bls.n	8018be8 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	22ff      	movs	r2, #255	; 0xff
 8018be4:	851a      	strh	r2, [r3, #40]	; 0x28
 8018be6:	e004      	b.n	8018bf2 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bec:	b29a      	uxth	r2, r3
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	3324      	adds	r3, #36	; 0x24
 8018bfc:	4619      	mov	r1, r3
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c02:	461a      	mov	r2, r3
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c08:	f7fb fdea 	bl	80147e0 <HAL_DMA_Start_IT>
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d004      	beq.n	8018c1c <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018c12:	2110      	movs	r1, #16
 8018c14:	68f8      	ldr	r0, [r7, #12]
 8018c16:	f7ff fea3 	bl	8018960 <I2C_ITError>
}
 8018c1a:	e003      	b.n	8018c24 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018c1c:	2140      	movs	r1, #64	; 0x40
 8018c1e:	68f8      	ldr	r0, [r7, #12]
 8018c20:	f000 faaa 	bl	8019178 <I2C_Enable_IRQ>
}
 8018c24:	bf00      	nop
 8018c26:	3710      	adds	r7, #16
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}

08018c2c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b084      	sub	sp, #16
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8018c34:	2300      	movs	r3, #0
 8018c36:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c3c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d076      	beq.n	8018d34 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8018c46:	68bb      	ldr	r3, [r7, #8]
 8018c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	4a83      	ldr	r2, [pc, #524]	; (8018e5c <I2C_DMAError+0x230>)
 8018c4e:	4293      	cmp	r3, r2
 8018c50:	d059      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018c52:	68bb      	ldr	r3, [r7, #8]
 8018c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	4a81      	ldr	r2, [pc, #516]	; (8018e60 <I2C_DMAError+0x234>)
 8018c5a:	4293      	cmp	r3, r2
 8018c5c:	d053      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018c5e:	68bb      	ldr	r3, [r7, #8]
 8018c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	4a7f      	ldr	r2, [pc, #508]	; (8018e64 <I2C_DMAError+0x238>)
 8018c66:	4293      	cmp	r3, r2
 8018c68:	d04d      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	4a7d      	ldr	r2, [pc, #500]	; (8018e68 <I2C_DMAError+0x23c>)
 8018c72:	4293      	cmp	r3, r2
 8018c74:	d047      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018c76:	68bb      	ldr	r3, [r7, #8]
 8018c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	4a7b      	ldr	r2, [pc, #492]	; (8018e6c <I2C_DMAError+0x240>)
 8018c7e:	4293      	cmp	r3, r2
 8018c80:	d041      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	4a79      	ldr	r2, [pc, #484]	; (8018e70 <I2C_DMAError+0x244>)
 8018c8a:	4293      	cmp	r3, r2
 8018c8c:	d03b      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018c8e:	68bb      	ldr	r3, [r7, #8]
 8018c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	4a77      	ldr	r2, [pc, #476]	; (8018e74 <I2C_DMAError+0x248>)
 8018c96:	4293      	cmp	r3, r2
 8018c98:	d035      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	4a75      	ldr	r2, [pc, #468]	; (8018e78 <I2C_DMAError+0x24c>)
 8018ca2:	4293      	cmp	r3, r2
 8018ca4:	d02f      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018ca6:	68bb      	ldr	r3, [r7, #8]
 8018ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	4a73      	ldr	r2, [pc, #460]	; (8018e7c <I2C_DMAError+0x250>)
 8018cae:	4293      	cmp	r3, r2
 8018cb0:	d029      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018cb2:	68bb      	ldr	r3, [r7, #8]
 8018cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	4a71      	ldr	r2, [pc, #452]	; (8018e80 <I2C_DMAError+0x254>)
 8018cba:	4293      	cmp	r3, r2
 8018cbc:	d023      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018cbe:	68bb      	ldr	r3, [r7, #8]
 8018cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	4a6f      	ldr	r2, [pc, #444]	; (8018e84 <I2C_DMAError+0x258>)
 8018cc6:	4293      	cmp	r3, r2
 8018cc8:	d01d      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018cca:	68bb      	ldr	r3, [r7, #8]
 8018ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	4a6d      	ldr	r2, [pc, #436]	; (8018e88 <I2C_DMAError+0x25c>)
 8018cd2:	4293      	cmp	r3, r2
 8018cd4:	d017      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018cd6:	68bb      	ldr	r3, [r7, #8]
 8018cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	4a6b      	ldr	r2, [pc, #428]	; (8018e8c <I2C_DMAError+0x260>)
 8018cde:	4293      	cmp	r3, r2
 8018ce0:	d011      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018ce2:	68bb      	ldr	r3, [r7, #8]
 8018ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	4a69      	ldr	r2, [pc, #420]	; (8018e90 <I2C_DMAError+0x264>)
 8018cea:	4293      	cmp	r3, r2
 8018cec:	d00b      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018cee:	68bb      	ldr	r3, [r7, #8]
 8018cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	4a67      	ldr	r2, [pc, #412]	; (8018e94 <I2C_DMAError+0x268>)
 8018cf6:	4293      	cmp	r3, r2
 8018cf8:	d005      	beq.n	8018d06 <I2C_DMAError+0xda>
 8018cfa:	68bb      	ldr	r3, [r7, #8]
 8018cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	4a65      	ldr	r2, [pc, #404]	; (8018e98 <I2C_DMAError+0x26c>)
 8018d02:	4293      	cmp	r3, r2
 8018d04:	d109      	bne.n	8018d1a <I2C_DMAError+0xee>
 8018d06:	68bb      	ldr	r3, [r7, #8]
 8018d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	bf0c      	ite	eq
 8018d12:	2301      	moveq	r3, #1
 8018d14:	2300      	movne	r3, #0
 8018d16:	b2db      	uxtb	r3, r3
 8018d18:	e008      	b.n	8018d2c <I2C_DMAError+0x100>
 8018d1a:	68bb      	ldr	r3, [r7, #8]
 8018d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	685b      	ldr	r3, [r3, #4]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	bf0c      	ite	eq
 8018d26:	2301      	moveq	r3, #1
 8018d28:	2300      	movne	r3, #0
 8018d2a:	b2db      	uxtb	r3, r3
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d001      	beq.n	8018d34 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8018d30:	2301      	movs	r3, #1
 8018d32:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8018d34:	68bb      	ldr	r3, [r7, #8]
 8018d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d076      	beq.n	8018e2a <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	4a46      	ldr	r2, [pc, #280]	; (8018e5c <I2C_DMAError+0x230>)
 8018d44:	4293      	cmp	r3, r2
 8018d46:	d059      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	4a44      	ldr	r2, [pc, #272]	; (8018e60 <I2C_DMAError+0x234>)
 8018d50:	4293      	cmp	r3, r2
 8018d52:	d053      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018d54:	68bb      	ldr	r3, [r7, #8]
 8018d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	4a42      	ldr	r2, [pc, #264]	; (8018e64 <I2C_DMAError+0x238>)
 8018d5c:	4293      	cmp	r3, r2
 8018d5e:	d04d      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	4a40      	ldr	r2, [pc, #256]	; (8018e68 <I2C_DMAError+0x23c>)
 8018d68:	4293      	cmp	r3, r2
 8018d6a:	d047      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	4a3e      	ldr	r2, [pc, #248]	; (8018e6c <I2C_DMAError+0x240>)
 8018d74:	4293      	cmp	r3, r2
 8018d76:	d041      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018d78:	68bb      	ldr	r3, [r7, #8]
 8018d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	4a3c      	ldr	r2, [pc, #240]	; (8018e70 <I2C_DMAError+0x244>)
 8018d80:	4293      	cmp	r3, r2
 8018d82:	d03b      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	4a3a      	ldr	r2, [pc, #232]	; (8018e74 <I2C_DMAError+0x248>)
 8018d8c:	4293      	cmp	r3, r2
 8018d8e:	d035      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	4a38      	ldr	r2, [pc, #224]	; (8018e78 <I2C_DMAError+0x24c>)
 8018d98:	4293      	cmp	r3, r2
 8018d9a:	d02f      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018d9c:	68bb      	ldr	r3, [r7, #8]
 8018d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	4a36      	ldr	r2, [pc, #216]	; (8018e7c <I2C_DMAError+0x250>)
 8018da4:	4293      	cmp	r3, r2
 8018da6:	d029      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018da8:	68bb      	ldr	r3, [r7, #8]
 8018daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	4a34      	ldr	r2, [pc, #208]	; (8018e80 <I2C_DMAError+0x254>)
 8018db0:	4293      	cmp	r3, r2
 8018db2:	d023      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018db4:	68bb      	ldr	r3, [r7, #8]
 8018db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	4a32      	ldr	r2, [pc, #200]	; (8018e84 <I2C_DMAError+0x258>)
 8018dbc:	4293      	cmp	r3, r2
 8018dbe:	d01d      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018dc0:	68bb      	ldr	r3, [r7, #8]
 8018dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	4a30      	ldr	r2, [pc, #192]	; (8018e88 <I2C_DMAError+0x25c>)
 8018dc8:	4293      	cmp	r3, r2
 8018dca:	d017      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018dcc:	68bb      	ldr	r3, [r7, #8]
 8018dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	4a2e      	ldr	r2, [pc, #184]	; (8018e8c <I2C_DMAError+0x260>)
 8018dd4:	4293      	cmp	r3, r2
 8018dd6:	d011      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018dd8:	68bb      	ldr	r3, [r7, #8]
 8018dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	4a2c      	ldr	r2, [pc, #176]	; (8018e90 <I2C_DMAError+0x264>)
 8018de0:	4293      	cmp	r3, r2
 8018de2:	d00b      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018de4:	68bb      	ldr	r3, [r7, #8]
 8018de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	4a2a      	ldr	r2, [pc, #168]	; (8018e94 <I2C_DMAError+0x268>)
 8018dec:	4293      	cmp	r3, r2
 8018dee:	d005      	beq.n	8018dfc <I2C_DMAError+0x1d0>
 8018df0:	68bb      	ldr	r3, [r7, #8]
 8018df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	4a28      	ldr	r2, [pc, #160]	; (8018e98 <I2C_DMAError+0x26c>)
 8018df8:	4293      	cmp	r3, r2
 8018dfa:	d109      	bne.n	8018e10 <I2C_DMAError+0x1e4>
 8018dfc:	68bb      	ldr	r3, [r7, #8]
 8018dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	685b      	ldr	r3, [r3, #4]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	bf0c      	ite	eq
 8018e08:	2301      	moveq	r3, #1
 8018e0a:	2300      	movne	r3, #0
 8018e0c:	b2db      	uxtb	r3, r3
 8018e0e:	e008      	b.n	8018e22 <I2C_DMAError+0x1f6>
 8018e10:	68bb      	ldr	r3, [r7, #8]
 8018e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	685b      	ldr	r3, [r3, #4]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	bf0c      	ite	eq
 8018e1c:	2301      	moveq	r3, #1
 8018e1e:	2300      	movne	r3, #0
 8018e20:	b2db      	uxtb	r3, r3
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d001      	beq.n	8018e2a <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8018e26:	2301      	movs	r3, #1
 8018e28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8018e2a:	6878      	ldr	r0, [r7, #4]
 8018e2c:	f7fd f8be 	bl	8015fac <HAL_DMA_GetError>
 8018e30:	4603      	mov	r3, r0
 8018e32:	2b02      	cmp	r3, #2
 8018e34:	d00e      	beq.n	8018e54 <I2C_DMAError+0x228>
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d00b      	beq.n	8018e54 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8018e3c:	68bb      	ldr	r3, [r7, #8]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	685a      	ldr	r2, [r3, #4]
 8018e42:	68bb      	ldr	r3, [r7, #8]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018e4a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018e4c:	2110      	movs	r1, #16
 8018e4e:	68b8      	ldr	r0, [r7, #8]
 8018e50:	f7ff fd86 	bl	8018960 <I2C_ITError>
  }
}
 8018e54:	bf00      	nop
 8018e56:	3710      	adds	r7, #16
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}
 8018e5c:	40020010 	.word	0x40020010
 8018e60:	40020028 	.word	0x40020028
 8018e64:	40020040 	.word	0x40020040
 8018e68:	40020058 	.word	0x40020058
 8018e6c:	40020070 	.word	0x40020070
 8018e70:	40020088 	.word	0x40020088
 8018e74:	400200a0 	.word	0x400200a0
 8018e78:	400200b8 	.word	0x400200b8
 8018e7c:	40020410 	.word	0x40020410
 8018e80:	40020428 	.word	0x40020428
 8018e84:	40020440 	.word	0x40020440
 8018e88:	40020458 	.word	0x40020458
 8018e8c:	40020470 	.word	0x40020470
 8018e90:	40020488 	.word	0x40020488
 8018e94:	400204a0 	.word	0x400204a0
 8018e98:	400204b8 	.word	0x400204b8

08018e9c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b084      	sub	sp, #16
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ea8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d003      	beq.n	8018eba <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d003      	beq.n	8018eca <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8018eca:	68f8      	ldr	r0, [r7, #12]
 8018ecc:	f7ff fe18 	bl	8018b00 <I2C_TreatErrorCallback>
}
 8018ed0:	bf00      	nop
 8018ed2:	3710      	adds	r7, #16
 8018ed4:	46bd      	mov	sp, r7
 8018ed6:	bd80      	pop	{r7, pc}

08018ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8018ed8:	b580      	push	{r7, lr}
 8018eda:	b084      	sub	sp, #16
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	60f8      	str	r0, [r7, #12]
 8018ee0:	60b9      	str	r1, [r7, #8]
 8018ee2:	603b      	str	r3, [r7, #0]
 8018ee4:	4613      	mov	r3, r2
 8018ee6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018ee8:	e022      	b.n	8018f30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018eea:	683b      	ldr	r3, [r7, #0]
 8018eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ef0:	d01e      	beq.n	8018f30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018ef2:	f7fa f8b1 	bl	8013058 <HAL_GetTick>
 8018ef6:	4602      	mov	r2, r0
 8018ef8:	69bb      	ldr	r3, [r7, #24]
 8018efa:	1ad3      	subs	r3, r2, r3
 8018efc:	683a      	ldr	r2, [r7, #0]
 8018efe:	429a      	cmp	r2, r3
 8018f00:	d302      	bcc.n	8018f08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8018f02:	683b      	ldr	r3, [r7, #0]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d113      	bne.n	8018f30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f0c:	f043 0220 	orr.w	r2, r3, #32
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	2220      	movs	r2, #32
 8018f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	2200      	movs	r2, #0
 8018f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	2200      	movs	r2, #0
 8018f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	e00f      	b.n	8018f50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	699a      	ldr	r2, [r3, #24]
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	4013      	ands	r3, r2
 8018f3a:	68ba      	ldr	r2, [r7, #8]
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	bf0c      	ite	eq
 8018f40:	2301      	moveq	r3, #1
 8018f42:	2300      	movne	r3, #0
 8018f44:	b2db      	uxtb	r3, r3
 8018f46:	461a      	mov	r2, r3
 8018f48:	79fb      	ldrb	r3, [r7, #7]
 8018f4a:	429a      	cmp	r2, r3
 8018f4c:	d0cd      	beq.n	8018eea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8018f4e:	2300      	movs	r3, #0
}
 8018f50:	4618      	mov	r0, r3
 8018f52:	3710      	adds	r7, #16
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd80      	pop	{r7, pc}

08018f58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b084      	sub	sp, #16
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	60f8      	str	r0, [r7, #12]
 8018f60:	60b9      	str	r1, [r7, #8]
 8018f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018f64:	e02c      	b.n	8018fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8018f66:	687a      	ldr	r2, [r7, #4]
 8018f68:	68b9      	ldr	r1, [r7, #8]
 8018f6a:	68f8      	ldr	r0, [r7, #12]
 8018f6c:	f000 f870 	bl	8019050 <I2C_IsAcknowledgeFailed>
 8018f70:	4603      	mov	r3, r0
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d001      	beq.n	8018f7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018f76:	2301      	movs	r3, #1
 8018f78:	e02a      	b.n	8018fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018f7a:	68bb      	ldr	r3, [r7, #8]
 8018f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f80:	d01e      	beq.n	8018fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018f82:	f7fa f869 	bl	8013058 <HAL_GetTick>
 8018f86:	4602      	mov	r2, r0
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	1ad3      	subs	r3, r2, r3
 8018f8c:	68ba      	ldr	r2, [r7, #8]
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d302      	bcc.n	8018f98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8018f92:	68bb      	ldr	r3, [r7, #8]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d113      	bne.n	8018fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f9c:	f043 0220 	orr.w	r2, r3, #32
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	2220      	movs	r2, #32
 8018fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	2200      	movs	r2, #0
 8018fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8018fbc:	2301      	movs	r3, #1
 8018fbe:	e007      	b.n	8018fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	699b      	ldr	r3, [r3, #24]
 8018fc6:	f003 0302 	and.w	r3, r3, #2
 8018fca:	2b02      	cmp	r3, #2
 8018fcc:	d1cb      	bne.n	8018f66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018fce:	2300      	movs	r3, #0
}
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	3710      	adds	r7, #16
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd80      	pop	{r7, pc}

08018fd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b084      	sub	sp, #16
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	60f8      	str	r0, [r7, #12]
 8018fe0:	60b9      	str	r1, [r7, #8]
 8018fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018fe4:	e028      	b.n	8019038 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8018fe6:	687a      	ldr	r2, [r7, #4]
 8018fe8:	68b9      	ldr	r1, [r7, #8]
 8018fea:	68f8      	ldr	r0, [r7, #12]
 8018fec:	f000 f830 	bl	8019050 <I2C_IsAcknowledgeFailed>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d001      	beq.n	8018ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018ff6:	2301      	movs	r3, #1
 8018ff8:	e026      	b.n	8019048 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018ffa:	f7fa f82d 	bl	8013058 <HAL_GetTick>
 8018ffe:	4602      	mov	r2, r0
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	1ad3      	subs	r3, r2, r3
 8019004:	68ba      	ldr	r2, [r7, #8]
 8019006:	429a      	cmp	r2, r3
 8019008:	d302      	bcc.n	8019010 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801900a:	68bb      	ldr	r3, [r7, #8]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d113      	bne.n	8019038 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019014:	f043 0220 	orr.w	r2, r3, #32
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	2220      	movs	r2, #32
 8019020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	2200      	movs	r2, #0
 8019028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	2200      	movs	r2, #0
 8019030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8019034:	2301      	movs	r3, #1
 8019036:	e007      	b.n	8019048 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	699b      	ldr	r3, [r3, #24]
 801903e:	f003 0320 	and.w	r3, r3, #32
 8019042:	2b20      	cmp	r3, #32
 8019044:	d1cf      	bne.n	8018fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8019046:	2300      	movs	r3, #0
}
 8019048:	4618      	mov	r0, r3
 801904a:	3710      	adds	r7, #16
 801904c:	46bd      	mov	sp, r7
 801904e:	bd80      	pop	{r7, pc}

08019050 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b084      	sub	sp, #16
 8019054:	af00      	add	r7, sp, #0
 8019056:	60f8      	str	r0, [r7, #12]
 8019058:	60b9      	str	r1, [r7, #8]
 801905a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	699b      	ldr	r3, [r3, #24]
 8019062:	f003 0310 	and.w	r3, r3, #16
 8019066:	2b10      	cmp	r3, #16
 8019068:	d151      	bne.n	801910e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801906a:	e022      	b.n	80190b2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019072:	d01e      	beq.n	80190b2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019074:	f7f9 fff0 	bl	8013058 <HAL_GetTick>
 8019078:	4602      	mov	r2, r0
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	1ad3      	subs	r3, r2, r3
 801907e:	68ba      	ldr	r2, [r7, #8]
 8019080:	429a      	cmp	r2, r3
 8019082:	d302      	bcc.n	801908a <I2C_IsAcknowledgeFailed+0x3a>
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d113      	bne.n	80190b2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801908e:	f043 0220 	orr.w	r2, r3, #32
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	2220      	movs	r2, #32
 801909a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	2200      	movs	r2, #0
 80190a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	2200      	movs	r2, #0
 80190aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80190ae:	2301      	movs	r3, #1
 80190b0:	e02e      	b.n	8019110 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	699b      	ldr	r3, [r3, #24]
 80190b8:	f003 0320 	and.w	r3, r3, #32
 80190bc:	2b20      	cmp	r3, #32
 80190be:	d1d5      	bne.n	801906c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	2210      	movs	r2, #16
 80190c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	2220      	movs	r2, #32
 80190ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80190d0:	68f8      	ldr	r0, [r7, #12]
 80190d2:	f7ff fd3c 	bl	8018b4e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	6859      	ldr	r1, [r3, #4]
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	681a      	ldr	r2, [r3, #0]
 80190e0:	4b0d      	ldr	r3, [pc, #52]	; (8019118 <I2C_IsAcknowledgeFailed+0xc8>)
 80190e2:	400b      	ands	r3, r1
 80190e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190ea:	f043 0204 	orr.w	r2, r3, #4
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	2220      	movs	r2, #32
 80190f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	2200      	movs	r2, #0
 80190fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	2200      	movs	r2, #0
 8019106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801910a:	2301      	movs	r3, #1
 801910c:	e000      	b.n	8019110 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 801910e:	2300      	movs	r3, #0
}
 8019110:	4618      	mov	r0, r3
 8019112:	3710      	adds	r7, #16
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}
 8019118:	fe00e800 	.word	0xfe00e800

0801911c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 801911c:	b480      	push	{r7}
 801911e:	b085      	sub	sp, #20
 8019120:	af00      	add	r7, sp, #0
 8019122:	60f8      	str	r0, [r7, #12]
 8019124:	607b      	str	r3, [r7, #4]
 8019126:	460b      	mov	r3, r1
 8019128:	817b      	strh	r3, [r7, #10]
 801912a:	4613      	mov	r3, r2
 801912c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	685a      	ldr	r2, [r3, #4]
 8019134:	69bb      	ldr	r3, [r7, #24]
 8019136:	0d5b      	lsrs	r3, r3, #21
 8019138:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801913c:	4b0d      	ldr	r3, [pc, #52]	; (8019174 <I2C_TransferConfig+0x58>)
 801913e:	430b      	orrs	r3, r1
 8019140:	43db      	mvns	r3, r3
 8019142:	ea02 0103 	and.w	r1, r2, r3
 8019146:	897b      	ldrh	r3, [r7, #10]
 8019148:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801914c:	7a7b      	ldrb	r3, [r7, #9]
 801914e:	041b      	lsls	r3, r3, #16
 8019150:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019154:	431a      	orrs	r2, r3
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	431a      	orrs	r2, r3
 801915a:	69bb      	ldr	r3, [r7, #24]
 801915c:	431a      	orrs	r2, r3
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	430a      	orrs	r2, r1
 8019164:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8019166:	bf00      	nop
 8019168:	3714      	adds	r7, #20
 801916a:	46bd      	mov	sp, r7
 801916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019170:	4770      	bx	lr
 8019172:	bf00      	nop
 8019174:	03ff63ff 	.word	0x03ff63ff

08019178 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8019178:	b480      	push	{r7}
 801917a:	b085      	sub	sp, #20
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
 8019180:	460b      	mov	r3, r1
 8019182:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8019184:	2300      	movs	r3, #0
 8019186:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801918c:	4a2a      	ldr	r2, [pc, #168]	; (8019238 <I2C_Enable_IRQ+0xc0>)
 801918e:	4293      	cmp	r3, r2
 8019190:	d004      	beq.n	801919c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8019196:	4a29      	ldr	r2, [pc, #164]	; (801923c <I2C_Enable_IRQ+0xc4>)
 8019198:	4293      	cmp	r3, r2
 801919a:	d11d      	bne.n	80191d8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801919c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	da03      	bge.n	80191ac <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80191aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80191ac:	887b      	ldrh	r3, [r7, #2]
 80191ae:	2b10      	cmp	r3, #16
 80191b0:	d103      	bne.n	80191ba <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80191b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80191ba:	887b      	ldrh	r3, [r7, #2]
 80191bc:	2b20      	cmp	r3, #32
 80191be:	d103      	bne.n	80191c8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80191c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80191c8:	887b      	ldrh	r3, [r7, #2]
 80191ca:	2b40      	cmp	r3, #64	; 0x40
 80191cc:	d125      	bne.n	801921a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191d4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80191d6:	e020      	b.n	801921a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80191d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	da03      	bge.n	80191e8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80191e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80191e8:	887b      	ldrh	r3, [r7, #2]
 80191ea:	f003 0301 	and.w	r3, r3, #1
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d003      	beq.n	80191fa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80191f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80191fa:	887b      	ldrh	r3, [r7, #2]
 80191fc:	f003 0302 	and.w	r3, r3, #2
 8019200:	2b00      	cmp	r3, #0
 8019202:	d003      	beq.n	801920c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 801920a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801920c:	887b      	ldrh	r3, [r7, #2]
 801920e:	2b20      	cmp	r3, #32
 8019210:	d103      	bne.n	801921a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	f043 0320 	orr.w	r3, r3, #32
 8019218:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	6819      	ldr	r1, [r3, #0]
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	68fa      	ldr	r2, [r7, #12]
 8019226:	430a      	orrs	r2, r1
 8019228:	601a      	str	r2, [r3, #0]
}
 801922a:	bf00      	nop
 801922c:	3714      	adds	r7, #20
 801922e:	46bd      	mov	sp, r7
 8019230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019234:	4770      	bx	lr
 8019236:	bf00      	nop
 8019238:	080179fb 	.word	0x080179fb
 801923c:	08017be1 	.word	0x08017be1

08019240 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8019240:	b480      	push	{r7}
 8019242:	b085      	sub	sp, #20
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
 8019248:	460b      	mov	r3, r1
 801924a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801924c:	2300      	movs	r3, #0
 801924e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8019250:	887b      	ldrh	r3, [r7, #2]
 8019252:	f003 0301 	and.w	r3, r3, #1
 8019256:	2b00      	cmp	r3, #0
 8019258:	d00f      	beq.n	801927a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8019260:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019268:	b2db      	uxtb	r3, r3
 801926a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801926e:	2b28      	cmp	r3, #40	; 0x28
 8019270:	d003      	beq.n	801927a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8019278:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801927a:	887b      	ldrh	r3, [r7, #2]
 801927c:	f003 0302 	and.w	r3, r3, #2
 8019280:	2b00      	cmp	r3, #0
 8019282:	d00f      	beq.n	80192a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 801928a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019292:	b2db      	uxtb	r3, r3
 8019294:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019298:	2b28      	cmp	r3, #40	; 0x28
 801929a:	d003      	beq.n	80192a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80192a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80192a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	da03      	bge.n	80192b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80192b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80192b4:	887b      	ldrh	r3, [r7, #2]
 80192b6:	2b10      	cmp	r3, #16
 80192b8:	d103      	bne.n	80192c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80192c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80192c2:	887b      	ldrh	r3, [r7, #2]
 80192c4:	2b20      	cmp	r3, #32
 80192c6:	d103      	bne.n	80192d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	f043 0320 	orr.w	r3, r3, #32
 80192ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80192d0:	887b      	ldrh	r3, [r7, #2]
 80192d2:	2b40      	cmp	r3, #64	; 0x40
 80192d4:	d103      	bne.n	80192de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	6819      	ldr	r1, [r3, #0]
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	43da      	mvns	r2, r3
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	400a      	ands	r2, r1
 80192ee:	601a      	str	r2, [r3, #0]
}
 80192f0:	bf00      	nop
 80192f2:	3714      	adds	r7, #20
 80192f4:	46bd      	mov	sp, r7
 80192f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fa:	4770      	bx	lr

080192fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80192fc:	b480      	push	{r7}
 80192fe:	b083      	sub	sp, #12
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801930c:	b2db      	uxtb	r3, r3
 801930e:	2b20      	cmp	r3, #32
 8019310:	d138      	bne.n	8019384 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019318:	2b01      	cmp	r3, #1
 801931a:	d101      	bne.n	8019320 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801931c:	2302      	movs	r3, #2
 801931e:	e032      	b.n	8019386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	2201      	movs	r2, #1
 8019324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	2224      	movs	r2, #36	; 0x24
 801932c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	681a      	ldr	r2, [r3, #0]
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	f022 0201 	bic.w	r2, r2, #1
 801933e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	681a      	ldr	r2, [r3, #0]
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801934e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	6819      	ldr	r1, [r3, #0]
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	683a      	ldr	r2, [r7, #0]
 801935c:	430a      	orrs	r2, r1
 801935e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	681a      	ldr	r2, [r3, #0]
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	f042 0201 	orr.w	r2, r2, #1
 801936e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2220      	movs	r2, #32
 8019374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	2200      	movs	r2, #0
 801937c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019380:	2300      	movs	r3, #0
 8019382:	e000      	b.n	8019386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8019384:	2302      	movs	r3, #2
  }
}
 8019386:	4618      	mov	r0, r3
 8019388:	370c      	adds	r7, #12
 801938a:	46bd      	mov	sp, r7
 801938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019390:	4770      	bx	lr

08019392 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8019392:	b480      	push	{r7}
 8019394:	b085      	sub	sp, #20
 8019396:	af00      	add	r7, sp, #0
 8019398:	6078      	str	r0, [r7, #4]
 801939a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80193a2:	b2db      	uxtb	r3, r3
 80193a4:	2b20      	cmp	r3, #32
 80193a6:	d139      	bne.n	801941c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80193ae:	2b01      	cmp	r3, #1
 80193b0:	d101      	bne.n	80193b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80193b2:	2302      	movs	r3, #2
 80193b4:	e033      	b.n	801941e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	2201      	movs	r2, #1
 80193ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	2224      	movs	r2, #36	; 0x24
 80193c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	681a      	ldr	r2, [r3, #0]
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	f022 0201 	bic.w	r2, r2, #1
 80193d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80193e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80193e6:	683b      	ldr	r3, [r7, #0]
 80193e8:	021b      	lsls	r3, r3, #8
 80193ea:	68fa      	ldr	r2, [r7, #12]
 80193ec:	4313      	orrs	r3, r2
 80193ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	68fa      	ldr	r2, [r7, #12]
 80193f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	681a      	ldr	r2, [r3, #0]
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	f042 0201 	orr.w	r2, r2, #1
 8019406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	2220      	movs	r2, #32
 801940c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	2200      	movs	r2, #0
 8019414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019418:	2300      	movs	r3, #0
 801941a:	e000      	b.n	801941e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801941c:	2302      	movs	r3, #2
  }
}
 801941e:	4618      	mov	r0, r3
 8019420:	3714      	adds	r7, #20
 8019422:	46bd      	mov	sp, r7
 8019424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019428:	4770      	bx	lr

0801942a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801942a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801942c:	b08f      	sub	sp, #60	; 0x3c
 801942e:	af0a      	add	r7, sp, #40	; 0x28
 8019430:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d101      	bne.n	801943c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019438:	2301      	movs	r3, #1
 801943a:	e116      	b.n	801966a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8019448:	b2db      	uxtb	r3, r3
 801944a:	2b00      	cmp	r3, #0
 801944c:	d106      	bne.n	801945c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	2200      	movs	r2, #0
 8019452:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019456:	6878      	ldr	r0, [r7, #4]
 8019458:	f7f9 fd2c 	bl	8012eb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	2203      	movs	r2, #3
 8019460:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019464:	68bb      	ldr	r3, [r7, #8]
 8019466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801946c:	2b00      	cmp	r3, #0
 801946e:	d102      	bne.n	8019476 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	2200      	movs	r2, #0
 8019474:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	4618      	mov	r0, r3
 801947c:	f008 f984 	bl	8021788 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	603b      	str	r3, [r7, #0]
 8019486:	687e      	ldr	r6, [r7, #4]
 8019488:	466d      	mov	r5, sp
 801948a:	f106 0410 	add.w	r4, r6, #16
 801948e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019496:	e894 0003 	ldmia.w	r4, {r0, r1}
 801949a:	e885 0003 	stmia.w	r5, {r0, r1}
 801949e:	1d33      	adds	r3, r6, #4
 80194a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80194a2:	6838      	ldr	r0, [r7, #0]
 80194a4:	f008 f90e 	bl	80216c4 <USB_CoreInit>
 80194a8:	4603      	mov	r3, r0
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d005      	beq.n	80194ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	2202      	movs	r2, #2
 80194b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80194b6:	2301      	movs	r3, #1
 80194b8:	e0d7      	b.n	801966a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	2100      	movs	r1, #0
 80194c0:	4618      	mov	r0, r3
 80194c2:	f008 f972 	bl	80217aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80194c6:	2300      	movs	r3, #0
 80194c8:	73fb      	strb	r3, [r7, #15]
 80194ca:	e04a      	b.n	8019562 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80194cc:	7bfa      	ldrb	r2, [r7, #15]
 80194ce:	6879      	ldr	r1, [r7, #4]
 80194d0:	4613      	mov	r3, r2
 80194d2:	00db      	lsls	r3, r3, #3
 80194d4:	1a9b      	subs	r3, r3, r2
 80194d6:	009b      	lsls	r3, r3, #2
 80194d8:	440b      	add	r3, r1
 80194da:	333d      	adds	r3, #61	; 0x3d
 80194dc:	2201      	movs	r2, #1
 80194de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80194e0:	7bfa      	ldrb	r2, [r7, #15]
 80194e2:	6879      	ldr	r1, [r7, #4]
 80194e4:	4613      	mov	r3, r2
 80194e6:	00db      	lsls	r3, r3, #3
 80194e8:	1a9b      	subs	r3, r3, r2
 80194ea:	009b      	lsls	r3, r3, #2
 80194ec:	440b      	add	r3, r1
 80194ee:	333c      	adds	r3, #60	; 0x3c
 80194f0:	7bfa      	ldrb	r2, [r7, #15]
 80194f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80194f4:	7bfa      	ldrb	r2, [r7, #15]
 80194f6:	7bfb      	ldrb	r3, [r7, #15]
 80194f8:	b298      	uxth	r0, r3
 80194fa:	6879      	ldr	r1, [r7, #4]
 80194fc:	4613      	mov	r3, r2
 80194fe:	00db      	lsls	r3, r3, #3
 8019500:	1a9b      	subs	r3, r3, r2
 8019502:	009b      	lsls	r3, r3, #2
 8019504:	440b      	add	r3, r1
 8019506:	3342      	adds	r3, #66	; 0x42
 8019508:	4602      	mov	r2, r0
 801950a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801950c:	7bfa      	ldrb	r2, [r7, #15]
 801950e:	6879      	ldr	r1, [r7, #4]
 8019510:	4613      	mov	r3, r2
 8019512:	00db      	lsls	r3, r3, #3
 8019514:	1a9b      	subs	r3, r3, r2
 8019516:	009b      	lsls	r3, r3, #2
 8019518:	440b      	add	r3, r1
 801951a:	333f      	adds	r3, #63	; 0x3f
 801951c:	2200      	movs	r2, #0
 801951e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019520:	7bfa      	ldrb	r2, [r7, #15]
 8019522:	6879      	ldr	r1, [r7, #4]
 8019524:	4613      	mov	r3, r2
 8019526:	00db      	lsls	r3, r3, #3
 8019528:	1a9b      	subs	r3, r3, r2
 801952a:	009b      	lsls	r3, r3, #2
 801952c:	440b      	add	r3, r1
 801952e:	3344      	adds	r3, #68	; 0x44
 8019530:	2200      	movs	r2, #0
 8019532:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019534:	7bfa      	ldrb	r2, [r7, #15]
 8019536:	6879      	ldr	r1, [r7, #4]
 8019538:	4613      	mov	r3, r2
 801953a:	00db      	lsls	r3, r3, #3
 801953c:	1a9b      	subs	r3, r3, r2
 801953e:	009b      	lsls	r3, r3, #2
 8019540:	440b      	add	r3, r1
 8019542:	3348      	adds	r3, #72	; 0x48
 8019544:	2200      	movs	r2, #0
 8019546:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019548:	7bfa      	ldrb	r2, [r7, #15]
 801954a:	6879      	ldr	r1, [r7, #4]
 801954c:	4613      	mov	r3, r2
 801954e:	00db      	lsls	r3, r3, #3
 8019550:	1a9b      	subs	r3, r3, r2
 8019552:	009b      	lsls	r3, r3, #2
 8019554:	440b      	add	r3, r1
 8019556:	3350      	adds	r3, #80	; 0x50
 8019558:	2200      	movs	r2, #0
 801955a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801955c:	7bfb      	ldrb	r3, [r7, #15]
 801955e:	3301      	adds	r3, #1
 8019560:	73fb      	strb	r3, [r7, #15]
 8019562:	7bfa      	ldrb	r2, [r7, #15]
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	685b      	ldr	r3, [r3, #4]
 8019568:	429a      	cmp	r2, r3
 801956a:	d3af      	bcc.n	80194cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801956c:	2300      	movs	r3, #0
 801956e:	73fb      	strb	r3, [r7, #15]
 8019570:	e044      	b.n	80195fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019572:	7bfa      	ldrb	r2, [r7, #15]
 8019574:	6879      	ldr	r1, [r7, #4]
 8019576:	4613      	mov	r3, r2
 8019578:	00db      	lsls	r3, r3, #3
 801957a:	1a9b      	subs	r3, r3, r2
 801957c:	009b      	lsls	r3, r3, #2
 801957e:	440b      	add	r3, r1
 8019580:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8019584:	2200      	movs	r2, #0
 8019586:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019588:	7bfa      	ldrb	r2, [r7, #15]
 801958a:	6879      	ldr	r1, [r7, #4]
 801958c:	4613      	mov	r3, r2
 801958e:	00db      	lsls	r3, r3, #3
 8019590:	1a9b      	subs	r3, r3, r2
 8019592:	009b      	lsls	r3, r3, #2
 8019594:	440b      	add	r3, r1
 8019596:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801959a:	7bfa      	ldrb	r2, [r7, #15]
 801959c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801959e:	7bfa      	ldrb	r2, [r7, #15]
 80195a0:	6879      	ldr	r1, [r7, #4]
 80195a2:	4613      	mov	r3, r2
 80195a4:	00db      	lsls	r3, r3, #3
 80195a6:	1a9b      	subs	r3, r3, r2
 80195a8:	009b      	lsls	r3, r3, #2
 80195aa:	440b      	add	r3, r1
 80195ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80195b0:	2200      	movs	r2, #0
 80195b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80195b4:	7bfa      	ldrb	r2, [r7, #15]
 80195b6:	6879      	ldr	r1, [r7, #4]
 80195b8:	4613      	mov	r3, r2
 80195ba:	00db      	lsls	r3, r3, #3
 80195bc:	1a9b      	subs	r3, r3, r2
 80195be:	009b      	lsls	r3, r3, #2
 80195c0:	440b      	add	r3, r1
 80195c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80195c6:	2200      	movs	r2, #0
 80195c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80195ca:	7bfa      	ldrb	r2, [r7, #15]
 80195cc:	6879      	ldr	r1, [r7, #4]
 80195ce:	4613      	mov	r3, r2
 80195d0:	00db      	lsls	r3, r3, #3
 80195d2:	1a9b      	subs	r3, r3, r2
 80195d4:	009b      	lsls	r3, r3, #2
 80195d6:	440b      	add	r3, r1
 80195d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80195dc:	2200      	movs	r2, #0
 80195de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80195e0:	7bfa      	ldrb	r2, [r7, #15]
 80195e2:	6879      	ldr	r1, [r7, #4]
 80195e4:	4613      	mov	r3, r2
 80195e6:	00db      	lsls	r3, r3, #3
 80195e8:	1a9b      	subs	r3, r3, r2
 80195ea:	009b      	lsls	r3, r3, #2
 80195ec:	440b      	add	r3, r1
 80195ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80195f2:	2200      	movs	r2, #0
 80195f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80195f6:	7bfb      	ldrb	r3, [r7, #15]
 80195f8:	3301      	adds	r3, #1
 80195fa:	73fb      	strb	r3, [r7, #15]
 80195fc:	7bfa      	ldrb	r2, [r7, #15]
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	685b      	ldr	r3, [r3, #4]
 8019602:	429a      	cmp	r2, r3
 8019604:	d3b5      	bcc.n	8019572 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	603b      	str	r3, [r7, #0]
 801960c:	687e      	ldr	r6, [r7, #4]
 801960e:	466d      	mov	r5, sp
 8019610:	f106 0410 	add.w	r4, r6, #16
 8019614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801961a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801961c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019620:	e885 0003 	stmia.w	r5, {r0, r1}
 8019624:	1d33      	adds	r3, r6, #4
 8019626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019628:	6838      	ldr	r0, [r7, #0]
 801962a:	f008 f8e9 	bl	8021800 <USB_DevInit>
 801962e:	4603      	mov	r3, r0
 8019630:	2b00      	cmp	r3, #0
 8019632:	d005      	beq.n	8019640 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	2202      	movs	r2, #2
 8019638:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801963c:	2301      	movs	r3, #1
 801963e:	e014      	b.n	801966a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	2200      	movs	r2, #0
 8019644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	2201      	movs	r2, #1
 801964c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019654:	2b01      	cmp	r3, #1
 8019656:	d102      	bne.n	801965e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019658:	6878      	ldr	r0, [r7, #4]
 801965a:	f000 f80b 	bl	8019674 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	4618      	mov	r0, r3
 8019664:	f008 fa8b 	bl	8021b7e <USB_DevDisconnect>

  return HAL_OK;
 8019668:	2300      	movs	r3, #0
}
 801966a:	4618      	mov	r0, r3
 801966c:	3714      	adds	r7, #20
 801966e:	46bd      	mov	sp, r7
 8019670:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019674 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8019674:	b480      	push	{r7}
 8019676:	b085      	sub	sp, #20
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	2201      	movs	r2, #1
 8019686:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	2200      	movs	r2, #0
 801968e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	699b      	ldr	r3, [r3, #24]
 8019696:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80196a2:	4b05      	ldr	r3, [pc, #20]	; (80196b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80196a4:	4313      	orrs	r3, r2
 80196a6:	68fa      	ldr	r2, [r7, #12]
 80196a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80196aa:	2300      	movs	r3, #0
}
 80196ac:	4618      	mov	r0, r3
 80196ae:	3714      	adds	r7, #20
 80196b0:	46bd      	mov	sp, r7
 80196b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b6:	4770      	bx	lr
 80196b8:	10000003 	.word	0x10000003

080196bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80196bc:	b580      	push	{r7, lr}
 80196be:	b084      	sub	sp, #16
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80196c4:	4b19      	ldr	r3, [pc, #100]	; (801972c <HAL_PWREx_ConfigSupply+0x70>)
 80196c6:	68db      	ldr	r3, [r3, #12]
 80196c8:	f003 0304 	and.w	r3, r3, #4
 80196cc:	2b04      	cmp	r3, #4
 80196ce:	d00a      	beq.n	80196e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80196d0:	4b16      	ldr	r3, [pc, #88]	; (801972c <HAL_PWREx_ConfigSupply+0x70>)
 80196d2:	68db      	ldr	r3, [r3, #12]
 80196d4:	f003 0307 	and.w	r3, r3, #7
 80196d8:	687a      	ldr	r2, [r7, #4]
 80196da:	429a      	cmp	r2, r3
 80196dc:	d001      	beq.n	80196e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80196de:	2301      	movs	r3, #1
 80196e0:	e01f      	b.n	8019722 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80196e2:	2300      	movs	r3, #0
 80196e4:	e01d      	b.n	8019722 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80196e6:	4b11      	ldr	r3, [pc, #68]	; (801972c <HAL_PWREx_ConfigSupply+0x70>)
 80196e8:	68db      	ldr	r3, [r3, #12]
 80196ea:	f023 0207 	bic.w	r2, r3, #7
 80196ee:	490f      	ldr	r1, [pc, #60]	; (801972c <HAL_PWREx_ConfigSupply+0x70>)
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	4313      	orrs	r3, r2
 80196f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80196f6:	f7f9 fcaf 	bl	8013058 <HAL_GetTick>
 80196fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80196fc:	e009      	b.n	8019712 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80196fe:	f7f9 fcab 	bl	8013058 <HAL_GetTick>
 8019702:	4602      	mov	r2, r0
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	1ad3      	subs	r3, r2, r3
 8019708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801970c:	d901      	bls.n	8019712 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801970e:	2301      	movs	r3, #1
 8019710:	e007      	b.n	8019722 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8019712:	4b06      	ldr	r3, [pc, #24]	; (801972c <HAL_PWREx_ConfigSupply+0x70>)
 8019714:	685b      	ldr	r3, [r3, #4]
 8019716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801971a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801971e:	d1ee      	bne.n	80196fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8019720:	2300      	movs	r3, #0
}
 8019722:	4618      	mov	r0, r3
 8019724:	3710      	adds	r7, #16
 8019726:	46bd      	mov	sp, r7
 8019728:	bd80      	pop	{r7, pc}
 801972a:	bf00      	nop
 801972c:	58024800 	.word	0x58024800

08019730 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8019730:	b480      	push	{r7}
 8019732:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8019734:	4b05      	ldr	r3, [pc, #20]	; (801974c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8019736:	68db      	ldr	r3, [r3, #12]
 8019738:	4a04      	ldr	r2, [pc, #16]	; (801974c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 801973a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801973e:	60d3      	str	r3, [r2, #12]
}
 8019740:	bf00      	nop
 8019742:	46bd      	mov	sp, r7
 8019744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019748:	4770      	bx	lr
 801974a:	bf00      	nop
 801974c:	58024800 	.word	0x58024800

08019750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b08c      	sub	sp, #48	; 0x30
 8019754:	af00      	add	r7, sp, #0
 8019756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d101      	bne.n	8019762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801975e:	2301      	movs	r3, #1
 8019760:	e3ff      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	f003 0301 	and.w	r3, r3, #1
 801976a:	2b00      	cmp	r3, #0
 801976c:	f000 8087 	beq.w	801987e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8019770:	4b99      	ldr	r3, [pc, #612]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019772:	691b      	ldr	r3, [r3, #16]
 8019774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8019778:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801977a:	4b97      	ldr	r3, [pc, #604]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 801977c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801977e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8019780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019782:	2b10      	cmp	r3, #16
 8019784:	d007      	beq.n	8019796 <HAL_RCC_OscConfig+0x46>
 8019786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019788:	2b18      	cmp	r3, #24
 801978a:	d110      	bne.n	80197ae <HAL_RCC_OscConfig+0x5e>
 801978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801978e:	f003 0303 	and.w	r3, r3, #3
 8019792:	2b02      	cmp	r3, #2
 8019794:	d10b      	bne.n	80197ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019796:	4b90      	ldr	r3, [pc, #576]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d06c      	beq.n	801987c <HAL_RCC_OscConfig+0x12c>
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	685b      	ldr	r3, [r3, #4]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d168      	bne.n	801987c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80197aa:	2301      	movs	r3, #1
 80197ac:	e3d9      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	685b      	ldr	r3, [r3, #4]
 80197b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80197b6:	d106      	bne.n	80197c6 <HAL_RCC_OscConfig+0x76>
 80197b8:	4b87      	ldr	r3, [pc, #540]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	4a86      	ldr	r2, [pc, #536]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80197be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80197c2:	6013      	str	r3, [r2, #0]
 80197c4:	e02e      	b.n	8019824 <HAL_RCC_OscConfig+0xd4>
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	685b      	ldr	r3, [r3, #4]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d10c      	bne.n	80197e8 <HAL_RCC_OscConfig+0x98>
 80197ce:	4b82      	ldr	r3, [pc, #520]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	4a81      	ldr	r2, [pc, #516]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80197d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80197d8:	6013      	str	r3, [r2, #0]
 80197da:	4b7f      	ldr	r3, [pc, #508]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	4a7e      	ldr	r2, [pc, #504]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80197e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80197e4:	6013      	str	r3, [r2, #0]
 80197e6:	e01d      	b.n	8019824 <HAL_RCC_OscConfig+0xd4>
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	685b      	ldr	r3, [r3, #4]
 80197ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80197f0:	d10c      	bne.n	801980c <HAL_RCC_OscConfig+0xbc>
 80197f2:	4b79      	ldr	r3, [pc, #484]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	4a78      	ldr	r2, [pc, #480]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80197f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80197fc:	6013      	str	r3, [r2, #0]
 80197fe:	4b76      	ldr	r3, [pc, #472]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	4a75      	ldr	r2, [pc, #468]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019808:	6013      	str	r3, [r2, #0]
 801980a:	e00b      	b.n	8019824 <HAL_RCC_OscConfig+0xd4>
 801980c:	4b72      	ldr	r3, [pc, #456]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	4a71      	ldr	r2, [pc, #452]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019816:	6013      	str	r3, [r2, #0]
 8019818:	4b6f      	ldr	r3, [pc, #444]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	4a6e      	ldr	r2, [pc, #440]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 801981e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	685b      	ldr	r3, [r3, #4]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d013      	beq.n	8019854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801982c:	f7f9 fc14 	bl	8013058 <HAL_GetTick>
 8019830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8019832:	e008      	b.n	8019846 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019834:	f7f9 fc10 	bl	8013058 <HAL_GetTick>
 8019838:	4602      	mov	r2, r0
 801983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801983c:	1ad3      	subs	r3, r2, r3
 801983e:	2b64      	cmp	r3, #100	; 0x64
 8019840:	d901      	bls.n	8019846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8019842:	2303      	movs	r3, #3
 8019844:	e38d      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8019846:	4b64      	ldr	r3, [pc, #400]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801984e:	2b00      	cmp	r3, #0
 8019850:	d0f0      	beq.n	8019834 <HAL_RCC_OscConfig+0xe4>
 8019852:	e014      	b.n	801987e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019854:	f7f9 fc00 	bl	8013058 <HAL_GetTick>
 8019858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801985a:	e008      	b.n	801986e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801985c:	f7f9 fbfc 	bl	8013058 <HAL_GetTick>
 8019860:	4602      	mov	r2, r0
 8019862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019864:	1ad3      	subs	r3, r2, r3
 8019866:	2b64      	cmp	r3, #100	; 0x64
 8019868:	d901      	bls.n	801986e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801986a:	2303      	movs	r3, #3
 801986c:	e379      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801986e:	4b5a      	ldr	r3, [pc, #360]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019876:	2b00      	cmp	r3, #0
 8019878:	d1f0      	bne.n	801985c <HAL_RCC_OscConfig+0x10c>
 801987a:	e000      	b.n	801987e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801987c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	f003 0302 	and.w	r3, r3, #2
 8019886:	2b00      	cmp	r3, #0
 8019888:	f000 80ae 	beq.w	80199e8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801988c:	4b52      	ldr	r3, [pc, #328]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 801988e:	691b      	ldr	r3, [r3, #16]
 8019890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8019894:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8019896:	4b50      	ldr	r3, [pc, #320]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801989a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801989c:	6a3b      	ldr	r3, [r7, #32]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d007      	beq.n	80198b2 <HAL_RCC_OscConfig+0x162>
 80198a2:	6a3b      	ldr	r3, [r7, #32]
 80198a4:	2b18      	cmp	r3, #24
 80198a6:	d13a      	bne.n	801991e <HAL_RCC_OscConfig+0x1ce>
 80198a8:	69fb      	ldr	r3, [r7, #28]
 80198aa:	f003 0303 	and.w	r3, r3, #3
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d135      	bne.n	801991e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80198b2:	4b49      	ldr	r3, [pc, #292]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	f003 0304 	and.w	r3, r3, #4
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d005      	beq.n	80198ca <HAL_RCC_OscConfig+0x17a>
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	68db      	ldr	r3, [r3, #12]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d101      	bne.n	80198ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80198c6:	2301      	movs	r3, #1
 80198c8:	e34b      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80198ca:	f7f9 fbf3 	bl	80130b4 <HAL_GetREVID>
 80198ce:	4602      	mov	r2, r0
 80198d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80198d4:	429a      	cmp	r2, r3
 80198d6:	d817      	bhi.n	8019908 <HAL_RCC_OscConfig+0x1b8>
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	691b      	ldr	r3, [r3, #16]
 80198dc:	2b40      	cmp	r3, #64	; 0x40
 80198de:	d108      	bne.n	80198f2 <HAL_RCC_OscConfig+0x1a2>
 80198e0:	4b3d      	ldr	r3, [pc, #244]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80198e2:	685b      	ldr	r3, [r3, #4]
 80198e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80198e8:	4a3b      	ldr	r2, [pc, #236]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80198ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80198ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80198f0:	e07a      	b.n	80199e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80198f2:	4b39      	ldr	r3, [pc, #228]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80198f4:	685b      	ldr	r3, [r3, #4]
 80198f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	691b      	ldr	r3, [r3, #16]
 80198fe:	031b      	lsls	r3, r3, #12
 8019900:	4935      	ldr	r1, [pc, #212]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019902:	4313      	orrs	r3, r2
 8019904:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8019906:	e06f      	b.n	80199e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019908:	4b33      	ldr	r3, [pc, #204]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 801990a:	685b      	ldr	r3, [r3, #4]
 801990c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	691b      	ldr	r3, [r3, #16]
 8019914:	061b      	lsls	r3, r3, #24
 8019916:	4930      	ldr	r1, [pc, #192]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019918:	4313      	orrs	r3, r2
 801991a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801991c:	e064      	b.n	80199e8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	68db      	ldr	r3, [r3, #12]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d045      	beq.n	80199b2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8019926:	4b2c      	ldr	r3, [pc, #176]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	f023 0219 	bic.w	r2, r3, #25
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	68db      	ldr	r3, [r3, #12]
 8019932:	4929      	ldr	r1, [pc, #164]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019934:	4313      	orrs	r3, r2
 8019936:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019938:	f7f9 fb8e 	bl	8013058 <HAL_GetTick>
 801993c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801993e:	e008      	b.n	8019952 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019940:	f7f9 fb8a 	bl	8013058 <HAL_GetTick>
 8019944:	4602      	mov	r2, r0
 8019946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019948:	1ad3      	subs	r3, r2, r3
 801994a:	2b02      	cmp	r3, #2
 801994c:	d901      	bls.n	8019952 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 801994e:	2303      	movs	r3, #3
 8019950:	e307      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8019952:	4b21      	ldr	r3, [pc, #132]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	f003 0304 	and.w	r3, r3, #4
 801995a:	2b00      	cmp	r3, #0
 801995c:	d0f0      	beq.n	8019940 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801995e:	f7f9 fba9 	bl	80130b4 <HAL_GetREVID>
 8019962:	4602      	mov	r2, r0
 8019964:	f241 0303 	movw	r3, #4099	; 0x1003
 8019968:	429a      	cmp	r2, r3
 801996a:	d817      	bhi.n	801999c <HAL_RCC_OscConfig+0x24c>
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	691b      	ldr	r3, [r3, #16]
 8019970:	2b40      	cmp	r3, #64	; 0x40
 8019972:	d108      	bne.n	8019986 <HAL_RCC_OscConfig+0x236>
 8019974:	4b18      	ldr	r3, [pc, #96]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019976:	685b      	ldr	r3, [r3, #4]
 8019978:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801997c:	4a16      	ldr	r2, [pc, #88]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 801997e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019982:	6053      	str	r3, [r2, #4]
 8019984:	e030      	b.n	80199e8 <HAL_RCC_OscConfig+0x298>
 8019986:	4b14      	ldr	r3, [pc, #80]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019988:	685b      	ldr	r3, [r3, #4]
 801998a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	691b      	ldr	r3, [r3, #16]
 8019992:	031b      	lsls	r3, r3, #12
 8019994:	4910      	ldr	r1, [pc, #64]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 8019996:	4313      	orrs	r3, r2
 8019998:	604b      	str	r3, [r1, #4]
 801999a:	e025      	b.n	80199e8 <HAL_RCC_OscConfig+0x298>
 801999c:	4b0e      	ldr	r3, [pc, #56]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 801999e:	685b      	ldr	r3, [r3, #4]
 80199a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	691b      	ldr	r3, [r3, #16]
 80199a8:	061b      	lsls	r3, r3, #24
 80199aa:	490b      	ldr	r1, [pc, #44]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80199ac:	4313      	orrs	r3, r2
 80199ae:	604b      	str	r3, [r1, #4]
 80199b0:	e01a      	b.n	80199e8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80199b2:	4b09      	ldr	r3, [pc, #36]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	4a08      	ldr	r2, [pc, #32]	; (80199d8 <HAL_RCC_OscConfig+0x288>)
 80199b8:	f023 0301 	bic.w	r3, r3, #1
 80199bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80199be:	f7f9 fb4b 	bl	8013058 <HAL_GetTick>
 80199c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80199c4:	e00a      	b.n	80199dc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80199c6:	f7f9 fb47 	bl	8013058 <HAL_GetTick>
 80199ca:	4602      	mov	r2, r0
 80199cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ce:	1ad3      	subs	r3, r2, r3
 80199d0:	2b02      	cmp	r3, #2
 80199d2:	d903      	bls.n	80199dc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80199d4:	2303      	movs	r3, #3
 80199d6:	e2c4      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
 80199d8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80199dc:	4ba4      	ldr	r3, [pc, #656]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	f003 0304 	and.w	r3, r3, #4
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d1ee      	bne.n	80199c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	f003 0310 	and.w	r3, r3, #16
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	f000 80a9 	beq.w	8019b48 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80199f6:	4b9e      	ldr	r3, [pc, #632]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 80199f8:	691b      	ldr	r3, [r3, #16]
 80199fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80199fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8019a00:	4b9b      	ldr	r3, [pc, #620]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a04:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8019a06:	69bb      	ldr	r3, [r7, #24]
 8019a08:	2b08      	cmp	r3, #8
 8019a0a:	d007      	beq.n	8019a1c <HAL_RCC_OscConfig+0x2cc>
 8019a0c:	69bb      	ldr	r3, [r7, #24]
 8019a0e:	2b18      	cmp	r3, #24
 8019a10:	d13a      	bne.n	8019a88 <HAL_RCC_OscConfig+0x338>
 8019a12:	697b      	ldr	r3, [r7, #20]
 8019a14:	f003 0303 	and.w	r3, r3, #3
 8019a18:	2b01      	cmp	r3, #1
 8019a1a:	d135      	bne.n	8019a88 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8019a1c:	4b94      	ldr	r3, [pc, #592]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d005      	beq.n	8019a34 <HAL_RCC_OscConfig+0x2e4>
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	69db      	ldr	r3, [r3, #28]
 8019a2c:	2b80      	cmp	r3, #128	; 0x80
 8019a2e:	d001      	beq.n	8019a34 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8019a30:	2301      	movs	r3, #1
 8019a32:	e296      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8019a34:	f7f9 fb3e 	bl	80130b4 <HAL_GetREVID>
 8019a38:	4602      	mov	r2, r0
 8019a3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8019a3e:	429a      	cmp	r2, r3
 8019a40:	d817      	bhi.n	8019a72 <HAL_RCC_OscConfig+0x322>
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	6a1b      	ldr	r3, [r3, #32]
 8019a46:	2b20      	cmp	r3, #32
 8019a48:	d108      	bne.n	8019a5c <HAL_RCC_OscConfig+0x30c>
 8019a4a:	4b89      	ldr	r3, [pc, #548]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a4c:	685b      	ldr	r3, [r3, #4]
 8019a4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8019a52:	4a87      	ldr	r2, [pc, #540]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019a58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8019a5a:	e075      	b.n	8019b48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8019a5c:	4b84      	ldr	r3, [pc, #528]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	6a1b      	ldr	r3, [r3, #32]
 8019a68:	069b      	lsls	r3, r3, #26
 8019a6a:	4981      	ldr	r1, [pc, #516]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a6c:	4313      	orrs	r3, r2
 8019a6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8019a70:	e06a      	b.n	8019b48 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8019a72:	4b7f      	ldr	r3, [pc, #508]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a74:	68db      	ldr	r3, [r3, #12]
 8019a76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	6a1b      	ldr	r3, [r3, #32]
 8019a7e:	061b      	lsls	r3, r3, #24
 8019a80:	497b      	ldr	r1, [pc, #492]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a82:	4313      	orrs	r3, r2
 8019a84:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8019a86:	e05f      	b.n	8019b48 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	69db      	ldr	r3, [r3, #28]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d042      	beq.n	8019b16 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8019a90:	4b77      	ldr	r3, [pc, #476]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	4a76      	ldr	r2, [pc, #472]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019a9c:	f7f9 fadc 	bl	8013058 <HAL_GetTick>
 8019aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8019aa2:	e008      	b.n	8019ab6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8019aa4:	f7f9 fad8 	bl	8013058 <HAL_GetTick>
 8019aa8:	4602      	mov	r2, r0
 8019aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aac:	1ad3      	subs	r3, r2, r3
 8019aae:	2b02      	cmp	r3, #2
 8019ab0:	d901      	bls.n	8019ab6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8019ab2:	2303      	movs	r3, #3
 8019ab4:	e255      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8019ab6:	4b6e      	ldr	r3, [pc, #440]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d0f0      	beq.n	8019aa4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8019ac2:	f7f9 faf7 	bl	80130b4 <HAL_GetREVID>
 8019ac6:	4602      	mov	r2, r0
 8019ac8:	f241 0303 	movw	r3, #4099	; 0x1003
 8019acc:	429a      	cmp	r2, r3
 8019ace:	d817      	bhi.n	8019b00 <HAL_RCC_OscConfig+0x3b0>
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	6a1b      	ldr	r3, [r3, #32]
 8019ad4:	2b20      	cmp	r3, #32
 8019ad6:	d108      	bne.n	8019aea <HAL_RCC_OscConfig+0x39a>
 8019ad8:	4b65      	ldr	r3, [pc, #404]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019ada:	685b      	ldr	r3, [r3, #4]
 8019adc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8019ae0:	4a63      	ldr	r2, [pc, #396]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019ae6:	6053      	str	r3, [r2, #4]
 8019ae8:	e02e      	b.n	8019b48 <HAL_RCC_OscConfig+0x3f8>
 8019aea:	4b61      	ldr	r3, [pc, #388]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019aec:	685b      	ldr	r3, [r3, #4]
 8019aee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	6a1b      	ldr	r3, [r3, #32]
 8019af6:	069b      	lsls	r3, r3, #26
 8019af8:	495d      	ldr	r1, [pc, #372]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019afa:	4313      	orrs	r3, r2
 8019afc:	604b      	str	r3, [r1, #4]
 8019afe:	e023      	b.n	8019b48 <HAL_RCC_OscConfig+0x3f8>
 8019b00:	4b5b      	ldr	r3, [pc, #364]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b02:	68db      	ldr	r3, [r3, #12]
 8019b04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	6a1b      	ldr	r3, [r3, #32]
 8019b0c:	061b      	lsls	r3, r3, #24
 8019b0e:	4958      	ldr	r1, [pc, #352]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b10:	4313      	orrs	r3, r2
 8019b12:	60cb      	str	r3, [r1, #12]
 8019b14:	e018      	b.n	8019b48 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8019b16:	4b56      	ldr	r3, [pc, #344]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	4a55      	ldr	r2, [pc, #340]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019b22:	f7f9 fa99 	bl	8013058 <HAL_GetTick>
 8019b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8019b28:	e008      	b.n	8019b3c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8019b2a:	f7f9 fa95 	bl	8013058 <HAL_GetTick>
 8019b2e:	4602      	mov	r2, r0
 8019b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b32:	1ad3      	subs	r3, r2, r3
 8019b34:	2b02      	cmp	r3, #2
 8019b36:	d901      	bls.n	8019b3c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8019b38:	2303      	movs	r3, #3
 8019b3a:	e212      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8019b3c:	4b4c      	ldr	r3, [pc, #304]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d1f0      	bne.n	8019b2a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	f003 0308 	and.w	r3, r3, #8
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d036      	beq.n	8019bc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	695b      	ldr	r3, [r3, #20]
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d019      	beq.n	8019b90 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019b5c:	4b44      	ldr	r3, [pc, #272]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b60:	4a43      	ldr	r2, [pc, #268]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b62:	f043 0301 	orr.w	r3, r3, #1
 8019b66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019b68:	f7f9 fa76 	bl	8013058 <HAL_GetTick>
 8019b6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8019b6e:	e008      	b.n	8019b82 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019b70:	f7f9 fa72 	bl	8013058 <HAL_GetTick>
 8019b74:	4602      	mov	r2, r0
 8019b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b78:	1ad3      	subs	r3, r2, r3
 8019b7a:	2b02      	cmp	r3, #2
 8019b7c:	d901      	bls.n	8019b82 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8019b7e:	2303      	movs	r3, #3
 8019b80:	e1ef      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8019b82:	4b3b      	ldr	r3, [pc, #236]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b86:	f003 0302 	and.w	r3, r3, #2
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d0f0      	beq.n	8019b70 <HAL_RCC_OscConfig+0x420>
 8019b8e:	e018      	b.n	8019bc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8019b90:	4b37      	ldr	r3, [pc, #220]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b94:	4a36      	ldr	r2, [pc, #216]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019b96:	f023 0301 	bic.w	r3, r3, #1
 8019b9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019b9c:	f7f9 fa5c 	bl	8013058 <HAL_GetTick>
 8019ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8019ba2:	e008      	b.n	8019bb6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019ba4:	f7f9 fa58 	bl	8013058 <HAL_GetTick>
 8019ba8:	4602      	mov	r2, r0
 8019baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bac:	1ad3      	subs	r3, r2, r3
 8019bae:	2b02      	cmp	r3, #2
 8019bb0:	d901      	bls.n	8019bb6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8019bb2:	2303      	movs	r3, #3
 8019bb4:	e1d5      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8019bb6:	4b2e      	ldr	r3, [pc, #184]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019bba:	f003 0302 	and.w	r3, r3, #2
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d1f0      	bne.n	8019ba4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	f003 0320 	and.w	r3, r3, #32
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d036      	beq.n	8019c3c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	699b      	ldr	r3, [r3, #24]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d019      	beq.n	8019c0a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8019bd6:	4b26      	ldr	r3, [pc, #152]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	4a25      	ldr	r2, [pc, #148]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019be0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8019be2:	f7f9 fa39 	bl	8013058 <HAL_GetTick>
 8019be6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8019be8:	e008      	b.n	8019bfc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8019bea:	f7f9 fa35 	bl	8013058 <HAL_GetTick>
 8019bee:	4602      	mov	r2, r0
 8019bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf2:	1ad3      	subs	r3, r2, r3
 8019bf4:	2b02      	cmp	r3, #2
 8019bf6:	d901      	bls.n	8019bfc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8019bf8:	2303      	movs	r3, #3
 8019bfa:	e1b2      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8019bfc:	4b1c      	ldr	r3, [pc, #112]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d0f0      	beq.n	8019bea <HAL_RCC_OscConfig+0x49a>
 8019c08:	e018      	b.n	8019c3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8019c0a:	4b19      	ldr	r3, [pc, #100]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	4a18      	ldr	r2, [pc, #96]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019c14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8019c16:	f7f9 fa1f 	bl	8013058 <HAL_GetTick>
 8019c1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8019c1c:	e008      	b.n	8019c30 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8019c1e:	f7f9 fa1b 	bl	8013058 <HAL_GetTick>
 8019c22:	4602      	mov	r2, r0
 8019c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c26:	1ad3      	subs	r3, r2, r3
 8019c28:	2b02      	cmp	r3, #2
 8019c2a:	d901      	bls.n	8019c30 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8019c2c:	2303      	movs	r3, #3
 8019c2e:	e198      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8019c30:	4b0f      	ldr	r3, [pc, #60]	; (8019c70 <HAL_RCC_OscConfig+0x520>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d1f0      	bne.n	8019c1e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	f003 0304 	and.w	r3, r3, #4
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	f000 8085 	beq.w	8019d54 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8019c4a:	4b0a      	ldr	r3, [pc, #40]	; (8019c74 <HAL_RCC_OscConfig+0x524>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	4a09      	ldr	r2, [pc, #36]	; (8019c74 <HAL_RCC_OscConfig+0x524>)
 8019c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019c54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8019c56:	f7f9 f9ff 	bl	8013058 <HAL_GetTick>
 8019c5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8019c5c:	e00c      	b.n	8019c78 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8019c5e:	f7f9 f9fb 	bl	8013058 <HAL_GetTick>
 8019c62:	4602      	mov	r2, r0
 8019c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c66:	1ad3      	subs	r3, r2, r3
 8019c68:	2b64      	cmp	r3, #100	; 0x64
 8019c6a:	d905      	bls.n	8019c78 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8019c6c:	2303      	movs	r3, #3
 8019c6e:	e178      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
 8019c70:	58024400 	.word	0x58024400
 8019c74:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8019c78:	4b96      	ldr	r3, [pc, #600]	; (8019ed4 <HAL_RCC_OscConfig+0x784>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d0ec      	beq.n	8019c5e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	689b      	ldr	r3, [r3, #8]
 8019c88:	2b01      	cmp	r3, #1
 8019c8a:	d106      	bne.n	8019c9a <HAL_RCC_OscConfig+0x54a>
 8019c8c:	4b92      	ldr	r3, [pc, #584]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c90:	4a91      	ldr	r2, [pc, #580]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019c92:	f043 0301 	orr.w	r3, r3, #1
 8019c96:	6713      	str	r3, [r2, #112]	; 0x70
 8019c98:	e02d      	b.n	8019cf6 <HAL_RCC_OscConfig+0x5a6>
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	689b      	ldr	r3, [r3, #8]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d10c      	bne.n	8019cbc <HAL_RCC_OscConfig+0x56c>
 8019ca2:	4b8d      	ldr	r3, [pc, #564]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ca6:	4a8c      	ldr	r2, [pc, #560]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019ca8:	f023 0301 	bic.w	r3, r3, #1
 8019cac:	6713      	str	r3, [r2, #112]	; 0x70
 8019cae:	4b8a      	ldr	r3, [pc, #552]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cb2:	4a89      	ldr	r2, [pc, #548]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019cb4:	f023 0304 	bic.w	r3, r3, #4
 8019cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8019cba:	e01c      	b.n	8019cf6 <HAL_RCC_OscConfig+0x5a6>
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	689b      	ldr	r3, [r3, #8]
 8019cc0:	2b05      	cmp	r3, #5
 8019cc2:	d10c      	bne.n	8019cde <HAL_RCC_OscConfig+0x58e>
 8019cc4:	4b84      	ldr	r3, [pc, #528]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cc8:	4a83      	ldr	r2, [pc, #524]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019cca:	f043 0304 	orr.w	r3, r3, #4
 8019cce:	6713      	str	r3, [r2, #112]	; 0x70
 8019cd0:	4b81      	ldr	r3, [pc, #516]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cd4:	4a80      	ldr	r2, [pc, #512]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019cd6:	f043 0301 	orr.w	r3, r3, #1
 8019cda:	6713      	str	r3, [r2, #112]	; 0x70
 8019cdc:	e00b      	b.n	8019cf6 <HAL_RCC_OscConfig+0x5a6>
 8019cde:	4b7e      	ldr	r3, [pc, #504]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ce2:	4a7d      	ldr	r2, [pc, #500]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019ce4:	f023 0301 	bic.w	r3, r3, #1
 8019ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8019cea:	4b7b      	ldr	r3, [pc, #492]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cee:	4a7a      	ldr	r2, [pc, #488]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019cf0:	f023 0304 	bic.w	r3, r3, #4
 8019cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	689b      	ldr	r3, [r3, #8]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d015      	beq.n	8019d2a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019cfe:	f7f9 f9ab 	bl	8013058 <HAL_GetTick>
 8019d02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8019d04:	e00a      	b.n	8019d1c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019d06:	f7f9 f9a7 	bl	8013058 <HAL_GetTick>
 8019d0a:	4602      	mov	r2, r0
 8019d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d0e:	1ad3      	subs	r3, r2, r3
 8019d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8019d14:	4293      	cmp	r3, r2
 8019d16:	d901      	bls.n	8019d1c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8019d18:	2303      	movs	r3, #3
 8019d1a:	e122      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8019d1c:	4b6e      	ldr	r3, [pc, #440]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d20:	f003 0302 	and.w	r3, r3, #2
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d0ee      	beq.n	8019d06 <HAL_RCC_OscConfig+0x5b6>
 8019d28:	e014      	b.n	8019d54 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019d2a:	f7f9 f995 	bl	8013058 <HAL_GetTick>
 8019d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8019d30:	e00a      	b.n	8019d48 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019d32:	f7f9 f991 	bl	8013058 <HAL_GetTick>
 8019d36:	4602      	mov	r2, r0
 8019d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d3a:	1ad3      	subs	r3, r2, r3
 8019d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8019d40:	4293      	cmp	r3, r2
 8019d42:	d901      	bls.n	8019d48 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8019d44:	2303      	movs	r3, #3
 8019d46:	e10c      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8019d48:	4b63      	ldr	r3, [pc, #396]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d4c:	f003 0302 	and.w	r3, r3, #2
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d1ee      	bne.n	8019d32 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	f000 8101 	beq.w	8019f60 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8019d5e:	4b5e      	ldr	r3, [pc, #376]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019d60:	691b      	ldr	r3, [r3, #16]
 8019d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8019d66:	2b18      	cmp	r3, #24
 8019d68:	f000 80bc 	beq.w	8019ee4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d70:	2b02      	cmp	r3, #2
 8019d72:	f040 8095 	bne.w	8019ea0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019d76:	4b58      	ldr	r3, [pc, #352]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	4a57      	ldr	r2, [pc, #348]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019d82:	f7f9 f969 	bl	8013058 <HAL_GetTick>
 8019d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8019d88:	e008      	b.n	8019d9c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019d8a:	f7f9 f965 	bl	8013058 <HAL_GetTick>
 8019d8e:	4602      	mov	r2, r0
 8019d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d92:	1ad3      	subs	r3, r2, r3
 8019d94:	2b02      	cmp	r3, #2
 8019d96:	d901      	bls.n	8019d9c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8019d98:	2303      	movs	r3, #3
 8019d9a:	e0e2      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8019d9c:	4b4e      	ldr	r3, [pc, #312]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d1f0      	bne.n	8019d8a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8019da8:	4b4b      	ldr	r3, [pc, #300]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019dac:	4b4b      	ldr	r3, [pc, #300]	; (8019edc <HAL_RCC_OscConfig+0x78c>)
 8019dae:	4013      	ands	r3, r2
 8019db0:	687a      	ldr	r2, [r7, #4]
 8019db2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8019db4:	687a      	ldr	r2, [r7, #4]
 8019db6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8019db8:	0112      	lsls	r2, r2, #4
 8019dba:	430a      	orrs	r2, r1
 8019dbc:	4946      	ldr	r1, [pc, #280]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019dbe:	4313      	orrs	r3, r2
 8019dc0:	628b      	str	r3, [r1, #40]	; 0x28
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019dc6:	3b01      	subs	r3, #1
 8019dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019dd0:	3b01      	subs	r3, #1
 8019dd2:	025b      	lsls	r3, r3, #9
 8019dd4:	b29b      	uxth	r3, r3
 8019dd6:	431a      	orrs	r2, r3
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ddc:	3b01      	subs	r3, #1
 8019dde:	041b      	lsls	r3, r3, #16
 8019de0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019de4:	431a      	orrs	r2, r3
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dea:	3b01      	subs	r3, #1
 8019dec:	061b      	lsls	r3, r3, #24
 8019dee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8019df2:	4939      	ldr	r1, [pc, #228]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019df4:	4313      	orrs	r3, r2
 8019df6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8019df8:	4b37      	ldr	r3, [pc, #220]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dfc:	4a36      	ldr	r2, [pc, #216]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019dfe:	f023 0301 	bic.w	r3, r3, #1
 8019e02:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8019e04:	4b34      	ldr	r3, [pc, #208]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019e08:	4b35      	ldr	r3, [pc, #212]	; (8019ee0 <HAL_RCC_OscConfig+0x790>)
 8019e0a:	4013      	ands	r3, r2
 8019e0c:	687a      	ldr	r2, [r7, #4]
 8019e0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019e10:	00d2      	lsls	r2, r2, #3
 8019e12:	4931      	ldr	r1, [pc, #196]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e14:	4313      	orrs	r3, r2
 8019e16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8019e18:	4b2f      	ldr	r3, [pc, #188]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e1c:	f023 020c 	bic.w	r2, r3, #12
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e24:	492c      	ldr	r1, [pc, #176]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e26:	4313      	orrs	r3, r2
 8019e28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8019e2a:	4b2b      	ldr	r3, [pc, #172]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e2e:	f023 0202 	bic.w	r2, r3, #2
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e36:	4928      	ldr	r1, [pc, #160]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e38:	4313      	orrs	r3, r2
 8019e3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8019e3c:	4b26      	ldr	r3, [pc, #152]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e40:	4a25      	ldr	r2, [pc, #148]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8019e48:	4b23      	ldr	r3, [pc, #140]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e4c:	4a22      	ldr	r2, [pc, #136]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8019e54:	4b20      	ldr	r3, [pc, #128]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e58:	4a1f      	ldr	r2, [pc, #124]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8019e60:	4b1d      	ldr	r3, [pc, #116]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e64:	4a1c      	ldr	r2, [pc, #112]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e66:	f043 0301 	orr.w	r3, r3, #1
 8019e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019e6c:	4b1a      	ldr	r3, [pc, #104]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	4a19      	ldr	r2, [pc, #100]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019e78:	f7f9 f8ee 	bl	8013058 <HAL_GetTick>
 8019e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8019e7e:	e008      	b.n	8019e92 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019e80:	f7f9 f8ea 	bl	8013058 <HAL_GetTick>
 8019e84:	4602      	mov	r2, r0
 8019e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e88:	1ad3      	subs	r3, r2, r3
 8019e8a:	2b02      	cmp	r3, #2
 8019e8c:	d901      	bls.n	8019e92 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8019e8e:	2303      	movs	r3, #3
 8019e90:	e067      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8019e92:	4b11      	ldr	r3, [pc, #68]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d0f0      	beq.n	8019e80 <HAL_RCC_OscConfig+0x730>
 8019e9e:	e05f      	b.n	8019f60 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019ea0:	4b0d      	ldr	r3, [pc, #52]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	4a0c      	ldr	r2, [pc, #48]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019eac:	f7f9 f8d4 	bl	8013058 <HAL_GetTick>
 8019eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8019eb2:	e008      	b.n	8019ec6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019eb4:	f7f9 f8d0 	bl	8013058 <HAL_GetTick>
 8019eb8:	4602      	mov	r2, r0
 8019eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ebc:	1ad3      	subs	r3, r2, r3
 8019ebe:	2b02      	cmp	r3, #2
 8019ec0:	d901      	bls.n	8019ec6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8019ec2:	2303      	movs	r3, #3
 8019ec4:	e04d      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8019ec6:	4b04      	ldr	r3, [pc, #16]	; (8019ed8 <HAL_RCC_OscConfig+0x788>)
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d1f0      	bne.n	8019eb4 <HAL_RCC_OscConfig+0x764>
 8019ed2:	e045      	b.n	8019f60 <HAL_RCC_OscConfig+0x810>
 8019ed4:	58024800 	.word	0x58024800
 8019ed8:	58024400 	.word	0x58024400
 8019edc:	fffffc0c 	.word	0xfffffc0c
 8019ee0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8019ee4:	4b21      	ldr	r3, [pc, #132]	; (8019f6c <HAL_RCC_OscConfig+0x81c>)
 8019ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ee8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8019eea:	4b20      	ldr	r3, [pc, #128]	; (8019f6c <HAL_RCC_OscConfig+0x81c>)
 8019eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019eee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ef4:	2b01      	cmp	r3, #1
 8019ef6:	d031      	beq.n	8019f5c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019ef8:	693b      	ldr	r3, [r7, #16]
 8019efa:	f003 0203 	and.w	r2, r3, #3
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019f02:	429a      	cmp	r2, r3
 8019f04:	d12a      	bne.n	8019f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8019f06:	693b      	ldr	r3, [r7, #16]
 8019f08:	091b      	lsrs	r3, r3, #4
 8019f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019f12:	429a      	cmp	r2, r3
 8019f14:	d122      	bne.n	8019f5c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8019f22:	429a      	cmp	r2, r3
 8019f24:	d11a      	bne.n	8019f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	0a5b      	lsrs	r3, r3, #9
 8019f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8019f34:	429a      	cmp	r2, r3
 8019f36:	d111      	bne.n	8019f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	0c1b      	lsrs	r3, r3, #16
 8019f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8019f46:	429a      	cmp	r2, r3
 8019f48:	d108      	bne.n	8019f5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	0e1b      	lsrs	r3, r3, #24
 8019f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8019f58:	429a      	cmp	r2, r3
 8019f5a:	d001      	beq.n	8019f60 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8019f5c:	2301      	movs	r3, #1
 8019f5e:	e000      	b.n	8019f62 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8019f60:	2300      	movs	r3, #0
}
 8019f62:	4618      	mov	r0, r3
 8019f64:	3730      	adds	r7, #48	; 0x30
 8019f66:	46bd      	mov	sp, r7
 8019f68:	bd80      	pop	{r7, pc}
 8019f6a:	bf00      	nop
 8019f6c:	58024400 	.word	0x58024400

08019f70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b086      	sub	sp, #24
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	6078      	str	r0, [r7, #4]
 8019f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d101      	bne.n	8019f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8019f80:	2301      	movs	r3, #1
 8019f82:	e19c      	b.n	801a2be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8019f84:	4b8a      	ldr	r3, [pc, #552]	; (801a1b0 <HAL_RCC_ClockConfig+0x240>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	f003 030f 	and.w	r3, r3, #15
 8019f8c:	683a      	ldr	r2, [r7, #0]
 8019f8e:	429a      	cmp	r2, r3
 8019f90:	d910      	bls.n	8019fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019f92:	4b87      	ldr	r3, [pc, #540]	; (801a1b0 <HAL_RCC_ClockConfig+0x240>)
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	f023 020f 	bic.w	r2, r3, #15
 8019f9a:	4985      	ldr	r1, [pc, #532]	; (801a1b0 <HAL_RCC_ClockConfig+0x240>)
 8019f9c:	683b      	ldr	r3, [r7, #0]
 8019f9e:	4313      	orrs	r3, r2
 8019fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8019fa2:	4b83      	ldr	r3, [pc, #524]	; (801a1b0 <HAL_RCC_ClockConfig+0x240>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	f003 030f 	and.w	r3, r3, #15
 8019faa:	683a      	ldr	r2, [r7, #0]
 8019fac:	429a      	cmp	r2, r3
 8019fae:	d001      	beq.n	8019fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8019fb0:	2301      	movs	r3, #1
 8019fb2:	e184      	b.n	801a2be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	f003 0304 	and.w	r3, r3, #4
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d010      	beq.n	8019fe2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	691a      	ldr	r2, [r3, #16]
 8019fc4:	4b7b      	ldr	r3, [pc, #492]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 8019fc6:	699b      	ldr	r3, [r3, #24]
 8019fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8019fcc:	429a      	cmp	r2, r3
 8019fce:	d908      	bls.n	8019fe2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8019fd0:	4b78      	ldr	r3, [pc, #480]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 8019fd2:	699b      	ldr	r3, [r3, #24]
 8019fd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	691b      	ldr	r3, [r3, #16]
 8019fdc:	4975      	ldr	r1, [pc, #468]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 8019fde:	4313      	orrs	r3, r2
 8019fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	f003 0308 	and.w	r3, r3, #8
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d010      	beq.n	801a010 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	695a      	ldr	r2, [r3, #20]
 8019ff2:	4b70      	ldr	r3, [pc, #448]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 8019ff4:	69db      	ldr	r3, [r3, #28]
 8019ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8019ffa:	429a      	cmp	r2, r3
 8019ffc:	d908      	bls.n	801a010 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8019ffe:	4b6d      	ldr	r3, [pc, #436]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a000:	69db      	ldr	r3, [r3, #28]
 801a002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	695b      	ldr	r3, [r3, #20]
 801a00a:	496a      	ldr	r1, [pc, #424]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a00c:	4313      	orrs	r3, r2
 801a00e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	f003 0310 	and.w	r3, r3, #16
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d010      	beq.n	801a03e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	699a      	ldr	r2, [r3, #24]
 801a020:	4b64      	ldr	r3, [pc, #400]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a022:	69db      	ldr	r3, [r3, #28]
 801a024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a028:	429a      	cmp	r2, r3
 801a02a:	d908      	bls.n	801a03e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801a02c:	4b61      	ldr	r3, [pc, #388]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a02e:	69db      	ldr	r3, [r3, #28]
 801a030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	699b      	ldr	r3, [r3, #24]
 801a038:	495e      	ldr	r1, [pc, #376]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a03a:	4313      	orrs	r3, r2
 801a03c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f003 0320 	and.w	r3, r3, #32
 801a046:	2b00      	cmp	r3, #0
 801a048:	d010      	beq.n	801a06c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	69da      	ldr	r2, [r3, #28]
 801a04e:	4b59      	ldr	r3, [pc, #356]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a050:	6a1b      	ldr	r3, [r3, #32]
 801a052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801a056:	429a      	cmp	r2, r3
 801a058:	d908      	bls.n	801a06c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801a05a:	4b56      	ldr	r3, [pc, #344]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a05c:	6a1b      	ldr	r3, [r3, #32]
 801a05e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	69db      	ldr	r3, [r3, #28]
 801a066:	4953      	ldr	r1, [pc, #332]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a068:	4313      	orrs	r3, r2
 801a06a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	f003 0302 	and.w	r3, r3, #2
 801a074:	2b00      	cmp	r3, #0
 801a076:	d010      	beq.n	801a09a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	68da      	ldr	r2, [r3, #12]
 801a07c:	4b4d      	ldr	r3, [pc, #308]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a07e:	699b      	ldr	r3, [r3, #24]
 801a080:	f003 030f 	and.w	r3, r3, #15
 801a084:	429a      	cmp	r2, r3
 801a086:	d908      	bls.n	801a09a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a088:	4b4a      	ldr	r3, [pc, #296]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a08a:	699b      	ldr	r3, [r3, #24]
 801a08c:	f023 020f 	bic.w	r2, r3, #15
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	68db      	ldr	r3, [r3, #12]
 801a094:	4947      	ldr	r1, [pc, #284]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a096:	4313      	orrs	r3, r2
 801a098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	f003 0301 	and.w	r3, r3, #1
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d055      	beq.n	801a152 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801a0a6:	4b43      	ldr	r3, [pc, #268]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a0a8:	699b      	ldr	r3, [r3, #24]
 801a0aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	689b      	ldr	r3, [r3, #8]
 801a0b2:	4940      	ldr	r1, [pc, #256]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a0b4:	4313      	orrs	r3, r2
 801a0b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	685b      	ldr	r3, [r3, #4]
 801a0bc:	2b02      	cmp	r3, #2
 801a0be:	d107      	bne.n	801a0d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a0c0:	4b3c      	ldr	r3, [pc, #240]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d121      	bne.n	801a110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801a0cc:	2301      	movs	r3, #1
 801a0ce:	e0f6      	b.n	801a2be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	685b      	ldr	r3, [r3, #4]
 801a0d4:	2b03      	cmp	r3, #3
 801a0d6:	d107      	bne.n	801a0e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801a0d8:	4b36      	ldr	r3, [pc, #216]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d115      	bne.n	801a110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801a0e4:	2301      	movs	r3, #1
 801a0e6:	e0ea      	b.n	801a2be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	685b      	ldr	r3, [r3, #4]
 801a0ec:	2b01      	cmp	r3, #1
 801a0ee:	d107      	bne.n	801a100 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801a0f0:	4b30      	ldr	r3, [pc, #192]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d109      	bne.n	801a110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801a0fc:	2301      	movs	r3, #1
 801a0fe:	e0de      	b.n	801a2be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a100:	4b2c      	ldr	r3, [pc, #176]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	f003 0304 	and.w	r3, r3, #4
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d101      	bne.n	801a110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801a10c:	2301      	movs	r3, #1
 801a10e:	e0d6      	b.n	801a2be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801a110:	4b28      	ldr	r3, [pc, #160]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a112:	691b      	ldr	r3, [r3, #16]
 801a114:	f023 0207 	bic.w	r2, r3, #7
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	685b      	ldr	r3, [r3, #4]
 801a11c:	4925      	ldr	r1, [pc, #148]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a11e:	4313      	orrs	r3, r2
 801a120:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a122:	f7f8 ff99 	bl	8013058 <HAL_GetTick>
 801a126:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a128:	e00a      	b.n	801a140 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a12a:	f7f8 ff95 	bl	8013058 <HAL_GetTick>
 801a12e:	4602      	mov	r2, r0
 801a130:	697b      	ldr	r3, [r7, #20]
 801a132:	1ad3      	subs	r3, r2, r3
 801a134:	f241 3288 	movw	r2, #5000	; 0x1388
 801a138:	4293      	cmp	r3, r2
 801a13a:	d901      	bls.n	801a140 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801a13c:	2303      	movs	r3, #3
 801a13e:	e0be      	b.n	801a2be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a140:	4b1c      	ldr	r3, [pc, #112]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a142:	691b      	ldr	r3, [r3, #16]
 801a144:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	685b      	ldr	r3, [r3, #4]
 801a14c:	00db      	lsls	r3, r3, #3
 801a14e:	429a      	cmp	r2, r3
 801a150:	d1eb      	bne.n	801a12a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	f003 0302 	and.w	r3, r3, #2
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d010      	beq.n	801a180 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	68da      	ldr	r2, [r3, #12]
 801a162:	4b14      	ldr	r3, [pc, #80]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a164:	699b      	ldr	r3, [r3, #24]
 801a166:	f003 030f 	and.w	r3, r3, #15
 801a16a:	429a      	cmp	r2, r3
 801a16c:	d208      	bcs.n	801a180 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a16e:	4b11      	ldr	r3, [pc, #68]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a170:	699b      	ldr	r3, [r3, #24]
 801a172:	f023 020f 	bic.w	r2, r3, #15
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	68db      	ldr	r3, [r3, #12]
 801a17a:	490e      	ldr	r1, [pc, #56]	; (801a1b4 <HAL_RCC_ClockConfig+0x244>)
 801a17c:	4313      	orrs	r3, r2
 801a17e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a180:	4b0b      	ldr	r3, [pc, #44]	; (801a1b0 <HAL_RCC_ClockConfig+0x240>)
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	f003 030f 	and.w	r3, r3, #15
 801a188:	683a      	ldr	r2, [r7, #0]
 801a18a:	429a      	cmp	r2, r3
 801a18c:	d214      	bcs.n	801a1b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a18e:	4b08      	ldr	r3, [pc, #32]	; (801a1b0 <HAL_RCC_ClockConfig+0x240>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	f023 020f 	bic.w	r2, r3, #15
 801a196:	4906      	ldr	r1, [pc, #24]	; (801a1b0 <HAL_RCC_ClockConfig+0x240>)
 801a198:	683b      	ldr	r3, [r7, #0]
 801a19a:	4313      	orrs	r3, r2
 801a19c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a19e:	4b04      	ldr	r3, [pc, #16]	; (801a1b0 <HAL_RCC_ClockConfig+0x240>)
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	f003 030f 	and.w	r3, r3, #15
 801a1a6:	683a      	ldr	r2, [r7, #0]
 801a1a8:	429a      	cmp	r2, r3
 801a1aa:	d005      	beq.n	801a1b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801a1ac:	2301      	movs	r3, #1
 801a1ae:	e086      	b.n	801a2be <HAL_RCC_ClockConfig+0x34e>
 801a1b0:	52002000 	.word	0x52002000
 801a1b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	f003 0304 	and.w	r3, r3, #4
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d010      	beq.n	801a1e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	691a      	ldr	r2, [r3, #16]
 801a1c8:	4b3f      	ldr	r3, [pc, #252]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a1ca:	699b      	ldr	r3, [r3, #24]
 801a1cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801a1d0:	429a      	cmp	r2, r3
 801a1d2:	d208      	bcs.n	801a1e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801a1d4:	4b3c      	ldr	r3, [pc, #240]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a1d6:	699b      	ldr	r3, [r3, #24]
 801a1d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	691b      	ldr	r3, [r3, #16]
 801a1e0:	4939      	ldr	r1, [pc, #228]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a1e2:	4313      	orrs	r3, r2
 801a1e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	f003 0308 	and.w	r3, r3, #8
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d010      	beq.n	801a214 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	695a      	ldr	r2, [r3, #20]
 801a1f6:	4b34      	ldr	r3, [pc, #208]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a1f8:	69db      	ldr	r3, [r3, #28]
 801a1fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801a1fe:	429a      	cmp	r2, r3
 801a200:	d208      	bcs.n	801a214 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801a202:	4b31      	ldr	r3, [pc, #196]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a204:	69db      	ldr	r3, [r3, #28]
 801a206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	695b      	ldr	r3, [r3, #20]
 801a20e:	492e      	ldr	r1, [pc, #184]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a210:	4313      	orrs	r3, r2
 801a212:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	f003 0310 	and.w	r3, r3, #16
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d010      	beq.n	801a242 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	699a      	ldr	r2, [r3, #24]
 801a224:	4b28      	ldr	r3, [pc, #160]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a226:	69db      	ldr	r3, [r3, #28]
 801a228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a22c:	429a      	cmp	r2, r3
 801a22e:	d208      	bcs.n	801a242 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801a230:	4b25      	ldr	r3, [pc, #148]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a232:	69db      	ldr	r3, [r3, #28]
 801a234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	699b      	ldr	r3, [r3, #24]
 801a23c:	4922      	ldr	r1, [pc, #136]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a23e:	4313      	orrs	r3, r2
 801a240:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	f003 0320 	and.w	r3, r3, #32
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d010      	beq.n	801a270 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	69da      	ldr	r2, [r3, #28]
 801a252:	4b1d      	ldr	r3, [pc, #116]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a254:	6a1b      	ldr	r3, [r3, #32]
 801a256:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801a25a:	429a      	cmp	r2, r3
 801a25c:	d208      	bcs.n	801a270 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801a25e:	4b1a      	ldr	r3, [pc, #104]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a260:	6a1b      	ldr	r3, [r3, #32]
 801a262:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	69db      	ldr	r3, [r3, #28]
 801a26a:	4917      	ldr	r1, [pc, #92]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a26c:	4313      	orrs	r3, r2
 801a26e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801a270:	f000 f834 	bl	801a2dc <HAL_RCC_GetSysClockFreq>
 801a274:	4601      	mov	r1, r0
 801a276:	4b14      	ldr	r3, [pc, #80]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a278:	699b      	ldr	r3, [r3, #24]
 801a27a:	0a1b      	lsrs	r3, r3, #8
 801a27c:	f003 030f 	and.w	r3, r3, #15
 801a280:	4a12      	ldr	r2, [pc, #72]	; (801a2cc <HAL_RCC_ClockConfig+0x35c>)
 801a282:	5cd3      	ldrb	r3, [r2, r3]
 801a284:	f003 031f 	and.w	r3, r3, #31
 801a288:	fa21 f303 	lsr.w	r3, r1, r3
 801a28c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801a28e:	4b0e      	ldr	r3, [pc, #56]	; (801a2c8 <HAL_RCC_ClockConfig+0x358>)
 801a290:	699b      	ldr	r3, [r3, #24]
 801a292:	f003 030f 	and.w	r3, r3, #15
 801a296:	4a0d      	ldr	r2, [pc, #52]	; (801a2cc <HAL_RCC_ClockConfig+0x35c>)
 801a298:	5cd3      	ldrb	r3, [r2, r3]
 801a29a:	f003 031f 	and.w	r3, r3, #31
 801a29e:	693a      	ldr	r2, [r7, #16]
 801a2a0:	fa22 f303 	lsr.w	r3, r2, r3
 801a2a4:	4a0a      	ldr	r2, [pc, #40]	; (801a2d0 <HAL_RCC_ClockConfig+0x360>)
 801a2a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801a2a8:	4a0a      	ldr	r2, [pc, #40]	; (801a2d4 <HAL_RCC_ClockConfig+0x364>)
 801a2aa:	693b      	ldr	r3, [r7, #16]
 801a2ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 801a2ae:	4b0a      	ldr	r3, [pc, #40]	; (801a2d8 <HAL_RCC_ClockConfig+0x368>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	f7f7 fd6c 	bl	8011d90 <HAL_InitTick>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801a2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2be:	4618      	mov	r0, r3
 801a2c0:	3718      	adds	r7, #24
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	bd80      	pop	{r7, pc}
 801a2c6:	bf00      	nop
 801a2c8:	58024400 	.word	0x58024400
 801a2cc:	0802d72c 	.word	0x0802d72c
 801a2d0:	2400069c 	.word	0x2400069c
 801a2d4:	24000698 	.word	0x24000698
 801a2d8:	240006a0 	.word	0x240006a0

0801a2dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a2dc:	b480      	push	{r7}
 801a2de:	b089      	sub	sp, #36	; 0x24
 801a2e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a2e2:	4baf      	ldr	r3, [pc, #700]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a2e4:	691b      	ldr	r3, [r3, #16]
 801a2e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a2ea:	2b18      	cmp	r3, #24
 801a2ec:	f200 814e 	bhi.w	801a58c <HAL_RCC_GetSysClockFreq+0x2b0>
 801a2f0:	a201      	add	r2, pc, #4	; (adr r2, 801a2f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 801a2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2f6:	bf00      	nop
 801a2f8:	0801a35d 	.word	0x0801a35d
 801a2fc:	0801a58d 	.word	0x0801a58d
 801a300:	0801a58d 	.word	0x0801a58d
 801a304:	0801a58d 	.word	0x0801a58d
 801a308:	0801a58d 	.word	0x0801a58d
 801a30c:	0801a58d 	.word	0x0801a58d
 801a310:	0801a58d 	.word	0x0801a58d
 801a314:	0801a58d 	.word	0x0801a58d
 801a318:	0801a383 	.word	0x0801a383
 801a31c:	0801a58d 	.word	0x0801a58d
 801a320:	0801a58d 	.word	0x0801a58d
 801a324:	0801a58d 	.word	0x0801a58d
 801a328:	0801a58d 	.word	0x0801a58d
 801a32c:	0801a58d 	.word	0x0801a58d
 801a330:	0801a58d 	.word	0x0801a58d
 801a334:	0801a58d 	.word	0x0801a58d
 801a338:	0801a389 	.word	0x0801a389
 801a33c:	0801a58d 	.word	0x0801a58d
 801a340:	0801a58d 	.word	0x0801a58d
 801a344:	0801a58d 	.word	0x0801a58d
 801a348:	0801a58d 	.word	0x0801a58d
 801a34c:	0801a58d 	.word	0x0801a58d
 801a350:	0801a58d 	.word	0x0801a58d
 801a354:	0801a58d 	.word	0x0801a58d
 801a358:	0801a38f 	.word	0x0801a38f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a35c:	4b90      	ldr	r3, [pc, #576]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	f003 0320 	and.w	r3, r3, #32
 801a364:	2b00      	cmp	r3, #0
 801a366:	d009      	beq.n	801a37c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801a368:	4b8d      	ldr	r3, [pc, #564]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	08db      	lsrs	r3, r3, #3
 801a36e:	f003 0303 	and.w	r3, r3, #3
 801a372:	4a8c      	ldr	r2, [pc, #560]	; (801a5a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801a374:	fa22 f303 	lsr.w	r3, r2, r3
 801a378:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 801a37a:	e10a      	b.n	801a592 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801a37c:	4b89      	ldr	r3, [pc, #548]	; (801a5a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801a37e:	61bb      	str	r3, [r7, #24]
    break;
 801a380:	e107      	b.n	801a592 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801a382:	4b89      	ldr	r3, [pc, #548]	; (801a5a8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 801a384:	61bb      	str	r3, [r7, #24]
    break;
 801a386:	e104      	b.n	801a592 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 801a388:	4b88      	ldr	r3, [pc, #544]	; (801a5ac <HAL_RCC_GetSysClockFreq+0x2d0>)
 801a38a:	61bb      	str	r3, [r7, #24]
    break;
 801a38c:	e101      	b.n	801a592 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801a38e:	4b84      	ldr	r3, [pc, #528]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a392:	f003 0303 	and.w	r3, r3, #3
 801a396:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 801a398:	4b81      	ldr	r3, [pc, #516]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a39c:	091b      	lsrs	r3, r3, #4
 801a39e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a3a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801a3a4:	4b7e      	ldr	r3, [pc, #504]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3a8:	f003 0301 	and.w	r3, r3, #1
 801a3ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801a3ae:	4b7c      	ldr	r3, [pc, #496]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a3b2:	08db      	lsrs	r3, r3, #3
 801a3b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a3b8:	68fa      	ldr	r2, [r7, #12]
 801a3ba:	fb02 f303 	mul.w	r3, r2, r3
 801a3be:	ee07 3a90 	vmov	s15, r3
 801a3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a3c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 801a3ca:	693b      	ldr	r3, [r7, #16]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	f000 80da 	beq.w	801a586 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 801a3d2:	697b      	ldr	r3, [r7, #20]
 801a3d4:	2b01      	cmp	r3, #1
 801a3d6:	d05a      	beq.n	801a48e <HAL_RCC_GetSysClockFreq+0x1b2>
 801a3d8:	2b01      	cmp	r3, #1
 801a3da:	d302      	bcc.n	801a3e2 <HAL_RCC_GetSysClockFreq+0x106>
 801a3dc:	2b02      	cmp	r3, #2
 801a3de:	d078      	beq.n	801a4d2 <HAL_RCC_GetSysClockFreq+0x1f6>
 801a3e0:	e099      	b.n	801a516 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a3e2:	4b6f      	ldr	r3, [pc, #444]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	f003 0320 	and.w	r3, r3, #32
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d02d      	beq.n	801a44a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801a3ee:	4b6c      	ldr	r3, [pc, #432]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	08db      	lsrs	r3, r3, #3
 801a3f4:	f003 0303 	and.w	r3, r3, #3
 801a3f8:	4a6a      	ldr	r2, [pc, #424]	; (801a5a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801a3fa:	fa22 f303 	lsr.w	r3, r2, r3
 801a3fe:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	ee07 3a90 	vmov	s15, r3
 801a406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a40a:	693b      	ldr	r3, [r7, #16]
 801a40c:	ee07 3a90 	vmov	s15, r3
 801a410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a418:	4b61      	ldr	r3, [pc, #388]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a420:	ee07 3a90 	vmov	s15, r3
 801a424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a428:	ed97 6a02 	vldr	s12, [r7, #8]
 801a42c:	eddf 5a60 	vldr	s11, [pc, #384]	; 801a5b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 801a430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801a434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a43c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a440:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a444:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 801a448:	e087      	b.n	801a55a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801a44a:	693b      	ldr	r3, [r7, #16]
 801a44c:	ee07 3a90 	vmov	s15, r3
 801a450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a454:	eddf 6a57 	vldr	s13, [pc, #348]	; 801a5b4 <HAL_RCC_GetSysClockFreq+0x2d8>
 801a458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a45c:	4b50      	ldr	r3, [pc, #320]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a464:	ee07 3a90 	vmov	s15, r3
 801a468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a46c:	ed97 6a02 	vldr	s12, [r7, #8]
 801a470:	eddf 5a4f 	vldr	s11, [pc, #316]	; 801a5b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 801a474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801a478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a47c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a484:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801a48c:	e065      	b.n	801a55a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801a48e:	693b      	ldr	r3, [r7, #16]
 801a490:	ee07 3a90 	vmov	s15, r3
 801a494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a498:	eddf 6a47 	vldr	s13, [pc, #284]	; 801a5b8 <HAL_RCC_GetSysClockFreq+0x2dc>
 801a49c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a4a0:	4b3f      	ldr	r3, [pc, #252]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a4a8:	ee07 3a90 	vmov	s15, r3
 801a4ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a4b0:	ed97 6a02 	vldr	s12, [r7, #8]
 801a4b4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801a5b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 801a4b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801a4bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a4c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a4c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a4c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a4cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801a4d0:	e043      	b.n	801a55a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801a4d2:	693b      	ldr	r3, [r7, #16]
 801a4d4:	ee07 3a90 	vmov	s15, r3
 801a4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a4dc:	eddf 6a37 	vldr	s13, [pc, #220]	; 801a5bc <HAL_RCC_GetSysClockFreq+0x2e0>
 801a4e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a4e4:	4b2e      	ldr	r3, [pc, #184]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a4ec:	ee07 3a90 	vmov	s15, r3
 801a4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a4f4:	ed97 6a02 	vldr	s12, [r7, #8]
 801a4f8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 801a5b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 801a4fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801a500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a50c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a510:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801a514:	e021      	b.n	801a55a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801a516:	693b      	ldr	r3, [r7, #16]
 801a518:	ee07 3a90 	vmov	s15, r3
 801a51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a520:	eddf 6a25 	vldr	s13, [pc, #148]	; 801a5b8 <HAL_RCC_GetSysClockFreq+0x2dc>
 801a524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a528:	4b1d      	ldr	r3, [pc, #116]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a530:	ee07 3a90 	vmov	s15, r3
 801a534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a538:	ed97 6a02 	vldr	s12, [r7, #8]
 801a53c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 801a5b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 801a540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801a544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a54c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a550:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a554:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801a558:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 801a55a:	4b11      	ldr	r3, [pc, #68]	; (801a5a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801a55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a55e:	0a5b      	lsrs	r3, r3, #9
 801a560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a564:	3301      	adds	r3, #1
 801a566:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 801a568:	683b      	ldr	r3, [r7, #0]
 801a56a:	ee07 3a90 	vmov	s15, r3
 801a56e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801a572:	edd7 6a07 	vldr	s13, [r7, #28]
 801a576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a57a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a57e:	ee17 3a90 	vmov	r3, s15
 801a582:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801a584:	e005      	b.n	801a592 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 801a586:	2300      	movs	r3, #0
 801a588:	61bb      	str	r3, [r7, #24]
    break;
 801a58a:	e002      	b.n	801a592 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 801a58c:	4b06      	ldr	r3, [pc, #24]	; (801a5a8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 801a58e:	61bb      	str	r3, [r7, #24]
    break;
 801a590:	bf00      	nop
  }

  return sysclockfreq;
 801a592:	69bb      	ldr	r3, [r7, #24]
}
 801a594:	4618      	mov	r0, r3
 801a596:	3724      	adds	r7, #36	; 0x24
 801a598:	46bd      	mov	sp, r7
 801a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59e:	4770      	bx	lr
 801a5a0:	58024400 	.word	0x58024400
 801a5a4:	03d09000 	.word	0x03d09000
 801a5a8:	003d0900 	.word	0x003d0900
 801a5ac:	007a1200 	.word	0x007a1200
 801a5b0:	46000000 	.word	0x46000000
 801a5b4:	4c742400 	.word	0x4c742400
 801a5b8:	4a742400 	.word	0x4a742400
 801a5bc:	4af42400 	.word	0x4af42400

0801a5c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a5c0:	b580      	push	{r7, lr}
 801a5c2:	b082      	sub	sp, #8
 801a5c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801a5c6:	f7ff fe89 	bl	801a2dc <HAL_RCC_GetSysClockFreq>
 801a5ca:	4601      	mov	r1, r0
 801a5cc:	4b10      	ldr	r3, [pc, #64]	; (801a610 <HAL_RCC_GetHCLKFreq+0x50>)
 801a5ce:	699b      	ldr	r3, [r3, #24]
 801a5d0:	0a1b      	lsrs	r3, r3, #8
 801a5d2:	f003 030f 	and.w	r3, r3, #15
 801a5d6:	4a0f      	ldr	r2, [pc, #60]	; (801a614 <HAL_RCC_GetHCLKFreq+0x54>)
 801a5d8:	5cd3      	ldrb	r3, [r2, r3]
 801a5da:	f003 031f 	and.w	r3, r3, #31
 801a5de:	fa21 f303 	lsr.w	r3, r1, r3
 801a5e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801a5e4:	4b0a      	ldr	r3, [pc, #40]	; (801a610 <HAL_RCC_GetHCLKFreq+0x50>)
 801a5e6:	699b      	ldr	r3, [r3, #24]
 801a5e8:	f003 030f 	and.w	r3, r3, #15
 801a5ec:	4a09      	ldr	r2, [pc, #36]	; (801a614 <HAL_RCC_GetHCLKFreq+0x54>)
 801a5ee:	5cd3      	ldrb	r3, [r2, r3]
 801a5f0:	f003 031f 	and.w	r3, r3, #31
 801a5f4:	687a      	ldr	r2, [r7, #4]
 801a5f6:	fa22 f303 	lsr.w	r3, r2, r3
 801a5fa:	4a07      	ldr	r2, [pc, #28]	; (801a618 <HAL_RCC_GetHCLKFreq+0x58>)
 801a5fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801a5fe:	4a07      	ldr	r2, [pc, #28]	; (801a61c <HAL_RCC_GetHCLKFreq+0x5c>)
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801a604:	4b04      	ldr	r3, [pc, #16]	; (801a618 <HAL_RCC_GetHCLKFreq+0x58>)
 801a606:	681b      	ldr	r3, [r3, #0]
}
 801a608:	4618      	mov	r0, r3
 801a60a:	3708      	adds	r7, #8
 801a60c:	46bd      	mov	sp, r7
 801a60e:	bd80      	pop	{r7, pc}
 801a610:	58024400 	.word	0x58024400
 801a614:	0802d72c 	.word	0x0802d72c
 801a618:	2400069c 	.word	0x2400069c
 801a61c:	24000698 	.word	0x24000698

0801a620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a620:	b580      	push	{r7, lr}
 801a622:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801a624:	f7ff ffcc 	bl	801a5c0 <HAL_RCC_GetHCLKFreq>
 801a628:	4601      	mov	r1, r0
 801a62a:	4b06      	ldr	r3, [pc, #24]	; (801a644 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a62c:	69db      	ldr	r3, [r3, #28]
 801a62e:	091b      	lsrs	r3, r3, #4
 801a630:	f003 0307 	and.w	r3, r3, #7
 801a634:	4a04      	ldr	r2, [pc, #16]	; (801a648 <HAL_RCC_GetPCLK1Freq+0x28>)
 801a636:	5cd3      	ldrb	r3, [r2, r3]
 801a638:	f003 031f 	and.w	r3, r3, #31
 801a63c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801a640:	4618      	mov	r0, r3
 801a642:	bd80      	pop	{r7, pc}
 801a644:	58024400 	.word	0x58024400
 801a648:	0802d72c 	.word	0x0802d72c

0801a64c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801a650:	f7ff ffb6 	bl	801a5c0 <HAL_RCC_GetHCLKFreq>
 801a654:	4601      	mov	r1, r0
 801a656:	4b06      	ldr	r3, [pc, #24]	; (801a670 <HAL_RCC_GetPCLK2Freq+0x24>)
 801a658:	69db      	ldr	r3, [r3, #28]
 801a65a:	0a1b      	lsrs	r3, r3, #8
 801a65c:	f003 0307 	and.w	r3, r3, #7
 801a660:	4a04      	ldr	r2, [pc, #16]	; (801a674 <HAL_RCC_GetPCLK2Freq+0x28>)
 801a662:	5cd3      	ldrb	r3, [r2, r3]
 801a664:	f003 031f 	and.w	r3, r3, #31
 801a668:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801a66c:	4618      	mov	r0, r3
 801a66e:	bd80      	pop	{r7, pc}
 801a670:	58024400 	.word	0x58024400
 801a674:	0802d72c 	.word	0x0802d72c

0801a678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801a678:	b480      	push	{r7}
 801a67a:	b083      	sub	sp, #12
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
 801a680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	223f      	movs	r2, #63	; 0x3f
 801a686:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801a688:	4b1a      	ldr	r3, [pc, #104]	; (801a6f4 <HAL_RCC_GetClockConfig+0x7c>)
 801a68a:	691b      	ldr	r3, [r3, #16]
 801a68c:	f003 0207 	and.w	r2, r3, #7
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801a694:	4b17      	ldr	r3, [pc, #92]	; (801a6f4 <HAL_RCC_GetClockConfig+0x7c>)
 801a696:	699b      	ldr	r3, [r3, #24]
 801a698:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801a6a0:	4b14      	ldr	r3, [pc, #80]	; (801a6f4 <HAL_RCC_GetClockConfig+0x7c>)
 801a6a2:	699b      	ldr	r3, [r3, #24]
 801a6a4:	f003 020f 	and.w	r2, r3, #15
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801a6ac:	4b11      	ldr	r3, [pc, #68]	; (801a6f4 <HAL_RCC_GetClockConfig+0x7c>)
 801a6ae:	699b      	ldr	r3, [r3, #24]
 801a6b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801a6b8:	4b0e      	ldr	r3, [pc, #56]	; (801a6f4 <HAL_RCC_GetClockConfig+0x7c>)
 801a6ba:	69db      	ldr	r3, [r3, #28]
 801a6bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801a6c4:	4b0b      	ldr	r3, [pc, #44]	; (801a6f4 <HAL_RCC_GetClockConfig+0x7c>)
 801a6c6:	69db      	ldr	r3, [r3, #28]
 801a6c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801a6d0:	4b08      	ldr	r3, [pc, #32]	; (801a6f4 <HAL_RCC_GetClockConfig+0x7c>)
 801a6d2:	6a1b      	ldr	r3, [r3, #32]
 801a6d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801a6dc:	4b06      	ldr	r3, [pc, #24]	; (801a6f8 <HAL_RCC_GetClockConfig+0x80>)
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	f003 020f 	and.w	r2, r3, #15
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	601a      	str	r2, [r3, #0]
}
 801a6e8:	bf00      	nop
 801a6ea:	370c      	adds	r7, #12
 801a6ec:	46bd      	mov	sp, r7
 801a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f2:	4770      	bx	lr
 801a6f4:	58024400 	.word	0x58024400
 801a6f8:	52002000 	.word	0x52002000

0801a6fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b086      	sub	sp, #24
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801a704:	2300      	movs	r3, #0
 801a706:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801a708:	2300      	movs	r3, #0
 801a70a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a714:	2b00      	cmp	r3, #0
 801a716:	d03d      	beq.n	801a794 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a71c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a720:	d013      	beq.n	801a74a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 801a722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a726:	d802      	bhi.n	801a72e <HAL_RCCEx_PeriphCLKConfig+0x32>
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d007      	beq.n	801a73c <HAL_RCCEx_PeriphCLKConfig+0x40>
 801a72c:	e01f      	b.n	801a76e <HAL_RCCEx_PeriphCLKConfig+0x72>
 801a72e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a732:	d013      	beq.n	801a75c <HAL_RCCEx_PeriphCLKConfig+0x60>
 801a734:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801a738:	d01c      	beq.n	801a774 <HAL_RCCEx_PeriphCLKConfig+0x78>
 801a73a:	e018      	b.n	801a76e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801a73c:	4baf      	ldr	r3, [pc, #700]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a740:	4aae      	ldr	r2, [pc, #696]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801a748:	e015      	b.n	801a776 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	3304      	adds	r3, #4
 801a74e:	2102      	movs	r1, #2
 801a750:	4618      	mov	r0, r3
 801a752:	f001 fd33 	bl	801c1bc <RCCEx_PLL2_Config>
 801a756:	4603      	mov	r3, r0
 801a758:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801a75a:	e00c      	b.n	801a776 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	3324      	adds	r3, #36	; 0x24
 801a760:	2102      	movs	r1, #2
 801a762:	4618      	mov	r0, r3
 801a764:	f001 fddc 	bl	801c320 <RCCEx_PLL3_Config>
 801a768:	4603      	mov	r3, r0
 801a76a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801a76c:	e003      	b.n	801a776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801a76e:	2301      	movs	r3, #1
 801a770:	75fb      	strb	r3, [r7, #23]
      break;
 801a772:	e000      	b.n	801a776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 801a774:	bf00      	nop
    }

    if(ret == HAL_OK)
 801a776:	7dfb      	ldrb	r3, [r7, #23]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d109      	bne.n	801a790 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801a77c:	4b9f      	ldr	r3, [pc, #636]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a788:	499c      	ldr	r1, [pc, #624]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a78a:	4313      	orrs	r3, r2
 801a78c:	650b      	str	r3, [r1, #80]	; 0x50
 801a78e:	e001      	b.n	801a794 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a790:	7dfb      	ldrb	r3, [r7, #23]
 801a792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d03d      	beq.n	801a81c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a7a4:	2b04      	cmp	r3, #4
 801a7a6:	d826      	bhi.n	801a7f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 801a7a8:	a201      	add	r2, pc, #4	; (adr r2, 801a7b0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 801a7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7ae:	bf00      	nop
 801a7b0:	0801a7c5 	.word	0x0801a7c5
 801a7b4:	0801a7d3 	.word	0x0801a7d3
 801a7b8:	0801a7e5 	.word	0x0801a7e5
 801a7bc:	0801a7fd 	.word	0x0801a7fd
 801a7c0:	0801a7fd 	.word	0x0801a7fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801a7c4:	4b8d      	ldr	r3, [pc, #564]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7c8:	4a8c      	ldr	r2, [pc, #560]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a7ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a7ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801a7d0:	e015      	b.n	801a7fe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	3304      	adds	r3, #4
 801a7d6:	2100      	movs	r1, #0
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f001 fcef 	bl	801c1bc <RCCEx_PLL2_Config>
 801a7de:	4603      	mov	r3, r0
 801a7e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801a7e2:	e00c      	b.n	801a7fe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	3324      	adds	r3, #36	; 0x24
 801a7e8:	2100      	movs	r1, #0
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	f001 fd98 	bl	801c320 <RCCEx_PLL3_Config>
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801a7f4:	e003      	b.n	801a7fe <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801a7f6:	2301      	movs	r3, #1
 801a7f8:	75fb      	strb	r3, [r7, #23]
      break;
 801a7fa:	e000      	b.n	801a7fe <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 801a7fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 801a7fe:	7dfb      	ldrb	r3, [r7, #23]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d109      	bne.n	801a818 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801a804:	4b7d      	ldr	r3, [pc, #500]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a808:	f023 0207 	bic.w	r2, r3, #7
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a810:	497a      	ldr	r1, [pc, #488]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a812:	4313      	orrs	r3, r2
 801a814:	650b      	str	r3, [r1, #80]	; 0x50
 801a816:	e001      	b.n	801a81c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a818:	7dfb      	ldrb	r3, [r7, #23]
 801a81a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a824:	2b00      	cmp	r3, #0
 801a826:	d03e      	beq.n	801a8a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a82c:	2b80      	cmp	r3, #128	; 0x80
 801a82e:	d01c      	beq.n	801a86a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 801a830:	2b80      	cmp	r3, #128	; 0x80
 801a832:	d804      	bhi.n	801a83e <HAL_RCCEx_PeriphCLKConfig+0x142>
 801a834:	2b00      	cmp	r3, #0
 801a836:	d008      	beq.n	801a84a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 801a838:	2b40      	cmp	r3, #64	; 0x40
 801a83a:	d00d      	beq.n	801a858 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 801a83c:	e01e      	b.n	801a87c <HAL_RCCEx_PeriphCLKConfig+0x180>
 801a83e:	2bc0      	cmp	r3, #192	; 0xc0
 801a840:	d01f      	beq.n	801a882 <HAL_RCCEx_PeriphCLKConfig+0x186>
 801a842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a846:	d01e      	beq.n	801a886 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 801a848:	e018      	b.n	801a87c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801a84a:	4b6c      	ldr	r3, [pc, #432]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a84e:	4a6b      	ldr	r2, [pc, #428]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a854:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801a856:	e017      	b.n	801a888 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	3304      	adds	r3, #4
 801a85c:	2100      	movs	r1, #0
 801a85e:	4618      	mov	r0, r3
 801a860:	f001 fcac 	bl	801c1bc <RCCEx_PLL2_Config>
 801a864:	4603      	mov	r3, r0
 801a866:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801a868:	e00e      	b.n	801a888 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	3324      	adds	r3, #36	; 0x24
 801a86e:	2100      	movs	r1, #0
 801a870:	4618      	mov	r0, r3
 801a872:	f001 fd55 	bl	801c320 <RCCEx_PLL3_Config>
 801a876:	4603      	mov	r3, r0
 801a878:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801a87a:	e005      	b.n	801a888 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801a87c:	2301      	movs	r3, #1
 801a87e:	75fb      	strb	r3, [r7, #23]
      break;
 801a880:	e002      	b.n	801a888 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 801a882:	bf00      	nop
 801a884:	e000      	b.n	801a888 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 801a886:	bf00      	nop
    }

    if(ret == HAL_OK)
 801a888:	7dfb      	ldrb	r3, [r7, #23]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d109      	bne.n	801a8a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801a88e:	4b5b      	ldr	r3, [pc, #364]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a892:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a89a:	4958      	ldr	r1, [pc, #352]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a89c:	4313      	orrs	r3, r2
 801a89e:	650b      	str	r3, [r1, #80]	; 0x50
 801a8a0:	e001      	b.n	801a8a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a8a2:	7dfb      	ldrb	r3, [r7, #23]
 801a8a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d044      	beq.n	801a93c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a8b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801a8bc:	d01f      	beq.n	801a8fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 801a8be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801a8c2:	d805      	bhi.n	801a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d00a      	beq.n	801a8de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801a8c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a8cc:	d00e      	beq.n	801a8ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 801a8ce:	e01f      	b.n	801a910 <HAL_RCCEx_PeriphCLKConfig+0x214>
 801a8d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801a8d4:	d01f      	beq.n	801a916 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 801a8d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801a8da:	d01e      	beq.n	801a91a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801a8dc:	e018      	b.n	801a910 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801a8de:	4b47      	ldr	r3, [pc, #284]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8e2:	4a46      	ldr	r2, [pc, #280]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a8e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a8e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801a8ea:	e017      	b.n	801a91c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	3304      	adds	r3, #4
 801a8f0:	2100      	movs	r1, #0
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	f001 fc62 	bl	801c1bc <RCCEx_PLL2_Config>
 801a8f8:	4603      	mov	r3, r0
 801a8fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801a8fc:	e00e      	b.n	801a91c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	3324      	adds	r3, #36	; 0x24
 801a902:	2100      	movs	r1, #0
 801a904:	4618      	mov	r0, r3
 801a906:	f001 fd0b 	bl	801c320 <RCCEx_PLL3_Config>
 801a90a:	4603      	mov	r3, r0
 801a90c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801a90e:	e005      	b.n	801a91c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801a910:	2301      	movs	r3, #1
 801a912:	75fb      	strb	r3, [r7, #23]
      break;
 801a914:	e002      	b.n	801a91c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 801a916:	bf00      	nop
 801a918:	e000      	b.n	801a91c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 801a91a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801a91c:	7dfb      	ldrb	r3, [r7, #23]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d10a      	bne.n	801a938 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801a922:	4b36      	ldr	r3, [pc, #216]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a926:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a930:	4932      	ldr	r1, [pc, #200]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a932:	4313      	orrs	r3, r2
 801a934:	658b      	str	r3, [r1, #88]	; 0x58
 801a936:	e001      	b.n	801a93c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a938:	7dfb      	ldrb	r3, [r7, #23]
 801a93a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a944:	2b00      	cmp	r3, #0
 801a946:	d044      	beq.n	801a9d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801a94e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801a952:	d01f      	beq.n	801a994 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801a954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801a958:	d805      	bhi.n	801a966 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d00a      	beq.n	801a974 <HAL_RCCEx_PeriphCLKConfig+0x278>
 801a95e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a962:	d00e      	beq.n	801a982 <HAL_RCCEx_PeriphCLKConfig+0x286>
 801a964:	e01f      	b.n	801a9a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 801a966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801a96a:	d01f      	beq.n	801a9ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801a96c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801a970:	d01e      	beq.n	801a9b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801a972:	e018      	b.n	801a9a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801a974:	4b21      	ldr	r3, [pc, #132]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a978:	4a20      	ldr	r2, [pc, #128]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a97a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a97e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801a980:	e017      	b.n	801a9b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	3304      	adds	r3, #4
 801a986:	2100      	movs	r1, #0
 801a988:	4618      	mov	r0, r3
 801a98a:	f001 fc17 	bl	801c1bc <RCCEx_PLL2_Config>
 801a98e:	4603      	mov	r3, r0
 801a990:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801a992:	e00e      	b.n	801a9b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	3324      	adds	r3, #36	; 0x24
 801a998:	2100      	movs	r1, #0
 801a99a:	4618      	mov	r0, r3
 801a99c:	f001 fcc0 	bl	801c320 <RCCEx_PLL3_Config>
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801a9a4:	e005      	b.n	801a9b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801a9a6:	2301      	movs	r3, #1
 801a9a8:	75fb      	strb	r3, [r7, #23]
      break;
 801a9aa:	e002      	b.n	801a9b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 801a9ac:	bf00      	nop
 801a9ae:	e000      	b.n	801a9b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 801a9b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 801a9b2:	7dfb      	ldrb	r3, [r7, #23]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d10a      	bne.n	801a9ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801a9b8:	4b10      	ldr	r3, [pc, #64]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a9bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801a9c6:	490d      	ldr	r1, [pc, #52]	; (801a9fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801a9c8:	4313      	orrs	r3, r2
 801a9ca:	658b      	str	r3, [r1, #88]	; 0x58
 801a9cc:	e001      	b.n	801a9d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801a9ce:	7dfb      	ldrb	r3, [r7, #23]
 801a9d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d035      	beq.n	801aa4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a9e2:	2b10      	cmp	r3, #16
 801a9e4:	d00c      	beq.n	801aa00 <HAL_RCCEx_PeriphCLKConfig+0x304>
 801a9e6:	2b10      	cmp	r3, #16
 801a9e8:	d802      	bhi.n	801a9f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d01b      	beq.n	801aa26 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 801a9ee:	e017      	b.n	801aa20 <HAL_RCCEx_PeriphCLKConfig+0x324>
 801a9f0:	2b20      	cmp	r3, #32
 801a9f2:	d00c      	beq.n	801aa0e <HAL_RCCEx_PeriphCLKConfig+0x312>
 801a9f4:	2b30      	cmp	r3, #48	; 0x30
 801a9f6:	d018      	beq.n	801aa2a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 801a9f8:	e012      	b.n	801aa20 <HAL_RCCEx_PeriphCLKConfig+0x324>
 801a9fa:	bf00      	nop
 801a9fc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801aa00:	4baf      	ldr	r3, [pc, #700]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa04:	4aae      	ldr	r2, [pc, #696]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801aa06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801aa0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801aa0c:	e00e      	b.n	801aa2c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	3304      	adds	r3, #4
 801aa12:	2102      	movs	r1, #2
 801aa14:	4618      	mov	r0, r3
 801aa16:	f001 fbd1 	bl	801c1bc <RCCEx_PLL2_Config>
 801aa1a:	4603      	mov	r3, r0
 801aa1c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801aa1e:	e005      	b.n	801aa2c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801aa20:	2301      	movs	r3, #1
 801aa22:	75fb      	strb	r3, [r7, #23]
      break;
 801aa24:	e002      	b.n	801aa2c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 801aa26:	bf00      	nop
 801aa28:	e000      	b.n	801aa2c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 801aa2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801aa2c:	7dfb      	ldrb	r3, [r7, #23]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d109      	bne.n	801aa46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801aa32:	4ba3      	ldr	r3, [pc, #652]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801aa34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aa3e:	49a0      	ldr	r1, [pc, #640]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801aa40:	4313      	orrs	r3, r2
 801aa42:	64cb      	str	r3, [r1, #76]	; 0x4c
 801aa44:	e001      	b.n	801aa4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801aa46:	7dfb      	ldrb	r3, [r7, #23]
 801aa48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d042      	beq.n	801aadc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801aa5e:	d01f      	beq.n	801aaa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 801aa60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801aa64:	d805      	bhi.n	801aa72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d00a      	beq.n	801aa80 <HAL_RCCEx_PeriphCLKConfig+0x384>
 801aa6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801aa6e:	d00e      	beq.n	801aa8e <HAL_RCCEx_PeriphCLKConfig+0x392>
 801aa70:	e01f      	b.n	801aab2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 801aa72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801aa76:	d01f      	beq.n	801aab8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 801aa78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801aa7c:	d01e      	beq.n	801aabc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 801aa7e:	e018      	b.n	801aab2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801aa80:	4b8f      	ldr	r3, [pc, #572]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa84:	4a8e      	ldr	r2, [pc, #568]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801aa86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801aa8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801aa8c:	e017      	b.n	801aabe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	3304      	adds	r3, #4
 801aa92:	2100      	movs	r1, #0
 801aa94:	4618      	mov	r0, r3
 801aa96:	f001 fb91 	bl	801c1bc <RCCEx_PLL2_Config>
 801aa9a:	4603      	mov	r3, r0
 801aa9c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801aa9e:	e00e      	b.n	801aabe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	3324      	adds	r3, #36	; 0x24
 801aaa4:	2100      	movs	r1, #0
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f001 fc3a 	bl	801c320 <RCCEx_PLL3_Config>
 801aaac:	4603      	mov	r3, r0
 801aaae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801aab0:	e005      	b.n	801aabe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801aab2:	2301      	movs	r3, #1
 801aab4:	75fb      	strb	r3, [r7, #23]
      break;
 801aab6:	e002      	b.n	801aabe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 801aab8:	bf00      	nop
 801aaba:	e000      	b.n	801aabe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 801aabc:	bf00      	nop
    }

    if(ret == HAL_OK)
 801aabe:	7dfb      	ldrb	r3, [r7, #23]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d109      	bne.n	801aad8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801aac4:	4b7e      	ldr	r3, [pc, #504]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801aac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aac8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aad0:	497b      	ldr	r1, [pc, #492]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801aad2:	4313      	orrs	r3, r2
 801aad4:	650b      	str	r3, [r1, #80]	; 0x50
 801aad6:	e001      	b.n	801aadc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801aad8:	7dfb      	ldrb	r3, [r7, #23]
 801aada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d042      	beq.n	801ab6e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aaec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801aaf0:	d01b      	beq.n	801ab2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 801aaf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801aaf6:	d805      	bhi.n	801ab04 <HAL_RCCEx_PeriphCLKConfig+0x408>
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d022      	beq.n	801ab42 <HAL_RCCEx_PeriphCLKConfig+0x446>
 801aafc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ab00:	d00a      	beq.n	801ab18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 801ab02:	e01b      	b.n	801ab3c <HAL_RCCEx_PeriphCLKConfig+0x440>
 801ab04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801ab08:	d01d      	beq.n	801ab46 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 801ab0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801ab0e:	d01c      	beq.n	801ab4a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 801ab10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801ab14:	d01b      	beq.n	801ab4e <HAL_RCCEx_PeriphCLKConfig+0x452>
 801ab16:	e011      	b.n	801ab3c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	3304      	adds	r3, #4
 801ab1c:	2101      	movs	r1, #1
 801ab1e:	4618      	mov	r0, r3
 801ab20:	f001 fb4c 	bl	801c1bc <RCCEx_PLL2_Config>
 801ab24:	4603      	mov	r3, r0
 801ab26:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801ab28:	e012      	b.n	801ab50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	3324      	adds	r3, #36	; 0x24
 801ab2e:	2101      	movs	r1, #1
 801ab30:	4618      	mov	r0, r3
 801ab32:	f001 fbf5 	bl	801c320 <RCCEx_PLL3_Config>
 801ab36:	4603      	mov	r3, r0
 801ab38:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801ab3a:	e009      	b.n	801ab50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801ab3c:	2301      	movs	r3, #1
 801ab3e:	75fb      	strb	r3, [r7, #23]
      break;
 801ab40:	e006      	b.n	801ab50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801ab42:	bf00      	nop
 801ab44:	e004      	b.n	801ab50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801ab46:	bf00      	nop
 801ab48:	e002      	b.n	801ab50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801ab4a:	bf00      	nop
 801ab4c:	e000      	b.n	801ab50 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801ab4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 801ab50:	7dfb      	ldrb	r3, [r7, #23]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d109      	bne.n	801ab6a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801ab56:	4b5a      	ldr	r3, [pc, #360]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801ab58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ab5a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ab62:	4957      	ldr	r1, [pc, #348]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801ab64:	4313      	orrs	r3, r2
 801ab66:	650b      	str	r3, [r1, #80]	; 0x50
 801ab68:	e001      	b.n	801ab6e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ab6a:	7dfb      	ldrb	r3, [r7, #23]
 801ab6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d044      	beq.n	801ac04 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ab80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ab84:	d01b      	beq.n	801abbe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801ab86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ab8a:	d805      	bhi.n	801ab98 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d022      	beq.n	801abd6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801ab90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ab94:	d00a      	beq.n	801abac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 801ab96:	e01b      	b.n	801abd0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 801ab98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ab9c:	d01d      	beq.n	801abda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801ab9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801aba2:	d01c      	beq.n	801abde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 801aba4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801aba8:	d01b      	beq.n	801abe2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 801abaa:	e011      	b.n	801abd0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	3304      	adds	r3, #4
 801abb0:	2101      	movs	r1, #1
 801abb2:	4618      	mov	r0, r3
 801abb4:	f001 fb02 	bl	801c1bc <RCCEx_PLL2_Config>
 801abb8:	4603      	mov	r3, r0
 801abba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801abbc:	e012      	b.n	801abe4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	3324      	adds	r3, #36	; 0x24
 801abc2:	2101      	movs	r1, #1
 801abc4:	4618      	mov	r0, r3
 801abc6:	f001 fbab 	bl	801c320 <RCCEx_PLL3_Config>
 801abca:	4603      	mov	r3, r0
 801abcc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801abce:	e009      	b.n	801abe4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 801abd0:	2301      	movs	r3, #1
 801abd2:	75fb      	strb	r3, [r7, #23]
      break;
 801abd4:	e006      	b.n	801abe4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801abd6:	bf00      	nop
 801abd8:	e004      	b.n	801abe4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801abda:	bf00      	nop
 801abdc:	e002      	b.n	801abe4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801abde:	bf00      	nop
 801abe0:	e000      	b.n	801abe4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801abe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 801abe4:	7dfb      	ldrb	r3, [r7, #23]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d10a      	bne.n	801ac00 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801abea:	4b35      	ldr	r3, [pc, #212]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801abec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801abee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801abf8:	4931      	ldr	r1, [pc, #196]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801abfa:	4313      	orrs	r3, r2
 801abfc:	658b      	str	r3, [r1, #88]	; 0x58
 801abfe:	e001      	b.n	801ac04 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ac00:	7dfb      	ldrb	r3, [r7, #23]
 801ac02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d02d      	beq.n	801ac6c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ac18:	d005      	beq.n	801ac26 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 801ac1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ac1e:	d009      	beq.n	801ac34 <HAL_RCCEx_PeriphCLKConfig+0x538>
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d013      	beq.n	801ac4c <HAL_RCCEx_PeriphCLKConfig+0x550>
 801ac24:	e00f      	b.n	801ac46 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ac26:	4b26      	ldr	r3, [pc, #152]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac2a:	4a25      	ldr	r2, [pc, #148]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801ac2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ac30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801ac32:	e00c      	b.n	801ac4e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	3304      	adds	r3, #4
 801ac38:	2101      	movs	r1, #1
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f001 fabe 	bl	801c1bc <RCCEx_PLL2_Config>
 801ac40:	4603      	mov	r3, r0
 801ac42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801ac44:	e003      	b.n	801ac4e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801ac46:	2301      	movs	r3, #1
 801ac48:	75fb      	strb	r3, [r7, #23]
      break;
 801ac4a:	e000      	b.n	801ac4e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 801ac4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801ac4e:	7dfb      	ldrb	r3, [r7, #23]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d109      	bne.n	801ac68 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801ac54:	4b1a      	ldr	r3, [pc, #104]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801ac56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ac58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac60:	4917      	ldr	r1, [pc, #92]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801ac62:	4313      	orrs	r3, r2
 801ac64:	650b      	str	r3, [r1, #80]	; 0x50
 801ac66:	e001      	b.n	801ac6c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ac68:	7dfb      	ldrb	r3, [r7, #23]
 801ac6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d035      	beq.n	801ace4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac7c:	2b03      	cmp	r3, #3
 801ac7e:	d81b      	bhi.n	801acb8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 801ac80:	a201      	add	r2, pc, #4	; (adr r2, 801ac88 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 801ac82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac86:	bf00      	nop
 801ac88:	0801acc5 	.word	0x0801acc5
 801ac8c:	0801ac99 	.word	0x0801ac99
 801ac90:	0801aca7 	.word	0x0801aca7
 801ac94:	0801acc5 	.word	0x0801acc5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ac98:	4b09      	ldr	r3, [pc, #36]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac9c:	4a08      	ldr	r2, [pc, #32]	; (801acc0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801ac9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801aca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 801aca4:	e00f      	b.n	801acc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	3304      	adds	r3, #4
 801acaa:	2102      	movs	r1, #2
 801acac:	4618      	mov	r0, r3
 801acae:	f001 fa85 	bl	801c1bc <RCCEx_PLL2_Config>
 801acb2:	4603      	mov	r3, r0
 801acb4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 801acb6:	e006      	b.n	801acc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801acb8:	2301      	movs	r3, #1
 801acba:	75fb      	strb	r3, [r7, #23]
      break;
 801acbc:	e003      	b.n	801acc6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 801acbe:	bf00      	nop
 801acc0:	58024400 	.word	0x58024400
      break;
 801acc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 801acc6:	7dfb      	ldrb	r3, [r7, #23]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d109      	bne.n	801ace0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801accc:	4bba      	ldr	r3, [pc, #744]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801acce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801acd0:	f023 0203 	bic.w	r2, r3, #3
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801acd8:	49b7      	ldr	r1, [pc, #732]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801acda:	4313      	orrs	r3, r2
 801acdc:	64cb      	str	r3, [r1, #76]	; 0x4c
 801acde:	e001      	b.n	801ace4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ace0:	7dfb      	ldrb	r3, [r7, #23]
 801ace2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801acec:	2b00      	cmp	r3, #0
 801acee:	f000 8086 	beq.w	801adfe <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801acf2:	4bb2      	ldr	r3, [pc, #712]	; (801afbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	4ab1      	ldr	r2, [pc, #708]	; (801afbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 801acf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801acfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801acfe:	f7f8 f9ab 	bl	8013058 <HAL_GetTick>
 801ad02:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ad04:	e009      	b.n	801ad1a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ad06:	f7f8 f9a7 	bl	8013058 <HAL_GetTick>
 801ad0a:	4602      	mov	r2, r0
 801ad0c:	693b      	ldr	r3, [r7, #16]
 801ad0e:	1ad3      	subs	r3, r2, r3
 801ad10:	2b64      	cmp	r3, #100	; 0x64
 801ad12:	d902      	bls.n	801ad1a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 801ad14:	2303      	movs	r3, #3
 801ad16:	75fb      	strb	r3, [r7, #23]
        break;
 801ad18:	e005      	b.n	801ad26 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ad1a:	4ba8      	ldr	r3, [pc, #672]	; (801afbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d0ef      	beq.n	801ad06 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 801ad26:	7dfb      	ldrb	r3, [r7, #23]
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d166      	bne.n	801adfa <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801ad2c:	4ba2      	ldr	r3, [pc, #648]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ad2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ad36:	4053      	eors	r3, r2
 801ad38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d013      	beq.n	801ad68 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801ad40:	4b9d      	ldr	r3, [pc, #628]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ad42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ad48:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801ad4a:	4b9b      	ldr	r3, [pc, #620]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ad4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad4e:	4a9a      	ldr	r2, [pc, #616]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ad50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ad54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801ad56:	4b98      	ldr	r3, [pc, #608]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ad58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad5a:	4a97      	ldr	r2, [pc, #604]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ad5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ad60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801ad62:	4a95      	ldr	r2, [pc, #596]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ad6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ad72:	d115      	bne.n	801ada0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ad74:	f7f8 f970 	bl	8013058 <HAL_GetTick>
 801ad78:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ad7a:	e00b      	b.n	801ad94 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ad7c:	f7f8 f96c 	bl	8013058 <HAL_GetTick>
 801ad80:	4602      	mov	r2, r0
 801ad82:	693b      	ldr	r3, [r7, #16]
 801ad84:	1ad3      	subs	r3, r2, r3
 801ad86:	f241 3288 	movw	r2, #5000	; 0x1388
 801ad8a:	4293      	cmp	r3, r2
 801ad8c:	d902      	bls.n	801ad94 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 801ad8e:	2303      	movs	r3, #3
 801ad90:	75fb      	strb	r3, [r7, #23]
            break;
 801ad92:	e005      	b.n	801ada0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ad94:	4b88      	ldr	r3, [pc, #544]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ad96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad98:	f003 0302 	and.w	r3, r3, #2
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d0ed      	beq.n	801ad7c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 801ada0:	7dfb      	ldrb	r3, [r7, #23]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d126      	bne.n	801adf4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801adac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801adb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801adb4:	d10d      	bne.n	801add2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 801adb6:	4b80      	ldr	r3, [pc, #512]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801adb8:	691b      	ldr	r3, [r3, #16]
 801adba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801adc4:	0919      	lsrs	r1, r3, #4
 801adc6:	4b7e      	ldr	r3, [pc, #504]	; (801afc0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 801adc8:	400b      	ands	r3, r1
 801adca:	497b      	ldr	r1, [pc, #492]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801adcc:	4313      	orrs	r3, r2
 801adce:	610b      	str	r3, [r1, #16]
 801add0:	e005      	b.n	801adde <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 801add2:	4b79      	ldr	r3, [pc, #484]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801add4:	691b      	ldr	r3, [r3, #16]
 801add6:	4a78      	ldr	r2, [pc, #480]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801add8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801addc:	6113      	str	r3, [r2, #16]
 801adde:	4b76      	ldr	r3, [pc, #472]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ade0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ade8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801adec:	4972      	ldr	r1, [pc, #456]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801adee:	4313      	orrs	r3, r2
 801adf0:	670b      	str	r3, [r1, #112]	; 0x70
 801adf2:	e004      	b.n	801adfe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801adf4:	7dfb      	ldrb	r3, [r7, #23]
 801adf6:	75bb      	strb	r3, [r7, #22]
 801adf8:	e001      	b.n	801adfe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801adfa:	7dfb      	ldrb	r3, [r7, #23]
 801adfc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	f003 0301 	and.w	r3, r3, #1
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d07d      	beq.n	801af06 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ae0e:	2b28      	cmp	r3, #40	; 0x28
 801ae10:	d866      	bhi.n	801aee0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 801ae12:	a201      	add	r2, pc, #4	; (adr r2, 801ae18 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 801ae14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae18:	0801aee7 	.word	0x0801aee7
 801ae1c:	0801aee1 	.word	0x0801aee1
 801ae20:	0801aee1 	.word	0x0801aee1
 801ae24:	0801aee1 	.word	0x0801aee1
 801ae28:	0801aee1 	.word	0x0801aee1
 801ae2c:	0801aee1 	.word	0x0801aee1
 801ae30:	0801aee1 	.word	0x0801aee1
 801ae34:	0801aee1 	.word	0x0801aee1
 801ae38:	0801aebd 	.word	0x0801aebd
 801ae3c:	0801aee1 	.word	0x0801aee1
 801ae40:	0801aee1 	.word	0x0801aee1
 801ae44:	0801aee1 	.word	0x0801aee1
 801ae48:	0801aee1 	.word	0x0801aee1
 801ae4c:	0801aee1 	.word	0x0801aee1
 801ae50:	0801aee1 	.word	0x0801aee1
 801ae54:	0801aee1 	.word	0x0801aee1
 801ae58:	0801aecf 	.word	0x0801aecf
 801ae5c:	0801aee1 	.word	0x0801aee1
 801ae60:	0801aee1 	.word	0x0801aee1
 801ae64:	0801aee1 	.word	0x0801aee1
 801ae68:	0801aee1 	.word	0x0801aee1
 801ae6c:	0801aee1 	.word	0x0801aee1
 801ae70:	0801aee1 	.word	0x0801aee1
 801ae74:	0801aee1 	.word	0x0801aee1
 801ae78:	0801aee7 	.word	0x0801aee7
 801ae7c:	0801aee1 	.word	0x0801aee1
 801ae80:	0801aee1 	.word	0x0801aee1
 801ae84:	0801aee1 	.word	0x0801aee1
 801ae88:	0801aee1 	.word	0x0801aee1
 801ae8c:	0801aee1 	.word	0x0801aee1
 801ae90:	0801aee1 	.word	0x0801aee1
 801ae94:	0801aee1 	.word	0x0801aee1
 801ae98:	0801aee7 	.word	0x0801aee7
 801ae9c:	0801aee1 	.word	0x0801aee1
 801aea0:	0801aee1 	.word	0x0801aee1
 801aea4:	0801aee1 	.word	0x0801aee1
 801aea8:	0801aee1 	.word	0x0801aee1
 801aeac:	0801aee1 	.word	0x0801aee1
 801aeb0:	0801aee1 	.word	0x0801aee1
 801aeb4:	0801aee1 	.word	0x0801aee1
 801aeb8:	0801aee7 	.word	0x0801aee7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	3304      	adds	r3, #4
 801aec0:	2101      	movs	r1, #1
 801aec2:	4618      	mov	r0, r3
 801aec4:	f001 f97a 	bl	801c1bc <RCCEx_PLL2_Config>
 801aec8:	4603      	mov	r3, r0
 801aeca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801aecc:	e00c      	b.n	801aee8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	3324      	adds	r3, #36	; 0x24
 801aed2:	2101      	movs	r1, #1
 801aed4:	4618      	mov	r0, r3
 801aed6:	f001 fa23 	bl	801c320 <RCCEx_PLL3_Config>
 801aeda:	4603      	mov	r3, r0
 801aedc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801aede:	e003      	b.n	801aee8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801aee0:	2301      	movs	r3, #1
 801aee2:	75fb      	strb	r3, [r7, #23]
      break;
 801aee4:	e000      	b.n	801aee8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 801aee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 801aee8:	7dfb      	ldrb	r3, [r7, #23]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d109      	bne.n	801af02 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801aeee:	4b32      	ldr	r3, [pc, #200]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aef2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aefa:	492f      	ldr	r1, [pc, #188]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801aefc:	4313      	orrs	r3, r2
 801aefe:	654b      	str	r3, [r1, #84]	; 0x54
 801af00:	e001      	b.n	801af06 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801af02:	7dfb      	ldrb	r3, [r7, #23]
 801af04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	f003 0302 	and.w	r3, r3, #2
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d037      	beq.n	801af82 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801af16:	2b05      	cmp	r3, #5
 801af18:	d820      	bhi.n	801af5c <HAL_RCCEx_PeriphCLKConfig+0x860>
 801af1a:	a201      	add	r2, pc, #4	; (adr r2, 801af20 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 801af1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af20:	0801af63 	.word	0x0801af63
 801af24:	0801af39 	.word	0x0801af39
 801af28:	0801af4b 	.word	0x0801af4b
 801af2c:	0801af63 	.word	0x0801af63
 801af30:	0801af63 	.word	0x0801af63
 801af34:	0801af63 	.word	0x0801af63
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	3304      	adds	r3, #4
 801af3c:	2101      	movs	r1, #1
 801af3e:	4618      	mov	r0, r3
 801af40:	f001 f93c 	bl	801c1bc <RCCEx_PLL2_Config>
 801af44:	4603      	mov	r3, r0
 801af46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801af48:	e00c      	b.n	801af64 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	3324      	adds	r3, #36	; 0x24
 801af4e:	2101      	movs	r1, #1
 801af50:	4618      	mov	r0, r3
 801af52:	f001 f9e5 	bl	801c320 <RCCEx_PLL3_Config>
 801af56:	4603      	mov	r3, r0
 801af58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801af5a:	e003      	b.n	801af64 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801af5c:	2301      	movs	r3, #1
 801af5e:	75fb      	strb	r3, [r7, #23]
      break;
 801af60:	e000      	b.n	801af64 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 801af62:	bf00      	nop
    }

    if(ret == HAL_OK)
 801af64:	7dfb      	ldrb	r3, [r7, #23]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d109      	bne.n	801af7e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801af6a:	4b13      	ldr	r3, [pc, #76]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801af6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801af6e:	f023 0207 	bic.w	r2, r3, #7
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801af76:	4910      	ldr	r1, [pc, #64]	; (801afb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801af78:	4313      	orrs	r3, r2
 801af7a:	654b      	str	r3, [r1, #84]	; 0x54
 801af7c:	e001      	b.n	801af82 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801af7e:	7dfb      	ldrb	r3, [r7, #23]
 801af80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	f003 0304 	and.w	r3, r3, #4
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d040      	beq.n	801b010 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801af94:	2b05      	cmp	r3, #5
 801af96:	d827      	bhi.n	801afe8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 801af98:	a201      	add	r2, pc, #4	; (adr r2, 801afa0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 801af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af9e:	bf00      	nop
 801afa0:	0801afef 	.word	0x0801afef
 801afa4:	0801afc5 	.word	0x0801afc5
 801afa8:	0801afd7 	.word	0x0801afd7
 801afac:	0801afef 	.word	0x0801afef
 801afb0:	0801afef 	.word	0x0801afef
 801afb4:	0801afef 	.word	0x0801afef
 801afb8:	58024400 	.word	0x58024400
 801afbc:	58024800 	.word	0x58024800
 801afc0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	3304      	adds	r3, #4
 801afc8:	2101      	movs	r1, #1
 801afca:	4618      	mov	r0, r3
 801afcc:	f001 f8f6 	bl	801c1bc <RCCEx_PLL2_Config>
 801afd0:	4603      	mov	r3, r0
 801afd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801afd4:	e00c      	b.n	801aff0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	3324      	adds	r3, #36	; 0x24
 801afda:	2101      	movs	r1, #1
 801afdc:	4618      	mov	r0, r3
 801afde:	f001 f99f 	bl	801c320 <RCCEx_PLL3_Config>
 801afe2:	4603      	mov	r3, r0
 801afe4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801afe6:	e003      	b.n	801aff0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801afe8:	2301      	movs	r3, #1
 801afea:	75fb      	strb	r3, [r7, #23]
      break;
 801afec:	e000      	b.n	801aff0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 801afee:	bf00      	nop
    }

    if(ret == HAL_OK)
 801aff0:	7dfb      	ldrb	r3, [r7, #23]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d10a      	bne.n	801b00c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801aff6:	4bb2      	ldr	r3, [pc, #712]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801aff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801affa:	f023 0207 	bic.w	r2, r3, #7
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b004:	49ae      	ldr	r1, [pc, #696]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b006:	4313      	orrs	r3, r2
 801b008:	658b      	str	r3, [r1, #88]	; 0x58
 801b00a:	e001      	b.n	801b010 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b00c:	7dfb      	ldrb	r3, [r7, #23]
 801b00e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	f003 0320 	and.w	r3, r3, #32
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d044      	beq.n	801b0a6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b026:	d01b      	beq.n	801b060 <HAL_RCCEx_PeriphCLKConfig+0x964>
 801b028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b02c:	d805      	bhi.n	801b03a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d022      	beq.n	801b078 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 801b032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b036:	d00a      	beq.n	801b04e <HAL_RCCEx_PeriphCLKConfig+0x952>
 801b038:	e01b      	b.n	801b072 <HAL_RCCEx_PeriphCLKConfig+0x976>
 801b03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b03e:	d01d      	beq.n	801b07c <HAL_RCCEx_PeriphCLKConfig+0x980>
 801b040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b044:	d01c      	beq.n	801b080 <HAL_RCCEx_PeriphCLKConfig+0x984>
 801b046:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801b04a:	d01b      	beq.n	801b084 <HAL_RCCEx_PeriphCLKConfig+0x988>
 801b04c:	e011      	b.n	801b072 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	3304      	adds	r3, #4
 801b052:	2100      	movs	r1, #0
 801b054:	4618      	mov	r0, r3
 801b056:	f001 f8b1 	bl	801c1bc <RCCEx_PLL2_Config>
 801b05a:	4603      	mov	r3, r0
 801b05c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801b05e:	e012      	b.n	801b086 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	3324      	adds	r3, #36	; 0x24
 801b064:	2102      	movs	r1, #2
 801b066:	4618      	mov	r0, r3
 801b068:	f001 f95a 	bl	801c320 <RCCEx_PLL3_Config>
 801b06c:	4603      	mov	r3, r0
 801b06e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801b070:	e009      	b.n	801b086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801b072:	2301      	movs	r3, #1
 801b074:	75fb      	strb	r3, [r7, #23]
      break;
 801b076:	e006      	b.n	801b086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801b078:	bf00      	nop
 801b07a:	e004      	b.n	801b086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801b07c:	bf00      	nop
 801b07e:	e002      	b.n	801b086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801b080:	bf00      	nop
 801b082:	e000      	b.n	801b086 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801b084:	bf00      	nop
    }

    if(ret == HAL_OK)
 801b086:	7dfb      	ldrb	r3, [r7, #23]
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d10a      	bne.n	801b0a2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801b08c:	4b8c      	ldr	r3, [pc, #560]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b090:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b09a:	4989      	ldr	r1, [pc, #548]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b09c:	4313      	orrs	r3, r2
 801b09e:	654b      	str	r3, [r1, #84]	; 0x54
 801b0a0:	e001      	b.n	801b0a6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b0a2:	7dfb      	ldrb	r3, [r7, #23]
 801b0a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d044      	beq.n	801b13c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b0b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b0bc:	d01b      	beq.n	801b0f6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 801b0be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b0c2:	d805      	bhi.n	801b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d022      	beq.n	801b10e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 801b0c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b0cc:	d00a      	beq.n	801b0e4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 801b0ce:	e01b      	b.n	801b108 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 801b0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b0d4:	d01d      	beq.n	801b112 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 801b0d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801b0da:	d01c      	beq.n	801b116 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 801b0dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801b0e0:	d01b      	beq.n	801b11a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 801b0e2:	e011      	b.n	801b108 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	3304      	adds	r3, #4
 801b0e8:	2100      	movs	r1, #0
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	f001 f866 	bl	801c1bc <RCCEx_PLL2_Config>
 801b0f0:	4603      	mov	r3, r0
 801b0f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801b0f4:	e012      	b.n	801b11c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	3324      	adds	r3, #36	; 0x24
 801b0fa:	2102      	movs	r1, #2
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f001 f90f 	bl	801c320 <RCCEx_PLL3_Config>
 801b102:	4603      	mov	r3, r0
 801b104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801b106:	e009      	b.n	801b11c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801b108:	2301      	movs	r3, #1
 801b10a:	75fb      	strb	r3, [r7, #23]
      break;
 801b10c:	e006      	b.n	801b11c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801b10e:	bf00      	nop
 801b110:	e004      	b.n	801b11c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801b112:	bf00      	nop
 801b114:	e002      	b.n	801b11c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801b116:	bf00      	nop
 801b118:	e000      	b.n	801b11c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801b11a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801b11c:	7dfb      	ldrb	r3, [r7, #23]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d10a      	bne.n	801b138 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801b122:	4b67      	ldr	r3, [pc, #412]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b126:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b130:	4963      	ldr	r1, [pc, #396]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b132:	4313      	orrs	r3, r2
 801b134:	658b      	str	r3, [r1, #88]	; 0x58
 801b136:	e001      	b.n	801b13c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b138:	7dfb      	ldrb	r3, [r7, #23]
 801b13a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b144:	2b00      	cmp	r3, #0
 801b146:	d044      	beq.n	801b1d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b14e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b152:	d01b      	beq.n	801b18c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 801b154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b158:	d805      	bhi.n	801b166 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d022      	beq.n	801b1a4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801b15e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b162:	d00a      	beq.n	801b17a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 801b164:	e01b      	b.n	801b19e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 801b166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b16a:	d01d      	beq.n	801b1a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 801b16c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801b170:	d01c      	beq.n	801b1ac <HAL_RCCEx_PeriphCLKConfig+0xab0>
 801b172:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801b176:	d01b      	beq.n	801b1b0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 801b178:	e011      	b.n	801b19e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	3304      	adds	r3, #4
 801b17e:	2100      	movs	r1, #0
 801b180:	4618      	mov	r0, r3
 801b182:	f001 f81b 	bl	801c1bc <RCCEx_PLL2_Config>
 801b186:	4603      	mov	r3, r0
 801b188:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801b18a:	e012      	b.n	801b1b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	3324      	adds	r3, #36	; 0x24
 801b190:	2102      	movs	r1, #2
 801b192:	4618      	mov	r0, r3
 801b194:	f001 f8c4 	bl	801c320 <RCCEx_PLL3_Config>
 801b198:	4603      	mov	r3, r0
 801b19a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801b19c:	e009      	b.n	801b1b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801b19e:	2301      	movs	r3, #1
 801b1a0:	75fb      	strb	r3, [r7, #23]
      break;
 801b1a2:	e006      	b.n	801b1b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801b1a4:	bf00      	nop
 801b1a6:	e004      	b.n	801b1b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801b1a8:	bf00      	nop
 801b1aa:	e002      	b.n	801b1b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801b1ac:	bf00      	nop
 801b1ae:	e000      	b.n	801b1b2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801b1b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 801b1b2:	7dfb      	ldrb	r3, [r7, #23]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d10a      	bne.n	801b1ce <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801b1b8:	4b41      	ldr	r3, [pc, #260]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b1bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b1c6:	493e      	ldr	r1, [pc, #248]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b1c8:	4313      	orrs	r3, r2
 801b1ca:	658b      	str	r3, [r1, #88]	; 0x58
 801b1cc:	e001      	b.n	801b1d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b1ce:	7dfb      	ldrb	r3, [r7, #23]
 801b1d0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	f003 0308 	and.w	r3, r3, #8
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d01a      	beq.n	801b214 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b1e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b1e8:	d10a      	bne.n	801b200 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	3324      	adds	r3, #36	; 0x24
 801b1ee:	2102      	movs	r1, #2
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	f001 f895 	bl	801c320 <RCCEx_PLL3_Config>
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d001      	beq.n	801b200 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 801b1fc:	2301      	movs	r3, #1
 801b1fe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801b200:	4b2f      	ldr	r3, [pc, #188]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b204:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b20e:	492c      	ldr	r1, [pc, #176]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b210:	4313      	orrs	r3, r2
 801b212:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	f003 0310 	and.w	r3, r3, #16
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d01a      	beq.n	801b256 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b22a:	d10a      	bne.n	801b242 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	3324      	adds	r3, #36	; 0x24
 801b230:	2102      	movs	r1, #2
 801b232:	4618      	mov	r0, r3
 801b234:	f001 f874 	bl	801c320 <RCCEx_PLL3_Config>
 801b238:	4603      	mov	r3, r0
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d001      	beq.n	801b242 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 801b23e:	2301      	movs	r3, #1
 801b240:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801b242:	4b1f      	ldr	r3, [pc, #124]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b246:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b250:	491b      	ldr	r1, [pc, #108]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b252:	4313      	orrs	r3, r2
 801b254:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d032      	beq.n	801b2c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b26c:	d00d      	beq.n	801b28a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 801b26e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b272:	d016      	beq.n	801b2a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 801b274:	2b00      	cmp	r3, #0
 801b276:	d111      	bne.n	801b29c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	3304      	adds	r3, #4
 801b27c:	2100      	movs	r1, #0
 801b27e:	4618      	mov	r0, r3
 801b280:	f000 ff9c 	bl	801c1bc <RCCEx_PLL2_Config>
 801b284:	4603      	mov	r3, r0
 801b286:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801b288:	e00c      	b.n	801b2a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	3324      	adds	r3, #36	; 0x24
 801b28e:	2102      	movs	r1, #2
 801b290:	4618      	mov	r0, r3
 801b292:	f001 f845 	bl	801c320 <RCCEx_PLL3_Config>
 801b296:	4603      	mov	r3, r0
 801b298:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801b29a:	e003      	b.n	801b2a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801b29c:	2301      	movs	r3, #1
 801b29e:	75fb      	strb	r3, [r7, #23]
      break;
 801b2a0:	e000      	b.n	801b2a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 801b2a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 801b2a4:	7dfb      	ldrb	r3, [r7, #23]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d10c      	bne.n	801b2c4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801b2aa:	4b05      	ldr	r3, [pc, #20]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b2ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b2b8:	4901      	ldr	r1, [pc, #4]	; (801b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801b2ba:	4313      	orrs	r3, r2
 801b2bc:	658b      	str	r3, [r1, #88]	; 0x58
 801b2be:	e003      	b.n	801b2c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 801b2c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b2c4:	7dfb      	ldrb	r3, [r7, #23]
 801b2c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d02f      	beq.n	801b334 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b2da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801b2de:	d00c      	beq.n	801b2fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 801b2e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801b2e4:	d015      	beq.n	801b312 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 801b2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b2ea:	d10f      	bne.n	801b30c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b2ec:	4b79      	ldr	r3, [pc, #484]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2f0:	4a78      	ldr	r2, [pc, #480]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b2f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b2f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801b2f8:	e00c      	b.n	801b314 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	3324      	adds	r3, #36	; 0x24
 801b2fe:	2101      	movs	r1, #1
 801b300:	4618      	mov	r0, r3
 801b302:	f001 f80d 	bl	801c320 <RCCEx_PLL3_Config>
 801b306:	4603      	mov	r3, r0
 801b308:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 801b30a:	e003      	b.n	801b314 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801b30c:	2301      	movs	r3, #1
 801b30e:	75fb      	strb	r3, [r7, #23]
      break;
 801b310:	e000      	b.n	801b314 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 801b312:	bf00      	nop
    }

    if(ret == HAL_OK)
 801b314:	7dfb      	ldrb	r3, [r7, #23]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d10a      	bne.n	801b330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801b31a:	4b6e      	ldr	r3, [pc, #440]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b31e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b328:	496a      	ldr	r1, [pc, #424]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b32a:	4313      	orrs	r3, r2
 801b32c:	654b      	str	r3, [r1, #84]	; 0x54
 801b32e:	e001      	b.n	801b334 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b330:	7dfb      	ldrb	r3, [r7, #23]
 801b332:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d029      	beq.n	801b394 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b344:	2b00      	cmp	r3, #0
 801b346:	d003      	beq.n	801b350 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 801b348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b34c:	d007      	beq.n	801b35e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 801b34e:	e00f      	b.n	801b370 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b350:	4b60      	ldr	r3, [pc, #384]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b354:	4a5f      	ldr	r2, [pc, #380]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b35a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801b35c:	e00b      	b.n	801b376 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	3304      	adds	r3, #4
 801b362:	2102      	movs	r1, #2
 801b364:	4618      	mov	r0, r3
 801b366:	f000 ff29 	bl	801c1bc <RCCEx_PLL2_Config>
 801b36a:	4603      	mov	r3, r0
 801b36c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801b36e:	e002      	b.n	801b376 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 801b370:	2301      	movs	r3, #1
 801b372:	75fb      	strb	r3, [r7, #23]
      break;
 801b374:	bf00      	nop
    }

    if(ret == HAL_OK)
 801b376:	7dfb      	ldrb	r3, [r7, #23]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d109      	bne.n	801b390 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801b37c:	4b55      	ldr	r3, [pc, #340]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b37e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b388:	4952      	ldr	r1, [pc, #328]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b38a:	4313      	orrs	r3, r2
 801b38c:	64cb      	str	r3, [r1, #76]	; 0x4c
 801b38e:	e001      	b.n	801b394 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b390:	7dfb      	ldrb	r3, [r7, #23]
 801b392:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d00a      	beq.n	801b3b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	3324      	adds	r3, #36	; 0x24
 801b3a4:	2102      	movs	r1, #2
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	f000 ffba 	bl	801c320 <RCCEx_PLL3_Config>
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d001      	beq.n	801b3b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 801b3b2:	2301      	movs	r3, #1
 801b3b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d02f      	beq.n	801b422 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b3c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b3ca:	d00c      	beq.n	801b3e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801b3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b3d0:	d802      	bhi.n	801b3d8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d011      	beq.n	801b3fa <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 801b3d6:	e00d      	b.n	801b3f4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 801b3d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b3dc:	d00f      	beq.n	801b3fe <HAL_RCCEx_PeriphCLKConfig+0xd02>
 801b3de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b3e2:	d00e      	beq.n	801b402 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 801b3e4:	e006      	b.n	801b3f4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b3e6:	4b3b      	ldr	r3, [pc, #236]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3ea:	4a3a      	ldr	r2, [pc, #232]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b3ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b3f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801b3f2:	e007      	b.n	801b404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801b3f4:	2301      	movs	r3, #1
 801b3f6:	75fb      	strb	r3, [r7, #23]
      break;
 801b3f8:	e004      	b.n	801b404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801b3fa:	bf00      	nop
 801b3fc:	e002      	b.n	801b404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801b3fe:	bf00      	nop
 801b400:	e000      	b.n	801b404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801b402:	bf00      	nop
    }

    if(ret == HAL_OK)
 801b404:	7dfb      	ldrb	r3, [r7, #23]
 801b406:	2b00      	cmp	r3, #0
 801b408:	d109      	bne.n	801b41e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801b40a:	4b32      	ldr	r3, [pc, #200]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b40e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b416:	492f      	ldr	r1, [pc, #188]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b418:	4313      	orrs	r3, r2
 801b41a:	654b      	str	r3, [r1, #84]	; 0x54
 801b41c:	e001      	b.n	801b422 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b41e:	7dfb      	ldrb	r3, [r7, #23]
 801b420:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d008      	beq.n	801b440 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801b42e:	4b29      	ldr	r3, [pc, #164]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b432:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b43a:	4926      	ldr	r1, [pc, #152]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b43c:	4313      	orrs	r3, r2
 801b43e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d009      	beq.n	801b460 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801b44c:	4b21      	ldr	r3, [pc, #132]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b44e:	691b      	ldr	r3, [r3, #16]
 801b450:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b45a:	491e      	ldr	r1, [pc, #120]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b45c:	4313      	orrs	r3, r2
 801b45e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d008      	beq.n	801b47e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801b46c:	4b19      	ldr	r3, [pc, #100]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b470:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b478:	4916      	ldr	r1, [pc, #88]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b47a:	4313      	orrs	r3, r2
 801b47c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801b486:	2b00      	cmp	r3, #0
 801b488:	d00d      	beq.n	801b4a6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b48a:	4b12      	ldr	r3, [pc, #72]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b48c:	691b      	ldr	r3, [r3, #16]
 801b48e:	4a11      	ldr	r2, [pc, #68]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801b494:	6113      	str	r3, [r2, #16]
 801b496:	4b0f      	ldr	r3, [pc, #60]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b498:	691a      	ldr	r2, [r3, #16]
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b4a0:	490c      	ldr	r1, [pc, #48]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b4a2:	4313      	orrs	r3, r2
 801b4a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	da08      	bge.n	801b4c0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801b4ae:	4b09      	ldr	r3, [pc, #36]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b4b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b4ba:	4906      	ldr	r1, [pc, #24]	; (801b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801b4bc:	4313      	orrs	r3, r2
 801b4be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 801b4c0:	7dbb      	ldrb	r3, [r7, #22]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d101      	bne.n	801b4ca <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	e000      	b.n	801b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 801b4ca:	2301      	movs	r3, #1
}
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	3718      	adds	r7, #24
 801b4d0:	46bd      	mov	sp, r7
 801b4d2:	bd80      	pop	{r7, pc}
 801b4d4:	58024400 	.word	0x58024400

0801b4d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b090      	sub	sp, #64	; 0x40
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b4e6:	d150      	bne.n	801b58a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 801b4e8:	4ba1      	ldr	r3, [pc, #644]	; (801b770 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801b4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b4ec:	f003 0307 	and.w	r3, r3, #7
 801b4f0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4f4:	2b04      	cmp	r3, #4
 801b4f6:	d844      	bhi.n	801b582 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 801b4f8:	a201      	add	r2, pc, #4	; (adr r2, 801b500 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 801b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b4fe:	bf00      	nop
 801b500:	0801b515 	.word	0x0801b515
 801b504:	0801b525 	.word	0x0801b525
 801b508:	0801b535 	.word	0x0801b535
 801b50c:	0801b57d 	.word	0x0801b57d
 801b510:	0801b545 	.word	0x0801b545
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801b514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b518:	4618      	mov	r0, r3
 801b51a:	f000 fd03 	bl	801bf24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801b51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b522:	e241      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b524:	f107 0318 	add.w	r3, r7, #24
 801b528:	4618      	mov	r0, r3
 801b52a:	f000 fa63 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801b52e:	69bb      	ldr	r3, [r7, #24]
 801b530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b532:	e239      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b534:	f107 030c 	add.w	r3, r7, #12
 801b538:	4618      	mov	r0, r3
 801b53a:	f000 fba7 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b542:	e231      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801b544:	4b8a      	ldr	r3, [pc, #552]	; (801b770 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801b546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b54c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b550:	2b00      	cmp	r3, #0
 801b552:	d102      	bne.n	801b55a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801b554:	4b87      	ldr	r3, [pc, #540]	; (801b774 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801b556:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801b558:	e226      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801b55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b55c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b560:	d102      	bne.n	801b568 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 801b562:	4b85      	ldr	r3, [pc, #532]	; (801b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801b564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b566:	e21f      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801b568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b56a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b56e:	d102      	bne.n	801b576 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 801b570:	4b82      	ldr	r3, [pc, #520]	; (801b77c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801b572:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b574:	e218      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801b576:	2300      	movs	r3, #0
 801b578:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b57a:	e215      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801b57c:	4b80      	ldr	r3, [pc, #512]	; (801b780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 801b57e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b580:	e212      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801b582:	2300      	movs	r3, #0
 801b584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b586:	bf00      	nop
 801b588:	e20e      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b590:	d14f      	bne.n	801b632 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 801b592:	4b77      	ldr	r3, [pc, #476]	; (801b770 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801b594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b596:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 801b59a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b59e:	2b80      	cmp	r3, #128	; 0x80
 801b5a0:	d01c      	beq.n	801b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 801b5a2:	2b80      	cmp	r3, #128	; 0x80
 801b5a4:	d804      	bhi.n	801b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d008      	beq.n	801b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 801b5aa:	2b40      	cmp	r3, #64	; 0x40
 801b5ac:	d00e      	beq.n	801b5cc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 801b5ae:	e03c      	b.n	801b62a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 801b5b0:	2bc0      	cmp	r3, #192	; 0xc0
 801b5b2:	d037      	beq.n	801b624 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 801b5b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b5b8:	d018      	beq.n	801b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 801b5ba:	e036      	b.n	801b62a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801b5bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	f000 fcaf 	bl	801bf24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801b5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b5ca:	e1ed      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b5cc:	f107 0318 	add.w	r3, r7, #24
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f000 fa0f 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801b5d6:	69bb      	ldr	r3, [r7, #24]
 801b5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b5da:	e1e5      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b5dc:	f107 030c 	add.w	r3, r7, #12
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	f000 fb53 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801b5e6:	68fb      	ldr	r3, [r7, #12]
 801b5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b5ea:	e1dd      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801b5ec:	4b60      	ldr	r3, [pc, #384]	; (801b770 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801b5ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b5f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b5f4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801b5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d102      	bne.n	801b602 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801b5fc:	4b5d      	ldr	r3, [pc, #372]	; (801b774 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801b600:	e1d2      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801b602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b608:	d102      	bne.n	801b610 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 801b60a:	4b5b      	ldr	r3, [pc, #364]	; (801b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801b60c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b60e:	e1cb      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801b610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b616:	d102      	bne.n	801b61e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 801b618:	4b58      	ldr	r3, [pc, #352]	; (801b77c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b61c:	e1c4      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801b61e:	2300      	movs	r3, #0
 801b620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b622:	e1c1      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801b624:	4b56      	ldr	r3, [pc, #344]	; (801b780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 801b626:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b628:	e1be      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801b62a:	2300      	movs	r3, #0
 801b62c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b62e:	bf00      	nop
 801b630:	e1ba      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b638:	d153      	bne.n	801b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 801b63a:	4b4d      	ldr	r3, [pc, #308]	; (801b770 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801b63c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b63e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801b642:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b64a:	d01f      	beq.n	801b68c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 801b64c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b650:	d805      	bhi.n	801b65e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 801b652:	2b00      	cmp	r3, #0
 801b654:	d00a      	beq.n	801b66c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 801b656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801b65a:	d00f      	beq.n	801b67c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 801b65c:	e03d      	b.n	801b6da <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 801b65e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801b662:	d037      	beq.n	801b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 801b664:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b668:	d018      	beq.n	801b69c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 801b66a:	e036      	b.n	801b6da <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801b66c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b670:	4618      	mov	r0, r3
 801b672:	f000 fc57 	bl	801bf24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b67a:	e195      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b67c:	f107 0318 	add.w	r3, r7, #24
 801b680:	4618      	mov	r0, r3
 801b682:	f000 f9b7 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801b686:	69bb      	ldr	r3, [r7, #24]
 801b688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b68a:	e18d      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b68c:	f107 030c 	add.w	r3, r7, #12
 801b690:	4618      	mov	r0, r3
 801b692:	f000 fafb 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b69a:	e185      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801b69c:	4b34      	ldr	r3, [pc, #208]	; (801b770 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801b69e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b6a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b6a4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801b6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d102      	bne.n	801b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801b6ac:	4b31      	ldr	r3, [pc, #196]	; (801b774 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801b6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801b6b0:	e17a      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801b6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b6b8:	d102      	bne.n	801b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 801b6ba:	4b2f      	ldr	r3, [pc, #188]	; (801b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801b6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b6be:	e173      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801b6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b6c6:	d102      	bne.n	801b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 801b6c8:	4b2c      	ldr	r3, [pc, #176]	; (801b77c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b6cc:	e16c      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801b6ce:	2300      	movs	r3, #0
 801b6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b6d2:	e169      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801b6d4:	4b2a      	ldr	r3, [pc, #168]	; (801b780 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 801b6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b6d8:	e166      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801b6da:	2300      	movs	r3, #0
 801b6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b6de:	bf00      	nop
 801b6e0:	e162      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b6e8:	d15d      	bne.n	801b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 801b6ea:	4b21      	ldr	r3, [pc, #132]	; (801b770 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801b6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b6ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801b6f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801b6fa:	d01f      	beq.n	801b73c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 801b6fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801b700:	d805      	bhi.n	801b70e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 801b702:	2b00      	cmp	r3, #0
 801b704:	d00a      	beq.n	801b71c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 801b706:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b70a:	d00f      	beq.n	801b72c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 801b70c:	e047      	b.n	801b79e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 801b70e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801b712:	d041      	beq.n	801b798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 801b714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801b718:	d018      	beq.n	801b74c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 801b71a:	e040      	b.n	801b79e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801b71c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b720:	4618      	mov	r0, r3
 801b722:	f000 fbff 	bl	801bf24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b72a:	e13d      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b72c:	f107 0318 	add.w	r3, r7, #24
 801b730:	4618      	mov	r0, r3
 801b732:	f000 f95f 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801b736:	69bb      	ldr	r3, [r7, #24]
 801b738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b73a:	e135      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b73c:	f107 030c 	add.w	r3, r7, #12
 801b740:	4618      	mov	r0, r3
 801b742:	f000 faa3 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b74a:	e12d      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801b74c:	4b08      	ldr	r3, [pc, #32]	; (801b770 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801b74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b754:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801b756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d102      	bne.n	801b762 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801b75c:	4b05      	ldr	r3, [pc, #20]	; (801b774 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801b75e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801b760:	e122      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801b762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b768:	d10c      	bne.n	801b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 801b76a:	4b03      	ldr	r3, [pc, #12]	; (801b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801b76c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b76e:	e11b      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 801b770:	58024400 	.word	0x58024400
 801b774:	03d09000 	.word	0x03d09000
 801b778:	003d0900 	.word	0x003d0900
 801b77c:	007a1200 	.word	0x007a1200
 801b780:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801b784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b78a:	d102      	bne.n	801b792 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 801b78c:	4b89      	ldr	r3, [pc, #548]	; (801b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b790:	e10a      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801b792:	2300      	movs	r3, #0
 801b794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b796:	e107      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801b798:	4b87      	ldr	r3, [pc, #540]	; (801b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 801b79a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b79c:	e104      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801b79e:	2300      	movs	r3, #0
 801b7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b7a2:	bf00      	nop
 801b7a4:	e100      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b7ac:	d153      	bne.n	801b856 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 801b7ae:	4b83      	ldr	r3, [pc, #524]	; (801b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801b7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b7b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801b7b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b7be:	d01f      	beq.n	801b800 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 801b7c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b7c4:	d805      	bhi.n	801b7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d00a      	beq.n	801b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 801b7ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b7ce:	d00f      	beq.n	801b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 801b7d0:	e03d      	b.n	801b84e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 801b7d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801b7d6:	d037      	beq.n	801b848 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 801b7d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b7dc:	d018      	beq.n	801b810 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 801b7de:	e036      	b.n	801b84e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801b7e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f000 fb9d 	bl	801bf24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b7ee:	e0db      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b7f0:	f107 0318 	add.w	r3, r7, #24
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	f000 f8fd 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801b7fa:	69bb      	ldr	r3, [r7, #24]
 801b7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b7fe:	e0d3      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b800:	f107 030c 	add.w	r3, r7, #12
 801b804:	4618      	mov	r0, r3
 801b806:	f000 fa41 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b80e:	e0cb      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801b810:	4b6a      	ldr	r3, [pc, #424]	; (801b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801b812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b818:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801b81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d102      	bne.n	801b826 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801b820:	4b67      	ldr	r3, [pc, #412]	; (801b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 801b822:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801b824:	e0c0      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801b826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b82c:	d102      	bne.n	801b834 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 801b82e:	4b65      	ldr	r3, [pc, #404]	; (801b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801b830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b832:	e0b9      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801b834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b83a:	d102      	bne.n	801b842 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 801b83c:	4b5d      	ldr	r3, [pc, #372]	; (801b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801b83e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b840:	e0b2      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801b842:	2300      	movs	r3, #0
 801b844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b846:	e0af      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801b848:	4b5b      	ldr	r3, [pc, #364]	; (801b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 801b84a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b84c:	e0ac      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801b84e:	2300      	movs	r3, #0
 801b850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b852:	bf00      	nop
 801b854:	e0a8      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801b85c:	d13d      	bne.n	801b8da <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 801b85e:	4b57      	ldr	r3, [pc, #348]	; (801b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801b860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b862:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801b866:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b86e:	d00c      	beq.n	801b88a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801b870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b874:	d011      	beq.n	801b89a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 801b876:	2b00      	cmp	r3, #0
 801b878:	d12b      	bne.n	801b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b87a:	f107 0318 	add.w	r3, r7, #24
 801b87e:	4618      	mov	r0, r3
 801b880:	f000 f8b8 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801b884:	69bb      	ldr	r3, [r7, #24]
 801b886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b888:	e08e      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b88a:	f107 030c 	add.w	r3, r7, #12
 801b88e:	4618      	mov	r0, r3
 801b890:	f000 f9fc 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801b894:	697b      	ldr	r3, [r7, #20]
 801b896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b898:	e086      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801b89a:	4b48      	ldr	r3, [pc, #288]	; (801b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801b89c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b89e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b8a2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801b8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d102      	bne.n	801b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801b8aa:	4b45      	ldr	r3, [pc, #276]	; (801b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 801b8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801b8ae:	e07b      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801b8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b8b6:	d102      	bne.n	801b8be <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 801b8b8:	4b42      	ldr	r3, [pc, #264]	; (801b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801b8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b8bc:	e074      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801b8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b8c4:	d102      	bne.n	801b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 801b8c6:	4b3b      	ldr	r3, [pc, #236]	; (801b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801b8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b8ca:	e06d      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b8d0:	e06a      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b8d6:	bf00      	nop
 801b8d8:	e066      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b8e0:	d11f      	bne.n	801b922 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 801b8e2:	4b36      	ldr	r3, [pc, #216]	; (801b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801b8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b8e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b8ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801b8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d003      	beq.n	801b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 801b8f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b8f6:	d008      	beq.n	801b90a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 801b8f8:	e00f      	b.n	801b91a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801b8fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b8fe:	4618      	mov	r0, r3
 801b900:	f000 fb10 	bl	801bf24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b908:	e04e      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b90a:	f107 0318 	add.w	r3, r7, #24
 801b90e:	4618      	mov	r0, r3
 801b910:	f000 f870 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801b914:	6a3b      	ldr	r3, [r7, #32]
 801b916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b918:	e046      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801b91a:	2300      	movs	r3, #0
 801b91c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b91e:	bf00      	nop
 801b920:	e042      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b928:	d13c      	bne.n	801b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 801b92a:	4b24      	ldr	r3, [pc, #144]	; (801b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801b92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b92e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801b932:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b93a:	d01e      	beq.n	801b97a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 801b93c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b940:	d805      	bhi.n	801b94e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 801b942:	2b00      	cmp	r3, #0
 801b944:	d00d      	beq.n	801b962 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801b946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b94a:	d00e      	beq.n	801b96a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 801b94c:	e026      	b.n	801b99c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 801b94e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b952:	d01d      	beq.n	801b990 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 801b954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b958:	d01d      	beq.n	801b996 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 801b95a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801b95e:	d014      	beq.n	801b98a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 801b960:	e01c      	b.n	801b99c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801b962:	f000 f831 	bl	801b9c8 <HAL_RCCEx_GetD3PCLK1Freq>
 801b966:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 801b968:	e01e      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801b96a:	f107 0318 	add.w	r3, r7, #24
 801b96e:	4618      	mov	r0, r3
 801b970:	f000 f840 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801b974:	69fb      	ldr	r3, [r7, #28]
 801b976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b978:	e016      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801b97a:	f107 030c 	add.w	r3, r7, #12
 801b97e:	4618      	mov	r0, r3
 801b980:	f000 f984 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801b984:	693b      	ldr	r3, [r7, #16]
 801b986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b988:	e00e      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 801b98a:	4b0d      	ldr	r3, [pc, #52]	; (801b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 801b98c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b98e:	e00b      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 801b990:	4b0c      	ldr	r3, [pc, #48]	; (801b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801b992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b994:	e008      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 801b996:	4b07      	ldr	r3, [pc, #28]	; (801b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801b998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b99a:	e005      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 801b99c:	2300      	movs	r3, #0
 801b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801b9a0:	bf00      	nop
 801b9a2:	e001      	b.n	801b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 801b9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	3740      	adds	r7, #64	; 0x40
 801b9ae:	46bd      	mov	sp, r7
 801b9b0:	bd80      	pop	{r7, pc}
 801b9b2:	bf00      	nop
 801b9b4:	007a1200 	.word	0x007a1200
 801b9b8:	00bb8000 	.word	0x00bb8000
 801b9bc:	58024400 	.word	0x58024400
 801b9c0:	03d09000 	.word	0x03d09000
 801b9c4:	003d0900 	.word	0x003d0900

0801b9c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801b9cc:	f7fe fdf8 	bl	801a5c0 <HAL_RCC_GetHCLKFreq>
 801b9d0:	4601      	mov	r1, r0
 801b9d2:	4b06      	ldr	r3, [pc, #24]	; (801b9ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801b9d4:	6a1b      	ldr	r3, [r3, #32]
 801b9d6:	091b      	lsrs	r3, r3, #4
 801b9d8:	f003 0307 	and.w	r3, r3, #7
 801b9dc:	4a04      	ldr	r2, [pc, #16]	; (801b9f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801b9de:	5cd3      	ldrb	r3, [r2, r3]
 801b9e0:	f003 031f 	and.w	r3, r3, #31
 801b9e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	bd80      	pop	{r7, pc}
 801b9ec:	58024400 	.word	0x58024400
 801b9f0:	0802d72c 	.word	0x0802d72c

0801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 801b9f4:	b480      	push	{r7}
 801b9f6:	b089      	sub	sp, #36	; 0x24
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801b9fc:	4b9d      	ldr	r3, [pc, #628]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801b9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba00:	f003 0303 	and.w	r3, r3, #3
 801ba04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 801ba06:	4b9b      	ldr	r3, [pc, #620]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801ba08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba0a:	0b1b      	lsrs	r3, r3, #12
 801ba0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ba10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801ba12:	4b98      	ldr	r3, [pc, #608]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801ba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba16:	091b      	lsrs	r3, r3, #4
 801ba18:	f003 0301 	and.w	r3, r3, #1
 801ba1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801ba1e:	4b95      	ldr	r3, [pc, #596]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801ba20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ba22:	08db      	lsrs	r3, r3, #3
 801ba24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ba28:	693a      	ldr	r2, [r7, #16]
 801ba2a:	fb02 f303 	mul.w	r3, r2, r3
 801ba2e:	ee07 3a90 	vmov	s15, r3
 801ba32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ba36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	f000 810a 	beq.w	801bc56 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 801ba42:	69bb      	ldr	r3, [r7, #24]
 801ba44:	2b01      	cmp	r3, #1
 801ba46:	d05a      	beq.n	801bafe <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 801ba48:	2b01      	cmp	r3, #1
 801ba4a:	d302      	bcc.n	801ba52 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 801ba4c:	2b02      	cmp	r3, #2
 801ba4e:	d078      	beq.n	801bb42 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 801ba50:	e099      	b.n	801bb86 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ba52:	4b88      	ldr	r3, [pc, #544]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	f003 0320 	and.w	r3, r3, #32
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d02d      	beq.n	801baba <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801ba5e:	4b85      	ldr	r3, [pc, #532]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	08db      	lsrs	r3, r3, #3
 801ba64:	f003 0303 	and.w	r3, r3, #3
 801ba68:	4a83      	ldr	r2, [pc, #524]	; (801bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 801ba6a:	fa22 f303 	lsr.w	r3, r2, r3
 801ba6e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801ba70:	68bb      	ldr	r3, [r7, #8]
 801ba72:	ee07 3a90 	vmov	s15, r3
 801ba76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ba7a:	697b      	ldr	r3, [r7, #20]
 801ba7c:	ee07 3a90 	vmov	s15, r3
 801ba80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ba84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ba88:	4b7a      	ldr	r3, [pc, #488]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801ba8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ba90:	ee07 3a90 	vmov	s15, r3
 801ba94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ba98:	ed97 6a03 	vldr	s12, [r7, #12]
 801ba9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 801bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801baa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801baa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801baa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801baac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bab4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801bab8:	e087      	b.n	801bbca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801baba:	697b      	ldr	r3, [r7, #20]
 801babc:	ee07 3a90 	vmov	s15, r3
 801bac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bac4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 801bac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bacc:	4b69      	ldr	r3, [pc, #420]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801bace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bad4:	ee07 3a90 	vmov	s15, r3
 801bad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801badc:	ed97 6a03 	vldr	s12, [r7, #12]
 801bae0:	eddf 5a66 	vldr	s11, [pc, #408]	; 801bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801bae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801baec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801baf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801baf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801baf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801bafc:	e065      	b.n	801bbca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801bafe:	697b      	ldr	r3, [r7, #20]
 801bb00:	ee07 3a90 	vmov	s15, r3
 801bb04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801bc84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 801bb0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb10:	4b58      	ldr	r3, [pc, #352]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801bb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb18:	ee07 3a90 	vmov	s15, r3
 801bb1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb20:	ed97 6a03 	vldr	s12, [r7, #12]
 801bb24:	eddf 5a55 	vldr	s11, [pc, #340]	; 801bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801bb28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bb2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bb30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb38:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bb3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801bb40:	e043      	b.n	801bbca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801bb42:	697b      	ldr	r3, [r7, #20]
 801bb44:	ee07 3a90 	vmov	s15, r3
 801bb48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 801bb50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb54:	4b47      	ldr	r3, [pc, #284]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801bb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb5c:	ee07 3a90 	vmov	s15, r3
 801bb60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb64:	ed97 6a03 	vldr	s12, [r7, #12]
 801bb68:	eddf 5a44 	vldr	s11, [pc, #272]	; 801bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801bb6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bb70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bb74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bb80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801bb84:	e021      	b.n	801bbca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801bb86:	697b      	ldr	r3, [r7, #20]
 801bb88:	ee07 3a90 	vmov	s15, r3
 801bb8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb90:	eddf 6a3c 	vldr	s13, [pc, #240]	; 801bc84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 801bb94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb98:	4b36      	ldr	r3, [pc, #216]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801bb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bba0:	ee07 3a90 	vmov	s15, r3
 801bba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bba8:	ed97 6a03 	vldr	s12, [r7, #12]
 801bbac:	eddf 5a33 	vldr	s11, [pc, #204]	; 801bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801bbb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bbb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bbb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bbbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bbc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bbc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801bbc8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 801bbca:	4b2a      	ldr	r3, [pc, #168]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801bbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbce:	0a5b      	lsrs	r3, r3, #9
 801bbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bbd4:	ee07 3a90 	vmov	s15, r3
 801bbd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bbdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bbe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 801bbe4:	edd7 6a07 	vldr	s13, [r7, #28]
 801bbe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bbec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bbf0:	ee17 2a90 	vmov	r2, s15
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 801bbf8:	4b1e      	ldr	r3, [pc, #120]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801bbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbfc:	0c1b      	lsrs	r3, r3, #16
 801bbfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bc02:	ee07 3a90 	vmov	s15, r3
 801bc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801bc12:	edd7 6a07 	vldr	s13, [r7, #28]
 801bc16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bc1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bc1e:	ee17 2a90 	vmov	r2, s15
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 801bc26:	4b13      	ldr	r3, [pc, #76]	; (801bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801bc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc2a:	0e1b      	lsrs	r3, r3, #24
 801bc2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bc30:	ee07 3a90 	vmov	s15, r3
 801bc34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801bc40:	edd7 6a07 	vldr	s13, [r7, #28]
 801bc44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bc48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bc4c:	ee17 2a90 	vmov	r2, s15
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801bc54:	e008      	b.n	801bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	2200      	movs	r2, #0
 801bc5a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	2200      	movs	r2, #0
 801bc60:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	2200      	movs	r2, #0
 801bc66:	609a      	str	r2, [r3, #8]
}
 801bc68:	bf00      	nop
 801bc6a:	3724      	adds	r7, #36	; 0x24
 801bc6c:	46bd      	mov	sp, r7
 801bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc72:	4770      	bx	lr
 801bc74:	58024400 	.word	0x58024400
 801bc78:	03d09000 	.word	0x03d09000
 801bc7c:	46000000 	.word	0x46000000
 801bc80:	4c742400 	.word	0x4c742400
 801bc84:	4a742400 	.word	0x4a742400
 801bc88:	4af42400 	.word	0x4af42400

0801bc8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 801bc8c:	b480      	push	{r7}
 801bc8e:	b089      	sub	sp, #36	; 0x24
 801bc90:	af00      	add	r7, sp, #0
 801bc92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801bc94:	4b9d      	ldr	r3, [pc, #628]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc98:	f003 0303 	and.w	r3, r3, #3
 801bc9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801bc9e:	4b9b      	ldr	r3, [pc, #620]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bca2:	0d1b      	lsrs	r3, r3, #20
 801bca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bca8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801bcaa:	4b98      	ldr	r3, [pc, #608]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcae:	0a1b      	lsrs	r3, r3, #8
 801bcb0:	f003 0301 	and.w	r3, r3, #1
 801bcb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 801bcb6:	4b95      	ldr	r3, [pc, #596]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bcb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcba:	08db      	lsrs	r3, r3, #3
 801bcbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bcc0:	693a      	ldr	r2, [r7, #16]
 801bcc2:	fb02 f303 	mul.w	r3, r2, r3
 801bcc6:	ee07 3a90 	vmov	s15, r3
 801bcca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bcce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801bcd2:	697b      	ldr	r3, [r7, #20]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	f000 810a 	beq.w	801beee <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 801bcda:	69bb      	ldr	r3, [r7, #24]
 801bcdc:	2b01      	cmp	r3, #1
 801bcde:	d05a      	beq.n	801bd96 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 801bce0:	2b01      	cmp	r3, #1
 801bce2:	d302      	bcc.n	801bcea <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 801bce4:	2b02      	cmp	r3, #2
 801bce6:	d078      	beq.n	801bdda <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 801bce8:	e099      	b.n	801be1e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bcea:	4b88      	ldr	r3, [pc, #544]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	f003 0320 	and.w	r3, r3, #32
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d02d      	beq.n	801bd52 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801bcf6:	4b85      	ldr	r3, [pc, #532]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	08db      	lsrs	r3, r3, #3
 801bcfc:	f003 0303 	and.w	r3, r3, #3
 801bd00:	4a83      	ldr	r2, [pc, #524]	; (801bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 801bd02:	fa22 f303 	lsr.w	r3, r2, r3
 801bd06:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801bd08:	68bb      	ldr	r3, [r7, #8]
 801bd0a:	ee07 3a90 	vmov	s15, r3
 801bd0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bd12:	697b      	ldr	r3, [r7, #20]
 801bd14:	ee07 3a90 	vmov	s15, r3
 801bd18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bd1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bd20:	4b7a      	ldr	r3, [pc, #488]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bd28:	ee07 3a90 	vmov	s15, r3
 801bd2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bd30:	ed97 6a03 	vldr	s12, [r7, #12]
 801bd34:	eddf 5a77 	vldr	s11, [pc, #476]	; 801bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801bd38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bd3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bd40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bd48:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bd4c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801bd50:	e087      	b.n	801be62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801bd52:	697b      	ldr	r3, [r7, #20]
 801bd54:	ee07 3a90 	vmov	s15, r3
 801bd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bd5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801bf18 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 801bd60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bd64:	4b69      	ldr	r3, [pc, #420]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bd6c:	ee07 3a90 	vmov	s15, r3
 801bd70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bd74:	ed97 6a03 	vldr	s12, [r7, #12]
 801bd78:	eddf 5a66 	vldr	s11, [pc, #408]	; 801bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801bd7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bd80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bd84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bd8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bd90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801bd94:	e065      	b.n	801be62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801bd96:	697b      	ldr	r3, [r7, #20]
 801bd98:	ee07 3a90 	vmov	s15, r3
 801bd9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bda0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 801bda4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bda8:	4b58      	ldr	r3, [pc, #352]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bdb0:	ee07 3a90 	vmov	s15, r3
 801bdb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bdb8:	ed97 6a03 	vldr	s12, [r7, #12]
 801bdbc:	eddf 5a55 	vldr	s11, [pc, #340]	; 801bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801bdc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bdc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bdc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bdcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bdd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bdd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801bdd8:	e043      	b.n	801be62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801bdda:	697b      	ldr	r3, [r7, #20]
 801bddc:	ee07 3a90 	vmov	s15, r3
 801bde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bde4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801bf20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 801bde8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bdec:	4b47      	ldr	r3, [pc, #284]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bdf4:	ee07 3a90 	vmov	s15, r3
 801bdf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bdfc:	ed97 6a03 	vldr	s12, [r7, #12]
 801be00:	eddf 5a44 	vldr	s11, [pc, #272]	; 801bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801be04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801be08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801be0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801be10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801be14:	ee67 7a27 	vmul.f32	s15, s14, s15
 801be18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801be1c:	e021      	b.n	801be62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801be1e:	697b      	ldr	r3, [r7, #20]
 801be20:	ee07 3a90 	vmov	s15, r3
 801be24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801be28:	eddf 6a3c 	vldr	s13, [pc, #240]	; 801bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 801be2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801be30:	4b36      	ldr	r3, [pc, #216]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801be32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801be38:	ee07 3a90 	vmov	s15, r3
 801be3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801be40:	ed97 6a03 	vldr	s12, [r7, #12]
 801be44:	eddf 5a33 	vldr	s11, [pc, #204]	; 801bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801be48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801be4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801be50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801be54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801be58:	ee67 7a27 	vmul.f32	s15, s14, s15
 801be5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801be60:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 801be62:	4b2a      	ldr	r3, [pc, #168]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801be64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be66:	0a5b      	lsrs	r3, r3, #9
 801be68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801be6c:	ee07 3a90 	vmov	s15, r3
 801be70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801be74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be78:	ee37 7a87 	vadd.f32	s14, s15, s14
 801be7c:	edd7 6a07 	vldr	s13, [r7, #28]
 801be80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801be84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801be88:	ee17 2a90 	vmov	r2, s15
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801be90:	4b1e      	ldr	r3, [pc, #120]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801be92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be94:	0c1b      	lsrs	r3, r3, #16
 801be96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801be9a:	ee07 3a90 	vmov	s15, r3
 801be9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801beaa:	edd7 6a07 	vldr	s13, [r7, #28]
 801beae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801beb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801beb6:	ee17 2a90 	vmov	r2, s15
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 801bebe:	4b13      	ldr	r3, [pc, #76]	; (801bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801bec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bec2:	0e1b      	lsrs	r3, r3, #24
 801bec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bec8:	ee07 3a90 	vmov	s15, r3
 801becc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801bed8:	edd7 6a07 	vldr	s13, [r7, #28]
 801bedc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bee4:	ee17 2a90 	vmov	r2, s15
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801beec:	e008      	b.n	801bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	2200      	movs	r2, #0
 801bef2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	2200      	movs	r2, #0
 801bef8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	2200      	movs	r2, #0
 801befe:	609a      	str	r2, [r3, #8]
}
 801bf00:	bf00      	nop
 801bf02:	3724      	adds	r7, #36	; 0x24
 801bf04:	46bd      	mov	sp, r7
 801bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf0a:	4770      	bx	lr
 801bf0c:	58024400 	.word	0x58024400
 801bf10:	03d09000 	.word	0x03d09000
 801bf14:	46000000 	.word	0x46000000
 801bf18:	4c742400 	.word	0x4c742400
 801bf1c:	4a742400 	.word	0x4a742400
 801bf20:	4af42400 	.word	0x4af42400

0801bf24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 801bf24:	b480      	push	{r7}
 801bf26:	b089      	sub	sp, #36	; 0x24
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801bf2c:	4b9d      	ldr	r3, [pc, #628]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801bf2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf30:	f003 0303 	and.w	r3, r3, #3
 801bf34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 801bf36:	4b9b      	ldr	r3, [pc, #620]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801bf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf3a:	091b      	lsrs	r3, r3, #4
 801bf3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bf40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801bf42:	4b98      	ldr	r3, [pc, #608]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801bf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf46:	f003 0301 	and.w	r3, r3, #1
 801bf4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801bf4c:	4b95      	ldr	r3, [pc, #596]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801bf4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bf50:	08db      	lsrs	r3, r3, #3
 801bf52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf56:	693a      	ldr	r2, [r7, #16]
 801bf58:	fb02 f303 	mul.w	r3, r2, r3
 801bf5c:	ee07 3a90 	vmov	s15, r3
 801bf60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bf64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801bf68:	697b      	ldr	r3, [r7, #20]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	f000 810a 	beq.w	801c184 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 801bf70:	69bb      	ldr	r3, [r7, #24]
 801bf72:	2b01      	cmp	r3, #1
 801bf74:	d05a      	beq.n	801c02c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 801bf76:	2b01      	cmp	r3, #1
 801bf78:	d302      	bcc.n	801bf80 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 801bf7a:	2b02      	cmp	r3, #2
 801bf7c:	d078      	beq.n	801c070 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 801bf7e:	e099      	b.n	801c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bf80:	4b88      	ldr	r3, [pc, #544]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	f003 0320 	and.w	r3, r3, #32
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d02d      	beq.n	801bfe8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801bf8c:	4b85      	ldr	r3, [pc, #532]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	08db      	lsrs	r3, r3, #3
 801bf92:	f003 0303 	and.w	r3, r3, #3
 801bf96:	4a84      	ldr	r2, [pc, #528]	; (801c1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 801bf98:	fa22 f303 	lsr.w	r3, r2, r3
 801bf9c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801bf9e:	68bb      	ldr	r3, [r7, #8]
 801bfa0:	ee07 3a90 	vmov	s15, r3
 801bfa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bfa8:	697b      	ldr	r3, [r7, #20]
 801bfaa:	ee07 3a90 	vmov	s15, r3
 801bfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bfb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bfb6:	4b7b      	ldr	r3, [pc, #492]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801bfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bfbe:	ee07 3a90 	vmov	s15, r3
 801bfc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bfc6:	ed97 6a03 	vldr	s12, [r7, #12]
 801bfca:	eddf 5a78 	vldr	s11, [pc, #480]	; 801c1ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801bfce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bfd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bfd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bfda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bfde:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bfe2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801bfe6:	e087      	b.n	801c0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801bfe8:	697b      	ldr	r3, [r7, #20]
 801bfea:	ee07 3a90 	vmov	s15, r3
 801bfee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bff2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801c1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 801bff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bffa:	4b6a      	ldr	r3, [pc, #424]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c002:	ee07 3a90 	vmov	s15, r3
 801c006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c00a:	ed97 6a03 	vldr	s12, [r7, #12]
 801c00e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801c1ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801c012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c022:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801c02a:	e065      	b.n	801c0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801c02c:	697b      	ldr	r3, [r7, #20]
 801c02e:	ee07 3a90 	vmov	s15, r3
 801c032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c036:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801c1b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 801c03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c03e:	4b59      	ldr	r3, [pc, #356]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801c040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c046:	ee07 3a90 	vmov	s15, r3
 801c04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c04e:	ed97 6a03 	vldr	s12, [r7, #12]
 801c052:	eddf 5a56 	vldr	s11, [pc, #344]	; 801c1ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801c056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c066:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c06a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801c06e:	e043      	b.n	801c0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801c070:	697b      	ldr	r3, [r7, #20]
 801c072:	ee07 3a90 	vmov	s15, r3
 801c076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c07a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801c1b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801c07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c082:	4b48      	ldr	r3, [pc, #288]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801c084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c08a:	ee07 3a90 	vmov	s15, r3
 801c08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c092:	ed97 6a03 	vldr	s12, [r7, #12]
 801c096:	eddf 5a45 	vldr	s11, [pc, #276]	; 801c1ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801c09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c0ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801c0b2:	e021      	b.n	801c0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801c0b4:	697b      	ldr	r3, [r7, #20]
 801c0b6:	ee07 3a90 	vmov	s15, r3
 801c0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c0be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801c1b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 801c0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c0c6:	4b37      	ldr	r3, [pc, #220]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801c0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c0ce:	ee07 3a90 	vmov	s15, r3
 801c0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c0d6:	ed97 6a03 	vldr	s12, [r7, #12]
 801c0da:	eddf 5a34 	vldr	s11, [pc, #208]	; 801c1ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801c0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c0f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801c0f6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 801c0f8:	4b2a      	ldr	r3, [pc, #168]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801c0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0fc:	0a5b      	lsrs	r3, r3, #9
 801c0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c102:	ee07 3a90 	vmov	s15, r3
 801c106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c10a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c10e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801c112:	edd7 6a07 	vldr	s13, [r7, #28]
 801c116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c11a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c11e:	ee17 2a90 	vmov	r2, s15
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 801c126:	4b1f      	ldr	r3, [pc, #124]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801c128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c12a:	0c1b      	lsrs	r3, r3, #16
 801c12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c130:	ee07 3a90 	vmov	s15, r3
 801c134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c13c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801c140:	edd7 6a07 	vldr	s13, [r7, #28]
 801c144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c14c:	ee17 2a90 	vmov	r2, s15
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 801c154:	4b13      	ldr	r3, [pc, #76]	; (801c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801c156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c158:	0e1b      	lsrs	r3, r3, #24
 801c15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c15e:	ee07 3a90 	vmov	s15, r3
 801c162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c16a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801c16e:	edd7 6a07 	vldr	s13, [r7, #28]
 801c172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c17a:	ee17 2a90 	vmov	r2, s15
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801c182:	e008      	b.n	801c196 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	2200      	movs	r2, #0
 801c188:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	2200      	movs	r2, #0
 801c18e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	2200      	movs	r2, #0
 801c194:	609a      	str	r2, [r3, #8]
}
 801c196:	bf00      	nop
 801c198:	3724      	adds	r7, #36	; 0x24
 801c19a:	46bd      	mov	sp, r7
 801c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1a0:	4770      	bx	lr
 801c1a2:	bf00      	nop
 801c1a4:	58024400 	.word	0x58024400
 801c1a8:	03d09000 	.word	0x03d09000
 801c1ac:	46000000 	.word	0x46000000
 801c1b0:	4c742400 	.word	0x4c742400
 801c1b4:	4a742400 	.word	0x4a742400
 801c1b8:	4af42400 	.word	0x4af42400

0801c1bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801c1bc:	b580      	push	{r7, lr}
 801c1be:	b084      	sub	sp, #16
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	6078      	str	r0, [r7, #4]
 801c1c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801c1ca:	4b53      	ldr	r3, [pc, #332]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1ce:	f003 0303 	and.w	r3, r3, #3
 801c1d2:	2b03      	cmp	r3, #3
 801c1d4:	d101      	bne.n	801c1da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801c1d6:	2301      	movs	r3, #1
 801c1d8:	e099      	b.n	801c30e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801c1da:	4b4f      	ldr	r3, [pc, #316]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	4a4e      	ldr	r2, [pc, #312]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c1e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801c1e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c1e6:	f7f6 ff37 	bl	8013058 <HAL_GetTick>
 801c1ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801c1ec:	e008      	b.n	801c200 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801c1ee:	f7f6 ff33 	bl	8013058 <HAL_GetTick>
 801c1f2:	4602      	mov	r2, r0
 801c1f4:	68bb      	ldr	r3, [r7, #8]
 801c1f6:	1ad3      	subs	r3, r2, r3
 801c1f8:	2b02      	cmp	r3, #2
 801c1fa:	d901      	bls.n	801c200 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801c1fc:	2303      	movs	r3, #3
 801c1fe:	e086      	b.n	801c30e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801c200:	4b45      	ldr	r3, [pc, #276]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d1f0      	bne.n	801c1ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801c20c:	4b42      	ldr	r3, [pc, #264]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c210:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	031b      	lsls	r3, r3, #12
 801c21a:	493f      	ldr	r1, [pc, #252]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c21c:	4313      	orrs	r3, r2
 801c21e:	628b      	str	r3, [r1, #40]	; 0x28
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	685b      	ldr	r3, [r3, #4]
 801c224:	3b01      	subs	r3, #1
 801c226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	689b      	ldr	r3, [r3, #8]
 801c22e:	3b01      	subs	r3, #1
 801c230:	025b      	lsls	r3, r3, #9
 801c232:	b29b      	uxth	r3, r3
 801c234:	431a      	orrs	r2, r3
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	68db      	ldr	r3, [r3, #12]
 801c23a:	3b01      	subs	r3, #1
 801c23c:	041b      	lsls	r3, r3, #16
 801c23e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801c242:	431a      	orrs	r2, r3
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	691b      	ldr	r3, [r3, #16]
 801c248:	3b01      	subs	r3, #1
 801c24a:	061b      	lsls	r3, r3, #24
 801c24c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801c250:	4931      	ldr	r1, [pc, #196]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c252:	4313      	orrs	r3, r2
 801c254:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801c256:	4b30      	ldr	r3, [pc, #192]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c25a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	695b      	ldr	r3, [r3, #20]
 801c262:	492d      	ldr	r1, [pc, #180]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c264:	4313      	orrs	r3, r2
 801c266:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801c268:	4b2b      	ldr	r3, [pc, #172]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c26c:	f023 0220 	bic.w	r2, r3, #32
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	699b      	ldr	r3, [r3, #24]
 801c274:	4928      	ldr	r1, [pc, #160]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c276:	4313      	orrs	r3, r2
 801c278:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801c27a:	4b27      	ldr	r3, [pc, #156]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c27e:	4a26      	ldr	r2, [pc, #152]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c280:	f023 0310 	bic.w	r3, r3, #16
 801c284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801c286:	4b24      	ldr	r3, [pc, #144]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c28a:	4b24      	ldr	r3, [pc, #144]	; (801c31c <RCCEx_PLL2_Config+0x160>)
 801c28c:	4013      	ands	r3, r2
 801c28e:	687a      	ldr	r2, [r7, #4]
 801c290:	69d2      	ldr	r2, [r2, #28]
 801c292:	00d2      	lsls	r2, r2, #3
 801c294:	4920      	ldr	r1, [pc, #128]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c296:	4313      	orrs	r3, r2
 801c298:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801c29a:	4b1f      	ldr	r3, [pc, #124]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c29e:	4a1e      	ldr	r2, [pc, #120]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c2a0:	f043 0310 	orr.w	r3, r3, #16
 801c2a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801c2a6:	683b      	ldr	r3, [r7, #0]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d106      	bne.n	801c2ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801c2ac:	4b1a      	ldr	r3, [pc, #104]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2b0:	4a19      	ldr	r2, [pc, #100]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c2b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c2b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 801c2b8:	e00f      	b.n	801c2da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801c2ba:	683b      	ldr	r3, [r7, #0]
 801c2bc:	2b01      	cmp	r3, #1
 801c2be:	d106      	bne.n	801c2ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801c2c0:	4b15      	ldr	r3, [pc, #84]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2c4:	4a14      	ldr	r2, [pc, #80]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c2c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c2ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 801c2cc:	e005      	b.n	801c2da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801c2ce:	4b12      	ldr	r3, [pc, #72]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2d2:	4a11      	ldr	r2, [pc, #68]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c2d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c2d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801c2da:	4b0f      	ldr	r3, [pc, #60]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	4a0e      	ldr	r2, [pc, #56]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c2e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801c2e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c2e6:	f7f6 feb7 	bl	8013058 <HAL_GetTick>
 801c2ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801c2ec:	e008      	b.n	801c300 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801c2ee:	f7f6 feb3 	bl	8013058 <HAL_GetTick>
 801c2f2:	4602      	mov	r2, r0
 801c2f4:	68bb      	ldr	r3, [r7, #8]
 801c2f6:	1ad3      	subs	r3, r2, r3
 801c2f8:	2b02      	cmp	r3, #2
 801c2fa:	d901      	bls.n	801c300 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801c2fc:	2303      	movs	r3, #3
 801c2fe:	e006      	b.n	801c30e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801c300:	4b05      	ldr	r3, [pc, #20]	; (801c318 <RCCEx_PLL2_Config+0x15c>)
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d0f0      	beq.n	801c2ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801c30c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c30e:	4618      	mov	r0, r3
 801c310:	3710      	adds	r7, #16
 801c312:	46bd      	mov	sp, r7
 801c314:	bd80      	pop	{r7, pc}
 801c316:	bf00      	nop
 801c318:	58024400 	.word	0x58024400
 801c31c:	ffff0007 	.word	0xffff0007

0801c320 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801c320:	b580      	push	{r7, lr}
 801c322:	b084      	sub	sp, #16
 801c324:	af00      	add	r7, sp, #0
 801c326:	6078      	str	r0, [r7, #4]
 801c328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801c32a:	2300      	movs	r3, #0
 801c32c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801c32e:	4b53      	ldr	r3, [pc, #332]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c332:	f003 0303 	and.w	r3, r3, #3
 801c336:	2b03      	cmp	r3, #3
 801c338:	d101      	bne.n	801c33e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801c33a:	2301      	movs	r3, #1
 801c33c:	e099      	b.n	801c472 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801c33e:	4b4f      	ldr	r3, [pc, #316]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	4a4e      	ldr	r2, [pc, #312]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c34a:	f7f6 fe85 	bl	8013058 <HAL_GetTick>
 801c34e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801c350:	e008      	b.n	801c364 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801c352:	f7f6 fe81 	bl	8013058 <HAL_GetTick>
 801c356:	4602      	mov	r2, r0
 801c358:	68bb      	ldr	r3, [r7, #8]
 801c35a:	1ad3      	subs	r3, r2, r3
 801c35c:	2b02      	cmp	r3, #2
 801c35e:	d901      	bls.n	801c364 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801c360:	2303      	movs	r3, #3
 801c362:	e086      	b.n	801c472 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801c364:	4b45      	ldr	r3, [pc, #276]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d1f0      	bne.n	801c352 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801c370:	4b42      	ldr	r3, [pc, #264]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c374:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	051b      	lsls	r3, r3, #20
 801c37e:	493f      	ldr	r1, [pc, #252]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c380:	4313      	orrs	r3, r2
 801c382:	628b      	str	r3, [r1, #40]	; 0x28
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	685b      	ldr	r3, [r3, #4]
 801c388:	3b01      	subs	r3, #1
 801c38a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	689b      	ldr	r3, [r3, #8]
 801c392:	3b01      	subs	r3, #1
 801c394:	025b      	lsls	r3, r3, #9
 801c396:	b29b      	uxth	r3, r3
 801c398:	431a      	orrs	r2, r3
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	68db      	ldr	r3, [r3, #12]
 801c39e:	3b01      	subs	r3, #1
 801c3a0:	041b      	lsls	r3, r3, #16
 801c3a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801c3a6:	431a      	orrs	r2, r3
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	691b      	ldr	r3, [r3, #16]
 801c3ac:	3b01      	subs	r3, #1
 801c3ae:	061b      	lsls	r3, r3, #24
 801c3b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801c3b4:	4931      	ldr	r1, [pc, #196]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c3b6:	4313      	orrs	r3, r2
 801c3b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801c3ba:	4b30      	ldr	r3, [pc, #192]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	695b      	ldr	r3, [r3, #20]
 801c3c6:	492d      	ldr	r1, [pc, #180]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c3c8:	4313      	orrs	r3, r2
 801c3ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801c3cc:	4b2b      	ldr	r3, [pc, #172]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	699b      	ldr	r3, [r3, #24]
 801c3d8:	4928      	ldr	r1, [pc, #160]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c3da:	4313      	orrs	r3, r2
 801c3dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801c3de:	4b27      	ldr	r3, [pc, #156]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3e2:	4a26      	ldr	r2, [pc, #152]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c3e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c3e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801c3ea:	4b24      	ldr	r3, [pc, #144]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c3ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c3ee:	4b24      	ldr	r3, [pc, #144]	; (801c480 <RCCEx_PLL3_Config+0x160>)
 801c3f0:	4013      	ands	r3, r2
 801c3f2:	687a      	ldr	r2, [r7, #4]
 801c3f4:	69d2      	ldr	r2, [r2, #28]
 801c3f6:	00d2      	lsls	r2, r2, #3
 801c3f8:	4920      	ldr	r1, [pc, #128]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c3fa:	4313      	orrs	r3, r2
 801c3fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801c3fe:	4b1f      	ldr	r3, [pc, #124]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c402:	4a1e      	ldr	r2, [pc, #120]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801c40a:	683b      	ldr	r3, [r7, #0]
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	d106      	bne.n	801c41e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801c410:	4b1a      	ldr	r3, [pc, #104]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c414:	4a19      	ldr	r2, [pc, #100]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801c41a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801c41c:	e00f      	b.n	801c43e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801c41e:	683b      	ldr	r3, [r7, #0]
 801c420:	2b01      	cmp	r3, #1
 801c422:	d106      	bne.n	801c432 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801c424:	4b15      	ldr	r3, [pc, #84]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c428:	4a14      	ldr	r2, [pc, #80]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c42a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801c42e:	62d3      	str	r3, [r2, #44]	; 0x2c
 801c430:	e005      	b.n	801c43e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801c432:	4b12      	ldr	r3, [pc, #72]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c436:	4a11      	ldr	r2, [pc, #68]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c43c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801c43e:	4b0f      	ldr	r3, [pc, #60]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	4a0e      	ldr	r2, [pc, #56]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c44a:	f7f6 fe05 	bl	8013058 <HAL_GetTick>
 801c44e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801c450:	e008      	b.n	801c464 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801c452:	f7f6 fe01 	bl	8013058 <HAL_GetTick>
 801c456:	4602      	mov	r2, r0
 801c458:	68bb      	ldr	r3, [r7, #8]
 801c45a:	1ad3      	subs	r3, r2, r3
 801c45c:	2b02      	cmp	r3, #2
 801c45e:	d901      	bls.n	801c464 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801c460:	2303      	movs	r3, #3
 801c462:	e006      	b.n	801c472 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801c464:	4b05      	ldr	r3, [pc, #20]	; (801c47c <RCCEx_PLL3_Config+0x15c>)
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d0f0      	beq.n	801c452 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801c470:	7bfb      	ldrb	r3, [r7, #15]
}
 801c472:	4618      	mov	r0, r3
 801c474:	3710      	adds	r7, #16
 801c476:	46bd      	mov	sp, r7
 801c478:	bd80      	pop	{r7, pc}
 801c47a:	bf00      	nop
 801c47c:	58024400 	.word	0x58024400
 801c480:	ffff0007 	.word	0xffff0007

0801c484 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801c484:	b580      	push	{r7, lr}
 801c486:	b08a      	sub	sp, #40	; 0x28
 801c488:	af00      	add	r7, sp, #0
 801c48a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d101      	bne.n	801c496 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801c492:	2301      	movs	r3, #1
 801c494:	e07c      	b.n	801c590 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c49c:	b2db      	uxtb	r3, r3
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d10c      	bne.n	801c4bc <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	2200      	movs	r2, #0
 801c4a6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	699b      	ldr	r3, [r3, #24]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d102      	bne.n	801c4b6 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	2202      	movs	r2, #2
 801c4b4:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801c4b6:	6878      	ldr	r0, [r7, #4]
 801c4b8:	f7f5 fbcc 	bl	8011c54 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	2203      	movs	r2, #3
 801c4c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801c4c4:	6878      	ldr	r0, [r7, #4]
 801c4c6:	f000 f867 	bl	801c598 <HAL_SD_InitCard>
 801c4ca:	4603      	mov	r3, r0
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d001      	beq.n	801c4d4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 801c4d0:	2301      	movs	r3, #1
 801c4d2:	e05d      	b.n	801c590 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801c4d4:	f107 0308 	add.w	r3, r7, #8
 801c4d8:	4619      	mov	r1, r3
 801c4da:	6878      	ldr	r0, [r7, #4]
 801c4dc:	f000 fdb6 	bl	801d04c <HAL_SD_GetCardStatus>
 801c4e0:	4603      	mov	r3, r0
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d001      	beq.n	801c4ea <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 801c4e6:	2301      	movs	r3, #1
 801c4e8:	e052      	b.n	801c590 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 801c4ea:	7e3b      	ldrb	r3, [r7, #24]
 801c4ec:	b2db      	uxtb	r3, r3
 801c4ee:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 801c4f0:	7e7b      	ldrb	r3, [r7, #25]
 801c4f2:	b2db      	uxtb	r3, r3
 801c4f4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c4fa:	2b01      	cmp	r3, #1
 801c4fc:	d10a      	bne.n	801c514 <HAL_SD_Init+0x90>
 801c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c500:	2b00      	cmp	r3, #0
 801c502:	d102      	bne.n	801c50a <HAL_SD_Init+0x86>
 801c504:	6a3b      	ldr	r3, [r7, #32]
 801c506:	2b00      	cmp	r3, #0
 801c508:	d004      	beq.n	801c514 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c510:	65da      	str	r2, [r3, #92]	; 0x5c
 801c512:	e00b      	b.n	801c52c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c518:	2b01      	cmp	r3, #1
 801c51a:	d104      	bne.n	801c526 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c522:	65da      	str	r2, [r3, #92]	; 0x5c
 801c524:	e002      	b.n	801c52c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	2200      	movs	r2, #0
 801c52a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	68db      	ldr	r3, [r3, #12]
 801c530:	4619      	mov	r1, r3
 801c532:	6878      	ldr	r0, [r7, #4]
 801c534:	f000 fe6c 	bl	801d210 <HAL_SD_ConfigWideBusOperation>
 801c538:	4603      	mov	r3, r0
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d001      	beq.n	801c542 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 801c53e:	2301      	movs	r3, #1
 801c540:	e026      	b.n	801c590 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801c542:	f7f6 fd89 	bl	8013058 <HAL_GetTick>
 801c546:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801c548:	e011      	b.n	801c56e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 801c54a:	f7f6 fd85 	bl	8013058 <HAL_GetTick>
 801c54e:	4602      	mov	r2, r0
 801c550:	69fb      	ldr	r3, [r7, #28]
 801c552:	1ad3      	subs	r3, r2, r3
 801c554:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c558:	d109      	bne.n	801c56e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c560:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	2201      	movs	r2, #1
 801c566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 801c56a:	2303      	movs	r3, #3
 801c56c:	e010      	b.n	801c590 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801c56e:	6878      	ldr	r0, [r7, #4]
 801c570:	f000 fef8 	bl	801d364 <HAL_SD_GetCardState>
 801c574:	4603      	mov	r3, r0
 801c576:	2b04      	cmp	r3, #4
 801c578:	d1e7      	bne.n	801c54a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	2200      	movs	r2, #0
 801c57e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	2200      	movs	r2, #0
 801c584:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	2201      	movs	r2, #1
 801c58a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801c58e:	2300      	movs	r3, #0
}
 801c590:	4618      	mov	r0, r3
 801c592:	3728      	adds	r7, #40	; 0x28
 801c594:	46bd      	mov	sp, r7
 801c596:	bd80      	pop	{r7, pc}

0801c598 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 801c598:	b5b0      	push	{r4, r5, r7, lr}
 801c59a:	b08e      	sub	sp, #56	; 0x38
 801c59c:	af04      	add	r7, sp, #16
 801c59e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801c5a8:	2300      	movs	r3, #0
 801c5aa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801c5b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801c5b4:	f7fe ff90 	bl	801b4d8 <HAL_RCCEx_GetPeriphCLKFreq>
 801c5b8:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 801c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5bc:	0a1b      	lsrs	r3, r3, #8
 801c5be:	4a40      	ldr	r2, [pc, #256]	; (801c6c0 <HAL_SD_InitCard+0x128>)
 801c5c0:	fba2 2303 	umull	r2, r3, r2, r3
 801c5c4:	091b      	lsrs	r3, r3, #4
 801c5c6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	699b      	ldr	r3, [r3, #24]
 801c5cc:	2b02      	cmp	r3, #2
 801c5ce:	d107      	bne.n	801c5e0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	681a      	ldr	r2, [r3, #0]
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	f042 0210 	orr.w	r2, r2, #16
 801c5de:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681d      	ldr	r5, [r3, #0]
 801c5e4:	466c      	mov	r4, sp
 801c5e6:	f107 0314 	add.w	r3, r7, #20
 801c5ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c5ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c5f2:	f107 0308 	add.w	r3, r7, #8
 801c5f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c5f8:	4628      	mov	r0, r5
 801c5fa:	f004 fa77 	bl	8020aec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	4618      	mov	r0, r3
 801c604:	f004 faba 	bl	8020b7c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 801c608:	69bb      	ldr	r3, [r7, #24]
 801c60a:	005b      	lsls	r3, r3, #1
 801c60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c60e:	fbb2 f3f3 	udiv	r3, r2, r3
 801c612:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 801c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c616:	2b00      	cmp	r3, #0
 801c618:	d008      	beq.n	801c62c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 801c61a:	4a2a      	ldr	r2, [pc, #168]	; (801c6c4 <HAL_SD_InitCard+0x12c>)
 801c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c61e:	fbb2 f3f3 	udiv	r3, r2, r3
 801c622:	3301      	adds	r3, #1
 801c624:	4618      	mov	r0, r3
 801c626:	f7f6 fd23 	bl	8013070 <HAL_Delay>
 801c62a:	e002      	b.n	801c632 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 801c62c:	2002      	movs	r0, #2
 801c62e:	f7f6 fd1f 	bl	8013070 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801c632:	6878      	ldr	r0, [r7, #4]
 801c634:	f000 ff74 	bl	801d520 <SD_PowerON>
 801c638:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801c63a:	6a3b      	ldr	r3, [r7, #32]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d00b      	beq.n	801c658 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	2201      	movs	r2, #1
 801c644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c64c:	6a3b      	ldr	r3, [r7, #32]
 801c64e:	431a      	orrs	r2, r3
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801c654:	2301      	movs	r3, #1
 801c656:	e02e      	b.n	801c6b6 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801c658:	6878      	ldr	r0, [r7, #4]
 801c65a:	f000 fea3 	bl	801d3a4 <SD_InitCard>
 801c65e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801c660:	6a3b      	ldr	r3, [r7, #32]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d00b      	beq.n	801c67e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	2201      	movs	r2, #1
 801c66a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c672:	6a3b      	ldr	r3, [r7, #32]
 801c674:	431a      	orrs	r2, r3
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801c67a:	2301      	movs	r3, #1
 801c67c:	e01b      	b.n	801c6b6 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c686:	4618      	mov	r0, r3
 801c688:	f004 fb0e 	bl	8020ca8 <SDMMC_CmdBlockLength>
 801c68c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801c68e:	6a3b      	ldr	r3, [r7, #32]
 801c690:	2b00      	cmp	r3, #0
 801c692:	d00f      	beq.n	801c6b4 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	681b      	ldr	r3, [r3, #0]
 801c698:	4a0b      	ldr	r2, [pc, #44]	; (801c6c8 <HAL_SD_InitCard+0x130>)
 801c69a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c6a0:	6a3b      	ldr	r3, [r7, #32]
 801c6a2:	431a      	orrs	r2, r3
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	2201      	movs	r2, #1
 801c6ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801c6b0:	2301      	movs	r3, #1
 801c6b2:	e000      	b.n	801c6b6 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 801c6b4:	2300      	movs	r3, #0
}
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	3728      	adds	r7, #40	; 0x28
 801c6ba:	46bd      	mov	sp, r7
 801c6bc:	bdb0      	pop	{r4, r5, r7, pc}
 801c6be:	bf00      	nop
 801c6c0:	014f8b59 	.word	0x014f8b59
 801c6c4:	00012110 	.word	0x00012110
 801c6c8:	1fe00fff 	.word	0x1fe00fff

0801c6cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b08c      	sub	sp, #48	; 0x30
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	60f8      	str	r0, [r7, #12]
 801c6d4:	60b9      	str	r1, [r7, #8]
 801c6d6:	607a      	str	r2, [r7, #4]
 801c6d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801c6de:	68bb      	ldr	r3, [r7, #8]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d107      	bne.n	801c6f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801c6f0:	2301      	movs	r3, #1
 801c6f2:	e08d      	b.n	801c810 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c6fa:	b2db      	uxtb	r3, r3
 801c6fc:	2b01      	cmp	r3, #1
 801c6fe:	f040 8086 	bne.w	801c80e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	2200      	movs	r2, #0
 801c706:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801c708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c70a:	683b      	ldr	r3, [r7, #0]
 801c70c:	441a      	add	r2, r3
 801c70e:	68fb      	ldr	r3, [r7, #12]
 801c710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c712:	429a      	cmp	r2, r3
 801c714:	d907      	bls.n	801c726 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c71a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801c722:	2301      	movs	r3, #1
 801c724:	e074      	b.n	801c810 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	2203      	movs	r2, #3
 801c72a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	2200      	movs	r2, #0
 801c734:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	68ba      	ldr	r2, [r7, #8]
 801c73a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 801c73c:	683b      	ldr	r3, [r7, #0]
 801c73e:	025a      	lsls	r2, r3, #9
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c748:	2b01      	cmp	r3, #1
 801c74a:	d002      	beq.n	801c752 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 801c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c74e:	025b      	lsls	r3, r3, #9
 801c750:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801c752:	f04f 33ff 	mov.w	r3, #4294967295
 801c756:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801c758:	683b      	ldr	r3, [r7, #0]
 801c75a:	025b      	lsls	r3, r3, #9
 801c75c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801c75e:	2390      	movs	r3, #144	; 0x90
 801c760:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801c762:	2302      	movs	r3, #2
 801c764:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801c766:	2300      	movs	r3, #0
 801c768:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801c76a:	2300      	movs	r3, #0
 801c76c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	f107 0210 	add.w	r2, r7, #16
 801c776:	4611      	mov	r1, r2
 801c778:	4618      	mov	r0, r3
 801c77a:	f004 fa69 	bl	8020c50 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	68da      	ldr	r2, [r3, #12]
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c78c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	68ba      	ldr	r2, [r7, #8]
 801c794:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	2201      	movs	r2, #1
 801c79c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 801c79e:	683b      	ldr	r3, [r7, #0]
 801c7a0:	2b01      	cmp	r3, #1
 801c7a2:	d90a      	bls.n	801c7ba <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	2282      	movs	r2, #130	; 0x82
 801c7a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	f004 fabf 	bl	8020d34 <SDMMC_CmdReadMultiBlock>
 801c7b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c7b8:	e009      	b.n	801c7ce <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	2281      	movs	r2, #129	; 0x81
 801c7be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c7c6:	4618      	mov	r0, r3
 801c7c8:	f004 fa91 	bl	8020cee <SDMMC_CmdReadSingleBlock>
 801c7cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 801c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d012      	beq.n	801c7fa <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	4a0f      	ldr	r2, [pc, #60]	; (801c818 <HAL_SD_ReadBlocks_DMA+0x14c>)
 801c7da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7e2:	431a      	orrs	r2, r3
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	2201      	movs	r2, #1
 801c7ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 801c7f6:	2301      	movs	r3, #1
 801c7f8:	e00a      	b.n	801c810 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 801c808:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 801c80a:	2300      	movs	r3, #0
 801c80c:	e000      	b.n	801c810 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801c80e:	2302      	movs	r3, #2
  }
}
 801c810:	4618      	mov	r0, r3
 801c812:	3730      	adds	r7, #48	; 0x30
 801c814:	46bd      	mov	sp, r7
 801c816:	bd80      	pop	{r7, pc}
 801c818:	1fe00fff 	.word	0x1fe00fff

0801c81c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801c81c:	b580      	push	{r7, lr}
 801c81e:	b08c      	sub	sp, #48	; 0x30
 801c820:	af00      	add	r7, sp, #0
 801c822:	60f8      	str	r0, [r7, #12]
 801c824:	60b9      	str	r1, [r7, #8]
 801c826:	607a      	str	r2, [r7, #4]
 801c828:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801c82e:	68bb      	ldr	r3, [r7, #8]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d107      	bne.n	801c844 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c838:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801c840:	2301      	movs	r3, #1
 801c842:	e08d      	b.n	801c960 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c84a:	b2db      	uxtb	r3, r3
 801c84c:	2b01      	cmp	r3, #1
 801c84e:	f040 8086 	bne.w	801c95e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	2200      	movs	r2, #0
 801c856:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801c858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c85a:	683b      	ldr	r3, [r7, #0]
 801c85c:	441a      	add	r2, r3
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c862:	429a      	cmp	r2, r3
 801c864:	d907      	bls.n	801c876 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c86a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801c872:	2301      	movs	r3, #1
 801c874:	e074      	b.n	801c960 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	2203      	movs	r2, #3
 801c87a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	2200      	movs	r2, #0
 801c884:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	68ba      	ldr	r2, [r7, #8]
 801c88a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	025a      	lsls	r2, r3, #9
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c898:	2b01      	cmp	r3, #1
 801c89a:	d002      	beq.n	801c8a2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 801c89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c89e:	025b      	lsls	r3, r3, #9
 801c8a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801c8a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c8a6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801c8a8:	683b      	ldr	r3, [r7, #0]
 801c8aa:	025b      	lsls	r3, r3, #9
 801c8ac:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801c8ae:	2390      	movs	r3, #144	; 0x90
 801c8b0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801c8b6:	2300      	movs	r3, #0
 801c8b8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	f107 0210 	add.w	r2, r7, #16
 801c8c6:	4611      	mov	r1, r2
 801c8c8:	4618      	mov	r0, r3
 801c8ca:	f004 f9c1 	bl	8020c50 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	68da      	ldr	r2, [r3, #12]
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c8dc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	68ba      	ldr	r2, [r7, #8]
 801c8e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	2201      	movs	r2, #1
 801c8ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 801c8ee:	683b      	ldr	r3, [r7, #0]
 801c8f0:	2b01      	cmp	r3, #1
 801c8f2:	d90a      	bls.n	801c90a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	22a0      	movs	r2, #160	; 0xa0
 801c8f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c900:	4618      	mov	r0, r3
 801c902:	f004 fa5d 	bl	8020dc0 <SDMMC_CmdWriteMultiBlock>
 801c906:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c908:	e009      	b.n	801c91e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	2290      	movs	r2, #144	; 0x90
 801c90e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c916:	4618      	mov	r0, r3
 801c918:	f004 fa2f 	bl	8020d7a <SDMMC_CmdWriteSingleBlock>
 801c91c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 801c91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c920:	2b00      	cmp	r3, #0
 801c922:	d012      	beq.n	801c94a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	4a0f      	ldr	r2, [pc, #60]	; (801c968 <HAL_SD_WriteBlocks_DMA+0x14c>)
 801c92a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c932:	431a      	orrs	r2, r3
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	2201      	movs	r2, #1
 801c93c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	2200      	movs	r2, #0
 801c944:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 801c946:	2301      	movs	r3, #1
 801c948:	e00a      	b.n	801c960 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 801c958:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801c95a:	2300      	movs	r3, #0
 801c95c:	e000      	b.n	801c960 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801c95e:	2302      	movs	r3, #2
  }
}
 801c960:	4618      	mov	r0, r3
 801c962:	3730      	adds	r7, #48	; 0x30
 801c964:	46bd      	mov	sp, r7
 801c966:	bd80      	pop	{r7, pc}
 801c968:	1fe00fff 	.word	0x1fe00fff

0801c96c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	b084      	sub	sp, #16
 801c970:	af00      	add	r7, sp, #0
 801c972:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c978:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c984:	2b00      	cmp	r3, #0
 801c986:	d008      	beq.n	801c99a <HAL_SD_IRQHandler+0x2e>
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	f003 0308 	and.w	r3, r3, #8
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d003      	beq.n	801c99a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801c992:	6878      	ldr	r0, [r7, #4]
 801c994:	f001 f92a 	bl	801dbec <SD_Read_IT>
 801c998:	e19a      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c9a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	f000 80ac 	beq.w	801cb02 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c9b2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	681b      	ldr	r3, [r3, #0]
 801c9b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	681a      	ldr	r2, [r3, #0]
 801c9be:	4b9d      	ldr	r3, [pc, #628]	; (801cc34 <HAL_SD_IRQHandler+0x2c8>)
 801c9c0:	400b      	ands	r3, r1
 801c9c2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801c9d2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	68da      	ldr	r2, [r3, #12]
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c9e2:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 801c9e4:	68fb      	ldr	r3, [r7, #12]
 801c9e6:	f003 0308 	and.w	r3, r3, #8
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d038      	beq.n	801ca60 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	f003 0302 	and.w	r3, r3, #2
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d104      	bne.n	801ca02 <HAL_SD_IRQHandler+0x96>
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	f003 0320 	and.w	r3, r3, #32
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d011      	beq.n	801ca26 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	4618      	mov	r0, r3
 801ca08:	f004 f9fe 	bl	8020e08 <SDMMC_CmdStopTransfer>
 801ca0c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 801ca0e:	68bb      	ldr	r3, [r7, #8]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d008      	beq.n	801ca26 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ca18:	68bb      	ldr	r3, [r7, #8]
 801ca1a:	431a      	orrs	r2, r3
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801ca20:	6878      	ldr	r0, [r7, #4]
 801ca22:	f000 f959 	bl	801ccd8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	4a83      	ldr	r2, [pc, #524]	; (801cc38 <HAL_SD_IRQHandler+0x2cc>)
 801ca2c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	2201      	movs	r2, #1
 801ca32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	2200      	movs	r2, #0
 801ca3a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	f003 0301 	and.w	r3, r3, #1
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d104      	bne.n	801ca50 <HAL_SD_IRQHandler+0xe4>
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	f003 0302 	and.w	r3, r3, #2
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d003      	beq.n	801ca58 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801ca50:	6878      	ldr	r0, [r7, #4]
 801ca52:	f005 f97d 	bl	8021d50 <HAL_SD_RxCpltCallback>
 801ca56:	e13b      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 801ca58:	6878      	ldr	r0, [r7, #4]
 801ca5a:	f005 f96f 	bl	8021d3c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801ca5e:	e137      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	f000 8132 	beq.w	801ccd0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	2200      	movs	r2, #0
 801ca72:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	2200      	movs	r2, #0
 801ca7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	2200      	movs	r2, #0
 801ca82:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	f003 0302 	and.w	r3, r3, #2
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d104      	bne.n	801ca98 <HAL_SD_IRQHandler+0x12c>
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	f003 0320 	and.w	r3, r3, #32
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d011      	beq.n	801cabc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	f004 f9b3 	bl	8020e08 <SDMMC_CmdStopTransfer>
 801caa2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 801caa4:	68bb      	ldr	r3, [r7, #8]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d008      	beq.n	801cabc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	431a      	orrs	r2, r3
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 801cab6:	6878      	ldr	r0, [r7, #4]
 801cab8:	f000 f90e 	bl	801ccd8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	2201      	movs	r2, #1
 801cac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	2200      	movs	r2, #0
 801cac8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	f003 0310 	and.w	r3, r3, #16
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d104      	bne.n	801cade <HAL_SD_IRQHandler+0x172>
 801cad4:	68fb      	ldr	r3, [r7, #12]
 801cad6:	f003 0320 	and.w	r3, r3, #32
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d002      	beq.n	801cae4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 801cade:	6878      	ldr	r0, [r7, #4]
 801cae0:	f005 f92c 	bl	8021d3c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	f003 0301 	and.w	r3, r3, #1
 801caea:	2b00      	cmp	r3, #0
 801caec:	d105      	bne.n	801cafa <HAL_SD_IRQHandler+0x18e>
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	f003 0302 	and.w	r3, r3, #2
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	f000 80eb 	beq.w	801ccd0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 801cafa:	6878      	ldr	r0, [r7, #4]
 801cafc:	f005 f928 	bl	8021d50 <HAL_SD_RxCpltCallback>
}
 801cb00:	e0e6      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d008      	beq.n	801cb22 <HAL_SD_IRQHandler+0x1b6>
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	f003 0308 	and.w	r3, r3, #8
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d003      	beq.n	801cb22 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 801cb1a:	6878      	ldr	r0, [r7, #4]
 801cb1c:	f001 f8ac 	bl	801dc78 <SD_Write_IT>
 801cb20:	e0d6      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb28:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	f000 80a2 	beq.w	801cc76 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb38:	f003 0302 	and.w	r3, r3, #2
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d005      	beq.n	801cb4c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb44:	f043 0202 	orr.w	r2, r3, #2
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb52:	f003 0308 	and.w	r3, r3, #8
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d005      	beq.n	801cb66 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb5e:	f043 0208 	orr.w	r2, r3, #8
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb6c:	f003 0320 	and.w	r3, r3, #32
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d005      	beq.n	801cb80 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb78:	f043 0220 	orr.w	r2, r3, #32
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb86:	f003 0310 	and.w	r3, r3, #16
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d005      	beq.n	801cb9a <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb92:	f043 0210 	orr.w	r2, r3, #16
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	4a26      	ldr	r2, [pc, #152]	; (801cc38 <HAL_SD_IRQHandler+0x2cc>)
 801cba0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 801cbb0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	68da      	ldr	r2, [r3, #12]
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cbc0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cbd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	68da      	ldr	r2, [r3, #12]
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801cbe0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f004 f90e 	bl	8020e08 <SDMMC_CmdStopTransfer>
 801cbec:	4602      	mov	r2, r0
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbf2:	431a      	orrs	r2, r3
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	68da      	ldr	r2, [r3, #12]
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801cc06:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801cc10:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	f003 0308 	and.w	r3, r3, #8
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d00f      	beq.n	801cc3c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	2201      	movs	r2, #1
 801cc20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	2200      	movs	r2, #0
 801cc28:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 801cc2a:	6878      	ldr	r0, [r7, #4]
 801cc2c:	f000 f854 	bl	801ccd8 <HAL_SD_ErrorCallback>
}
 801cc30:	e04e      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
 801cc32:	bf00      	nop
 801cc34:	ffff3ec5 	.word	0xffff3ec5
 801cc38:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d044      	beq.n	801ccd0 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d040      	beq.n	801ccd0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801cc5c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	2200      	movs	r2, #0
 801cc64:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	2201      	movs	r2, #1
 801cc6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 801cc6e:	6878      	ldr	r0, [r7, #4]
 801cc70:	f000 f832 	bl	801ccd8 <HAL_SD_ErrorCallback>
}
 801cc74:	e02c      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d025      	beq.n	801ccd0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cc8c:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc94:	f003 0304 	and.w	r3, r3, #4
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d10c      	bne.n	801ccb6 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	f003 0320 	and.w	r3, r3, #32
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d003      	beq.n	801ccae <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 801cca6:	6878      	ldr	r0, [r7, #4]
 801cca8:	f001 f84e 	bl	801dd48 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 801ccac:	e010      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 801ccae:	6878      	ldr	r0, [r7, #4]
 801ccb0:	f001 f836 	bl	801dd20 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 801ccb4:	e00c      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	f003 0320 	and.w	r3, r3, #32
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d003      	beq.n	801ccc8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 801ccc0:	6878      	ldr	r0, [r7, #4]
 801ccc2:	f001 f837 	bl	801dd34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 801ccc6:	e003      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 801ccc8:	6878      	ldr	r0, [r7, #4]
 801ccca:	f001 f81f 	bl	801dd0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 801ccce:	e7ff      	b.n	801ccd0 <HAL_SD_IRQHandler+0x364>
 801ccd0:	bf00      	nop
 801ccd2:	3710      	adds	r7, #16
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bd80      	pop	{r7, pc}

0801ccd8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 801ccd8:	b480      	push	{r7}
 801ccda:	b083      	sub	sp, #12
 801ccdc:	af00      	add	r7, sp, #0
 801ccde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801cce0:	bf00      	nop
 801cce2:	370c      	adds	r7, #12
 801cce4:	46bd      	mov	sp, r7
 801cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccea:	4770      	bx	lr

0801ccec <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 801ccec:	b480      	push	{r7}
 801ccee:	b083      	sub	sp, #12
 801ccf0:	af00      	add	r7, sp, #0
 801ccf2:	4603      	mov	r3, r0
 801ccf4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 801ccf6:	bf00      	nop
 801ccf8:	370c      	adds	r7, #12
 801ccfa:	46bd      	mov	sp, r7
 801ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd00:	4770      	bx	lr
	...

0801cd04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801cd04:	b480      	push	{r7}
 801cd06:	b083      	sub	sp, #12
 801cd08:	af00      	add	r7, sp, #0
 801cd0a:	6078      	str	r0, [r7, #4]
 801cd0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cd12:	0f9b      	lsrs	r3, r3, #30
 801cd14:	b2da      	uxtb	r2, r3
 801cd16:	683b      	ldr	r3, [r7, #0]
 801cd18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cd1e:	0e9b      	lsrs	r3, r3, #26
 801cd20:	b2db      	uxtb	r3, r3
 801cd22:	f003 030f 	and.w	r3, r3, #15
 801cd26:	b2da      	uxtb	r2, r3
 801cd28:	683b      	ldr	r3, [r7, #0]
 801cd2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cd30:	0e1b      	lsrs	r3, r3, #24
 801cd32:	b2db      	uxtb	r3, r3
 801cd34:	f003 0303 	and.w	r3, r3, #3
 801cd38:	b2da      	uxtb	r2, r3
 801cd3a:	683b      	ldr	r3, [r7, #0]
 801cd3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cd42:	0c1b      	lsrs	r3, r3, #16
 801cd44:	b2da      	uxtb	r2, r3
 801cd46:	683b      	ldr	r3, [r7, #0]
 801cd48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cd4e:	0a1b      	lsrs	r3, r3, #8
 801cd50:	b2da      	uxtb	r2, r3
 801cd52:	683b      	ldr	r3, [r7, #0]
 801cd54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cd5a:	b2da      	uxtb	r2, r3
 801cd5c:	683b      	ldr	r3, [r7, #0]
 801cd5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cd64:	0d1b      	lsrs	r3, r3, #20
 801cd66:	b29a      	uxth	r2, r3
 801cd68:	683b      	ldr	r3, [r7, #0]
 801cd6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cd70:	0c1b      	lsrs	r3, r3, #16
 801cd72:	b2db      	uxtb	r3, r3
 801cd74:	f003 030f 	and.w	r3, r3, #15
 801cd78:	b2da      	uxtb	r2, r3
 801cd7a:	683b      	ldr	r3, [r7, #0]
 801cd7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cd82:	0bdb      	lsrs	r3, r3, #15
 801cd84:	b2db      	uxtb	r3, r3
 801cd86:	f003 0301 	and.w	r3, r3, #1
 801cd8a:	b2da      	uxtb	r2, r3
 801cd8c:	683b      	ldr	r3, [r7, #0]
 801cd8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cd94:	0b9b      	lsrs	r3, r3, #14
 801cd96:	b2db      	uxtb	r3, r3
 801cd98:	f003 0301 	and.w	r3, r3, #1
 801cd9c:	b2da      	uxtb	r2, r3
 801cd9e:	683b      	ldr	r3, [r7, #0]
 801cda0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cda6:	0b5b      	lsrs	r3, r3, #13
 801cda8:	b2db      	uxtb	r3, r3
 801cdaa:	f003 0301 	and.w	r3, r3, #1
 801cdae:	b2da      	uxtb	r2, r3
 801cdb0:	683b      	ldr	r3, [r7, #0]
 801cdb2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cdb8:	0b1b      	lsrs	r3, r3, #12
 801cdba:	b2db      	uxtb	r3, r3
 801cdbc:	f003 0301 	and.w	r3, r3, #1
 801cdc0:	b2da      	uxtb	r2, r3
 801cdc2:	683b      	ldr	r3, [r7, #0]
 801cdc4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801cdc6:	683b      	ldr	r3, [r7, #0]
 801cdc8:	2200      	movs	r2, #0
 801cdca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d163      	bne.n	801ce9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cdd8:	009a      	lsls	r2, r3, #2
 801cdda:	f640 73fc 	movw	r3, #4092	; 0xffc
 801cdde:	4013      	ands	r3, r2
 801cde0:	687a      	ldr	r2, [r7, #4]
 801cde2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801cde4:	0f92      	lsrs	r2, r2, #30
 801cde6:	431a      	orrs	r2, r3
 801cde8:	683b      	ldr	r3, [r7, #0]
 801cdea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cdf0:	0edb      	lsrs	r3, r3, #27
 801cdf2:	b2db      	uxtb	r3, r3
 801cdf4:	f003 0307 	and.w	r3, r3, #7
 801cdf8:	b2da      	uxtb	r2, r3
 801cdfa:	683b      	ldr	r3, [r7, #0]
 801cdfc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ce02:	0e1b      	lsrs	r3, r3, #24
 801ce04:	b2db      	uxtb	r3, r3
 801ce06:	f003 0307 	and.w	r3, r3, #7
 801ce0a:	b2da      	uxtb	r2, r3
 801ce0c:	683b      	ldr	r3, [r7, #0]
 801ce0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ce14:	0d5b      	lsrs	r3, r3, #21
 801ce16:	b2db      	uxtb	r3, r3
 801ce18:	f003 0307 	and.w	r3, r3, #7
 801ce1c:	b2da      	uxtb	r2, r3
 801ce1e:	683b      	ldr	r3, [r7, #0]
 801ce20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ce26:	0c9b      	lsrs	r3, r3, #18
 801ce28:	b2db      	uxtb	r3, r3
 801ce2a:	f003 0307 	and.w	r3, r3, #7
 801ce2e:	b2da      	uxtb	r2, r3
 801ce30:	683b      	ldr	r3, [r7, #0]
 801ce32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ce38:	0bdb      	lsrs	r3, r3, #15
 801ce3a:	b2db      	uxtb	r3, r3
 801ce3c:	f003 0307 	and.w	r3, r3, #7
 801ce40:	b2da      	uxtb	r2, r3
 801ce42:	683b      	ldr	r3, [r7, #0]
 801ce44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801ce46:	683b      	ldr	r3, [r7, #0]
 801ce48:	691b      	ldr	r3, [r3, #16]
 801ce4a:	1c5a      	adds	r2, r3, #1
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801ce50:	683b      	ldr	r3, [r7, #0]
 801ce52:	7e1b      	ldrb	r3, [r3, #24]
 801ce54:	b2db      	uxtb	r3, r3
 801ce56:	f003 0307 	and.w	r3, r3, #7
 801ce5a:	3302      	adds	r3, #2
 801ce5c:	2201      	movs	r2, #1
 801ce5e:	fa02 f303 	lsl.w	r3, r2, r3
 801ce62:	687a      	ldr	r2, [r7, #4]
 801ce64:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801ce66:	fb02 f203 	mul.w	r2, r2, r3
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801ce6e:	683b      	ldr	r3, [r7, #0]
 801ce70:	7a1b      	ldrb	r3, [r3, #8]
 801ce72:	b2db      	uxtb	r3, r3
 801ce74:	f003 030f 	and.w	r3, r3, #15
 801ce78:	2201      	movs	r2, #1
 801ce7a:	409a      	lsls	r2, r3
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce84:	687a      	ldr	r2, [r7, #4]
 801ce86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801ce88:	0a52      	lsrs	r2, r2, #9
 801ce8a:	fb02 f203 	mul.w	r2, r2, r3
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ce98:	659a      	str	r2, [r3, #88]	; 0x58
 801ce9a:	e031      	b.n	801cf00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cea0:	2b01      	cmp	r3, #1
 801cea2:	d11d      	bne.n	801cee0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cea8:	041b      	lsls	r3, r3, #16
 801ceaa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ceb2:	0c1b      	lsrs	r3, r3, #16
 801ceb4:	431a      	orrs	r2, r3
 801ceb6:	683b      	ldr	r3, [r7, #0]
 801ceb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801ceba:	683b      	ldr	r3, [r7, #0]
 801cebc:	691b      	ldr	r3, [r3, #16]
 801cebe:	3301      	adds	r3, #1
 801cec0:	029a      	lsls	r2, r3, #10
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ced4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	659a      	str	r2, [r3, #88]	; 0x58
 801cede:	e00f      	b.n	801cf00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	4a58      	ldr	r2, [pc, #352]	; (801d048 <HAL_SD_GetCardCSD+0x344>)
 801cee6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ceec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	2201      	movs	r2, #1
 801cef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801cefc:	2301      	movs	r3, #1
 801cefe:	e09d      	b.n	801d03c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cf04:	0b9b      	lsrs	r3, r3, #14
 801cf06:	b2db      	uxtb	r3, r3
 801cf08:	f003 0301 	and.w	r3, r3, #1
 801cf0c:	b2da      	uxtb	r2, r3
 801cf0e:	683b      	ldr	r3, [r7, #0]
 801cf10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cf16:	09db      	lsrs	r3, r3, #7
 801cf18:	b2db      	uxtb	r3, r3
 801cf1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cf1e:	b2da      	uxtb	r2, r3
 801cf20:	683b      	ldr	r3, [r7, #0]
 801cf22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cf28:	b2db      	uxtb	r3, r3
 801cf2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cf2e:	b2da      	uxtb	r2, r3
 801cf30:	683b      	ldr	r3, [r7, #0]
 801cf32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf38:	0fdb      	lsrs	r3, r3, #31
 801cf3a:	b2da      	uxtb	r2, r3
 801cf3c:	683b      	ldr	r3, [r7, #0]
 801cf3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf44:	0f5b      	lsrs	r3, r3, #29
 801cf46:	b2db      	uxtb	r3, r3
 801cf48:	f003 0303 	and.w	r3, r3, #3
 801cf4c:	b2da      	uxtb	r2, r3
 801cf4e:	683b      	ldr	r3, [r7, #0]
 801cf50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf56:	0e9b      	lsrs	r3, r3, #26
 801cf58:	b2db      	uxtb	r3, r3
 801cf5a:	f003 0307 	and.w	r3, r3, #7
 801cf5e:	b2da      	uxtb	r2, r3
 801cf60:	683b      	ldr	r3, [r7, #0]
 801cf62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf68:	0d9b      	lsrs	r3, r3, #22
 801cf6a:	b2db      	uxtb	r3, r3
 801cf6c:	f003 030f 	and.w	r3, r3, #15
 801cf70:	b2da      	uxtb	r2, r3
 801cf72:	683b      	ldr	r3, [r7, #0]
 801cf74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf7a:	0d5b      	lsrs	r3, r3, #21
 801cf7c:	b2db      	uxtb	r3, r3
 801cf7e:	f003 0301 	and.w	r3, r3, #1
 801cf82:	b2da      	uxtb	r2, r3
 801cf84:	683b      	ldr	r3, [r7, #0]
 801cf86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801cf8a:	683b      	ldr	r3, [r7, #0]
 801cf8c:	2200      	movs	r2, #0
 801cf8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf96:	0c1b      	lsrs	r3, r3, #16
 801cf98:	b2db      	uxtb	r3, r3
 801cf9a:	f003 0301 	and.w	r3, r3, #1
 801cf9e:	b2da      	uxtb	r2, r3
 801cfa0:	683b      	ldr	r3, [r7, #0]
 801cfa2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cfaa:	0bdb      	lsrs	r3, r3, #15
 801cfac:	b2db      	uxtb	r3, r3
 801cfae:	f003 0301 	and.w	r3, r3, #1
 801cfb2:	b2da      	uxtb	r2, r3
 801cfb4:	683b      	ldr	r3, [r7, #0]
 801cfb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cfbe:	0b9b      	lsrs	r3, r3, #14
 801cfc0:	b2db      	uxtb	r3, r3
 801cfc2:	f003 0301 	and.w	r3, r3, #1
 801cfc6:	b2da      	uxtb	r2, r3
 801cfc8:	683b      	ldr	r3, [r7, #0]
 801cfca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cfd2:	0b5b      	lsrs	r3, r3, #13
 801cfd4:	b2db      	uxtb	r3, r3
 801cfd6:	f003 0301 	and.w	r3, r3, #1
 801cfda:	b2da      	uxtb	r2, r3
 801cfdc:	683b      	ldr	r3, [r7, #0]
 801cfde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cfe6:	0b1b      	lsrs	r3, r3, #12
 801cfe8:	b2db      	uxtb	r3, r3
 801cfea:	f003 0301 	and.w	r3, r3, #1
 801cfee:	b2da      	uxtb	r2, r3
 801cff0:	683b      	ldr	r3, [r7, #0]
 801cff2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cffa:	0a9b      	lsrs	r3, r3, #10
 801cffc:	b2db      	uxtb	r3, r3
 801cffe:	f003 0303 	and.w	r3, r3, #3
 801d002:	b2da      	uxtb	r2, r3
 801d004:	683b      	ldr	r3, [r7, #0]
 801d006:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d00e:	0a1b      	lsrs	r3, r3, #8
 801d010:	b2db      	uxtb	r3, r3
 801d012:	f003 0303 	and.w	r3, r3, #3
 801d016:	b2da      	uxtb	r2, r3
 801d018:	683b      	ldr	r3, [r7, #0]
 801d01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d022:	085b      	lsrs	r3, r3, #1
 801d024:	b2db      	uxtb	r3, r3
 801d026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d02a:	b2da      	uxtb	r2, r3
 801d02c:	683b      	ldr	r3, [r7, #0]
 801d02e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801d032:	683b      	ldr	r3, [r7, #0]
 801d034:	2201      	movs	r2, #1
 801d036:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 801d03a:	2300      	movs	r3, #0
}
 801d03c:	4618      	mov	r0, r3
 801d03e:	370c      	adds	r7, #12
 801d040:	46bd      	mov	sp, r7
 801d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d046:	4770      	bx	lr
 801d048:	1fe00fff 	.word	0x1fe00fff

0801d04c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 801d04c:	b580      	push	{r7, lr}
 801d04e:	b094      	sub	sp, #80	; 0x50
 801d050:	af00      	add	r7, sp, #0
 801d052:	6078      	str	r0, [r7, #4]
 801d054:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801d056:	2300      	movs	r3, #0
 801d058:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 801d05c:	f107 0308 	add.w	r3, r7, #8
 801d060:	4619      	mov	r1, r3
 801d062:	6878      	ldr	r0, [r7, #4]
 801d064:	f000 fb64 	bl	801d730 <SD_SendSDStatus>
 801d068:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 801d06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d011      	beq.n	801d094 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	4a4f      	ldr	r2, [pc, #316]	; (801d1b4 <HAL_SD_GetCardStatus+0x168>)
 801d076:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d07c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d07e:	431a      	orrs	r2, r3
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	2201      	movs	r2, #1
 801d088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 801d08c:	2301      	movs	r3, #1
 801d08e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801d092:	e070      	b.n	801d176 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801d094:	68bb      	ldr	r3, [r7, #8]
 801d096:	099b      	lsrs	r3, r3, #6
 801d098:	b2db      	uxtb	r3, r3
 801d09a:	f003 0303 	and.w	r3, r3, #3
 801d09e:	b2da      	uxtb	r2, r3
 801d0a0:	683b      	ldr	r3, [r7, #0]
 801d0a2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 801d0a4:	68bb      	ldr	r3, [r7, #8]
 801d0a6:	095b      	lsrs	r3, r3, #5
 801d0a8:	b2db      	uxtb	r3, r3
 801d0aa:	f003 0301 	and.w	r3, r3, #1
 801d0ae:	b2da      	uxtb	r2, r3
 801d0b0:	683b      	ldr	r3, [r7, #0]
 801d0b2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801d0b4:	68bb      	ldr	r3, [r7, #8]
 801d0b6:	0a1b      	lsrs	r3, r3, #8
 801d0b8:	b29b      	uxth	r3, r3
 801d0ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801d0be:	b29a      	uxth	r2, r3
 801d0c0:	68bb      	ldr	r3, [r7, #8]
 801d0c2:	0e1b      	lsrs	r3, r3, #24
 801d0c4:	b29b      	uxth	r3, r3
 801d0c6:	4313      	orrs	r3, r2
 801d0c8:	b29a      	uxth	r2, r3
 801d0ca:	683b      	ldr	r3, [r7, #0]
 801d0cc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	061a      	lsls	r2, r3, #24
 801d0d2:	68fb      	ldr	r3, [r7, #12]
 801d0d4:	021b      	lsls	r3, r3, #8
 801d0d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801d0da:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801d0dc:	68fb      	ldr	r3, [r7, #12]
 801d0de:	0a1b      	lsrs	r3, r3, #8
 801d0e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801d0e4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	0e1b      	lsrs	r3, r3, #24
 801d0ea:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801d0ec:	683b      	ldr	r3, [r7, #0]
 801d0ee:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 801d0f0:	693b      	ldr	r3, [r7, #16]
 801d0f2:	b2da      	uxtb	r2, r3
 801d0f4:	683b      	ldr	r3, [r7, #0]
 801d0f6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 801d0f8:	693b      	ldr	r3, [r7, #16]
 801d0fa:	0a1b      	lsrs	r3, r3, #8
 801d0fc:	b2da      	uxtb	r2, r3
 801d0fe:	683b      	ldr	r3, [r7, #0]
 801d100:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801d102:	693b      	ldr	r3, [r7, #16]
 801d104:	0d1b      	lsrs	r3, r3, #20
 801d106:	b2db      	uxtb	r3, r3
 801d108:	f003 030f 	and.w	r3, r3, #15
 801d10c:	b2da      	uxtb	r2, r3
 801d10e:	683b      	ldr	r3, [r7, #0]
 801d110:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801d112:	693b      	ldr	r3, [r7, #16]
 801d114:	0c1b      	lsrs	r3, r3, #16
 801d116:	b29b      	uxth	r3, r3
 801d118:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801d11c:	b29a      	uxth	r2, r3
 801d11e:	697b      	ldr	r3, [r7, #20]
 801d120:	b29b      	uxth	r3, r3
 801d122:	b2db      	uxtb	r3, r3
 801d124:	b29b      	uxth	r3, r3
 801d126:	4313      	orrs	r3, r2
 801d128:	b29a      	uxth	r2, r3
 801d12a:	683b      	ldr	r3, [r7, #0]
 801d12c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801d12e:	697b      	ldr	r3, [r7, #20]
 801d130:	0a9b      	lsrs	r3, r3, #10
 801d132:	b2db      	uxtb	r3, r3
 801d134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d138:	b2da      	uxtb	r2, r3
 801d13a:	683b      	ldr	r3, [r7, #0]
 801d13c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801d13e:	697b      	ldr	r3, [r7, #20]
 801d140:	0a1b      	lsrs	r3, r3, #8
 801d142:	b2db      	uxtb	r3, r3
 801d144:	f003 0303 	and.w	r3, r3, #3
 801d148:	b2da      	uxtb	r2, r3
 801d14a:	683b      	ldr	r3, [r7, #0]
 801d14c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801d14e:	697b      	ldr	r3, [r7, #20]
 801d150:	091b      	lsrs	r3, r3, #4
 801d152:	b2db      	uxtb	r3, r3
 801d154:	f003 030f 	and.w	r3, r3, #15
 801d158:	b2da      	uxtb	r2, r3
 801d15a:	683b      	ldr	r3, [r7, #0]
 801d15c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801d15e:	697b      	ldr	r3, [r7, #20]
 801d160:	b2db      	uxtb	r3, r3
 801d162:	f003 030f 	and.w	r3, r3, #15
 801d166:	b2da      	uxtb	r2, r3
 801d168:	683b      	ldr	r3, [r7, #0]
 801d16a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 801d16c:	69bb      	ldr	r3, [r7, #24]
 801d16e:	0e1b      	lsrs	r3, r3, #24
 801d170:	b2da      	uxtb	r2, r3
 801d172:	683b      	ldr	r3, [r7, #0]
 801d174:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d17e:	4618      	mov	r0, r3
 801d180:	f003 fd92 	bl	8020ca8 <SDMMC_CmdBlockLength>
 801d184:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 801d186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d00d      	beq.n	801d1a8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	4a08      	ldr	r2, [pc, #32]	; (801d1b4 <HAL_SD_GetCardStatus+0x168>)
 801d192:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d198:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	2201      	movs	r2, #1
 801d19e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 801d1a2:	2301      	movs	r3, #1
 801d1a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 801d1a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	3750      	adds	r7, #80	; 0x50
 801d1b0:	46bd      	mov	sp, r7
 801d1b2:	bd80      	pop	{r7, pc}
 801d1b4:	1fe00fff 	.word	0x1fe00fff

0801d1b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 801d1b8:	b480      	push	{r7}
 801d1ba:	b083      	sub	sp, #12
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
 801d1c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d1c6:	683b      	ldr	r3, [r7, #0]
 801d1c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d1ce:	683b      	ldr	r3, [r7, #0]
 801d1d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d1d6:	683b      	ldr	r3, [r7, #0]
 801d1d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801d1de:	683b      	ldr	r3, [r7, #0]
 801d1e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d1e6:	683b      	ldr	r3, [r7, #0]
 801d1e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d1ee:	683b      	ldr	r3, [r7, #0]
 801d1f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d1f6:	683b      	ldr	r3, [r7, #0]
 801d1f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801d1fe:	683b      	ldr	r3, [r7, #0]
 801d200:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801d202:	2300      	movs	r3, #0
}
 801d204:	4618      	mov	r0, r3
 801d206:	370c      	adds	r7, #12
 801d208:	46bd      	mov	sp, r7
 801d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d20e:	4770      	bx	lr

0801d210 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 801d210:	b5b0      	push	{r4, r5, r7, lr}
 801d212:	b08e      	sub	sp, #56	; 0x38
 801d214:	af04      	add	r7, sp, #16
 801d216:	6078      	str	r0, [r7, #4]
 801d218:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801d21a:	2300      	movs	r3, #0
 801d21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	2203      	movs	r2, #3
 801d224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d22c:	2b03      	cmp	r3, #3
 801d22e:	d02e      	beq.n	801d28e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 801d230:	683b      	ldr	r3, [r7, #0]
 801d232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d236:	d106      	bne.n	801d246 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d23c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	639a      	str	r2, [r3, #56]	; 0x38
 801d244:	e029      	b.n	801d29a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801d246:	683b      	ldr	r3, [r7, #0]
 801d248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d24c:	d10a      	bne.n	801d264 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801d24e:	6878      	ldr	r0, [r7, #4]
 801d250:	f000 fb66 	bl	801d920 <SD_WideBus_Enable>
 801d254:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d25a:	6a3b      	ldr	r3, [r7, #32]
 801d25c:	431a      	orrs	r2, r3
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	639a      	str	r2, [r3, #56]	; 0x38
 801d262:	e01a      	b.n	801d29a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 801d264:	683b      	ldr	r3, [r7, #0]
 801d266:	2b00      	cmp	r3, #0
 801d268:	d10a      	bne.n	801d280 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801d26a:	6878      	ldr	r0, [r7, #4]
 801d26c:	f000 fba3 	bl	801d9b6 <SD_WideBus_Disable>
 801d270:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d276:	6a3b      	ldr	r3, [r7, #32]
 801d278:	431a      	orrs	r2, r3
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	639a      	str	r2, [r3, #56]	; 0x38
 801d27e:	e00c      	b.n	801d29a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d284:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	639a      	str	r2, [r3, #56]	; 0x38
 801d28c:	e005      	b.n	801d29a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d292:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d007      	beq.n	801d2b2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	4a2e      	ldr	r2, [pc, #184]	; (801d360 <HAL_SD_ConfigWideBusOperation+0x150>)
 801d2a8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801d2aa:	2301      	movs	r3, #1
 801d2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d2b0:	e034      	b.n	801d31c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	685b      	ldr	r3, [r3, #4]
 801d2b6:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	689b      	ldr	r3, [r3, #8]
 801d2bc:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 801d2be:	683b      	ldr	r3, [r7, #0]
 801d2c0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	691b      	ldr	r3, [r3, #16]
 801d2c6:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	695b      	ldr	r3, [r3, #20]
 801d2cc:	2b03      	cmp	r3, #3
 801d2ce:	d903      	bls.n	801d2d8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	695b      	ldr	r3, [r3, #20]
 801d2d4:	61bb      	str	r3, [r7, #24]
 801d2d6:	e012      	b.n	801d2fe <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d2dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d2e0:	d103      	bne.n	801d2ea <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	695b      	ldr	r3, [r3, #20]
 801d2e6:	61bb      	str	r3, [r7, #24]
 801d2e8:	e009      	b.n	801d2fe <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d2f2:	d102      	bne.n	801d2fa <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 801d2f4:	2302      	movs	r3, #2
 801d2f6:	61bb      	str	r3, [r7, #24]
 801d2f8:	e001      	b.n	801d2fe <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 801d2fa:	2304      	movs	r3, #4
 801d2fc:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	681d      	ldr	r5, [r3, #0]
 801d302:	466c      	mov	r4, sp
 801d304:	f107 0314 	add.w	r3, r7, #20
 801d308:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d30c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801d310:	f107 0308 	add.w	r3, r7, #8
 801d314:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d316:	4628      	mov	r0, r5
 801d318:	f003 fbe8 	bl	8020aec <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d324:	4618      	mov	r0, r3
 801d326:	f003 fcbf 	bl	8020ca8 <SDMMC_CmdBlockLength>
 801d32a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d32c:	6a3b      	ldr	r3, [r7, #32]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d00c      	beq.n	801d34c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	4a0a      	ldr	r2, [pc, #40]	; (801d360 <HAL_SD_ConfigWideBusOperation+0x150>)
 801d338:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d33e:	6a3b      	ldr	r3, [r7, #32]
 801d340:	431a      	orrs	r2, r3
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801d346:	2301      	movs	r3, #1
 801d348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	2201      	movs	r2, #1
 801d350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 801d354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801d358:	4618      	mov	r0, r3
 801d35a:	3728      	adds	r7, #40	; 0x28
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bdb0      	pop	{r4, r5, r7, pc}
 801d360:	1fe00fff 	.word	0x1fe00fff

0801d364 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801d364:	b580      	push	{r7, lr}
 801d366:	b086      	sub	sp, #24
 801d368:	af00      	add	r7, sp, #0
 801d36a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801d36c:	2300      	movs	r3, #0
 801d36e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 801d370:	f107 030c 	add.w	r3, r7, #12
 801d374:	4619      	mov	r1, r3
 801d376:	6878      	ldr	r0, [r7, #4]
 801d378:	f000 faaa 	bl	801d8d0 <SD_SendStatus>
 801d37c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d37e:	697b      	ldr	r3, [r7, #20]
 801d380:	2b00      	cmp	r3, #0
 801d382:	d005      	beq.n	801d390 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d388:	697b      	ldr	r3, [r7, #20]
 801d38a:	431a      	orrs	r2, r3
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	0a5b      	lsrs	r3, r3, #9
 801d394:	f003 030f 	and.w	r3, r3, #15
 801d398:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801d39a:	693b      	ldr	r3, [r7, #16]
}
 801d39c:	4618      	mov	r0, r3
 801d39e:	3718      	adds	r7, #24
 801d3a0:	46bd      	mov	sp, r7
 801d3a2:	bd80      	pop	{r7, pc}

0801d3a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801d3a4:	b590      	push	{r4, r7, lr}
 801d3a6:	b091      	sub	sp, #68	; 0x44
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 801d3ac:	2301      	movs	r3, #1
 801d3ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	4618      	mov	r0, r3
 801d3b6:	f003 fbf2 	bl	8020b9e <SDMMC_GetPowerState>
 801d3ba:	4603      	mov	r3, r0
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d102      	bne.n	801d3c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801d3c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801d3c4:	e0a8      	b.n	801d518 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d3ca:	2b03      	cmp	r3, #3
 801d3cc:	d02e      	beq.n	801d42c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f003 fe3e 	bl	8021054 <SDMMC_CmdSendCID>
 801d3d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801d3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d001      	beq.n	801d3e4 <SD_InitCard+0x40>
    {
      return errorstate;
 801d3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d3e2:	e099      	b.n	801d518 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	2100      	movs	r1, #0
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	f003 fc1d 	bl	8020c2a <SDMMC_GetResponse>
 801d3f0:	4602      	mov	r2, r0
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	2104      	movs	r1, #4
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	f003 fc14 	bl	8020c2a <SDMMC_GetResponse>
 801d402:	4602      	mov	r2, r0
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	2108      	movs	r1, #8
 801d40e:	4618      	mov	r0, r3
 801d410:	f003 fc0b 	bl	8020c2a <SDMMC_GetResponse>
 801d414:	4602      	mov	r2, r0
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	210c      	movs	r1, #12
 801d420:	4618      	mov	r0, r3
 801d422:	f003 fc02 	bl	8020c2a <SDMMC_GetResponse>
 801d426:	4602      	mov	r2, r0
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d430:	2b03      	cmp	r3, #3
 801d432:	d00d      	beq.n	801d450 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	f107 020e 	add.w	r2, r7, #14
 801d43c:	4611      	mov	r1, r2
 801d43e:	4618      	mov	r0, r3
 801d440:	f003 fe47 	bl	80210d2 <SDMMC_CmdSetRelAdd>
 801d444:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801d446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d001      	beq.n	801d450 <SD_InitCard+0xac>
    {
      return errorstate;
 801d44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d44e:	e063      	b.n	801d518 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d454:	2b03      	cmp	r3, #3
 801d456:	d036      	beq.n	801d4c6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801d458:	89fb      	ldrh	r3, [r7, #14]
 801d45a:	461a      	mov	r2, r3
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	681a      	ldr	r2, [r3, #0]
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d468:	041b      	lsls	r3, r3, #16
 801d46a:	4619      	mov	r1, r3
 801d46c:	4610      	mov	r0, r2
 801d46e:	f003 fe10 	bl	8021092 <SDMMC_CmdSendCSD>
 801d472:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801d474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d476:	2b00      	cmp	r3, #0
 801d478:	d001      	beq.n	801d47e <SD_InitCard+0xda>
    {
      return errorstate;
 801d47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d47c:	e04c      	b.n	801d518 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	2100      	movs	r1, #0
 801d484:	4618      	mov	r0, r3
 801d486:	f003 fbd0 	bl	8020c2a <SDMMC_GetResponse>
 801d48a:	4602      	mov	r2, r0
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	2104      	movs	r1, #4
 801d496:	4618      	mov	r0, r3
 801d498:	f003 fbc7 	bl	8020c2a <SDMMC_GetResponse>
 801d49c:	4602      	mov	r2, r0
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	2108      	movs	r1, #8
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	f003 fbbe 	bl	8020c2a <SDMMC_GetResponse>
 801d4ae:	4602      	mov	r2, r0
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	210c      	movs	r1, #12
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f003 fbb5 	bl	8020c2a <SDMMC_GetResponse>
 801d4c0:	4602      	mov	r2, r0
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	2104      	movs	r1, #4
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	f003 fbac 	bl	8020c2a <SDMMC_GetResponse>
 801d4d2:	4603      	mov	r3, r0
 801d4d4:	0d1a      	lsrs	r2, r3, #20
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801d4da:	f107 0310 	add.w	r3, r7, #16
 801d4de:	4619      	mov	r1, r3
 801d4e0:	6878      	ldr	r0, [r7, #4]
 801d4e2:	f7ff fc0f 	bl	801cd04 <HAL_SD_GetCardCSD>
 801d4e6:	4603      	mov	r3, r0
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d002      	beq.n	801d4f2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801d4ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d4f0:	e012      	b.n	801d518 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	6819      	ldr	r1, [r3, #0]
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d4fa:	041b      	lsls	r3, r3, #16
 801d4fc:	f04f 0400 	mov.w	r4, #0
 801d500:	461a      	mov	r2, r3
 801d502:	4623      	mov	r3, r4
 801d504:	4608      	mov	r0, r1
 801d506:	f003 fcbb 	bl	8020e80 <SDMMC_CmdSelDesel>
 801d50a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 801d50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d001      	beq.n	801d516 <SD_InitCard+0x172>
  {
    return errorstate;
 801d512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d514:	e000      	b.n	801d518 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801d516:	2300      	movs	r3, #0
}
 801d518:	4618      	mov	r0, r3
 801d51a:	3744      	adds	r7, #68	; 0x44
 801d51c:	46bd      	mov	sp, r7
 801d51e:	bd90      	pop	{r4, r7, pc}

0801d520 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801d520:	b580      	push	{r7, lr}
 801d522:	b088      	sub	sp, #32
 801d524:	af00      	add	r7, sp, #0
 801d526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801d528:	2300      	movs	r3, #0
 801d52a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 801d52c:	2300      	movs	r3, #0
 801d52e:	61fb      	str	r3, [r7, #28]
 801d530:	2300      	movs	r3, #0
 801d532:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 801d534:	f7f5 fd90 	bl	8013058 <HAL_GetTick>
 801d538:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	681b      	ldr	r3, [r3, #0]
 801d53e:	4618      	mov	r0, r3
 801d540:	f003 fcc2 	bl	8020ec8 <SDMMC_CmdGoIdleState>
 801d544:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d546:	693b      	ldr	r3, [r7, #16]
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d001      	beq.n	801d550 <SD_PowerON+0x30>
  {
    return errorstate;
 801d54c:	693b      	ldr	r3, [r7, #16]
 801d54e:	e0e9      	b.n	801d724 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	4618      	mov	r0, r3
 801d556:	f003 fcd5 	bl	8020f04 <SDMMC_CmdOperCond>
 801d55a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d55c:	693b      	ldr	r3, [r7, #16]
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d00d      	beq.n	801d57e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	2200      	movs	r2, #0
 801d566:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	4618      	mov	r0, r3
 801d56e:	f003 fcab 	bl	8020ec8 <SDMMC_CmdGoIdleState>
 801d572:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801d574:	693b      	ldr	r3, [r7, #16]
 801d576:	2b00      	cmp	r3, #0
 801d578:	d004      	beq.n	801d584 <SD_PowerON+0x64>
    {
      return errorstate;
 801d57a:	693b      	ldr	r3, [r7, #16]
 801d57c:	e0d2      	b.n	801d724 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	2201      	movs	r2, #1
 801d582:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d588:	2b01      	cmp	r3, #1
 801d58a:	d137      	bne.n	801d5fc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	2100      	movs	r1, #0
 801d592:	4618      	mov	r0, r3
 801d594:	f003 fcd6 	bl	8020f44 <SDMMC_CmdAppCommand>
 801d598:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801d59a:	693b      	ldr	r3, [r7, #16]
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d02d      	beq.n	801d5fc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801d5a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d5a4:	e0be      	b.n	801d724 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801d5a6:	687b      	ldr	r3, [r7, #4]
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	2100      	movs	r1, #0
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	f003 fcc9 	bl	8020f44 <SDMMC_CmdAppCommand>
 801d5b2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801d5b4:	693b      	ldr	r3, [r7, #16]
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	d001      	beq.n	801d5be <SD_PowerON+0x9e>
    {
      return errorstate;
 801d5ba:	693b      	ldr	r3, [r7, #16]
 801d5bc:	e0b2      	b.n	801d724 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	681b      	ldr	r3, [r3, #0]
 801d5c2:	495a      	ldr	r1, [pc, #360]	; (801d72c <SD_PowerON+0x20c>)
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	f003 fce0 	bl	8020f8a <SDMMC_CmdAppOperCommand>
 801d5ca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801d5cc:	693b      	ldr	r3, [r7, #16]
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d002      	beq.n	801d5d8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801d5d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d5d6:	e0a5      	b.n	801d724 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	2100      	movs	r1, #0
 801d5de:	4618      	mov	r0, r3
 801d5e0:	f003 fb23 	bl	8020c2a <SDMMC_GetResponse>
 801d5e4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801d5e6:	69fb      	ldr	r3, [r7, #28]
 801d5e8:	0fdb      	lsrs	r3, r3, #31
 801d5ea:	2b01      	cmp	r3, #1
 801d5ec:	d101      	bne.n	801d5f2 <SD_PowerON+0xd2>
 801d5ee:	2301      	movs	r3, #1
 801d5f0:	e000      	b.n	801d5f4 <SD_PowerON+0xd4>
 801d5f2:	2300      	movs	r3, #0
 801d5f4:	61bb      	str	r3, [r7, #24]

    count++;
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	3301      	adds	r3, #1
 801d5fa:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d602:	4293      	cmp	r3, r2
 801d604:	d802      	bhi.n	801d60c <SD_PowerON+0xec>
 801d606:	69bb      	ldr	r3, [r7, #24]
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d0cc      	beq.n	801d5a6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d612:	4293      	cmp	r3, r2
 801d614:	d902      	bls.n	801d61c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801d616:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801d61a:	e083      	b.n	801d724 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801d61c:	69fb      	ldr	r3, [r7, #28]
 801d61e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801d622:	2b00      	cmp	r3, #0
 801d624:	d07d      	beq.n	801d722 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	2201      	movs	r2, #1
 801d62a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	699b      	ldr	r3, [r3, #24]
 801d630:	2b02      	cmp	r3, #2
 801d632:	d176      	bne.n	801d722 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 801d634:	69fb      	ldr	r3, [r7, #28]
 801d636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d071      	beq.n	801d722 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d644:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	681a      	ldr	r2, [r3, #0]
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	f042 0208 	orr.w	r2, r2, #8
 801d654:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	681b      	ldr	r3, [r3, #0]
 801d65a:	4618      	mov	r0, r3
 801d65c:	f003 fda0 	bl	80211a0 <SDMMC_CmdVoltageSwitch>
 801d660:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 801d662:	693b      	ldr	r3, [r7, #16]
 801d664:	2b00      	cmp	r3, #0
 801d666:	d00c      	beq.n	801d682 <SD_PowerON+0x162>
        {
          return errorstate;
 801d668:	693b      	ldr	r3, [r7, #16]
 801d66a:	e05b      	b.n	801d724 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801d66c:	f7f5 fcf4 	bl	8013058 <HAL_GetTick>
 801d670:	4602      	mov	r2, r0
 801d672:	697b      	ldr	r3, [r7, #20]
 801d674:	1ad3      	subs	r3, r2, r3
 801d676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d67a:	d102      	bne.n	801d682 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 801d67c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d680:	e050      	b.n	801d724 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d68c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d690:	d1ec      	bne.n	801d66c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801d69a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d6a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d6a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d6aa:	d002      	beq.n	801d6b2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 801d6ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d6b0:	e038      	b.n	801d724 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 801d6b2:	2001      	movs	r0, #1
 801d6b4:	f7ff fb1a 	bl	801ccec <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	681a      	ldr	r2, [r3, #0]
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	f042 0204 	orr.w	r2, r2, #4
 801d6c6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801d6c8:	e00a      	b.n	801d6e0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801d6ca:	f7f5 fcc5 	bl	8013058 <HAL_GetTick>
 801d6ce:	4602      	mov	r2, r0
 801d6d0:	697b      	ldr	r3, [r7, #20]
 801d6d2:	1ad3      	subs	r3, r2, r3
 801d6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6d8:	d102      	bne.n	801d6e0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 801d6da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d6de:	e021      	b.n	801d724 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d6e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d6ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d6ee:	d1ec      	bne.n	801d6ca <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801d6f8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d708:	d102      	bne.n	801d710 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801d70a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801d70e:	e009      	b.n	801d724 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	2213      	movs	r2, #19
 801d716:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	f04f 32ff 	mov.w	r2, #4294967295
 801d720:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801d722:	2300      	movs	r3, #0
}
 801d724:	4618      	mov	r0, r3
 801d726:	3720      	adds	r7, #32
 801d728:	46bd      	mov	sp, r7
 801d72a:	bd80      	pop	{r7, pc}
 801d72c:	c1100000 	.word	0xc1100000

0801d730 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801d730:	b580      	push	{r7, lr}
 801d732:	b08c      	sub	sp, #48	; 0x30
 801d734:	af00      	add	r7, sp, #0
 801d736:	6078      	str	r0, [r7, #4]
 801d738:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801d73a:	f7f5 fc8d 	bl	8013058 <HAL_GetTick>
 801d73e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801d740:	683b      	ldr	r3, [r7, #0]
 801d742:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	2100      	movs	r1, #0
 801d74a:	4618      	mov	r0, r3
 801d74c:	f003 fa6d 	bl	8020c2a <SDMMC_GetResponse>
 801d750:	4603      	mov	r3, r0
 801d752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d75a:	d102      	bne.n	801d762 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801d75c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d760:	e0b0      	b.n	801d8c4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	2140      	movs	r1, #64	; 0x40
 801d768:	4618      	mov	r0, r3
 801d76a:	f003 fa9d 	bl	8020ca8 <SDMMC_CmdBlockLength>
 801d76e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d770:	6a3b      	ldr	r3, [r7, #32]
 801d772:	2b00      	cmp	r3, #0
 801d774:	d005      	beq.n	801d782 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801d77e:	6a3b      	ldr	r3, [r7, #32]
 801d780:	e0a0      	b.n	801d8c4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801d782:	687b      	ldr	r3, [r7, #4]
 801d784:	681a      	ldr	r2, [r3, #0]
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d78a:	041b      	lsls	r3, r3, #16
 801d78c:	4619      	mov	r1, r3
 801d78e:	4610      	mov	r0, r2
 801d790:	f003 fbd8 	bl	8020f44 <SDMMC_CmdAppCommand>
 801d794:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d796:	6a3b      	ldr	r3, [r7, #32]
 801d798:	2b00      	cmp	r3, #0
 801d79a:	d005      	beq.n	801d7a8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801d7a4:	6a3b      	ldr	r3, [r7, #32]
 801d7a6:	e08d      	b.n	801d8c4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801d7a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d7ac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801d7ae:	2340      	movs	r3, #64	; 0x40
 801d7b0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801d7b2:	2360      	movs	r3, #96	; 0x60
 801d7b4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801d7b6:	2302      	movs	r3, #2
 801d7b8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801d7ba:	2300      	movs	r3, #0
 801d7bc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801d7be:	2301      	movs	r3, #1
 801d7c0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	f107 0208 	add.w	r2, r7, #8
 801d7ca:	4611      	mov	r1, r2
 801d7cc:	4618      	mov	r0, r3
 801d7ce:	f003 fa3f 	bl	8020c50 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	4618      	mov	r0, r3
 801d7d8:	f003 fcc0 	bl	802115c <SDMMC_CmdStatusRegister>
 801d7dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d7de:	6a3b      	ldr	r3, [r7, #32]
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d02b      	beq.n	801d83c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801d7ec:	6a3b      	ldr	r3, [r7, #32]
 801d7ee:	e069      	b.n	801d8c4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d7f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d013      	beq.n	801d826 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 801d7fe:	2300      	movs	r3, #0
 801d800:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d802:	e00d      	b.n	801d820 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	4618      	mov	r0, r3
 801d80a:	f003 f999 	bl	8020b40 <SDMMC_ReadFIFO>
 801d80e:	4602      	mov	r2, r0
 801d810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d812:	601a      	str	r2, [r3, #0]
        pData++;
 801d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d816:	3304      	adds	r3, #4
 801d818:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 801d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d81c:	3301      	adds	r3, #1
 801d81e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d822:	2b07      	cmp	r3, #7
 801d824:	d9ee      	bls.n	801d804 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801d826:	f7f5 fc17 	bl	8013058 <HAL_GetTick>
 801d82a:	4602      	mov	r2, r0
 801d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d82e:	1ad3      	subs	r3, r2, r3
 801d830:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d834:	d102      	bne.n	801d83c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801d836:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d83a:	e043      	b.n	801d8c4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d842:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 801d846:	2b00      	cmp	r3, #0
 801d848:	d0d2      	beq.n	801d7f0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d850:	f003 0308 	and.w	r3, r3, #8
 801d854:	2b00      	cmp	r3, #0
 801d856:	d001      	beq.n	801d85c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801d858:	2308      	movs	r3, #8
 801d85a:	e033      	b.n	801d8c4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	681b      	ldr	r3, [r3, #0]
 801d860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d862:	f003 0302 	and.w	r3, r3, #2
 801d866:	2b00      	cmp	r3, #0
 801d868:	d001      	beq.n	801d86e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801d86a:	2302      	movs	r3, #2
 801d86c:	e02a      	b.n	801d8c4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	681b      	ldr	r3, [r3, #0]
 801d872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d874:	f003 0320 	and.w	r3, r3, #32
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d017      	beq.n	801d8ac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 801d87c:	2320      	movs	r3, #32
 801d87e:	e021      	b.n	801d8c4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	681b      	ldr	r3, [r3, #0]
 801d884:	4618      	mov	r0, r3
 801d886:	f003 f95b 	bl	8020b40 <SDMMC_ReadFIFO>
 801d88a:	4602      	mov	r2, r0
 801d88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d88e:	601a      	str	r2, [r3, #0]
    pData++;
 801d890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d892:	3304      	adds	r3, #4
 801d894:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801d896:	f7f5 fbdf 	bl	8013058 <HAL_GetTick>
 801d89a:	4602      	mov	r2, r0
 801d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d89e:	1ad3      	subs	r3, r2, r3
 801d8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d8a4:	d102      	bne.n	801d8ac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801d8a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d8aa:	e00b      	b.n	801d8c4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d8b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d1e2      	bne.n	801d880 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	4a03      	ldr	r2, [pc, #12]	; (801d8cc <SD_SendSDStatus+0x19c>)
 801d8c0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 801d8c2:	2300      	movs	r3, #0
}
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	3730      	adds	r7, #48	; 0x30
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	bd80      	pop	{r7, pc}
 801d8cc:	18000f3a 	.word	0x18000f3a

0801d8d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801d8d0:	b580      	push	{r7, lr}
 801d8d2:	b084      	sub	sp, #16
 801d8d4:	af00      	add	r7, sp, #0
 801d8d6:	6078      	str	r0, [r7, #4]
 801d8d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801d8da:	683b      	ldr	r3, [r7, #0]
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d102      	bne.n	801d8e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801d8e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801d8e4:	e018      	b.n	801d918 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	681a      	ldr	r2, [r3, #0]
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d8ee:	041b      	lsls	r3, r3, #16
 801d8f0:	4619      	mov	r1, r3
 801d8f2:	4610      	mov	r0, r2
 801d8f4:	f003 fc0f 	bl	8021116 <SDMMC_CmdSendStatus>
 801d8f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d001      	beq.n	801d904 <SD_SendStatus+0x34>
  {
    return errorstate;
 801d900:	68fb      	ldr	r3, [r7, #12]
 801d902:	e009      	b.n	801d918 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	2100      	movs	r1, #0
 801d90a:	4618      	mov	r0, r3
 801d90c:	f003 f98d 	bl	8020c2a <SDMMC_GetResponse>
 801d910:	4602      	mov	r2, r0
 801d912:	683b      	ldr	r3, [r7, #0]
 801d914:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801d916:	2300      	movs	r3, #0
}
 801d918:	4618      	mov	r0, r3
 801d91a:	3710      	adds	r7, #16
 801d91c:	46bd      	mov	sp, r7
 801d91e:	bd80      	pop	{r7, pc}

0801d920 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801d920:	b580      	push	{r7, lr}
 801d922:	b086      	sub	sp, #24
 801d924:	af00      	add	r7, sp, #0
 801d926:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801d928:	2300      	movs	r3, #0
 801d92a:	60fb      	str	r3, [r7, #12]
 801d92c:	2300      	movs	r3, #0
 801d92e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	2100      	movs	r1, #0
 801d936:	4618      	mov	r0, r3
 801d938:	f003 f977 	bl	8020c2a <SDMMC_GetResponse>
 801d93c:	4603      	mov	r3, r0
 801d93e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d946:	d102      	bne.n	801d94e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801d948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d94c:	e02f      	b.n	801d9ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801d94e:	f107 030c 	add.w	r3, r7, #12
 801d952:	4619      	mov	r1, r3
 801d954:	6878      	ldr	r0, [r7, #4]
 801d956:	f000 f879 	bl	801da4c <SD_FindSCR>
 801d95a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d95c:	697b      	ldr	r3, [r7, #20]
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d001      	beq.n	801d966 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801d962:	697b      	ldr	r3, [r7, #20]
 801d964:	e023      	b.n	801d9ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801d966:	693b      	ldr	r3, [r7, #16]
 801d968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d01c      	beq.n	801d9aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	681a      	ldr	r2, [r3, #0]
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d978:	041b      	lsls	r3, r3, #16
 801d97a:	4619      	mov	r1, r3
 801d97c:	4610      	mov	r0, r2
 801d97e:	f003 fae1 	bl	8020f44 <SDMMC_CmdAppCommand>
 801d982:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801d984:	697b      	ldr	r3, [r7, #20]
 801d986:	2b00      	cmp	r3, #0
 801d988:	d001      	beq.n	801d98e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801d98a:	697b      	ldr	r3, [r7, #20]
 801d98c:	e00f      	b.n	801d9ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	2102      	movs	r1, #2
 801d994:	4618      	mov	r0, r3
 801d996:	f003 fb18 	bl	8020fca <SDMMC_CmdBusWidth>
 801d99a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801d99c:	697b      	ldr	r3, [r7, #20]
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d001      	beq.n	801d9a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801d9a2:	697b      	ldr	r3, [r7, #20]
 801d9a4:	e003      	b.n	801d9ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801d9a6:	2300      	movs	r3, #0
 801d9a8:	e001      	b.n	801d9ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801d9aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801d9ae:	4618      	mov	r0, r3
 801d9b0:	3718      	adds	r7, #24
 801d9b2:	46bd      	mov	sp, r7
 801d9b4:	bd80      	pop	{r7, pc}

0801d9b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801d9b6:	b580      	push	{r7, lr}
 801d9b8:	b086      	sub	sp, #24
 801d9ba:	af00      	add	r7, sp, #0
 801d9bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801d9be:	2300      	movs	r3, #0
 801d9c0:	60fb      	str	r3, [r7, #12]
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	681b      	ldr	r3, [r3, #0]
 801d9ca:	2100      	movs	r1, #0
 801d9cc:	4618      	mov	r0, r3
 801d9ce:	f003 f92c 	bl	8020c2a <SDMMC_GetResponse>
 801d9d2:	4603      	mov	r3, r0
 801d9d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d9d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d9dc:	d102      	bne.n	801d9e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801d9de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d9e2:	e02f      	b.n	801da44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801d9e4:	f107 030c 	add.w	r3, r7, #12
 801d9e8:	4619      	mov	r1, r3
 801d9ea:	6878      	ldr	r0, [r7, #4]
 801d9ec:	f000 f82e 	bl	801da4c <SD_FindSCR>
 801d9f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801d9f2:	697b      	ldr	r3, [r7, #20]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d001      	beq.n	801d9fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801d9f8:	697b      	ldr	r3, [r7, #20]
 801d9fa:	e023      	b.n	801da44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801d9fc:	693b      	ldr	r3, [r7, #16]
 801d9fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801da02:	2b00      	cmp	r3, #0
 801da04:	d01c      	beq.n	801da40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	681a      	ldr	r2, [r3, #0]
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da0e:	041b      	lsls	r3, r3, #16
 801da10:	4619      	mov	r1, r3
 801da12:	4610      	mov	r0, r2
 801da14:	f003 fa96 	bl	8020f44 <SDMMC_CmdAppCommand>
 801da18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801da1a:	697b      	ldr	r3, [r7, #20]
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d001      	beq.n	801da24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801da20:	697b      	ldr	r3, [r7, #20]
 801da22:	e00f      	b.n	801da44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	2100      	movs	r1, #0
 801da2a:	4618      	mov	r0, r3
 801da2c:	f003 facd 	bl	8020fca <SDMMC_CmdBusWidth>
 801da30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801da32:	697b      	ldr	r3, [r7, #20]
 801da34:	2b00      	cmp	r3, #0
 801da36:	d001      	beq.n	801da3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801da38:	697b      	ldr	r3, [r7, #20]
 801da3a:	e003      	b.n	801da44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801da3c:	2300      	movs	r3, #0
 801da3e:	e001      	b.n	801da44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801da40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801da44:	4618      	mov	r0, r3
 801da46:	3718      	adds	r7, #24
 801da48:	46bd      	mov	sp, r7
 801da4a:	bd80      	pop	{r7, pc}

0801da4c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801da4c:	b580      	push	{r7, lr}
 801da4e:	b08e      	sub	sp, #56	; 0x38
 801da50:	af00      	add	r7, sp, #0
 801da52:	6078      	str	r0, [r7, #4]
 801da54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801da56:	f7f5 faff 	bl	8013058 <HAL_GetTick>
 801da5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 801da5c:	2300      	movs	r3, #0
 801da5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801da60:	2300      	movs	r3, #0
 801da62:	60bb      	str	r3, [r7, #8]
 801da64:	2300      	movs	r3, #0
 801da66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801da68:	683b      	ldr	r3, [r7, #0]
 801da6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	681b      	ldr	r3, [r3, #0]
 801da70:	2108      	movs	r1, #8
 801da72:	4618      	mov	r0, r3
 801da74:	f003 f918 	bl	8020ca8 <SDMMC_CmdBlockLength>
 801da78:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801da7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d001      	beq.n	801da84 <SD_FindSCR+0x38>
  {
    return errorstate;
 801da80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da82:	e0ad      	b.n	801dbe0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	681a      	ldr	r2, [r3, #0]
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da8c:	041b      	lsls	r3, r3, #16
 801da8e:	4619      	mov	r1, r3
 801da90:	4610      	mov	r0, r2
 801da92:	f003 fa57 	bl	8020f44 <SDMMC_CmdAppCommand>
 801da96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d001      	beq.n	801daa2 <SD_FindSCR+0x56>
  {
    return errorstate;
 801da9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daa0:	e09e      	b.n	801dbe0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801daa2:	f04f 33ff 	mov.w	r3, #4294967295
 801daa6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801daa8:	2308      	movs	r3, #8
 801daaa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 801daac:	2330      	movs	r3, #48	; 0x30
 801daae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801dab0:	2302      	movs	r3, #2
 801dab2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801dab4:	2300      	movs	r3, #0
 801dab6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801dab8:	2301      	movs	r3, #1
 801daba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	f107 0210 	add.w	r2, r7, #16
 801dac4:	4611      	mov	r1, r2
 801dac6:	4618      	mov	r0, r3
 801dac8:	f003 f8c2 	bl	8020c50 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	4618      	mov	r0, r3
 801dad2:	f003 fa9d 	bl	8021010 <SDMMC_CmdSendSCR>
 801dad6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801dad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d027      	beq.n	801db2e <SD_FindSCR+0xe2>
  {
    return errorstate;
 801dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dae0:	e07e      	b.n	801dbe0 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	681b      	ldr	r3, [r3, #0]
 801dae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801daec:	2b00      	cmp	r3, #0
 801daee:	d113      	bne.n	801db18 <SD_FindSCR+0xcc>
 801daf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d110      	bne.n	801db18 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	681b      	ldr	r3, [r3, #0]
 801dafa:	4618      	mov	r0, r3
 801dafc:	f003 f820 	bl	8020b40 <SDMMC_ReadFIFO>
 801db00:	4603      	mov	r3, r0
 801db02:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	4618      	mov	r0, r3
 801db0a:	f003 f819 	bl	8020b40 <SDMMC_ReadFIFO>
 801db0e:	4603      	mov	r3, r0
 801db10:	60fb      	str	r3, [r7, #12]
      index++;
 801db12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db14:	3301      	adds	r3, #1
 801db16:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801db18:	f7f5 fa9e 	bl	8013058 <HAL_GetTick>
 801db1c:	4602      	mov	r2, r0
 801db1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db20:	1ad3      	subs	r3, r2, r3
 801db22:	f1b3 3fff 	cmp.w	r3, #4294967295
 801db26:	d102      	bne.n	801db2e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801db28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801db2c:	e058      	b.n	801dbe0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	681b      	ldr	r3, [r3, #0]
 801db32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801db34:	f240 532a 	movw	r3, #1322	; 0x52a
 801db38:	4013      	ands	r3, r2
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d0d1      	beq.n	801dae2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db44:	f003 0308 	and.w	r3, r3, #8
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d005      	beq.n	801db58 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	2208      	movs	r2, #8
 801db52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801db54:	2308      	movs	r3, #8
 801db56:	e043      	b.n	801dbe0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db5e:	f003 0302 	and.w	r3, r3, #2
 801db62:	2b00      	cmp	r3, #0
 801db64:	d005      	beq.n	801db72 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	2202      	movs	r2, #2
 801db6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801db6e:	2302      	movs	r3, #2
 801db70:	e036      	b.n	801dbe0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db78:	f003 0320 	and.w	r3, r3, #32
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d005      	beq.n	801db8c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	2220      	movs	r2, #32
 801db86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801db88:	2320      	movs	r3, #32
 801db8a:	e029      	b.n	801dbe0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	4a15      	ldr	r2, [pc, #84]	; (801dbe8 <SD_FindSCR+0x19c>)
 801db92:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801db94:	68fb      	ldr	r3, [r7, #12]
 801db96:	061a      	lsls	r2, r3, #24
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	021b      	lsls	r3, r3, #8
 801db9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801dba0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801dba2:	68fb      	ldr	r3, [r7, #12]
 801dba4:	0a1b      	lsrs	r3, r3, #8
 801dba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801dbaa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801dbac:	68fb      	ldr	r3, [r7, #12]
 801dbae:	0e1b      	lsrs	r3, r3, #24
 801dbb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801dbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbb4:	601a      	str	r2, [r3, #0]
    scr++;
 801dbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbb8:	3304      	adds	r3, #4
 801dbba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801dbbc:	68bb      	ldr	r3, [r7, #8]
 801dbbe:	061a      	lsls	r2, r3, #24
 801dbc0:	68bb      	ldr	r3, [r7, #8]
 801dbc2:	021b      	lsls	r3, r3, #8
 801dbc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801dbc8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801dbca:	68bb      	ldr	r3, [r7, #8]
 801dbcc:	0a1b      	lsrs	r3, r3, #8
 801dbce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801dbd2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801dbd4:	68bb      	ldr	r3, [r7, #8]
 801dbd6:	0e1b      	lsrs	r3, r3, #24
 801dbd8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801dbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbdc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801dbde:	2300      	movs	r3, #0
}
 801dbe0:	4618      	mov	r0, r3
 801dbe2:	3738      	adds	r7, #56	; 0x38
 801dbe4:	46bd      	mov	sp, r7
 801dbe6:	bd80      	pop	{r7, pc}
 801dbe8:	18000f3a 	.word	0x18000f3a

0801dbec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 801dbec:	b580      	push	{r7, lr}
 801dbee:	b086      	sub	sp, #24
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbf8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbfe:	2b1f      	cmp	r3, #31
 801dc00:	d936      	bls.n	801dc70 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 801dc02:	2300      	movs	r3, #0
 801dc04:	617b      	str	r3, [r7, #20]
 801dc06:	e027      	b.n	801dc58 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	f002 ff97 	bl	8020b40 <SDMMC_ReadFIFO>
 801dc12:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 801dc14:	68fb      	ldr	r3, [r7, #12]
 801dc16:	b2da      	uxtb	r2, r3
 801dc18:	693b      	ldr	r3, [r7, #16]
 801dc1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801dc1c:	693b      	ldr	r3, [r7, #16]
 801dc1e:	3301      	adds	r3, #1
 801dc20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801dc22:	68fb      	ldr	r3, [r7, #12]
 801dc24:	0a1b      	lsrs	r3, r3, #8
 801dc26:	b2da      	uxtb	r2, r3
 801dc28:	693b      	ldr	r3, [r7, #16]
 801dc2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801dc2c:	693b      	ldr	r3, [r7, #16]
 801dc2e:	3301      	adds	r3, #1
 801dc30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	0c1b      	lsrs	r3, r3, #16
 801dc36:	b2da      	uxtb	r2, r3
 801dc38:	693b      	ldr	r3, [r7, #16]
 801dc3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801dc3c:	693b      	ldr	r3, [r7, #16]
 801dc3e:	3301      	adds	r3, #1
 801dc40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	0e1b      	lsrs	r3, r3, #24
 801dc46:	b2da      	uxtb	r2, r3
 801dc48:	693b      	ldr	r3, [r7, #16]
 801dc4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801dc4c:	693b      	ldr	r3, [r7, #16]
 801dc4e:	3301      	adds	r3, #1
 801dc50:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801dc52:	697b      	ldr	r3, [r7, #20]
 801dc54:	3301      	adds	r3, #1
 801dc56:	617b      	str	r3, [r7, #20]
 801dc58:	697b      	ldr	r3, [r7, #20]
 801dc5a:	2b07      	cmp	r3, #7
 801dc5c:	d9d4      	bls.n	801dc08 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	693a      	ldr	r2, [r7, #16]
 801dc62:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc68:	f1a3 0220 	sub.w	r2, r3, #32
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 801dc70:	bf00      	nop
 801dc72:	3718      	adds	r7, #24
 801dc74:	46bd      	mov	sp, r7
 801dc76:	bd80      	pop	{r7, pc}

0801dc78 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801dc78:	b580      	push	{r7, lr}
 801dc7a:	b086      	sub	sp, #24
 801dc7c:	af00      	add	r7, sp, #0
 801dc7e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	6a1b      	ldr	r3, [r3, #32]
 801dc84:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc8a:	2b1f      	cmp	r3, #31
 801dc8c:	d93a      	bls.n	801dd04 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 801dc8e:	2300      	movs	r3, #0
 801dc90:	617b      	str	r3, [r7, #20]
 801dc92:	e02b      	b.n	801dcec <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 801dc94:	693b      	ldr	r3, [r7, #16]
 801dc96:	781b      	ldrb	r3, [r3, #0]
 801dc98:	60fb      	str	r3, [r7, #12]
      tmp++;
 801dc9a:	693b      	ldr	r3, [r7, #16]
 801dc9c:	3301      	adds	r3, #1
 801dc9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801dca0:	693b      	ldr	r3, [r7, #16]
 801dca2:	781b      	ldrb	r3, [r3, #0]
 801dca4:	021a      	lsls	r2, r3, #8
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	4313      	orrs	r3, r2
 801dcaa:	60fb      	str	r3, [r7, #12]
      tmp++;
 801dcac:	693b      	ldr	r3, [r7, #16]
 801dcae:	3301      	adds	r3, #1
 801dcb0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801dcb2:	693b      	ldr	r3, [r7, #16]
 801dcb4:	781b      	ldrb	r3, [r3, #0]
 801dcb6:	041a      	lsls	r2, r3, #16
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	4313      	orrs	r3, r2
 801dcbc:	60fb      	str	r3, [r7, #12]
      tmp++;
 801dcbe:	693b      	ldr	r3, [r7, #16]
 801dcc0:	3301      	adds	r3, #1
 801dcc2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801dcc4:	693b      	ldr	r3, [r7, #16]
 801dcc6:	781b      	ldrb	r3, [r3, #0]
 801dcc8:	061a      	lsls	r2, r3, #24
 801dcca:	68fb      	ldr	r3, [r7, #12]
 801dccc:	4313      	orrs	r3, r2
 801dcce:	60fb      	str	r3, [r7, #12]
      tmp++;
 801dcd0:	693b      	ldr	r3, [r7, #16]
 801dcd2:	3301      	adds	r3, #1
 801dcd4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	f107 020c 	add.w	r2, r7, #12
 801dcde:	4611      	mov	r1, r2
 801dce0:	4618      	mov	r0, r3
 801dce2:	f002 ff3a 	bl	8020b5a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 801dce6:	697b      	ldr	r3, [r7, #20]
 801dce8:	3301      	adds	r3, #1
 801dcea:	617b      	str	r3, [r7, #20]
 801dcec:	697b      	ldr	r3, [r7, #20]
 801dcee:	2b07      	cmp	r3, #7
 801dcf0:	d9d0      	bls.n	801dc94 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	693a      	ldr	r2, [r7, #16]
 801dcf6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcfc:	f1a3 0220 	sub.w	r2, r3, #32
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 801dd04:	bf00      	nop
 801dd06:	3718      	adds	r7, #24
 801dd08:	46bd      	mov	sp, r7
 801dd0a:	bd80      	pop	{r7, pc}

0801dd0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801dd0c:	b480      	push	{r7}
 801dd0e:	b083      	sub	sp, #12
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801dd14:	bf00      	nop
 801dd16:	370c      	adds	r7, #12
 801dd18:	46bd      	mov	sp, r7
 801dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd1e:	4770      	bx	lr

0801dd20 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801dd20:	b480      	push	{r7}
 801dd22:	b083      	sub	sp, #12
 801dd24:	af00      	add	r7, sp, #0
 801dd26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801dd28:	bf00      	nop
 801dd2a:	370c      	adds	r7, #12
 801dd2c:	46bd      	mov	sp, r7
 801dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd32:	4770      	bx	lr

0801dd34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801dd34:	b480      	push	{r7}
 801dd36:	b083      	sub	sp, #12
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801dd3c:	bf00      	nop
 801dd3e:	370c      	adds	r7, #12
 801dd40:	46bd      	mov	sp, r7
 801dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd46:	4770      	bx	lr

0801dd48 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801dd48:	b480      	push	{r7}
 801dd4a:	b083      	sub	sp, #12
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801dd50:	bf00      	nop
 801dd52:	370c      	adds	r7, #12
 801dd54:	46bd      	mov	sp, r7
 801dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd5a:	4770      	bx	lr

0801dd5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801dd5c:	b580      	push	{r7, lr}
 801dd5e:	b082      	sub	sp, #8
 801dd60:	af00      	add	r7, sp, #0
 801dd62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	d101      	bne.n	801dd6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801dd6a:	2301      	movs	r3, #1
 801dd6c:	e049      	b.n	801de02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dd74:	b2db      	uxtb	r3, r3
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d106      	bne.n	801dd88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	2200      	movs	r2, #0
 801dd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801dd82:	6878      	ldr	r0, [r7, #4]
 801dd84:	f7f4 fc74 	bl	8012670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	2202      	movs	r2, #2
 801dd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	681a      	ldr	r2, [r3, #0]
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	3304      	adds	r3, #4
 801dd98:	4619      	mov	r1, r3
 801dd9a:	4610      	mov	r0, r2
 801dd9c:	f000 fd98 	bl	801e8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	2201      	movs	r2, #1
 801dda4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	2201      	movs	r2, #1
 801ddac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	2201      	movs	r2, #1
 801ddb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	2201      	movs	r2, #1
 801ddbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	2201      	movs	r2, #1
 801ddc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	2201      	movs	r2, #1
 801ddcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	2201      	movs	r2, #1
 801ddd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	2201      	movs	r2, #1
 801dddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801dde0:	687b      	ldr	r3, [r7, #4]
 801dde2:	2201      	movs	r2, #1
 801dde4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	2201      	movs	r2, #1
 801ddec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	2201      	movs	r2, #1
 801ddf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	2201      	movs	r2, #1
 801ddfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801de00:	2300      	movs	r3, #0
}
 801de02:	4618      	mov	r0, r3
 801de04:	3708      	adds	r7, #8
 801de06:	46bd      	mov	sp, r7
 801de08:	bd80      	pop	{r7, pc}
	...

0801de0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801de0c:	b480      	push	{r7}
 801de0e:	b085      	sub	sp, #20
 801de10:	af00      	add	r7, sp, #0
 801de12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801de1a:	b2db      	uxtb	r3, r3
 801de1c:	2b01      	cmp	r3, #1
 801de1e:	d001      	beq.n	801de24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801de20:	2301      	movs	r3, #1
 801de22:	e021      	b.n	801de68 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	2202      	movs	r2, #2
 801de28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	68da      	ldr	r2, [r3, #12]
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	681b      	ldr	r3, [r3, #0]
 801de36:	f042 0201 	orr.w	r2, r2, #1
 801de3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	689a      	ldr	r2, [r3, #8]
 801de42:	4b0c      	ldr	r3, [pc, #48]	; (801de74 <HAL_TIM_Base_Start_IT+0x68>)
 801de44:	4013      	ands	r3, r2
 801de46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	2b06      	cmp	r3, #6
 801de4c:	d00b      	beq.n	801de66 <HAL_TIM_Base_Start_IT+0x5a>
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801de54:	d007      	beq.n	801de66 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	681a      	ldr	r2, [r3, #0]
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	f042 0201 	orr.w	r2, r2, #1
 801de64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801de66:	2300      	movs	r3, #0
}
 801de68:	4618      	mov	r0, r3
 801de6a:	3714      	adds	r7, #20
 801de6c:	46bd      	mov	sp, r7
 801de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de72:	4770      	bx	lr
 801de74:	00010007 	.word	0x00010007

0801de78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801de78:	b580      	push	{r7, lr}
 801de7a:	b082      	sub	sp, #8
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	2b00      	cmp	r3, #0
 801de84:	d101      	bne.n	801de8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801de86:	2301      	movs	r3, #1
 801de88:	e049      	b.n	801df1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801de90:	b2db      	uxtb	r3, r3
 801de92:	2b00      	cmp	r3, #0
 801de94:	d106      	bne.n	801dea4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801de96:	687b      	ldr	r3, [r7, #4]
 801de98:	2200      	movs	r2, #0
 801de9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801de9e:	6878      	ldr	r0, [r7, #4]
 801dea0:	f000 f841 	bl	801df26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	2202      	movs	r2, #2
 801dea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	681a      	ldr	r2, [r3, #0]
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	3304      	adds	r3, #4
 801deb4:	4619      	mov	r1, r3
 801deb6:	4610      	mov	r0, r2
 801deb8:	f000 fd0a 	bl	801e8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	2201      	movs	r2, #1
 801dec0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	2201      	movs	r2, #1
 801dec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	2201      	movs	r2, #1
 801ded0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	2201      	movs	r2, #1
 801ded8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	2201      	movs	r2, #1
 801dee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	2201      	movs	r2, #1
 801dee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	2201      	movs	r2, #1
 801def0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	2201      	movs	r2, #1
 801def8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	2201      	movs	r2, #1
 801df00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	2201      	movs	r2, #1
 801df08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	2201      	movs	r2, #1
 801df10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	2201      	movs	r2, #1
 801df18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801df1c:	2300      	movs	r3, #0
}
 801df1e:	4618      	mov	r0, r3
 801df20:	3708      	adds	r7, #8
 801df22:	46bd      	mov	sp, r7
 801df24:	bd80      	pop	{r7, pc}

0801df26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801df26:	b480      	push	{r7}
 801df28:	b083      	sub	sp, #12
 801df2a:	af00      	add	r7, sp, #0
 801df2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801df2e:	bf00      	nop
 801df30:	370c      	adds	r7, #12
 801df32:	46bd      	mov	sp, r7
 801df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df38:	4770      	bx	lr
	...

0801df3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801df3c:	b580      	push	{r7, lr}
 801df3e:	b084      	sub	sp, #16
 801df40:	af00      	add	r7, sp, #0
 801df42:	6078      	str	r0, [r7, #4]
 801df44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801df46:	683b      	ldr	r3, [r7, #0]
 801df48:	2b00      	cmp	r3, #0
 801df4a:	d109      	bne.n	801df60 <HAL_TIM_PWM_Start+0x24>
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801df52:	b2db      	uxtb	r3, r3
 801df54:	2b01      	cmp	r3, #1
 801df56:	bf14      	ite	ne
 801df58:	2301      	movne	r3, #1
 801df5a:	2300      	moveq	r3, #0
 801df5c:	b2db      	uxtb	r3, r3
 801df5e:	e03c      	b.n	801dfda <HAL_TIM_PWM_Start+0x9e>
 801df60:	683b      	ldr	r3, [r7, #0]
 801df62:	2b04      	cmp	r3, #4
 801df64:	d109      	bne.n	801df7a <HAL_TIM_PWM_Start+0x3e>
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801df6c:	b2db      	uxtb	r3, r3
 801df6e:	2b01      	cmp	r3, #1
 801df70:	bf14      	ite	ne
 801df72:	2301      	movne	r3, #1
 801df74:	2300      	moveq	r3, #0
 801df76:	b2db      	uxtb	r3, r3
 801df78:	e02f      	b.n	801dfda <HAL_TIM_PWM_Start+0x9e>
 801df7a:	683b      	ldr	r3, [r7, #0]
 801df7c:	2b08      	cmp	r3, #8
 801df7e:	d109      	bne.n	801df94 <HAL_TIM_PWM_Start+0x58>
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801df86:	b2db      	uxtb	r3, r3
 801df88:	2b01      	cmp	r3, #1
 801df8a:	bf14      	ite	ne
 801df8c:	2301      	movne	r3, #1
 801df8e:	2300      	moveq	r3, #0
 801df90:	b2db      	uxtb	r3, r3
 801df92:	e022      	b.n	801dfda <HAL_TIM_PWM_Start+0x9e>
 801df94:	683b      	ldr	r3, [r7, #0]
 801df96:	2b0c      	cmp	r3, #12
 801df98:	d109      	bne.n	801dfae <HAL_TIM_PWM_Start+0x72>
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801dfa0:	b2db      	uxtb	r3, r3
 801dfa2:	2b01      	cmp	r3, #1
 801dfa4:	bf14      	ite	ne
 801dfa6:	2301      	movne	r3, #1
 801dfa8:	2300      	moveq	r3, #0
 801dfaa:	b2db      	uxtb	r3, r3
 801dfac:	e015      	b.n	801dfda <HAL_TIM_PWM_Start+0x9e>
 801dfae:	683b      	ldr	r3, [r7, #0]
 801dfb0:	2b10      	cmp	r3, #16
 801dfb2:	d109      	bne.n	801dfc8 <HAL_TIM_PWM_Start+0x8c>
 801dfb4:	687b      	ldr	r3, [r7, #4]
 801dfb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dfba:	b2db      	uxtb	r3, r3
 801dfbc:	2b01      	cmp	r3, #1
 801dfbe:	bf14      	ite	ne
 801dfc0:	2301      	movne	r3, #1
 801dfc2:	2300      	moveq	r3, #0
 801dfc4:	b2db      	uxtb	r3, r3
 801dfc6:	e008      	b.n	801dfda <HAL_TIM_PWM_Start+0x9e>
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801dfce:	b2db      	uxtb	r3, r3
 801dfd0:	2b01      	cmp	r3, #1
 801dfd2:	bf14      	ite	ne
 801dfd4:	2301      	movne	r3, #1
 801dfd6:	2300      	moveq	r3, #0
 801dfd8:	b2db      	uxtb	r3, r3
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d001      	beq.n	801dfe2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801dfde:	2301      	movs	r3, #1
 801dfe0:	e06e      	b.n	801e0c0 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801dfe2:	683b      	ldr	r3, [r7, #0]
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d104      	bne.n	801dff2 <HAL_TIM_PWM_Start+0xb6>
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	2202      	movs	r2, #2
 801dfec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801dff0:	e023      	b.n	801e03a <HAL_TIM_PWM_Start+0xfe>
 801dff2:	683b      	ldr	r3, [r7, #0]
 801dff4:	2b04      	cmp	r3, #4
 801dff6:	d104      	bne.n	801e002 <HAL_TIM_PWM_Start+0xc6>
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	2202      	movs	r2, #2
 801dffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e000:	e01b      	b.n	801e03a <HAL_TIM_PWM_Start+0xfe>
 801e002:	683b      	ldr	r3, [r7, #0]
 801e004:	2b08      	cmp	r3, #8
 801e006:	d104      	bne.n	801e012 <HAL_TIM_PWM_Start+0xd6>
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	2202      	movs	r2, #2
 801e00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e010:	e013      	b.n	801e03a <HAL_TIM_PWM_Start+0xfe>
 801e012:	683b      	ldr	r3, [r7, #0]
 801e014:	2b0c      	cmp	r3, #12
 801e016:	d104      	bne.n	801e022 <HAL_TIM_PWM_Start+0xe6>
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	2202      	movs	r2, #2
 801e01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e020:	e00b      	b.n	801e03a <HAL_TIM_PWM_Start+0xfe>
 801e022:	683b      	ldr	r3, [r7, #0]
 801e024:	2b10      	cmp	r3, #16
 801e026:	d104      	bne.n	801e032 <HAL_TIM_PWM_Start+0xf6>
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	2202      	movs	r2, #2
 801e02c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e030:	e003      	b.n	801e03a <HAL_TIM_PWM_Start+0xfe>
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	2202      	movs	r2, #2
 801e036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	2201      	movs	r2, #1
 801e040:	6839      	ldr	r1, [r7, #0]
 801e042:	4618      	mov	r0, r3
 801e044:	f001 f84a 	bl	801f0dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	4a1e      	ldr	r2, [pc, #120]	; (801e0c8 <HAL_TIM_PWM_Start+0x18c>)
 801e04e:	4293      	cmp	r3, r2
 801e050:	d013      	beq.n	801e07a <HAL_TIM_PWM_Start+0x13e>
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	4a1d      	ldr	r2, [pc, #116]	; (801e0cc <HAL_TIM_PWM_Start+0x190>)
 801e058:	4293      	cmp	r3, r2
 801e05a:	d00e      	beq.n	801e07a <HAL_TIM_PWM_Start+0x13e>
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	4a1b      	ldr	r2, [pc, #108]	; (801e0d0 <HAL_TIM_PWM_Start+0x194>)
 801e062:	4293      	cmp	r3, r2
 801e064:	d009      	beq.n	801e07a <HAL_TIM_PWM_Start+0x13e>
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	681b      	ldr	r3, [r3, #0]
 801e06a:	4a1a      	ldr	r2, [pc, #104]	; (801e0d4 <HAL_TIM_PWM_Start+0x198>)
 801e06c:	4293      	cmp	r3, r2
 801e06e:	d004      	beq.n	801e07a <HAL_TIM_PWM_Start+0x13e>
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	4a18      	ldr	r2, [pc, #96]	; (801e0d8 <HAL_TIM_PWM_Start+0x19c>)
 801e076:	4293      	cmp	r3, r2
 801e078:	d101      	bne.n	801e07e <HAL_TIM_PWM_Start+0x142>
 801e07a:	2301      	movs	r3, #1
 801e07c:	e000      	b.n	801e080 <HAL_TIM_PWM_Start+0x144>
 801e07e:	2300      	movs	r3, #0
 801e080:	2b00      	cmp	r3, #0
 801e082:	d007      	beq.n	801e094 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e092:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	681b      	ldr	r3, [r3, #0]
 801e098:	689a      	ldr	r2, [r3, #8]
 801e09a:	4b10      	ldr	r3, [pc, #64]	; (801e0dc <HAL_TIM_PWM_Start+0x1a0>)
 801e09c:	4013      	ands	r3, r2
 801e09e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	2b06      	cmp	r3, #6
 801e0a4:	d00b      	beq.n	801e0be <HAL_TIM_PWM_Start+0x182>
 801e0a6:	68fb      	ldr	r3, [r7, #12]
 801e0a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e0ac:	d007      	beq.n	801e0be <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	681a      	ldr	r2, [r3, #0]
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	f042 0201 	orr.w	r2, r2, #1
 801e0bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801e0be:	2300      	movs	r3, #0
}
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	3710      	adds	r7, #16
 801e0c4:	46bd      	mov	sp, r7
 801e0c6:	bd80      	pop	{r7, pc}
 801e0c8:	40010000 	.word	0x40010000
 801e0cc:	40010400 	.word	0x40010400
 801e0d0:	40014000 	.word	0x40014000
 801e0d4:	40014400 	.word	0x40014400
 801e0d8:	40014800 	.word	0x40014800
 801e0dc:	00010007 	.word	0x00010007

0801e0e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e0e0:	b580      	push	{r7, lr}
 801e0e2:	b082      	sub	sp, #8
 801e0e4:	af00      	add	r7, sp, #0
 801e0e6:	6078      	str	r0, [r7, #4]
 801e0e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	681b      	ldr	r3, [r3, #0]
 801e0ee:	2200      	movs	r2, #0
 801e0f0:	6839      	ldr	r1, [r7, #0]
 801e0f2:	4618      	mov	r0, r3
 801e0f4:	f000 fff2 	bl	801f0dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	681b      	ldr	r3, [r3, #0]
 801e0fc:	4a3e      	ldr	r2, [pc, #248]	; (801e1f8 <HAL_TIM_PWM_Stop+0x118>)
 801e0fe:	4293      	cmp	r3, r2
 801e100:	d013      	beq.n	801e12a <HAL_TIM_PWM_Stop+0x4a>
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	4a3d      	ldr	r2, [pc, #244]	; (801e1fc <HAL_TIM_PWM_Stop+0x11c>)
 801e108:	4293      	cmp	r3, r2
 801e10a:	d00e      	beq.n	801e12a <HAL_TIM_PWM_Stop+0x4a>
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	681b      	ldr	r3, [r3, #0]
 801e110:	4a3b      	ldr	r2, [pc, #236]	; (801e200 <HAL_TIM_PWM_Stop+0x120>)
 801e112:	4293      	cmp	r3, r2
 801e114:	d009      	beq.n	801e12a <HAL_TIM_PWM_Stop+0x4a>
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	4a3a      	ldr	r2, [pc, #232]	; (801e204 <HAL_TIM_PWM_Stop+0x124>)
 801e11c:	4293      	cmp	r3, r2
 801e11e:	d004      	beq.n	801e12a <HAL_TIM_PWM_Stop+0x4a>
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	4a38      	ldr	r2, [pc, #224]	; (801e208 <HAL_TIM_PWM_Stop+0x128>)
 801e126:	4293      	cmp	r3, r2
 801e128:	d101      	bne.n	801e12e <HAL_TIM_PWM_Stop+0x4e>
 801e12a:	2301      	movs	r3, #1
 801e12c:	e000      	b.n	801e130 <HAL_TIM_PWM_Stop+0x50>
 801e12e:	2300      	movs	r3, #0
 801e130:	2b00      	cmp	r3, #0
 801e132:	d017      	beq.n	801e164 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	6a1a      	ldr	r2, [r3, #32]
 801e13a:	f241 1311 	movw	r3, #4369	; 0x1111
 801e13e:	4013      	ands	r3, r2
 801e140:	2b00      	cmp	r3, #0
 801e142:	d10f      	bne.n	801e164 <HAL_TIM_PWM_Stop+0x84>
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	6a1a      	ldr	r2, [r3, #32]
 801e14a:	f240 4344 	movw	r3, #1092	; 0x444
 801e14e:	4013      	ands	r3, r2
 801e150:	2b00      	cmp	r3, #0
 801e152:	d107      	bne.n	801e164 <HAL_TIM_PWM_Stop+0x84>
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e162:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	6a1a      	ldr	r2, [r3, #32]
 801e16a:	f241 1311 	movw	r3, #4369	; 0x1111
 801e16e:	4013      	ands	r3, r2
 801e170:	2b00      	cmp	r3, #0
 801e172:	d10f      	bne.n	801e194 <HAL_TIM_PWM_Stop+0xb4>
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	6a1a      	ldr	r2, [r3, #32]
 801e17a:	f240 4344 	movw	r3, #1092	; 0x444
 801e17e:	4013      	ands	r3, r2
 801e180:	2b00      	cmp	r3, #0
 801e182:	d107      	bne.n	801e194 <HAL_TIM_PWM_Stop+0xb4>
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	681b      	ldr	r3, [r3, #0]
 801e188:	681a      	ldr	r2, [r3, #0]
 801e18a:	687b      	ldr	r3, [r7, #4]
 801e18c:	681b      	ldr	r3, [r3, #0]
 801e18e:	f022 0201 	bic.w	r2, r2, #1
 801e192:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801e194:	683b      	ldr	r3, [r7, #0]
 801e196:	2b00      	cmp	r3, #0
 801e198:	d104      	bne.n	801e1a4 <HAL_TIM_PWM_Stop+0xc4>
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	2201      	movs	r2, #1
 801e19e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e1a2:	e023      	b.n	801e1ec <HAL_TIM_PWM_Stop+0x10c>
 801e1a4:	683b      	ldr	r3, [r7, #0]
 801e1a6:	2b04      	cmp	r3, #4
 801e1a8:	d104      	bne.n	801e1b4 <HAL_TIM_PWM_Stop+0xd4>
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	2201      	movs	r2, #1
 801e1ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e1b2:	e01b      	b.n	801e1ec <HAL_TIM_PWM_Stop+0x10c>
 801e1b4:	683b      	ldr	r3, [r7, #0]
 801e1b6:	2b08      	cmp	r3, #8
 801e1b8:	d104      	bne.n	801e1c4 <HAL_TIM_PWM_Stop+0xe4>
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	2201      	movs	r2, #1
 801e1be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e1c2:	e013      	b.n	801e1ec <HAL_TIM_PWM_Stop+0x10c>
 801e1c4:	683b      	ldr	r3, [r7, #0]
 801e1c6:	2b0c      	cmp	r3, #12
 801e1c8:	d104      	bne.n	801e1d4 <HAL_TIM_PWM_Stop+0xf4>
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	2201      	movs	r2, #1
 801e1ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e1d2:	e00b      	b.n	801e1ec <HAL_TIM_PWM_Stop+0x10c>
 801e1d4:	683b      	ldr	r3, [r7, #0]
 801e1d6:	2b10      	cmp	r3, #16
 801e1d8:	d104      	bne.n	801e1e4 <HAL_TIM_PWM_Stop+0x104>
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	2201      	movs	r2, #1
 801e1de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e1e2:	e003      	b.n	801e1ec <HAL_TIM_PWM_Stop+0x10c>
 801e1e4:	687b      	ldr	r3, [r7, #4]
 801e1e6:	2201      	movs	r2, #1
 801e1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801e1ec:	2300      	movs	r3, #0
}
 801e1ee:	4618      	mov	r0, r3
 801e1f0:	3708      	adds	r7, #8
 801e1f2:	46bd      	mov	sp, r7
 801e1f4:	bd80      	pop	{r7, pc}
 801e1f6:	bf00      	nop
 801e1f8:	40010000 	.word	0x40010000
 801e1fc:	40010400 	.word	0x40010400
 801e200:	40014000 	.word	0x40014000
 801e204:	40014400 	.word	0x40014400
 801e208:	40014800 	.word	0x40014800

0801e20c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e20c:	b580      	push	{r7, lr}
 801e20e:	b082      	sub	sp, #8
 801e210:	af00      	add	r7, sp, #0
 801e212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	691b      	ldr	r3, [r3, #16]
 801e21a:	f003 0302 	and.w	r3, r3, #2
 801e21e:	2b02      	cmp	r3, #2
 801e220:	d122      	bne.n	801e268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	68db      	ldr	r3, [r3, #12]
 801e228:	f003 0302 	and.w	r3, r3, #2
 801e22c:	2b02      	cmp	r3, #2
 801e22e:	d11b      	bne.n	801e268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	f06f 0202 	mvn.w	r2, #2
 801e238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	2201      	movs	r2, #1
 801e23e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	681b      	ldr	r3, [r3, #0]
 801e244:	699b      	ldr	r3, [r3, #24]
 801e246:	f003 0303 	and.w	r3, r3, #3
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	d003      	beq.n	801e256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e24e:	6878      	ldr	r0, [r7, #4]
 801e250:	f7f2 feb4 	bl	8010fbc <HAL_TIM_IC_CaptureCallback>
 801e254:	e005      	b.n	801e262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e256:	6878      	ldr	r0, [r7, #4]
 801e258:	f000 fb1c 	bl	801e894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e25c:	6878      	ldr	r0, [r7, #4]
 801e25e:	f000 fb23 	bl	801e8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	2200      	movs	r2, #0
 801e266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	691b      	ldr	r3, [r3, #16]
 801e26e:	f003 0304 	and.w	r3, r3, #4
 801e272:	2b04      	cmp	r3, #4
 801e274:	d122      	bne.n	801e2bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	68db      	ldr	r3, [r3, #12]
 801e27c:	f003 0304 	and.w	r3, r3, #4
 801e280:	2b04      	cmp	r3, #4
 801e282:	d11b      	bne.n	801e2bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	681b      	ldr	r3, [r3, #0]
 801e288:	f06f 0204 	mvn.w	r2, #4
 801e28c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	2202      	movs	r2, #2
 801e292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	699b      	ldr	r3, [r3, #24]
 801e29a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	d003      	beq.n	801e2aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e2a2:	6878      	ldr	r0, [r7, #4]
 801e2a4:	f7f2 fe8a 	bl	8010fbc <HAL_TIM_IC_CaptureCallback>
 801e2a8:	e005      	b.n	801e2b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e2aa:	6878      	ldr	r0, [r7, #4]
 801e2ac:	f000 faf2 	bl	801e894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e2b0:	6878      	ldr	r0, [r7, #4]
 801e2b2:	f000 faf9 	bl	801e8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	2200      	movs	r2, #0
 801e2ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	691b      	ldr	r3, [r3, #16]
 801e2c2:	f003 0308 	and.w	r3, r3, #8
 801e2c6:	2b08      	cmp	r3, #8
 801e2c8:	d122      	bne.n	801e310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	68db      	ldr	r3, [r3, #12]
 801e2d0:	f003 0308 	and.w	r3, r3, #8
 801e2d4:	2b08      	cmp	r3, #8
 801e2d6:	d11b      	bne.n	801e310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	f06f 0208 	mvn.w	r2, #8
 801e2e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	2204      	movs	r2, #4
 801e2e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	69db      	ldr	r3, [r3, #28]
 801e2ee:	f003 0303 	and.w	r3, r3, #3
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d003      	beq.n	801e2fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e2f6:	6878      	ldr	r0, [r7, #4]
 801e2f8:	f7f2 fe60 	bl	8010fbc <HAL_TIM_IC_CaptureCallback>
 801e2fc:	e005      	b.n	801e30a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e2fe:	6878      	ldr	r0, [r7, #4]
 801e300:	f000 fac8 	bl	801e894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e304:	6878      	ldr	r0, [r7, #4]
 801e306:	f000 facf 	bl	801e8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	2200      	movs	r2, #0
 801e30e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	691b      	ldr	r3, [r3, #16]
 801e316:	f003 0310 	and.w	r3, r3, #16
 801e31a:	2b10      	cmp	r3, #16
 801e31c:	d122      	bne.n	801e364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	681b      	ldr	r3, [r3, #0]
 801e322:	68db      	ldr	r3, [r3, #12]
 801e324:	f003 0310 	and.w	r3, r3, #16
 801e328:	2b10      	cmp	r3, #16
 801e32a:	d11b      	bne.n	801e364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	f06f 0210 	mvn.w	r2, #16
 801e334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e336:	687b      	ldr	r3, [r7, #4]
 801e338:	2208      	movs	r2, #8
 801e33a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	69db      	ldr	r3, [r3, #28]
 801e342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e346:	2b00      	cmp	r3, #0
 801e348:	d003      	beq.n	801e352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e34a:	6878      	ldr	r0, [r7, #4]
 801e34c:	f7f2 fe36 	bl	8010fbc <HAL_TIM_IC_CaptureCallback>
 801e350:	e005      	b.n	801e35e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e352:	6878      	ldr	r0, [r7, #4]
 801e354:	f000 fa9e 	bl	801e894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e358:	6878      	ldr	r0, [r7, #4]
 801e35a:	f000 faa5 	bl	801e8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	2200      	movs	r2, #0
 801e362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	691b      	ldr	r3, [r3, #16]
 801e36a:	f003 0301 	and.w	r3, r3, #1
 801e36e:	2b01      	cmp	r3, #1
 801e370:	d10e      	bne.n	801e390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	68db      	ldr	r3, [r3, #12]
 801e378:	f003 0301 	and.w	r3, r3, #1
 801e37c:	2b01      	cmp	r3, #1
 801e37e:	d107      	bne.n	801e390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	f06f 0201 	mvn.w	r2, #1
 801e388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e38a:	6878      	ldr	r0, [r7, #4]
 801e38c:	f7f3 fc24 	bl	8011bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	691b      	ldr	r3, [r3, #16]
 801e396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e39a:	2b80      	cmp	r3, #128	; 0x80
 801e39c:	d10e      	bne.n	801e3bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	68db      	ldr	r3, [r3, #12]
 801e3a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e3a8:	2b80      	cmp	r3, #128	; 0x80
 801e3aa:	d107      	bne.n	801e3bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e3b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e3b6:	6878      	ldr	r0, [r7, #4]
 801e3b8:	f000 ffc6 	bl	801f348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	691b      	ldr	r3, [r3, #16]
 801e3c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e3c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e3ca:	d10e      	bne.n	801e3ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	68db      	ldr	r3, [r3, #12]
 801e3d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e3d6:	2b80      	cmp	r3, #128	; 0x80
 801e3d8:	d107      	bne.n	801e3ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	681b      	ldr	r3, [r3, #0]
 801e3de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e3e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801e3e4:	6878      	ldr	r0, [r7, #4]
 801e3e6:	f000 ffb9 	bl	801f35c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	691b      	ldr	r3, [r3, #16]
 801e3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e3f4:	2b40      	cmp	r3, #64	; 0x40
 801e3f6:	d10e      	bne.n	801e416 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	68db      	ldr	r3, [r3, #12]
 801e3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e402:	2b40      	cmp	r3, #64	; 0x40
 801e404:	d107      	bne.n	801e416 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e40e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e410:	6878      	ldr	r0, [r7, #4]
 801e412:	f000 fa53 	bl	801e8bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	691b      	ldr	r3, [r3, #16]
 801e41c:	f003 0320 	and.w	r3, r3, #32
 801e420:	2b20      	cmp	r3, #32
 801e422:	d10e      	bne.n	801e442 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	68db      	ldr	r3, [r3, #12]
 801e42a:	f003 0320 	and.w	r3, r3, #32
 801e42e:	2b20      	cmp	r3, #32
 801e430:	d107      	bne.n	801e442 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	f06f 0220 	mvn.w	r2, #32
 801e43a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e43c:	6878      	ldr	r0, [r7, #4]
 801e43e:	f000 ff79 	bl	801f334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e442:	bf00      	nop
 801e444:	3708      	adds	r7, #8
 801e446:	46bd      	mov	sp, r7
 801e448:	bd80      	pop	{r7, pc}
	...

0801e44c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e44c:	b580      	push	{r7, lr}
 801e44e:	b084      	sub	sp, #16
 801e450:	af00      	add	r7, sp, #0
 801e452:	60f8      	str	r0, [r7, #12]
 801e454:	60b9      	str	r1, [r7, #8]
 801e456:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e45e:	2b01      	cmp	r3, #1
 801e460:	d101      	bne.n	801e466 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801e462:	2302      	movs	r3, #2
 801e464:	e0fd      	b.n	801e662 <HAL_TIM_PWM_ConfigChannel+0x216>
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	2201      	movs	r2, #1
 801e46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	2b14      	cmp	r3, #20
 801e472:	f200 80f0 	bhi.w	801e656 <HAL_TIM_PWM_ConfigChannel+0x20a>
 801e476:	a201      	add	r2, pc, #4	; (adr r2, 801e47c <HAL_TIM_PWM_ConfigChannel+0x30>)
 801e478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e47c:	0801e4d1 	.word	0x0801e4d1
 801e480:	0801e657 	.word	0x0801e657
 801e484:	0801e657 	.word	0x0801e657
 801e488:	0801e657 	.word	0x0801e657
 801e48c:	0801e511 	.word	0x0801e511
 801e490:	0801e657 	.word	0x0801e657
 801e494:	0801e657 	.word	0x0801e657
 801e498:	0801e657 	.word	0x0801e657
 801e49c:	0801e553 	.word	0x0801e553
 801e4a0:	0801e657 	.word	0x0801e657
 801e4a4:	0801e657 	.word	0x0801e657
 801e4a8:	0801e657 	.word	0x0801e657
 801e4ac:	0801e593 	.word	0x0801e593
 801e4b0:	0801e657 	.word	0x0801e657
 801e4b4:	0801e657 	.word	0x0801e657
 801e4b8:	0801e657 	.word	0x0801e657
 801e4bc:	0801e5d5 	.word	0x0801e5d5
 801e4c0:	0801e657 	.word	0x0801e657
 801e4c4:	0801e657 	.word	0x0801e657
 801e4c8:	0801e657 	.word	0x0801e657
 801e4cc:	0801e615 	.word	0x0801e615
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e4d0:	68fb      	ldr	r3, [r7, #12]
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	68b9      	ldr	r1, [r7, #8]
 801e4d6:	4618      	mov	r0, r3
 801e4d8:	f000 fa94 	bl	801ea04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e4dc:	68fb      	ldr	r3, [r7, #12]
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	699a      	ldr	r2, [r3, #24]
 801e4e2:	68fb      	ldr	r3, [r7, #12]
 801e4e4:	681b      	ldr	r3, [r3, #0]
 801e4e6:	f042 0208 	orr.w	r2, r2, #8
 801e4ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e4ec:	68fb      	ldr	r3, [r7, #12]
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	699a      	ldr	r2, [r3, #24]
 801e4f2:	68fb      	ldr	r3, [r7, #12]
 801e4f4:	681b      	ldr	r3, [r3, #0]
 801e4f6:	f022 0204 	bic.w	r2, r2, #4
 801e4fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	6999      	ldr	r1, [r3, #24]
 801e502:	68bb      	ldr	r3, [r7, #8]
 801e504:	691a      	ldr	r2, [r3, #16]
 801e506:	68fb      	ldr	r3, [r7, #12]
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	430a      	orrs	r2, r1
 801e50c:	619a      	str	r2, [r3, #24]
      break;
 801e50e:	e0a3      	b.n	801e658 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e510:	68fb      	ldr	r3, [r7, #12]
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	68b9      	ldr	r1, [r7, #8]
 801e516:	4618      	mov	r0, r3
 801e518:	f000 fb04 	bl	801eb24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e51c:	68fb      	ldr	r3, [r7, #12]
 801e51e:	681b      	ldr	r3, [r3, #0]
 801e520:	699a      	ldr	r2, [r3, #24]
 801e522:	68fb      	ldr	r3, [r7, #12]
 801e524:	681b      	ldr	r3, [r3, #0]
 801e526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e52a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e52c:	68fb      	ldr	r3, [r7, #12]
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	699a      	ldr	r2, [r3, #24]
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e53a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e53c:	68fb      	ldr	r3, [r7, #12]
 801e53e:	681b      	ldr	r3, [r3, #0]
 801e540:	6999      	ldr	r1, [r3, #24]
 801e542:	68bb      	ldr	r3, [r7, #8]
 801e544:	691b      	ldr	r3, [r3, #16]
 801e546:	021a      	lsls	r2, r3, #8
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	430a      	orrs	r2, r1
 801e54e:	619a      	str	r2, [r3, #24]
      break;
 801e550:	e082      	b.n	801e658 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	681b      	ldr	r3, [r3, #0]
 801e556:	68b9      	ldr	r1, [r7, #8]
 801e558:	4618      	mov	r0, r3
 801e55a:	f000 fb6d 	bl	801ec38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e55e:	68fb      	ldr	r3, [r7, #12]
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	69da      	ldr	r2, [r3, #28]
 801e564:	68fb      	ldr	r3, [r7, #12]
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	f042 0208 	orr.w	r2, r2, #8
 801e56c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e56e:	68fb      	ldr	r3, [r7, #12]
 801e570:	681b      	ldr	r3, [r3, #0]
 801e572:	69da      	ldr	r2, [r3, #28]
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	f022 0204 	bic.w	r2, r2, #4
 801e57c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e57e:	68fb      	ldr	r3, [r7, #12]
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	69d9      	ldr	r1, [r3, #28]
 801e584:	68bb      	ldr	r3, [r7, #8]
 801e586:	691a      	ldr	r2, [r3, #16]
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	430a      	orrs	r2, r1
 801e58e:	61da      	str	r2, [r3, #28]
      break;
 801e590:	e062      	b.n	801e658 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	681b      	ldr	r3, [r3, #0]
 801e596:	68b9      	ldr	r1, [r7, #8]
 801e598:	4618      	mov	r0, r3
 801e59a:	f000 fbd3 	bl	801ed44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e59e:	68fb      	ldr	r3, [r7, #12]
 801e5a0:	681b      	ldr	r3, [r3, #0]
 801e5a2:	69da      	ldr	r2, [r3, #28]
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e5ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	681b      	ldr	r3, [r3, #0]
 801e5b2:	69da      	ldr	r2, [r3, #28]
 801e5b4:	68fb      	ldr	r3, [r7, #12]
 801e5b6:	681b      	ldr	r3, [r3, #0]
 801e5b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e5bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e5be:	68fb      	ldr	r3, [r7, #12]
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	69d9      	ldr	r1, [r3, #28]
 801e5c4:	68bb      	ldr	r3, [r7, #8]
 801e5c6:	691b      	ldr	r3, [r3, #16]
 801e5c8:	021a      	lsls	r2, r3, #8
 801e5ca:	68fb      	ldr	r3, [r7, #12]
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	430a      	orrs	r2, r1
 801e5d0:	61da      	str	r2, [r3, #28]
      break;
 801e5d2:	e041      	b.n	801e658 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801e5d4:	68fb      	ldr	r3, [r7, #12]
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	68b9      	ldr	r1, [r7, #8]
 801e5da:	4618      	mov	r0, r3
 801e5dc:	f000 fc1a 	bl	801ee14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801e5e0:	68fb      	ldr	r3, [r7, #12]
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	f042 0208 	orr.w	r2, r2, #8
 801e5ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801e5f0:	68fb      	ldr	r3, [r7, #12]
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801e5f6:	68fb      	ldr	r3, [r7, #12]
 801e5f8:	681b      	ldr	r3, [r3, #0]
 801e5fa:	f022 0204 	bic.w	r2, r2, #4
 801e5fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801e606:	68bb      	ldr	r3, [r7, #8]
 801e608:	691a      	ldr	r2, [r3, #16]
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	681b      	ldr	r3, [r3, #0]
 801e60e:	430a      	orrs	r2, r1
 801e610:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801e612:	e021      	b.n	801e658 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801e614:	68fb      	ldr	r3, [r7, #12]
 801e616:	681b      	ldr	r3, [r3, #0]
 801e618:	68b9      	ldr	r1, [r7, #8]
 801e61a:	4618      	mov	r0, r3
 801e61c:	f000 fc5c 	bl	801eed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801e620:	68fb      	ldr	r3, [r7, #12]
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801e626:	68fb      	ldr	r3, [r7, #12]
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e62e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801e630:	68fb      	ldr	r3, [r7, #12]
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801e636:	68fb      	ldr	r3, [r7, #12]
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e63e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801e640:	68fb      	ldr	r3, [r7, #12]
 801e642:	681b      	ldr	r3, [r3, #0]
 801e644:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801e646:	68bb      	ldr	r3, [r7, #8]
 801e648:	691b      	ldr	r3, [r3, #16]
 801e64a:	021a      	lsls	r2, r3, #8
 801e64c:	68fb      	ldr	r3, [r7, #12]
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	430a      	orrs	r2, r1
 801e652:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801e654:	e000      	b.n	801e658 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 801e656:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801e658:	68fb      	ldr	r3, [r7, #12]
 801e65a:	2200      	movs	r2, #0
 801e65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e660:	2300      	movs	r3, #0
}
 801e662:	4618      	mov	r0, r3
 801e664:	3710      	adds	r7, #16
 801e666:	46bd      	mov	sp, r7
 801e668:	bd80      	pop	{r7, pc}
 801e66a:	bf00      	nop

0801e66c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801e66c:	b580      	push	{r7, lr}
 801e66e:	b084      	sub	sp, #16
 801e670:	af00      	add	r7, sp, #0
 801e672:	6078      	str	r0, [r7, #4]
 801e674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e67c:	2b01      	cmp	r3, #1
 801e67e:	d101      	bne.n	801e684 <HAL_TIM_ConfigClockSource+0x18>
 801e680:	2302      	movs	r3, #2
 801e682:	e0b7      	b.n	801e7f4 <HAL_TIM_ConfigClockSource+0x188>
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	2201      	movs	r2, #1
 801e688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	2202      	movs	r2, #2
 801e690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	681b      	ldr	r3, [r3, #0]
 801e698:	689b      	ldr	r3, [r3, #8]
 801e69a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801e69c:	68fa      	ldr	r2, [r7, #12]
 801e69e:	4b57      	ldr	r3, [pc, #348]	; (801e7fc <HAL_TIM_ConfigClockSource+0x190>)
 801e6a0:	4013      	ands	r3, r2
 801e6a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801e6a4:	68fb      	ldr	r3, [r7, #12]
 801e6a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801e6aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	68fa      	ldr	r2, [r7, #12]
 801e6b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801e6b4:	683b      	ldr	r3, [r7, #0]
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	2b70      	cmp	r3, #112	; 0x70
 801e6ba:	d02e      	beq.n	801e71a <HAL_TIM_ConfigClockSource+0xae>
 801e6bc:	2b70      	cmp	r3, #112	; 0x70
 801e6be:	d812      	bhi.n	801e6e6 <HAL_TIM_ConfigClockSource+0x7a>
 801e6c0:	2b30      	cmp	r3, #48	; 0x30
 801e6c2:	f000 8084 	beq.w	801e7ce <HAL_TIM_ConfigClockSource+0x162>
 801e6c6:	2b30      	cmp	r3, #48	; 0x30
 801e6c8:	d806      	bhi.n	801e6d8 <HAL_TIM_ConfigClockSource+0x6c>
 801e6ca:	2b10      	cmp	r3, #16
 801e6cc:	d07f      	beq.n	801e7ce <HAL_TIM_ConfigClockSource+0x162>
 801e6ce:	2b20      	cmp	r3, #32
 801e6d0:	d07d      	beq.n	801e7ce <HAL_TIM_ConfigClockSource+0x162>
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d07b      	beq.n	801e7ce <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801e6d6:	e084      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 801e6d8:	2b50      	cmp	r3, #80	; 0x50
 801e6da:	d048      	beq.n	801e76e <HAL_TIM_ConfigClockSource+0x102>
 801e6dc:	2b60      	cmp	r3, #96	; 0x60
 801e6de:	d056      	beq.n	801e78e <HAL_TIM_ConfigClockSource+0x122>
 801e6e0:	2b40      	cmp	r3, #64	; 0x40
 801e6e2:	d064      	beq.n	801e7ae <HAL_TIM_ConfigClockSource+0x142>
      break;
 801e6e4:	e07d      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 801e6e6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801e6ea:	d070      	beq.n	801e7ce <HAL_TIM_ConfigClockSource+0x162>
 801e6ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801e6f0:	d809      	bhi.n	801e706 <HAL_TIM_ConfigClockSource+0x9a>
 801e6f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e6f6:	d027      	beq.n	801e748 <HAL_TIM_ConfigClockSource+0xdc>
 801e6f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e6fc:	d067      	beq.n	801e7ce <HAL_TIM_ConfigClockSource+0x162>
 801e6fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e702:	d06d      	beq.n	801e7e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801e704:	e06d      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 801e706:	4a3e      	ldr	r2, [pc, #248]	; (801e800 <HAL_TIM_ConfigClockSource+0x194>)
 801e708:	4293      	cmp	r3, r2
 801e70a:	d060      	beq.n	801e7ce <HAL_TIM_ConfigClockSource+0x162>
 801e70c:	4a3d      	ldr	r2, [pc, #244]	; (801e804 <HAL_TIM_ConfigClockSource+0x198>)
 801e70e:	4293      	cmp	r3, r2
 801e710:	d05d      	beq.n	801e7ce <HAL_TIM_ConfigClockSource+0x162>
 801e712:	4a3d      	ldr	r2, [pc, #244]	; (801e808 <HAL_TIM_ConfigClockSource+0x19c>)
 801e714:	4293      	cmp	r3, r2
 801e716:	d05a      	beq.n	801e7ce <HAL_TIM_ConfigClockSource+0x162>
      break;
 801e718:	e063      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	6818      	ldr	r0, [r3, #0]
 801e71e:	683b      	ldr	r3, [r7, #0]
 801e720:	6899      	ldr	r1, [r3, #8]
 801e722:	683b      	ldr	r3, [r7, #0]
 801e724:	685a      	ldr	r2, [r3, #4]
 801e726:	683b      	ldr	r3, [r7, #0]
 801e728:	68db      	ldr	r3, [r3, #12]
 801e72a:	f000 fcb7 	bl	801f09c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	681b      	ldr	r3, [r3, #0]
 801e732:	689b      	ldr	r3, [r3, #8]
 801e734:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801e73c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	681b      	ldr	r3, [r3, #0]
 801e742:	68fa      	ldr	r2, [r7, #12]
 801e744:	609a      	str	r2, [r3, #8]
      break;
 801e746:	e04c      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	6818      	ldr	r0, [r3, #0]
 801e74c:	683b      	ldr	r3, [r7, #0]
 801e74e:	6899      	ldr	r1, [r3, #8]
 801e750:	683b      	ldr	r3, [r7, #0]
 801e752:	685a      	ldr	r2, [r3, #4]
 801e754:	683b      	ldr	r3, [r7, #0]
 801e756:	68db      	ldr	r3, [r3, #12]
 801e758:	f000 fca0 	bl	801f09c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	689a      	ldr	r2, [r3, #8]
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e76a:	609a      	str	r2, [r3, #8]
      break;
 801e76c:	e039      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	6818      	ldr	r0, [r3, #0]
 801e772:	683b      	ldr	r3, [r7, #0]
 801e774:	6859      	ldr	r1, [r3, #4]
 801e776:	683b      	ldr	r3, [r7, #0]
 801e778:	68db      	ldr	r3, [r3, #12]
 801e77a:	461a      	mov	r2, r3
 801e77c:	f000 fc10 	bl	801efa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801e780:	687b      	ldr	r3, [r7, #4]
 801e782:	681b      	ldr	r3, [r3, #0]
 801e784:	2150      	movs	r1, #80	; 0x50
 801e786:	4618      	mov	r0, r3
 801e788:	f000 fc6a 	bl	801f060 <TIM_ITRx_SetConfig>
      break;
 801e78c:	e029      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	6818      	ldr	r0, [r3, #0]
 801e792:	683b      	ldr	r3, [r7, #0]
 801e794:	6859      	ldr	r1, [r3, #4]
 801e796:	683b      	ldr	r3, [r7, #0]
 801e798:	68db      	ldr	r3, [r3, #12]
 801e79a:	461a      	mov	r2, r3
 801e79c:	f000 fc2f 	bl	801effe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	2160      	movs	r1, #96	; 0x60
 801e7a6:	4618      	mov	r0, r3
 801e7a8:	f000 fc5a 	bl	801f060 <TIM_ITRx_SetConfig>
      break;
 801e7ac:	e019      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	6818      	ldr	r0, [r3, #0]
 801e7b2:	683b      	ldr	r3, [r7, #0]
 801e7b4:	6859      	ldr	r1, [r3, #4]
 801e7b6:	683b      	ldr	r3, [r7, #0]
 801e7b8:	68db      	ldr	r3, [r3, #12]
 801e7ba:	461a      	mov	r2, r3
 801e7bc:	f000 fbf0 	bl	801efa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	681b      	ldr	r3, [r3, #0]
 801e7c4:	2140      	movs	r1, #64	; 0x40
 801e7c6:	4618      	mov	r0, r3
 801e7c8:	f000 fc4a 	bl	801f060 <TIM_ITRx_SetConfig>
      break;
 801e7cc:	e009      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	681a      	ldr	r2, [r3, #0]
 801e7d2:	683b      	ldr	r3, [r7, #0]
 801e7d4:	681b      	ldr	r3, [r3, #0]
 801e7d6:	4619      	mov	r1, r3
 801e7d8:	4610      	mov	r0, r2
 801e7da:	f000 fc41 	bl	801f060 <TIM_ITRx_SetConfig>
      break;
 801e7de:	e000      	b.n	801e7e2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 801e7e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	2201      	movs	r2, #1
 801e7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	2200      	movs	r2, #0
 801e7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801e7f2:	2300      	movs	r3, #0
}
 801e7f4:	4618      	mov	r0, r3
 801e7f6:	3710      	adds	r7, #16
 801e7f8:	46bd      	mov	sp, r7
 801e7fa:	bd80      	pop	{r7, pc}
 801e7fc:	ffceff88 	.word	0xffceff88
 801e800:	00100030 	.word	0x00100030
 801e804:	00100040 	.word	0x00100040
 801e808:	00100020 	.word	0x00100020

0801e80c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e80c:	b480      	push	{r7}
 801e80e:	b085      	sub	sp, #20
 801e810:	af00      	add	r7, sp, #0
 801e812:	6078      	str	r0, [r7, #4]
 801e814:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801e816:	2300      	movs	r3, #0
 801e818:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801e81a:	683b      	ldr	r3, [r7, #0]
 801e81c:	2b0c      	cmp	r3, #12
 801e81e:	d831      	bhi.n	801e884 <HAL_TIM_ReadCapturedValue+0x78>
 801e820:	a201      	add	r2, pc, #4	; (adr r2, 801e828 <HAL_TIM_ReadCapturedValue+0x1c>)
 801e822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e826:	bf00      	nop
 801e828:	0801e85d 	.word	0x0801e85d
 801e82c:	0801e885 	.word	0x0801e885
 801e830:	0801e885 	.word	0x0801e885
 801e834:	0801e885 	.word	0x0801e885
 801e838:	0801e867 	.word	0x0801e867
 801e83c:	0801e885 	.word	0x0801e885
 801e840:	0801e885 	.word	0x0801e885
 801e844:	0801e885 	.word	0x0801e885
 801e848:	0801e871 	.word	0x0801e871
 801e84c:	0801e885 	.word	0x0801e885
 801e850:	0801e885 	.word	0x0801e885
 801e854:	0801e885 	.word	0x0801e885
 801e858:	0801e87b 	.word	0x0801e87b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e862:	60fb      	str	r3, [r7, #12]

      break;
 801e864:	e00f      	b.n	801e886 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e86c:	60fb      	str	r3, [r7, #12]

      break;
 801e86e:	e00a      	b.n	801e886 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801e870:	687b      	ldr	r3, [r7, #4]
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e876:	60fb      	str	r3, [r7, #12]

      break;
 801e878:	e005      	b.n	801e886 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e880:	60fb      	str	r3, [r7, #12]

      break;
 801e882:	e000      	b.n	801e886 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801e884:	bf00      	nop
  }

  return tmpreg;
 801e886:	68fb      	ldr	r3, [r7, #12]
}
 801e888:	4618      	mov	r0, r3
 801e88a:	3714      	adds	r7, #20
 801e88c:	46bd      	mov	sp, r7
 801e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e892:	4770      	bx	lr

0801e894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e894:	b480      	push	{r7}
 801e896:	b083      	sub	sp, #12
 801e898:	af00      	add	r7, sp, #0
 801e89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801e89c:	bf00      	nop
 801e89e:	370c      	adds	r7, #12
 801e8a0:	46bd      	mov	sp, r7
 801e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8a6:	4770      	bx	lr

0801e8a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801e8a8:	b480      	push	{r7}
 801e8aa:	b083      	sub	sp, #12
 801e8ac:	af00      	add	r7, sp, #0
 801e8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801e8b0:	bf00      	nop
 801e8b2:	370c      	adds	r7, #12
 801e8b4:	46bd      	mov	sp, r7
 801e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ba:	4770      	bx	lr

0801e8bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801e8bc:	b480      	push	{r7}
 801e8be:	b083      	sub	sp, #12
 801e8c0:	af00      	add	r7, sp, #0
 801e8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801e8c4:	bf00      	nop
 801e8c6:	370c      	adds	r7, #12
 801e8c8:	46bd      	mov	sp, r7
 801e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ce:	4770      	bx	lr

0801e8d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801e8d0:	b480      	push	{r7}
 801e8d2:	b085      	sub	sp, #20
 801e8d4:	af00      	add	r7, sp, #0
 801e8d6:	6078      	str	r0, [r7, #4]
 801e8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	4a40      	ldr	r2, [pc, #256]	; (801e9e4 <TIM_Base_SetConfig+0x114>)
 801e8e4:	4293      	cmp	r3, r2
 801e8e6:	d013      	beq.n	801e910 <TIM_Base_SetConfig+0x40>
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e8ee:	d00f      	beq.n	801e910 <TIM_Base_SetConfig+0x40>
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	4a3d      	ldr	r2, [pc, #244]	; (801e9e8 <TIM_Base_SetConfig+0x118>)
 801e8f4:	4293      	cmp	r3, r2
 801e8f6:	d00b      	beq.n	801e910 <TIM_Base_SetConfig+0x40>
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	4a3c      	ldr	r2, [pc, #240]	; (801e9ec <TIM_Base_SetConfig+0x11c>)
 801e8fc:	4293      	cmp	r3, r2
 801e8fe:	d007      	beq.n	801e910 <TIM_Base_SetConfig+0x40>
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	4a3b      	ldr	r2, [pc, #236]	; (801e9f0 <TIM_Base_SetConfig+0x120>)
 801e904:	4293      	cmp	r3, r2
 801e906:	d003      	beq.n	801e910 <TIM_Base_SetConfig+0x40>
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	4a3a      	ldr	r2, [pc, #232]	; (801e9f4 <TIM_Base_SetConfig+0x124>)
 801e90c:	4293      	cmp	r3, r2
 801e90e:	d108      	bne.n	801e922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801e910:	68fb      	ldr	r3, [r7, #12]
 801e912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801e918:	683b      	ldr	r3, [r7, #0]
 801e91a:	685b      	ldr	r3, [r3, #4]
 801e91c:	68fa      	ldr	r2, [r7, #12]
 801e91e:	4313      	orrs	r3, r2
 801e920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	4a2f      	ldr	r2, [pc, #188]	; (801e9e4 <TIM_Base_SetConfig+0x114>)
 801e926:	4293      	cmp	r3, r2
 801e928:	d01f      	beq.n	801e96a <TIM_Base_SetConfig+0x9a>
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e930:	d01b      	beq.n	801e96a <TIM_Base_SetConfig+0x9a>
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	4a2c      	ldr	r2, [pc, #176]	; (801e9e8 <TIM_Base_SetConfig+0x118>)
 801e936:	4293      	cmp	r3, r2
 801e938:	d017      	beq.n	801e96a <TIM_Base_SetConfig+0x9a>
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	4a2b      	ldr	r2, [pc, #172]	; (801e9ec <TIM_Base_SetConfig+0x11c>)
 801e93e:	4293      	cmp	r3, r2
 801e940:	d013      	beq.n	801e96a <TIM_Base_SetConfig+0x9a>
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	4a2a      	ldr	r2, [pc, #168]	; (801e9f0 <TIM_Base_SetConfig+0x120>)
 801e946:	4293      	cmp	r3, r2
 801e948:	d00f      	beq.n	801e96a <TIM_Base_SetConfig+0x9a>
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	4a29      	ldr	r2, [pc, #164]	; (801e9f4 <TIM_Base_SetConfig+0x124>)
 801e94e:	4293      	cmp	r3, r2
 801e950:	d00b      	beq.n	801e96a <TIM_Base_SetConfig+0x9a>
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	4a28      	ldr	r2, [pc, #160]	; (801e9f8 <TIM_Base_SetConfig+0x128>)
 801e956:	4293      	cmp	r3, r2
 801e958:	d007      	beq.n	801e96a <TIM_Base_SetConfig+0x9a>
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	4a27      	ldr	r2, [pc, #156]	; (801e9fc <TIM_Base_SetConfig+0x12c>)
 801e95e:	4293      	cmp	r3, r2
 801e960:	d003      	beq.n	801e96a <TIM_Base_SetConfig+0x9a>
 801e962:	687b      	ldr	r3, [r7, #4]
 801e964:	4a26      	ldr	r2, [pc, #152]	; (801ea00 <TIM_Base_SetConfig+0x130>)
 801e966:	4293      	cmp	r3, r2
 801e968:	d108      	bne.n	801e97c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801e970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801e972:	683b      	ldr	r3, [r7, #0]
 801e974:	68db      	ldr	r3, [r3, #12]
 801e976:	68fa      	ldr	r2, [r7, #12]
 801e978:	4313      	orrs	r3, r2
 801e97a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801e97c:	68fb      	ldr	r3, [r7, #12]
 801e97e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801e982:	683b      	ldr	r3, [r7, #0]
 801e984:	695b      	ldr	r3, [r3, #20]
 801e986:	4313      	orrs	r3, r2
 801e988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	68fa      	ldr	r2, [r7, #12]
 801e98e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801e990:	683b      	ldr	r3, [r7, #0]
 801e992:	689a      	ldr	r2, [r3, #8]
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801e998:	683b      	ldr	r3, [r7, #0]
 801e99a:	681a      	ldr	r2, [r3, #0]
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	4a10      	ldr	r2, [pc, #64]	; (801e9e4 <TIM_Base_SetConfig+0x114>)
 801e9a4:	4293      	cmp	r3, r2
 801e9a6:	d00f      	beq.n	801e9c8 <TIM_Base_SetConfig+0xf8>
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	4a12      	ldr	r2, [pc, #72]	; (801e9f4 <TIM_Base_SetConfig+0x124>)
 801e9ac:	4293      	cmp	r3, r2
 801e9ae:	d00b      	beq.n	801e9c8 <TIM_Base_SetConfig+0xf8>
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	4a11      	ldr	r2, [pc, #68]	; (801e9f8 <TIM_Base_SetConfig+0x128>)
 801e9b4:	4293      	cmp	r3, r2
 801e9b6:	d007      	beq.n	801e9c8 <TIM_Base_SetConfig+0xf8>
 801e9b8:	687b      	ldr	r3, [r7, #4]
 801e9ba:	4a10      	ldr	r2, [pc, #64]	; (801e9fc <TIM_Base_SetConfig+0x12c>)
 801e9bc:	4293      	cmp	r3, r2
 801e9be:	d003      	beq.n	801e9c8 <TIM_Base_SetConfig+0xf8>
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	4a0f      	ldr	r2, [pc, #60]	; (801ea00 <TIM_Base_SetConfig+0x130>)
 801e9c4:	4293      	cmp	r3, r2
 801e9c6:	d103      	bne.n	801e9d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801e9c8:	683b      	ldr	r3, [r7, #0]
 801e9ca:	691a      	ldr	r2, [r3, #16]
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	2201      	movs	r2, #1
 801e9d4:	615a      	str	r2, [r3, #20]
}
 801e9d6:	bf00      	nop
 801e9d8:	3714      	adds	r7, #20
 801e9da:	46bd      	mov	sp, r7
 801e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9e0:	4770      	bx	lr
 801e9e2:	bf00      	nop
 801e9e4:	40010000 	.word	0x40010000
 801e9e8:	40000400 	.word	0x40000400
 801e9ec:	40000800 	.word	0x40000800
 801e9f0:	40000c00 	.word	0x40000c00
 801e9f4:	40010400 	.word	0x40010400
 801e9f8:	40014000 	.word	0x40014000
 801e9fc:	40014400 	.word	0x40014400
 801ea00:	40014800 	.word	0x40014800

0801ea04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ea04:	b480      	push	{r7}
 801ea06:	b087      	sub	sp, #28
 801ea08:	af00      	add	r7, sp, #0
 801ea0a:	6078      	str	r0, [r7, #4]
 801ea0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	6a1b      	ldr	r3, [r3, #32]
 801ea12:	f023 0201 	bic.w	r2, r3, #1
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	6a1b      	ldr	r3, [r3, #32]
 801ea1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	685b      	ldr	r3, [r3, #4]
 801ea24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	699b      	ldr	r3, [r3, #24]
 801ea2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ea2c:	68fa      	ldr	r2, [r7, #12]
 801ea2e:	4b37      	ldr	r3, [pc, #220]	; (801eb0c <TIM_OC1_SetConfig+0x108>)
 801ea30:	4013      	ands	r3, r2
 801ea32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ea34:	68fb      	ldr	r3, [r7, #12]
 801ea36:	f023 0303 	bic.w	r3, r3, #3
 801ea3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ea3c:	683b      	ldr	r3, [r7, #0]
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	68fa      	ldr	r2, [r7, #12]
 801ea42:	4313      	orrs	r3, r2
 801ea44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ea46:	697b      	ldr	r3, [r7, #20]
 801ea48:	f023 0302 	bic.w	r3, r3, #2
 801ea4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ea4e:	683b      	ldr	r3, [r7, #0]
 801ea50:	689b      	ldr	r3, [r3, #8]
 801ea52:	697a      	ldr	r2, [r7, #20]
 801ea54:	4313      	orrs	r3, r2
 801ea56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ea58:	687b      	ldr	r3, [r7, #4]
 801ea5a:	4a2d      	ldr	r2, [pc, #180]	; (801eb10 <TIM_OC1_SetConfig+0x10c>)
 801ea5c:	4293      	cmp	r3, r2
 801ea5e:	d00f      	beq.n	801ea80 <TIM_OC1_SetConfig+0x7c>
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	4a2c      	ldr	r2, [pc, #176]	; (801eb14 <TIM_OC1_SetConfig+0x110>)
 801ea64:	4293      	cmp	r3, r2
 801ea66:	d00b      	beq.n	801ea80 <TIM_OC1_SetConfig+0x7c>
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	4a2b      	ldr	r2, [pc, #172]	; (801eb18 <TIM_OC1_SetConfig+0x114>)
 801ea6c:	4293      	cmp	r3, r2
 801ea6e:	d007      	beq.n	801ea80 <TIM_OC1_SetConfig+0x7c>
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	4a2a      	ldr	r2, [pc, #168]	; (801eb1c <TIM_OC1_SetConfig+0x118>)
 801ea74:	4293      	cmp	r3, r2
 801ea76:	d003      	beq.n	801ea80 <TIM_OC1_SetConfig+0x7c>
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	4a29      	ldr	r2, [pc, #164]	; (801eb20 <TIM_OC1_SetConfig+0x11c>)
 801ea7c:	4293      	cmp	r3, r2
 801ea7e:	d10c      	bne.n	801ea9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ea80:	697b      	ldr	r3, [r7, #20]
 801ea82:	f023 0308 	bic.w	r3, r3, #8
 801ea86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ea88:	683b      	ldr	r3, [r7, #0]
 801ea8a:	68db      	ldr	r3, [r3, #12]
 801ea8c:	697a      	ldr	r2, [r7, #20]
 801ea8e:	4313      	orrs	r3, r2
 801ea90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ea92:	697b      	ldr	r3, [r7, #20]
 801ea94:	f023 0304 	bic.w	r3, r3, #4
 801ea98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	4a1c      	ldr	r2, [pc, #112]	; (801eb10 <TIM_OC1_SetConfig+0x10c>)
 801ea9e:	4293      	cmp	r3, r2
 801eaa0:	d00f      	beq.n	801eac2 <TIM_OC1_SetConfig+0xbe>
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	4a1b      	ldr	r2, [pc, #108]	; (801eb14 <TIM_OC1_SetConfig+0x110>)
 801eaa6:	4293      	cmp	r3, r2
 801eaa8:	d00b      	beq.n	801eac2 <TIM_OC1_SetConfig+0xbe>
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	4a1a      	ldr	r2, [pc, #104]	; (801eb18 <TIM_OC1_SetConfig+0x114>)
 801eaae:	4293      	cmp	r3, r2
 801eab0:	d007      	beq.n	801eac2 <TIM_OC1_SetConfig+0xbe>
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	4a19      	ldr	r2, [pc, #100]	; (801eb1c <TIM_OC1_SetConfig+0x118>)
 801eab6:	4293      	cmp	r3, r2
 801eab8:	d003      	beq.n	801eac2 <TIM_OC1_SetConfig+0xbe>
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	4a18      	ldr	r2, [pc, #96]	; (801eb20 <TIM_OC1_SetConfig+0x11c>)
 801eabe:	4293      	cmp	r3, r2
 801eac0:	d111      	bne.n	801eae6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801eac2:	693b      	ldr	r3, [r7, #16]
 801eac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801eac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801eaca:	693b      	ldr	r3, [r7, #16]
 801eacc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ead0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801ead2:	683b      	ldr	r3, [r7, #0]
 801ead4:	695b      	ldr	r3, [r3, #20]
 801ead6:	693a      	ldr	r2, [r7, #16]
 801ead8:	4313      	orrs	r3, r2
 801eada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801eadc:	683b      	ldr	r3, [r7, #0]
 801eade:	699b      	ldr	r3, [r3, #24]
 801eae0:	693a      	ldr	r2, [r7, #16]
 801eae2:	4313      	orrs	r3, r2
 801eae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	693a      	ldr	r2, [r7, #16]
 801eaea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	68fa      	ldr	r2, [r7, #12]
 801eaf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801eaf2:	683b      	ldr	r3, [r7, #0]
 801eaf4:	685a      	ldr	r2, [r3, #4]
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	697a      	ldr	r2, [r7, #20]
 801eafe:	621a      	str	r2, [r3, #32]
}
 801eb00:	bf00      	nop
 801eb02:	371c      	adds	r7, #28
 801eb04:	46bd      	mov	sp, r7
 801eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb0a:	4770      	bx	lr
 801eb0c:	fffeff8f 	.word	0xfffeff8f
 801eb10:	40010000 	.word	0x40010000
 801eb14:	40010400 	.word	0x40010400
 801eb18:	40014000 	.word	0x40014000
 801eb1c:	40014400 	.word	0x40014400
 801eb20:	40014800 	.word	0x40014800

0801eb24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801eb24:	b480      	push	{r7}
 801eb26:	b087      	sub	sp, #28
 801eb28:	af00      	add	r7, sp, #0
 801eb2a:	6078      	str	r0, [r7, #4]
 801eb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801eb2e:	687b      	ldr	r3, [r7, #4]
 801eb30:	6a1b      	ldr	r3, [r3, #32]
 801eb32:	f023 0210 	bic.w	r2, r3, #16
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	6a1b      	ldr	r3, [r3, #32]
 801eb3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	685b      	ldr	r3, [r3, #4]
 801eb44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	699b      	ldr	r3, [r3, #24]
 801eb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801eb4c:	68fa      	ldr	r2, [r7, #12]
 801eb4e:	4b34      	ldr	r3, [pc, #208]	; (801ec20 <TIM_OC2_SetConfig+0xfc>)
 801eb50:	4013      	ands	r3, r2
 801eb52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eb5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801eb5c:	683b      	ldr	r3, [r7, #0]
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	021b      	lsls	r3, r3, #8
 801eb62:	68fa      	ldr	r2, [r7, #12]
 801eb64:	4313      	orrs	r3, r2
 801eb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801eb68:	697b      	ldr	r3, [r7, #20]
 801eb6a:	f023 0320 	bic.w	r3, r3, #32
 801eb6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801eb70:	683b      	ldr	r3, [r7, #0]
 801eb72:	689b      	ldr	r3, [r3, #8]
 801eb74:	011b      	lsls	r3, r3, #4
 801eb76:	697a      	ldr	r2, [r7, #20]
 801eb78:	4313      	orrs	r3, r2
 801eb7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801eb7c:	687b      	ldr	r3, [r7, #4]
 801eb7e:	4a29      	ldr	r2, [pc, #164]	; (801ec24 <TIM_OC2_SetConfig+0x100>)
 801eb80:	4293      	cmp	r3, r2
 801eb82:	d003      	beq.n	801eb8c <TIM_OC2_SetConfig+0x68>
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	4a28      	ldr	r2, [pc, #160]	; (801ec28 <TIM_OC2_SetConfig+0x104>)
 801eb88:	4293      	cmp	r3, r2
 801eb8a:	d10d      	bne.n	801eba8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801eb8c:	697b      	ldr	r3, [r7, #20]
 801eb8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801eb92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801eb94:	683b      	ldr	r3, [r7, #0]
 801eb96:	68db      	ldr	r3, [r3, #12]
 801eb98:	011b      	lsls	r3, r3, #4
 801eb9a:	697a      	ldr	r2, [r7, #20]
 801eb9c:	4313      	orrs	r3, r2
 801eb9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801eba0:	697b      	ldr	r3, [r7, #20]
 801eba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801eba6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	4a1e      	ldr	r2, [pc, #120]	; (801ec24 <TIM_OC2_SetConfig+0x100>)
 801ebac:	4293      	cmp	r3, r2
 801ebae:	d00f      	beq.n	801ebd0 <TIM_OC2_SetConfig+0xac>
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	4a1d      	ldr	r2, [pc, #116]	; (801ec28 <TIM_OC2_SetConfig+0x104>)
 801ebb4:	4293      	cmp	r3, r2
 801ebb6:	d00b      	beq.n	801ebd0 <TIM_OC2_SetConfig+0xac>
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	4a1c      	ldr	r2, [pc, #112]	; (801ec2c <TIM_OC2_SetConfig+0x108>)
 801ebbc:	4293      	cmp	r3, r2
 801ebbe:	d007      	beq.n	801ebd0 <TIM_OC2_SetConfig+0xac>
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	4a1b      	ldr	r2, [pc, #108]	; (801ec30 <TIM_OC2_SetConfig+0x10c>)
 801ebc4:	4293      	cmp	r3, r2
 801ebc6:	d003      	beq.n	801ebd0 <TIM_OC2_SetConfig+0xac>
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	4a1a      	ldr	r2, [pc, #104]	; (801ec34 <TIM_OC2_SetConfig+0x110>)
 801ebcc:	4293      	cmp	r3, r2
 801ebce:	d113      	bne.n	801ebf8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801ebd0:	693b      	ldr	r3, [r7, #16]
 801ebd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ebd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801ebd8:	693b      	ldr	r3, [r7, #16]
 801ebda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ebde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801ebe0:	683b      	ldr	r3, [r7, #0]
 801ebe2:	695b      	ldr	r3, [r3, #20]
 801ebe4:	009b      	lsls	r3, r3, #2
 801ebe6:	693a      	ldr	r2, [r7, #16]
 801ebe8:	4313      	orrs	r3, r2
 801ebea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801ebec:	683b      	ldr	r3, [r7, #0]
 801ebee:	699b      	ldr	r3, [r3, #24]
 801ebf0:	009b      	lsls	r3, r3, #2
 801ebf2:	693a      	ldr	r2, [r7, #16]
 801ebf4:	4313      	orrs	r3, r2
 801ebf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	693a      	ldr	r2, [r7, #16]
 801ebfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	68fa      	ldr	r2, [r7, #12]
 801ec02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801ec04:	683b      	ldr	r3, [r7, #0]
 801ec06:	685a      	ldr	r2, [r3, #4]
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	697a      	ldr	r2, [r7, #20]
 801ec10:	621a      	str	r2, [r3, #32]
}
 801ec12:	bf00      	nop
 801ec14:	371c      	adds	r7, #28
 801ec16:	46bd      	mov	sp, r7
 801ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec1c:	4770      	bx	lr
 801ec1e:	bf00      	nop
 801ec20:	feff8fff 	.word	0xfeff8fff
 801ec24:	40010000 	.word	0x40010000
 801ec28:	40010400 	.word	0x40010400
 801ec2c:	40014000 	.word	0x40014000
 801ec30:	40014400 	.word	0x40014400
 801ec34:	40014800 	.word	0x40014800

0801ec38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ec38:	b480      	push	{r7}
 801ec3a:	b087      	sub	sp, #28
 801ec3c:	af00      	add	r7, sp, #0
 801ec3e:	6078      	str	r0, [r7, #4]
 801ec40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	6a1b      	ldr	r3, [r3, #32]
 801ec46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ec4a:	687b      	ldr	r3, [r7, #4]
 801ec4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	6a1b      	ldr	r3, [r3, #32]
 801ec52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	685b      	ldr	r3, [r3, #4]
 801ec58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	69db      	ldr	r3, [r3, #28]
 801ec5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ec66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ec68:	68fb      	ldr	r3, [r7, #12]
 801ec6a:	f023 0303 	bic.w	r3, r3, #3
 801ec6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ec70:	683b      	ldr	r3, [r7, #0]
 801ec72:	681b      	ldr	r3, [r3, #0]
 801ec74:	68fa      	ldr	r2, [r7, #12]
 801ec76:	4313      	orrs	r3, r2
 801ec78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ec7a:	697b      	ldr	r3, [r7, #20]
 801ec7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ec80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ec82:	683b      	ldr	r3, [r7, #0]
 801ec84:	689b      	ldr	r3, [r3, #8]
 801ec86:	021b      	lsls	r3, r3, #8
 801ec88:	697a      	ldr	r2, [r7, #20]
 801ec8a:	4313      	orrs	r3, r2
 801ec8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ec8e:	687b      	ldr	r3, [r7, #4]
 801ec90:	4a27      	ldr	r2, [pc, #156]	; (801ed30 <TIM_OC3_SetConfig+0xf8>)
 801ec92:	4293      	cmp	r3, r2
 801ec94:	d003      	beq.n	801ec9e <TIM_OC3_SetConfig+0x66>
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	4a26      	ldr	r2, [pc, #152]	; (801ed34 <TIM_OC3_SetConfig+0xfc>)
 801ec9a:	4293      	cmp	r3, r2
 801ec9c:	d10d      	bne.n	801ecba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ec9e:	697b      	ldr	r3, [r7, #20]
 801eca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801eca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801eca6:	683b      	ldr	r3, [r7, #0]
 801eca8:	68db      	ldr	r3, [r3, #12]
 801ecaa:	021b      	lsls	r3, r3, #8
 801ecac:	697a      	ldr	r2, [r7, #20]
 801ecae:	4313      	orrs	r3, r2
 801ecb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ecb2:	697b      	ldr	r3, [r7, #20]
 801ecb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ecb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	4a1c      	ldr	r2, [pc, #112]	; (801ed30 <TIM_OC3_SetConfig+0xf8>)
 801ecbe:	4293      	cmp	r3, r2
 801ecc0:	d00f      	beq.n	801ece2 <TIM_OC3_SetConfig+0xaa>
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	4a1b      	ldr	r2, [pc, #108]	; (801ed34 <TIM_OC3_SetConfig+0xfc>)
 801ecc6:	4293      	cmp	r3, r2
 801ecc8:	d00b      	beq.n	801ece2 <TIM_OC3_SetConfig+0xaa>
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	4a1a      	ldr	r2, [pc, #104]	; (801ed38 <TIM_OC3_SetConfig+0x100>)
 801ecce:	4293      	cmp	r3, r2
 801ecd0:	d007      	beq.n	801ece2 <TIM_OC3_SetConfig+0xaa>
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	4a19      	ldr	r2, [pc, #100]	; (801ed3c <TIM_OC3_SetConfig+0x104>)
 801ecd6:	4293      	cmp	r3, r2
 801ecd8:	d003      	beq.n	801ece2 <TIM_OC3_SetConfig+0xaa>
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	4a18      	ldr	r2, [pc, #96]	; (801ed40 <TIM_OC3_SetConfig+0x108>)
 801ecde:	4293      	cmp	r3, r2
 801ece0:	d113      	bne.n	801ed0a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ece2:	693b      	ldr	r3, [r7, #16]
 801ece4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ece8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ecea:	693b      	ldr	r3, [r7, #16]
 801ecec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ecf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ecf2:	683b      	ldr	r3, [r7, #0]
 801ecf4:	695b      	ldr	r3, [r3, #20]
 801ecf6:	011b      	lsls	r3, r3, #4
 801ecf8:	693a      	ldr	r2, [r7, #16]
 801ecfa:	4313      	orrs	r3, r2
 801ecfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ecfe:	683b      	ldr	r3, [r7, #0]
 801ed00:	699b      	ldr	r3, [r3, #24]
 801ed02:	011b      	lsls	r3, r3, #4
 801ed04:	693a      	ldr	r2, [r7, #16]
 801ed06:	4313      	orrs	r3, r2
 801ed08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	693a      	ldr	r2, [r7, #16]
 801ed0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	68fa      	ldr	r2, [r7, #12]
 801ed14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ed16:	683b      	ldr	r3, [r7, #0]
 801ed18:	685a      	ldr	r2, [r3, #4]
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ed1e:	687b      	ldr	r3, [r7, #4]
 801ed20:	697a      	ldr	r2, [r7, #20]
 801ed22:	621a      	str	r2, [r3, #32]
}
 801ed24:	bf00      	nop
 801ed26:	371c      	adds	r7, #28
 801ed28:	46bd      	mov	sp, r7
 801ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed2e:	4770      	bx	lr
 801ed30:	40010000 	.word	0x40010000
 801ed34:	40010400 	.word	0x40010400
 801ed38:	40014000 	.word	0x40014000
 801ed3c:	40014400 	.word	0x40014400
 801ed40:	40014800 	.word	0x40014800

0801ed44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ed44:	b480      	push	{r7}
 801ed46:	b087      	sub	sp, #28
 801ed48:	af00      	add	r7, sp, #0
 801ed4a:	6078      	str	r0, [r7, #4]
 801ed4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	6a1b      	ldr	r3, [r3, #32]
 801ed52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	6a1b      	ldr	r3, [r3, #32]
 801ed5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	685b      	ldr	r3, [r3, #4]
 801ed64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	69db      	ldr	r3, [r3, #28]
 801ed6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801ed6c:	68fb      	ldr	r3, [r7, #12]
 801ed6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ed72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ed74:	68fb      	ldr	r3, [r7, #12]
 801ed76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ed7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ed7c:	683b      	ldr	r3, [r7, #0]
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	021b      	lsls	r3, r3, #8
 801ed82:	68fa      	ldr	r2, [r7, #12]
 801ed84:	4313      	orrs	r3, r2
 801ed86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ed88:	693b      	ldr	r3, [r7, #16]
 801ed8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ed8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ed90:	683b      	ldr	r3, [r7, #0]
 801ed92:	689b      	ldr	r3, [r3, #8]
 801ed94:	031b      	lsls	r3, r3, #12
 801ed96:	693a      	ldr	r2, [r7, #16]
 801ed98:	4313      	orrs	r3, r2
 801ed9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	4a18      	ldr	r2, [pc, #96]	; (801ee00 <TIM_OC4_SetConfig+0xbc>)
 801eda0:	4293      	cmp	r3, r2
 801eda2:	d00f      	beq.n	801edc4 <TIM_OC4_SetConfig+0x80>
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	4a17      	ldr	r2, [pc, #92]	; (801ee04 <TIM_OC4_SetConfig+0xc0>)
 801eda8:	4293      	cmp	r3, r2
 801edaa:	d00b      	beq.n	801edc4 <TIM_OC4_SetConfig+0x80>
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	4a16      	ldr	r2, [pc, #88]	; (801ee08 <TIM_OC4_SetConfig+0xc4>)
 801edb0:	4293      	cmp	r3, r2
 801edb2:	d007      	beq.n	801edc4 <TIM_OC4_SetConfig+0x80>
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	4a15      	ldr	r2, [pc, #84]	; (801ee0c <TIM_OC4_SetConfig+0xc8>)
 801edb8:	4293      	cmp	r3, r2
 801edba:	d003      	beq.n	801edc4 <TIM_OC4_SetConfig+0x80>
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	4a14      	ldr	r2, [pc, #80]	; (801ee10 <TIM_OC4_SetConfig+0xcc>)
 801edc0:	4293      	cmp	r3, r2
 801edc2:	d109      	bne.n	801edd8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801edc4:	697b      	ldr	r3, [r7, #20]
 801edc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801edca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801edcc:	683b      	ldr	r3, [r7, #0]
 801edce:	695b      	ldr	r3, [r3, #20]
 801edd0:	019b      	lsls	r3, r3, #6
 801edd2:	697a      	ldr	r2, [r7, #20]
 801edd4:	4313      	orrs	r3, r2
 801edd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	697a      	ldr	r2, [r7, #20]
 801eddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	68fa      	ldr	r2, [r7, #12]
 801ede2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801ede4:	683b      	ldr	r3, [r7, #0]
 801ede6:	685a      	ldr	r2, [r3, #4]
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	693a      	ldr	r2, [r7, #16]
 801edf0:	621a      	str	r2, [r3, #32]
}
 801edf2:	bf00      	nop
 801edf4:	371c      	adds	r7, #28
 801edf6:	46bd      	mov	sp, r7
 801edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edfc:	4770      	bx	lr
 801edfe:	bf00      	nop
 801ee00:	40010000 	.word	0x40010000
 801ee04:	40010400 	.word	0x40010400
 801ee08:	40014000 	.word	0x40014000
 801ee0c:	40014400 	.word	0x40014400
 801ee10:	40014800 	.word	0x40014800

0801ee14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801ee14:	b480      	push	{r7}
 801ee16:	b087      	sub	sp, #28
 801ee18:	af00      	add	r7, sp, #0
 801ee1a:	6078      	str	r0, [r7, #4]
 801ee1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	6a1b      	ldr	r3, [r3, #32]
 801ee22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	6a1b      	ldr	r3, [r3, #32]
 801ee2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	685b      	ldr	r3, [r3, #4]
 801ee34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ee3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801ee3c:	68fb      	ldr	r3, [r7, #12]
 801ee3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ee42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ee44:	683b      	ldr	r3, [r7, #0]
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	68fa      	ldr	r2, [r7, #12]
 801ee4a:	4313      	orrs	r3, r2
 801ee4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801ee4e:	693b      	ldr	r3, [r7, #16]
 801ee50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801ee54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801ee56:	683b      	ldr	r3, [r7, #0]
 801ee58:	689b      	ldr	r3, [r3, #8]
 801ee5a:	041b      	lsls	r3, r3, #16
 801ee5c:	693a      	ldr	r2, [r7, #16]
 801ee5e:	4313      	orrs	r3, r2
 801ee60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	4a17      	ldr	r2, [pc, #92]	; (801eec4 <TIM_OC5_SetConfig+0xb0>)
 801ee66:	4293      	cmp	r3, r2
 801ee68:	d00f      	beq.n	801ee8a <TIM_OC5_SetConfig+0x76>
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	4a16      	ldr	r2, [pc, #88]	; (801eec8 <TIM_OC5_SetConfig+0xb4>)
 801ee6e:	4293      	cmp	r3, r2
 801ee70:	d00b      	beq.n	801ee8a <TIM_OC5_SetConfig+0x76>
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	4a15      	ldr	r2, [pc, #84]	; (801eecc <TIM_OC5_SetConfig+0xb8>)
 801ee76:	4293      	cmp	r3, r2
 801ee78:	d007      	beq.n	801ee8a <TIM_OC5_SetConfig+0x76>
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	4a14      	ldr	r2, [pc, #80]	; (801eed0 <TIM_OC5_SetConfig+0xbc>)
 801ee7e:	4293      	cmp	r3, r2
 801ee80:	d003      	beq.n	801ee8a <TIM_OC5_SetConfig+0x76>
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	4a13      	ldr	r2, [pc, #76]	; (801eed4 <TIM_OC5_SetConfig+0xc0>)
 801ee86:	4293      	cmp	r3, r2
 801ee88:	d109      	bne.n	801ee9e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801ee8a:	697b      	ldr	r3, [r7, #20]
 801ee8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ee90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801ee92:	683b      	ldr	r3, [r7, #0]
 801ee94:	695b      	ldr	r3, [r3, #20]
 801ee96:	021b      	lsls	r3, r3, #8
 801ee98:	697a      	ldr	r2, [r7, #20]
 801ee9a:	4313      	orrs	r3, r2
 801ee9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	697a      	ldr	r2, [r7, #20]
 801eea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	68fa      	ldr	r2, [r7, #12]
 801eea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801eeaa:	683b      	ldr	r3, [r7, #0]
 801eeac:	685a      	ldr	r2, [r3, #4]
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	693a      	ldr	r2, [r7, #16]
 801eeb6:	621a      	str	r2, [r3, #32]
}
 801eeb8:	bf00      	nop
 801eeba:	371c      	adds	r7, #28
 801eebc:	46bd      	mov	sp, r7
 801eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eec2:	4770      	bx	lr
 801eec4:	40010000 	.word	0x40010000
 801eec8:	40010400 	.word	0x40010400
 801eecc:	40014000 	.word	0x40014000
 801eed0:	40014400 	.word	0x40014400
 801eed4:	40014800 	.word	0x40014800

0801eed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801eed8:	b480      	push	{r7}
 801eeda:	b087      	sub	sp, #28
 801eedc:	af00      	add	r7, sp, #0
 801eede:	6078      	str	r0, [r7, #4]
 801eee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	6a1b      	ldr	r3, [r3, #32]
 801eee6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	6a1b      	ldr	r3, [r3, #32]
 801eef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	685b      	ldr	r3, [r3, #4]
 801eef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801eefe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801ef00:	68fb      	ldr	r3, [r7, #12]
 801ef02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ef06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ef08:	683b      	ldr	r3, [r7, #0]
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	021b      	lsls	r3, r3, #8
 801ef0e:	68fa      	ldr	r2, [r7, #12]
 801ef10:	4313      	orrs	r3, r2
 801ef12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801ef14:	693b      	ldr	r3, [r7, #16]
 801ef16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ef1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801ef1c:	683b      	ldr	r3, [r7, #0]
 801ef1e:	689b      	ldr	r3, [r3, #8]
 801ef20:	051b      	lsls	r3, r3, #20
 801ef22:	693a      	ldr	r2, [r7, #16]
 801ef24:	4313      	orrs	r3, r2
 801ef26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	4a18      	ldr	r2, [pc, #96]	; (801ef8c <TIM_OC6_SetConfig+0xb4>)
 801ef2c:	4293      	cmp	r3, r2
 801ef2e:	d00f      	beq.n	801ef50 <TIM_OC6_SetConfig+0x78>
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	4a17      	ldr	r2, [pc, #92]	; (801ef90 <TIM_OC6_SetConfig+0xb8>)
 801ef34:	4293      	cmp	r3, r2
 801ef36:	d00b      	beq.n	801ef50 <TIM_OC6_SetConfig+0x78>
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	4a16      	ldr	r2, [pc, #88]	; (801ef94 <TIM_OC6_SetConfig+0xbc>)
 801ef3c:	4293      	cmp	r3, r2
 801ef3e:	d007      	beq.n	801ef50 <TIM_OC6_SetConfig+0x78>
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	4a15      	ldr	r2, [pc, #84]	; (801ef98 <TIM_OC6_SetConfig+0xc0>)
 801ef44:	4293      	cmp	r3, r2
 801ef46:	d003      	beq.n	801ef50 <TIM_OC6_SetConfig+0x78>
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	4a14      	ldr	r2, [pc, #80]	; (801ef9c <TIM_OC6_SetConfig+0xc4>)
 801ef4c:	4293      	cmp	r3, r2
 801ef4e:	d109      	bne.n	801ef64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801ef50:	697b      	ldr	r3, [r7, #20]
 801ef52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801ef56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801ef58:	683b      	ldr	r3, [r7, #0]
 801ef5a:	695b      	ldr	r3, [r3, #20]
 801ef5c:	029b      	lsls	r3, r3, #10
 801ef5e:	697a      	ldr	r2, [r7, #20]
 801ef60:	4313      	orrs	r3, r2
 801ef62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	697a      	ldr	r2, [r7, #20]
 801ef68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	68fa      	ldr	r2, [r7, #12]
 801ef6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801ef70:	683b      	ldr	r3, [r7, #0]
 801ef72:	685a      	ldr	r2, [r3, #4]
 801ef74:	687b      	ldr	r3, [r7, #4]
 801ef76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	693a      	ldr	r2, [r7, #16]
 801ef7c:	621a      	str	r2, [r3, #32]
}
 801ef7e:	bf00      	nop
 801ef80:	371c      	adds	r7, #28
 801ef82:	46bd      	mov	sp, r7
 801ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef88:	4770      	bx	lr
 801ef8a:	bf00      	nop
 801ef8c:	40010000 	.word	0x40010000
 801ef90:	40010400 	.word	0x40010400
 801ef94:	40014000 	.word	0x40014000
 801ef98:	40014400 	.word	0x40014400
 801ef9c:	40014800 	.word	0x40014800

0801efa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801efa0:	b480      	push	{r7}
 801efa2:	b087      	sub	sp, #28
 801efa4:	af00      	add	r7, sp, #0
 801efa6:	60f8      	str	r0, [r7, #12]
 801efa8:	60b9      	str	r1, [r7, #8]
 801efaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801efac:	68fb      	ldr	r3, [r7, #12]
 801efae:	6a1b      	ldr	r3, [r3, #32]
 801efb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801efb2:	68fb      	ldr	r3, [r7, #12]
 801efb4:	6a1b      	ldr	r3, [r3, #32]
 801efb6:	f023 0201 	bic.w	r2, r3, #1
 801efba:	68fb      	ldr	r3, [r7, #12]
 801efbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801efbe:	68fb      	ldr	r3, [r7, #12]
 801efc0:	699b      	ldr	r3, [r3, #24]
 801efc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801efc4:	693b      	ldr	r3, [r7, #16]
 801efc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801efca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	011b      	lsls	r3, r3, #4
 801efd0:	693a      	ldr	r2, [r7, #16]
 801efd2:	4313      	orrs	r3, r2
 801efd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801efd6:	697b      	ldr	r3, [r7, #20]
 801efd8:	f023 030a 	bic.w	r3, r3, #10
 801efdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801efde:	697a      	ldr	r2, [r7, #20]
 801efe0:	68bb      	ldr	r3, [r7, #8]
 801efe2:	4313      	orrs	r3, r2
 801efe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801efe6:	68fb      	ldr	r3, [r7, #12]
 801efe8:	693a      	ldr	r2, [r7, #16]
 801efea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801efec:	68fb      	ldr	r3, [r7, #12]
 801efee:	697a      	ldr	r2, [r7, #20]
 801eff0:	621a      	str	r2, [r3, #32]
}
 801eff2:	bf00      	nop
 801eff4:	371c      	adds	r7, #28
 801eff6:	46bd      	mov	sp, r7
 801eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801effc:	4770      	bx	lr

0801effe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801effe:	b480      	push	{r7}
 801f000:	b087      	sub	sp, #28
 801f002:	af00      	add	r7, sp, #0
 801f004:	60f8      	str	r0, [r7, #12]
 801f006:	60b9      	str	r1, [r7, #8]
 801f008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801f00a:	68fb      	ldr	r3, [r7, #12]
 801f00c:	6a1b      	ldr	r3, [r3, #32]
 801f00e:	f023 0210 	bic.w	r2, r3, #16
 801f012:	68fb      	ldr	r3, [r7, #12]
 801f014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801f016:	68fb      	ldr	r3, [r7, #12]
 801f018:	699b      	ldr	r3, [r3, #24]
 801f01a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801f01c:	68fb      	ldr	r3, [r7, #12]
 801f01e:	6a1b      	ldr	r3, [r3, #32]
 801f020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801f022:	697b      	ldr	r3, [r7, #20]
 801f024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801f028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	031b      	lsls	r3, r3, #12
 801f02e:	697a      	ldr	r2, [r7, #20]
 801f030:	4313      	orrs	r3, r2
 801f032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801f034:	693b      	ldr	r3, [r7, #16]
 801f036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801f03a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801f03c:	68bb      	ldr	r3, [r7, #8]
 801f03e:	011b      	lsls	r3, r3, #4
 801f040:	693a      	ldr	r2, [r7, #16]
 801f042:	4313      	orrs	r3, r2
 801f044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801f046:	68fb      	ldr	r3, [r7, #12]
 801f048:	697a      	ldr	r2, [r7, #20]
 801f04a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801f04c:	68fb      	ldr	r3, [r7, #12]
 801f04e:	693a      	ldr	r2, [r7, #16]
 801f050:	621a      	str	r2, [r3, #32]
}
 801f052:	bf00      	nop
 801f054:	371c      	adds	r7, #28
 801f056:	46bd      	mov	sp, r7
 801f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f05c:	4770      	bx	lr
	...

0801f060 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801f060:	b480      	push	{r7}
 801f062:	b085      	sub	sp, #20
 801f064:	af00      	add	r7, sp, #0
 801f066:	6078      	str	r0, [r7, #4]
 801f068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	689b      	ldr	r3, [r3, #8]
 801f06e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801f070:	68fa      	ldr	r2, [r7, #12]
 801f072:	4b09      	ldr	r3, [pc, #36]	; (801f098 <TIM_ITRx_SetConfig+0x38>)
 801f074:	4013      	ands	r3, r2
 801f076:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801f078:	683a      	ldr	r2, [r7, #0]
 801f07a:	68fb      	ldr	r3, [r7, #12]
 801f07c:	4313      	orrs	r3, r2
 801f07e:	f043 0307 	orr.w	r3, r3, #7
 801f082:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	68fa      	ldr	r2, [r7, #12]
 801f088:	609a      	str	r2, [r3, #8]
}
 801f08a:	bf00      	nop
 801f08c:	3714      	adds	r7, #20
 801f08e:	46bd      	mov	sp, r7
 801f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f094:	4770      	bx	lr
 801f096:	bf00      	nop
 801f098:	ffcfff8f 	.word	0xffcfff8f

0801f09c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801f09c:	b480      	push	{r7}
 801f09e:	b087      	sub	sp, #28
 801f0a0:	af00      	add	r7, sp, #0
 801f0a2:	60f8      	str	r0, [r7, #12]
 801f0a4:	60b9      	str	r1, [r7, #8]
 801f0a6:	607a      	str	r2, [r7, #4]
 801f0a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801f0aa:	68fb      	ldr	r3, [r7, #12]
 801f0ac:	689b      	ldr	r3, [r3, #8]
 801f0ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f0b0:	697b      	ldr	r3, [r7, #20]
 801f0b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801f0b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801f0b8:	683b      	ldr	r3, [r7, #0]
 801f0ba:	021a      	lsls	r2, r3, #8
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	431a      	orrs	r2, r3
 801f0c0:	68bb      	ldr	r3, [r7, #8]
 801f0c2:	4313      	orrs	r3, r2
 801f0c4:	697a      	ldr	r2, [r7, #20]
 801f0c6:	4313      	orrs	r3, r2
 801f0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801f0ca:	68fb      	ldr	r3, [r7, #12]
 801f0cc:	697a      	ldr	r2, [r7, #20]
 801f0ce:	609a      	str	r2, [r3, #8]
}
 801f0d0:	bf00      	nop
 801f0d2:	371c      	adds	r7, #28
 801f0d4:	46bd      	mov	sp, r7
 801f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0da:	4770      	bx	lr

0801f0dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801f0dc:	b480      	push	{r7}
 801f0de:	b087      	sub	sp, #28
 801f0e0:	af00      	add	r7, sp, #0
 801f0e2:	60f8      	str	r0, [r7, #12]
 801f0e4:	60b9      	str	r1, [r7, #8]
 801f0e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801f0e8:	68bb      	ldr	r3, [r7, #8]
 801f0ea:	f003 031f 	and.w	r3, r3, #31
 801f0ee:	2201      	movs	r2, #1
 801f0f0:	fa02 f303 	lsl.w	r3, r2, r3
 801f0f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801f0f6:	68fb      	ldr	r3, [r7, #12]
 801f0f8:	6a1a      	ldr	r2, [r3, #32]
 801f0fa:	697b      	ldr	r3, [r7, #20]
 801f0fc:	43db      	mvns	r3, r3
 801f0fe:	401a      	ands	r2, r3
 801f100:	68fb      	ldr	r3, [r7, #12]
 801f102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801f104:	68fb      	ldr	r3, [r7, #12]
 801f106:	6a1a      	ldr	r2, [r3, #32]
 801f108:	68bb      	ldr	r3, [r7, #8]
 801f10a:	f003 031f 	and.w	r3, r3, #31
 801f10e:	6879      	ldr	r1, [r7, #4]
 801f110:	fa01 f303 	lsl.w	r3, r1, r3
 801f114:	431a      	orrs	r2, r3
 801f116:	68fb      	ldr	r3, [r7, #12]
 801f118:	621a      	str	r2, [r3, #32]
}
 801f11a:	bf00      	nop
 801f11c:	371c      	adds	r7, #28
 801f11e:	46bd      	mov	sp, r7
 801f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f124:	4770      	bx	lr
	...

0801f128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f128:	b480      	push	{r7}
 801f12a:	b085      	sub	sp, #20
 801f12c:	af00      	add	r7, sp, #0
 801f12e:	6078      	str	r0, [r7, #4]
 801f130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f138:	2b01      	cmp	r3, #1
 801f13a:	d101      	bne.n	801f140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f13c:	2302      	movs	r3, #2
 801f13e:	e068      	b.n	801f212 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	2201      	movs	r2, #1
 801f144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	2202      	movs	r2, #2
 801f14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	685b      	ldr	r3, [r3, #4]
 801f156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	689b      	ldr	r3, [r3, #8]
 801f15e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	4a2e      	ldr	r2, [pc, #184]	; (801f220 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801f166:	4293      	cmp	r3, r2
 801f168:	d004      	beq.n	801f174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	681b      	ldr	r3, [r3, #0]
 801f16e:	4a2d      	ldr	r2, [pc, #180]	; (801f224 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801f170:	4293      	cmp	r3, r2
 801f172:	d108      	bne.n	801f186 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f174:	68fb      	ldr	r3, [r7, #12]
 801f176:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801f17a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f17c:	683b      	ldr	r3, [r7, #0]
 801f17e:	685b      	ldr	r3, [r3, #4]
 801f180:	68fa      	ldr	r2, [r7, #12]
 801f182:	4313      	orrs	r3, r2
 801f184:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f186:	68fb      	ldr	r3, [r7, #12]
 801f188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f18c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f18e:	683b      	ldr	r3, [r7, #0]
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	68fa      	ldr	r2, [r7, #12]
 801f194:	4313      	orrs	r3, r2
 801f196:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	68fa      	ldr	r2, [r7, #12]
 801f19e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	4a1e      	ldr	r2, [pc, #120]	; (801f220 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801f1a6:	4293      	cmp	r3, r2
 801f1a8:	d01d      	beq.n	801f1e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	681b      	ldr	r3, [r3, #0]
 801f1ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f1b2:	d018      	beq.n	801f1e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	4a1b      	ldr	r2, [pc, #108]	; (801f228 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801f1ba:	4293      	cmp	r3, r2
 801f1bc:	d013      	beq.n	801f1e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	681b      	ldr	r3, [r3, #0]
 801f1c2:	4a1a      	ldr	r2, [pc, #104]	; (801f22c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f1c4:	4293      	cmp	r3, r2
 801f1c6:	d00e      	beq.n	801f1e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	4a18      	ldr	r2, [pc, #96]	; (801f230 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f1ce:	4293      	cmp	r3, r2
 801f1d0:	d009      	beq.n	801f1e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	4a13      	ldr	r2, [pc, #76]	; (801f224 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801f1d8:	4293      	cmp	r3, r2
 801f1da:	d004      	beq.n	801f1e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	4a14      	ldr	r2, [pc, #80]	; (801f234 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f1e2:	4293      	cmp	r3, r2
 801f1e4:	d10c      	bne.n	801f200 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f1e6:	68bb      	ldr	r3, [r7, #8]
 801f1e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f1ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f1ee:	683b      	ldr	r3, [r7, #0]
 801f1f0:	689b      	ldr	r3, [r3, #8]
 801f1f2:	68ba      	ldr	r2, [r7, #8]
 801f1f4:	4313      	orrs	r3, r2
 801f1f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	681b      	ldr	r3, [r3, #0]
 801f1fc:	68ba      	ldr	r2, [r7, #8]
 801f1fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	2201      	movs	r2, #1
 801f204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	2200      	movs	r2, #0
 801f20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f210:	2300      	movs	r3, #0
}
 801f212:	4618      	mov	r0, r3
 801f214:	3714      	adds	r7, #20
 801f216:	46bd      	mov	sp, r7
 801f218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f21c:	4770      	bx	lr
 801f21e:	bf00      	nop
 801f220:	40010000 	.word	0x40010000
 801f224:	40010400 	.word	0x40010400
 801f228:	40000400 	.word	0x40000400
 801f22c:	40000800 	.word	0x40000800
 801f230:	40000c00 	.word	0x40000c00
 801f234:	40001800 	.word	0x40001800

0801f238 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801f238:	b480      	push	{r7}
 801f23a:	b085      	sub	sp, #20
 801f23c:	af00      	add	r7, sp, #0
 801f23e:	6078      	str	r0, [r7, #4]
 801f240:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801f242:	2300      	movs	r3, #0
 801f244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f24c:	2b01      	cmp	r3, #1
 801f24e:	d101      	bne.n	801f254 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801f250:	2302      	movs	r3, #2
 801f252:	e065      	b.n	801f320 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	2201      	movs	r2, #1
 801f258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801f25c:	68fb      	ldr	r3, [r7, #12]
 801f25e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801f262:	683b      	ldr	r3, [r7, #0]
 801f264:	68db      	ldr	r3, [r3, #12]
 801f266:	4313      	orrs	r3, r2
 801f268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801f26a:	68fb      	ldr	r3, [r7, #12]
 801f26c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801f270:	683b      	ldr	r3, [r7, #0]
 801f272:	689b      	ldr	r3, [r3, #8]
 801f274:	4313      	orrs	r3, r2
 801f276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801f278:	68fb      	ldr	r3, [r7, #12]
 801f27a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801f27e:	683b      	ldr	r3, [r7, #0]
 801f280:	685b      	ldr	r3, [r3, #4]
 801f282:	4313      	orrs	r3, r2
 801f284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801f286:	68fb      	ldr	r3, [r7, #12]
 801f288:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801f28c:	683b      	ldr	r3, [r7, #0]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	4313      	orrs	r3, r2
 801f292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801f294:	68fb      	ldr	r3, [r7, #12]
 801f296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801f29a:	683b      	ldr	r3, [r7, #0]
 801f29c:	691b      	ldr	r3, [r3, #16]
 801f29e:	4313      	orrs	r3, r2
 801f2a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801f2a2:	68fb      	ldr	r3, [r7, #12]
 801f2a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801f2a8:	683b      	ldr	r3, [r7, #0]
 801f2aa:	695b      	ldr	r3, [r3, #20]
 801f2ac:	4313      	orrs	r3, r2
 801f2ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801f2b0:	68fb      	ldr	r3, [r7, #12]
 801f2b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801f2b6:	683b      	ldr	r3, [r7, #0]
 801f2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f2ba:	4313      	orrs	r3, r2
 801f2bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801f2c4:	683b      	ldr	r3, [r7, #0]
 801f2c6:	699b      	ldr	r3, [r3, #24]
 801f2c8:	041b      	lsls	r3, r3, #16
 801f2ca:	4313      	orrs	r3, r2
 801f2cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	4a16      	ldr	r2, [pc, #88]	; (801f32c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801f2d4:	4293      	cmp	r3, r2
 801f2d6:	d004      	beq.n	801f2e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	4a14      	ldr	r2, [pc, #80]	; (801f330 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801f2de:	4293      	cmp	r3, r2
 801f2e0:	d115      	bne.n	801f30e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801f2e2:	68fb      	ldr	r3, [r7, #12]
 801f2e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801f2e8:	683b      	ldr	r3, [r7, #0]
 801f2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2ec:	051b      	lsls	r3, r3, #20
 801f2ee:	4313      	orrs	r3, r2
 801f2f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801f2f2:	68fb      	ldr	r3, [r7, #12]
 801f2f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801f2f8:	683b      	ldr	r3, [r7, #0]
 801f2fa:	69db      	ldr	r3, [r3, #28]
 801f2fc:	4313      	orrs	r3, r2
 801f2fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801f300:	68fb      	ldr	r3, [r7, #12]
 801f302:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801f306:	683b      	ldr	r3, [r7, #0]
 801f308:	6a1b      	ldr	r3, [r3, #32]
 801f30a:	4313      	orrs	r3, r2
 801f30c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	681b      	ldr	r3, [r3, #0]
 801f312:	68fa      	ldr	r2, [r7, #12]
 801f314:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	2200      	movs	r2, #0
 801f31a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f31e:	2300      	movs	r3, #0
}
 801f320:	4618      	mov	r0, r3
 801f322:	3714      	adds	r7, #20
 801f324:	46bd      	mov	sp, r7
 801f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f32a:	4770      	bx	lr
 801f32c:	40010000 	.word	0x40010000
 801f330:	40010400 	.word	0x40010400

0801f334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f334:	b480      	push	{r7}
 801f336:	b083      	sub	sp, #12
 801f338:	af00      	add	r7, sp, #0
 801f33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f33c:	bf00      	nop
 801f33e:	370c      	adds	r7, #12
 801f340:	46bd      	mov	sp, r7
 801f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f346:	4770      	bx	lr

0801f348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f348:	b480      	push	{r7}
 801f34a:	b083      	sub	sp, #12
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f350:	bf00      	nop
 801f352:	370c      	adds	r7, #12
 801f354:	46bd      	mov	sp, r7
 801f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f35a:	4770      	bx	lr

0801f35c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f35c:	b480      	push	{r7}
 801f35e:	b083      	sub	sp, #12
 801f360:	af00      	add	r7, sp, #0
 801f362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f364:	bf00      	nop
 801f366:	370c      	adds	r7, #12
 801f368:	46bd      	mov	sp, r7
 801f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f36e:	4770      	bx	lr

0801f370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f370:	b580      	push	{r7, lr}
 801f372:	b082      	sub	sp, #8
 801f374:	af00      	add	r7, sp, #0
 801f376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d101      	bne.n	801f382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f37e:	2301      	movs	r3, #1
 801f380:	e042      	b.n	801f408 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f388:	2b00      	cmp	r3, #0
 801f38a:	d106      	bne.n	801f39a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	2200      	movs	r2, #0
 801f390:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f394:	6878      	ldr	r0, [r7, #4]
 801f396:	f7f3 fbd7 	bl	8012b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	2224      	movs	r2, #36	; 0x24
 801f39e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 801f3a2:	687b      	ldr	r3, [r7, #4]
 801f3a4:	681b      	ldr	r3, [r3, #0]
 801f3a6:	681a      	ldr	r2, [r3, #0]
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	f022 0201 	bic.w	r2, r2, #1
 801f3b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f3b2:	6878      	ldr	r0, [r7, #4]
 801f3b4:	f000 fa52 	bl	801f85c <UART_SetConfig>
 801f3b8:	4603      	mov	r3, r0
 801f3ba:	2b01      	cmp	r3, #1
 801f3bc:	d101      	bne.n	801f3c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801f3be:	2301      	movs	r3, #1
 801f3c0:	e022      	b.n	801f408 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f3c2:	687b      	ldr	r3, [r7, #4]
 801f3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d002      	beq.n	801f3d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801f3ca:	6878      	ldr	r0, [r7, #4]
 801f3cc:	f000 fff6 	bl	80203bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	681b      	ldr	r3, [r3, #0]
 801f3d4:	685a      	ldr	r2, [r3, #4]
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f3de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f3e0:	687b      	ldr	r3, [r7, #4]
 801f3e2:	681b      	ldr	r3, [r3, #0]
 801f3e4:	689a      	ldr	r2, [r3, #8]
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f3ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	681a      	ldr	r2, [r3, #0]
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	f042 0201 	orr.w	r2, r2, #1
 801f3fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f400:	6878      	ldr	r0, [r7, #4]
 801f402:	f001 f87d 	bl	8020500 <UART_CheckIdleState>
 801f406:	4603      	mov	r3, r0
}
 801f408:	4618      	mov	r0, r3
 801f40a:	3708      	adds	r7, #8
 801f40c:	46bd      	mov	sp, r7
 801f40e:	bd80      	pop	{r7, pc}

0801f410 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801f410:	b580      	push	{r7, lr}
 801f412:	b084      	sub	sp, #16
 801f414:	af00      	add	r7, sp, #0
 801f416:	60f8      	str	r0, [r7, #12]
 801f418:	60b9      	str	r1, [r7, #8]
 801f41a:	4613      	mov	r3, r2
 801f41c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801f41e:	68fb      	ldr	r3, [r7, #12]
 801f420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f424:	2b20      	cmp	r3, #32
 801f426:	d170      	bne.n	801f50a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 801f428:	68bb      	ldr	r3, [r7, #8]
 801f42a:	2b00      	cmp	r3, #0
 801f42c:	d002      	beq.n	801f434 <HAL_UART_Receive_DMA+0x24>
 801f42e:	88fb      	ldrh	r3, [r7, #6]
 801f430:	2b00      	cmp	r3, #0
 801f432:	d101      	bne.n	801f438 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801f434:	2301      	movs	r3, #1
 801f436:	e069      	b.n	801f50c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801f43e:	2b01      	cmp	r3, #1
 801f440:	d101      	bne.n	801f446 <HAL_UART_Receive_DMA+0x36>
 801f442:	2302      	movs	r3, #2
 801f444:	e062      	b.n	801f50c <HAL_UART_Receive_DMA+0xfc>
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	2201      	movs	r2, #1
 801f44a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 801f44e:	68fb      	ldr	r3, [r7, #12]
 801f450:	68ba      	ldr	r2, [r7, #8]
 801f452:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 801f454:	68fb      	ldr	r3, [r7, #12]
 801f456:	88fa      	ldrh	r2, [r7, #6]
 801f458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f45c:	68fb      	ldr	r3, [r7, #12]
 801f45e:	2200      	movs	r2, #0
 801f460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	2222      	movs	r2, #34	; 0x22
 801f468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f470:	2b00      	cmp	r3, #0
 801f472:	d02c      	beq.n	801f4ce <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801f474:	68fb      	ldr	r3, [r7, #12]
 801f476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f478:	4a26      	ldr	r2, [pc, #152]	; (801f514 <HAL_UART_Receive_DMA+0x104>)
 801f47a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801f47c:	68fb      	ldr	r3, [r7, #12]
 801f47e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f480:	4a25      	ldr	r2, [pc, #148]	; (801f518 <HAL_UART_Receive_DMA+0x108>)
 801f482:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 801f484:	68fb      	ldr	r3, [r7, #12]
 801f486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f488:	4a24      	ldr	r2, [pc, #144]	; (801f51c <HAL_UART_Receive_DMA+0x10c>)
 801f48a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 801f48c:	68fb      	ldr	r3, [r7, #12]
 801f48e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f490:	2200      	movs	r2, #0
 801f492:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801f494:	68fb      	ldr	r3, [r7, #12]
 801f496:	6f98      	ldr	r0, [r3, #120]	; 0x78
 801f498:	68fb      	ldr	r3, [r7, #12]
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	3324      	adds	r3, #36	; 0x24
 801f49e:	4619      	mov	r1, r3
 801f4a0:	68fb      	ldr	r3, [r7, #12]
 801f4a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f4a4:	461a      	mov	r2, r3
 801f4a6:	88fb      	ldrh	r3, [r7, #6]
 801f4a8:	f7f5 f99a 	bl	80147e0 <HAL_DMA_Start_IT>
 801f4ac:	4603      	mov	r3, r0
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d00d      	beq.n	801f4ce <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801f4b2:	68fb      	ldr	r3, [r7, #12]
 801f4b4:	2210      	movs	r2, #16
 801f4b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801f4ba:	68fb      	ldr	r3, [r7, #12]
 801f4bc:	2200      	movs	r2, #0
 801f4be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801f4c2:	68fb      	ldr	r3, [r7, #12]
 801f4c4:	2220      	movs	r2, #32
 801f4c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 801f4ca:	2301      	movs	r3, #1
 801f4cc:	e01e      	b.n	801f50c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 801f4ce:	68fb      	ldr	r3, [r7, #12]
 801f4d0:	2200      	movs	r2, #0
 801f4d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801f4d6:	68fb      	ldr	r3, [r7, #12]
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	681a      	ldr	r2, [r3, #0]
 801f4dc:	68fb      	ldr	r3, [r7, #12]
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f4e4:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f4e6:	68fb      	ldr	r3, [r7, #12]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	689a      	ldr	r2, [r3, #8]
 801f4ec:	68fb      	ldr	r3, [r7, #12]
 801f4ee:	681b      	ldr	r3, [r3, #0]
 801f4f0:	f042 0201 	orr.w	r2, r2, #1
 801f4f4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801f4f6:	68fb      	ldr	r3, [r7, #12]
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	689a      	ldr	r2, [r3, #8]
 801f4fc:	68fb      	ldr	r3, [r7, #12]
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801f504:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 801f506:	2300      	movs	r3, #0
 801f508:	e000      	b.n	801f50c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 801f50a:	2302      	movs	r3, #2
  }
}
 801f50c:	4618      	mov	r0, r3
 801f50e:	3710      	adds	r7, #16
 801f510:	46bd      	mov	sp, r7
 801f512:	bd80      	pop	{r7, pc}
 801f514:	08020715 	.word	0x08020715
 801f518:	0802077b 	.word	0x0802077b
 801f51c:	08020797 	.word	0x08020797

0801f520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801f520:	b580      	push	{r7, lr}
 801f522:	b088      	sub	sp, #32
 801f524:	af00      	add	r7, sp, #0
 801f526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	681b      	ldr	r3, [r3, #0]
 801f52c:	69db      	ldr	r3, [r3, #28]
 801f52e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	681b      	ldr	r3, [r3, #0]
 801f536:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801f538:	687b      	ldr	r3, [r7, #4]
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	689b      	ldr	r3, [r3, #8]
 801f53e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801f540:	69fa      	ldr	r2, [r7, #28]
 801f542:	f640 030f 	movw	r3, #2063	; 0x80f
 801f546:	4013      	ands	r3, r2
 801f548:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 801f54a:	693b      	ldr	r3, [r7, #16]
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	d118      	bne.n	801f582 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801f550:	69fb      	ldr	r3, [r7, #28]
 801f552:	f003 0320 	and.w	r3, r3, #32
 801f556:	2b00      	cmp	r3, #0
 801f558:	d013      	beq.n	801f582 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801f55a:	69bb      	ldr	r3, [r7, #24]
 801f55c:	f003 0320 	and.w	r3, r3, #32
 801f560:	2b00      	cmp	r3, #0
 801f562:	d104      	bne.n	801f56e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801f564:	697b      	ldr	r3, [r7, #20]
 801f566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	d009      	beq.n	801f582 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f572:	2b00      	cmp	r3, #0
 801f574:	f000 8145 	beq.w	801f802 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 801f578:	687b      	ldr	r3, [r7, #4]
 801f57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f57c:	6878      	ldr	r0, [r7, #4]
 801f57e:	4798      	blx	r3
      }
      return;
 801f580:	e13f      	b.n	801f802 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801f582:	693b      	ldr	r3, [r7, #16]
 801f584:	2b00      	cmp	r3, #0
 801f586:	f000 80e8 	beq.w	801f75a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801f58a:	697a      	ldr	r2, [r7, #20]
 801f58c:	4ba1      	ldr	r3, [pc, #644]	; (801f814 <HAL_UART_IRQHandler+0x2f4>)
 801f58e:	4013      	ands	r3, r2
 801f590:	2b00      	cmp	r3, #0
 801f592:	d105      	bne.n	801f5a0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801f594:	69ba      	ldr	r2, [r7, #24]
 801f596:	4ba0      	ldr	r3, [pc, #640]	; (801f818 <HAL_UART_IRQHandler+0x2f8>)
 801f598:	4013      	ands	r3, r2
 801f59a:	2b00      	cmp	r3, #0
 801f59c:	f000 80dd 	beq.w	801f75a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801f5a0:	69fb      	ldr	r3, [r7, #28]
 801f5a2:	f003 0301 	and.w	r3, r3, #1
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	d010      	beq.n	801f5cc <HAL_UART_IRQHandler+0xac>
 801f5aa:	69bb      	ldr	r3, [r7, #24]
 801f5ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d00b      	beq.n	801f5cc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	2201      	movs	r2, #1
 801f5ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f5c2:	f043 0201 	orr.w	r2, r3, #1
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f5cc:	69fb      	ldr	r3, [r7, #28]
 801f5ce:	f003 0302 	and.w	r3, r3, #2
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d010      	beq.n	801f5f8 <HAL_UART_IRQHandler+0xd8>
 801f5d6:	697b      	ldr	r3, [r7, #20]
 801f5d8:	f003 0301 	and.w	r3, r3, #1
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d00b      	beq.n	801f5f8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	2202      	movs	r2, #2
 801f5e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f5ee:	f043 0204 	orr.w	r2, r3, #4
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f5f8:	69fb      	ldr	r3, [r7, #28]
 801f5fa:	f003 0304 	and.w	r3, r3, #4
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d010      	beq.n	801f624 <HAL_UART_IRQHandler+0x104>
 801f602:	697b      	ldr	r3, [r7, #20]
 801f604:	f003 0301 	and.w	r3, r3, #1
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d00b      	beq.n	801f624 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	2204      	movs	r2, #4
 801f612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f61a:	f043 0202 	orr.w	r2, r3, #2
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801f624:	69fb      	ldr	r3, [r7, #28]
 801f626:	f003 0308 	and.w	r3, r3, #8
 801f62a:	2b00      	cmp	r3, #0
 801f62c:	d015      	beq.n	801f65a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801f62e:	69bb      	ldr	r3, [r7, #24]
 801f630:	f003 0320 	and.w	r3, r3, #32
 801f634:	2b00      	cmp	r3, #0
 801f636:	d104      	bne.n	801f642 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801f638:	697a      	ldr	r2, [r7, #20]
 801f63a:	4b76      	ldr	r3, [pc, #472]	; (801f814 <HAL_UART_IRQHandler+0x2f4>)
 801f63c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d00b      	beq.n	801f65a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	681b      	ldr	r3, [r3, #0]
 801f646:	2208      	movs	r2, #8
 801f648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f650:	f043 0208 	orr.w	r2, r3, #8
 801f654:	687b      	ldr	r3, [r7, #4]
 801f656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801f65a:	69fb      	ldr	r3, [r7, #28]
 801f65c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f660:	2b00      	cmp	r3, #0
 801f662:	d011      	beq.n	801f688 <HAL_UART_IRQHandler+0x168>
 801f664:	69bb      	ldr	r3, [r7, #24]
 801f666:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d00c      	beq.n	801f688 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801f66e:	687b      	ldr	r3, [r7, #4]
 801f670:	681b      	ldr	r3, [r3, #0]
 801f672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f67e:	f043 0220 	orr.w	r2, r3, #32
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f68e:	2b00      	cmp	r3, #0
 801f690:	f000 80b9 	beq.w	801f806 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801f694:	69fb      	ldr	r3, [r7, #28]
 801f696:	f003 0320 	and.w	r3, r3, #32
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	d011      	beq.n	801f6c2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801f69e:	69bb      	ldr	r3, [r7, #24]
 801f6a0:	f003 0320 	and.w	r3, r3, #32
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	d104      	bne.n	801f6b2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801f6a8:	697b      	ldr	r3, [r7, #20]
 801f6aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d007      	beq.n	801f6c2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d003      	beq.n	801f6c2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f6be:	6878      	ldr	r0, [r7, #4]
 801f6c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f6c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801f6ca:	687b      	ldr	r3, [r7, #4]
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	689b      	ldr	r3, [r3, #8]
 801f6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f6d4:	2b40      	cmp	r3, #64	; 0x40
 801f6d6:	d004      	beq.n	801f6e2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801f6d8:	68fb      	ldr	r3, [r7, #12]
 801f6da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d031      	beq.n	801f746 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801f6e2:	6878      	ldr	r0, [r7, #4]
 801f6e4:	f000 fff2 	bl	80206cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	689b      	ldr	r3, [r3, #8]
 801f6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f6f2:	2b40      	cmp	r3, #64	; 0x40
 801f6f4:	d123      	bne.n	801f73e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	681b      	ldr	r3, [r3, #0]
 801f6fa:	689a      	ldr	r2, [r3, #8]
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	681b      	ldr	r3, [r3, #0]
 801f700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f704:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d013      	beq.n	801f736 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f712:	4a42      	ldr	r2, [pc, #264]	; (801f81c <HAL_UART_IRQHandler+0x2fc>)
 801f714:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f71a:	4618      	mov	r0, r3
 801f71c:	f7f5 faca 	bl	8014cb4 <HAL_DMA_Abort_IT>
 801f720:	4603      	mov	r3, r0
 801f722:	2b00      	cmp	r3, #0
 801f724:	d017      	beq.n	801f756 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801f726:	687b      	ldr	r3, [r7, #4]
 801f728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f72c:	687a      	ldr	r2, [r7, #4]
 801f72e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801f730:	4610      	mov	r0, r2
 801f732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f734:	e00f      	b.n	801f756 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801f736:	6878      	ldr	r0, [r7, #4]
 801f738:	f000 f886 	bl	801f848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f73c:	e00b      	b.n	801f756 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801f73e:	6878      	ldr	r0, [r7, #4]
 801f740:	f000 f882 	bl	801f848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f744:	e007      	b.n	801f756 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801f746:	6878      	ldr	r0, [r7, #4]
 801f748:	f000 f87e 	bl	801f848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f74c:	687b      	ldr	r3, [r7, #4]
 801f74e:	2200      	movs	r2, #0
 801f750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 801f754:	e057      	b.n	801f806 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f756:	bf00      	nop
    return;
 801f758:	e055      	b.n	801f806 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801f75a:	69fb      	ldr	r3, [r7, #28]
 801f75c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f760:	2b00      	cmp	r3, #0
 801f762:	d00d      	beq.n	801f780 <HAL_UART_IRQHandler+0x260>
 801f764:	697b      	ldr	r3, [r7, #20]
 801f766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f76a:	2b00      	cmp	r3, #0
 801f76c:	d008      	beq.n	801f780 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	681b      	ldr	r3, [r3, #0]
 801f772:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801f776:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801f778:	6878      	ldr	r0, [r7, #4]
 801f77a:	f001 f87c 	bl	8020876 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801f77e:	e045      	b.n	801f80c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801f780:	69fb      	ldr	r3, [r7, #28]
 801f782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f786:	2b00      	cmp	r3, #0
 801f788:	d012      	beq.n	801f7b0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801f78a:	69bb      	ldr	r3, [r7, #24]
 801f78c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f790:	2b00      	cmp	r3, #0
 801f792:	d104      	bne.n	801f79e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801f794:	697b      	ldr	r3, [r7, #20]
 801f796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801f79a:	2b00      	cmp	r3, #0
 801f79c:	d008      	beq.n	801f7b0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	d031      	beq.n	801f80a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 801f7a6:	687b      	ldr	r3, [r7, #4]
 801f7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f7aa:	6878      	ldr	r0, [r7, #4]
 801f7ac:	4798      	blx	r3
    }
    return;
 801f7ae:	e02c      	b.n	801f80a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801f7b0:	69fb      	ldr	r3, [r7, #28]
 801f7b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	d008      	beq.n	801f7cc <HAL_UART_IRQHandler+0x2ac>
 801f7ba:	69bb      	ldr	r3, [r7, #24]
 801f7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	d003      	beq.n	801f7cc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 801f7c4:	6878      	ldr	r0, [r7, #4]
 801f7c6:	f001 f83c 	bl	8020842 <UART_EndTransmit_IT>
    return;
 801f7ca:	e01f      	b.n	801f80c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801f7cc:	69fb      	ldr	r3, [r7, #28]
 801f7ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d008      	beq.n	801f7e8 <HAL_UART_IRQHandler+0x2c8>
 801f7d6:	69bb      	ldr	r3, [r7, #24]
 801f7d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	d003      	beq.n	801f7e8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801f7e0:	6878      	ldr	r0, [r7, #4]
 801f7e2:	f001 f85c 	bl	802089e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801f7e6:	e011      	b.n	801f80c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801f7e8:	69fb      	ldr	r3, [r7, #28]
 801f7ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d00c      	beq.n	801f80c <HAL_UART_IRQHandler+0x2ec>
 801f7f2:	69bb      	ldr	r3, [r7, #24]
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	da09      	bge.n	801f80c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801f7f8:	6878      	ldr	r0, [r7, #4]
 801f7fa:	f001 f846 	bl	802088a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801f7fe:	bf00      	nop
 801f800:	e004      	b.n	801f80c <HAL_UART_IRQHandler+0x2ec>
      return;
 801f802:	bf00      	nop
 801f804:	e002      	b.n	801f80c <HAL_UART_IRQHandler+0x2ec>
    return;
 801f806:	bf00      	nop
 801f808:	e000      	b.n	801f80c <HAL_UART_IRQHandler+0x2ec>
    return;
 801f80a:	bf00      	nop
  }
}
 801f80c:	3720      	adds	r7, #32
 801f80e:	46bd      	mov	sp, r7
 801f810:	bd80      	pop	{r7, pc}
 801f812:	bf00      	nop
 801f814:	10000001 	.word	0x10000001
 801f818:	04000120 	.word	0x04000120
 801f81c:	08020817 	.word	0x08020817

0801f820 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801f820:	b480      	push	{r7}
 801f822:	b083      	sub	sp, #12
 801f824:	af00      	add	r7, sp, #0
 801f826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801f828:	bf00      	nop
 801f82a:	370c      	adds	r7, #12
 801f82c:	46bd      	mov	sp, r7
 801f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f832:	4770      	bx	lr

0801f834 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801f834:	b480      	push	{r7}
 801f836:	b083      	sub	sp, #12
 801f838:	af00      	add	r7, sp, #0
 801f83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801f83c:	bf00      	nop
 801f83e:	370c      	adds	r7, #12
 801f840:	46bd      	mov	sp, r7
 801f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f846:	4770      	bx	lr

0801f848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801f848:	b480      	push	{r7}
 801f84a:	b083      	sub	sp, #12
 801f84c:	af00      	add	r7, sp, #0
 801f84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801f850:	bf00      	nop
 801f852:	370c      	adds	r7, #12
 801f854:	46bd      	mov	sp, r7
 801f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f85a:	4770      	bx	lr

0801f85c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f85c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801f860:	b08e      	sub	sp, #56	; 0x38
 801f862:	af00      	add	r7, sp, #0
 801f864:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f866:	2300      	movs	r3, #0
 801f868:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	689a      	ldr	r2, [r3, #8]
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	691b      	ldr	r3, [r3, #16]
 801f874:	431a      	orrs	r2, r3
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	695b      	ldr	r3, [r3, #20]
 801f87a:	431a      	orrs	r2, r3
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	69db      	ldr	r3, [r3, #28]
 801f880:	4313      	orrs	r3, r2
 801f882:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f88a:	4313      	orrs	r3, r2
 801f88c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f88e:	687b      	ldr	r3, [r7, #4]
 801f890:	681b      	ldr	r3, [r3, #0]
 801f892:	681a      	ldr	r2, [r3, #0]
 801f894:	4bc1      	ldr	r3, [pc, #772]	; (801fb9c <UART_SetConfig+0x340>)
 801f896:	4013      	ands	r3, r2
 801f898:	687a      	ldr	r2, [r7, #4]
 801f89a:	6812      	ldr	r2, [r2, #0]
 801f89c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f89e:	430b      	orrs	r3, r1
 801f8a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	681b      	ldr	r3, [r3, #0]
 801f8a6:	685b      	ldr	r3, [r3, #4]
 801f8a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	68da      	ldr	r2, [r3, #12]
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	681b      	ldr	r3, [r3, #0]
 801f8b4:	430a      	orrs	r2, r1
 801f8b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	699b      	ldr	r3, [r3, #24]
 801f8bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	681b      	ldr	r3, [r3, #0]
 801f8c2:	4ab7      	ldr	r2, [pc, #732]	; (801fba0 <UART_SetConfig+0x344>)
 801f8c4:	4293      	cmp	r3, r2
 801f8c6:	d004      	beq.n	801f8d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	6a1b      	ldr	r3, [r3, #32]
 801f8cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f8ce:	4313      	orrs	r3, r2
 801f8d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	681b      	ldr	r3, [r3, #0]
 801f8d6:	689a      	ldr	r2, [r3, #8]
 801f8d8:	4bb2      	ldr	r3, [pc, #712]	; (801fba4 <UART_SetConfig+0x348>)
 801f8da:	4013      	ands	r3, r2
 801f8dc:	687a      	ldr	r2, [r7, #4]
 801f8de:	6812      	ldr	r2, [r2, #0]
 801f8e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f8e2:	430b      	orrs	r3, r1
 801f8e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	681b      	ldr	r3, [r3, #0]
 801f8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f8ec:	f023 010f 	bic.w	r1, r3, #15
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	430a      	orrs	r2, r1
 801f8fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f8fc:	687b      	ldr	r3, [r7, #4]
 801f8fe:	681b      	ldr	r3, [r3, #0]
 801f900:	4aa9      	ldr	r2, [pc, #676]	; (801fba8 <UART_SetConfig+0x34c>)
 801f902:	4293      	cmp	r3, r2
 801f904:	d177      	bne.n	801f9f6 <UART_SetConfig+0x19a>
 801f906:	4ba9      	ldr	r3, [pc, #676]	; (801fbac <UART_SetConfig+0x350>)
 801f908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f90a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801f90e:	2b28      	cmp	r3, #40	; 0x28
 801f910:	d86c      	bhi.n	801f9ec <UART_SetConfig+0x190>
 801f912:	a201      	add	r2, pc, #4	; (adr r2, 801f918 <UART_SetConfig+0xbc>)
 801f914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f918:	0801f9bd 	.word	0x0801f9bd
 801f91c:	0801f9ed 	.word	0x0801f9ed
 801f920:	0801f9ed 	.word	0x0801f9ed
 801f924:	0801f9ed 	.word	0x0801f9ed
 801f928:	0801f9ed 	.word	0x0801f9ed
 801f92c:	0801f9ed 	.word	0x0801f9ed
 801f930:	0801f9ed 	.word	0x0801f9ed
 801f934:	0801f9ed 	.word	0x0801f9ed
 801f938:	0801f9c5 	.word	0x0801f9c5
 801f93c:	0801f9ed 	.word	0x0801f9ed
 801f940:	0801f9ed 	.word	0x0801f9ed
 801f944:	0801f9ed 	.word	0x0801f9ed
 801f948:	0801f9ed 	.word	0x0801f9ed
 801f94c:	0801f9ed 	.word	0x0801f9ed
 801f950:	0801f9ed 	.word	0x0801f9ed
 801f954:	0801f9ed 	.word	0x0801f9ed
 801f958:	0801f9cd 	.word	0x0801f9cd
 801f95c:	0801f9ed 	.word	0x0801f9ed
 801f960:	0801f9ed 	.word	0x0801f9ed
 801f964:	0801f9ed 	.word	0x0801f9ed
 801f968:	0801f9ed 	.word	0x0801f9ed
 801f96c:	0801f9ed 	.word	0x0801f9ed
 801f970:	0801f9ed 	.word	0x0801f9ed
 801f974:	0801f9ed 	.word	0x0801f9ed
 801f978:	0801f9d5 	.word	0x0801f9d5
 801f97c:	0801f9ed 	.word	0x0801f9ed
 801f980:	0801f9ed 	.word	0x0801f9ed
 801f984:	0801f9ed 	.word	0x0801f9ed
 801f988:	0801f9ed 	.word	0x0801f9ed
 801f98c:	0801f9ed 	.word	0x0801f9ed
 801f990:	0801f9ed 	.word	0x0801f9ed
 801f994:	0801f9ed 	.word	0x0801f9ed
 801f998:	0801f9dd 	.word	0x0801f9dd
 801f99c:	0801f9ed 	.word	0x0801f9ed
 801f9a0:	0801f9ed 	.word	0x0801f9ed
 801f9a4:	0801f9ed 	.word	0x0801f9ed
 801f9a8:	0801f9ed 	.word	0x0801f9ed
 801f9ac:	0801f9ed 	.word	0x0801f9ed
 801f9b0:	0801f9ed 	.word	0x0801f9ed
 801f9b4:	0801f9ed 	.word	0x0801f9ed
 801f9b8:	0801f9e5 	.word	0x0801f9e5
 801f9bc:	2301      	movs	r3, #1
 801f9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801f9c2:	e233      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801f9c4:	2304      	movs	r3, #4
 801f9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801f9ca:	e22f      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801f9cc:	2308      	movs	r3, #8
 801f9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801f9d2:	e22b      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801f9d4:	2310      	movs	r3, #16
 801f9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801f9da:	e227      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801f9dc:	2320      	movs	r3, #32
 801f9de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801f9e2:	e223      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801f9e4:	2340      	movs	r3, #64	; 0x40
 801f9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801f9ea:	e21f      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801f9ec:	2380      	movs	r3, #128	; 0x80
 801f9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801f9f2:	bf00      	nop
 801f9f4:	e21a      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801f9f6:	687b      	ldr	r3, [r7, #4]
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	4a6d      	ldr	r2, [pc, #436]	; (801fbb0 <UART_SetConfig+0x354>)
 801f9fc:	4293      	cmp	r3, r2
 801f9fe:	d132      	bne.n	801fa66 <UART_SetConfig+0x20a>
 801fa00:	4b6a      	ldr	r3, [pc, #424]	; (801fbac <UART_SetConfig+0x350>)
 801fa02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fa04:	f003 0307 	and.w	r3, r3, #7
 801fa08:	2b05      	cmp	r3, #5
 801fa0a:	d827      	bhi.n	801fa5c <UART_SetConfig+0x200>
 801fa0c:	a201      	add	r2, pc, #4	; (adr r2, 801fa14 <UART_SetConfig+0x1b8>)
 801fa0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa12:	bf00      	nop
 801fa14:	0801fa2d 	.word	0x0801fa2d
 801fa18:	0801fa35 	.word	0x0801fa35
 801fa1c:	0801fa3d 	.word	0x0801fa3d
 801fa20:	0801fa45 	.word	0x0801fa45
 801fa24:	0801fa4d 	.word	0x0801fa4d
 801fa28:	0801fa55 	.word	0x0801fa55
 801fa2c:	2300      	movs	r3, #0
 801fa2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fa32:	e1fb      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fa34:	2304      	movs	r3, #4
 801fa36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fa3a:	e1f7      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fa3c:	2308      	movs	r3, #8
 801fa3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fa42:	e1f3      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fa44:	2310      	movs	r3, #16
 801fa46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fa4a:	e1ef      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fa4c:	2320      	movs	r3, #32
 801fa4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fa52:	e1eb      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fa54:	2340      	movs	r3, #64	; 0x40
 801fa56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fa5a:	e1e7      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fa5c:	2380      	movs	r3, #128	; 0x80
 801fa5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fa62:	bf00      	nop
 801fa64:	e1e2      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	681b      	ldr	r3, [r3, #0]
 801fa6a:	4a52      	ldr	r2, [pc, #328]	; (801fbb4 <UART_SetConfig+0x358>)
 801fa6c:	4293      	cmp	r3, r2
 801fa6e:	d132      	bne.n	801fad6 <UART_SetConfig+0x27a>
 801fa70:	4b4e      	ldr	r3, [pc, #312]	; (801fbac <UART_SetConfig+0x350>)
 801fa72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fa74:	f003 0307 	and.w	r3, r3, #7
 801fa78:	2b05      	cmp	r3, #5
 801fa7a:	d827      	bhi.n	801facc <UART_SetConfig+0x270>
 801fa7c:	a201      	add	r2, pc, #4	; (adr r2, 801fa84 <UART_SetConfig+0x228>)
 801fa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa82:	bf00      	nop
 801fa84:	0801fa9d 	.word	0x0801fa9d
 801fa88:	0801faa5 	.word	0x0801faa5
 801fa8c:	0801faad 	.word	0x0801faad
 801fa90:	0801fab5 	.word	0x0801fab5
 801fa94:	0801fabd 	.word	0x0801fabd
 801fa98:	0801fac5 	.word	0x0801fac5
 801fa9c:	2300      	movs	r3, #0
 801fa9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801faa2:	e1c3      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801faa4:	2304      	movs	r3, #4
 801faa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801faaa:	e1bf      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801faac:	2308      	movs	r3, #8
 801faae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fab2:	e1bb      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fab4:	2310      	movs	r3, #16
 801fab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801faba:	e1b7      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fabc:	2320      	movs	r3, #32
 801fabe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fac2:	e1b3      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fac4:	2340      	movs	r3, #64	; 0x40
 801fac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801faca:	e1af      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801facc:	2380      	movs	r3, #128	; 0x80
 801face:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fad2:	bf00      	nop
 801fad4:	e1aa      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	681b      	ldr	r3, [r3, #0]
 801fada:	4a37      	ldr	r2, [pc, #220]	; (801fbb8 <UART_SetConfig+0x35c>)
 801fadc:	4293      	cmp	r3, r2
 801fade:	d132      	bne.n	801fb46 <UART_SetConfig+0x2ea>
 801fae0:	4b32      	ldr	r3, [pc, #200]	; (801fbac <UART_SetConfig+0x350>)
 801fae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fae4:	f003 0307 	and.w	r3, r3, #7
 801fae8:	2b05      	cmp	r3, #5
 801faea:	d827      	bhi.n	801fb3c <UART_SetConfig+0x2e0>
 801faec:	a201      	add	r2, pc, #4	; (adr r2, 801faf4 <UART_SetConfig+0x298>)
 801faee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801faf2:	bf00      	nop
 801faf4:	0801fb0d 	.word	0x0801fb0d
 801faf8:	0801fb15 	.word	0x0801fb15
 801fafc:	0801fb1d 	.word	0x0801fb1d
 801fb00:	0801fb25 	.word	0x0801fb25
 801fb04:	0801fb2d 	.word	0x0801fb2d
 801fb08:	0801fb35 	.word	0x0801fb35
 801fb0c:	2300      	movs	r3, #0
 801fb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb12:	e18b      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb14:	2304      	movs	r3, #4
 801fb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb1a:	e187      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb1c:	2308      	movs	r3, #8
 801fb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb22:	e183      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb24:	2310      	movs	r3, #16
 801fb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb2a:	e17f      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb2c:	2320      	movs	r3, #32
 801fb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb32:	e17b      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb34:	2340      	movs	r3, #64	; 0x40
 801fb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb3a:	e177      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb3c:	2380      	movs	r3, #128	; 0x80
 801fb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb42:	bf00      	nop
 801fb44:	e172      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	681b      	ldr	r3, [r3, #0]
 801fb4a:	4a1c      	ldr	r2, [pc, #112]	; (801fbbc <UART_SetConfig+0x360>)
 801fb4c:	4293      	cmp	r3, r2
 801fb4e:	d144      	bne.n	801fbda <UART_SetConfig+0x37e>
 801fb50:	4b16      	ldr	r3, [pc, #88]	; (801fbac <UART_SetConfig+0x350>)
 801fb52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fb54:	f003 0307 	and.w	r3, r3, #7
 801fb58:	2b05      	cmp	r3, #5
 801fb5a:	d839      	bhi.n	801fbd0 <UART_SetConfig+0x374>
 801fb5c:	a201      	add	r2, pc, #4	; (adr r2, 801fb64 <UART_SetConfig+0x308>)
 801fb5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb62:	bf00      	nop
 801fb64:	0801fb7d 	.word	0x0801fb7d
 801fb68:	0801fb85 	.word	0x0801fb85
 801fb6c:	0801fb8d 	.word	0x0801fb8d
 801fb70:	0801fb95 	.word	0x0801fb95
 801fb74:	0801fbc1 	.word	0x0801fbc1
 801fb78:	0801fbc9 	.word	0x0801fbc9
 801fb7c:	2300      	movs	r3, #0
 801fb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb82:	e153      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb84:	2304      	movs	r3, #4
 801fb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb8a:	e14f      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb8c:	2308      	movs	r3, #8
 801fb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb92:	e14b      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb94:	2310      	movs	r3, #16
 801fb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fb9a:	e147      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fb9c:	cfff69f3 	.word	0xcfff69f3
 801fba0:	58000c00 	.word	0x58000c00
 801fba4:	11fff4ff 	.word	0x11fff4ff
 801fba8:	40011000 	.word	0x40011000
 801fbac:	58024400 	.word	0x58024400
 801fbb0:	40004400 	.word	0x40004400
 801fbb4:	40004800 	.word	0x40004800
 801fbb8:	40004c00 	.word	0x40004c00
 801fbbc:	40005000 	.word	0x40005000
 801fbc0:	2320      	movs	r3, #32
 801fbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fbc6:	e131      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fbc8:	2340      	movs	r3, #64	; 0x40
 801fbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fbce:	e12d      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fbd0:	2380      	movs	r3, #128	; 0x80
 801fbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fbd6:	bf00      	nop
 801fbd8:	e128      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	4ab6      	ldr	r2, [pc, #728]	; (801feb8 <UART_SetConfig+0x65c>)
 801fbe0:	4293      	cmp	r3, r2
 801fbe2:	d178      	bne.n	801fcd6 <UART_SetConfig+0x47a>
 801fbe4:	4bb5      	ldr	r3, [pc, #724]	; (801febc <UART_SetConfig+0x660>)
 801fbe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fbe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801fbec:	2b28      	cmp	r3, #40	; 0x28
 801fbee:	d86d      	bhi.n	801fccc <UART_SetConfig+0x470>
 801fbf0:	a201      	add	r2, pc, #4	; (adr r2, 801fbf8 <UART_SetConfig+0x39c>)
 801fbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbf6:	bf00      	nop
 801fbf8:	0801fc9d 	.word	0x0801fc9d
 801fbfc:	0801fccd 	.word	0x0801fccd
 801fc00:	0801fccd 	.word	0x0801fccd
 801fc04:	0801fccd 	.word	0x0801fccd
 801fc08:	0801fccd 	.word	0x0801fccd
 801fc0c:	0801fccd 	.word	0x0801fccd
 801fc10:	0801fccd 	.word	0x0801fccd
 801fc14:	0801fccd 	.word	0x0801fccd
 801fc18:	0801fca5 	.word	0x0801fca5
 801fc1c:	0801fccd 	.word	0x0801fccd
 801fc20:	0801fccd 	.word	0x0801fccd
 801fc24:	0801fccd 	.word	0x0801fccd
 801fc28:	0801fccd 	.word	0x0801fccd
 801fc2c:	0801fccd 	.word	0x0801fccd
 801fc30:	0801fccd 	.word	0x0801fccd
 801fc34:	0801fccd 	.word	0x0801fccd
 801fc38:	0801fcad 	.word	0x0801fcad
 801fc3c:	0801fccd 	.word	0x0801fccd
 801fc40:	0801fccd 	.word	0x0801fccd
 801fc44:	0801fccd 	.word	0x0801fccd
 801fc48:	0801fccd 	.word	0x0801fccd
 801fc4c:	0801fccd 	.word	0x0801fccd
 801fc50:	0801fccd 	.word	0x0801fccd
 801fc54:	0801fccd 	.word	0x0801fccd
 801fc58:	0801fcb5 	.word	0x0801fcb5
 801fc5c:	0801fccd 	.word	0x0801fccd
 801fc60:	0801fccd 	.word	0x0801fccd
 801fc64:	0801fccd 	.word	0x0801fccd
 801fc68:	0801fccd 	.word	0x0801fccd
 801fc6c:	0801fccd 	.word	0x0801fccd
 801fc70:	0801fccd 	.word	0x0801fccd
 801fc74:	0801fccd 	.word	0x0801fccd
 801fc78:	0801fcbd 	.word	0x0801fcbd
 801fc7c:	0801fccd 	.word	0x0801fccd
 801fc80:	0801fccd 	.word	0x0801fccd
 801fc84:	0801fccd 	.word	0x0801fccd
 801fc88:	0801fccd 	.word	0x0801fccd
 801fc8c:	0801fccd 	.word	0x0801fccd
 801fc90:	0801fccd 	.word	0x0801fccd
 801fc94:	0801fccd 	.word	0x0801fccd
 801fc98:	0801fcc5 	.word	0x0801fcc5
 801fc9c:	2301      	movs	r3, #1
 801fc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fca2:	e0c3      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fca4:	2304      	movs	r3, #4
 801fca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fcaa:	e0bf      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fcac:	2308      	movs	r3, #8
 801fcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fcb2:	e0bb      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fcb4:	2310      	movs	r3, #16
 801fcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fcba:	e0b7      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fcbc:	2320      	movs	r3, #32
 801fcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fcc2:	e0b3      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fcc4:	2340      	movs	r3, #64	; 0x40
 801fcc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fcca:	e0af      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fccc:	2380      	movs	r3, #128	; 0x80
 801fcce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fcd2:	bf00      	nop
 801fcd4:	e0aa      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	681b      	ldr	r3, [r3, #0]
 801fcda:	4a79      	ldr	r2, [pc, #484]	; (801fec0 <UART_SetConfig+0x664>)
 801fcdc:	4293      	cmp	r3, r2
 801fcde:	d132      	bne.n	801fd46 <UART_SetConfig+0x4ea>
 801fce0:	4b76      	ldr	r3, [pc, #472]	; (801febc <UART_SetConfig+0x660>)
 801fce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fce4:	f003 0307 	and.w	r3, r3, #7
 801fce8:	2b05      	cmp	r3, #5
 801fcea:	d827      	bhi.n	801fd3c <UART_SetConfig+0x4e0>
 801fcec:	a201      	add	r2, pc, #4	; (adr r2, 801fcf4 <UART_SetConfig+0x498>)
 801fcee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fcf2:	bf00      	nop
 801fcf4:	0801fd0d 	.word	0x0801fd0d
 801fcf8:	0801fd15 	.word	0x0801fd15
 801fcfc:	0801fd1d 	.word	0x0801fd1d
 801fd00:	0801fd25 	.word	0x0801fd25
 801fd04:	0801fd2d 	.word	0x0801fd2d
 801fd08:	0801fd35 	.word	0x0801fd35
 801fd0c:	2300      	movs	r3, #0
 801fd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd12:	e08b      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd14:	2304      	movs	r3, #4
 801fd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd1a:	e087      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd1c:	2308      	movs	r3, #8
 801fd1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd22:	e083      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd24:	2310      	movs	r3, #16
 801fd26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd2a:	e07f      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd2c:	2320      	movs	r3, #32
 801fd2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd32:	e07b      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd34:	2340      	movs	r3, #64	; 0x40
 801fd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd3a:	e077      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd3c:	2380      	movs	r3, #128	; 0x80
 801fd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd42:	bf00      	nop
 801fd44:	e072      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	4a5e      	ldr	r2, [pc, #376]	; (801fec4 <UART_SetConfig+0x668>)
 801fd4c:	4293      	cmp	r3, r2
 801fd4e:	d132      	bne.n	801fdb6 <UART_SetConfig+0x55a>
 801fd50:	4b5a      	ldr	r3, [pc, #360]	; (801febc <UART_SetConfig+0x660>)
 801fd52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fd54:	f003 0307 	and.w	r3, r3, #7
 801fd58:	2b05      	cmp	r3, #5
 801fd5a:	d827      	bhi.n	801fdac <UART_SetConfig+0x550>
 801fd5c:	a201      	add	r2, pc, #4	; (adr r2, 801fd64 <UART_SetConfig+0x508>)
 801fd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fd62:	bf00      	nop
 801fd64:	0801fd7d 	.word	0x0801fd7d
 801fd68:	0801fd85 	.word	0x0801fd85
 801fd6c:	0801fd8d 	.word	0x0801fd8d
 801fd70:	0801fd95 	.word	0x0801fd95
 801fd74:	0801fd9d 	.word	0x0801fd9d
 801fd78:	0801fda5 	.word	0x0801fda5
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd82:	e053      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd84:	2304      	movs	r3, #4
 801fd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd8a:	e04f      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd8c:	2308      	movs	r3, #8
 801fd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd92:	e04b      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd94:	2310      	movs	r3, #16
 801fd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fd9a:	e047      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fd9c:	2320      	movs	r3, #32
 801fd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fda2:	e043      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fda4:	2340      	movs	r3, #64	; 0x40
 801fda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fdaa:	e03f      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fdac:	2380      	movs	r3, #128	; 0x80
 801fdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fdb2:	bf00      	nop
 801fdb4:	e03a      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	4a43      	ldr	r2, [pc, #268]	; (801fec8 <UART_SetConfig+0x66c>)
 801fdbc:	4293      	cmp	r3, r2
 801fdbe:	d132      	bne.n	801fe26 <UART_SetConfig+0x5ca>
 801fdc0:	4b3e      	ldr	r3, [pc, #248]	; (801febc <UART_SetConfig+0x660>)
 801fdc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fdc4:	f003 0307 	and.w	r3, r3, #7
 801fdc8:	2b05      	cmp	r3, #5
 801fdca:	d827      	bhi.n	801fe1c <UART_SetConfig+0x5c0>
 801fdcc:	a201      	add	r2, pc, #4	; (adr r2, 801fdd4 <UART_SetConfig+0x578>)
 801fdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fdd2:	bf00      	nop
 801fdd4:	0801fded 	.word	0x0801fded
 801fdd8:	0801fdf5 	.word	0x0801fdf5
 801fddc:	0801fdfd 	.word	0x0801fdfd
 801fde0:	0801fe05 	.word	0x0801fe05
 801fde4:	0801fe0d 	.word	0x0801fe0d
 801fde8:	0801fe15 	.word	0x0801fe15
 801fdec:	2302      	movs	r3, #2
 801fdee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fdf2:	e01b      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fdf4:	2304      	movs	r3, #4
 801fdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fdfa:	e017      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fdfc:	2308      	movs	r3, #8
 801fdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fe02:	e013      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fe04:	2310      	movs	r3, #16
 801fe06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fe0a:	e00f      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fe0c:	2320      	movs	r3, #32
 801fe0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fe12:	e00b      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fe14:	2340      	movs	r3, #64	; 0x40
 801fe16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fe1a:	e007      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fe1c:	2380      	movs	r3, #128	; 0x80
 801fe1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801fe22:	bf00      	nop
 801fe24:	e002      	b.n	801fe2c <UART_SetConfig+0x5d0>
 801fe26:	2380      	movs	r3, #128	; 0x80
 801fe28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	4a25      	ldr	r2, [pc, #148]	; (801fec8 <UART_SetConfig+0x66c>)
 801fe32:	4293      	cmp	r3, r2
 801fe34:	f040 80b8 	bne.w	801ffa8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801fe38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801fe3c:	2b08      	cmp	r3, #8
 801fe3e:	d019      	beq.n	801fe74 <UART_SetConfig+0x618>
 801fe40:	2b08      	cmp	r3, #8
 801fe42:	dc04      	bgt.n	801fe4e <UART_SetConfig+0x5f2>
 801fe44:	2b02      	cmp	r3, #2
 801fe46:	d009      	beq.n	801fe5c <UART_SetConfig+0x600>
 801fe48:	2b04      	cmp	r3, #4
 801fe4a:	d00b      	beq.n	801fe64 <UART_SetConfig+0x608>
 801fe4c:	e042      	b.n	801fed4 <UART_SetConfig+0x678>
 801fe4e:	2b20      	cmp	r3, #32
 801fe50:	d02b      	beq.n	801feaa <UART_SetConfig+0x64e>
 801fe52:	2b40      	cmp	r3, #64	; 0x40
 801fe54:	d02c      	beq.n	801feb0 <UART_SetConfig+0x654>
 801fe56:	2b10      	cmp	r3, #16
 801fe58:	d014      	beq.n	801fe84 <UART_SetConfig+0x628>
 801fe5a:	e03b      	b.n	801fed4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801fe5c:	f7fb fdb4 	bl	801b9c8 <HAL_RCCEx_GetD3PCLK1Freq>
 801fe60:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801fe62:	e03d      	b.n	801fee0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801fe64:	f107 0314 	add.w	r3, r7, #20
 801fe68:	4618      	mov	r0, r3
 801fe6a:	f7fb fdc3 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801fe6e:	69bb      	ldr	r3, [r7, #24]
 801fe70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801fe72:	e035      	b.n	801fee0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801fe74:	f107 0308 	add.w	r3, r7, #8
 801fe78:	4618      	mov	r0, r3
 801fe7a:	f7fb ff07 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801fe7e:	68fb      	ldr	r3, [r7, #12]
 801fe80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801fe82:	e02d      	b.n	801fee0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801fe84:	4b0d      	ldr	r3, [pc, #52]	; (801febc <UART_SetConfig+0x660>)
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	f003 0320 	and.w	r3, r3, #32
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d009      	beq.n	801fea4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801fe90:	4b0a      	ldr	r3, [pc, #40]	; (801febc <UART_SetConfig+0x660>)
 801fe92:	681b      	ldr	r3, [r3, #0]
 801fe94:	08db      	lsrs	r3, r3, #3
 801fe96:	f003 0303 	and.w	r3, r3, #3
 801fe9a:	4a0c      	ldr	r2, [pc, #48]	; (801fecc <UART_SetConfig+0x670>)
 801fe9c:	fa22 f303 	lsr.w	r3, r2, r3
 801fea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801fea2:	e01d      	b.n	801fee0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 801fea4:	4b09      	ldr	r3, [pc, #36]	; (801fecc <UART_SetConfig+0x670>)
 801fea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801fea8:	e01a      	b.n	801fee0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801feaa:	4b09      	ldr	r3, [pc, #36]	; (801fed0 <UART_SetConfig+0x674>)
 801feac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801feae:	e017      	b.n	801fee0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801feb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801feb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801feb6:	e013      	b.n	801fee0 <UART_SetConfig+0x684>
 801feb8:	40011400 	.word	0x40011400
 801febc:	58024400 	.word	0x58024400
 801fec0:	40007800 	.word	0x40007800
 801fec4:	40007c00 	.word	0x40007c00
 801fec8:	58000c00 	.word	0x58000c00
 801fecc:	03d09000 	.word	0x03d09000
 801fed0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 801fed4:	2300      	movs	r3, #0
 801fed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801fed8:	2301      	movs	r3, #1
 801feda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801fede:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fee2:	2b00      	cmp	r3, #0
 801fee4:	f000 824d 	beq.w	8020382 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801feec:	4aad      	ldr	r2, [pc, #692]	; (80201a4 <UART_SetConfig+0x948>)
 801feee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fef2:	461a      	mov	r2, r3
 801fef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fef6:	fbb3 f3f2 	udiv	r3, r3, r2
 801fefa:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	685a      	ldr	r2, [r3, #4]
 801ff00:	4613      	mov	r3, r2
 801ff02:	005b      	lsls	r3, r3, #1
 801ff04:	4413      	add	r3, r2
 801ff06:	6a3a      	ldr	r2, [r7, #32]
 801ff08:	429a      	cmp	r2, r3
 801ff0a:	d305      	bcc.n	801ff18 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	685b      	ldr	r3, [r3, #4]
 801ff10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801ff12:	6a3a      	ldr	r2, [r7, #32]
 801ff14:	429a      	cmp	r2, r3
 801ff16:	d903      	bls.n	801ff20 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 801ff18:	2301      	movs	r3, #1
 801ff1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801ff1e:	e230      	b.n	8020382 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ff20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff22:	4618      	mov	r0, r3
 801ff24:	f04f 0100 	mov.w	r1, #0
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff2c:	4a9d      	ldr	r2, [pc, #628]	; (80201a4 <UART_SetConfig+0x948>)
 801ff2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ff32:	b29b      	uxth	r3, r3
 801ff34:	f04f 0400 	mov.w	r4, #0
 801ff38:	461a      	mov	r2, r3
 801ff3a:	4623      	mov	r3, r4
 801ff3c:	f7e0 fc34 	bl	80007a8 <__aeabi_uldivmod>
 801ff40:	4603      	mov	r3, r0
 801ff42:	460c      	mov	r4, r1
 801ff44:	4619      	mov	r1, r3
 801ff46:	4622      	mov	r2, r4
 801ff48:	f04f 0300 	mov.w	r3, #0
 801ff4c:	f04f 0400 	mov.w	r4, #0
 801ff50:	0214      	lsls	r4, r2, #8
 801ff52:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 801ff56:	020b      	lsls	r3, r1, #8
 801ff58:	687a      	ldr	r2, [r7, #4]
 801ff5a:	6852      	ldr	r2, [r2, #4]
 801ff5c:	0852      	lsrs	r2, r2, #1
 801ff5e:	4611      	mov	r1, r2
 801ff60:	f04f 0200 	mov.w	r2, #0
 801ff64:	eb13 0b01 	adds.w	fp, r3, r1
 801ff68:	eb44 0c02 	adc.w	ip, r4, r2
 801ff6c:	4658      	mov	r0, fp
 801ff6e:	4661      	mov	r1, ip
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	685b      	ldr	r3, [r3, #4]
 801ff74:	f04f 0400 	mov.w	r4, #0
 801ff78:	461a      	mov	r2, r3
 801ff7a:	4623      	mov	r3, r4
 801ff7c:	f7e0 fc14 	bl	80007a8 <__aeabi_uldivmod>
 801ff80:	4603      	mov	r3, r0
 801ff82:	460c      	mov	r4, r1
 801ff84:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801ff86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ff8c:	d308      	bcc.n	801ffa0 <UART_SetConfig+0x744>
 801ff8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ff94:	d204      	bcs.n	801ffa0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 801ff96:	687b      	ldr	r3, [r7, #4]
 801ff98:	681b      	ldr	r3, [r3, #0]
 801ff9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ff9c:	60da      	str	r2, [r3, #12]
 801ff9e:	e1f0      	b.n	8020382 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 801ffa0:	2301      	movs	r3, #1
 801ffa2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801ffa6:	e1ec      	b.n	8020382 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	69db      	ldr	r3, [r3, #28]
 801ffac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ffb0:	f040 8100 	bne.w	80201b4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 801ffb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801ffb8:	2b40      	cmp	r3, #64	; 0x40
 801ffba:	f200 80b7 	bhi.w	802012c <UART_SetConfig+0x8d0>
 801ffbe:	a201      	add	r2, pc, #4	; (adr r2, 801ffc4 <UART_SetConfig+0x768>)
 801ffc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ffc4:	080200c9 	.word	0x080200c9
 801ffc8:	080200d1 	.word	0x080200d1
 801ffcc:	0802012d 	.word	0x0802012d
 801ffd0:	0802012d 	.word	0x0802012d
 801ffd4:	080200d9 	.word	0x080200d9
 801ffd8:	0802012d 	.word	0x0802012d
 801ffdc:	0802012d 	.word	0x0802012d
 801ffe0:	0802012d 	.word	0x0802012d
 801ffe4:	080200e9 	.word	0x080200e9
 801ffe8:	0802012d 	.word	0x0802012d
 801ffec:	0802012d 	.word	0x0802012d
 801fff0:	0802012d 	.word	0x0802012d
 801fff4:	0802012d 	.word	0x0802012d
 801fff8:	0802012d 	.word	0x0802012d
 801fffc:	0802012d 	.word	0x0802012d
 8020000:	0802012d 	.word	0x0802012d
 8020004:	080200f9 	.word	0x080200f9
 8020008:	0802012d 	.word	0x0802012d
 802000c:	0802012d 	.word	0x0802012d
 8020010:	0802012d 	.word	0x0802012d
 8020014:	0802012d 	.word	0x0802012d
 8020018:	0802012d 	.word	0x0802012d
 802001c:	0802012d 	.word	0x0802012d
 8020020:	0802012d 	.word	0x0802012d
 8020024:	0802012d 	.word	0x0802012d
 8020028:	0802012d 	.word	0x0802012d
 802002c:	0802012d 	.word	0x0802012d
 8020030:	0802012d 	.word	0x0802012d
 8020034:	0802012d 	.word	0x0802012d
 8020038:	0802012d 	.word	0x0802012d
 802003c:	0802012d 	.word	0x0802012d
 8020040:	0802012d 	.word	0x0802012d
 8020044:	0802011f 	.word	0x0802011f
 8020048:	0802012d 	.word	0x0802012d
 802004c:	0802012d 	.word	0x0802012d
 8020050:	0802012d 	.word	0x0802012d
 8020054:	0802012d 	.word	0x0802012d
 8020058:	0802012d 	.word	0x0802012d
 802005c:	0802012d 	.word	0x0802012d
 8020060:	0802012d 	.word	0x0802012d
 8020064:	0802012d 	.word	0x0802012d
 8020068:	0802012d 	.word	0x0802012d
 802006c:	0802012d 	.word	0x0802012d
 8020070:	0802012d 	.word	0x0802012d
 8020074:	0802012d 	.word	0x0802012d
 8020078:	0802012d 	.word	0x0802012d
 802007c:	0802012d 	.word	0x0802012d
 8020080:	0802012d 	.word	0x0802012d
 8020084:	0802012d 	.word	0x0802012d
 8020088:	0802012d 	.word	0x0802012d
 802008c:	0802012d 	.word	0x0802012d
 8020090:	0802012d 	.word	0x0802012d
 8020094:	0802012d 	.word	0x0802012d
 8020098:	0802012d 	.word	0x0802012d
 802009c:	0802012d 	.word	0x0802012d
 80200a0:	0802012d 	.word	0x0802012d
 80200a4:	0802012d 	.word	0x0802012d
 80200a8:	0802012d 	.word	0x0802012d
 80200ac:	0802012d 	.word	0x0802012d
 80200b0:	0802012d 	.word	0x0802012d
 80200b4:	0802012d 	.word	0x0802012d
 80200b8:	0802012d 	.word	0x0802012d
 80200bc:	0802012d 	.word	0x0802012d
 80200c0:	0802012d 	.word	0x0802012d
 80200c4:	08020125 	.word	0x08020125
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80200c8:	f7fa faaa 	bl	801a620 <HAL_RCC_GetPCLK1Freq>
 80200cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80200ce:	e033      	b.n	8020138 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80200d0:	f7fa fabc 	bl	801a64c <HAL_RCC_GetPCLK2Freq>
 80200d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80200d6:	e02f      	b.n	8020138 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80200d8:	f107 0314 	add.w	r3, r7, #20
 80200dc:	4618      	mov	r0, r3
 80200de:	f7fb fc89 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80200e2:	69bb      	ldr	r3, [r7, #24]
 80200e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80200e6:	e027      	b.n	8020138 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80200e8:	f107 0308 	add.w	r3, r7, #8
 80200ec:	4618      	mov	r0, r3
 80200ee:	f7fb fdcd 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80200f2:	68fb      	ldr	r3, [r7, #12]
 80200f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80200f6:	e01f      	b.n	8020138 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80200f8:	4b2b      	ldr	r3, [pc, #172]	; (80201a8 <UART_SetConfig+0x94c>)
 80200fa:	681b      	ldr	r3, [r3, #0]
 80200fc:	f003 0320 	and.w	r3, r3, #32
 8020100:	2b00      	cmp	r3, #0
 8020102:	d009      	beq.n	8020118 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020104:	4b28      	ldr	r3, [pc, #160]	; (80201a8 <UART_SetConfig+0x94c>)
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	08db      	lsrs	r3, r3, #3
 802010a:	f003 0303 	and.w	r3, r3, #3
 802010e:	4a27      	ldr	r2, [pc, #156]	; (80201ac <UART_SetConfig+0x950>)
 8020110:	fa22 f303 	lsr.w	r3, r2, r3
 8020114:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020116:	e00f      	b.n	8020138 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8020118:	4b24      	ldr	r3, [pc, #144]	; (80201ac <UART_SetConfig+0x950>)
 802011a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802011c:	e00c      	b.n	8020138 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802011e:	4b24      	ldr	r3, [pc, #144]	; (80201b0 <UART_SetConfig+0x954>)
 8020120:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8020122:	e009      	b.n	8020138 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020128:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802012a:	e005      	b.n	8020138 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 802012c:	2300      	movs	r3, #0
 802012e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8020130:	2301      	movs	r3, #1
 8020132:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8020136:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802013a:	2b00      	cmp	r3, #0
 802013c:	f000 8121 	beq.w	8020382 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020144:	4a17      	ldr	r2, [pc, #92]	; (80201a4 <UART_SetConfig+0x948>)
 8020146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802014a:	461a      	mov	r2, r3
 802014c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802014e:	fbb3 f3f2 	udiv	r3, r3, r2
 8020152:	005a      	lsls	r2, r3, #1
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	685b      	ldr	r3, [r3, #4]
 8020158:	085b      	lsrs	r3, r3, #1
 802015a:	441a      	add	r2, r3
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	685b      	ldr	r3, [r3, #4]
 8020160:	fbb2 f3f3 	udiv	r3, r2, r3
 8020164:	b29b      	uxth	r3, r3
 8020166:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802016a:	2b0f      	cmp	r3, #15
 802016c:	d916      	bls.n	802019c <UART_SetConfig+0x940>
 802016e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020174:	d212      	bcs.n	802019c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8020176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020178:	b29b      	uxth	r3, r3
 802017a:	f023 030f 	bic.w	r3, r3, #15
 802017e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8020180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020182:	085b      	lsrs	r3, r3, #1
 8020184:	b29b      	uxth	r3, r3
 8020186:	f003 0307 	and.w	r3, r3, #7
 802018a:	b29a      	uxth	r2, r3
 802018c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802018e:	4313      	orrs	r3, r2
 8020190:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020198:	60da      	str	r2, [r3, #12]
 802019a:	e0f2      	b.n	8020382 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 802019c:	2301      	movs	r3, #1
 802019e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80201a2:	e0ee      	b.n	8020382 <UART_SetConfig+0xb26>
 80201a4:	0802d744 	.word	0x0802d744
 80201a8:	58024400 	.word	0x58024400
 80201ac:	03d09000 	.word	0x03d09000
 80201b0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80201b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80201b8:	2b40      	cmp	r3, #64	; 0x40
 80201ba:	f200 80b7 	bhi.w	802032c <UART_SetConfig+0xad0>
 80201be:	a201      	add	r2, pc, #4	; (adr r2, 80201c4 <UART_SetConfig+0x968>)
 80201c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80201c4:	080202c9 	.word	0x080202c9
 80201c8:	080202d1 	.word	0x080202d1
 80201cc:	0802032d 	.word	0x0802032d
 80201d0:	0802032d 	.word	0x0802032d
 80201d4:	080202d9 	.word	0x080202d9
 80201d8:	0802032d 	.word	0x0802032d
 80201dc:	0802032d 	.word	0x0802032d
 80201e0:	0802032d 	.word	0x0802032d
 80201e4:	080202e9 	.word	0x080202e9
 80201e8:	0802032d 	.word	0x0802032d
 80201ec:	0802032d 	.word	0x0802032d
 80201f0:	0802032d 	.word	0x0802032d
 80201f4:	0802032d 	.word	0x0802032d
 80201f8:	0802032d 	.word	0x0802032d
 80201fc:	0802032d 	.word	0x0802032d
 8020200:	0802032d 	.word	0x0802032d
 8020204:	080202f9 	.word	0x080202f9
 8020208:	0802032d 	.word	0x0802032d
 802020c:	0802032d 	.word	0x0802032d
 8020210:	0802032d 	.word	0x0802032d
 8020214:	0802032d 	.word	0x0802032d
 8020218:	0802032d 	.word	0x0802032d
 802021c:	0802032d 	.word	0x0802032d
 8020220:	0802032d 	.word	0x0802032d
 8020224:	0802032d 	.word	0x0802032d
 8020228:	0802032d 	.word	0x0802032d
 802022c:	0802032d 	.word	0x0802032d
 8020230:	0802032d 	.word	0x0802032d
 8020234:	0802032d 	.word	0x0802032d
 8020238:	0802032d 	.word	0x0802032d
 802023c:	0802032d 	.word	0x0802032d
 8020240:	0802032d 	.word	0x0802032d
 8020244:	0802031f 	.word	0x0802031f
 8020248:	0802032d 	.word	0x0802032d
 802024c:	0802032d 	.word	0x0802032d
 8020250:	0802032d 	.word	0x0802032d
 8020254:	0802032d 	.word	0x0802032d
 8020258:	0802032d 	.word	0x0802032d
 802025c:	0802032d 	.word	0x0802032d
 8020260:	0802032d 	.word	0x0802032d
 8020264:	0802032d 	.word	0x0802032d
 8020268:	0802032d 	.word	0x0802032d
 802026c:	0802032d 	.word	0x0802032d
 8020270:	0802032d 	.word	0x0802032d
 8020274:	0802032d 	.word	0x0802032d
 8020278:	0802032d 	.word	0x0802032d
 802027c:	0802032d 	.word	0x0802032d
 8020280:	0802032d 	.word	0x0802032d
 8020284:	0802032d 	.word	0x0802032d
 8020288:	0802032d 	.word	0x0802032d
 802028c:	0802032d 	.word	0x0802032d
 8020290:	0802032d 	.word	0x0802032d
 8020294:	0802032d 	.word	0x0802032d
 8020298:	0802032d 	.word	0x0802032d
 802029c:	0802032d 	.word	0x0802032d
 80202a0:	0802032d 	.word	0x0802032d
 80202a4:	0802032d 	.word	0x0802032d
 80202a8:	0802032d 	.word	0x0802032d
 80202ac:	0802032d 	.word	0x0802032d
 80202b0:	0802032d 	.word	0x0802032d
 80202b4:	0802032d 	.word	0x0802032d
 80202b8:	0802032d 	.word	0x0802032d
 80202bc:	0802032d 	.word	0x0802032d
 80202c0:	0802032d 	.word	0x0802032d
 80202c4:	08020325 	.word	0x08020325
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80202c8:	f7fa f9aa 	bl	801a620 <HAL_RCC_GetPCLK1Freq>
 80202cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80202ce:	e033      	b.n	8020338 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80202d0:	f7fa f9bc 	bl	801a64c <HAL_RCC_GetPCLK2Freq>
 80202d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80202d6:	e02f      	b.n	8020338 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80202d8:	f107 0314 	add.w	r3, r7, #20
 80202dc:	4618      	mov	r0, r3
 80202de:	f7fb fb89 	bl	801b9f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80202e2:	69bb      	ldr	r3, [r7, #24]
 80202e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80202e6:	e027      	b.n	8020338 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80202e8:	f107 0308 	add.w	r3, r7, #8
 80202ec:	4618      	mov	r0, r3
 80202ee:	f7fb fccd 	bl	801bc8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80202f2:	68fb      	ldr	r3, [r7, #12]
 80202f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80202f6:	e01f      	b.n	8020338 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80202f8:	4b2c      	ldr	r3, [pc, #176]	; (80203ac <UART_SetConfig+0xb50>)
 80202fa:	681b      	ldr	r3, [r3, #0]
 80202fc:	f003 0320 	and.w	r3, r3, #32
 8020300:	2b00      	cmp	r3, #0
 8020302:	d009      	beq.n	8020318 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020304:	4b29      	ldr	r3, [pc, #164]	; (80203ac <UART_SetConfig+0xb50>)
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	08db      	lsrs	r3, r3, #3
 802030a:	f003 0303 	and.w	r3, r3, #3
 802030e:	4a28      	ldr	r2, [pc, #160]	; (80203b0 <UART_SetConfig+0xb54>)
 8020310:	fa22 f303 	lsr.w	r3, r2, r3
 8020314:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020316:	e00f      	b.n	8020338 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8020318:	4b25      	ldr	r3, [pc, #148]	; (80203b0 <UART_SetConfig+0xb54>)
 802031a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802031c:	e00c      	b.n	8020338 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802031e:	4b25      	ldr	r3, [pc, #148]	; (80203b4 <UART_SetConfig+0xb58>)
 8020320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8020322:	e009      	b.n	8020338 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020328:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802032a:	e005      	b.n	8020338 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 802032c:	2300      	movs	r3, #0
 802032e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8020330:	2301      	movs	r3, #1
 8020332:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8020336:	bf00      	nop
    }

    if (pclk != 0U)
 8020338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802033a:	2b00      	cmp	r3, #0
 802033c:	d021      	beq.n	8020382 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020342:	4a1d      	ldr	r2, [pc, #116]	; (80203b8 <UART_SetConfig+0xb5c>)
 8020344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020348:	461a      	mov	r2, r3
 802034a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802034c:	fbb3 f2f2 	udiv	r2, r3, r2
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	685b      	ldr	r3, [r3, #4]
 8020354:	085b      	lsrs	r3, r3, #1
 8020356:	441a      	add	r2, r3
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	685b      	ldr	r3, [r3, #4]
 802035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8020360:	b29b      	uxth	r3, r3
 8020362:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020366:	2b0f      	cmp	r3, #15
 8020368:	d908      	bls.n	802037c <UART_SetConfig+0xb20>
 802036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802036c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020370:	d204      	bcs.n	802037c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8020372:	687b      	ldr	r3, [r7, #4]
 8020374:	681b      	ldr	r3, [r3, #0]
 8020376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020378:	60da      	str	r2, [r3, #12]
 802037a:	e002      	b.n	8020382 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 802037c:	2301      	movs	r3, #1
 802037e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	2201      	movs	r2, #1
 8020386:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 802038a:	687b      	ldr	r3, [r7, #4]
 802038c:	2201      	movs	r2, #1
 802038e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	2200      	movs	r2, #0
 8020396:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	2200      	movs	r2, #0
 802039c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 802039e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80203a2:	4618      	mov	r0, r3
 80203a4:	3738      	adds	r7, #56	; 0x38
 80203a6:	46bd      	mov	sp, r7
 80203a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80203ac:	58024400 	.word	0x58024400
 80203b0:	03d09000 	.word	0x03d09000
 80203b4:	003d0900 	.word	0x003d0900
 80203b8:	0802d744 	.word	0x0802d744

080203bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80203bc:	b480      	push	{r7}
 80203be:	b083      	sub	sp, #12
 80203c0:	af00      	add	r7, sp, #0
 80203c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80203c8:	f003 0301 	and.w	r3, r3, #1
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	d00a      	beq.n	80203e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	681b      	ldr	r3, [r3, #0]
 80203d4:	685b      	ldr	r3, [r3, #4]
 80203d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80203de:	687b      	ldr	r3, [r7, #4]
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	430a      	orrs	r2, r1
 80203e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80203ea:	f003 0302 	and.w	r3, r3, #2
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	d00a      	beq.n	8020408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	681b      	ldr	r3, [r3, #0]
 80203f6:	685b      	ldr	r3, [r3, #4]
 80203f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020400:	687b      	ldr	r3, [r7, #4]
 8020402:	681b      	ldr	r3, [r3, #0]
 8020404:	430a      	orrs	r2, r1
 8020406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802040c:	f003 0304 	and.w	r3, r3, #4
 8020410:	2b00      	cmp	r3, #0
 8020412:	d00a      	beq.n	802042a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	685b      	ldr	r3, [r3, #4]
 802041a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	681b      	ldr	r3, [r3, #0]
 8020426:	430a      	orrs	r2, r1
 8020428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802042e:	f003 0308 	and.w	r3, r3, #8
 8020432:	2b00      	cmp	r3, #0
 8020434:	d00a      	beq.n	802044c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8020436:	687b      	ldr	r3, [r7, #4]
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	685b      	ldr	r3, [r3, #4]
 802043c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020444:	687b      	ldr	r3, [r7, #4]
 8020446:	681b      	ldr	r3, [r3, #0]
 8020448:	430a      	orrs	r2, r1
 802044a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 802044c:	687b      	ldr	r3, [r7, #4]
 802044e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020450:	f003 0310 	and.w	r3, r3, #16
 8020454:	2b00      	cmp	r3, #0
 8020456:	d00a      	beq.n	802046e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	689b      	ldr	r3, [r3, #8]
 802045e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	681b      	ldr	r3, [r3, #0]
 802046a:	430a      	orrs	r2, r1
 802046c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020472:	f003 0320 	and.w	r3, r3, #32
 8020476:	2b00      	cmp	r3, #0
 8020478:	d00a      	beq.n	8020490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802047a:	687b      	ldr	r3, [r7, #4]
 802047c:	681b      	ldr	r3, [r3, #0]
 802047e:	689b      	ldr	r3, [r3, #8]
 8020480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	681b      	ldr	r3, [r3, #0]
 802048c:	430a      	orrs	r2, r1
 802048e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020498:	2b00      	cmp	r3, #0
 802049a:	d01a      	beq.n	80204d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	685b      	ldr	r3, [r3, #4]
 80204a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80204a6:	687b      	ldr	r3, [r7, #4]
 80204a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	681b      	ldr	r3, [r3, #0]
 80204ae:	430a      	orrs	r2, r1
 80204b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80204b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80204ba:	d10a      	bne.n	80204d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	681b      	ldr	r3, [r3, #0]
 80204c0:	685b      	ldr	r3, [r3, #4]
 80204c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80204c6:	687b      	ldr	r3, [r7, #4]
 80204c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80204ca:	687b      	ldr	r3, [r7, #4]
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	430a      	orrs	r2, r1
 80204d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80204d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80204da:	2b00      	cmp	r3, #0
 80204dc:	d00a      	beq.n	80204f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80204de:	687b      	ldr	r3, [r7, #4]
 80204e0:	681b      	ldr	r3, [r3, #0]
 80204e2:	685b      	ldr	r3, [r3, #4]
 80204e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	681b      	ldr	r3, [r3, #0]
 80204f0:	430a      	orrs	r2, r1
 80204f2:	605a      	str	r2, [r3, #4]
  }
}
 80204f4:	bf00      	nop
 80204f6:	370c      	adds	r7, #12
 80204f8:	46bd      	mov	sp, r7
 80204fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204fe:	4770      	bx	lr

08020500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8020500:	b580      	push	{r7, lr}
 8020502:	b086      	sub	sp, #24
 8020504:	af02      	add	r7, sp, #8
 8020506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	2200      	movs	r2, #0
 802050c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8020510:	f7f2 fda2 	bl	8013058 <HAL_GetTick>
 8020514:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	681b      	ldr	r3, [r3, #0]
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	f003 0308 	and.w	r3, r3, #8
 8020520:	2b08      	cmp	r3, #8
 8020522:	d10e      	bne.n	8020542 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8020528:	9300      	str	r3, [sp, #0]
 802052a:	68fb      	ldr	r3, [r7, #12]
 802052c:	2200      	movs	r2, #0
 802052e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8020532:	6878      	ldr	r0, [r7, #4]
 8020534:	f000 f82c 	bl	8020590 <UART_WaitOnFlagUntilTimeout>
 8020538:	4603      	mov	r3, r0
 802053a:	2b00      	cmp	r3, #0
 802053c:	d001      	beq.n	8020542 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802053e:	2303      	movs	r3, #3
 8020540:	e022      	b.n	8020588 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8020542:	687b      	ldr	r3, [r7, #4]
 8020544:	681b      	ldr	r3, [r3, #0]
 8020546:	681b      	ldr	r3, [r3, #0]
 8020548:	f003 0304 	and.w	r3, r3, #4
 802054c:	2b04      	cmp	r3, #4
 802054e:	d10e      	bne.n	802056e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8020554:	9300      	str	r3, [sp, #0]
 8020556:	68fb      	ldr	r3, [r7, #12]
 8020558:	2200      	movs	r2, #0
 802055a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 802055e:	6878      	ldr	r0, [r7, #4]
 8020560:	f000 f816 	bl	8020590 <UART_WaitOnFlagUntilTimeout>
 8020564:	4603      	mov	r3, r0
 8020566:	2b00      	cmp	r3, #0
 8020568:	d001      	beq.n	802056e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802056a:	2303      	movs	r3, #3
 802056c:	e00c      	b.n	8020588 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	2220      	movs	r2, #32
 8020572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	2220      	movs	r2, #32
 802057a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	2200      	movs	r2, #0
 8020582:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8020586:	2300      	movs	r3, #0
}
 8020588:	4618      	mov	r0, r3
 802058a:	3710      	adds	r7, #16
 802058c:	46bd      	mov	sp, r7
 802058e:	bd80      	pop	{r7, pc}

08020590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8020590:	b580      	push	{r7, lr}
 8020592:	b084      	sub	sp, #16
 8020594:	af00      	add	r7, sp, #0
 8020596:	60f8      	str	r0, [r7, #12]
 8020598:	60b9      	str	r1, [r7, #8]
 802059a:	603b      	str	r3, [r7, #0]
 802059c:	4613      	mov	r3, r2
 802059e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80205a0:	e062      	b.n	8020668 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80205a2:	69bb      	ldr	r3, [r7, #24]
 80205a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80205a8:	d05e      	beq.n	8020668 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80205aa:	f7f2 fd55 	bl	8013058 <HAL_GetTick>
 80205ae:	4602      	mov	r2, r0
 80205b0:	683b      	ldr	r3, [r7, #0]
 80205b2:	1ad3      	subs	r3, r2, r3
 80205b4:	69ba      	ldr	r2, [r7, #24]
 80205b6:	429a      	cmp	r2, r3
 80205b8:	d302      	bcc.n	80205c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80205ba:	69bb      	ldr	r3, [r7, #24]
 80205bc:	2b00      	cmp	r3, #0
 80205be:	d11d      	bne.n	80205fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80205c0:	68fb      	ldr	r3, [r7, #12]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	681a      	ldr	r2, [r3, #0]
 80205c6:	68fb      	ldr	r3, [r7, #12]
 80205c8:	681b      	ldr	r3, [r3, #0]
 80205ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80205ce:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80205d0:	68fb      	ldr	r3, [r7, #12]
 80205d2:	681b      	ldr	r3, [r3, #0]
 80205d4:	689a      	ldr	r2, [r3, #8]
 80205d6:	68fb      	ldr	r3, [r7, #12]
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	f022 0201 	bic.w	r2, r2, #1
 80205de:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80205e0:	68fb      	ldr	r3, [r7, #12]
 80205e2:	2220      	movs	r2, #32
 80205e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80205e8:	68fb      	ldr	r3, [r7, #12]
 80205ea:	2220      	movs	r2, #32
 80205ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80205f0:	68fb      	ldr	r3, [r7, #12]
 80205f2:	2200      	movs	r2, #0
 80205f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80205f8:	2303      	movs	r3, #3
 80205fa:	e045      	b.n	8020688 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80205fc:	68fb      	ldr	r3, [r7, #12]
 80205fe:	681b      	ldr	r3, [r3, #0]
 8020600:	681b      	ldr	r3, [r3, #0]
 8020602:	f003 0304 	and.w	r3, r3, #4
 8020606:	2b00      	cmp	r3, #0
 8020608:	d02e      	beq.n	8020668 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802060a:	68fb      	ldr	r3, [r7, #12]
 802060c:	681b      	ldr	r3, [r3, #0]
 802060e:	69db      	ldr	r3, [r3, #28]
 8020610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020618:	d126      	bne.n	8020668 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802061a:	68fb      	ldr	r3, [r7, #12]
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020622:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8020624:	68fb      	ldr	r3, [r7, #12]
 8020626:	681b      	ldr	r3, [r3, #0]
 8020628:	681a      	ldr	r2, [r3, #0]
 802062a:	68fb      	ldr	r3, [r7, #12]
 802062c:	681b      	ldr	r3, [r3, #0]
 802062e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8020632:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020634:	68fb      	ldr	r3, [r7, #12]
 8020636:	681b      	ldr	r3, [r3, #0]
 8020638:	689a      	ldr	r2, [r3, #8]
 802063a:	68fb      	ldr	r3, [r7, #12]
 802063c:	681b      	ldr	r3, [r3, #0]
 802063e:	f022 0201 	bic.w	r2, r2, #1
 8020642:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8020644:	68fb      	ldr	r3, [r7, #12]
 8020646:	2220      	movs	r2, #32
 8020648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 802064c:	68fb      	ldr	r3, [r7, #12]
 802064e:	2220      	movs	r2, #32
 8020650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8020654:	68fb      	ldr	r3, [r7, #12]
 8020656:	2220      	movs	r2, #32
 8020658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	2200      	movs	r2, #0
 8020660:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8020664:	2303      	movs	r3, #3
 8020666:	e00f      	b.n	8020688 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020668:	68fb      	ldr	r3, [r7, #12]
 802066a:	681b      	ldr	r3, [r3, #0]
 802066c:	69da      	ldr	r2, [r3, #28]
 802066e:	68bb      	ldr	r3, [r7, #8]
 8020670:	4013      	ands	r3, r2
 8020672:	68ba      	ldr	r2, [r7, #8]
 8020674:	429a      	cmp	r2, r3
 8020676:	bf0c      	ite	eq
 8020678:	2301      	moveq	r3, #1
 802067a:	2300      	movne	r3, #0
 802067c:	b2db      	uxtb	r3, r3
 802067e:	461a      	mov	r2, r3
 8020680:	79fb      	ldrb	r3, [r7, #7]
 8020682:	429a      	cmp	r2, r3
 8020684:	d08d      	beq.n	80205a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020686:	2300      	movs	r3, #0
}
 8020688:	4618      	mov	r0, r3
 802068a:	3710      	adds	r7, #16
 802068c:	46bd      	mov	sp, r7
 802068e:	bd80      	pop	{r7, pc}

08020690 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8020690:	b480      	push	{r7}
 8020692:	b083      	sub	sp, #12
 8020694:	af00      	add	r7, sp, #0
 8020696:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	681a      	ldr	r2, [r3, #0]
 802069e:	687b      	ldr	r3, [r7, #4]
 80206a0:	681b      	ldr	r3, [r3, #0]
 80206a2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80206a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	681b      	ldr	r3, [r3, #0]
 80206ac:	689a      	ldr	r2, [r3, #8]
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80206b6:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	2220      	movs	r2, #32
 80206bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80206c0:	bf00      	nop
 80206c2:	370c      	adds	r7, #12
 80206c4:	46bd      	mov	sp, r7
 80206c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206ca:	4770      	bx	lr

080206cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80206cc:	b480      	push	{r7}
 80206ce:	b083      	sub	sp, #12
 80206d0:	af00      	add	r7, sp, #0
 80206d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	681a      	ldr	r2, [r3, #0]
 80206da:	687b      	ldr	r3, [r7, #4]
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80206e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	6899      	ldr	r1, [r3, #8]
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	681a      	ldr	r2, [r3, #0]
 80206ee:	4b08      	ldr	r3, [pc, #32]	; (8020710 <UART_EndRxTransfer+0x44>)
 80206f0:	400b      	ands	r3, r1
 80206f2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	2220      	movs	r2, #32
 80206f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	2200      	movs	r2, #0
 8020700:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8020702:	bf00      	nop
 8020704:	370c      	adds	r7, #12
 8020706:	46bd      	mov	sp, r7
 8020708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802070c:	4770      	bx	lr
 802070e:	bf00      	nop
 8020710:	effffffe 	.word	0xeffffffe

08020714 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8020714:	b580      	push	{r7, lr}
 8020716:	b084      	sub	sp, #16
 8020718:	af00      	add	r7, sp, #0
 802071a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020720:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	69db      	ldr	r3, [r3, #28]
 8020726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802072a:	d01f      	beq.n	802076c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 802072c:	68fb      	ldr	r3, [r7, #12]
 802072e:	2200      	movs	r2, #0
 8020730:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8020734:	68fb      	ldr	r3, [r7, #12]
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	681a      	ldr	r2, [r3, #0]
 802073a:	68fb      	ldr	r3, [r7, #12]
 802073c:	681b      	ldr	r3, [r3, #0]
 802073e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8020742:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020744:	68fb      	ldr	r3, [r7, #12]
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	689a      	ldr	r2, [r3, #8]
 802074a:	68fb      	ldr	r3, [r7, #12]
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	f022 0201 	bic.w	r2, r2, #1
 8020752:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020754:	68fb      	ldr	r3, [r7, #12]
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	689a      	ldr	r2, [r3, #8]
 802075a:	68fb      	ldr	r3, [r7, #12]
 802075c:	681b      	ldr	r3, [r3, #0]
 802075e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8020762:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8020764:	68fb      	ldr	r3, [r7, #12]
 8020766:	2220      	movs	r2, #32
 8020768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 802076c:	68f8      	ldr	r0, [r7, #12]
 802076e:	f7f0 fb91 	bl	8010e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8020772:	bf00      	nop
 8020774:	3710      	adds	r7, #16
 8020776:	46bd      	mov	sp, r7
 8020778:	bd80      	pop	{r7, pc}

0802077a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 802077a:	b580      	push	{r7, lr}
 802077c:	b084      	sub	sp, #16
 802077e:	af00      	add	r7, sp, #0
 8020780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020786:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8020788:	68f8      	ldr	r0, [r7, #12]
 802078a:	f7ff f853 	bl	801f834 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802078e:	bf00      	nop
 8020790:	3710      	adds	r7, #16
 8020792:	46bd      	mov	sp, r7
 8020794:	bd80      	pop	{r7, pc}

08020796 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8020796:	b580      	push	{r7, lr}
 8020798:	b086      	sub	sp, #24
 802079a:	af00      	add	r7, sp, #0
 802079c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802079e:	687b      	ldr	r3, [r7, #4]
 80207a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80207a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80207a4:	697b      	ldr	r3, [r7, #20]
 80207a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80207aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80207ac:	697b      	ldr	r3, [r7, #20]
 80207ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80207b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80207b4:	697b      	ldr	r3, [r7, #20]
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	689b      	ldr	r3, [r3, #8]
 80207ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80207be:	2b80      	cmp	r3, #128	; 0x80
 80207c0:	d109      	bne.n	80207d6 <UART_DMAError+0x40>
 80207c2:	693b      	ldr	r3, [r7, #16]
 80207c4:	2b21      	cmp	r3, #33	; 0x21
 80207c6:	d106      	bne.n	80207d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80207c8:	697b      	ldr	r3, [r7, #20]
 80207ca:	2200      	movs	r2, #0
 80207cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80207d0:	6978      	ldr	r0, [r7, #20]
 80207d2:	f7ff ff5d 	bl	8020690 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80207d6:	697b      	ldr	r3, [r7, #20]
 80207d8:	681b      	ldr	r3, [r3, #0]
 80207da:	689b      	ldr	r3, [r3, #8]
 80207dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80207e0:	2b40      	cmp	r3, #64	; 0x40
 80207e2:	d109      	bne.n	80207f8 <UART_DMAError+0x62>
 80207e4:	68fb      	ldr	r3, [r7, #12]
 80207e6:	2b22      	cmp	r3, #34	; 0x22
 80207e8:	d106      	bne.n	80207f8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80207ea:	697b      	ldr	r3, [r7, #20]
 80207ec:	2200      	movs	r2, #0
 80207ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80207f2:	6978      	ldr	r0, [r7, #20]
 80207f4:	f7ff ff6a 	bl	80206cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80207f8:	697b      	ldr	r3, [r7, #20]
 80207fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80207fe:	f043 0210 	orr.w	r2, r3, #16
 8020802:	697b      	ldr	r3, [r7, #20]
 8020804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8020808:	6978      	ldr	r0, [r7, #20]
 802080a:	f7ff f81d 	bl	801f848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802080e:	bf00      	nop
 8020810:	3718      	adds	r7, #24
 8020812:	46bd      	mov	sp, r7
 8020814:	bd80      	pop	{r7, pc}

08020816 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8020816:	b580      	push	{r7, lr}
 8020818:	b084      	sub	sp, #16
 802081a:	af00      	add	r7, sp, #0
 802081c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020822:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8020824:	68fb      	ldr	r3, [r7, #12]
 8020826:	2200      	movs	r2, #0
 8020828:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 802082c:	68fb      	ldr	r3, [r7, #12]
 802082e:	2200      	movs	r2, #0
 8020830:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8020834:	68f8      	ldr	r0, [r7, #12]
 8020836:	f7ff f807 	bl	801f848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802083a:	bf00      	nop
 802083c:	3710      	adds	r7, #16
 802083e:	46bd      	mov	sp, r7
 8020840:	bd80      	pop	{r7, pc}

08020842 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8020842:	b580      	push	{r7, lr}
 8020844:	b082      	sub	sp, #8
 8020846:	af00      	add	r7, sp, #0
 8020848:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	681b      	ldr	r3, [r3, #0]
 802084e:	681a      	ldr	r2, [r3, #0]
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8020858:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	2220      	movs	r2, #32
 802085e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8020862:	687b      	ldr	r3, [r7, #4]
 8020864:	2200      	movs	r2, #0
 8020866:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8020868:	6878      	ldr	r0, [r7, #4]
 802086a:	f7fe ffd9 	bl	801f820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802086e:	bf00      	nop
 8020870:	3708      	adds	r7, #8
 8020872:	46bd      	mov	sp, r7
 8020874:	bd80      	pop	{r7, pc}

08020876 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8020876:	b480      	push	{r7}
 8020878:	b083      	sub	sp, #12
 802087a:	af00      	add	r7, sp, #0
 802087c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 802087e:	bf00      	nop
 8020880:	370c      	adds	r7, #12
 8020882:	46bd      	mov	sp, r7
 8020884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020888:	4770      	bx	lr

0802088a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 802088a:	b480      	push	{r7}
 802088c:	b083      	sub	sp, #12
 802088e:	af00      	add	r7, sp, #0
 8020890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8020892:	bf00      	nop
 8020894:	370c      	adds	r7, #12
 8020896:	46bd      	mov	sp, r7
 8020898:	f85d 7b04 	ldr.w	r7, [sp], #4
 802089c:	4770      	bx	lr

0802089e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 802089e:	b480      	push	{r7}
 80208a0:	b083      	sub	sp, #12
 80208a2:	af00      	add	r7, sp, #0
 80208a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80208a6:	bf00      	nop
 80208a8:	370c      	adds	r7, #12
 80208aa:	46bd      	mov	sp, r7
 80208ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208b0:	4770      	bx	lr

080208b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80208b2:	b480      	push	{r7}
 80208b4:	b085      	sub	sp, #20
 80208b6:	af00      	add	r7, sp, #0
 80208b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80208c0:	2b01      	cmp	r3, #1
 80208c2:	d101      	bne.n	80208c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80208c4:	2302      	movs	r3, #2
 80208c6:	e027      	b.n	8020918 <HAL_UARTEx_DisableFifoMode+0x66>
 80208c8:	687b      	ldr	r3, [r7, #4]
 80208ca:	2201      	movs	r2, #1
 80208cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80208d0:	687b      	ldr	r3, [r7, #4]
 80208d2:	2224      	movs	r2, #36	; 0x24
 80208d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	681b      	ldr	r3, [r3, #0]
 80208dc:	681b      	ldr	r3, [r3, #0]
 80208de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80208e0:	687b      	ldr	r3, [r7, #4]
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	681a      	ldr	r2, [r3, #0]
 80208e6:	687b      	ldr	r3, [r7, #4]
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	f022 0201 	bic.w	r2, r2, #1
 80208ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80208f0:	68fb      	ldr	r3, [r7, #12]
 80208f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80208f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80208f8:	687b      	ldr	r3, [r7, #4]
 80208fa:	2200      	movs	r2, #0
 80208fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80208fe:	687b      	ldr	r3, [r7, #4]
 8020900:	681b      	ldr	r3, [r3, #0]
 8020902:	68fa      	ldr	r2, [r7, #12]
 8020904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	2220      	movs	r2, #32
 802090a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	2200      	movs	r2, #0
 8020912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8020916:	2300      	movs	r3, #0
}
 8020918:	4618      	mov	r0, r3
 802091a:	3714      	adds	r7, #20
 802091c:	46bd      	mov	sp, r7
 802091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020922:	4770      	bx	lr

08020924 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020924:	b580      	push	{r7, lr}
 8020926:	b084      	sub	sp, #16
 8020928:	af00      	add	r7, sp, #0
 802092a:	6078      	str	r0, [r7, #4]
 802092c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802092e:	687b      	ldr	r3, [r7, #4]
 8020930:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8020934:	2b01      	cmp	r3, #1
 8020936:	d101      	bne.n	802093c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8020938:	2302      	movs	r3, #2
 802093a:	e02d      	b.n	8020998 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	2201      	movs	r2, #1
 8020940:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8020944:	687b      	ldr	r3, [r7, #4]
 8020946:	2224      	movs	r2, #36	; 0x24
 8020948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802094c:	687b      	ldr	r3, [r7, #4]
 802094e:	681b      	ldr	r3, [r3, #0]
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020954:	687b      	ldr	r3, [r7, #4]
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	681a      	ldr	r2, [r3, #0]
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	681b      	ldr	r3, [r3, #0]
 802095e:	f022 0201 	bic.w	r2, r2, #1
 8020962:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	681b      	ldr	r3, [r3, #0]
 8020968:	689b      	ldr	r3, [r3, #8]
 802096a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	683a      	ldr	r2, [r7, #0]
 8020974:	430a      	orrs	r2, r1
 8020976:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020978:	6878      	ldr	r0, [r7, #4]
 802097a:	f000 f84f 	bl	8020a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	681b      	ldr	r3, [r3, #0]
 8020982:	68fa      	ldr	r2, [r7, #12]
 8020984:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020986:	687b      	ldr	r3, [r7, #4]
 8020988:	2220      	movs	r2, #32
 802098a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	2200      	movs	r2, #0
 8020992:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8020996:	2300      	movs	r3, #0
}
 8020998:	4618      	mov	r0, r3
 802099a:	3710      	adds	r7, #16
 802099c:	46bd      	mov	sp, r7
 802099e:	bd80      	pop	{r7, pc}

080209a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80209a0:	b580      	push	{r7, lr}
 80209a2:	b084      	sub	sp, #16
 80209a4:	af00      	add	r7, sp, #0
 80209a6:	6078      	str	r0, [r7, #4]
 80209a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80209b0:	2b01      	cmp	r3, #1
 80209b2:	d101      	bne.n	80209b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80209b4:	2302      	movs	r3, #2
 80209b6:	e02d      	b.n	8020a14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	2201      	movs	r2, #1
 80209bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	2224      	movs	r2, #36	; 0x24
 80209c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	681b      	ldr	r3, [r3, #0]
 80209cc:	681b      	ldr	r3, [r3, #0]
 80209ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	681b      	ldr	r3, [r3, #0]
 80209d4:	681a      	ldr	r2, [r3, #0]
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	f022 0201 	bic.w	r2, r2, #1
 80209de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	689b      	ldr	r3, [r3, #8]
 80209e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	681b      	ldr	r3, [r3, #0]
 80209ee:	683a      	ldr	r2, [r7, #0]
 80209f0:	430a      	orrs	r2, r1
 80209f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80209f4:	6878      	ldr	r0, [r7, #4]
 80209f6:	f000 f811 	bl	8020a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80209fa:	687b      	ldr	r3, [r7, #4]
 80209fc:	681b      	ldr	r3, [r3, #0]
 80209fe:	68fa      	ldr	r2, [r7, #12]
 8020a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	2220      	movs	r2, #32
 8020a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8020a12:	2300      	movs	r3, #0
}
 8020a14:	4618      	mov	r0, r3
 8020a16:	3710      	adds	r7, #16
 8020a18:	46bd      	mov	sp, r7
 8020a1a:	bd80      	pop	{r7, pc}

08020a1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8020a1c:	b480      	push	{r7}
 8020a1e:	b089      	sub	sp, #36	; 0x24
 8020a20:	af00      	add	r7, sp, #0
 8020a22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8020a24:	4a2f      	ldr	r2, [pc, #188]	; (8020ae4 <UARTEx_SetNbDataToProcess+0xc8>)
 8020a26:	f107 0314 	add.w	r3, r7, #20
 8020a2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020a2e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8020a32:	4a2d      	ldr	r2, [pc, #180]	; (8020ae8 <UARTEx_SetNbDataToProcess+0xcc>)
 8020a34:	f107 030c 	add.w	r3, r7, #12
 8020a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020a3c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	d108      	bne.n	8020a5a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8020a48:	687b      	ldr	r3, [r7, #4]
 8020a4a:	2201      	movs	r2, #1
 8020a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8020a50:	687b      	ldr	r3, [r7, #4]
 8020a52:	2201      	movs	r2, #1
 8020a54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8020a58:	e03d      	b.n	8020ad6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8020a5a:	2310      	movs	r3, #16
 8020a5c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8020a5e:	2310      	movs	r3, #16
 8020a60:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	681b      	ldr	r3, [r3, #0]
 8020a66:	689b      	ldr	r3, [r3, #8]
 8020a68:	0e5b      	lsrs	r3, r3, #25
 8020a6a:	b2db      	uxtb	r3, r3
 8020a6c:	f003 0307 	and.w	r3, r3, #7
 8020a70:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	681b      	ldr	r3, [r3, #0]
 8020a76:	689b      	ldr	r3, [r3, #8]
 8020a78:	0f5b      	lsrs	r3, r3, #29
 8020a7a:	b2db      	uxtb	r3, r3
 8020a7c:	f003 0307 	and.w	r3, r3, #7
 8020a80:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8020a82:	7fbb      	ldrb	r3, [r7, #30]
 8020a84:	7f3a      	ldrb	r2, [r7, #28]
 8020a86:	f107 0120 	add.w	r1, r7, #32
 8020a8a:	440a      	add	r2, r1
 8020a8c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8020a90:	fb02 f303 	mul.w	r3, r2, r3
 8020a94:	7f3a      	ldrb	r2, [r7, #28]
 8020a96:	f107 0120 	add.w	r1, r7, #32
 8020a9a:	440a      	add	r2, r1
 8020a9c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8020aa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8020aa4:	b29a      	uxth	r2, r3
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8020aac:	7ffb      	ldrb	r3, [r7, #31]
 8020aae:	7f7a      	ldrb	r2, [r7, #29]
 8020ab0:	f107 0120 	add.w	r1, r7, #32
 8020ab4:	440a      	add	r2, r1
 8020ab6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8020aba:	fb02 f303 	mul.w	r3, r2, r3
 8020abe:	7f7a      	ldrb	r2, [r7, #29]
 8020ac0:	f107 0120 	add.w	r1, r7, #32
 8020ac4:	440a      	add	r2, r1
 8020ac6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8020aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8020ace:	b29a      	uxth	r2, r3
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8020ad6:	bf00      	nop
 8020ad8:	3724      	adds	r7, #36	; 0x24
 8020ada:	46bd      	mov	sp, r7
 8020adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ae0:	4770      	bx	lr
 8020ae2:	bf00      	nop
 8020ae4:	0802ccc8 	.word	0x0802ccc8
 8020ae8:	0802ccd0 	.word	0x0802ccd0

08020aec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8020aec:	b084      	sub	sp, #16
 8020aee:	b480      	push	{r7}
 8020af0:	b085      	sub	sp, #20
 8020af2:	af00      	add	r7, sp, #0
 8020af4:	6078      	str	r0, [r7, #4]
 8020af6:	f107 001c 	add.w	r0, r7, #28
 8020afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8020afe:	2300      	movs	r3, #0
 8020b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8020b02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8020b04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8020b06:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8020b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8020b0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8020b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8020b0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8020b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8020b12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8020b14:	68fa      	ldr	r2, [r7, #12]
 8020b16:	4313      	orrs	r3, r2
 8020b18:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	685a      	ldr	r2, [r3, #4]
 8020b1e:	4b07      	ldr	r3, [pc, #28]	; (8020b3c <SDMMC_Init+0x50>)
 8020b20:	4013      	ands	r3, r2
 8020b22:	68fa      	ldr	r2, [r7, #12]
 8020b24:	431a      	orrs	r2, r3
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8020b2a:	2300      	movs	r3, #0
}
 8020b2c:	4618      	mov	r0, r3
 8020b2e:	3714      	adds	r7, #20
 8020b30:	46bd      	mov	sp, r7
 8020b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b36:	b004      	add	sp, #16
 8020b38:	4770      	bx	lr
 8020b3a:	bf00      	nop
 8020b3c:	ffc02c00 	.word	0xffc02c00

08020b40 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8020b40:	b480      	push	{r7}
 8020b42:	b083      	sub	sp, #12
 8020b44:	af00      	add	r7, sp, #0
 8020b46:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8020b4e:	4618      	mov	r0, r3
 8020b50:	370c      	adds	r7, #12
 8020b52:	46bd      	mov	sp, r7
 8020b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b58:	4770      	bx	lr

08020b5a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8020b5a:	b480      	push	{r7}
 8020b5c:	b083      	sub	sp, #12
 8020b5e:	af00      	add	r7, sp, #0
 8020b60:	6078      	str	r0, [r7, #4]
 8020b62:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8020b64:	683b      	ldr	r3, [r7, #0]
 8020b66:	681a      	ldr	r2, [r3, #0]
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020b6e:	2300      	movs	r3, #0
}
 8020b70:	4618      	mov	r0, r3
 8020b72:	370c      	adds	r7, #12
 8020b74:	46bd      	mov	sp, r7
 8020b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b7a:	4770      	bx	lr

08020b7c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8020b7c:	b480      	push	{r7}
 8020b7e:	b083      	sub	sp, #12
 8020b80:	af00      	add	r7, sp, #0
 8020b82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	681b      	ldr	r3, [r3, #0]
 8020b88:	f043 0203 	orr.w	r2, r3, #3
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8020b90:	2300      	movs	r3, #0
}
 8020b92:	4618      	mov	r0, r3
 8020b94:	370c      	adds	r7, #12
 8020b96:	46bd      	mov	sp, r7
 8020b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b9c:	4770      	bx	lr

08020b9e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8020b9e:	b480      	push	{r7}
 8020ba0:	b083      	sub	sp, #12
 8020ba2:	af00      	add	r7, sp, #0
 8020ba4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	681b      	ldr	r3, [r3, #0]
 8020baa:	f003 0303 	and.w	r3, r3, #3
}
 8020bae:	4618      	mov	r0, r3
 8020bb0:	370c      	adds	r7, #12
 8020bb2:	46bd      	mov	sp, r7
 8020bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bb8:	4770      	bx	lr
	...

08020bbc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8020bbc:	b480      	push	{r7}
 8020bbe:	b085      	sub	sp, #20
 8020bc0:	af00      	add	r7, sp, #0
 8020bc2:	6078      	str	r0, [r7, #4]
 8020bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8020bc6:	2300      	movs	r3, #0
 8020bc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8020bca:	683b      	ldr	r3, [r7, #0]
 8020bcc:	681a      	ldr	r2, [r3, #0]
 8020bce:	687b      	ldr	r3, [r7, #4]
 8020bd0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8020bd2:	683b      	ldr	r3, [r7, #0]
 8020bd4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8020bd6:	683b      	ldr	r3, [r7, #0]
 8020bd8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8020bda:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8020bdc:	683b      	ldr	r3, [r7, #0]
 8020bde:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8020be0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8020be2:	683b      	ldr	r3, [r7, #0]
 8020be4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8020be6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8020be8:	68fa      	ldr	r2, [r7, #12]
 8020bea:	4313      	orrs	r3, r2
 8020bec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	68da      	ldr	r2, [r3, #12]
 8020bf2:	4b06      	ldr	r3, [pc, #24]	; (8020c0c <SDMMC_SendCommand+0x50>)
 8020bf4:	4013      	ands	r3, r2
 8020bf6:	68fa      	ldr	r2, [r7, #12]
 8020bf8:	431a      	orrs	r2, r3
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8020bfe:	2300      	movs	r3, #0
}
 8020c00:	4618      	mov	r0, r3
 8020c02:	3714      	adds	r7, #20
 8020c04:	46bd      	mov	sp, r7
 8020c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c0a:	4770      	bx	lr
 8020c0c:	fffee0c0 	.word	0xfffee0c0

08020c10 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8020c10:	b480      	push	{r7}
 8020c12:	b083      	sub	sp, #12
 8020c14:	af00      	add	r7, sp, #0
 8020c16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	691b      	ldr	r3, [r3, #16]
 8020c1c:	b2db      	uxtb	r3, r3
}
 8020c1e:	4618      	mov	r0, r3
 8020c20:	370c      	adds	r7, #12
 8020c22:	46bd      	mov	sp, r7
 8020c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c28:	4770      	bx	lr

08020c2a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8020c2a:	b480      	push	{r7}
 8020c2c:	b085      	sub	sp, #20
 8020c2e:	af00      	add	r7, sp, #0
 8020c30:	6078      	str	r0, [r7, #4]
 8020c32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	3314      	adds	r3, #20
 8020c38:	461a      	mov	r2, r3
 8020c3a:	683b      	ldr	r3, [r7, #0]
 8020c3c:	4413      	add	r3, r2
 8020c3e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8020c40:	68fb      	ldr	r3, [r7, #12]
 8020c42:	681b      	ldr	r3, [r3, #0]
}
 8020c44:	4618      	mov	r0, r3
 8020c46:	3714      	adds	r7, #20
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c4e:	4770      	bx	lr

08020c50 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8020c50:	b480      	push	{r7}
 8020c52:	b085      	sub	sp, #20
 8020c54:	af00      	add	r7, sp, #0
 8020c56:	6078      	str	r0, [r7, #4]
 8020c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8020c5e:	683b      	ldr	r3, [r7, #0]
 8020c60:	681a      	ldr	r2, [r3, #0]
 8020c62:	687b      	ldr	r3, [r7, #4]
 8020c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8020c66:	683b      	ldr	r3, [r7, #0]
 8020c68:	685a      	ldr	r2, [r3, #4]
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8020c6e:	683b      	ldr	r3, [r7, #0]
 8020c70:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8020c72:	683b      	ldr	r3, [r7, #0]
 8020c74:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8020c76:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8020c78:	683b      	ldr	r3, [r7, #0]
 8020c7a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8020c7c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8020c7e:	683b      	ldr	r3, [r7, #0]
 8020c80:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8020c82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8020c84:	68fa      	ldr	r2, [r7, #12]
 8020c86:	4313      	orrs	r3, r2
 8020c88:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8020c8a:	687b      	ldr	r3, [r7, #4]
 8020c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8020c92:	68fb      	ldr	r3, [r7, #12]
 8020c94:	431a      	orrs	r2, r3
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8020c9a:	2300      	movs	r3, #0

}
 8020c9c:	4618      	mov	r0, r3
 8020c9e:	3714      	adds	r7, #20
 8020ca0:	46bd      	mov	sp, r7
 8020ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ca6:	4770      	bx	lr

08020ca8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8020ca8:	b580      	push	{r7, lr}
 8020caa:	b088      	sub	sp, #32
 8020cac:	af00      	add	r7, sp, #0
 8020cae:	6078      	str	r0, [r7, #4]
 8020cb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8020cb2:	683b      	ldr	r3, [r7, #0]
 8020cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8020cb6:	2310      	movs	r3, #16
 8020cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020cc0:	2300      	movs	r3, #0
 8020cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020cc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020cca:	f107 0308 	add.w	r3, r7, #8
 8020cce:	4619      	mov	r1, r3
 8020cd0:	6878      	ldr	r0, [r7, #4]
 8020cd2:	f7ff ff73 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8020cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8020cda:	2110      	movs	r1, #16
 8020cdc:	6878      	ldr	r0, [r7, #4]
 8020cde:	f000 faaf 	bl	8021240 <SDMMC_GetCmdResp1>
 8020ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020ce4:	69fb      	ldr	r3, [r7, #28]
}
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3720      	adds	r7, #32
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}

08020cee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8020cee:	b580      	push	{r7, lr}
 8020cf0:	b088      	sub	sp, #32
 8020cf2:	af00      	add	r7, sp, #0
 8020cf4:	6078      	str	r0, [r7, #4]
 8020cf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8020cf8:	683b      	ldr	r3, [r7, #0]
 8020cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8020cfc:	2311      	movs	r3, #17
 8020cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020d06:	2300      	movs	r3, #0
 8020d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020d0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020d10:	f107 0308 	add.w	r3, r7, #8
 8020d14:	4619      	mov	r1, r3
 8020d16:	6878      	ldr	r0, [r7, #4]
 8020d18:	f7ff ff50 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8020d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8020d20:	2111      	movs	r1, #17
 8020d22:	6878      	ldr	r0, [r7, #4]
 8020d24:	f000 fa8c 	bl	8021240 <SDMMC_GetCmdResp1>
 8020d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020d2a:	69fb      	ldr	r3, [r7, #28]
}
 8020d2c:	4618      	mov	r0, r3
 8020d2e:	3720      	adds	r7, #32
 8020d30:	46bd      	mov	sp, r7
 8020d32:	bd80      	pop	{r7, pc}

08020d34 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8020d34:	b580      	push	{r7, lr}
 8020d36:	b088      	sub	sp, #32
 8020d38:	af00      	add	r7, sp, #0
 8020d3a:	6078      	str	r0, [r7, #4]
 8020d3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8020d3e:	683b      	ldr	r3, [r7, #0]
 8020d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8020d42:	2312      	movs	r3, #18
 8020d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020d54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020d56:	f107 0308 	add.w	r3, r7, #8
 8020d5a:	4619      	mov	r1, r3
 8020d5c:	6878      	ldr	r0, [r7, #4]
 8020d5e:	f7ff ff2d 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8020d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8020d66:	2112      	movs	r1, #18
 8020d68:	6878      	ldr	r0, [r7, #4]
 8020d6a:	f000 fa69 	bl	8021240 <SDMMC_GetCmdResp1>
 8020d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020d70:	69fb      	ldr	r3, [r7, #28]
}
 8020d72:	4618      	mov	r0, r3
 8020d74:	3720      	adds	r7, #32
 8020d76:	46bd      	mov	sp, r7
 8020d78:	bd80      	pop	{r7, pc}

08020d7a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8020d7a:	b580      	push	{r7, lr}
 8020d7c:	b088      	sub	sp, #32
 8020d7e:	af00      	add	r7, sp, #0
 8020d80:	6078      	str	r0, [r7, #4]
 8020d82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8020d84:	683b      	ldr	r3, [r7, #0]
 8020d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8020d88:	2318      	movs	r3, #24
 8020d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020d92:	2300      	movs	r3, #0
 8020d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020d9c:	f107 0308 	add.w	r3, r7, #8
 8020da0:	4619      	mov	r1, r3
 8020da2:	6878      	ldr	r0, [r7, #4]
 8020da4:	f7ff ff0a 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8020da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8020dac:	2118      	movs	r1, #24
 8020dae:	6878      	ldr	r0, [r7, #4]
 8020db0:	f000 fa46 	bl	8021240 <SDMMC_GetCmdResp1>
 8020db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020db6:	69fb      	ldr	r3, [r7, #28]
}
 8020db8:	4618      	mov	r0, r3
 8020dba:	3720      	adds	r7, #32
 8020dbc:	46bd      	mov	sp, r7
 8020dbe:	bd80      	pop	{r7, pc}

08020dc0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8020dc0:	b580      	push	{r7, lr}
 8020dc2:	b088      	sub	sp, #32
 8020dc4:	af00      	add	r7, sp, #0
 8020dc6:	6078      	str	r0, [r7, #4]
 8020dc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8020dca:	683b      	ldr	r3, [r7, #0]
 8020dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8020dce:	2319      	movs	r3, #25
 8020dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020dd8:	2300      	movs	r3, #0
 8020dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020de0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020de2:	f107 0308 	add.w	r3, r7, #8
 8020de6:	4619      	mov	r1, r3
 8020de8:	6878      	ldr	r0, [r7, #4]
 8020dea:	f7ff fee7 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8020dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8020df2:	2119      	movs	r1, #25
 8020df4:	6878      	ldr	r0, [r7, #4]
 8020df6:	f000 fa23 	bl	8021240 <SDMMC_GetCmdResp1>
 8020dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020dfc:	69fb      	ldr	r3, [r7, #28]
}
 8020dfe:	4618      	mov	r0, r3
 8020e00:	3720      	adds	r7, #32
 8020e02:	46bd      	mov	sp, r7
 8020e04:	bd80      	pop	{r7, pc}
	...

08020e08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8020e08:	b580      	push	{r7, lr}
 8020e0a:	b088      	sub	sp, #32
 8020e0c:	af00      	add	r7, sp, #0
 8020e0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8020e10:	2300      	movs	r3, #0
 8020e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8020e14:	230c      	movs	r3, #12
 8020e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020e1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020e1e:	2300      	movs	r3, #0
 8020e20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020e26:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	68db      	ldr	r3, [r3, #12]
 8020e2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8020e34:	687b      	ldr	r3, [r7, #4]
 8020e36:	68db      	ldr	r3, [r3, #12]
 8020e38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020e40:	f107 0308 	add.w	r3, r7, #8
 8020e44:	4619      	mov	r1, r3
 8020e46:	6878      	ldr	r0, [r7, #4]
 8020e48:	f7ff feb8 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8020e4c:	4a0b      	ldr	r2, [pc, #44]	; (8020e7c <SDMMC_CmdStopTransfer+0x74>)
 8020e4e:	210c      	movs	r1, #12
 8020e50:	6878      	ldr	r0, [r7, #4]
 8020e52:	f000 f9f5 	bl	8021240 <SDMMC_GetCmdResp1>
 8020e56:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8020e58:	687b      	ldr	r3, [r7, #4]
 8020e5a:	68db      	ldr	r3, [r3, #12]
 8020e5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8020e64:	69fb      	ldr	r3, [r7, #28]
 8020e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8020e6a:	d101      	bne.n	8020e70 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8020e6c:	2300      	movs	r3, #0
 8020e6e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8020e70:	69fb      	ldr	r3, [r7, #28]
}
 8020e72:	4618      	mov	r0, r3
 8020e74:	3720      	adds	r7, #32
 8020e76:	46bd      	mov	sp, r7
 8020e78:	bd80      	pop	{r7, pc}
 8020e7a:	bf00      	nop
 8020e7c:	05f5e100 	.word	0x05f5e100

08020e80 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8020e80:	b580      	push	{r7, lr}
 8020e82:	b08a      	sub	sp, #40	; 0x28
 8020e84:	af00      	add	r7, sp, #0
 8020e86:	60f8      	str	r0, [r7, #12]
 8020e88:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8020e8c:	683b      	ldr	r3, [r7, #0]
 8020e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8020e90:	2307      	movs	r3, #7
 8020e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020e98:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020e9a:	2300      	movs	r3, #0
 8020e9c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020ea2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020ea4:	f107 0310 	add.w	r3, r7, #16
 8020ea8:	4619      	mov	r1, r3
 8020eaa:	68f8      	ldr	r0, [r7, #12]
 8020eac:	f7ff fe86 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8020eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8020eb4:	2107      	movs	r1, #7
 8020eb6:	68f8      	ldr	r0, [r7, #12]
 8020eb8:	f000 f9c2 	bl	8021240 <SDMMC_GetCmdResp1>
 8020ebc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8020ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020ec0:	4618      	mov	r0, r3
 8020ec2:	3728      	adds	r7, #40	; 0x28
 8020ec4:	46bd      	mov	sp, r7
 8020ec6:	bd80      	pop	{r7, pc}

08020ec8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8020ec8:	b580      	push	{r7, lr}
 8020eca:	b088      	sub	sp, #32
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8020ed0:	2300      	movs	r3, #0
 8020ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8020ed8:	2300      	movs	r3, #0
 8020eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020edc:	2300      	movs	r3, #0
 8020ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020ee4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020ee6:	f107 0308 	add.w	r3, r7, #8
 8020eea:	4619      	mov	r1, r3
 8020eec:	6878      	ldr	r0, [r7, #4]
 8020eee:	f7ff fe65 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8020ef2:	6878      	ldr	r0, [r7, #4]
 8020ef4:	f000 f976 	bl	80211e4 <SDMMC_GetCmdError>
 8020ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020efa:	69fb      	ldr	r3, [r7, #28]
}
 8020efc:	4618      	mov	r0, r3
 8020efe:	3720      	adds	r7, #32
 8020f00:	46bd      	mov	sp, r7
 8020f02:	bd80      	pop	{r7, pc}

08020f04 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8020f04:	b580      	push	{r7, lr}
 8020f06:	b088      	sub	sp, #32
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8020f0c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8020f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8020f12:	2308      	movs	r3, #8
 8020f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020f1c:	2300      	movs	r3, #0
 8020f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020f24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020f26:	f107 0308 	add.w	r3, r7, #8
 8020f2a:	4619      	mov	r1, r3
 8020f2c:	6878      	ldr	r0, [r7, #4]
 8020f2e:	f7ff fe45 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8020f32:	6878      	ldr	r0, [r7, #4]
 8020f34:	f000 fb78 	bl	8021628 <SDMMC_GetCmdResp7>
 8020f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020f3a:	69fb      	ldr	r3, [r7, #28]
}
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	3720      	adds	r7, #32
 8020f40:	46bd      	mov	sp, r7
 8020f42:	bd80      	pop	{r7, pc}

08020f44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8020f44:	b580      	push	{r7, lr}
 8020f46:	b088      	sub	sp, #32
 8020f48:	af00      	add	r7, sp, #0
 8020f4a:	6078      	str	r0, [r7, #4]
 8020f4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8020f4e:	683b      	ldr	r3, [r7, #0]
 8020f50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8020f52:	2337      	movs	r3, #55	; 0x37
 8020f54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020f5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020f5c:	2300      	movs	r3, #0
 8020f5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020f64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020f66:	f107 0308 	add.w	r3, r7, #8
 8020f6a:	4619      	mov	r1, r3
 8020f6c:	6878      	ldr	r0, [r7, #4]
 8020f6e:	f7ff fe25 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8020f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8020f76:	2137      	movs	r1, #55	; 0x37
 8020f78:	6878      	ldr	r0, [r7, #4]
 8020f7a:	f000 f961 	bl	8021240 <SDMMC_GetCmdResp1>
 8020f7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020f80:	69fb      	ldr	r3, [r7, #28]
}
 8020f82:	4618      	mov	r0, r3
 8020f84:	3720      	adds	r7, #32
 8020f86:	46bd      	mov	sp, r7
 8020f88:	bd80      	pop	{r7, pc}

08020f8a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8020f8a:	b580      	push	{r7, lr}
 8020f8c:	b088      	sub	sp, #32
 8020f8e:	af00      	add	r7, sp, #0
 8020f90:	6078      	str	r0, [r7, #4]
 8020f92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8020f94:	683b      	ldr	r3, [r7, #0]
 8020f96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8020f98:	2329      	movs	r3, #41	; 0x29
 8020f9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020fa2:	2300      	movs	r3, #0
 8020fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020faa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020fac:	f107 0308 	add.w	r3, r7, #8
 8020fb0:	4619      	mov	r1, r3
 8020fb2:	6878      	ldr	r0, [r7, #4]
 8020fb4:	f7ff fe02 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8020fb8:	6878      	ldr	r0, [r7, #4]
 8020fba:	f000 fa7d 	bl	80214b8 <SDMMC_GetCmdResp3>
 8020fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020fc0:	69fb      	ldr	r3, [r7, #28]
}
 8020fc2:	4618      	mov	r0, r3
 8020fc4:	3720      	adds	r7, #32
 8020fc6:	46bd      	mov	sp, r7
 8020fc8:	bd80      	pop	{r7, pc}

08020fca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8020fca:	b580      	push	{r7, lr}
 8020fcc:	b088      	sub	sp, #32
 8020fce:	af00      	add	r7, sp, #0
 8020fd0:	6078      	str	r0, [r7, #4]
 8020fd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8020fd4:	683b      	ldr	r3, [r7, #0]
 8020fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8020fd8:	2306      	movs	r3, #6
 8020fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020fe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020fea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020fec:	f107 0308 	add.w	r3, r7, #8
 8020ff0:	4619      	mov	r1, r3
 8020ff2:	6878      	ldr	r0, [r7, #4]
 8020ff4:	f7ff fde2 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8020ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8020ffc:	2106      	movs	r1, #6
 8020ffe:	6878      	ldr	r0, [r7, #4]
 8021000:	f000 f91e 	bl	8021240 <SDMMC_GetCmdResp1>
 8021004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021006:	69fb      	ldr	r3, [r7, #28]
}
 8021008:	4618      	mov	r0, r3
 802100a:	3720      	adds	r7, #32
 802100c:	46bd      	mov	sp, r7
 802100e:	bd80      	pop	{r7, pc}

08021010 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8021010:	b580      	push	{r7, lr}
 8021012:	b088      	sub	sp, #32
 8021014:	af00      	add	r7, sp, #0
 8021016:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8021018:	2300      	movs	r3, #0
 802101a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 802101c:	2333      	movs	r3, #51	; 0x33
 802101e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021026:	2300      	movs	r3, #0
 8021028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802102e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021030:	f107 0308 	add.w	r3, r7, #8
 8021034:	4619      	mov	r1, r3
 8021036:	6878      	ldr	r0, [r7, #4]
 8021038:	f7ff fdc0 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 802103c:	f241 3288 	movw	r2, #5000	; 0x1388
 8021040:	2133      	movs	r1, #51	; 0x33
 8021042:	6878      	ldr	r0, [r7, #4]
 8021044:	f000 f8fc 	bl	8021240 <SDMMC_GetCmdResp1>
 8021048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802104a:	69fb      	ldr	r3, [r7, #28]
}
 802104c:	4618      	mov	r0, r3
 802104e:	3720      	adds	r7, #32
 8021050:	46bd      	mov	sp, r7
 8021052:	bd80      	pop	{r7, pc}

08021054 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8021054:	b580      	push	{r7, lr}
 8021056:	b088      	sub	sp, #32
 8021058:	af00      	add	r7, sp, #0
 802105a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 802105c:	2300      	movs	r3, #0
 802105e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8021060:	2302      	movs	r3, #2
 8021062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8021064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8021068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802106a:	2300      	movs	r3, #0
 802106c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802106e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021074:	f107 0308 	add.w	r3, r7, #8
 8021078:	4619      	mov	r1, r3
 802107a:	6878      	ldr	r0, [r7, #4]
 802107c:	f7ff fd9e 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8021080:	6878      	ldr	r0, [r7, #4]
 8021082:	f000 f9cf 	bl	8021424 <SDMMC_GetCmdResp2>
 8021086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021088:	69fb      	ldr	r3, [r7, #28]
}
 802108a:	4618      	mov	r0, r3
 802108c:	3720      	adds	r7, #32
 802108e:	46bd      	mov	sp, r7
 8021090:	bd80      	pop	{r7, pc}

08021092 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021092:	b580      	push	{r7, lr}
 8021094:	b088      	sub	sp, #32
 8021096:	af00      	add	r7, sp, #0
 8021098:	6078      	str	r0, [r7, #4]
 802109a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 802109c:	683b      	ldr	r3, [r7, #0]
 802109e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80210a0:	2309      	movs	r3, #9
 80210a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80210a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80210a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80210aa:	2300      	movs	r3, #0
 80210ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80210ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80210b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80210b4:	f107 0308 	add.w	r3, r7, #8
 80210b8:	4619      	mov	r1, r3
 80210ba:	6878      	ldr	r0, [r7, #4]
 80210bc:	f7ff fd7e 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80210c0:	6878      	ldr	r0, [r7, #4]
 80210c2:	f000 f9af 	bl	8021424 <SDMMC_GetCmdResp2>
 80210c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80210c8:	69fb      	ldr	r3, [r7, #28]
}
 80210ca:	4618      	mov	r0, r3
 80210cc:	3720      	adds	r7, #32
 80210ce:	46bd      	mov	sp, r7
 80210d0:	bd80      	pop	{r7, pc}

080210d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80210d2:	b580      	push	{r7, lr}
 80210d4:	b088      	sub	sp, #32
 80210d6:	af00      	add	r7, sp, #0
 80210d8:	6078      	str	r0, [r7, #4]
 80210da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80210dc:	2300      	movs	r3, #0
 80210de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80210e0:	2303      	movs	r3, #3
 80210e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80210e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80210e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80210ea:	2300      	movs	r3, #0
 80210ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80210ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80210f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80210f4:	f107 0308 	add.w	r3, r7, #8
 80210f8:	4619      	mov	r1, r3
 80210fa:	6878      	ldr	r0, [r7, #4]
 80210fc:	f7ff fd5e 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8021100:	683a      	ldr	r2, [r7, #0]
 8021102:	2103      	movs	r1, #3
 8021104:	6878      	ldr	r0, [r7, #4]
 8021106:	f000 fa17 	bl	8021538 <SDMMC_GetCmdResp6>
 802110a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802110c:	69fb      	ldr	r3, [r7, #28]
}
 802110e:	4618      	mov	r0, r3
 8021110:	3720      	adds	r7, #32
 8021112:	46bd      	mov	sp, r7
 8021114:	bd80      	pop	{r7, pc}

08021116 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021116:	b580      	push	{r7, lr}
 8021118:	b088      	sub	sp, #32
 802111a:	af00      	add	r7, sp, #0
 802111c:	6078      	str	r0, [r7, #4]
 802111e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8021120:	683b      	ldr	r3, [r7, #0]
 8021122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8021124:	230d      	movs	r3, #13
 8021126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021128:	f44f 7380 	mov.w	r3, #256	; 0x100
 802112c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802112e:	2300      	movs	r3, #0
 8021130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021136:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021138:	f107 0308 	add.w	r3, r7, #8
 802113c:	4619      	mov	r1, r3
 802113e:	6878      	ldr	r0, [r7, #4]
 8021140:	f7ff fd3c 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8021144:	f241 3288 	movw	r2, #5000	; 0x1388
 8021148:	210d      	movs	r1, #13
 802114a:	6878      	ldr	r0, [r7, #4]
 802114c:	f000 f878 	bl	8021240 <SDMMC_GetCmdResp1>
 8021150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021152:	69fb      	ldr	r3, [r7, #28]
}
 8021154:	4618      	mov	r0, r3
 8021156:	3720      	adds	r7, #32
 8021158:	46bd      	mov	sp, r7
 802115a:	bd80      	pop	{r7, pc}

0802115c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 802115c:	b580      	push	{r7, lr}
 802115e:	b088      	sub	sp, #32
 8021160:	af00      	add	r7, sp, #0
 8021162:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8021164:	2300      	movs	r3, #0
 8021166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8021168:	230d      	movs	r3, #13
 802116a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802116c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021172:	2300      	movs	r3, #0
 8021174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802117a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802117c:	f107 0308 	add.w	r3, r7, #8
 8021180:	4619      	mov	r1, r3
 8021182:	6878      	ldr	r0, [r7, #4]
 8021184:	f7ff fd1a 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8021188:	f241 3288 	movw	r2, #5000	; 0x1388
 802118c:	210d      	movs	r1, #13
 802118e:	6878      	ldr	r0, [r7, #4]
 8021190:	f000 f856 	bl	8021240 <SDMMC_GetCmdResp1>
 8021194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021196:	69fb      	ldr	r3, [r7, #28]
}
 8021198:	4618      	mov	r0, r3
 802119a:	3720      	adds	r7, #32
 802119c:	46bd      	mov	sp, r7
 802119e:	bd80      	pop	{r7, pc}

080211a0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80211a0:	b580      	push	{r7, lr}
 80211a2:	b088      	sub	sp, #32
 80211a4:	af00      	add	r7, sp, #0
 80211a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80211a8:	2300      	movs	r3, #0
 80211aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80211ac:	230b      	movs	r3, #11
 80211ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80211b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80211b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80211b6:	2300      	movs	r3, #0
 80211b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80211ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80211be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80211c0:	f107 0308 	add.w	r3, r7, #8
 80211c4:	4619      	mov	r1, r3
 80211c6:	6878      	ldr	r0, [r7, #4]
 80211c8:	f7ff fcf8 	bl	8020bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80211cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80211d0:	210b      	movs	r1, #11
 80211d2:	6878      	ldr	r0, [r7, #4]
 80211d4:	f000 f834 	bl	8021240 <SDMMC_GetCmdResp1>
 80211d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80211da:	69fb      	ldr	r3, [r7, #28]
}
 80211dc:	4618      	mov	r0, r3
 80211de:	3720      	adds	r7, #32
 80211e0:	46bd      	mov	sp, r7
 80211e2:	bd80      	pop	{r7, pc}

080211e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80211e4:	b480      	push	{r7}
 80211e6:	b085      	sub	sp, #20
 80211e8:	af00      	add	r7, sp, #0
 80211ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80211ec:	4b11      	ldr	r3, [pc, #68]	; (8021234 <SDMMC_GetCmdError+0x50>)
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	4a11      	ldr	r2, [pc, #68]	; (8021238 <SDMMC_GetCmdError+0x54>)
 80211f2:	fba2 2303 	umull	r2, r3, r2, r3
 80211f6:	0a5b      	lsrs	r3, r3, #9
 80211f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80211fc:	fb02 f303 	mul.w	r3, r2, r3
 8021200:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8021202:	68fb      	ldr	r3, [r7, #12]
 8021204:	1e5a      	subs	r2, r3, #1
 8021206:	60fa      	str	r2, [r7, #12]
 8021208:	2b00      	cmp	r3, #0
 802120a:	d102      	bne.n	8021212 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 802120c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021210:	e009      	b.n	8021226 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8021212:	687b      	ldr	r3, [r7, #4]
 8021214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802121a:	2b00      	cmp	r3, #0
 802121c:	d0f1      	beq.n	8021202 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	4a06      	ldr	r2, [pc, #24]	; (802123c <SDMMC_GetCmdError+0x58>)
 8021222:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8021224:	2300      	movs	r3, #0
}
 8021226:	4618      	mov	r0, r3
 8021228:	3714      	adds	r7, #20
 802122a:	46bd      	mov	sp, r7
 802122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021230:	4770      	bx	lr
 8021232:	bf00      	nop
 8021234:	24000698 	.word	0x24000698
 8021238:	10624dd3 	.word	0x10624dd3
 802123c:	002000c5 	.word	0x002000c5

08021240 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8021240:	b580      	push	{r7, lr}
 8021242:	b088      	sub	sp, #32
 8021244:	af00      	add	r7, sp, #0
 8021246:	60f8      	str	r0, [r7, #12]
 8021248:	460b      	mov	r3, r1
 802124a:	607a      	str	r2, [r7, #4]
 802124c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 802124e:	4b70      	ldr	r3, [pc, #448]	; (8021410 <SDMMC_GetCmdResp1+0x1d0>)
 8021250:	681b      	ldr	r3, [r3, #0]
 8021252:	4a70      	ldr	r2, [pc, #448]	; (8021414 <SDMMC_GetCmdResp1+0x1d4>)
 8021254:	fba2 2303 	umull	r2, r3, r2, r3
 8021258:	0a5a      	lsrs	r2, r3, #9
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	fb02 f303 	mul.w	r3, r2, r3
 8021260:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8021262:	69fb      	ldr	r3, [r7, #28]
 8021264:	1e5a      	subs	r2, r3, #1
 8021266:	61fa      	str	r2, [r7, #28]
 8021268:	2b00      	cmp	r3, #0
 802126a:	d102      	bne.n	8021272 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 802126c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021270:	e0c9      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8021272:	68fb      	ldr	r3, [r7, #12]
 8021274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021276:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8021278:	69ba      	ldr	r2, [r7, #24]
 802127a:	4b67      	ldr	r3, [pc, #412]	; (8021418 <SDMMC_GetCmdResp1+0x1d8>)
 802127c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802127e:	2b00      	cmp	r3, #0
 8021280:	d0ef      	beq.n	8021262 <SDMMC_GetCmdResp1+0x22>
 8021282:	69bb      	ldr	r3, [r7, #24]
 8021284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8021288:	2b00      	cmp	r3, #0
 802128a:	d1ea      	bne.n	8021262 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802128c:	68fb      	ldr	r3, [r7, #12]
 802128e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021290:	f003 0304 	and.w	r3, r3, #4
 8021294:	2b00      	cmp	r3, #0
 8021296:	d004      	beq.n	80212a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8021298:	68fb      	ldr	r3, [r7, #12]
 802129a:	2204      	movs	r2, #4
 802129c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802129e:	2304      	movs	r3, #4
 80212a0:	e0b1      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80212a2:	68fb      	ldr	r3, [r7, #12]
 80212a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80212a6:	f003 0301 	and.w	r3, r3, #1
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	d004      	beq.n	80212b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80212ae:	68fb      	ldr	r3, [r7, #12]
 80212b0:	2201      	movs	r2, #1
 80212b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80212b4:	2301      	movs	r3, #1
 80212b6:	e0a6      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80212b8:	68fb      	ldr	r3, [r7, #12]
 80212ba:	4a58      	ldr	r2, [pc, #352]	; (802141c <SDMMC_GetCmdResp1+0x1dc>)
 80212bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80212be:	68f8      	ldr	r0, [r7, #12]
 80212c0:	f7ff fca6 	bl	8020c10 <SDMMC_GetCommandResponse>
 80212c4:	4603      	mov	r3, r0
 80212c6:	461a      	mov	r2, r3
 80212c8:	7afb      	ldrb	r3, [r7, #11]
 80212ca:	4293      	cmp	r3, r2
 80212cc:	d001      	beq.n	80212d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80212ce:	2301      	movs	r3, #1
 80212d0:	e099      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80212d2:	2100      	movs	r1, #0
 80212d4:	68f8      	ldr	r0, [r7, #12]
 80212d6:	f7ff fca8 	bl	8020c2a <SDMMC_GetResponse>
 80212da:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80212dc:	697a      	ldr	r2, [r7, #20]
 80212de:	4b50      	ldr	r3, [pc, #320]	; (8021420 <SDMMC_GetCmdResp1+0x1e0>)
 80212e0:	4013      	ands	r3, r2
 80212e2:	2b00      	cmp	r3, #0
 80212e4:	d101      	bne.n	80212ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80212e6:	2300      	movs	r3, #0
 80212e8:	e08d      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80212ea:	697b      	ldr	r3, [r7, #20]
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	da02      	bge.n	80212f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80212f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80212f4:	e087      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80212f6:	697b      	ldr	r3, [r7, #20]
 80212f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d001      	beq.n	8021304 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8021300:	2340      	movs	r3, #64	; 0x40
 8021302:	e080      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8021304:	697b      	ldr	r3, [r7, #20]
 8021306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802130a:	2b00      	cmp	r3, #0
 802130c:	d001      	beq.n	8021312 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 802130e:	2380      	movs	r3, #128	; 0x80
 8021310:	e079      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8021312:	697b      	ldr	r3, [r7, #20]
 8021314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021318:	2b00      	cmp	r3, #0
 802131a:	d002      	beq.n	8021322 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 802131c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021320:	e071      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8021322:	697b      	ldr	r3, [r7, #20]
 8021324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8021328:	2b00      	cmp	r3, #0
 802132a:	d002      	beq.n	8021332 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 802132c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021330:	e069      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8021332:	697b      	ldr	r3, [r7, #20]
 8021334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8021338:	2b00      	cmp	r3, #0
 802133a:	d002      	beq.n	8021342 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 802133c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021340:	e061      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8021342:	697b      	ldr	r3, [r7, #20]
 8021344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8021348:	2b00      	cmp	r3, #0
 802134a:	d002      	beq.n	8021352 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 802134c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021350:	e059      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8021352:	697b      	ldr	r3, [r7, #20]
 8021354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021358:	2b00      	cmp	r3, #0
 802135a:	d002      	beq.n	8021362 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 802135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021360:	e051      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8021362:	697b      	ldr	r3, [r7, #20]
 8021364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021368:	2b00      	cmp	r3, #0
 802136a:	d002      	beq.n	8021372 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 802136c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021370:	e049      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8021372:	697b      	ldr	r3, [r7, #20]
 8021374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021378:	2b00      	cmp	r3, #0
 802137a:	d002      	beq.n	8021382 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 802137c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8021380:	e041      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8021382:	697b      	ldr	r3, [r7, #20]
 8021384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021388:	2b00      	cmp	r3, #0
 802138a:	d002      	beq.n	8021392 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 802138c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021390:	e039      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8021392:	697b      	ldr	r3, [r7, #20]
 8021394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8021398:	2b00      	cmp	r3, #0
 802139a:	d002      	beq.n	80213a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 802139c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80213a0:	e031      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80213a2:	697b      	ldr	r3, [r7, #20]
 80213a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80213a8:	2b00      	cmp	r3, #0
 80213aa:	d002      	beq.n	80213b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80213ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80213b0:	e029      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80213b2:	697b      	ldr	r3, [r7, #20]
 80213b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80213b8:	2b00      	cmp	r3, #0
 80213ba:	d002      	beq.n	80213c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80213bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80213c0:	e021      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80213c2:	697b      	ldr	r3, [r7, #20]
 80213c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d002      	beq.n	80213d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80213cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80213d0:	e019      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80213d2:	697b      	ldr	r3, [r7, #20]
 80213d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80213d8:	2b00      	cmp	r3, #0
 80213da:	d002      	beq.n	80213e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80213dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80213e0:	e011      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80213e2:	697b      	ldr	r3, [r7, #20]
 80213e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d002      	beq.n	80213f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80213ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80213f0:	e009      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80213f2:	697b      	ldr	r3, [r7, #20]
 80213f4:	f003 0308 	and.w	r3, r3, #8
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d002      	beq.n	8021402 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80213fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8021400:	e001      	b.n	8021406 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8021402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8021406:	4618      	mov	r0, r3
 8021408:	3720      	adds	r7, #32
 802140a:	46bd      	mov	sp, r7
 802140c:	bd80      	pop	{r7, pc}
 802140e:	bf00      	nop
 8021410:	24000698 	.word	0x24000698
 8021414:	10624dd3 	.word	0x10624dd3
 8021418:	00200045 	.word	0x00200045
 802141c:	002000c5 	.word	0x002000c5
 8021420:	fdffe008 	.word	0xfdffe008

08021424 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8021424:	b480      	push	{r7}
 8021426:	b085      	sub	sp, #20
 8021428:	af00      	add	r7, sp, #0
 802142a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802142c:	4b1f      	ldr	r3, [pc, #124]	; (80214ac <SDMMC_GetCmdResp2+0x88>)
 802142e:	681b      	ldr	r3, [r3, #0]
 8021430:	4a1f      	ldr	r2, [pc, #124]	; (80214b0 <SDMMC_GetCmdResp2+0x8c>)
 8021432:	fba2 2303 	umull	r2, r3, r2, r3
 8021436:	0a5b      	lsrs	r3, r3, #9
 8021438:	f241 3288 	movw	r2, #5000	; 0x1388
 802143c:	fb02 f303 	mul.w	r3, r2, r3
 8021440:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8021442:	68fb      	ldr	r3, [r7, #12]
 8021444:	1e5a      	subs	r2, r3, #1
 8021446:	60fa      	str	r2, [r7, #12]
 8021448:	2b00      	cmp	r3, #0
 802144a:	d102      	bne.n	8021452 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 802144c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021450:	e026      	b.n	80214a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021456:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8021458:	68bb      	ldr	r3, [r7, #8]
 802145a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802145e:	2b00      	cmp	r3, #0
 8021460:	d0ef      	beq.n	8021442 <SDMMC_GetCmdResp2+0x1e>
 8021462:	68bb      	ldr	r3, [r7, #8]
 8021464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8021468:	2b00      	cmp	r3, #0
 802146a:	d1ea      	bne.n	8021442 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021470:	f003 0304 	and.w	r3, r3, #4
 8021474:	2b00      	cmp	r3, #0
 8021476:	d004      	beq.n	8021482 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	2204      	movs	r2, #4
 802147c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802147e:	2304      	movs	r3, #4
 8021480:	e00e      	b.n	80214a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021486:	f003 0301 	and.w	r3, r3, #1
 802148a:	2b00      	cmp	r3, #0
 802148c:	d004      	beq.n	8021498 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802148e:	687b      	ldr	r3, [r7, #4]
 8021490:	2201      	movs	r2, #1
 8021492:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021494:	2301      	movs	r3, #1
 8021496:	e003      	b.n	80214a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	4a06      	ldr	r2, [pc, #24]	; (80214b4 <SDMMC_GetCmdResp2+0x90>)
 802149c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 802149e:	2300      	movs	r3, #0
}
 80214a0:	4618      	mov	r0, r3
 80214a2:	3714      	adds	r7, #20
 80214a4:	46bd      	mov	sp, r7
 80214a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214aa:	4770      	bx	lr
 80214ac:	24000698 	.word	0x24000698
 80214b0:	10624dd3 	.word	0x10624dd3
 80214b4:	002000c5 	.word	0x002000c5

080214b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80214b8:	b480      	push	{r7}
 80214ba:	b085      	sub	sp, #20
 80214bc:	af00      	add	r7, sp, #0
 80214be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80214c0:	4b1a      	ldr	r3, [pc, #104]	; (802152c <SDMMC_GetCmdResp3+0x74>)
 80214c2:	681b      	ldr	r3, [r3, #0]
 80214c4:	4a1a      	ldr	r2, [pc, #104]	; (8021530 <SDMMC_GetCmdResp3+0x78>)
 80214c6:	fba2 2303 	umull	r2, r3, r2, r3
 80214ca:	0a5b      	lsrs	r3, r3, #9
 80214cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80214d0:	fb02 f303 	mul.w	r3, r2, r3
 80214d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80214d6:	68fb      	ldr	r3, [r7, #12]
 80214d8:	1e5a      	subs	r2, r3, #1
 80214da:	60fa      	str	r2, [r7, #12]
 80214dc:	2b00      	cmp	r3, #0
 80214de:	d102      	bne.n	80214e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80214e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80214e4:	e01b      	b.n	802151e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80214e6:	687b      	ldr	r3, [r7, #4]
 80214e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80214ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80214ec:	68bb      	ldr	r3, [r7, #8]
 80214ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80214f2:	2b00      	cmp	r3, #0
 80214f4:	d0ef      	beq.n	80214d6 <SDMMC_GetCmdResp3+0x1e>
 80214f6:	68bb      	ldr	r3, [r7, #8]
 80214f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d1ea      	bne.n	80214d6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021500:	687b      	ldr	r3, [r7, #4]
 8021502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021504:	f003 0304 	and.w	r3, r3, #4
 8021508:	2b00      	cmp	r3, #0
 802150a:	d004      	beq.n	8021516 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	2204      	movs	r2, #4
 8021510:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021512:	2304      	movs	r3, #4
 8021514:	e003      	b.n	802151e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8021516:	687b      	ldr	r3, [r7, #4]
 8021518:	4a06      	ldr	r2, [pc, #24]	; (8021534 <SDMMC_GetCmdResp3+0x7c>)
 802151a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 802151c:	2300      	movs	r3, #0
}
 802151e:	4618      	mov	r0, r3
 8021520:	3714      	adds	r7, #20
 8021522:	46bd      	mov	sp, r7
 8021524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021528:	4770      	bx	lr
 802152a:	bf00      	nop
 802152c:	24000698 	.word	0x24000698
 8021530:	10624dd3 	.word	0x10624dd3
 8021534:	002000c5 	.word	0x002000c5

08021538 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8021538:	b580      	push	{r7, lr}
 802153a:	b088      	sub	sp, #32
 802153c:	af00      	add	r7, sp, #0
 802153e:	60f8      	str	r0, [r7, #12]
 8021540:	460b      	mov	r3, r1
 8021542:	607a      	str	r2, [r7, #4]
 8021544:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8021546:	4b35      	ldr	r3, [pc, #212]	; (802161c <SDMMC_GetCmdResp6+0xe4>)
 8021548:	681b      	ldr	r3, [r3, #0]
 802154a:	4a35      	ldr	r2, [pc, #212]	; (8021620 <SDMMC_GetCmdResp6+0xe8>)
 802154c:	fba2 2303 	umull	r2, r3, r2, r3
 8021550:	0a5b      	lsrs	r3, r3, #9
 8021552:	f241 3288 	movw	r2, #5000	; 0x1388
 8021556:	fb02 f303 	mul.w	r3, r2, r3
 802155a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 802155c:	69fb      	ldr	r3, [r7, #28]
 802155e:	1e5a      	subs	r2, r3, #1
 8021560:	61fa      	str	r2, [r7, #28]
 8021562:	2b00      	cmp	r3, #0
 8021564:	d102      	bne.n	802156c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021566:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802156a:	e052      	b.n	8021612 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 802156c:	68fb      	ldr	r3, [r7, #12]
 802156e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021570:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8021572:	69bb      	ldr	r3, [r7, #24]
 8021574:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8021578:	2b00      	cmp	r3, #0
 802157a:	d0ef      	beq.n	802155c <SDMMC_GetCmdResp6+0x24>
 802157c:	69bb      	ldr	r3, [r7, #24]
 802157e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8021582:	2b00      	cmp	r3, #0
 8021584:	d1ea      	bne.n	802155c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021586:	68fb      	ldr	r3, [r7, #12]
 8021588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802158a:	f003 0304 	and.w	r3, r3, #4
 802158e:	2b00      	cmp	r3, #0
 8021590:	d004      	beq.n	802159c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8021592:	68fb      	ldr	r3, [r7, #12]
 8021594:	2204      	movs	r2, #4
 8021596:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021598:	2304      	movs	r3, #4
 802159a:	e03a      	b.n	8021612 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802159c:	68fb      	ldr	r3, [r7, #12]
 802159e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80215a0:	f003 0301 	and.w	r3, r3, #1
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d004      	beq.n	80215b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80215a8:	68fb      	ldr	r3, [r7, #12]
 80215aa:	2201      	movs	r2, #1
 80215ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80215ae:	2301      	movs	r3, #1
 80215b0:	e02f      	b.n	8021612 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80215b2:	68f8      	ldr	r0, [r7, #12]
 80215b4:	f7ff fb2c 	bl	8020c10 <SDMMC_GetCommandResponse>
 80215b8:	4603      	mov	r3, r0
 80215ba:	461a      	mov	r2, r3
 80215bc:	7afb      	ldrb	r3, [r7, #11]
 80215be:	4293      	cmp	r3, r2
 80215c0:	d001      	beq.n	80215c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80215c2:	2301      	movs	r3, #1
 80215c4:	e025      	b.n	8021612 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	4a16      	ldr	r2, [pc, #88]	; (8021624 <SDMMC_GetCmdResp6+0xec>)
 80215ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80215cc:	2100      	movs	r1, #0
 80215ce:	68f8      	ldr	r0, [r7, #12]
 80215d0:	f7ff fb2b 	bl	8020c2a <SDMMC_GetResponse>
 80215d4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80215d6:	697b      	ldr	r3, [r7, #20]
 80215d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80215dc:	2b00      	cmp	r3, #0
 80215de:	d106      	bne.n	80215ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80215e0:	697b      	ldr	r3, [r7, #20]
 80215e2:	0c1b      	lsrs	r3, r3, #16
 80215e4:	b29a      	uxth	r2, r3
 80215e6:	687b      	ldr	r3, [r7, #4]
 80215e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80215ea:	2300      	movs	r3, #0
 80215ec:	e011      	b.n	8021612 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80215ee:	697b      	ldr	r3, [r7, #20]
 80215f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	d002      	beq.n	80215fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80215f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80215fc:	e009      	b.n	8021612 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80215fe:	697b      	ldr	r3, [r7, #20]
 8021600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021604:	2b00      	cmp	r3, #0
 8021606:	d002      	beq.n	802160e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8021608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802160c:	e001      	b.n	8021612 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802160e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8021612:	4618      	mov	r0, r3
 8021614:	3720      	adds	r7, #32
 8021616:	46bd      	mov	sp, r7
 8021618:	bd80      	pop	{r7, pc}
 802161a:	bf00      	nop
 802161c:	24000698 	.word	0x24000698
 8021620:	10624dd3 	.word	0x10624dd3
 8021624:	002000c5 	.word	0x002000c5

08021628 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8021628:	b480      	push	{r7}
 802162a:	b085      	sub	sp, #20
 802162c:	af00      	add	r7, sp, #0
 802162e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8021630:	4b22      	ldr	r3, [pc, #136]	; (80216bc <SDMMC_GetCmdResp7+0x94>)
 8021632:	681b      	ldr	r3, [r3, #0]
 8021634:	4a22      	ldr	r2, [pc, #136]	; (80216c0 <SDMMC_GetCmdResp7+0x98>)
 8021636:	fba2 2303 	umull	r2, r3, r2, r3
 802163a:	0a5b      	lsrs	r3, r3, #9
 802163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8021640:	fb02 f303 	mul.w	r3, r2, r3
 8021644:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8021646:	68fb      	ldr	r3, [r7, #12]
 8021648:	1e5a      	subs	r2, r3, #1
 802164a:	60fa      	str	r2, [r7, #12]
 802164c:	2b00      	cmp	r3, #0
 802164e:	d102      	bne.n	8021656 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021654:	e02c      	b.n	80216b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802165a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802165c:	68bb      	ldr	r3, [r7, #8]
 802165e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8021662:	2b00      	cmp	r3, #0
 8021664:	d0ef      	beq.n	8021646 <SDMMC_GetCmdResp7+0x1e>
 8021666:	68bb      	ldr	r3, [r7, #8]
 8021668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802166c:	2b00      	cmp	r3, #0
 802166e:	d1ea      	bne.n	8021646 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021674:	f003 0304 	and.w	r3, r3, #4
 8021678:	2b00      	cmp	r3, #0
 802167a:	d004      	beq.n	8021686 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	2204      	movs	r2, #4
 8021680:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021682:	2304      	movs	r3, #4
 8021684:	e014      	b.n	80216b0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802168a:	f003 0301 	and.w	r3, r3, #1
 802168e:	2b00      	cmp	r3, #0
 8021690:	d004      	beq.n	802169c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	2201      	movs	r2, #1
 8021696:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021698:	2301      	movs	r3, #1
 802169a:	e009      	b.n	80216b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 802169c:	687b      	ldr	r3, [r7, #4]
 802169e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80216a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	d002      	beq.n	80216ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80216a8:	687b      	ldr	r3, [r7, #4]
 80216aa:	2240      	movs	r2, #64	; 0x40
 80216ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80216ae:	2300      	movs	r3, #0

}
 80216b0:	4618      	mov	r0, r3
 80216b2:	3714      	adds	r7, #20
 80216b4:	46bd      	mov	sp, r7
 80216b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216ba:	4770      	bx	lr
 80216bc:	24000698 	.word	0x24000698
 80216c0:	10624dd3 	.word	0x10624dd3

080216c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80216c4:	b084      	sub	sp, #16
 80216c6:	b580      	push	{r7, lr}
 80216c8:	b084      	sub	sp, #16
 80216ca:	af00      	add	r7, sp, #0
 80216cc:	6078      	str	r0, [r7, #4]
 80216ce:	f107 001c 	add.w	r0, r7, #28
 80216d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80216d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216d8:	2b01      	cmp	r3, #1
 80216da:	d120      	bne.n	802171e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80216dc:	687b      	ldr	r3, [r7, #4]
 80216de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80216e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80216e4:	687b      	ldr	r3, [r7, #4]
 80216e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	68da      	ldr	r2, [r3, #12]
 80216ec:	4b25      	ldr	r3, [pc, #148]	; (8021784 <USB_CoreInit+0xc0>)
 80216ee:	4013      	ands	r3, r2
 80216f0:	687a      	ldr	r2, [r7, #4]
 80216f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	68db      	ldr	r3, [r3, #12]
 80216f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8021700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021702:	2b01      	cmp	r3, #1
 8021704:	d105      	bne.n	8021712 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	68db      	ldr	r3, [r3, #12]
 802170a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8021712:	6878      	ldr	r0, [r7, #4]
 8021714:	f000 fa4c 	bl	8021bb0 <USB_CoreReset>
 8021718:	4603      	mov	r3, r0
 802171a:	73fb      	strb	r3, [r7, #15]
 802171c:	e01a      	b.n	8021754 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	68db      	ldr	r3, [r3, #12]
 8021722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8021726:	687b      	ldr	r3, [r7, #4]
 8021728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 802172a:	6878      	ldr	r0, [r7, #4]
 802172c:	f000 fa40 	bl	8021bb0 <USB_CoreReset>
 8021730:	4603      	mov	r3, r0
 8021732:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8021734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021736:	2b00      	cmp	r3, #0
 8021738:	d106      	bne.n	8021748 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802173e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	639a      	str	r2, [r3, #56]	; 0x38
 8021746:	e005      	b.n	8021754 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802174c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8021750:	687b      	ldr	r3, [r7, #4]
 8021752:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8021754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021756:	2b01      	cmp	r3, #1
 8021758:	d10b      	bne.n	8021772 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802175a:	687b      	ldr	r3, [r7, #4]
 802175c:	689b      	ldr	r3, [r3, #8]
 802175e:	f043 0206 	orr.w	r2, r3, #6
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8021766:	687b      	ldr	r3, [r7, #4]
 8021768:	689b      	ldr	r3, [r3, #8]
 802176a:	f043 0220 	orr.w	r2, r3, #32
 802176e:	687b      	ldr	r3, [r7, #4]
 8021770:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8021772:	7bfb      	ldrb	r3, [r7, #15]
}
 8021774:	4618      	mov	r0, r3
 8021776:	3710      	adds	r7, #16
 8021778:	46bd      	mov	sp, r7
 802177a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802177e:	b004      	add	sp, #16
 8021780:	4770      	bx	lr
 8021782:	bf00      	nop
 8021784:	ffbdffbf 	.word	0xffbdffbf

08021788 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8021788:	b480      	push	{r7}
 802178a:	b083      	sub	sp, #12
 802178c:	af00      	add	r7, sp, #0
 802178e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8021790:	687b      	ldr	r3, [r7, #4]
 8021792:	689b      	ldr	r3, [r3, #8]
 8021794:	f023 0201 	bic.w	r2, r3, #1
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802179c:	2300      	movs	r3, #0
}
 802179e:	4618      	mov	r0, r3
 80217a0:	370c      	adds	r7, #12
 80217a2:	46bd      	mov	sp, r7
 80217a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217a8:	4770      	bx	lr

080217aa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80217aa:	b580      	push	{r7, lr}
 80217ac:	b082      	sub	sp, #8
 80217ae:	af00      	add	r7, sp, #0
 80217b0:	6078      	str	r0, [r7, #4]
 80217b2:	460b      	mov	r3, r1
 80217b4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80217b6:	687b      	ldr	r3, [r7, #4]
 80217b8:	68db      	ldr	r3, [r3, #12]
 80217ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80217be:	687b      	ldr	r3, [r7, #4]
 80217c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80217c2:	78fb      	ldrb	r3, [r7, #3]
 80217c4:	2b01      	cmp	r3, #1
 80217c6:	d106      	bne.n	80217d6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	68db      	ldr	r3, [r3, #12]
 80217cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80217d0:	687b      	ldr	r3, [r7, #4]
 80217d2:	60da      	str	r2, [r3, #12]
 80217d4:	e00b      	b.n	80217ee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80217d6:	78fb      	ldrb	r3, [r7, #3]
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d106      	bne.n	80217ea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	68db      	ldr	r3, [r3, #12]
 80217e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80217e4:	687b      	ldr	r3, [r7, #4]
 80217e6:	60da      	str	r2, [r3, #12]
 80217e8:	e001      	b.n	80217ee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80217ea:	2301      	movs	r3, #1
 80217ec:	e003      	b.n	80217f6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80217ee:	2032      	movs	r0, #50	; 0x32
 80217f0:	f7f1 fc3e 	bl	8013070 <HAL_Delay>

  return HAL_OK;
 80217f4:	2300      	movs	r3, #0
}
 80217f6:	4618      	mov	r0, r3
 80217f8:	3708      	adds	r7, #8
 80217fa:	46bd      	mov	sp, r7
 80217fc:	bd80      	pop	{r7, pc}
	...

08021800 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8021800:	b084      	sub	sp, #16
 8021802:	b580      	push	{r7, lr}
 8021804:	b086      	sub	sp, #24
 8021806:	af00      	add	r7, sp, #0
 8021808:	6078      	str	r0, [r7, #4]
 802180a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802180e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8021812:	2300      	movs	r3, #0
 8021814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 802181a:	2300      	movs	r3, #0
 802181c:	613b      	str	r3, [r7, #16]
 802181e:	e009      	b.n	8021834 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8021820:	687a      	ldr	r2, [r7, #4]
 8021822:	693b      	ldr	r3, [r7, #16]
 8021824:	3340      	adds	r3, #64	; 0x40
 8021826:	009b      	lsls	r3, r3, #2
 8021828:	4413      	add	r3, r2
 802182a:	2200      	movs	r2, #0
 802182c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 802182e:	693b      	ldr	r3, [r7, #16]
 8021830:	3301      	adds	r3, #1
 8021832:	613b      	str	r3, [r7, #16]
 8021834:	693b      	ldr	r3, [r7, #16]
 8021836:	2b0e      	cmp	r3, #14
 8021838:	d9f2      	bls.n	8021820 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 802183a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802183c:	2b00      	cmp	r3, #0
 802183e:	d11c      	bne.n	802187a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8021840:	68fb      	ldr	r3, [r7, #12]
 8021842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021846:	685b      	ldr	r3, [r3, #4]
 8021848:	68fa      	ldr	r2, [r7, #12]
 802184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802184e:	f043 0302 	orr.w	r3, r3, #2
 8021852:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021858:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802185c:	687b      	ldr	r3, [r7, #4]
 802185e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8021860:	687b      	ldr	r3, [r7, #4]
 8021862:	681b      	ldr	r3, [r3, #0]
 8021864:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8021868:	687b      	ldr	r3, [r7, #4]
 802186a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 802186c:	687b      	ldr	r3, [r7, #4]
 802186e:	681b      	ldr	r3, [r3, #0]
 8021870:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8021874:	687b      	ldr	r3, [r7, #4]
 8021876:	601a      	str	r2, [r3, #0]
 8021878:	e005      	b.n	8021886 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802187e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8021882:	687b      	ldr	r3, [r7, #4]
 8021884:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802188c:	461a      	mov	r2, r3
 802188e:	2300      	movs	r3, #0
 8021890:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8021892:	68fb      	ldr	r3, [r7, #12]
 8021894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021898:	4619      	mov	r1, r3
 802189a:	68fb      	ldr	r3, [r7, #12]
 802189c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80218a0:	461a      	mov	r2, r3
 80218a2:	680b      	ldr	r3, [r1, #0]
 80218a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80218a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80218a8:	2b01      	cmp	r3, #1
 80218aa:	d10c      	bne.n	80218c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80218ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218ae:	2b00      	cmp	r3, #0
 80218b0:	d104      	bne.n	80218bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80218b2:	2100      	movs	r1, #0
 80218b4:	6878      	ldr	r0, [r7, #4]
 80218b6:	f000 f949 	bl	8021b4c <USB_SetDevSpeed>
 80218ba:	e008      	b.n	80218ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80218bc:	2101      	movs	r1, #1
 80218be:	6878      	ldr	r0, [r7, #4]
 80218c0:	f000 f944 	bl	8021b4c <USB_SetDevSpeed>
 80218c4:	e003      	b.n	80218ce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80218c6:	2103      	movs	r1, #3
 80218c8:	6878      	ldr	r0, [r7, #4]
 80218ca:	f000 f93f 	bl	8021b4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80218ce:	2110      	movs	r1, #16
 80218d0:	6878      	ldr	r0, [r7, #4]
 80218d2:	f000 f8f3 	bl	8021abc <USB_FlushTxFifo>
 80218d6:	4603      	mov	r3, r0
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d001      	beq.n	80218e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80218dc:	2301      	movs	r3, #1
 80218de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80218e0:	6878      	ldr	r0, [r7, #4]
 80218e2:	f000 f911 	bl	8021b08 <USB_FlushRxFifo>
 80218e6:	4603      	mov	r3, r0
 80218e8:	2b00      	cmp	r3, #0
 80218ea:	d001      	beq.n	80218f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80218ec:	2301      	movs	r3, #1
 80218ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80218f6:	461a      	mov	r2, r3
 80218f8:	2300      	movs	r3, #0
 80218fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80218fc:	68fb      	ldr	r3, [r7, #12]
 80218fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021902:	461a      	mov	r2, r3
 8021904:	2300      	movs	r3, #0
 8021906:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8021908:	68fb      	ldr	r3, [r7, #12]
 802190a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802190e:	461a      	mov	r2, r3
 8021910:	2300      	movs	r3, #0
 8021912:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8021914:	2300      	movs	r3, #0
 8021916:	613b      	str	r3, [r7, #16]
 8021918:	e043      	b.n	80219a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802191a:	693b      	ldr	r3, [r7, #16]
 802191c:	015a      	lsls	r2, r3, #5
 802191e:	68fb      	ldr	r3, [r7, #12]
 8021920:	4413      	add	r3, r2
 8021922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021926:	681b      	ldr	r3, [r3, #0]
 8021928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802192c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021930:	d118      	bne.n	8021964 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8021932:	693b      	ldr	r3, [r7, #16]
 8021934:	2b00      	cmp	r3, #0
 8021936:	d10a      	bne.n	802194e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8021938:	693b      	ldr	r3, [r7, #16]
 802193a:	015a      	lsls	r2, r3, #5
 802193c:	68fb      	ldr	r3, [r7, #12]
 802193e:	4413      	add	r3, r2
 8021940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021944:	461a      	mov	r2, r3
 8021946:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802194a:	6013      	str	r3, [r2, #0]
 802194c:	e013      	b.n	8021976 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 802194e:	693b      	ldr	r3, [r7, #16]
 8021950:	015a      	lsls	r2, r3, #5
 8021952:	68fb      	ldr	r3, [r7, #12]
 8021954:	4413      	add	r3, r2
 8021956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802195a:	461a      	mov	r2, r3
 802195c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8021960:	6013      	str	r3, [r2, #0]
 8021962:	e008      	b.n	8021976 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8021964:	693b      	ldr	r3, [r7, #16]
 8021966:	015a      	lsls	r2, r3, #5
 8021968:	68fb      	ldr	r3, [r7, #12]
 802196a:	4413      	add	r3, r2
 802196c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021970:	461a      	mov	r2, r3
 8021972:	2300      	movs	r3, #0
 8021974:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8021976:	693b      	ldr	r3, [r7, #16]
 8021978:	015a      	lsls	r2, r3, #5
 802197a:	68fb      	ldr	r3, [r7, #12]
 802197c:	4413      	add	r3, r2
 802197e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021982:	461a      	mov	r2, r3
 8021984:	2300      	movs	r3, #0
 8021986:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8021988:	693b      	ldr	r3, [r7, #16]
 802198a:	015a      	lsls	r2, r3, #5
 802198c:	68fb      	ldr	r3, [r7, #12]
 802198e:	4413      	add	r3, r2
 8021990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021994:	461a      	mov	r2, r3
 8021996:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802199a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802199c:	693b      	ldr	r3, [r7, #16]
 802199e:	3301      	adds	r3, #1
 80219a0:	613b      	str	r3, [r7, #16]
 80219a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219a4:	693a      	ldr	r2, [r7, #16]
 80219a6:	429a      	cmp	r2, r3
 80219a8:	d3b7      	bcc.n	802191a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80219aa:	2300      	movs	r3, #0
 80219ac:	613b      	str	r3, [r7, #16]
 80219ae:	e043      	b.n	8021a38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80219b0:	693b      	ldr	r3, [r7, #16]
 80219b2:	015a      	lsls	r2, r3, #5
 80219b4:	68fb      	ldr	r3, [r7, #12]
 80219b6:	4413      	add	r3, r2
 80219b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80219bc:	681b      	ldr	r3, [r3, #0]
 80219be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80219c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80219c6:	d118      	bne.n	80219fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80219c8:	693b      	ldr	r3, [r7, #16]
 80219ca:	2b00      	cmp	r3, #0
 80219cc:	d10a      	bne.n	80219e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80219ce:	693b      	ldr	r3, [r7, #16]
 80219d0:	015a      	lsls	r2, r3, #5
 80219d2:	68fb      	ldr	r3, [r7, #12]
 80219d4:	4413      	add	r3, r2
 80219d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80219da:	461a      	mov	r2, r3
 80219dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80219e0:	6013      	str	r3, [r2, #0]
 80219e2:	e013      	b.n	8021a0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80219e4:	693b      	ldr	r3, [r7, #16]
 80219e6:	015a      	lsls	r2, r3, #5
 80219e8:	68fb      	ldr	r3, [r7, #12]
 80219ea:	4413      	add	r3, r2
 80219ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80219f0:	461a      	mov	r2, r3
 80219f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80219f6:	6013      	str	r3, [r2, #0]
 80219f8:	e008      	b.n	8021a0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80219fa:	693b      	ldr	r3, [r7, #16]
 80219fc:	015a      	lsls	r2, r3, #5
 80219fe:	68fb      	ldr	r3, [r7, #12]
 8021a00:	4413      	add	r3, r2
 8021a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021a06:	461a      	mov	r2, r3
 8021a08:	2300      	movs	r3, #0
 8021a0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8021a0c:	693b      	ldr	r3, [r7, #16]
 8021a0e:	015a      	lsls	r2, r3, #5
 8021a10:	68fb      	ldr	r3, [r7, #12]
 8021a12:	4413      	add	r3, r2
 8021a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021a18:	461a      	mov	r2, r3
 8021a1a:	2300      	movs	r3, #0
 8021a1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8021a1e:	693b      	ldr	r3, [r7, #16]
 8021a20:	015a      	lsls	r2, r3, #5
 8021a22:	68fb      	ldr	r3, [r7, #12]
 8021a24:	4413      	add	r3, r2
 8021a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021a2a:	461a      	mov	r2, r3
 8021a2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8021a30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8021a32:	693b      	ldr	r3, [r7, #16]
 8021a34:	3301      	adds	r3, #1
 8021a36:	613b      	str	r3, [r7, #16]
 8021a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a3a:	693a      	ldr	r2, [r7, #16]
 8021a3c:	429a      	cmp	r2, r3
 8021a3e:	d3b7      	bcc.n	80219b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8021a40:	68fb      	ldr	r3, [r7, #12]
 8021a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021a46:	691b      	ldr	r3, [r3, #16]
 8021a48:	68fa      	ldr	r2, [r7, #12]
 8021a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8021a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021a52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	2200      	movs	r2, #0
 8021a58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8021a5a:	687b      	ldr	r3, [r7, #4]
 8021a5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8021a60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8021a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	d105      	bne.n	8021a74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8021a68:	687b      	ldr	r3, [r7, #4]
 8021a6a:	699b      	ldr	r3, [r3, #24]
 8021a6c:	f043 0210 	orr.w	r2, r3, #16
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8021a74:	687b      	ldr	r3, [r7, #4]
 8021a76:	699a      	ldr	r2, [r3, #24]
 8021a78:	4b0e      	ldr	r3, [pc, #56]	; (8021ab4 <USB_DevInit+0x2b4>)
 8021a7a:	4313      	orrs	r3, r2
 8021a7c:	687a      	ldr	r2, [r7, #4]
 8021a7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8021a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021a82:	2b00      	cmp	r3, #0
 8021a84:	d005      	beq.n	8021a92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8021a86:	687b      	ldr	r3, [r7, #4]
 8021a88:	699b      	ldr	r3, [r3, #24]
 8021a8a:	f043 0208 	orr.w	r2, r3, #8
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8021a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021a94:	2b01      	cmp	r3, #1
 8021a96:	d105      	bne.n	8021aa4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	699a      	ldr	r2, [r3, #24]
 8021a9c:	4b06      	ldr	r3, [pc, #24]	; (8021ab8 <USB_DevInit+0x2b8>)
 8021a9e:	4313      	orrs	r3, r2
 8021aa0:	687a      	ldr	r2, [r7, #4]
 8021aa2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8021aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8021aa6:	4618      	mov	r0, r3
 8021aa8:	3718      	adds	r7, #24
 8021aaa:	46bd      	mov	sp, r7
 8021aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021ab0:	b004      	add	sp, #16
 8021ab2:	4770      	bx	lr
 8021ab4:	803c3800 	.word	0x803c3800
 8021ab8:	40000004 	.word	0x40000004

08021abc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8021abc:	b480      	push	{r7}
 8021abe:	b085      	sub	sp, #20
 8021ac0:	af00      	add	r7, sp, #0
 8021ac2:	6078      	str	r0, [r7, #4]
 8021ac4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8021ac6:	2300      	movs	r3, #0
 8021ac8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8021aca:	683b      	ldr	r3, [r7, #0]
 8021acc:	019b      	lsls	r3, r3, #6
 8021ace:	f043 0220 	orr.w	r2, r3, #32
 8021ad2:	687b      	ldr	r3, [r7, #4]
 8021ad4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8021ad6:	68fb      	ldr	r3, [r7, #12]
 8021ad8:	3301      	adds	r3, #1
 8021ada:	60fb      	str	r3, [r7, #12]
 8021adc:	68fb      	ldr	r3, [r7, #12]
 8021ade:	4a09      	ldr	r2, [pc, #36]	; (8021b04 <USB_FlushTxFifo+0x48>)
 8021ae0:	4293      	cmp	r3, r2
 8021ae2:	d901      	bls.n	8021ae8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8021ae4:	2303      	movs	r3, #3
 8021ae6:	e006      	b.n	8021af6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	691b      	ldr	r3, [r3, #16]
 8021aec:	f003 0320 	and.w	r3, r3, #32
 8021af0:	2b20      	cmp	r3, #32
 8021af2:	d0f0      	beq.n	8021ad6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8021af4:	2300      	movs	r3, #0
}
 8021af6:	4618      	mov	r0, r3
 8021af8:	3714      	adds	r7, #20
 8021afa:	46bd      	mov	sp, r7
 8021afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b00:	4770      	bx	lr
 8021b02:	bf00      	nop
 8021b04:	00030d40 	.word	0x00030d40

08021b08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8021b08:	b480      	push	{r7}
 8021b0a:	b085      	sub	sp, #20
 8021b0c:	af00      	add	r7, sp, #0
 8021b0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8021b10:	2300      	movs	r3, #0
 8021b12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	2210      	movs	r2, #16
 8021b18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8021b1a:	68fb      	ldr	r3, [r7, #12]
 8021b1c:	3301      	adds	r3, #1
 8021b1e:	60fb      	str	r3, [r7, #12]
 8021b20:	68fb      	ldr	r3, [r7, #12]
 8021b22:	4a09      	ldr	r2, [pc, #36]	; (8021b48 <USB_FlushRxFifo+0x40>)
 8021b24:	4293      	cmp	r3, r2
 8021b26:	d901      	bls.n	8021b2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8021b28:	2303      	movs	r3, #3
 8021b2a:	e006      	b.n	8021b3a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8021b2c:	687b      	ldr	r3, [r7, #4]
 8021b2e:	691b      	ldr	r3, [r3, #16]
 8021b30:	f003 0310 	and.w	r3, r3, #16
 8021b34:	2b10      	cmp	r3, #16
 8021b36:	d0f0      	beq.n	8021b1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8021b38:	2300      	movs	r3, #0
}
 8021b3a:	4618      	mov	r0, r3
 8021b3c:	3714      	adds	r7, #20
 8021b3e:	46bd      	mov	sp, r7
 8021b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b44:	4770      	bx	lr
 8021b46:	bf00      	nop
 8021b48:	00030d40 	.word	0x00030d40

08021b4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8021b4c:	b480      	push	{r7}
 8021b4e:	b085      	sub	sp, #20
 8021b50:	af00      	add	r7, sp, #0
 8021b52:	6078      	str	r0, [r7, #4]
 8021b54:	460b      	mov	r3, r1
 8021b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8021b5c:	68fb      	ldr	r3, [r7, #12]
 8021b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021b62:	681a      	ldr	r2, [r3, #0]
 8021b64:	78fb      	ldrb	r3, [r7, #3]
 8021b66:	68f9      	ldr	r1, [r7, #12]
 8021b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8021b6c:	4313      	orrs	r3, r2
 8021b6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8021b70:	2300      	movs	r3, #0
}
 8021b72:	4618      	mov	r0, r3
 8021b74:	3714      	adds	r7, #20
 8021b76:	46bd      	mov	sp, r7
 8021b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b7c:	4770      	bx	lr

08021b7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8021b7e:	b580      	push	{r7, lr}
 8021b80:	b084      	sub	sp, #16
 8021b82:	af00      	add	r7, sp, #0
 8021b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8021b8a:	68fb      	ldr	r3, [r7, #12]
 8021b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021b90:	685b      	ldr	r3, [r3, #4]
 8021b92:	68fa      	ldr	r2, [r7, #12]
 8021b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8021b98:	f043 0302 	orr.w	r3, r3, #2
 8021b9c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8021b9e:	2003      	movs	r0, #3
 8021ba0:	f7f1 fa66 	bl	8013070 <HAL_Delay>

  return HAL_OK;
 8021ba4:	2300      	movs	r3, #0
}
 8021ba6:	4618      	mov	r0, r3
 8021ba8:	3710      	adds	r7, #16
 8021baa:	46bd      	mov	sp, r7
 8021bac:	bd80      	pop	{r7, pc}
	...

08021bb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8021bb0:	b480      	push	{r7}
 8021bb2:	b085      	sub	sp, #20
 8021bb4:	af00      	add	r7, sp, #0
 8021bb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8021bb8:	2300      	movs	r3, #0
 8021bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8021bbc:	68fb      	ldr	r3, [r7, #12]
 8021bbe:	3301      	adds	r3, #1
 8021bc0:	60fb      	str	r3, [r7, #12]
 8021bc2:	68fb      	ldr	r3, [r7, #12]
 8021bc4:	4a13      	ldr	r2, [pc, #76]	; (8021c14 <USB_CoreReset+0x64>)
 8021bc6:	4293      	cmp	r3, r2
 8021bc8:	d901      	bls.n	8021bce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8021bca:	2303      	movs	r3, #3
 8021bcc:	e01b      	b.n	8021c06 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8021bce:	687b      	ldr	r3, [r7, #4]
 8021bd0:	691b      	ldr	r3, [r3, #16]
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	daf2      	bge.n	8021bbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8021bd6:	2300      	movs	r3, #0
 8021bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8021bda:	687b      	ldr	r3, [r7, #4]
 8021bdc:	691b      	ldr	r3, [r3, #16]
 8021bde:	f043 0201 	orr.w	r2, r3, #1
 8021be2:	687b      	ldr	r3, [r7, #4]
 8021be4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8021be6:	68fb      	ldr	r3, [r7, #12]
 8021be8:	3301      	adds	r3, #1
 8021bea:	60fb      	str	r3, [r7, #12]
 8021bec:	68fb      	ldr	r3, [r7, #12]
 8021bee:	4a09      	ldr	r2, [pc, #36]	; (8021c14 <USB_CoreReset+0x64>)
 8021bf0:	4293      	cmp	r3, r2
 8021bf2:	d901      	bls.n	8021bf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8021bf4:	2303      	movs	r3, #3
 8021bf6:	e006      	b.n	8021c06 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8021bf8:	687b      	ldr	r3, [r7, #4]
 8021bfa:	691b      	ldr	r3, [r3, #16]
 8021bfc:	f003 0301 	and.w	r3, r3, #1
 8021c00:	2b01      	cmp	r3, #1
 8021c02:	d0f0      	beq.n	8021be6 <USB_CoreReset+0x36>

  return HAL_OK;
 8021c04:	2300      	movs	r3, #0
}
 8021c06:	4618      	mov	r0, r3
 8021c08:	3714      	adds	r7, #20
 8021c0a:	46bd      	mov	sp, r7
 8021c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c10:	4770      	bx	lr
 8021c12:	bf00      	nop
 8021c14:	00030d40 	.word	0x00030d40

08021c18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8021c18:	b580      	push	{r7, lr}
 8021c1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8021c1c:	4904      	ldr	r1, [pc, #16]	; (8021c30 <MX_FATFS_Init+0x18>)
 8021c1e:	4805      	ldr	r0, [pc, #20]	; (8021c34 <MX_FATFS_Init+0x1c>)
 8021c20:	f002 fcb4 	bl	802458c <FATFS_LinkDriver>
 8021c24:	4603      	mov	r3, r0
 8021c26:	461a      	mov	r2, r3
 8021c28:	4b03      	ldr	r3, [pc, #12]	; (8021c38 <MX_FATFS_Init+0x20>)
 8021c2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8021c2c:	bf00      	nop
 8021c2e:	bd80      	pop	{r7, pc}
 8021c30:	2400cda8 	.word	0x2400cda8
 8021c34:	0802d75c 	.word	0x0802d75c
 8021c38:	2400cda4 	.word	0x2400cda4

08021c3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8021c3c:	b480      	push	{r7}
 8021c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8021c40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8021c42:	4618      	mov	r0, r3
 8021c44:	46bd      	mov	sp, r7
 8021c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c4a:	4770      	bx	lr

08021c4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8021c4c:	b580      	push	{r7, lr}
 8021c4e:	b082      	sub	sp, #8
 8021c50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8021c52:	2300      	movs	r3, #0
 8021c54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8021c56:	f000 f885 	bl	8021d64 <BSP_SD_IsDetected>
 8021c5a:	4603      	mov	r3, r0
 8021c5c:	2b01      	cmp	r3, #1
 8021c5e:	d001      	beq.n	8021c64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8021c60:	2302      	movs	r3, #2
 8021c62:	e012      	b.n	8021c8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8021c64:	480b      	ldr	r0, [pc, #44]	; (8021c94 <BSP_SD_Init+0x48>)
 8021c66:	f7fa fc0d 	bl	801c484 <HAL_SD_Init>
 8021c6a:	4603      	mov	r3, r0
 8021c6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8021c6e:	79fb      	ldrb	r3, [r7, #7]
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d109      	bne.n	8021c88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8021c74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021c78:	4806      	ldr	r0, [pc, #24]	; (8021c94 <BSP_SD_Init+0x48>)
 8021c7a:	f7fb fac9 	bl	801d210 <HAL_SD_ConfigWideBusOperation>
 8021c7e:	4603      	mov	r3, r0
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d001      	beq.n	8021c88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8021c84:	2301      	movs	r3, #1
 8021c86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8021c88:	79fb      	ldrb	r3, [r7, #7]
}
 8021c8a:	4618      	mov	r0, r3
 8021c8c:	3708      	adds	r7, #8
 8021c8e:	46bd      	mov	sp, r7
 8021c90:	bd80      	pop	{r7, pc}
 8021c92:	bf00      	nop
 8021c94:	2400c47c 	.word	0x2400c47c

08021c98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8021c98:	b580      	push	{r7, lr}
 8021c9a:	b086      	sub	sp, #24
 8021c9c:	af00      	add	r7, sp, #0
 8021c9e:	60f8      	str	r0, [r7, #12]
 8021ca0:	60b9      	str	r1, [r7, #8]
 8021ca2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8021ca4:	2300      	movs	r3, #0
 8021ca6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8021ca8:	687b      	ldr	r3, [r7, #4]
 8021caa:	68ba      	ldr	r2, [r7, #8]
 8021cac:	68f9      	ldr	r1, [r7, #12]
 8021cae:	4806      	ldr	r0, [pc, #24]	; (8021cc8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8021cb0:	f7fa fd0c 	bl	801c6cc <HAL_SD_ReadBlocks_DMA>
 8021cb4:	4603      	mov	r3, r0
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	d001      	beq.n	8021cbe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8021cba:	2301      	movs	r3, #1
 8021cbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8021cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8021cc0:	4618      	mov	r0, r3
 8021cc2:	3718      	adds	r7, #24
 8021cc4:	46bd      	mov	sp, r7
 8021cc6:	bd80      	pop	{r7, pc}
 8021cc8:	2400c47c 	.word	0x2400c47c

08021ccc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8021ccc:	b580      	push	{r7, lr}
 8021cce:	b086      	sub	sp, #24
 8021cd0:	af00      	add	r7, sp, #0
 8021cd2:	60f8      	str	r0, [r7, #12]
 8021cd4:	60b9      	str	r1, [r7, #8]
 8021cd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8021cd8:	2300      	movs	r3, #0
 8021cda:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	68ba      	ldr	r2, [r7, #8]
 8021ce0:	68f9      	ldr	r1, [r7, #12]
 8021ce2:	4806      	ldr	r0, [pc, #24]	; (8021cfc <BSP_SD_WriteBlocks_DMA+0x30>)
 8021ce4:	f7fa fd9a 	bl	801c81c <HAL_SD_WriteBlocks_DMA>
 8021ce8:	4603      	mov	r3, r0
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	d001      	beq.n	8021cf2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8021cee:	2301      	movs	r3, #1
 8021cf0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8021cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8021cf4:	4618      	mov	r0, r3
 8021cf6:	3718      	adds	r7, #24
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	bd80      	pop	{r7, pc}
 8021cfc:	2400c47c 	.word	0x2400c47c

08021d00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8021d00:	b580      	push	{r7, lr}
 8021d02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8021d04:	4805      	ldr	r0, [pc, #20]	; (8021d1c <BSP_SD_GetCardState+0x1c>)
 8021d06:	f7fb fb2d 	bl	801d364 <HAL_SD_GetCardState>
 8021d0a:	4603      	mov	r3, r0
 8021d0c:	2b04      	cmp	r3, #4
 8021d0e:	bf14      	ite	ne
 8021d10:	2301      	movne	r3, #1
 8021d12:	2300      	moveq	r3, #0
 8021d14:	b2db      	uxtb	r3, r3
}
 8021d16:	4618      	mov	r0, r3
 8021d18:	bd80      	pop	{r7, pc}
 8021d1a:	bf00      	nop
 8021d1c:	2400c47c 	.word	0x2400c47c

08021d20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8021d20:	b580      	push	{r7, lr}
 8021d22:	b082      	sub	sp, #8
 8021d24:	af00      	add	r7, sp, #0
 8021d26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8021d28:	6879      	ldr	r1, [r7, #4]
 8021d2a:	4803      	ldr	r0, [pc, #12]	; (8021d38 <BSP_SD_GetCardInfo+0x18>)
 8021d2c:	f7fb fa44 	bl	801d1b8 <HAL_SD_GetCardInfo>
}
 8021d30:	bf00      	nop
 8021d32:	3708      	adds	r7, #8
 8021d34:	46bd      	mov	sp, r7
 8021d36:	bd80      	pop	{r7, pc}
 8021d38:	2400c47c 	.word	0x2400c47c

08021d3c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8021d3c:	b580      	push	{r7, lr}
 8021d3e:	b082      	sub	sp, #8
 8021d40:	af00      	add	r7, sp, #0
 8021d42:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8021d44:	f000 f9ac 	bl	80220a0 <BSP_SD_WriteCpltCallback>
}
 8021d48:	bf00      	nop
 8021d4a:	3708      	adds	r7, #8
 8021d4c:	46bd      	mov	sp, r7
 8021d4e:	bd80      	pop	{r7, pc}

08021d50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8021d50:	b580      	push	{r7, lr}
 8021d52:	b082      	sub	sp, #8
 8021d54:	af00      	add	r7, sp, #0
 8021d56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8021d58:	f000 f9b4 	bl	80220c4 <BSP_SD_ReadCpltCallback>
}
 8021d5c:	bf00      	nop
 8021d5e:	3708      	adds	r7, #8
 8021d60:	46bd      	mov	sp, r7
 8021d62:	bd80      	pop	{r7, pc}

08021d64 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8021d64:	b580      	push	{r7, lr}
 8021d66:	b082      	sub	sp, #8
 8021d68:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8021d6a:	2301      	movs	r3, #1
 8021d6c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8021d6e:	f000 f80b 	bl	8021d88 <BSP_PlatformIsDetected>
 8021d72:	4603      	mov	r3, r0
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	d101      	bne.n	8021d7c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8021d78:	2300      	movs	r3, #0
 8021d7a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8021d7c:	79fb      	ldrb	r3, [r7, #7]
 8021d7e:	b2db      	uxtb	r3, r3
}
 8021d80:	4618      	mov	r0, r3
 8021d82:	3708      	adds	r7, #8
 8021d84:	46bd      	mov	sp, r7
 8021d86:	bd80      	pop	{r7, pc}

08021d88 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8021d88:	b580      	push	{r7, lr}
 8021d8a:	b082      	sub	sp, #8
 8021d8c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8021d8e:	2301      	movs	r3, #1
 8021d90:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8021d92:	2108      	movs	r1, #8
 8021d94:	4806      	ldr	r0, [pc, #24]	; (8021db0 <BSP_PlatformIsDetected+0x28>)
 8021d96:	f7f4 fead 	bl	8016af4 <HAL_GPIO_ReadPin>
 8021d9a:	4603      	mov	r3, r0
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	d001      	beq.n	8021da4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8021da0:	2300      	movs	r3, #0
 8021da2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8021da4:	79fb      	ldrb	r3, [r7, #7]
}
 8021da6:	4618      	mov	r0, r3
 8021da8:	3708      	adds	r7, #8
 8021daa:	46bd      	mov	sp, r7
 8021dac:	bd80      	pop	{r7, pc}
 8021dae:	bf00      	nop
 8021db0:	58021800 	.word	0x58021800

08021db4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8021db4:	b580      	push	{r7, lr}
 8021db6:	b084      	sub	sp, #16
 8021db8:	af00      	add	r7, sp, #0
 8021dba:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8021dbc:	f002 fd08 	bl	80247d0 <osKernelGetTickCount>
 8021dc0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8021dc2:	e006      	b.n	8021dd2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8021dc4:	f7ff ff9c 	bl	8021d00 <BSP_SD_GetCardState>
 8021dc8:	4603      	mov	r3, r0
 8021dca:	2b00      	cmp	r3, #0
 8021dcc:	d101      	bne.n	8021dd2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8021dce:	2300      	movs	r3, #0
 8021dd0:	e009      	b.n	8021de6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8021dd2:	f002 fcfd 	bl	80247d0 <osKernelGetTickCount>
 8021dd6:	4602      	mov	r2, r0
 8021dd8:	68fb      	ldr	r3, [r7, #12]
 8021dda:	1ad3      	subs	r3, r2, r3
 8021ddc:	687a      	ldr	r2, [r7, #4]
 8021dde:	429a      	cmp	r2, r3
 8021de0:	d8f0      	bhi.n	8021dc4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8021de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021de6:	4618      	mov	r0, r3
 8021de8:	3710      	adds	r7, #16
 8021dea:	46bd      	mov	sp, r7
 8021dec:	bd80      	pop	{r7, pc}
	...

08021df0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8021df0:	b580      	push	{r7, lr}
 8021df2:	b082      	sub	sp, #8
 8021df4:	af00      	add	r7, sp, #0
 8021df6:	4603      	mov	r3, r0
 8021df8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8021dfa:	4b0b      	ldr	r3, [pc, #44]	; (8021e28 <SD_CheckStatus+0x38>)
 8021dfc:	2201      	movs	r2, #1
 8021dfe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8021e00:	f7ff ff7e 	bl	8021d00 <BSP_SD_GetCardState>
 8021e04:	4603      	mov	r3, r0
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d107      	bne.n	8021e1a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8021e0a:	4b07      	ldr	r3, [pc, #28]	; (8021e28 <SD_CheckStatus+0x38>)
 8021e0c:	781b      	ldrb	r3, [r3, #0]
 8021e0e:	b2db      	uxtb	r3, r3
 8021e10:	f023 0301 	bic.w	r3, r3, #1
 8021e14:	b2da      	uxtb	r2, r3
 8021e16:	4b04      	ldr	r3, [pc, #16]	; (8021e28 <SD_CheckStatus+0x38>)
 8021e18:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8021e1a:	4b03      	ldr	r3, [pc, #12]	; (8021e28 <SD_CheckStatus+0x38>)
 8021e1c:	781b      	ldrb	r3, [r3, #0]
 8021e1e:	b2db      	uxtb	r3, r3
}
 8021e20:	4618      	mov	r0, r3
 8021e22:	3708      	adds	r7, #8
 8021e24:	46bd      	mov	sp, r7
 8021e26:	bd80      	pop	{r7, pc}
 8021e28:	240006a5 	.word	0x240006a5

08021e2c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8021e2c:	b580      	push	{r7, lr}
 8021e2e:	b082      	sub	sp, #8
 8021e30:	af00      	add	r7, sp, #0
 8021e32:	4603      	mov	r3, r0
 8021e34:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8021e36:	4b1c      	ldr	r3, [pc, #112]	; (8021ea8 <SD_initialize+0x7c>)
 8021e38:	2201      	movs	r2, #1
 8021e3a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8021e3c:	f002 fc38 	bl	80246b0 <osKernelGetState>
 8021e40:	4603      	mov	r3, r0
 8021e42:	2b02      	cmp	r3, #2
 8021e44:	d129      	bne.n	8021e9a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8021e46:	f7ff ff01 	bl	8021c4c <BSP_SD_Init>
 8021e4a:	4603      	mov	r3, r0
 8021e4c:	2b00      	cmp	r3, #0
 8021e4e:	d107      	bne.n	8021e60 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8021e50:	79fb      	ldrb	r3, [r7, #7]
 8021e52:	4618      	mov	r0, r3
 8021e54:	f7ff ffcc 	bl	8021df0 <SD_CheckStatus>
 8021e58:	4603      	mov	r3, r0
 8021e5a:	461a      	mov	r2, r3
 8021e5c:	4b12      	ldr	r3, [pc, #72]	; (8021ea8 <SD_initialize+0x7c>)
 8021e5e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8021e60:	4b11      	ldr	r3, [pc, #68]	; (8021ea8 <SD_initialize+0x7c>)
 8021e62:	781b      	ldrb	r3, [r3, #0]
 8021e64:	b2db      	uxtb	r3, r3
 8021e66:	2b01      	cmp	r3, #1
 8021e68:	d017      	beq.n	8021e9a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8021e6a:	4b10      	ldr	r3, [pc, #64]	; (8021eac <SD_initialize+0x80>)
 8021e6c:	681b      	ldr	r3, [r3, #0]
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d107      	bne.n	8021e82 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8021e72:	2200      	movs	r2, #0
 8021e74:	2102      	movs	r1, #2
 8021e76:	200a      	movs	r0, #10
 8021e78:	f003 f8f2 	bl	8025060 <osMessageQueueNew>
 8021e7c:	4602      	mov	r2, r0
 8021e7e:	4b0b      	ldr	r3, [pc, #44]	; (8021eac <SD_initialize+0x80>)
 8021e80:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 8021e82:	4b0a      	ldr	r3, [pc, #40]	; (8021eac <SD_initialize+0x80>)
 8021e84:	681b      	ldr	r3, [r3, #0]
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	d107      	bne.n	8021e9a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8021e8a:	4b07      	ldr	r3, [pc, #28]	; (8021ea8 <SD_initialize+0x7c>)
 8021e8c:	781b      	ldrb	r3, [r3, #0]
 8021e8e:	b2db      	uxtb	r3, r3
 8021e90:	f043 0301 	orr.w	r3, r3, #1
 8021e94:	b2da      	uxtb	r2, r3
 8021e96:	4b04      	ldr	r3, [pc, #16]	; (8021ea8 <SD_initialize+0x7c>)
 8021e98:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8021e9a:	4b03      	ldr	r3, [pc, #12]	; (8021ea8 <SD_initialize+0x7c>)
 8021e9c:	781b      	ldrb	r3, [r3, #0]
 8021e9e:	b2db      	uxtb	r3, r3
}
 8021ea0:	4618      	mov	r0, r3
 8021ea2:	3708      	adds	r7, #8
 8021ea4:	46bd      	mov	sp, r7
 8021ea6:	bd80      	pop	{r7, pc}
 8021ea8:	240006a5 	.word	0x240006a5
 8021eac:	240013f4 	.word	0x240013f4

08021eb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b082      	sub	sp, #8
 8021eb4:	af00      	add	r7, sp, #0
 8021eb6:	4603      	mov	r3, r0
 8021eb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8021eba:	79fb      	ldrb	r3, [r7, #7]
 8021ebc:	4618      	mov	r0, r3
 8021ebe:	f7ff ff97 	bl	8021df0 <SD_CheckStatus>
 8021ec2:	4603      	mov	r3, r0
}
 8021ec4:	4618      	mov	r0, r3
 8021ec6:	3708      	adds	r7, #8
 8021ec8:	46bd      	mov	sp, r7
 8021eca:	bd80      	pop	{r7, pc}

08021ecc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8021ecc:	b580      	push	{r7, lr}
 8021ece:	b088      	sub	sp, #32
 8021ed0:	af00      	add	r7, sp, #0
 8021ed2:	60b9      	str	r1, [r7, #8]
 8021ed4:	607a      	str	r2, [r7, #4]
 8021ed6:	603b      	str	r3, [r7, #0]
 8021ed8:	4603      	mov	r3, r0
 8021eda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8021edc:	2301      	movs	r3, #1
 8021ede:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8021ee0:	f247 5030 	movw	r0, #30000	; 0x7530
 8021ee4:	f7ff ff66 	bl	8021db4 <SD_CheckStatusWithTimeout>
 8021ee8:	4603      	mov	r3, r0
 8021eea:	2b00      	cmp	r3, #0
 8021eec:	da01      	bge.n	8021ef2 <SD_read+0x26>
  {
    return res;
 8021eee:	7ffb      	ldrb	r3, [r7, #31]
 8021ef0:	e02f      	b.n	8021f52 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8021ef2:	683a      	ldr	r2, [r7, #0]
 8021ef4:	6879      	ldr	r1, [r7, #4]
 8021ef6:	68b8      	ldr	r0, [r7, #8]
 8021ef8:	f7ff fece 	bl	8021c98 <BSP_SD_ReadBlocks_DMA>
 8021efc:	4603      	mov	r3, r0
 8021efe:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8021f00:	7fbb      	ldrb	r3, [r7, #30]
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	d124      	bne.n	8021f50 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8021f06:	4b15      	ldr	r3, [pc, #84]	; (8021f5c <SD_read+0x90>)
 8021f08:	6818      	ldr	r0, [r3, #0]
 8021f0a:	f107 0112 	add.w	r1, r7, #18
 8021f0e:	f247 5330 	movw	r3, #30000	; 0x7530
 8021f12:	2200      	movs	r2, #0
 8021f14:	f003 f99e 	bl	8025254 <osMessageQueueGet>
 8021f18:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8021f1a:	69bb      	ldr	r3, [r7, #24]
 8021f1c:	2b00      	cmp	r3, #0
 8021f1e:	d117      	bne.n	8021f50 <SD_read+0x84>
 8021f20:	8a7b      	ldrh	r3, [r7, #18]
 8021f22:	2b01      	cmp	r3, #1
 8021f24:	d114      	bne.n	8021f50 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8021f26:	f002 fc53 	bl	80247d0 <osKernelGetTickCount>
 8021f2a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8021f2c:	e007      	b.n	8021f3e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8021f2e:	f7ff fee7 	bl	8021d00 <BSP_SD_GetCardState>
 8021f32:	4603      	mov	r3, r0
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	d102      	bne.n	8021f3e <SD_read+0x72>
              {
                res = RES_OK;
 8021f38:	2300      	movs	r3, #0
 8021f3a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8021f3c:	e008      	b.n	8021f50 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8021f3e:	f002 fc47 	bl	80247d0 <osKernelGetTickCount>
 8021f42:	4602      	mov	r2, r0
 8021f44:	697b      	ldr	r3, [r7, #20]
 8021f46:	1ad3      	subs	r3, r2, r3
 8021f48:	f247 522f 	movw	r2, #29999	; 0x752f
 8021f4c:	4293      	cmp	r3, r2
 8021f4e:	d9ee      	bls.n	8021f2e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8021f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8021f52:	4618      	mov	r0, r3
 8021f54:	3720      	adds	r7, #32
 8021f56:	46bd      	mov	sp, r7
 8021f58:	bd80      	pop	{r7, pc}
 8021f5a:	bf00      	nop
 8021f5c:	240013f4 	.word	0x240013f4

08021f60 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8021f60:	b580      	push	{r7, lr}
 8021f62:	b088      	sub	sp, #32
 8021f64:	af00      	add	r7, sp, #0
 8021f66:	60b9      	str	r1, [r7, #8]
 8021f68:	607a      	str	r2, [r7, #4]
 8021f6a:	603b      	str	r3, [r7, #0]
 8021f6c:	4603      	mov	r3, r0
 8021f6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8021f70:	2301      	movs	r3, #1
 8021f72:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8021f74:	f247 5030 	movw	r0, #30000	; 0x7530
 8021f78:	f7ff ff1c 	bl	8021db4 <SD_CheckStatusWithTimeout>
 8021f7c:	4603      	mov	r3, r0
 8021f7e:	2b00      	cmp	r3, #0
 8021f80:	da01      	bge.n	8021f86 <SD_write+0x26>
  {
    return res;
 8021f82:	7ffb      	ldrb	r3, [r7, #31]
 8021f84:	e02d      	b.n	8021fe2 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8021f86:	683a      	ldr	r2, [r7, #0]
 8021f88:	6879      	ldr	r1, [r7, #4]
 8021f8a:	68b8      	ldr	r0, [r7, #8]
 8021f8c:	f7ff fe9e 	bl	8021ccc <BSP_SD_WriteBlocks_DMA>
 8021f90:	4603      	mov	r3, r0
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	d124      	bne.n	8021fe0 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8021f96:	4b15      	ldr	r3, [pc, #84]	; (8021fec <SD_write+0x8c>)
 8021f98:	6818      	ldr	r0, [r3, #0]
 8021f9a:	f107 0112 	add.w	r1, r7, #18
 8021f9e:	f247 5330 	movw	r3, #30000	; 0x7530
 8021fa2:	2200      	movs	r2, #0
 8021fa4:	f003 f956 	bl	8025254 <osMessageQueueGet>
 8021fa8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8021faa:	69bb      	ldr	r3, [r7, #24]
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d117      	bne.n	8021fe0 <SD_write+0x80>
 8021fb0:	8a7b      	ldrh	r3, [r7, #18]
 8021fb2:	2b02      	cmp	r3, #2
 8021fb4:	d114      	bne.n	8021fe0 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8021fb6:	f002 fc0b 	bl	80247d0 <osKernelGetTickCount>
 8021fba:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8021fbc:	e007      	b.n	8021fce <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8021fbe:	f7ff fe9f 	bl	8021d00 <BSP_SD_GetCardState>
 8021fc2:	4603      	mov	r3, r0
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d102      	bne.n	8021fce <SD_write+0x6e>
          {
            res = RES_OK;
 8021fc8:	2300      	movs	r3, #0
 8021fca:	77fb      	strb	r3, [r7, #31]
            break;
 8021fcc:	e008      	b.n	8021fe0 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8021fce:	f002 fbff 	bl	80247d0 <osKernelGetTickCount>
 8021fd2:	4602      	mov	r2, r0
 8021fd4:	697b      	ldr	r3, [r7, #20]
 8021fd6:	1ad3      	subs	r3, r2, r3
 8021fd8:	f247 522f 	movw	r2, #29999	; 0x752f
 8021fdc:	4293      	cmp	r3, r2
 8021fde:	d9ee      	bls.n	8021fbe <SD_write+0x5e>
    }

  }
#endif

  return res;
 8021fe0:	7ffb      	ldrb	r3, [r7, #31]
}
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	3720      	adds	r7, #32
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}
 8021fea:	bf00      	nop
 8021fec:	240013f4 	.word	0x240013f4

08021ff0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8021ff0:	b580      	push	{r7, lr}
 8021ff2:	b08c      	sub	sp, #48	; 0x30
 8021ff4:	af00      	add	r7, sp, #0
 8021ff6:	4603      	mov	r3, r0
 8021ff8:	603a      	str	r2, [r7, #0]
 8021ffa:	71fb      	strb	r3, [r7, #7]
 8021ffc:	460b      	mov	r3, r1
 8021ffe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8022000:	2301      	movs	r3, #1
 8022002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8022006:	4b25      	ldr	r3, [pc, #148]	; (802209c <SD_ioctl+0xac>)
 8022008:	781b      	ldrb	r3, [r3, #0]
 802200a:	b2db      	uxtb	r3, r3
 802200c:	f003 0301 	and.w	r3, r3, #1
 8022010:	2b00      	cmp	r3, #0
 8022012:	d001      	beq.n	8022018 <SD_ioctl+0x28>
 8022014:	2303      	movs	r3, #3
 8022016:	e03c      	b.n	8022092 <SD_ioctl+0xa2>

  switch (cmd)
 8022018:	79bb      	ldrb	r3, [r7, #6]
 802201a:	2b03      	cmp	r3, #3
 802201c:	d834      	bhi.n	8022088 <SD_ioctl+0x98>
 802201e:	a201      	add	r2, pc, #4	; (adr r2, 8022024 <SD_ioctl+0x34>)
 8022020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022024:	08022035 	.word	0x08022035
 8022028:	0802203d 	.word	0x0802203d
 802202c:	08022055 	.word	0x08022055
 8022030:	0802206f 	.word	0x0802206f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8022034:	2300      	movs	r3, #0
 8022036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802203a:	e028      	b.n	802208e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 802203c:	f107 0308 	add.w	r3, r7, #8
 8022040:	4618      	mov	r0, r3
 8022042:	f7ff fe6d 	bl	8021d20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8022046:	6a3a      	ldr	r2, [r7, #32]
 8022048:	683b      	ldr	r3, [r7, #0]
 802204a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 802204c:	2300      	movs	r3, #0
 802204e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8022052:	e01c      	b.n	802208e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8022054:	f107 0308 	add.w	r3, r7, #8
 8022058:	4618      	mov	r0, r3
 802205a:	f7ff fe61 	bl	8021d20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 802205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022060:	b29a      	uxth	r2, r3
 8022062:	683b      	ldr	r3, [r7, #0]
 8022064:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8022066:	2300      	movs	r3, #0
 8022068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802206c:	e00f      	b.n	802208e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802206e:	f107 0308 	add.w	r3, r7, #8
 8022072:	4618      	mov	r0, r3
 8022074:	f7ff fe54 	bl	8021d20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8022078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802207a:	0a5a      	lsrs	r2, r3, #9
 802207c:	683b      	ldr	r3, [r7, #0]
 802207e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8022080:	2300      	movs	r3, #0
 8022082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8022086:	e002      	b.n	802208e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8022088:	2304      	movs	r3, #4
 802208a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 802208e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8022092:	4618      	mov	r0, r3
 8022094:	3730      	adds	r7, #48	; 0x30
 8022096:	46bd      	mov	sp, r7
 8022098:	bd80      	pop	{r7, pc}
 802209a:	bf00      	nop
 802209c:	240006a5 	.word	0x240006a5

080220a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80220a0:	b580      	push	{r7, lr}
 80220a2:	b082      	sub	sp, #8
 80220a4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80220a6:	2302      	movs	r3, #2
 80220a8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80220aa:	4b05      	ldr	r3, [pc, #20]	; (80220c0 <BSP_SD_WriteCpltCallback+0x20>)
 80220ac:	6818      	ldr	r0, [r3, #0]
 80220ae:	1db9      	adds	r1, r7, #6
 80220b0:	2300      	movs	r3, #0
 80220b2:	2200      	movs	r2, #0
 80220b4:	f003 f85a 	bl	802516c <osMessageQueuePut>
#endif
}
 80220b8:	bf00      	nop
 80220ba:	3708      	adds	r7, #8
 80220bc:	46bd      	mov	sp, r7
 80220be:	bd80      	pop	{r7, pc}
 80220c0:	240013f4 	.word	0x240013f4

080220c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80220c4:	b580      	push	{r7, lr}
 80220c6:	b082      	sub	sp, #8
 80220c8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80220ca:	2301      	movs	r3, #1
 80220cc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80220ce:	4b05      	ldr	r3, [pc, #20]	; (80220e4 <BSP_SD_ReadCpltCallback+0x20>)
 80220d0:	6818      	ldr	r0, [r3, #0]
 80220d2:	1db9      	adds	r1, r7, #6
 80220d4:	2300      	movs	r3, #0
 80220d6:	2200      	movs	r2, #0
 80220d8:	f003 f848 	bl	802516c <osMessageQueuePut>
#endif
}
 80220dc:	bf00      	nop
 80220de:	3708      	adds	r7, #8
 80220e0:	46bd      	mov	sp, r7
 80220e2:	bd80      	pop	{r7, pc}
 80220e4:	240013f4 	.word	0x240013f4

080220e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80220e8:	b580      	push	{r7, lr}
 80220ea:	b084      	sub	sp, #16
 80220ec:	af00      	add	r7, sp, #0
 80220ee:	4603      	mov	r3, r0
 80220f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80220f2:	79fb      	ldrb	r3, [r7, #7]
 80220f4:	4a08      	ldr	r2, [pc, #32]	; (8022118 <disk_status+0x30>)
 80220f6:	009b      	lsls	r3, r3, #2
 80220f8:	4413      	add	r3, r2
 80220fa:	685b      	ldr	r3, [r3, #4]
 80220fc:	685b      	ldr	r3, [r3, #4]
 80220fe:	79fa      	ldrb	r2, [r7, #7]
 8022100:	4905      	ldr	r1, [pc, #20]	; (8022118 <disk_status+0x30>)
 8022102:	440a      	add	r2, r1
 8022104:	7a12      	ldrb	r2, [r2, #8]
 8022106:	4610      	mov	r0, r2
 8022108:	4798      	blx	r3
 802210a:	4603      	mov	r3, r0
 802210c:	73fb      	strb	r3, [r7, #15]
  return stat;
 802210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022110:	4618      	mov	r0, r3
 8022112:	3710      	adds	r7, #16
 8022114:	46bd      	mov	sp, r7
 8022116:	bd80      	pop	{r7, pc}
 8022118:	24001420 	.word	0x24001420

0802211c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 802211c:	b580      	push	{r7, lr}
 802211e:	b084      	sub	sp, #16
 8022120:	af00      	add	r7, sp, #0
 8022122:	4603      	mov	r3, r0
 8022124:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8022126:	2300      	movs	r3, #0
 8022128:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 802212a:	79fb      	ldrb	r3, [r7, #7]
 802212c:	4a0d      	ldr	r2, [pc, #52]	; (8022164 <disk_initialize+0x48>)
 802212e:	5cd3      	ldrb	r3, [r2, r3]
 8022130:	2b00      	cmp	r3, #0
 8022132:	d111      	bne.n	8022158 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8022134:	79fb      	ldrb	r3, [r7, #7]
 8022136:	4a0b      	ldr	r2, [pc, #44]	; (8022164 <disk_initialize+0x48>)
 8022138:	2101      	movs	r1, #1
 802213a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 802213c:	79fb      	ldrb	r3, [r7, #7]
 802213e:	4a09      	ldr	r2, [pc, #36]	; (8022164 <disk_initialize+0x48>)
 8022140:	009b      	lsls	r3, r3, #2
 8022142:	4413      	add	r3, r2
 8022144:	685b      	ldr	r3, [r3, #4]
 8022146:	681b      	ldr	r3, [r3, #0]
 8022148:	79fa      	ldrb	r2, [r7, #7]
 802214a:	4906      	ldr	r1, [pc, #24]	; (8022164 <disk_initialize+0x48>)
 802214c:	440a      	add	r2, r1
 802214e:	7a12      	ldrb	r2, [r2, #8]
 8022150:	4610      	mov	r0, r2
 8022152:	4798      	blx	r3
 8022154:	4603      	mov	r3, r0
 8022156:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8022158:	7bfb      	ldrb	r3, [r7, #15]
}
 802215a:	4618      	mov	r0, r3
 802215c:	3710      	adds	r7, #16
 802215e:	46bd      	mov	sp, r7
 8022160:	bd80      	pop	{r7, pc}
 8022162:	bf00      	nop
 8022164:	24001420 	.word	0x24001420

08022168 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8022168:	b590      	push	{r4, r7, lr}
 802216a:	b087      	sub	sp, #28
 802216c:	af00      	add	r7, sp, #0
 802216e:	60b9      	str	r1, [r7, #8]
 8022170:	607a      	str	r2, [r7, #4]
 8022172:	603b      	str	r3, [r7, #0]
 8022174:	4603      	mov	r3, r0
 8022176:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8022178:	7bfb      	ldrb	r3, [r7, #15]
 802217a:	4a0a      	ldr	r2, [pc, #40]	; (80221a4 <disk_read+0x3c>)
 802217c:	009b      	lsls	r3, r3, #2
 802217e:	4413      	add	r3, r2
 8022180:	685b      	ldr	r3, [r3, #4]
 8022182:	689c      	ldr	r4, [r3, #8]
 8022184:	7bfb      	ldrb	r3, [r7, #15]
 8022186:	4a07      	ldr	r2, [pc, #28]	; (80221a4 <disk_read+0x3c>)
 8022188:	4413      	add	r3, r2
 802218a:	7a18      	ldrb	r0, [r3, #8]
 802218c:	683b      	ldr	r3, [r7, #0]
 802218e:	687a      	ldr	r2, [r7, #4]
 8022190:	68b9      	ldr	r1, [r7, #8]
 8022192:	47a0      	blx	r4
 8022194:	4603      	mov	r3, r0
 8022196:	75fb      	strb	r3, [r7, #23]
  return res;
 8022198:	7dfb      	ldrb	r3, [r7, #23]
}
 802219a:	4618      	mov	r0, r3
 802219c:	371c      	adds	r7, #28
 802219e:	46bd      	mov	sp, r7
 80221a0:	bd90      	pop	{r4, r7, pc}
 80221a2:	bf00      	nop
 80221a4:	24001420 	.word	0x24001420

080221a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80221a8:	b590      	push	{r4, r7, lr}
 80221aa:	b087      	sub	sp, #28
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	60b9      	str	r1, [r7, #8]
 80221b0:	607a      	str	r2, [r7, #4]
 80221b2:	603b      	str	r3, [r7, #0]
 80221b4:	4603      	mov	r3, r0
 80221b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80221b8:	7bfb      	ldrb	r3, [r7, #15]
 80221ba:	4a0a      	ldr	r2, [pc, #40]	; (80221e4 <disk_write+0x3c>)
 80221bc:	009b      	lsls	r3, r3, #2
 80221be:	4413      	add	r3, r2
 80221c0:	685b      	ldr	r3, [r3, #4]
 80221c2:	68dc      	ldr	r4, [r3, #12]
 80221c4:	7bfb      	ldrb	r3, [r7, #15]
 80221c6:	4a07      	ldr	r2, [pc, #28]	; (80221e4 <disk_write+0x3c>)
 80221c8:	4413      	add	r3, r2
 80221ca:	7a18      	ldrb	r0, [r3, #8]
 80221cc:	683b      	ldr	r3, [r7, #0]
 80221ce:	687a      	ldr	r2, [r7, #4]
 80221d0:	68b9      	ldr	r1, [r7, #8]
 80221d2:	47a0      	blx	r4
 80221d4:	4603      	mov	r3, r0
 80221d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80221d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80221da:	4618      	mov	r0, r3
 80221dc:	371c      	adds	r7, #28
 80221de:	46bd      	mov	sp, r7
 80221e0:	bd90      	pop	{r4, r7, pc}
 80221e2:	bf00      	nop
 80221e4:	24001420 	.word	0x24001420

080221e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80221e8:	b580      	push	{r7, lr}
 80221ea:	b084      	sub	sp, #16
 80221ec:	af00      	add	r7, sp, #0
 80221ee:	4603      	mov	r3, r0
 80221f0:	603a      	str	r2, [r7, #0]
 80221f2:	71fb      	strb	r3, [r7, #7]
 80221f4:	460b      	mov	r3, r1
 80221f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80221f8:	79fb      	ldrb	r3, [r7, #7]
 80221fa:	4a09      	ldr	r2, [pc, #36]	; (8022220 <disk_ioctl+0x38>)
 80221fc:	009b      	lsls	r3, r3, #2
 80221fe:	4413      	add	r3, r2
 8022200:	685b      	ldr	r3, [r3, #4]
 8022202:	691b      	ldr	r3, [r3, #16]
 8022204:	79fa      	ldrb	r2, [r7, #7]
 8022206:	4906      	ldr	r1, [pc, #24]	; (8022220 <disk_ioctl+0x38>)
 8022208:	440a      	add	r2, r1
 802220a:	7a10      	ldrb	r0, [r2, #8]
 802220c:	79b9      	ldrb	r1, [r7, #6]
 802220e:	683a      	ldr	r2, [r7, #0]
 8022210:	4798      	blx	r3
 8022212:	4603      	mov	r3, r0
 8022214:	73fb      	strb	r3, [r7, #15]
  return res;
 8022216:	7bfb      	ldrb	r3, [r7, #15]
}
 8022218:	4618      	mov	r0, r3
 802221a:	3710      	adds	r7, #16
 802221c:	46bd      	mov	sp, r7
 802221e:	bd80      	pop	{r7, pc}
 8022220:	24001420 	.word	0x24001420

08022224 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8022224:	b480      	push	{r7}
 8022226:	b085      	sub	sp, #20
 8022228:	af00      	add	r7, sp, #0
 802222a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 802222c:	687b      	ldr	r3, [r7, #4]
 802222e:	3301      	adds	r3, #1
 8022230:	781b      	ldrb	r3, [r3, #0]
 8022232:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8022234:	89fb      	ldrh	r3, [r7, #14]
 8022236:	021b      	lsls	r3, r3, #8
 8022238:	b21a      	sxth	r2, r3
 802223a:	687b      	ldr	r3, [r7, #4]
 802223c:	781b      	ldrb	r3, [r3, #0]
 802223e:	b21b      	sxth	r3, r3
 8022240:	4313      	orrs	r3, r2
 8022242:	b21b      	sxth	r3, r3
 8022244:	81fb      	strh	r3, [r7, #14]
	return rv;
 8022246:	89fb      	ldrh	r3, [r7, #14]
}
 8022248:	4618      	mov	r0, r3
 802224a:	3714      	adds	r7, #20
 802224c:	46bd      	mov	sp, r7
 802224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022252:	4770      	bx	lr

08022254 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8022254:	b480      	push	{r7}
 8022256:	b085      	sub	sp, #20
 8022258:	af00      	add	r7, sp, #0
 802225a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 802225c:	687b      	ldr	r3, [r7, #4]
 802225e:	3303      	adds	r3, #3
 8022260:	781b      	ldrb	r3, [r3, #0]
 8022262:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8022264:	68fb      	ldr	r3, [r7, #12]
 8022266:	021b      	lsls	r3, r3, #8
 8022268:	687a      	ldr	r2, [r7, #4]
 802226a:	3202      	adds	r2, #2
 802226c:	7812      	ldrb	r2, [r2, #0]
 802226e:	4313      	orrs	r3, r2
 8022270:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8022272:	68fb      	ldr	r3, [r7, #12]
 8022274:	021b      	lsls	r3, r3, #8
 8022276:	687a      	ldr	r2, [r7, #4]
 8022278:	3201      	adds	r2, #1
 802227a:	7812      	ldrb	r2, [r2, #0]
 802227c:	4313      	orrs	r3, r2
 802227e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8022280:	68fb      	ldr	r3, [r7, #12]
 8022282:	021b      	lsls	r3, r3, #8
 8022284:	687a      	ldr	r2, [r7, #4]
 8022286:	7812      	ldrb	r2, [r2, #0]
 8022288:	4313      	orrs	r3, r2
 802228a:	60fb      	str	r3, [r7, #12]
	return rv;
 802228c:	68fb      	ldr	r3, [r7, #12]
}
 802228e:	4618      	mov	r0, r3
 8022290:	3714      	adds	r7, #20
 8022292:	46bd      	mov	sp, r7
 8022294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022298:	4770      	bx	lr

0802229a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 802229a:	b480      	push	{r7}
 802229c:	b083      	sub	sp, #12
 802229e:	af00      	add	r7, sp, #0
 80222a0:	6078      	str	r0, [r7, #4]
 80222a2:	460b      	mov	r3, r1
 80222a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80222a6:	687b      	ldr	r3, [r7, #4]
 80222a8:	1c5a      	adds	r2, r3, #1
 80222aa:	607a      	str	r2, [r7, #4]
 80222ac:	887a      	ldrh	r2, [r7, #2]
 80222ae:	b2d2      	uxtb	r2, r2
 80222b0:	701a      	strb	r2, [r3, #0]
 80222b2:	887b      	ldrh	r3, [r7, #2]
 80222b4:	0a1b      	lsrs	r3, r3, #8
 80222b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	1c5a      	adds	r2, r3, #1
 80222bc:	607a      	str	r2, [r7, #4]
 80222be:	887a      	ldrh	r2, [r7, #2]
 80222c0:	b2d2      	uxtb	r2, r2
 80222c2:	701a      	strb	r2, [r3, #0]
}
 80222c4:	bf00      	nop
 80222c6:	370c      	adds	r7, #12
 80222c8:	46bd      	mov	sp, r7
 80222ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222ce:	4770      	bx	lr

080222d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80222d0:	b480      	push	{r7}
 80222d2:	b083      	sub	sp, #12
 80222d4:	af00      	add	r7, sp, #0
 80222d6:	6078      	str	r0, [r7, #4]
 80222d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80222da:	687b      	ldr	r3, [r7, #4]
 80222dc:	1c5a      	adds	r2, r3, #1
 80222de:	607a      	str	r2, [r7, #4]
 80222e0:	683a      	ldr	r2, [r7, #0]
 80222e2:	b2d2      	uxtb	r2, r2
 80222e4:	701a      	strb	r2, [r3, #0]
 80222e6:	683b      	ldr	r3, [r7, #0]
 80222e8:	0a1b      	lsrs	r3, r3, #8
 80222ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80222ec:	687b      	ldr	r3, [r7, #4]
 80222ee:	1c5a      	adds	r2, r3, #1
 80222f0:	607a      	str	r2, [r7, #4]
 80222f2:	683a      	ldr	r2, [r7, #0]
 80222f4:	b2d2      	uxtb	r2, r2
 80222f6:	701a      	strb	r2, [r3, #0]
 80222f8:	683b      	ldr	r3, [r7, #0]
 80222fa:	0a1b      	lsrs	r3, r3, #8
 80222fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80222fe:	687b      	ldr	r3, [r7, #4]
 8022300:	1c5a      	adds	r2, r3, #1
 8022302:	607a      	str	r2, [r7, #4]
 8022304:	683a      	ldr	r2, [r7, #0]
 8022306:	b2d2      	uxtb	r2, r2
 8022308:	701a      	strb	r2, [r3, #0]
 802230a:	683b      	ldr	r3, [r7, #0]
 802230c:	0a1b      	lsrs	r3, r3, #8
 802230e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8022310:	687b      	ldr	r3, [r7, #4]
 8022312:	1c5a      	adds	r2, r3, #1
 8022314:	607a      	str	r2, [r7, #4]
 8022316:	683a      	ldr	r2, [r7, #0]
 8022318:	b2d2      	uxtb	r2, r2
 802231a:	701a      	strb	r2, [r3, #0]
}
 802231c:	bf00      	nop
 802231e:	370c      	adds	r7, #12
 8022320:	46bd      	mov	sp, r7
 8022322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022326:	4770      	bx	lr

08022328 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8022328:	b480      	push	{r7}
 802232a:	b087      	sub	sp, #28
 802232c:	af00      	add	r7, sp, #0
 802232e:	60f8      	str	r0, [r7, #12]
 8022330:	60b9      	str	r1, [r7, #8]
 8022332:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8022334:	68fb      	ldr	r3, [r7, #12]
 8022336:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8022338:	68bb      	ldr	r3, [r7, #8]
 802233a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	2b00      	cmp	r3, #0
 8022340:	d00d      	beq.n	802235e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8022342:	693a      	ldr	r2, [r7, #16]
 8022344:	1c53      	adds	r3, r2, #1
 8022346:	613b      	str	r3, [r7, #16]
 8022348:	697b      	ldr	r3, [r7, #20]
 802234a:	1c59      	adds	r1, r3, #1
 802234c:	6179      	str	r1, [r7, #20]
 802234e:	7812      	ldrb	r2, [r2, #0]
 8022350:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	3b01      	subs	r3, #1
 8022356:	607b      	str	r3, [r7, #4]
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	2b00      	cmp	r3, #0
 802235c:	d1f1      	bne.n	8022342 <mem_cpy+0x1a>
	}
}
 802235e:	bf00      	nop
 8022360:	371c      	adds	r7, #28
 8022362:	46bd      	mov	sp, r7
 8022364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022368:	4770      	bx	lr

0802236a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 802236a:	b480      	push	{r7}
 802236c:	b087      	sub	sp, #28
 802236e:	af00      	add	r7, sp, #0
 8022370:	60f8      	str	r0, [r7, #12]
 8022372:	60b9      	str	r1, [r7, #8]
 8022374:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8022376:	68fb      	ldr	r3, [r7, #12]
 8022378:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 802237a:	697b      	ldr	r3, [r7, #20]
 802237c:	1c5a      	adds	r2, r3, #1
 802237e:	617a      	str	r2, [r7, #20]
 8022380:	68ba      	ldr	r2, [r7, #8]
 8022382:	b2d2      	uxtb	r2, r2
 8022384:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8022386:	687b      	ldr	r3, [r7, #4]
 8022388:	3b01      	subs	r3, #1
 802238a:	607b      	str	r3, [r7, #4]
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	2b00      	cmp	r3, #0
 8022390:	d1f3      	bne.n	802237a <mem_set+0x10>
}
 8022392:	bf00      	nop
 8022394:	371c      	adds	r7, #28
 8022396:	46bd      	mov	sp, r7
 8022398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802239c:	4770      	bx	lr

0802239e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 802239e:	b480      	push	{r7}
 80223a0:	b089      	sub	sp, #36	; 0x24
 80223a2:	af00      	add	r7, sp, #0
 80223a4:	60f8      	str	r0, [r7, #12]
 80223a6:	60b9      	str	r1, [r7, #8]
 80223a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80223aa:	68fb      	ldr	r3, [r7, #12]
 80223ac:	61fb      	str	r3, [r7, #28]
 80223ae:	68bb      	ldr	r3, [r7, #8]
 80223b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80223b2:	2300      	movs	r3, #0
 80223b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80223b6:	69fb      	ldr	r3, [r7, #28]
 80223b8:	1c5a      	adds	r2, r3, #1
 80223ba:	61fa      	str	r2, [r7, #28]
 80223bc:	781b      	ldrb	r3, [r3, #0]
 80223be:	4619      	mov	r1, r3
 80223c0:	69bb      	ldr	r3, [r7, #24]
 80223c2:	1c5a      	adds	r2, r3, #1
 80223c4:	61ba      	str	r2, [r7, #24]
 80223c6:	781b      	ldrb	r3, [r3, #0]
 80223c8:	1acb      	subs	r3, r1, r3
 80223ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80223cc:	687b      	ldr	r3, [r7, #4]
 80223ce:	3b01      	subs	r3, #1
 80223d0:	607b      	str	r3, [r7, #4]
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	2b00      	cmp	r3, #0
 80223d6:	d002      	beq.n	80223de <mem_cmp+0x40>
 80223d8:	697b      	ldr	r3, [r7, #20]
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d0eb      	beq.n	80223b6 <mem_cmp+0x18>

	return r;
 80223de:	697b      	ldr	r3, [r7, #20]
}
 80223e0:	4618      	mov	r0, r3
 80223e2:	3724      	adds	r7, #36	; 0x24
 80223e4:	46bd      	mov	sp, r7
 80223e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223ea:	4770      	bx	lr

080223ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80223ec:	b480      	push	{r7}
 80223ee:	b083      	sub	sp, #12
 80223f0:	af00      	add	r7, sp, #0
 80223f2:	6078      	str	r0, [r7, #4]
 80223f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80223f6:	e002      	b.n	80223fe <chk_chr+0x12>
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	3301      	adds	r3, #1
 80223fc:	607b      	str	r3, [r7, #4]
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	781b      	ldrb	r3, [r3, #0]
 8022402:	2b00      	cmp	r3, #0
 8022404:	d005      	beq.n	8022412 <chk_chr+0x26>
 8022406:	687b      	ldr	r3, [r7, #4]
 8022408:	781b      	ldrb	r3, [r3, #0]
 802240a:	461a      	mov	r2, r3
 802240c:	683b      	ldr	r3, [r7, #0]
 802240e:	4293      	cmp	r3, r2
 8022410:	d1f2      	bne.n	80223f8 <chk_chr+0xc>
	return *str;
 8022412:	687b      	ldr	r3, [r7, #4]
 8022414:	781b      	ldrb	r3, [r3, #0]
}
 8022416:	4618      	mov	r0, r3
 8022418:	370c      	adds	r7, #12
 802241a:	46bd      	mov	sp, r7
 802241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022420:	4770      	bx	lr

08022422 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8022422:	b580      	push	{r7, lr}
 8022424:	b082      	sub	sp, #8
 8022426:	af00      	add	r7, sp, #0
 8022428:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 802242a:	687b      	ldr	r3, [r7, #4]
 802242c:	2b00      	cmp	r3, #0
 802242e:	d009      	beq.n	8022444 <lock_fs+0x22>
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	68db      	ldr	r3, [r3, #12]
 8022434:	4618      	mov	r0, r3
 8022436:	f002 f8df 	bl	80245f8 <ff_req_grant>
 802243a:	4603      	mov	r3, r0
 802243c:	2b00      	cmp	r3, #0
 802243e:	d001      	beq.n	8022444 <lock_fs+0x22>
 8022440:	2301      	movs	r3, #1
 8022442:	e000      	b.n	8022446 <lock_fs+0x24>
 8022444:	2300      	movs	r3, #0
}
 8022446:	4618      	mov	r0, r3
 8022448:	3708      	adds	r7, #8
 802244a:	46bd      	mov	sp, r7
 802244c:	bd80      	pop	{r7, pc}

0802244e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 802244e:	b580      	push	{r7, lr}
 8022450:	b082      	sub	sp, #8
 8022452:	af00      	add	r7, sp, #0
 8022454:	6078      	str	r0, [r7, #4]
 8022456:	460b      	mov	r3, r1
 8022458:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	2b00      	cmp	r3, #0
 802245e:	d00d      	beq.n	802247c <unlock_fs+0x2e>
 8022460:	78fb      	ldrb	r3, [r7, #3]
 8022462:	2b0c      	cmp	r3, #12
 8022464:	d00a      	beq.n	802247c <unlock_fs+0x2e>
 8022466:	78fb      	ldrb	r3, [r7, #3]
 8022468:	2b0b      	cmp	r3, #11
 802246a:	d007      	beq.n	802247c <unlock_fs+0x2e>
 802246c:	78fb      	ldrb	r3, [r7, #3]
 802246e:	2b0f      	cmp	r3, #15
 8022470:	d004      	beq.n	802247c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	68db      	ldr	r3, [r3, #12]
 8022476:	4618      	mov	r0, r3
 8022478:	f002 f8d3 	bl	8024622 <ff_rel_grant>
	}
}
 802247c:	bf00      	nop
 802247e:	3708      	adds	r7, #8
 8022480:	46bd      	mov	sp, r7
 8022482:	bd80      	pop	{r7, pc}

08022484 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8022484:	b480      	push	{r7}
 8022486:	b085      	sub	sp, #20
 8022488:	af00      	add	r7, sp, #0
 802248a:	6078      	str	r0, [r7, #4]
 802248c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 802248e:	2300      	movs	r3, #0
 8022490:	60bb      	str	r3, [r7, #8]
 8022492:	68bb      	ldr	r3, [r7, #8]
 8022494:	60fb      	str	r3, [r7, #12]
 8022496:	e029      	b.n	80224ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8022498:	4a27      	ldr	r2, [pc, #156]	; (8022538 <chk_lock+0xb4>)
 802249a:	68fb      	ldr	r3, [r7, #12]
 802249c:	011b      	lsls	r3, r3, #4
 802249e:	4413      	add	r3, r2
 80224a0:	681b      	ldr	r3, [r3, #0]
 80224a2:	2b00      	cmp	r3, #0
 80224a4:	d01d      	beq.n	80224e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80224a6:	4a24      	ldr	r2, [pc, #144]	; (8022538 <chk_lock+0xb4>)
 80224a8:	68fb      	ldr	r3, [r7, #12]
 80224aa:	011b      	lsls	r3, r3, #4
 80224ac:	4413      	add	r3, r2
 80224ae:	681a      	ldr	r2, [r3, #0]
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	681b      	ldr	r3, [r3, #0]
 80224b4:	429a      	cmp	r2, r3
 80224b6:	d116      	bne.n	80224e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80224b8:	4a1f      	ldr	r2, [pc, #124]	; (8022538 <chk_lock+0xb4>)
 80224ba:	68fb      	ldr	r3, [r7, #12]
 80224bc:	011b      	lsls	r3, r3, #4
 80224be:	4413      	add	r3, r2
 80224c0:	3304      	adds	r3, #4
 80224c2:	681a      	ldr	r2, [r3, #0]
 80224c4:	687b      	ldr	r3, [r7, #4]
 80224c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80224c8:	429a      	cmp	r2, r3
 80224ca:	d10c      	bne.n	80224e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80224cc:	4a1a      	ldr	r2, [pc, #104]	; (8022538 <chk_lock+0xb4>)
 80224ce:	68fb      	ldr	r3, [r7, #12]
 80224d0:	011b      	lsls	r3, r3, #4
 80224d2:	4413      	add	r3, r2
 80224d4:	3308      	adds	r3, #8
 80224d6:	681a      	ldr	r2, [r3, #0]
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80224dc:	429a      	cmp	r2, r3
 80224de:	d102      	bne.n	80224e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80224e0:	e007      	b.n	80224f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80224e2:	2301      	movs	r3, #1
 80224e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80224e6:	68fb      	ldr	r3, [r7, #12]
 80224e8:	3301      	adds	r3, #1
 80224ea:	60fb      	str	r3, [r7, #12]
 80224ec:	68fb      	ldr	r3, [r7, #12]
 80224ee:	2b01      	cmp	r3, #1
 80224f0:	d9d2      	bls.n	8022498 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80224f2:	68fb      	ldr	r3, [r7, #12]
 80224f4:	2b02      	cmp	r3, #2
 80224f6:	d109      	bne.n	802250c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80224f8:	68bb      	ldr	r3, [r7, #8]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d102      	bne.n	8022504 <chk_lock+0x80>
 80224fe:	683b      	ldr	r3, [r7, #0]
 8022500:	2b02      	cmp	r3, #2
 8022502:	d101      	bne.n	8022508 <chk_lock+0x84>
 8022504:	2300      	movs	r3, #0
 8022506:	e010      	b.n	802252a <chk_lock+0xa6>
 8022508:	2312      	movs	r3, #18
 802250a:	e00e      	b.n	802252a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 802250c:	683b      	ldr	r3, [r7, #0]
 802250e:	2b00      	cmp	r3, #0
 8022510:	d108      	bne.n	8022524 <chk_lock+0xa0>
 8022512:	4a09      	ldr	r2, [pc, #36]	; (8022538 <chk_lock+0xb4>)
 8022514:	68fb      	ldr	r3, [r7, #12]
 8022516:	011b      	lsls	r3, r3, #4
 8022518:	4413      	add	r3, r2
 802251a:	330c      	adds	r3, #12
 802251c:	881b      	ldrh	r3, [r3, #0]
 802251e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022522:	d101      	bne.n	8022528 <chk_lock+0xa4>
 8022524:	2310      	movs	r3, #16
 8022526:	e000      	b.n	802252a <chk_lock+0xa6>
 8022528:	2300      	movs	r3, #0
}
 802252a:	4618      	mov	r0, r3
 802252c:	3714      	adds	r7, #20
 802252e:	46bd      	mov	sp, r7
 8022530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022534:	4770      	bx	lr
 8022536:	bf00      	nop
 8022538:	24001400 	.word	0x24001400

0802253c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 802253c:	b480      	push	{r7}
 802253e:	b083      	sub	sp, #12
 8022540:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8022542:	2300      	movs	r3, #0
 8022544:	607b      	str	r3, [r7, #4]
 8022546:	e002      	b.n	802254e <enq_lock+0x12>
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	3301      	adds	r3, #1
 802254c:	607b      	str	r3, [r7, #4]
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	2b01      	cmp	r3, #1
 8022552:	d806      	bhi.n	8022562 <enq_lock+0x26>
 8022554:	4a09      	ldr	r2, [pc, #36]	; (802257c <enq_lock+0x40>)
 8022556:	687b      	ldr	r3, [r7, #4]
 8022558:	011b      	lsls	r3, r3, #4
 802255a:	4413      	add	r3, r2
 802255c:	681b      	ldr	r3, [r3, #0]
 802255e:	2b00      	cmp	r3, #0
 8022560:	d1f2      	bne.n	8022548 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	2b02      	cmp	r3, #2
 8022566:	bf14      	ite	ne
 8022568:	2301      	movne	r3, #1
 802256a:	2300      	moveq	r3, #0
 802256c:	b2db      	uxtb	r3, r3
}
 802256e:	4618      	mov	r0, r3
 8022570:	370c      	adds	r7, #12
 8022572:	46bd      	mov	sp, r7
 8022574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022578:	4770      	bx	lr
 802257a:	bf00      	nop
 802257c:	24001400 	.word	0x24001400

08022580 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8022580:	b480      	push	{r7}
 8022582:	b085      	sub	sp, #20
 8022584:	af00      	add	r7, sp, #0
 8022586:	6078      	str	r0, [r7, #4]
 8022588:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 802258a:	2300      	movs	r3, #0
 802258c:	60fb      	str	r3, [r7, #12]
 802258e:	e01f      	b.n	80225d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8022590:	4a41      	ldr	r2, [pc, #260]	; (8022698 <inc_lock+0x118>)
 8022592:	68fb      	ldr	r3, [r7, #12]
 8022594:	011b      	lsls	r3, r3, #4
 8022596:	4413      	add	r3, r2
 8022598:	681a      	ldr	r2, [r3, #0]
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	681b      	ldr	r3, [r3, #0]
 802259e:	429a      	cmp	r2, r3
 80225a0:	d113      	bne.n	80225ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80225a2:	4a3d      	ldr	r2, [pc, #244]	; (8022698 <inc_lock+0x118>)
 80225a4:	68fb      	ldr	r3, [r7, #12]
 80225a6:	011b      	lsls	r3, r3, #4
 80225a8:	4413      	add	r3, r2
 80225aa:	3304      	adds	r3, #4
 80225ac:	681a      	ldr	r2, [r3, #0]
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80225b2:	429a      	cmp	r2, r3
 80225b4:	d109      	bne.n	80225ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80225b6:	4a38      	ldr	r2, [pc, #224]	; (8022698 <inc_lock+0x118>)
 80225b8:	68fb      	ldr	r3, [r7, #12]
 80225ba:	011b      	lsls	r3, r3, #4
 80225bc:	4413      	add	r3, r2
 80225be:	3308      	adds	r3, #8
 80225c0:	681a      	ldr	r2, [r3, #0]
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80225c6:	429a      	cmp	r2, r3
 80225c8:	d006      	beq.n	80225d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80225ca:	68fb      	ldr	r3, [r7, #12]
 80225cc:	3301      	adds	r3, #1
 80225ce:	60fb      	str	r3, [r7, #12]
 80225d0:	68fb      	ldr	r3, [r7, #12]
 80225d2:	2b01      	cmp	r3, #1
 80225d4:	d9dc      	bls.n	8022590 <inc_lock+0x10>
 80225d6:	e000      	b.n	80225da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80225d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80225da:	68fb      	ldr	r3, [r7, #12]
 80225dc:	2b02      	cmp	r3, #2
 80225de:	d132      	bne.n	8022646 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80225e0:	2300      	movs	r3, #0
 80225e2:	60fb      	str	r3, [r7, #12]
 80225e4:	e002      	b.n	80225ec <inc_lock+0x6c>
 80225e6:	68fb      	ldr	r3, [r7, #12]
 80225e8:	3301      	adds	r3, #1
 80225ea:	60fb      	str	r3, [r7, #12]
 80225ec:	68fb      	ldr	r3, [r7, #12]
 80225ee:	2b01      	cmp	r3, #1
 80225f0:	d806      	bhi.n	8022600 <inc_lock+0x80>
 80225f2:	4a29      	ldr	r2, [pc, #164]	; (8022698 <inc_lock+0x118>)
 80225f4:	68fb      	ldr	r3, [r7, #12]
 80225f6:	011b      	lsls	r3, r3, #4
 80225f8:	4413      	add	r3, r2
 80225fa:	681b      	ldr	r3, [r3, #0]
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	d1f2      	bne.n	80225e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8022600:	68fb      	ldr	r3, [r7, #12]
 8022602:	2b02      	cmp	r3, #2
 8022604:	d101      	bne.n	802260a <inc_lock+0x8a>
 8022606:	2300      	movs	r3, #0
 8022608:	e040      	b.n	802268c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	681a      	ldr	r2, [r3, #0]
 802260e:	4922      	ldr	r1, [pc, #136]	; (8022698 <inc_lock+0x118>)
 8022610:	68fb      	ldr	r3, [r7, #12]
 8022612:	011b      	lsls	r3, r3, #4
 8022614:	440b      	add	r3, r1
 8022616:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	689a      	ldr	r2, [r3, #8]
 802261c:	491e      	ldr	r1, [pc, #120]	; (8022698 <inc_lock+0x118>)
 802261e:	68fb      	ldr	r3, [r7, #12]
 8022620:	011b      	lsls	r3, r3, #4
 8022622:	440b      	add	r3, r1
 8022624:	3304      	adds	r3, #4
 8022626:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	695a      	ldr	r2, [r3, #20]
 802262c:	491a      	ldr	r1, [pc, #104]	; (8022698 <inc_lock+0x118>)
 802262e:	68fb      	ldr	r3, [r7, #12]
 8022630:	011b      	lsls	r3, r3, #4
 8022632:	440b      	add	r3, r1
 8022634:	3308      	adds	r3, #8
 8022636:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8022638:	4a17      	ldr	r2, [pc, #92]	; (8022698 <inc_lock+0x118>)
 802263a:	68fb      	ldr	r3, [r7, #12]
 802263c:	011b      	lsls	r3, r3, #4
 802263e:	4413      	add	r3, r2
 8022640:	330c      	adds	r3, #12
 8022642:	2200      	movs	r2, #0
 8022644:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8022646:	683b      	ldr	r3, [r7, #0]
 8022648:	2b00      	cmp	r3, #0
 802264a:	d009      	beq.n	8022660 <inc_lock+0xe0>
 802264c:	4a12      	ldr	r2, [pc, #72]	; (8022698 <inc_lock+0x118>)
 802264e:	68fb      	ldr	r3, [r7, #12]
 8022650:	011b      	lsls	r3, r3, #4
 8022652:	4413      	add	r3, r2
 8022654:	330c      	adds	r3, #12
 8022656:	881b      	ldrh	r3, [r3, #0]
 8022658:	2b00      	cmp	r3, #0
 802265a:	d001      	beq.n	8022660 <inc_lock+0xe0>
 802265c:	2300      	movs	r3, #0
 802265e:	e015      	b.n	802268c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8022660:	683b      	ldr	r3, [r7, #0]
 8022662:	2b00      	cmp	r3, #0
 8022664:	d108      	bne.n	8022678 <inc_lock+0xf8>
 8022666:	4a0c      	ldr	r2, [pc, #48]	; (8022698 <inc_lock+0x118>)
 8022668:	68fb      	ldr	r3, [r7, #12]
 802266a:	011b      	lsls	r3, r3, #4
 802266c:	4413      	add	r3, r2
 802266e:	330c      	adds	r3, #12
 8022670:	881b      	ldrh	r3, [r3, #0]
 8022672:	3301      	adds	r3, #1
 8022674:	b29a      	uxth	r2, r3
 8022676:	e001      	b.n	802267c <inc_lock+0xfc>
 8022678:	f44f 7280 	mov.w	r2, #256	; 0x100
 802267c:	4906      	ldr	r1, [pc, #24]	; (8022698 <inc_lock+0x118>)
 802267e:	68fb      	ldr	r3, [r7, #12]
 8022680:	011b      	lsls	r3, r3, #4
 8022682:	440b      	add	r3, r1
 8022684:	330c      	adds	r3, #12
 8022686:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8022688:	68fb      	ldr	r3, [r7, #12]
 802268a:	3301      	adds	r3, #1
}
 802268c:	4618      	mov	r0, r3
 802268e:	3714      	adds	r7, #20
 8022690:	46bd      	mov	sp, r7
 8022692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022696:	4770      	bx	lr
 8022698:	24001400 	.word	0x24001400

0802269c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 802269c:	b480      	push	{r7}
 802269e:	b085      	sub	sp, #20
 80226a0:	af00      	add	r7, sp, #0
 80226a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	3b01      	subs	r3, #1
 80226a8:	607b      	str	r3, [r7, #4]
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	2b01      	cmp	r3, #1
 80226ae:	d825      	bhi.n	80226fc <dec_lock+0x60>
		n = Files[i].ctr;
 80226b0:	4a17      	ldr	r2, [pc, #92]	; (8022710 <dec_lock+0x74>)
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	011b      	lsls	r3, r3, #4
 80226b6:	4413      	add	r3, r2
 80226b8:	330c      	adds	r3, #12
 80226ba:	881b      	ldrh	r3, [r3, #0]
 80226bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80226be:	89fb      	ldrh	r3, [r7, #14]
 80226c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80226c4:	d101      	bne.n	80226ca <dec_lock+0x2e>
 80226c6:	2300      	movs	r3, #0
 80226c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80226ca:	89fb      	ldrh	r3, [r7, #14]
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	d002      	beq.n	80226d6 <dec_lock+0x3a>
 80226d0:	89fb      	ldrh	r3, [r7, #14]
 80226d2:	3b01      	subs	r3, #1
 80226d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80226d6:	4a0e      	ldr	r2, [pc, #56]	; (8022710 <dec_lock+0x74>)
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	011b      	lsls	r3, r3, #4
 80226dc:	4413      	add	r3, r2
 80226de:	330c      	adds	r3, #12
 80226e0:	89fa      	ldrh	r2, [r7, #14]
 80226e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80226e4:	89fb      	ldrh	r3, [r7, #14]
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d105      	bne.n	80226f6 <dec_lock+0x5a>
 80226ea:	4a09      	ldr	r2, [pc, #36]	; (8022710 <dec_lock+0x74>)
 80226ec:	687b      	ldr	r3, [r7, #4]
 80226ee:	011b      	lsls	r3, r3, #4
 80226f0:	4413      	add	r3, r2
 80226f2:	2200      	movs	r2, #0
 80226f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80226f6:	2300      	movs	r3, #0
 80226f8:	737b      	strb	r3, [r7, #13]
 80226fa:	e001      	b.n	8022700 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80226fc:	2302      	movs	r3, #2
 80226fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8022700:	7b7b      	ldrb	r3, [r7, #13]
}
 8022702:	4618      	mov	r0, r3
 8022704:	3714      	adds	r7, #20
 8022706:	46bd      	mov	sp, r7
 8022708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802270c:	4770      	bx	lr
 802270e:	bf00      	nop
 8022710:	24001400 	.word	0x24001400

08022714 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8022714:	b480      	push	{r7}
 8022716:	b085      	sub	sp, #20
 8022718:	af00      	add	r7, sp, #0
 802271a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 802271c:	2300      	movs	r3, #0
 802271e:	60fb      	str	r3, [r7, #12]
 8022720:	e010      	b.n	8022744 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8022722:	4a0d      	ldr	r2, [pc, #52]	; (8022758 <clear_lock+0x44>)
 8022724:	68fb      	ldr	r3, [r7, #12]
 8022726:	011b      	lsls	r3, r3, #4
 8022728:	4413      	add	r3, r2
 802272a:	681b      	ldr	r3, [r3, #0]
 802272c:	687a      	ldr	r2, [r7, #4]
 802272e:	429a      	cmp	r2, r3
 8022730:	d105      	bne.n	802273e <clear_lock+0x2a>
 8022732:	4a09      	ldr	r2, [pc, #36]	; (8022758 <clear_lock+0x44>)
 8022734:	68fb      	ldr	r3, [r7, #12]
 8022736:	011b      	lsls	r3, r3, #4
 8022738:	4413      	add	r3, r2
 802273a:	2200      	movs	r2, #0
 802273c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 802273e:	68fb      	ldr	r3, [r7, #12]
 8022740:	3301      	adds	r3, #1
 8022742:	60fb      	str	r3, [r7, #12]
 8022744:	68fb      	ldr	r3, [r7, #12]
 8022746:	2b01      	cmp	r3, #1
 8022748:	d9eb      	bls.n	8022722 <clear_lock+0xe>
	}
}
 802274a:	bf00      	nop
 802274c:	3714      	adds	r7, #20
 802274e:	46bd      	mov	sp, r7
 8022750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022754:	4770      	bx	lr
 8022756:	bf00      	nop
 8022758:	24001400 	.word	0x24001400

0802275c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 802275c:	b580      	push	{r7, lr}
 802275e:	b086      	sub	sp, #24
 8022760:	af00      	add	r7, sp, #0
 8022762:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8022764:	2300      	movs	r3, #0
 8022766:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	78db      	ldrb	r3, [r3, #3]
 802276c:	2b00      	cmp	r3, #0
 802276e:	d034      	beq.n	80227da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022774:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	7858      	ldrb	r0, [r3, #1]
 802277a:	687b      	ldr	r3, [r7, #4]
 802277c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8022780:	2301      	movs	r3, #1
 8022782:	697a      	ldr	r2, [r7, #20]
 8022784:	f7ff fd10 	bl	80221a8 <disk_write>
 8022788:	4603      	mov	r3, r0
 802278a:	2b00      	cmp	r3, #0
 802278c:	d002      	beq.n	8022794 <sync_window+0x38>
			res = FR_DISK_ERR;
 802278e:	2301      	movs	r3, #1
 8022790:	73fb      	strb	r3, [r7, #15]
 8022792:	e022      	b.n	80227da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	2200      	movs	r2, #0
 8022798:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802279e:	697a      	ldr	r2, [r7, #20]
 80227a0:	1ad2      	subs	r2, r2, r3
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	69db      	ldr	r3, [r3, #28]
 80227a6:	429a      	cmp	r2, r3
 80227a8:	d217      	bcs.n	80227da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	789b      	ldrb	r3, [r3, #2]
 80227ae:	613b      	str	r3, [r7, #16]
 80227b0:	e010      	b.n	80227d4 <sync_window+0x78>
					wsect += fs->fsize;
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	69db      	ldr	r3, [r3, #28]
 80227b6:	697a      	ldr	r2, [r7, #20]
 80227b8:	4413      	add	r3, r2
 80227ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	7858      	ldrb	r0, [r3, #1]
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80227c6:	2301      	movs	r3, #1
 80227c8:	697a      	ldr	r2, [r7, #20]
 80227ca:	f7ff fced 	bl	80221a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80227ce:	693b      	ldr	r3, [r7, #16]
 80227d0:	3b01      	subs	r3, #1
 80227d2:	613b      	str	r3, [r7, #16]
 80227d4:	693b      	ldr	r3, [r7, #16]
 80227d6:	2b01      	cmp	r3, #1
 80227d8:	d8eb      	bhi.n	80227b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80227da:	7bfb      	ldrb	r3, [r7, #15]
}
 80227dc:	4618      	mov	r0, r3
 80227de:	3718      	adds	r7, #24
 80227e0:	46bd      	mov	sp, r7
 80227e2:	bd80      	pop	{r7, pc}

080227e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80227e4:	b580      	push	{r7, lr}
 80227e6:	b084      	sub	sp, #16
 80227e8:	af00      	add	r7, sp, #0
 80227ea:	6078      	str	r0, [r7, #4]
 80227ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80227ee:	2300      	movs	r3, #0
 80227f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227f6:	683a      	ldr	r2, [r7, #0]
 80227f8:	429a      	cmp	r2, r3
 80227fa:	d01b      	beq.n	8022834 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80227fc:	6878      	ldr	r0, [r7, #4]
 80227fe:	f7ff ffad 	bl	802275c <sync_window>
 8022802:	4603      	mov	r3, r0
 8022804:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8022806:	7bfb      	ldrb	r3, [r7, #15]
 8022808:	2b00      	cmp	r3, #0
 802280a:	d113      	bne.n	8022834 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	7858      	ldrb	r0, [r3, #1]
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8022816:	2301      	movs	r3, #1
 8022818:	683a      	ldr	r2, [r7, #0]
 802281a:	f7ff fca5 	bl	8022168 <disk_read>
 802281e:	4603      	mov	r3, r0
 8022820:	2b00      	cmp	r3, #0
 8022822:	d004      	beq.n	802282e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8022824:	f04f 33ff 	mov.w	r3, #4294967295
 8022828:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 802282a:	2301      	movs	r3, #1
 802282c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 802282e:	687b      	ldr	r3, [r7, #4]
 8022830:	683a      	ldr	r2, [r7, #0]
 8022832:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8022834:	7bfb      	ldrb	r3, [r7, #15]
}
 8022836:	4618      	mov	r0, r3
 8022838:	3710      	adds	r7, #16
 802283a:	46bd      	mov	sp, r7
 802283c:	bd80      	pop	{r7, pc}
	...

08022840 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8022840:	b580      	push	{r7, lr}
 8022842:	b084      	sub	sp, #16
 8022844:	af00      	add	r7, sp, #0
 8022846:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8022848:	6878      	ldr	r0, [r7, #4]
 802284a:	f7ff ff87 	bl	802275c <sync_window>
 802284e:	4603      	mov	r3, r0
 8022850:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8022852:	7bfb      	ldrb	r3, [r7, #15]
 8022854:	2b00      	cmp	r3, #0
 8022856:	d158      	bne.n	802290a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	781b      	ldrb	r3, [r3, #0]
 802285c:	2b03      	cmp	r3, #3
 802285e:	d148      	bne.n	80228f2 <sync_fs+0xb2>
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	791b      	ldrb	r3, [r3, #4]
 8022864:	2b01      	cmp	r3, #1
 8022866:	d144      	bne.n	80228f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	3334      	adds	r3, #52	; 0x34
 802286c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022870:	2100      	movs	r1, #0
 8022872:	4618      	mov	r0, r3
 8022874:	f7ff fd79 	bl	802236a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	3334      	adds	r3, #52	; 0x34
 802287c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8022880:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8022884:	4618      	mov	r0, r3
 8022886:	f7ff fd08 	bl	802229a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 802288a:	687b      	ldr	r3, [r7, #4]
 802288c:	3334      	adds	r3, #52	; 0x34
 802288e:	4921      	ldr	r1, [pc, #132]	; (8022914 <sync_fs+0xd4>)
 8022890:	4618      	mov	r0, r3
 8022892:	f7ff fd1d 	bl	80222d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8022896:	687b      	ldr	r3, [r7, #4]
 8022898:	3334      	adds	r3, #52	; 0x34
 802289a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 802289e:	491e      	ldr	r1, [pc, #120]	; (8022918 <sync_fs+0xd8>)
 80228a0:	4618      	mov	r0, r3
 80228a2:	f7ff fd15 	bl	80222d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80228a6:	687b      	ldr	r3, [r7, #4]
 80228a8:	3334      	adds	r3, #52	; 0x34
 80228aa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	695b      	ldr	r3, [r3, #20]
 80228b2:	4619      	mov	r1, r3
 80228b4:	4610      	mov	r0, r2
 80228b6:	f7ff fd0b 	bl	80222d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80228ba:	687b      	ldr	r3, [r7, #4]
 80228bc:	3334      	adds	r3, #52	; 0x34
 80228be:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	691b      	ldr	r3, [r3, #16]
 80228c6:	4619      	mov	r1, r3
 80228c8:	4610      	mov	r0, r2
 80228ca:	f7ff fd01 	bl	80222d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80228ce:	687b      	ldr	r3, [r7, #4]
 80228d0:	6a1b      	ldr	r3, [r3, #32]
 80228d2:	1c5a      	adds	r2, r3, #1
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	7858      	ldrb	r0, [r3, #1]
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80228e6:	2301      	movs	r3, #1
 80228e8:	f7ff fc5e 	bl	80221a8 <disk_write>
			fs->fsi_flag = 0;
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	2200      	movs	r2, #0
 80228f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80228f2:	687b      	ldr	r3, [r7, #4]
 80228f4:	785b      	ldrb	r3, [r3, #1]
 80228f6:	2200      	movs	r2, #0
 80228f8:	2100      	movs	r1, #0
 80228fa:	4618      	mov	r0, r3
 80228fc:	f7ff fc74 	bl	80221e8 <disk_ioctl>
 8022900:	4603      	mov	r3, r0
 8022902:	2b00      	cmp	r3, #0
 8022904:	d001      	beq.n	802290a <sync_fs+0xca>
 8022906:	2301      	movs	r3, #1
 8022908:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 802290a:	7bfb      	ldrb	r3, [r7, #15]
}
 802290c:	4618      	mov	r0, r3
 802290e:	3710      	adds	r7, #16
 8022910:	46bd      	mov	sp, r7
 8022912:	bd80      	pop	{r7, pc}
 8022914:	41615252 	.word	0x41615252
 8022918:	61417272 	.word	0x61417272

0802291c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 802291c:	b480      	push	{r7}
 802291e:	b083      	sub	sp, #12
 8022920:	af00      	add	r7, sp, #0
 8022922:	6078      	str	r0, [r7, #4]
 8022924:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8022926:	683b      	ldr	r3, [r7, #0]
 8022928:	3b02      	subs	r3, #2
 802292a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 802292c:	687b      	ldr	r3, [r7, #4]
 802292e:	699b      	ldr	r3, [r3, #24]
 8022930:	3b02      	subs	r3, #2
 8022932:	683a      	ldr	r2, [r7, #0]
 8022934:	429a      	cmp	r2, r3
 8022936:	d301      	bcc.n	802293c <clust2sect+0x20>
 8022938:	2300      	movs	r3, #0
 802293a:	e008      	b.n	802294e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 802293c:	687b      	ldr	r3, [r7, #4]
 802293e:	895b      	ldrh	r3, [r3, #10]
 8022940:	461a      	mov	r2, r3
 8022942:	683b      	ldr	r3, [r7, #0]
 8022944:	fb03 f202 	mul.w	r2, r3, r2
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802294c:	4413      	add	r3, r2
}
 802294e:	4618      	mov	r0, r3
 8022950:	370c      	adds	r7, #12
 8022952:	46bd      	mov	sp, r7
 8022954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022958:	4770      	bx	lr

0802295a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 802295a:	b580      	push	{r7, lr}
 802295c:	b086      	sub	sp, #24
 802295e:	af00      	add	r7, sp, #0
 8022960:	6078      	str	r0, [r7, #4]
 8022962:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	681b      	ldr	r3, [r3, #0]
 8022968:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 802296a:	683b      	ldr	r3, [r7, #0]
 802296c:	2b01      	cmp	r3, #1
 802296e:	d904      	bls.n	802297a <get_fat+0x20>
 8022970:	693b      	ldr	r3, [r7, #16]
 8022972:	699b      	ldr	r3, [r3, #24]
 8022974:	683a      	ldr	r2, [r7, #0]
 8022976:	429a      	cmp	r2, r3
 8022978:	d302      	bcc.n	8022980 <get_fat+0x26>
		val = 1;	/* Internal error */
 802297a:	2301      	movs	r3, #1
 802297c:	617b      	str	r3, [r7, #20]
 802297e:	e08c      	b.n	8022a9a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8022980:	f04f 33ff 	mov.w	r3, #4294967295
 8022984:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8022986:	693b      	ldr	r3, [r7, #16]
 8022988:	781b      	ldrb	r3, [r3, #0]
 802298a:	2b02      	cmp	r3, #2
 802298c:	d045      	beq.n	8022a1a <get_fat+0xc0>
 802298e:	2b03      	cmp	r3, #3
 8022990:	d05d      	beq.n	8022a4e <get_fat+0xf4>
 8022992:	2b01      	cmp	r3, #1
 8022994:	d177      	bne.n	8022a86 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8022996:	683b      	ldr	r3, [r7, #0]
 8022998:	60fb      	str	r3, [r7, #12]
 802299a:	68fb      	ldr	r3, [r7, #12]
 802299c:	085b      	lsrs	r3, r3, #1
 802299e:	68fa      	ldr	r2, [r7, #12]
 80229a0:	4413      	add	r3, r2
 80229a2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80229a4:	693b      	ldr	r3, [r7, #16]
 80229a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80229a8:	68fb      	ldr	r3, [r7, #12]
 80229aa:	0a5b      	lsrs	r3, r3, #9
 80229ac:	4413      	add	r3, r2
 80229ae:	4619      	mov	r1, r3
 80229b0:	6938      	ldr	r0, [r7, #16]
 80229b2:	f7ff ff17 	bl	80227e4 <move_window>
 80229b6:	4603      	mov	r3, r0
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	d167      	bne.n	8022a8c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80229bc:	68fb      	ldr	r3, [r7, #12]
 80229be:	1c5a      	adds	r2, r3, #1
 80229c0:	60fa      	str	r2, [r7, #12]
 80229c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80229c6:	693a      	ldr	r2, [r7, #16]
 80229c8:	4413      	add	r3, r2
 80229ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80229ce:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80229d0:	693b      	ldr	r3, [r7, #16]
 80229d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80229d4:	68fb      	ldr	r3, [r7, #12]
 80229d6:	0a5b      	lsrs	r3, r3, #9
 80229d8:	4413      	add	r3, r2
 80229da:	4619      	mov	r1, r3
 80229dc:	6938      	ldr	r0, [r7, #16]
 80229de:	f7ff ff01 	bl	80227e4 <move_window>
 80229e2:	4603      	mov	r3, r0
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d153      	bne.n	8022a90 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80229e8:	68fb      	ldr	r3, [r7, #12]
 80229ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80229ee:	693a      	ldr	r2, [r7, #16]
 80229f0:	4413      	add	r3, r2
 80229f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80229f6:	021b      	lsls	r3, r3, #8
 80229f8:	461a      	mov	r2, r3
 80229fa:	68bb      	ldr	r3, [r7, #8]
 80229fc:	4313      	orrs	r3, r2
 80229fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8022a00:	683b      	ldr	r3, [r7, #0]
 8022a02:	f003 0301 	and.w	r3, r3, #1
 8022a06:	2b00      	cmp	r3, #0
 8022a08:	d002      	beq.n	8022a10 <get_fat+0xb6>
 8022a0a:	68bb      	ldr	r3, [r7, #8]
 8022a0c:	091b      	lsrs	r3, r3, #4
 8022a0e:	e002      	b.n	8022a16 <get_fat+0xbc>
 8022a10:	68bb      	ldr	r3, [r7, #8]
 8022a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022a16:	617b      	str	r3, [r7, #20]
			break;
 8022a18:	e03f      	b.n	8022a9a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8022a1a:	693b      	ldr	r3, [r7, #16]
 8022a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022a1e:	683b      	ldr	r3, [r7, #0]
 8022a20:	0a1b      	lsrs	r3, r3, #8
 8022a22:	4413      	add	r3, r2
 8022a24:	4619      	mov	r1, r3
 8022a26:	6938      	ldr	r0, [r7, #16]
 8022a28:	f7ff fedc 	bl	80227e4 <move_window>
 8022a2c:	4603      	mov	r3, r0
 8022a2e:	2b00      	cmp	r3, #0
 8022a30:	d130      	bne.n	8022a94 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8022a32:	693b      	ldr	r3, [r7, #16]
 8022a34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022a38:	683b      	ldr	r3, [r7, #0]
 8022a3a:	005b      	lsls	r3, r3, #1
 8022a3c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8022a40:	4413      	add	r3, r2
 8022a42:	4618      	mov	r0, r3
 8022a44:	f7ff fbee 	bl	8022224 <ld_word>
 8022a48:	4603      	mov	r3, r0
 8022a4a:	617b      	str	r3, [r7, #20]
			break;
 8022a4c:	e025      	b.n	8022a9a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8022a4e:	693b      	ldr	r3, [r7, #16]
 8022a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022a52:	683b      	ldr	r3, [r7, #0]
 8022a54:	09db      	lsrs	r3, r3, #7
 8022a56:	4413      	add	r3, r2
 8022a58:	4619      	mov	r1, r3
 8022a5a:	6938      	ldr	r0, [r7, #16]
 8022a5c:	f7ff fec2 	bl	80227e4 <move_window>
 8022a60:	4603      	mov	r3, r0
 8022a62:	2b00      	cmp	r3, #0
 8022a64:	d118      	bne.n	8022a98 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8022a66:	693b      	ldr	r3, [r7, #16]
 8022a68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022a6c:	683b      	ldr	r3, [r7, #0]
 8022a6e:	009b      	lsls	r3, r3, #2
 8022a70:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8022a74:	4413      	add	r3, r2
 8022a76:	4618      	mov	r0, r3
 8022a78:	f7ff fbec 	bl	8022254 <ld_dword>
 8022a7c:	4603      	mov	r3, r0
 8022a7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8022a82:	617b      	str	r3, [r7, #20]
			break;
 8022a84:	e009      	b.n	8022a9a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8022a86:	2301      	movs	r3, #1
 8022a88:	617b      	str	r3, [r7, #20]
 8022a8a:	e006      	b.n	8022a9a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8022a8c:	bf00      	nop
 8022a8e:	e004      	b.n	8022a9a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8022a90:	bf00      	nop
 8022a92:	e002      	b.n	8022a9a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8022a94:	bf00      	nop
 8022a96:	e000      	b.n	8022a9a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8022a98:	bf00      	nop
		}
	}

	return val;
 8022a9a:	697b      	ldr	r3, [r7, #20]
}
 8022a9c:	4618      	mov	r0, r3
 8022a9e:	3718      	adds	r7, #24
 8022aa0:	46bd      	mov	sp, r7
 8022aa2:	bd80      	pop	{r7, pc}

08022aa4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8022aa4:	b590      	push	{r4, r7, lr}
 8022aa6:	b089      	sub	sp, #36	; 0x24
 8022aa8:	af00      	add	r7, sp, #0
 8022aaa:	60f8      	str	r0, [r7, #12]
 8022aac:	60b9      	str	r1, [r7, #8]
 8022aae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8022ab0:	2302      	movs	r3, #2
 8022ab2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8022ab4:	68bb      	ldr	r3, [r7, #8]
 8022ab6:	2b01      	cmp	r3, #1
 8022ab8:	f240 80d6 	bls.w	8022c68 <put_fat+0x1c4>
 8022abc:	68fb      	ldr	r3, [r7, #12]
 8022abe:	699b      	ldr	r3, [r3, #24]
 8022ac0:	68ba      	ldr	r2, [r7, #8]
 8022ac2:	429a      	cmp	r2, r3
 8022ac4:	f080 80d0 	bcs.w	8022c68 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8022ac8:	68fb      	ldr	r3, [r7, #12]
 8022aca:	781b      	ldrb	r3, [r3, #0]
 8022acc:	2b02      	cmp	r3, #2
 8022ace:	d073      	beq.n	8022bb8 <put_fat+0x114>
 8022ad0:	2b03      	cmp	r3, #3
 8022ad2:	f000 8091 	beq.w	8022bf8 <put_fat+0x154>
 8022ad6:	2b01      	cmp	r3, #1
 8022ad8:	f040 80c6 	bne.w	8022c68 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8022adc:	68bb      	ldr	r3, [r7, #8]
 8022ade:	61bb      	str	r3, [r7, #24]
 8022ae0:	69bb      	ldr	r3, [r7, #24]
 8022ae2:	085b      	lsrs	r3, r3, #1
 8022ae4:	69ba      	ldr	r2, [r7, #24]
 8022ae6:	4413      	add	r3, r2
 8022ae8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8022aea:	68fb      	ldr	r3, [r7, #12]
 8022aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022aee:	69bb      	ldr	r3, [r7, #24]
 8022af0:	0a5b      	lsrs	r3, r3, #9
 8022af2:	4413      	add	r3, r2
 8022af4:	4619      	mov	r1, r3
 8022af6:	68f8      	ldr	r0, [r7, #12]
 8022af8:	f7ff fe74 	bl	80227e4 <move_window>
 8022afc:	4603      	mov	r3, r0
 8022afe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022b00:	7ffb      	ldrb	r3, [r7, #31]
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	f040 80a9 	bne.w	8022c5a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8022b08:	68fb      	ldr	r3, [r7, #12]
 8022b0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022b0e:	69bb      	ldr	r3, [r7, #24]
 8022b10:	1c59      	adds	r1, r3, #1
 8022b12:	61b9      	str	r1, [r7, #24]
 8022b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022b18:	4413      	add	r3, r2
 8022b1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8022b1c:	68bb      	ldr	r3, [r7, #8]
 8022b1e:	f003 0301 	and.w	r3, r3, #1
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	d00d      	beq.n	8022b42 <put_fat+0x9e>
 8022b26:	697b      	ldr	r3, [r7, #20]
 8022b28:	781b      	ldrb	r3, [r3, #0]
 8022b2a:	b25b      	sxtb	r3, r3
 8022b2c:	f003 030f 	and.w	r3, r3, #15
 8022b30:	b25a      	sxtb	r2, r3
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	b2db      	uxtb	r3, r3
 8022b36:	011b      	lsls	r3, r3, #4
 8022b38:	b25b      	sxtb	r3, r3
 8022b3a:	4313      	orrs	r3, r2
 8022b3c:	b25b      	sxtb	r3, r3
 8022b3e:	b2db      	uxtb	r3, r3
 8022b40:	e001      	b.n	8022b46 <put_fat+0xa2>
 8022b42:	687b      	ldr	r3, [r7, #4]
 8022b44:	b2db      	uxtb	r3, r3
 8022b46:	697a      	ldr	r2, [r7, #20]
 8022b48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8022b4a:	68fb      	ldr	r3, [r7, #12]
 8022b4c:	2201      	movs	r2, #1
 8022b4e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8022b50:	68fb      	ldr	r3, [r7, #12]
 8022b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022b54:	69bb      	ldr	r3, [r7, #24]
 8022b56:	0a5b      	lsrs	r3, r3, #9
 8022b58:	4413      	add	r3, r2
 8022b5a:	4619      	mov	r1, r3
 8022b5c:	68f8      	ldr	r0, [r7, #12]
 8022b5e:	f7ff fe41 	bl	80227e4 <move_window>
 8022b62:	4603      	mov	r3, r0
 8022b64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022b66:	7ffb      	ldrb	r3, [r7, #31]
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	d178      	bne.n	8022c5e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022b72:	69bb      	ldr	r3, [r7, #24]
 8022b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022b78:	4413      	add	r3, r2
 8022b7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8022b7c:	68bb      	ldr	r3, [r7, #8]
 8022b7e:	f003 0301 	and.w	r3, r3, #1
 8022b82:	2b00      	cmp	r3, #0
 8022b84:	d003      	beq.n	8022b8e <put_fat+0xea>
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	091b      	lsrs	r3, r3, #4
 8022b8a:	b2db      	uxtb	r3, r3
 8022b8c:	e00e      	b.n	8022bac <put_fat+0x108>
 8022b8e:	697b      	ldr	r3, [r7, #20]
 8022b90:	781b      	ldrb	r3, [r3, #0]
 8022b92:	b25b      	sxtb	r3, r3
 8022b94:	f023 030f 	bic.w	r3, r3, #15
 8022b98:	b25a      	sxtb	r2, r3
 8022b9a:	687b      	ldr	r3, [r7, #4]
 8022b9c:	0a1b      	lsrs	r3, r3, #8
 8022b9e:	b25b      	sxtb	r3, r3
 8022ba0:	f003 030f 	and.w	r3, r3, #15
 8022ba4:	b25b      	sxtb	r3, r3
 8022ba6:	4313      	orrs	r3, r2
 8022ba8:	b25b      	sxtb	r3, r3
 8022baa:	b2db      	uxtb	r3, r3
 8022bac:	697a      	ldr	r2, [r7, #20]
 8022bae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8022bb0:	68fb      	ldr	r3, [r7, #12]
 8022bb2:	2201      	movs	r2, #1
 8022bb4:	70da      	strb	r2, [r3, #3]
			break;
 8022bb6:	e057      	b.n	8022c68 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8022bb8:	68fb      	ldr	r3, [r7, #12]
 8022bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022bbc:	68bb      	ldr	r3, [r7, #8]
 8022bbe:	0a1b      	lsrs	r3, r3, #8
 8022bc0:	4413      	add	r3, r2
 8022bc2:	4619      	mov	r1, r3
 8022bc4:	68f8      	ldr	r0, [r7, #12]
 8022bc6:	f7ff fe0d 	bl	80227e4 <move_window>
 8022bca:	4603      	mov	r3, r0
 8022bcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022bce:	7ffb      	ldrb	r3, [r7, #31]
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	d146      	bne.n	8022c62 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8022bd4:	68fb      	ldr	r3, [r7, #12]
 8022bd6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022bda:	68bb      	ldr	r3, [r7, #8]
 8022bdc:	005b      	lsls	r3, r3, #1
 8022bde:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8022be2:	4413      	add	r3, r2
 8022be4:	687a      	ldr	r2, [r7, #4]
 8022be6:	b292      	uxth	r2, r2
 8022be8:	4611      	mov	r1, r2
 8022bea:	4618      	mov	r0, r3
 8022bec:	f7ff fb55 	bl	802229a <st_word>
			fs->wflag = 1;
 8022bf0:	68fb      	ldr	r3, [r7, #12]
 8022bf2:	2201      	movs	r2, #1
 8022bf4:	70da      	strb	r2, [r3, #3]
			break;
 8022bf6:	e037      	b.n	8022c68 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8022bf8:	68fb      	ldr	r3, [r7, #12]
 8022bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022bfc:	68bb      	ldr	r3, [r7, #8]
 8022bfe:	09db      	lsrs	r3, r3, #7
 8022c00:	4413      	add	r3, r2
 8022c02:	4619      	mov	r1, r3
 8022c04:	68f8      	ldr	r0, [r7, #12]
 8022c06:	f7ff fded 	bl	80227e4 <move_window>
 8022c0a:	4603      	mov	r3, r0
 8022c0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022c0e:	7ffb      	ldrb	r3, [r7, #31]
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	d128      	bne.n	8022c66 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8022c1a:	68fb      	ldr	r3, [r7, #12]
 8022c1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022c20:	68bb      	ldr	r3, [r7, #8]
 8022c22:	009b      	lsls	r3, r3, #2
 8022c24:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8022c28:	4413      	add	r3, r2
 8022c2a:	4618      	mov	r0, r3
 8022c2c:	f7ff fb12 	bl	8022254 <ld_dword>
 8022c30:	4603      	mov	r3, r0
 8022c32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8022c36:	4323      	orrs	r3, r4
 8022c38:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8022c3a:	68fb      	ldr	r3, [r7, #12]
 8022c3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022c40:	68bb      	ldr	r3, [r7, #8]
 8022c42:	009b      	lsls	r3, r3, #2
 8022c44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8022c48:	4413      	add	r3, r2
 8022c4a:	6879      	ldr	r1, [r7, #4]
 8022c4c:	4618      	mov	r0, r3
 8022c4e:	f7ff fb3f 	bl	80222d0 <st_dword>
			fs->wflag = 1;
 8022c52:	68fb      	ldr	r3, [r7, #12]
 8022c54:	2201      	movs	r2, #1
 8022c56:	70da      	strb	r2, [r3, #3]
			break;
 8022c58:	e006      	b.n	8022c68 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8022c5a:	bf00      	nop
 8022c5c:	e004      	b.n	8022c68 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8022c5e:	bf00      	nop
 8022c60:	e002      	b.n	8022c68 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8022c62:	bf00      	nop
 8022c64:	e000      	b.n	8022c68 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8022c66:	bf00      	nop
		}
	}
	return res;
 8022c68:	7ffb      	ldrb	r3, [r7, #31]
}
 8022c6a:	4618      	mov	r0, r3
 8022c6c:	3724      	adds	r7, #36	; 0x24
 8022c6e:	46bd      	mov	sp, r7
 8022c70:	bd90      	pop	{r4, r7, pc}

08022c72 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8022c72:	b580      	push	{r7, lr}
 8022c74:	b088      	sub	sp, #32
 8022c76:	af00      	add	r7, sp, #0
 8022c78:	60f8      	str	r0, [r7, #12]
 8022c7a:	60b9      	str	r1, [r7, #8]
 8022c7c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8022c7e:	2300      	movs	r3, #0
 8022c80:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8022c82:	68fb      	ldr	r3, [r7, #12]
 8022c84:	681b      	ldr	r3, [r3, #0]
 8022c86:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8022c88:	68bb      	ldr	r3, [r7, #8]
 8022c8a:	2b01      	cmp	r3, #1
 8022c8c:	d904      	bls.n	8022c98 <remove_chain+0x26>
 8022c8e:	69bb      	ldr	r3, [r7, #24]
 8022c90:	699b      	ldr	r3, [r3, #24]
 8022c92:	68ba      	ldr	r2, [r7, #8]
 8022c94:	429a      	cmp	r2, r3
 8022c96:	d301      	bcc.n	8022c9c <remove_chain+0x2a>
 8022c98:	2302      	movs	r3, #2
 8022c9a:	e04b      	b.n	8022d34 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8022c9c:	687b      	ldr	r3, [r7, #4]
 8022c9e:	2b00      	cmp	r3, #0
 8022ca0:	d00c      	beq.n	8022cbc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8022ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8022ca6:	6879      	ldr	r1, [r7, #4]
 8022ca8:	69b8      	ldr	r0, [r7, #24]
 8022caa:	f7ff fefb 	bl	8022aa4 <put_fat>
 8022cae:	4603      	mov	r3, r0
 8022cb0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8022cb2:	7ffb      	ldrb	r3, [r7, #31]
 8022cb4:	2b00      	cmp	r3, #0
 8022cb6:	d001      	beq.n	8022cbc <remove_chain+0x4a>
 8022cb8:	7ffb      	ldrb	r3, [r7, #31]
 8022cba:	e03b      	b.n	8022d34 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8022cbc:	68b9      	ldr	r1, [r7, #8]
 8022cbe:	68f8      	ldr	r0, [r7, #12]
 8022cc0:	f7ff fe4b 	bl	802295a <get_fat>
 8022cc4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8022cc6:	697b      	ldr	r3, [r7, #20]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d031      	beq.n	8022d30 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8022ccc:	697b      	ldr	r3, [r7, #20]
 8022cce:	2b01      	cmp	r3, #1
 8022cd0:	d101      	bne.n	8022cd6 <remove_chain+0x64>
 8022cd2:	2302      	movs	r3, #2
 8022cd4:	e02e      	b.n	8022d34 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8022cd6:	697b      	ldr	r3, [r7, #20]
 8022cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022cdc:	d101      	bne.n	8022ce2 <remove_chain+0x70>
 8022cde:	2301      	movs	r3, #1
 8022ce0:	e028      	b.n	8022d34 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8022ce2:	2200      	movs	r2, #0
 8022ce4:	68b9      	ldr	r1, [r7, #8]
 8022ce6:	69b8      	ldr	r0, [r7, #24]
 8022ce8:	f7ff fedc 	bl	8022aa4 <put_fat>
 8022cec:	4603      	mov	r3, r0
 8022cee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8022cf0:	7ffb      	ldrb	r3, [r7, #31]
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	d001      	beq.n	8022cfa <remove_chain+0x88>
 8022cf6:	7ffb      	ldrb	r3, [r7, #31]
 8022cf8:	e01c      	b.n	8022d34 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8022cfa:	69bb      	ldr	r3, [r7, #24]
 8022cfc:	695a      	ldr	r2, [r3, #20]
 8022cfe:	69bb      	ldr	r3, [r7, #24]
 8022d00:	699b      	ldr	r3, [r3, #24]
 8022d02:	3b02      	subs	r3, #2
 8022d04:	429a      	cmp	r2, r3
 8022d06:	d20b      	bcs.n	8022d20 <remove_chain+0xae>
			fs->free_clst++;
 8022d08:	69bb      	ldr	r3, [r7, #24]
 8022d0a:	695b      	ldr	r3, [r3, #20]
 8022d0c:	1c5a      	adds	r2, r3, #1
 8022d0e:	69bb      	ldr	r3, [r7, #24]
 8022d10:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8022d12:	69bb      	ldr	r3, [r7, #24]
 8022d14:	791b      	ldrb	r3, [r3, #4]
 8022d16:	f043 0301 	orr.w	r3, r3, #1
 8022d1a:	b2da      	uxtb	r2, r3
 8022d1c:	69bb      	ldr	r3, [r7, #24]
 8022d1e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8022d20:	697b      	ldr	r3, [r7, #20]
 8022d22:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8022d24:	69bb      	ldr	r3, [r7, #24]
 8022d26:	699b      	ldr	r3, [r3, #24]
 8022d28:	68ba      	ldr	r2, [r7, #8]
 8022d2a:	429a      	cmp	r2, r3
 8022d2c:	d3c6      	bcc.n	8022cbc <remove_chain+0x4a>
 8022d2e:	e000      	b.n	8022d32 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8022d30:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8022d32:	2300      	movs	r3, #0
}
 8022d34:	4618      	mov	r0, r3
 8022d36:	3720      	adds	r7, #32
 8022d38:	46bd      	mov	sp, r7
 8022d3a:	bd80      	pop	{r7, pc}

08022d3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8022d3c:	b580      	push	{r7, lr}
 8022d3e:	b088      	sub	sp, #32
 8022d40:	af00      	add	r7, sp, #0
 8022d42:	6078      	str	r0, [r7, #4]
 8022d44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	681b      	ldr	r3, [r3, #0]
 8022d4a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8022d4c:	683b      	ldr	r3, [r7, #0]
 8022d4e:	2b00      	cmp	r3, #0
 8022d50:	d10d      	bne.n	8022d6e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8022d52:	693b      	ldr	r3, [r7, #16]
 8022d54:	691b      	ldr	r3, [r3, #16]
 8022d56:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8022d58:	69bb      	ldr	r3, [r7, #24]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d004      	beq.n	8022d68 <create_chain+0x2c>
 8022d5e:	693b      	ldr	r3, [r7, #16]
 8022d60:	699b      	ldr	r3, [r3, #24]
 8022d62:	69ba      	ldr	r2, [r7, #24]
 8022d64:	429a      	cmp	r2, r3
 8022d66:	d31b      	bcc.n	8022da0 <create_chain+0x64>
 8022d68:	2301      	movs	r3, #1
 8022d6a:	61bb      	str	r3, [r7, #24]
 8022d6c:	e018      	b.n	8022da0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8022d6e:	6839      	ldr	r1, [r7, #0]
 8022d70:	6878      	ldr	r0, [r7, #4]
 8022d72:	f7ff fdf2 	bl	802295a <get_fat>
 8022d76:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8022d78:	68fb      	ldr	r3, [r7, #12]
 8022d7a:	2b01      	cmp	r3, #1
 8022d7c:	d801      	bhi.n	8022d82 <create_chain+0x46>
 8022d7e:	2301      	movs	r3, #1
 8022d80:	e070      	b.n	8022e64 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8022d82:	68fb      	ldr	r3, [r7, #12]
 8022d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022d88:	d101      	bne.n	8022d8e <create_chain+0x52>
 8022d8a:	68fb      	ldr	r3, [r7, #12]
 8022d8c:	e06a      	b.n	8022e64 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8022d8e:	693b      	ldr	r3, [r7, #16]
 8022d90:	699b      	ldr	r3, [r3, #24]
 8022d92:	68fa      	ldr	r2, [r7, #12]
 8022d94:	429a      	cmp	r2, r3
 8022d96:	d201      	bcs.n	8022d9c <create_chain+0x60>
 8022d98:	68fb      	ldr	r3, [r7, #12]
 8022d9a:	e063      	b.n	8022e64 <create_chain+0x128>
		scl = clst;
 8022d9c:	683b      	ldr	r3, [r7, #0]
 8022d9e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8022da0:	69bb      	ldr	r3, [r7, #24]
 8022da2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8022da4:	69fb      	ldr	r3, [r7, #28]
 8022da6:	3301      	adds	r3, #1
 8022da8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8022daa:	693b      	ldr	r3, [r7, #16]
 8022dac:	699b      	ldr	r3, [r3, #24]
 8022dae:	69fa      	ldr	r2, [r7, #28]
 8022db0:	429a      	cmp	r2, r3
 8022db2:	d307      	bcc.n	8022dc4 <create_chain+0x88>
				ncl = 2;
 8022db4:	2302      	movs	r3, #2
 8022db6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8022db8:	69fa      	ldr	r2, [r7, #28]
 8022dba:	69bb      	ldr	r3, [r7, #24]
 8022dbc:	429a      	cmp	r2, r3
 8022dbe:	d901      	bls.n	8022dc4 <create_chain+0x88>
 8022dc0:	2300      	movs	r3, #0
 8022dc2:	e04f      	b.n	8022e64 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8022dc4:	69f9      	ldr	r1, [r7, #28]
 8022dc6:	6878      	ldr	r0, [r7, #4]
 8022dc8:	f7ff fdc7 	bl	802295a <get_fat>
 8022dcc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8022dce:	68fb      	ldr	r3, [r7, #12]
 8022dd0:	2b00      	cmp	r3, #0
 8022dd2:	d00e      	beq.n	8022df2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8022dd4:	68fb      	ldr	r3, [r7, #12]
 8022dd6:	2b01      	cmp	r3, #1
 8022dd8:	d003      	beq.n	8022de2 <create_chain+0xa6>
 8022dda:	68fb      	ldr	r3, [r7, #12]
 8022ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022de0:	d101      	bne.n	8022de6 <create_chain+0xaa>
 8022de2:	68fb      	ldr	r3, [r7, #12]
 8022de4:	e03e      	b.n	8022e64 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8022de6:	69fa      	ldr	r2, [r7, #28]
 8022de8:	69bb      	ldr	r3, [r7, #24]
 8022dea:	429a      	cmp	r2, r3
 8022dec:	d1da      	bne.n	8022da4 <create_chain+0x68>
 8022dee:	2300      	movs	r3, #0
 8022df0:	e038      	b.n	8022e64 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8022df2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8022df4:	f04f 32ff 	mov.w	r2, #4294967295
 8022df8:	69f9      	ldr	r1, [r7, #28]
 8022dfa:	6938      	ldr	r0, [r7, #16]
 8022dfc:	f7ff fe52 	bl	8022aa4 <put_fat>
 8022e00:	4603      	mov	r3, r0
 8022e02:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8022e04:	7dfb      	ldrb	r3, [r7, #23]
 8022e06:	2b00      	cmp	r3, #0
 8022e08:	d109      	bne.n	8022e1e <create_chain+0xe2>
 8022e0a:	683b      	ldr	r3, [r7, #0]
 8022e0c:	2b00      	cmp	r3, #0
 8022e0e:	d006      	beq.n	8022e1e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8022e10:	69fa      	ldr	r2, [r7, #28]
 8022e12:	6839      	ldr	r1, [r7, #0]
 8022e14:	6938      	ldr	r0, [r7, #16]
 8022e16:	f7ff fe45 	bl	8022aa4 <put_fat>
 8022e1a:	4603      	mov	r3, r0
 8022e1c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8022e1e:	7dfb      	ldrb	r3, [r7, #23]
 8022e20:	2b00      	cmp	r3, #0
 8022e22:	d116      	bne.n	8022e52 <create_chain+0x116>
		fs->last_clst = ncl;
 8022e24:	693b      	ldr	r3, [r7, #16]
 8022e26:	69fa      	ldr	r2, [r7, #28]
 8022e28:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8022e2a:	693b      	ldr	r3, [r7, #16]
 8022e2c:	695a      	ldr	r2, [r3, #20]
 8022e2e:	693b      	ldr	r3, [r7, #16]
 8022e30:	699b      	ldr	r3, [r3, #24]
 8022e32:	3b02      	subs	r3, #2
 8022e34:	429a      	cmp	r2, r3
 8022e36:	d804      	bhi.n	8022e42 <create_chain+0x106>
 8022e38:	693b      	ldr	r3, [r7, #16]
 8022e3a:	695b      	ldr	r3, [r3, #20]
 8022e3c:	1e5a      	subs	r2, r3, #1
 8022e3e:	693b      	ldr	r3, [r7, #16]
 8022e40:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8022e42:	693b      	ldr	r3, [r7, #16]
 8022e44:	791b      	ldrb	r3, [r3, #4]
 8022e46:	f043 0301 	orr.w	r3, r3, #1
 8022e4a:	b2da      	uxtb	r2, r3
 8022e4c:	693b      	ldr	r3, [r7, #16]
 8022e4e:	711a      	strb	r2, [r3, #4]
 8022e50:	e007      	b.n	8022e62 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8022e52:	7dfb      	ldrb	r3, [r7, #23]
 8022e54:	2b01      	cmp	r3, #1
 8022e56:	d102      	bne.n	8022e5e <create_chain+0x122>
 8022e58:	f04f 33ff 	mov.w	r3, #4294967295
 8022e5c:	e000      	b.n	8022e60 <create_chain+0x124>
 8022e5e:	2301      	movs	r3, #1
 8022e60:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8022e62:	69fb      	ldr	r3, [r7, #28]
}
 8022e64:	4618      	mov	r0, r3
 8022e66:	3720      	adds	r7, #32
 8022e68:	46bd      	mov	sp, r7
 8022e6a:	bd80      	pop	{r7, pc}

08022e6c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8022e6c:	b480      	push	{r7}
 8022e6e:	b087      	sub	sp, #28
 8022e70:	af00      	add	r7, sp, #0
 8022e72:	6078      	str	r0, [r7, #4]
 8022e74:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8022e76:	687b      	ldr	r3, [r7, #4]
 8022e78:	681b      	ldr	r3, [r3, #0]
 8022e7a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022e80:	3304      	adds	r3, #4
 8022e82:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8022e84:	683b      	ldr	r3, [r7, #0]
 8022e86:	0a5b      	lsrs	r3, r3, #9
 8022e88:	68fa      	ldr	r2, [r7, #12]
 8022e8a:	8952      	ldrh	r2, [r2, #10]
 8022e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8022e90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8022e92:	693b      	ldr	r3, [r7, #16]
 8022e94:	1d1a      	adds	r2, r3, #4
 8022e96:	613a      	str	r2, [r7, #16]
 8022e98:	681b      	ldr	r3, [r3, #0]
 8022e9a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8022e9c:	68bb      	ldr	r3, [r7, #8]
 8022e9e:	2b00      	cmp	r3, #0
 8022ea0:	d101      	bne.n	8022ea6 <clmt_clust+0x3a>
 8022ea2:	2300      	movs	r3, #0
 8022ea4:	e010      	b.n	8022ec8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8022ea6:	697a      	ldr	r2, [r7, #20]
 8022ea8:	68bb      	ldr	r3, [r7, #8]
 8022eaa:	429a      	cmp	r2, r3
 8022eac:	d307      	bcc.n	8022ebe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8022eae:	697a      	ldr	r2, [r7, #20]
 8022eb0:	68bb      	ldr	r3, [r7, #8]
 8022eb2:	1ad3      	subs	r3, r2, r3
 8022eb4:	617b      	str	r3, [r7, #20]
 8022eb6:	693b      	ldr	r3, [r7, #16]
 8022eb8:	3304      	adds	r3, #4
 8022eba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8022ebc:	e7e9      	b.n	8022e92 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8022ebe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8022ec0:	693b      	ldr	r3, [r7, #16]
 8022ec2:	681a      	ldr	r2, [r3, #0]
 8022ec4:	697b      	ldr	r3, [r7, #20]
 8022ec6:	4413      	add	r3, r2
}
 8022ec8:	4618      	mov	r0, r3
 8022eca:	371c      	adds	r7, #28
 8022ecc:	46bd      	mov	sp, r7
 8022ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ed2:	4770      	bx	lr

08022ed4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8022ed4:	b580      	push	{r7, lr}
 8022ed6:	b086      	sub	sp, #24
 8022ed8:	af00      	add	r7, sp, #0
 8022eda:	6078      	str	r0, [r7, #4]
 8022edc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8022ede:	687b      	ldr	r3, [r7, #4]
 8022ee0:	681b      	ldr	r3, [r3, #0]
 8022ee2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8022ee4:	683b      	ldr	r3, [r7, #0]
 8022ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8022eea:	d204      	bcs.n	8022ef6 <dir_sdi+0x22>
 8022eec:	683b      	ldr	r3, [r7, #0]
 8022eee:	f003 031f 	and.w	r3, r3, #31
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	d001      	beq.n	8022efa <dir_sdi+0x26>
		return FR_INT_ERR;
 8022ef6:	2302      	movs	r3, #2
 8022ef8:	e063      	b.n	8022fc2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	683a      	ldr	r2, [r7, #0]
 8022efe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	689b      	ldr	r3, [r3, #8]
 8022f04:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8022f06:	697b      	ldr	r3, [r7, #20]
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	d106      	bne.n	8022f1a <dir_sdi+0x46>
 8022f0c:	693b      	ldr	r3, [r7, #16]
 8022f0e:	781b      	ldrb	r3, [r3, #0]
 8022f10:	2b02      	cmp	r3, #2
 8022f12:	d902      	bls.n	8022f1a <dir_sdi+0x46>
		clst = fs->dirbase;
 8022f14:	693b      	ldr	r3, [r7, #16]
 8022f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022f18:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8022f1a:	697b      	ldr	r3, [r7, #20]
 8022f1c:	2b00      	cmp	r3, #0
 8022f1e:	d10c      	bne.n	8022f3a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8022f20:	683b      	ldr	r3, [r7, #0]
 8022f22:	095b      	lsrs	r3, r3, #5
 8022f24:	693a      	ldr	r2, [r7, #16]
 8022f26:	8912      	ldrh	r2, [r2, #8]
 8022f28:	4293      	cmp	r3, r2
 8022f2a:	d301      	bcc.n	8022f30 <dir_sdi+0x5c>
 8022f2c:	2302      	movs	r3, #2
 8022f2e:	e048      	b.n	8022fc2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8022f30:	693b      	ldr	r3, [r7, #16]
 8022f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022f34:	687b      	ldr	r3, [r7, #4]
 8022f36:	61da      	str	r2, [r3, #28]
 8022f38:	e029      	b.n	8022f8e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8022f3a:	693b      	ldr	r3, [r7, #16]
 8022f3c:	895b      	ldrh	r3, [r3, #10]
 8022f3e:	025b      	lsls	r3, r3, #9
 8022f40:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8022f42:	e019      	b.n	8022f78 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8022f44:	687b      	ldr	r3, [r7, #4]
 8022f46:	6979      	ldr	r1, [r7, #20]
 8022f48:	4618      	mov	r0, r3
 8022f4a:	f7ff fd06 	bl	802295a <get_fat>
 8022f4e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8022f50:	697b      	ldr	r3, [r7, #20]
 8022f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022f56:	d101      	bne.n	8022f5c <dir_sdi+0x88>
 8022f58:	2301      	movs	r3, #1
 8022f5a:	e032      	b.n	8022fc2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8022f5c:	697b      	ldr	r3, [r7, #20]
 8022f5e:	2b01      	cmp	r3, #1
 8022f60:	d904      	bls.n	8022f6c <dir_sdi+0x98>
 8022f62:	693b      	ldr	r3, [r7, #16]
 8022f64:	699b      	ldr	r3, [r3, #24]
 8022f66:	697a      	ldr	r2, [r7, #20]
 8022f68:	429a      	cmp	r2, r3
 8022f6a:	d301      	bcc.n	8022f70 <dir_sdi+0x9c>
 8022f6c:	2302      	movs	r3, #2
 8022f6e:	e028      	b.n	8022fc2 <dir_sdi+0xee>
			ofs -= csz;
 8022f70:	683a      	ldr	r2, [r7, #0]
 8022f72:	68fb      	ldr	r3, [r7, #12]
 8022f74:	1ad3      	subs	r3, r2, r3
 8022f76:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8022f78:	683a      	ldr	r2, [r7, #0]
 8022f7a:	68fb      	ldr	r3, [r7, #12]
 8022f7c:	429a      	cmp	r2, r3
 8022f7e:	d2e1      	bcs.n	8022f44 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8022f80:	6979      	ldr	r1, [r7, #20]
 8022f82:	6938      	ldr	r0, [r7, #16]
 8022f84:	f7ff fcca 	bl	802291c <clust2sect>
 8022f88:	4602      	mov	r2, r0
 8022f8a:	687b      	ldr	r3, [r7, #4]
 8022f8c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	697a      	ldr	r2, [r7, #20]
 8022f92:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	69db      	ldr	r3, [r3, #28]
 8022f98:	2b00      	cmp	r3, #0
 8022f9a:	d101      	bne.n	8022fa0 <dir_sdi+0xcc>
 8022f9c:	2302      	movs	r3, #2
 8022f9e:	e010      	b.n	8022fc2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8022fa0:	687b      	ldr	r3, [r7, #4]
 8022fa2:	69da      	ldr	r2, [r3, #28]
 8022fa4:	683b      	ldr	r3, [r7, #0]
 8022fa6:	0a5b      	lsrs	r3, r3, #9
 8022fa8:	441a      	add	r2, r3
 8022faa:	687b      	ldr	r3, [r7, #4]
 8022fac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8022fae:	693b      	ldr	r3, [r7, #16]
 8022fb0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022fb4:	683b      	ldr	r3, [r7, #0]
 8022fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022fba:	441a      	add	r2, r3
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8022fc0:	2300      	movs	r3, #0
}
 8022fc2:	4618      	mov	r0, r3
 8022fc4:	3718      	adds	r7, #24
 8022fc6:	46bd      	mov	sp, r7
 8022fc8:	bd80      	pop	{r7, pc}

08022fca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8022fca:	b580      	push	{r7, lr}
 8022fcc:	b086      	sub	sp, #24
 8022fce:	af00      	add	r7, sp, #0
 8022fd0:	6078      	str	r0, [r7, #4]
 8022fd2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	681b      	ldr	r3, [r3, #0]
 8022fd8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8022fda:	687b      	ldr	r3, [r7, #4]
 8022fdc:	695b      	ldr	r3, [r3, #20]
 8022fde:	3320      	adds	r3, #32
 8022fe0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	69db      	ldr	r3, [r3, #28]
 8022fe6:	2b00      	cmp	r3, #0
 8022fe8:	d003      	beq.n	8022ff2 <dir_next+0x28>
 8022fea:	68bb      	ldr	r3, [r7, #8]
 8022fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8022ff0:	d301      	bcc.n	8022ff6 <dir_next+0x2c>
 8022ff2:	2304      	movs	r3, #4
 8022ff4:	e0aa      	b.n	802314c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8022ff6:	68bb      	ldr	r3, [r7, #8]
 8022ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	f040 8098 	bne.w	8023132 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	69db      	ldr	r3, [r3, #28]
 8023006:	1c5a      	adds	r2, r3, #1
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 802300c:	687b      	ldr	r3, [r7, #4]
 802300e:	699b      	ldr	r3, [r3, #24]
 8023010:	2b00      	cmp	r3, #0
 8023012:	d10b      	bne.n	802302c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8023014:	68bb      	ldr	r3, [r7, #8]
 8023016:	095b      	lsrs	r3, r3, #5
 8023018:	68fa      	ldr	r2, [r7, #12]
 802301a:	8912      	ldrh	r2, [r2, #8]
 802301c:	4293      	cmp	r3, r2
 802301e:	f0c0 8088 	bcc.w	8023132 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	2200      	movs	r2, #0
 8023026:	61da      	str	r2, [r3, #28]
 8023028:	2304      	movs	r3, #4
 802302a:	e08f      	b.n	802314c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 802302c:	68bb      	ldr	r3, [r7, #8]
 802302e:	0a5b      	lsrs	r3, r3, #9
 8023030:	68fa      	ldr	r2, [r7, #12]
 8023032:	8952      	ldrh	r2, [r2, #10]
 8023034:	3a01      	subs	r2, #1
 8023036:	4013      	ands	r3, r2
 8023038:	2b00      	cmp	r3, #0
 802303a:	d17a      	bne.n	8023132 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 802303c:	687a      	ldr	r2, [r7, #4]
 802303e:	687b      	ldr	r3, [r7, #4]
 8023040:	699b      	ldr	r3, [r3, #24]
 8023042:	4619      	mov	r1, r3
 8023044:	4610      	mov	r0, r2
 8023046:	f7ff fc88 	bl	802295a <get_fat>
 802304a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 802304c:	697b      	ldr	r3, [r7, #20]
 802304e:	2b01      	cmp	r3, #1
 8023050:	d801      	bhi.n	8023056 <dir_next+0x8c>
 8023052:	2302      	movs	r3, #2
 8023054:	e07a      	b.n	802314c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8023056:	697b      	ldr	r3, [r7, #20]
 8023058:	f1b3 3fff 	cmp.w	r3, #4294967295
 802305c:	d101      	bne.n	8023062 <dir_next+0x98>
 802305e:	2301      	movs	r3, #1
 8023060:	e074      	b.n	802314c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8023062:	68fb      	ldr	r3, [r7, #12]
 8023064:	699b      	ldr	r3, [r3, #24]
 8023066:	697a      	ldr	r2, [r7, #20]
 8023068:	429a      	cmp	r2, r3
 802306a:	d358      	bcc.n	802311e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 802306c:	683b      	ldr	r3, [r7, #0]
 802306e:	2b00      	cmp	r3, #0
 8023070:	d104      	bne.n	802307c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8023072:	687b      	ldr	r3, [r7, #4]
 8023074:	2200      	movs	r2, #0
 8023076:	61da      	str	r2, [r3, #28]
 8023078:	2304      	movs	r3, #4
 802307a:	e067      	b.n	802314c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 802307c:	687a      	ldr	r2, [r7, #4]
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	699b      	ldr	r3, [r3, #24]
 8023082:	4619      	mov	r1, r3
 8023084:	4610      	mov	r0, r2
 8023086:	f7ff fe59 	bl	8022d3c <create_chain>
 802308a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 802308c:	697b      	ldr	r3, [r7, #20]
 802308e:	2b00      	cmp	r3, #0
 8023090:	d101      	bne.n	8023096 <dir_next+0xcc>
 8023092:	2307      	movs	r3, #7
 8023094:	e05a      	b.n	802314c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8023096:	697b      	ldr	r3, [r7, #20]
 8023098:	2b01      	cmp	r3, #1
 802309a:	d101      	bne.n	80230a0 <dir_next+0xd6>
 802309c:	2302      	movs	r3, #2
 802309e:	e055      	b.n	802314c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80230a0:	697b      	ldr	r3, [r7, #20]
 80230a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80230a6:	d101      	bne.n	80230ac <dir_next+0xe2>
 80230a8:	2301      	movs	r3, #1
 80230aa:	e04f      	b.n	802314c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80230ac:	68f8      	ldr	r0, [r7, #12]
 80230ae:	f7ff fb55 	bl	802275c <sync_window>
 80230b2:	4603      	mov	r3, r0
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d001      	beq.n	80230bc <dir_next+0xf2>
 80230b8:	2301      	movs	r3, #1
 80230ba:	e047      	b.n	802314c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80230bc:	68fb      	ldr	r3, [r7, #12]
 80230be:	3334      	adds	r3, #52	; 0x34
 80230c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80230c4:	2100      	movs	r1, #0
 80230c6:	4618      	mov	r0, r3
 80230c8:	f7ff f94f 	bl	802236a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80230cc:	2300      	movs	r3, #0
 80230ce:	613b      	str	r3, [r7, #16]
 80230d0:	6979      	ldr	r1, [r7, #20]
 80230d2:	68f8      	ldr	r0, [r7, #12]
 80230d4:	f7ff fc22 	bl	802291c <clust2sect>
 80230d8:	4602      	mov	r2, r0
 80230da:	68fb      	ldr	r3, [r7, #12]
 80230dc:	631a      	str	r2, [r3, #48]	; 0x30
 80230de:	e012      	b.n	8023106 <dir_next+0x13c>
						fs->wflag = 1;
 80230e0:	68fb      	ldr	r3, [r7, #12]
 80230e2:	2201      	movs	r2, #1
 80230e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80230e6:	68f8      	ldr	r0, [r7, #12]
 80230e8:	f7ff fb38 	bl	802275c <sync_window>
 80230ec:	4603      	mov	r3, r0
 80230ee:	2b00      	cmp	r3, #0
 80230f0:	d001      	beq.n	80230f6 <dir_next+0x12c>
 80230f2:	2301      	movs	r3, #1
 80230f4:	e02a      	b.n	802314c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80230f6:	693b      	ldr	r3, [r7, #16]
 80230f8:	3301      	adds	r3, #1
 80230fa:	613b      	str	r3, [r7, #16]
 80230fc:	68fb      	ldr	r3, [r7, #12]
 80230fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023100:	1c5a      	adds	r2, r3, #1
 8023102:	68fb      	ldr	r3, [r7, #12]
 8023104:	631a      	str	r2, [r3, #48]	; 0x30
 8023106:	68fb      	ldr	r3, [r7, #12]
 8023108:	895b      	ldrh	r3, [r3, #10]
 802310a:	461a      	mov	r2, r3
 802310c:	693b      	ldr	r3, [r7, #16]
 802310e:	4293      	cmp	r3, r2
 8023110:	d3e6      	bcc.n	80230e0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8023112:	68fb      	ldr	r3, [r7, #12]
 8023114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023116:	693b      	ldr	r3, [r7, #16]
 8023118:	1ad2      	subs	r2, r2, r3
 802311a:	68fb      	ldr	r3, [r7, #12]
 802311c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 802311e:	687b      	ldr	r3, [r7, #4]
 8023120:	697a      	ldr	r2, [r7, #20]
 8023122:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8023124:	6979      	ldr	r1, [r7, #20]
 8023126:	68f8      	ldr	r0, [r7, #12]
 8023128:	f7ff fbf8 	bl	802291c <clust2sect>
 802312c:	4602      	mov	r2, r0
 802312e:	687b      	ldr	r3, [r7, #4]
 8023130:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8023132:	687b      	ldr	r3, [r7, #4]
 8023134:	68ba      	ldr	r2, [r7, #8]
 8023136:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8023138:	68fb      	ldr	r3, [r7, #12]
 802313a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802313e:	68bb      	ldr	r3, [r7, #8]
 8023140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023144:	441a      	add	r2, r3
 8023146:	687b      	ldr	r3, [r7, #4]
 8023148:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802314a:	2300      	movs	r3, #0
}
 802314c:	4618      	mov	r0, r3
 802314e:	3718      	adds	r7, #24
 8023150:	46bd      	mov	sp, r7
 8023152:	bd80      	pop	{r7, pc}

08023154 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8023154:	b580      	push	{r7, lr}
 8023156:	b086      	sub	sp, #24
 8023158:	af00      	add	r7, sp, #0
 802315a:	6078      	str	r0, [r7, #4]
 802315c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	681b      	ldr	r3, [r3, #0]
 8023162:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8023164:	2100      	movs	r1, #0
 8023166:	6878      	ldr	r0, [r7, #4]
 8023168:	f7ff feb4 	bl	8022ed4 <dir_sdi>
 802316c:	4603      	mov	r3, r0
 802316e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8023170:	7dfb      	ldrb	r3, [r7, #23]
 8023172:	2b00      	cmp	r3, #0
 8023174:	d12b      	bne.n	80231ce <dir_alloc+0x7a>
		n = 0;
 8023176:	2300      	movs	r3, #0
 8023178:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	69db      	ldr	r3, [r3, #28]
 802317e:	4619      	mov	r1, r3
 8023180:	68f8      	ldr	r0, [r7, #12]
 8023182:	f7ff fb2f 	bl	80227e4 <move_window>
 8023186:	4603      	mov	r3, r0
 8023188:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 802318a:	7dfb      	ldrb	r3, [r7, #23]
 802318c:	2b00      	cmp	r3, #0
 802318e:	d11d      	bne.n	80231cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	6a1b      	ldr	r3, [r3, #32]
 8023194:	781b      	ldrb	r3, [r3, #0]
 8023196:	2be5      	cmp	r3, #229	; 0xe5
 8023198:	d004      	beq.n	80231a4 <dir_alloc+0x50>
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	6a1b      	ldr	r3, [r3, #32]
 802319e:	781b      	ldrb	r3, [r3, #0]
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	d107      	bne.n	80231b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80231a4:	693b      	ldr	r3, [r7, #16]
 80231a6:	3301      	adds	r3, #1
 80231a8:	613b      	str	r3, [r7, #16]
 80231aa:	693a      	ldr	r2, [r7, #16]
 80231ac:	683b      	ldr	r3, [r7, #0]
 80231ae:	429a      	cmp	r2, r3
 80231b0:	d102      	bne.n	80231b8 <dir_alloc+0x64>
 80231b2:	e00c      	b.n	80231ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80231b4:	2300      	movs	r3, #0
 80231b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80231b8:	2101      	movs	r1, #1
 80231ba:	6878      	ldr	r0, [r7, #4]
 80231bc:	f7ff ff05 	bl	8022fca <dir_next>
 80231c0:	4603      	mov	r3, r0
 80231c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80231c4:	7dfb      	ldrb	r3, [r7, #23]
 80231c6:	2b00      	cmp	r3, #0
 80231c8:	d0d7      	beq.n	802317a <dir_alloc+0x26>
 80231ca:	e000      	b.n	80231ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80231cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80231ce:	7dfb      	ldrb	r3, [r7, #23]
 80231d0:	2b04      	cmp	r3, #4
 80231d2:	d101      	bne.n	80231d8 <dir_alloc+0x84>
 80231d4:	2307      	movs	r3, #7
 80231d6:	75fb      	strb	r3, [r7, #23]
	return res;
 80231d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80231da:	4618      	mov	r0, r3
 80231dc:	3718      	adds	r7, #24
 80231de:	46bd      	mov	sp, r7
 80231e0:	bd80      	pop	{r7, pc}

080231e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80231e2:	b580      	push	{r7, lr}
 80231e4:	b084      	sub	sp, #16
 80231e6:	af00      	add	r7, sp, #0
 80231e8:	6078      	str	r0, [r7, #4]
 80231ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80231ec:	683b      	ldr	r3, [r7, #0]
 80231ee:	331a      	adds	r3, #26
 80231f0:	4618      	mov	r0, r3
 80231f2:	f7ff f817 	bl	8022224 <ld_word>
 80231f6:	4603      	mov	r3, r0
 80231f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80231fa:	687b      	ldr	r3, [r7, #4]
 80231fc:	781b      	ldrb	r3, [r3, #0]
 80231fe:	2b03      	cmp	r3, #3
 8023200:	d109      	bne.n	8023216 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8023202:	683b      	ldr	r3, [r7, #0]
 8023204:	3314      	adds	r3, #20
 8023206:	4618      	mov	r0, r3
 8023208:	f7ff f80c 	bl	8022224 <ld_word>
 802320c:	4603      	mov	r3, r0
 802320e:	041b      	lsls	r3, r3, #16
 8023210:	68fa      	ldr	r2, [r7, #12]
 8023212:	4313      	orrs	r3, r2
 8023214:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8023216:	68fb      	ldr	r3, [r7, #12]
}
 8023218:	4618      	mov	r0, r3
 802321a:	3710      	adds	r7, #16
 802321c:	46bd      	mov	sp, r7
 802321e:	bd80      	pop	{r7, pc}

08023220 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8023220:	b580      	push	{r7, lr}
 8023222:	b084      	sub	sp, #16
 8023224:	af00      	add	r7, sp, #0
 8023226:	60f8      	str	r0, [r7, #12]
 8023228:	60b9      	str	r1, [r7, #8]
 802322a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 802322c:	68bb      	ldr	r3, [r7, #8]
 802322e:	331a      	adds	r3, #26
 8023230:	687a      	ldr	r2, [r7, #4]
 8023232:	b292      	uxth	r2, r2
 8023234:	4611      	mov	r1, r2
 8023236:	4618      	mov	r0, r3
 8023238:	f7ff f82f 	bl	802229a <st_word>
	if (fs->fs_type == FS_FAT32) {
 802323c:	68fb      	ldr	r3, [r7, #12]
 802323e:	781b      	ldrb	r3, [r3, #0]
 8023240:	2b03      	cmp	r3, #3
 8023242:	d109      	bne.n	8023258 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8023244:	68bb      	ldr	r3, [r7, #8]
 8023246:	f103 0214 	add.w	r2, r3, #20
 802324a:	687b      	ldr	r3, [r7, #4]
 802324c:	0c1b      	lsrs	r3, r3, #16
 802324e:	b29b      	uxth	r3, r3
 8023250:	4619      	mov	r1, r3
 8023252:	4610      	mov	r0, r2
 8023254:	f7ff f821 	bl	802229a <st_word>
	}
}
 8023258:	bf00      	nop
 802325a:	3710      	adds	r7, #16
 802325c:	46bd      	mov	sp, r7
 802325e:	bd80      	pop	{r7, pc}

08023260 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8023260:	b580      	push	{r7, lr}
 8023262:	b086      	sub	sp, #24
 8023264:	af00      	add	r7, sp, #0
 8023266:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	681b      	ldr	r3, [r3, #0]
 802326c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 802326e:	2100      	movs	r1, #0
 8023270:	6878      	ldr	r0, [r7, #4]
 8023272:	f7ff fe2f 	bl	8022ed4 <dir_sdi>
 8023276:	4603      	mov	r3, r0
 8023278:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 802327a:	7dfb      	ldrb	r3, [r7, #23]
 802327c:	2b00      	cmp	r3, #0
 802327e:	d001      	beq.n	8023284 <dir_find+0x24>
 8023280:	7dfb      	ldrb	r3, [r7, #23]
 8023282:	e03e      	b.n	8023302 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8023284:	687b      	ldr	r3, [r7, #4]
 8023286:	69db      	ldr	r3, [r3, #28]
 8023288:	4619      	mov	r1, r3
 802328a:	6938      	ldr	r0, [r7, #16]
 802328c:	f7ff faaa 	bl	80227e4 <move_window>
 8023290:	4603      	mov	r3, r0
 8023292:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8023294:	7dfb      	ldrb	r3, [r7, #23]
 8023296:	2b00      	cmp	r3, #0
 8023298:	d12f      	bne.n	80232fa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	6a1b      	ldr	r3, [r3, #32]
 802329e:	781b      	ldrb	r3, [r3, #0]
 80232a0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80232a2:	7bfb      	ldrb	r3, [r7, #15]
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	d102      	bne.n	80232ae <dir_find+0x4e>
 80232a8:	2304      	movs	r3, #4
 80232aa:	75fb      	strb	r3, [r7, #23]
 80232ac:	e028      	b.n	8023300 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80232ae:	687b      	ldr	r3, [r7, #4]
 80232b0:	6a1b      	ldr	r3, [r3, #32]
 80232b2:	330b      	adds	r3, #11
 80232b4:	781b      	ldrb	r3, [r3, #0]
 80232b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80232ba:	b2da      	uxtb	r2, r3
 80232bc:	687b      	ldr	r3, [r7, #4]
 80232be:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80232c0:	687b      	ldr	r3, [r7, #4]
 80232c2:	6a1b      	ldr	r3, [r3, #32]
 80232c4:	330b      	adds	r3, #11
 80232c6:	781b      	ldrb	r3, [r3, #0]
 80232c8:	f003 0308 	and.w	r3, r3, #8
 80232cc:	2b00      	cmp	r3, #0
 80232ce:	d10a      	bne.n	80232e6 <dir_find+0x86>
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	6a18      	ldr	r0, [r3, #32]
 80232d4:	687b      	ldr	r3, [r7, #4]
 80232d6:	3324      	adds	r3, #36	; 0x24
 80232d8:	220b      	movs	r2, #11
 80232da:	4619      	mov	r1, r3
 80232dc:	f7ff f85f 	bl	802239e <mem_cmp>
 80232e0:	4603      	mov	r3, r0
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d00b      	beq.n	80232fe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80232e6:	2100      	movs	r1, #0
 80232e8:	6878      	ldr	r0, [r7, #4]
 80232ea:	f7ff fe6e 	bl	8022fca <dir_next>
 80232ee:	4603      	mov	r3, r0
 80232f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80232f2:	7dfb      	ldrb	r3, [r7, #23]
 80232f4:	2b00      	cmp	r3, #0
 80232f6:	d0c5      	beq.n	8023284 <dir_find+0x24>
 80232f8:	e002      	b.n	8023300 <dir_find+0xa0>
		if (res != FR_OK) break;
 80232fa:	bf00      	nop
 80232fc:	e000      	b.n	8023300 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80232fe:	bf00      	nop

	return res;
 8023300:	7dfb      	ldrb	r3, [r7, #23]
}
 8023302:	4618      	mov	r0, r3
 8023304:	3718      	adds	r7, #24
 8023306:	46bd      	mov	sp, r7
 8023308:	bd80      	pop	{r7, pc}

0802330a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 802330a:	b580      	push	{r7, lr}
 802330c:	b084      	sub	sp, #16
 802330e:	af00      	add	r7, sp, #0
 8023310:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8023312:	687b      	ldr	r3, [r7, #4]
 8023314:	681b      	ldr	r3, [r3, #0]
 8023316:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8023318:	2101      	movs	r1, #1
 802331a:	6878      	ldr	r0, [r7, #4]
 802331c:	f7ff ff1a 	bl	8023154 <dir_alloc>
 8023320:	4603      	mov	r3, r0
 8023322:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8023324:	7bfb      	ldrb	r3, [r7, #15]
 8023326:	2b00      	cmp	r3, #0
 8023328:	d11c      	bne.n	8023364 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 802332a:	687b      	ldr	r3, [r7, #4]
 802332c:	69db      	ldr	r3, [r3, #28]
 802332e:	4619      	mov	r1, r3
 8023330:	68b8      	ldr	r0, [r7, #8]
 8023332:	f7ff fa57 	bl	80227e4 <move_window>
 8023336:	4603      	mov	r3, r0
 8023338:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 802333a:	7bfb      	ldrb	r3, [r7, #15]
 802333c:	2b00      	cmp	r3, #0
 802333e:	d111      	bne.n	8023364 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8023340:	687b      	ldr	r3, [r7, #4]
 8023342:	6a1b      	ldr	r3, [r3, #32]
 8023344:	2220      	movs	r2, #32
 8023346:	2100      	movs	r1, #0
 8023348:	4618      	mov	r0, r3
 802334a:	f7ff f80e 	bl	802236a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 802334e:	687b      	ldr	r3, [r7, #4]
 8023350:	6a18      	ldr	r0, [r3, #32]
 8023352:	687b      	ldr	r3, [r7, #4]
 8023354:	3324      	adds	r3, #36	; 0x24
 8023356:	220b      	movs	r2, #11
 8023358:	4619      	mov	r1, r3
 802335a:	f7fe ffe5 	bl	8022328 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 802335e:	68bb      	ldr	r3, [r7, #8]
 8023360:	2201      	movs	r2, #1
 8023362:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8023364:	7bfb      	ldrb	r3, [r7, #15]
}
 8023366:	4618      	mov	r0, r3
 8023368:	3710      	adds	r7, #16
 802336a:	46bd      	mov	sp, r7
 802336c:	bd80      	pop	{r7, pc}
	...

08023370 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8023370:	b580      	push	{r7, lr}
 8023372:	b088      	sub	sp, #32
 8023374:	af00      	add	r7, sp, #0
 8023376:	6078      	str	r0, [r7, #4]
 8023378:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 802337a:	683b      	ldr	r3, [r7, #0]
 802337c:	681b      	ldr	r3, [r3, #0]
 802337e:	60fb      	str	r3, [r7, #12]
 8023380:	687b      	ldr	r3, [r7, #4]
 8023382:	3324      	adds	r3, #36	; 0x24
 8023384:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8023386:	220b      	movs	r2, #11
 8023388:	2120      	movs	r1, #32
 802338a:	68b8      	ldr	r0, [r7, #8]
 802338c:	f7fe ffed 	bl	802236a <mem_set>
	si = i = 0; ni = 8;
 8023390:	2300      	movs	r3, #0
 8023392:	613b      	str	r3, [r7, #16]
 8023394:	693b      	ldr	r3, [r7, #16]
 8023396:	617b      	str	r3, [r7, #20]
 8023398:	2308      	movs	r3, #8
 802339a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 802339c:	697b      	ldr	r3, [r7, #20]
 802339e:	1c5a      	adds	r2, r3, #1
 80233a0:	617a      	str	r2, [r7, #20]
 80233a2:	68fa      	ldr	r2, [r7, #12]
 80233a4:	4413      	add	r3, r2
 80233a6:	781b      	ldrb	r3, [r3, #0]
 80233a8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80233aa:	7ffb      	ldrb	r3, [r7, #31]
 80233ac:	2b20      	cmp	r3, #32
 80233ae:	d94e      	bls.n	802344e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80233b0:	7ffb      	ldrb	r3, [r7, #31]
 80233b2:	2b2f      	cmp	r3, #47	; 0x2f
 80233b4:	d006      	beq.n	80233c4 <create_name+0x54>
 80233b6:	7ffb      	ldrb	r3, [r7, #31]
 80233b8:	2b5c      	cmp	r3, #92	; 0x5c
 80233ba:	d110      	bne.n	80233de <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80233bc:	e002      	b.n	80233c4 <create_name+0x54>
 80233be:	697b      	ldr	r3, [r7, #20]
 80233c0:	3301      	adds	r3, #1
 80233c2:	617b      	str	r3, [r7, #20]
 80233c4:	68fa      	ldr	r2, [r7, #12]
 80233c6:	697b      	ldr	r3, [r7, #20]
 80233c8:	4413      	add	r3, r2
 80233ca:	781b      	ldrb	r3, [r3, #0]
 80233cc:	2b2f      	cmp	r3, #47	; 0x2f
 80233ce:	d0f6      	beq.n	80233be <create_name+0x4e>
 80233d0:	68fa      	ldr	r2, [r7, #12]
 80233d2:	697b      	ldr	r3, [r7, #20]
 80233d4:	4413      	add	r3, r2
 80233d6:	781b      	ldrb	r3, [r3, #0]
 80233d8:	2b5c      	cmp	r3, #92	; 0x5c
 80233da:	d0f0      	beq.n	80233be <create_name+0x4e>
			break;
 80233dc:	e038      	b.n	8023450 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80233de:	7ffb      	ldrb	r3, [r7, #31]
 80233e0:	2b2e      	cmp	r3, #46	; 0x2e
 80233e2:	d003      	beq.n	80233ec <create_name+0x7c>
 80233e4:	693a      	ldr	r2, [r7, #16]
 80233e6:	69bb      	ldr	r3, [r7, #24]
 80233e8:	429a      	cmp	r2, r3
 80233ea:	d30c      	bcc.n	8023406 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80233ec:	69bb      	ldr	r3, [r7, #24]
 80233ee:	2b0b      	cmp	r3, #11
 80233f0:	d002      	beq.n	80233f8 <create_name+0x88>
 80233f2:	7ffb      	ldrb	r3, [r7, #31]
 80233f4:	2b2e      	cmp	r3, #46	; 0x2e
 80233f6:	d001      	beq.n	80233fc <create_name+0x8c>
 80233f8:	2306      	movs	r3, #6
 80233fa:	e044      	b.n	8023486 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80233fc:	2308      	movs	r3, #8
 80233fe:	613b      	str	r3, [r7, #16]
 8023400:	230b      	movs	r3, #11
 8023402:	61bb      	str	r3, [r7, #24]
			continue;
 8023404:	e022      	b.n	802344c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8023406:	f997 301f 	ldrsb.w	r3, [r7, #31]
 802340a:	2b00      	cmp	r3, #0
 802340c:	da04      	bge.n	8023418 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 802340e:	7ffb      	ldrb	r3, [r7, #31]
 8023410:	3b80      	subs	r3, #128	; 0x80
 8023412:	4a1f      	ldr	r2, [pc, #124]	; (8023490 <create_name+0x120>)
 8023414:	5cd3      	ldrb	r3, [r2, r3]
 8023416:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8023418:	7ffb      	ldrb	r3, [r7, #31]
 802341a:	4619      	mov	r1, r3
 802341c:	481d      	ldr	r0, [pc, #116]	; (8023494 <create_name+0x124>)
 802341e:	f7fe ffe5 	bl	80223ec <chk_chr>
 8023422:	4603      	mov	r3, r0
 8023424:	2b00      	cmp	r3, #0
 8023426:	d001      	beq.n	802342c <create_name+0xbc>
 8023428:	2306      	movs	r3, #6
 802342a:	e02c      	b.n	8023486 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 802342c:	7ffb      	ldrb	r3, [r7, #31]
 802342e:	2b60      	cmp	r3, #96	; 0x60
 8023430:	d905      	bls.n	802343e <create_name+0xce>
 8023432:	7ffb      	ldrb	r3, [r7, #31]
 8023434:	2b7a      	cmp	r3, #122	; 0x7a
 8023436:	d802      	bhi.n	802343e <create_name+0xce>
 8023438:	7ffb      	ldrb	r3, [r7, #31]
 802343a:	3b20      	subs	r3, #32
 802343c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 802343e:	693b      	ldr	r3, [r7, #16]
 8023440:	1c5a      	adds	r2, r3, #1
 8023442:	613a      	str	r2, [r7, #16]
 8023444:	68ba      	ldr	r2, [r7, #8]
 8023446:	4413      	add	r3, r2
 8023448:	7ffa      	ldrb	r2, [r7, #31]
 802344a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 802344c:	e7a6      	b.n	802339c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 802344e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8023450:	68fa      	ldr	r2, [r7, #12]
 8023452:	697b      	ldr	r3, [r7, #20]
 8023454:	441a      	add	r2, r3
 8023456:	683b      	ldr	r3, [r7, #0]
 8023458:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 802345a:	693b      	ldr	r3, [r7, #16]
 802345c:	2b00      	cmp	r3, #0
 802345e:	d101      	bne.n	8023464 <create_name+0xf4>
 8023460:	2306      	movs	r3, #6
 8023462:	e010      	b.n	8023486 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8023464:	68bb      	ldr	r3, [r7, #8]
 8023466:	781b      	ldrb	r3, [r3, #0]
 8023468:	2be5      	cmp	r3, #229	; 0xe5
 802346a:	d102      	bne.n	8023472 <create_name+0x102>
 802346c:	68bb      	ldr	r3, [r7, #8]
 802346e:	2205      	movs	r2, #5
 8023470:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8023472:	7ffb      	ldrb	r3, [r7, #31]
 8023474:	2b20      	cmp	r3, #32
 8023476:	d801      	bhi.n	802347c <create_name+0x10c>
 8023478:	2204      	movs	r2, #4
 802347a:	e000      	b.n	802347e <create_name+0x10e>
 802347c:	2200      	movs	r2, #0
 802347e:	68bb      	ldr	r3, [r7, #8]
 8023480:	330b      	adds	r3, #11
 8023482:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8023484:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8023486:	4618      	mov	r0, r3
 8023488:	3720      	adds	r7, #32
 802348a:	46bd      	mov	sp, r7
 802348c:	bd80      	pop	{r7, pc}
 802348e:	bf00      	nop
 8023490:	0802d770 	.word	0x0802d770
 8023494:	0802ccd8 	.word	0x0802ccd8

08023498 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8023498:	b580      	push	{r7, lr}
 802349a:	b086      	sub	sp, #24
 802349c:	af00      	add	r7, sp, #0
 802349e:	6078      	str	r0, [r7, #4]
 80234a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80234a2:	687b      	ldr	r3, [r7, #4]
 80234a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80234a6:	693b      	ldr	r3, [r7, #16]
 80234a8:	681b      	ldr	r3, [r3, #0]
 80234aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80234ac:	e002      	b.n	80234b4 <follow_path+0x1c>
 80234ae:	683b      	ldr	r3, [r7, #0]
 80234b0:	3301      	adds	r3, #1
 80234b2:	603b      	str	r3, [r7, #0]
 80234b4:	683b      	ldr	r3, [r7, #0]
 80234b6:	781b      	ldrb	r3, [r3, #0]
 80234b8:	2b2f      	cmp	r3, #47	; 0x2f
 80234ba:	d0f8      	beq.n	80234ae <follow_path+0x16>
 80234bc:	683b      	ldr	r3, [r7, #0]
 80234be:	781b      	ldrb	r3, [r3, #0]
 80234c0:	2b5c      	cmp	r3, #92	; 0x5c
 80234c2:	d0f4      	beq.n	80234ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80234c4:	693b      	ldr	r3, [r7, #16]
 80234c6:	2200      	movs	r2, #0
 80234c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80234ca:	683b      	ldr	r3, [r7, #0]
 80234cc:	781b      	ldrb	r3, [r3, #0]
 80234ce:	2b1f      	cmp	r3, #31
 80234d0:	d80a      	bhi.n	80234e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80234d2:	687b      	ldr	r3, [r7, #4]
 80234d4:	2280      	movs	r2, #128	; 0x80
 80234d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80234da:	2100      	movs	r1, #0
 80234dc:	6878      	ldr	r0, [r7, #4]
 80234de:	f7ff fcf9 	bl	8022ed4 <dir_sdi>
 80234e2:	4603      	mov	r3, r0
 80234e4:	75fb      	strb	r3, [r7, #23]
 80234e6:	e043      	b.n	8023570 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80234e8:	463b      	mov	r3, r7
 80234ea:	4619      	mov	r1, r3
 80234ec:	6878      	ldr	r0, [r7, #4]
 80234ee:	f7ff ff3f 	bl	8023370 <create_name>
 80234f2:	4603      	mov	r3, r0
 80234f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80234f6:	7dfb      	ldrb	r3, [r7, #23]
 80234f8:	2b00      	cmp	r3, #0
 80234fa:	d134      	bne.n	8023566 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80234fc:	6878      	ldr	r0, [r7, #4]
 80234fe:	f7ff feaf 	bl	8023260 <dir_find>
 8023502:	4603      	mov	r3, r0
 8023504:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802350c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 802350e:	7dfb      	ldrb	r3, [r7, #23]
 8023510:	2b00      	cmp	r3, #0
 8023512:	d00a      	beq.n	802352a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8023514:	7dfb      	ldrb	r3, [r7, #23]
 8023516:	2b04      	cmp	r3, #4
 8023518:	d127      	bne.n	802356a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 802351a:	7afb      	ldrb	r3, [r7, #11]
 802351c:	f003 0304 	and.w	r3, r3, #4
 8023520:	2b00      	cmp	r3, #0
 8023522:	d122      	bne.n	802356a <follow_path+0xd2>
 8023524:	2305      	movs	r3, #5
 8023526:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8023528:	e01f      	b.n	802356a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802352a:	7afb      	ldrb	r3, [r7, #11]
 802352c:	f003 0304 	and.w	r3, r3, #4
 8023530:	2b00      	cmp	r3, #0
 8023532:	d11c      	bne.n	802356e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8023534:	693b      	ldr	r3, [r7, #16]
 8023536:	799b      	ldrb	r3, [r3, #6]
 8023538:	f003 0310 	and.w	r3, r3, #16
 802353c:	2b00      	cmp	r3, #0
 802353e:	d102      	bne.n	8023546 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8023540:	2305      	movs	r3, #5
 8023542:	75fb      	strb	r3, [r7, #23]
 8023544:	e014      	b.n	8023570 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8023546:	68fb      	ldr	r3, [r7, #12]
 8023548:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802354c:	687b      	ldr	r3, [r7, #4]
 802354e:	695b      	ldr	r3, [r3, #20]
 8023550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023554:	4413      	add	r3, r2
 8023556:	4619      	mov	r1, r3
 8023558:	68f8      	ldr	r0, [r7, #12]
 802355a:	f7ff fe42 	bl	80231e2 <ld_clust>
 802355e:	4602      	mov	r2, r0
 8023560:	693b      	ldr	r3, [r7, #16]
 8023562:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8023564:	e7c0      	b.n	80234e8 <follow_path+0x50>
			if (res != FR_OK) break;
 8023566:	bf00      	nop
 8023568:	e002      	b.n	8023570 <follow_path+0xd8>
				break;
 802356a:	bf00      	nop
 802356c:	e000      	b.n	8023570 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802356e:	bf00      	nop
			}
		}
	}

	return res;
 8023570:	7dfb      	ldrb	r3, [r7, #23]
}
 8023572:	4618      	mov	r0, r3
 8023574:	3718      	adds	r7, #24
 8023576:	46bd      	mov	sp, r7
 8023578:	bd80      	pop	{r7, pc}

0802357a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 802357a:	b480      	push	{r7}
 802357c:	b087      	sub	sp, #28
 802357e:	af00      	add	r7, sp, #0
 8023580:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8023582:	f04f 33ff 	mov.w	r3, #4294967295
 8023586:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8023588:	687b      	ldr	r3, [r7, #4]
 802358a:	681b      	ldr	r3, [r3, #0]
 802358c:	2b00      	cmp	r3, #0
 802358e:	d031      	beq.n	80235f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8023590:	687b      	ldr	r3, [r7, #4]
 8023592:	681b      	ldr	r3, [r3, #0]
 8023594:	617b      	str	r3, [r7, #20]
 8023596:	e002      	b.n	802359e <get_ldnumber+0x24>
 8023598:	697b      	ldr	r3, [r7, #20]
 802359a:	3301      	adds	r3, #1
 802359c:	617b      	str	r3, [r7, #20]
 802359e:	697b      	ldr	r3, [r7, #20]
 80235a0:	781b      	ldrb	r3, [r3, #0]
 80235a2:	2b20      	cmp	r3, #32
 80235a4:	d903      	bls.n	80235ae <get_ldnumber+0x34>
 80235a6:	697b      	ldr	r3, [r7, #20]
 80235a8:	781b      	ldrb	r3, [r3, #0]
 80235aa:	2b3a      	cmp	r3, #58	; 0x3a
 80235ac:	d1f4      	bne.n	8023598 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80235ae:	697b      	ldr	r3, [r7, #20]
 80235b0:	781b      	ldrb	r3, [r3, #0]
 80235b2:	2b3a      	cmp	r3, #58	; 0x3a
 80235b4:	d11c      	bne.n	80235f0 <get_ldnumber+0x76>
			tp = *path;
 80235b6:	687b      	ldr	r3, [r7, #4]
 80235b8:	681b      	ldr	r3, [r3, #0]
 80235ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80235bc:	68fb      	ldr	r3, [r7, #12]
 80235be:	1c5a      	adds	r2, r3, #1
 80235c0:	60fa      	str	r2, [r7, #12]
 80235c2:	781b      	ldrb	r3, [r3, #0]
 80235c4:	3b30      	subs	r3, #48	; 0x30
 80235c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80235c8:	68bb      	ldr	r3, [r7, #8]
 80235ca:	2b09      	cmp	r3, #9
 80235cc:	d80e      	bhi.n	80235ec <get_ldnumber+0x72>
 80235ce:	68fa      	ldr	r2, [r7, #12]
 80235d0:	697b      	ldr	r3, [r7, #20]
 80235d2:	429a      	cmp	r2, r3
 80235d4:	d10a      	bne.n	80235ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80235d6:	68bb      	ldr	r3, [r7, #8]
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d107      	bne.n	80235ec <get_ldnumber+0x72>
					vol = (int)i;
 80235dc:	68bb      	ldr	r3, [r7, #8]
 80235de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80235e0:	697b      	ldr	r3, [r7, #20]
 80235e2:	3301      	adds	r3, #1
 80235e4:	617b      	str	r3, [r7, #20]
 80235e6:	687b      	ldr	r3, [r7, #4]
 80235e8:	697a      	ldr	r2, [r7, #20]
 80235ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80235ec:	693b      	ldr	r3, [r7, #16]
 80235ee:	e002      	b.n	80235f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80235f0:	2300      	movs	r3, #0
 80235f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80235f4:	693b      	ldr	r3, [r7, #16]
}
 80235f6:	4618      	mov	r0, r3
 80235f8:	371c      	adds	r7, #28
 80235fa:	46bd      	mov	sp, r7
 80235fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023600:	4770      	bx	lr
	...

08023604 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8023604:	b580      	push	{r7, lr}
 8023606:	b082      	sub	sp, #8
 8023608:	af00      	add	r7, sp, #0
 802360a:	6078      	str	r0, [r7, #4]
 802360c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	2200      	movs	r2, #0
 8023612:	70da      	strb	r2, [r3, #3]
 8023614:	687b      	ldr	r3, [r7, #4]
 8023616:	f04f 32ff 	mov.w	r2, #4294967295
 802361a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 802361c:	6839      	ldr	r1, [r7, #0]
 802361e:	6878      	ldr	r0, [r7, #4]
 8023620:	f7ff f8e0 	bl	80227e4 <move_window>
 8023624:	4603      	mov	r3, r0
 8023626:	2b00      	cmp	r3, #0
 8023628:	d001      	beq.n	802362e <check_fs+0x2a>
 802362a:	2304      	movs	r3, #4
 802362c:	e038      	b.n	80236a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 802362e:	687b      	ldr	r3, [r7, #4]
 8023630:	3334      	adds	r3, #52	; 0x34
 8023632:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8023636:	4618      	mov	r0, r3
 8023638:	f7fe fdf4 	bl	8022224 <ld_word>
 802363c:	4603      	mov	r3, r0
 802363e:	461a      	mov	r2, r3
 8023640:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8023644:	429a      	cmp	r2, r3
 8023646:	d001      	beq.n	802364c <check_fs+0x48>
 8023648:	2303      	movs	r3, #3
 802364a:	e029      	b.n	80236a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 802364c:	687b      	ldr	r3, [r7, #4]
 802364e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8023652:	2be9      	cmp	r3, #233	; 0xe9
 8023654:	d009      	beq.n	802366a <check_fs+0x66>
 8023656:	687b      	ldr	r3, [r7, #4]
 8023658:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802365c:	2beb      	cmp	r3, #235	; 0xeb
 802365e:	d11e      	bne.n	802369e <check_fs+0x9a>
 8023660:	687b      	ldr	r3, [r7, #4]
 8023662:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8023666:	2b90      	cmp	r3, #144	; 0x90
 8023668:	d119      	bne.n	802369e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 802366a:	687b      	ldr	r3, [r7, #4]
 802366c:	3334      	adds	r3, #52	; 0x34
 802366e:	3336      	adds	r3, #54	; 0x36
 8023670:	4618      	mov	r0, r3
 8023672:	f7fe fdef 	bl	8022254 <ld_dword>
 8023676:	4603      	mov	r3, r0
 8023678:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 802367c:	4a0a      	ldr	r2, [pc, #40]	; (80236a8 <check_fs+0xa4>)
 802367e:	4293      	cmp	r3, r2
 8023680:	d101      	bne.n	8023686 <check_fs+0x82>
 8023682:	2300      	movs	r3, #0
 8023684:	e00c      	b.n	80236a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8023686:	687b      	ldr	r3, [r7, #4]
 8023688:	3334      	adds	r3, #52	; 0x34
 802368a:	3352      	adds	r3, #82	; 0x52
 802368c:	4618      	mov	r0, r3
 802368e:	f7fe fde1 	bl	8022254 <ld_dword>
 8023692:	4602      	mov	r2, r0
 8023694:	4b05      	ldr	r3, [pc, #20]	; (80236ac <check_fs+0xa8>)
 8023696:	429a      	cmp	r2, r3
 8023698:	d101      	bne.n	802369e <check_fs+0x9a>
 802369a:	2300      	movs	r3, #0
 802369c:	e000      	b.n	80236a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 802369e:	2302      	movs	r3, #2
}
 80236a0:	4618      	mov	r0, r3
 80236a2:	3708      	adds	r7, #8
 80236a4:	46bd      	mov	sp, r7
 80236a6:	bd80      	pop	{r7, pc}
 80236a8:	00544146 	.word	0x00544146
 80236ac:	33544146 	.word	0x33544146

080236b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80236b0:	b580      	push	{r7, lr}
 80236b2:	b096      	sub	sp, #88	; 0x58
 80236b4:	af00      	add	r7, sp, #0
 80236b6:	60f8      	str	r0, [r7, #12]
 80236b8:	60b9      	str	r1, [r7, #8]
 80236ba:	4613      	mov	r3, r2
 80236bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80236be:	68bb      	ldr	r3, [r7, #8]
 80236c0:	2200      	movs	r2, #0
 80236c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80236c4:	68f8      	ldr	r0, [r7, #12]
 80236c6:	f7ff ff58 	bl	802357a <get_ldnumber>
 80236ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80236cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80236ce:	2b00      	cmp	r3, #0
 80236d0:	da01      	bge.n	80236d6 <find_volume+0x26>
 80236d2:	230b      	movs	r3, #11
 80236d4:	e236      	b.n	8023b44 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80236d6:	4aac      	ldr	r2, [pc, #688]	; (8023988 <find_volume+0x2d8>)
 80236d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80236da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80236de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80236e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80236e2:	2b00      	cmp	r3, #0
 80236e4:	d101      	bne.n	80236ea <find_volume+0x3a>
 80236e6:	230c      	movs	r3, #12
 80236e8:	e22c      	b.n	8023b44 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80236ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80236ec:	f7fe fe99 	bl	8022422 <lock_fs>
 80236f0:	4603      	mov	r3, r0
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	d101      	bne.n	80236fa <find_volume+0x4a>
 80236f6:	230f      	movs	r3, #15
 80236f8:	e224      	b.n	8023b44 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80236fa:	68bb      	ldr	r3, [r7, #8]
 80236fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80236fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8023700:	79fb      	ldrb	r3, [r7, #7]
 8023702:	f023 0301 	bic.w	r3, r3, #1
 8023706:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8023708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802370a:	781b      	ldrb	r3, [r3, #0]
 802370c:	2b00      	cmp	r3, #0
 802370e:	d01a      	beq.n	8023746 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8023710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023712:	785b      	ldrb	r3, [r3, #1]
 8023714:	4618      	mov	r0, r3
 8023716:	f7fe fce7 	bl	80220e8 <disk_status>
 802371a:	4603      	mov	r3, r0
 802371c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8023720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8023724:	f003 0301 	and.w	r3, r3, #1
 8023728:	2b00      	cmp	r3, #0
 802372a:	d10c      	bne.n	8023746 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 802372c:	79fb      	ldrb	r3, [r7, #7]
 802372e:	2b00      	cmp	r3, #0
 8023730:	d007      	beq.n	8023742 <find_volume+0x92>
 8023732:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8023736:	f003 0304 	and.w	r3, r3, #4
 802373a:	2b00      	cmp	r3, #0
 802373c:	d001      	beq.n	8023742 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 802373e:	230a      	movs	r3, #10
 8023740:	e200      	b.n	8023b44 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8023742:	2300      	movs	r3, #0
 8023744:	e1fe      	b.n	8023b44 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8023746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023748:	2200      	movs	r2, #0
 802374a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 802374c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802374e:	b2da      	uxtb	r2, r3
 8023750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023752:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8023754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023756:	785b      	ldrb	r3, [r3, #1]
 8023758:	4618      	mov	r0, r3
 802375a:	f7fe fcdf 	bl	802211c <disk_initialize>
 802375e:	4603      	mov	r3, r0
 8023760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8023764:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8023768:	f003 0301 	and.w	r3, r3, #1
 802376c:	2b00      	cmp	r3, #0
 802376e:	d001      	beq.n	8023774 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8023770:	2303      	movs	r3, #3
 8023772:	e1e7      	b.n	8023b44 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8023774:	79fb      	ldrb	r3, [r7, #7]
 8023776:	2b00      	cmp	r3, #0
 8023778:	d007      	beq.n	802378a <find_volume+0xda>
 802377a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802377e:	f003 0304 	and.w	r3, r3, #4
 8023782:	2b00      	cmp	r3, #0
 8023784:	d001      	beq.n	802378a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8023786:	230a      	movs	r3, #10
 8023788:	e1dc      	b.n	8023b44 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 802378a:	2300      	movs	r3, #0
 802378c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 802378e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8023790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8023792:	f7ff ff37 	bl	8023604 <check_fs>
 8023796:	4603      	mov	r3, r0
 8023798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 802379c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80237a0:	2b02      	cmp	r3, #2
 80237a2:	d14b      	bne.n	802383c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80237a4:	2300      	movs	r3, #0
 80237a6:	643b      	str	r3, [r7, #64]	; 0x40
 80237a8:	e01f      	b.n	80237ea <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80237aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80237ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80237b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80237b2:	011b      	lsls	r3, r3, #4
 80237b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80237b8:	4413      	add	r3, r2
 80237ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80237bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80237be:	3304      	adds	r3, #4
 80237c0:	781b      	ldrb	r3, [r3, #0]
 80237c2:	2b00      	cmp	r3, #0
 80237c4:	d006      	beq.n	80237d4 <find_volume+0x124>
 80237c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80237c8:	3308      	adds	r3, #8
 80237ca:	4618      	mov	r0, r3
 80237cc:	f7fe fd42 	bl	8022254 <ld_dword>
 80237d0:	4602      	mov	r2, r0
 80237d2:	e000      	b.n	80237d6 <find_volume+0x126>
 80237d4:	2200      	movs	r2, #0
 80237d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80237d8:	009b      	lsls	r3, r3, #2
 80237da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80237de:	440b      	add	r3, r1
 80237e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80237e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80237e6:	3301      	adds	r3, #1
 80237e8:	643b      	str	r3, [r7, #64]	; 0x40
 80237ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80237ec:	2b03      	cmp	r3, #3
 80237ee:	d9dc      	bls.n	80237aa <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80237f0:	2300      	movs	r3, #0
 80237f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80237f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80237f6:	2b00      	cmp	r3, #0
 80237f8:	d002      	beq.n	8023800 <find_volume+0x150>
 80237fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80237fc:	3b01      	subs	r3, #1
 80237fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8023800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023802:	009b      	lsls	r3, r3, #2
 8023804:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8023808:	4413      	add	r3, r2
 802380a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802380e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8023810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023812:	2b00      	cmp	r3, #0
 8023814:	d005      	beq.n	8023822 <find_volume+0x172>
 8023816:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8023818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802381a:	f7ff fef3 	bl	8023604 <check_fs>
 802381e:	4603      	mov	r3, r0
 8023820:	e000      	b.n	8023824 <find_volume+0x174>
 8023822:	2303      	movs	r3, #3
 8023824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8023828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802382c:	2b01      	cmp	r3, #1
 802382e:	d905      	bls.n	802383c <find_volume+0x18c>
 8023830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023832:	3301      	adds	r3, #1
 8023834:	643b      	str	r3, [r7, #64]	; 0x40
 8023836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023838:	2b03      	cmp	r3, #3
 802383a:	d9e1      	bls.n	8023800 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 802383c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8023840:	2b04      	cmp	r3, #4
 8023842:	d101      	bne.n	8023848 <find_volume+0x198>
 8023844:	2301      	movs	r3, #1
 8023846:	e17d      	b.n	8023b44 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8023848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802384c:	2b01      	cmp	r3, #1
 802384e:	d901      	bls.n	8023854 <find_volume+0x1a4>
 8023850:	230d      	movs	r3, #13
 8023852:	e177      	b.n	8023b44 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8023854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023856:	3334      	adds	r3, #52	; 0x34
 8023858:	330b      	adds	r3, #11
 802385a:	4618      	mov	r0, r3
 802385c:	f7fe fce2 	bl	8022224 <ld_word>
 8023860:	4603      	mov	r3, r0
 8023862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023866:	d001      	beq.n	802386c <find_volume+0x1bc>
 8023868:	230d      	movs	r3, #13
 802386a:	e16b      	b.n	8023b44 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 802386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802386e:	3334      	adds	r3, #52	; 0x34
 8023870:	3316      	adds	r3, #22
 8023872:	4618      	mov	r0, r3
 8023874:	f7fe fcd6 	bl	8022224 <ld_word>
 8023878:	4603      	mov	r3, r0
 802387a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 802387c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802387e:	2b00      	cmp	r3, #0
 8023880:	d106      	bne.n	8023890 <find_volume+0x1e0>
 8023882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023884:	3334      	adds	r3, #52	; 0x34
 8023886:	3324      	adds	r3, #36	; 0x24
 8023888:	4618      	mov	r0, r3
 802388a:	f7fe fce3 	bl	8022254 <ld_dword>
 802388e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8023890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8023894:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8023896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023898:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802389e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80238a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238a2:	789b      	ldrb	r3, [r3, #2]
 80238a4:	2b01      	cmp	r3, #1
 80238a6:	d005      	beq.n	80238b4 <find_volume+0x204>
 80238a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238aa:	789b      	ldrb	r3, [r3, #2]
 80238ac:	2b02      	cmp	r3, #2
 80238ae:	d001      	beq.n	80238b4 <find_volume+0x204>
 80238b0:	230d      	movs	r3, #13
 80238b2:	e147      	b.n	8023b44 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80238b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238b6:	789b      	ldrb	r3, [r3, #2]
 80238b8:	461a      	mov	r2, r3
 80238ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80238bc:	fb02 f303 	mul.w	r3, r2, r3
 80238c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80238c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80238c8:	b29a      	uxth	r2, r3
 80238ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80238ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238d0:	895b      	ldrh	r3, [r3, #10]
 80238d2:	2b00      	cmp	r3, #0
 80238d4:	d008      	beq.n	80238e8 <find_volume+0x238>
 80238d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238d8:	895b      	ldrh	r3, [r3, #10]
 80238da:	461a      	mov	r2, r3
 80238dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238de:	895b      	ldrh	r3, [r3, #10]
 80238e0:	3b01      	subs	r3, #1
 80238e2:	4013      	ands	r3, r2
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	d001      	beq.n	80238ec <find_volume+0x23c>
 80238e8:	230d      	movs	r3, #13
 80238ea:	e12b      	b.n	8023b44 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80238ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238ee:	3334      	adds	r3, #52	; 0x34
 80238f0:	3311      	adds	r3, #17
 80238f2:	4618      	mov	r0, r3
 80238f4:	f7fe fc96 	bl	8022224 <ld_word>
 80238f8:	4603      	mov	r3, r0
 80238fa:	461a      	mov	r2, r3
 80238fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8023900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023902:	891b      	ldrh	r3, [r3, #8]
 8023904:	f003 030f 	and.w	r3, r3, #15
 8023908:	b29b      	uxth	r3, r3
 802390a:	2b00      	cmp	r3, #0
 802390c:	d001      	beq.n	8023912 <find_volume+0x262>
 802390e:	230d      	movs	r3, #13
 8023910:	e118      	b.n	8023b44 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8023912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023914:	3334      	adds	r3, #52	; 0x34
 8023916:	3313      	adds	r3, #19
 8023918:	4618      	mov	r0, r3
 802391a:	f7fe fc83 	bl	8022224 <ld_word>
 802391e:	4603      	mov	r3, r0
 8023920:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8023922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023924:	2b00      	cmp	r3, #0
 8023926:	d106      	bne.n	8023936 <find_volume+0x286>
 8023928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802392a:	3334      	adds	r3, #52	; 0x34
 802392c:	3320      	adds	r3, #32
 802392e:	4618      	mov	r0, r3
 8023930:	f7fe fc90 	bl	8022254 <ld_dword>
 8023934:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8023936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023938:	3334      	adds	r3, #52	; 0x34
 802393a:	330e      	adds	r3, #14
 802393c:	4618      	mov	r0, r3
 802393e:	f7fe fc71 	bl	8022224 <ld_word>
 8023942:	4603      	mov	r3, r0
 8023944:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8023946:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8023948:	2b00      	cmp	r3, #0
 802394a:	d101      	bne.n	8023950 <find_volume+0x2a0>
 802394c:	230d      	movs	r3, #13
 802394e:	e0f9      	b.n	8023b44 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8023950:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8023952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023954:	4413      	add	r3, r2
 8023956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023958:	8912      	ldrh	r2, [r2, #8]
 802395a:	0912      	lsrs	r2, r2, #4
 802395c:	b292      	uxth	r2, r2
 802395e:	4413      	add	r3, r2
 8023960:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8023962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8023964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023966:	429a      	cmp	r2, r3
 8023968:	d201      	bcs.n	802396e <find_volume+0x2be>
 802396a:	230d      	movs	r3, #13
 802396c:	e0ea      	b.n	8023b44 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 802396e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8023970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023972:	1ad3      	subs	r3, r2, r3
 8023974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023976:	8952      	ldrh	r2, [r2, #10]
 8023978:	fbb3 f3f2 	udiv	r3, r3, r2
 802397c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 802397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023980:	2b00      	cmp	r3, #0
 8023982:	d103      	bne.n	802398c <find_volume+0x2dc>
 8023984:	230d      	movs	r3, #13
 8023986:	e0dd      	b.n	8023b44 <find_volume+0x494>
 8023988:	240013f8 	.word	0x240013f8
		fmt = FS_FAT32;
 802398c:	2303      	movs	r3, #3
 802398e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8023992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023994:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8023998:	4293      	cmp	r3, r2
 802399a:	d802      	bhi.n	80239a2 <find_volume+0x2f2>
 802399c:	2302      	movs	r3, #2
 802399e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80239a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80239a8:	4293      	cmp	r3, r2
 80239aa:	d802      	bhi.n	80239b2 <find_volume+0x302>
 80239ac:	2301      	movs	r3, #1
 80239ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80239b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239b4:	1c9a      	adds	r2, r3, #2
 80239b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239b8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80239ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80239be:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80239c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80239c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80239c4:	441a      	add	r2, r3
 80239c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239c8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80239ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80239cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80239ce:	441a      	add	r2, r3
 80239d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239d2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80239d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80239d8:	2b03      	cmp	r3, #3
 80239da:	d11e      	bne.n	8023a1a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80239dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239de:	3334      	adds	r3, #52	; 0x34
 80239e0:	332a      	adds	r3, #42	; 0x2a
 80239e2:	4618      	mov	r0, r3
 80239e4:	f7fe fc1e 	bl	8022224 <ld_word>
 80239e8:	4603      	mov	r3, r0
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d001      	beq.n	80239f2 <find_volume+0x342>
 80239ee:	230d      	movs	r3, #13
 80239f0:	e0a8      	b.n	8023b44 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80239f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239f4:	891b      	ldrh	r3, [r3, #8]
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	d001      	beq.n	80239fe <find_volume+0x34e>
 80239fa:	230d      	movs	r3, #13
 80239fc:	e0a2      	b.n	8023b44 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80239fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a00:	3334      	adds	r3, #52	; 0x34
 8023a02:	332c      	adds	r3, #44	; 0x2c
 8023a04:	4618      	mov	r0, r3
 8023a06:	f7fe fc25 	bl	8022254 <ld_dword>
 8023a0a:	4602      	mov	r2, r0
 8023a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a0e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8023a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a12:	699b      	ldr	r3, [r3, #24]
 8023a14:	009b      	lsls	r3, r3, #2
 8023a16:	647b      	str	r3, [r7, #68]	; 0x44
 8023a18:	e01f      	b.n	8023a5a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8023a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a1c:	891b      	ldrh	r3, [r3, #8]
 8023a1e:	2b00      	cmp	r3, #0
 8023a20:	d101      	bne.n	8023a26 <find_volume+0x376>
 8023a22:	230d      	movs	r3, #13
 8023a24:	e08e      	b.n	8023b44 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8023a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023a2c:	441a      	add	r2, r3
 8023a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a30:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8023a32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8023a36:	2b02      	cmp	r3, #2
 8023a38:	d103      	bne.n	8023a42 <find_volume+0x392>
 8023a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a3c:	699b      	ldr	r3, [r3, #24]
 8023a3e:	005b      	lsls	r3, r3, #1
 8023a40:	e00a      	b.n	8023a58 <find_volume+0x3a8>
 8023a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a44:	699a      	ldr	r2, [r3, #24]
 8023a46:	4613      	mov	r3, r2
 8023a48:	005b      	lsls	r3, r3, #1
 8023a4a:	4413      	add	r3, r2
 8023a4c:	085a      	lsrs	r2, r3, #1
 8023a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a50:	699b      	ldr	r3, [r3, #24]
 8023a52:	f003 0301 	and.w	r3, r3, #1
 8023a56:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8023a58:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8023a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a5c:	69da      	ldr	r2, [r3, #28]
 8023a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023a60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8023a64:	0a5b      	lsrs	r3, r3, #9
 8023a66:	429a      	cmp	r2, r3
 8023a68:	d201      	bcs.n	8023a6e <find_volume+0x3be>
 8023a6a:	230d      	movs	r3, #13
 8023a6c:	e06a      	b.n	8023b44 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8023a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a70:	f04f 32ff 	mov.w	r2, #4294967295
 8023a74:	615a      	str	r2, [r3, #20]
 8023a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a78:	695a      	ldr	r2, [r3, #20]
 8023a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a7c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8023a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a80:	2280      	movs	r2, #128	; 0x80
 8023a82:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8023a84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8023a88:	2b03      	cmp	r3, #3
 8023a8a:	d149      	bne.n	8023b20 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8023a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a8e:	3334      	adds	r3, #52	; 0x34
 8023a90:	3330      	adds	r3, #48	; 0x30
 8023a92:	4618      	mov	r0, r3
 8023a94:	f7fe fbc6 	bl	8022224 <ld_word>
 8023a98:	4603      	mov	r3, r0
 8023a9a:	2b01      	cmp	r3, #1
 8023a9c:	d140      	bne.n	8023b20 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8023a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023aa0:	3301      	adds	r3, #1
 8023aa2:	4619      	mov	r1, r3
 8023aa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8023aa6:	f7fe fe9d 	bl	80227e4 <move_window>
 8023aaa:	4603      	mov	r3, r0
 8023aac:	2b00      	cmp	r3, #0
 8023aae:	d137      	bne.n	8023b20 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8023ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ab2:	2200      	movs	r2, #0
 8023ab4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8023ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ab8:	3334      	adds	r3, #52	; 0x34
 8023aba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8023abe:	4618      	mov	r0, r3
 8023ac0:	f7fe fbb0 	bl	8022224 <ld_word>
 8023ac4:	4603      	mov	r3, r0
 8023ac6:	461a      	mov	r2, r3
 8023ac8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8023acc:	429a      	cmp	r2, r3
 8023ace:	d127      	bne.n	8023b20 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8023ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ad2:	3334      	adds	r3, #52	; 0x34
 8023ad4:	4618      	mov	r0, r3
 8023ad6:	f7fe fbbd 	bl	8022254 <ld_dword>
 8023ada:	4602      	mov	r2, r0
 8023adc:	4b1b      	ldr	r3, [pc, #108]	; (8023b4c <find_volume+0x49c>)
 8023ade:	429a      	cmp	r2, r3
 8023ae0:	d11e      	bne.n	8023b20 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8023ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ae4:	3334      	adds	r3, #52	; 0x34
 8023ae6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8023aea:	4618      	mov	r0, r3
 8023aec:	f7fe fbb2 	bl	8022254 <ld_dword>
 8023af0:	4602      	mov	r2, r0
 8023af2:	4b17      	ldr	r3, [pc, #92]	; (8023b50 <find_volume+0x4a0>)
 8023af4:	429a      	cmp	r2, r3
 8023af6:	d113      	bne.n	8023b20 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8023af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023afa:	3334      	adds	r3, #52	; 0x34
 8023afc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8023b00:	4618      	mov	r0, r3
 8023b02:	f7fe fba7 	bl	8022254 <ld_dword>
 8023b06:	4602      	mov	r2, r0
 8023b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b0a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8023b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b0e:	3334      	adds	r3, #52	; 0x34
 8023b10:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8023b14:	4618      	mov	r0, r3
 8023b16:	f7fe fb9d 	bl	8022254 <ld_dword>
 8023b1a:	4602      	mov	r2, r0
 8023b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b1e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8023b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b22:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8023b26:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8023b28:	4b0a      	ldr	r3, [pc, #40]	; (8023b54 <find_volume+0x4a4>)
 8023b2a:	881b      	ldrh	r3, [r3, #0]
 8023b2c:	3301      	adds	r3, #1
 8023b2e:	b29a      	uxth	r2, r3
 8023b30:	4b08      	ldr	r3, [pc, #32]	; (8023b54 <find_volume+0x4a4>)
 8023b32:	801a      	strh	r2, [r3, #0]
 8023b34:	4b07      	ldr	r3, [pc, #28]	; (8023b54 <find_volume+0x4a4>)
 8023b36:	881a      	ldrh	r2, [r3, #0]
 8023b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b3a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8023b3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8023b3e:	f7fe fde9 	bl	8022714 <clear_lock>
#endif
	return FR_OK;
 8023b42:	2300      	movs	r3, #0
}
 8023b44:	4618      	mov	r0, r3
 8023b46:	3758      	adds	r7, #88	; 0x58
 8023b48:	46bd      	mov	sp, r7
 8023b4a:	bd80      	pop	{r7, pc}
 8023b4c:	41615252 	.word	0x41615252
 8023b50:	61417272 	.word	0x61417272
 8023b54:	240013fc 	.word	0x240013fc

08023b58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8023b58:	b580      	push	{r7, lr}
 8023b5a:	b084      	sub	sp, #16
 8023b5c:	af00      	add	r7, sp, #0
 8023b5e:	6078      	str	r0, [r7, #4]
 8023b60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8023b62:	2309      	movs	r3, #9
 8023b64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8023b66:	687b      	ldr	r3, [r7, #4]
 8023b68:	2b00      	cmp	r3, #0
 8023b6a:	d02e      	beq.n	8023bca <validate+0x72>
 8023b6c:	687b      	ldr	r3, [r7, #4]
 8023b6e:	681b      	ldr	r3, [r3, #0]
 8023b70:	2b00      	cmp	r3, #0
 8023b72:	d02a      	beq.n	8023bca <validate+0x72>
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	681b      	ldr	r3, [r3, #0]
 8023b78:	781b      	ldrb	r3, [r3, #0]
 8023b7a:	2b00      	cmp	r3, #0
 8023b7c:	d025      	beq.n	8023bca <validate+0x72>
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	889a      	ldrh	r2, [r3, #4]
 8023b82:	687b      	ldr	r3, [r7, #4]
 8023b84:	681b      	ldr	r3, [r3, #0]
 8023b86:	88db      	ldrh	r3, [r3, #6]
 8023b88:	429a      	cmp	r2, r3
 8023b8a:	d11e      	bne.n	8023bca <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8023b8c:	687b      	ldr	r3, [r7, #4]
 8023b8e:	681b      	ldr	r3, [r3, #0]
 8023b90:	4618      	mov	r0, r3
 8023b92:	f7fe fc46 	bl	8022422 <lock_fs>
 8023b96:	4603      	mov	r3, r0
 8023b98:	2b00      	cmp	r3, #0
 8023b9a:	d014      	beq.n	8023bc6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8023b9c:	687b      	ldr	r3, [r7, #4]
 8023b9e:	681b      	ldr	r3, [r3, #0]
 8023ba0:	785b      	ldrb	r3, [r3, #1]
 8023ba2:	4618      	mov	r0, r3
 8023ba4:	f7fe faa0 	bl	80220e8 <disk_status>
 8023ba8:	4603      	mov	r3, r0
 8023baa:	f003 0301 	and.w	r3, r3, #1
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	d102      	bne.n	8023bb8 <validate+0x60>
				res = FR_OK;
 8023bb2:	2300      	movs	r3, #0
 8023bb4:	73fb      	strb	r3, [r7, #15]
 8023bb6:	e008      	b.n	8023bca <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	681b      	ldr	r3, [r3, #0]
 8023bbc:	2100      	movs	r1, #0
 8023bbe:	4618      	mov	r0, r3
 8023bc0:	f7fe fc45 	bl	802244e <unlock_fs>
 8023bc4:	e001      	b.n	8023bca <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8023bc6:	230f      	movs	r3, #15
 8023bc8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8023bca:	7bfb      	ldrb	r3, [r7, #15]
 8023bcc:	2b00      	cmp	r3, #0
 8023bce:	d102      	bne.n	8023bd6 <validate+0x7e>
 8023bd0:	687b      	ldr	r3, [r7, #4]
 8023bd2:	681b      	ldr	r3, [r3, #0]
 8023bd4:	e000      	b.n	8023bd8 <validate+0x80>
 8023bd6:	2300      	movs	r3, #0
 8023bd8:	683a      	ldr	r2, [r7, #0]
 8023bda:	6013      	str	r3, [r2, #0]
	return res;
 8023bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8023bde:	4618      	mov	r0, r3
 8023be0:	3710      	adds	r7, #16
 8023be2:	46bd      	mov	sp, r7
 8023be4:	bd80      	pop	{r7, pc}
	...

08023be8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8023be8:	b580      	push	{r7, lr}
 8023bea:	b088      	sub	sp, #32
 8023bec:	af00      	add	r7, sp, #0
 8023bee:	60f8      	str	r0, [r7, #12]
 8023bf0:	60b9      	str	r1, [r7, #8]
 8023bf2:	4613      	mov	r3, r2
 8023bf4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8023bf6:	68bb      	ldr	r3, [r7, #8]
 8023bf8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8023bfa:	f107 0310 	add.w	r3, r7, #16
 8023bfe:	4618      	mov	r0, r3
 8023c00:	f7ff fcbb 	bl	802357a <get_ldnumber>
 8023c04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8023c06:	69fb      	ldr	r3, [r7, #28]
 8023c08:	2b00      	cmp	r3, #0
 8023c0a:	da01      	bge.n	8023c10 <f_mount+0x28>
 8023c0c:	230b      	movs	r3, #11
 8023c0e:	e048      	b.n	8023ca2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8023c10:	4a26      	ldr	r2, [pc, #152]	; (8023cac <f_mount+0xc4>)
 8023c12:	69fb      	ldr	r3, [r7, #28]
 8023c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023c18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8023c1a:	69bb      	ldr	r3, [r7, #24]
 8023c1c:	2b00      	cmp	r3, #0
 8023c1e:	d00f      	beq.n	8023c40 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8023c20:	69b8      	ldr	r0, [r7, #24]
 8023c22:	f7fe fd77 	bl	8022714 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8023c26:	69bb      	ldr	r3, [r7, #24]
 8023c28:	68db      	ldr	r3, [r3, #12]
 8023c2a:	4618      	mov	r0, r3
 8023c2c:	f000 fcd8 	bl	80245e0 <ff_del_syncobj>
 8023c30:	4603      	mov	r3, r0
 8023c32:	2b00      	cmp	r3, #0
 8023c34:	d101      	bne.n	8023c3a <f_mount+0x52>
 8023c36:	2302      	movs	r3, #2
 8023c38:	e033      	b.n	8023ca2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8023c3a:	69bb      	ldr	r3, [r7, #24]
 8023c3c:	2200      	movs	r2, #0
 8023c3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8023c40:	68fb      	ldr	r3, [r7, #12]
 8023c42:	2b00      	cmp	r3, #0
 8023c44:	d00f      	beq.n	8023c66 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8023c46:	68fb      	ldr	r3, [r7, #12]
 8023c48:	2200      	movs	r2, #0
 8023c4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8023c4c:	69fb      	ldr	r3, [r7, #28]
 8023c4e:	b2da      	uxtb	r2, r3
 8023c50:	68fb      	ldr	r3, [r7, #12]
 8023c52:	330c      	adds	r3, #12
 8023c54:	4619      	mov	r1, r3
 8023c56:	4610      	mov	r0, r2
 8023c58:	f000 fca7 	bl	80245aa <ff_cre_syncobj>
 8023c5c:	4603      	mov	r3, r0
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	d101      	bne.n	8023c66 <f_mount+0x7e>
 8023c62:	2302      	movs	r3, #2
 8023c64:	e01d      	b.n	8023ca2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8023c66:	68fa      	ldr	r2, [r7, #12]
 8023c68:	4910      	ldr	r1, [pc, #64]	; (8023cac <f_mount+0xc4>)
 8023c6a:	69fb      	ldr	r3, [r7, #28]
 8023c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8023c70:	68fb      	ldr	r3, [r7, #12]
 8023c72:	2b00      	cmp	r3, #0
 8023c74:	d002      	beq.n	8023c7c <f_mount+0x94>
 8023c76:	79fb      	ldrb	r3, [r7, #7]
 8023c78:	2b01      	cmp	r3, #1
 8023c7a:	d001      	beq.n	8023c80 <f_mount+0x98>
 8023c7c:	2300      	movs	r3, #0
 8023c7e:	e010      	b.n	8023ca2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8023c80:	f107 010c 	add.w	r1, r7, #12
 8023c84:	f107 0308 	add.w	r3, r7, #8
 8023c88:	2200      	movs	r2, #0
 8023c8a:	4618      	mov	r0, r3
 8023c8c:	f7ff fd10 	bl	80236b0 <find_volume>
 8023c90:	4603      	mov	r3, r0
 8023c92:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8023c94:	68fb      	ldr	r3, [r7, #12]
 8023c96:	7dfa      	ldrb	r2, [r7, #23]
 8023c98:	4611      	mov	r1, r2
 8023c9a:	4618      	mov	r0, r3
 8023c9c:	f7fe fbd7 	bl	802244e <unlock_fs>
 8023ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8023ca2:	4618      	mov	r0, r3
 8023ca4:	3720      	adds	r7, #32
 8023ca6:	46bd      	mov	sp, r7
 8023ca8:	bd80      	pop	{r7, pc}
 8023caa:	bf00      	nop
 8023cac:	240013f8 	.word	0x240013f8

08023cb0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8023cb0:	b580      	push	{r7, lr}
 8023cb2:	b098      	sub	sp, #96	; 0x60
 8023cb4:	af00      	add	r7, sp, #0
 8023cb6:	60f8      	str	r0, [r7, #12]
 8023cb8:	60b9      	str	r1, [r7, #8]
 8023cba:	4613      	mov	r3, r2
 8023cbc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8023cbe:	68fb      	ldr	r3, [r7, #12]
 8023cc0:	2b00      	cmp	r3, #0
 8023cc2:	d101      	bne.n	8023cc8 <f_open+0x18>
 8023cc4:	2309      	movs	r3, #9
 8023cc6:	e1b4      	b.n	8024032 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8023cc8:	79fb      	ldrb	r3, [r7, #7]
 8023cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023cce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8023cd0:	79fa      	ldrb	r2, [r7, #7]
 8023cd2:	f107 0110 	add.w	r1, r7, #16
 8023cd6:	f107 0308 	add.w	r3, r7, #8
 8023cda:	4618      	mov	r0, r3
 8023cdc:	f7ff fce8 	bl	80236b0 <find_volume>
 8023ce0:	4603      	mov	r3, r0
 8023ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8023ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	f040 8191 	bne.w	8024012 <f_open+0x362>
		dj.obj.fs = fs;
 8023cf0:	693b      	ldr	r3, [r7, #16]
 8023cf2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8023cf4:	68ba      	ldr	r2, [r7, #8]
 8023cf6:	f107 0314 	add.w	r3, r7, #20
 8023cfa:	4611      	mov	r1, r2
 8023cfc:	4618      	mov	r0, r3
 8023cfe:	f7ff fbcb 	bl	8023498 <follow_path>
 8023d02:	4603      	mov	r3, r0
 8023d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8023d08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023d0c:	2b00      	cmp	r3, #0
 8023d0e:	d11a      	bne.n	8023d46 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8023d10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8023d14:	b25b      	sxtb	r3, r3
 8023d16:	2b00      	cmp	r3, #0
 8023d18:	da03      	bge.n	8023d22 <f_open+0x72>
				res = FR_INVALID_NAME;
 8023d1a:	2306      	movs	r3, #6
 8023d1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023d20:	e011      	b.n	8023d46 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8023d22:	79fb      	ldrb	r3, [r7, #7]
 8023d24:	f023 0301 	bic.w	r3, r3, #1
 8023d28:	2b00      	cmp	r3, #0
 8023d2a:	bf14      	ite	ne
 8023d2c:	2301      	movne	r3, #1
 8023d2e:	2300      	moveq	r3, #0
 8023d30:	b2db      	uxtb	r3, r3
 8023d32:	461a      	mov	r2, r3
 8023d34:	f107 0314 	add.w	r3, r7, #20
 8023d38:	4611      	mov	r1, r2
 8023d3a:	4618      	mov	r0, r3
 8023d3c:	f7fe fba2 	bl	8022484 <chk_lock>
 8023d40:	4603      	mov	r3, r0
 8023d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8023d46:	79fb      	ldrb	r3, [r7, #7]
 8023d48:	f003 031c 	and.w	r3, r3, #28
 8023d4c:	2b00      	cmp	r3, #0
 8023d4e:	d07f      	beq.n	8023e50 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8023d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023d54:	2b00      	cmp	r3, #0
 8023d56:	d017      	beq.n	8023d88 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8023d58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023d5c:	2b04      	cmp	r3, #4
 8023d5e:	d10e      	bne.n	8023d7e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8023d60:	f7fe fbec 	bl	802253c <enq_lock>
 8023d64:	4603      	mov	r3, r0
 8023d66:	2b00      	cmp	r3, #0
 8023d68:	d006      	beq.n	8023d78 <f_open+0xc8>
 8023d6a:	f107 0314 	add.w	r3, r7, #20
 8023d6e:	4618      	mov	r0, r3
 8023d70:	f7ff facb 	bl	802330a <dir_register>
 8023d74:	4603      	mov	r3, r0
 8023d76:	e000      	b.n	8023d7a <f_open+0xca>
 8023d78:	2312      	movs	r3, #18
 8023d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8023d7e:	79fb      	ldrb	r3, [r7, #7]
 8023d80:	f043 0308 	orr.w	r3, r3, #8
 8023d84:	71fb      	strb	r3, [r7, #7]
 8023d86:	e010      	b.n	8023daa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8023d88:	7ebb      	ldrb	r3, [r7, #26]
 8023d8a:	f003 0311 	and.w	r3, r3, #17
 8023d8e:	2b00      	cmp	r3, #0
 8023d90:	d003      	beq.n	8023d9a <f_open+0xea>
					res = FR_DENIED;
 8023d92:	2307      	movs	r3, #7
 8023d94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023d98:	e007      	b.n	8023daa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8023d9a:	79fb      	ldrb	r3, [r7, #7]
 8023d9c:	f003 0304 	and.w	r3, r3, #4
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	d002      	beq.n	8023daa <f_open+0xfa>
 8023da4:	2308      	movs	r3, #8
 8023da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8023daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023dae:	2b00      	cmp	r3, #0
 8023db0:	d168      	bne.n	8023e84 <f_open+0x1d4>
 8023db2:	79fb      	ldrb	r3, [r7, #7]
 8023db4:	f003 0308 	and.w	r3, r3, #8
 8023db8:	2b00      	cmp	r3, #0
 8023dba:	d063      	beq.n	8023e84 <f_open+0x1d4>
				dw = GET_FATTIME();
 8023dbc:	f7fd ff3e 	bl	8021c3c <get_fattime>
 8023dc0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8023dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023dc4:	330e      	adds	r3, #14
 8023dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8023dc8:	4618      	mov	r0, r3
 8023dca:	f7fe fa81 	bl	80222d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8023dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023dd0:	3316      	adds	r3, #22
 8023dd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8023dd4:	4618      	mov	r0, r3
 8023dd6:	f7fe fa7b 	bl	80222d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8023dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023ddc:	330b      	adds	r3, #11
 8023dde:	2220      	movs	r2, #32
 8023de0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8023de2:	693b      	ldr	r3, [r7, #16]
 8023de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023de6:	4611      	mov	r1, r2
 8023de8:	4618      	mov	r0, r3
 8023dea:	f7ff f9fa 	bl	80231e2 <ld_clust>
 8023dee:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8023df0:	693b      	ldr	r3, [r7, #16]
 8023df2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023df4:	2200      	movs	r2, #0
 8023df6:	4618      	mov	r0, r3
 8023df8:	f7ff fa12 	bl	8023220 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8023dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023dfe:	331c      	adds	r3, #28
 8023e00:	2100      	movs	r1, #0
 8023e02:	4618      	mov	r0, r3
 8023e04:	f7fe fa64 	bl	80222d0 <st_dword>
					fs->wflag = 1;
 8023e08:	693b      	ldr	r3, [r7, #16]
 8023e0a:	2201      	movs	r2, #1
 8023e0c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8023e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023e10:	2b00      	cmp	r3, #0
 8023e12:	d037      	beq.n	8023e84 <f_open+0x1d4>
						dw = fs->winsect;
 8023e14:	693b      	ldr	r3, [r7, #16]
 8023e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e18:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8023e1a:	f107 0314 	add.w	r3, r7, #20
 8023e1e:	2200      	movs	r2, #0
 8023e20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8023e22:	4618      	mov	r0, r3
 8023e24:	f7fe ff25 	bl	8022c72 <remove_chain>
 8023e28:	4603      	mov	r3, r0
 8023e2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8023e2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023e32:	2b00      	cmp	r3, #0
 8023e34:	d126      	bne.n	8023e84 <f_open+0x1d4>
							res = move_window(fs, dw);
 8023e36:	693b      	ldr	r3, [r7, #16]
 8023e38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8023e3a:	4618      	mov	r0, r3
 8023e3c:	f7fe fcd2 	bl	80227e4 <move_window>
 8023e40:	4603      	mov	r3, r0
 8023e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8023e46:	693b      	ldr	r3, [r7, #16]
 8023e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8023e4a:	3a01      	subs	r2, #1
 8023e4c:	611a      	str	r2, [r3, #16]
 8023e4e:	e019      	b.n	8023e84 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8023e50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023e54:	2b00      	cmp	r3, #0
 8023e56:	d115      	bne.n	8023e84 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8023e58:	7ebb      	ldrb	r3, [r7, #26]
 8023e5a:	f003 0310 	and.w	r3, r3, #16
 8023e5e:	2b00      	cmp	r3, #0
 8023e60:	d003      	beq.n	8023e6a <f_open+0x1ba>
					res = FR_NO_FILE;
 8023e62:	2304      	movs	r3, #4
 8023e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023e68:	e00c      	b.n	8023e84 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8023e6a:	79fb      	ldrb	r3, [r7, #7]
 8023e6c:	f003 0302 	and.w	r3, r3, #2
 8023e70:	2b00      	cmp	r3, #0
 8023e72:	d007      	beq.n	8023e84 <f_open+0x1d4>
 8023e74:	7ebb      	ldrb	r3, [r7, #26]
 8023e76:	f003 0301 	and.w	r3, r3, #1
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	d002      	beq.n	8023e84 <f_open+0x1d4>
						res = FR_DENIED;
 8023e7e:	2307      	movs	r3, #7
 8023e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8023e84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	d128      	bne.n	8023ede <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8023e8c:	79fb      	ldrb	r3, [r7, #7]
 8023e8e:	f003 0308 	and.w	r3, r3, #8
 8023e92:	2b00      	cmp	r3, #0
 8023e94:	d003      	beq.n	8023e9e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8023e96:	79fb      	ldrb	r3, [r7, #7]
 8023e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023e9c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8023e9e:	693b      	ldr	r3, [r7, #16]
 8023ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023ea2:	68fb      	ldr	r3, [r7, #12]
 8023ea4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8023ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023ea8:	68fb      	ldr	r3, [r7, #12]
 8023eaa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8023eac:	79fb      	ldrb	r3, [r7, #7]
 8023eae:	f023 0301 	bic.w	r3, r3, #1
 8023eb2:	2b00      	cmp	r3, #0
 8023eb4:	bf14      	ite	ne
 8023eb6:	2301      	movne	r3, #1
 8023eb8:	2300      	moveq	r3, #0
 8023eba:	b2db      	uxtb	r3, r3
 8023ebc:	461a      	mov	r2, r3
 8023ebe:	f107 0314 	add.w	r3, r7, #20
 8023ec2:	4611      	mov	r1, r2
 8023ec4:	4618      	mov	r0, r3
 8023ec6:	f7fe fb5b 	bl	8022580 <inc_lock>
 8023eca:	4602      	mov	r2, r0
 8023ecc:	68fb      	ldr	r3, [r7, #12]
 8023ece:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8023ed0:	68fb      	ldr	r3, [r7, #12]
 8023ed2:	691b      	ldr	r3, [r3, #16]
 8023ed4:	2b00      	cmp	r3, #0
 8023ed6:	d102      	bne.n	8023ede <f_open+0x22e>
 8023ed8:	2302      	movs	r3, #2
 8023eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8023ede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	f040 8095 	bne.w	8024012 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8023ee8:	693b      	ldr	r3, [r7, #16]
 8023eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023eec:	4611      	mov	r1, r2
 8023eee:	4618      	mov	r0, r3
 8023ef0:	f7ff f977 	bl	80231e2 <ld_clust>
 8023ef4:	4602      	mov	r2, r0
 8023ef6:	68fb      	ldr	r3, [r7, #12]
 8023ef8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8023efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023efc:	331c      	adds	r3, #28
 8023efe:	4618      	mov	r0, r3
 8023f00:	f7fe f9a8 	bl	8022254 <ld_dword>
 8023f04:	4602      	mov	r2, r0
 8023f06:	68fb      	ldr	r3, [r7, #12]
 8023f08:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8023f0a:	68fb      	ldr	r3, [r7, #12]
 8023f0c:	2200      	movs	r2, #0
 8023f0e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8023f10:	693a      	ldr	r2, [r7, #16]
 8023f12:	68fb      	ldr	r3, [r7, #12]
 8023f14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8023f16:	693b      	ldr	r3, [r7, #16]
 8023f18:	88da      	ldrh	r2, [r3, #6]
 8023f1a:	68fb      	ldr	r3, [r7, #12]
 8023f1c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8023f1e:	68fb      	ldr	r3, [r7, #12]
 8023f20:	79fa      	ldrb	r2, [r7, #7]
 8023f22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8023f24:	68fb      	ldr	r3, [r7, #12]
 8023f26:	2200      	movs	r2, #0
 8023f28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8023f2a:	68fb      	ldr	r3, [r7, #12]
 8023f2c:	2200      	movs	r2, #0
 8023f2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8023f30:	68fb      	ldr	r3, [r7, #12]
 8023f32:	2200      	movs	r2, #0
 8023f34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8023f36:	68fb      	ldr	r3, [r7, #12]
 8023f38:	3330      	adds	r3, #48	; 0x30
 8023f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023f3e:	2100      	movs	r1, #0
 8023f40:	4618      	mov	r0, r3
 8023f42:	f7fe fa12 	bl	802236a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8023f46:	79fb      	ldrb	r3, [r7, #7]
 8023f48:	f003 0320 	and.w	r3, r3, #32
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	d060      	beq.n	8024012 <f_open+0x362>
 8023f50:	68fb      	ldr	r3, [r7, #12]
 8023f52:	68db      	ldr	r3, [r3, #12]
 8023f54:	2b00      	cmp	r3, #0
 8023f56:	d05c      	beq.n	8024012 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8023f58:	68fb      	ldr	r3, [r7, #12]
 8023f5a:	68da      	ldr	r2, [r3, #12]
 8023f5c:	68fb      	ldr	r3, [r7, #12]
 8023f5e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8023f60:	693b      	ldr	r3, [r7, #16]
 8023f62:	895b      	ldrh	r3, [r3, #10]
 8023f64:	025b      	lsls	r3, r3, #9
 8023f66:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8023f68:	68fb      	ldr	r3, [r7, #12]
 8023f6a:	689b      	ldr	r3, [r3, #8]
 8023f6c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8023f6e:	68fb      	ldr	r3, [r7, #12]
 8023f70:	68db      	ldr	r3, [r3, #12]
 8023f72:	657b      	str	r3, [r7, #84]	; 0x54
 8023f74:	e016      	b.n	8023fa4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8023f76:	68fb      	ldr	r3, [r7, #12]
 8023f78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8023f7a:	4618      	mov	r0, r3
 8023f7c:	f7fe fced 	bl	802295a <get_fat>
 8023f80:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8023f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023f84:	2b01      	cmp	r3, #1
 8023f86:	d802      	bhi.n	8023f8e <f_open+0x2de>
 8023f88:	2302      	movs	r3, #2
 8023f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8023f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f94:	d102      	bne.n	8023f9c <f_open+0x2ec>
 8023f96:	2301      	movs	r3, #1
 8023f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8023f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8023f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023fa0:	1ad3      	subs	r3, r2, r3
 8023fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8023fa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023fa8:	2b00      	cmp	r3, #0
 8023faa:	d103      	bne.n	8023fb4 <f_open+0x304>
 8023fac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8023fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023fb0:	429a      	cmp	r2, r3
 8023fb2:	d8e0      	bhi.n	8023f76 <f_open+0x2c6>
				}
				fp->clust = clst;
 8023fb4:	68fb      	ldr	r3, [r7, #12]
 8023fb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8023fb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8023fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8023fbe:	2b00      	cmp	r3, #0
 8023fc0:	d127      	bne.n	8024012 <f_open+0x362>
 8023fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023fc8:	2b00      	cmp	r3, #0
 8023fca:	d022      	beq.n	8024012 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8023fcc:	693b      	ldr	r3, [r7, #16]
 8023fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8023fd0:	4618      	mov	r0, r3
 8023fd2:	f7fe fca3 	bl	802291c <clust2sect>
 8023fd6:	6478      	str	r0, [r7, #68]	; 0x44
 8023fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023fda:	2b00      	cmp	r3, #0
 8023fdc:	d103      	bne.n	8023fe6 <f_open+0x336>
						res = FR_INT_ERR;
 8023fde:	2302      	movs	r3, #2
 8023fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8023fe4:	e015      	b.n	8024012 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8023fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023fe8:	0a5a      	lsrs	r2, r3, #9
 8023fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023fec:	441a      	add	r2, r3
 8023fee:	68fb      	ldr	r3, [r7, #12]
 8023ff0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8023ff2:	693b      	ldr	r3, [r7, #16]
 8023ff4:	7858      	ldrb	r0, [r3, #1]
 8023ff6:	68fb      	ldr	r3, [r7, #12]
 8023ff8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8023ffc:	68fb      	ldr	r3, [r7, #12]
 8023ffe:	6a1a      	ldr	r2, [r3, #32]
 8024000:	2301      	movs	r3, #1
 8024002:	f7fe f8b1 	bl	8022168 <disk_read>
 8024006:	4603      	mov	r3, r0
 8024008:	2b00      	cmp	r3, #0
 802400a:	d002      	beq.n	8024012 <f_open+0x362>
 802400c:	2301      	movs	r3, #1
 802400e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8024012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024016:	2b00      	cmp	r3, #0
 8024018:	d002      	beq.n	8024020 <f_open+0x370>
 802401a:	68fb      	ldr	r3, [r7, #12]
 802401c:	2200      	movs	r2, #0
 802401e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8024020:	693b      	ldr	r3, [r7, #16]
 8024022:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8024026:	4611      	mov	r1, r2
 8024028:	4618      	mov	r0, r3
 802402a:	f7fe fa10 	bl	802244e <unlock_fs>
 802402e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8024032:	4618      	mov	r0, r3
 8024034:	3760      	adds	r7, #96	; 0x60
 8024036:	46bd      	mov	sp, r7
 8024038:	bd80      	pop	{r7, pc}

0802403a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 802403a:	b580      	push	{r7, lr}
 802403c:	b08c      	sub	sp, #48	; 0x30
 802403e:	af00      	add	r7, sp, #0
 8024040:	60f8      	str	r0, [r7, #12]
 8024042:	60b9      	str	r1, [r7, #8]
 8024044:	607a      	str	r2, [r7, #4]
 8024046:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8024048:	68bb      	ldr	r3, [r7, #8]
 802404a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 802404c:	683b      	ldr	r3, [r7, #0]
 802404e:	2200      	movs	r2, #0
 8024050:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8024052:	68fb      	ldr	r3, [r7, #12]
 8024054:	f107 0210 	add.w	r2, r7, #16
 8024058:	4611      	mov	r1, r2
 802405a:	4618      	mov	r0, r3
 802405c:	f7ff fd7c 	bl	8023b58 <validate>
 8024060:	4603      	mov	r3, r0
 8024062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8024066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802406a:	2b00      	cmp	r3, #0
 802406c:	d107      	bne.n	802407e <f_write+0x44>
 802406e:	68fb      	ldr	r3, [r7, #12]
 8024070:	7d5b      	ldrb	r3, [r3, #21]
 8024072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8024076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802407a:	2b00      	cmp	r3, #0
 802407c:	d009      	beq.n	8024092 <f_write+0x58>
 802407e:	693b      	ldr	r3, [r7, #16]
 8024080:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8024084:	4611      	mov	r1, r2
 8024086:	4618      	mov	r0, r3
 8024088:	f7fe f9e1 	bl	802244e <unlock_fs>
 802408c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8024090:	e173      	b.n	802437a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8024092:	68fb      	ldr	r3, [r7, #12]
 8024094:	7d1b      	ldrb	r3, [r3, #20]
 8024096:	f003 0302 	and.w	r3, r3, #2
 802409a:	2b00      	cmp	r3, #0
 802409c:	d106      	bne.n	80240ac <f_write+0x72>
 802409e:	693b      	ldr	r3, [r7, #16]
 80240a0:	2107      	movs	r1, #7
 80240a2:	4618      	mov	r0, r3
 80240a4:	f7fe f9d3 	bl	802244e <unlock_fs>
 80240a8:	2307      	movs	r3, #7
 80240aa:	e166      	b.n	802437a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80240ac:	68fb      	ldr	r3, [r7, #12]
 80240ae:	699a      	ldr	r2, [r3, #24]
 80240b0:	687b      	ldr	r3, [r7, #4]
 80240b2:	441a      	add	r2, r3
 80240b4:	68fb      	ldr	r3, [r7, #12]
 80240b6:	699b      	ldr	r3, [r3, #24]
 80240b8:	429a      	cmp	r2, r3
 80240ba:	f080 814b 	bcs.w	8024354 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80240be:	68fb      	ldr	r3, [r7, #12]
 80240c0:	699b      	ldr	r3, [r3, #24]
 80240c2:	43db      	mvns	r3, r3
 80240c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80240c6:	e145      	b.n	8024354 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80240c8:	68fb      	ldr	r3, [r7, #12]
 80240ca:	699b      	ldr	r3, [r3, #24]
 80240cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80240d0:	2b00      	cmp	r3, #0
 80240d2:	f040 8101 	bne.w	80242d8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80240d6:	68fb      	ldr	r3, [r7, #12]
 80240d8:	699b      	ldr	r3, [r3, #24]
 80240da:	0a5b      	lsrs	r3, r3, #9
 80240dc:	693a      	ldr	r2, [r7, #16]
 80240de:	8952      	ldrh	r2, [r2, #10]
 80240e0:	3a01      	subs	r2, #1
 80240e2:	4013      	ands	r3, r2
 80240e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80240e6:	69bb      	ldr	r3, [r7, #24]
 80240e8:	2b00      	cmp	r3, #0
 80240ea:	d14d      	bne.n	8024188 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80240ec:	68fb      	ldr	r3, [r7, #12]
 80240ee:	699b      	ldr	r3, [r3, #24]
 80240f0:	2b00      	cmp	r3, #0
 80240f2:	d10c      	bne.n	802410e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80240f4:	68fb      	ldr	r3, [r7, #12]
 80240f6:	689b      	ldr	r3, [r3, #8]
 80240f8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80240fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	d11a      	bne.n	8024136 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8024100:	68fb      	ldr	r3, [r7, #12]
 8024102:	2100      	movs	r1, #0
 8024104:	4618      	mov	r0, r3
 8024106:	f7fe fe19 	bl	8022d3c <create_chain>
 802410a:	62b8      	str	r0, [r7, #40]	; 0x28
 802410c:	e013      	b.n	8024136 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 802410e:	68fb      	ldr	r3, [r7, #12]
 8024110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024112:	2b00      	cmp	r3, #0
 8024114:	d007      	beq.n	8024126 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8024116:	68fb      	ldr	r3, [r7, #12]
 8024118:	699b      	ldr	r3, [r3, #24]
 802411a:	4619      	mov	r1, r3
 802411c:	68f8      	ldr	r0, [r7, #12]
 802411e:	f7fe fea5 	bl	8022e6c <clmt_clust>
 8024122:	62b8      	str	r0, [r7, #40]	; 0x28
 8024124:	e007      	b.n	8024136 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8024126:	68fa      	ldr	r2, [r7, #12]
 8024128:	68fb      	ldr	r3, [r7, #12]
 802412a:	69db      	ldr	r3, [r3, #28]
 802412c:	4619      	mov	r1, r3
 802412e:	4610      	mov	r0, r2
 8024130:	f7fe fe04 	bl	8022d3c <create_chain>
 8024134:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8024136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024138:	2b00      	cmp	r3, #0
 802413a:	f000 8110 	beq.w	802435e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 802413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024140:	2b01      	cmp	r3, #1
 8024142:	d109      	bne.n	8024158 <f_write+0x11e>
 8024144:	68fb      	ldr	r3, [r7, #12]
 8024146:	2202      	movs	r2, #2
 8024148:	755a      	strb	r2, [r3, #21]
 802414a:	693b      	ldr	r3, [r7, #16]
 802414c:	2102      	movs	r1, #2
 802414e:	4618      	mov	r0, r3
 8024150:	f7fe f97d 	bl	802244e <unlock_fs>
 8024154:	2302      	movs	r3, #2
 8024156:	e110      	b.n	802437a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8024158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802415e:	d109      	bne.n	8024174 <f_write+0x13a>
 8024160:	68fb      	ldr	r3, [r7, #12]
 8024162:	2201      	movs	r2, #1
 8024164:	755a      	strb	r2, [r3, #21]
 8024166:	693b      	ldr	r3, [r7, #16]
 8024168:	2101      	movs	r1, #1
 802416a:	4618      	mov	r0, r3
 802416c:	f7fe f96f 	bl	802244e <unlock_fs>
 8024170:	2301      	movs	r3, #1
 8024172:	e102      	b.n	802437a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8024174:	68fb      	ldr	r3, [r7, #12]
 8024176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024178:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 802417a:	68fb      	ldr	r3, [r7, #12]
 802417c:	689b      	ldr	r3, [r3, #8]
 802417e:	2b00      	cmp	r3, #0
 8024180:	d102      	bne.n	8024188 <f_write+0x14e>
 8024182:	68fb      	ldr	r3, [r7, #12]
 8024184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024186:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8024188:	68fb      	ldr	r3, [r7, #12]
 802418a:	7d1b      	ldrb	r3, [r3, #20]
 802418c:	b25b      	sxtb	r3, r3
 802418e:	2b00      	cmp	r3, #0
 8024190:	da1d      	bge.n	80241ce <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024192:	693b      	ldr	r3, [r7, #16]
 8024194:	7858      	ldrb	r0, [r3, #1]
 8024196:	68fb      	ldr	r3, [r7, #12]
 8024198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802419c:	68fb      	ldr	r3, [r7, #12]
 802419e:	6a1a      	ldr	r2, [r3, #32]
 80241a0:	2301      	movs	r3, #1
 80241a2:	f7fe f801 	bl	80221a8 <disk_write>
 80241a6:	4603      	mov	r3, r0
 80241a8:	2b00      	cmp	r3, #0
 80241aa:	d009      	beq.n	80241c0 <f_write+0x186>
 80241ac:	68fb      	ldr	r3, [r7, #12]
 80241ae:	2201      	movs	r2, #1
 80241b0:	755a      	strb	r2, [r3, #21]
 80241b2:	693b      	ldr	r3, [r7, #16]
 80241b4:	2101      	movs	r1, #1
 80241b6:	4618      	mov	r0, r3
 80241b8:	f7fe f949 	bl	802244e <unlock_fs>
 80241bc:	2301      	movs	r3, #1
 80241be:	e0dc      	b.n	802437a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80241c0:	68fb      	ldr	r3, [r7, #12]
 80241c2:	7d1b      	ldrb	r3, [r3, #20]
 80241c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80241c8:	b2da      	uxtb	r2, r3
 80241ca:	68fb      	ldr	r3, [r7, #12]
 80241cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80241ce:	693a      	ldr	r2, [r7, #16]
 80241d0:	68fb      	ldr	r3, [r7, #12]
 80241d2:	69db      	ldr	r3, [r3, #28]
 80241d4:	4619      	mov	r1, r3
 80241d6:	4610      	mov	r0, r2
 80241d8:	f7fe fba0 	bl	802291c <clust2sect>
 80241dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80241de:	697b      	ldr	r3, [r7, #20]
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	d109      	bne.n	80241f8 <f_write+0x1be>
 80241e4:	68fb      	ldr	r3, [r7, #12]
 80241e6:	2202      	movs	r2, #2
 80241e8:	755a      	strb	r2, [r3, #21]
 80241ea:	693b      	ldr	r3, [r7, #16]
 80241ec:	2102      	movs	r1, #2
 80241ee:	4618      	mov	r0, r3
 80241f0:	f7fe f92d 	bl	802244e <unlock_fs>
 80241f4:	2302      	movs	r3, #2
 80241f6:	e0c0      	b.n	802437a <f_write+0x340>
			sect += csect;
 80241f8:	697a      	ldr	r2, [r7, #20]
 80241fa:	69bb      	ldr	r3, [r7, #24]
 80241fc:	4413      	add	r3, r2
 80241fe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8024200:	687b      	ldr	r3, [r7, #4]
 8024202:	0a5b      	lsrs	r3, r3, #9
 8024204:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8024206:	6a3b      	ldr	r3, [r7, #32]
 8024208:	2b00      	cmp	r3, #0
 802420a:	d041      	beq.n	8024290 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 802420c:	69ba      	ldr	r2, [r7, #24]
 802420e:	6a3b      	ldr	r3, [r7, #32]
 8024210:	4413      	add	r3, r2
 8024212:	693a      	ldr	r2, [r7, #16]
 8024214:	8952      	ldrh	r2, [r2, #10]
 8024216:	4293      	cmp	r3, r2
 8024218:	d905      	bls.n	8024226 <f_write+0x1ec>
					cc = fs->csize - csect;
 802421a:	693b      	ldr	r3, [r7, #16]
 802421c:	895b      	ldrh	r3, [r3, #10]
 802421e:	461a      	mov	r2, r3
 8024220:	69bb      	ldr	r3, [r7, #24]
 8024222:	1ad3      	subs	r3, r2, r3
 8024224:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024226:	693b      	ldr	r3, [r7, #16]
 8024228:	7858      	ldrb	r0, [r3, #1]
 802422a:	6a3b      	ldr	r3, [r7, #32]
 802422c:	697a      	ldr	r2, [r7, #20]
 802422e:	69f9      	ldr	r1, [r7, #28]
 8024230:	f7fd ffba 	bl	80221a8 <disk_write>
 8024234:	4603      	mov	r3, r0
 8024236:	2b00      	cmp	r3, #0
 8024238:	d009      	beq.n	802424e <f_write+0x214>
 802423a:	68fb      	ldr	r3, [r7, #12]
 802423c:	2201      	movs	r2, #1
 802423e:	755a      	strb	r2, [r3, #21]
 8024240:	693b      	ldr	r3, [r7, #16]
 8024242:	2101      	movs	r1, #1
 8024244:	4618      	mov	r0, r3
 8024246:	f7fe f902 	bl	802244e <unlock_fs>
 802424a:	2301      	movs	r3, #1
 802424c:	e095      	b.n	802437a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 802424e:	68fb      	ldr	r3, [r7, #12]
 8024250:	6a1a      	ldr	r2, [r3, #32]
 8024252:	697b      	ldr	r3, [r7, #20]
 8024254:	1ad3      	subs	r3, r2, r3
 8024256:	6a3a      	ldr	r2, [r7, #32]
 8024258:	429a      	cmp	r2, r3
 802425a:	d915      	bls.n	8024288 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 802425c:	68fb      	ldr	r3, [r7, #12]
 802425e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8024262:	68fb      	ldr	r3, [r7, #12]
 8024264:	6a1a      	ldr	r2, [r3, #32]
 8024266:	697b      	ldr	r3, [r7, #20]
 8024268:	1ad3      	subs	r3, r2, r3
 802426a:	025b      	lsls	r3, r3, #9
 802426c:	69fa      	ldr	r2, [r7, #28]
 802426e:	4413      	add	r3, r2
 8024270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024274:	4619      	mov	r1, r3
 8024276:	f7fe f857 	bl	8022328 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 802427a:	68fb      	ldr	r3, [r7, #12]
 802427c:	7d1b      	ldrb	r3, [r3, #20]
 802427e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024282:	b2da      	uxtb	r2, r3
 8024284:	68fb      	ldr	r3, [r7, #12]
 8024286:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8024288:	6a3b      	ldr	r3, [r7, #32]
 802428a:	025b      	lsls	r3, r3, #9
 802428c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 802428e:	e044      	b.n	802431a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8024290:	68fb      	ldr	r3, [r7, #12]
 8024292:	6a1b      	ldr	r3, [r3, #32]
 8024294:	697a      	ldr	r2, [r7, #20]
 8024296:	429a      	cmp	r2, r3
 8024298:	d01b      	beq.n	80242d2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 802429a:	68fb      	ldr	r3, [r7, #12]
 802429c:	699a      	ldr	r2, [r3, #24]
 802429e:	68fb      	ldr	r3, [r7, #12]
 80242a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80242a2:	429a      	cmp	r2, r3
 80242a4:	d215      	bcs.n	80242d2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80242a6:	693b      	ldr	r3, [r7, #16]
 80242a8:	7858      	ldrb	r0, [r3, #1]
 80242aa:	68fb      	ldr	r3, [r7, #12]
 80242ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80242b0:	2301      	movs	r3, #1
 80242b2:	697a      	ldr	r2, [r7, #20]
 80242b4:	f7fd ff58 	bl	8022168 <disk_read>
 80242b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80242ba:	2b00      	cmp	r3, #0
 80242bc:	d009      	beq.n	80242d2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80242be:	68fb      	ldr	r3, [r7, #12]
 80242c0:	2201      	movs	r2, #1
 80242c2:	755a      	strb	r2, [r3, #21]
 80242c4:	693b      	ldr	r3, [r7, #16]
 80242c6:	2101      	movs	r1, #1
 80242c8:	4618      	mov	r0, r3
 80242ca:	f7fe f8c0 	bl	802244e <unlock_fs>
 80242ce:	2301      	movs	r3, #1
 80242d0:	e053      	b.n	802437a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80242d2:	68fb      	ldr	r3, [r7, #12]
 80242d4:	697a      	ldr	r2, [r7, #20]
 80242d6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80242d8:	68fb      	ldr	r3, [r7, #12]
 80242da:	699b      	ldr	r3, [r3, #24]
 80242dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80242e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80242e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80242e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80242e8:	687b      	ldr	r3, [r7, #4]
 80242ea:	429a      	cmp	r2, r3
 80242ec:	d901      	bls.n	80242f2 <f_write+0x2b8>
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80242f2:	68fb      	ldr	r3, [r7, #12]
 80242f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80242f8:	68fb      	ldr	r3, [r7, #12]
 80242fa:	699b      	ldr	r3, [r3, #24]
 80242fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024300:	4413      	add	r3, r2
 8024302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024304:	69f9      	ldr	r1, [r7, #28]
 8024306:	4618      	mov	r0, r3
 8024308:	f7fe f80e 	bl	8022328 <mem_cpy>
		fp->flag |= FA_DIRTY;
 802430c:	68fb      	ldr	r3, [r7, #12]
 802430e:	7d1b      	ldrb	r3, [r3, #20]
 8024310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8024314:	b2da      	uxtb	r2, r3
 8024316:	68fb      	ldr	r3, [r7, #12]
 8024318:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 802431a:	69fa      	ldr	r2, [r7, #28]
 802431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802431e:	4413      	add	r3, r2
 8024320:	61fb      	str	r3, [r7, #28]
 8024322:	68fb      	ldr	r3, [r7, #12]
 8024324:	699a      	ldr	r2, [r3, #24]
 8024326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024328:	441a      	add	r2, r3
 802432a:	68fb      	ldr	r3, [r7, #12]
 802432c:	619a      	str	r2, [r3, #24]
 802432e:	68fb      	ldr	r3, [r7, #12]
 8024330:	68da      	ldr	r2, [r3, #12]
 8024332:	68fb      	ldr	r3, [r7, #12]
 8024334:	699b      	ldr	r3, [r3, #24]
 8024336:	429a      	cmp	r2, r3
 8024338:	bf38      	it	cc
 802433a:	461a      	movcc	r2, r3
 802433c:	68fb      	ldr	r3, [r7, #12]
 802433e:	60da      	str	r2, [r3, #12]
 8024340:	683b      	ldr	r3, [r7, #0]
 8024342:	681a      	ldr	r2, [r3, #0]
 8024344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024346:	441a      	add	r2, r3
 8024348:	683b      	ldr	r3, [r7, #0]
 802434a:	601a      	str	r2, [r3, #0]
 802434c:	687a      	ldr	r2, [r7, #4]
 802434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024350:	1ad3      	subs	r3, r2, r3
 8024352:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8024354:	687b      	ldr	r3, [r7, #4]
 8024356:	2b00      	cmp	r3, #0
 8024358:	f47f aeb6 	bne.w	80240c8 <f_write+0x8e>
 802435c:	e000      	b.n	8024360 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 802435e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8024360:	68fb      	ldr	r3, [r7, #12]
 8024362:	7d1b      	ldrb	r3, [r3, #20]
 8024364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024368:	b2da      	uxtb	r2, r3
 802436a:	68fb      	ldr	r3, [r7, #12]
 802436c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 802436e:	693b      	ldr	r3, [r7, #16]
 8024370:	2100      	movs	r1, #0
 8024372:	4618      	mov	r0, r3
 8024374:	f7fe f86b 	bl	802244e <unlock_fs>
 8024378:	2300      	movs	r3, #0
}
 802437a:	4618      	mov	r0, r3
 802437c:	3730      	adds	r7, #48	; 0x30
 802437e:	46bd      	mov	sp, r7
 8024380:	bd80      	pop	{r7, pc}

08024382 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8024382:	b580      	push	{r7, lr}
 8024384:	b086      	sub	sp, #24
 8024386:	af00      	add	r7, sp, #0
 8024388:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 802438a:	687b      	ldr	r3, [r7, #4]
 802438c:	f107 0208 	add.w	r2, r7, #8
 8024390:	4611      	mov	r1, r2
 8024392:	4618      	mov	r0, r3
 8024394:	f7ff fbe0 	bl	8023b58 <validate>
 8024398:	4603      	mov	r3, r0
 802439a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 802439c:	7dfb      	ldrb	r3, [r7, #23]
 802439e:	2b00      	cmp	r3, #0
 80243a0:	d16d      	bne.n	802447e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80243a2:	687b      	ldr	r3, [r7, #4]
 80243a4:	7d1b      	ldrb	r3, [r3, #20]
 80243a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	d067      	beq.n	802447e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80243ae:	687b      	ldr	r3, [r7, #4]
 80243b0:	7d1b      	ldrb	r3, [r3, #20]
 80243b2:	b25b      	sxtb	r3, r3
 80243b4:	2b00      	cmp	r3, #0
 80243b6:	da1a      	bge.n	80243ee <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80243b8:	68bb      	ldr	r3, [r7, #8]
 80243ba:	7858      	ldrb	r0, [r3, #1]
 80243bc:	687b      	ldr	r3, [r7, #4]
 80243be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80243c2:	687b      	ldr	r3, [r7, #4]
 80243c4:	6a1a      	ldr	r2, [r3, #32]
 80243c6:	2301      	movs	r3, #1
 80243c8:	f7fd feee 	bl	80221a8 <disk_write>
 80243cc:	4603      	mov	r3, r0
 80243ce:	2b00      	cmp	r3, #0
 80243d0:	d006      	beq.n	80243e0 <f_sync+0x5e>
 80243d2:	68bb      	ldr	r3, [r7, #8]
 80243d4:	2101      	movs	r1, #1
 80243d6:	4618      	mov	r0, r3
 80243d8:	f7fe f839 	bl	802244e <unlock_fs>
 80243dc:	2301      	movs	r3, #1
 80243de:	e055      	b.n	802448c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80243e0:	687b      	ldr	r3, [r7, #4]
 80243e2:	7d1b      	ldrb	r3, [r3, #20]
 80243e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80243e8:	b2da      	uxtb	r2, r3
 80243ea:	687b      	ldr	r3, [r7, #4]
 80243ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80243ee:	f7fd fc25 	bl	8021c3c <get_fattime>
 80243f2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80243f4:	68ba      	ldr	r2, [r7, #8]
 80243f6:	687b      	ldr	r3, [r7, #4]
 80243f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80243fa:	4619      	mov	r1, r3
 80243fc:	4610      	mov	r0, r2
 80243fe:	f7fe f9f1 	bl	80227e4 <move_window>
 8024402:	4603      	mov	r3, r0
 8024404:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8024406:	7dfb      	ldrb	r3, [r7, #23]
 8024408:	2b00      	cmp	r3, #0
 802440a:	d138      	bne.n	802447e <f_sync+0xfc>
					dir = fp->dir_ptr;
 802440c:	687b      	ldr	r3, [r7, #4]
 802440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024410:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8024412:	68fb      	ldr	r3, [r7, #12]
 8024414:	330b      	adds	r3, #11
 8024416:	781a      	ldrb	r2, [r3, #0]
 8024418:	68fb      	ldr	r3, [r7, #12]
 802441a:	330b      	adds	r3, #11
 802441c:	f042 0220 	orr.w	r2, r2, #32
 8024420:	b2d2      	uxtb	r2, r2
 8024422:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	6818      	ldr	r0, [r3, #0]
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	689b      	ldr	r3, [r3, #8]
 802442c:	461a      	mov	r2, r3
 802442e:	68f9      	ldr	r1, [r7, #12]
 8024430:	f7fe fef6 	bl	8023220 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8024434:	68fb      	ldr	r3, [r7, #12]
 8024436:	f103 021c 	add.w	r2, r3, #28
 802443a:	687b      	ldr	r3, [r7, #4]
 802443c:	68db      	ldr	r3, [r3, #12]
 802443e:	4619      	mov	r1, r3
 8024440:	4610      	mov	r0, r2
 8024442:	f7fd ff45 	bl	80222d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8024446:	68fb      	ldr	r3, [r7, #12]
 8024448:	3316      	adds	r3, #22
 802444a:	6939      	ldr	r1, [r7, #16]
 802444c:	4618      	mov	r0, r3
 802444e:	f7fd ff3f 	bl	80222d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8024452:	68fb      	ldr	r3, [r7, #12]
 8024454:	3312      	adds	r3, #18
 8024456:	2100      	movs	r1, #0
 8024458:	4618      	mov	r0, r3
 802445a:	f7fd ff1e 	bl	802229a <st_word>
					fs->wflag = 1;
 802445e:	68bb      	ldr	r3, [r7, #8]
 8024460:	2201      	movs	r2, #1
 8024462:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8024464:	68bb      	ldr	r3, [r7, #8]
 8024466:	4618      	mov	r0, r3
 8024468:	f7fe f9ea 	bl	8022840 <sync_fs>
 802446c:	4603      	mov	r3, r0
 802446e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8024470:	687b      	ldr	r3, [r7, #4]
 8024472:	7d1b      	ldrb	r3, [r3, #20]
 8024474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024478:	b2da      	uxtb	r2, r3
 802447a:	687b      	ldr	r3, [r7, #4]
 802447c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 802447e:	68bb      	ldr	r3, [r7, #8]
 8024480:	7dfa      	ldrb	r2, [r7, #23]
 8024482:	4611      	mov	r1, r2
 8024484:	4618      	mov	r0, r3
 8024486:	f7fd ffe2 	bl	802244e <unlock_fs>
 802448a:	7dfb      	ldrb	r3, [r7, #23]
}
 802448c:	4618      	mov	r0, r3
 802448e:	3718      	adds	r7, #24
 8024490:	46bd      	mov	sp, r7
 8024492:	bd80      	pop	{r7, pc}

08024494 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8024494:	b580      	push	{r7, lr}
 8024496:	b084      	sub	sp, #16
 8024498:	af00      	add	r7, sp, #0
 802449a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 802449c:	6878      	ldr	r0, [r7, #4]
 802449e:	f7ff ff70 	bl	8024382 <f_sync>
 80244a2:	4603      	mov	r3, r0
 80244a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80244a6:	7bfb      	ldrb	r3, [r7, #15]
 80244a8:	2b00      	cmp	r3, #0
 80244aa:	d11d      	bne.n	80244e8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80244ac:	687b      	ldr	r3, [r7, #4]
 80244ae:	f107 0208 	add.w	r2, r7, #8
 80244b2:	4611      	mov	r1, r2
 80244b4:	4618      	mov	r0, r3
 80244b6:	f7ff fb4f 	bl	8023b58 <validate>
 80244ba:	4603      	mov	r3, r0
 80244bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80244be:	7bfb      	ldrb	r3, [r7, #15]
 80244c0:	2b00      	cmp	r3, #0
 80244c2:	d111      	bne.n	80244e8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	691b      	ldr	r3, [r3, #16]
 80244c8:	4618      	mov	r0, r3
 80244ca:	f7fe f8e7 	bl	802269c <dec_lock>
 80244ce:	4603      	mov	r3, r0
 80244d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80244d2:	7bfb      	ldrb	r3, [r7, #15]
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	d102      	bne.n	80244de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80244d8:	687b      	ldr	r3, [r7, #4]
 80244da:	2200      	movs	r2, #0
 80244dc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80244de:	68bb      	ldr	r3, [r7, #8]
 80244e0:	2100      	movs	r1, #0
 80244e2:	4618      	mov	r0, r3
 80244e4:	f7fd ffb3 	bl	802244e <unlock_fs>
#endif
		}
	}
	return res;
 80244e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80244ea:	4618      	mov	r0, r3
 80244ec:	3710      	adds	r7, #16
 80244ee:	46bd      	mov	sp, r7
 80244f0:	bd80      	pop	{r7, pc}
	...

080244f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80244f4:	b480      	push	{r7}
 80244f6:	b087      	sub	sp, #28
 80244f8:	af00      	add	r7, sp, #0
 80244fa:	60f8      	str	r0, [r7, #12]
 80244fc:	60b9      	str	r1, [r7, #8]
 80244fe:	4613      	mov	r3, r2
 8024500:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8024502:	2301      	movs	r3, #1
 8024504:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8024506:	2300      	movs	r3, #0
 8024508:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 802450a:	4b1f      	ldr	r3, [pc, #124]	; (8024588 <FATFS_LinkDriverEx+0x94>)
 802450c:	7a5b      	ldrb	r3, [r3, #9]
 802450e:	b2db      	uxtb	r3, r3
 8024510:	2b00      	cmp	r3, #0
 8024512:	d131      	bne.n	8024578 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8024514:	4b1c      	ldr	r3, [pc, #112]	; (8024588 <FATFS_LinkDriverEx+0x94>)
 8024516:	7a5b      	ldrb	r3, [r3, #9]
 8024518:	b2db      	uxtb	r3, r3
 802451a:	461a      	mov	r2, r3
 802451c:	4b1a      	ldr	r3, [pc, #104]	; (8024588 <FATFS_LinkDriverEx+0x94>)
 802451e:	2100      	movs	r1, #0
 8024520:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8024522:	4b19      	ldr	r3, [pc, #100]	; (8024588 <FATFS_LinkDriverEx+0x94>)
 8024524:	7a5b      	ldrb	r3, [r3, #9]
 8024526:	b2db      	uxtb	r3, r3
 8024528:	4a17      	ldr	r2, [pc, #92]	; (8024588 <FATFS_LinkDriverEx+0x94>)
 802452a:	009b      	lsls	r3, r3, #2
 802452c:	4413      	add	r3, r2
 802452e:	68fa      	ldr	r2, [r7, #12]
 8024530:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8024532:	4b15      	ldr	r3, [pc, #84]	; (8024588 <FATFS_LinkDriverEx+0x94>)
 8024534:	7a5b      	ldrb	r3, [r3, #9]
 8024536:	b2db      	uxtb	r3, r3
 8024538:	461a      	mov	r2, r3
 802453a:	4b13      	ldr	r3, [pc, #76]	; (8024588 <FATFS_LinkDriverEx+0x94>)
 802453c:	4413      	add	r3, r2
 802453e:	79fa      	ldrb	r2, [r7, #7]
 8024540:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8024542:	4b11      	ldr	r3, [pc, #68]	; (8024588 <FATFS_LinkDriverEx+0x94>)
 8024544:	7a5b      	ldrb	r3, [r3, #9]
 8024546:	b2db      	uxtb	r3, r3
 8024548:	1c5a      	adds	r2, r3, #1
 802454a:	b2d1      	uxtb	r1, r2
 802454c:	4a0e      	ldr	r2, [pc, #56]	; (8024588 <FATFS_LinkDriverEx+0x94>)
 802454e:	7251      	strb	r1, [r2, #9]
 8024550:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8024552:	7dbb      	ldrb	r3, [r7, #22]
 8024554:	3330      	adds	r3, #48	; 0x30
 8024556:	b2da      	uxtb	r2, r3
 8024558:	68bb      	ldr	r3, [r7, #8]
 802455a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 802455c:	68bb      	ldr	r3, [r7, #8]
 802455e:	3301      	adds	r3, #1
 8024560:	223a      	movs	r2, #58	; 0x3a
 8024562:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8024564:	68bb      	ldr	r3, [r7, #8]
 8024566:	3302      	adds	r3, #2
 8024568:	222f      	movs	r2, #47	; 0x2f
 802456a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 802456c:	68bb      	ldr	r3, [r7, #8]
 802456e:	3303      	adds	r3, #3
 8024570:	2200      	movs	r2, #0
 8024572:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8024574:	2300      	movs	r3, #0
 8024576:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8024578:	7dfb      	ldrb	r3, [r7, #23]
}
 802457a:	4618      	mov	r0, r3
 802457c:	371c      	adds	r7, #28
 802457e:	46bd      	mov	sp, r7
 8024580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024584:	4770      	bx	lr
 8024586:	bf00      	nop
 8024588:	24001420 	.word	0x24001420

0802458c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 802458c:	b580      	push	{r7, lr}
 802458e:	b082      	sub	sp, #8
 8024590:	af00      	add	r7, sp, #0
 8024592:	6078      	str	r0, [r7, #4]
 8024594:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8024596:	2200      	movs	r2, #0
 8024598:	6839      	ldr	r1, [r7, #0]
 802459a:	6878      	ldr	r0, [r7, #4]
 802459c:	f7ff ffaa 	bl	80244f4 <FATFS_LinkDriverEx>
 80245a0:	4603      	mov	r3, r0
}
 80245a2:	4618      	mov	r0, r3
 80245a4:	3708      	adds	r7, #8
 80245a6:	46bd      	mov	sp, r7
 80245a8:	bd80      	pop	{r7, pc}

080245aa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80245aa:	b580      	push	{r7, lr}
 80245ac:	b084      	sub	sp, #16
 80245ae:	af00      	add	r7, sp, #0
 80245b0:	4603      	mov	r3, r0
 80245b2:	6039      	str	r1, [r7, #0]
 80245b4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80245b6:	2200      	movs	r2, #0
 80245b8:	2101      	movs	r1, #1
 80245ba:	2001      	movs	r0, #1
 80245bc:	f000 fbbe 	bl	8024d3c <osSemaphoreNew>
 80245c0:	4602      	mov	r2, r0
 80245c2:	683b      	ldr	r3, [r7, #0]
 80245c4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80245c6:	683b      	ldr	r3, [r7, #0]
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	2b00      	cmp	r3, #0
 80245cc:	bf14      	ite	ne
 80245ce:	2301      	movne	r3, #1
 80245d0:	2300      	moveq	r3, #0
 80245d2:	b2db      	uxtb	r3, r3
 80245d4:	60fb      	str	r3, [r7, #12]

    return ret;
 80245d6:	68fb      	ldr	r3, [r7, #12]
}
 80245d8:	4618      	mov	r0, r3
 80245da:	3710      	adds	r7, #16
 80245dc:	46bd      	mov	sp, r7
 80245de:	bd80      	pop	{r7, pc}

080245e0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80245e0:	b580      	push	{r7, lr}
 80245e2:	b082      	sub	sp, #8
 80245e4:	af00      	add	r7, sp, #0
 80245e6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80245e8:	6878      	ldr	r0, [r7, #4]
 80245ea:	f000 fd03 	bl	8024ff4 <osSemaphoreDelete>
#endif
    return 1;
 80245ee:	2301      	movs	r3, #1
}
 80245f0:	4618      	mov	r0, r3
 80245f2:	3708      	adds	r7, #8
 80245f4:	46bd      	mov	sp, r7
 80245f6:	bd80      	pop	{r7, pc}

080245f8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80245f8:	b580      	push	{r7, lr}
 80245fa:	b084      	sub	sp, #16
 80245fc:	af00      	add	r7, sp, #0
 80245fe:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8024600:	2300      	movs	r3, #0
 8024602:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8024604:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8024608:	6878      	ldr	r0, [r7, #4]
 802460a:	f000 fc35 	bl	8024e78 <osSemaphoreAcquire>
 802460e:	4603      	mov	r3, r0
 8024610:	2b00      	cmp	r3, #0
 8024612:	d101      	bne.n	8024618 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8024614:	2301      	movs	r3, #1
 8024616:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8024618:	68fb      	ldr	r3, [r7, #12]
}
 802461a:	4618      	mov	r0, r3
 802461c:	3710      	adds	r7, #16
 802461e:	46bd      	mov	sp, r7
 8024620:	bd80      	pop	{r7, pc}

08024622 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8024622:	b580      	push	{r7, lr}
 8024624:	b082      	sub	sp, #8
 8024626:	af00      	add	r7, sp, #0
 8024628:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 802462a:	6878      	ldr	r0, [r7, #4]
 802462c:	f000 fc8a 	bl	8024f44 <osSemaphoreRelease>
#endif
}
 8024630:	bf00      	nop
 8024632:	3708      	adds	r7, #8
 8024634:	46bd      	mov	sp, r7
 8024636:	bd80      	pop	{r7, pc}

08024638 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8024638:	b480      	push	{r7}
 802463a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 802463c:	bf00      	nop
 802463e:	46bd      	mov	sp, r7
 8024640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024644:	4770      	bx	lr
	...

08024648 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8024648:	b480      	push	{r7}
 802464a:	b085      	sub	sp, #20
 802464c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802464e:	f3ef 8305 	mrs	r3, IPSR
 8024652:	60bb      	str	r3, [r7, #8]
  return(result);
 8024654:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8024656:	2b00      	cmp	r3, #0
 8024658:	d10f      	bne.n	802467a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802465a:	f3ef 8310 	mrs	r3, PRIMASK
 802465e:	607b      	str	r3, [r7, #4]
  return(result);
 8024660:	687b      	ldr	r3, [r7, #4]
 8024662:	2b00      	cmp	r3, #0
 8024664:	d105      	bne.n	8024672 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024666:	f3ef 8311 	mrs	r3, BASEPRI
 802466a:	603b      	str	r3, [r7, #0]
  return(result);
 802466c:	683b      	ldr	r3, [r7, #0]
 802466e:	2b00      	cmp	r3, #0
 8024670:	d007      	beq.n	8024682 <osKernelInitialize+0x3a>
 8024672:	4b0e      	ldr	r3, [pc, #56]	; (80246ac <osKernelInitialize+0x64>)
 8024674:	681b      	ldr	r3, [r3, #0]
 8024676:	2b02      	cmp	r3, #2
 8024678:	d103      	bne.n	8024682 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 802467a:	f06f 0305 	mvn.w	r3, #5
 802467e:	60fb      	str	r3, [r7, #12]
 8024680:	e00c      	b.n	802469c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8024682:	4b0a      	ldr	r3, [pc, #40]	; (80246ac <osKernelInitialize+0x64>)
 8024684:	681b      	ldr	r3, [r3, #0]
 8024686:	2b00      	cmp	r3, #0
 8024688:	d105      	bne.n	8024696 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 802468a:	4b08      	ldr	r3, [pc, #32]	; (80246ac <osKernelInitialize+0x64>)
 802468c:	2201      	movs	r2, #1
 802468e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8024690:	2300      	movs	r3, #0
 8024692:	60fb      	str	r3, [r7, #12]
 8024694:	e002      	b.n	802469c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8024696:	f04f 33ff 	mov.w	r3, #4294967295
 802469a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 802469c:	68fb      	ldr	r3, [r7, #12]
}
 802469e:	4618      	mov	r0, r3
 80246a0:	3714      	adds	r7, #20
 80246a2:	46bd      	mov	sp, r7
 80246a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246a8:	4770      	bx	lr
 80246aa:	bf00      	nop
 80246ac:	2400142c 	.word	0x2400142c

080246b0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80246b0:	b580      	push	{r7, lr}
 80246b2:	b082      	sub	sp, #8
 80246b4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80246b6:	f002 fe57 	bl	8027368 <xTaskGetSchedulerState>
 80246ba:	4603      	mov	r3, r0
 80246bc:	2b00      	cmp	r3, #0
 80246be:	d004      	beq.n	80246ca <osKernelGetState+0x1a>
 80246c0:	2b02      	cmp	r3, #2
 80246c2:	d105      	bne.n	80246d0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80246c4:	2302      	movs	r3, #2
 80246c6:	607b      	str	r3, [r7, #4]
      break;
 80246c8:	e00c      	b.n	80246e4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80246ca:	2303      	movs	r3, #3
 80246cc:	607b      	str	r3, [r7, #4]
      break;
 80246ce:	e009      	b.n	80246e4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80246d0:	4b07      	ldr	r3, [pc, #28]	; (80246f0 <osKernelGetState+0x40>)
 80246d2:	681b      	ldr	r3, [r3, #0]
 80246d4:	2b01      	cmp	r3, #1
 80246d6:	d102      	bne.n	80246de <osKernelGetState+0x2e>
        state = osKernelReady;
 80246d8:	2301      	movs	r3, #1
 80246da:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80246dc:	e001      	b.n	80246e2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80246de:	2300      	movs	r3, #0
 80246e0:	607b      	str	r3, [r7, #4]
      break;
 80246e2:	bf00      	nop
  }

  return (state);
 80246e4:	687b      	ldr	r3, [r7, #4]
}
 80246e6:	4618      	mov	r0, r3
 80246e8:	3708      	adds	r7, #8
 80246ea:	46bd      	mov	sp, r7
 80246ec:	bd80      	pop	{r7, pc}
 80246ee:	bf00      	nop
 80246f0:	2400142c 	.word	0x2400142c

080246f4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80246f4:	b580      	push	{r7, lr}
 80246f6:	b084      	sub	sp, #16
 80246f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80246fa:	f3ef 8305 	mrs	r3, IPSR
 80246fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8024700:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8024702:	2b00      	cmp	r3, #0
 8024704:	d10f      	bne.n	8024726 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024706:	f3ef 8310 	mrs	r3, PRIMASK
 802470a:	607b      	str	r3, [r7, #4]
  return(result);
 802470c:	687b      	ldr	r3, [r7, #4]
 802470e:	2b00      	cmp	r3, #0
 8024710:	d105      	bne.n	802471e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024712:	f3ef 8311 	mrs	r3, BASEPRI
 8024716:	603b      	str	r3, [r7, #0]
  return(result);
 8024718:	683b      	ldr	r3, [r7, #0]
 802471a:	2b00      	cmp	r3, #0
 802471c:	d007      	beq.n	802472e <osKernelStart+0x3a>
 802471e:	4b0f      	ldr	r3, [pc, #60]	; (802475c <osKernelStart+0x68>)
 8024720:	681b      	ldr	r3, [r3, #0]
 8024722:	2b02      	cmp	r3, #2
 8024724:	d103      	bne.n	802472e <osKernelStart+0x3a>
    stat = osErrorISR;
 8024726:	f06f 0305 	mvn.w	r3, #5
 802472a:	60fb      	str	r3, [r7, #12]
 802472c:	e010      	b.n	8024750 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 802472e:	4b0b      	ldr	r3, [pc, #44]	; (802475c <osKernelStart+0x68>)
 8024730:	681b      	ldr	r3, [r3, #0]
 8024732:	2b01      	cmp	r3, #1
 8024734:	d109      	bne.n	802474a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8024736:	f7ff ff7f 	bl	8024638 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 802473a:	4b08      	ldr	r3, [pc, #32]	; (802475c <osKernelStart+0x68>)
 802473c:	2202      	movs	r2, #2
 802473e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8024740:	f002 f9ba 	bl	8026ab8 <vTaskStartScheduler>
      stat = osOK;
 8024744:	2300      	movs	r3, #0
 8024746:	60fb      	str	r3, [r7, #12]
 8024748:	e002      	b.n	8024750 <osKernelStart+0x5c>
    } else {
      stat = osError;
 802474a:	f04f 33ff 	mov.w	r3, #4294967295
 802474e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8024750:	68fb      	ldr	r3, [r7, #12]
}
 8024752:	4618      	mov	r0, r3
 8024754:	3710      	adds	r7, #16
 8024756:	46bd      	mov	sp, r7
 8024758:	bd80      	pop	{r7, pc}
 802475a:	bf00      	nop
 802475c:	2400142c 	.word	0x2400142c

08024760 <osKernelLock>:

int32_t osKernelLock (void) {
 8024760:	b580      	push	{r7, lr}
 8024762:	b084      	sub	sp, #16
 8024764:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024766:	f3ef 8305 	mrs	r3, IPSR
 802476a:	60bb      	str	r3, [r7, #8]
  return(result);
 802476c:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 802476e:	2b00      	cmp	r3, #0
 8024770:	d10f      	bne.n	8024792 <osKernelLock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024772:	f3ef 8310 	mrs	r3, PRIMASK
 8024776:	607b      	str	r3, [r7, #4]
  return(result);
 8024778:	687b      	ldr	r3, [r7, #4]
 802477a:	2b00      	cmp	r3, #0
 802477c:	d105      	bne.n	802478a <osKernelLock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802477e:	f3ef 8311 	mrs	r3, BASEPRI
 8024782:	603b      	str	r3, [r7, #0]
  return(result);
 8024784:	683b      	ldr	r3, [r7, #0]
 8024786:	2b00      	cmp	r3, #0
 8024788:	d007      	beq.n	802479a <osKernelLock+0x3a>
 802478a:	4b10      	ldr	r3, [pc, #64]	; (80247cc <osKernelLock+0x6c>)
 802478c:	681b      	ldr	r3, [r3, #0]
 802478e:	2b02      	cmp	r3, #2
 8024790:	d103      	bne.n	802479a <osKernelLock+0x3a>
    lock = (int32_t)osErrorISR;
 8024792:	f06f 0305 	mvn.w	r3, #5
 8024796:	60fb      	str	r3, [r7, #12]
 8024798:	e013      	b.n	80247c2 <osKernelLock+0x62>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 802479a:	f002 fde5 	bl	8027368 <xTaskGetSchedulerState>
 802479e:	4603      	mov	r3, r0
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	d002      	beq.n	80247aa <osKernelLock+0x4a>
 80247a4:	2b02      	cmp	r3, #2
 80247a6:	d003      	beq.n	80247b0 <osKernelLock+0x50>
 80247a8:	e007      	b.n	80247ba <osKernelLock+0x5a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 80247aa:	2301      	movs	r3, #1
 80247ac:	60fb      	str	r3, [r7, #12]
        break;
 80247ae:	e008      	b.n	80247c2 <osKernelLock+0x62>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 80247b0:	f002 f9e6 	bl	8026b80 <vTaskSuspendAll>
        lock = 0;
 80247b4:	2300      	movs	r3, #0
 80247b6:	60fb      	str	r3, [r7, #12]
        break;
 80247b8:	e003      	b.n	80247c2 <osKernelLock+0x62>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 80247ba:	f04f 33ff 	mov.w	r3, #4294967295
 80247be:	60fb      	str	r3, [r7, #12]
        break;
 80247c0:	bf00      	nop
    }
  }

  return (lock);
 80247c2:	68fb      	ldr	r3, [r7, #12]
}
 80247c4:	4618      	mov	r0, r3
 80247c6:	3710      	adds	r7, #16
 80247c8:	46bd      	mov	sp, r7
 80247ca:	bd80      	pop	{r7, pc}
 80247cc:	2400142c 	.word	0x2400142c

080247d0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80247d0:	b580      	push	{r7, lr}
 80247d2:	b084      	sub	sp, #16
 80247d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80247d6:	f3ef 8305 	mrs	r3, IPSR
 80247da:	60bb      	str	r3, [r7, #8]
  return(result);
 80247dc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80247de:	2b00      	cmp	r3, #0
 80247e0:	d10f      	bne.n	8024802 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80247e2:	f3ef 8310 	mrs	r3, PRIMASK
 80247e6:	607b      	str	r3, [r7, #4]
  return(result);
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	2b00      	cmp	r3, #0
 80247ec:	d105      	bne.n	80247fa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80247ee:	f3ef 8311 	mrs	r3, BASEPRI
 80247f2:	603b      	str	r3, [r7, #0]
  return(result);
 80247f4:	683b      	ldr	r3, [r7, #0]
 80247f6:	2b00      	cmp	r3, #0
 80247f8:	d007      	beq.n	802480a <osKernelGetTickCount+0x3a>
 80247fa:	4b08      	ldr	r3, [pc, #32]	; (802481c <osKernelGetTickCount+0x4c>)
 80247fc:	681b      	ldr	r3, [r3, #0]
 80247fe:	2b02      	cmp	r3, #2
 8024800:	d103      	bne.n	802480a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8024802:	f002 fa77 	bl	8026cf4 <xTaskGetTickCountFromISR>
 8024806:	60f8      	str	r0, [r7, #12]
 8024808:	e002      	b.n	8024810 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 802480a:	f002 fa63 	bl	8026cd4 <xTaskGetTickCount>
 802480e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8024810:	68fb      	ldr	r3, [r7, #12]
}
 8024812:	4618      	mov	r0, r3
 8024814:	3710      	adds	r7, #16
 8024816:	46bd      	mov	sp, r7
 8024818:	bd80      	pop	{r7, pc}
 802481a:	bf00      	nop
 802481c:	2400142c 	.word	0x2400142c

08024820 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8024820:	b580      	push	{r7, lr}
 8024822:	b090      	sub	sp, #64	; 0x40
 8024824:	af04      	add	r7, sp, #16
 8024826:	60f8      	str	r0, [r7, #12]
 8024828:	60b9      	str	r1, [r7, #8]
 802482a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 802482c:	2300      	movs	r3, #0
 802482e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024830:	f3ef 8305 	mrs	r3, IPSR
 8024834:	61fb      	str	r3, [r7, #28]
  return(result);
 8024836:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8024838:	2b00      	cmp	r3, #0
 802483a:	f040 808f 	bne.w	802495c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802483e:	f3ef 8310 	mrs	r3, PRIMASK
 8024842:	61bb      	str	r3, [r7, #24]
  return(result);
 8024844:	69bb      	ldr	r3, [r7, #24]
 8024846:	2b00      	cmp	r3, #0
 8024848:	d105      	bne.n	8024856 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802484a:	f3ef 8311 	mrs	r3, BASEPRI
 802484e:	617b      	str	r3, [r7, #20]
  return(result);
 8024850:	697b      	ldr	r3, [r7, #20]
 8024852:	2b00      	cmp	r3, #0
 8024854:	d003      	beq.n	802485e <osThreadNew+0x3e>
 8024856:	4b44      	ldr	r3, [pc, #272]	; (8024968 <osThreadNew+0x148>)
 8024858:	681b      	ldr	r3, [r3, #0]
 802485a:	2b02      	cmp	r3, #2
 802485c:	d07e      	beq.n	802495c <osThreadNew+0x13c>
 802485e:	68fb      	ldr	r3, [r7, #12]
 8024860:	2b00      	cmp	r3, #0
 8024862:	d07b      	beq.n	802495c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8024864:	2380      	movs	r3, #128	; 0x80
 8024866:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8024868:	2318      	movs	r3, #24
 802486a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 802486c:	2300      	movs	r3, #0
 802486e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8024870:	f04f 33ff 	mov.w	r3, #4294967295
 8024874:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8024876:	687b      	ldr	r3, [r7, #4]
 8024878:	2b00      	cmp	r3, #0
 802487a:	d045      	beq.n	8024908 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 802487c:	687b      	ldr	r3, [r7, #4]
 802487e:	681b      	ldr	r3, [r3, #0]
 8024880:	2b00      	cmp	r3, #0
 8024882:	d002      	beq.n	802488a <osThreadNew+0x6a>
        name = attr->name;
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	681b      	ldr	r3, [r3, #0]
 8024888:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	699b      	ldr	r3, [r3, #24]
 802488e:	2b00      	cmp	r3, #0
 8024890:	d002      	beq.n	8024898 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8024892:	687b      	ldr	r3, [r7, #4]
 8024894:	699b      	ldr	r3, [r3, #24]
 8024896:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8024898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802489a:	2b00      	cmp	r3, #0
 802489c:	d008      	beq.n	80248b0 <osThreadNew+0x90>
 802489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80248a0:	2b38      	cmp	r3, #56	; 0x38
 80248a2:	d805      	bhi.n	80248b0 <osThreadNew+0x90>
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	685b      	ldr	r3, [r3, #4]
 80248a8:	f003 0301 	and.w	r3, r3, #1
 80248ac:	2b00      	cmp	r3, #0
 80248ae:	d001      	beq.n	80248b4 <osThreadNew+0x94>
        return (NULL);
 80248b0:	2300      	movs	r3, #0
 80248b2:	e054      	b.n	802495e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80248b4:	687b      	ldr	r3, [r7, #4]
 80248b6:	695b      	ldr	r3, [r3, #20]
 80248b8:	2b00      	cmp	r3, #0
 80248ba:	d003      	beq.n	80248c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80248bc:	687b      	ldr	r3, [r7, #4]
 80248be:	695b      	ldr	r3, [r3, #20]
 80248c0:	089b      	lsrs	r3, r3, #2
 80248c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80248c4:	687b      	ldr	r3, [r7, #4]
 80248c6:	689b      	ldr	r3, [r3, #8]
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	d00e      	beq.n	80248ea <osThreadNew+0xca>
 80248cc:	687b      	ldr	r3, [r7, #4]
 80248ce:	68db      	ldr	r3, [r3, #12]
 80248d0:	2b5b      	cmp	r3, #91	; 0x5b
 80248d2:	d90a      	bls.n	80248ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80248d4:	687b      	ldr	r3, [r7, #4]
 80248d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80248d8:	2b00      	cmp	r3, #0
 80248da:	d006      	beq.n	80248ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80248dc:	687b      	ldr	r3, [r7, #4]
 80248de:	695b      	ldr	r3, [r3, #20]
 80248e0:	2b00      	cmp	r3, #0
 80248e2:	d002      	beq.n	80248ea <osThreadNew+0xca>
        mem = 1;
 80248e4:	2301      	movs	r3, #1
 80248e6:	623b      	str	r3, [r7, #32]
 80248e8:	e010      	b.n	802490c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80248ea:	687b      	ldr	r3, [r7, #4]
 80248ec:	689b      	ldr	r3, [r3, #8]
 80248ee:	2b00      	cmp	r3, #0
 80248f0:	d10c      	bne.n	802490c <osThreadNew+0xec>
 80248f2:	687b      	ldr	r3, [r7, #4]
 80248f4:	68db      	ldr	r3, [r3, #12]
 80248f6:	2b00      	cmp	r3, #0
 80248f8:	d108      	bne.n	802490c <osThreadNew+0xec>
 80248fa:	687b      	ldr	r3, [r7, #4]
 80248fc:	691b      	ldr	r3, [r3, #16]
 80248fe:	2b00      	cmp	r3, #0
 8024900:	d104      	bne.n	802490c <osThreadNew+0xec>
          mem = 0;
 8024902:	2300      	movs	r3, #0
 8024904:	623b      	str	r3, [r7, #32]
 8024906:	e001      	b.n	802490c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8024908:	2300      	movs	r3, #0
 802490a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 802490c:	6a3b      	ldr	r3, [r7, #32]
 802490e:	2b01      	cmp	r3, #1
 8024910:	d110      	bne.n	8024934 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8024912:	687b      	ldr	r3, [r7, #4]
 8024914:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8024916:	687a      	ldr	r2, [r7, #4]
 8024918:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 802491a:	9202      	str	r2, [sp, #8]
 802491c:	9301      	str	r3, [sp, #4]
 802491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024920:	9300      	str	r3, [sp, #0]
 8024922:	68bb      	ldr	r3, [r7, #8]
 8024924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024928:	68f8      	ldr	r0, [r7, #12]
 802492a:	f001 fe79 	bl	8026620 <xTaskCreateStatic>
 802492e:	4603      	mov	r3, r0
 8024930:	613b      	str	r3, [r7, #16]
 8024932:	e013      	b.n	802495c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8024934:	6a3b      	ldr	r3, [r7, #32]
 8024936:	2b00      	cmp	r3, #0
 8024938:	d110      	bne.n	802495c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 802493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802493c:	b29a      	uxth	r2, r3
 802493e:	f107 0310 	add.w	r3, r7, #16
 8024942:	9301      	str	r3, [sp, #4]
 8024944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024946:	9300      	str	r3, [sp, #0]
 8024948:	68bb      	ldr	r3, [r7, #8]
 802494a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802494c:	68f8      	ldr	r0, [r7, #12]
 802494e:	f001 fec1 	bl	80266d4 <xTaskCreate>
 8024952:	4603      	mov	r3, r0
 8024954:	2b01      	cmp	r3, #1
 8024956:	d001      	beq.n	802495c <osThreadNew+0x13c>
          hTask = NULL;
 8024958:	2300      	movs	r3, #0
 802495a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 802495c:	693b      	ldr	r3, [r7, #16]
}
 802495e:	4618      	mov	r0, r3
 8024960:	3730      	adds	r7, #48	; 0x30
 8024962:	46bd      	mov	sp, r7
 8024964:	bd80      	pop	{r7, pc}
 8024966:	bf00      	nop
 8024968:	2400142c 	.word	0x2400142c

0802496c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 802496c:	b580      	push	{r7, lr}
 802496e:	b08a      	sub	sp, #40	; 0x28
 8024970:	af02      	add	r7, sp, #8
 8024972:	6078      	str	r0, [r7, #4]
 8024974:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 802497a:	69fb      	ldr	r3, [r7, #28]
 802497c:	2b00      	cmp	r3, #0
 802497e:	d002      	beq.n	8024986 <osThreadFlagsSet+0x1a>
 8024980:	683b      	ldr	r3, [r7, #0]
 8024982:	2b00      	cmp	r3, #0
 8024984:	da03      	bge.n	802498e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8024986:	f06f 0303 	mvn.w	r3, #3
 802498a:	60fb      	str	r3, [r7, #12]
 802498c:	e046      	b.n	8024a1c <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 802498e:	f04f 33ff 	mov.w	r3, #4294967295
 8024992:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024994:	f3ef 8305 	mrs	r3, IPSR
 8024998:	61bb      	str	r3, [r7, #24]
  return(result);
 802499a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 802499c:	2b00      	cmp	r3, #0
 802499e:	d10f      	bne.n	80249c0 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80249a0:	f3ef 8310 	mrs	r3, PRIMASK
 80249a4:	617b      	str	r3, [r7, #20]
  return(result);
 80249a6:	697b      	ldr	r3, [r7, #20]
 80249a8:	2b00      	cmp	r3, #0
 80249aa:	d105      	bne.n	80249b8 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80249ac:	f3ef 8311 	mrs	r3, BASEPRI
 80249b0:	613b      	str	r3, [r7, #16]
  return(result);
 80249b2:	693b      	ldr	r3, [r7, #16]
 80249b4:	2b00      	cmp	r3, #0
 80249b6:	d024      	beq.n	8024a02 <osThreadFlagsSet+0x96>
 80249b8:	4b1b      	ldr	r3, [pc, #108]	; (8024a28 <osThreadFlagsSet+0xbc>)
 80249ba:	681b      	ldr	r3, [r3, #0]
 80249bc:	2b02      	cmp	r3, #2
 80249be:	d120      	bne.n	8024a02 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 80249c0:	2300      	movs	r3, #0
 80249c2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80249c4:	f107 0308 	add.w	r3, r7, #8
 80249c8:	9300      	str	r3, [sp, #0]
 80249ca:	2300      	movs	r3, #0
 80249cc:	2201      	movs	r2, #1
 80249ce:	6839      	ldr	r1, [r7, #0]
 80249d0:	69f8      	ldr	r0, [r7, #28]
 80249d2:	f002 ff5d 	bl	8027890 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80249d6:	f107 020c 	add.w	r2, r7, #12
 80249da:	2300      	movs	r3, #0
 80249dc:	9300      	str	r3, [sp, #0]
 80249de:	4613      	mov	r3, r2
 80249e0:	2200      	movs	r2, #0
 80249e2:	2100      	movs	r1, #0
 80249e4:	69f8      	ldr	r0, [r7, #28]
 80249e6:	f002 ff53 	bl	8027890 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80249ea:	68bb      	ldr	r3, [r7, #8]
 80249ec:	2b00      	cmp	r3, #0
 80249ee:	d015      	beq.n	8024a1c <osThreadFlagsSet+0xb0>
 80249f0:	4b0e      	ldr	r3, [pc, #56]	; (8024a2c <osThreadFlagsSet+0xc0>)
 80249f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80249f6:	601a      	str	r2, [r3, #0]
 80249f8:	f3bf 8f4f 	dsb	sy
 80249fc:	f3bf 8f6f 	isb	sy
 8024a00:	e00c      	b.n	8024a1c <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8024a02:	2300      	movs	r3, #0
 8024a04:	2201      	movs	r2, #1
 8024a06:	6839      	ldr	r1, [r7, #0]
 8024a08:	69f8      	ldr	r0, [r7, #28]
 8024a0a:	f002 fe8d 	bl	8027728 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8024a0e:	f107 030c 	add.w	r3, r7, #12
 8024a12:	2200      	movs	r2, #0
 8024a14:	2100      	movs	r1, #0
 8024a16:	69f8      	ldr	r0, [r7, #28]
 8024a18:	f002 fe86 	bl	8027728 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8024a1c:	68fb      	ldr	r3, [r7, #12]
}
 8024a1e:	4618      	mov	r0, r3
 8024a20:	3720      	adds	r7, #32
 8024a22:	46bd      	mov	sp, r7
 8024a24:	bd80      	pop	{r7, pc}
 8024a26:	bf00      	nop
 8024a28:	2400142c 	.word	0x2400142c
 8024a2c:	e000ed04 	.word	0xe000ed04

08024a30 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8024a30:	b580      	push	{r7, lr}
 8024a32:	b088      	sub	sp, #32
 8024a34:	af00      	add	r7, sp, #0
 8024a36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024a38:	f3ef 8305 	mrs	r3, IPSR
 8024a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8024a3e:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8024a40:	2b00      	cmp	r3, #0
 8024a42:	d10f      	bne.n	8024a64 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024a44:	f3ef 8310 	mrs	r3, PRIMASK
 8024a48:	613b      	str	r3, [r7, #16]
  return(result);
 8024a4a:	693b      	ldr	r3, [r7, #16]
 8024a4c:	2b00      	cmp	r3, #0
 8024a4e:	d105      	bne.n	8024a5c <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024a50:	f3ef 8311 	mrs	r3, BASEPRI
 8024a54:	60fb      	str	r3, [r7, #12]
  return(result);
 8024a56:	68fb      	ldr	r3, [r7, #12]
 8024a58:	2b00      	cmp	r3, #0
 8024a5a:	d007      	beq.n	8024a6c <osThreadFlagsClear+0x3c>
 8024a5c:	4b1b      	ldr	r3, [pc, #108]	; (8024acc <osThreadFlagsClear+0x9c>)
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	2b02      	cmp	r3, #2
 8024a62:	d103      	bne.n	8024a6c <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 8024a64:	f06f 0305 	mvn.w	r3, #5
 8024a68:	61fb      	str	r3, [r7, #28]
 8024a6a:	e02a      	b.n	8024ac2 <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8024a6c:	687b      	ldr	r3, [r7, #4]
 8024a6e:	2b00      	cmp	r3, #0
 8024a70:	da03      	bge.n	8024a7a <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 8024a72:	f06f 0303 	mvn.w	r3, #3
 8024a76:	61fb      	str	r3, [r7, #28]
 8024a78:	e023      	b.n	8024ac2 <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8024a7a:	f002 fc65 	bl	8027348 <xTaskGetCurrentTaskHandle>
 8024a7e:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8024a80:	f107 0308 	add.w	r3, r7, #8
 8024a84:	2200      	movs	r2, #0
 8024a86:	2100      	movs	r1, #0
 8024a88:	69b8      	ldr	r0, [r7, #24]
 8024a8a:	f002 fe4d 	bl	8027728 <xTaskGenericNotify>
 8024a8e:	4603      	mov	r3, r0
 8024a90:	2b01      	cmp	r3, #1
 8024a92:	d113      	bne.n	8024abc <osThreadFlagsClear+0x8c>
      rflags = cflags;
 8024a94:	68bb      	ldr	r3, [r7, #8]
 8024a96:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	43da      	mvns	r2, r3
 8024a9c:	68bb      	ldr	r3, [r7, #8]
 8024a9e:	4013      	ands	r3, r2
 8024aa0:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8024aa2:	68b9      	ldr	r1, [r7, #8]
 8024aa4:	2300      	movs	r3, #0
 8024aa6:	2203      	movs	r2, #3
 8024aa8:	69b8      	ldr	r0, [r7, #24]
 8024aaa:	f002 fe3d 	bl	8027728 <xTaskGenericNotify>
 8024aae:	4603      	mov	r3, r0
 8024ab0:	2b01      	cmp	r3, #1
 8024ab2:	d006      	beq.n	8024ac2 <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 8024ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8024ab8:	61fb      	str	r3, [r7, #28]
 8024aba:	e002      	b.n	8024ac2 <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 8024abc:	f04f 33ff 	mov.w	r3, #4294967295
 8024ac0:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8024ac2:	69fb      	ldr	r3, [r7, #28]
}
 8024ac4:	4618      	mov	r0, r3
 8024ac6:	3720      	adds	r7, #32
 8024ac8:	46bd      	mov	sp, r7
 8024aca:	bd80      	pop	{r7, pc}
 8024acc:	2400142c 	.word	0x2400142c

08024ad0 <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 8024ad0:	b580      	push	{r7, lr}
 8024ad2:	b086      	sub	sp, #24
 8024ad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024ad6:	f3ef 8305 	mrs	r3, IPSR
 8024ada:	613b      	str	r3, [r7, #16]
  return(result);
 8024adc:	693b      	ldr	r3, [r7, #16]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 8024ade:	2b00      	cmp	r3, #0
 8024ae0:	d10f      	bne.n	8024b02 <osThreadFlagsGet+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8024ae6:	60fb      	str	r3, [r7, #12]
  return(result);
 8024ae8:	68fb      	ldr	r3, [r7, #12]
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	d105      	bne.n	8024afa <osThreadFlagsGet+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024aee:	f3ef 8311 	mrs	r3, BASEPRI
 8024af2:	60bb      	str	r3, [r7, #8]
  return(result);
 8024af4:	68bb      	ldr	r3, [r7, #8]
 8024af6:	2b00      	cmp	r3, #0
 8024af8:	d007      	beq.n	8024b0a <osThreadFlagsGet+0x3a>
 8024afa:	4b0e      	ldr	r3, [pc, #56]	; (8024b34 <osThreadFlagsGet+0x64>)
 8024afc:	681b      	ldr	r3, [r3, #0]
 8024afe:	2b02      	cmp	r3, #2
 8024b00:	d103      	bne.n	8024b0a <osThreadFlagsGet+0x3a>
    rflags = (uint32_t)osErrorISR;
 8024b02:	f06f 0305 	mvn.w	r3, #5
 8024b06:	607b      	str	r3, [r7, #4]
 8024b08:	e00e      	b.n	8024b28 <osThreadFlagsGet+0x58>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8024b0a:	f002 fc1d 	bl	8027348 <xTaskGetCurrentTaskHandle>
 8024b0e:	6178      	str	r0, [r7, #20]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 8024b10:	1d3b      	adds	r3, r7, #4
 8024b12:	2200      	movs	r2, #0
 8024b14:	2100      	movs	r1, #0
 8024b16:	6978      	ldr	r0, [r7, #20]
 8024b18:	f002 fe06 	bl	8027728 <xTaskGenericNotify>
 8024b1c:	4603      	mov	r3, r0
 8024b1e:	2b01      	cmp	r3, #1
 8024b20:	d002      	beq.n	8024b28 <osThreadFlagsGet+0x58>
      rflags = (uint32_t)osError;
 8024b22:	f04f 33ff 	mov.w	r3, #4294967295
 8024b26:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 8024b28:	687b      	ldr	r3, [r7, #4]
}
 8024b2a:	4618      	mov	r0, r3
 8024b2c:	3718      	adds	r7, #24
 8024b2e:	46bd      	mov	sp, r7
 8024b30:	bd80      	pop	{r7, pc}
 8024b32:	bf00      	nop
 8024b34:	2400142c 	.word	0x2400142c

08024b38 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8024b38:	b580      	push	{r7, lr}
 8024b3a:	b08e      	sub	sp, #56	; 0x38
 8024b3c:	af00      	add	r7, sp, #0
 8024b3e:	60f8      	str	r0, [r7, #12]
 8024b40:	60b9      	str	r1, [r7, #8]
 8024b42:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024b44:	f3ef 8305 	mrs	r3, IPSR
 8024b48:	61fb      	str	r3, [r7, #28]
  return(result);
 8024b4a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8024b4c:	2b00      	cmp	r3, #0
 8024b4e:	d10f      	bne.n	8024b70 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024b50:	f3ef 8310 	mrs	r3, PRIMASK
 8024b54:	61bb      	str	r3, [r7, #24]
  return(result);
 8024b56:	69bb      	ldr	r3, [r7, #24]
 8024b58:	2b00      	cmp	r3, #0
 8024b5a:	d105      	bne.n	8024b68 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8024b60:	617b      	str	r3, [r7, #20]
  return(result);
 8024b62:	697b      	ldr	r3, [r7, #20]
 8024b64:	2b00      	cmp	r3, #0
 8024b66:	d007      	beq.n	8024b78 <osThreadFlagsWait+0x40>
 8024b68:	4b3c      	ldr	r3, [pc, #240]	; (8024c5c <osThreadFlagsWait+0x124>)
 8024b6a:	681b      	ldr	r3, [r3, #0]
 8024b6c:	2b02      	cmp	r3, #2
 8024b6e:	d103      	bne.n	8024b78 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8024b70:	f06f 0305 	mvn.w	r3, #5
 8024b74:	637b      	str	r3, [r7, #52]	; 0x34
 8024b76:	e06b      	b.n	8024c50 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8024b78:	68fb      	ldr	r3, [r7, #12]
 8024b7a:	2b00      	cmp	r3, #0
 8024b7c:	da03      	bge.n	8024b86 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8024b7e:	f06f 0303 	mvn.w	r3, #3
 8024b82:	637b      	str	r3, [r7, #52]	; 0x34
 8024b84:	e064      	b.n	8024c50 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8024b86:	68bb      	ldr	r3, [r7, #8]
 8024b88:	f003 0302 	and.w	r3, r3, #2
 8024b8c:	2b00      	cmp	r3, #0
 8024b8e:	d002      	beq.n	8024b96 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8024b90:	2300      	movs	r3, #0
 8024b92:	633b      	str	r3, [r7, #48]	; 0x30
 8024b94:	e001      	b.n	8024b9a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8024b96:	68fb      	ldr	r3, [r7, #12]
 8024b98:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8024b9a:	2300      	movs	r3, #0
 8024b9c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8024b9e:	687b      	ldr	r3, [r7, #4]
 8024ba0:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8024ba2:	f002 f897 	bl	8026cd4 <xTaskGetTickCount>
 8024ba6:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8024ba8:	f107 0210 	add.w	r2, r7, #16
 8024bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024bb0:	2000      	movs	r0, #0
 8024bb2:	f002 fd5f 	bl	8027674 <xTaskNotifyWait>
 8024bb6:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8024bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bba:	2b01      	cmp	r3, #1
 8024bbc:	d137      	bne.n	8024c2e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8024bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024bc0:	68fb      	ldr	r3, [r7, #12]
 8024bc2:	4013      	ands	r3, r2
 8024bc4:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8024bc6:	693b      	ldr	r3, [r7, #16]
 8024bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024bca:	4313      	orrs	r3, r2
 8024bcc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8024bce:	68bb      	ldr	r3, [r7, #8]
 8024bd0:	f003 0301 	and.w	r3, r3, #1
 8024bd4:	2b00      	cmp	r3, #0
 8024bd6:	d00c      	beq.n	8024bf2 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8024bd8:	68fa      	ldr	r2, [r7, #12]
 8024bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024bdc:	4013      	ands	r3, r2
 8024bde:	68fa      	ldr	r2, [r7, #12]
 8024be0:	429a      	cmp	r2, r3
 8024be2:	d032      	beq.n	8024c4a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8024be4:	687b      	ldr	r3, [r7, #4]
 8024be6:	2b00      	cmp	r3, #0
 8024be8:	d10f      	bne.n	8024c0a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8024bea:	f06f 0302 	mvn.w	r3, #2
 8024bee:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8024bf0:	e02e      	b.n	8024c50 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8024bf2:	68fa      	ldr	r2, [r7, #12]
 8024bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024bf6:	4013      	ands	r3, r2
 8024bf8:	2b00      	cmp	r3, #0
 8024bfa:	d128      	bne.n	8024c4e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	2b00      	cmp	r3, #0
 8024c00:	d103      	bne.n	8024c0a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8024c02:	f06f 0302 	mvn.w	r3, #2
 8024c06:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8024c08:	e022      	b.n	8024c50 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8024c0a:	f002 f863 	bl	8026cd4 <xTaskGetTickCount>
 8024c0e:	4602      	mov	r2, r0
 8024c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c12:	1ad3      	subs	r3, r2, r3
 8024c14:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8024c16:	6a3a      	ldr	r2, [r7, #32]
 8024c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c1a:	429a      	cmp	r2, r3
 8024c1c:	d902      	bls.n	8024c24 <osThreadFlagsWait+0xec>
          tout  = 0;
 8024c1e:	2300      	movs	r3, #0
 8024c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024c22:	e00e      	b.n	8024c42 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8024c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024c26:	6a3b      	ldr	r3, [r7, #32]
 8024c28:	1ad3      	subs	r3, r2, r3
 8024c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024c2c:	e009      	b.n	8024c42 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8024c2e:	687b      	ldr	r3, [r7, #4]
 8024c30:	2b00      	cmp	r3, #0
 8024c32:	d103      	bne.n	8024c3c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8024c34:	f06f 0302 	mvn.w	r3, #2
 8024c38:	637b      	str	r3, [r7, #52]	; 0x34
 8024c3a:	e002      	b.n	8024c42 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8024c3c:	f06f 0301 	mvn.w	r3, #1
 8024c40:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8024c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	d1af      	bne.n	8024ba8 <osThreadFlagsWait+0x70>
 8024c48:	e002      	b.n	8024c50 <osThreadFlagsWait+0x118>
            break;
 8024c4a:	bf00      	nop
 8024c4c:	e000      	b.n	8024c50 <osThreadFlagsWait+0x118>
            break;
 8024c4e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8024c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8024c52:	4618      	mov	r0, r3
 8024c54:	3738      	adds	r7, #56	; 0x38
 8024c56:	46bd      	mov	sp, r7
 8024c58:	bd80      	pop	{r7, pc}
 8024c5a:	bf00      	nop
 8024c5c:	2400142c 	.word	0x2400142c

08024c60 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8024c60:	b580      	push	{r7, lr}
 8024c62:	b086      	sub	sp, #24
 8024c64:	af00      	add	r7, sp, #0
 8024c66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024c68:	f3ef 8305 	mrs	r3, IPSR
 8024c6c:	613b      	str	r3, [r7, #16]
  return(result);
 8024c6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8024c70:	2b00      	cmp	r3, #0
 8024c72:	d10f      	bne.n	8024c94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024c74:	f3ef 8310 	mrs	r3, PRIMASK
 8024c78:	60fb      	str	r3, [r7, #12]
  return(result);
 8024c7a:	68fb      	ldr	r3, [r7, #12]
 8024c7c:	2b00      	cmp	r3, #0
 8024c7e:	d105      	bne.n	8024c8c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024c80:	f3ef 8311 	mrs	r3, BASEPRI
 8024c84:	60bb      	str	r3, [r7, #8]
  return(result);
 8024c86:	68bb      	ldr	r3, [r7, #8]
 8024c88:	2b00      	cmp	r3, #0
 8024c8a:	d007      	beq.n	8024c9c <osDelay+0x3c>
 8024c8c:	4b0a      	ldr	r3, [pc, #40]	; (8024cb8 <osDelay+0x58>)
 8024c8e:	681b      	ldr	r3, [r3, #0]
 8024c90:	2b02      	cmp	r3, #2
 8024c92:	d103      	bne.n	8024c9c <osDelay+0x3c>
    stat = osErrorISR;
 8024c94:	f06f 0305 	mvn.w	r3, #5
 8024c98:	617b      	str	r3, [r7, #20]
 8024c9a:	e007      	b.n	8024cac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8024c9c:	2300      	movs	r3, #0
 8024c9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8024ca0:	687b      	ldr	r3, [r7, #4]
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	d002      	beq.n	8024cac <osDelay+0x4c>
      vTaskDelay(ticks);
 8024ca6:	6878      	ldr	r0, [r7, #4]
 8024ca8:	f001 fed2 	bl	8026a50 <vTaskDelay>
    }
  }

  return (stat);
 8024cac:	697b      	ldr	r3, [r7, #20]
}
 8024cae:	4618      	mov	r0, r3
 8024cb0:	3718      	adds	r7, #24
 8024cb2:	46bd      	mov	sp, r7
 8024cb4:	bd80      	pop	{r7, pc}
 8024cb6:	bf00      	nop
 8024cb8:	2400142c 	.word	0x2400142c

08024cbc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8024cbc:	b580      	push	{r7, lr}
 8024cbe:	b088      	sub	sp, #32
 8024cc0:	af00      	add	r7, sp, #0
 8024cc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024cc4:	f3ef 8305 	mrs	r3, IPSR
 8024cc8:	617b      	str	r3, [r7, #20]
  return(result);
 8024cca:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8024ccc:	2b00      	cmp	r3, #0
 8024cce:	d10f      	bne.n	8024cf0 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8024cd4:	613b      	str	r3, [r7, #16]
  return(result);
 8024cd6:	693b      	ldr	r3, [r7, #16]
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	d105      	bne.n	8024ce8 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8024ce0:	60fb      	str	r3, [r7, #12]
  return(result);
 8024ce2:	68fb      	ldr	r3, [r7, #12]
 8024ce4:	2b00      	cmp	r3, #0
 8024ce6:	d007      	beq.n	8024cf8 <osDelayUntil+0x3c>
 8024ce8:	4b13      	ldr	r3, [pc, #76]	; (8024d38 <osDelayUntil+0x7c>)
 8024cea:	681b      	ldr	r3, [r3, #0]
 8024cec:	2b02      	cmp	r3, #2
 8024cee:	d103      	bne.n	8024cf8 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8024cf0:	f06f 0305 	mvn.w	r3, #5
 8024cf4:	61fb      	str	r3, [r7, #28]
 8024cf6:	e019      	b.n	8024d2c <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8024cf8:	2300      	movs	r3, #0
 8024cfa:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8024cfc:	f001 ffea 	bl	8026cd4 <xTaskGetTickCount>
 8024d00:	4603      	mov	r3, r0
 8024d02:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8024d04:	68bb      	ldr	r3, [r7, #8]
 8024d06:	687a      	ldr	r2, [r7, #4]
 8024d08:	1ad3      	subs	r3, r2, r3
 8024d0a:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8024d0c:	69bb      	ldr	r3, [r7, #24]
 8024d0e:	2b00      	cmp	r3, #0
 8024d10:	d009      	beq.n	8024d26 <osDelayUntil+0x6a>
 8024d12:	69bb      	ldr	r3, [r7, #24]
 8024d14:	2b00      	cmp	r3, #0
 8024d16:	db06      	blt.n	8024d26 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8024d18:	f107 0308 	add.w	r3, r7, #8
 8024d1c:	69b9      	ldr	r1, [r7, #24]
 8024d1e:	4618      	mov	r0, r3
 8024d20:	f001 fe1c 	bl	802695c <vTaskDelayUntil>
 8024d24:	e002      	b.n	8024d2c <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8024d26:	f06f 0303 	mvn.w	r3, #3
 8024d2a:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8024d2c:	69fb      	ldr	r3, [r7, #28]
}
 8024d2e:	4618      	mov	r0, r3
 8024d30:	3720      	adds	r7, #32
 8024d32:	46bd      	mov	sp, r7
 8024d34:	bd80      	pop	{r7, pc}
 8024d36:	bf00      	nop
 8024d38:	2400142c 	.word	0x2400142c

08024d3c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8024d3c:	b580      	push	{r7, lr}
 8024d3e:	b08c      	sub	sp, #48	; 0x30
 8024d40:	af02      	add	r7, sp, #8
 8024d42:	60f8      	str	r0, [r7, #12]
 8024d44:	60b9      	str	r1, [r7, #8]
 8024d46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8024d48:	2300      	movs	r3, #0
 8024d4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024d4c:	f3ef 8305 	mrs	r3, IPSR
 8024d50:	61bb      	str	r3, [r7, #24]
  return(result);
 8024d52:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8024d54:	2b00      	cmp	r3, #0
 8024d56:	f040 8087 	bne.w	8024e68 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8024d5e:	617b      	str	r3, [r7, #20]
  return(result);
 8024d60:	697b      	ldr	r3, [r7, #20]
 8024d62:	2b00      	cmp	r3, #0
 8024d64:	d105      	bne.n	8024d72 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024d66:	f3ef 8311 	mrs	r3, BASEPRI
 8024d6a:	613b      	str	r3, [r7, #16]
  return(result);
 8024d6c:	693b      	ldr	r3, [r7, #16]
 8024d6e:	2b00      	cmp	r3, #0
 8024d70:	d003      	beq.n	8024d7a <osSemaphoreNew+0x3e>
 8024d72:	4b40      	ldr	r3, [pc, #256]	; (8024e74 <osSemaphoreNew+0x138>)
 8024d74:	681b      	ldr	r3, [r3, #0]
 8024d76:	2b02      	cmp	r3, #2
 8024d78:	d076      	beq.n	8024e68 <osSemaphoreNew+0x12c>
 8024d7a:	68fb      	ldr	r3, [r7, #12]
 8024d7c:	2b00      	cmp	r3, #0
 8024d7e:	d073      	beq.n	8024e68 <osSemaphoreNew+0x12c>
 8024d80:	68ba      	ldr	r2, [r7, #8]
 8024d82:	68fb      	ldr	r3, [r7, #12]
 8024d84:	429a      	cmp	r2, r3
 8024d86:	d86f      	bhi.n	8024e68 <osSemaphoreNew+0x12c>
    mem = -1;
 8024d88:	f04f 33ff 	mov.w	r3, #4294967295
 8024d8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8024d8e:	687b      	ldr	r3, [r7, #4]
 8024d90:	2b00      	cmp	r3, #0
 8024d92:	d015      	beq.n	8024dc0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8024d94:	687b      	ldr	r3, [r7, #4]
 8024d96:	689b      	ldr	r3, [r3, #8]
 8024d98:	2b00      	cmp	r3, #0
 8024d9a:	d006      	beq.n	8024daa <osSemaphoreNew+0x6e>
 8024d9c:	687b      	ldr	r3, [r7, #4]
 8024d9e:	68db      	ldr	r3, [r3, #12]
 8024da0:	2b4f      	cmp	r3, #79	; 0x4f
 8024da2:	d902      	bls.n	8024daa <osSemaphoreNew+0x6e>
        mem = 1;
 8024da4:	2301      	movs	r3, #1
 8024da6:	623b      	str	r3, [r7, #32]
 8024da8:	e00c      	b.n	8024dc4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8024daa:	687b      	ldr	r3, [r7, #4]
 8024dac:	689b      	ldr	r3, [r3, #8]
 8024dae:	2b00      	cmp	r3, #0
 8024db0:	d108      	bne.n	8024dc4 <osSemaphoreNew+0x88>
 8024db2:	687b      	ldr	r3, [r7, #4]
 8024db4:	68db      	ldr	r3, [r3, #12]
 8024db6:	2b00      	cmp	r3, #0
 8024db8:	d104      	bne.n	8024dc4 <osSemaphoreNew+0x88>
          mem = 0;
 8024dba:	2300      	movs	r3, #0
 8024dbc:	623b      	str	r3, [r7, #32]
 8024dbe:	e001      	b.n	8024dc4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8024dc0:	2300      	movs	r3, #0
 8024dc2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8024dc4:	6a3b      	ldr	r3, [r7, #32]
 8024dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024dca:	d04d      	beq.n	8024e68 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8024dcc:	68fb      	ldr	r3, [r7, #12]
 8024dce:	2b01      	cmp	r3, #1
 8024dd0:	d129      	bne.n	8024e26 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8024dd2:	6a3b      	ldr	r3, [r7, #32]
 8024dd4:	2b01      	cmp	r3, #1
 8024dd6:	d10b      	bne.n	8024df0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8024dd8:	687b      	ldr	r3, [r7, #4]
 8024dda:	689a      	ldr	r2, [r3, #8]
 8024ddc:	2303      	movs	r3, #3
 8024dde:	9300      	str	r3, [sp, #0]
 8024de0:	4613      	mov	r3, r2
 8024de2:	2200      	movs	r2, #0
 8024de4:	2100      	movs	r1, #0
 8024de6:	2001      	movs	r0, #1
 8024de8:	f000 fc72 	bl	80256d0 <xQueueGenericCreateStatic>
 8024dec:	6278      	str	r0, [r7, #36]	; 0x24
 8024dee:	e005      	b.n	8024dfc <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8024df0:	2203      	movs	r2, #3
 8024df2:	2100      	movs	r1, #0
 8024df4:	2001      	movs	r0, #1
 8024df6:	f000 fcde 	bl	80257b6 <xQueueGenericCreate>
 8024dfa:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8024dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024dfe:	2b00      	cmp	r3, #0
 8024e00:	d022      	beq.n	8024e48 <osSemaphoreNew+0x10c>
 8024e02:	68bb      	ldr	r3, [r7, #8]
 8024e04:	2b00      	cmp	r3, #0
 8024e06:	d01f      	beq.n	8024e48 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8024e08:	2300      	movs	r3, #0
 8024e0a:	2200      	movs	r2, #0
 8024e0c:	2100      	movs	r1, #0
 8024e0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024e10:	f000 fd9a 	bl	8025948 <xQueueGenericSend>
 8024e14:	4603      	mov	r3, r0
 8024e16:	2b01      	cmp	r3, #1
 8024e18:	d016      	beq.n	8024e48 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8024e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024e1c:	f001 fa2f 	bl	802627e <vQueueDelete>
            hSemaphore = NULL;
 8024e20:	2300      	movs	r3, #0
 8024e22:	627b      	str	r3, [r7, #36]	; 0x24
 8024e24:	e010      	b.n	8024e48 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8024e26:	6a3b      	ldr	r3, [r7, #32]
 8024e28:	2b01      	cmp	r3, #1
 8024e2a:	d108      	bne.n	8024e3e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8024e2c:	687b      	ldr	r3, [r7, #4]
 8024e2e:	689b      	ldr	r3, [r3, #8]
 8024e30:	461a      	mov	r2, r3
 8024e32:	68b9      	ldr	r1, [r7, #8]
 8024e34:	68f8      	ldr	r0, [r7, #12]
 8024e36:	f000 fd20 	bl	802587a <xQueueCreateCountingSemaphoreStatic>
 8024e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8024e3c:	e004      	b.n	8024e48 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8024e3e:	68b9      	ldr	r1, [r7, #8]
 8024e40:	68f8      	ldr	r0, [r7, #12]
 8024e42:	f000 fd4f 	bl	80258e4 <xQueueCreateCountingSemaphore>
 8024e46:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8024e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e4a:	2b00      	cmp	r3, #0
 8024e4c:	d00c      	beq.n	8024e68 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8024e4e:	687b      	ldr	r3, [r7, #4]
 8024e50:	2b00      	cmp	r3, #0
 8024e52:	d003      	beq.n	8024e5c <osSemaphoreNew+0x120>
          name = attr->name;
 8024e54:	687b      	ldr	r3, [r7, #4]
 8024e56:	681b      	ldr	r3, [r3, #0]
 8024e58:	61fb      	str	r3, [r7, #28]
 8024e5a:	e001      	b.n	8024e60 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8024e5c:	2300      	movs	r3, #0
 8024e5e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8024e60:	69f9      	ldr	r1, [r7, #28]
 8024e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024e64:	f001 fb56 	bl	8026514 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8024e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8024e6a:	4618      	mov	r0, r3
 8024e6c:	3728      	adds	r7, #40	; 0x28
 8024e6e:	46bd      	mov	sp, r7
 8024e70:	bd80      	pop	{r7, pc}
 8024e72:	bf00      	nop
 8024e74:	2400142c 	.word	0x2400142c

08024e78 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8024e78:	b580      	push	{r7, lr}
 8024e7a:	b088      	sub	sp, #32
 8024e7c:	af00      	add	r7, sp, #0
 8024e7e:	6078      	str	r0, [r7, #4]
 8024e80:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8024e82:	687b      	ldr	r3, [r7, #4]
 8024e84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8024e86:	2300      	movs	r3, #0
 8024e88:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8024e8a:	69bb      	ldr	r3, [r7, #24]
 8024e8c:	2b00      	cmp	r3, #0
 8024e8e:	d103      	bne.n	8024e98 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8024e90:	f06f 0303 	mvn.w	r3, #3
 8024e94:	61fb      	str	r3, [r7, #28]
 8024e96:	e04b      	b.n	8024f30 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024e98:	f3ef 8305 	mrs	r3, IPSR
 8024e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8024e9e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	d10f      	bne.n	8024ec4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8024ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8024eaa:	693b      	ldr	r3, [r7, #16]
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	d105      	bne.n	8024ebc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8024eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8024eb6:	68fb      	ldr	r3, [r7, #12]
 8024eb8:	2b00      	cmp	r3, #0
 8024eba:	d026      	beq.n	8024f0a <osSemaphoreAcquire+0x92>
 8024ebc:	4b1f      	ldr	r3, [pc, #124]	; (8024f3c <osSemaphoreAcquire+0xc4>)
 8024ebe:	681b      	ldr	r3, [r3, #0]
 8024ec0:	2b02      	cmp	r3, #2
 8024ec2:	d122      	bne.n	8024f0a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8024ec4:	683b      	ldr	r3, [r7, #0]
 8024ec6:	2b00      	cmp	r3, #0
 8024ec8:	d003      	beq.n	8024ed2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8024eca:	f06f 0303 	mvn.w	r3, #3
 8024ece:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8024ed0:	e02d      	b.n	8024f2e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8024ed2:	2300      	movs	r3, #0
 8024ed4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8024ed6:	f107 0308 	add.w	r3, r7, #8
 8024eda:	461a      	mov	r2, r3
 8024edc:	2100      	movs	r1, #0
 8024ede:	69b8      	ldr	r0, [r7, #24]
 8024ee0:	f001 f92e 	bl	8026140 <xQueueReceiveFromISR>
 8024ee4:	4603      	mov	r3, r0
 8024ee6:	2b01      	cmp	r3, #1
 8024ee8:	d003      	beq.n	8024ef2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8024eea:	f06f 0302 	mvn.w	r3, #2
 8024eee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8024ef0:	e01d      	b.n	8024f2e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8024ef2:	68bb      	ldr	r3, [r7, #8]
 8024ef4:	2b00      	cmp	r3, #0
 8024ef6:	d01a      	beq.n	8024f2e <osSemaphoreAcquire+0xb6>
 8024ef8:	4b11      	ldr	r3, [pc, #68]	; (8024f40 <osSemaphoreAcquire+0xc8>)
 8024efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024efe:	601a      	str	r2, [r3, #0]
 8024f00:	f3bf 8f4f 	dsb	sy
 8024f04:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8024f08:	e011      	b.n	8024f2e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8024f0a:	6839      	ldr	r1, [r7, #0]
 8024f0c:	69b8      	ldr	r0, [r7, #24]
 8024f0e:	f001 f80f 	bl	8025f30 <xQueueSemaphoreTake>
 8024f12:	4603      	mov	r3, r0
 8024f14:	2b01      	cmp	r3, #1
 8024f16:	d00b      	beq.n	8024f30 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8024f18:	683b      	ldr	r3, [r7, #0]
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	d003      	beq.n	8024f26 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8024f1e:	f06f 0301 	mvn.w	r3, #1
 8024f22:	61fb      	str	r3, [r7, #28]
 8024f24:	e004      	b.n	8024f30 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8024f26:	f06f 0302 	mvn.w	r3, #2
 8024f2a:	61fb      	str	r3, [r7, #28]
 8024f2c:	e000      	b.n	8024f30 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8024f2e:	bf00      	nop
      }
    }
  }

  return (stat);
 8024f30:	69fb      	ldr	r3, [r7, #28]
}
 8024f32:	4618      	mov	r0, r3
 8024f34:	3720      	adds	r7, #32
 8024f36:	46bd      	mov	sp, r7
 8024f38:	bd80      	pop	{r7, pc}
 8024f3a:	bf00      	nop
 8024f3c:	2400142c 	.word	0x2400142c
 8024f40:	e000ed04 	.word	0xe000ed04

08024f44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8024f44:	b580      	push	{r7, lr}
 8024f46:	b088      	sub	sp, #32
 8024f48:	af00      	add	r7, sp, #0
 8024f4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8024f4c:	687b      	ldr	r3, [r7, #4]
 8024f4e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8024f50:	2300      	movs	r3, #0
 8024f52:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8024f54:	69bb      	ldr	r3, [r7, #24]
 8024f56:	2b00      	cmp	r3, #0
 8024f58:	d103      	bne.n	8024f62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8024f5a:	f06f 0303 	mvn.w	r3, #3
 8024f5e:	61fb      	str	r3, [r7, #28]
 8024f60:	e03e      	b.n	8024fe0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8024f62:	f3ef 8305 	mrs	r3, IPSR
 8024f66:	617b      	str	r3, [r7, #20]
  return(result);
 8024f68:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	d10f      	bne.n	8024f8e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8024f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8024f72:	613b      	str	r3, [r7, #16]
  return(result);
 8024f74:	693b      	ldr	r3, [r7, #16]
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	d105      	bne.n	8024f86 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8024f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8024f7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8024f80:	68fb      	ldr	r3, [r7, #12]
 8024f82:	2b00      	cmp	r3, #0
 8024f84:	d01e      	beq.n	8024fc4 <osSemaphoreRelease+0x80>
 8024f86:	4b19      	ldr	r3, [pc, #100]	; (8024fec <osSemaphoreRelease+0xa8>)
 8024f88:	681b      	ldr	r3, [r3, #0]
 8024f8a:	2b02      	cmp	r3, #2
 8024f8c:	d11a      	bne.n	8024fc4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8024f8e:	2300      	movs	r3, #0
 8024f90:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8024f92:	f107 0308 	add.w	r3, r7, #8
 8024f96:	4619      	mov	r1, r3
 8024f98:	69b8      	ldr	r0, [r7, #24]
 8024f9a:	f000 fe63 	bl	8025c64 <xQueueGiveFromISR>
 8024f9e:	4603      	mov	r3, r0
 8024fa0:	2b01      	cmp	r3, #1
 8024fa2:	d003      	beq.n	8024fac <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8024fa4:	f06f 0302 	mvn.w	r3, #2
 8024fa8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8024faa:	e018      	b.n	8024fde <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8024fac:	68bb      	ldr	r3, [r7, #8]
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	d015      	beq.n	8024fde <osSemaphoreRelease+0x9a>
 8024fb2:	4b0f      	ldr	r3, [pc, #60]	; (8024ff0 <osSemaphoreRelease+0xac>)
 8024fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024fb8:	601a      	str	r2, [r3, #0]
 8024fba:	f3bf 8f4f 	dsb	sy
 8024fbe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8024fc2:	e00c      	b.n	8024fde <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8024fc4:	2300      	movs	r3, #0
 8024fc6:	2200      	movs	r2, #0
 8024fc8:	2100      	movs	r1, #0
 8024fca:	69b8      	ldr	r0, [r7, #24]
 8024fcc:	f000 fcbc 	bl	8025948 <xQueueGenericSend>
 8024fd0:	4603      	mov	r3, r0
 8024fd2:	2b01      	cmp	r3, #1
 8024fd4:	d004      	beq.n	8024fe0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8024fd6:	f06f 0302 	mvn.w	r3, #2
 8024fda:	61fb      	str	r3, [r7, #28]
 8024fdc:	e000      	b.n	8024fe0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8024fde:	bf00      	nop
    }
  }

  return (stat);
 8024fe0:	69fb      	ldr	r3, [r7, #28]
}
 8024fe2:	4618      	mov	r0, r3
 8024fe4:	3720      	adds	r7, #32
 8024fe6:	46bd      	mov	sp, r7
 8024fe8:	bd80      	pop	{r7, pc}
 8024fea:	bf00      	nop
 8024fec:	2400142c 	.word	0x2400142c
 8024ff0:	e000ed04 	.word	0xe000ed04

08024ff4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8024ff4:	b580      	push	{r7, lr}
 8024ff6:	b088      	sub	sp, #32
 8024ff8:	af00      	add	r7, sp, #0
 8024ffa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8024ffc:	687b      	ldr	r3, [r7, #4]
 8024ffe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8025000:	f3ef 8305 	mrs	r3, IPSR
 8025004:	617b      	str	r3, [r7, #20]
  return(result);
 8025006:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8025008:	2b00      	cmp	r3, #0
 802500a:	d10f      	bne.n	802502c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802500c:	f3ef 8310 	mrs	r3, PRIMASK
 8025010:	613b      	str	r3, [r7, #16]
  return(result);
 8025012:	693b      	ldr	r3, [r7, #16]
 8025014:	2b00      	cmp	r3, #0
 8025016:	d105      	bne.n	8025024 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8025018:	f3ef 8311 	mrs	r3, BASEPRI
 802501c:	60fb      	str	r3, [r7, #12]
  return(result);
 802501e:	68fb      	ldr	r3, [r7, #12]
 8025020:	2b00      	cmp	r3, #0
 8025022:	d007      	beq.n	8025034 <osSemaphoreDelete+0x40>
 8025024:	4b0d      	ldr	r3, [pc, #52]	; (802505c <osSemaphoreDelete+0x68>)
 8025026:	681b      	ldr	r3, [r3, #0]
 8025028:	2b02      	cmp	r3, #2
 802502a:	d103      	bne.n	8025034 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 802502c:	f06f 0305 	mvn.w	r3, #5
 8025030:	61fb      	str	r3, [r7, #28]
 8025032:	e00e      	b.n	8025052 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8025034:	69bb      	ldr	r3, [r7, #24]
 8025036:	2b00      	cmp	r3, #0
 8025038:	d103      	bne.n	8025042 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 802503a:	f06f 0303 	mvn.w	r3, #3
 802503e:	61fb      	str	r3, [r7, #28]
 8025040:	e007      	b.n	8025052 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8025042:	69b8      	ldr	r0, [r7, #24]
 8025044:	f001 fa8e 	bl	8026564 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8025048:	2300      	movs	r3, #0
 802504a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 802504c:	69b8      	ldr	r0, [r7, #24]
 802504e:	f001 f916 	bl	802627e <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8025052:	69fb      	ldr	r3, [r7, #28]
}
 8025054:	4618      	mov	r0, r3
 8025056:	3720      	adds	r7, #32
 8025058:	46bd      	mov	sp, r7
 802505a:	bd80      	pop	{r7, pc}
 802505c:	2400142c 	.word	0x2400142c

08025060 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8025060:	b580      	push	{r7, lr}
 8025062:	b08c      	sub	sp, #48	; 0x30
 8025064:	af02      	add	r7, sp, #8
 8025066:	60f8      	str	r0, [r7, #12]
 8025068:	60b9      	str	r1, [r7, #8]
 802506a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 802506c:	2300      	movs	r3, #0
 802506e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8025070:	f3ef 8305 	mrs	r3, IPSR
 8025074:	61bb      	str	r3, [r7, #24]
  return(result);
 8025076:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8025078:	2b00      	cmp	r3, #0
 802507a:	d170      	bne.n	802515e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802507c:	f3ef 8310 	mrs	r3, PRIMASK
 8025080:	617b      	str	r3, [r7, #20]
  return(result);
 8025082:	697b      	ldr	r3, [r7, #20]
 8025084:	2b00      	cmp	r3, #0
 8025086:	d105      	bne.n	8025094 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8025088:	f3ef 8311 	mrs	r3, BASEPRI
 802508c:	613b      	str	r3, [r7, #16]
  return(result);
 802508e:	693b      	ldr	r3, [r7, #16]
 8025090:	2b00      	cmp	r3, #0
 8025092:	d003      	beq.n	802509c <osMessageQueueNew+0x3c>
 8025094:	4b34      	ldr	r3, [pc, #208]	; (8025168 <osMessageQueueNew+0x108>)
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	2b02      	cmp	r3, #2
 802509a:	d060      	beq.n	802515e <osMessageQueueNew+0xfe>
 802509c:	68fb      	ldr	r3, [r7, #12]
 802509e:	2b00      	cmp	r3, #0
 80250a0:	d05d      	beq.n	802515e <osMessageQueueNew+0xfe>
 80250a2:	68bb      	ldr	r3, [r7, #8]
 80250a4:	2b00      	cmp	r3, #0
 80250a6:	d05a      	beq.n	802515e <osMessageQueueNew+0xfe>
    mem = -1;
 80250a8:	f04f 33ff 	mov.w	r3, #4294967295
 80250ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80250ae:	687b      	ldr	r3, [r7, #4]
 80250b0:	2b00      	cmp	r3, #0
 80250b2:	d029      	beq.n	8025108 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80250b4:	687b      	ldr	r3, [r7, #4]
 80250b6:	689b      	ldr	r3, [r3, #8]
 80250b8:	2b00      	cmp	r3, #0
 80250ba:	d012      	beq.n	80250e2 <osMessageQueueNew+0x82>
 80250bc:	687b      	ldr	r3, [r7, #4]
 80250be:	68db      	ldr	r3, [r3, #12]
 80250c0:	2b4f      	cmp	r3, #79	; 0x4f
 80250c2:	d90e      	bls.n	80250e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80250c4:	687b      	ldr	r3, [r7, #4]
 80250c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80250c8:	2b00      	cmp	r3, #0
 80250ca:	d00a      	beq.n	80250e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80250cc:	687b      	ldr	r3, [r7, #4]
 80250ce:	695a      	ldr	r2, [r3, #20]
 80250d0:	68fb      	ldr	r3, [r7, #12]
 80250d2:	68b9      	ldr	r1, [r7, #8]
 80250d4:	fb01 f303 	mul.w	r3, r1, r3
 80250d8:	429a      	cmp	r2, r3
 80250da:	d302      	bcc.n	80250e2 <osMessageQueueNew+0x82>
        mem = 1;
 80250dc:	2301      	movs	r3, #1
 80250de:	623b      	str	r3, [r7, #32]
 80250e0:	e014      	b.n	802510c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80250e2:	687b      	ldr	r3, [r7, #4]
 80250e4:	689b      	ldr	r3, [r3, #8]
 80250e6:	2b00      	cmp	r3, #0
 80250e8:	d110      	bne.n	802510c <osMessageQueueNew+0xac>
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	68db      	ldr	r3, [r3, #12]
 80250ee:	2b00      	cmp	r3, #0
 80250f0:	d10c      	bne.n	802510c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80250f2:	687b      	ldr	r3, [r7, #4]
 80250f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80250f6:	2b00      	cmp	r3, #0
 80250f8:	d108      	bne.n	802510c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80250fa:	687b      	ldr	r3, [r7, #4]
 80250fc:	695b      	ldr	r3, [r3, #20]
 80250fe:	2b00      	cmp	r3, #0
 8025100:	d104      	bne.n	802510c <osMessageQueueNew+0xac>
          mem = 0;
 8025102:	2300      	movs	r3, #0
 8025104:	623b      	str	r3, [r7, #32]
 8025106:	e001      	b.n	802510c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8025108:	2300      	movs	r3, #0
 802510a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 802510c:	6a3b      	ldr	r3, [r7, #32]
 802510e:	2b01      	cmp	r3, #1
 8025110:	d10c      	bne.n	802512c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8025112:	687b      	ldr	r3, [r7, #4]
 8025114:	691a      	ldr	r2, [r3, #16]
 8025116:	687b      	ldr	r3, [r7, #4]
 8025118:	6899      	ldr	r1, [r3, #8]
 802511a:	2300      	movs	r3, #0
 802511c:	9300      	str	r3, [sp, #0]
 802511e:	460b      	mov	r3, r1
 8025120:	68b9      	ldr	r1, [r7, #8]
 8025122:	68f8      	ldr	r0, [r7, #12]
 8025124:	f000 fad4 	bl	80256d0 <xQueueGenericCreateStatic>
 8025128:	6278      	str	r0, [r7, #36]	; 0x24
 802512a:	e008      	b.n	802513e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 802512c:	6a3b      	ldr	r3, [r7, #32]
 802512e:	2b00      	cmp	r3, #0
 8025130:	d105      	bne.n	802513e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8025132:	2200      	movs	r2, #0
 8025134:	68b9      	ldr	r1, [r7, #8]
 8025136:	68f8      	ldr	r0, [r7, #12]
 8025138:	f000 fb3d 	bl	80257b6 <xQueueGenericCreate>
 802513c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 802513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025140:	2b00      	cmp	r3, #0
 8025142:	d00c      	beq.n	802515e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8025144:	687b      	ldr	r3, [r7, #4]
 8025146:	2b00      	cmp	r3, #0
 8025148:	d003      	beq.n	8025152 <osMessageQueueNew+0xf2>
        name = attr->name;
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	681b      	ldr	r3, [r3, #0]
 802514e:	61fb      	str	r3, [r7, #28]
 8025150:	e001      	b.n	8025156 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8025152:	2300      	movs	r3, #0
 8025154:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8025156:	69f9      	ldr	r1, [r7, #28]
 8025158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802515a:	f001 f9db 	bl	8026514 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 802515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8025160:	4618      	mov	r0, r3
 8025162:	3728      	adds	r7, #40	; 0x28
 8025164:	46bd      	mov	sp, r7
 8025166:	bd80      	pop	{r7, pc}
 8025168:	2400142c 	.word	0x2400142c

0802516c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 802516c:	b580      	push	{r7, lr}
 802516e:	b08a      	sub	sp, #40	; 0x28
 8025170:	af00      	add	r7, sp, #0
 8025172:	60f8      	str	r0, [r7, #12]
 8025174:	60b9      	str	r1, [r7, #8]
 8025176:	603b      	str	r3, [r7, #0]
 8025178:	4613      	mov	r3, r2
 802517a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 802517c:	68fb      	ldr	r3, [r7, #12]
 802517e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8025180:	2300      	movs	r3, #0
 8025182:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8025184:	f3ef 8305 	mrs	r3, IPSR
 8025188:	61fb      	str	r3, [r7, #28]
  return(result);
 802518a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 802518c:	2b00      	cmp	r3, #0
 802518e:	d10f      	bne.n	80251b0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025190:	f3ef 8310 	mrs	r3, PRIMASK
 8025194:	61bb      	str	r3, [r7, #24]
  return(result);
 8025196:	69bb      	ldr	r3, [r7, #24]
 8025198:	2b00      	cmp	r3, #0
 802519a:	d105      	bne.n	80251a8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802519c:	f3ef 8311 	mrs	r3, BASEPRI
 80251a0:	617b      	str	r3, [r7, #20]
  return(result);
 80251a2:	697b      	ldr	r3, [r7, #20]
 80251a4:	2b00      	cmp	r3, #0
 80251a6:	d02c      	beq.n	8025202 <osMessageQueuePut+0x96>
 80251a8:	4b28      	ldr	r3, [pc, #160]	; (802524c <osMessageQueuePut+0xe0>)
 80251aa:	681b      	ldr	r3, [r3, #0]
 80251ac:	2b02      	cmp	r3, #2
 80251ae:	d128      	bne.n	8025202 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80251b0:	6a3b      	ldr	r3, [r7, #32]
 80251b2:	2b00      	cmp	r3, #0
 80251b4:	d005      	beq.n	80251c2 <osMessageQueuePut+0x56>
 80251b6:	68bb      	ldr	r3, [r7, #8]
 80251b8:	2b00      	cmp	r3, #0
 80251ba:	d002      	beq.n	80251c2 <osMessageQueuePut+0x56>
 80251bc:	683b      	ldr	r3, [r7, #0]
 80251be:	2b00      	cmp	r3, #0
 80251c0:	d003      	beq.n	80251ca <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80251c2:	f06f 0303 	mvn.w	r3, #3
 80251c6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80251c8:	e039      	b.n	802523e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80251ca:	2300      	movs	r3, #0
 80251cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80251ce:	f107 0210 	add.w	r2, r7, #16
 80251d2:	2300      	movs	r3, #0
 80251d4:	68b9      	ldr	r1, [r7, #8]
 80251d6:	6a38      	ldr	r0, [r7, #32]
 80251d8:	f000 fcb0 	bl	8025b3c <xQueueGenericSendFromISR>
 80251dc:	4603      	mov	r3, r0
 80251de:	2b01      	cmp	r3, #1
 80251e0:	d003      	beq.n	80251ea <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80251e2:	f06f 0302 	mvn.w	r3, #2
 80251e6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80251e8:	e029      	b.n	802523e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80251ea:	693b      	ldr	r3, [r7, #16]
 80251ec:	2b00      	cmp	r3, #0
 80251ee:	d026      	beq.n	802523e <osMessageQueuePut+0xd2>
 80251f0:	4b17      	ldr	r3, [pc, #92]	; (8025250 <osMessageQueuePut+0xe4>)
 80251f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80251f6:	601a      	str	r2, [r3, #0]
 80251f8:	f3bf 8f4f 	dsb	sy
 80251fc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8025200:	e01d      	b.n	802523e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8025202:	6a3b      	ldr	r3, [r7, #32]
 8025204:	2b00      	cmp	r3, #0
 8025206:	d002      	beq.n	802520e <osMessageQueuePut+0xa2>
 8025208:	68bb      	ldr	r3, [r7, #8]
 802520a:	2b00      	cmp	r3, #0
 802520c:	d103      	bne.n	8025216 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 802520e:	f06f 0303 	mvn.w	r3, #3
 8025212:	627b      	str	r3, [r7, #36]	; 0x24
 8025214:	e014      	b.n	8025240 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8025216:	2300      	movs	r3, #0
 8025218:	683a      	ldr	r2, [r7, #0]
 802521a:	68b9      	ldr	r1, [r7, #8]
 802521c:	6a38      	ldr	r0, [r7, #32]
 802521e:	f000 fb93 	bl	8025948 <xQueueGenericSend>
 8025222:	4603      	mov	r3, r0
 8025224:	2b01      	cmp	r3, #1
 8025226:	d00b      	beq.n	8025240 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8025228:	683b      	ldr	r3, [r7, #0]
 802522a:	2b00      	cmp	r3, #0
 802522c:	d003      	beq.n	8025236 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 802522e:	f06f 0301 	mvn.w	r3, #1
 8025232:	627b      	str	r3, [r7, #36]	; 0x24
 8025234:	e004      	b.n	8025240 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8025236:	f06f 0302 	mvn.w	r3, #2
 802523a:	627b      	str	r3, [r7, #36]	; 0x24
 802523c:	e000      	b.n	8025240 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 802523e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8025240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8025242:	4618      	mov	r0, r3
 8025244:	3728      	adds	r7, #40	; 0x28
 8025246:	46bd      	mov	sp, r7
 8025248:	bd80      	pop	{r7, pc}
 802524a:	bf00      	nop
 802524c:	2400142c 	.word	0x2400142c
 8025250:	e000ed04 	.word	0xe000ed04

08025254 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8025254:	b580      	push	{r7, lr}
 8025256:	b08a      	sub	sp, #40	; 0x28
 8025258:	af00      	add	r7, sp, #0
 802525a:	60f8      	str	r0, [r7, #12]
 802525c:	60b9      	str	r1, [r7, #8]
 802525e:	607a      	str	r2, [r7, #4]
 8025260:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8025262:	68fb      	ldr	r3, [r7, #12]
 8025264:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8025266:	2300      	movs	r3, #0
 8025268:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802526a:	f3ef 8305 	mrs	r3, IPSR
 802526e:	61fb      	str	r3, [r7, #28]
  return(result);
 8025270:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8025272:	2b00      	cmp	r3, #0
 8025274:	d10f      	bne.n	8025296 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025276:	f3ef 8310 	mrs	r3, PRIMASK
 802527a:	61bb      	str	r3, [r7, #24]
  return(result);
 802527c:	69bb      	ldr	r3, [r7, #24]
 802527e:	2b00      	cmp	r3, #0
 8025280:	d105      	bne.n	802528e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8025282:	f3ef 8311 	mrs	r3, BASEPRI
 8025286:	617b      	str	r3, [r7, #20]
  return(result);
 8025288:	697b      	ldr	r3, [r7, #20]
 802528a:	2b00      	cmp	r3, #0
 802528c:	d02c      	beq.n	80252e8 <osMessageQueueGet+0x94>
 802528e:	4b28      	ldr	r3, [pc, #160]	; (8025330 <osMessageQueueGet+0xdc>)
 8025290:	681b      	ldr	r3, [r3, #0]
 8025292:	2b02      	cmp	r3, #2
 8025294:	d128      	bne.n	80252e8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8025296:	6a3b      	ldr	r3, [r7, #32]
 8025298:	2b00      	cmp	r3, #0
 802529a:	d005      	beq.n	80252a8 <osMessageQueueGet+0x54>
 802529c:	68bb      	ldr	r3, [r7, #8]
 802529e:	2b00      	cmp	r3, #0
 80252a0:	d002      	beq.n	80252a8 <osMessageQueueGet+0x54>
 80252a2:	683b      	ldr	r3, [r7, #0]
 80252a4:	2b00      	cmp	r3, #0
 80252a6:	d003      	beq.n	80252b0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80252a8:	f06f 0303 	mvn.w	r3, #3
 80252ac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80252ae:	e038      	b.n	8025322 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80252b0:	2300      	movs	r3, #0
 80252b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80252b4:	f107 0310 	add.w	r3, r7, #16
 80252b8:	461a      	mov	r2, r3
 80252ba:	68b9      	ldr	r1, [r7, #8]
 80252bc:	6a38      	ldr	r0, [r7, #32]
 80252be:	f000 ff3f 	bl	8026140 <xQueueReceiveFromISR>
 80252c2:	4603      	mov	r3, r0
 80252c4:	2b01      	cmp	r3, #1
 80252c6:	d003      	beq.n	80252d0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80252c8:	f06f 0302 	mvn.w	r3, #2
 80252cc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80252ce:	e028      	b.n	8025322 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80252d0:	693b      	ldr	r3, [r7, #16]
 80252d2:	2b00      	cmp	r3, #0
 80252d4:	d025      	beq.n	8025322 <osMessageQueueGet+0xce>
 80252d6:	4b17      	ldr	r3, [pc, #92]	; (8025334 <osMessageQueueGet+0xe0>)
 80252d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80252dc:	601a      	str	r2, [r3, #0]
 80252de:	f3bf 8f4f 	dsb	sy
 80252e2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80252e6:	e01c      	b.n	8025322 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80252e8:	6a3b      	ldr	r3, [r7, #32]
 80252ea:	2b00      	cmp	r3, #0
 80252ec:	d002      	beq.n	80252f4 <osMessageQueueGet+0xa0>
 80252ee:	68bb      	ldr	r3, [r7, #8]
 80252f0:	2b00      	cmp	r3, #0
 80252f2:	d103      	bne.n	80252fc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80252f4:	f06f 0303 	mvn.w	r3, #3
 80252f8:	627b      	str	r3, [r7, #36]	; 0x24
 80252fa:	e013      	b.n	8025324 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80252fc:	683a      	ldr	r2, [r7, #0]
 80252fe:	68b9      	ldr	r1, [r7, #8]
 8025300:	6a38      	ldr	r0, [r7, #32]
 8025302:	f000 fd39 	bl	8025d78 <xQueueReceive>
 8025306:	4603      	mov	r3, r0
 8025308:	2b01      	cmp	r3, #1
 802530a:	d00b      	beq.n	8025324 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 802530c:	683b      	ldr	r3, [r7, #0]
 802530e:	2b00      	cmp	r3, #0
 8025310:	d003      	beq.n	802531a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8025312:	f06f 0301 	mvn.w	r3, #1
 8025316:	627b      	str	r3, [r7, #36]	; 0x24
 8025318:	e004      	b.n	8025324 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 802531a:	f06f 0302 	mvn.w	r3, #2
 802531e:	627b      	str	r3, [r7, #36]	; 0x24
 8025320:	e000      	b.n	8025324 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8025322:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8025324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8025326:	4618      	mov	r0, r3
 8025328:	3728      	adds	r7, #40	; 0x28
 802532a:	46bd      	mov	sp, r7
 802532c:	bd80      	pop	{r7, pc}
 802532e:	bf00      	nop
 8025330:	2400142c 	.word	0x2400142c
 8025334:	e000ed04 	.word	0xe000ed04

08025338 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8025338:	b580      	push	{r7, lr}
 802533a:	b08c      	sub	sp, #48	; 0x30
 802533c:	af00      	add	r7, sp, #0
 802533e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8025340:	687b      	ldr	r3, [r7, #4]
 8025342:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8025344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025346:	2b00      	cmp	r3, #0
 8025348:	d102      	bne.n	8025350 <osMessageQueueGetSpace+0x18>
    space = 0U;
 802534a:	2300      	movs	r3, #0
 802534c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802534e:	e033      	b.n	80253b8 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8025350:	f3ef 8305 	mrs	r3, IPSR
 8025354:	623b      	str	r3, [r7, #32]
  return(result);
 8025356:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 8025358:	2b00      	cmp	r3, #0
 802535a:	d10f      	bne.n	802537c <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802535c:	f3ef 8310 	mrs	r3, PRIMASK
 8025360:	61fb      	str	r3, [r7, #28]
  return(result);
 8025362:	69fb      	ldr	r3, [r7, #28]
 8025364:	2b00      	cmp	r3, #0
 8025366:	d105      	bne.n	8025374 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8025368:	f3ef 8311 	mrs	r3, BASEPRI
 802536c:	61bb      	str	r3, [r7, #24]
  return(result);
 802536e:	69bb      	ldr	r3, [r7, #24]
 8025370:	2b00      	cmp	r3, #0
 8025372:	d01d      	beq.n	80253b0 <osMessageQueueGetSpace+0x78>
 8025374:	4b13      	ldr	r3, [pc, #76]	; (80253c4 <osMessageQueueGetSpace+0x8c>)
 8025376:	681b      	ldr	r3, [r3, #0]
 8025378:	2b02      	cmp	r3, #2
 802537a:	d119      	bne.n	80253b0 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 802537c:	f3ef 8211 	mrs	r2, BASEPRI
 8025380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025384:	f383 8811 	msr	BASEPRI, r3
 8025388:	f3bf 8f6f 	isb	sy
 802538c:	f3bf 8f4f 	dsb	sy
 8025390:	613a      	str	r2, [r7, #16]
 8025392:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8025394:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8025396:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8025398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802539a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80253a0:	1ad3      	subs	r3, r2, r3
 80253a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80253a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80253a8:	697b      	ldr	r3, [r7, #20]
 80253aa:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 80253ae:	e003      	b.n	80253b8 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 80253b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80253b2:	f000 ff42 	bl	802623a <uxQueueSpacesAvailable>
 80253b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 80253b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80253ba:	4618      	mov	r0, r3
 80253bc:	3730      	adds	r7, #48	; 0x30
 80253be:	46bd      	mov	sp, r7
 80253c0:	bd80      	pop	{r7, pc}
 80253c2:	bf00      	nop
 80253c4:	2400142c 	.word	0x2400142c

080253c8 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80253c8:	b580      	push	{r7, lr}
 80253ca:	b088      	sub	sp, #32
 80253cc:	af00      	add	r7, sp, #0
 80253ce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80253d0:	687b      	ldr	r3, [r7, #4]
 80253d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80253d4:	f3ef 8305 	mrs	r3, IPSR
 80253d8:	617b      	str	r3, [r7, #20]
  return(result);
 80253da:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80253dc:	2b00      	cmp	r3, #0
 80253de:	d10f      	bne.n	8025400 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80253e0:	f3ef 8310 	mrs	r3, PRIMASK
 80253e4:	613b      	str	r3, [r7, #16]
  return(result);
 80253e6:	693b      	ldr	r3, [r7, #16]
 80253e8:	2b00      	cmp	r3, #0
 80253ea:	d105      	bne.n	80253f8 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80253ec:	f3ef 8311 	mrs	r3, BASEPRI
 80253f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80253f2:	68fb      	ldr	r3, [r7, #12]
 80253f4:	2b00      	cmp	r3, #0
 80253f6:	d007      	beq.n	8025408 <osMessageQueueReset+0x40>
 80253f8:	4b0c      	ldr	r3, [pc, #48]	; (802542c <osMessageQueueReset+0x64>)
 80253fa:	681b      	ldr	r3, [r3, #0]
 80253fc:	2b02      	cmp	r3, #2
 80253fe:	d103      	bne.n	8025408 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8025400:	f06f 0305 	mvn.w	r3, #5
 8025404:	61fb      	str	r3, [r7, #28]
 8025406:	e00c      	b.n	8025422 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 8025408:	69bb      	ldr	r3, [r7, #24]
 802540a:	2b00      	cmp	r3, #0
 802540c:	d103      	bne.n	8025416 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 802540e:	f06f 0303 	mvn.w	r3, #3
 8025412:	61fb      	str	r3, [r7, #28]
 8025414:	e005      	b.n	8025422 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 8025416:	2300      	movs	r3, #0
 8025418:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 802541a:	2100      	movs	r1, #0
 802541c:	69b8      	ldr	r0, [r7, #24]
 802541e:	f000 f8ef 	bl	8025600 <xQueueGenericReset>
  }

  return (stat);
 8025422:	69fb      	ldr	r3, [r7, #28]
}
 8025424:	4618      	mov	r0, r3
 8025426:	3720      	adds	r7, #32
 8025428:	46bd      	mov	sp, r7
 802542a:	bd80      	pop	{r7, pc}
 802542c:	2400142c 	.word	0x2400142c

08025430 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8025430:	b480      	push	{r7}
 8025432:	b085      	sub	sp, #20
 8025434:	af00      	add	r7, sp, #0
 8025436:	60f8      	str	r0, [r7, #12]
 8025438:	60b9      	str	r1, [r7, #8]
 802543a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 802543c:	68fb      	ldr	r3, [r7, #12]
 802543e:	4a07      	ldr	r2, [pc, #28]	; (802545c <vApplicationGetIdleTaskMemory+0x2c>)
 8025440:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8025442:	68bb      	ldr	r3, [r7, #8]
 8025444:	4a06      	ldr	r2, [pc, #24]	; (8025460 <vApplicationGetIdleTaskMemory+0x30>)
 8025446:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8025448:	687b      	ldr	r3, [r7, #4]
 802544a:	2280      	movs	r2, #128	; 0x80
 802544c:	601a      	str	r2, [r3, #0]
}
 802544e:	bf00      	nop
 8025450:	3714      	adds	r7, #20
 8025452:	46bd      	mov	sp, r7
 8025454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025458:	4770      	bx	lr
 802545a:	bf00      	nop
 802545c:	24001430 	.word	0x24001430
 8025460:	2400148c 	.word	0x2400148c

08025464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8025464:	b480      	push	{r7}
 8025466:	b085      	sub	sp, #20
 8025468:	af00      	add	r7, sp, #0
 802546a:	60f8      	str	r0, [r7, #12]
 802546c:	60b9      	str	r1, [r7, #8]
 802546e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8025470:	68fb      	ldr	r3, [r7, #12]
 8025472:	4a07      	ldr	r2, [pc, #28]	; (8025490 <vApplicationGetTimerTaskMemory+0x2c>)
 8025474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8025476:	68bb      	ldr	r3, [r7, #8]
 8025478:	4a06      	ldr	r2, [pc, #24]	; (8025494 <vApplicationGetTimerTaskMemory+0x30>)
 802547a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 802547c:	687b      	ldr	r3, [r7, #4]
 802547e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025482:	601a      	str	r2, [r3, #0]
}
 8025484:	bf00      	nop
 8025486:	3714      	adds	r7, #20
 8025488:	46bd      	mov	sp, r7
 802548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802548e:	4770      	bx	lr
 8025490:	2400168c 	.word	0x2400168c
 8025494:	240016e8 	.word	0x240016e8

08025498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8025498:	b480      	push	{r7}
 802549a:	b083      	sub	sp, #12
 802549c:	af00      	add	r7, sp, #0
 802549e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80254a0:	687b      	ldr	r3, [r7, #4]
 80254a2:	f103 0208 	add.w	r2, r3, #8
 80254a6:	687b      	ldr	r3, [r7, #4]
 80254a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80254aa:	687b      	ldr	r3, [r7, #4]
 80254ac:	f04f 32ff 	mov.w	r2, #4294967295
 80254b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	f103 0208 	add.w	r2, r3, #8
 80254b8:	687b      	ldr	r3, [r7, #4]
 80254ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80254bc:	687b      	ldr	r3, [r7, #4]
 80254be:	f103 0208 	add.w	r2, r3, #8
 80254c2:	687b      	ldr	r3, [r7, #4]
 80254c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80254c6:	687b      	ldr	r3, [r7, #4]
 80254c8:	2200      	movs	r2, #0
 80254ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80254cc:	bf00      	nop
 80254ce:	370c      	adds	r7, #12
 80254d0:	46bd      	mov	sp, r7
 80254d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254d6:	4770      	bx	lr

080254d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80254d8:	b480      	push	{r7}
 80254da:	b083      	sub	sp, #12
 80254dc:	af00      	add	r7, sp, #0
 80254de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80254e0:	687b      	ldr	r3, [r7, #4]
 80254e2:	2200      	movs	r2, #0
 80254e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80254e6:	bf00      	nop
 80254e8:	370c      	adds	r7, #12
 80254ea:	46bd      	mov	sp, r7
 80254ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254f0:	4770      	bx	lr

080254f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80254f2:	b480      	push	{r7}
 80254f4:	b085      	sub	sp, #20
 80254f6:	af00      	add	r7, sp, #0
 80254f8:	6078      	str	r0, [r7, #4]
 80254fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80254fc:	687b      	ldr	r3, [r7, #4]
 80254fe:	685b      	ldr	r3, [r3, #4]
 8025500:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8025502:	683b      	ldr	r3, [r7, #0]
 8025504:	68fa      	ldr	r2, [r7, #12]
 8025506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8025508:	68fb      	ldr	r3, [r7, #12]
 802550a:	689a      	ldr	r2, [r3, #8]
 802550c:	683b      	ldr	r3, [r7, #0]
 802550e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8025510:	68fb      	ldr	r3, [r7, #12]
 8025512:	689b      	ldr	r3, [r3, #8]
 8025514:	683a      	ldr	r2, [r7, #0]
 8025516:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8025518:	68fb      	ldr	r3, [r7, #12]
 802551a:	683a      	ldr	r2, [r7, #0]
 802551c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802551e:	683b      	ldr	r3, [r7, #0]
 8025520:	687a      	ldr	r2, [r7, #4]
 8025522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8025524:	687b      	ldr	r3, [r7, #4]
 8025526:	681b      	ldr	r3, [r3, #0]
 8025528:	1c5a      	adds	r2, r3, #1
 802552a:	687b      	ldr	r3, [r7, #4]
 802552c:	601a      	str	r2, [r3, #0]
}
 802552e:	bf00      	nop
 8025530:	3714      	adds	r7, #20
 8025532:	46bd      	mov	sp, r7
 8025534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025538:	4770      	bx	lr

0802553a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802553a:	b480      	push	{r7}
 802553c:	b085      	sub	sp, #20
 802553e:	af00      	add	r7, sp, #0
 8025540:	6078      	str	r0, [r7, #4]
 8025542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8025544:	683b      	ldr	r3, [r7, #0]
 8025546:	681b      	ldr	r3, [r3, #0]
 8025548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802554a:	68bb      	ldr	r3, [r7, #8]
 802554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025550:	d103      	bne.n	802555a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8025552:	687b      	ldr	r3, [r7, #4]
 8025554:	691b      	ldr	r3, [r3, #16]
 8025556:	60fb      	str	r3, [r7, #12]
 8025558:	e00c      	b.n	8025574 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802555a:	687b      	ldr	r3, [r7, #4]
 802555c:	3308      	adds	r3, #8
 802555e:	60fb      	str	r3, [r7, #12]
 8025560:	e002      	b.n	8025568 <vListInsert+0x2e>
 8025562:	68fb      	ldr	r3, [r7, #12]
 8025564:	685b      	ldr	r3, [r3, #4]
 8025566:	60fb      	str	r3, [r7, #12]
 8025568:	68fb      	ldr	r3, [r7, #12]
 802556a:	685b      	ldr	r3, [r3, #4]
 802556c:	681b      	ldr	r3, [r3, #0]
 802556e:	68ba      	ldr	r2, [r7, #8]
 8025570:	429a      	cmp	r2, r3
 8025572:	d2f6      	bcs.n	8025562 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8025574:	68fb      	ldr	r3, [r7, #12]
 8025576:	685a      	ldr	r2, [r3, #4]
 8025578:	683b      	ldr	r3, [r7, #0]
 802557a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 802557c:	683b      	ldr	r3, [r7, #0]
 802557e:	685b      	ldr	r3, [r3, #4]
 8025580:	683a      	ldr	r2, [r7, #0]
 8025582:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8025584:	683b      	ldr	r3, [r7, #0]
 8025586:	68fa      	ldr	r2, [r7, #12]
 8025588:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 802558a:	68fb      	ldr	r3, [r7, #12]
 802558c:	683a      	ldr	r2, [r7, #0]
 802558e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8025590:	683b      	ldr	r3, [r7, #0]
 8025592:	687a      	ldr	r2, [r7, #4]
 8025594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8025596:	687b      	ldr	r3, [r7, #4]
 8025598:	681b      	ldr	r3, [r3, #0]
 802559a:	1c5a      	adds	r2, r3, #1
 802559c:	687b      	ldr	r3, [r7, #4]
 802559e:	601a      	str	r2, [r3, #0]
}
 80255a0:	bf00      	nop
 80255a2:	3714      	adds	r7, #20
 80255a4:	46bd      	mov	sp, r7
 80255a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255aa:	4770      	bx	lr

080255ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80255ac:	b480      	push	{r7}
 80255ae:	b085      	sub	sp, #20
 80255b0:	af00      	add	r7, sp, #0
 80255b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80255b4:	687b      	ldr	r3, [r7, #4]
 80255b6:	691b      	ldr	r3, [r3, #16]
 80255b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80255ba:	687b      	ldr	r3, [r7, #4]
 80255bc:	685b      	ldr	r3, [r3, #4]
 80255be:	687a      	ldr	r2, [r7, #4]
 80255c0:	6892      	ldr	r2, [r2, #8]
 80255c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80255c4:	687b      	ldr	r3, [r7, #4]
 80255c6:	689b      	ldr	r3, [r3, #8]
 80255c8:	687a      	ldr	r2, [r7, #4]
 80255ca:	6852      	ldr	r2, [r2, #4]
 80255cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80255ce:	68fb      	ldr	r3, [r7, #12]
 80255d0:	685b      	ldr	r3, [r3, #4]
 80255d2:	687a      	ldr	r2, [r7, #4]
 80255d4:	429a      	cmp	r2, r3
 80255d6:	d103      	bne.n	80255e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80255d8:	687b      	ldr	r3, [r7, #4]
 80255da:	689a      	ldr	r2, [r3, #8]
 80255dc:	68fb      	ldr	r3, [r7, #12]
 80255de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80255e0:	687b      	ldr	r3, [r7, #4]
 80255e2:	2200      	movs	r2, #0
 80255e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80255e6:	68fb      	ldr	r3, [r7, #12]
 80255e8:	681b      	ldr	r3, [r3, #0]
 80255ea:	1e5a      	subs	r2, r3, #1
 80255ec:	68fb      	ldr	r3, [r7, #12]
 80255ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80255f0:	68fb      	ldr	r3, [r7, #12]
 80255f2:	681b      	ldr	r3, [r3, #0]
}
 80255f4:	4618      	mov	r0, r3
 80255f6:	3714      	adds	r7, #20
 80255f8:	46bd      	mov	sp, r7
 80255fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255fe:	4770      	bx	lr

08025600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8025600:	b580      	push	{r7, lr}
 8025602:	b084      	sub	sp, #16
 8025604:	af00      	add	r7, sp, #0
 8025606:	6078      	str	r0, [r7, #4]
 8025608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802560a:	687b      	ldr	r3, [r7, #4]
 802560c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802560e:	68fb      	ldr	r3, [r7, #12]
 8025610:	2b00      	cmp	r3, #0
 8025612:	d109      	bne.n	8025628 <xQueueGenericReset+0x28>
	__asm volatile
 8025614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025618:	f383 8811 	msr	BASEPRI, r3
 802561c:	f3bf 8f6f 	isb	sy
 8025620:	f3bf 8f4f 	dsb	sy
 8025624:	60bb      	str	r3, [r7, #8]
 8025626:	e7fe      	b.n	8025626 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8025628:	f002 fec8 	bl	80283bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802562c:	68fb      	ldr	r3, [r7, #12]
 802562e:	681a      	ldr	r2, [r3, #0]
 8025630:	68fb      	ldr	r3, [r7, #12]
 8025632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025634:	68f9      	ldr	r1, [r7, #12]
 8025636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8025638:	fb01 f303 	mul.w	r3, r1, r3
 802563c:	441a      	add	r2, r3
 802563e:	68fb      	ldr	r3, [r7, #12]
 8025640:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8025642:	68fb      	ldr	r3, [r7, #12]
 8025644:	2200      	movs	r2, #0
 8025646:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8025648:	68fb      	ldr	r3, [r7, #12]
 802564a:	681a      	ldr	r2, [r3, #0]
 802564c:	68fb      	ldr	r3, [r7, #12]
 802564e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8025650:	68fb      	ldr	r3, [r7, #12]
 8025652:	681a      	ldr	r2, [r3, #0]
 8025654:	68fb      	ldr	r3, [r7, #12]
 8025656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025658:	3b01      	subs	r3, #1
 802565a:	68f9      	ldr	r1, [r7, #12]
 802565c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802565e:	fb01 f303 	mul.w	r3, r1, r3
 8025662:	441a      	add	r2, r3
 8025664:	68fb      	ldr	r3, [r7, #12]
 8025666:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8025668:	68fb      	ldr	r3, [r7, #12]
 802566a:	22ff      	movs	r2, #255	; 0xff
 802566c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8025670:	68fb      	ldr	r3, [r7, #12]
 8025672:	22ff      	movs	r2, #255	; 0xff
 8025674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8025678:	683b      	ldr	r3, [r7, #0]
 802567a:	2b00      	cmp	r3, #0
 802567c:	d114      	bne.n	80256a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802567e:	68fb      	ldr	r3, [r7, #12]
 8025680:	691b      	ldr	r3, [r3, #16]
 8025682:	2b00      	cmp	r3, #0
 8025684:	d01a      	beq.n	80256bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8025686:	68fb      	ldr	r3, [r7, #12]
 8025688:	3310      	adds	r3, #16
 802568a:	4618      	mov	r0, r3
 802568c:	f001 fca6 	bl	8026fdc <xTaskRemoveFromEventList>
 8025690:	4603      	mov	r3, r0
 8025692:	2b00      	cmp	r3, #0
 8025694:	d012      	beq.n	80256bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8025696:	4b0d      	ldr	r3, [pc, #52]	; (80256cc <xQueueGenericReset+0xcc>)
 8025698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802569c:	601a      	str	r2, [r3, #0]
 802569e:	f3bf 8f4f 	dsb	sy
 80256a2:	f3bf 8f6f 	isb	sy
 80256a6:	e009      	b.n	80256bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80256a8:	68fb      	ldr	r3, [r7, #12]
 80256aa:	3310      	adds	r3, #16
 80256ac:	4618      	mov	r0, r3
 80256ae:	f7ff fef3 	bl	8025498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80256b2:	68fb      	ldr	r3, [r7, #12]
 80256b4:	3324      	adds	r3, #36	; 0x24
 80256b6:	4618      	mov	r0, r3
 80256b8:	f7ff feee 	bl	8025498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80256bc:	f002 feac 	bl	8028418 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80256c0:	2301      	movs	r3, #1
}
 80256c2:	4618      	mov	r0, r3
 80256c4:	3710      	adds	r7, #16
 80256c6:	46bd      	mov	sp, r7
 80256c8:	bd80      	pop	{r7, pc}
 80256ca:	bf00      	nop
 80256cc:	e000ed04 	.word	0xe000ed04

080256d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80256d0:	b580      	push	{r7, lr}
 80256d2:	b08e      	sub	sp, #56	; 0x38
 80256d4:	af02      	add	r7, sp, #8
 80256d6:	60f8      	str	r0, [r7, #12]
 80256d8:	60b9      	str	r1, [r7, #8]
 80256da:	607a      	str	r2, [r7, #4]
 80256dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80256de:	68fb      	ldr	r3, [r7, #12]
 80256e0:	2b00      	cmp	r3, #0
 80256e2:	d109      	bne.n	80256f8 <xQueueGenericCreateStatic+0x28>
 80256e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80256e8:	f383 8811 	msr	BASEPRI, r3
 80256ec:	f3bf 8f6f 	isb	sy
 80256f0:	f3bf 8f4f 	dsb	sy
 80256f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80256f6:	e7fe      	b.n	80256f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80256f8:	683b      	ldr	r3, [r7, #0]
 80256fa:	2b00      	cmp	r3, #0
 80256fc:	d109      	bne.n	8025712 <xQueueGenericCreateStatic+0x42>
 80256fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025702:	f383 8811 	msr	BASEPRI, r3
 8025706:	f3bf 8f6f 	isb	sy
 802570a:	f3bf 8f4f 	dsb	sy
 802570e:	627b      	str	r3, [r7, #36]	; 0x24
 8025710:	e7fe      	b.n	8025710 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8025712:	687b      	ldr	r3, [r7, #4]
 8025714:	2b00      	cmp	r3, #0
 8025716:	d002      	beq.n	802571e <xQueueGenericCreateStatic+0x4e>
 8025718:	68bb      	ldr	r3, [r7, #8]
 802571a:	2b00      	cmp	r3, #0
 802571c:	d001      	beq.n	8025722 <xQueueGenericCreateStatic+0x52>
 802571e:	2301      	movs	r3, #1
 8025720:	e000      	b.n	8025724 <xQueueGenericCreateStatic+0x54>
 8025722:	2300      	movs	r3, #0
 8025724:	2b00      	cmp	r3, #0
 8025726:	d109      	bne.n	802573c <xQueueGenericCreateStatic+0x6c>
 8025728:	f04f 0350 	mov.w	r3, #80	; 0x50
 802572c:	f383 8811 	msr	BASEPRI, r3
 8025730:	f3bf 8f6f 	isb	sy
 8025734:	f3bf 8f4f 	dsb	sy
 8025738:	623b      	str	r3, [r7, #32]
 802573a:	e7fe      	b.n	802573a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 802573c:	687b      	ldr	r3, [r7, #4]
 802573e:	2b00      	cmp	r3, #0
 8025740:	d102      	bne.n	8025748 <xQueueGenericCreateStatic+0x78>
 8025742:	68bb      	ldr	r3, [r7, #8]
 8025744:	2b00      	cmp	r3, #0
 8025746:	d101      	bne.n	802574c <xQueueGenericCreateStatic+0x7c>
 8025748:	2301      	movs	r3, #1
 802574a:	e000      	b.n	802574e <xQueueGenericCreateStatic+0x7e>
 802574c:	2300      	movs	r3, #0
 802574e:	2b00      	cmp	r3, #0
 8025750:	d109      	bne.n	8025766 <xQueueGenericCreateStatic+0x96>
 8025752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025756:	f383 8811 	msr	BASEPRI, r3
 802575a:	f3bf 8f6f 	isb	sy
 802575e:	f3bf 8f4f 	dsb	sy
 8025762:	61fb      	str	r3, [r7, #28]
 8025764:	e7fe      	b.n	8025764 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8025766:	2350      	movs	r3, #80	; 0x50
 8025768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 802576a:	697b      	ldr	r3, [r7, #20]
 802576c:	2b50      	cmp	r3, #80	; 0x50
 802576e:	d009      	beq.n	8025784 <xQueueGenericCreateStatic+0xb4>
 8025770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025774:	f383 8811 	msr	BASEPRI, r3
 8025778:	f3bf 8f6f 	isb	sy
 802577c:	f3bf 8f4f 	dsb	sy
 8025780:	61bb      	str	r3, [r7, #24]
 8025782:	e7fe      	b.n	8025782 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8025784:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8025786:	683b      	ldr	r3, [r7, #0]
 8025788:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 802578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802578c:	2b00      	cmp	r3, #0
 802578e:	d00d      	beq.n	80257ac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8025790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025792:	2201      	movs	r2, #1
 8025794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8025798:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 802579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802579e:	9300      	str	r3, [sp, #0]
 80257a0:	4613      	mov	r3, r2
 80257a2:	687a      	ldr	r2, [r7, #4]
 80257a4:	68b9      	ldr	r1, [r7, #8]
 80257a6:	68f8      	ldr	r0, [r7, #12]
 80257a8:	f000 f844 	bl	8025834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80257ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80257ae:	4618      	mov	r0, r3
 80257b0:	3730      	adds	r7, #48	; 0x30
 80257b2:	46bd      	mov	sp, r7
 80257b4:	bd80      	pop	{r7, pc}

080257b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80257b6:	b580      	push	{r7, lr}
 80257b8:	b08a      	sub	sp, #40	; 0x28
 80257ba:	af02      	add	r7, sp, #8
 80257bc:	60f8      	str	r0, [r7, #12]
 80257be:	60b9      	str	r1, [r7, #8]
 80257c0:	4613      	mov	r3, r2
 80257c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80257c4:	68fb      	ldr	r3, [r7, #12]
 80257c6:	2b00      	cmp	r3, #0
 80257c8:	d109      	bne.n	80257de <xQueueGenericCreate+0x28>
 80257ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80257ce:	f383 8811 	msr	BASEPRI, r3
 80257d2:	f3bf 8f6f 	isb	sy
 80257d6:	f3bf 8f4f 	dsb	sy
 80257da:	613b      	str	r3, [r7, #16]
 80257dc:	e7fe      	b.n	80257dc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80257de:	68bb      	ldr	r3, [r7, #8]
 80257e0:	2b00      	cmp	r3, #0
 80257e2:	d102      	bne.n	80257ea <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80257e4:	2300      	movs	r3, #0
 80257e6:	61fb      	str	r3, [r7, #28]
 80257e8:	e004      	b.n	80257f4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80257ea:	68fb      	ldr	r3, [r7, #12]
 80257ec:	68ba      	ldr	r2, [r7, #8]
 80257ee:	fb02 f303 	mul.w	r3, r2, r3
 80257f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80257f4:	69fb      	ldr	r3, [r7, #28]
 80257f6:	3350      	adds	r3, #80	; 0x50
 80257f8:	4618      	mov	r0, r3
 80257fa:	f002 fef9 	bl	80285f0 <pvPortMalloc>
 80257fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8025800:	69bb      	ldr	r3, [r7, #24]
 8025802:	2b00      	cmp	r3, #0
 8025804:	d011      	beq.n	802582a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8025806:	69bb      	ldr	r3, [r7, #24]
 8025808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802580a:	697b      	ldr	r3, [r7, #20]
 802580c:	3350      	adds	r3, #80	; 0x50
 802580e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8025810:	69bb      	ldr	r3, [r7, #24]
 8025812:	2200      	movs	r2, #0
 8025814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8025818:	79fa      	ldrb	r2, [r7, #7]
 802581a:	69bb      	ldr	r3, [r7, #24]
 802581c:	9300      	str	r3, [sp, #0]
 802581e:	4613      	mov	r3, r2
 8025820:	697a      	ldr	r2, [r7, #20]
 8025822:	68b9      	ldr	r1, [r7, #8]
 8025824:	68f8      	ldr	r0, [r7, #12]
 8025826:	f000 f805 	bl	8025834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802582a:	69bb      	ldr	r3, [r7, #24]
	}
 802582c:	4618      	mov	r0, r3
 802582e:	3720      	adds	r7, #32
 8025830:	46bd      	mov	sp, r7
 8025832:	bd80      	pop	{r7, pc}

08025834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8025834:	b580      	push	{r7, lr}
 8025836:	b084      	sub	sp, #16
 8025838:	af00      	add	r7, sp, #0
 802583a:	60f8      	str	r0, [r7, #12]
 802583c:	60b9      	str	r1, [r7, #8]
 802583e:	607a      	str	r2, [r7, #4]
 8025840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8025842:	68bb      	ldr	r3, [r7, #8]
 8025844:	2b00      	cmp	r3, #0
 8025846:	d103      	bne.n	8025850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8025848:	69bb      	ldr	r3, [r7, #24]
 802584a:	69ba      	ldr	r2, [r7, #24]
 802584c:	601a      	str	r2, [r3, #0]
 802584e:	e002      	b.n	8025856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8025850:	69bb      	ldr	r3, [r7, #24]
 8025852:	687a      	ldr	r2, [r7, #4]
 8025854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8025856:	69bb      	ldr	r3, [r7, #24]
 8025858:	68fa      	ldr	r2, [r7, #12]
 802585a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 802585c:	69bb      	ldr	r3, [r7, #24]
 802585e:	68ba      	ldr	r2, [r7, #8]
 8025860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8025862:	2101      	movs	r1, #1
 8025864:	69b8      	ldr	r0, [r7, #24]
 8025866:	f7ff fecb 	bl	8025600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 802586a:	69bb      	ldr	r3, [r7, #24]
 802586c:	78fa      	ldrb	r2, [r7, #3]
 802586e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8025872:	bf00      	nop
 8025874:	3710      	adds	r7, #16
 8025876:	46bd      	mov	sp, r7
 8025878:	bd80      	pop	{r7, pc}

0802587a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 802587a:	b580      	push	{r7, lr}
 802587c:	b08a      	sub	sp, #40	; 0x28
 802587e:	af02      	add	r7, sp, #8
 8025880:	60f8      	str	r0, [r7, #12]
 8025882:	60b9      	str	r1, [r7, #8]
 8025884:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8025886:	68fb      	ldr	r3, [r7, #12]
 8025888:	2b00      	cmp	r3, #0
 802588a:	d109      	bne.n	80258a0 <xQueueCreateCountingSemaphoreStatic+0x26>
 802588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025890:	f383 8811 	msr	BASEPRI, r3
 8025894:	f3bf 8f6f 	isb	sy
 8025898:	f3bf 8f4f 	dsb	sy
 802589c:	61bb      	str	r3, [r7, #24]
 802589e:	e7fe      	b.n	802589e <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80258a0:	68ba      	ldr	r2, [r7, #8]
 80258a2:	68fb      	ldr	r3, [r7, #12]
 80258a4:	429a      	cmp	r2, r3
 80258a6:	d909      	bls.n	80258bc <xQueueCreateCountingSemaphoreStatic+0x42>
 80258a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80258ac:	f383 8811 	msr	BASEPRI, r3
 80258b0:	f3bf 8f6f 	isb	sy
 80258b4:	f3bf 8f4f 	dsb	sy
 80258b8:	617b      	str	r3, [r7, #20]
 80258ba:	e7fe      	b.n	80258ba <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80258bc:	2302      	movs	r3, #2
 80258be:	9300      	str	r3, [sp, #0]
 80258c0:	687b      	ldr	r3, [r7, #4]
 80258c2:	2200      	movs	r2, #0
 80258c4:	2100      	movs	r1, #0
 80258c6:	68f8      	ldr	r0, [r7, #12]
 80258c8:	f7ff ff02 	bl	80256d0 <xQueueGenericCreateStatic>
 80258cc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80258ce:	69fb      	ldr	r3, [r7, #28]
 80258d0:	2b00      	cmp	r3, #0
 80258d2:	d002      	beq.n	80258da <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80258d4:	69fb      	ldr	r3, [r7, #28]
 80258d6:	68ba      	ldr	r2, [r7, #8]
 80258d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80258da:	69fb      	ldr	r3, [r7, #28]
	}
 80258dc:	4618      	mov	r0, r3
 80258de:	3720      	adds	r7, #32
 80258e0:	46bd      	mov	sp, r7
 80258e2:	bd80      	pop	{r7, pc}

080258e4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80258e4:	b580      	push	{r7, lr}
 80258e6:	b086      	sub	sp, #24
 80258e8:	af00      	add	r7, sp, #0
 80258ea:	6078      	str	r0, [r7, #4]
 80258ec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80258ee:	687b      	ldr	r3, [r7, #4]
 80258f0:	2b00      	cmp	r3, #0
 80258f2:	d109      	bne.n	8025908 <xQueueCreateCountingSemaphore+0x24>
 80258f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80258f8:	f383 8811 	msr	BASEPRI, r3
 80258fc:	f3bf 8f6f 	isb	sy
 8025900:	f3bf 8f4f 	dsb	sy
 8025904:	613b      	str	r3, [r7, #16]
 8025906:	e7fe      	b.n	8025906 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8025908:	683a      	ldr	r2, [r7, #0]
 802590a:	687b      	ldr	r3, [r7, #4]
 802590c:	429a      	cmp	r2, r3
 802590e:	d909      	bls.n	8025924 <xQueueCreateCountingSemaphore+0x40>
 8025910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025914:	f383 8811 	msr	BASEPRI, r3
 8025918:	f3bf 8f6f 	isb	sy
 802591c:	f3bf 8f4f 	dsb	sy
 8025920:	60fb      	str	r3, [r7, #12]
 8025922:	e7fe      	b.n	8025922 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8025924:	2202      	movs	r2, #2
 8025926:	2100      	movs	r1, #0
 8025928:	6878      	ldr	r0, [r7, #4]
 802592a:	f7ff ff44 	bl	80257b6 <xQueueGenericCreate>
 802592e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8025930:	697b      	ldr	r3, [r7, #20]
 8025932:	2b00      	cmp	r3, #0
 8025934:	d002      	beq.n	802593c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8025936:	697b      	ldr	r3, [r7, #20]
 8025938:	683a      	ldr	r2, [r7, #0]
 802593a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 802593c:	697b      	ldr	r3, [r7, #20]
	}
 802593e:	4618      	mov	r0, r3
 8025940:	3718      	adds	r7, #24
 8025942:	46bd      	mov	sp, r7
 8025944:	bd80      	pop	{r7, pc}
	...

08025948 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8025948:	b580      	push	{r7, lr}
 802594a:	b08e      	sub	sp, #56	; 0x38
 802594c:	af00      	add	r7, sp, #0
 802594e:	60f8      	str	r0, [r7, #12]
 8025950:	60b9      	str	r1, [r7, #8]
 8025952:	607a      	str	r2, [r7, #4]
 8025954:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8025956:	2300      	movs	r3, #0
 8025958:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802595a:	68fb      	ldr	r3, [r7, #12]
 802595c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025960:	2b00      	cmp	r3, #0
 8025962:	d109      	bne.n	8025978 <xQueueGenericSend+0x30>
 8025964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025968:	f383 8811 	msr	BASEPRI, r3
 802596c:	f3bf 8f6f 	isb	sy
 8025970:	f3bf 8f4f 	dsb	sy
 8025974:	62bb      	str	r3, [r7, #40]	; 0x28
 8025976:	e7fe      	b.n	8025976 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8025978:	68bb      	ldr	r3, [r7, #8]
 802597a:	2b00      	cmp	r3, #0
 802597c:	d103      	bne.n	8025986 <xQueueGenericSend+0x3e>
 802597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025982:	2b00      	cmp	r3, #0
 8025984:	d101      	bne.n	802598a <xQueueGenericSend+0x42>
 8025986:	2301      	movs	r3, #1
 8025988:	e000      	b.n	802598c <xQueueGenericSend+0x44>
 802598a:	2300      	movs	r3, #0
 802598c:	2b00      	cmp	r3, #0
 802598e:	d109      	bne.n	80259a4 <xQueueGenericSend+0x5c>
 8025990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025994:	f383 8811 	msr	BASEPRI, r3
 8025998:	f3bf 8f6f 	isb	sy
 802599c:	f3bf 8f4f 	dsb	sy
 80259a0:	627b      	str	r3, [r7, #36]	; 0x24
 80259a2:	e7fe      	b.n	80259a2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80259a4:	683b      	ldr	r3, [r7, #0]
 80259a6:	2b02      	cmp	r3, #2
 80259a8:	d103      	bne.n	80259b2 <xQueueGenericSend+0x6a>
 80259aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80259ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80259ae:	2b01      	cmp	r3, #1
 80259b0:	d101      	bne.n	80259b6 <xQueueGenericSend+0x6e>
 80259b2:	2301      	movs	r3, #1
 80259b4:	e000      	b.n	80259b8 <xQueueGenericSend+0x70>
 80259b6:	2300      	movs	r3, #0
 80259b8:	2b00      	cmp	r3, #0
 80259ba:	d109      	bne.n	80259d0 <xQueueGenericSend+0x88>
 80259bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80259c0:	f383 8811 	msr	BASEPRI, r3
 80259c4:	f3bf 8f6f 	isb	sy
 80259c8:	f3bf 8f4f 	dsb	sy
 80259cc:	623b      	str	r3, [r7, #32]
 80259ce:	e7fe      	b.n	80259ce <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80259d0:	f001 fcca 	bl	8027368 <xTaskGetSchedulerState>
 80259d4:	4603      	mov	r3, r0
 80259d6:	2b00      	cmp	r3, #0
 80259d8:	d102      	bne.n	80259e0 <xQueueGenericSend+0x98>
 80259da:	687b      	ldr	r3, [r7, #4]
 80259dc:	2b00      	cmp	r3, #0
 80259de:	d101      	bne.n	80259e4 <xQueueGenericSend+0x9c>
 80259e0:	2301      	movs	r3, #1
 80259e2:	e000      	b.n	80259e6 <xQueueGenericSend+0x9e>
 80259e4:	2300      	movs	r3, #0
 80259e6:	2b00      	cmp	r3, #0
 80259e8:	d109      	bne.n	80259fe <xQueueGenericSend+0xb6>
 80259ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80259ee:	f383 8811 	msr	BASEPRI, r3
 80259f2:	f3bf 8f6f 	isb	sy
 80259f6:	f3bf 8f4f 	dsb	sy
 80259fa:	61fb      	str	r3, [r7, #28]
 80259fc:	e7fe      	b.n	80259fc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80259fe:	f002 fcdd 	bl	80283bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8025a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8025a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025a0a:	429a      	cmp	r2, r3
 8025a0c:	d302      	bcc.n	8025a14 <xQueueGenericSend+0xcc>
 8025a0e:	683b      	ldr	r3, [r7, #0]
 8025a10:	2b02      	cmp	r3, #2
 8025a12:	d129      	bne.n	8025a68 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8025a14:	683a      	ldr	r2, [r7, #0]
 8025a16:	68b9      	ldr	r1, [r7, #8]
 8025a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025a1a:	f000 fc6a 	bl	80262f2 <prvCopyDataToQueue>
 8025a1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8025a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025a24:	2b00      	cmp	r3, #0
 8025a26:	d010      	beq.n	8025a4a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8025a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a2a:	3324      	adds	r3, #36	; 0x24
 8025a2c:	4618      	mov	r0, r3
 8025a2e:	f001 fad5 	bl	8026fdc <xTaskRemoveFromEventList>
 8025a32:	4603      	mov	r3, r0
 8025a34:	2b00      	cmp	r3, #0
 8025a36:	d013      	beq.n	8025a60 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8025a38:	4b3f      	ldr	r3, [pc, #252]	; (8025b38 <xQueueGenericSend+0x1f0>)
 8025a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025a3e:	601a      	str	r2, [r3, #0]
 8025a40:	f3bf 8f4f 	dsb	sy
 8025a44:	f3bf 8f6f 	isb	sy
 8025a48:	e00a      	b.n	8025a60 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8025a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025a4c:	2b00      	cmp	r3, #0
 8025a4e:	d007      	beq.n	8025a60 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8025a50:	4b39      	ldr	r3, [pc, #228]	; (8025b38 <xQueueGenericSend+0x1f0>)
 8025a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025a56:	601a      	str	r2, [r3, #0]
 8025a58:	f3bf 8f4f 	dsb	sy
 8025a5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8025a60:	f002 fcda 	bl	8028418 <vPortExitCritical>
				return pdPASS;
 8025a64:	2301      	movs	r3, #1
 8025a66:	e063      	b.n	8025b30 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8025a68:	687b      	ldr	r3, [r7, #4]
 8025a6a:	2b00      	cmp	r3, #0
 8025a6c:	d103      	bne.n	8025a76 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8025a6e:	f002 fcd3 	bl	8028418 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8025a72:	2300      	movs	r3, #0
 8025a74:	e05c      	b.n	8025b30 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8025a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025a78:	2b00      	cmp	r3, #0
 8025a7a:	d106      	bne.n	8025a8a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8025a7c:	f107 0314 	add.w	r3, r7, #20
 8025a80:	4618      	mov	r0, r3
 8025a82:	f001 fb0d 	bl	80270a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8025a86:	2301      	movs	r3, #1
 8025a88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8025a8a:	f002 fcc5 	bl	8028418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8025a8e:	f001 f877 	bl	8026b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8025a92:	f002 fc93 	bl	80283bc <vPortEnterCritical>
 8025a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025a9c:	b25b      	sxtb	r3, r3
 8025a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025aa2:	d103      	bne.n	8025aac <xQueueGenericSend+0x164>
 8025aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025aa6:	2200      	movs	r2, #0
 8025aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025ab2:	b25b      	sxtb	r3, r3
 8025ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025ab8:	d103      	bne.n	8025ac2 <xQueueGenericSend+0x17a>
 8025aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025abc:	2200      	movs	r2, #0
 8025abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8025ac2:	f002 fca9 	bl	8028418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8025ac6:	1d3a      	adds	r2, r7, #4
 8025ac8:	f107 0314 	add.w	r3, r7, #20
 8025acc:	4611      	mov	r1, r2
 8025ace:	4618      	mov	r0, r3
 8025ad0:	f001 fafc 	bl	80270cc <xTaskCheckForTimeOut>
 8025ad4:	4603      	mov	r3, r0
 8025ad6:	2b00      	cmp	r3, #0
 8025ad8:	d124      	bne.n	8025b24 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8025ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025adc:	f000 fd01 	bl	80264e2 <prvIsQueueFull>
 8025ae0:	4603      	mov	r3, r0
 8025ae2:	2b00      	cmp	r3, #0
 8025ae4:	d018      	beq.n	8025b18 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8025ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ae8:	3310      	adds	r3, #16
 8025aea:	687a      	ldr	r2, [r7, #4]
 8025aec:	4611      	mov	r1, r2
 8025aee:	4618      	mov	r0, r3
 8025af0:	f001 fa26 	bl	8026f40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8025af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025af6:	f000 fc8c 	bl	8026412 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8025afa:	f001 f84f 	bl	8026b9c <xTaskResumeAll>
 8025afe:	4603      	mov	r3, r0
 8025b00:	2b00      	cmp	r3, #0
 8025b02:	f47f af7c 	bne.w	80259fe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8025b06:	4b0c      	ldr	r3, [pc, #48]	; (8025b38 <xQueueGenericSend+0x1f0>)
 8025b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025b0c:	601a      	str	r2, [r3, #0]
 8025b0e:	f3bf 8f4f 	dsb	sy
 8025b12:	f3bf 8f6f 	isb	sy
 8025b16:	e772      	b.n	80259fe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8025b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025b1a:	f000 fc7a 	bl	8026412 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8025b1e:	f001 f83d 	bl	8026b9c <xTaskResumeAll>
 8025b22:	e76c      	b.n	80259fe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8025b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025b26:	f000 fc74 	bl	8026412 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8025b2a:	f001 f837 	bl	8026b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8025b2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8025b30:	4618      	mov	r0, r3
 8025b32:	3738      	adds	r7, #56	; 0x38
 8025b34:	46bd      	mov	sp, r7
 8025b36:	bd80      	pop	{r7, pc}
 8025b38:	e000ed04 	.word	0xe000ed04

08025b3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8025b3c:	b580      	push	{r7, lr}
 8025b3e:	b08e      	sub	sp, #56	; 0x38
 8025b40:	af00      	add	r7, sp, #0
 8025b42:	60f8      	str	r0, [r7, #12]
 8025b44:	60b9      	str	r1, [r7, #8]
 8025b46:	607a      	str	r2, [r7, #4]
 8025b48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8025b4a:	68fb      	ldr	r3, [r7, #12]
 8025b4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8025b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b50:	2b00      	cmp	r3, #0
 8025b52:	d109      	bne.n	8025b68 <xQueueGenericSendFromISR+0x2c>
 8025b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025b58:	f383 8811 	msr	BASEPRI, r3
 8025b5c:	f3bf 8f6f 	isb	sy
 8025b60:	f3bf 8f4f 	dsb	sy
 8025b64:	627b      	str	r3, [r7, #36]	; 0x24
 8025b66:	e7fe      	b.n	8025b66 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8025b68:	68bb      	ldr	r3, [r7, #8]
 8025b6a:	2b00      	cmp	r3, #0
 8025b6c:	d103      	bne.n	8025b76 <xQueueGenericSendFromISR+0x3a>
 8025b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025b72:	2b00      	cmp	r3, #0
 8025b74:	d101      	bne.n	8025b7a <xQueueGenericSendFromISR+0x3e>
 8025b76:	2301      	movs	r3, #1
 8025b78:	e000      	b.n	8025b7c <xQueueGenericSendFromISR+0x40>
 8025b7a:	2300      	movs	r3, #0
 8025b7c:	2b00      	cmp	r3, #0
 8025b7e:	d109      	bne.n	8025b94 <xQueueGenericSendFromISR+0x58>
 8025b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025b84:	f383 8811 	msr	BASEPRI, r3
 8025b88:	f3bf 8f6f 	isb	sy
 8025b8c:	f3bf 8f4f 	dsb	sy
 8025b90:	623b      	str	r3, [r7, #32]
 8025b92:	e7fe      	b.n	8025b92 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8025b94:	683b      	ldr	r3, [r7, #0]
 8025b96:	2b02      	cmp	r3, #2
 8025b98:	d103      	bne.n	8025ba2 <xQueueGenericSendFromISR+0x66>
 8025b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025b9e:	2b01      	cmp	r3, #1
 8025ba0:	d101      	bne.n	8025ba6 <xQueueGenericSendFromISR+0x6a>
 8025ba2:	2301      	movs	r3, #1
 8025ba4:	e000      	b.n	8025ba8 <xQueueGenericSendFromISR+0x6c>
 8025ba6:	2300      	movs	r3, #0
 8025ba8:	2b00      	cmp	r3, #0
 8025baa:	d109      	bne.n	8025bc0 <xQueueGenericSendFromISR+0x84>
 8025bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025bb0:	f383 8811 	msr	BASEPRI, r3
 8025bb4:	f3bf 8f6f 	isb	sy
 8025bb8:	f3bf 8f4f 	dsb	sy
 8025bbc:	61fb      	str	r3, [r7, #28]
 8025bbe:	e7fe      	b.n	8025bbe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8025bc0:	f002 fcd8 	bl	8028574 <vPortValidateInterruptPriority>
	__asm volatile
 8025bc4:	f3ef 8211 	mrs	r2, BASEPRI
 8025bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025bcc:	f383 8811 	msr	BASEPRI, r3
 8025bd0:	f3bf 8f6f 	isb	sy
 8025bd4:	f3bf 8f4f 	dsb	sy
 8025bd8:	61ba      	str	r2, [r7, #24]
 8025bda:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8025bdc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8025bde:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8025be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8025be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025be8:	429a      	cmp	r2, r3
 8025bea:	d302      	bcc.n	8025bf2 <xQueueGenericSendFromISR+0xb6>
 8025bec:	683b      	ldr	r3, [r7, #0]
 8025bee:	2b02      	cmp	r3, #2
 8025bf0:	d12c      	bne.n	8025c4c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8025bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8025bfc:	683a      	ldr	r2, [r7, #0]
 8025bfe:	68b9      	ldr	r1, [r7, #8]
 8025c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025c02:	f000 fb76 	bl	80262f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8025c06:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8025c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025c0e:	d112      	bne.n	8025c36 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8025c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c14:	2b00      	cmp	r3, #0
 8025c16:	d016      	beq.n	8025c46 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8025c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c1a:	3324      	adds	r3, #36	; 0x24
 8025c1c:	4618      	mov	r0, r3
 8025c1e:	f001 f9dd 	bl	8026fdc <xTaskRemoveFromEventList>
 8025c22:	4603      	mov	r3, r0
 8025c24:	2b00      	cmp	r3, #0
 8025c26:	d00e      	beq.n	8025c46 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8025c28:	687b      	ldr	r3, [r7, #4]
 8025c2a:	2b00      	cmp	r3, #0
 8025c2c:	d00b      	beq.n	8025c46 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8025c2e:	687b      	ldr	r3, [r7, #4]
 8025c30:	2201      	movs	r2, #1
 8025c32:	601a      	str	r2, [r3, #0]
 8025c34:	e007      	b.n	8025c46 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8025c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8025c3a:	3301      	adds	r3, #1
 8025c3c:	b2db      	uxtb	r3, r3
 8025c3e:	b25a      	sxtb	r2, r3
 8025c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8025c46:	2301      	movs	r3, #1
 8025c48:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8025c4a:	e001      	b.n	8025c50 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8025c4c:	2300      	movs	r3, #0
 8025c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8025c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025c52:	613b      	str	r3, [r7, #16]
	__asm volatile
 8025c54:	693b      	ldr	r3, [r7, #16]
 8025c56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8025c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8025c5c:	4618      	mov	r0, r3
 8025c5e:	3738      	adds	r7, #56	; 0x38
 8025c60:	46bd      	mov	sp, r7
 8025c62:	bd80      	pop	{r7, pc}

08025c64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8025c64:	b580      	push	{r7, lr}
 8025c66:	b08e      	sub	sp, #56	; 0x38
 8025c68:	af00      	add	r7, sp, #0
 8025c6a:	6078      	str	r0, [r7, #4]
 8025c6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8025c6e:	687b      	ldr	r3, [r7, #4]
 8025c70:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8025c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d109      	bne.n	8025c8c <xQueueGiveFromISR+0x28>
	__asm volatile
 8025c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025c7c:	f383 8811 	msr	BASEPRI, r3
 8025c80:	f3bf 8f6f 	isb	sy
 8025c84:	f3bf 8f4f 	dsb	sy
 8025c88:	623b      	str	r3, [r7, #32]
 8025c8a:	e7fe      	b.n	8025c8a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8025c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025c90:	2b00      	cmp	r3, #0
 8025c92:	d009      	beq.n	8025ca8 <xQueueGiveFromISR+0x44>
 8025c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025c98:	f383 8811 	msr	BASEPRI, r3
 8025c9c:	f3bf 8f6f 	isb	sy
 8025ca0:	f3bf 8f4f 	dsb	sy
 8025ca4:	61fb      	str	r3, [r7, #28]
 8025ca6:	e7fe      	b.n	8025ca6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8025ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025caa:	681b      	ldr	r3, [r3, #0]
 8025cac:	2b00      	cmp	r3, #0
 8025cae:	d103      	bne.n	8025cb8 <xQueueGiveFromISR+0x54>
 8025cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025cb2:	689b      	ldr	r3, [r3, #8]
 8025cb4:	2b00      	cmp	r3, #0
 8025cb6:	d101      	bne.n	8025cbc <xQueueGiveFromISR+0x58>
 8025cb8:	2301      	movs	r3, #1
 8025cba:	e000      	b.n	8025cbe <xQueueGiveFromISR+0x5a>
 8025cbc:	2300      	movs	r3, #0
 8025cbe:	2b00      	cmp	r3, #0
 8025cc0:	d109      	bne.n	8025cd6 <xQueueGiveFromISR+0x72>
 8025cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025cc6:	f383 8811 	msr	BASEPRI, r3
 8025cca:	f3bf 8f6f 	isb	sy
 8025cce:	f3bf 8f4f 	dsb	sy
 8025cd2:	61bb      	str	r3, [r7, #24]
 8025cd4:	e7fe      	b.n	8025cd4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8025cd6:	f002 fc4d 	bl	8028574 <vPortValidateInterruptPriority>
	__asm volatile
 8025cda:	f3ef 8211 	mrs	r2, BASEPRI
 8025cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025ce2:	f383 8811 	msr	BASEPRI, r3
 8025ce6:	f3bf 8f6f 	isb	sy
 8025cea:	f3bf 8f4f 	dsb	sy
 8025cee:	617a      	str	r2, [r7, #20]
 8025cf0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8025cf2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8025cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8025cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025cfa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8025cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025d02:	429a      	cmp	r2, r3
 8025d04:	d22b      	bcs.n	8025d5e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8025d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8025d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d12:	1c5a      	adds	r2, r3, #1
 8025d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d16:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8025d18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8025d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025d20:	d112      	bne.n	8025d48 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8025d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025d26:	2b00      	cmp	r3, #0
 8025d28:	d016      	beq.n	8025d58 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8025d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d2c:	3324      	adds	r3, #36	; 0x24
 8025d2e:	4618      	mov	r0, r3
 8025d30:	f001 f954 	bl	8026fdc <xTaskRemoveFromEventList>
 8025d34:	4603      	mov	r3, r0
 8025d36:	2b00      	cmp	r3, #0
 8025d38:	d00e      	beq.n	8025d58 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8025d3a:	683b      	ldr	r3, [r7, #0]
 8025d3c:	2b00      	cmp	r3, #0
 8025d3e:	d00b      	beq.n	8025d58 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8025d40:	683b      	ldr	r3, [r7, #0]
 8025d42:	2201      	movs	r2, #1
 8025d44:	601a      	str	r2, [r3, #0]
 8025d46:	e007      	b.n	8025d58 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8025d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025d4c:	3301      	adds	r3, #1
 8025d4e:	b2db      	uxtb	r3, r3
 8025d50:	b25a      	sxtb	r2, r3
 8025d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8025d58:	2301      	movs	r3, #1
 8025d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8025d5c:	e001      	b.n	8025d62 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8025d5e:	2300      	movs	r3, #0
 8025d60:	637b      	str	r3, [r7, #52]	; 0x34
 8025d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d64:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8025d66:	68fb      	ldr	r3, [r7, #12]
 8025d68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8025d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8025d6e:	4618      	mov	r0, r3
 8025d70:	3738      	adds	r7, #56	; 0x38
 8025d72:	46bd      	mov	sp, r7
 8025d74:	bd80      	pop	{r7, pc}
	...

08025d78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8025d78:	b580      	push	{r7, lr}
 8025d7a:	b08c      	sub	sp, #48	; 0x30
 8025d7c:	af00      	add	r7, sp, #0
 8025d7e:	60f8      	str	r0, [r7, #12]
 8025d80:	60b9      	str	r1, [r7, #8]
 8025d82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8025d84:	2300      	movs	r3, #0
 8025d86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8025d88:	68fb      	ldr	r3, [r7, #12]
 8025d8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8025d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d8e:	2b00      	cmp	r3, #0
 8025d90:	d109      	bne.n	8025da6 <xQueueReceive+0x2e>
	__asm volatile
 8025d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025d96:	f383 8811 	msr	BASEPRI, r3
 8025d9a:	f3bf 8f6f 	isb	sy
 8025d9e:	f3bf 8f4f 	dsb	sy
 8025da2:	623b      	str	r3, [r7, #32]
 8025da4:	e7fe      	b.n	8025da4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8025da6:	68bb      	ldr	r3, [r7, #8]
 8025da8:	2b00      	cmp	r3, #0
 8025daa:	d103      	bne.n	8025db4 <xQueueReceive+0x3c>
 8025dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025db0:	2b00      	cmp	r3, #0
 8025db2:	d101      	bne.n	8025db8 <xQueueReceive+0x40>
 8025db4:	2301      	movs	r3, #1
 8025db6:	e000      	b.n	8025dba <xQueueReceive+0x42>
 8025db8:	2300      	movs	r3, #0
 8025dba:	2b00      	cmp	r3, #0
 8025dbc:	d109      	bne.n	8025dd2 <xQueueReceive+0x5a>
 8025dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025dc2:	f383 8811 	msr	BASEPRI, r3
 8025dc6:	f3bf 8f6f 	isb	sy
 8025dca:	f3bf 8f4f 	dsb	sy
 8025dce:	61fb      	str	r3, [r7, #28]
 8025dd0:	e7fe      	b.n	8025dd0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8025dd2:	f001 fac9 	bl	8027368 <xTaskGetSchedulerState>
 8025dd6:	4603      	mov	r3, r0
 8025dd8:	2b00      	cmp	r3, #0
 8025dda:	d102      	bne.n	8025de2 <xQueueReceive+0x6a>
 8025ddc:	687b      	ldr	r3, [r7, #4]
 8025dde:	2b00      	cmp	r3, #0
 8025de0:	d101      	bne.n	8025de6 <xQueueReceive+0x6e>
 8025de2:	2301      	movs	r3, #1
 8025de4:	e000      	b.n	8025de8 <xQueueReceive+0x70>
 8025de6:	2300      	movs	r3, #0
 8025de8:	2b00      	cmp	r3, #0
 8025dea:	d109      	bne.n	8025e00 <xQueueReceive+0x88>
 8025dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025df0:	f383 8811 	msr	BASEPRI, r3
 8025df4:	f3bf 8f6f 	isb	sy
 8025df8:	f3bf 8f4f 	dsb	sy
 8025dfc:	61bb      	str	r3, [r7, #24]
 8025dfe:	e7fe      	b.n	8025dfe <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8025e00:	f002 fadc 	bl	80283bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8025e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025e08:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8025e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e0c:	2b00      	cmp	r3, #0
 8025e0e:	d01f      	beq.n	8025e50 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8025e10:	68b9      	ldr	r1, [r7, #8]
 8025e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025e14:	f000 fad7 	bl	80263c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8025e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e1a:	1e5a      	subs	r2, r3, #1
 8025e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e1e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8025e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e22:	691b      	ldr	r3, [r3, #16]
 8025e24:	2b00      	cmp	r3, #0
 8025e26:	d00f      	beq.n	8025e48 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8025e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e2a:	3310      	adds	r3, #16
 8025e2c:	4618      	mov	r0, r3
 8025e2e:	f001 f8d5 	bl	8026fdc <xTaskRemoveFromEventList>
 8025e32:	4603      	mov	r3, r0
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	d007      	beq.n	8025e48 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8025e38:	4b3c      	ldr	r3, [pc, #240]	; (8025f2c <xQueueReceive+0x1b4>)
 8025e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025e3e:	601a      	str	r2, [r3, #0]
 8025e40:	f3bf 8f4f 	dsb	sy
 8025e44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8025e48:	f002 fae6 	bl	8028418 <vPortExitCritical>
				return pdPASS;
 8025e4c:	2301      	movs	r3, #1
 8025e4e:	e069      	b.n	8025f24 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8025e50:	687b      	ldr	r3, [r7, #4]
 8025e52:	2b00      	cmp	r3, #0
 8025e54:	d103      	bne.n	8025e5e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8025e56:	f002 fadf 	bl	8028418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8025e5a:	2300      	movs	r3, #0
 8025e5c:	e062      	b.n	8025f24 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8025e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e60:	2b00      	cmp	r3, #0
 8025e62:	d106      	bne.n	8025e72 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8025e64:	f107 0310 	add.w	r3, r7, #16
 8025e68:	4618      	mov	r0, r3
 8025e6a:	f001 f919 	bl	80270a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8025e6e:	2301      	movs	r3, #1
 8025e70:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8025e72:	f002 fad1 	bl	8028418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8025e76:	f000 fe83 	bl	8026b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8025e7a:	f002 fa9f 	bl	80283bc <vPortEnterCritical>
 8025e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8025e84:	b25b      	sxtb	r3, r3
 8025e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025e8a:	d103      	bne.n	8025e94 <xQueueReceive+0x11c>
 8025e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e8e:	2200      	movs	r2, #0
 8025e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8025e9a:	b25b      	sxtb	r3, r3
 8025e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025ea0:	d103      	bne.n	8025eaa <xQueueReceive+0x132>
 8025ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ea4:	2200      	movs	r2, #0
 8025ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8025eaa:	f002 fab5 	bl	8028418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8025eae:	1d3a      	adds	r2, r7, #4
 8025eb0:	f107 0310 	add.w	r3, r7, #16
 8025eb4:	4611      	mov	r1, r2
 8025eb6:	4618      	mov	r0, r3
 8025eb8:	f001 f908 	bl	80270cc <xTaskCheckForTimeOut>
 8025ebc:	4603      	mov	r3, r0
 8025ebe:	2b00      	cmp	r3, #0
 8025ec0:	d123      	bne.n	8025f0a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8025ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025ec4:	f000 faf7 	bl	80264b6 <prvIsQueueEmpty>
 8025ec8:	4603      	mov	r3, r0
 8025eca:	2b00      	cmp	r3, #0
 8025ecc:	d017      	beq.n	8025efe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8025ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ed0:	3324      	adds	r3, #36	; 0x24
 8025ed2:	687a      	ldr	r2, [r7, #4]
 8025ed4:	4611      	mov	r1, r2
 8025ed6:	4618      	mov	r0, r3
 8025ed8:	f001 f832 	bl	8026f40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8025edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025ede:	f000 fa98 	bl	8026412 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8025ee2:	f000 fe5b 	bl	8026b9c <xTaskResumeAll>
 8025ee6:	4603      	mov	r3, r0
 8025ee8:	2b00      	cmp	r3, #0
 8025eea:	d189      	bne.n	8025e00 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8025eec:	4b0f      	ldr	r3, [pc, #60]	; (8025f2c <xQueueReceive+0x1b4>)
 8025eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025ef2:	601a      	str	r2, [r3, #0]
 8025ef4:	f3bf 8f4f 	dsb	sy
 8025ef8:	f3bf 8f6f 	isb	sy
 8025efc:	e780      	b.n	8025e00 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8025efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025f00:	f000 fa87 	bl	8026412 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8025f04:	f000 fe4a 	bl	8026b9c <xTaskResumeAll>
 8025f08:	e77a      	b.n	8025e00 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8025f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025f0c:	f000 fa81 	bl	8026412 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8025f10:	f000 fe44 	bl	8026b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8025f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025f16:	f000 face 	bl	80264b6 <prvIsQueueEmpty>
 8025f1a:	4603      	mov	r3, r0
 8025f1c:	2b00      	cmp	r3, #0
 8025f1e:	f43f af6f 	beq.w	8025e00 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8025f22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8025f24:	4618      	mov	r0, r3
 8025f26:	3730      	adds	r7, #48	; 0x30
 8025f28:	46bd      	mov	sp, r7
 8025f2a:	bd80      	pop	{r7, pc}
 8025f2c:	e000ed04 	.word	0xe000ed04

08025f30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8025f30:	b580      	push	{r7, lr}
 8025f32:	b08e      	sub	sp, #56	; 0x38
 8025f34:	af00      	add	r7, sp, #0
 8025f36:	6078      	str	r0, [r7, #4]
 8025f38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8025f3a:	2300      	movs	r3, #0
 8025f3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8025f3e:	687b      	ldr	r3, [r7, #4]
 8025f40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8025f42:	2300      	movs	r3, #0
 8025f44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8025f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f48:	2b00      	cmp	r3, #0
 8025f4a:	d109      	bne.n	8025f60 <xQueueSemaphoreTake+0x30>
 8025f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025f50:	f383 8811 	msr	BASEPRI, r3
 8025f54:	f3bf 8f6f 	isb	sy
 8025f58:	f3bf 8f4f 	dsb	sy
 8025f5c:	623b      	str	r3, [r7, #32]
 8025f5e:	e7fe      	b.n	8025f5e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8025f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025f64:	2b00      	cmp	r3, #0
 8025f66:	d009      	beq.n	8025f7c <xQueueSemaphoreTake+0x4c>
 8025f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025f6c:	f383 8811 	msr	BASEPRI, r3
 8025f70:	f3bf 8f6f 	isb	sy
 8025f74:	f3bf 8f4f 	dsb	sy
 8025f78:	61fb      	str	r3, [r7, #28]
 8025f7a:	e7fe      	b.n	8025f7a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8025f7c:	f001 f9f4 	bl	8027368 <xTaskGetSchedulerState>
 8025f80:	4603      	mov	r3, r0
 8025f82:	2b00      	cmp	r3, #0
 8025f84:	d102      	bne.n	8025f8c <xQueueSemaphoreTake+0x5c>
 8025f86:	683b      	ldr	r3, [r7, #0]
 8025f88:	2b00      	cmp	r3, #0
 8025f8a:	d101      	bne.n	8025f90 <xQueueSemaphoreTake+0x60>
 8025f8c:	2301      	movs	r3, #1
 8025f8e:	e000      	b.n	8025f92 <xQueueSemaphoreTake+0x62>
 8025f90:	2300      	movs	r3, #0
 8025f92:	2b00      	cmp	r3, #0
 8025f94:	d109      	bne.n	8025faa <xQueueSemaphoreTake+0x7a>
 8025f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8025f9a:	f383 8811 	msr	BASEPRI, r3
 8025f9e:	f3bf 8f6f 	isb	sy
 8025fa2:	f3bf 8f4f 	dsb	sy
 8025fa6:	61bb      	str	r3, [r7, #24]
 8025fa8:	e7fe      	b.n	8025fa8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8025faa:	f002 fa07 	bl	80283bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8025fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025fb2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8025fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fb6:	2b00      	cmp	r3, #0
 8025fb8:	d024      	beq.n	8026004 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8025fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fbc:	1e5a      	subs	r2, r3, #1
 8025fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fc0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8025fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fc4:	681b      	ldr	r3, [r3, #0]
 8025fc6:	2b00      	cmp	r3, #0
 8025fc8:	d104      	bne.n	8025fd4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8025fca:	f001 fb3f 	bl	802764c <pvTaskIncrementMutexHeldCount>
 8025fce:	4602      	mov	r2, r0
 8025fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fd2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8025fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fd6:	691b      	ldr	r3, [r3, #16]
 8025fd8:	2b00      	cmp	r3, #0
 8025fda:	d00f      	beq.n	8025ffc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8025fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fde:	3310      	adds	r3, #16
 8025fe0:	4618      	mov	r0, r3
 8025fe2:	f000 fffb 	bl	8026fdc <xTaskRemoveFromEventList>
 8025fe6:	4603      	mov	r3, r0
 8025fe8:	2b00      	cmp	r3, #0
 8025fea:	d007      	beq.n	8025ffc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8025fec:	4b53      	ldr	r3, [pc, #332]	; (802613c <xQueueSemaphoreTake+0x20c>)
 8025fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025ff2:	601a      	str	r2, [r3, #0]
 8025ff4:	f3bf 8f4f 	dsb	sy
 8025ff8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8025ffc:	f002 fa0c 	bl	8028418 <vPortExitCritical>
				return pdPASS;
 8026000:	2301      	movs	r3, #1
 8026002:	e096      	b.n	8026132 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8026004:	683b      	ldr	r3, [r7, #0]
 8026006:	2b00      	cmp	r3, #0
 8026008:	d110      	bne.n	802602c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 802600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802600c:	2b00      	cmp	r3, #0
 802600e:	d009      	beq.n	8026024 <xQueueSemaphoreTake+0xf4>
 8026010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026014:	f383 8811 	msr	BASEPRI, r3
 8026018:	f3bf 8f6f 	isb	sy
 802601c:	f3bf 8f4f 	dsb	sy
 8026020:	617b      	str	r3, [r7, #20]
 8026022:	e7fe      	b.n	8026022 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8026024:	f002 f9f8 	bl	8028418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8026028:	2300      	movs	r3, #0
 802602a:	e082      	b.n	8026132 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 802602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802602e:	2b00      	cmp	r3, #0
 8026030:	d106      	bne.n	8026040 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8026032:	f107 030c 	add.w	r3, r7, #12
 8026036:	4618      	mov	r0, r3
 8026038:	f001 f832 	bl	80270a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 802603c:	2301      	movs	r3, #1
 802603e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8026040:	f002 f9ea 	bl	8028418 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8026044:	f000 fd9c 	bl	8026b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8026048:	f002 f9b8 	bl	80283bc <vPortEnterCritical>
 802604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802604e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8026052:	b25b      	sxtb	r3, r3
 8026054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026058:	d103      	bne.n	8026062 <xQueueSemaphoreTake+0x132>
 802605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802605c:	2200      	movs	r2, #0
 802605e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8026062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8026068:	b25b      	sxtb	r3, r3
 802606a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802606e:	d103      	bne.n	8026078 <xQueueSemaphoreTake+0x148>
 8026070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026072:	2200      	movs	r2, #0
 8026074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8026078:	f002 f9ce 	bl	8028418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802607c:	463a      	mov	r2, r7
 802607e:	f107 030c 	add.w	r3, r7, #12
 8026082:	4611      	mov	r1, r2
 8026084:	4618      	mov	r0, r3
 8026086:	f001 f821 	bl	80270cc <xTaskCheckForTimeOut>
 802608a:	4603      	mov	r3, r0
 802608c:	2b00      	cmp	r3, #0
 802608e:	d132      	bne.n	80260f6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8026090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8026092:	f000 fa10 	bl	80264b6 <prvIsQueueEmpty>
 8026096:	4603      	mov	r3, r0
 8026098:	2b00      	cmp	r3, #0
 802609a:	d026      	beq.n	80260ea <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802609e:	681b      	ldr	r3, [r3, #0]
 80260a0:	2b00      	cmp	r3, #0
 80260a2:	d109      	bne.n	80260b8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80260a4:	f002 f98a 	bl	80283bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80260a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260aa:	689b      	ldr	r3, [r3, #8]
 80260ac:	4618      	mov	r0, r3
 80260ae:	f001 f979 	bl	80273a4 <xTaskPriorityInherit>
 80260b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80260b4:	f002 f9b0 	bl	8028418 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80260b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260ba:	3324      	adds	r3, #36	; 0x24
 80260bc:	683a      	ldr	r2, [r7, #0]
 80260be:	4611      	mov	r1, r2
 80260c0:	4618      	mov	r0, r3
 80260c2:	f000 ff3d 	bl	8026f40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80260c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80260c8:	f000 f9a3 	bl	8026412 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80260cc:	f000 fd66 	bl	8026b9c <xTaskResumeAll>
 80260d0:	4603      	mov	r3, r0
 80260d2:	2b00      	cmp	r3, #0
 80260d4:	f47f af69 	bne.w	8025faa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80260d8:	4b18      	ldr	r3, [pc, #96]	; (802613c <xQueueSemaphoreTake+0x20c>)
 80260da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80260de:	601a      	str	r2, [r3, #0]
 80260e0:	f3bf 8f4f 	dsb	sy
 80260e4:	f3bf 8f6f 	isb	sy
 80260e8:	e75f      	b.n	8025faa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80260ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80260ec:	f000 f991 	bl	8026412 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80260f0:	f000 fd54 	bl	8026b9c <xTaskResumeAll>
 80260f4:	e759      	b.n	8025faa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80260f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80260f8:	f000 f98b 	bl	8026412 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80260fc:	f000 fd4e 	bl	8026b9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8026100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8026102:	f000 f9d8 	bl	80264b6 <prvIsQueueEmpty>
 8026106:	4603      	mov	r3, r0
 8026108:	2b00      	cmp	r3, #0
 802610a:	f43f af4e 	beq.w	8025faa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 802610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026110:	2b00      	cmp	r3, #0
 8026112:	d00d      	beq.n	8026130 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8026114:	f002 f952 	bl	80283bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8026118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802611a:	f000 f8d2 	bl	80262c2 <prvGetDisinheritPriorityAfterTimeout>
 802611e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8026120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026122:	689b      	ldr	r3, [r3, #8]
 8026124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026126:	4618      	mov	r0, r3
 8026128:	f001 fa10 	bl	802754c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 802612c:	f002 f974 	bl	8028418 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8026130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8026132:	4618      	mov	r0, r3
 8026134:	3738      	adds	r7, #56	; 0x38
 8026136:	46bd      	mov	sp, r7
 8026138:	bd80      	pop	{r7, pc}
 802613a:	bf00      	nop
 802613c:	e000ed04 	.word	0xe000ed04

08026140 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8026140:	b580      	push	{r7, lr}
 8026142:	b08e      	sub	sp, #56	; 0x38
 8026144:	af00      	add	r7, sp, #0
 8026146:	60f8      	str	r0, [r7, #12]
 8026148:	60b9      	str	r1, [r7, #8]
 802614a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 802614c:	68fb      	ldr	r3, [r7, #12]
 802614e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8026150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026152:	2b00      	cmp	r3, #0
 8026154:	d109      	bne.n	802616a <xQueueReceiveFromISR+0x2a>
 8026156:	f04f 0350 	mov.w	r3, #80	; 0x50
 802615a:	f383 8811 	msr	BASEPRI, r3
 802615e:	f3bf 8f6f 	isb	sy
 8026162:	f3bf 8f4f 	dsb	sy
 8026166:	623b      	str	r3, [r7, #32]
 8026168:	e7fe      	b.n	8026168 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802616a:	68bb      	ldr	r3, [r7, #8]
 802616c:	2b00      	cmp	r3, #0
 802616e:	d103      	bne.n	8026178 <xQueueReceiveFromISR+0x38>
 8026170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026174:	2b00      	cmp	r3, #0
 8026176:	d101      	bne.n	802617c <xQueueReceiveFromISR+0x3c>
 8026178:	2301      	movs	r3, #1
 802617a:	e000      	b.n	802617e <xQueueReceiveFromISR+0x3e>
 802617c:	2300      	movs	r3, #0
 802617e:	2b00      	cmp	r3, #0
 8026180:	d109      	bne.n	8026196 <xQueueReceiveFromISR+0x56>
 8026182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026186:	f383 8811 	msr	BASEPRI, r3
 802618a:	f3bf 8f6f 	isb	sy
 802618e:	f3bf 8f4f 	dsb	sy
 8026192:	61fb      	str	r3, [r7, #28]
 8026194:	e7fe      	b.n	8026194 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8026196:	f002 f9ed 	bl	8028574 <vPortValidateInterruptPriority>
	__asm volatile
 802619a:	f3ef 8211 	mrs	r2, BASEPRI
 802619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80261a2:	f383 8811 	msr	BASEPRI, r3
 80261a6:	f3bf 8f6f 	isb	sy
 80261aa:	f3bf 8f4f 	dsb	sy
 80261ae:	61ba      	str	r2, [r7, #24]
 80261b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80261b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80261b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80261b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80261ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80261bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80261be:	2b00      	cmp	r3, #0
 80261c0:	d02f      	beq.n	8026222 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80261c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80261c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80261cc:	68b9      	ldr	r1, [r7, #8]
 80261ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80261d0:	f000 f8f9 	bl	80263c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80261d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80261d6:	1e5a      	subs	r2, r3, #1
 80261d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80261dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80261e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80261e4:	d112      	bne.n	802620c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80261e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261e8:	691b      	ldr	r3, [r3, #16]
 80261ea:	2b00      	cmp	r3, #0
 80261ec:	d016      	beq.n	802621c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80261ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261f0:	3310      	adds	r3, #16
 80261f2:	4618      	mov	r0, r3
 80261f4:	f000 fef2 	bl	8026fdc <xTaskRemoveFromEventList>
 80261f8:	4603      	mov	r3, r0
 80261fa:	2b00      	cmp	r3, #0
 80261fc:	d00e      	beq.n	802621c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80261fe:	687b      	ldr	r3, [r7, #4]
 8026200:	2b00      	cmp	r3, #0
 8026202:	d00b      	beq.n	802621c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8026204:	687b      	ldr	r3, [r7, #4]
 8026206:	2201      	movs	r2, #1
 8026208:	601a      	str	r2, [r3, #0]
 802620a:	e007      	b.n	802621c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 802620c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8026210:	3301      	adds	r3, #1
 8026212:	b2db      	uxtb	r3, r3
 8026214:	b25a      	sxtb	r2, r3
 8026216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 802621c:	2301      	movs	r3, #1
 802621e:	637b      	str	r3, [r7, #52]	; 0x34
 8026220:	e001      	b.n	8026226 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8026222:	2300      	movs	r3, #0
 8026224:	637b      	str	r3, [r7, #52]	; 0x34
 8026226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026228:	613b      	str	r3, [r7, #16]
	__asm volatile
 802622a:	693b      	ldr	r3, [r7, #16]
 802622c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8026230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8026232:	4618      	mov	r0, r3
 8026234:	3738      	adds	r7, #56	; 0x38
 8026236:	46bd      	mov	sp, r7
 8026238:	bd80      	pop	{r7, pc}

0802623a <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 802623a:	b580      	push	{r7, lr}
 802623c:	b086      	sub	sp, #24
 802623e:	af00      	add	r7, sp, #0
 8026240:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8026242:	687b      	ldr	r3, [r7, #4]
 8026244:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8026246:	697b      	ldr	r3, [r7, #20]
 8026248:	2b00      	cmp	r3, #0
 802624a:	d109      	bne.n	8026260 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 802624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026250:	f383 8811 	msr	BASEPRI, r3
 8026254:	f3bf 8f6f 	isb	sy
 8026258:	f3bf 8f4f 	dsb	sy
 802625c:	60fb      	str	r3, [r7, #12]
 802625e:	e7fe      	b.n	802625e <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8026260:	f002 f8ac 	bl	80283bc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8026264:	697b      	ldr	r3, [r7, #20]
 8026266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8026268:	697b      	ldr	r3, [r7, #20]
 802626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802626c:	1ad3      	subs	r3, r2, r3
 802626e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8026270:	f002 f8d2 	bl	8028418 <vPortExitCritical>

	return uxReturn;
 8026274:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8026276:	4618      	mov	r0, r3
 8026278:	3718      	adds	r7, #24
 802627a:	46bd      	mov	sp, r7
 802627c:	bd80      	pop	{r7, pc}

0802627e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 802627e:	b580      	push	{r7, lr}
 8026280:	b084      	sub	sp, #16
 8026282:	af00      	add	r7, sp, #0
 8026284:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8026286:	687b      	ldr	r3, [r7, #4]
 8026288:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802628a:	68fb      	ldr	r3, [r7, #12]
 802628c:	2b00      	cmp	r3, #0
 802628e:	d109      	bne.n	80262a4 <vQueueDelete+0x26>
 8026290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026294:	f383 8811 	msr	BASEPRI, r3
 8026298:	f3bf 8f6f 	isb	sy
 802629c:	f3bf 8f4f 	dsb	sy
 80262a0:	60bb      	str	r3, [r7, #8]
 80262a2:	e7fe      	b.n	80262a2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80262a4:	68f8      	ldr	r0, [r7, #12]
 80262a6:	f000 f95d 	bl	8026564 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80262aa:	68fb      	ldr	r3, [r7, #12]
 80262ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80262b0:	2b00      	cmp	r3, #0
 80262b2:	d102      	bne.n	80262ba <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80262b4:	68f8      	ldr	r0, [r7, #12]
 80262b6:	f002 fa5d 	bl	8028774 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80262ba:	bf00      	nop
 80262bc:	3710      	adds	r7, #16
 80262be:	46bd      	mov	sp, r7
 80262c0:	bd80      	pop	{r7, pc}

080262c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80262c2:	b480      	push	{r7}
 80262c4:	b085      	sub	sp, #20
 80262c6:	af00      	add	r7, sp, #0
 80262c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80262ca:	687b      	ldr	r3, [r7, #4]
 80262cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80262ce:	2b00      	cmp	r3, #0
 80262d0:	d006      	beq.n	80262e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80262d2:	687b      	ldr	r3, [r7, #4]
 80262d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262d6:	681b      	ldr	r3, [r3, #0]
 80262d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80262dc:	60fb      	str	r3, [r7, #12]
 80262de:	e001      	b.n	80262e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80262e0:	2300      	movs	r3, #0
 80262e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80262e4:	68fb      	ldr	r3, [r7, #12]
	}
 80262e6:	4618      	mov	r0, r3
 80262e8:	3714      	adds	r7, #20
 80262ea:	46bd      	mov	sp, r7
 80262ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262f0:	4770      	bx	lr

080262f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80262f2:	b580      	push	{r7, lr}
 80262f4:	b086      	sub	sp, #24
 80262f6:	af00      	add	r7, sp, #0
 80262f8:	60f8      	str	r0, [r7, #12]
 80262fa:	60b9      	str	r1, [r7, #8]
 80262fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80262fe:	2300      	movs	r3, #0
 8026300:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8026302:	68fb      	ldr	r3, [r7, #12]
 8026304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026306:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8026308:	68fb      	ldr	r3, [r7, #12]
 802630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802630c:	2b00      	cmp	r3, #0
 802630e:	d10d      	bne.n	802632c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8026310:	68fb      	ldr	r3, [r7, #12]
 8026312:	681b      	ldr	r3, [r3, #0]
 8026314:	2b00      	cmp	r3, #0
 8026316:	d14d      	bne.n	80263b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8026318:	68fb      	ldr	r3, [r7, #12]
 802631a:	689b      	ldr	r3, [r3, #8]
 802631c:	4618      	mov	r0, r3
 802631e:	f001 f8a9 	bl	8027474 <xTaskPriorityDisinherit>
 8026322:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8026324:	68fb      	ldr	r3, [r7, #12]
 8026326:	2200      	movs	r2, #0
 8026328:	609a      	str	r2, [r3, #8]
 802632a:	e043      	b.n	80263b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802632c:	687b      	ldr	r3, [r7, #4]
 802632e:	2b00      	cmp	r3, #0
 8026330:	d119      	bne.n	8026366 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8026332:	68fb      	ldr	r3, [r7, #12]
 8026334:	6858      	ldr	r0, [r3, #4]
 8026336:	68fb      	ldr	r3, [r7, #12]
 8026338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802633a:	461a      	mov	r2, r3
 802633c:	68b9      	ldr	r1, [r7, #8]
 802633e:	f005 fb3b 	bl	802b9b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8026342:	68fb      	ldr	r3, [r7, #12]
 8026344:	685a      	ldr	r2, [r3, #4]
 8026346:	68fb      	ldr	r3, [r7, #12]
 8026348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802634a:	441a      	add	r2, r3
 802634c:	68fb      	ldr	r3, [r7, #12]
 802634e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8026350:	68fb      	ldr	r3, [r7, #12]
 8026352:	685a      	ldr	r2, [r3, #4]
 8026354:	68fb      	ldr	r3, [r7, #12]
 8026356:	689b      	ldr	r3, [r3, #8]
 8026358:	429a      	cmp	r2, r3
 802635a:	d32b      	bcc.n	80263b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802635c:	68fb      	ldr	r3, [r7, #12]
 802635e:	681a      	ldr	r2, [r3, #0]
 8026360:	68fb      	ldr	r3, [r7, #12]
 8026362:	605a      	str	r2, [r3, #4]
 8026364:	e026      	b.n	80263b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8026366:	68fb      	ldr	r3, [r7, #12]
 8026368:	68d8      	ldr	r0, [r3, #12]
 802636a:	68fb      	ldr	r3, [r7, #12]
 802636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802636e:	461a      	mov	r2, r3
 8026370:	68b9      	ldr	r1, [r7, #8]
 8026372:	f005 fb21 	bl	802b9b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8026376:	68fb      	ldr	r3, [r7, #12]
 8026378:	68da      	ldr	r2, [r3, #12]
 802637a:	68fb      	ldr	r3, [r7, #12]
 802637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802637e:	425b      	negs	r3, r3
 8026380:	441a      	add	r2, r3
 8026382:	68fb      	ldr	r3, [r7, #12]
 8026384:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8026386:	68fb      	ldr	r3, [r7, #12]
 8026388:	68da      	ldr	r2, [r3, #12]
 802638a:	68fb      	ldr	r3, [r7, #12]
 802638c:	681b      	ldr	r3, [r3, #0]
 802638e:	429a      	cmp	r2, r3
 8026390:	d207      	bcs.n	80263a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8026392:	68fb      	ldr	r3, [r7, #12]
 8026394:	689a      	ldr	r2, [r3, #8]
 8026396:	68fb      	ldr	r3, [r7, #12]
 8026398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802639a:	425b      	negs	r3, r3
 802639c:	441a      	add	r2, r3
 802639e:	68fb      	ldr	r3, [r7, #12]
 80263a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80263a2:	687b      	ldr	r3, [r7, #4]
 80263a4:	2b02      	cmp	r3, #2
 80263a6:	d105      	bne.n	80263b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80263a8:	693b      	ldr	r3, [r7, #16]
 80263aa:	2b00      	cmp	r3, #0
 80263ac:	d002      	beq.n	80263b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80263ae:	693b      	ldr	r3, [r7, #16]
 80263b0:	3b01      	subs	r3, #1
 80263b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80263b4:	693b      	ldr	r3, [r7, #16]
 80263b6:	1c5a      	adds	r2, r3, #1
 80263b8:	68fb      	ldr	r3, [r7, #12]
 80263ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80263bc:	697b      	ldr	r3, [r7, #20]
}
 80263be:	4618      	mov	r0, r3
 80263c0:	3718      	adds	r7, #24
 80263c2:	46bd      	mov	sp, r7
 80263c4:	bd80      	pop	{r7, pc}

080263c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80263c6:	b580      	push	{r7, lr}
 80263c8:	b082      	sub	sp, #8
 80263ca:	af00      	add	r7, sp, #0
 80263cc:	6078      	str	r0, [r7, #4]
 80263ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80263d0:	687b      	ldr	r3, [r7, #4]
 80263d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	d018      	beq.n	802640a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80263d8:	687b      	ldr	r3, [r7, #4]
 80263da:	68da      	ldr	r2, [r3, #12]
 80263dc:	687b      	ldr	r3, [r7, #4]
 80263de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263e0:	441a      	add	r2, r3
 80263e2:	687b      	ldr	r3, [r7, #4]
 80263e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80263e6:	687b      	ldr	r3, [r7, #4]
 80263e8:	68da      	ldr	r2, [r3, #12]
 80263ea:	687b      	ldr	r3, [r7, #4]
 80263ec:	689b      	ldr	r3, [r3, #8]
 80263ee:	429a      	cmp	r2, r3
 80263f0:	d303      	bcc.n	80263fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80263f2:	687b      	ldr	r3, [r7, #4]
 80263f4:	681a      	ldr	r2, [r3, #0]
 80263f6:	687b      	ldr	r3, [r7, #4]
 80263f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80263fa:	687b      	ldr	r3, [r7, #4]
 80263fc:	68d9      	ldr	r1, [r3, #12]
 80263fe:	687b      	ldr	r3, [r7, #4]
 8026400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026402:	461a      	mov	r2, r3
 8026404:	6838      	ldr	r0, [r7, #0]
 8026406:	f005 fad7 	bl	802b9b8 <memcpy>
	}
}
 802640a:	bf00      	nop
 802640c:	3708      	adds	r7, #8
 802640e:	46bd      	mov	sp, r7
 8026410:	bd80      	pop	{r7, pc}

08026412 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8026412:	b580      	push	{r7, lr}
 8026414:	b084      	sub	sp, #16
 8026416:	af00      	add	r7, sp, #0
 8026418:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 802641a:	f001 ffcf 	bl	80283bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 802641e:	687b      	ldr	r3, [r7, #4]
 8026420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8026424:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8026426:	e011      	b.n	802644c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8026428:	687b      	ldr	r3, [r7, #4]
 802642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802642c:	2b00      	cmp	r3, #0
 802642e:	d012      	beq.n	8026456 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8026430:	687b      	ldr	r3, [r7, #4]
 8026432:	3324      	adds	r3, #36	; 0x24
 8026434:	4618      	mov	r0, r3
 8026436:	f000 fdd1 	bl	8026fdc <xTaskRemoveFromEventList>
 802643a:	4603      	mov	r3, r0
 802643c:	2b00      	cmp	r3, #0
 802643e:	d001      	beq.n	8026444 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8026440:	f000 fea4 	bl	802718c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8026444:	7bfb      	ldrb	r3, [r7, #15]
 8026446:	3b01      	subs	r3, #1
 8026448:	b2db      	uxtb	r3, r3
 802644a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802644c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026450:	2b00      	cmp	r3, #0
 8026452:	dce9      	bgt.n	8026428 <prvUnlockQueue+0x16>
 8026454:	e000      	b.n	8026458 <prvUnlockQueue+0x46>
					break;
 8026456:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8026458:	687b      	ldr	r3, [r7, #4]
 802645a:	22ff      	movs	r2, #255	; 0xff
 802645c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8026460:	f001 ffda 	bl	8028418 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8026464:	f001 ffaa 	bl	80283bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8026468:	687b      	ldr	r3, [r7, #4]
 802646a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802646e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8026470:	e011      	b.n	8026496 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8026472:	687b      	ldr	r3, [r7, #4]
 8026474:	691b      	ldr	r3, [r3, #16]
 8026476:	2b00      	cmp	r3, #0
 8026478:	d012      	beq.n	80264a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802647a:	687b      	ldr	r3, [r7, #4]
 802647c:	3310      	adds	r3, #16
 802647e:	4618      	mov	r0, r3
 8026480:	f000 fdac 	bl	8026fdc <xTaskRemoveFromEventList>
 8026484:	4603      	mov	r3, r0
 8026486:	2b00      	cmp	r3, #0
 8026488:	d001      	beq.n	802648e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 802648a:	f000 fe7f 	bl	802718c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 802648e:	7bbb      	ldrb	r3, [r7, #14]
 8026490:	3b01      	subs	r3, #1
 8026492:	b2db      	uxtb	r3, r3
 8026494:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8026496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802649a:	2b00      	cmp	r3, #0
 802649c:	dce9      	bgt.n	8026472 <prvUnlockQueue+0x60>
 802649e:	e000      	b.n	80264a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80264a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80264a2:	687b      	ldr	r3, [r7, #4]
 80264a4:	22ff      	movs	r2, #255	; 0xff
 80264a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80264aa:	f001 ffb5 	bl	8028418 <vPortExitCritical>
}
 80264ae:	bf00      	nop
 80264b0:	3710      	adds	r7, #16
 80264b2:	46bd      	mov	sp, r7
 80264b4:	bd80      	pop	{r7, pc}

080264b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80264b6:	b580      	push	{r7, lr}
 80264b8:	b084      	sub	sp, #16
 80264ba:	af00      	add	r7, sp, #0
 80264bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80264be:	f001 ff7d 	bl	80283bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80264c6:	2b00      	cmp	r3, #0
 80264c8:	d102      	bne.n	80264d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80264ca:	2301      	movs	r3, #1
 80264cc:	60fb      	str	r3, [r7, #12]
 80264ce:	e001      	b.n	80264d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80264d0:	2300      	movs	r3, #0
 80264d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80264d4:	f001 ffa0 	bl	8028418 <vPortExitCritical>

	return xReturn;
 80264d8:	68fb      	ldr	r3, [r7, #12]
}
 80264da:	4618      	mov	r0, r3
 80264dc:	3710      	adds	r7, #16
 80264de:	46bd      	mov	sp, r7
 80264e0:	bd80      	pop	{r7, pc}

080264e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80264e2:	b580      	push	{r7, lr}
 80264e4:	b084      	sub	sp, #16
 80264e6:	af00      	add	r7, sp, #0
 80264e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80264ea:	f001 ff67 	bl	80283bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80264f2:	687b      	ldr	r3, [r7, #4]
 80264f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80264f6:	429a      	cmp	r2, r3
 80264f8:	d102      	bne.n	8026500 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80264fa:	2301      	movs	r3, #1
 80264fc:	60fb      	str	r3, [r7, #12]
 80264fe:	e001      	b.n	8026504 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8026500:	2300      	movs	r3, #0
 8026502:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8026504:	f001 ff88 	bl	8028418 <vPortExitCritical>

	return xReturn;
 8026508:	68fb      	ldr	r3, [r7, #12]
}
 802650a:	4618      	mov	r0, r3
 802650c:	3710      	adds	r7, #16
 802650e:	46bd      	mov	sp, r7
 8026510:	bd80      	pop	{r7, pc}
	...

08026514 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8026514:	b480      	push	{r7}
 8026516:	b085      	sub	sp, #20
 8026518:	af00      	add	r7, sp, #0
 802651a:	6078      	str	r0, [r7, #4]
 802651c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802651e:	2300      	movs	r3, #0
 8026520:	60fb      	str	r3, [r7, #12]
 8026522:	e014      	b.n	802654e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8026524:	4a0e      	ldr	r2, [pc, #56]	; (8026560 <vQueueAddToRegistry+0x4c>)
 8026526:	68fb      	ldr	r3, [r7, #12]
 8026528:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802652c:	2b00      	cmp	r3, #0
 802652e:	d10b      	bne.n	8026548 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8026530:	490b      	ldr	r1, [pc, #44]	; (8026560 <vQueueAddToRegistry+0x4c>)
 8026532:	68fb      	ldr	r3, [r7, #12]
 8026534:	683a      	ldr	r2, [r7, #0]
 8026536:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 802653a:	4a09      	ldr	r2, [pc, #36]	; (8026560 <vQueueAddToRegistry+0x4c>)
 802653c:	68fb      	ldr	r3, [r7, #12]
 802653e:	00db      	lsls	r3, r3, #3
 8026540:	4413      	add	r3, r2
 8026542:	687a      	ldr	r2, [r7, #4]
 8026544:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8026546:	e005      	b.n	8026554 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8026548:	68fb      	ldr	r3, [r7, #12]
 802654a:	3301      	adds	r3, #1
 802654c:	60fb      	str	r3, [r7, #12]
 802654e:	68fb      	ldr	r3, [r7, #12]
 8026550:	2b07      	cmp	r3, #7
 8026552:	d9e7      	bls.n	8026524 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8026554:	bf00      	nop
 8026556:	3714      	adds	r7, #20
 8026558:	46bd      	mov	sp, r7
 802655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802655e:	4770      	bx	lr
 8026560:	2400d210 	.word	0x2400d210

08026564 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8026564:	b480      	push	{r7}
 8026566:	b085      	sub	sp, #20
 8026568:	af00      	add	r7, sp, #0
 802656a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802656c:	2300      	movs	r3, #0
 802656e:	60fb      	str	r3, [r7, #12]
 8026570:	e016      	b.n	80265a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8026572:	4a10      	ldr	r2, [pc, #64]	; (80265b4 <vQueueUnregisterQueue+0x50>)
 8026574:	68fb      	ldr	r3, [r7, #12]
 8026576:	00db      	lsls	r3, r3, #3
 8026578:	4413      	add	r3, r2
 802657a:	685b      	ldr	r3, [r3, #4]
 802657c:	687a      	ldr	r2, [r7, #4]
 802657e:	429a      	cmp	r2, r3
 8026580:	d10b      	bne.n	802659a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8026582:	4a0c      	ldr	r2, [pc, #48]	; (80265b4 <vQueueUnregisterQueue+0x50>)
 8026584:	68fb      	ldr	r3, [r7, #12]
 8026586:	2100      	movs	r1, #0
 8026588:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 802658c:	4a09      	ldr	r2, [pc, #36]	; (80265b4 <vQueueUnregisterQueue+0x50>)
 802658e:	68fb      	ldr	r3, [r7, #12]
 8026590:	00db      	lsls	r3, r3, #3
 8026592:	4413      	add	r3, r2
 8026594:	2200      	movs	r2, #0
 8026596:	605a      	str	r2, [r3, #4]
				break;
 8026598:	e005      	b.n	80265a6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802659a:	68fb      	ldr	r3, [r7, #12]
 802659c:	3301      	adds	r3, #1
 802659e:	60fb      	str	r3, [r7, #12]
 80265a0:	68fb      	ldr	r3, [r7, #12]
 80265a2:	2b07      	cmp	r3, #7
 80265a4:	d9e5      	bls.n	8026572 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80265a6:	bf00      	nop
 80265a8:	3714      	adds	r7, #20
 80265aa:	46bd      	mov	sp, r7
 80265ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265b0:	4770      	bx	lr
 80265b2:	bf00      	nop
 80265b4:	2400d210 	.word	0x2400d210

080265b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80265b8:	b580      	push	{r7, lr}
 80265ba:	b086      	sub	sp, #24
 80265bc:	af00      	add	r7, sp, #0
 80265be:	60f8      	str	r0, [r7, #12]
 80265c0:	60b9      	str	r1, [r7, #8]
 80265c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80265c4:	68fb      	ldr	r3, [r7, #12]
 80265c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80265c8:	f001 fef8 	bl	80283bc <vPortEnterCritical>
 80265cc:	697b      	ldr	r3, [r7, #20]
 80265ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80265d2:	b25b      	sxtb	r3, r3
 80265d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80265d8:	d103      	bne.n	80265e2 <vQueueWaitForMessageRestricted+0x2a>
 80265da:	697b      	ldr	r3, [r7, #20]
 80265dc:	2200      	movs	r2, #0
 80265de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80265e2:	697b      	ldr	r3, [r7, #20]
 80265e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80265e8:	b25b      	sxtb	r3, r3
 80265ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80265ee:	d103      	bne.n	80265f8 <vQueueWaitForMessageRestricted+0x40>
 80265f0:	697b      	ldr	r3, [r7, #20]
 80265f2:	2200      	movs	r2, #0
 80265f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80265f8:	f001 ff0e 	bl	8028418 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80265fc:	697b      	ldr	r3, [r7, #20]
 80265fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026600:	2b00      	cmp	r3, #0
 8026602:	d106      	bne.n	8026612 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8026604:	697b      	ldr	r3, [r7, #20]
 8026606:	3324      	adds	r3, #36	; 0x24
 8026608:	687a      	ldr	r2, [r7, #4]
 802660a:	68b9      	ldr	r1, [r7, #8]
 802660c:	4618      	mov	r0, r3
 802660e:	f000 fcbb 	bl	8026f88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8026612:	6978      	ldr	r0, [r7, #20]
 8026614:	f7ff fefd 	bl	8026412 <prvUnlockQueue>
	}
 8026618:	bf00      	nop
 802661a:	3718      	adds	r7, #24
 802661c:	46bd      	mov	sp, r7
 802661e:	bd80      	pop	{r7, pc}

08026620 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8026620:	b580      	push	{r7, lr}
 8026622:	b08e      	sub	sp, #56	; 0x38
 8026624:	af04      	add	r7, sp, #16
 8026626:	60f8      	str	r0, [r7, #12]
 8026628:	60b9      	str	r1, [r7, #8]
 802662a:	607a      	str	r2, [r7, #4]
 802662c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 802662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026630:	2b00      	cmp	r3, #0
 8026632:	d109      	bne.n	8026648 <xTaskCreateStatic+0x28>
 8026634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026638:	f383 8811 	msr	BASEPRI, r3
 802663c:	f3bf 8f6f 	isb	sy
 8026640:	f3bf 8f4f 	dsb	sy
 8026644:	623b      	str	r3, [r7, #32]
 8026646:	e7fe      	b.n	8026646 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8026648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802664a:	2b00      	cmp	r3, #0
 802664c:	d109      	bne.n	8026662 <xTaskCreateStatic+0x42>
 802664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026652:	f383 8811 	msr	BASEPRI, r3
 8026656:	f3bf 8f6f 	isb	sy
 802665a:	f3bf 8f4f 	dsb	sy
 802665e:	61fb      	str	r3, [r7, #28]
 8026660:	e7fe      	b.n	8026660 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8026662:	235c      	movs	r3, #92	; 0x5c
 8026664:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8026666:	693b      	ldr	r3, [r7, #16]
 8026668:	2b5c      	cmp	r3, #92	; 0x5c
 802666a:	d009      	beq.n	8026680 <xTaskCreateStatic+0x60>
 802666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026670:	f383 8811 	msr	BASEPRI, r3
 8026674:	f3bf 8f6f 	isb	sy
 8026678:	f3bf 8f4f 	dsb	sy
 802667c:	61bb      	str	r3, [r7, #24]
 802667e:	e7fe      	b.n	802667e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8026680:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8026682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026684:	2b00      	cmp	r3, #0
 8026686:	d01e      	beq.n	80266c6 <xTaskCreateStatic+0xa6>
 8026688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802668a:	2b00      	cmp	r3, #0
 802668c:	d01b      	beq.n	80266c6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026690:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8026692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026696:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8026698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802669a:	2202      	movs	r2, #2
 802669c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80266a0:	2300      	movs	r3, #0
 80266a2:	9303      	str	r3, [sp, #12]
 80266a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80266a6:	9302      	str	r3, [sp, #8]
 80266a8:	f107 0314 	add.w	r3, r7, #20
 80266ac:	9301      	str	r3, [sp, #4]
 80266ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80266b0:	9300      	str	r3, [sp, #0]
 80266b2:	683b      	ldr	r3, [r7, #0]
 80266b4:	687a      	ldr	r2, [r7, #4]
 80266b6:	68b9      	ldr	r1, [r7, #8]
 80266b8:	68f8      	ldr	r0, [r7, #12]
 80266ba:	f000 f850 	bl	802675e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80266be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80266c0:	f000 f8dc 	bl	802687c <prvAddNewTaskToReadyList>
 80266c4:	e001      	b.n	80266ca <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80266c6:	2300      	movs	r3, #0
 80266c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80266ca:	697b      	ldr	r3, [r7, #20]
	}
 80266cc:	4618      	mov	r0, r3
 80266ce:	3728      	adds	r7, #40	; 0x28
 80266d0:	46bd      	mov	sp, r7
 80266d2:	bd80      	pop	{r7, pc}

080266d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80266d4:	b580      	push	{r7, lr}
 80266d6:	b08c      	sub	sp, #48	; 0x30
 80266d8:	af04      	add	r7, sp, #16
 80266da:	60f8      	str	r0, [r7, #12]
 80266dc:	60b9      	str	r1, [r7, #8]
 80266de:	603b      	str	r3, [r7, #0]
 80266e0:	4613      	mov	r3, r2
 80266e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80266e4:	88fb      	ldrh	r3, [r7, #6]
 80266e6:	009b      	lsls	r3, r3, #2
 80266e8:	4618      	mov	r0, r3
 80266ea:	f001 ff81 	bl	80285f0 <pvPortMalloc>
 80266ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80266f0:	697b      	ldr	r3, [r7, #20]
 80266f2:	2b00      	cmp	r3, #0
 80266f4:	d00e      	beq.n	8026714 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80266f6:	205c      	movs	r0, #92	; 0x5c
 80266f8:	f001 ff7a 	bl	80285f0 <pvPortMalloc>
 80266fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80266fe:	69fb      	ldr	r3, [r7, #28]
 8026700:	2b00      	cmp	r3, #0
 8026702:	d003      	beq.n	802670c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8026704:	69fb      	ldr	r3, [r7, #28]
 8026706:	697a      	ldr	r2, [r7, #20]
 8026708:	631a      	str	r2, [r3, #48]	; 0x30
 802670a:	e005      	b.n	8026718 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802670c:	6978      	ldr	r0, [r7, #20]
 802670e:	f002 f831 	bl	8028774 <vPortFree>
 8026712:	e001      	b.n	8026718 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8026714:	2300      	movs	r3, #0
 8026716:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8026718:	69fb      	ldr	r3, [r7, #28]
 802671a:	2b00      	cmp	r3, #0
 802671c:	d017      	beq.n	802674e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802671e:	69fb      	ldr	r3, [r7, #28]
 8026720:	2200      	movs	r2, #0
 8026722:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8026726:	88fa      	ldrh	r2, [r7, #6]
 8026728:	2300      	movs	r3, #0
 802672a:	9303      	str	r3, [sp, #12]
 802672c:	69fb      	ldr	r3, [r7, #28]
 802672e:	9302      	str	r3, [sp, #8]
 8026730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026732:	9301      	str	r3, [sp, #4]
 8026734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026736:	9300      	str	r3, [sp, #0]
 8026738:	683b      	ldr	r3, [r7, #0]
 802673a:	68b9      	ldr	r1, [r7, #8]
 802673c:	68f8      	ldr	r0, [r7, #12]
 802673e:	f000 f80e 	bl	802675e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8026742:	69f8      	ldr	r0, [r7, #28]
 8026744:	f000 f89a 	bl	802687c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8026748:	2301      	movs	r3, #1
 802674a:	61bb      	str	r3, [r7, #24]
 802674c:	e002      	b.n	8026754 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 802674e:	f04f 33ff 	mov.w	r3, #4294967295
 8026752:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8026754:	69bb      	ldr	r3, [r7, #24]
	}
 8026756:	4618      	mov	r0, r3
 8026758:	3720      	adds	r7, #32
 802675a:	46bd      	mov	sp, r7
 802675c:	bd80      	pop	{r7, pc}

0802675e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 802675e:	b580      	push	{r7, lr}
 8026760:	b088      	sub	sp, #32
 8026762:	af00      	add	r7, sp, #0
 8026764:	60f8      	str	r0, [r7, #12]
 8026766:	60b9      	str	r1, [r7, #8]
 8026768:	607a      	str	r2, [r7, #4]
 802676a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 802676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802676e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8026770:	687b      	ldr	r3, [r7, #4]
 8026772:	009b      	lsls	r3, r3, #2
 8026774:	461a      	mov	r2, r3
 8026776:	21a5      	movs	r1, #165	; 0xa5
 8026778:	f005 f929 	bl	802b9ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802677e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026780:	6879      	ldr	r1, [r7, #4]
 8026782:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8026786:	440b      	add	r3, r1
 8026788:	009b      	lsls	r3, r3, #2
 802678a:	4413      	add	r3, r2
 802678c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 802678e:	69bb      	ldr	r3, [r7, #24]
 8026790:	f023 0307 	bic.w	r3, r3, #7
 8026794:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8026796:	69bb      	ldr	r3, [r7, #24]
 8026798:	f003 0307 	and.w	r3, r3, #7
 802679c:	2b00      	cmp	r3, #0
 802679e:	d009      	beq.n	80267b4 <prvInitialiseNewTask+0x56>
 80267a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80267a4:	f383 8811 	msr	BASEPRI, r3
 80267a8:	f3bf 8f6f 	isb	sy
 80267ac:	f3bf 8f4f 	dsb	sy
 80267b0:	617b      	str	r3, [r7, #20]
 80267b2:	e7fe      	b.n	80267b2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80267b4:	68bb      	ldr	r3, [r7, #8]
 80267b6:	2b00      	cmp	r3, #0
 80267b8:	d01f      	beq.n	80267fa <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80267ba:	2300      	movs	r3, #0
 80267bc:	61fb      	str	r3, [r7, #28]
 80267be:	e012      	b.n	80267e6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80267c0:	68ba      	ldr	r2, [r7, #8]
 80267c2:	69fb      	ldr	r3, [r7, #28]
 80267c4:	4413      	add	r3, r2
 80267c6:	7819      	ldrb	r1, [r3, #0]
 80267c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80267ca:	69fb      	ldr	r3, [r7, #28]
 80267cc:	4413      	add	r3, r2
 80267ce:	3334      	adds	r3, #52	; 0x34
 80267d0:	460a      	mov	r2, r1
 80267d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80267d4:	68ba      	ldr	r2, [r7, #8]
 80267d6:	69fb      	ldr	r3, [r7, #28]
 80267d8:	4413      	add	r3, r2
 80267da:	781b      	ldrb	r3, [r3, #0]
 80267dc:	2b00      	cmp	r3, #0
 80267de:	d006      	beq.n	80267ee <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80267e0:	69fb      	ldr	r3, [r7, #28]
 80267e2:	3301      	adds	r3, #1
 80267e4:	61fb      	str	r3, [r7, #28]
 80267e6:	69fb      	ldr	r3, [r7, #28]
 80267e8:	2b0f      	cmp	r3, #15
 80267ea:	d9e9      	bls.n	80267c0 <prvInitialiseNewTask+0x62>
 80267ec:	e000      	b.n	80267f0 <prvInitialiseNewTask+0x92>
			{
				break;
 80267ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80267f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80267f2:	2200      	movs	r2, #0
 80267f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80267f8:	e003      	b.n	8026802 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80267fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80267fc:	2200      	movs	r2, #0
 80267fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8026802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026804:	2b37      	cmp	r3, #55	; 0x37
 8026806:	d901      	bls.n	802680c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8026808:	2337      	movs	r3, #55	; 0x37
 802680a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 802680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802680e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026810:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8026812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026816:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8026818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802681a:	2200      	movs	r2, #0
 802681c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026820:	3304      	adds	r3, #4
 8026822:	4618      	mov	r0, r3
 8026824:	f7fe fe58 	bl	80254d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8026828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802682a:	3318      	adds	r3, #24
 802682c:	4618      	mov	r0, r3
 802682e:	f7fe fe53 	bl	80254d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8026832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026836:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8026838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802683a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026840:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8026842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026846:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8026848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802684a:	2200      	movs	r2, #0
 802684c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 802684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026850:	2200      	movs	r2, #0
 8026852:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8026856:	683a      	ldr	r2, [r7, #0]
 8026858:	68f9      	ldr	r1, [r7, #12]
 802685a:	69b8      	ldr	r0, [r7, #24]
 802685c:	f001 fc8a 	bl	8028174 <pxPortInitialiseStack>
 8026860:	4602      	mov	r2, r0
 8026862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026864:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8026866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026868:	2b00      	cmp	r3, #0
 802686a:	d002      	beq.n	8026872 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802686e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8026872:	bf00      	nop
 8026874:	3720      	adds	r7, #32
 8026876:	46bd      	mov	sp, r7
 8026878:	bd80      	pop	{r7, pc}
	...

0802687c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 802687c:	b580      	push	{r7, lr}
 802687e:	b082      	sub	sp, #8
 8026880:	af00      	add	r7, sp, #0
 8026882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8026884:	f001 fd9a 	bl	80283bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8026888:	4b2d      	ldr	r3, [pc, #180]	; (8026940 <prvAddNewTaskToReadyList+0xc4>)
 802688a:	681b      	ldr	r3, [r3, #0]
 802688c:	3301      	adds	r3, #1
 802688e:	4a2c      	ldr	r2, [pc, #176]	; (8026940 <prvAddNewTaskToReadyList+0xc4>)
 8026890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8026892:	4b2c      	ldr	r3, [pc, #176]	; (8026944 <prvAddNewTaskToReadyList+0xc8>)
 8026894:	681b      	ldr	r3, [r3, #0]
 8026896:	2b00      	cmp	r3, #0
 8026898:	d109      	bne.n	80268ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802689a:	4a2a      	ldr	r2, [pc, #168]	; (8026944 <prvAddNewTaskToReadyList+0xc8>)
 802689c:	687b      	ldr	r3, [r7, #4]
 802689e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80268a0:	4b27      	ldr	r3, [pc, #156]	; (8026940 <prvAddNewTaskToReadyList+0xc4>)
 80268a2:	681b      	ldr	r3, [r3, #0]
 80268a4:	2b01      	cmp	r3, #1
 80268a6:	d110      	bne.n	80268ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80268a8:	f000 fc94 	bl	80271d4 <prvInitialiseTaskLists>
 80268ac:	e00d      	b.n	80268ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80268ae:	4b26      	ldr	r3, [pc, #152]	; (8026948 <prvAddNewTaskToReadyList+0xcc>)
 80268b0:	681b      	ldr	r3, [r3, #0]
 80268b2:	2b00      	cmp	r3, #0
 80268b4:	d109      	bne.n	80268ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80268b6:	4b23      	ldr	r3, [pc, #140]	; (8026944 <prvAddNewTaskToReadyList+0xc8>)
 80268b8:	681b      	ldr	r3, [r3, #0]
 80268ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80268bc:	687b      	ldr	r3, [r7, #4]
 80268be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80268c0:	429a      	cmp	r2, r3
 80268c2:	d802      	bhi.n	80268ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80268c4:	4a1f      	ldr	r2, [pc, #124]	; (8026944 <prvAddNewTaskToReadyList+0xc8>)
 80268c6:	687b      	ldr	r3, [r7, #4]
 80268c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80268ca:	4b20      	ldr	r3, [pc, #128]	; (802694c <prvAddNewTaskToReadyList+0xd0>)
 80268cc:	681b      	ldr	r3, [r3, #0]
 80268ce:	3301      	adds	r3, #1
 80268d0:	4a1e      	ldr	r2, [pc, #120]	; (802694c <prvAddNewTaskToReadyList+0xd0>)
 80268d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80268d4:	4b1d      	ldr	r3, [pc, #116]	; (802694c <prvAddNewTaskToReadyList+0xd0>)
 80268d6:	681a      	ldr	r2, [r3, #0]
 80268d8:	687b      	ldr	r3, [r7, #4]
 80268da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80268e0:	4b1b      	ldr	r3, [pc, #108]	; (8026950 <prvAddNewTaskToReadyList+0xd4>)
 80268e2:	681b      	ldr	r3, [r3, #0]
 80268e4:	429a      	cmp	r2, r3
 80268e6:	d903      	bls.n	80268f0 <prvAddNewTaskToReadyList+0x74>
 80268e8:	687b      	ldr	r3, [r7, #4]
 80268ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80268ec:	4a18      	ldr	r2, [pc, #96]	; (8026950 <prvAddNewTaskToReadyList+0xd4>)
 80268ee:	6013      	str	r3, [r2, #0]
 80268f0:	687b      	ldr	r3, [r7, #4]
 80268f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80268f4:	4613      	mov	r3, r2
 80268f6:	009b      	lsls	r3, r3, #2
 80268f8:	4413      	add	r3, r2
 80268fa:	009b      	lsls	r3, r3, #2
 80268fc:	4a15      	ldr	r2, [pc, #84]	; (8026954 <prvAddNewTaskToReadyList+0xd8>)
 80268fe:	441a      	add	r2, r3
 8026900:	687b      	ldr	r3, [r7, #4]
 8026902:	3304      	adds	r3, #4
 8026904:	4619      	mov	r1, r3
 8026906:	4610      	mov	r0, r2
 8026908:	f7fe fdf3 	bl	80254f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802690c:	f001 fd84 	bl	8028418 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8026910:	4b0d      	ldr	r3, [pc, #52]	; (8026948 <prvAddNewTaskToReadyList+0xcc>)
 8026912:	681b      	ldr	r3, [r3, #0]
 8026914:	2b00      	cmp	r3, #0
 8026916:	d00e      	beq.n	8026936 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8026918:	4b0a      	ldr	r3, [pc, #40]	; (8026944 <prvAddNewTaskToReadyList+0xc8>)
 802691a:	681b      	ldr	r3, [r3, #0]
 802691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802691e:	687b      	ldr	r3, [r7, #4]
 8026920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026922:	429a      	cmp	r2, r3
 8026924:	d207      	bcs.n	8026936 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8026926:	4b0c      	ldr	r3, [pc, #48]	; (8026958 <prvAddNewTaskToReadyList+0xdc>)
 8026928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802692c:	601a      	str	r2, [r3, #0]
 802692e:	f3bf 8f4f 	dsb	sy
 8026932:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8026936:	bf00      	nop
 8026938:	3708      	adds	r7, #8
 802693a:	46bd      	mov	sp, r7
 802693c:	bd80      	pop	{r7, pc}
 802693e:	bf00      	nop
 8026940:	24001fbc 	.word	0x24001fbc
 8026944:	24001ae8 	.word	0x24001ae8
 8026948:	24001fc8 	.word	0x24001fc8
 802694c:	24001fd8 	.word	0x24001fd8
 8026950:	24001fc4 	.word	0x24001fc4
 8026954:	24001aec 	.word	0x24001aec
 8026958:	e000ed04 	.word	0xe000ed04

0802695c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 802695c:	b580      	push	{r7, lr}
 802695e:	b08a      	sub	sp, #40	; 0x28
 8026960:	af00      	add	r7, sp, #0
 8026962:	6078      	str	r0, [r7, #4]
 8026964:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8026966:	2300      	movs	r3, #0
 8026968:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 802696a:	687b      	ldr	r3, [r7, #4]
 802696c:	2b00      	cmp	r3, #0
 802696e:	d109      	bne.n	8026984 <vTaskDelayUntil+0x28>
 8026970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026974:	f383 8811 	msr	BASEPRI, r3
 8026978:	f3bf 8f6f 	isb	sy
 802697c:	f3bf 8f4f 	dsb	sy
 8026980:	617b      	str	r3, [r7, #20]
 8026982:	e7fe      	b.n	8026982 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8026984:	683b      	ldr	r3, [r7, #0]
 8026986:	2b00      	cmp	r3, #0
 8026988:	d109      	bne.n	802699e <vTaskDelayUntil+0x42>
 802698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802698e:	f383 8811 	msr	BASEPRI, r3
 8026992:	f3bf 8f6f 	isb	sy
 8026996:	f3bf 8f4f 	dsb	sy
 802699a:	613b      	str	r3, [r7, #16]
 802699c:	e7fe      	b.n	802699c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 802699e:	4b29      	ldr	r3, [pc, #164]	; (8026a44 <vTaskDelayUntil+0xe8>)
 80269a0:	681b      	ldr	r3, [r3, #0]
 80269a2:	2b00      	cmp	r3, #0
 80269a4:	d009      	beq.n	80269ba <vTaskDelayUntil+0x5e>
 80269a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80269aa:	f383 8811 	msr	BASEPRI, r3
 80269ae:	f3bf 8f6f 	isb	sy
 80269b2:	f3bf 8f4f 	dsb	sy
 80269b6:	60fb      	str	r3, [r7, #12]
 80269b8:	e7fe      	b.n	80269b8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80269ba:	f000 f8e1 	bl	8026b80 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80269be:	4b22      	ldr	r3, [pc, #136]	; (8026a48 <vTaskDelayUntil+0xec>)
 80269c0:	681b      	ldr	r3, [r3, #0]
 80269c2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	681b      	ldr	r3, [r3, #0]
 80269c8:	683a      	ldr	r2, [r7, #0]
 80269ca:	4413      	add	r3, r2
 80269cc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80269ce:	687b      	ldr	r3, [r7, #4]
 80269d0:	681b      	ldr	r3, [r3, #0]
 80269d2:	6a3a      	ldr	r2, [r7, #32]
 80269d4:	429a      	cmp	r2, r3
 80269d6:	d20b      	bcs.n	80269f0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80269d8:	687b      	ldr	r3, [r7, #4]
 80269da:	681b      	ldr	r3, [r3, #0]
 80269dc:	69fa      	ldr	r2, [r7, #28]
 80269de:	429a      	cmp	r2, r3
 80269e0:	d211      	bcs.n	8026a06 <vTaskDelayUntil+0xaa>
 80269e2:	69fa      	ldr	r2, [r7, #28]
 80269e4:	6a3b      	ldr	r3, [r7, #32]
 80269e6:	429a      	cmp	r2, r3
 80269e8:	d90d      	bls.n	8026a06 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80269ea:	2301      	movs	r3, #1
 80269ec:	627b      	str	r3, [r7, #36]	; 0x24
 80269ee:	e00a      	b.n	8026a06 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80269f0:	687b      	ldr	r3, [r7, #4]
 80269f2:	681b      	ldr	r3, [r3, #0]
 80269f4:	69fa      	ldr	r2, [r7, #28]
 80269f6:	429a      	cmp	r2, r3
 80269f8:	d303      	bcc.n	8026a02 <vTaskDelayUntil+0xa6>
 80269fa:	69fa      	ldr	r2, [r7, #28]
 80269fc:	6a3b      	ldr	r3, [r7, #32]
 80269fe:	429a      	cmp	r2, r3
 8026a00:	d901      	bls.n	8026a06 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8026a02:	2301      	movs	r3, #1
 8026a04:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8026a06:	687b      	ldr	r3, [r7, #4]
 8026a08:	69fa      	ldr	r2, [r7, #28]
 8026a0a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8026a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026a0e:	2b00      	cmp	r3, #0
 8026a10:	d006      	beq.n	8026a20 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8026a12:	69fa      	ldr	r2, [r7, #28]
 8026a14:	6a3b      	ldr	r3, [r7, #32]
 8026a16:	1ad3      	subs	r3, r2, r3
 8026a18:	2100      	movs	r1, #0
 8026a1a:	4618      	mov	r0, r3
 8026a1c:	f001 f810 	bl	8027a40 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8026a20:	f000 f8bc 	bl	8026b9c <xTaskResumeAll>
 8026a24:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8026a26:	69bb      	ldr	r3, [r7, #24]
 8026a28:	2b00      	cmp	r3, #0
 8026a2a:	d107      	bne.n	8026a3c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8026a2c:	4b07      	ldr	r3, [pc, #28]	; (8026a4c <vTaskDelayUntil+0xf0>)
 8026a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026a32:	601a      	str	r2, [r3, #0]
 8026a34:	f3bf 8f4f 	dsb	sy
 8026a38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8026a3c:	bf00      	nop
 8026a3e:	3728      	adds	r7, #40	; 0x28
 8026a40:	46bd      	mov	sp, r7
 8026a42:	bd80      	pop	{r7, pc}
 8026a44:	24001fe4 	.word	0x24001fe4
 8026a48:	24001fc0 	.word	0x24001fc0
 8026a4c:	e000ed04 	.word	0xe000ed04

08026a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8026a50:	b580      	push	{r7, lr}
 8026a52:	b084      	sub	sp, #16
 8026a54:	af00      	add	r7, sp, #0
 8026a56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8026a58:	2300      	movs	r3, #0
 8026a5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8026a5c:	687b      	ldr	r3, [r7, #4]
 8026a5e:	2b00      	cmp	r3, #0
 8026a60:	d016      	beq.n	8026a90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8026a62:	4b13      	ldr	r3, [pc, #76]	; (8026ab0 <vTaskDelay+0x60>)
 8026a64:	681b      	ldr	r3, [r3, #0]
 8026a66:	2b00      	cmp	r3, #0
 8026a68:	d009      	beq.n	8026a7e <vTaskDelay+0x2e>
 8026a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026a6e:	f383 8811 	msr	BASEPRI, r3
 8026a72:	f3bf 8f6f 	isb	sy
 8026a76:	f3bf 8f4f 	dsb	sy
 8026a7a:	60bb      	str	r3, [r7, #8]
 8026a7c:	e7fe      	b.n	8026a7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8026a7e:	f000 f87f 	bl	8026b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8026a82:	2100      	movs	r1, #0
 8026a84:	6878      	ldr	r0, [r7, #4]
 8026a86:	f000 ffdb 	bl	8027a40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8026a8a:	f000 f887 	bl	8026b9c <xTaskResumeAll>
 8026a8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8026a90:	68fb      	ldr	r3, [r7, #12]
 8026a92:	2b00      	cmp	r3, #0
 8026a94:	d107      	bne.n	8026aa6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8026a96:	4b07      	ldr	r3, [pc, #28]	; (8026ab4 <vTaskDelay+0x64>)
 8026a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026a9c:	601a      	str	r2, [r3, #0]
 8026a9e:	f3bf 8f4f 	dsb	sy
 8026aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8026aa6:	bf00      	nop
 8026aa8:	3710      	adds	r7, #16
 8026aaa:	46bd      	mov	sp, r7
 8026aac:	bd80      	pop	{r7, pc}
 8026aae:	bf00      	nop
 8026ab0:	24001fe4 	.word	0x24001fe4
 8026ab4:	e000ed04 	.word	0xe000ed04

08026ab8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8026ab8:	b580      	push	{r7, lr}
 8026aba:	b08a      	sub	sp, #40	; 0x28
 8026abc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8026abe:	2300      	movs	r3, #0
 8026ac0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8026ac2:	2300      	movs	r3, #0
 8026ac4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8026ac6:	463a      	mov	r2, r7
 8026ac8:	1d39      	adds	r1, r7, #4
 8026aca:	f107 0308 	add.w	r3, r7, #8
 8026ace:	4618      	mov	r0, r3
 8026ad0:	f7fe fcae 	bl	8025430 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8026ad4:	6839      	ldr	r1, [r7, #0]
 8026ad6:	687b      	ldr	r3, [r7, #4]
 8026ad8:	68ba      	ldr	r2, [r7, #8]
 8026ada:	9202      	str	r2, [sp, #8]
 8026adc:	9301      	str	r3, [sp, #4]
 8026ade:	2300      	movs	r3, #0
 8026ae0:	9300      	str	r3, [sp, #0]
 8026ae2:	2300      	movs	r3, #0
 8026ae4:	460a      	mov	r2, r1
 8026ae6:	4920      	ldr	r1, [pc, #128]	; (8026b68 <vTaskStartScheduler+0xb0>)
 8026ae8:	4820      	ldr	r0, [pc, #128]	; (8026b6c <vTaskStartScheduler+0xb4>)
 8026aea:	f7ff fd99 	bl	8026620 <xTaskCreateStatic>
 8026aee:	4602      	mov	r2, r0
 8026af0:	4b1f      	ldr	r3, [pc, #124]	; (8026b70 <vTaskStartScheduler+0xb8>)
 8026af2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8026af4:	4b1e      	ldr	r3, [pc, #120]	; (8026b70 <vTaskStartScheduler+0xb8>)
 8026af6:	681b      	ldr	r3, [r3, #0]
 8026af8:	2b00      	cmp	r3, #0
 8026afa:	d002      	beq.n	8026b02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8026afc:	2301      	movs	r3, #1
 8026afe:	617b      	str	r3, [r7, #20]
 8026b00:	e001      	b.n	8026b06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8026b02:	2300      	movs	r3, #0
 8026b04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8026b06:	697b      	ldr	r3, [r7, #20]
 8026b08:	2b01      	cmp	r3, #1
 8026b0a:	d102      	bne.n	8026b12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8026b0c:	f000 ffec 	bl	8027ae8 <xTimerCreateTimerTask>
 8026b10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8026b12:	697b      	ldr	r3, [r7, #20]
 8026b14:	2b01      	cmp	r3, #1
 8026b16:	d115      	bne.n	8026b44 <vTaskStartScheduler+0x8c>
 8026b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026b1c:	f383 8811 	msr	BASEPRI, r3
 8026b20:	f3bf 8f6f 	isb	sy
 8026b24:	f3bf 8f4f 	dsb	sy
 8026b28:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8026b2a:	4b12      	ldr	r3, [pc, #72]	; (8026b74 <vTaskStartScheduler+0xbc>)
 8026b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8026b30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8026b32:	4b11      	ldr	r3, [pc, #68]	; (8026b78 <vTaskStartScheduler+0xc0>)
 8026b34:	2201      	movs	r2, #1
 8026b36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8026b38:	4b10      	ldr	r3, [pc, #64]	; (8026b7c <vTaskStartScheduler+0xc4>)
 8026b3a:	2200      	movs	r2, #0
 8026b3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8026b3e:	f001 fb9f 	bl	8028280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8026b42:	e00d      	b.n	8026b60 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8026b44:	697b      	ldr	r3, [r7, #20]
 8026b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026b4a:	d109      	bne.n	8026b60 <vTaskStartScheduler+0xa8>
 8026b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026b50:	f383 8811 	msr	BASEPRI, r3
 8026b54:	f3bf 8f6f 	isb	sy
 8026b58:	f3bf 8f4f 	dsb	sy
 8026b5c:	60fb      	str	r3, [r7, #12]
 8026b5e:	e7fe      	b.n	8026b5e <vTaskStartScheduler+0xa6>
}
 8026b60:	bf00      	nop
 8026b62:	3718      	adds	r7, #24
 8026b64:	46bd      	mov	sp, r7
 8026b66:	bd80      	pop	{r7, pc}
 8026b68:	0802cd1c 	.word	0x0802cd1c
 8026b6c:	080271a5 	.word	0x080271a5
 8026b70:	24001fe0 	.word	0x24001fe0
 8026b74:	24001fdc 	.word	0x24001fdc
 8026b78:	24001fc8 	.word	0x24001fc8
 8026b7c:	24001fc0 	.word	0x24001fc0

08026b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8026b80:	b480      	push	{r7}
 8026b82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8026b84:	4b04      	ldr	r3, [pc, #16]	; (8026b98 <vTaskSuspendAll+0x18>)
 8026b86:	681b      	ldr	r3, [r3, #0]
 8026b88:	3301      	adds	r3, #1
 8026b8a:	4a03      	ldr	r2, [pc, #12]	; (8026b98 <vTaskSuspendAll+0x18>)
 8026b8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8026b8e:	bf00      	nop
 8026b90:	46bd      	mov	sp, r7
 8026b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b96:	4770      	bx	lr
 8026b98:	24001fe4 	.word	0x24001fe4

08026b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8026b9c:	b580      	push	{r7, lr}
 8026b9e:	b084      	sub	sp, #16
 8026ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8026ba2:	2300      	movs	r3, #0
 8026ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8026ba6:	2300      	movs	r3, #0
 8026ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8026baa:	4b41      	ldr	r3, [pc, #260]	; (8026cb0 <xTaskResumeAll+0x114>)
 8026bac:	681b      	ldr	r3, [r3, #0]
 8026bae:	2b00      	cmp	r3, #0
 8026bb0:	d109      	bne.n	8026bc6 <xTaskResumeAll+0x2a>
 8026bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026bb6:	f383 8811 	msr	BASEPRI, r3
 8026bba:	f3bf 8f6f 	isb	sy
 8026bbe:	f3bf 8f4f 	dsb	sy
 8026bc2:	603b      	str	r3, [r7, #0]
 8026bc4:	e7fe      	b.n	8026bc4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8026bc6:	f001 fbf9 	bl	80283bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8026bca:	4b39      	ldr	r3, [pc, #228]	; (8026cb0 <xTaskResumeAll+0x114>)
 8026bcc:	681b      	ldr	r3, [r3, #0]
 8026bce:	3b01      	subs	r3, #1
 8026bd0:	4a37      	ldr	r2, [pc, #220]	; (8026cb0 <xTaskResumeAll+0x114>)
 8026bd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8026bd4:	4b36      	ldr	r3, [pc, #216]	; (8026cb0 <xTaskResumeAll+0x114>)
 8026bd6:	681b      	ldr	r3, [r3, #0]
 8026bd8:	2b00      	cmp	r3, #0
 8026bda:	d162      	bne.n	8026ca2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8026bdc:	4b35      	ldr	r3, [pc, #212]	; (8026cb4 <xTaskResumeAll+0x118>)
 8026bde:	681b      	ldr	r3, [r3, #0]
 8026be0:	2b00      	cmp	r3, #0
 8026be2:	d05e      	beq.n	8026ca2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8026be4:	e02f      	b.n	8026c46 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8026be6:	4b34      	ldr	r3, [pc, #208]	; (8026cb8 <xTaskResumeAll+0x11c>)
 8026be8:	68db      	ldr	r3, [r3, #12]
 8026bea:	68db      	ldr	r3, [r3, #12]
 8026bec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8026bee:	68fb      	ldr	r3, [r7, #12]
 8026bf0:	3318      	adds	r3, #24
 8026bf2:	4618      	mov	r0, r3
 8026bf4:	f7fe fcda 	bl	80255ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8026bf8:	68fb      	ldr	r3, [r7, #12]
 8026bfa:	3304      	adds	r3, #4
 8026bfc:	4618      	mov	r0, r3
 8026bfe:	f7fe fcd5 	bl	80255ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8026c02:	68fb      	ldr	r3, [r7, #12]
 8026c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026c06:	4b2d      	ldr	r3, [pc, #180]	; (8026cbc <xTaskResumeAll+0x120>)
 8026c08:	681b      	ldr	r3, [r3, #0]
 8026c0a:	429a      	cmp	r2, r3
 8026c0c:	d903      	bls.n	8026c16 <xTaskResumeAll+0x7a>
 8026c0e:	68fb      	ldr	r3, [r7, #12]
 8026c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026c12:	4a2a      	ldr	r2, [pc, #168]	; (8026cbc <xTaskResumeAll+0x120>)
 8026c14:	6013      	str	r3, [r2, #0]
 8026c16:	68fb      	ldr	r3, [r7, #12]
 8026c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026c1a:	4613      	mov	r3, r2
 8026c1c:	009b      	lsls	r3, r3, #2
 8026c1e:	4413      	add	r3, r2
 8026c20:	009b      	lsls	r3, r3, #2
 8026c22:	4a27      	ldr	r2, [pc, #156]	; (8026cc0 <xTaskResumeAll+0x124>)
 8026c24:	441a      	add	r2, r3
 8026c26:	68fb      	ldr	r3, [r7, #12]
 8026c28:	3304      	adds	r3, #4
 8026c2a:	4619      	mov	r1, r3
 8026c2c:	4610      	mov	r0, r2
 8026c2e:	f7fe fc60 	bl	80254f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8026c32:	68fb      	ldr	r3, [r7, #12]
 8026c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026c36:	4b23      	ldr	r3, [pc, #140]	; (8026cc4 <xTaskResumeAll+0x128>)
 8026c38:	681b      	ldr	r3, [r3, #0]
 8026c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026c3c:	429a      	cmp	r2, r3
 8026c3e:	d302      	bcc.n	8026c46 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8026c40:	4b21      	ldr	r3, [pc, #132]	; (8026cc8 <xTaskResumeAll+0x12c>)
 8026c42:	2201      	movs	r2, #1
 8026c44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8026c46:	4b1c      	ldr	r3, [pc, #112]	; (8026cb8 <xTaskResumeAll+0x11c>)
 8026c48:	681b      	ldr	r3, [r3, #0]
 8026c4a:	2b00      	cmp	r3, #0
 8026c4c:	d1cb      	bne.n	8026be6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8026c4e:	68fb      	ldr	r3, [r7, #12]
 8026c50:	2b00      	cmp	r3, #0
 8026c52:	d001      	beq.n	8026c58 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8026c54:	f000 fb58 	bl	8027308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8026c58:	4b1c      	ldr	r3, [pc, #112]	; (8026ccc <xTaskResumeAll+0x130>)
 8026c5a:	681b      	ldr	r3, [r3, #0]
 8026c5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8026c5e:	687b      	ldr	r3, [r7, #4]
 8026c60:	2b00      	cmp	r3, #0
 8026c62:	d010      	beq.n	8026c86 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8026c64:	f000 f858 	bl	8026d18 <xTaskIncrementTick>
 8026c68:	4603      	mov	r3, r0
 8026c6a:	2b00      	cmp	r3, #0
 8026c6c:	d002      	beq.n	8026c74 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8026c6e:	4b16      	ldr	r3, [pc, #88]	; (8026cc8 <xTaskResumeAll+0x12c>)
 8026c70:	2201      	movs	r2, #1
 8026c72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8026c74:	687b      	ldr	r3, [r7, #4]
 8026c76:	3b01      	subs	r3, #1
 8026c78:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8026c7a:	687b      	ldr	r3, [r7, #4]
 8026c7c:	2b00      	cmp	r3, #0
 8026c7e:	d1f1      	bne.n	8026c64 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8026c80:	4b12      	ldr	r3, [pc, #72]	; (8026ccc <xTaskResumeAll+0x130>)
 8026c82:	2200      	movs	r2, #0
 8026c84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8026c86:	4b10      	ldr	r3, [pc, #64]	; (8026cc8 <xTaskResumeAll+0x12c>)
 8026c88:	681b      	ldr	r3, [r3, #0]
 8026c8a:	2b00      	cmp	r3, #0
 8026c8c:	d009      	beq.n	8026ca2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8026c8e:	2301      	movs	r3, #1
 8026c90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8026c92:	4b0f      	ldr	r3, [pc, #60]	; (8026cd0 <xTaskResumeAll+0x134>)
 8026c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026c98:	601a      	str	r2, [r3, #0]
 8026c9a:	f3bf 8f4f 	dsb	sy
 8026c9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8026ca2:	f001 fbb9 	bl	8028418 <vPortExitCritical>

	return xAlreadyYielded;
 8026ca6:	68bb      	ldr	r3, [r7, #8]
}
 8026ca8:	4618      	mov	r0, r3
 8026caa:	3710      	adds	r7, #16
 8026cac:	46bd      	mov	sp, r7
 8026cae:	bd80      	pop	{r7, pc}
 8026cb0:	24001fe4 	.word	0x24001fe4
 8026cb4:	24001fbc 	.word	0x24001fbc
 8026cb8:	24001f7c 	.word	0x24001f7c
 8026cbc:	24001fc4 	.word	0x24001fc4
 8026cc0:	24001aec 	.word	0x24001aec
 8026cc4:	24001ae8 	.word	0x24001ae8
 8026cc8:	24001fd0 	.word	0x24001fd0
 8026ccc:	24001fcc 	.word	0x24001fcc
 8026cd0:	e000ed04 	.word	0xe000ed04

08026cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8026cd4:	b480      	push	{r7}
 8026cd6:	b083      	sub	sp, #12
 8026cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8026cda:	4b05      	ldr	r3, [pc, #20]	; (8026cf0 <xTaskGetTickCount+0x1c>)
 8026cdc:	681b      	ldr	r3, [r3, #0]
 8026cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8026ce0:	687b      	ldr	r3, [r7, #4]
}
 8026ce2:	4618      	mov	r0, r3
 8026ce4:	370c      	adds	r7, #12
 8026ce6:	46bd      	mov	sp, r7
 8026ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cec:	4770      	bx	lr
 8026cee:	bf00      	nop
 8026cf0:	24001fc0 	.word	0x24001fc0

08026cf4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8026cf4:	b580      	push	{r7, lr}
 8026cf6:	b082      	sub	sp, #8
 8026cf8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8026cfa:	f001 fc3b 	bl	8028574 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8026cfe:	2300      	movs	r3, #0
 8026d00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8026d02:	4b04      	ldr	r3, [pc, #16]	; (8026d14 <xTaskGetTickCountFromISR+0x20>)
 8026d04:	681b      	ldr	r3, [r3, #0]
 8026d06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8026d08:	683b      	ldr	r3, [r7, #0]
}
 8026d0a:	4618      	mov	r0, r3
 8026d0c:	3708      	adds	r7, #8
 8026d0e:	46bd      	mov	sp, r7
 8026d10:	bd80      	pop	{r7, pc}
 8026d12:	bf00      	nop
 8026d14:	24001fc0 	.word	0x24001fc0

08026d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8026d18:	b580      	push	{r7, lr}
 8026d1a:	b086      	sub	sp, #24
 8026d1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8026d1e:	2300      	movs	r3, #0
 8026d20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8026d22:	4b4e      	ldr	r3, [pc, #312]	; (8026e5c <xTaskIncrementTick+0x144>)
 8026d24:	681b      	ldr	r3, [r3, #0]
 8026d26:	2b00      	cmp	r3, #0
 8026d28:	f040 8088 	bne.w	8026e3c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8026d2c:	4b4c      	ldr	r3, [pc, #304]	; (8026e60 <xTaskIncrementTick+0x148>)
 8026d2e:	681b      	ldr	r3, [r3, #0]
 8026d30:	3301      	adds	r3, #1
 8026d32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8026d34:	4a4a      	ldr	r2, [pc, #296]	; (8026e60 <xTaskIncrementTick+0x148>)
 8026d36:	693b      	ldr	r3, [r7, #16]
 8026d38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8026d3a:	693b      	ldr	r3, [r7, #16]
 8026d3c:	2b00      	cmp	r3, #0
 8026d3e:	d11f      	bne.n	8026d80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8026d40:	4b48      	ldr	r3, [pc, #288]	; (8026e64 <xTaskIncrementTick+0x14c>)
 8026d42:	681b      	ldr	r3, [r3, #0]
 8026d44:	681b      	ldr	r3, [r3, #0]
 8026d46:	2b00      	cmp	r3, #0
 8026d48:	d009      	beq.n	8026d5e <xTaskIncrementTick+0x46>
 8026d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026d4e:	f383 8811 	msr	BASEPRI, r3
 8026d52:	f3bf 8f6f 	isb	sy
 8026d56:	f3bf 8f4f 	dsb	sy
 8026d5a:	603b      	str	r3, [r7, #0]
 8026d5c:	e7fe      	b.n	8026d5c <xTaskIncrementTick+0x44>
 8026d5e:	4b41      	ldr	r3, [pc, #260]	; (8026e64 <xTaskIncrementTick+0x14c>)
 8026d60:	681b      	ldr	r3, [r3, #0]
 8026d62:	60fb      	str	r3, [r7, #12]
 8026d64:	4b40      	ldr	r3, [pc, #256]	; (8026e68 <xTaskIncrementTick+0x150>)
 8026d66:	681b      	ldr	r3, [r3, #0]
 8026d68:	4a3e      	ldr	r2, [pc, #248]	; (8026e64 <xTaskIncrementTick+0x14c>)
 8026d6a:	6013      	str	r3, [r2, #0]
 8026d6c:	4a3e      	ldr	r2, [pc, #248]	; (8026e68 <xTaskIncrementTick+0x150>)
 8026d6e:	68fb      	ldr	r3, [r7, #12]
 8026d70:	6013      	str	r3, [r2, #0]
 8026d72:	4b3e      	ldr	r3, [pc, #248]	; (8026e6c <xTaskIncrementTick+0x154>)
 8026d74:	681b      	ldr	r3, [r3, #0]
 8026d76:	3301      	adds	r3, #1
 8026d78:	4a3c      	ldr	r2, [pc, #240]	; (8026e6c <xTaskIncrementTick+0x154>)
 8026d7a:	6013      	str	r3, [r2, #0]
 8026d7c:	f000 fac4 	bl	8027308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8026d80:	4b3b      	ldr	r3, [pc, #236]	; (8026e70 <xTaskIncrementTick+0x158>)
 8026d82:	681b      	ldr	r3, [r3, #0]
 8026d84:	693a      	ldr	r2, [r7, #16]
 8026d86:	429a      	cmp	r2, r3
 8026d88:	d349      	bcc.n	8026e1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8026d8a:	4b36      	ldr	r3, [pc, #216]	; (8026e64 <xTaskIncrementTick+0x14c>)
 8026d8c:	681b      	ldr	r3, [r3, #0]
 8026d8e:	681b      	ldr	r3, [r3, #0]
 8026d90:	2b00      	cmp	r3, #0
 8026d92:	d104      	bne.n	8026d9e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8026d94:	4b36      	ldr	r3, [pc, #216]	; (8026e70 <xTaskIncrementTick+0x158>)
 8026d96:	f04f 32ff 	mov.w	r2, #4294967295
 8026d9a:	601a      	str	r2, [r3, #0]
					break;
 8026d9c:	e03f      	b.n	8026e1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8026d9e:	4b31      	ldr	r3, [pc, #196]	; (8026e64 <xTaskIncrementTick+0x14c>)
 8026da0:	681b      	ldr	r3, [r3, #0]
 8026da2:	68db      	ldr	r3, [r3, #12]
 8026da4:	68db      	ldr	r3, [r3, #12]
 8026da6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8026da8:	68bb      	ldr	r3, [r7, #8]
 8026daa:	685b      	ldr	r3, [r3, #4]
 8026dac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8026dae:	693a      	ldr	r2, [r7, #16]
 8026db0:	687b      	ldr	r3, [r7, #4]
 8026db2:	429a      	cmp	r2, r3
 8026db4:	d203      	bcs.n	8026dbe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8026db6:	4a2e      	ldr	r2, [pc, #184]	; (8026e70 <xTaskIncrementTick+0x158>)
 8026db8:	687b      	ldr	r3, [r7, #4]
 8026dba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8026dbc:	e02f      	b.n	8026e1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8026dbe:	68bb      	ldr	r3, [r7, #8]
 8026dc0:	3304      	adds	r3, #4
 8026dc2:	4618      	mov	r0, r3
 8026dc4:	f7fe fbf2 	bl	80255ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8026dc8:	68bb      	ldr	r3, [r7, #8]
 8026dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026dcc:	2b00      	cmp	r3, #0
 8026dce:	d004      	beq.n	8026dda <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8026dd0:	68bb      	ldr	r3, [r7, #8]
 8026dd2:	3318      	adds	r3, #24
 8026dd4:	4618      	mov	r0, r3
 8026dd6:	f7fe fbe9 	bl	80255ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8026dda:	68bb      	ldr	r3, [r7, #8]
 8026ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026dde:	4b25      	ldr	r3, [pc, #148]	; (8026e74 <xTaskIncrementTick+0x15c>)
 8026de0:	681b      	ldr	r3, [r3, #0]
 8026de2:	429a      	cmp	r2, r3
 8026de4:	d903      	bls.n	8026dee <xTaskIncrementTick+0xd6>
 8026de6:	68bb      	ldr	r3, [r7, #8]
 8026de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026dea:	4a22      	ldr	r2, [pc, #136]	; (8026e74 <xTaskIncrementTick+0x15c>)
 8026dec:	6013      	str	r3, [r2, #0]
 8026dee:	68bb      	ldr	r3, [r7, #8]
 8026df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026df2:	4613      	mov	r3, r2
 8026df4:	009b      	lsls	r3, r3, #2
 8026df6:	4413      	add	r3, r2
 8026df8:	009b      	lsls	r3, r3, #2
 8026dfa:	4a1f      	ldr	r2, [pc, #124]	; (8026e78 <xTaskIncrementTick+0x160>)
 8026dfc:	441a      	add	r2, r3
 8026dfe:	68bb      	ldr	r3, [r7, #8]
 8026e00:	3304      	adds	r3, #4
 8026e02:	4619      	mov	r1, r3
 8026e04:	4610      	mov	r0, r2
 8026e06:	f7fe fb74 	bl	80254f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8026e0a:	68bb      	ldr	r3, [r7, #8]
 8026e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026e0e:	4b1b      	ldr	r3, [pc, #108]	; (8026e7c <xTaskIncrementTick+0x164>)
 8026e10:	681b      	ldr	r3, [r3, #0]
 8026e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026e14:	429a      	cmp	r2, r3
 8026e16:	d3b8      	bcc.n	8026d8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8026e18:	2301      	movs	r3, #1
 8026e1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8026e1c:	e7b5      	b.n	8026d8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8026e1e:	4b17      	ldr	r3, [pc, #92]	; (8026e7c <xTaskIncrementTick+0x164>)
 8026e20:	681b      	ldr	r3, [r3, #0]
 8026e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026e24:	4914      	ldr	r1, [pc, #80]	; (8026e78 <xTaskIncrementTick+0x160>)
 8026e26:	4613      	mov	r3, r2
 8026e28:	009b      	lsls	r3, r3, #2
 8026e2a:	4413      	add	r3, r2
 8026e2c:	009b      	lsls	r3, r3, #2
 8026e2e:	440b      	add	r3, r1
 8026e30:	681b      	ldr	r3, [r3, #0]
 8026e32:	2b01      	cmp	r3, #1
 8026e34:	d907      	bls.n	8026e46 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8026e36:	2301      	movs	r3, #1
 8026e38:	617b      	str	r3, [r7, #20]
 8026e3a:	e004      	b.n	8026e46 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8026e3c:	4b10      	ldr	r3, [pc, #64]	; (8026e80 <xTaskIncrementTick+0x168>)
 8026e3e:	681b      	ldr	r3, [r3, #0]
 8026e40:	3301      	adds	r3, #1
 8026e42:	4a0f      	ldr	r2, [pc, #60]	; (8026e80 <xTaskIncrementTick+0x168>)
 8026e44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8026e46:	4b0f      	ldr	r3, [pc, #60]	; (8026e84 <xTaskIncrementTick+0x16c>)
 8026e48:	681b      	ldr	r3, [r3, #0]
 8026e4a:	2b00      	cmp	r3, #0
 8026e4c:	d001      	beq.n	8026e52 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8026e4e:	2301      	movs	r3, #1
 8026e50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8026e52:	697b      	ldr	r3, [r7, #20]
}
 8026e54:	4618      	mov	r0, r3
 8026e56:	3718      	adds	r7, #24
 8026e58:	46bd      	mov	sp, r7
 8026e5a:	bd80      	pop	{r7, pc}
 8026e5c:	24001fe4 	.word	0x24001fe4
 8026e60:	24001fc0 	.word	0x24001fc0
 8026e64:	24001f74 	.word	0x24001f74
 8026e68:	24001f78 	.word	0x24001f78
 8026e6c:	24001fd4 	.word	0x24001fd4
 8026e70:	24001fdc 	.word	0x24001fdc
 8026e74:	24001fc4 	.word	0x24001fc4
 8026e78:	24001aec 	.word	0x24001aec
 8026e7c:	24001ae8 	.word	0x24001ae8
 8026e80:	24001fcc 	.word	0x24001fcc
 8026e84:	24001fd0 	.word	0x24001fd0

08026e88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8026e88:	b480      	push	{r7}
 8026e8a:	b085      	sub	sp, #20
 8026e8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8026e8e:	4b27      	ldr	r3, [pc, #156]	; (8026f2c <vTaskSwitchContext+0xa4>)
 8026e90:	681b      	ldr	r3, [r3, #0]
 8026e92:	2b00      	cmp	r3, #0
 8026e94:	d003      	beq.n	8026e9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8026e96:	4b26      	ldr	r3, [pc, #152]	; (8026f30 <vTaskSwitchContext+0xa8>)
 8026e98:	2201      	movs	r2, #1
 8026e9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8026e9c:	e040      	b.n	8026f20 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8026e9e:	4b24      	ldr	r3, [pc, #144]	; (8026f30 <vTaskSwitchContext+0xa8>)
 8026ea0:	2200      	movs	r2, #0
 8026ea2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8026ea4:	4b23      	ldr	r3, [pc, #140]	; (8026f34 <vTaskSwitchContext+0xac>)
 8026ea6:	681b      	ldr	r3, [r3, #0]
 8026ea8:	60fb      	str	r3, [r7, #12]
 8026eaa:	e00f      	b.n	8026ecc <vTaskSwitchContext+0x44>
 8026eac:	68fb      	ldr	r3, [r7, #12]
 8026eae:	2b00      	cmp	r3, #0
 8026eb0:	d109      	bne.n	8026ec6 <vTaskSwitchContext+0x3e>
 8026eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026eb6:	f383 8811 	msr	BASEPRI, r3
 8026eba:	f3bf 8f6f 	isb	sy
 8026ebe:	f3bf 8f4f 	dsb	sy
 8026ec2:	607b      	str	r3, [r7, #4]
 8026ec4:	e7fe      	b.n	8026ec4 <vTaskSwitchContext+0x3c>
 8026ec6:	68fb      	ldr	r3, [r7, #12]
 8026ec8:	3b01      	subs	r3, #1
 8026eca:	60fb      	str	r3, [r7, #12]
 8026ecc:	491a      	ldr	r1, [pc, #104]	; (8026f38 <vTaskSwitchContext+0xb0>)
 8026ece:	68fa      	ldr	r2, [r7, #12]
 8026ed0:	4613      	mov	r3, r2
 8026ed2:	009b      	lsls	r3, r3, #2
 8026ed4:	4413      	add	r3, r2
 8026ed6:	009b      	lsls	r3, r3, #2
 8026ed8:	440b      	add	r3, r1
 8026eda:	681b      	ldr	r3, [r3, #0]
 8026edc:	2b00      	cmp	r3, #0
 8026ede:	d0e5      	beq.n	8026eac <vTaskSwitchContext+0x24>
 8026ee0:	68fa      	ldr	r2, [r7, #12]
 8026ee2:	4613      	mov	r3, r2
 8026ee4:	009b      	lsls	r3, r3, #2
 8026ee6:	4413      	add	r3, r2
 8026ee8:	009b      	lsls	r3, r3, #2
 8026eea:	4a13      	ldr	r2, [pc, #76]	; (8026f38 <vTaskSwitchContext+0xb0>)
 8026eec:	4413      	add	r3, r2
 8026eee:	60bb      	str	r3, [r7, #8]
 8026ef0:	68bb      	ldr	r3, [r7, #8]
 8026ef2:	685b      	ldr	r3, [r3, #4]
 8026ef4:	685a      	ldr	r2, [r3, #4]
 8026ef6:	68bb      	ldr	r3, [r7, #8]
 8026ef8:	605a      	str	r2, [r3, #4]
 8026efa:	68bb      	ldr	r3, [r7, #8]
 8026efc:	685a      	ldr	r2, [r3, #4]
 8026efe:	68bb      	ldr	r3, [r7, #8]
 8026f00:	3308      	adds	r3, #8
 8026f02:	429a      	cmp	r2, r3
 8026f04:	d104      	bne.n	8026f10 <vTaskSwitchContext+0x88>
 8026f06:	68bb      	ldr	r3, [r7, #8]
 8026f08:	685b      	ldr	r3, [r3, #4]
 8026f0a:	685a      	ldr	r2, [r3, #4]
 8026f0c:	68bb      	ldr	r3, [r7, #8]
 8026f0e:	605a      	str	r2, [r3, #4]
 8026f10:	68bb      	ldr	r3, [r7, #8]
 8026f12:	685b      	ldr	r3, [r3, #4]
 8026f14:	68db      	ldr	r3, [r3, #12]
 8026f16:	4a09      	ldr	r2, [pc, #36]	; (8026f3c <vTaskSwitchContext+0xb4>)
 8026f18:	6013      	str	r3, [r2, #0]
 8026f1a:	4a06      	ldr	r2, [pc, #24]	; (8026f34 <vTaskSwitchContext+0xac>)
 8026f1c:	68fb      	ldr	r3, [r7, #12]
 8026f1e:	6013      	str	r3, [r2, #0]
}
 8026f20:	bf00      	nop
 8026f22:	3714      	adds	r7, #20
 8026f24:	46bd      	mov	sp, r7
 8026f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f2a:	4770      	bx	lr
 8026f2c:	24001fe4 	.word	0x24001fe4
 8026f30:	24001fd0 	.word	0x24001fd0
 8026f34:	24001fc4 	.word	0x24001fc4
 8026f38:	24001aec 	.word	0x24001aec
 8026f3c:	24001ae8 	.word	0x24001ae8

08026f40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8026f40:	b580      	push	{r7, lr}
 8026f42:	b084      	sub	sp, #16
 8026f44:	af00      	add	r7, sp, #0
 8026f46:	6078      	str	r0, [r7, #4]
 8026f48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8026f4a:	687b      	ldr	r3, [r7, #4]
 8026f4c:	2b00      	cmp	r3, #0
 8026f4e:	d109      	bne.n	8026f64 <vTaskPlaceOnEventList+0x24>
 8026f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026f54:	f383 8811 	msr	BASEPRI, r3
 8026f58:	f3bf 8f6f 	isb	sy
 8026f5c:	f3bf 8f4f 	dsb	sy
 8026f60:	60fb      	str	r3, [r7, #12]
 8026f62:	e7fe      	b.n	8026f62 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8026f64:	4b07      	ldr	r3, [pc, #28]	; (8026f84 <vTaskPlaceOnEventList+0x44>)
 8026f66:	681b      	ldr	r3, [r3, #0]
 8026f68:	3318      	adds	r3, #24
 8026f6a:	4619      	mov	r1, r3
 8026f6c:	6878      	ldr	r0, [r7, #4]
 8026f6e:	f7fe fae4 	bl	802553a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8026f72:	2101      	movs	r1, #1
 8026f74:	6838      	ldr	r0, [r7, #0]
 8026f76:	f000 fd63 	bl	8027a40 <prvAddCurrentTaskToDelayedList>
}
 8026f7a:	bf00      	nop
 8026f7c:	3710      	adds	r7, #16
 8026f7e:	46bd      	mov	sp, r7
 8026f80:	bd80      	pop	{r7, pc}
 8026f82:	bf00      	nop
 8026f84:	24001ae8 	.word	0x24001ae8

08026f88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8026f88:	b580      	push	{r7, lr}
 8026f8a:	b086      	sub	sp, #24
 8026f8c:	af00      	add	r7, sp, #0
 8026f8e:	60f8      	str	r0, [r7, #12]
 8026f90:	60b9      	str	r1, [r7, #8]
 8026f92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8026f94:	68fb      	ldr	r3, [r7, #12]
 8026f96:	2b00      	cmp	r3, #0
 8026f98:	d109      	bne.n	8026fae <vTaskPlaceOnEventListRestricted+0x26>
 8026f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026f9e:	f383 8811 	msr	BASEPRI, r3
 8026fa2:	f3bf 8f6f 	isb	sy
 8026fa6:	f3bf 8f4f 	dsb	sy
 8026faa:	617b      	str	r3, [r7, #20]
 8026fac:	e7fe      	b.n	8026fac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8026fae:	4b0a      	ldr	r3, [pc, #40]	; (8026fd8 <vTaskPlaceOnEventListRestricted+0x50>)
 8026fb0:	681b      	ldr	r3, [r3, #0]
 8026fb2:	3318      	adds	r3, #24
 8026fb4:	4619      	mov	r1, r3
 8026fb6:	68f8      	ldr	r0, [r7, #12]
 8026fb8:	f7fe fa9b 	bl	80254f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8026fbc:	687b      	ldr	r3, [r7, #4]
 8026fbe:	2b00      	cmp	r3, #0
 8026fc0:	d002      	beq.n	8026fc8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8026fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8026fc6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8026fc8:	6879      	ldr	r1, [r7, #4]
 8026fca:	68b8      	ldr	r0, [r7, #8]
 8026fcc:	f000 fd38 	bl	8027a40 <prvAddCurrentTaskToDelayedList>
	}
 8026fd0:	bf00      	nop
 8026fd2:	3718      	adds	r7, #24
 8026fd4:	46bd      	mov	sp, r7
 8026fd6:	bd80      	pop	{r7, pc}
 8026fd8:	24001ae8 	.word	0x24001ae8

08026fdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8026fdc:	b580      	push	{r7, lr}
 8026fde:	b086      	sub	sp, #24
 8026fe0:	af00      	add	r7, sp, #0
 8026fe2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8026fe4:	687b      	ldr	r3, [r7, #4]
 8026fe6:	68db      	ldr	r3, [r3, #12]
 8026fe8:	68db      	ldr	r3, [r3, #12]
 8026fea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8026fec:	693b      	ldr	r3, [r7, #16]
 8026fee:	2b00      	cmp	r3, #0
 8026ff0:	d109      	bne.n	8027006 <xTaskRemoveFromEventList+0x2a>
 8026ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026ff6:	f383 8811 	msr	BASEPRI, r3
 8026ffa:	f3bf 8f6f 	isb	sy
 8026ffe:	f3bf 8f4f 	dsb	sy
 8027002:	60fb      	str	r3, [r7, #12]
 8027004:	e7fe      	b.n	8027004 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8027006:	693b      	ldr	r3, [r7, #16]
 8027008:	3318      	adds	r3, #24
 802700a:	4618      	mov	r0, r3
 802700c:	f7fe face 	bl	80255ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8027010:	4b1d      	ldr	r3, [pc, #116]	; (8027088 <xTaskRemoveFromEventList+0xac>)
 8027012:	681b      	ldr	r3, [r3, #0]
 8027014:	2b00      	cmp	r3, #0
 8027016:	d11d      	bne.n	8027054 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8027018:	693b      	ldr	r3, [r7, #16]
 802701a:	3304      	adds	r3, #4
 802701c:	4618      	mov	r0, r3
 802701e:	f7fe fac5 	bl	80255ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8027022:	693b      	ldr	r3, [r7, #16]
 8027024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027026:	4b19      	ldr	r3, [pc, #100]	; (802708c <xTaskRemoveFromEventList+0xb0>)
 8027028:	681b      	ldr	r3, [r3, #0]
 802702a:	429a      	cmp	r2, r3
 802702c:	d903      	bls.n	8027036 <xTaskRemoveFromEventList+0x5a>
 802702e:	693b      	ldr	r3, [r7, #16]
 8027030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027032:	4a16      	ldr	r2, [pc, #88]	; (802708c <xTaskRemoveFromEventList+0xb0>)
 8027034:	6013      	str	r3, [r2, #0]
 8027036:	693b      	ldr	r3, [r7, #16]
 8027038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802703a:	4613      	mov	r3, r2
 802703c:	009b      	lsls	r3, r3, #2
 802703e:	4413      	add	r3, r2
 8027040:	009b      	lsls	r3, r3, #2
 8027042:	4a13      	ldr	r2, [pc, #76]	; (8027090 <xTaskRemoveFromEventList+0xb4>)
 8027044:	441a      	add	r2, r3
 8027046:	693b      	ldr	r3, [r7, #16]
 8027048:	3304      	adds	r3, #4
 802704a:	4619      	mov	r1, r3
 802704c:	4610      	mov	r0, r2
 802704e:	f7fe fa50 	bl	80254f2 <vListInsertEnd>
 8027052:	e005      	b.n	8027060 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8027054:	693b      	ldr	r3, [r7, #16]
 8027056:	3318      	adds	r3, #24
 8027058:	4619      	mov	r1, r3
 802705a:	480e      	ldr	r0, [pc, #56]	; (8027094 <xTaskRemoveFromEventList+0xb8>)
 802705c:	f7fe fa49 	bl	80254f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8027060:	693b      	ldr	r3, [r7, #16]
 8027062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027064:	4b0c      	ldr	r3, [pc, #48]	; (8027098 <xTaskRemoveFromEventList+0xbc>)
 8027066:	681b      	ldr	r3, [r3, #0]
 8027068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802706a:	429a      	cmp	r2, r3
 802706c:	d905      	bls.n	802707a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802706e:	2301      	movs	r3, #1
 8027070:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8027072:	4b0a      	ldr	r3, [pc, #40]	; (802709c <xTaskRemoveFromEventList+0xc0>)
 8027074:	2201      	movs	r2, #1
 8027076:	601a      	str	r2, [r3, #0]
 8027078:	e001      	b.n	802707e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 802707a:	2300      	movs	r3, #0
 802707c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 802707e:	697b      	ldr	r3, [r7, #20]
}
 8027080:	4618      	mov	r0, r3
 8027082:	3718      	adds	r7, #24
 8027084:	46bd      	mov	sp, r7
 8027086:	bd80      	pop	{r7, pc}
 8027088:	24001fe4 	.word	0x24001fe4
 802708c:	24001fc4 	.word	0x24001fc4
 8027090:	24001aec 	.word	0x24001aec
 8027094:	24001f7c 	.word	0x24001f7c
 8027098:	24001ae8 	.word	0x24001ae8
 802709c:	24001fd0 	.word	0x24001fd0

080270a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80270a0:	b480      	push	{r7}
 80270a2:	b083      	sub	sp, #12
 80270a4:	af00      	add	r7, sp, #0
 80270a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80270a8:	4b06      	ldr	r3, [pc, #24]	; (80270c4 <vTaskInternalSetTimeOutState+0x24>)
 80270aa:	681a      	ldr	r2, [r3, #0]
 80270ac:	687b      	ldr	r3, [r7, #4]
 80270ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80270b0:	4b05      	ldr	r3, [pc, #20]	; (80270c8 <vTaskInternalSetTimeOutState+0x28>)
 80270b2:	681a      	ldr	r2, [r3, #0]
 80270b4:	687b      	ldr	r3, [r7, #4]
 80270b6:	605a      	str	r2, [r3, #4]
}
 80270b8:	bf00      	nop
 80270ba:	370c      	adds	r7, #12
 80270bc:	46bd      	mov	sp, r7
 80270be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270c2:	4770      	bx	lr
 80270c4:	24001fd4 	.word	0x24001fd4
 80270c8:	24001fc0 	.word	0x24001fc0

080270cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80270cc:	b580      	push	{r7, lr}
 80270ce:	b088      	sub	sp, #32
 80270d0:	af00      	add	r7, sp, #0
 80270d2:	6078      	str	r0, [r7, #4]
 80270d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80270d6:	687b      	ldr	r3, [r7, #4]
 80270d8:	2b00      	cmp	r3, #0
 80270da:	d109      	bne.n	80270f0 <xTaskCheckForTimeOut+0x24>
 80270dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80270e0:	f383 8811 	msr	BASEPRI, r3
 80270e4:	f3bf 8f6f 	isb	sy
 80270e8:	f3bf 8f4f 	dsb	sy
 80270ec:	613b      	str	r3, [r7, #16]
 80270ee:	e7fe      	b.n	80270ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80270f0:	683b      	ldr	r3, [r7, #0]
 80270f2:	2b00      	cmp	r3, #0
 80270f4:	d109      	bne.n	802710a <xTaskCheckForTimeOut+0x3e>
 80270f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80270fa:	f383 8811 	msr	BASEPRI, r3
 80270fe:	f3bf 8f6f 	isb	sy
 8027102:	f3bf 8f4f 	dsb	sy
 8027106:	60fb      	str	r3, [r7, #12]
 8027108:	e7fe      	b.n	8027108 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 802710a:	f001 f957 	bl	80283bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802710e:	4b1d      	ldr	r3, [pc, #116]	; (8027184 <xTaskCheckForTimeOut+0xb8>)
 8027110:	681b      	ldr	r3, [r3, #0]
 8027112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8027114:	687b      	ldr	r3, [r7, #4]
 8027116:	685b      	ldr	r3, [r3, #4]
 8027118:	69ba      	ldr	r2, [r7, #24]
 802711a:	1ad3      	subs	r3, r2, r3
 802711c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802711e:	683b      	ldr	r3, [r7, #0]
 8027120:	681b      	ldr	r3, [r3, #0]
 8027122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027126:	d102      	bne.n	802712e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8027128:	2300      	movs	r3, #0
 802712a:	61fb      	str	r3, [r7, #28]
 802712c:	e023      	b.n	8027176 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802712e:	687b      	ldr	r3, [r7, #4]
 8027130:	681a      	ldr	r2, [r3, #0]
 8027132:	4b15      	ldr	r3, [pc, #84]	; (8027188 <xTaskCheckForTimeOut+0xbc>)
 8027134:	681b      	ldr	r3, [r3, #0]
 8027136:	429a      	cmp	r2, r3
 8027138:	d007      	beq.n	802714a <xTaskCheckForTimeOut+0x7e>
 802713a:	687b      	ldr	r3, [r7, #4]
 802713c:	685b      	ldr	r3, [r3, #4]
 802713e:	69ba      	ldr	r2, [r7, #24]
 8027140:	429a      	cmp	r2, r3
 8027142:	d302      	bcc.n	802714a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8027144:	2301      	movs	r3, #1
 8027146:	61fb      	str	r3, [r7, #28]
 8027148:	e015      	b.n	8027176 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802714a:	683b      	ldr	r3, [r7, #0]
 802714c:	681b      	ldr	r3, [r3, #0]
 802714e:	697a      	ldr	r2, [r7, #20]
 8027150:	429a      	cmp	r2, r3
 8027152:	d20b      	bcs.n	802716c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8027154:	683b      	ldr	r3, [r7, #0]
 8027156:	681a      	ldr	r2, [r3, #0]
 8027158:	697b      	ldr	r3, [r7, #20]
 802715a:	1ad2      	subs	r2, r2, r3
 802715c:	683b      	ldr	r3, [r7, #0]
 802715e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8027160:	6878      	ldr	r0, [r7, #4]
 8027162:	f7ff ff9d 	bl	80270a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8027166:	2300      	movs	r3, #0
 8027168:	61fb      	str	r3, [r7, #28]
 802716a:	e004      	b.n	8027176 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 802716c:	683b      	ldr	r3, [r7, #0]
 802716e:	2200      	movs	r2, #0
 8027170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8027172:	2301      	movs	r3, #1
 8027174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8027176:	f001 f94f 	bl	8028418 <vPortExitCritical>

	return xReturn;
 802717a:	69fb      	ldr	r3, [r7, #28]
}
 802717c:	4618      	mov	r0, r3
 802717e:	3720      	adds	r7, #32
 8027180:	46bd      	mov	sp, r7
 8027182:	bd80      	pop	{r7, pc}
 8027184:	24001fc0 	.word	0x24001fc0
 8027188:	24001fd4 	.word	0x24001fd4

0802718c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 802718c:	b480      	push	{r7}
 802718e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8027190:	4b03      	ldr	r3, [pc, #12]	; (80271a0 <vTaskMissedYield+0x14>)
 8027192:	2201      	movs	r2, #1
 8027194:	601a      	str	r2, [r3, #0]
}
 8027196:	bf00      	nop
 8027198:	46bd      	mov	sp, r7
 802719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802719e:	4770      	bx	lr
 80271a0:	24001fd0 	.word	0x24001fd0

080271a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80271a4:	b580      	push	{r7, lr}
 80271a6:	b082      	sub	sp, #8
 80271a8:	af00      	add	r7, sp, #0
 80271aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80271ac:	f000 f852 	bl	8027254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80271b0:	4b06      	ldr	r3, [pc, #24]	; (80271cc <prvIdleTask+0x28>)
 80271b2:	681b      	ldr	r3, [r3, #0]
 80271b4:	2b01      	cmp	r3, #1
 80271b6:	d9f9      	bls.n	80271ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80271b8:	4b05      	ldr	r3, [pc, #20]	; (80271d0 <prvIdleTask+0x2c>)
 80271ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80271be:	601a      	str	r2, [r3, #0]
 80271c0:	f3bf 8f4f 	dsb	sy
 80271c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80271c8:	e7f0      	b.n	80271ac <prvIdleTask+0x8>
 80271ca:	bf00      	nop
 80271cc:	24001aec 	.word	0x24001aec
 80271d0:	e000ed04 	.word	0xe000ed04

080271d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80271d4:	b580      	push	{r7, lr}
 80271d6:	b082      	sub	sp, #8
 80271d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80271da:	2300      	movs	r3, #0
 80271dc:	607b      	str	r3, [r7, #4]
 80271de:	e00c      	b.n	80271fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80271e0:	687a      	ldr	r2, [r7, #4]
 80271e2:	4613      	mov	r3, r2
 80271e4:	009b      	lsls	r3, r3, #2
 80271e6:	4413      	add	r3, r2
 80271e8:	009b      	lsls	r3, r3, #2
 80271ea:	4a12      	ldr	r2, [pc, #72]	; (8027234 <prvInitialiseTaskLists+0x60>)
 80271ec:	4413      	add	r3, r2
 80271ee:	4618      	mov	r0, r3
 80271f0:	f7fe f952 	bl	8025498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80271f4:	687b      	ldr	r3, [r7, #4]
 80271f6:	3301      	adds	r3, #1
 80271f8:	607b      	str	r3, [r7, #4]
 80271fa:	687b      	ldr	r3, [r7, #4]
 80271fc:	2b37      	cmp	r3, #55	; 0x37
 80271fe:	d9ef      	bls.n	80271e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8027200:	480d      	ldr	r0, [pc, #52]	; (8027238 <prvInitialiseTaskLists+0x64>)
 8027202:	f7fe f949 	bl	8025498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8027206:	480d      	ldr	r0, [pc, #52]	; (802723c <prvInitialiseTaskLists+0x68>)
 8027208:	f7fe f946 	bl	8025498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802720c:	480c      	ldr	r0, [pc, #48]	; (8027240 <prvInitialiseTaskLists+0x6c>)
 802720e:	f7fe f943 	bl	8025498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8027212:	480c      	ldr	r0, [pc, #48]	; (8027244 <prvInitialiseTaskLists+0x70>)
 8027214:	f7fe f940 	bl	8025498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8027218:	480b      	ldr	r0, [pc, #44]	; (8027248 <prvInitialiseTaskLists+0x74>)
 802721a:	f7fe f93d 	bl	8025498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802721e:	4b0b      	ldr	r3, [pc, #44]	; (802724c <prvInitialiseTaskLists+0x78>)
 8027220:	4a05      	ldr	r2, [pc, #20]	; (8027238 <prvInitialiseTaskLists+0x64>)
 8027222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8027224:	4b0a      	ldr	r3, [pc, #40]	; (8027250 <prvInitialiseTaskLists+0x7c>)
 8027226:	4a05      	ldr	r2, [pc, #20]	; (802723c <prvInitialiseTaskLists+0x68>)
 8027228:	601a      	str	r2, [r3, #0]
}
 802722a:	bf00      	nop
 802722c:	3708      	adds	r7, #8
 802722e:	46bd      	mov	sp, r7
 8027230:	bd80      	pop	{r7, pc}
 8027232:	bf00      	nop
 8027234:	24001aec 	.word	0x24001aec
 8027238:	24001f4c 	.word	0x24001f4c
 802723c:	24001f60 	.word	0x24001f60
 8027240:	24001f7c 	.word	0x24001f7c
 8027244:	24001f90 	.word	0x24001f90
 8027248:	24001fa8 	.word	0x24001fa8
 802724c:	24001f74 	.word	0x24001f74
 8027250:	24001f78 	.word	0x24001f78

08027254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8027254:	b580      	push	{r7, lr}
 8027256:	b082      	sub	sp, #8
 8027258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802725a:	e019      	b.n	8027290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 802725c:	f001 f8ae 	bl	80283bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8027260:	4b0f      	ldr	r3, [pc, #60]	; (80272a0 <prvCheckTasksWaitingTermination+0x4c>)
 8027262:	68db      	ldr	r3, [r3, #12]
 8027264:	68db      	ldr	r3, [r3, #12]
 8027266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8027268:	687b      	ldr	r3, [r7, #4]
 802726a:	3304      	adds	r3, #4
 802726c:	4618      	mov	r0, r3
 802726e:	f7fe f99d 	bl	80255ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8027272:	4b0c      	ldr	r3, [pc, #48]	; (80272a4 <prvCheckTasksWaitingTermination+0x50>)
 8027274:	681b      	ldr	r3, [r3, #0]
 8027276:	3b01      	subs	r3, #1
 8027278:	4a0a      	ldr	r2, [pc, #40]	; (80272a4 <prvCheckTasksWaitingTermination+0x50>)
 802727a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802727c:	4b0a      	ldr	r3, [pc, #40]	; (80272a8 <prvCheckTasksWaitingTermination+0x54>)
 802727e:	681b      	ldr	r3, [r3, #0]
 8027280:	3b01      	subs	r3, #1
 8027282:	4a09      	ldr	r2, [pc, #36]	; (80272a8 <prvCheckTasksWaitingTermination+0x54>)
 8027284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8027286:	f001 f8c7 	bl	8028418 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802728a:	6878      	ldr	r0, [r7, #4]
 802728c:	f000 f80e 	bl	80272ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8027290:	4b05      	ldr	r3, [pc, #20]	; (80272a8 <prvCheckTasksWaitingTermination+0x54>)
 8027292:	681b      	ldr	r3, [r3, #0]
 8027294:	2b00      	cmp	r3, #0
 8027296:	d1e1      	bne.n	802725c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8027298:	bf00      	nop
 802729a:	3708      	adds	r7, #8
 802729c:	46bd      	mov	sp, r7
 802729e:	bd80      	pop	{r7, pc}
 80272a0:	24001f90 	.word	0x24001f90
 80272a4:	24001fbc 	.word	0x24001fbc
 80272a8:	24001fa4 	.word	0x24001fa4

080272ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80272ac:	b580      	push	{r7, lr}
 80272ae:	b084      	sub	sp, #16
 80272b0:	af00      	add	r7, sp, #0
 80272b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80272b4:	687b      	ldr	r3, [r7, #4]
 80272b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80272ba:	2b00      	cmp	r3, #0
 80272bc:	d108      	bne.n	80272d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80272be:	687b      	ldr	r3, [r7, #4]
 80272c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80272c2:	4618      	mov	r0, r3
 80272c4:	f001 fa56 	bl	8028774 <vPortFree>
				vPortFree( pxTCB );
 80272c8:	6878      	ldr	r0, [r7, #4]
 80272ca:	f001 fa53 	bl	8028774 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80272ce:	e017      	b.n	8027300 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80272d0:	687b      	ldr	r3, [r7, #4]
 80272d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80272d6:	2b01      	cmp	r3, #1
 80272d8:	d103      	bne.n	80272e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80272da:	6878      	ldr	r0, [r7, #4]
 80272dc:	f001 fa4a 	bl	8028774 <vPortFree>
	}
 80272e0:	e00e      	b.n	8027300 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80272e2:	687b      	ldr	r3, [r7, #4]
 80272e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80272e8:	2b02      	cmp	r3, #2
 80272ea:	d009      	beq.n	8027300 <prvDeleteTCB+0x54>
 80272ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80272f0:	f383 8811 	msr	BASEPRI, r3
 80272f4:	f3bf 8f6f 	isb	sy
 80272f8:	f3bf 8f4f 	dsb	sy
 80272fc:	60fb      	str	r3, [r7, #12]
 80272fe:	e7fe      	b.n	80272fe <prvDeleteTCB+0x52>
	}
 8027300:	bf00      	nop
 8027302:	3710      	adds	r7, #16
 8027304:	46bd      	mov	sp, r7
 8027306:	bd80      	pop	{r7, pc}

08027308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8027308:	b480      	push	{r7}
 802730a:	b083      	sub	sp, #12
 802730c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802730e:	4b0c      	ldr	r3, [pc, #48]	; (8027340 <prvResetNextTaskUnblockTime+0x38>)
 8027310:	681b      	ldr	r3, [r3, #0]
 8027312:	681b      	ldr	r3, [r3, #0]
 8027314:	2b00      	cmp	r3, #0
 8027316:	d104      	bne.n	8027322 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8027318:	4b0a      	ldr	r3, [pc, #40]	; (8027344 <prvResetNextTaskUnblockTime+0x3c>)
 802731a:	f04f 32ff 	mov.w	r2, #4294967295
 802731e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8027320:	e008      	b.n	8027334 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8027322:	4b07      	ldr	r3, [pc, #28]	; (8027340 <prvResetNextTaskUnblockTime+0x38>)
 8027324:	681b      	ldr	r3, [r3, #0]
 8027326:	68db      	ldr	r3, [r3, #12]
 8027328:	68db      	ldr	r3, [r3, #12]
 802732a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802732c:	687b      	ldr	r3, [r7, #4]
 802732e:	685b      	ldr	r3, [r3, #4]
 8027330:	4a04      	ldr	r2, [pc, #16]	; (8027344 <prvResetNextTaskUnblockTime+0x3c>)
 8027332:	6013      	str	r3, [r2, #0]
}
 8027334:	bf00      	nop
 8027336:	370c      	adds	r7, #12
 8027338:	46bd      	mov	sp, r7
 802733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802733e:	4770      	bx	lr
 8027340:	24001f74 	.word	0x24001f74
 8027344:	24001fdc 	.word	0x24001fdc

08027348 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8027348:	b480      	push	{r7}
 802734a:	b083      	sub	sp, #12
 802734c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 802734e:	4b05      	ldr	r3, [pc, #20]	; (8027364 <xTaskGetCurrentTaskHandle+0x1c>)
 8027350:	681b      	ldr	r3, [r3, #0]
 8027352:	607b      	str	r3, [r7, #4]

		return xReturn;
 8027354:	687b      	ldr	r3, [r7, #4]
	}
 8027356:	4618      	mov	r0, r3
 8027358:	370c      	adds	r7, #12
 802735a:	46bd      	mov	sp, r7
 802735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027360:	4770      	bx	lr
 8027362:	bf00      	nop
 8027364:	24001ae8 	.word	0x24001ae8

08027368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8027368:	b480      	push	{r7}
 802736a:	b083      	sub	sp, #12
 802736c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802736e:	4b0b      	ldr	r3, [pc, #44]	; (802739c <xTaskGetSchedulerState+0x34>)
 8027370:	681b      	ldr	r3, [r3, #0]
 8027372:	2b00      	cmp	r3, #0
 8027374:	d102      	bne.n	802737c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8027376:	2301      	movs	r3, #1
 8027378:	607b      	str	r3, [r7, #4]
 802737a:	e008      	b.n	802738e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802737c:	4b08      	ldr	r3, [pc, #32]	; (80273a0 <xTaskGetSchedulerState+0x38>)
 802737e:	681b      	ldr	r3, [r3, #0]
 8027380:	2b00      	cmp	r3, #0
 8027382:	d102      	bne.n	802738a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8027384:	2302      	movs	r3, #2
 8027386:	607b      	str	r3, [r7, #4]
 8027388:	e001      	b.n	802738e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802738a:	2300      	movs	r3, #0
 802738c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802738e:	687b      	ldr	r3, [r7, #4]
	}
 8027390:	4618      	mov	r0, r3
 8027392:	370c      	adds	r7, #12
 8027394:	46bd      	mov	sp, r7
 8027396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802739a:	4770      	bx	lr
 802739c:	24001fc8 	.word	0x24001fc8
 80273a0:	24001fe4 	.word	0x24001fe4

080273a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80273a4:	b580      	push	{r7, lr}
 80273a6:	b084      	sub	sp, #16
 80273a8:	af00      	add	r7, sp, #0
 80273aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80273ac:	687b      	ldr	r3, [r7, #4]
 80273ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80273b0:	2300      	movs	r3, #0
 80273b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80273b4:	687b      	ldr	r3, [r7, #4]
 80273b6:	2b00      	cmp	r3, #0
 80273b8:	d051      	beq.n	802745e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80273ba:	68bb      	ldr	r3, [r7, #8]
 80273bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80273be:	4b2a      	ldr	r3, [pc, #168]	; (8027468 <xTaskPriorityInherit+0xc4>)
 80273c0:	681b      	ldr	r3, [r3, #0]
 80273c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273c4:	429a      	cmp	r2, r3
 80273c6:	d241      	bcs.n	802744c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80273c8:	68bb      	ldr	r3, [r7, #8]
 80273ca:	699b      	ldr	r3, [r3, #24]
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	db06      	blt.n	80273de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80273d0:	4b25      	ldr	r3, [pc, #148]	; (8027468 <xTaskPriorityInherit+0xc4>)
 80273d2:	681b      	ldr	r3, [r3, #0]
 80273d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80273da:	68bb      	ldr	r3, [r7, #8]
 80273dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80273de:	68bb      	ldr	r3, [r7, #8]
 80273e0:	6959      	ldr	r1, [r3, #20]
 80273e2:	68bb      	ldr	r3, [r7, #8]
 80273e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80273e6:	4613      	mov	r3, r2
 80273e8:	009b      	lsls	r3, r3, #2
 80273ea:	4413      	add	r3, r2
 80273ec:	009b      	lsls	r3, r3, #2
 80273ee:	4a1f      	ldr	r2, [pc, #124]	; (802746c <xTaskPriorityInherit+0xc8>)
 80273f0:	4413      	add	r3, r2
 80273f2:	4299      	cmp	r1, r3
 80273f4:	d122      	bne.n	802743c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80273f6:	68bb      	ldr	r3, [r7, #8]
 80273f8:	3304      	adds	r3, #4
 80273fa:	4618      	mov	r0, r3
 80273fc:	f7fe f8d6 	bl	80255ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8027400:	4b19      	ldr	r3, [pc, #100]	; (8027468 <xTaskPriorityInherit+0xc4>)
 8027402:	681b      	ldr	r3, [r3, #0]
 8027404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027406:	68bb      	ldr	r3, [r7, #8]
 8027408:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 802740a:	68bb      	ldr	r3, [r7, #8]
 802740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802740e:	4b18      	ldr	r3, [pc, #96]	; (8027470 <xTaskPriorityInherit+0xcc>)
 8027410:	681b      	ldr	r3, [r3, #0]
 8027412:	429a      	cmp	r2, r3
 8027414:	d903      	bls.n	802741e <xTaskPriorityInherit+0x7a>
 8027416:	68bb      	ldr	r3, [r7, #8]
 8027418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802741a:	4a15      	ldr	r2, [pc, #84]	; (8027470 <xTaskPriorityInherit+0xcc>)
 802741c:	6013      	str	r3, [r2, #0]
 802741e:	68bb      	ldr	r3, [r7, #8]
 8027420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027422:	4613      	mov	r3, r2
 8027424:	009b      	lsls	r3, r3, #2
 8027426:	4413      	add	r3, r2
 8027428:	009b      	lsls	r3, r3, #2
 802742a:	4a10      	ldr	r2, [pc, #64]	; (802746c <xTaskPriorityInherit+0xc8>)
 802742c:	441a      	add	r2, r3
 802742e:	68bb      	ldr	r3, [r7, #8]
 8027430:	3304      	adds	r3, #4
 8027432:	4619      	mov	r1, r3
 8027434:	4610      	mov	r0, r2
 8027436:	f7fe f85c 	bl	80254f2 <vListInsertEnd>
 802743a:	e004      	b.n	8027446 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 802743c:	4b0a      	ldr	r3, [pc, #40]	; (8027468 <xTaskPriorityInherit+0xc4>)
 802743e:	681b      	ldr	r3, [r3, #0]
 8027440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027442:	68bb      	ldr	r3, [r7, #8]
 8027444:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8027446:	2301      	movs	r3, #1
 8027448:	60fb      	str	r3, [r7, #12]
 802744a:	e008      	b.n	802745e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 802744c:	68bb      	ldr	r3, [r7, #8]
 802744e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8027450:	4b05      	ldr	r3, [pc, #20]	; (8027468 <xTaskPriorityInherit+0xc4>)
 8027452:	681b      	ldr	r3, [r3, #0]
 8027454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027456:	429a      	cmp	r2, r3
 8027458:	d201      	bcs.n	802745e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 802745a:	2301      	movs	r3, #1
 802745c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802745e:	68fb      	ldr	r3, [r7, #12]
	}
 8027460:	4618      	mov	r0, r3
 8027462:	3710      	adds	r7, #16
 8027464:	46bd      	mov	sp, r7
 8027466:	bd80      	pop	{r7, pc}
 8027468:	24001ae8 	.word	0x24001ae8
 802746c:	24001aec 	.word	0x24001aec
 8027470:	24001fc4 	.word	0x24001fc4

08027474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8027474:	b580      	push	{r7, lr}
 8027476:	b086      	sub	sp, #24
 8027478:	af00      	add	r7, sp, #0
 802747a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 802747c:	687b      	ldr	r3, [r7, #4]
 802747e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8027480:	2300      	movs	r3, #0
 8027482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8027484:	687b      	ldr	r3, [r7, #4]
 8027486:	2b00      	cmp	r3, #0
 8027488:	d054      	beq.n	8027534 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 802748a:	4b2d      	ldr	r3, [pc, #180]	; (8027540 <xTaskPriorityDisinherit+0xcc>)
 802748c:	681b      	ldr	r3, [r3, #0]
 802748e:	693a      	ldr	r2, [r7, #16]
 8027490:	429a      	cmp	r2, r3
 8027492:	d009      	beq.n	80274a8 <xTaskPriorityDisinherit+0x34>
 8027494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027498:	f383 8811 	msr	BASEPRI, r3
 802749c:	f3bf 8f6f 	isb	sy
 80274a0:	f3bf 8f4f 	dsb	sy
 80274a4:	60fb      	str	r3, [r7, #12]
 80274a6:	e7fe      	b.n	80274a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80274a8:	693b      	ldr	r3, [r7, #16]
 80274aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80274ac:	2b00      	cmp	r3, #0
 80274ae:	d109      	bne.n	80274c4 <xTaskPriorityDisinherit+0x50>
 80274b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80274b4:	f383 8811 	msr	BASEPRI, r3
 80274b8:	f3bf 8f6f 	isb	sy
 80274bc:	f3bf 8f4f 	dsb	sy
 80274c0:	60bb      	str	r3, [r7, #8]
 80274c2:	e7fe      	b.n	80274c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80274c4:	693b      	ldr	r3, [r7, #16]
 80274c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80274c8:	1e5a      	subs	r2, r3, #1
 80274ca:	693b      	ldr	r3, [r7, #16]
 80274cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80274ce:	693b      	ldr	r3, [r7, #16]
 80274d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80274d2:	693b      	ldr	r3, [r7, #16]
 80274d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80274d6:	429a      	cmp	r2, r3
 80274d8:	d02c      	beq.n	8027534 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80274da:	693b      	ldr	r3, [r7, #16]
 80274dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80274de:	2b00      	cmp	r3, #0
 80274e0:	d128      	bne.n	8027534 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80274e2:	693b      	ldr	r3, [r7, #16]
 80274e4:	3304      	adds	r3, #4
 80274e6:	4618      	mov	r0, r3
 80274e8:	f7fe f860 	bl	80255ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80274ec:	693b      	ldr	r3, [r7, #16]
 80274ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80274f0:	693b      	ldr	r3, [r7, #16]
 80274f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80274f4:	693b      	ldr	r3, [r7, #16]
 80274f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80274fc:	693b      	ldr	r3, [r7, #16]
 80274fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8027500:	693b      	ldr	r3, [r7, #16]
 8027502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027504:	4b0f      	ldr	r3, [pc, #60]	; (8027544 <xTaskPriorityDisinherit+0xd0>)
 8027506:	681b      	ldr	r3, [r3, #0]
 8027508:	429a      	cmp	r2, r3
 802750a:	d903      	bls.n	8027514 <xTaskPriorityDisinherit+0xa0>
 802750c:	693b      	ldr	r3, [r7, #16]
 802750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027510:	4a0c      	ldr	r2, [pc, #48]	; (8027544 <xTaskPriorityDisinherit+0xd0>)
 8027512:	6013      	str	r3, [r2, #0]
 8027514:	693b      	ldr	r3, [r7, #16]
 8027516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027518:	4613      	mov	r3, r2
 802751a:	009b      	lsls	r3, r3, #2
 802751c:	4413      	add	r3, r2
 802751e:	009b      	lsls	r3, r3, #2
 8027520:	4a09      	ldr	r2, [pc, #36]	; (8027548 <xTaskPriorityDisinherit+0xd4>)
 8027522:	441a      	add	r2, r3
 8027524:	693b      	ldr	r3, [r7, #16]
 8027526:	3304      	adds	r3, #4
 8027528:	4619      	mov	r1, r3
 802752a:	4610      	mov	r0, r2
 802752c:	f7fd ffe1 	bl	80254f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8027530:	2301      	movs	r3, #1
 8027532:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8027534:	697b      	ldr	r3, [r7, #20]
	}
 8027536:	4618      	mov	r0, r3
 8027538:	3718      	adds	r7, #24
 802753a:	46bd      	mov	sp, r7
 802753c:	bd80      	pop	{r7, pc}
 802753e:	bf00      	nop
 8027540:	24001ae8 	.word	0x24001ae8
 8027544:	24001fc4 	.word	0x24001fc4
 8027548:	24001aec 	.word	0x24001aec

0802754c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 802754c:	b580      	push	{r7, lr}
 802754e:	b088      	sub	sp, #32
 8027550:	af00      	add	r7, sp, #0
 8027552:	6078      	str	r0, [r7, #4]
 8027554:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8027556:	687b      	ldr	r3, [r7, #4]
 8027558:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 802755a:	2301      	movs	r3, #1
 802755c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802755e:	687b      	ldr	r3, [r7, #4]
 8027560:	2b00      	cmp	r3, #0
 8027562:	d068      	beq.n	8027636 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8027564:	69bb      	ldr	r3, [r7, #24]
 8027566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027568:	2b00      	cmp	r3, #0
 802756a:	d109      	bne.n	8027580 <vTaskPriorityDisinheritAfterTimeout+0x34>
 802756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027570:	f383 8811 	msr	BASEPRI, r3
 8027574:	f3bf 8f6f 	isb	sy
 8027578:	f3bf 8f4f 	dsb	sy
 802757c:	60fb      	str	r3, [r7, #12]
 802757e:	e7fe      	b.n	802757e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8027580:	69bb      	ldr	r3, [r7, #24]
 8027582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027584:	683a      	ldr	r2, [r7, #0]
 8027586:	429a      	cmp	r2, r3
 8027588:	d902      	bls.n	8027590 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 802758a:	683b      	ldr	r3, [r7, #0]
 802758c:	61fb      	str	r3, [r7, #28]
 802758e:	e002      	b.n	8027596 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8027590:	69bb      	ldr	r3, [r7, #24]
 8027592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027594:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8027596:	69bb      	ldr	r3, [r7, #24]
 8027598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802759a:	69fa      	ldr	r2, [r7, #28]
 802759c:	429a      	cmp	r2, r3
 802759e:	d04a      	beq.n	8027636 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80275a0:	69bb      	ldr	r3, [r7, #24]
 80275a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80275a4:	697a      	ldr	r2, [r7, #20]
 80275a6:	429a      	cmp	r2, r3
 80275a8:	d145      	bne.n	8027636 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80275aa:	4b25      	ldr	r3, [pc, #148]	; (8027640 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80275ac:	681b      	ldr	r3, [r3, #0]
 80275ae:	69ba      	ldr	r2, [r7, #24]
 80275b0:	429a      	cmp	r2, r3
 80275b2:	d109      	bne.n	80275c8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80275b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80275b8:	f383 8811 	msr	BASEPRI, r3
 80275bc:	f3bf 8f6f 	isb	sy
 80275c0:	f3bf 8f4f 	dsb	sy
 80275c4:	60bb      	str	r3, [r7, #8]
 80275c6:	e7fe      	b.n	80275c6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80275c8:	69bb      	ldr	r3, [r7, #24]
 80275ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80275cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80275ce:	69bb      	ldr	r3, [r7, #24]
 80275d0:	69fa      	ldr	r2, [r7, #28]
 80275d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80275d4:	69bb      	ldr	r3, [r7, #24]
 80275d6:	699b      	ldr	r3, [r3, #24]
 80275d8:	2b00      	cmp	r3, #0
 80275da:	db04      	blt.n	80275e6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80275dc:	69fb      	ldr	r3, [r7, #28]
 80275de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80275e2:	69bb      	ldr	r3, [r7, #24]
 80275e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80275e6:	69bb      	ldr	r3, [r7, #24]
 80275e8:	6959      	ldr	r1, [r3, #20]
 80275ea:	693a      	ldr	r2, [r7, #16]
 80275ec:	4613      	mov	r3, r2
 80275ee:	009b      	lsls	r3, r3, #2
 80275f0:	4413      	add	r3, r2
 80275f2:	009b      	lsls	r3, r3, #2
 80275f4:	4a13      	ldr	r2, [pc, #76]	; (8027644 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80275f6:	4413      	add	r3, r2
 80275f8:	4299      	cmp	r1, r3
 80275fa:	d11c      	bne.n	8027636 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80275fc:	69bb      	ldr	r3, [r7, #24]
 80275fe:	3304      	adds	r3, #4
 8027600:	4618      	mov	r0, r3
 8027602:	f7fd ffd3 	bl	80255ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8027606:	69bb      	ldr	r3, [r7, #24]
 8027608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802760a:	4b0f      	ldr	r3, [pc, #60]	; (8027648 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 802760c:	681b      	ldr	r3, [r3, #0]
 802760e:	429a      	cmp	r2, r3
 8027610:	d903      	bls.n	802761a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8027612:	69bb      	ldr	r3, [r7, #24]
 8027614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027616:	4a0c      	ldr	r2, [pc, #48]	; (8027648 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8027618:	6013      	str	r3, [r2, #0]
 802761a:	69bb      	ldr	r3, [r7, #24]
 802761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802761e:	4613      	mov	r3, r2
 8027620:	009b      	lsls	r3, r3, #2
 8027622:	4413      	add	r3, r2
 8027624:	009b      	lsls	r3, r3, #2
 8027626:	4a07      	ldr	r2, [pc, #28]	; (8027644 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8027628:	441a      	add	r2, r3
 802762a:	69bb      	ldr	r3, [r7, #24]
 802762c:	3304      	adds	r3, #4
 802762e:	4619      	mov	r1, r3
 8027630:	4610      	mov	r0, r2
 8027632:	f7fd ff5e 	bl	80254f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8027636:	bf00      	nop
 8027638:	3720      	adds	r7, #32
 802763a:	46bd      	mov	sp, r7
 802763c:	bd80      	pop	{r7, pc}
 802763e:	bf00      	nop
 8027640:	24001ae8 	.word	0x24001ae8
 8027644:	24001aec 	.word	0x24001aec
 8027648:	24001fc4 	.word	0x24001fc4

0802764c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 802764c:	b480      	push	{r7}
 802764e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8027650:	4b07      	ldr	r3, [pc, #28]	; (8027670 <pvTaskIncrementMutexHeldCount+0x24>)
 8027652:	681b      	ldr	r3, [r3, #0]
 8027654:	2b00      	cmp	r3, #0
 8027656:	d004      	beq.n	8027662 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8027658:	4b05      	ldr	r3, [pc, #20]	; (8027670 <pvTaskIncrementMutexHeldCount+0x24>)
 802765a:	681b      	ldr	r3, [r3, #0]
 802765c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802765e:	3201      	adds	r2, #1
 8027660:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8027662:	4b03      	ldr	r3, [pc, #12]	; (8027670 <pvTaskIncrementMutexHeldCount+0x24>)
 8027664:	681b      	ldr	r3, [r3, #0]
	}
 8027666:	4618      	mov	r0, r3
 8027668:	46bd      	mov	sp, r7
 802766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802766e:	4770      	bx	lr
 8027670:	24001ae8 	.word	0x24001ae8

08027674 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8027674:	b580      	push	{r7, lr}
 8027676:	b086      	sub	sp, #24
 8027678:	af00      	add	r7, sp, #0
 802767a:	60f8      	str	r0, [r7, #12]
 802767c:	60b9      	str	r1, [r7, #8]
 802767e:	607a      	str	r2, [r7, #4]
 8027680:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8027682:	f000 fe9b 	bl	80283bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8027686:	4b26      	ldr	r3, [pc, #152]	; (8027720 <xTaskNotifyWait+0xac>)
 8027688:	681b      	ldr	r3, [r3, #0]
 802768a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 802768e:	b2db      	uxtb	r3, r3
 8027690:	2b02      	cmp	r3, #2
 8027692:	d01a      	beq.n	80276ca <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8027694:	4b22      	ldr	r3, [pc, #136]	; (8027720 <xTaskNotifyWait+0xac>)
 8027696:	681b      	ldr	r3, [r3, #0]
 8027698:	6d59      	ldr	r1, [r3, #84]	; 0x54
 802769a:	68fa      	ldr	r2, [r7, #12]
 802769c:	43d2      	mvns	r2, r2
 802769e:	400a      	ands	r2, r1
 80276a0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80276a2:	4b1f      	ldr	r3, [pc, #124]	; (8027720 <xTaskNotifyWait+0xac>)
 80276a4:	681b      	ldr	r3, [r3, #0]
 80276a6:	2201      	movs	r2, #1
 80276a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80276ac:	683b      	ldr	r3, [r7, #0]
 80276ae:	2b00      	cmp	r3, #0
 80276b0:	d00b      	beq.n	80276ca <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80276b2:	2101      	movs	r1, #1
 80276b4:	6838      	ldr	r0, [r7, #0]
 80276b6:	f000 f9c3 	bl	8027a40 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80276ba:	4b1a      	ldr	r3, [pc, #104]	; (8027724 <xTaskNotifyWait+0xb0>)
 80276bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80276c0:	601a      	str	r2, [r3, #0]
 80276c2:	f3bf 8f4f 	dsb	sy
 80276c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80276ca:	f000 fea5 	bl	8028418 <vPortExitCritical>

		taskENTER_CRITICAL();
 80276ce:	f000 fe75 	bl	80283bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80276d2:	687b      	ldr	r3, [r7, #4]
 80276d4:	2b00      	cmp	r3, #0
 80276d6:	d004      	beq.n	80276e2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80276d8:	4b11      	ldr	r3, [pc, #68]	; (8027720 <xTaskNotifyWait+0xac>)
 80276da:	681b      	ldr	r3, [r3, #0]
 80276dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80276de:	687b      	ldr	r3, [r7, #4]
 80276e0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80276e2:	4b0f      	ldr	r3, [pc, #60]	; (8027720 <xTaskNotifyWait+0xac>)
 80276e4:	681b      	ldr	r3, [r3, #0]
 80276e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80276ea:	b2db      	uxtb	r3, r3
 80276ec:	2b02      	cmp	r3, #2
 80276ee:	d002      	beq.n	80276f6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80276f0:	2300      	movs	r3, #0
 80276f2:	617b      	str	r3, [r7, #20]
 80276f4:	e008      	b.n	8027708 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80276f6:	4b0a      	ldr	r3, [pc, #40]	; (8027720 <xTaskNotifyWait+0xac>)
 80276f8:	681b      	ldr	r3, [r3, #0]
 80276fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80276fc:	68ba      	ldr	r2, [r7, #8]
 80276fe:	43d2      	mvns	r2, r2
 8027700:	400a      	ands	r2, r1
 8027702:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8027704:	2301      	movs	r3, #1
 8027706:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8027708:	4b05      	ldr	r3, [pc, #20]	; (8027720 <xTaskNotifyWait+0xac>)
 802770a:	681b      	ldr	r3, [r3, #0]
 802770c:	2200      	movs	r2, #0
 802770e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8027712:	f000 fe81 	bl	8028418 <vPortExitCritical>

		return xReturn;
 8027716:	697b      	ldr	r3, [r7, #20]
	}
 8027718:	4618      	mov	r0, r3
 802771a:	3718      	adds	r7, #24
 802771c:	46bd      	mov	sp, r7
 802771e:	bd80      	pop	{r7, pc}
 8027720:	24001ae8 	.word	0x24001ae8
 8027724:	e000ed04 	.word	0xe000ed04

08027728 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8027728:	b580      	push	{r7, lr}
 802772a:	b08a      	sub	sp, #40	; 0x28
 802772c:	af00      	add	r7, sp, #0
 802772e:	60f8      	str	r0, [r7, #12]
 8027730:	60b9      	str	r1, [r7, #8]
 8027732:	603b      	str	r3, [r7, #0]
 8027734:	4613      	mov	r3, r2
 8027736:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8027738:	2301      	movs	r3, #1
 802773a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 802773c:	68fb      	ldr	r3, [r7, #12]
 802773e:	2b00      	cmp	r3, #0
 8027740:	d109      	bne.n	8027756 <xTaskGenericNotify+0x2e>
 8027742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027746:	f383 8811 	msr	BASEPRI, r3
 802774a:	f3bf 8f6f 	isb	sy
 802774e:	f3bf 8f4f 	dsb	sy
 8027752:	61bb      	str	r3, [r7, #24]
 8027754:	e7fe      	b.n	8027754 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8027756:	68fb      	ldr	r3, [r7, #12]
 8027758:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 802775a:	f000 fe2f 	bl	80283bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 802775e:	683b      	ldr	r3, [r7, #0]
 8027760:	2b00      	cmp	r3, #0
 8027762:	d003      	beq.n	802776c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8027764:	6a3b      	ldr	r3, [r7, #32]
 8027766:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8027768:	683b      	ldr	r3, [r7, #0]
 802776a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 802776c:	6a3b      	ldr	r3, [r7, #32]
 802776e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8027772:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8027774:	6a3b      	ldr	r3, [r7, #32]
 8027776:	2202      	movs	r2, #2
 8027778:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 802777c:	79fb      	ldrb	r3, [r7, #7]
 802777e:	2b04      	cmp	r3, #4
 8027780:	d827      	bhi.n	80277d2 <xTaskGenericNotify+0xaa>
 8027782:	a201      	add	r2, pc, #4	; (adr r2, 8027788 <xTaskGenericNotify+0x60>)
 8027784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027788:	080277f1 	.word	0x080277f1
 802778c:	0802779d 	.word	0x0802779d
 8027790:	080277ab 	.word	0x080277ab
 8027794:	080277b7 	.word	0x080277b7
 8027798:	080277bf 	.word	0x080277bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 802779c:	6a3b      	ldr	r3, [r7, #32]
 802779e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80277a0:	68bb      	ldr	r3, [r7, #8]
 80277a2:	431a      	orrs	r2, r3
 80277a4:	6a3b      	ldr	r3, [r7, #32]
 80277a6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80277a8:	e025      	b.n	80277f6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80277aa:	6a3b      	ldr	r3, [r7, #32]
 80277ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80277ae:	1c5a      	adds	r2, r3, #1
 80277b0:	6a3b      	ldr	r3, [r7, #32]
 80277b2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80277b4:	e01f      	b.n	80277f6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80277b6:	6a3b      	ldr	r3, [r7, #32]
 80277b8:	68ba      	ldr	r2, [r7, #8]
 80277ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80277bc:	e01b      	b.n	80277f6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80277be:	7ffb      	ldrb	r3, [r7, #31]
 80277c0:	2b02      	cmp	r3, #2
 80277c2:	d003      	beq.n	80277cc <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80277c4:	6a3b      	ldr	r3, [r7, #32]
 80277c6:	68ba      	ldr	r2, [r7, #8]
 80277c8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80277ca:	e014      	b.n	80277f6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80277cc:	2300      	movs	r3, #0
 80277ce:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80277d0:	e011      	b.n	80277f6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80277d2:	6a3b      	ldr	r3, [r7, #32]
 80277d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80277d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80277da:	d00b      	beq.n	80277f4 <xTaskGenericNotify+0xcc>
 80277dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80277e0:	f383 8811 	msr	BASEPRI, r3
 80277e4:	f3bf 8f6f 	isb	sy
 80277e8:	f3bf 8f4f 	dsb	sy
 80277ec:	617b      	str	r3, [r7, #20]
 80277ee:	e7fe      	b.n	80277ee <xTaskGenericNotify+0xc6>
					break;
 80277f0:	bf00      	nop
 80277f2:	e000      	b.n	80277f6 <xTaskGenericNotify+0xce>

					break;
 80277f4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80277f6:	7ffb      	ldrb	r3, [r7, #31]
 80277f8:	2b01      	cmp	r3, #1
 80277fa:	d139      	bne.n	8027870 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80277fc:	6a3b      	ldr	r3, [r7, #32]
 80277fe:	3304      	adds	r3, #4
 8027800:	4618      	mov	r0, r3
 8027802:	f7fd fed3 	bl	80255ac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8027806:	6a3b      	ldr	r3, [r7, #32]
 8027808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802780a:	4b1d      	ldr	r3, [pc, #116]	; (8027880 <xTaskGenericNotify+0x158>)
 802780c:	681b      	ldr	r3, [r3, #0]
 802780e:	429a      	cmp	r2, r3
 8027810:	d903      	bls.n	802781a <xTaskGenericNotify+0xf2>
 8027812:	6a3b      	ldr	r3, [r7, #32]
 8027814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027816:	4a1a      	ldr	r2, [pc, #104]	; (8027880 <xTaskGenericNotify+0x158>)
 8027818:	6013      	str	r3, [r2, #0]
 802781a:	6a3b      	ldr	r3, [r7, #32]
 802781c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802781e:	4613      	mov	r3, r2
 8027820:	009b      	lsls	r3, r3, #2
 8027822:	4413      	add	r3, r2
 8027824:	009b      	lsls	r3, r3, #2
 8027826:	4a17      	ldr	r2, [pc, #92]	; (8027884 <xTaskGenericNotify+0x15c>)
 8027828:	441a      	add	r2, r3
 802782a:	6a3b      	ldr	r3, [r7, #32]
 802782c:	3304      	adds	r3, #4
 802782e:	4619      	mov	r1, r3
 8027830:	4610      	mov	r0, r2
 8027832:	f7fd fe5e 	bl	80254f2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8027836:	6a3b      	ldr	r3, [r7, #32]
 8027838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802783a:	2b00      	cmp	r3, #0
 802783c:	d009      	beq.n	8027852 <xTaskGenericNotify+0x12a>
 802783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027842:	f383 8811 	msr	BASEPRI, r3
 8027846:	f3bf 8f6f 	isb	sy
 802784a:	f3bf 8f4f 	dsb	sy
 802784e:	613b      	str	r3, [r7, #16]
 8027850:	e7fe      	b.n	8027850 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8027852:	6a3b      	ldr	r3, [r7, #32]
 8027854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027856:	4b0c      	ldr	r3, [pc, #48]	; (8027888 <xTaskGenericNotify+0x160>)
 8027858:	681b      	ldr	r3, [r3, #0]
 802785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802785c:	429a      	cmp	r2, r3
 802785e:	d907      	bls.n	8027870 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8027860:	4b0a      	ldr	r3, [pc, #40]	; (802788c <xTaskGenericNotify+0x164>)
 8027862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027866:	601a      	str	r2, [r3, #0]
 8027868:	f3bf 8f4f 	dsb	sy
 802786c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8027870:	f000 fdd2 	bl	8028418 <vPortExitCritical>

		return xReturn;
 8027874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8027876:	4618      	mov	r0, r3
 8027878:	3728      	adds	r7, #40	; 0x28
 802787a:	46bd      	mov	sp, r7
 802787c:	bd80      	pop	{r7, pc}
 802787e:	bf00      	nop
 8027880:	24001fc4 	.word	0x24001fc4
 8027884:	24001aec 	.word	0x24001aec
 8027888:	24001ae8 	.word	0x24001ae8
 802788c:	e000ed04 	.word	0xe000ed04

08027890 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8027890:	b580      	push	{r7, lr}
 8027892:	b08e      	sub	sp, #56	; 0x38
 8027894:	af00      	add	r7, sp, #0
 8027896:	60f8      	str	r0, [r7, #12]
 8027898:	60b9      	str	r1, [r7, #8]
 802789a:	603b      	str	r3, [r7, #0]
 802789c:	4613      	mov	r3, r2
 802789e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80278a0:	2301      	movs	r3, #1
 80278a2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80278a4:	68fb      	ldr	r3, [r7, #12]
 80278a6:	2b00      	cmp	r3, #0
 80278a8:	d109      	bne.n	80278be <xTaskGenericNotifyFromISR+0x2e>
 80278aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80278ae:	f383 8811 	msr	BASEPRI, r3
 80278b2:	f3bf 8f6f 	isb	sy
 80278b6:	f3bf 8f4f 	dsb	sy
 80278ba:	627b      	str	r3, [r7, #36]	; 0x24
 80278bc:	e7fe      	b.n	80278bc <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80278be:	f000 fe59 	bl	8028574 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80278c2:	68fb      	ldr	r3, [r7, #12]
 80278c4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80278c6:	f3ef 8211 	mrs	r2, BASEPRI
 80278ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80278ce:	f383 8811 	msr	BASEPRI, r3
 80278d2:	f3bf 8f6f 	isb	sy
 80278d6:	f3bf 8f4f 	dsb	sy
 80278da:	623a      	str	r2, [r7, #32]
 80278dc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80278de:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80278e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80278e2:	683b      	ldr	r3, [r7, #0]
 80278e4:	2b00      	cmp	r3, #0
 80278e6:	d003      	beq.n	80278f0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80278e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80278ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80278ec:	683b      	ldr	r3, [r7, #0]
 80278ee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80278f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80278f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80278f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80278fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80278fc:	2202      	movs	r2, #2
 80278fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8027902:	79fb      	ldrb	r3, [r7, #7]
 8027904:	2b04      	cmp	r3, #4
 8027906:	d829      	bhi.n	802795c <xTaskGenericNotifyFromISR+0xcc>
 8027908:	a201      	add	r2, pc, #4	; (adr r2, 8027910 <xTaskGenericNotifyFromISR+0x80>)
 802790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802790e:	bf00      	nop
 8027910:	0802797b 	.word	0x0802797b
 8027914:	08027925 	.word	0x08027925
 8027918:	08027933 	.word	0x08027933
 802791c:	0802793f 	.word	0x0802793f
 8027920:	08027947 	.word	0x08027947
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8027924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027926:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8027928:	68bb      	ldr	r3, [r7, #8]
 802792a:	431a      	orrs	r2, r3
 802792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802792e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8027930:	e026      	b.n	8027980 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8027932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027936:	1c5a      	adds	r2, r3, #1
 8027938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802793a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 802793c:	e020      	b.n	8027980 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 802793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027940:	68ba      	ldr	r2, [r7, #8]
 8027942:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8027944:	e01c      	b.n	8027980 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8027946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802794a:	2b02      	cmp	r3, #2
 802794c:	d003      	beq.n	8027956 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 802794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027950:	68ba      	ldr	r2, [r7, #8]
 8027952:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8027954:	e014      	b.n	8027980 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8027956:	2300      	movs	r3, #0
 8027958:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 802795a:	e011      	b.n	8027980 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 802795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802795e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027964:	d00b      	beq.n	802797e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8027966:	f04f 0350 	mov.w	r3, #80	; 0x50
 802796a:	f383 8811 	msr	BASEPRI, r3
 802796e:	f3bf 8f6f 	isb	sy
 8027972:	f3bf 8f4f 	dsb	sy
 8027976:	61bb      	str	r3, [r7, #24]
 8027978:	e7fe      	b.n	8027978 <xTaskGenericNotifyFromISR+0xe8>
					break;
 802797a:	bf00      	nop
 802797c:	e000      	b.n	8027980 <xTaskGenericNotifyFromISR+0xf0>
					break;
 802797e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8027980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8027984:	2b01      	cmp	r3, #1
 8027986:	d145      	bne.n	8027a14 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8027988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802798c:	2b00      	cmp	r3, #0
 802798e:	d009      	beq.n	80279a4 <xTaskGenericNotifyFromISR+0x114>
 8027990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027994:	f383 8811 	msr	BASEPRI, r3
 8027998:	f3bf 8f6f 	isb	sy
 802799c:	f3bf 8f4f 	dsb	sy
 80279a0:	617b      	str	r3, [r7, #20]
 80279a2:	e7fe      	b.n	80279a2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80279a4:	4b20      	ldr	r3, [pc, #128]	; (8027a28 <xTaskGenericNotifyFromISR+0x198>)
 80279a6:	681b      	ldr	r3, [r3, #0]
 80279a8:	2b00      	cmp	r3, #0
 80279aa:	d11d      	bne.n	80279e8 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80279ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80279ae:	3304      	adds	r3, #4
 80279b0:	4618      	mov	r0, r3
 80279b2:	f7fd fdfb 	bl	80255ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80279b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80279b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80279ba:	4b1c      	ldr	r3, [pc, #112]	; (8027a2c <xTaskGenericNotifyFromISR+0x19c>)
 80279bc:	681b      	ldr	r3, [r3, #0]
 80279be:	429a      	cmp	r2, r3
 80279c0:	d903      	bls.n	80279ca <xTaskGenericNotifyFromISR+0x13a>
 80279c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80279c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80279c6:	4a19      	ldr	r2, [pc, #100]	; (8027a2c <xTaskGenericNotifyFromISR+0x19c>)
 80279c8:	6013      	str	r3, [r2, #0]
 80279ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80279cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80279ce:	4613      	mov	r3, r2
 80279d0:	009b      	lsls	r3, r3, #2
 80279d2:	4413      	add	r3, r2
 80279d4:	009b      	lsls	r3, r3, #2
 80279d6:	4a16      	ldr	r2, [pc, #88]	; (8027a30 <xTaskGenericNotifyFromISR+0x1a0>)
 80279d8:	441a      	add	r2, r3
 80279da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80279dc:	3304      	adds	r3, #4
 80279de:	4619      	mov	r1, r3
 80279e0:	4610      	mov	r0, r2
 80279e2:	f7fd fd86 	bl	80254f2 <vListInsertEnd>
 80279e6:	e005      	b.n	80279f4 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80279e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80279ea:	3318      	adds	r3, #24
 80279ec:	4619      	mov	r1, r3
 80279ee:	4811      	ldr	r0, [pc, #68]	; (8027a34 <xTaskGenericNotifyFromISR+0x1a4>)
 80279f0:	f7fd fd7f 	bl	80254f2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80279f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80279f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80279f8:	4b0f      	ldr	r3, [pc, #60]	; (8027a38 <xTaskGenericNotifyFromISR+0x1a8>)
 80279fa:	681b      	ldr	r3, [r3, #0]
 80279fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80279fe:	429a      	cmp	r2, r3
 8027a00:	d908      	bls.n	8027a14 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8027a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027a04:	2b00      	cmp	r3, #0
 8027a06:	d002      	beq.n	8027a0e <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8027a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027a0a:	2201      	movs	r2, #1
 8027a0c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8027a0e:	4b0b      	ldr	r3, [pc, #44]	; (8027a3c <xTaskGenericNotifyFromISR+0x1ac>)
 8027a10:	2201      	movs	r2, #1
 8027a12:	601a      	str	r2, [r3, #0]
 8027a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a16:	613b      	str	r3, [r7, #16]
	__asm volatile
 8027a18:	693b      	ldr	r3, [r7, #16]
 8027a1a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8027a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8027a20:	4618      	mov	r0, r3
 8027a22:	3738      	adds	r7, #56	; 0x38
 8027a24:	46bd      	mov	sp, r7
 8027a26:	bd80      	pop	{r7, pc}
 8027a28:	24001fe4 	.word	0x24001fe4
 8027a2c:	24001fc4 	.word	0x24001fc4
 8027a30:	24001aec 	.word	0x24001aec
 8027a34:	24001f7c 	.word	0x24001f7c
 8027a38:	24001ae8 	.word	0x24001ae8
 8027a3c:	24001fd0 	.word	0x24001fd0

08027a40 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8027a40:	b580      	push	{r7, lr}
 8027a42:	b084      	sub	sp, #16
 8027a44:	af00      	add	r7, sp, #0
 8027a46:	6078      	str	r0, [r7, #4]
 8027a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8027a4a:	4b21      	ldr	r3, [pc, #132]	; (8027ad0 <prvAddCurrentTaskToDelayedList+0x90>)
 8027a4c:	681b      	ldr	r3, [r3, #0]
 8027a4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8027a50:	4b20      	ldr	r3, [pc, #128]	; (8027ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8027a52:	681b      	ldr	r3, [r3, #0]
 8027a54:	3304      	adds	r3, #4
 8027a56:	4618      	mov	r0, r3
 8027a58:	f7fd fda8 	bl	80255ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8027a5c:	687b      	ldr	r3, [r7, #4]
 8027a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027a62:	d10a      	bne.n	8027a7a <prvAddCurrentTaskToDelayedList+0x3a>
 8027a64:	683b      	ldr	r3, [r7, #0]
 8027a66:	2b00      	cmp	r3, #0
 8027a68:	d007      	beq.n	8027a7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8027a6a:	4b1a      	ldr	r3, [pc, #104]	; (8027ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8027a6c:	681b      	ldr	r3, [r3, #0]
 8027a6e:	3304      	adds	r3, #4
 8027a70:	4619      	mov	r1, r3
 8027a72:	4819      	ldr	r0, [pc, #100]	; (8027ad8 <prvAddCurrentTaskToDelayedList+0x98>)
 8027a74:	f7fd fd3d 	bl	80254f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8027a78:	e026      	b.n	8027ac8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8027a7a:	68fa      	ldr	r2, [r7, #12]
 8027a7c:	687b      	ldr	r3, [r7, #4]
 8027a7e:	4413      	add	r3, r2
 8027a80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8027a82:	4b14      	ldr	r3, [pc, #80]	; (8027ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8027a84:	681b      	ldr	r3, [r3, #0]
 8027a86:	68ba      	ldr	r2, [r7, #8]
 8027a88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8027a8a:	68ba      	ldr	r2, [r7, #8]
 8027a8c:	68fb      	ldr	r3, [r7, #12]
 8027a8e:	429a      	cmp	r2, r3
 8027a90:	d209      	bcs.n	8027aa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8027a92:	4b12      	ldr	r3, [pc, #72]	; (8027adc <prvAddCurrentTaskToDelayedList+0x9c>)
 8027a94:	681a      	ldr	r2, [r3, #0]
 8027a96:	4b0f      	ldr	r3, [pc, #60]	; (8027ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8027a98:	681b      	ldr	r3, [r3, #0]
 8027a9a:	3304      	adds	r3, #4
 8027a9c:	4619      	mov	r1, r3
 8027a9e:	4610      	mov	r0, r2
 8027aa0:	f7fd fd4b 	bl	802553a <vListInsert>
}
 8027aa4:	e010      	b.n	8027ac8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8027aa6:	4b0e      	ldr	r3, [pc, #56]	; (8027ae0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8027aa8:	681a      	ldr	r2, [r3, #0]
 8027aaa:	4b0a      	ldr	r3, [pc, #40]	; (8027ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8027aac:	681b      	ldr	r3, [r3, #0]
 8027aae:	3304      	adds	r3, #4
 8027ab0:	4619      	mov	r1, r3
 8027ab2:	4610      	mov	r0, r2
 8027ab4:	f7fd fd41 	bl	802553a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8027ab8:	4b0a      	ldr	r3, [pc, #40]	; (8027ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8027aba:	681b      	ldr	r3, [r3, #0]
 8027abc:	68ba      	ldr	r2, [r7, #8]
 8027abe:	429a      	cmp	r2, r3
 8027ac0:	d202      	bcs.n	8027ac8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8027ac2:	4a08      	ldr	r2, [pc, #32]	; (8027ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8027ac4:	68bb      	ldr	r3, [r7, #8]
 8027ac6:	6013      	str	r3, [r2, #0]
}
 8027ac8:	bf00      	nop
 8027aca:	3710      	adds	r7, #16
 8027acc:	46bd      	mov	sp, r7
 8027ace:	bd80      	pop	{r7, pc}
 8027ad0:	24001fc0 	.word	0x24001fc0
 8027ad4:	24001ae8 	.word	0x24001ae8
 8027ad8:	24001fa8 	.word	0x24001fa8
 8027adc:	24001f78 	.word	0x24001f78
 8027ae0:	24001f74 	.word	0x24001f74
 8027ae4:	24001fdc 	.word	0x24001fdc

08027ae8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8027ae8:	b580      	push	{r7, lr}
 8027aea:	b08a      	sub	sp, #40	; 0x28
 8027aec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8027aee:	2300      	movs	r3, #0
 8027af0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8027af2:	f000 faff 	bl	80280f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8027af6:	4b1c      	ldr	r3, [pc, #112]	; (8027b68 <xTimerCreateTimerTask+0x80>)
 8027af8:	681b      	ldr	r3, [r3, #0]
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	d021      	beq.n	8027b42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8027afe:	2300      	movs	r3, #0
 8027b00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8027b02:	2300      	movs	r3, #0
 8027b04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8027b06:	1d3a      	adds	r2, r7, #4
 8027b08:	f107 0108 	add.w	r1, r7, #8
 8027b0c:	f107 030c 	add.w	r3, r7, #12
 8027b10:	4618      	mov	r0, r3
 8027b12:	f7fd fca7 	bl	8025464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8027b16:	6879      	ldr	r1, [r7, #4]
 8027b18:	68bb      	ldr	r3, [r7, #8]
 8027b1a:	68fa      	ldr	r2, [r7, #12]
 8027b1c:	9202      	str	r2, [sp, #8]
 8027b1e:	9301      	str	r3, [sp, #4]
 8027b20:	2302      	movs	r3, #2
 8027b22:	9300      	str	r3, [sp, #0]
 8027b24:	2300      	movs	r3, #0
 8027b26:	460a      	mov	r2, r1
 8027b28:	4910      	ldr	r1, [pc, #64]	; (8027b6c <xTimerCreateTimerTask+0x84>)
 8027b2a:	4811      	ldr	r0, [pc, #68]	; (8027b70 <xTimerCreateTimerTask+0x88>)
 8027b2c:	f7fe fd78 	bl	8026620 <xTaskCreateStatic>
 8027b30:	4602      	mov	r2, r0
 8027b32:	4b10      	ldr	r3, [pc, #64]	; (8027b74 <xTimerCreateTimerTask+0x8c>)
 8027b34:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8027b36:	4b0f      	ldr	r3, [pc, #60]	; (8027b74 <xTimerCreateTimerTask+0x8c>)
 8027b38:	681b      	ldr	r3, [r3, #0]
 8027b3a:	2b00      	cmp	r3, #0
 8027b3c:	d001      	beq.n	8027b42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8027b3e:	2301      	movs	r3, #1
 8027b40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8027b42:	697b      	ldr	r3, [r7, #20]
 8027b44:	2b00      	cmp	r3, #0
 8027b46:	d109      	bne.n	8027b5c <xTimerCreateTimerTask+0x74>
	__asm volatile
 8027b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027b4c:	f383 8811 	msr	BASEPRI, r3
 8027b50:	f3bf 8f6f 	isb	sy
 8027b54:	f3bf 8f4f 	dsb	sy
 8027b58:	613b      	str	r3, [r7, #16]
 8027b5a:	e7fe      	b.n	8027b5a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8027b5c:	697b      	ldr	r3, [r7, #20]
}
 8027b5e:	4618      	mov	r0, r3
 8027b60:	3718      	adds	r7, #24
 8027b62:	46bd      	mov	sp, r7
 8027b64:	bd80      	pop	{r7, pc}
 8027b66:	bf00      	nop
 8027b68:	24002018 	.word	0x24002018
 8027b6c:	0802cd24 	.word	0x0802cd24
 8027b70:	08027ca9 	.word	0x08027ca9
 8027b74:	2400201c 	.word	0x2400201c

08027b78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8027b78:	b580      	push	{r7, lr}
 8027b7a:	b08a      	sub	sp, #40	; 0x28
 8027b7c:	af00      	add	r7, sp, #0
 8027b7e:	60f8      	str	r0, [r7, #12]
 8027b80:	60b9      	str	r1, [r7, #8]
 8027b82:	607a      	str	r2, [r7, #4]
 8027b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8027b86:	2300      	movs	r3, #0
 8027b88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8027b8a:	68fb      	ldr	r3, [r7, #12]
 8027b8c:	2b00      	cmp	r3, #0
 8027b8e:	d109      	bne.n	8027ba4 <xTimerGenericCommand+0x2c>
 8027b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027b94:	f383 8811 	msr	BASEPRI, r3
 8027b98:	f3bf 8f6f 	isb	sy
 8027b9c:	f3bf 8f4f 	dsb	sy
 8027ba0:	623b      	str	r3, [r7, #32]
 8027ba2:	e7fe      	b.n	8027ba2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8027ba4:	4b19      	ldr	r3, [pc, #100]	; (8027c0c <xTimerGenericCommand+0x94>)
 8027ba6:	681b      	ldr	r3, [r3, #0]
 8027ba8:	2b00      	cmp	r3, #0
 8027baa:	d02a      	beq.n	8027c02 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8027bac:	68bb      	ldr	r3, [r7, #8]
 8027bae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8027bb0:	687b      	ldr	r3, [r7, #4]
 8027bb2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8027bb4:	68fb      	ldr	r3, [r7, #12]
 8027bb6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8027bb8:	68bb      	ldr	r3, [r7, #8]
 8027bba:	2b05      	cmp	r3, #5
 8027bbc:	dc18      	bgt.n	8027bf0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8027bbe:	f7ff fbd3 	bl	8027368 <xTaskGetSchedulerState>
 8027bc2:	4603      	mov	r3, r0
 8027bc4:	2b02      	cmp	r3, #2
 8027bc6:	d109      	bne.n	8027bdc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8027bc8:	4b10      	ldr	r3, [pc, #64]	; (8027c0c <xTimerGenericCommand+0x94>)
 8027bca:	6818      	ldr	r0, [r3, #0]
 8027bcc:	f107 0110 	add.w	r1, r7, #16
 8027bd0:	2300      	movs	r3, #0
 8027bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027bd4:	f7fd feb8 	bl	8025948 <xQueueGenericSend>
 8027bd8:	6278      	str	r0, [r7, #36]	; 0x24
 8027bda:	e012      	b.n	8027c02 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8027bdc:	4b0b      	ldr	r3, [pc, #44]	; (8027c0c <xTimerGenericCommand+0x94>)
 8027bde:	6818      	ldr	r0, [r3, #0]
 8027be0:	f107 0110 	add.w	r1, r7, #16
 8027be4:	2300      	movs	r3, #0
 8027be6:	2200      	movs	r2, #0
 8027be8:	f7fd feae 	bl	8025948 <xQueueGenericSend>
 8027bec:	6278      	str	r0, [r7, #36]	; 0x24
 8027bee:	e008      	b.n	8027c02 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8027bf0:	4b06      	ldr	r3, [pc, #24]	; (8027c0c <xTimerGenericCommand+0x94>)
 8027bf2:	6818      	ldr	r0, [r3, #0]
 8027bf4:	f107 0110 	add.w	r1, r7, #16
 8027bf8:	2300      	movs	r3, #0
 8027bfa:	683a      	ldr	r2, [r7, #0]
 8027bfc:	f7fd ff9e 	bl	8025b3c <xQueueGenericSendFromISR>
 8027c00:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8027c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8027c04:	4618      	mov	r0, r3
 8027c06:	3728      	adds	r7, #40	; 0x28
 8027c08:	46bd      	mov	sp, r7
 8027c0a:	bd80      	pop	{r7, pc}
 8027c0c:	24002018 	.word	0x24002018

08027c10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8027c10:	b580      	push	{r7, lr}
 8027c12:	b088      	sub	sp, #32
 8027c14:	af02      	add	r7, sp, #8
 8027c16:	6078      	str	r0, [r7, #4]
 8027c18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8027c1a:	4b22      	ldr	r3, [pc, #136]	; (8027ca4 <prvProcessExpiredTimer+0x94>)
 8027c1c:	681b      	ldr	r3, [r3, #0]
 8027c1e:	68db      	ldr	r3, [r3, #12]
 8027c20:	68db      	ldr	r3, [r3, #12]
 8027c22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8027c24:	697b      	ldr	r3, [r7, #20]
 8027c26:	3304      	adds	r3, #4
 8027c28:	4618      	mov	r0, r3
 8027c2a:	f7fd fcbf 	bl	80255ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8027c2e:	697b      	ldr	r3, [r7, #20]
 8027c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8027c34:	f003 0304 	and.w	r3, r3, #4
 8027c38:	2b00      	cmp	r3, #0
 8027c3a:	d021      	beq.n	8027c80 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8027c3c:	697b      	ldr	r3, [r7, #20]
 8027c3e:	699a      	ldr	r2, [r3, #24]
 8027c40:	687b      	ldr	r3, [r7, #4]
 8027c42:	18d1      	adds	r1, r2, r3
 8027c44:	687b      	ldr	r3, [r7, #4]
 8027c46:	683a      	ldr	r2, [r7, #0]
 8027c48:	6978      	ldr	r0, [r7, #20]
 8027c4a:	f000 f8d1 	bl	8027df0 <prvInsertTimerInActiveList>
 8027c4e:	4603      	mov	r3, r0
 8027c50:	2b00      	cmp	r3, #0
 8027c52:	d01e      	beq.n	8027c92 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8027c54:	2300      	movs	r3, #0
 8027c56:	9300      	str	r3, [sp, #0]
 8027c58:	2300      	movs	r3, #0
 8027c5a:	687a      	ldr	r2, [r7, #4]
 8027c5c:	2100      	movs	r1, #0
 8027c5e:	6978      	ldr	r0, [r7, #20]
 8027c60:	f7ff ff8a 	bl	8027b78 <xTimerGenericCommand>
 8027c64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8027c66:	693b      	ldr	r3, [r7, #16]
 8027c68:	2b00      	cmp	r3, #0
 8027c6a:	d112      	bne.n	8027c92 <prvProcessExpiredTimer+0x82>
 8027c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027c70:	f383 8811 	msr	BASEPRI, r3
 8027c74:	f3bf 8f6f 	isb	sy
 8027c78:	f3bf 8f4f 	dsb	sy
 8027c7c:	60fb      	str	r3, [r7, #12]
 8027c7e:	e7fe      	b.n	8027c7e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8027c80:	697b      	ldr	r3, [r7, #20]
 8027c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8027c86:	f023 0301 	bic.w	r3, r3, #1
 8027c8a:	b2da      	uxtb	r2, r3
 8027c8c:	697b      	ldr	r3, [r7, #20]
 8027c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8027c92:	697b      	ldr	r3, [r7, #20]
 8027c94:	6a1b      	ldr	r3, [r3, #32]
 8027c96:	6978      	ldr	r0, [r7, #20]
 8027c98:	4798      	blx	r3
}
 8027c9a:	bf00      	nop
 8027c9c:	3718      	adds	r7, #24
 8027c9e:	46bd      	mov	sp, r7
 8027ca0:	bd80      	pop	{r7, pc}
 8027ca2:	bf00      	nop
 8027ca4:	24002010 	.word	0x24002010

08027ca8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8027ca8:	b580      	push	{r7, lr}
 8027caa:	b084      	sub	sp, #16
 8027cac:	af00      	add	r7, sp, #0
 8027cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8027cb0:	f107 0308 	add.w	r3, r7, #8
 8027cb4:	4618      	mov	r0, r3
 8027cb6:	f000 f857 	bl	8027d68 <prvGetNextExpireTime>
 8027cba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8027cbc:	68bb      	ldr	r3, [r7, #8]
 8027cbe:	4619      	mov	r1, r3
 8027cc0:	68f8      	ldr	r0, [r7, #12]
 8027cc2:	f000 f803 	bl	8027ccc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8027cc6:	f000 f8d5 	bl	8027e74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8027cca:	e7f1      	b.n	8027cb0 <prvTimerTask+0x8>

08027ccc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8027ccc:	b580      	push	{r7, lr}
 8027cce:	b084      	sub	sp, #16
 8027cd0:	af00      	add	r7, sp, #0
 8027cd2:	6078      	str	r0, [r7, #4]
 8027cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8027cd6:	f7fe ff53 	bl	8026b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8027cda:	f107 0308 	add.w	r3, r7, #8
 8027cde:	4618      	mov	r0, r3
 8027ce0:	f000 f866 	bl	8027db0 <prvSampleTimeNow>
 8027ce4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8027ce6:	68bb      	ldr	r3, [r7, #8]
 8027ce8:	2b00      	cmp	r3, #0
 8027cea:	d130      	bne.n	8027d4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8027cec:	683b      	ldr	r3, [r7, #0]
 8027cee:	2b00      	cmp	r3, #0
 8027cf0:	d10a      	bne.n	8027d08 <prvProcessTimerOrBlockTask+0x3c>
 8027cf2:	687a      	ldr	r2, [r7, #4]
 8027cf4:	68fb      	ldr	r3, [r7, #12]
 8027cf6:	429a      	cmp	r2, r3
 8027cf8:	d806      	bhi.n	8027d08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8027cfa:	f7fe ff4f 	bl	8026b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8027cfe:	68f9      	ldr	r1, [r7, #12]
 8027d00:	6878      	ldr	r0, [r7, #4]
 8027d02:	f7ff ff85 	bl	8027c10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8027d06:	e024      	b.n	8027d52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8027d08:	683b      	ldr	r3, [r7, #0]
 8027d0a:	2b00      	cmp	r3, #0
 8027d0c:	d008      	beq.n	8027d20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8027d0e:	4b13      	ldr	r3, [pc, #76]	; (8027d5c <prvProcessTimerOrBlockTask+0x90>)
 8027d10:	681b      	ldr	r3, [r3, #0]
 8027d12:	681b      	ldr	r3, [r3, #0]
 8027d14:	2b00      	cmp	r3, #0
 8027d16:	d101      	bne.n	8027d1c <prvProcessTimerOrBlockTask+0x50>
 8027d18:	2301      	movs	r3, #1
 8027d1a:	e000      	b.n	8027d1e <prvProcessTimerOrBlockTask+0x52>
 8027d1c:	2300      	movs	r3, #0
 8027d1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8027d20:	4b0f      	ldr	r3, [pc, #60]	; (8027d60 <prvProcessTimerOrBlockTask+0x94>)
 8027d22:	6818      	ldr	r0, [r3, #0]
 8027d24:	687a      	ldr	r2, [r7, #4]
 8027d26:	68fb      	ldr	r3, [r7, #12]
 8027d28:	1ad3      	subs	r3, r2, r3
 8027d2a:	683a      	ldr	r2, [r7, #0]
 8027d2c:	4619      	mov	r1, r3
 8027d2e:	f7fe fc43 	bl	80265b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8027d32:	f7fe ff33 	bl	8026b9c <xTaskResumeAll>
 8027d36:	4603      	mov	r3, r0
 8027d38:	2b00      	cmp	r3, #0
 8027d3a:	d10a      	bne.n	8027d52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8027d3c:	4b09      	ldr	r3, [pc, #36]	; (8027d64 <prvProcessTimerOrBlockTask+0x98>)
 8027d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027d42:	601a      	str	r2, [r3, #0]
 8027d44:	f3bf 8f4f 	dsb	sy
 8027d48:	f3bf 8f6f 	isb	sy
}
 8027d4c:	e001      	b.n	8027d52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8027d4e:	f7fe ff25 	bl	8026b9c <xTaskResumeAll>
}
 8027d52:	bf00      	nop
 8027d54:	3710      	adds	r7, #16
 8027d56:	46bd      	mov	sp, r7
 8027d58:	bd80      	pop	{r7, pc}
 8027d5a:	bf00      	nop
 8027d5c:	24002014 	.word	0x24002014
 8027d60:	24002018 	.word	0x24002018
 8027d64:	e000ed04 	.word	0xe000ed04

08027d68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8027d68:	b480      	push	{r7}
 8027d6a:	b085      	sub	sp, #20
 8027d6c:	af00      	add	r7, sp, #0
 8027d6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8027d70:	4b0e      	ldr	r3, [pc, #56]	; (8027dac <prvGetNextExpireTime+0x44>)
 8027d72:	681b      	ldr	r3, [r3, #0]
 8027d74:	681b      	ldr	r3, [r3, #0]
 8027d76:	2b00      	cmp	r3, #0
 8027d78:	d101      	bne.n	8027d7e <prvGetNextExpireTime+0x16>
 8027d7a:	2201      	movs	r2, #1
 8027d7c:	e000      	b.n	8027d80 <prvGetNextExpireTime+0x18>
 8027d7e:	2200      	movs	r2, #0
 8027d80:	687b      	ldr	r3, [r7, #4]
 8027d82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8027d84:	687b      	ldr	r3, [r7, #4]
 8027d86:	681b      	ldr	r3, [r3, #0]
 8027d88:	2b00      	cmp	r3, #0
 8027d8a:	d105      	bne.n	8027d98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8027d8c:	4b07      	ldr	r3, [pc, #28]	; (8027dac <prvGetNextExpireTime+0x44>)
 8027d8e:	681b      	ldr	r3, [r3, #0]
 8027d90:	68db      	ldr	r3, [r3, #12]
 8027d92:	681b      	ldr	r3, [r3, #0]
 8027d94:	60fb      	str	r3, [r7, #12]
 8027d96:	e001      	b.n	8027d9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8027d98:	2300      	movs	r3, #0
 8027d9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8027d9c:	68fb      	ldr	r3, [r7, #12]
}
 8027d9e:	4618      	mov	r0, r3
 8027da0:	3714      	adds	r7, #20
 8027da2:	46bd      	mov	sp, r7
 8027da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027da8:	4770      	bx	lr
 8027daa:	bf00      	nop
 8027dac:	24002010 	.word	0x24002010

08027db0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8027db0:	b580      	push	{r7, lr}
 8027db2:	b084      	sub	sp, #16
 8027db4:	af00      	add	r7, sp, #0
 8027db6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8027db8:	f7fe ff8c 	bl	8026cd4 <xTaskGetTickCount>
 8027dbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8027dbe:	4b0b      	ldr	r3, [pc, #44]	; (8027dec <prvSampleTimeNow+0x3c>)
 8027dc0:	681b      	ldr	r3, [r3, #0]
 8027dc2:	68fa      	ldr	r2, [r7, #12]
 8027dc4:	429a      	cmp	r2, r3
 8027dc6:	d205      	bcs.n	8027dd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8027dc8:	f000 f930 	bl	802802c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8027dcc:	687b      	ldr	r3, [r7, #4]
 8027dce:	2201      	movs	r2, #1
 8027dd0:	601a      	str	r2, [r3, #0]
 8027dd2:	e002      	b.n	8027dda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8027dd4:	687b      	ldr	r3, [r7, #4]
 8027dd6:	2200      	movs	r2, #0
 8027dd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8027dda:	4a04      	ldr	r2, [pc, #16]	; (8027dec <prvSampleTimeNow+0x3c>)
 8027ddc:	68fb      	ldr	r3, [r7, #12]
 8027dde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8027de0:	68fb      	ldr	r3, [r7, #12]
}
 8027de2:	4618      	mov	r0, r3
 8027de4:	3710      	adds	r7, #16
 8027de6:	46bd      	mov	sp, r7
 8027de8:	bd80      	pop	{r7, pc}
 8027dea:	bf00      	nop
 8027dec:	24002020 	.word	0x24002020

08027df0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8027df0:	b580      	push	{r7, lr}
 8027df2:	b086      	sub	sp, #24
 8027df4:	af00      	add	r7, sp, #0
 8027df6:	60f8      	str	r0, [r7, #12]
 8027df8:	60b9      	str	r1, [r7, #8]
 8027dfa:	607a      	str	r2, [r7, #4]
 8027dfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8027dfe:	2300      	movs	r3, #0
 8027e00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8027e02:	68fb      	ldr	r3, [r7, #12]
 8027e04:	68ba      	ldr	r2, [r7, #8]
 8027e06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8027e08:	68fb      	ldr	r3, [r7, #12]
 8027e0a:	68fa      	ldr	r2, [r7, #12]
 8027e0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8027e0e:	68ba      	ldr	r2, [r7, #8]
 8027e10:	687b      	ldr	r3, [r7, #4]
 8027e12:	429a      	cmp	r2, r3
 8027e14:	d812      	bhi.n	8027e3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8027e16:	687a      	ldr	r2, [r7, #4]
 8027e18:	683b      	ldr	r3, [r7, #0]
 8027e1a:	1ad2      	subs	r2, r2, r3
 8027e1c:	68fb      	ldr	r3, [r7, #12]
 8027e1e:	699b      	ldr	r3, [r3, #24]
 8027e20:	429a      	cmp	r2, r3
 8027e22:	d302      	bcc.n	8027e2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8027e24:	2301      	movs	r3, #1
 8027e26:	617b      	str	r3, [r7, #20]
 8027e28:	e01b      	b.n	8027e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8027e2a:	4b10      	ldr	r3, [pc, #64]	; (8027e6c <prvInsertTimerInActiveList+0x7c>)
 8027e2c:	681a      	ldr	r2, [r3, #0]
 8027e2e:	68fb      	ldr	r3, [r7, #12]
 8027e30:	3304      	adds	r3, #4
 8027e32:	4619      	mov	r1, r3
 8027e34:	4610      	mov	r0, r2
 8027e36:	f7fd fb80 	bl	802553a <vListInsert>
 8027e3a:	e012      	b.n	8027e62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8027e3c:	687a      	ldr	r2, [r7, #4]
 8027e3e:	683b      	ldr	r3, [r7, #0]
 8027e40:	429a      	cmp	r2, r3
 8027e42:	d206      	bcs.n	8027e52 <prvInsertTimerInActiveList+0x62>
 8027e44:	68ba      	ldr	r2, [r7, #8]
 8027e46:	683b      	ldr	r3, [r7, #0]
 8027e48:	429a      	cmp	r2, r3
 8027e4a:	d302      	bcc.n	8027e52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8027e4c:	2301      	movs	r3, #1
 8027e4e:	617b      	str	r3, [r7, #20]
 8027e50:	e007      	b.n	8027e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8027e52:	4b07      	ldr	r3, [pc, #28]	; (8027e70 <prvInsertTimerInActiveList+0x80>)
 8027e54:	681a      	ldr	r2, [r3, #0]
 8027e56:	68fb      	ldr	r3, [r7, #12]
 8027e58:	3304      	adds	r3, #4
 8027e5a:	4619      	mov	r1, r3
 8027e5c:	4610      	mov	r0, r2
 8027e5e:	f7fd fb6c 	bl	802553a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8027e62:	697b      	ldr	r3, [r7, #20]
}
 8027e64:	4618      	mov	r0, r3
 8027e66:	3718      	adds	r7, #24
 8027e68:	46bd      	mov	sp, r7
 8027e6a:	bd80      	pop	{r7, pc}
 8027e6c:	24002014 	.word	0x24002014
 8027e70:	24002010 	.word	0x24002010

08027e74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8027e74:	b580      	push	{r7, lr}
 8027e76:	b08e      	sub	sp, #56	; 0x38
 8027e78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8027e7a:	e0c6      	b.n	802800a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8027e7c:	687b      	ldr	r3, [r7, #4]
 8027e7e:	2b00      	cmp	r3, #0
 8027e80:	da17      	bge.n	8027eb2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8027e82:	1d3b      	adds	r3, r7, #4
 8027e84:	3304      	adds	r3, #4
 8027e86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8027e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e8a:	2b00      	cmp	r3, #0
 8027e8c:	d109      	bne.n	8027ea2 <prvProcessReceivedCommands+0x2e>
 8027e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027e92:	f383 8811 	msr	BASEPRI, r3
 8027e96:	f3bf 8f6f 	isb	sy
 8027e9a:	f3bf 8f4f 	dsb	sy
 8027e9e:	61fb      	str	r3, [r7, #28]
 8027ea0:	e7fe      	b.n	8027ea0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8027ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ea4:	681b      	ldr	r3, [r3, #0]
 8027ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027ea8:	6850      	ldr	r0, [r2, #4]
 8027eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027eac:	6892      	ldr	r2, [r2, #8]
 8027eae:	4611      	mov	r1, r2
 8027eb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8027eb2:	687b      	ldr	r3, [r7, #4]
 8027eb4:	2b00      	cmp	r3, #0
 8027eb6:	f2c0 80a7 	blt.w	8028008 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8027eba:	68fb      	ldr	r3, [r7, #12]
 8027ebc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8027ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027ec0:	695b      	ldr	r3, [r3, #20]
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	d004      	beq.n	8027ed0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8027ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027ec8:	3304      	adds	r3, #4
 8027eca:	4618      	mov	r0, r3
 8027ecc:	f7fd fb6e 	bl	80255ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8027ed0:	463b      	mov	r3, r7
 8027ed2:	4618      	mov	r0, r3
 8027ed4:	f7ff ff6c 	bl	8027db0 <prvSampleTimeNow>
 8027ed8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8027eda:	687b      	ldr	r3, [r7, #4]
 8027edc:	2b09      	cmp	r3, #9
 8027ede:	f200 8094 	bhi.w	802800a <prvProcessReceivedCommands+0x196>
 8027ee2:	a201      	add	r2, pc, #4	; (adr r2, 8027ee8 <prvProcessReceivedCommands+0x74>)
 8027ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027ee8:	08027f11 	.word	0x08027f11
 8027eec:	08027f11 	.word	0x08027f11
 8027ef0:	08027f11 	.word	0x08027f11
 8027ef4:	08027f83 	.word	0x08027f83
 8027ef8:	08027f97 	.word	0x08027f97
 8027efc:	08027fdf 	.word	0x08027fdf
 8027f00:	08027f11 	.word	0x08027f11
 8027f04:	08027f11 	.word	0x08027f11
 8027f08:	08027f83 	.word	0x08027f83
 8027f0c:	08027f97 	.word	0x08027f97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8027f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8027f16:	f043 0301 	orr.w	r3, r3, #1
 8027f1a:	b2da      	uxtb	r2, r3
 8027f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8027f22:	68ba      	ldr	r2, [r7, #8]
 8027f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f26:	699b      	ldr	r3, [r3, #24]
 8027f28:	18d1      	adds	r1, r2, r3
 8027f2a:	68bb      	ldr	r3, [r7, #8]
 8027f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f30:	f7ff ff5e 	bl	8027df0 <prvInsertTimerInActiveList>
 8027f34:	4603      	mov	r3, r0
 8027f36:	2b00      	cmp	r3, #0
 8027f38:	d067      	beq.n	802800a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8027f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f3c:	6a1b      	ldr	r3, [r3, #32]
 8027f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8027f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8027f48:	f003 0304 	and.w	r3, r3, #4
 8027f4c:	2b00      	cmp	r3, #0
 8027f4e:	d05c      	beq.n	802800a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8027f50:	68ba      	ldr	r2, [r7, #8]
 8027f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f54:	699b      	ldr	r3, [r3, #24]
 8027f56:	441a      	add	r2, r3
 8027f58:	2300      	movs	r3, #0
 8027f5a:	9300      	str	r3, [sp, #0]
 8027f5c:	2300      	movs	r3, #0
 8027f5e:	2100      	movs	r1, #0
 8027f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f62:	f7ff fe09 	bl	8027b78 <xTimerGenericCommand>
 8027f66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8027f68:	6a3b      	ldr	r3, [r7, #32]
 8027f6a:	2b00      	cmp	r3, #0
 8027f6c:	d14d      	bne.n	802800a <prvProcessReceivedCommands+0x196>
 8027f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027f72:	f383 8811 	msr	BASEPRI, r3
 8027f76:	f3bf 8f6f 	isb	sy
 8027f7a:	f3bf 8f4f 	dsb	sy
 8027f7e:	61bb      	str	r3, [r7, #24]
 8027f80:	e7fe      	b.n	8027f80 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8027f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8027f88:	f023 0301 	bic.w	r3, r3, #1
 8027f8c:	b2da      	uxtb	r2, r3
 8027f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8027f94:	e039      	b.n	802800a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8027f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8027f9c:	f043 0301 	orr.w	r3, r3, #1
 8027fa0:	b2da      	uxtb	r2, r3
 8027fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8027fa8:	68ba      	ldr	r2, [r7, #8]
 8027faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8027fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fb0:	699b      	ldr	r3, [r3, #24]
 8027fb2:	2b00      	cmp	r3, #0
 8027fb4:	d109      	bne.n	8027fca <prvProcessReceivedCommands+0x156>
 8027fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027fba:	f383 8811 	msr	BASEPRI, r3
 8027fbe:	f3bf 8f6f 	isb	sy
 8027fc2:	f3bf 8f4f 	dsb	sy
 8027fc6:	617b      	str	r3, [r7, #20]
 8027fc8:	e7fe      	b.n	8027fc8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8027fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fcc:	699a      	ldr	r2, [r3, #24]
 8027fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027fd0:	18d1      	adds	r1, r2, r3
 8027fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027fd8:	f7ff ff0a 	bl	8027df0 <prvInsertTimerInActiveList>
					break;
 8027fdc:	e015      	b.n	802800a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8027fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8027fe4:	f003 0302 	and.w	r3, r3, #2
 8027fe8:	2b00      	cmp	r3, #0
 8027fea:	d103      	bne.n	8027ff4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8027fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027fee:	f000 fbc1 	bl	8028774 <vPortFree>
 8027ff2:	e00a      	b.n	802800a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8027ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8027ffa:	f023 0301 	bic.w	r3, r3, #1
 8027ffe:	b2da      	uxtb	r2, r3
 8028000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8028006:	e000      	b.n	802800a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8028008:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802800a:	4b07      	ldr	r3, [pc, #28]	; (8028028 <prvProcessReceivedCommands+0x1b4>)
 802800c:	681b      	ldr	r3, [r3, #0]
 802800e:	1d39      	adds	r1, r7, #4
 8028010:	2200      	movs	r2, #0
 8028012:	4618      	mov	r0, r3
 8028014:	f7fd feb0 	bl	8025d78 <xQueueReceive>
 8028018:	4603      	mov	r3, r0
 802801a:	2b00      	cmp	r3, #0
 802801c:	f47f af2e 	bne.w	8027e7c <prvProcessReceivedCommands+0x8>
	}
}
 8028020:	bf00      	nop
 8028022:	3730      	adds	r7, #48	; 0x30
 8028024:	46bd      	mov	sp, r7
 8028026:	bd80      	pop	{r7, pc}
 8028028:	24002018 	.word	0x24002018

0802802c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802802c:	b580      	push	{r7, lr}
 802802e:	b088      	sub	sp, #32
 8028030:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8028032:	e047      	b.n	80280c4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8028034:	4b2d      	ldr	r3, [pc, #180]	; (80280ec <prvSwitchTimerLists+0xc0>)
 8028036:	681b      	ldr	r3, [r3, #0]
 8028038:	68db      	ldr	r3, [r3, #12]
 802803a:	681b      	ldr	r3, [r3, #0]
 802803c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802803e:	4b2b      	ldr	r3, [pc, #172]	; (80280ec <prvSwitchTimerLists+0xc0>)
 8028040:	681b      	ldr	r3, [r3, #0]
 8028042:	68db      	ldr	r3, [r3, #12]
 8028044:	68db      	ldr	r3, [r3, #12]
 8028046:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8028048:	68fb      	ldr	r3, [r7, #12]
 802804a:	3304      	adds	r3, #4
 802804c:	4618      	mov	r0, r3
 802804e:	f7fd faad 	bl	80255ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8028052:	68fb      	ldr	r3, [r7, #12]
 8028054:	6a1b      	ldr	r3, [r3, #32]
 8028056:	68f8      	ldr	r0, [r7, #12]
 8028058:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802805a:	68fb      	ldr	r3, [r7, #12]
 802805c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8028060:	f003 0304 	and.w	r3, r3, #4
 8028064:	2b00      	cmp	r3, #0
 8028066:	d02d      	beq.n	80280c4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8028068:	68fb      	ldr	r3, [r7, #12]
 802806a:	699b      	ldr	r3, [r3, #24]
 802806c:	693a      	ldr	r2, [r7, #16]
 802806e:	4413      	add	r3, r2
 8028070:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8028072:	68ba      	ldr	r2, [r7, #8]
 8028074:	693b      	ldr	r3, [r7, #16]
 8028076:	429a      	cmp	r2, r3
 8028078:	d90e      	bls.n	8028098 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802807a:	68fb      	ldr	r3, [r7, #12]
 802807c:	68ba      	ldr	r2, [r7, #8]
 802807e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8028080:	68fb      	ldr	r3, [r7, #12]
 8028082:	68fa      	ldr	r2, [r7, #12]
 8028084:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8028086:	4b19      	ldr	r3, [pc, #100]	; (80280ec <prvSwitchTimerLists+0xc0>)
 8028088:	681a      	ldr	r2, [r3, #0]
 802808a:	68fb      	ldr	r3, [r7, #12]
 802808c:	3304      	adds	r3, #4
 802808e:	4619      	mov	r1, r3
 8028090:	4610      	mov	r0, r2
 8028092:	f7fd fa52 	bl	802553a <vListInsert>
 8028096:	e015      	b.n	80280c4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8028098:	2300      	movs	r3, #0
 802809a:	9300      	str	r3, [sp, #0]
 802809c:	2300      	movs	r3, #0
 802809e:	693a      	ldr	r2, [r7, #16]
 80280a0:	2100      	movs	r1, #0
 80280a2:	68f8      	ldr	r0, [r7, #12]
 80280a4:	f7ff fd68 	bl	8027b78 <xTimerGenericCommand>
 80280a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80280aa:	687b      	ldr	r3, [r7, #4]
 80280ac:	2b00      	cmp	r3, #0
 80280ae:	d109      	bne.n	80280c4 <prvSwitchTimerLists+0x98>
 80280b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80280b4:	f383 8811 	msr	BASEPRI, r3
 80280b8:	f3bf 8f6f 	isb	sy
 80280bc:	f3bf 8f4f 	dsb	sy
 80280c0:	603b      	str	r3, [r7, #0]
 80280c2:	e7fe      	b.n	80280c2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80280c4:	4b09      	ldr	r3, [pc, #36]	; (80280ec <prvSwitchTimerLists+0xc0>)
 80280c6:	681b      	ldr	r3, [r3, #0]
 80280c8:	681b      	ldr	r3, [r3, #0]
 80280ca:	2b00      	cmp	r3, #0
 80280cc:	d1b2      	bne.n	8028034 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80280ce:	4b07      	ldr	r3, [pc, #28]	; (80280ec <prvSwitchTimerLists+0xc0>)
 80280d0:	681b      	ldr	r3, [r3, #0]
 80280d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80280d4:	4b06      	ldr	r3, [pc, #24]	; (80280f0 <prvSwitchTimerLists+0xc4>)
 80280d6:	681b      	ldr	r3, [r3, #0]
 80280d8:	4a04      	ldr	r2, [pc, #16]	; (80280ec <prvSwitchTimerLists+0xc0>)
 80280da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80280dc:	4a04      	ldr	r2, [pc, #16]	; (80280f0 <prvSwitchTimerLists+0xc4>)
 80280de:	697b      	ldr	r3, [r7, #20]
 80280e0:	6013      	str	r3, [r2, #0]
}
 80280e2:	bf00      	nop
 80280e4:	3718      	adds	r7, #24
 80280e6:	46bd      	mov	sp, r7
 80280e8:	bd80      	pop	{r7, pc}
 80280ea:	bf00      	nop
 80280ec:	24002010 	.word	0x24002010
 80280f0:	24002014 	.word	0x24002014

080280f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80280f4:	b580      	push	{r7, lr}
 80280f6:	b082      	sub	sp, #8
 80280f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80280fa:	f000 f95f 	bl	80283bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80280fe:	4b15      	ldr	r3, [pc, #84]	; (8028154 <prvCheckForValidListAndQueue+0x60>)
 8028100:	681b      	ldr	r3, [r3, #0]
 8028102:	2b00      	cmp	r3, #0
 8028104:	d120      	bne.n	8028148 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8028106:	4814      	ldr	r0, [pc, #80]	; (8028158 <prvCheckForValidListAndQueue+0x64>)
 8028108:	f7fd f9c6 	bl	8025498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 802810c:	4813      	ldr	r0, [pc, #76]	; (802815c <prvCheckForValidListAndQueue+0x68>)
 802810e:	f7fd f9c3 	bl	8025498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8028112:	4b13      	ldr	r3, [pc, #76]	; (8028160 <prvCheckForValidListAndQueue+0x6c>)
 8028114:	4a10      	ldr	r2, [pc, #64]	; (8028158 <prvCheckForValidListAndQueue+0x64>)
 8028116:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8028118:	4b12      	ldr	r3, [pc, #72]	; (8028164 <prvCheckForValidListAndQueue+0x70>)
 802811a:	4a10      	ldr	r2, [pc, #64]	; (802815c <prvCheckForValidListAndQueue+0x68>)
 802811c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802811e:	2300      	movs	r3, #0
 8028120:	9300      	str	r3, [sp, #0]
 8028122:	4b11      	ldr	r3, [pc, #68]	; (8028168 <prvCheckForValidListAndQueue+0x74>)
 8028124:	4a11      	ldr	r2, [pc, #68]	; (802816c <prvCheckForValidListAndQueue+0x78>)
 8028126:	2110      	movs	r1, #16
 8028128:	200a      	movs	r0, #10
 802812a:	f7fd fad1 	bl	80256d0 <xQueueGenericCreateStatic>
 802812e:	4602      	mov	r2, r0
 8028130:	4b08      	ldr	r3, [pc, #32]	; (8028154 <prvCheckForValidListAndQueue+0x60>)
 8028132:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8028134:	4b07      	ldr	r3, [pc, #28]	; (8028154 <prvCheckForValidListAndQueue+0x60>)
 8028136:	681b      	ldr	r3, [r3, #0]
 8028138:	2b00      	cmp	r3, #0
 802813a:	d005      	beq.n	8028148 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802813c:	4b05      	ldr	r3, [pc, #20]	; (8028154 <prvCheckForValidListAndQueue+0x60>)
 802813e:	681b      	ldr	r3, [r3, #0]
 8028140:	490b      	ldr	r1, [pc, #44]	; (8028170 <prvCheckForValidListAndQueue+0x7c>)
 8028142:	4618      	mov	r0, r3
 8028144:	f7fe f9e6 	bl	8026514 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8028148:	f000 f966 	bl	8028418 <vPortExitCritical>
}
 802814c:	bf00      	nop
 802814e:	46bd      	mov	sp, r7
 8028150:	bd80      	pop	{r7, pc}
 8028152:	bf00      	nop
 8028154:	24002018 	.word	0x24002018
 8028158:	24001fe8 	.word	0x24001fe8
 802815c:	24001ffc 	.word	0x24001ffc
 8028160:	24002010 	.word	0x24002010
 8028164:	24002014 	.word	0x24002014
 8028168:	240020c4 	.word	0x240020c4
 802816c:	24002024 	.word	0x24002024
 8028170:	0802cd2c 	.word	0x0802cd2c

08028174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8028174:	b480      	push	{r7}
 8028176:	b085      	sub	sp, #20
 8028178:	af00      	add	r7, sp, #0
 802817a:	60f8      	str	r0, [r7, #12]
 802817c:	60b9      	str	r1, [r7, #8]
 802817e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8028180:	68fb      	ldr	r3, [r7, #12]
 8028182:	3b04      	subs	r3, #4
 8028184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8028186:	68fb      	ldr	r3, [r7, #12]
 8028188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802818c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802818e:	68fb      	ldr	r3, [r7, #12]
 8028190:	3b04      	subs	r3, #4
 8028192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8028194:	68bb      	ldr	r3, [r7, #8]
 8028196:	f023 0201 	bic.w	r2, r3, #1
 802819a:	68fb      	ldr	r3, [r7, #12]
 802819c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802819e:	68fb      	ldr	r3, [r7, #12]
 80281a0:	3b04      	subs	r3, #4
 80281a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80281a4:	4a0c      	ldr	r2, [pc, #48]	; (80281d8 <pxPortInitialiseStack+0x64>)
 80281a6:	68fb      	ldr	r3, [r7, #12]
 80281a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80281aa:	68fb      	ldr	r3, [r7, #12]
 80281ac:	3b14      	subs	r3, #20
 80281ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80281b0:	687a      	ldr	r2, [r7, #4]
 80281b2:	68fb      	ldr	r3, [r7, #12]
 80281b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80281b6:	68fb      	ldr	r3, [r7, #12]
 80281b8:	3b04      	subs	r3, #4
 80281ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80281bc:	68fb      	ldr	r3, [r7, #12]
 80281be:	f06f 0202 	mvn.w	r2, #2
 80281c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80281c4:	68fb      	ldr	r3, [r7, #12]
 80281c6:	3b20      	subs	r3, #32
 80281c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80281ca:	68fb      	ldr	r3, [r7, #12]
}
 80281cc:	4618      	mov	r0, r3
 80281ce:	3714      	adds	r7, #20
 80281d0:	46bd      	mov	sp, r7
 80281d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281d6:	4770      	bx	lr
 80281d8:	080281dd 	.word	0x080281dd

080281dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80281dc:	b480      	push	{r7}
 80281de:	b085      	sub	sp, #20
 80281e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80281e2:	2300      	movs	r3, #0
 80281e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80281e6:	4b11      	ldr	r3, [pc, #68]	; (802822c <prvTaskExitError+0x50>)
 80281e8:	681b      	ldr	r3, [r3, #0]
 80281ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80281ee:	d009      	beq.n	8028204 <prvTaskExitError+0x28>
 80281f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80281f4:	f383 8811 	msr	BASEPRI, r3
 80281f8:	f3bf 8f6f 	isb	sy
 80281fc:	f3bf 8f4f 	dsb	sy
 8028200:	60fb      	str	r3, [r7, #12]
 8028202:	e7fe      	b.n	8028202 <prvTaskExitError+0x26>
 8028204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028208:	f383 8811 	msr	BASEPRI, r3
 802820c:	f3bf 8f6f 	isb	sy
 8028210:	f3bf 8f4f 	dsb	sy
 8028214:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8028216:	bf00      	nop
 8028218:	687b      	ldr	r3, [r7, #4]
 802821a:	2b00      	cmp	r3, #0
 802821c:	d0fc      	beq.n	8028218 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802821e:	bf00      	nop
 8028220:	3714      	adds	r7, #20
 8028222:	46bd      	mov	sp, r7
 8028224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028228:	4770      	bx	lr
 802822a:	bf00      	nop
 802822c:	240006a8 	.word	0x240006a8

08028230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8028230:	4b07      	ldr	r3, [pc, #28]	; (8028250 <pxCurrentTCBConst2>)
 8028232:	6819      	ldr	r1, [r3, #0]
 8028234:	6808      	ldr	r0, [r1, #0]
 8028236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802823a:	f380 8809 	msr	PSP, r0
 802823e:	f3bf 8f6f 	isb	sy
 8028242:	f04f 0000 	mov.w	r0, #0
 8028246:	f380 8811 	msr	BASEPRI, r0
 802824a:	4770      	bx	lr
 802824c:	f3af 8000 	nop.w

08028250 <pxCurrentTCBConst2>:
 8028250:	24001ae8 	.word	0x24001ae8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8028254:	bf00      	nop
 8028256:	bf00      	nop

08028258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8028258:	4808      	ldr	r0, [pc, #32]	; (802827c <prvPortStartFirstTask+0x24>)
 802825a:	6800      	ldr	r0, [r0, #0]
 802825c:	6800      	ldr	r0, [r0, #0]
 802825e:	f380 8808 	msr	MSP, r0
 8028262:	f04f 0000 	mov.w	r0, #0
 8028266:	f380 8814 	msr	CONTROL, r0
 802826a:	b662      	cpsie	i
 802826c:	b661      	cpsie	f
 802826e:	f3bf 8f4f 	dsb	sy
 8028272:	f3bf 8f6f 	isb	sy
 8028276:	df00      	svc	0
 8028278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802827a:	bf00      	nop
 802827c:	e000ed08 	.word	0xe000ed08

08028280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8028280:	b580      	push	{r7, lr}
 8028282:	b086      	sub	sp, #24
 8028284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8028286:	4b44      	ldr	r3, [pc, #272]	; (8028398 <xPortStartScheduler+0x118>)
 8028288:	681b      	ldr	r3, [r3, #0]
 802828a:	4a44      	ldr	r2, [pc, #272]	; (802839c <xPortStartScheduler+0x11c>)
 802828c:	4293      	cmp	r3, r2
 802828e:	d109      	bne.n	80282a4 <xPortStartScheduler+0x24>
 8028290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028294:	f383 8811 	msr	BASEPRI, r3
 8028298:	f3bf 8f6f 	isb	sy
 802829c:	f3bf 8f4f 	dsb	sy
 80282a0:	613b      	str	r3, [r7, #16]
 80282a2:	e7fe      	b.n	80282a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80282a4:	4b3c      	ldr	r3, [pc, #240]	; (8028398 <xPortStartScheduler+0x118>)
 80282a6:	681b      	ldr	r3, [r3, #0]
 80282a8:	4a3d      	ldr	r2, [pc, #244]	; (80283a0 <xPortStartScheduler+0x120>)
 80282aa:	4293      	cmp	r3, r2
 80282ac:	d109      	bne.n	80282c2 <xPortStartScheduler+0x42>
 80282ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80282b2:	f383 8811 	msr	BASEPRI, r3
 80282b6:	f3bf 8f6f 	isb	sy
 80282ba:	f3bf 8f4f 	dsb	sy
 80282be:	60fb      	str	r3, [r7, #12]
 80282c0:	e7fe      	b.n	80282c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80282c2:	4b38      	ldr	r3, [pc, #224]	; (80283a4 <xPortStartScheduler+0x124>)
 80282c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80282c6:	697b      	ldr	r3, [r7, #20]
 80282c8:	781b      	ldrb	r3, [r3, #0]
 80282ca:	b2db      	uxtb	r3, r3
 80282cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80282ce:	697b      	ldr	r3, [r7, #20]
 80282d0:	22ff      	movs	r2, #255	; 0xff
 80282d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80282d4:	697b      	ldr	r3, [r7, #20]
 80282d6:	781b      	ldrb	r3, [r3, #0]
 80282d8:	b2db      	uxtb	r3, r3
 80282da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80282dc:	78fb      	ldrb	r3, [r7, #3]
 80282de:	b2db      	uxtb	r3, r3
 80282e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80282e4:	b2da      	uxtb	r2, r3
 80282e6:	4b30      	ldr	r3, [pc, #192]	; (80283a8 <xPortStartScheduler+0x128>)
 80282e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80282ea:	4b30      	ldr	r3, [pc, #192]	; (80283ac <xPortStartScheduler+0x12c>)
 80282ec:	2207      	movs	r2, #7
 80282ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80282f0:	e009      	b.n	8028306 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80282f2:	4b2e      	ldr	r3, [pc, #184]	; (80283ac <xPortStartScheduler+0x12c>)
 80282f4:	681b      	ldr	r3, [r3, #0]
 80282f6:	3b01      	subs	r3, #1
 80282f8:	4a2c      	ldr	r2, [pc, #176]	; (80283ac <xPortStartScheduler+0x12c>)
 80282fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80282fc:	78fb      	ldrb	r3, [r7, #3]
 80282fe:	b2db      	uxtb	r3, r3
 8028300:	005b      	lsls	r3, r3, #1
 8028302:	b2db      	uxtb	r3, r3
 8028304:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8028306:	78fb      	ldrb	r3, [r7, #3]
 8028308:	b2db      	uxtb	r3, r3
 802830a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802830e:	2b80      	cmp	r3, #128	; 0x80
 8028310:	d0ef      	beq.n	80282f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8028312:	4b26      	ldr	r3, [pc, #152]	; (80283ac <xPortStartScheduler+0x12c>)
 8028314:	681b      	ldr	r3, [r3, #0]
 8028316:	f1c3 0307 	rsb	r3, r3, #7
 802831a:	2b04      	cmp	r3, #4
 802831c:	d009      	beq.n	8028332 <xPortStartScheduler+0xb2>
 802831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028322:	f383 8811 	msr	BASEPRI, r3
 8028326:	f3bf 8f6f 	isb	sy
 802832a:	f3bf 8f4f 	dsb	sy
 802832e:	60bb      	str	r3, [r7, #8]
 8028330:	e7fe      	b.n	8028330 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8028332:	4b1e      	ldr	r3, [pc, #120]	; (80283ac <xPortStartScheduler+0x12c>)
 8028334:	681b      	ldr	r3, [r3, #0]
 8028336:	021b      	lsls	r3, r3, #8
 8028338:	4a1c      	ldr	r2, [pc, #112]	; (80283ac <xPortStartScheduler+0x12c>)
 802833a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802833c:	4b1b      	ldr	r3, [pc, #108]	; (80283ac <xPortStartScheduler+0x12c>)
 802833e:	681b      	ldr	r3, [r3, #0]
 8028340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8028344:	4a19      	ldr	r2, [pc, #100]	; (80283ac <xPortStartScheduler+0x12c>)
 8028346:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8028348:	687b      	ldr	r3, [r7, #4]
 802834a:	b2da      	uxtb	r2, r3
 802834c:	697b      	ldr	r3, [r7, #20]
 802834e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8028350:	4b17      	ldr	r3, [pc, #92]	; (80283b0 <xPortStartScheduler+0x130>)
 8028352:	681b      	ldr	r3, [r3, #0]
 8028354:	4a16      	ldr	r2, [pc, #88]	; (80283b0 <xPortStartScheduler+0x130>)
 8028356:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802835a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802835c:	4b14      	ldr	r3, [pc, #80]	; (80283b0 <xPortStartScheduler+0x130>)
 802835e:	681b      	ldr	r3, [r3, #0]
 8028360:	4a13      	ldr	r2, [pc, #76]	; (80283b0 <xPortStartScheduler+0x130>)
 8028362:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8028366:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8028368:	f000 f8d6 	bl	8028518 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802836c:	4b11      	ldr	r3, [pc, #68]	; (80283b4 <xPortStartScheduler+0x134>)
 802836e:	2200      	movs	r2, #0
 8028370:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8028372:	f000 f8f5 	bl	8028560 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8028376:	4b10      	ldr	r3, [pc, #64]	; (80283b8 <xPortStartScheduler+0x138>)
 8028378:	681b      	ldr	r3, [r3, #0]
 802837a:	4a0f      	ldr	r2, [pc, #60]	; (80283b8 <xPortStartScheduler+0x138>)
 802837c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8028380:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8028382:	f7ff ff69 	bl	8028258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8028386:	f7fe fd7f 	bl	8026e88 <vTaskSwitchContext>
	prvTaskExitError();
 802838a:	f7ff ff27 	bl	80281dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802838e:	2300      	movs	r3, #0
}
 8028390:	4618      	mov	r0, r3
 8028392:	3718      	adds	r7, #24
 8028394:	46bd      	mov	sp, r7
 8028396:	bd80      	pop	{r7, pc}
 8028398:	e000ed00 	.word	0xe000ed00
 802839c:	410fc271 	.word	0x410fc271
 80283a0:	410fc270 	.word	0x410fc270
 80283a4:	e000e400 	.word	0xe000e400
 80283a8:	24002114 	.word	0x24002114
 80283ac:	24002118 	.word	0x24002118
 80283b0:	e000ed20 	.word	0xe000ed20
 80283b4:	240006a8 	.word	0x240006a8
 80283b8:	e000ef34 	.word	0xe000ef34

080283bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80283bc:	b480      	push	{r7}
 80283be:	b083      	sub	sp, #12
 80283c0:	af00      	add	r7, sp, #0
 80283c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80283c6:	f383 8811 	msr	BASEPRI, r3
 80283ca:	f3bf 8f6f 	isb	sy
 80283ce:	f3bf 8f4f 	dsb	sy
 80283d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80283d4:	4b0e      	ldr	r3, [pc, #56]	; (8028410 <vPortEnterCritical+0x54>)
 80283d6:	681b      	ldr	r3, [r3, #0]
 80283d8:	3301      	adds	r3, #1
 80283da:	4a0d      	ldr	r2, [pc, #52]	; (8028410 <vPortEnterCritical+0x54>)
 80283dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80283de:	4b0c      	ldr	r3, [pc, #48]	; (8028410 <vPortEnterCritical+0x54>)
 80283e0:	681b      	ldr	r3, [r3, #0]
 80283e2:	2b01      	cmp	r3, #1
 80283e4:	d10e      	bne.n	8028404 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80283e6:	4b0b      	ldr	r3, [pc, #44]	; (8028414 <vPortEnterCritical+0x58>)
 80283e8:	681b      	ldr	r3, [r3, #0]
 80283ea:	b2db      	uxtb	r3, r3
 80283ec:	2b00      	cmp	r3, #0
 80283ee:	d009      	beq.n	8028404 <vPortEnterCritical+0x48>
 80283f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80283f4:	f383 8811 	msr	BASEPRI, r3
 80283f8:	f3bf 8f6f 	isb	sy
 80283fc:	f3bf 8f4f 	dsb	sy
 8028400:	603b      	str	r3, [r7, #0]
 8028402:	e7fe      	b.n	8028402 <vPortEnterCritical+0x46>
	}
}
 8028404:	bf00      	nop
 8028406:	370c      	adds	r7, #12
 8028408:	46bd      	mov	sp, r7
 802840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802840e:	4770      	bx	lr
 8028410:	240006a8 	.word	0x240006a8
 8028414:	e000ed04 	.word	0xe000ed04

08028418 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8028418:	b480      	push	{r7}
 802841a:	b083      	sub	sp, #12
 802841c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802841e:	4b11      	ldr	r3, [pc, #68]	; (8028464 <vPortExitCritical+0x4c>)
 8028420:	681b      	ldr	r3, [r3, #0]
 8028422:	2b00      	cmp	r3, #0
 8028424:	d109      	bne.n	802843a <vPortExitCritical+0x22>
 8028426:	f04f 0350 	mov.w	r3, #80	; 0x50
 802842a:	f383 8811 	msr	BASEPRI, r3
 802842e:	f3bf 8f6f 	isb	sy
 8028432:	f3bf 8f4f 	dsb	sy
 8028436:	607b      	str	r3, [r7, #4]
 8028438:	e7fe      	b.n	8028438 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 802843a:	4b0a      	ldr	r3, [pc, #40]	; (8028464 <vPortExitCritical+0x4c>)
 802843c:	681b      	ldr	r3, [r3, #0]
 802843e:	3b01      	subs	r3, #1
 8028440:	4a08      	ldr	r2, [pc, #32]	; (8028464 <vPortExitCritical+0x4c>)
 8028442:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8028444:	4b07      	ldr	r3, [pc, #28]	; (8028464 <vPortExitCritical+0x4c>)
 8028446:	681b      	ldr	r3, [r3, #0]
 8028448:	2b00      	cmp	r3, #0
 802844a:	d104      	bne.n	8028456 <vPortExitCritical+0x3e>
 802844c:	2300      	movs	r3, #0
 802844e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8028450:	683b      	ldr	r3, [r7, #0]
 8028452:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8028456:	bf00      	nop
 8028458:	370c      	adds	r7, #12
 802845a:	46bd      	mov	sp, r7
 802845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028460:	4770      	bx	lr
 8028462:	bf00      	nop
 8028464:	240006a8 	.word	0x240006a8
	...

08028470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8028470:	f3ef 8009 	mrs	r0, PSP
 8028474:	f3bf 8f6f 	isb	sy
 8028478:	4b15      	ldr	r3, [pc, #84]	; (80284d0 <pxCurrentTCBConst>)
 802847a:	681a      	ldr	r2, [r3, #0]
 802847c:	f01e 0f10 	tst.w	lr, #16
 8028480:	bf08      	it	eq
 8028482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8028486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802848a:	6010      	str	r0, [r2, #0]
 802848c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8028490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8028494:	f380 8811 	msr	BASEPRI, r0
 8028498:	f3bf 8f4f 	dsb	sy
 802849c:	f3bf 8f6f 	isb	sy
 80284a0:	f7fe fcf2 	bl	8026e88 <vTaskSwitchContext>
 80284a4:	f04f 0000 	mov.w	r0, #0
 80284a8:	f380 8811 	msr	BASEPRI, r0
 80284ac:	bc09      	pop	{r0, r3}
 80284ae:	6819      	ldr	r1, [r3, #0]
 80284b0:	6808      	ldr	r0, [r1, #0]
 80284b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284b6:	f01e 0f10 	tst.w	lr, #16
 80284ba:	bf08      	it	eq
 80284bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80284c0:	f380 8809 	msr	PSP, r0
 80284c4:	f3bf 8f6f 	isb	sy
 80284c8:	4770      	bx	lr
 80284ca:	bf00      	nop
 80284cc:	f3af 8000 	nop.w

080284d0 <pxCurrentTCBConst>:
 80284d0:	24001ae8 	.word	0x24001ae8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80284d4:	bf00      	nop
 80284d6:	bf00      	nop

080284d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80284d8:	b580      	push	{r7, lr}
 80284da:	b082      	sub	sp, #8
 80284dc:	af00      	add	r7, sp, #0
	__asm volatile
 80284de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80284e2:	f383 8811 	msr	BASEPRI, r3
 80284e6:	f3bf 8f6f 	isb	sy
 80284ea:	f3bf 8f4f 	dsb	sy
 80284ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80284f0:	f7fe fc12 	bl	8026d18 <xTaskIncrementTick>
 80284f4:	4603      	mov	r3, r0
 80284f6:	2b00      	cmp	r3, #0
 80284f8:	d003      	beq.n	8028502 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80284fa:	4b06      	ldr	r3, [pc, #24]	; (8028514 <SysTick_Handler+0x3c>)
 80284fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028500:	601a      	str	r2, [r3, #0]
 8028502:	2300      	movs	r3, #0
 8028504:	603b      	str	r3, [r7, #0]
	__asm volatile
 8028506:	683b      	ldr	r3, [r7, #0]
 8028508:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 802850c:	bf00      	nop
 802850e:	3708      	adds	r7, #8
 8028510:	46bd      	mov	sp, r7
 8028512:	bd80      	pop	{r7, pc}
 8028514:	e000ed04 	.word	0xe000ed04

08028518 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8028518:	b480      	push	{r7}
 802851a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 802851c:	4b0b      	ldr	r3, [pc, #44]	; (802854c <vPortSetupTimerInterrupt+0x34>)
 802851e:	2200      	movs	r2, #0
 8028520:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8028522:	4b0b      	ldr	r3, [pc, #44]	; (8028550 <vPortSetupTimerInterrupt+0x38>)
 8028524:	2200      	movs	r2, #0
 8028526:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8028528:	4b0a      	ldr	r3, [pc, #40]	; (8028554 <vPortSetupTimerInterrupt+0x3c>)
 802852a:	681b      	ldr	r3, [r3, #0]
 802852c:	4a0a      	ldr	r2, [pc, #40]	; (8028558 <vPortSetupTimerInterrupt+0x40>)
 802852e:	fba2 2303 	umull	r2, r3, r2, r3
 8028532:	099b      	lsrs	r3, r3, #6
 8028534:	4a09      	ldr	r2, [pc, #36]	; (802855c <vPortSetupTimerInterrupt+0x44>)
 8028536:	3b01      	subs	r3, #1
 8028538:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802853a:	4b04      	ldr	r3, [pc, #16]	; (802854c <vPortSetupTimerInterrupt+0x34>)
 802853c:	2207      	movs	r2, #7
 802853e:	601a      	str	r2, [r3, #0]
}
 8028540:	bf00      	nop
 8028542:	46bd      	mov	sp, r7
 8028544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028548:	4770      	bx	lr
 802854a:	bf00      	nop
 802854c:	e000e010 	.word	0xe000e010
 8028550:	e000e018 	.word	0xe000e018
 8028554:	24000698 	.word	0x24000698
 8028558:	10624dd3 	.word	0x10624dd3
 802855c:	e000e014 	.word	0xe000e014

08028560 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8028560:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8028570 <vPortEnableVFP+0x10>
 8028564:	6801      	ldr	r1, [r0, #0]
 8028566:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802856a:	6001      	str	r1, [r0, #0]
 802856c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 802856e:	bf00      	nop
 8028570:	e000ed88 	.word	0xe000ed88

08028574 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8028574:	b480      	push	{r7}
 8028576:	b085      	sub	sp, #20
 8028578:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802857a:	f3ef 8305 	mrs	r3, IPSR
 802857e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8028580:	68fb      	ldr	r3, [r7, #12]
 8028582:	2b0f      	cmp	r3, #15
 8028584:	d913      	bls.n	80285ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8028586:	4a16      	ldr	r2, [pc, #88]	; (80285e0 <vPortValidateInterruptPriority+0x6c>)
 8028588:	68fb      	ldr	r3, [r7, #12]
 802858a:	4413      	add	r3, r2
 802858c:	781b      	ldrb	r3, [r3, #0]
 802858e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8028590:	4b14      	ldr	r3, [pc, #80]	; (80285e4 <vPortValidateInterruptPriority+0x70>)
 8028592:	781b      	ldrb	r3, [r3, #0]
 8028594:	7afa      	ldrb	r2, [r7, #11]
 8028596:	429a      	cmp	r2, r3
 8028598:	d209      	bcs.n	80285ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 802859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802859e:	f383 8811 	msr	BASEPRI, r3
 80285a2:	f3bf 8f6f 	isb	sy
 80285a6:	f3bf 8f4f 	dsb	sy
 80285aa:	607b      	str	r3, [r7, #4]
 80285ac:	e7fe      	b.n	80285ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80285ae:	4b0e      	ldr	r3, [pc, #56]	; (80285e8 <vPortValidateInterruptPriority+0x74>)
 80285b0:	681b      	ldr	r3, [r3, #0]
 80285b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80285b6:	4b0d      	ldr	r3, [pc, #52]	; (80285ec <vPortValidateInterruptPriority+0x78>)
 80285b8:	681b      	ldr	r3, [r3, #0]
 80285ba:	429a      	cmp	r2, r3
 80285bc:	d909      	bls.n	80285d2 <vPortValidateInterruptPriority+0x5e>
 80285be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80285c2:	f383 8811 	msr	BASEPRI, r3
 80285c6:	f3bf 8f6f 	isb	sy
 80285ca:	f3bf 8f4f 	dsb	sy
 80285ce:	603b      	str	r3, [r7, #0]
 80285d0:	e7fe      	b.n	80285d0 <vPortValidateInterruptPriority+0x5c>
	}
 80285d2:	bf00      	nop
 80285d4:	3714      	adds	r7, #20
 80285d6:	46bd      	mov	sp, r7
 80285d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285dc:	4770      	bx	lr
 80285de:	bf00      	nop
 80285e0:	e000e3f0 	.word	0xe000e3f0
 80285e4:	24002114 	.word	0x24002114
 80285e8:	e000ed0c 	.word	0xe000ed0c
 80285ec:	24002118 	.word	0x24002118

080285f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80285f0:	b580      	push	{r7, lr}
 80285f2:	b08a      	sub	sp, #40	; 0x28
 80285f4:	af00      	add	r7, sp, #0
 80285f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80285f8:	2300      	movs	r3, #0
 80285fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80285fc:	f7fe fac0 	bl	8026b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8028600:	4b57      	ldr	r3, [pc, #348]	; (8028760 <pvPortMalloc+0x170>)
 8028602:	681b      	ldr	r3, [r3, #0]
 8028604:	2b00      	cmp	r3, #0
 8028606:	d101      	bne.n	802860c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8028608:	f000 f90c 	bl	8028824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802860c:	4b55      	ldr	r3, [pc, #340]	; (8028764 <pvPortMalloc+0x174>)
 802860e:	681a      	ldr	r2, [r3, #0]
 8028610:	687b      	ldr	r3, [r7, #4]
 8028612:	4013      	ands	r3, r2
 8028614:	2b00      	cmp	r3, #0
 8028616:	f040 808c 	bne.w	8028732 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802861a:	687b      	ldr	r3, [r7, #4]
 802861c:	2b00      	cmp	r3, #0
 802861e:	d01c      	beq.n	802865a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8028620:	2208      	movs	r2, #8
 8028622:	687b      	ldr	r3, [r7, #4]
 8028624:	4413      	add	r3, r2
 8028626:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8028628:	687b      	ldr	r3, [r7, #4]
 802862a:	f003 0307 	and.w	r3, r3, #7
 802862e:	2b00      	cmp	r3, #0
 8028630:	d013      	beq.n	802865a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8028632:	687b      	ldr	r3, [r7, #4]
 8028634:	f023 0307 	bic.w	r3, r3, #7
 8028638:	3308      	adds	r3, #8
 802863a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 802863c:	687b      	ldr	r3, [r7, #4]
 802863e:	f003 0307 	and.w	r3, r3, #7
 8028642:	2b00      	cmp	r3, #0
 8028644:	d009      	beq.n	802865a <pvPortMalloc+0x6a>
 8028646:	f04f 0350 	mov.w	r3, #80	; 0x50
 802864a:	f383 8811 	msr	BASEPRI, r3
 802864e:	f3bf 8f6f 	isb	sy
 8028652:	f3bf 8f4f 	dsb	sy
 8028656:	617b      	str	r3, [r7, #20]
 8028658:	e7fe      	b.n	8028658 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802865a:	687b      	ldr	r3, [r7, #4]
 802865c:	2b00      	cmp	r3, #0
 802865e:	d068      	beq.n	8028732 <pvPortMalloc+0x142>
 8028660:	4b41      	ldr	r3, [pc, #260]	; (8028768 <pvPortMalloc+0x178>)
 8028662:	681b      	ldr	r3, [r3, #0]
 8028664:	687a      	ldr	r2, [r7, #4]
 8028666:	429a      	cmp	r2, r3
 8028668:	d863      	bhi.n	8028732 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802866a:	4b40      	ldr	r3, [pc, #256]	; (802876c <pvPortMalloc+0x17c>)
 802866c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802866e:	4b3f      	ldr	r3, [pc, #252]	; (802876c <pvPortMalloc+0x17c>)
 8028670:	681b      	ldr	r3, [r3, #0]
 8028672:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8028674:	e004      	b.n	8028680 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8028676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 802867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802867c:	681b      	ldr	r3, [r3, #0]
 802867e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8028680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028682:	685b      	ldr	r3, [r3, #4]
 8028684:	687a      	ldr	r2, [r7, #4]
 8028686:	429a      	cmp	r2, r3
 8028688:	d903      	bls.n	8028692 <pvPortMalloc+0xa2>
 802868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802868c:	681b      	ldr	r3, [r3, #0]
 802868e:	2b00      	cmp	r3, #0
 8028690:	d1f1      	bne.n	8028676 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8028692:	4b33      	ldr	r3, [pc, #204]	; (8028760 <pvPortMalloc+0x170>)
 8028694:	681b      	ldr	r3, [r3, #0]
 8028696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028698:	429a      	cmp	r2, r3
 802869a:	d04a      	beq.n	8028732 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 802869c:	6a3b      	ldr	r3, [r7, #32]
 802869e:	681b      	ldr	r3, [r3, #0]
 80286a0:	2208      	movs	r2, #8
 80286a2:	4413      	add	r3, r2
 80286a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80286a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80286a8:	681a      	ldr	r2, [r3, #0]
 80286aa:	6a3b      	ldr	r3, [r7, #32]
 80286ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80286ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80286b0:	685a      	ldr	r2, [r3, #4]
 80286b2:	687b      	ldr	r3, [r7, #4]
 80286b4:	1ad2      	subs	r2, r2, r3
 80286b6:	2308      	movs	r3, #8
 80286b8:	005b      	lsls	r3, r3, #1
 80286ba:	429a      	cmp	r2, r3
 80286bc:	d91e      	bls.n	80286fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80286be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80286c0:	687b      	ldr	r3, [r7, #4]
 80286c2:	4413      	add	r3, r2
 80286c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80286c6:	69bb      	ldr	r3, [r7, #24]
 80286c8:	f003 0307 	and.w	r3, r3, #7
 80286cc:	2b00      	cmp	r3, #0
 80286ce:	d009      	beq.n	80286e4 <pvPortMalloc+0xf4>
 80286d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80286d4:	f383 8811 	msr	BASEPRI, r3
 80286d8:	f3bf 8f6f 	isb	sy
 80286dc:	f3bf 8f4f 	dsb	sy
 80286e0:	613b      	str	r3, [r7, #16]
 80286e2:	e7fe      	b.n	80286e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80286e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80286e6:	685a      	ldr	r2, [r3, #4]
 80286e8:	687b      	ldr	r3, [r7, #4]
 80286ea:	1ad2      	subs	r2, r2, r3
 80286ec:	69bb      	ldr	r3, [r7, #24]
 80286ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80286f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80286f2:	687a      	ldr	r2, [r7, #4]
 80286f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80286f6:	69b8      	ldr	r0, [r7, #24]
 80286f8:	f000 f8f6 	bl	80288e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80286fc:	4b1a      	ldr	r3, [pc, #104]	; (8028768 <pvPortMalloc+0x178>)
 80286fe:	681a      	ldr	r2, [r3, #0]
 8028700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028702:	685b      	ldr	r3, [r3, #4]
 8028704:	1ad3      	subs	r3, r2, r3
 8028706:	4a18      	ldr	r2, [pc, #96]	; (8028768 <pvPortMalloc+0x178>)
 8028708:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802870a:	4b17      	ldr	r3, [pc, #92]	; (8028768 <pvPortMalloc+0x178>)
 802870c:	681a      	ldr	r2, [r3, #0]
 802870e:	4b18      	ldr	r3, [pc, #96]	; (8028770 <pvPortMalloc+0x180>)
 8028710:	681b      	ldr	r3, [r3, #0]
 8028712:	429a      	cmp	r2, r3
 8028714:	d203      	bcs.n	802871e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8028716:	4b14      	ldr	r3, [pc, #80]	; (8028768 <pvPortMalloc+0x178>)
 8028718:	681b      	ldr	r3, [r3, #0]
 802871a:	4a15      	ldr	r2, [pc, #84]	; (8028770 <pvPortMalloc+0x180>)
 802871c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028720:	685a      	ldr	r2, [r3, #4]
 8028722:	4b10      	ldr	r3, [pc, #64]	; (8028764 <pvPortMalloc+0x174>)
 8028724:	681b      	ldr	r3, [r3, #0]
 8028726:	431a      	orrs	r2, r3
 8028728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802872a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 802872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802872e:	2200      	movs	r2, #0
 8028730:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8028732:	f7fe fa33 	bl	8026b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8028736:	69fb      	ldr	r3, [r7, #28]
 8028738:	f003 0307 	and.w	r3, r3, #7
 802873c:	2b00      	cmp	r3, #0
 802873e:	d009      	beq.n	8028754 <pvPortMalloc+0x164>
 8028740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028744:	f383 8811 	msr	BASEPRI, r3
 8028748:	f3bf 8f6f 	isb	sy
 802874c:	f3bf 8f4f 	dsb	sy
 8028750:	60fb      	str	r3, [r7, #12]
 8028752:	e7fe      	b.n	8028752 <pvPortMalloc+0x162>
	return pvReturn;
 8028754:	69fb      	ldr	r3, [r7, #28]
}
 8028756:	4618      	mov	r0, r3
 8028758:	3728      	adds	r7, #40	; 0x28
 802875a:	46bd      	mov	sp, r7
 802875c:	bd80      	pop	{r7, pc}
 802875e:	bf00      	nop
 8028760:	24005d24 	.word	0x24005d24
 8028764:	24005d30 	.word	0x24005d30
 8028768:	24005d28 	.word	0x24005d28
 802876c:	24005d1c 	.word	0x24005d1c
 8028770:	24005d2c 	.word	0x24005d2c

08028774 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8028774:	b580      	push	{r7, lr}
 8028776:	b086      	sub	sp, #24
 8028778:	af00      	add	r7, sp, #0
 802877a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 802877c:	687b      	ldr	r3, [r7, #4]
 802877e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8028780:	687b      	ldr	r3, [r7, #4]
 8028782:	2b00      	cmp	r3, #0
 8028784:	d046      	beq.n	8028814 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8028786:	2308      	movs	r3, #8
 8028788:	425b      	negs	r3, r3
 802878a:	697a      	ldr	r2, [r7, #20]
 802878c:	4413      	add	r3, r2
 802878e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8028790:	697b      	ldr	r3, [r7, #20]
 8028792:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8028794:	693b      	ldr	r3, [r7, #16]
 8028796:	685a      	ldr	r2, [r3, #4]
 8028798:	4b20      	ldr	r3, [pc, #128]	; (802881c <vPortFree+0xa8>)
 802879a:	681b      	ldr	r3, [r3, #0]
 802879c:	4013      	ands	r3, r2
 802879e:	2b00      	cmp	r3, #0
 80287a0:	d109      	bne.n	80287b6 <vPortFree+0x42>
 80287a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80287a6:	f383 8811 	msr	BASEPRI, r3
 80287aa:	f3bf 8f6f 	isb	sy
 80287ae:	f3bf 8f4f 	dsb	sy
 80287b2:	60fb      	str	r3, [r7, #12]
 80287b4:	e7fe      	b.n	80287b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80287b6:	693b      	ldr	r3, [r7, #16]
 80287b8:	681b      	ldr	r3, [r3, #0]
 80287ba:	2b00      	cmp	r3, #0
 80287bc:	d009      	beq.n	80287d2 <vPortFree+0x5e>
 80287be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80287c2:	f383 8811 	msr	BASEPRI, r3
 80287c6:	f3bf 8f6f 	isb	sy
 80287ca:	f3bf 8f4f 	dsb	sy
 80287ce:	60bb      	str	r3, [r7, #8]
 80287d0:	e7fe      	b.n	80287d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80287d2:	693b      	ldr	r3, [r7, #16]
 80287d4:	685a      	ldr	r2, [r3, #4]
 80287d6:	4b11      	ldr	r3, [pc, #68]	; (802881c <vPortFree+0xa8>)
 80287d8:	681b      	ldr	r3, [r3, #0]
 80287da:	4013      	ands	r3, r2
 80287dc:	2b00      	cmp	r3, #0
 80287de:	d019      	beq.n	8028814 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80287e0:	693b      	ldr	r3, [r7, #16]
 80287e2:	681b      	ldr	r3, [r3, #0]
 80287e4:	2b00      	cmp	r3, #0
 80287e6:	d115      	bne.n	8028814 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80287e8:	693b      	ldr	r3, [r7, #16]
 80287ea:	685a      	ldr	r2, [r3, #4]
 80287ec:	4b0b      	ldr	r3, [pc, #44]	; (802881c <vPortFree+0xa8>)
 80287ee:	681b      	ldr	r3, [r3, #0]
 80287f0:	43db      	mvns	r3, r3
 80287f2:	401a      	ands	r2, r3
 80287f4:	693b      	ldr	r3, [r7, #16]
 80287f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80287f8:	f7fe f9c2 	bl	8026b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80287fc:	693b      	ldr	r3, [r7, #16]
 80287fe:	685a      	ldr	r2, [r3, #4]
 8028800:	4b07      	ldr	r3, [pc, #28]	; (8028820 <vPortFree+0xac>)
 8028802:	681b      	ldr	r3, [r3, #0]
 8028804:	4413      	add	r3, r2
 8028806:	4a06      	ldr	r2, [pc, #24]	; (8028820 <vPortFree+0xac>)
 8028808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802880a:	6938      	ldr	r0, [r7, #16]
 802880c:	f000 f86c 	bl	80288e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8028810:	f7fe f9c4 	bl	8026b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8028814:	bf00      	nop
 8028816:	3718      	adds	r7, #24
 8028818:	46bd      	mov	sp, r7
 802881a:	bd80      	pop	{r7, pc}
 802881c:	24005d30 	.word	0x24005d30
 8028820:	24005d28 	.word	0x24005d28

08028824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8028824:	b480      	push	{r7}
 8028826:	b085      	sub	sp, #20
 8028828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802882a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 802882e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8028830:	4b27      	ldr	r3, [pc, #156]	; (80288d0 <prvHeapInit+0xac>)
 8028832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8028834:	68fb      	ldr	r3, [r7, #12]
 8028836:	f003 0307 	and.w	r3, r3, #7
 802883a:	2b00      	cmp	r3, #0
 802883c:	d00c      	beq.n	8028858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802883e:	68fb      	ldr	r3, [r7, #12]
 8028840:	3307      	adds	r3, #7
 8028842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8028844:	68fb      	ldr	r3, [r7, #12]
 8028846:	f023 0307 	bic.w	r3, r3, #7
 802884a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802884c:	68ba      	ldr	r2, [r7, #8]
 802884e:	68fb      	ldr	r3, [r7, #12]
 8028850:	1ad3      	subs	r3, r2, r3
 8028852:	4a1f      	ldr	r2, [pc, #124]	; (80288d0 <prvHeapInit+0xac>)
 8028854:	4413      	add	r3, r2
 8028856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8028858:	68fb      	ldr	r3, [r7, #12]
 802885a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802885c:	4a1d      	ldr	r2, [pc, #116]	; (80288d4 <prvHeapInit+0xb0>)
 802885e:	687b      	ldr	r3, [r7, #4]
 8028860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8028862:	4b1c      	ldr	r3, [pc, #112]	; (80288d4 <prvHeapInit+0xb0>)
 8028864:	2200      	movs	r2, #0
 8028866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8028868:	687b      	ldr	r3, [r7, #4]
 802886a:	68ba      	ldr	r2, [r7, #8]
 802886c:	4413      	add	r3, r2
 802886e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8028870:	2208      	movs	r2, #8
 8028872:	68fb      	ldr	r3, [r7, #12]
 8028874:	1a9b      	subs	r3, r3, r2
 8028876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8028878:	68fb      	ldr	r3, [r7, #12]
 802887a:	f023 0307 	bic.w	r3, r3, #7
 802887e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8028880:	68fb      	ldr	r3, [r7, #12]
 8028882:	4a15      	ldr	r2, [pc, #84]	; (80288d8 <prvHeapInit+0xb4>)
 8028884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8028886:	4b14      	ldr	r3, [pc, #80]	; (80288d8 <prvHeapInit+0xb4>)
 8028888:	681b      	ldr	r3, [r3, #0]
 802888a:	2200      	movs	r2, #0
 802888c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802888e:	4b12      	ldr	r3, [pc, #72]	; (80288d8 <prvHeapInit+0xb4>)
 8028890:	681b      	ldr	r3, [r3, #0]
 8028892:	2200      	movs	r2, #0
 8028894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8028896:	687b      	ldr	r3, [r7, #4]
 8028898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802889a:	683b      	ldr	r3, [r7, #0]
 802889c:	68fa      	ldr	r2, [r7, #12]
 802889e:	1ad2      	subs	r2, r2, r3
 80288a0:	683b      	ldr	r3, [r7, #0]
 80288a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80288a4:	4b0c      	ldr	r3, [pc, #48]	; (80288d8 <prvHeapInit+0xb4>)
 80288a6:	681a      	ldr	r2, [r3, #0]
 80288a8:	683b      	ldr	r3, [r7, #0]
 80288aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80288ac:	683b      	ldr	r3, [r7, #0]
 80288ae:	685b      	ldr	r3, [r3, #4]
 80288b0:	4a0a      	ldr	r2, [pc, #40]	; (80288dc <prvHeapInit+0xb8>)
 80288b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80288b4:	683b      	ldr	r3, [r7, #0]
 80288b6:	685b      	ldr	r3, [r3, #4]
 80288b8:	4a09      	ldr	r2, [pc, #36]	; (80288e0 <prvHeapInit+0xbc>)
 80288ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80288bc:	4b09      	ldr	r3, [pc, #36]	; (80288e4 <prvHeapInit+0xc0>)
 80288be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80288c2:	601a      	str	r2, [r3, #0]
}
 80288c4:	bf00      	nop
 80288c6:	3714      	adds	r7, #20
 80288c8:	46bd      	mov	sp, r7
 80288ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288ce:	4770      	bx	lr
 80288d0:	2400211c 	.word	0x2400211c
 80288d4:	24005d1c 	.word	0x24005d1c
 80288d8:	24005d24 	.word	0x24005d24
 80288dc:	24005d2c 	.word	0x24005d2c
 80288e0:	24005d28 	.word	0x24005d28
 80288e4:	24005d30 	.word	0x24005d30

080288e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80288e8:	b480      	push	{r7}
 80288ea:	b085      	sub	sp, #20
 80288ec:	af00      	add	r7, sp, #0
 80288ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80288f0:	4b28      	ldr	r3, [pc, #160]	; (8028994 <prvInsertBlockIntoFreeList+0xac>)
 80288f2:	60fb      	str	r3, [r7, #12]
 80288f4:	e002      	b.n	80288fc <prvInsertBlockIntoFreeList+0x14>
 80288f6:	68fb      	ldr	r3, [r7, #12]
 80288f8:	681b      	ldr	r3, [r3, #0]
 80288fa:	60fb      	str	r3, [r7, #12]
 80288fc:	68fb      	ldr	r3, [r7, #12]
 80288fe:	681b      	ldr	r3, [r3, #0]
 8028900:	687a      	ldr	r2, [r7, #4]
 8028902:	429a      	cmp	r2, r3
 8028904:	d8f7      	bhi.n	80288f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8028906:	68fb      	ldr	r3, [r7, #12]
 8028908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802890a:	68fb      	ldr	r3, [r7, #12]
 802890c:	685b      	ldr	r3, [r3, #4]
 802890e:	68ba      	ldr	r2, [r7, #8]
 8028910:	4413      	add	r3, r2
 8028912:	687a      	ldr	r2, [r7, #4]
 8028914:	429a      	cmp	r2, r3
 8028916:	d108      	bne.n	802892a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8028918:	68fb      	ldr	r3, [r7, #12]
 802891a:	685a      	ldr	r2, [r3, #4]
 802891c:	687b      	ldr	r3, [r7, #4]
 802891e:	685b      	ldr	r3, [r3, #4]
 8028920:	441a      	add	r2, r3
 8028922:	68fb      	ldr	r3, [r7, #12]
 8028924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8028926:	68fb      	ldr	r3, [r7, #12]
 8028928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802892a:	687b      	ldr	r3, [r7, #4]
 802892c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802892e:	687b      	ldr	r3, [r7, #4]
 8028930:	685b      	ldr	r3, [r3, #4]
 8028932:	68ba      	ldr	r2, [r7, #8]
 8028934:	441a      	add	r2, r3
 8028936:	68fb      	ldr	r3, [r7, #12]
 8028938:	681b      	ldr	r3, [r3, #0]
 802893a:	429a      	cmp	r2, r3
 802893c:	d118      	bne.n	8028970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802893e:	68fb      	ldr	r3, [r7, #12]
 8028940:	681a      	ldr	r2, [r3, #0]
 8028942:	4b15      	ldr	r3, [pc, #84]	; (8028998 <prvInsertBlockIntoFreeList+0xb0>)
 8028944:	681b      	ldr	r3, [r3, #0]
 8028946:	429a      	cmp	r2, r3
 8028948:	d00d      	beq.n	8028966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802894a:	687b      	ldr	r3, [r7, #4]
 802894c:	685a      	ldr	r2, [r3, #4]
 802894e:	68fb      	ldr	r3, [r7, #12]
 8028950:	681b      	ldr	r3, [r3, #0]
 8028952:	685b      	ldr	r3, [r3, #4]
 8028954:	441a      	add	r2, r3
 8028956:	687b      	ldr	r3, [r7, #4]
 8028958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802895a:	68fb      	ldr	r3, [r7, #12]
 802895c:	681b      	ldr	r3, [r3, #0]
 802895e:	681a      	ldr	r2, [r3, #0]
 8028960:	687b      	ldr	r3, [r7, #4]
 8028962:	601a      	str	r2, [r3, #0]
 8028964:	e008      	b.n	8028978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8028966:	4b0c      	ldr	r3, [pc, #48]	; (8028998 <prvInsertBlockIntoFreeList+0xb0>)
 8028968:	681a      	ldr	r2, [r3, #0]
 802896a:	687b      	ldr	r3, [r7, #4]
 802896c:	601a      	str	r2, [r3, #0]
 802896e:	e003      	b.n	8028978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8028970:	68fb      	ldr	r3, [r7, #12]
 8028972:	681a      	ldr	r2, [r3, #0]
 8028974:	687b      	ldr	r3, [r7, #4]
 8028976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8028978:	68fa      	ldr	r2, [r7, #12]
 802897a:	687b      	ldr	r3, [r7, #4]
 802897c:	429a      	cmp	r2, r3
 802897e:	d002      	beq.n	8028986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8028980:	68fb      	ldr	r3, [r7, #12]
 8028982:	687a      	ldr	r2, [r7, #4]
 8028984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8028986:	bf00      	nop
 8028988:	3714      	adds	r7, #20
 802898a:	46bd      	mov	sp, r7
 802898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028990:	4770      	bx	lr
 8028992:	bf00      	nop
 8028994:	24005d1c 	.word	0x24005d1c
 8028998:	24005d24 	.word	0x24005d24
 802899c:	00000000 	.word	0x00000000

080289a0 <cos>:
 80289a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80289a2:	eeb0 7b40 	vmov.f64	d7, d0
 80289a6:	ee17 3a90 	vmov	r3, s15
 80289aa:	4a19      	ldr	r2, [pc, #100]	; (8028a10 <cos+0x70>)
 80289ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80289b0:	4293      	cmp	r3, r2
 80289b2:	dc04      	bgt.n	80289be <cos+0x1e>
 80289b4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8028a08 <cos+0x68>
 80289b8:	f001 fd62 	bl	802a480 <__kernel_cos>
 80289bc:	e004      	b.n	80289c8 <cos+0x28>
 80289be:	4a15      	ldr	r2, [pc, #84]	; (8028a14 <cos+0x74>)
 80289c0:	4293      	cmp	r3, r2
 80289c2:	dd04      	ble.n	80289ce <cos+0x2e>
 80289c4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80289c8:	b005      	add	sp, #20
 80289ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80289ce:	4668      	mov	r0, sp
 80289d0:	f001 f952 	bl	8029c78 <__ieee754_rem_pio2>
 80289d4:	f000 0003 	and.w	r0, r0, #3
 80289d8:	2801      	cmp	r0, #1
 80289da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80289de:	ed9d 0b00 	vldr	d0, [sp]
 80289e2:	d007      	beq.n	80289f4 <cos+0x54>
 80289e4:	2802      	cmp	r0, #2
 80289e6:	d00a      	beq.n	80289fe <cos+0x5e>
 80289e8:	2800      	cmp	r0, #0
 80289ea:	d0e5      	beq.n	80289b8 <cos+0x18>
 80289ec:	2001      	movs	r0, #1
 80289ee:	f002 f84f 	bl	802aa90 <__kernel_sin>
 80289f2:	e7e9      	b.n	80289c8 <cos+0x28>
 80289f4:	f002 f84c 	bl	802aa90 <__kernel_sin>
 80289f8:	eeb1 0b40 	vneg.f64	d0, d0
 80289fc:	e7e4      	b.n	80289c8 <cos+0x28>
 80289fe:	f001 fd3f 	bl	802a480 <__kernel_cos>
 8028a02:	e7f9      	b.n	80289f8 <cos+0x58>
 8028a04:	f3af 8000 	nop.w
	...
 8028a10:	3fe921fb 	.word	0x3fe921fb
 8028a14:	7fefffff 	.word	0x7fefffff

08028a18 <floor>:
 8028a18:	ee10 1a90 	vmov	r1, s1
 8028a1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8028a20:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8028a24:	2b13      	cmp	r3, #19
 8028a26:	b530      	push	{r4, r5, lr}
 8028a28:	ee10 0a10 	vmov	r0, s0
 8028a2c:	ee10 5a10 	vmov	r5, s0
 8028a30:	dc33      	bgt.n	8028a9a <floor+0x82>
 8028a32:	2b00      	cmp	r3, #0
 8028a34:	da17      	bge.n	8028a66 <floor+0x4e>
 8028a36:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8028af8 <floor+0xe0>
 8028a3a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8028a3e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8028a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028a46:	dd09      	ble.n	8028a5c <floor+0x44>
 8028a48:	2900      	cmp	r1, #0
 8028a4a:	da50      	bge.n	8028aee <floor+0xd6>
 8028a4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8028a50:	4a2b      	ldr	r2, [pc, #172]	; (8028b00 <floor+0xe8>)
 8028a52:	4303      	orrs	r3, r0
 8028a54:	2000      	movs	r0, #0
 8028a56:	4283      	cmp	r3, r0
 8028a58:	bf18      	it	ne
 8028a5a:	4611      	movne	r1, r2
 8028a5c:	460b      	mov	r3, r1
 8028a5e:	4602      	mov	r2, r0
 8028a60:	ec43 2b10 	vmov	d0, r2, r3
 8028a64:	e020      	b.n	8028aa8 <floor+0x90>
 8028a66:	4a27      	ldr	r2, [pc, #156]	; (8028b04 <floor+0xec>)
 8028a68:	411a      	asrs	r2, r3
 8028a6a:	ea01 0402 	and.w	r4, r1, r2
 8028a6e:	4304      	orrs	r4, r0
 8028a70:	d01a      	beq.n	8028aa8 <floor+0x90>
 8028a72:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8028af8 <floor+0xe0>
 8028a76:	ee30 0b07 	vadd.f64	d0, d0, d7
 8028a7a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8028a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028a82:	ddeb      	ble.n	8028a5c <floor+0x44>
 8028a84:	2900      	cmp	r1, #0
 8028a86:	bfbe      	ittt	lt
 8028a88:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8028a8c:	fa40 f303 	asrlt.w	r3, r0, r3
 8028a90:	18c9      	addlt	r1, r1, r3
 8028a92:	ea21 0102 	bic.w	r1, r1, r2
 8028a96:	2000      	movs	r0, #0
 8028a98:	e7e0      	b.n	8028a5c <floor+0x44>
 8028a9a:	2b33      	cmp	r3, #51	; 0x33
 8028a9c:	dd05      	ble.n	8028aaa <floor+0x92>
 8028a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028aa2:	d101      	bne.n	8028aa8 <floor+0x90>
 8028aa4:	ee30 0b00 	vadd.f64	d0, d0, d0
 8028aa8:	bd30      	pop	{r4, r5, pc}
 8028aaa:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8028aae:	f04f 32ff 	mov.w	r2, #4294967295
 8028ab2:	40e2      	lsrs	r2, r4
 8028ab4:	4202      	tst	r2, r0
 8028ab6:	d0f7      	beq.n	8028aa8 <floor+0x90>
 8028ab8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8028af8 <floor+0xe0>
 8028abc:	ee30 0b07 	vadd.f64	d0, d0, d7
 8028ac0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8028ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ac8:	ddc8      	ble.n	8028a5c <floor+0x44>
 8028aca:	2900      	cmp	r1, #0
 8028acc:	da02      	bge.n	8028ad4 <floor+0xbc>
 8028ace:	2b14      	cmp	r3, #20
 8028ad0:	d103      	bne.n	8028ada <floor+0xc2>
 8028ad2:	3101      	adds	r1, #1
 8028ad4:	ea20 0002 	bic.w	r0, r0, r2
 8028ad8:	e7c0      	b.n	8028a5c <floor+0x44>
 8028ada:	2401      	movs	r4, #1
 8028adc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8028ae0:	fa04 f303 	lsl.w	r3, r4, r3
 8028ae4:	4418      	add	r0, r3
 8028ae6:	42a8      	cmp	r0, r5
 8028ae8:	bf38      	it	cc
 8028aea:	1909      	addcc	r1, r1, r4
 8028aec:	e7f2      	b.n	8028ad4 <floor+0xbc>
 8028aee:	2000      	movs	r0, #0
 8028af0:	4601      	mov	r1, r0
 8028af2:	e7b3      	b.n	8028a5c <floor+0x44>
 8028af4:	f3af 8000 	nop.w
 8028af8:	8800759c 	.word	0x8800759c
 8028afc:	7e37e43c 	.word	0x7e37e43c
 8028b00:	bff00000 	.word	0xbff00000
 8028b04:	000fffff 	.word	0x000fffff

08028b08 <sin>:
 8028b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028b0a:	eeb0 7b40 	vmov.f64	d7, d0
 8028b0e:	ee17 3a90 	vmov	r3, s15
 8028b12:	4a19      	ldr	r2, [pc, #100]	; (8028b78 <sin+0x70>)
 8028b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028b18:	4293      	cmp	r3, r2
 8028b1a:	dc05      	bgt.n	8028b28 <sin+0x20>
 8028b1c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8028b70 <sin+0x68>
 8028b20:	2000      	movs	r0, #0
 8028b22:	f001 ffb5 	bl	802aa90 <__kernel_sin>
 8028b26:	e004      	b.n	8028b32 <sin+0x2a>
 8028b28:	4a14      	ldr	r2, [pc, #80]	; (8028b7c <sin+0x74>)
 8028b2a:	4293      	cmp	r3, r2
 8028b2c:	dd04      	ble.n	8028b38 <sin+0x30>
 8028b2e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8028b32:	b005      	add	sp, #20
 8028b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8028b38:	4668      	mov	r0, sp
 8028b3a:	f001 f89d 	bl	8029c78 <__ieee754_rem_pio2>
 8028b3e:	f000 0003 	and.w	r0, r0, #3
 8028b42:	2801      	cmp	r0, #1
 8028b44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8028b48:	ed9d 0b00 	vldr	d0, [sp]
 8028b4c:	d004      	beq.n	8028b58 <sin+0x50>
 8028b4e:	2802      	cmp	r0, #2
 8028b50:	d005      	beq.n	8028b5e <sin+0x56>
 8028b52:	b950      	cbnz	r0, 8028b6a <sin+0x62>
 8028b54:	2001      	movs	r0, #1
 8028b56:	e7e4      	b.n	8028b22 <sin+0x1a>
 8028b58:	f001 fc92 	bl	802a480 <__kernel_cos>
 8028b5c:	e7e9      	b.n	8028b32 <sin+0x2a>
 8028b5e:	2001      	movs	r0, #1
 8028b60:	f001 ff96 	bl	802aa90 <__kernel_sin>
 8028b64:	eeb1 0b40 	vneg.f64	d0, d0
 8028b68:	e7e3      	b.n	8028b32 <sin+0x2a>
 8028b6a:	f001 fc89 	bl	802a480 <__kernel_cos>
 8028b6e:	e7f9      	b.n	8028b64 <sin+0x5c>
	...
 8028b78:	3fe921fb 	.word	0x3fe921fb
 8028b7c:	7fefffff 	.word	0x7fefffff

08028b80 <cosf>:
 8028b80:	ee10 3a10 	vmov	r3, s0
 8028b84:	b507      	push	{r0, r1, r2, lr}
 8028b86:	4a1c      	ldr	r2, [pc, #112]	; (8028bf8 <cosf+0x78>)
 8028b88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028b8c:	4293      	cmp	r3, r2
 8028b8e:	dc04      	bgt.n	8028b9a <cosf+0x1a>
 8028b90:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8028bfc <cosf+0x7c>
 8028b94:	f001 ffd4 	bl	802ab40 <__kernel_cosf>
 8028b98:	e004      	b.n	8028ba4 <cosf+0x24>
 8028b9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8028b9e:	db04      	blt.n	8028baa <cosf+0x2a>
 8028ba0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8028ba4:	b003      	add	sp, #12
 8028ba6:	f85d fb04 	ldr.w	pc, [sp], #4
 8028baa:	4668      	mov	r0, sp
 8028bac:	f001 fb36 	bl	802a21c <__ieee754_rem_pio2f>
 8028bb0:	f000 0003 	and.w	r0, r0, #3
 8028bb4:	2801      	cmp	r0, #1
 8028bb6:	d007      	beq.n	8028bc8 <cosf+0x48>
 8028bb8:	2802      	cmp	r0, #2
 8028bba:	d00e      	beq.n	8028bda <cosf+0x5a>
 8028bbc:	b9a0      	cbnz	r0, 8028be8 <cosf+0x68>
 8028bbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8028bc2:	ed9d 0a00 	vldr	s0, [sp]
 8028bc6:	e7e5      	b.n	8028b94 <cosf+0x14>
 8028bc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8028bcc:	ed9d 0a00 	vldr	s0, [sp]
 8028bd0:	f002 fa96 	bl	802b100 <__kernel_sinf>
 8028bd4:	eeb1 0a40 	vneg.f32	s0, s0
 8028bd8:	e7e4      	b.n	8028ba4 <cosf+0x24>
 8028bda:	eddd 0a01 	vldr	s1, [sp, #4]
 8028bde:	ed9d 0a00 	vldr	s0, [sp]
 8028be2:	f001 ffad 	bl	802ab40 <__kernel_cosf>
 8028be6:	e7f5      	b.n	8028bd4 <cosf+0x54>
 8028be8:	2001      	movs	r0, #1
 8028bea:	eddd 0a01 	vldr	s1, [sp, #4]
 8028bee:	ed9d 0a00 	vldr	s0, [sp]
 8028bf2:	f002 fa85 	bl	802b100 <__kernel_sinf>
 8028bf6:	e7d5      	b.n	8028ba4 <cosf+0x24>
 8028bf8:	3f490fd8 	.word	0x3f490fd8
 8028bfc:	00000000 	.word	0x00000000

08028c00 <sinf>:
 8028c00:	ee10 3a10 	vmov	r3, s0
 8028c04:	b507      	push	{r0, r1, r2, lr}
 8028c06:	4a1d      	ldr	r2, [pc, #116]	; (8028c7c <sinf+0x7c>)
 8028c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028c0c:	4293      	cmp	r3, r2
 8028c0e:	dc05      	bgt.n	8028c1c <sinf+0x1c>
 8028c10:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8028c80 <sinf+0x80>
 8028c14:	2000      	movs	r0, #0
 8028c16:	f002 fa73 	bl	802b100 <__kernel_sinf>
 8028c1a:	e004      	b.n	8028c26 <sinf+0x26>
 8028c1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8028c20:	db04      	blt.n	8028c2c <sinf+0x2c>
 8028c22:	ee30 0a40 	vsub.f32	s0, s0, s0
 8028c26:	b003      	add	sp, #12
 8028c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8028c2c:	4668      	mov	r0, sp
 8028c2e:	f001 faf5 	bl	802a21c <__ieee754_rem_pio2f>
 8028c32:	f000 0003 	and.w	r0, r0, #3
 8028c36:	2801      	cmp	r0, #1
 8028c38:	d008      	beq.n	8028c4c <sinf+0x4c>
 8028c3a:	2802      	cmp	r0, #2
 8028c3c:	d00d      	beq.n	8028c5a <sinf+0x5a>
 8028c3e:	b9b0      	cbnz	r0, 8028c6e <sinf+0x6e>
 8028c40:	2001      	movs	r0, #1
 8028c42:	eddd 0a01 	vldr	s1, [sp, #4]
 8028c46:	ed9d 0a00 	vldr	s0, [sp]
 8028c4a:	e7e4      	b.n	8028c16 <sinf+0x16>
 8028c4c:	eddd 0a01 	vldr	s1, [sp, #4]
 8028c50:	ed9d 0a00 	vldr	s0, [sp]
 8028c54:	f001 ff74 	bl	802ab40 <__kernel_cosf>
 8028c58:	e7e5      	b.n	8028c26 <sinf+0x26>
 8028c5a:	2001      	movs	r0, #1
 8028c5c:	eddd 0a01 	vldr	s1, [sp, #4]
 8028c60:	ed9d 0a00 	vldr	s0, [sp]
 8028c64:	f002 fa4c 	bl	802b100 <__kernel_sinf>
 8028c68:	eeb1 0a40 	vneg.f32	s0, s0
 8028c6c:	e7db      	b.n	8028c26 <sinf+0x26>
 8028c6e:	eddd 0a01 	vldr	s1, [sp, #4]
 8028c72:	ed9d 0a00 	vldr	s0, [sp]
 8028c76:	f001 ff63 	bl	802ab40 <__kernel_cosf>
 8028c7a:	e7f5      	b.n	8028c68 <sinf+0x68>
 8028c7c:	3f490fd8 	.word	0x3f490fd8
 8028c80:	00000000 	.word	0x00000000

08028c84 <atan2>:
 8028c84:	f000 ba78 	b.w	8029178 <__ieee754_atan2>

08028c88 <fmod>:
 8028c88:	b500      	push	{lr}
 8028c8a:	ed2d 8b04 	vpush	{d8-d9}
 8028c8e:	eeb0 8b40 	vmov.f64	d8, d0
 8028c92:	eeb0 9b41 	vmov.f64	d9, d1
 8028c96:	b08b      	sub	sp, #44	; 0x2c
 8028c98:	f000 fb50 	bl	802933c <__ieee754_fmod>
 8028c9c:	4b22      	ldr	r3, [pc, #136]	; (8028d28 <fmod+0xa0>)
 8028c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8028ca2:	1c5a      	adds	r2, r3, #1
 8028ca4:	d029      	beq.n	8028cfa <fmod+0x72>
 8028ca6:	eeb4 9b49 	vcmp.f64	d9, d9
 8028caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cae:	d624      	bvs.n	8028cfa <fmod+0x72>
 8028cb0:	eeb4 8b48 	vcmp.f64	d8, d8
 8028cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cb8:	d61f      	bvs.n	8028cfa <fmod+0x72>
 8028cba:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8028d20 <fmod+0x98>
 8028cbe:	eeb4 9b47 	vcmp.f64	d9, d7
 8028cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cc6:	d118      	bne.n	8028cfa <fmod+0x72>
 8028cc8:	2201      	movs	r2, #1
 8028cca:	9200      	str	r2, [sp, #0]
 8028ccc:	4a17      	ldr	r2, [pc, #92]	; (8028d2c <fmod+0xa4>)
 8028cce:	9201      	str	r2, [sp, #4]
 8028cd0:	2200      	movs	r2, #0
 8028cd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8028cd6:	ed8d 9b04 	vstr	d9, [sp, #16]
 8028cda:	9208      	str	r2, [sp, #32]
 8028cdc:	b993      	cbnz	r3, 8028d04 <fmod+0x7c>
 8028cde:	ed8d 8b06 	vstr	d8, [sp, #24]
 8028ce2:	4668      	mov	r0, sp
 8028ce4:	f002 fb5f 	bl	802b3a6 <matherr>
 8028ce8:	b190      	cbz	r0, 8028d10 <fmod+0x88>
 8028cea:	9b08      	ldr	r3, [sp, #32]
 8028cec:	b11b      	cbz	r3, 8028cf6 <fmod+0x6e>
 8028cee:	f002 fe27 	bl	802b940 <__errno>
 8028cf2:	9b08      	ldr	r3, [sp, #32]
 8028cf4:	6003      	str	r3, [r0, #0]
 8028cf6:	ed9d 0b06 	vldr	d0, [sp, #24]
 8028cfa:	b00b      	add	sp, #44	; 0x2c
 8028cfc:	ecbd 8b04 	vpop	{d8-d9}
 8028d00:	f85d fb04 	ldr.w	pc, [sp], #4
 8028d04:	2b02      	cmp	r3, #2
 8028d06:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8028d0a:	ed8d 6b06 	vstr	d6, [sp, #24]
 8028d0e:	d1e8      	bne.n	8028ce2 <fmod+0x5a>
 8028d10:	f002 fe16 	bl	802b940 <__errno>
 8028d14:	2321      	movs	r3, #33	; 0x21
 8028d16:	6003      	str	r3, [r0, #0]
 8028d18:	e7e7      	b.n	8028cea <fmod+0x62>
 8028d1a:	bf00      	nop
 8028d1c:	f3af 8000 	nop.w
	...
 8028d28:	240006ac 	.word	0x240006ac
 8028d2c:	0802d7f0 	.word	0x0802d7f0

08028d30 <pow>:
 8028d30:	b570      	push	{r4, r5, r6, lr}
 8028d32:	ed2d 8b0a 	vpush	{d8-d12}
 8028d36:	eeb0 9b40 	vmov.f64	d9, d0
 8028d3a:	eeb0 8b41 	vmov.f64	d8, d1
 8028d3e:	4c8c      	ldr	r4, [pc, #560]	; (8028f70 <pow+0x240>)
 8028d40:	b08a      	sub	sp, #40	; 0x28
 8028d42:	f000 fc11 	bl	8029568 <__ieee754_pow>
 8028d46:	f994 3000 	ldrsb.w	r3, [r4]
 8028d4a:	eeb0 ab40 	vmov.f64	d10, d0
 8028d4e:	1c5a      	adds	r2, r3, #1
 8028d50:	4626      	mov	r6, r4
 8028d52:	d04b      	beq.n	8028dec <pow+0xbc>
 8028d54:	eeb4 8b48 	vcmp.f64	d8, d8
 8028d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d5c:	d646      	bvs.n	8028dec <pow+0xbc>
 8028d5e:	eeb4 9b49 	vcmp.f64	d9, d9
 8028d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d66:	d719      	bvc.n	8028d9c <pow+0x6c>
 8028d68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8028d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d70:	d13c      	bne.n	8028dec <pow+0xbc>
 8028d72:	2201      	movs	r2, #1
 8028d74:	9200      	str	r2, [sp, #0]
 8028d76:	497f      	ldr	r1, [pc, #508]	; (8028f74 <pow+0x244>)
 8028d78:	4a7f      	ldr	r2, [pc, #508]	; (8028f78 <pow+0x248>)
 8028d7a:	9201      	str	r2, [sp, #4]
 8028d7c:	2000      	movs	r0, #0
 8028d7e:	2200      	movs	r2, #0
 8028d80:	2b02      	cmp	r3, #2
 8028d82:	9208      	str	r2, [sp, #32]
 8028d84:	ed8d 9b02 	vstr	d9, [sp, #8]
 8028d88:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028d8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8028d90:	d02a      	beq.n	8028de8 <pow+0xb8>
 8028d92:	4668      	mov	r0, sp
 8028d94:	f002 fb07 	bl	802b3a6 <matherr>
 8028d98:	bb00      	cbnz	r0, 8028ddc <pow+0xac>
 8028d9a:	e04e      	b.n	8028e3a <pow+0x10a>
 8028d9c:	ed9f bb72 	vldr	d11, [pc, #456]	; 8028f68 <pow+0x238>
 8028da0:	eeb4 9b4b 	vcmp.f64	d9, d11
 8028da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028da8:	eeb0 cb4b 	vmov.f64	d12, d11
 8028dac:	d14a      	bne.n	8028e44 <pow+0x114>
 8028dae:	eeb4 8b4b 	vcmp.f64	d8, d11
 8028db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028db6:	d11f      	bne.n	8028df8 <pow+0xc8>
 8028db8:	2201      	movs	r2, #1
 8028dba:	9200      	str	r2, [sp, #0]
 8028dbc:	4a6e      	ldr	r2, [pc, #440]	; (8028f78 <pow+0x248>)
 8028dbe:	9201      	str	r2, [sp, #4]
 8028dc0:	2200      	movs	r2, #0
 8028dc2:	9208      	str	r2, [sp, #32]
 8028dc4:	ed8d 9b02 	vstr	d9, [sp, #8]
 8028dc8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028dcc:	ed8d bb06 	vstr	d11, [sp, #24]
 8028dd0:	2b00      	cmp	r3, #0
 8028dd2:	d0de      	beq.n	8028d92 <pow+0x62>
 8028dd4:	4b67      	ldr	r3, [pc, #412]	; (8028f74 <pow+0x244>)
 8028dd6:	2200      	movs	r2, #0
 8028dd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028ddc:	9b08      	ldr	r3, [sp, #32]
 8028dde:	b11b      	cbz	r3, 8028de8 <pow+0xb8>
 8028de0:	f002 fdae 	bl	802b940 <__errno>
 8028de4:	9b08      	ldr	r3, [sp, #32]
 8028de6:	6003      	str	r3, [r0, #0]
 8028de8:	ed9d ab06 	vldr	d10, [sp, #24]
 8028dec:	eeb0 0b4a 	vmov.f64	d0, d10
 8028df0:	b00a      	add	sp, #40	; 0x28
 8028df2:	ecbd 8b0a 	vpop	{d8-d12}
 8028df6:	bd70      	pop	{r4, r5, r6, pc}
 8028df8:	eeb0 0b48 	vmov.f64	d0, d8
 8028dfc:	f002 facb 	bl	802b396 <finite>
 8028e00:	2800      	cmp	r0, #0
 8028e02:	d0f3      	beq.n	8028dec <pow+0xbc>
 8028e04:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8028e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e0c:	d5ee      	bpl.n	8028dec <pow+0xbc>
 8028e0e:	2301      	movs	r3, #1
 8028e10:	9300      	str	r3, [sp, #0]
 8028e12:	4b59      	ldr	r3, [pc, #356]	; (8028f78 <pow+0x248>)
 8028e14:	9301      	str	r3, [sp, #4]
 8028e16:	2300      	movs	r3, #0
 8028e18:	9308      	str	r3, [sp, #32]
 8028e1a:	f994 3000 	ldrsb.w	r3, [r4]
 8028e1e:	ed8d 9b02 	vstr	d9, [sp, #8]
 8028e22:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028e26:	b913      	cbnz	r3, 8028e2e <pow+0xfe>
 8028e28:	ed8d bb06 	vstr	d11, [sp, #24]
 8028e2c:	e7b1      	b.n	8028d92 <pow+0x62>
 8028e2e:	4953      	ldr	r1, [pc, #332]	; (8028f7c <pow+0x24c>)
 8028e30:	2000      	movs	r0, #0
 8028e32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8028e36:	2b02      	cmp	r3, #2
 8028e38:	d1ab      	bne.n	8028d92 <pow+0x62>
 8028e3a:	f002 fd81 	bl	802b940 <__errno>
 8028e3e:	2321      	movs	r3, #33	; 0x21
 8028e40:	6003      	str	r3, [r0, #0]
 8028e42:	e7cb      	b.n	8028ddc <pow+0xac>
 8028e44:	f002 faa7 	bl	802b396 <finite>
 8028e48:	4605      	mov	r5, r0
 8028e4a:	2800      	cmp	r0, #0
 8028e4c:	d164      	bne.n	8028f18 <pow+0x1e8>
 8028e4e:	eeb0 0b49 	vmov.f64	d0, d9
 8028e52:	f002 faa0 	bl	802b396 <finite>
 8028e56:	2800      	cmp	r0, #0
 8028e58:	d05e      	beq.n	8028f18 <pow+0x1e8>
 8028e5a:	eeb0 0b48 	vmov.f64	d0, d8
 8028e5e:	f002 fa9a 	bl	802b396 <finite>
 8028e62:	2800      	cmp	r0, #0
 8028e64:	d058      	beq.n	8028f18 <pow+0x1e8>
 8028e66:	eeb4 ab4a 	vcmp.f64	d10, d10
 8028e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e6e:	f994 3000 	ldrsb.w	r3, [r4]
 8028e72:	4a41      	ldr	r2, [pc, #260]	; (8028f78 <pow+0x248>)
 8028e74:	d70e      	bvc.n	8028e94 <pow+0x164>
 8028e76:	2101      	movs	r1, #1
 8028e78:	e9cd 1200 	strd	r1, r2, [sp]
 8028e7c:	9508      	str	r5, [sp, #32]
 8028e7e:	ed8d 9b02 	vstr	d9, [sp, #8]
 8028e82:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028e86:	2b00      	cmp	r3, #0
 8028e88:	d0ce      	beq.n	8028e28 <pow+0xf8>
 8028e8a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8028e8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8028e92:	e7d0      	b.n	8028e36 <pow+0x106>
 8028e94:	2103      	movs	r1, #3
 8028e96:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028e9a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8028e9e:	ee28 8b07 	vmul.f64	d8, d8, d7
 8028ea2:	e9cd 1200 	strd	r1, r2, [sp]
 8028ea6:	9508      	str	r5, [sp, #32]
 8028ea8:	ed8d 9b02 	vstr	d9, [sp, #8]
 8028eac:	b9fb      	cbnz	r3, 8028eee <pow+0x1be>
 8028eae:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8028eb2:	4b33      	ldr	r3, [pc, #204]	; (8028f80 <pow+0x250>)
 8028eb4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8028eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ebc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028ec0:	d54b      	bpl.n	8028f5a <pow+0x22a>
 8028ec2:	eeb0 0b48 	vmov.f64	d0, d8
 8028ec6:	f002 fa7b 	bl	802b3c0 <rint>
 8028eca:	eeb4 0b48 	vcmp.f64	d0, d8
 8028ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ed2:	d004      	beq.n	8028ede <pow+0x1ae>
 8028ed4:	4b2b      	ldr	r3, [pc, #172]	; (8028f84 <pow+0x254>)
 8028ed6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8028eda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028ede:	f996 3000 	ldrsb.w	r3, [r6]
 8028ee2:	2b02      	cmp	r3, #2
 8028ee4:	d139      	bne.n	8028f5a <pow+0x22a>
 8028ee6:	f002 fd2b 	bl	802b940 <__errno>
 8028eea:	2322      	movs	r3, #34	; 0x22
 8028eec:	e7a8      	b.n	8028e40 <pow+0x110>
 8028eee:	4b26      	ldr	r3, [pc, #152]	; (8028f88 <pow+0x258>)
 8028ef0:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8028ef4:	2200      	movs	r2, #0
 8028ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028efa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028efe:	d5ee      	bpl.n	8028ede <pow+0x1ae>
 8028f00:	eeb0 0b48 	vmov.f64	d0, d8
 8028f04:	f002 fa5c 	bl	802b3c0 <rint>
 8028f08:	eeb4 0b48 	vcmp.f64	d0, d8
 8028f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028f10:	d0e5      	beq.n	8028ede <pow+0x1ae>
 8028f12:	2200      	movs	r2, #0
 8028f14:	4b19      	ldr	r3, [pc, #100]	; (8028f7c <pow+0x24c>)
 8028f16:	e7e0      	b.n	8028eda <pow+0x1aa>
 8028f18:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8028f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028f20:	f47f af64 	bne.w	8028dec <pow+0xbc>
 8028f24:	eeb0 0b49 	vmov.f64	d0, d9
 8028f28:	f002 fa35 	bl	802b396 <finite>
 8028f2c:	2800      	cmp	r0, #0
 8028f2e:	f43f af5d 	beq.w	8028dec <pow+0xbc>
 8028f32:	eeb0 0b48 	vmov.f64	d0, d8
 8028f36:	f002 fa2e 	bl	802b396 <finite>
 8028f3a:	2800      	cmp	r0, #0
 8028f3c:	f43f af56 	beq.w	8028dec <pow+0xbc>
 8028f40:	2304      	movs	r3, #4
 8028f42:	9300      	str	r3, [sp, #0]
 8028f44:	4b0c      	ldr	r3, [pc, #48]	; (8028f78 <pow+0x248>)
 8028f46:	9301      	str	r3, [sp, #4]
 8028f48:	2300      	movs	r3, #0
 8028f4a:	9308      	str	r3, [sp, #32]
 8028f4c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8028f50:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028f54:	ed8d cb06 	vstr	d12, [sp, #24]
 8028f58:	e7c1      	b.n	8028ede <pow+0x1ae>
 8028f5a:	4668      	mov	r0, sp
 8028f5c:	f002 fa23 	bl	802b3a6 <matherr>
 8028f60:	2800      	cmp	r0, #0
 8028f62:	f47f af3b 	bne.w	8028ddc <pow+0xac>
 8028f66:	e7be      	b.n	8028ee6 <pow+0x1b6>
	...
 8028f70:	240006ac 	.word	0x240006ac
 8028f74:	3ff00000 	.word	0x3ff00000
 8028f78:	0802d7f5 	.word	0x0802d7f5
 8028f7c:	fff00000 	.word	0xfff00000
 8028f80:	47efffff 	.word	0x47efffff
 8028f84:	c7efffff 	.word	0xc7efffff
 8028f88:	7ff00000 	.word	0x7ff00000
 8028f8c:	00000000 	.word	0x00000000

08028f90 <sqrt>:
 8028f90:	b500      	push	{lr}
 8028f92:	ed2d 8b02 	vpush	{d8}
 8028f96:	eeb0 8b40 	vmov.f64	d8, d0
 8028f9a:	b08b      	sub	sp, #44	; 0x2c
 8028f9c:	f000 ffa8 	bl	8029ef0 <__ieee754_sqrt>
 8028fa0:	4b1f      	ldr	r3, [pc, #124]	; (8029020 <sqrt+0x90>)
 8028fa2:	f993 3000 	ldrsb.w	r3, [r3]
 8028fa6:	1c5a      	adds	r2, r3, #1
 8028fa8:	d024      	beq.n	8028ff4 <sqrt+0x64>
 8028faa:	eeb4 8b48 	vcmp.f64	d8, d8
 8028fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028fb2:	d61f      	bvs.n	8028ff4 <sqrt+0x64>
 8028fb4:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8029018 <sqrt+0x88>
 8028fb8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8028fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028fc0:	d518      	bpl.n	8028ff4 <sqrt+0x64>
 8028fc2:	2201      	movs	r2, #1
 8028fc4:	9200      	str	r2, [sp, #0]
 8028fc6:	4a17      	ldr	r2, [pc, #92]	; (8029024 <sqrt+0x94>)
 8028fc8:	9201      	str	r2, [sp, #4]
 8028fca:	2200      	movs	r2, #0
 8028fcc:	9208      	str	r2, [sp, #32]
 8028fce:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028fd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8028fd6:	b993      	cbnz	r3, 8028ffe <sqrt+0x6e>
 8028fd8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8028fdc:	4668      	mov	r0, sp
 8028fde:	f002 f9e2 	bl	802b3a6 <matherr>
 8028fe2:	b190      	cbz	r0, 802900a <sqrt+0x7a>
 8028fe4:	9b08      	ldr	r3, [sp, #32]
 8028fe6:	b11b      	cbz	r3, 8028ff0 <sqrt+0x60>
 8028fe8:	f002 fcaa 	bl	802b940 <__errno>
 8028fec:	9b08      	ldr	r3, [sp, #32]
 8028fee:	6003      	str	r3, [r0, #0]
 8028ff0:	ed9d 0b06 	vldr	d0, [sp, #24]
 8028ff4:	b00b      	add	sp, #44	; 0x2c
 8028ff6:	ecbd 8b02 	vpop	{d8}
 8028ffa:	f85d fb04 	ldr.w	pc, [sp], #4
 8028ffe:	2b02      	cmp	r3, #2
 8029000:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8029004:	ed8d 6b06 	vstr	d6, [sp, #24]
 8029008:	d1e8      	bne.n	8028fdc <sqrt+0x4c>
 802900a:	f002 fc99 	bl	802b940 <__errno>
 802900e:	2321      	movs	r3, #33	; 0x21
 8029010:	6003      	str	r3, [r0, #0]
 8029012:	e7e7      	b.n	8028fe4 <sqrt+0x54>
 8029014:	f3af 8000 	nop.w
	...
 8029020:	240006ac 	.word	0x240006ac
 8029024:	0802d7f9 	.word	0x0802d7f9

08029028 <asinf>:
 8029028:	b510      	push	{r4, lr}
 802902a:	ed2d 8b02 	vpush	{d8}
 802902e:	4c25      	ldr	r4, [pc, #148]	; (80290c4 <asinf+0x9c>)
 8029030:	b08a      	sub	sp, #40	; 0x28
 8029032:	eeb0 8a40 	vmov.f32	s16, s0
 8029036:	f000 ff5f 	bl	8029ef8 <__ieee754_asinf>
 802903a:	f994 3000 	ldrsb.w	r3, [r4]
 802903e:	3301      	adds	r3, #1
 8029040:	eef0 8a40 	vmov.f32	s17, s0
 8029044:	d038      	beq.n	80290b8 <asinf+0x90>
 8029046:	eeb4 8a48 	vcmp.f32	s16, s16
 802904a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802904e:	d633      	bvs.n	80290b8 <asinf+0x90>
 8029050:	eeb0 0a48 	vmov.f32	s0, s16
 8029054:	f002 fb90 	bl	802b778 <fabsf>
 8029058:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802905c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029064:	dd28      	ble.n	80290b8 <asinf+0x90>
 8029066:	2301      	movs	r3, #1
 8029068:	9300      	str	r3, [sp, #0]
 802906a:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 802906e:	4b16      	ldr	r3, [pc, #88]	; (80290c8 <asinf+0xa0>)
 8029070:	9301      	str	r3, [sp, #4]
 8029072:	4816      	ldr	r0, [pc, #88]	; (80290cc <asinf+0xa4>)
 8029074:	2300      	movs	r3, #0
 8029076:	9308      	str	r3, [sp, #32]
 8029078:	ed8d 8b04 	vstr	d8, [sp, #16]
 802907c:	ed8d 8b02 	vstr	d8, [sp, #8]
 8029080:	f002 f996 	bl	802b3b0 <nan>
 8029084:	f994 3000 	ldrsb.w	r3, [r4]
 8029088:	2b02      	cmp	r3, #2
 802908a:	ed8d 0b06 	vstr	d0, [sp, #24]
 802908e:	d104      	bne.n	802909a <asinf+0x72>
 8029090:	f002 fc56 	bl	802b940 <__errno>
 8029094:	2321      	movs	r3, #33	; 0x21
 8029096:	6003      	str	r3, [r0, #0]
 8029098:	e004      	b.n	80290a4 <asinf+0x7c>
 802909a:	4668      	mov	r0, sp
 802909c:	f002 f983 	bl	802b3a6 <matherr>
 80290a0:	2800      	cmp	r0, #0
 80290a2:	d0f5      	beq.n	8029090 <asinf+0x68>
 80290a4:	9b08      	ldr	r3, [sp, #32]
 80290a6:	b11b      	cbz	r3, 80290b0 <asinf+0x88>
 80290a8:	f002 fc4a 	bl	802b940 <__errno>
 80290ac:	9b08      	ldr	r3, [sp, #32]
 80290ae:	6003      	str	r3, [r0, #0]
 80290b0:	ed9d 0b06 	vldr	d0, [sp, #24]
 80290b4:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 80290b8:	eeb0 0a68 	vmov.f32	s0, s17
 80290bc:	b00a      	add	sp, #40	; 0x28
 80290be:	ecbd 8b02 	vpop	{d8}
 80290c2:	bd10      	pop	{r4, pc}
 80290c4:	240006ac 	.word	0x240006ac
 80290c8:	0802d7fe 	.word	0x0802d7fe
 80290cc:	0802dea3 	.word	0x0802dea3

080290d0 <atan2f>:
 80290d0:	f000 bffa 	b.w	802a0c8 <__ieee754_atan2f>
 80290d4:	0000      	movs	r0, r0
	...

080290d8 <sqrtf>:
 80290d8:	b500      	push	{lr}
 80290da:	ed2d 8b02 	vpush	{d8}
 80290de:	b08b      	sub	sp, #44	; 0x2c
 80290e0:	eeb0 8a40 	vmov.f32	s16, s0
 80290e4:	f001 f9c6 	bl	802a474 <__ieee754_sqrtf>
 80290e8:	4b21      	ldr	r3, [pc, #132]	; (8029170 <sqrtf+0x98>)
 80290ea:	f993 3000 	ldrsb.w	r3, [r3]
 80290ee:	1c5a      	adds	r2, r3, #1
 80290f0:	d028      	beq.n	8029144 <sqrtf+0x6c>
 80290f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80290f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80290fa:	d623      	bvs.n	8029144 <sqrtf+0x6c>
 80290fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8029100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029104:	d51e      	bpl.n	8029144 <sqrtf+0x6c>
 8029106:	2201      	movs	r2, #1
 8029108:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 802910c:	9200      	str	r2, [sp, #0]
 802910e:	4a19      	ldr	r2, [pc, #100]	; (8029174 <sqrtf+0x9c>)
 8029110:	9201      	str	r2, [sp, #4]
 8029112:	2200      	movs	r2, #0
 8029114:	9208      	str	r2, [sp, #32]
 8029116:	ed8d 8b04 	vstr	d8, [sp, #16]
 802911a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802911e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8029168 <sqrtf+0x90>
 8029122:	b9a3      	cbnz	r3, 802914e <sqrtf+0x76>
 8029124:	ed8d 7b06 	vstr	d7, [sp, #24]
 8029128:	4668      	mov	r0, sp
 802912a:	f002 f93c 	bl	802b3a6 <matherr>
 802912e:	b1a0      	cbz	r0, 802915a <sqrtf+0x82>
 8029130:	9b08      	ldr	r3, [sp, #32]
 8029132:	b11b      	cbz	r3, 802913c <sqrtf+0x64>
 8029134:	f002 fc04 	bl	802b940 <__errno>
 8029138:	9b08      	ldr	r3, [sp, #32]
 802913a:	6003      	str	r3, [r0, #0]
 802913c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8029140:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029144:	b00b      	add	sp, #44	; 0x2c
 8029146:	ecbd 8b02 	vpop	{d8}
 802914a:	f85d fb04 	ldr.w	pc, [sp], #4
 802914e:	2b02      	cmp	r3, #2
 8029150:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8029154:	ed8d 6b06 	vstr	d6, [sp, #24]
 8029158:	d1e6      	bne.n	8029128 <sqrtf+0x50>
 802915a:	f002 fbf1 	bl	802b940 <__errno>
 802915e:	2321      	movs	r3, #33	; 0x21
 8029160:	6003      	str	r3, [r0, #0]
 8029162:	e7e5      	b.n	8029130 <sqrtf+0x58>
 8029164:	f3af 8000 	nop.w
	...
 8029170:	240006ac 	.word	0x240006ac
 8029174:	0802d804 	.word	0x0802d804

08029178 <__ieee754_atan2>:
 8029178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802917a:	ee11 6a10 	vmov	r6, s2
 802917e:	ee11 0a90 	vmov	r0, s3
 8029182:	4273      	negs	r3, r6
 8029184:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8029188:	4333      	orrs	r3, r6
 802918a:	4f6b      	ldr	r7, [pc, #428]	; (8029338 <__ieee754_atan2+0x1c0>)
 802918c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8029190:	42bb      	cmp	r3, r7
 8029192:	ed8d 0b00 	vstr	d0, [sp]
 8029196:	d80b      	bhi.n	80291b0 <__ieee754_atan2+0x38>
 8029198:	e9dd c500 	ldrd	ip, r5, [sp]
 802919c:	f1cc 0100 	rsb	r1, ip, #0
 80291a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80291a4:	ea41 010c 	orr.w	r1, r1, ip
 80291a8:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80291ac:	42b9      	cmp	r1, r7
 80291ae:	d906      	bls.n	80291be <__ieee754_atan2+0x46>
 80291b0:	ed9d 7b00 	vldr	d7, [sp]
 80291b4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80291b8:	ed8d 7b00 	vstr	d7, [sp]
 80291bc:	e063      	b.n	8029286 <__ieee754_atan2+0x10e>
 80291be:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80291c2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80291c6:	4331      	orrs	r1, r6
 80291c8:	d104      	bne.n	80291d4 <__ieee754_atan2+0x5c>
 80291ca:	b003      	add	sp, #12
 80291cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80291d0:	f001 bfde 	b.w	802b190 <atan>
 80291d4:	1784      	asrs	r4, r0, #30
 80291d6:	f004 0402 	and.w	r4, r4, #2
 80291da:	ea53 010c 	orrs.w	r1, r3, ip
 80291de:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80291e2:	d109      	bne.n	80291f8 <__ieee754_atan2+0x80>
 80291e4:	2c02      	cmp	r4, #2
 80291e6:	d078      	beq.n	80292da <__ieee754_atan2+0x162>
 80291e8:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 80292e0 <__ieee754_atan2+0x168>
 80291ec:	ed9d 6b00 	vldr	d6, [sp]
 80291f0:	2c03      	cmp	r4, #3
 80291f2:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80291f6:	e7df      	b.n	80291b8 <__ieee754_atan2+0x40>
 80291f8:	ea52 0106 	orrs.w	r1, r2, r6
 80291fc:	d107      	bne.n	802920e <__ieee754_atan2+0x96>
 80291fe:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80292e8 <__ieee754_atan2+0x170>
 8029202:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80292f0 <__ieee754_atan2+0x178>
 8029206:	2d00      	cmp	r5, #0
 8029208:	fe26 7b07 	vselge.f64	d7, d6, d7
 802920c:	e7d4      	b.n	80291b8 <__ieee754_atan2+0x40>
 802920e:	42ba      	cmp	r2, r7
 8029210:	d120      	bne.n	8029254 <__ieee754_atan2+0xdc>
 8029212:	4293      	cmp	r3, r2
 8029214:	d111      	bne.n	802923a <__ieee754_atan2+0xc2>
 8029216:	2c02      	cmp	r4, #2
 8029218:	d009      	beq.n	802922e <__ieee754_atan2+0xb6>
 802921a:	2c03      	cmp	r4, #3
 802921c:	d00a      	beq.n	8029234 <__ieee754_atan2+0xbc>
 802921e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80292f8 <__ieee754_atan2+0x180>
 8029222:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8029300 <__ieee754_atan2+0x188>
 8029226:	2c01      	cmp	r4, #1
 8029228:	fe06 7b07 	vseleq.f64	d7, d6, d7
 802922c:	e7c4      	b.n	80291b8 <__ieee754_atan2+0x40>
 802922e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8029308 <__ieee754_atan2+0x190>
 8029232:	e7c1      	b.n	80291b8 <__ieee754_atan2+0x40>
 8029234:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8029310 <__ieee754_atan2+0x198>
 8029238:	e7be      	b.n	80291b8 <__ieee754_atan2+0x40>
 802923a:	2c02      	cmp	r4, #2
 802923c:	d04d      	beq.n	80292da <__ieee754_atan2+0x162>
 802923e:	2c03      	cmp	r4, #3
 8029240:	d005      	beq.n	802924e <__ieee754_atan2+0xd6>
 8029242:	2c01      	cmp	r4, #1
 8029244:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8029318 <__ieee754_atan2+0x1a0>
 8029248:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8029320 <__ieee754_atan2+0x1a8>
 802924c:	e7ec      	b.n	8029228 <__ieee754_atan2+0xb0>
 802924e:	ed9f 7b24 	vldr	d7, [pc, #144]	; 80292e0 <__ieee754_atan2+0x168>
 8029252:	e7b1      	b.n	80291b8 <__ieee754_atan2+0x40>
 8029254:	42bb      	cmp	r3, r7
 8029256:	d0d2      	beq.n	80291fe <__ieee754_atan2+0x86>
 8029258:	1a9b      	subs	r3, r3, r2
 802925a:	151b      	asrs	r3, r3, #20
 802925c:	2b3c      	cmp	r3, #60	; 0x3c
 802925e:	dc16      	bgt.n	802928e <__ieee754_atan2+0x116>
 8029260:	2800      	cmp	r0, #0
 8029262:	da01      	bge.n	8029268 <__ieee754_atan2+0xf0>
 8029264:	333c      	adds	r3, #60	; 0x3c
 8029266:	db17      	blt.n	8029298 <__ieee754_atan2+0x120>
 8029268:	ed9d 7b00 	vldr	d7, [sp]
 802926c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8029270:	f002 f888 	bl	802b384 <fabs>
 8029274:	f001 ff8c 	bl	802b190 <atan>
 8029278:	ed8d 0b00 	vstr	d0, [sp]
 802927c:	2c01      	cmp	r4, #1
 802927e:	d00e      	beq.n	802929e <__ieee754_atan2+0x126>
 8029280:	2c02      	cmp	r4, #2
 8029282:	d014      	beq.n	80292ae <__ieee754_atan2+0x136>
 8029284:	b9f4      	cbnz	r4, 80292c4 <__ieee754_atan2+0x14c>
 8029286:	ed9d 0b00 	vldr	d0, [sp]
 802928a:	b003      	add	sp, #12
 802928c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802928e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80292e8 <__ieee754_atan2+0x170>
 8029292:	ed8d 7b00 	vstr	d7, [sp]
 8029296:	e7f1      	b.n	802927c <__ieee754_atan2+0x104>
 8029298:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8029320 <__ieee754_atan2+0x1a8>
 802929c:	e7f9      	b.n	8029292 <__ieee754_atan2+0x11a>
 802929e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80292a2:	9901      	ldr	r1, [sp, #4]
 80292a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80292a8:	e9cd 2300 	strd	r2, r3, [sp]
 80292ac:	e7eb      	b.n	8029286 <__ieee754_atan2+0x10e>
 80292ae:	ed9d 6b00 	vldr	d6, [sp]
 80292b2:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8029328 <__ieee754_atan2+0x1b0>
 80292b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80292ba:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8029330 <__ieee754_atan2+0x1b8>
 80292be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80292c2:	e779      	b.n	80291b8 <__ieee754_atan2+0x40>
 80292c4:	ed9d 6b00 	vldr	d6, [sp]
 80292c8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8029328 <__ieee754_atan2+0x1b0>
 80292cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80292d0:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8029330 <__ieee754_atan2+0x1b8>
 80292d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80292d8:	e76e      	b.n	80291b8 <__ieee754_atan2+0x40>
 80292da:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8029330 <__ieee754_atan2+0x1b8>
 80292de:	e76b      	b.n	80291b8 <__ieee754_atan2+0x40>
 80292e0:	54442d18 	.word	0x54442d18
 80292e4:	c00921fb 	.word	0xc00921fb
 80292e8:	54442d18 	.word	0x54442d18
 80292ec:	3ff921fb 	.word	0x3ff921fb
 80292f0:	54442d18 	.word	0x54442d18
 80292f4:	bff921fb 	.word	0xbff921fb
 80292f8:	54442d18 	.word	0x54442d18
 80292fc:	bfe921fb 	.word	0xbfe921fb
 8029300:	54442d18 	.word	0x54442d18
 8029304:	3fe921fb 	.word	0x3fe921fb
 8029308:	7f3321d2 	.word	0x7f3321d2
 802930c:	4002d97c 	.word	0x4002d97c
 8029310:	7f3321d2 	.word	0x7f3321d2
 8029314:	c002d97c 	.word	0xc002d97c
 8029318:	00000000 	.word	0x00000000
 802931c:	80000000 	.word	0x80000000
	...
 8029328:	33145c07 	.word	0x33145c07
 802932c:	3ca1a626 	.word	0x3ca1a626
 8029330:	54442d18 	.word	0x54442d18
 8029334:	400921fb 	.word	0x400921fb
 8029338:	7ff00000 	.word	0x7ff00000

0802933c <__ieee754_fmod>:
 802933c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8029340:	ed8d 1b00 	vstr	d1, [sp]
 8029344:	e9dd 5600 	ldrd	r5, r6, [sp]
 8029348:	f026 4200 	bic.w	r2, r6, #2147483648	; 0x80000000
 802934c:	ea52 0305 	orrs.w	r3, r2, r5
 8029350:	46ac      	mov	ip, r5
 8029352:	d00d      	beq.n	8029370 <__ieee754_fmod+0x34>
 8029354:	ee10 9a90 	vmov	r9, s1
 8029358:	4b7c      	ldr	r3, [pc, #496]	; (802954c <__ieee754_fmod+0x210>)
 802935a:	f029 4100 	bic.w	r1, r9, #2147483648	; 0x80000000
 802935e:	4299      	cmp	r1, r3
 8029360:	dc06      	bgt.n	8029370 <__ieee754_fmod+0x34>
 8029362:	426b      	negs	r3, r5
 8029364:	432b      	orrs	r3, r5
 8029366:	487a      	ldr	r0, [pc, #488]	; (8029550 <__ieee754_fmod+0x214>)
 8029368:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 802936c:	4283      	cmp	r3, r0
 802936e:	d908      	bls.n	8029382 <__ieee754_fmod+0x46>
 8029370:	ed9d 7b00 	vldr	d7, [sp]
 8029374:	ee20 7b07 	vmul.f64	d7, d0, d7
 8029378:	ee87 0b07 	vdiv.f64	d0, d7, d7
 802937c:	b003      	add	sp, #12
 802937e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029382:	4291      	cmp	r1, r2
 8029384:	ee10 ea10 	vmov	lr, s0
 8029388:	ee10 7a10 	vmov	r7, s0
 802938c:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 8029390:	dc0a      	bgt.n	80293a8 <__ieee754_fmod+0x6c>
 8029392:	dbf3      	blt.n	802937c <__ieee754_fmod+0x40>
 8029394:	45ae      	cmp	lr, r5
 8029396:	d3f1      	bcc.n	802937c <__ieee754_fmod+0x40>
 8029398:	d106      	bne.n	80293a8 <__ieee754_fmod+0x6c>
 802939a:	496e      	ldr	r1, [pc, #440]	; (8029554 <__ieee754_fmod+0x218>)
 802939c:	0fe4      	lsrs	r4, r4, #31
 802939e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80293a2:	ed94 0b00 	vldr	d0, [r4]
 80293a6:	e7e9      	b.n	802937c <__ieee754_fmod+0x40>
 80293a8:	4b6b      	ldr	r3, [pc, #428]	; (8029558 <__ieee754_fmod+0x21c>)
 80293aa:	4299      	cmp	r1, r3
 80293ac:	dc50      	bgt.n	8029450 <__ieee754_fmod+0x114>
 80293ae:	2900      	cmp	r1, #0
 80293b0:	d143      	bne.n	802943a <__ieee754_fmod+0xfe>
 80293b2:	486a      	ldr	r0, [pc, #424]	; (802955c <__ieee754_fmod+0x220>)
 80293b4:	46f0      	mov	r8, lr
 80293b6:	f1b8 0f00 	cmp.w	r8, #0
 80293ba:	dc3a      	bgt.n	8029432 <__ieee754_fmod+0xf6>
 80293bc:	429a      	cmp	r2, r3
 80293be:	dc5a      	bgt.n	8029476 <__ieee754_fmod+0x13a>
 80293c0:	2a00      	cmp	r2, #0
 80293c2:	d14d      	bne.n	8029460 <__ieee754_fmod+0x124>
 80293c4:	4b65      	ldr	r3, [pc, #404]	; (802955c <__ieee754_fmod+0x220>)
 80293c6:	46a8      	mov	r8, r5
 80293c8:	f1b8 0f00 	cmp.w	r8, #0
 80293cc:	dc44      	bgt.n	8029458 <__ieee754_fmod+0x11c>
 80293ce:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8029560 <__ieee754_fmod+0x224>
 80293d2:	4540      	cmp	r0, r8
 80293d4:	db53      	blt.n	802947e <__ieee754_fmod+0x142>
 80293d6:	f3c9 0113 	ubfx	r1, r9, #0, #20
 80293da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80293de:	f8df e180 	ldr.w	lr, [pc, #384]	; 8029560 <__ieee754_fmod+0x224>
 80293e2:	4573      	cmp	r3, lr
 80293e4:	db5f      	blt.n	80294a6 <__ieee754_fmod+0x16a>
 80293e6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80293ea:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80293ee:	1ac0      	subs	r0, r0, r3
 80293f0:	1b8a      	subs	r2, r1, r6
 80293f2:	eba7 050c 	sub.w	r5, r7, ip
 80293f6:	2800      	cmp	r0, #0
 80293f8:	d16b      	bne.n	80294d2 <__ieee754_fmod+0x196>
 80293fa:	4567      	cmp	r7, ip
 80293fc:	bf38      	it	cc
 80293fe:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8029402:	2a00      	cmp	r2, #0
 8029404:	bfbc      	itt	lt
 8029406:	463d      	movlt	r5, r7
 8029408:	460a      	movlt	r2, r1
 802940a:	ea52 0105 	orrs.w	r1, r2, r5
 802940e:	d0c4      	beq.n	802939a <__ieee754_fmod+0x5e>
 8029410:	4951      	ldr	r1, [pc, #324]	; (8029558 <__ieee754_fmod+0x21c>)
 8029412:	428a      	cmp	r2, r1
 8029414:	dd72      	ble.n	80294fc <__ieee754_fmod+0x1c0>
 8029416:	4952      	ldr	r1, [pc, #328]	; (8029560 <__ieee754_fmod+0x224>)
 8029418:	428b      	cmp	r3, r1
 802941a:	db75      	blt.n	8029508 <__ieee754_fmod+0x1cc>
 802941c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8029420:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8029424:	4314      	orrs	r4, r2
 8029426:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 802942a:	4628      	mov	r0, r5
 802942c:	ec41 0b10 	vmov	d0, r0, r1
 8029430:	e7a4      	b.n	802937c <__ieee754_fmod+0x40>
 8029432:	3801      	subs	r0, #1
 8029434:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8029438:	e7bd      	b.n	80293b6 <__ieee754_fmod+0x7a>
 802943a:	4849      	ldr	r0, [pc, #292]	; (8029560 <__ieee754_fmod+0x224>)
 802943c:	ea4f 28c1 	mov.w	r8, r1, lsl #11
 8029440:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8029444:	f1b8 0f00 	cmp.w	r8, #0
 8029448:	f100 30ff 	add.w	r0, r0, #4294967295
 802944c:	dcf8      	bgt.n	8029440 <__ieee754_fmod+0x104>
 802944e:	e7b5      	b.n	80293bc <__ieee754_fmod+0x80>
 8029450:	1508      	asrs	r0, r1, #20
 8029452:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8029456:	e7b1      	b.n	80293bc <__ieee754_fmod+0x80>
 8029458:	3b01      	subs	r3, #1
 802945a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802945e:	e7b3      	b.n	80293c8 <__ieee754_fmod+0x8c>
 8029460:	4b3f      	ldr	r3, [pc, #252]	; (8029560 <__ieee754_fmod+0x224>)
 8029462:	ea4f 28c2 	mov.w	r8, r2, lsl #11
 8029466:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802946a:	f1b8 0f00 	cmp.w	r8, #0
 802946e:	f103 33ff 	add.w	r3, r3, #4294967295
 8029472:	dcf8      	bgt.n	8029466 <__ieee754_fmod+0x12a>
 8029474:	e7ab      	b.n	80293ce <__ieee754_fmod+0x92>
 8029476:	1513      	asrs	r3, r2, #20
 8029478:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802947c:	e7a7      	b.n	80293ce <__ieee754_fmod+0x92>
 802947e:	eba8 0700 	sub.w	r7, r8, r0
 8029482:	2f1f      	cmp	r7, #31
 8029484:	dc09      	bgt.n	802949a <__ieee754_fmod+0x15e>
 8029486:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 802948a:	40b9      	lsls	r1, r7
 802948c:	fa2e f808 	lsr.w	r8, lr, r8
 8029490:	ea48 0101 	orr.w	r1, r8, r1
 8029494:	fa0e f707 	lsl.w	r7, lr, r7
 8029498:	e7a1      	b.n	80293de <__ieee754_fmod+0xa2>
 802949a:	4932      	ldr	r1, [pc, #200]	; (8029564 <__ieee754_fmod+0x228>)
 802949c:	1a09      	subs	r1, r1, r0
 802949e:	fa0e f101 	lsl.w	r1, lr, r1
 80294a2:	2700      	movs	r7, #0
 80294a4:	e79b      	b.n	80293de <__ieee754_fmod+0xa2>
 80294a6:	ebae 0c03 	sub.w	ip, lr, r3
 80294aa:	f1bc 0f1f 	cmp.w	ip, #31
 80294ae:	dc09      	bgt.n	80294c4 <__ieee754_fmod+0x188>
 80294b0:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 80294b4:	fa02 f20c 	lsl.w	r2, r2, ip
 80294b8:	fa25 f606 	lsr.w	r6, r5, r6
 80294bc:	4316      	orrs	r6, r2
 80294be:	fa05 fc0c 	lsl.w	ip, r5, ip
 80294c2:	e794      	b.n	80293ee <__ieee754_fmod+0xb2>
 80294c4:	4e27      	ldr	r6, [pc, #156]	; (8029564 <__ieee754_fmod+0x228>)
 80294c6:	1af6      	subs	r6, r6, r3
 80294c8:	fa05 f606 	lsl.w	r6, r5, r6
 80294cc:	f04f 0c00 	mov.w	ip, #0
 80294d0:	e78d      	b.n	80293ee <__ieee754_fmod+0xb2>
 80294d2:	4567      	cmp	r7, ip
 80294d4:	bf38      	it	cc
 80294d6:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80294da:	2a00      	cmp	r2, #0
 80294dc:	da05      	bge.n	80294ea <__ieee754_fmod+0x1ae>
 80294de:	0ffa      	lsrs	r2, r7, #31
 80294e0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80294e4:	007f      	lsls	r7, r7, #1
 80294e6:	3801      	subs	r0, #1
 80294e8:	e782      	b.n	80293f0 <__ieee754_fmod+0xb4>
 80294ea:	ea52 0105 	orrs.w	r1, r2, r5
 80294ee:	f43f af54 	beq.w	802939a <__ieee754_fmod+0x5e>
 80294f2:	0fe9      	lsrs	r1, r5, #31
 80294f4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80294f8:	006f      	lsls	r7, r5, #1
 80294fa:	e7f4      	b.n	80294e6 <__ieee754_fmod+0x1aa>
 80294fc:	0fe8      	lsrs	r0, r5, #31
 80294fe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8029502:	006d      	lsls	r5, r5, #1
 8029504:	3b01      	subs	r3, #1
 8029506:	e784      	b.n	8029412 <__ieee754_fmod+0xd6>
 8029508:	1ac9      	subs	r1, r1, r3
 802950a:	2914      	cmp	r1, #20
 802950c:	dc0a      	bgt.n	8029524 <__ieee754_fmod+0x1e8>
 802950e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8029512:	fa02 f303 	lsl.w	r3, r2, r3
 8029516:	40cd      	lsrs	r5, r1
 8029518:	432b      	orrs	r3, r5
 802951a:	410a      	asrs	r2, r1
 802951c:	ea42 0104 	orr.w	r1, r2, r4
 8029520:	4618      	mov	r0, r3
 8029522:	e783      	b.n	802942c <__ieee754_fmod+0xf0>
 8029524:	291f      	cmp	r1, #31
 8029526:	dc07      	bgt.n	8029538 <__ieee754_fmod+0x1fc>
 8029528:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 802952c:	40cd      	lsrs	r5, r1
 802952e:	fa02 f303 	lsl.w	r3, r2, r3
 8029532:	432b      	orrs	r3, r5
 8029534:	4622      	mov	r2, r4
 8029536:	e7f1      	b.n	802951c <__ieee754_fmod+0x1e0>
 8029538:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 802953c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8029540:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8029544:	33e2      	adds	r3, #226	; 0xe2
 8029546:	fa42 f303 	asr.w	r3, r2, r3
 802954a:	e7f3      	b.n	8029534 <__ieee754_fmod+0x1f8>
 802954c:	7fefffff 	.word	0x7fefffff
 8029550:	7ff00000 	.word	0x7ff00000
 8029554:	0802d810 	.word	0x0802d810
 8029558:	000fffff 	.word	0x000fffff
 802955c:	fffffbed 	.word	0xfffffbed
 8029560:	fffffc02 	.word	0xfffffc02
 8029564:	fffffbe2 	.word	0xfffffbe2

08029568 <__ieee754_pow>:
 8029568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802956c:	ec57 6b11 	vmov	r6, r7, d1
 8029570:	ed2d 8b02 	vpush	{d8}
 8029574:	eeb0 8b40 	vmov.f64	d8, d0
 8029578:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802957c:	ea58 0306 	orrs.w	r3, r8, r6
 8029580:	b085      	sub	sp, #20
 8029582:	46b9      	mov	r9, r7
 8029584:	ee11 2a10 	vmov	r2, s2
 8029588:	f000 8306 	beq.w	8029b98 <__ieee754_pow+0x630>
 802958c:	ee18 aa90 	vmov	sl, s17
 8029590:	4bb9      	ldr	r3, [pc, #740]	; (8029878 <__ieee754_pow+0x310>)
 8029592:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8029596:	429c      	cmp	r4, r3
 8029598:	ee10 ba10 	vmov	fp, s0
 802959c:	dc0b      	bgt.n	80295b6 <__ieee754_pow+0x4e>
 802959e:	d105      	bne.n	80295ac <__ieee754_pow+0x44>
 80295a0:	f1bb 0f00 	cmp.w	fp, #0
 80295a4:	d107      	bne.n	80295b6 <__ieee754_pow+0x4e>
 80295a6:	45a0      	cmp	r8, r4
 80295a8:	dc0d      	bgt.n	80295c6 <__ieee754_pow+0x5e>
 80295aa:	e001      	b.n	80295b0 <__ieee754_pow+0x48>
 80295ac:	4598      	cmp	r8, r3
 80295ae:	dc02      	bgt.n	80295b6 <__ieee754_pow+0x4e>
 80295b0:	4598      	cmp	r8, r3
 80295b2:	d110      	bne.n	80295d6 <__ieee754_pow+0x6e>
 80295b4:	b17a      	cbz	r2, 80295d6 <__ieee754_pow+0x6e>
 80295b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80295ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80295be:	ea54 030b 	orrs.w	r3, r4, fp
 80295c2:	f000 82e9 	beq.w	8029b98 <__ieee754_pow+0x630>
 80295c6:	48ad      	ldr	r0, [pc, #692]	; (802987c <__ieee754_pow+0x314>)
 80295c8:	b005      	add	sp, #20
 80295ca:	ecbd 8b02 	vpop	{d8}
 80295ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80295d2:	f001 beed 	b.w	802b3b0 <nan>
 80295d6:	f1ba 0f00 	cmp.w	sl, #0
 80295da:	da4e      	bge.n	802967a <__ieee754_pow+0x112>
 80295dc:	4ba8      	ldr	r3, [pc, #672]	; (8029880 <__ieee754_pow+0x318>)
 80295de:	4598      	cmp	r8, r3
 80295e0:	dc49      	bgt.n	8029676 <__ieee754_pow+0x10e>
 80295e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80295e6:	4598      	cmp	r8, r3
 80295e8:	dd47      	ble.n	802967a <__ieee754_pow+0x112>
 80295ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80295ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80295f2:	2b14      	cmp	r3, #20
 80295f4:	dd24      	ble.n	8029640 <__ieee754_pow+0xd8>
 80295f6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80295fa:	fa22 f503 	lsr.w	r5, r2, r3
 80295fe:	fa05 f303 	lsl.w	r3, r5, r3
 8029602:	4293      	cmp	r3, r2
 8029604:	d139      	bne.n	802967a <__ieee754_pow+0x112>
 8029606:	f005 0501 	and.w	r5, r5, #1
 802960a:	f1c5 0502 	rsb	r5, r5, #2
 802960e:	2a00      	cmp	r2, #0
 8029610:	d15a      	bne.n	80296c8 <__ieee754_pow+0x160>
 8029612:	4b99      	ldr	r3, [pc, #612]	; (8029878 <__ieee754_pow+0x310>)
 8029614:	4598      	cmp	r8, r3
 8029616:	d122      	bne.n	802965e <__ieee754_pow+0xf6>
 8029618:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802961c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8029620:	ea53 030b 	orrs.w	r3, r3, fp
 8029624:	f000 82b8 	beq.w	8029b98 <__ieee754_pow+0x630>
 8029628:	4b96      	ldr	r3, [pc, #600]	; (8029884 <__ieee754_pow+0x31c>)
 802962a:	429c      	cmp	r4, r3
 802962c:	dd27      	ble.n	802967e <__ieee754_pow+0x116>
 802962e:	f1b9 0f00 	cmp.w	r9, #0
 8029632:	f280 82b4 	bge.w	8029b9e <__ieee754_pow+0x636>
 8029636:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8029848 <__ieee754_pow+0x2e0>
 802963a:	ed8d 7b00 	vstr	d7, [sp]
 802963e:	e026      	b.n	802968e <__ieee754_pow+0x126>
 8029640:	2a00      	cmp	r2, #0
 8029642:	d140      	bne.n	80296c6 <__ieee754_pow+0x15e>
 8029644:	f1c3 0314 	rsb	r3, r3, #20
 8029648:	fa48 f503 	asr.w	r5, r8, r3
 802964c:	fa05 f303 	lsl.w	r3, r5, r3
 8029650:	4543      	cmp	r3, r8
 8029652:	f040 82aa 	bne.w	8029baa <__ieee754_pow+0x642>
 8029656:	f005 0501 	and.w	r5, r5, #1
 802965a:	f1c5 0502 	rsb	r5, r5, #2
 802965e:	4b8a      	ldr	r3, [pc, #552]	; (8029888 <__ieee754_pow+0x320>)
 8029660:	4598      	cmp	r8, r3
 8029662:	d11b      	bne.n	802969c <__ieee754_pow+0x134>
 8029664:	f1b9 0f00 	cmp.w	r9, #0
 8029668:	f280 829c 	bge.w	8029ba4 <__ieee754_pow+0x63c>
 802966c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8029670:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8029674:	e7e1      	b.n	802963a <__ieee754_pow+0xd2>
 8029676:	2502      	movs	r5, #2
 8029678:	e7c9      	b.n	802960e <__ieee754_pow+0xa6>
 802967a:	2500      	movs	r5, #0
 802967c:	e7c7      	b.n	802960e <__ieee754_pow+0xa6>
 802967e:	f1b9 0f00 	cmp.w	r9, #0
 8029682:	dad8      	bge.n	8029636 <__ieee754_pow+0xce>
 8029684:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8029688:	4633      	mov	r3, r6
 802968a:	e9cd 3400 	strd	r3, r4, [sp]
 802968e:	ed9d 0b00 	vldr	d0, [sp]
 8029692:	b005      	add	sp, #20
 8029694:	ecbd 8b02 	vpop	{d8}
 8029698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802969c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80296a0:	d102      	bne.n	80296a8 <__ieee754_pow+0x140>
 80296a2:	ee28 7b08 	vmul.f64	d7, d8, d8
 80296a6:	e7c8      	b.n	802963a <__ieee754_pow+0xd2>
 80296a8:	4b78      	ldr	r3, [pc, #480]	; (802988c <__ieee754_pow+0x324>)
 80296aa:	4599      	cmp	r9, r3
 80296ac:	d10c      	bne.n	80296c8 <__ieee754_pow+0x160>
 80296ae:	f1ba 0f00 	cmp.w	sl, #0
 80296b2:	db09      	blt.n	80296c8 <__ieee754_pow+0x160>
 80296b4:	eeb0 0b48 	vmov.f64	d0, d8
 80296b8:	b005      	add	sp, #20
 80296ba:	ecbd 8b02 	vpop	{d8}
 80296be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296c2:	f000 bc15 	b.w	8029ef0 <__ieee754_sqrt>
 80296c6:	2500      	movs	r5, #0
 80296c8:	eeb0 0b48 	vmov.f64	d0, d8
 80296cc:	f001 fe5a 	bl	802b384 <fabs>
 80296d0:	ed8d 0b00 	vstr	d0, [sp]
 80296d4:	f1bb 0f00 	cmp.w	fp, #0
 80296d8:	d128      	bne.n	802972c <__ieee754_pow+0x1c4>
 80296da:	b124      	cbz	r4, 80296e6 <__ieee754_pow+0x17e>
 80296dc:	4b6a      	ldr	r3, [pc, #424]	; (8029888 <__ieee754_pow+0x320>)
 80296de:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 80296e2:	429a      	cmp	r2, r3
 80296e4:	d122      	bne.n	802972c <__ieee754_pow+0x1c4>
 80296e6:	f1b9 0f00 	cmp.w	r9, #0
 80296ea:	da07      	bge.n	80296fc <__ieee754_pow+0x194>
 80296ec:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80296f0:	ed9d 6b00 	vldr	d6, [sp]
 80296f4:	ee87 7b06 	vdiv.f64	d7, d7, d6
 80296f8:	ed8d 7b00 	vstr	d7, [sp]
 80296fc:	f1ba 0f00 	cmp.w	sl, #0
 8029700:	dac5      	bge.n	802968e <__ieee754_pow+0x126>
 8029702:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8029706:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802970a:	ea54 0305 	orrs.w	r3, r4, r5
 802970e:	d106      	bne.n	802971e <__ieee754_pow+0x1b6>
 8029710:	ed9d 7b00 	vldr	d7, [sp]
 8029714:	ee37 7b47 	vsub.f64	d7, d7, d7
 8029718:	ee87 7b07 	vdiv.f64	d7, d7, d7
 802971c:	e78d      	b.n	802963a <__ieee754_pow+0xd2>
 802971e:	2d01      	cmp	r5, #1
 8029720:	d1b5      	bne.n	802968e <__ieee754_pow+0x126>
 8029722:	ed9d 7b00 	vldr	d7, [sp]
 8029726:	eeb1 7b47 	vneg.f64	d7, d7
 802972a:	e786      	b.n	802963a <__ieee754_pow+0xd2>
 802972c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8029730:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029734:	ea55 030a 	orrs.w	r3, r5, sl
 8029738:	d104      	bne.n	8029744 <__ieee754_pow+0x1dc>
 802973a:	ee38 8b48 	vsub.f64	d8, d8, d8
 802973e:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8029742:	e77a      	b.n	802963a <__ieee754_pow+0xd2>
 8029744:	4b52      	ldr	r3, [pc, #328]	; (8029890 <__ieee754_pow+0x328>)
 8029746:	4598      	cmp	r8, r3
 8029748:	f340 80a8 	ble.w	802989c <__ieee754_pow+0x334>
 802974c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8029750:	4598      	cmp	r8, r3
 8029752:	dd0b      	ble.n	802976c <__ieee754_pow+0x204>
 8029754:	4b4b      	ldr	r3, [pc, #300]	; (8029884 <__ieee754_pow+0x31c>)
 8029756:	429c      	cmp	r4, r3
 8029758:	dc0e      	bgt.n	8029778 <__ieee754_pow+0x210>
 802975a:	f1b9 0f00 	cmp.w	r9, #0
 802975e:	f6bf af6a 	bge.w	8029636 <__ieee754_pow+0xce>
 8029762:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8029850 <__ieee754_pow+0x2e8>
 8029766:	ee27 7b07 	vmul.f64	d7, d7, d7
 802976a:	e766      	b.n	802963a <__ieee754_pow+0xd2>
 802976c:	4b49      	ldr	r3, [pc, #292]	; (8029894 <__ieee754_pow+0x32c>)
 802976e:	429c      	cmp	r4, r3
 8029770:	ddf3      	ble.n	802975a <__ieee754_pow+0x1f2>
 8029772:	4b45      	ldr	r3, [pc, #276]	; (8029888 <__ieee754_pow+0x320>)
 8029774:	429c      	cmp	r4, r3
 8029776:	dd03      	ble.n	8029780 <__ieee754_pow+0x218>
 8029778:	f1b9 0f00 	cmp.w	r9, #0
 802977c:	dcf1      	bgt.n	8029762 <__ieee754_pow+0x1fa>
 802977e:	e75a      	b.n	8029636 <__ieee754_pow+0xce>
 8029780:	ed9d 7b00 	vldr	d7, [sp]
 8029784:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8029788:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8029858 <__ieee754_pow+0x2f0>
 802978c:	ee37 6b46 	vsub.f64	d6, d7, d6
 8029790:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 8029794:	eeb1 3b46 	vneg.f64	d3, d6
 8029798:	eea3 5b07 	vfma.f64	d5, d3, d7
 802979c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80297a0:	eea5 7b46 	vfms.f64	d7, d5, d6
 80297a4:	ee26 5b06 	vmul.f64	d5, d6, d6
 80297a8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80297ac:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8029860 <__ieee754_pow+0x2f8>
 80297b0:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80297b4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8029868 <__ieee754_pow+0x300>
 80297b8:	eea6 7b05 	vfma.f64	d7, d6, d5
 80297bc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8029870 <__ieee754_pow+0x308>
 80297c0:	eeb0 4b47 	vmov.f64	d4, d7
 80297c4:	eea6 4b05 	vfma.f64	d4, d6, d5
 80297c8:	ec53 2b14 	vmov	r2, r3, d4
 80297cc:	2200      	movs	r2, #0
 80297ce:	ec43 2b14 	vmov	d4, r2, r3
 80297d2:	eeb0 6b44 	vmov.f64	d6, d4
 80297d6:	eea3 6b05 	vfma.f64	d6, d3, d5
 80297da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80297de:	3d01      	subs	r5, #1
 80297e0:	ea55 030a 	orrs.w	r3, r5, sl
 80297e4:	f04f 0200 	mov.w	r2, #0
 80297e8:	463b      	mov	r3, r7
 80297ea:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80297ee:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80297f2:	ec47 6b15 	vmov	d5, r6, r7
 80297f6:	fe06 8b08 	vseleq.f64	d8, d6, d8
 80297fa:	ec47 6b13 	vmov	d3, r6, r7
 80297fe:	ec43 2b16 	vmov	d6, r2, r3
 8029802:	ee27 7b03 	vmul.f64	d7, d7, d3
 8029806:	ee35 5b46 	vsub.f64	d5, d5, d6
 802980a:	4b23      	ldr	r3, [pc, #140]	; (8029898 <__ieee754_pow+0x330>)
 802980c:	eea5 7b04 	vfma.f64	d7, d5, d4
 8029810:	ee24 6b06 	vmul.f64	d6, d4, d6
 8029814:	ee37 5b06 	vadd.f64	d5, d7, d6
 8029818:	ee15 1a90 	vmov	r1, s11
 802981c:	4299      	cmp	r1, r3
 802981e:	ee15 2a10 	vmov	r2, s10
 8029822:	f340 819b 	ble.w	8029b5c <__ieee754_pow+0x5f4>
 8029826:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802982a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802982e:	4313      	orrs	r3, r2
 8029830:	f000 810a 	beq.w	8029a48 <__ieee754_pow+0x4e0>
 8029834:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8029850 <__ieee754_pow+0x2e8>
 8029838:	ee28 8b07 	vmul.f64	d8, d8, d7
 802983c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8029840:	e6fb      	b.n	802963a <__ieee754_pow+0xd2>
 8029842:	bf00      	nop
 8029844:	f3af 8000 	nop.w
	...
 8029850:	8800759c 	.word	0x8800759c
 8029854:	7e37e43c 	.word	0x7e37e43c
 8029858:	55555555 	.word	0x55555555
 802985c:	3fd55555 	.word	0x3fd55555
 8029860:	652b82fe 	.word	0x652b82fe
 8029864:	3ff71547 	.word	0x3ff71547
 8029868:	f85ddf44 	.word	0xf85ddf44
 802986c:	3e54ae0b 	.word	0x3e54ae0b
 8029870:	60000000 	.word	0x60000000
 8029874:	3ff71547 	.word	0x3ff71547
 8029878:	7ff00000 	.word	0x7ff00000
 802987c:	0802dea3 	.word	0x0802dea3
 8029880:	433fffff 	.word	0x433fffff
 8029884:	3fefffff 	.word	0x3fefffff
 8029888:	3ff00000 	.word	0x3ff00000
 802988c:	3fe00000 	.word	0x3fe00000
 8029890:	41e00000 	.word	0x41e00000
 8029894:	3feffffe 	.word	0x3feffffe
 8029898:	408fffff 	.word	0x408fffff
 802989c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80298a0:	f280 80ce 	bge.w	8029a40 <__ieee754_pow+0x4d8>
 80298a4:	ed9d 6b00 	vldr	d6, [sp]
 80298a8:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8029bb0 <__ieee754_pow+0x648>
 80298ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80298b0:	ed8d 7b00 	vstr	d7, [sp]
 80298b4:	9c01      	ldr	r4, [sp, #4]
 80298b6:	f06f 0334 	mvn.w	r3, #52	; 0x34
 80298ba:	1521      	asrs	r1, r4, #20
 80298bc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80298c0:	4419      	add	r1, r3
 80298c2:	4be3      	ldr	r3, [pc, #908]	; (8029c50 <__ieee754_pow+0x6e8>)
 80298c4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80298c8:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 80298cc:	429c      	cmp	r4, r3
 80298ce:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 80298d2:	dd06      	ble.n	80298e2 <__ieee754_pow+0x37a>
 80298d4:	4bdf      	ldr	r3, [pc, #892]	; (8029c54 <__ieee754_pow+0x6ec>)
 80298d6:	429c      	cmp	r4, r3
 80298d8:	f340 80b4 	ble.w	8029a44 <__ieee754_pow+0x4dc>
 80298dc:	3101      	adds	r1, #1
 80298de:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80298e2:	2400      	movs	r4, #0
 80298e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80298e8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80298ec:	4603      	mov	r3, r0
 80298ee:	ec43 2b17 	vmov	d7, r2, r3
 80298f2:	4bd9      	ldr	r3, [pc, #868]	; (8029c58 <__ieee754_pow+0x6f0>)
 80298f4:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 80298f8:	4463      	add	r3, ip
 80298fa:	ed93 5b00 	vldr	d5, [r3]
 80298fe:	1040      	asrs	r0, r0, #1
 8029900:	ee37 2b45 	vsub.f64	d2, d7, d5
 8029904:	ee35 6b07 	vadd.f64	d6, d5, d7
 8029908:	ee84 1b06 	vdiv.f64	d1, d4, d6
 802990c:	ee22 6b01 	vmul.f64	d6, d2, d1
 8029910:	ed8d 6b00 	vstr	d6, [sp]
 8029914:	e9dd 8900 	ldrd	r8, r9, [sp]
 8029918:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 802991c:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8029920:	f04f 0800 	mov.w	r8, #0
 8029924:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8029928:	2200      	movs	r2, #0
 802992a:	ec49 8b14 	vmov	d4, r8, r9
 802992e:	ec43 2b16 	vmov	d6, r2, r3
 8029932:	eeb1 3b44 	vneg.f64	d3, d4
 8029936:	eea3 2b06 	vfma.f64	d2, d3, d6
 802993a:	ee36 6b45 	vsub.f64	d6, d6, d5
 802993e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029942:	eea3 2b07 	vfma.f64	d2, d3, d7
 8029946:	ed9d 7b00 	vldr	d7, [sp]
 802994a:	ee22 2b01 	vmul.f64	d2, d2, d1
 802994e:	ee27 5b07 	vmul.f64	d5, d7, d7
 8029952:	ee37 6b04 	vadd.f64	d6, d7, d4
 8029956:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8029bb8 <__ieee754_pow+0x650>
 802995a:	ee25 0b05 	vmul.f64	d0, d5, d5
 802995e:	ee26 6b02 	vmul.f64	d6, d6, d2
 8029962:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8029bc0 <__ieee754_pow+0x658>
 8029966:	eea5 7b01 	vfma.f64	d7, d5, d1
 802996a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8029bc8 <__ieee754_pow+0x660>
 802996e:	eea7 1b05 	vfma.f64	d1, d7, d5
 8029972:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8029bd0 <__ieee754_pow+0x668>
 8029976:	eea1 7b05 	vfma.f64	d7, d1, d5
 802997a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8029bd8 <__ieee754_pow+0x670>
 802997e:	eea7 1b05 	vfma.f64	d1, d7, d5
 8029982:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8029be0 <__ieee754_pow+0x678>
 8029986:	eea1 7b05 	vfma.f64	d7, d1, d5
 802998a:	eea0 6b07 	vfma.f64	d6, d0, d7
 802998e:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8029992:	eeb0 5b47 	vmov.f64	d5, d7
 8029996:	eea4 5b04 	vfma.f64	d5, d4, d4
 802999a:	ee35 5b06 	vadd.f64	d5, d5, d6
 802999e:	ed8d 5b02 	vstr	d5, [sp, #8]
 80299a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80299a6:	ed9d 5b02 	vldr	d5, [sp, #8]
 80299aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80299ae:	eea3 7b04 	vfma.f64	d7, d3, d4
 80299b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80299b6:	ed9d 6b00 	vldr	d6, [sp]
 80299ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80299be:	eea2 7b05 	vfma.f64	d7, d2, d5
 80299c2:	eeb0 6b47 	vmov.f64	d6, d7
 80299c6:	eea4 6b05 	vfma.f64	d6, d4, d5
 80299ca:	ed8d 6b00 	vstr	d6, [sp]
 80299ce:	f8cd 8000 	str.w	r8, [sp]
 80299d2:	ed9d 2b00 	vldr	d2, [sp]
 80299d6:	eeb0 6b42 	vmov.f64	d6, d2
 80299da:	eea3 6b05 	vfma.f64	d6, d3, d5
 80299de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80299e2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8029be8 <__ieee754_pow+0x680>
 80299e6:	4b9d      	ldr	r3, [pc, #628]	; (8029c5c <__ieee754_pow+0x6f4>)
 80299e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80299ec:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8029bf0 <__ieee754_pow+0x688>
 80299f0:	4463      	add	r3, ip
 80299f2:	eea2 7b06 	vfma.f64	d7, d2, d6
 80299f6:	ed93 6b00 	vldr	d6, [r3]
 80299fa:	4b99      	ldr	r3, [pc, #612]	; (8029c60 <__ieee754_pow+0x6f8>)
 80299fc:	ee37 6b06 	vadd.f64	d6, d7, d6
 8029a00:	449c      	add	ip, r3
 8029a02:	ed9c 1b00 	vldr	d1, [ip]
 8029a06:	eeb0 4b46 	vmov.f64	d4, d6
 8029a0a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8029bf8 <__ieee754_pow+0x690>
 8029a0e:	ee07 1a90 	vmov	s15, r1
 8029a12:	eea2 4b03 	vfma.f64	d4, d2, d3
 8029a16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8029a1a:	ee34 4b01 	vadd.f64	d4, d4, d1
 8029a1e:	ee34 5b07 	vadd.f64	d5, d4, d7
 8029a22:	ed8d 5b00 	vstr	d5, [sp]
 8029a26:	f8cd 8000 	str.w	r8, [sp]
 8029a2a:	ed9d 4b00 	vldr	d4, [sp]
 8029a2e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8029a32:	ee37 7b41 	vsub.f64	d7, d7, d1
 8029a36:	eea2 7b43 	vfms.f64	d7, d2, d3
 8029a3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8029a3e:	e6ce      	b.n	80297de <__ieee754_pow+0x276>
 8029a40:	2300      	movs	r3, #0
 8029a42:	e73a      	b.n	80298ba <__ieee754_pow+0x352>
 8029a44:	2401      	movs	r4, #1
 8029a46:	e74d      	b.n	80298e4 <__ieee754_pow+0x37c>
 8029a48:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8029c00 <__ieee754_pow+0x698>
 8029a4c:	ee35 5b46 	vsub.f64	d5, d5, d6
 8029a50:	ee37 4b04 	vadd.f64	d4, d7, d4
 8029a54:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8029a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029a5c:	f73f aeea 	bgt.w	8029834 <__ieee754_pow+0x2cc>
 8029a60:	4a80      	ldr	r2, [pc, #512]	; (8029c64 <__ieee754_pow+0x6fc>)
 8029a62:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8029a66:	4293      	cmp	r3, r2
 8029a68:	f340 808e 	ble.w	8029b88 <__ieee754_pow+0x620>
 8029a6c:	151b      	asrs	r3, r3, #20
 8029a6e:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8029a72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8029a76:	4103      	asrs	r3, r0
 8029a78:	440b      	add	r3, r1
 8029a7a:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8029a7e:	487a      	ldr	r0, [pc, #488]	; (8029c68 <__ieee754_pow+0x700>)
 8029a80:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8029a84:	4110      	asrs	r0, r2
 8029a86:	ea23 0500 	bic.w	r5, r3, r0
 8029a8a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8029a8e:	2400      	movs	r4, #0
 8029a90:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8029a94:	f1c2 0214 	rsb	r2, r2, #20
 8029a98:	ec45 4b15 	vmov	d5, r4, r5
 8029a9c:	4110      	asrs	r0, r2
 8029a9e:	2900      	cmp	r1, #0
 8029aa0:	bfb8      	it	lt
 8029aa2:	4240      	neglt	r0, r0
 8029aa4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8029aa8:	ee36 5b07 	vadd.f64	d5, d6, d7
 8029aac:	ec53 2b15 	vmov	r2, r3, d5
 8029ab0:	2200      	movs	r2, #0
 8029ab2:	ec43 2b15 	vmov	d5, r2, r3
 8029ab6:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8029c08 <__ieee754_pow+0x6a0>
 8029aba:	ee35 6b46 	vsub.f64	d6, d5, d6
 8029abe:	ee37 6b46 	vsub.f64	d6, d7, d6
 8029ac2:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8029c10 <__ieee754_pow+0x6a8>
 8029ac6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8029aca:	eea6 7b04 	vfma.f64	d7, d6, d4
 8029ace:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8029c18 <__ieee754_pow+0x6b0>
 8029ad2:	eeb0 4b47 	vmov.f64	d4, d7
 8029ad6:	eea5 4b06 	vfma.f64	d4, d5, d6
 8029ada:	eeb0 3b44 	vmov.f64	d3, d4
 8029ade:	eea5 3b46 	vfms.f64	d3, d5, d6
 8029ae2:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8029c20 <__ieee754_pow+0x6b8>
 8029ae6:	ee37 7b43 	vsub.f64	d7, d7, d3
 8029aea:	ee24 6b04 	vmul.f64	d6, d4, d4
 8029aee:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8029c28 <__ieee754_pow+0x6c0>
 8029af2:	eea4 7b07 	vfma.f64	d7, d4, d7
 8029af6:	eea6 3b05 	vfma.f64	d3, d6, d5
 8029afa:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8029c30 <__ieee754_pow+0x6c8>
 8029afe:	eea3 5b06 	vfma.f64	d5, d3, d6
 8029b02:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8029c38 <__ieee754_pow+0x6d0>
 8029b06:	eea5 3b06 	vfma.f64	d3, d5, d6
 8029b0a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8029c40 <__ieee754_pow+0x6d8>
 8029b0e:	eea3 5b06 	vfma.f64	d5, d3, d6
 8029b12:	eeb0 3b44 	vmov.f64	d3, d4
 8029b16:	eea5 3b46 	vfms.f64	d3, d5, d6
 8029b1a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8029b1e:	eeb0 6b43 	vmov.f64	d6, d3
 8029b22:	ee24 3b03 	vmul.f64	d3, d4, d3
 8029b26:	ee36 5b45 	vsub.f64	d5, d6, d5
 8029b2a:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8029b2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8029b32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8029b36:	ee37 7b44 	vsub.f64	d7, d7, d4
 8029b3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8029b3e:	ed8d 7b00 	vstr	d7, [sp]
 8029b42:	9901      	ldr	r1, [sp, #4]
 8029b44:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8029b48:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8029b4c:	da1e      	bge.n	8029b8c <__ieee754_pow+0x624>
 8029b4e:	eeb0 0b47 	vmov.f64	d0, d7
 8029b52:	f001 fcc1 	bl	802b4d8 <scalbn>
 8029b56:	ee20 7b08 	vmul.f64	d7, d0, d8
 8029b5a:	e56e      	b.n	802963a <__ieee754_pow+0xd2>
 8029b5c:	4b43      	ldr	r3, [pc, #268]	; (8029c6c <__ieee754_pow+0x704>)
 8029b5e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8029b62:	4298      	cmp	r0, r3
 8029b64:	f77f af7c 	ble.w	8029a60 <__ieee754_pow+0x4f8>
 8029b68:	4b41      	ldr	r3, [pc, #260]	; (8029c70 <__ieee754_pow+0x708>)
 8029b6a:	440b      	add	r3, r1
 8029b6c:	4313      	orrs	r3, r2
 8029b6e:	d002      	beq.n	8029b76 <__ieee754_pow+0x60e>
 8029b70:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8029c48 <__ieee754_pow+0x6e0>
 8029b74:	e660      	b.n	8029838 <__ieee754_pow+0x2d0>
 8029b76:	ee35 5b46 	vsub.f64	d5, d5, d6
 8029b7a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8029b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029b82:	f6ff af6d 	blt.w	8029a60 <__ieee754_pow+0x4f8>
 8029b86:	e7f3      	b.n	8029b70 <__ieee754_pow+0x608>
 8029b88:	2000      	movs	r0, #0
 8029b8a:	e78d      	b.n	8029aa8 <__ieee754_pow+0x540>
 8029b8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029b90:	460b      	mov	r3, r1
 8029b92:	ec43 2b10 	vmov	d0, r2, r3
 8029b96:	e7de      	b.n	8029b56 <__ieee754_pow+0x5ee>
 8029b98:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8029b9c:	e54d      	b.n	802963a <__ieee754_pow+0xd2>
 8029b9e:	e9cd 6700 	strd	r6, r7, [sp]
 8029ba2:	e574      	b.n	802968e <__ieee754_pow+0x126>
 8029ba4:	ed8d 8b00 	vstr	d8, [sp]
 8029ba8:	e571      	b.n	802968e <__ieee754_pow+0x126>
 8029baa:	4615      	mov	r5, r2
 8029bac:	e557      	b.n	802965e <__ieee754_pow+0xf6>
 8029bae:	bf00      	nop
 8029bb0:	00000000 	.word	0x00000000
 8029bb4:	43400000 	.word	0x43400000
 8029bb8:	4a454eef 	.word	0x4a454eef
 8029bbc:	3fca7e28 	.word	0x3fca7e28
 8029bc0:	93c9db65 	.word	0x93c9db65
 8029bc4:	3fcd864a 	.word	0x3fcd864a
 8029bc8:	a91d4101 	.word	0xa91d4101
 8029bcc:	3fd17460 	.word	0x3fd17460
 8029bd0:	518f264d 	.word	0x518f264d
 8029bd4:	3fd55555 	.word	0x3fd55555
 8029bd8:	db6fabff 	.word	0xdb6fabff
 8029bdc:	3fdb6db6 	.word	0x3fdb6db6
 8029be0:	33333303 	.word	0x33333303
 8029be4:	3fe33333 	.word	0x3fe33333
 8029be8:	dc3a03fd 	.word	0xdc3a03fd
 8029bec:	3feec709 	.word	0x3feec709
 8029bf0:	145b01f5 	.word	0x145b01f5
 8029bf4:	be3e2fe0 	.word	0xbe3e2fe0
 8029bf8:	e0000000 	.word	0xe0000000
 8029bfc:	3feec709 	.word	0x3feec709
 8029c00:	652b82fe 	.word	0x652b82fe
 8029c04:	3c971547 	.word	0x3c971547
 8029c08:	fefa39ef 	.word	0xfefa39ef
 8029c0c:	3fe62e42 	.word	0x3fe62e42
 8029c10:	0ca86c39 	.word	0x0ca86c39
 8029c14:	be205c61 	.word	0xbe205c61
 8029c18:	00000000 	.word	0x00000000
 8029c1c:	3fe62e43 	.word	0x3fe62e43
 8029c20:	72bea4d0 	.word	0x72bea4d0
 8029c24:	3e663769 	.word	0x3e663769
 8029c28:	c5d26bf1 	.word	0xc5d26bf1
 8029c2c:	bebbbd41 	.word	0xbebbbd41
 8029c30:	af25de2c 	.word	0xaf25de2c
 8029c34:	3f11566a 	.word	0x3f11566a
 8029c38:	16bebd93 	.word	0x16bebd93
 8029c3c:	bf66c16c 	.word	0xbf66c16c
 8029c40:	5555553e 	.word	0x5555553e
 8029c44:	3fc55555 	.word	0x3fc55555
 8029c48:	c2f8f359 	.word	0xc2f8f359
 8029c4c:	01a56e1f 	.word	0x01a56e1f
 8029c50:	0003988e 	.word	0x0003988e
 8029c54:	000bb679 	.word	0x000bb679
 8029c58:	0802d820 	.word	0x0802d820
 8029c5c:	0802d840 	.word	0x0802d840
 8029c60:	0802d830 	.word	0x0802d830
 8029c64:	3fe00000 	.word	0x3fe00000
 8029c68:	000fffff 	.word	0x000fffff
 8029c6c:	4090cbff 	.word	0x4090cbff
 8029c70:	3f6f3400 	.word	0x3f6f3400
 8029c74:	00000000 	.word	0x00000000

08029c78 <__ieee754_rem_pio2>:
 8029c78:	b570      	push	{r4, r5, r6, lr}
 8029c7a:	eeb0 7b40 	vmov.f64	d7, d0
 8029c7e:	ee17 5a90 	vmov	r5, s15
 8029c82:	4b95      	ldr	r3, [pc, #596]	; (8029ed8 <__ieee754_rem_pio2+0x260>)
 8029c84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8029c88:	429e      	cmp	r6, r3
 8029c8a:	b088      	sub	sp, #32
 8029c8c:	4604      	mov	r4, r0
 8029c8e:	dc07      	bgt.n	8029ca0 <__ieee754_rem_pio2+0x28>
 8029c90:	2200      	movs	r2, #0
 8029c92:	2300      	movs	r3, #0
 8029c94:	ed84 0b00 	vstr	d0, [r4]
 8029c98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8029c9c:	2000      	movs	r0, #0
 8029c9e:	e01b      	b.n	8029cd8 <__ieee754_rem_pio2+0x60>
 8029ca0:	4b8e      	ldr	r3, [pc, #568]	; (8029edc <__ieee754_rem_pio2+0x264>)
 8029ca2:	429e      	cmp	r6, r3
 8029ca4:	dc3b      	bgt.n	8029d1e <__ieee754_rem_pio2+0xa6>
 8029ca6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8029caa:	2d00      	cmp	r5, #0
 8029cac:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8029e98 <__ieee754_rem_pio2+0x220>
 8029cb0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8029cb4:	dd19      	ble.n	8029cea <__ieee754_rem_pio2+0x72>
 8029cb6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8029cba:	429e      	cmp	r6, r3
 8029cbc:	d00e      	beq.n	8029cdc <__ieee754_rem_pio2+0x64>
 8029cbe:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8029ea0 <__ieee754_rem_pio2+0x228>
 8029cc2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8029cc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8029cca:	ed84 5b00 	vstr	d5, [r4]
 8029cce:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029cd2:	ed84 7b02 	vstr	d7, [r4, #8]
 8029cd6:	2001      	movs	r0, #1
 8029cd8:	b008      	add	sp, #32
 8029cda:	bd70      	pop	{r4, r5, r6, pc}
 8029cdc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8029ea8 <__ieee754_rem_pio2+0x230>
 8029ce0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029ce4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8029eb0 <__ieee754_rem_pio2+0x238>
 8029ce8:	e7eb      	b.n	8029cc2 <__ieee754_rem_pio2+0x4a>
 8029cea:	429e      	cmp	r6, r3
 8029cec:	ee30 7b06 	vadd.f64	d7, d0, d6
 8029cf0:	d00e      	beq.n	8029d10 <__ieee754_rem_pio2+0x98>
 8029cf2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8029ea0 <__ieee754_rem_pio2+0x228>
 8029cf6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8029cfa:	ee37 7b45 	vsub.f64	d7, d7, d5
 8029cfe:	ed84 5b00 	vstr	d5, [r4]
 8029d02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8029d06:	f04f 30ff 	mov.w	r0, #4294967295
 8029d0a:	ed84 7b02 	vstr	d7, [r4, #8]
 8029d0e:	e7e3      	b.n	8029cd8 <__ieee754_rem_pio2+0x60>
 8029d10:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8029ea8 <__ieee754_rem_pio2+0x230>
 8029d14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8029d18:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8029eb0 <__ieee754_rem_pio2+0x238>
 8029d1c:	e7eb      	b.n	8029cf6 <__ieee754_rem_pio2+0x7e>
 8029d1e:	4b70      	ldr	r3, [pc, #448]	; (8029ee0 <__ieee754_rem_pio2+0x268>)
 8029d20:	429e      	cmp	r6, r3
 8029d22:	dc6c      	bgt.n	8029dfe <__ieee754_rem_pio2+0x186>
 8029d24:	f001 fb2e 	bl	802b384 <fabs>
 8029d28:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8029d2c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8029eb8 <__ieee754_rem_pio2+0x240>
 8029d30:	eea0 7b06 	vfma.f64	d7, d0, d6
 8029d34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8029d38:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8029d3c:	ee17 0a90 	vmov	r0, s15
 8029d40:	eeb1 5b44 	vneg.f64	d5, d4
 8029d44:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8029e98 <__ieee754_rem_pio2+0x220>
 8029d48:	eea5 0b07 	vfma.f64	d0, d5, d7
 8029d4c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8029ea0 <__ieee754_rem_pio2+0x228>
 8029d50:	281f      	cmp	r0, #31
 8029d52:	ee24 7b07 	vmul.f64	d7, d4, d7
 8029d56:	ee30 6b47 	vsub.f64	d6, d0, d7
 8029d5a:	dc08      	bgt.n	8029d6e <__ieee754_rem_pio2+0xf6>
 8029d5c:	1e42      	subs	r2, r0, #1
 8029d5e:	4b61      	ldr	r3, [pc, #388]	; (8029ee4 <__ieee754_rem_pio2+0x26c>)
 8029d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029d64:	42b3      	cmp	r3, r6
 8029d66:	d002      	beq.n	8029d6e <__ieee754_rem_pio2+0xf6>
 8029d68:	ed84 6b00 	vstr	d6, [r4]
 8029d6c:	e022      	b.n	8029db4 <__ieee754_rem_pio2+0x13c>
 8029d6e:	ee16 3a90 	vmov	r3, s13
 8029d72:	1536      	asrs	r6, r6, #20
 8029d74:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8029d78:	1af3      	subs	r3, r6, r3
 8029d7a:	2b10      	cmp	r3, #16
 8029d7c:	ddf4      	ble.n	8029d68 <__ieee754_rem_pio2+0xf0>
 8029d7e:	eeb0 6b40 	vmov.f64	d6, d0
 8029d82:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8029ea8 <__ieee754_rem_pio2+0x230>
 8029d86:	eea5 6b03 	vfma.f64	d6, d5, d3
 8029d8a:	ee30 7b46 	vsub.f64	d7, d0, d6
 8029d8e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8029d92:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8029eb0 <__ieee754_rem_pio2+0x238>
 8029d96:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8029d9a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8029d9e:	ee13 3a90 	vmov	r3, s7
 8029da2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8029da6:	1af6      	subs	r6, r6, r3
 8029da8:	2e31      	cmp	r6, #49	; 0x31
 8029daa:	dc17      	bgt.n	8029ddc <__ieee754_rem_pio2+0x164>
 8029dac:	eeb0 0b46 	vmov.f64	d0, d6
 8029db0:	ed84 3b00 	vstr	d3, [r4]
 8029db4:	ed94 6b00 	vldr	d6, [r4]
 8029db8:	2d00      	cmp	r5, #0
 8029dba:	ee30 0b46 	vsub.f64	d0, d0, d6
 8029dbe:	ee30 7b47 	vsub.f64	d7, d0, d7
 8029dc2:	ed84 7b02 	vstr	d7, [r4, #8]
 8029dc6:	da87      	bge.n	8029cd8 <__ieee754_rem_pio2+0x60>
 8029dc8:	eeb1 6b46 	vneg.f64	d6, d6
 8029dcc:	ed84 6b00 	vstr	d6, [r4]
 8029dd0:	eeb1 7b47 	vneg.f64	d7, d7
 8029dd4:	4240      	negs	r0, r0
 8029dd6:	ed84 7b02 	vstr	d7, [r4, #8]
 8029dda:	e77d      	b.n	8029cd8 <__ieee754_rem_pio2+0x60>
 8029ddc:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8029ec0 <__ieee754_rem_pio2+0x248>
 8029de0:	eeb0 0b46 	vmov.f64	d0, d6
 8029de4:	eea5 0b03 	vfma.f64	d0, d5, d3
 8029de8:	ee36 7b40 	vsub.f64	d7, d6, d0
 8029dec:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8029ec8 <__ieee754_rem_pio2+0x250>
 8029df0:	eea5 7b03 	vfma.f64	d7, d5, d3
 8029df4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8029df8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8029dfc:	e7b4      	b.n	8029d68 <__ieee754_rem_pio2+0xf0>
 8029dfe:	4b3a      	ldr	r3, [pc, #232]	; (8029ee8 <__ieee754_rem_pio2+0x270>)
 8029e00:	429e      	cmp	r6, r3
 8029e02:	dd06      	ble.n	8029e12 <__ieee754_rem_pio2+0x19a>
 8029e04:	ee30 7b40 	vsub.f64	d7, d0, d0
 8029e08:	ed80 7b02 	vstr	d7, [r0, #8]
 8029e0c:	ed80 7b00 	vstr	d7, [r0]
 8029e10:	e744      	b.n	8029c9c <__ieee754_rem_pio2+0x24>
 8029e12:	1532      	asrs	r2, r6, #20
 8029e14:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8029e18:	ee10 0a10 	vmov	r0, s0
 8029e1c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8029e20:	ec41 0b17 	vmov	d7, r0, r1
 8029e24:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8029e28:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8029ed0 <__ieee754_rem_pio2+0x258>
 8029e2c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8029e30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029e34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8029e38:	ee27 7b05 	vmul.f64	d7, d7, d5
 8029e3c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8029e40:	a908      	add	r1, sp, #32
 8029e42:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8029e46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029e4a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8029e4e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8029e52:	ed8d 7b06 	vstr	d7, [sp, #24]
 8029e56:	2303      	movs	r3, #3
 8029e58:	ed31 7b02 	vldmdb	r1!, {d7}
 8029e5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8029e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e64:	f103 30ff 	add.w	r0, r3, #4294967295
 8029e68:	d013      	beq.n	8029e92 <__ieee754_rem_pio2+0x21a>
 8029e6a:	4920      	ldr	r1, [pc, #128]	; (8029eec <__ieee754_rem_pio2+0x274>)
 8029e6c:	9101      	str	r1, [sp, #4]
 8029e6e:	2102      	movs	r1, #2
 8029e70:	9100      	str	r1, [sp, #0]
 8029e72:	a802      	add	r0, sp, #8
 8029e74:	4621      	mov	r1, r4
 8029e76:	f000 fb6f 	bl	802a558 <__kernel_rem_pio2>
 8029e7a:	2d00      	cmp	r5, #0
 8029e7c:	f6bf af2c 	bge.w	8029cd8 <__ieee754_rem_pio2+0x60>
 8029e80:	ed94 7b00 	vldr	d7, [r4]
 8029e84:	eeb1 7b47 	vneg.f64	d7, d7
 8029e88:	ed84 7b00 	vstr	d7, [r4]
 8029e8c:	ed94 7b02 	vldr	d7, [r4, #8]
 8029e90:	e79e      	b.n	8029dd0 <__ieee754_rem_pio2+0x158>
 8029e92:	4603      	mov	r3, r0
 8029e94:	e7e0      	b.n	8029e58 <__ieee754_rem_pio2+0x1e0>
 8029e96:	bf00      	nop
 8029e98:	54400000 	.word	0x54400000
 8029e9c:	3ff921fb 	.word	0x3ff921fb
 8029ea0:	1a626331 	.word	0x1a626331
 8029ea4:	3dd0b461 	.word	0x3dd0b461
 8029ea8:	1a600000 	.word	0x1a600000
 8029eac:	3dd0b461 	.word	0x3dd0b461
 8029eb0:	2e037073 	.word	0x2e037073
 8029eb4:	3ba3198a 	.word	0x3ba3198a
 8029eb8:	6dc9c883 	.word	0x6dc9c883
 8029ebc:	3fe45f30 	.word	0x3fe45f30
 8029ec0:	2e000000 	.word	0x2e000000
 8029ec4:	3ba3198a 	.word	0x3ba3198a
 8029ec8:	252049c1 	.word	0x252049c1
 8029ecc:	397b839a 	.word	0x397b839a
 8029ed0:	00000000 	.word	0x00000000
 8029ed4:	41700000 	.word	0x41700000
 8029ed8:	3fe921fb 	.word	0x3fe921fb
 8029edc:	4002d97b 	.word	0x4002d97b
 8029ee0:	413921fb 	.word	0x413921fb
 8029ee4:	0802d850 	.word	0x0802d850
 8029ee8:	7fefffff 	.word	0x7fefffff
 8029eec:	0802d8d0 	.word	0x0802d8d0

08029ef0 <__ieee754_sqrt>:
 8029ef0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8029ef4:	4770      	bx	lr
	...

08029ef8 <__ieee754_asinf>:
 8029ef8:	b538      	push	{r3, r4, r5, lr}
 8029efa:	ee10 5a10 	vmov	r5, s0
 8029efe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8029f02:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8029f06:	ed2d 8b04 	vpush	{d8-d9}
 8029f0a:	d10c      	bne.n	8029f26 <__ieee754_asinf+0x2e>
 8029f0c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 802a088 <__ieee754_asinf+0x190>
 8029f10:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 802a08c <__ieee754_asinf+0x194>
 8029f14:	ee60 7a27 	vmul.f32	s15, s0, s15
 8029f18:	eee0 7a07 	vfma.f32	s15, s0, s14
 8029f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8029f20:	ecbd 8b04 	vpop	{d8-d9}
 8029f24:	bd38      	pop	{r3, r4, r5, pc}
 8029f26:	dd04      	ble.n	8029f32 <__ieee754_asinf+0x3a>
 8029f28:	ee70 7a40 	vsub.f32	s15, s0, s0
 8029f2c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8029f30:	e7f6      	b.n	8029f20 <__ieee754_asinf+0x28>
 8029f32:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8029f36:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8029f3a:	da0b      	bge.n	8029f54 <__ieee754_asinf+0x5c>
 8029f3c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8029f40:	da52      	bge.n	8029fe8 <__ieee754_asinf+0xf0>
 8029f42:	eddf 7a53 	vldr	s15, [pc, #332]	; 802a090 <__ieee754_asinf+0x198>
 8029f46:	ee70 7a27 	vadd.f32	s15, s0, s15
 8029f4a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8029f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029f52:	dce5      	bgt.n	8029f20 <__ieee754_asinf+0x28>
 8029f54:	f001 fc10 	bl	802b778 <fabsf>
 8029f58:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8029f5c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8029f60:	ee20 8a08 	vmul.f32	s16, s0, s16
 8029f64:	eddf 7a4b 	vldr	s15, [pc, #300]	; 802a094 <__ieee754_asinf+0x19c>
 8029f68:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 802a098 <__ieee754_asinf+0x1a0>
 8029f6c:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 802a09c <__ieee754_asinf+0x1a4>
 8029f70:	eea8 7a27 	vfma.f32	s14, s16, s15
 8029f74:	eddf 7a4a 	vldr	s15, [pc, #296]	; 802a0a0 <__ieee754_asinf+0x1a8>
 8029f78:	eee7 7a08 	vfma.f32	s15, s14, s16
 8029f7c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802a0a4 <__ieee754_asinf+0x1ac>
 8029f80:	eea7 7a88 	vfma.f32	s14, s15, s16
 8029f84:	eddf 7a48 	vldr	s15, [pc, #288]	; 802a0a8 <__ieee754_asinf+0x1b0>
 8029f88:	eee7 7a08 	vfma.f32	s15, s14, s16
 8029f8c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 802a0ac <__ieee754_asinf+0x1b4>
 8029f90:	eea7 9a88 	vfma.f32	s18, s15, s16
 8029f94:	eddf 7a46 	vldr	s15, [pc, #280]	; 802a0b0 <__ieee754_asinf+0x1b8>
 8029f98:	eee8 7a07 	vfma.f32	s15, s16, s14
 8029f9c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 802a0b4 <__ieee754_asinf+0x1bc>
 8029fa0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8029fa4:	eddf 7a44 	vldr	s15, [pc, #272]	; 802a0b8 <__ieee754_asinf+0x1c0>
 8029fa8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8029fac:	eeb0 0a48 	vmov.f32	s0, s16
 8029fb0:	eee7 8a88 	vfma.f32	s17, s15, s16
 8029fb4:	f000 fa5e 	bl	802a474 <__ieee754_sqrtf>
 8029fb8:	4b40      	ldr	r3, [pc, #256]	; (802a0bc <__ieee754_asinf+0x1c4>)
 8029fba:	ee29 9a08 	vmul.f32	s18, s18, s16
 8029fbe:	429c      	cmp	r4, r3
 8029fc0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8029fc4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8029fc8:	dd3d      	ble.n	802a046 <__ieee754_asinf+0x14e>
 8029fca:	eea0 0a06 	vfma.f32	s0, s0, s12
 8029fce:	eddf 7a3c 	vldr	s15, [pc, #240]	; 802a0c0 <__ieee754_asinf+0x1c8>
 8029fd2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8029fd6:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 802a08c <__ieee754_asinf+0x194>
 8029fda:	ee30 0a67 	vsub.f32	s0, s0, s15
 8029fde:	2d00      	cmp	r5, #0
 8029fe0:	bfd8      	it	le
 8029fe2:	eeb1 0a40 	vnegle.f32	s0, s0
 8029fe6:	e79b      	b.n	8029f20 <__ieee754_asinf+0x28>
 8029fe8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8029fec:	eddf 6a29 	vldr	s13, [pc, #164]	; 802a094 <__ieee754_asinf+0x19c>
 8029ff0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 802a098 <__ieee754_asinf+0x1a0>
 8029ff4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 802a0ac <__ieee754_asinf+0x1b4>
 8029ff8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8029ffc:	eddf 6a28 	vldr	s13, [pc, #160]	; 802a0a0 <__ieee754_asinf+0x1a8>
 802a000:	eee7 6a27 	vfma.f32	s13, s14, s15
 802a004:	ed9f 7a27 	vldr	s14, [pc, #156]	; 802a0a4 <__ieee754_asinf+0x1ac>
 802a008:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802a00c:	eddf 6a26 	vldr	s13, [pc, #152]	; 802a0a8 <__ieee754_asinf+0x1b0>
 802a010:	eee7 6a27 	vfma.f32	s13, s14, s15
 802a014:	ed9f 7a21 	vldr	s14, [pc, #132]	; 802a09c <__ieee754_asinf+0x1a4>
 802a018:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802a01c:	eddf 6a24 	vldr	s13, [pc, #144]	; 802a0b0 <__ieee754_asinf+0x1b8>
 802a020:	eee7 6a86 	vfma.f32	s13, s15, s12
 802a024:	ed9f 6a23 	vldr	s12, [pc, #140]	; 802a0b4 <__ieee754_asinf+0x1bc>
 802a028:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802a02c:	eddf 6a22 	vldr	s13, [pc, #136]	; 802a0b8 <__ieee754_asinf+0x1c0>
 802a030:	eee6 6a27 	vfma.f32	s13, s12, s15
 802a034:	ee27 7a27 	vmul.f32	s14, s14, s15
 802a038:	eee6 8aa7 	vfma.f32	s17, s13, s15
 802a03c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 802a040:	eea0 0a27 	vfma.f32	s0, s0, s15
 802a044:	e76c      	b.n	8029f20 <__ieee754_asinf+0x28>
 802a046:	ee10 3a10 	vmov	r3, s0
 802a04a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802a04e:	f023 030f 	bic.w	r3, r3, #15
 802a052:	ee07 3a90 	vmov	s15, r3
 802a056:	eef1 6a67 	vneg.f32	s13, s15
 802a05a:	eea6 8aa7 	vfma.f32	s16, s13, s15
 802a05e:	ee70 5a00 	vadd.f32	s11, s0, s0
 802a062:	ee37 0a80 	vadd.f32	s0, s15, s0
 802a066:	eddf 7a08 	vldr	s15, [pc, #32]	; 802a088 <__ieee754_asinf+0x190>
 802a06a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 802a06e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 802a0c4 <__ieee754_asinf+0x1cc>
 802a072:	eee5 7a47 	vfms.f32	s15, s10, s14
 802a076:	eed5 7a86 	vfnms.f32	s15, s11, s12
 802a07a:	eeb0 6a40 	vmov.f32	s12, s0
 802a07e:	eea6 6a87 	vfma.f32	s12, s13, s14
 802a082:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802a086:	e7a8      	b.n	8029fda <__ieee754_asinf+0xe2>
 802a088:	b33bbd2e 	.word	0xb33bbd2e
 802a08c:	3fc90fdb 	.word	0x3fc90fdb
 802a090:	7149f2ca 	.word	0x7149f2ca
 802a094:	3811ef08 	.word	0x3811ef08
 802a098:	3a4f7f04 	.word	0x3a4f7f04
 802a09c:	3e2aaaab 	.word	0x3e2aaaab
 802a0a0:	bd241146 	.word	0xbd241146
 802a0a4:	3e4e0aa8 	.word	0x3e4e0aa8
 802a0a8:	bea6b090 	.word	0xbea6b090
 802a0ac:	3d9dc62e 	.word	0x3d9dc62e
 802a0b0:	bf303361 	.word	0xbf303361
 802a0b4:	4001572d 	.word	0x4001572d
 802a0b8:	c019d139 	.word	0xc019d139
 802a0bc:	3f799999 	.word	0x3f799999
 802a0c0:	333bbd2e 	.word	0x333bbd2e
 802a0c4:	3f490fdb 	.word	0x3f490fdb

0802a0c8 <__ieee754_atan2f>:
 802a0c8:	ee10 2a90 	vmov	r2, s1
 802a0cc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802a0d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802a0d4:	b510      	push	{r4, lr}
 802a0d6:	eef0 7a40 	vmov.f32	s15, s0
 802a0da:	dc06      	bgt.n	802a0ea <__ieee754_atan2f+0x22>
 802a0dc:	ee10 0a10 	vmov	r0, s0
 802a0e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 802a0e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802a0e8:	dd04      	ble.n	802a0f4 <__ieee754_atan2f+0x2c>
 802a0ea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802a0ee:	eeb0 0a67 	vmov.f32	s0, s15
 802a0f2:	bd10      	pop	{r4, pc}
 802a0f4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 802a0f8:	d103      	bne.n	802a102 <__ieee754_atan2f+0x3a>
 802a0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a0fe:	f001 ba69 	b.w	802b5d4 <atanf>
 802a102:	1794      	asrs	r4, r2, #30
 802a104:	f004 0402 	and.w	r4, r4, #2
 802a108:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802a10c:	b93b      	cbnz	r3, 802a11e <__ieee754_atan2f+0x56>
 802a10e:	2c02      	cmp	r4, #2
 802a110:	d06b      	beq.n	802a1ea <__ieee754_atan2f+0x122>
 802a112:	ed9f 7a37 	vldr	s14, [pc, #220]	; 802a1f0 <__ieee754_atan2f+0x128>
 802a116:	2c03      	cmp	r4, #3
 802a118:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802a11c:	e7e7      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a11e:	b939      	cbnz	r1, 802a130 <__ieee754_atan2f+0x68>
 802a120:	eddf 7a34 	vldr	s15, [pc, #208]	; 802a1f4 <__ieee754_atan2f+0x12c>
 802a124:	ed9f 7a34 	vldr	s14, [pc, #208]	; 802a1f8 <__ieee754_atan2f+0x130>
 802a128:	2800      	cmp	r0, #0
 802a12a:	fe67 7a87 	vselge.f32	s15, s15, s14
 802a12e:	e7de      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a130:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802a134:	d121      	bne.n	802a17a <__ieee754_atan2f+0xb2>
 802a136:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802a13a:	d111      	bne.n	802a160 <__ieee754_atan2f+0x98>
 802a13c:	2c02      	cmp	r4, #2
 802a13e:	d009      	beq.n	802a154 <__ieee754_atan2f+0x8c>
 802a140:	2c03      	cmp	r4, #3
 802a142:	d00a      	beq.n	802a15a <__ieee754_atan2f+0x92>
 802a144:	eddf 7a2d 	vldr	s15, [pc, #180]	; 802a1fc <__ieee754_atan2f+0x134>
 802a148:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 802a200 <__ieee754_atan2f+0x138>
 802a14c:	2c01      	cmp	r4, #1
 802a14e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 802a152:	e7cc      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a154:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802a204 <__ieee754_atan2f+0x13c>
 802a158:	e7c9      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a15a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802a208 <__ieee754_atan2f+0x140>
 802a15e:	e7c6      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a160:	2c02      	cmp	r4, #2
 802a162:	d042      	beq.n	802a1ea <__ieee754_atan2f+0x122>
 802a164:	2c03      	cmp	r4, #3
 802a166:	d005      	beq.n	802a174 <__ieee754_atan2f+0xac>
 802a168:	2c01      	cmp	r4, #1
 802a16a:	eddf 7a28 	vldr	s15, [pc, #160]	; 802a20c <__ieee754_atan2f+0x144>
 802a16e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 802a210 <__ieee754_atan2f+0x148>
 802a172:	e7ec      	b.n	802a14e <__ieee754_atan2f+0x86>
 802a174:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802a1f0 <__ieee754_atan2f+0x128>
 802a178:	e7b9      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a17a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802a17e:	d0cf      	beq.n	802a120 <__ieee754_atan2f+0x58>
 802a180:	1a5b      	subs	r3, r3, r1
 802a182:	15db      	asrs	r3, r3, #23
 802a184:	2b3c      	cmp	r3, #60	; 0x3c
 802a186:	dc1a      	bgt.n	802a1be <__ieee754_atan2f+0xf6>
 802a188:	2a00      	cmp	r2, #0
 802a18a:	da01      	bge.n	802a190 <__ieee754_atan2f+0xc8>
 802a18c:	333c      	adds	r3, #60	; 0x3c
 802a18e:	db19      	blt.n	802a1c4 <__ieee754_atan2f+0xfc>
 802a190:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802a194:	f001 faf0 	bl	802b778 <fabsf>
 802a198:	f001 fa1c 	bl	802b5d4 <atanf>
 802a19c:	eef0 7a40 	vmov.f32	s15, s0
 802a1a0:	2c01      	cmp	r4, #1
 802a1a2:	d012      	beq.n	802a1ca <__ieee754_atan2f+0x102>
 802a1a4:	2c02      	cmp	r4, #2
 802a1a6:	d017      	beq.n	802a1d8 <__ieee754_atan2f+0x110>
 802a1a8:	2c00      	cmp	r4, #0
 802a1aa:	d0a0      	beq.n	802a0ee <__ieee754_atan2f+0x26>
 802a1ac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 802a214 <__ieee754_atan2f+0x14c>
 802a1b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a1b4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 802a218 <__ieee754_atan2f+0x150>
 802a1b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a1bc:	e797      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a1be:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802a1f4 <__ieee754_atan2f+0x12c>
 802a1c2:	e7ed      	b.n	802a1a0 <__ieee754_atan2f+0xd8>
 802a1c4:	eddf 7a12 	vldr	s15, [pc, #72]	; 802a210 <__ieee754_atan2f+0x148>
 802a1c8:	e7ea      	b.n	802a1a0 <__ieee754_atan2f+0xd8>
 802a1ca:	ee17 3a90 	vmov	r3, s15
 802a1ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802a1d2:	ee07 3a90 	vmov	s15, r3
 802a1d6:	e78a      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a1d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 802a214 <__ieee754_atan2f+0x14c>
 802a1dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a1e0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 802a218 <__ieee754_atan2f+0x150>
 802a1e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 802a1e8:	e781      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a1ea:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802a218 <__ieee754_atan2f+0x150>
 802a1ee:	e77e      	b.n	802a0ee <__ieee754_atan2f+0x26>
 802a1f0:	c0490fdb 	.word	0xc0490fdb
 802a1f4:	3fc90fdb 	.word	0x3fc90fdb
 802a1f8:	bfc90fdb 	.word	0xbfc90fdb
 802a1fc:	bf490fdb 	.word	0xbf490fdb
 802a200:	3f490fdb 	.word	0x3f490fdb
 802a204:	4016cbe4 	.word	0x4016cbe4
 802a208:	c016cbe4 	.word	0xc016cbe4
 802a20c:	80000000 	.word	0x80000000
 802a210:	00000000 	.word	0x00000000
 802a214:	33bbbd2e 	.word	0x33bbbd2e
 802a218:	40490fdb 	.word	0x40490fdb

0802a21c <__ieee754_rem_pio2f>:
 802a21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a21e:	ee10 6a10 	vmov	r6, s0
 802a222:	4b86      	ldr	r3, [pc, #536]	; (802a43c <__ieee754_rem_pio2f+0x220>)
 802a224:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 802a228:	429c      	cmp	r4, r3
 802a22a:	b087      	sub	sp, #28
 802a22c:	4605      	mov	r5, r0
 802a22e:	dc05      	bgt.n	802a23c <__ieee754_rem_pio2f+0x20>
 802a230:	2300      	movs	r3, #0
 802a232:	ed85 0a00 	vstr	s0, [r5]
 802a236:	6043      	str	r3, [r0, #4]
 802a238:	2000      	movs	r0, #0
 802a23a:	e020      	b.n	802a27e <__ieee754_rem_pio2f+0x62>
 802a23c:	4b80      	ldr	r3, [pc, #512]	; (802a440 <__ieee754_rem_pio2f+0x224>)
 802a23e:	429c      	cmp	r4, r3
 802a240:	dc38      	bgt.n	802a2b4 <__ieee754_rem_pio2f+0x98>
 802a242:	2e00      	cmp	r6, #0
 802a244:	f024 040f 	bic.w	r4, r4, #15
 802a248:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 802a444 <__ieee754_rem_pio2f+0x228>
 802a24c:	4b7e      	ldr	r3, [pc, #504]	; (802a448 <__ieee754_rem_pio2f+0x22c>)
 802a24e:	dd18      	ble.n	802a282 <__ieee754_rem_pio2f+0x66>
 802a250:	429c      	cmp	r4, r3
 802a252:	ee70 7a47 	vsub.f32	s15, s0, s14
 802a256:	bf09      	itett	eq
 802a258:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 802a44c <__ieee754_rem_pio2f+0x230>
 802a25c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 802a450 <__ieee754_rem_pio2f+0x234>
 802a260:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802a264:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 802a454 <__ieee754_rem_pio2f+0x238>
 802a268:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802a26c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802a270:	edc0 6a00 	vstr	s13, [r0]
 802a274:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a278:	edc0 7a01 	vstr	s15, [r0, #4]
 802a27c:	2001      	movs	r0, #1
 802a27e:	b007      	add	sp, #28
 802a280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a282:	429c      	cmp	r4, r3
 802a284:	ee70 7a07 	vadd.f32	s15, s0, s14
 802a288:	bf09      	itett	eq
 802a28a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 802a44c <__ieee754_rem_pio2f+0x230>
 802a28e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 802a450 <__ieee754_rem_pio2f+0x234>
 802a292:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802a296:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 802a454 <__ieee754_rem_pio2f+0x238>
 802a29a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802a29e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802a2a2:	edc0 6a00 	vstr	s13, [r0]
 802a2a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a2aa:	edc0 7a01 	vstr	s15, [r0, #4]
 802a2ae:	f04f 30ff 	mov.w	r0, #4294967295
 802a2b2:	e7e4      	b.n	802a27e <__ieee754_rem_pio2f+0x62>
 802a2b4:	4b68      	ldr	r3, [pc, #416]	; (802a458 <__ieee754_rem_pio2f+0x23c>)
 802a2b6:	429c      	cmp	r4, r3
 802a2b8:	dc71      	bgt.n	802a39e <__ieee754_rem_pio2f+0x182>
 802a2ba:	f001 fa5d 	bl	802b778 <fabsf>
 802a2be:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802a45c <__ieee754_rem_pio2f+0x240>
 802a2c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802a2c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 802a2ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802a2ce:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 802a2d2:	ee17 0a90 	vmov	r0, s15
 802a2d6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802a444 <__ieee754_rem_pio2f+0x228>
 802a2da:	eeb1 7a46 	vneg.f32	s14, s12
 802a2de:	eea7 0a27 	vfma.f32	s0, s14, s15
 802a2e2:	281f      	cmp	r0, #31
 802a2e4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802a450 <__ieee754_rem_pio2f+0x234>
 802a2e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 802a2ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 802a2f0:	ee16 3a90 	vmov	r3, s13
 802a2f4:	dc1c      	bgt.n	802a330 <__ieee754_rem_pio2f+0x114>
 802a2f6:	1e47      	subs	r7, r0, #1
 802a2f8:	4959      	ldr	r1, [pc, #356]	; (802a460 <__ieee754_rem_pio2f+0x244>)
 802a2fa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802a2fe:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 802a302:	428a      	cmp	r2, r1
 802a304:	d014      	beq.n	802a330 <__ieee754_rem_pio2f+0x114>
 802a306:	602b      	str	r3, [r5, #0]
 802a308:	ed95 7a00 	vldr	s14, [r5]
 802a30c:	ee30 0a47 	vsub.f32	s0, s0, s14
 802a310:	2e00      	cmp	r6, #0
 802a312:	ee30 0a67 	vsub.f32	s0, s0, s15
 802a316:	ed85 0a01 	vstr	s0, [r5, #4]
 802a31a:	dab0      	bge.n	802a27e <__ieee754_rem_pio2f+0x62>
 802a31c:	eeb1 7a47 	vneg.f32	s14, s14
 802a320:	eeb1 0a40 	vneg.f32	s0, s0
 802a324:	ed85 7a00 	vstr	s14, [r5]
 802a328:	ed85 0a01 	vstr	s0, [r5, #4]
 802a32c:	4240      	negs	r0, r0
 802a32e:	e7a6      	b.n	802a27e <__ieee754_rem_pio2f+0x62>
 802a330:	15e4      	asrs	r4, r4, #23
 802a332:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802a336:	1aa2      	subs	r2, r4, r2
 802a338:	2a08      	cmp	r2, #8
 802a33a:	dde4      	ble.n	802a306 <__ieee754_rem_pio2f+0xea>
 802a33c:	eddf 7a43 	vldr	s15, [pc, #268]	; 802a44c <__ieee754_rem_pio2f+0x230>
 802a340:	eef0 6a40 	vmov.f32	s13, s0
 802a344:	eee7 6a27 	vfma.f32	s13, s14, s15
 802a348:	ee30 0a66 	vsub.f32	s0, s0, s13
 802a34c:	eea7 0a27 	vfma.f32	s0, s14, s15
 802a350:	eddf 7a40 	vldr	s15, [pc, #256]	; 802a454 <__ieee754_rem_pio2f+0x238>
 802a354:	ee96 0a27 	vfnms.f32	s0, s12, s15
 802a358:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802a35c:	eef0 7a40 	vmov.f32	s15, s0
 802a360:	ee15 3a90 	vmov	r3, s11
 802a364:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802a368:	1aa4      	subs	r4, r4, r2
 802a36a:	2c19      	cmp	r4, #25
 802a36c:	dc04      	bgt.n	802a378 <__ieee754_rem_pio2f+0x15c>
 802a36e:	edc5 5a00 	vstr	s11, [r5]
 802a372:	eeb0 0a66 	vmov.f32	s0, s13
 802a376:	e7c7      	b.n	802a308 <__ieee754_rem_pio2f+0xec>
 802a378:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802a464 <__ieee754_rem_pio2f+0x248>
 802a37c:	eeb0 0a66 	vmov.f32	s0, s13
 802a380:	eea7 0a25 	vfma.f32	s0, s14, s11
 802a384:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802a388:	eee7 7a25 	vfma.f32	s15, s14, s11
 802a38c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 802a468 <__ieee754_rem_pio2f+0x24c>
 802a390:	eed6 7a07 	vfnms.f32	s15, s12, s14
 802a394:	ee30 7a67 	vsub.f32	s14, s0, s15
 802a398:	ed85 7a00 	vstr	s14, [r5]
 802a39c:	e7b4      	b.n	802a308 <__ieee754_rem_pio2f+0xec>
 802a39e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802a3a2:	db06      	blt.n	802a3b2 <__ieee754_rem_pio2f+0x196>
 802a3a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 802a3a8:	edc0 7a01 	vstr	s15, [r0, #4]
 802a3ac:	edc0 7a00 	vstr	s15, [r0]
 802a3b0:	e742      	b.n	802a238 <__ieee754_rem_pio2f+0x1c>
 802a3b2:	15e2      	asrs	r2, r4, #23
 802a3b4:	3a86      	subs	r2, #134	; 0x86
 802a3b6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 802a3ba:	ee07 3a90 	vmov	s15, r3
 802a3be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802a3c2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 802a46c <__ieee754_rem_pio2f+0x250>
 802a3c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802a3ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a3ce:	ed8d 7a03 	vstr	s14, [sp, #12]
 802a3d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802a3d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802a3da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802a3de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a3e2:	ed8d 7a04 	vstr	s14, [sp, #16]
 802a3e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802a3ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 802a3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a3f2:	edcd 7a05 	vstr	s15, [sp, #20]
 802a3f6:	d11e      	bne.n	802a436 <__ieee754_rem_pio2f+0x21a>
 802a3f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802a3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a400:	bf0c      	ite	eq
 802a402:	2301      	moveq	r3, #1
 802a404:	2302      	movne	r3, #2
 802a406:	491a      	ldr	r1, [pc, #104]	; (802a470 <__ieee754_rem_pio2f+0x254>)
 802a408:	9101      	str	r1, [sp, #4]
 802a40a:	2102      	movs	r1, #2
 802a40c:	9100      	str	r1, [sp, #0]
 802a40e:	a803      	add	r0, sp, #12
 802a410:	4629      	mov	r1, r5
 802a412:	f000 fbf3 	bl	802abfc <__kernel_rem_pio2f>
 802a416:	2e00      	cmp	r6, #0
 802a418:	f6bf af31 	bge.w	802a27e <__ieee754_rem_pio2f+0x62>
 802a41c:	edd5 7a00 	vldr	s15, [r5]
 802a420:	eef1 7a67 	vneg.f32	s15, s15
 802a424:	edc5 7a00 	vstr	s15, [r5]
 802a428:	edd5 7a01 	vldr	s15, [r5, #4]
 802a42c:	eef1 7a67 	vneg.f32	s15, s15
 802a430:	edc5 7a01 	vstr	s15, [r5, #4]
 802a434:	e77a      	b.n	802a32c <__ieee754_rem_pio2f+0x110>
 802a436:	2303      	movs	r3, #3
 802a438:	e7e5      	b.n	802a406 <__ieee754_rem_pio2f+0x1ea>
 802a43a:	bf00      	nop
 802a43c:	3f490fd8 	.word	0x3f490fd8
 802a440:	4016cbe3 	.word	0x4016cbe3
 802a444:	3fc90f80 	.word	0x3fc90f80
 802a448:	3fc90fd0 	.word	0x3fc90fd0
 802a44c:	37354400 	.word	0x37354400
 802a450:	37354443 	.word	0x37354443
 802a454:	2e85a308 	.word	0x2e85a308
 802a458:	43490f80 	.word	0x43490f80
 802a45c:	3f22f984 	.word	0x3f22f984
 802a460:	0802d9d8 	.word	0x0802d9d8
 802a464:	2e85a300 	.word	0x2e85a300
 802a468:	248d3132 	.word	0x248d3132
 802a46c:	43800000 	.word	0x43800000
 802a470:	0802da58 	.word	0x0802da58

0802a474 <__ieee754_sqrtf>:
 802a474:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802a478:	4770      	bx	lr
 802a47a:	0000      	movs	r0, r0
 802a47c:	0000      	movs	r0, r0
	...

0802a480 <__kernel_cos>:
 802a480:	ee10 1a90 	vmov	r1, s1
 802a484:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802a488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802a48c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 802a490:	da05      	bge.n	802a49e <__kernel_cos+0x1e>
 802a492:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 802a496:	ee16 3a90 	vmov	r3, s13
 802a49a:	2b00      	cmp	r3, #0
 802a49c:	d03d      	beq.n	802a51a <__kernel_cos+0x9a>
 802a49e:	ee20 4b00 	vmul.f64	d4, d0, d0
 802a4a2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 802a4a6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 802a520 <__kernel_cos+0xa0>
 802a4aa:	ee21 1b40 	vnmul.f64	d1, d1, d0
 802a4ae:	ee24 6b06 	vmul.f64	d6, d4, d6
 802a4b2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 802a528 <__kernel_cos+0xa8>
 802a4b6:	eea4 5b03 	vfma.f64	d5, d4, d3
 802a4ba:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 802a530 <__kernel_cos+0xb0>
 802a4be:	eea5 3b04 	vfma.f64	d3, d5, d4
 802a4c2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 802a538 <__kernel_cos+0xb8>
 802a4c6:	eea3 5b04 	vfma.f64	d5, d3, d4
 802a4ca:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 802a540 <__kernel_cos+0xc0>
 802a4ce:	4b20      	ldr	r3, [pc, #128]	; (802a550 <__kernel_cos+0xd0>)
 802a4d0:	eea5 3b04 	vfma.f64	d3, d5, d4
 802a4d4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 802a548 <__kernel_cos+0xc8>
 802a4d8:	4299      	cmp	r1, r3
 802a4da:	eea3 5b04 	vfma.f64	d5, d3, d4
 802a4de:	ee25 5b04 	vmul.f64	d5, d5, d4
 802a4e2:	eea4 1b05 	vfma.f64	d1, d4, d5
 802a4e6:	dc04      	bgt.n	802a4f2 <__kernel_cos+0x72>
 802a4e8:	ee36 6b41 	vsub.f64	d6, d6, d1
 802a4ec:	ee37 0b46 	vsub.f64	d0, d7, d6
 802a4f0:	4770      	bx	lr
 802a4f2:	4b18      	ldr	r3, [pc, #96]	; (802a554 <__kernel_cos+0xd4>)
 802a4f4:	4299      	cmp	r1, r3
 802a4f6:	dc0d      	bgt.n	802a514 <__kernel_cos+0x94>
 802a4f8:	2200      	movs	r2, #0
 802a4fa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 802a4fe:	ec43 2b15 	vmov	d5, r2, r3
 802a502:	ee37 0b45 	vsub.f64	d0, d7, d5
 802a506:	ee36 6b45 	vsub.f64	d6, d6, d5
 802a50a:	ee36 6b41 	vsub.f64	d6, d6, d1
 802a50e:	ee30 0b46 	vsub.f64	d0, d0, d6
 802a512:	4770      	bx	lr
 802a514:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 802a518:	e7f3      	b.n	802a502 <__kernel_cos+0x82>
 802a51a:	eeb0 0b47 	vmov.f64	d0, d7
 802a51e:	4770      	bx	lr
 802a520:	be8838d4 	.word	0xbe8838d4
 802a524:	bda8fae9 	.word	0xbda8fae9
 802a528:	bdb4b1c4 	.word	0xbdb4b1c4
 802a52c:	3e21ee9e 	.word	0x3e21ee9e
 802a530:	809c52ad 	.word	0x809c52ad
 802a534:	be927e4f 	.word	0xbe927e4f
 802a538:	19cb1590 	.word	0x19cb1590
 802a53c:	3efa01a0 	.word	0x3efa01a0
 802a540:	16c15177 	.word	0x16c15177
 802a544:	bf56c16c 	.word	0xbf56c16c
 802a548:	5555554c 	.word	0x5555554c
 802a54c:	3fa55555 	.word	0x3fa55555
 802a550:	3fd33332 	.word	0x3fd33332
 802a554:	3fe90000 	.word	0x3fe90000

0802a558 <__kernel_rem_pio2>:
 802a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a55c:	ed2d 8b06 	vpush	{d8-d10}
 802a560:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 802a564:	469b      	mov	fp, r3
 802a566:	460e      	mov	r6, r1
 802a568:	4bc7      	ldr	r3, [pc, #796]	; (802a888 <__kernel_rem_pio2+0x330>)
 802a56a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 802a56c:	9002      	str	r0, [sp, #8]
 802a56e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 802a572:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 802a574:	1ed1      	subs	r1, r2, #3
 802a576:	2318      	movs	r3, #24
 802a578:	f06f 0417 	mvn.w	r4, #23
 802a57c:	fb91 f1f3 	sdiv	r1, r1, r3
 802a580:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802a584:	f10b 3aff 	add.w	sl, fp, #4294967295
 802a588:	fb01 4404 	mla	r4, r1, r4, r4
 802a58c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 802a870 <__kernel_rem_pio2+0x318>
 802a590:	4414      	add	r4, r2
 802a592:	eba1 050a 	sub.w	r5, r1, sl
 802a596:	aa1a      	add	r2, sp, #104	; 0x68
 802a598:	eb09 070a 	add.w	r7, r9, sl
 802a59c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 802a5a0:	4696      	mov	lr, r2
 802a5a2:	2300      	movs	r3, #0
 802a5a4:	42bb      	cmp	r3, r7
 802a5a6:	dd0f      	ble.n	802a5c8 <__kernel_rem_pio2+0x70>
 802a5a8:	af6a      	add	r7, sp, #424	; 0x1a8
 802a5aa:	2200      	movs	r2, #0
 802a5ac:	454a      	cmp	r2, r9
 802a5ae:	dc28      	bgt.n	802a602 <__kernel_rem_pio2+0xaa>
 802a5b0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 802a5b4:	eb0b 0302 	add.w	r3, fp, r2
 802a5b8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 802a5bc:	9d02      	ldr	r5, [sp, #8]
 802a5be:	ed9f 7bac 	vldr	d7, [pc, #688]	; 802a870 <__kernel_rem_pio2+0x318>
 802a5c2:	f04f 0c00 	mov.w	ip, #0
 802a5c6:	e016      	b.n	802a5f6 <__kernel_rem_pio2+0x9e>
 802a5c8:	42dd      	cmn	r5, r3
 802a5ca:	d409      	bmi.n	802a5e0 <__kernel_rem_pio2+0x88>
 802a5cc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802a5d0:	ee07 2a90 	vmov	s15, r2
 802a5d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802a5d8:	ecae 7b02 	vstmia	lr!, {d7}
 802a5dc:	3301      	adds	r3, #1
 802a5de:	e7e1      	b.n	802a5a4 <__kernel_rem_pio2+0x4c>
 802a5e0:	eeb0 7b46 	vmov.f64	d7, d6
 802a5e4:	e7f8      	b.n	802a5d8 <__kernel_rem_pio2+0x80>
 802a5e6:	ecb5 5b02 	vldmia	r5!, {d5}
 802a5ea:	ed33 6b02 	vldmdb	r3!, {d6}
 802a5ee:	f10c 0c01 	add.w	ip, ip, #1
 802a5f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 802a5f6:	45d4      	cmp	ip, sl
 802a5f8:	ddf5      	ble.n	802a5e6 <__kernel_rem_pio2+0x8e>
 802a5fa:	eca7 7b02 	vstmia	r7!, {d7}
 802a5fe:	3201      	adds	r2, #1
 802a600:	e7d4      	b.n	802a5ac <__kernel_rem_pio2+0x54>
 802a602:	ab06      	add	r3, sp, #24
 802a604:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 802a608:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 802a878 <__kernel_rem_pio2+0x320>
 802a60c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 802a880 <__kernel_rem_pio2+0x328>
 802a610:	9304      	str	r3, [sp, #16]
 802a612:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 802a616:	9303      	str	r3, [sp, #12]
 802a618:	464d      	mov	r5, r9
 802a61a:	ab92      	add	r3, sp, #584	; 0x248
 802a61c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 802a620:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802a624:	3f01      	subs	r7, #1
 802a626:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 802a62a:	00ff      	lsls	r7, r7, #3
 802a62c:	ab92      	add	r3, sp, #584	; 0x248
 802a62e:	19da      	adds	r2, r3, r7
 802a630:	3a98      	subs	r2, #152	; 0x98
 802a632:	2300      	movs	r3, #0
 802a634:	1ae9      	subs	r1, r5, r3
 802a636:	2900      	cmp	r1, #0
 802a638:	dc4e      	bgt.n	802a6d8 <__kernel_rem_pio2+0x180>
 802a63a:	4620      	mov	r0, r4
 802a63c:	f000 ff4c 	bl	802b4d8 <scalbn>
 802a640:	eeb0 8b40 	vmov.f64	d8, d0
 802a644:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 802a648:	ee28 0b00 	vmul.f64	d0, d8, d0
 802a64c:	f7fe f9e4 	bl	8028a18 <floor>
 802a650:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 802a654:	eea0 8b47 	vfms.f64	d8, d0, d7
 802a658:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 802a65c:	2c00      	cmp	r4, #0
 802a65e:	edcd 7a01 	vstr	s15, [sp, #4]
 802a662:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802a666:	ee38 8b47 	vsub.f64	d8, d8, d7
 802a66a:	dd4a      	ble.n	802a702 <__kernel_rem_pio2+0x1aa>
 802a66c:	1e69      	subs	r1, r5, #1
 802a66e:	ab06      	add	r3, sp, #24
 802a670:	f1c4 0018 	rsb	r0, r4, #24
 802a674:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 802a678:	9a01      	ldr	r2, [sp, #4]
 802a67a:	fa4c f300 	asr.w	r3, ip, r0
 802a67e:	441a      	add	r2, r3
 802a680:	4083      	lsls	r3, r0
 802a682:	9201      	str	r2, [sp, #4]
 802a684:	ebac 0203 	sub.w	r2, ip, r3
 802a688:	ab06      	add	r3, sp, #24
 802a68a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 802a68e:	f1c4 0317 	rsb	r3, r4, #23
 802a692:	fa42 f803 	asr.w	r8, r2, r3
 802a696:	f1b8 0f00 	cmp.w	r8, #0
 802a69a:	dd43      	ble.n	802a724 <__kernel_rem_pio2+0x1cc>
 802a69c:	9b01      	ldr	r3, [sp, #4]
 802a69e:	2000      	movs	r0, #0
 802a6a0:	3301      	adds	r3, #1
 802a6a2:	9301      	str	r3, [sp, #4]
 802a6a4:	4601      	mov	r1, r0
 802a6a6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 802a6aa:	4285      	cmp	r5, r0
 802a6ac:	dc6e      	bgt.n	802a78c <__kernel_rem_pio2+0x234>
 802a6ae:	2c00      	cmp	r4, #0
 802a6b0:	dd04      	ble.n	802a6bc <__kernel_rem_pio2+0x164>
 802a6b2:	2c01      	cmp	r4, #1
 802a6b4:	d07f      	beq.n	802a7b6 <__kernel_rem_pio2+0x25e>
 802a6b6:	2c02      	cmp	r4, #2
 802a6b8:	f000 8087 	beq.w	802a7ca <__kernel_rem_pio2+0x272>
 802a6bc:	f1b8 0f02 	cmp.w	r8, #2
 802a6c0:	d130      	bne.n	802a724 <__kernel_rem_pio2+0x1cc>
 802a6c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802a6c6:	ee30 8b48 	vsub.f64	d8, d0, d8
 802a6ca:	b359      	cbz	r1, 802a724 <__kernel_rem_pio2+0x1cc>
 802a6cc:	4620      	mov	r0, r4
 802a6ce:	f000 ff03 	bl	802b4d8 <scalbn>
 802a6d2:	ee38 8b40 	vsub.f64	d8, d8, d0
 802a6d6:	e025      	b.n	802a724 <__kernel_rem_pio2+0x1cc>
 802a6d8:	ee20 7b09 	vmul.f64	d7, d0, d9
 802a6dc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 802a6e0:	a806      	add	r0, sp, #24
 802a6e2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 802a6e6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 802a6ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802a6ee:	ee10 1a10 	vmov	r1, s0
 802a6f2:	ed32 0b02 	vldmdb	r2!, {d0}
 802a6f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 802a6fa:	ee37 0b00 	vadd.f64	d0, d7, d0
 802a6fe:	3301      	adds	r3, #1
 802a700:	e798      	b.n	802a634 <__kernel_rem_pio2+0xdc>
 802a702:	d106      	bne.n	802a712 <__kernel_rem_pio2+0x1ba>
 802a704:	1e6b      	subs	r3, r5, #1
 802a706:	aa06      	add	r2, sp, #24
 802a708:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802a70c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 802a710:	e7c1      	b.n	802a696 <__kernel_rem_pio2+0x13e>
 802a712:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802a716:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a71e:	da32      	bge.n	802a786 <__kernel_rem_pio2+0x22e>
 802a720:	f04f 0800 	mov.w	r8, #0
 802a724:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802a728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a72c:	f040 80b0 	bne.w	802a890 <__kernel_rem_pio2+0x338>
 802a730:	1e6b      	subs	r3, r5, #1
 802a732:	4618      	mov	r0, r3
 802a734:	2200      	movs	r2, #0
 802a736:	4548      	cmp	r0, r9
 802a738:	da4e      	bge.n	802a7d8 <__kernel_rem_pio2+0x280>
 802a73a:	2a00      	cmp	r2, #0
 802a73c:	f000 8088 	beq.w	802a850 <__kernel_rem_pio2+0x2f8>
 802a740:	aa06      	add	r2, sp, #24
 802a742:	3c18      	subs	r4, #24
 802a744:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802a748:	2900      	cmp	r1, #0
 802a74a:	f000 808e 	beq.w	802a86a <__kernel_rem_pio2+0x312>
 802a74e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802a752:	4620      	mov	r0, r4
 802a754:	9302      	str	r3, [sp, #8]
 802a756:	f000 febf 	bl	802b4d8 <scalbn>
 802a75a:	9b02      	ldr	r3, [sp, #8]
 802a75c:	aa6a      	add	r2, sp, #424	; 0x1a8
 802a75e:	00d9      	lsls	r1, r3, #3
 802a760:	ed9f 6b45 	vldr	d6, [pc, #276]	; 802a878 <__kernel_rem_pio2+0x320>
 802a764:	1850      	adds	r0, r2, r1
 802a766:	f100 0508 	add.w	r5, r0, #8
 802a76a:	461c      	mov	r4, r3
 802a76c:	2c00      	cmp	r4, #0
 802a76e:	f280 80bd 	bge.w	802a8ec <__kernel_rem_pio2+0x394>
 802a772:	2500      	movs	r5, #0
 802a774:	1b5c      	subs	r4, r3, r5
 802a776:	2c00      	cmp	r4, #0
 802a778:	f2c0 80dd 	blt.w	802a936 <__kernel_rem_pio2+0x3de>
 802a77c:	4f43      	ldr	r7, [pc, #268]	; (802a88c <__kernel_rem_pio2+0x334>)
 802a77e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 802a870 <__kernel_rem_pio2+0x318>
 802a782:	2400      	movs	r4, #0
 802a784:	e0cb      	b.n	802a91e <__kernel_rem_pio2+0x3c6>
 802a786:	f04f 0802 	mov.w	r8, #2
 802a78a:	e787      	b.n	802a69c <__kernel_rem_pio2+0x144>
 802a78c:	ab06      	add	r3, sp, #24
 802a78e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802a792:	b949      	cbnz	r1, 802a7a8 <__kernel_rem_pio2+0x250>
 802a794:	b12b      	cbz	r3, 802a7a2 <__kernel_rem_pio2+0x24a>
 802a796:	aa06      	add	r2, sp, #24
 802a798:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 802a79c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802a7a0:	2301      	movs	r3, #1
 802a7a2:	3001      	adds	r0, #1
 802a7a4:	4619      	mov	r1, r3
 802a7a6:	e780      	b.n	802a6aa <__kernel_rem_pio2+0x152>
 802a7a8:	aa06      	add	r2, sp, #24
 802a7aa:	ebac 0303 	sub.w	r3, ip, r3
 802a7ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802a7b2:	460b      	mov	r3, r1
 802a7b4:	e7f5      	b.n	802a7a2 <__kernel_rem_pio2+0x24a>
 802a7b6:	1e68      	subs	r0, r5, #1
 802a7b8:	ab06      	add	r3, sp, #24
 802a7ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802a7be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802a7c2:	aa06      	add	r2, sp, #24
 802a7c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802a7c8:	e778      	b.n	802a6bc <__kernel_rem_pio2+0x164>
 802a7ca:	1e68      	subs	r0, r5, #1
 802a7cc:	ab06      	add	r3, sp, #24
 802a7ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802a7d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802a7d6:	e7f4      	b.n	802a7c2 <__kernel_rem_pio2+0x26a>
 802a7d8:	a906      	add	r1, sp, #24
 802a7da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802a7de:	3801      	subs	r0, #1
 802a7e0:	430a      	orrs	r2, r1
 802a7e2:	e7a8      	b.n	802a736 <__kernel_rem_pio2+0x1de>
 802a7e4:	f10c 0c01 	add.w	ip, ip, #1
 802a7e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802a7ec:	2a00      	cmp	r2, #0
 802a7ee:	d0f9      	beq.n	802a7e4 <__kernel_rem_pio2+0x28c>
 802a7f0:	eb0b 0305 	add.w	r3, fp, r5
 802a7f4:	aa1a      	add	r2, sp, #104	; 0x68
 802a7f6:	00db      	lsls	r3, r3, #3
 802a7f8:	1898      	adds	r0, r3, r2
 802a7fa:	3008      	adds	r0, #8
 802a7fc:	1c69      	adds	r1, r5, #1
 802a7fe:	3708      	adds	r7, #8
 802a800:	2200      	movs	r2, #0
 802a802:	4465      	add	r5, ip
 802a804:	9005      	str	r0, [sp, #20]
 802a806:	428d      	cmp	r5, r1
 802a808:	f6ff af07 	blt.w	802a61a <__kernel_rem_pio2+0xc2>
 802a80c:	a81a      	add	r0, sp, #104	; 0x68
 802a80e:	eb02 0c03 	add.w	ip, r2, r3
 802a812:	4484      	add	ip, r0
 802a814:	9803      	ldr	r0, [sp, #12]
 802a816:	f8dd e008 	ldr.w	lr, [sp, #8]
 802a81a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 802a81e:	9001      	str	r0, [sp, #4]
 802a820:	ee07 0a90 	vmov	s15, r0
 802a824:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802a828:	9805      	ldr	r0, [sp, #20]
 802a82a:	ed8c 7b00 	vstr	d7, [ip]
 802a82e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 802a870 <__kernel_rem_pio2+0x318>
 802a832:	eb00 0802 	add.w	r8, r0, r2
 802a836:	f04f 0c00 	mov.w	ip, #0
 802a83a:	45d4      	cmp	ip, sl
 802a83c:	dd0c      	ble.n	802a858 <__kernel_rem_pio2+0x300>
 802a83e:	eb02 0c07 	add.w	ip, r2, r7
 802a842:	a86a      	add	r0, sp, #424	; 0x1a8
 802a844:	4484      	add	ip, r0
 802a846:	ed8c 7b02 	vstr	d7, [ip, #8]
 802a84a:	3101      	adds	r1, #1
 802a84c:	3208      	adds	r2, #8
 802a84e:	e7da      	b.n	802a806 <__kernel_rem_pio2+0x2ae>
 802a850:	9b04      	ldr	r3, [sp, #16]
 802a852:	f04f 0c01 	mov.w	ip, #1
 802a856:	e7c7      	b.n	802a7e8 <__kernel_rem_pio2+0x290>
 802a858:	ecbe 5b02 	vldmia	lr!, {d5}
 802a85c:	ed38 6b02 	vldmdb	r8!, {d6}
 802a860:	f10c 0c01 	add.w	ip, ip, #1
 802a864:	eea5 7b06 	vfma.f64	d7, d5, d6
 802a868:	e7e7      	b.n	802a83a <__kernel_rem_pio2+0x2e2>
 802a86a:	3b01      	subs	r3, #1
 802a86c:	e768      	b.n	802a740 <__kernel_rem_pio2+0x1e8>
 802a86e:	bf00      	nop
	...
 802a87c:	3e700000 	.word	0x3e700000
 802a880:	00000000 	.word	0x00000000
 802a884:	41700000 	.word	0x41700000
 802a888:	0802ddb0 	.word	0x0802ddb0
 802a88c:	0802dd70 	.word	0x0802dd70
 802a890:	4260      	negs	r0, r4
 802a892:	eeb0 0b48 	vmov.f64	d0, d8
 802a896:	f000 fe1f 	bl	802b4d8 <scalbn>
 802a89a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 802aa78 <__kernel_rem_pio2+0x520>
 802a89e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 802a8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a8a6:	db18      	blt.n	802a8da <__kernel_rem_pio2+0x382>
 802a8a8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 802aa80 <__kernel_rem_pio2+0x528>
 802a8ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 802a8b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 802a8b4:	aa06      	add	r2, sp, #24
 802a8b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 802a8ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 802a8be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802a8c2:	a906      	add	r1, sp, #24
 802a8c4:	ee10 3a10 	vmov	r3, s0
 802a8c8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802a8cc:	1c6b      	adds	r3, r5, #1
 802a8ce:	ee17 2a10 	vmov	r2, s14
 802a8d2:	3418      	adds	r4, #24
 802a8d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802a8d8:	e739      	b.n	802a74e <__kernel_rem_pio2+0x1f6>
 802a8da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802a8de:	aa06      	add	r2, sp, #24
 802a8e0:	ee10 3a10 	vmov	r3, s0
 802a8e4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802a8e8:	462b      	mov	r3, r5
 802a8ea:	e730      	b.n	802a74e <__kernel_rem_pio2+0x1f6>
 802a8ec:	aa06      	add	r2, sp, #24
 802a8ee:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 802a8f2:	9202      	str	r2, [sp, #8]
 802a8f4:	ee07 2a90 	vmov	s15, r2
 802a8f8:	3c01      	subs	r4, #1
 802a8fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802a8fe:	ee27 7b00 	vmul.f64	d7, d7, d0
 802a902:	ee20 0b06 	vmul.f64	d0, d0, d6
 802a906:	ed25 7b02 	vstmdb	r5!, {d7}
 802a90a:	e72f      	b.n	802a76c <__kernel_rem_pio2+0x214>
 802a90c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 802a910:	ecb7 5b02 	vldmia	r7!, {d5}
 802a914:	ed9c 6b00 	vldr	d6, [ip]
 802a918:	3401      	adds	r4, #1
 802a91a:	eea5 7b06 	vfma.f64	d7, d5, d6
 802a91e:	454c      	cmp	r4, r9
 802a920:	dc01      	bgt.n	802a926 <__kernel_rem_pio2+0x3ce>
 802a922:	42a5      	cmp	r5, r4
 802a924:	daf2      	bge.n	802a90c <__kernel_rem_pio2+0x3b4>
 802a926:	aa42      	add	r2, sp, #264	; 0x108
 802a928:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 802a92c:	ed84 7b00 	vstr	d7, [r4]
 802a930:	3501      	adds	r5, #1
 802a932:	3808      	subs	r0, #8
 802a934:	e71e      	b.n	802a774 <__kernel_rem_pio2+0x21c>
 802a936:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 802a938:	2a03      	cmp	r2, #3
 802a93a:	d84e      	bhi.n	802a9da <__kernel_rem_pio2+0x482>
 802a93c:	e8df f002 	tbb	[pc, r2]
 802a940:	021f1f3e 	.word	0x021f1f3e
 802a944:	3108      	adds	r1, #8
 802a946:	aa42      	add	r2, sp, #264	; 0x108
 802a948:	4411      	add	r1, r2
 802a94a:	4608      	mov	r0, r1
 802a94c:	461c      	mov	r4, r3
 802a94e:	2c00      	cmp	r4, #0
 802a950:	dc61      	bgt.n	802aa16 <__kernel_rem_pio2+0x4be>
 802a952:	4608      	mov	r0, r1
 802a954:	461c      	mov	r4, r3
 802a956:	2c01      	cmp	r4, #1
 802a958:	dc6d      	bgt.n	802aa36 <__kernel_rem_pio2+0x4de>
 802a95a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 802aa88 <__kernel_rem_pio2+0x530>
 802a95e:	2b01      	cmp	r3, #1
 802a960:	dc79      	bgt.n	802aa56 <__kernel_rem_pio2+0x4fe>
 802a962:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 802a966:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 802a96a:	f1b8 0f00 	cmp.w	r8, #0
 802a96e:	d178      	bne.n	802aa62 <__kernel_rem_pio2+0x50a>
 802a970:	ed86 5b00 	vstr	d5, [r6]
 802a974:	ed86 6b02 	vstr	d6, [r6, #8]
 802a978:	ed86 7b04 	vstr	d7, [r6, #16]
 802a97c:	e02d      	b.n	802a9da <__kernel_rem_pio2+0x482>
 802a97e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 802aa88 <__kernel_rem_pio2+0x530>
 802a982:	3108      	adds	r1, #8
 802a984:	aa42      	add	r2, sp, #264	; 0x108
 802a986:	4411      	add	r1, r2
 802a988:	4618      	mov	r0, r3
 802a98a:	2800      	cmp	r0, #0
 802a98c:	da34      	bge.n	802a9f8 <__kernel_rem_pio2+0x4a0>
 802a98e:	f1b8 0f00 	cmp.w	r8, #0
 802a992:	d037      	beq.n	802aa04 <__kernel_rem_pio2+0x4ac>
 802a994:	eeb1 7b46 	vneg.f64	d7, d6
 802a998:	ed86 7b00 	vstr	d7, [r6]
 802a99c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 802a9a0:	a844      	add	r0, sp, #272	; 0x110
 802a9a2:	2101      	movs	r1, #1
 802a9a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 802a9a8:	428b      	cmp	r3, r1
 802a9aa:	da2e      	bge.n	802aa0a <__kernel_rem_pio2+0x4b2>
 802a9ac:	f1b8 0f00 	cmp.w	r8, #0
 802a9b0:	d001      	beq.n	802a9b6 <__kernel_rem_pio2+0x45e>
 802a9b2:	eeb1 7b47 	vneg.f64	d7, d7
 802a9b6:	ed86 7b02 	vstr	d7, [r6, #8]
 802a9ba:	e00e      	b.n	802a9da <__kernel_rem_pio2+0x482>
 802a9bc:	aa92      	add	r2, sp, #584	; 0x248
 802a9be:	ed9f 7b32 	vldr	d7, [pc, #200]	; 802aa88 <__kernel_rem_pio2+0x530>
 802a9c2:	4411      	add	r1, r2
 802a9c4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 802a9c8:	2b00      	cmp	r3, #0
 802a9ca:	da0f      	bge.n	802a9ec <__kernel_rem_pio2+0x494>
 802a9cc:	f1b8 0f00 	cmp.w	r8, #0
 802a9d0:	d001      	beq.n	802a9d6 <__kernel_rem_pio2+0x47e>
 802a9d2:	eeb1 7b47 	vneg.f64	d7, d7
 802a9d6:	ed86 7b00 	vstr	d7, [r6]
 802a9da:	9b01      	ldr	r3, [sp, #4]
 802a9dc:	f003 0007 	and.w	r0, r3, #7
 802a9e0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 802a9e4:	ecbd 8b06 	vpop	{d8-d10}
 802a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a9ec:	ed31 6b02 	vldmdb	r1!, {d6}
 802a9f0:	3b01      	subs	r3, #1
 802a9f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 802a9f6:	e7e7      	b.n	802a9c8 <__kernel_rem_pio2+0x470>
 802a9f8:	ed31 7b02 	vldmdb	r1!, {d7}
 802a9fc:	3801      	subs	r0, #1
 802a9fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 802aa02:	e7c2      	b.n	802a98a <__kernel_rem_pio2+0x432>
 802aa04:	eeb0 7b46 	vmov.f64	d7, d6
 802aa08:	e7c6      	b.n	802a998 <__kernel_rem_pio2+0x440>
 802aa0a:	ecb0 6b02 	vldmia	r0!, {d6}
 802aa0e:	3101      	adds	r1, #1
 802aa10:	ee37 7b06 	vadd.f64	d7, d7, d6
 802aa14:	e7c8      	b.n	802a9a8 <__kernel_rem_pio2+0x450>
 802aa16:	ed10 7b04 	vldr	d7, [r0, #-16]
 802aa1a:	ed30 5b02 	vldmdb	r0!, {d5}
 802aa1e:	3c01      	subs	r4, #1
 802aa20:	ee37 6b05 	vadd.f64	d6, d7, d5
 802aa24:	ee37 7b46 	vsub.f64	d7, d7, d6
 802aa28:	ed00 6b02 	vstr	d6, [r0, #-8]
 802aa2c:	ee37 7b05 	vadd.f64	d7, d7, d5
 802aa30:	ed80 7b00 	vstr	d7, [r0]
 802aa34:	e78b      	b.n	802a94e <__kernel_rem_pio2+0x3f6>
 802aa36:	ed10 7b04 	vldr	d7, [r0, #-16]
 802aa3a:	ed30 5b02 	vldmdb	r0!, {d5}
 802aa3e:	3c01      	subs	r4, #1
 802aa40:	ee37 6b05 	vadd.f64	d6, d7, d5
 802aa44:	ee37 7b46 	vsub.f64	d7, d7, d6
 802aa48:	ed00 6b02 	vstr	d6, [r0, #-8]
 802aa4c:	ee37 7b05 	vadd.f64	d7, d7, d5
 802aa50:	ed80 7b00 	vstr	d7, [r0]
 802aa54:	e77f      	b.n	802a956 <__kernel_rem_pio2+0x3fe>
 802aa56:	ed31 6b02 	vldmdb	r1!, {d6}
 802aa5a:	3b01      	subs	r3, #1
 802aa5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 802aa60:	e77d      	b.n	802a95e <__kernel_rem_pio2+0x406>
 802aa62:	eeb1 5b45 	vneg.f64	d5, d5
 802aa66:	eeb1 6b46 	vneg.f64	d6, d6
 802aa6a:	ed86 5b00 	vstr	d5, [r6]
 802aa6e:	eeb1 7b47 	vneg.f64	d7, d7
 802aa72:	ed86 6b02 	vstr	d6, [r6, #8]
 802aa76:	e77f      	b.n	802a978 <__kernel_rem_pio2+0x420>
 802aa78:	00000000 	.word	0x00000000
 802aa7c:	41700000 	.word	0x41700000
 802aa80:	00000000 	.word	0x00000000
 802aa84:	3e700000 	.word	0x3e700000
	...

0802aa90 <__kernel_sin>:
 802aa90:	ee10 3a90 	vmov	r3, s1
 802aa94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802aa98:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802aa9c:	da04      	bge.n	802aaa8 <__kernel_sin+0x18>
 802aa9e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 802aaa2:	ee17 3a90 	vmov	r3, s15
 802aaa6:	b35b      	cbz	r3, 802ab00 <__kernel_sin+0x70>
 802aaa8:	ee20 6b00 	vmul.f64	d6, d0, d0
 802aaac:	ee20 5b06 	vmul.f64	d5, d0, d6
 802aab0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 802ab08 <__kernel_sin+0x78>
 802aab4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 802ab10 <__kernel_sin+0x80>
 802aab8:	eea6 4b07 	vfma.f64	d4, d6, d7
 802aabc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 802ab18 <__kernel_sin+0x88>
 802aac0:	eea4 7b06 	vfma.f64	d7, d4, d6
 802aac4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 802ab20 <__kernel_sin+0x90>
 802aac8:	eea7 4b06 	vfma.f64	d4, d7, d6
 802aacc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 802ab28 <__kernel_sin+0x98>
 802aad0:	eea4 7b06 	vfma.f64	d7, d4, d6
 802aad4:	b930      	cbnz	r0, 802aae4 <__kernel_sin+0x54>
 802aad6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 802ab30 <__kernel_sin+0xa0>
 802aada:	eea6 4b07 	vfma.f64	d4, d6, d7
 802aade:	eea4 0b05 	vfma.f64	d0, d4, d5
 802aae2:	4770      	bx	lr
 802aae4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 802aae8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 802aaec:	eea1 7b04 	vfma.f64	d7, d1, d4
 802aaf0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 802aaf4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 802ab38 <__kernel_sin+0xa8>
 802aaf8:	eea5 1b07 	vfma.f64	d1, d5, d7
 802aafc:	ee30 0b41 	vsub.f64	d0, d0, d1
 802ab00:	4770      	bx	lr
 802ab02:	bf00      	nop
 802ab04:	f3af 8000 	nop.w
 802ab08:	5acfd57c 	.word	0x5acfd57c
 802ab0c:	3de5d93a 	.word	0x3de5d93a
 802ab10:	8a2b9ceb 	.word	0x8a2b9ceb
 802ab14:	be5ae5e6 	.word	0xbe5ae5e6
 802ab18:	57b1fe7d 	.word	0x57b1fe7d
 802ab1c:	3ec71de3 	.word	0x3ec71de3
 802ab20:	19c161d5 	.word	0x19c161d5
 802ab24:	bf2a01a0 	.word	0xbf2a01a0
 802ab28:	1110f8a6 	.word	0x1110f8a6
 802ab2c:	3f811111 	.word	0x3f811111
 802ab30:	55555549 	.word	0x55555549
 802ab34:	bfc55555 	.word	0xbfc55555
 802ab38:	55555549 	.word	0x55555549
 802ab3c:	3fc55555 	.word	0x3fc55555

0802ab40 <__kernel_cosf>:
 802ab40:	ee10 3a10 	vmov	r3, s0
 802ab44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802ab48:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802ab4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802ab50:	da05      	bge.n	802ab5e <__kernel_cosf+0x1e>
 802ab52:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802ab56:	ee17 2a90 	vmov	r2, s15
 802ab5a:	2a00      	cmp	r2, #0
 802ab5c:	d03b      	beq.n	802abd6 <__kernel_cosf+0x96>
 802ab5e:	ee20 6a00 	vmul.f32	s12, s0, s0
 802ab62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802ab66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802abdc <__kernel_cosf+0x9c>
 802ab6a:	4a1d      	ldr	r2, [pc, #116]	; (802abe0 <__kernel_cosf+0xa0>)
 802ab6c:	ee66 7a07 	vmul.f32	s15, s12, s14
 802ab70:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 802abe4 <__kernel_cosf+0xa4>
 802ab74:	eea6 7a25 	vfma.f32	s14, s12, s11
 802ab78:	4293      	cmp	r3, r2
 802ab7a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 802abe8 <__kernel_cosf+0xa8>
 802ab7e:	eee7 5a06 	vfma.f32	s11, s14, s12
 802ab82:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 802abec <__kernel_cosf+0xac>
 802ab86:	eea5 7a86 	vfma.f32	s14, s11, s12
 802ab8a:	eddf 5a19 	vldr	s11, [pc, #100]	; 802abf0 <__kernel_cosf+0xb0>
 802ab8e:	eee7 5a06 	vfma.f32	s11, s14, s12
 802ab92:	ed9f 7a18 	vldr	s14, [pc, #96]	; 802abf4 <__kernel_cosf+0xb4>
 802ab96:	eea5 7a86 	vfma.f32	s14, s11, s12
 802ab9a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802ab9e:	ee27 7a06 	vmul.f32	s14, s14, s12
 802aba2:	eee6 0a07 	vfma.f32	s1, s12, s14
 802aba6:	dc04      	bgt.n	802abb2 <__kernel_cosf+0x72>
 802aba8:	ee77 0ae0 	vsub.f32	s1, s15, s1
 802abac:	ee36 0ae0 	vsub.f32	s0, s13, s1
 802abb0:	4770      	bx	lr
 802abb2:	4a11      	ldr	r2, [pc, #68]	; (802abf8 <__kernel_cosf+0xb8>)
 802abb4:	4293      	cmp	r3, r2
 802abb6:	bfda      	itte	le
 802abb8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802abbc:	ee07 3a10 	vmovle	s14, r3
 802abc0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 802abc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802abc8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 802abcc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802abd0:	ee30 0a67 	vsub.f32	s0, s0, s15
 802abd4:	4770      	bx	lr
 802abd6:	eeb0 0a66 	vmov.f32	s0, s13
 802abda:	4770      	bx	lr
 802abdc:	ad47d74e 	.word	0xad47d74e
 802abe0:	3e999999 	.word	0x3e999999
 802abe4:	310f74f6 	.word	0x310f74f6
 802abe8:	b493f27c 	.word	0xb493f27c
 802abec:	37d00d01 	.word	0x37d00d01
 802abf0:	bab60b61 	.word	0xbab60b61
 802abf4:	3d2aaaab 	.word	0x3d2aaaab
 802abf8:	3f480000 	.word	0x3f480000

0802abfc <__kernel_rem_pio2f>:
 802abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac00:	ed2d 8b04 	vpush	{d8-d9}
 802ac04:	b0d7      	sub	sp, #348	; 0x15c
 802ac06:	469b      	mov	fp, r3
 802ac08:	460e      	mov	r6, r1
 802ac0a:	4bbe      	ldr	r3, [pc, #760]	; (802af04 <__kernel_rem_pio2f+0x308>)
 802ac0c:	9964      	ldr	r1, [sp, #400]	; 0x190
 802ac0e:	9002      	str	r0, [sp, #8]
 802ac10:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 802ac14:	9865      	ldr	r0, [sp, #404]	; 0x194
 802ac16:	ed9f 7abf 	vldr	s14, [pc, #764]	; 802af14 <__kernel_rem_pio2f+0x318>
 802ac1a:	1ed1      	subs	r1, r2, #3
 802ac1c:	2308      	movs	r3, #8
 802ac1e:	fb91 f1f3 	sdiv	r1, r1, r3
 802ac22:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802ac26:	f10b 3aff 	add.w	sl, fp, #4294967295
 802ac2a:	1c4c      	adds	r4, r1, #1
 802ac2c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 802ac30:	eba1 050a 	sub.w	r5, r1, sl
 802ac34:	aa1a      	add	r2, sp, #104	; 0x68
 802ac36:	eb09 070a 	add.w	r7, r9, sl
 802ac3a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 802ac3e:	4696      	mov	lr, r2
 802ac40:	2300      	movs	r3, #0
 802ac42:	42bb      	cmp	r3, r7
 802ac44:	dd0f      	ble.n	802ac66 <__kernel_rem_pio2f+0x6a>
 802ac46:	af42      	add	r7, sp, #264	; 0x108
 802ac48:	2200      	movs	r2, #0
 802ac4a:	454a      	cmp	r2, r9
 802ac4c:	dc27      	bgt.n	802ac9e <__kernel_rem_pio2f+0xa2>
 802ac4e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 802ac52:	eb0b 0302 	add.w	r3, fp, r2
 802ac56:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 802ac5a:	9d02      	ldr	r5, [sp, #8]
 802ac5c:	eddf 7aad 	vldr	s15, [pc, #692]	; 802af14 <__kernel_rem_pio2f+0x318>
 802ac60:	f04f 0c00 	mov.w	ip, #0
 802ac64:	e015      	b.n	802ac92 <__kernel_rem_pio2f+0x96>
 802ac66:	42dd      	cmn	r5, r3
 802ac68:	bf5d      	ittte	pl
 802ac6a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 802ac6e:	ee07 2a90 	vmovpl	s15, r2
 802ac72:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802ac76:	eef0 7a47 	vmovmi.f32	s15, s14
 802ac7a:	ecee 7a01 	vstmia	lr!, {s15}
 802ac7e:	3301      	adds	r3, #1
 802ac80:	e7df      	b.n	802ac42 <__kernel_rem_pio2f+0x46>
 802ac82:	ecf5 6a01 	vldmia	r5!, {s13}
 802ac86:	ed33 7a01 	vldmdb	r3!, {s14}
 802ac8a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802ac8e:	f10c 0c01 	add.w	ip, ip, #1
 802ac92:	45d4      	cmp	ip, sl
 802ac94:	ddf5      	ble.n	802ac82 <__kernel_rem_pio2f+0x86>
 802ac96:	ece7 7a01 	vstmia	r7!, {s15}
 802ac9a:	3201      	adds	r2, #1
 802ac9c:	e7d5      	b.n	802ac4a <__kernel_rem_pio2f+0x4e>
 802ac9e:	ab06      	add	r3, sp, #24
 802aca0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 802aca4:	9304      	str	r3, [sp, #16]
 802aca6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 802af10 <__kernel_rem_pio2f+0x314>
 802acaa:	ed9f 9a98 	vldr	s18, [pc, #608]	; 802af0c <__kernel_rem_pio2f+0x310>
 802acae:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 802acb2:	9303      	str	r3, [sp, #12]
 802acb4:	464d      	mov	r5, r9
 802acb6:	ab56      	add	r3, sp, #344	; 0x158
 802acb8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 802acbc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802acc0:	3f01      	subs	r7, #1
 802acc2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802acc6:	00bf      	lsls	r7, r7, #2
 802acc8:	ab56      	add	r3, sp, #344	; 0x158
 802acca:	19da      	adds	r2, r3, r7
 802accc:	3a4c      	subs	r2, #76	; 0x4c
 802acce:	2300      	movs	r3, #0
 802acd0:	1ae9      	subs	r1, r5, r3
 802acd2:	2900      	cmp	r1, #0
 802acd4:	dc4c      	bgt.n	802ad70 <__kernel_rem_pio2f+0x174>
 802acd6:	4620      	mov	r0, r4
 802acd8:	f000 fd98 	bl	802b80c <scalbnf>
 802acdc:	eeb0 8a40 	vmov.f32	s16, s0
 802ace0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802ace4:	ee28 0a00 	vmul.f32	s0, s16, s0
 802ace8:	f000 fd4e 	bl	802b788 <floorf>
 802acec:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802acf0:	eea0 8a67 	vfms.f32	s16, s0, s15
 802acf4:	2c00      	cmp	r4, #0
 802acf6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802acfa:	edcd 7a01 	vstr	s15, [sp, #4]
 802acfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802ad02:	ee38 8a67 	vsub.f32	s16, s16, s15
 802ad06:	dd48      	ble.n	802ad9a <__kernel_rem_pio2f+0x19e>
 802ad08:	1e69      	subs	r1, r5, #1
 802ad0a:	ab06      	add	r3, sp, #24
 802ad0c:	f1c4 0008 	rsb	r0, r4, #8
 802ad10:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 802ad14:	9a01      	ldr	r2, [sp, #4]
 802ad16:	fa4c f300 	asr.w	r3, ip, r0
 802ad1a:	441a      	add	r2, r3
 802ad1c:	4083      	lsls	r3, r0
 802ad1e:	9201      	str	r2, [sp, #4]
 802ad20:	ebac 0203 	sub.w	r2, ip, r3
 802ad24:	ab06      	add	r3, sp, #24
 802ad26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 802ad2a:	f1c4 0307 	rsb	r3, r4, #7
 802ad2e:	fa42 f803 	asr.w	r8, r2, r3
 802ad32:	f1b8 0f00 	cmp.w	r8, #0
 802ad36:	dd41      	ble.n	802adbc <__kernel_rem_pio2f+0x1c0>
 802ad38:	9b01      	ldr	r3, [sp, #4]
 802ad3a:	2000      	movs	r0, #0
 802ad3c:	3301      	adds	r3, #1
 802ad3e:	9301      	str	r3, [sp, #4]
 802ad40:	4601      	mov	r1, r0
 802ad42:	4285      	cmp	r5, r0
 802ad44:	dc6d      	bgt.n	802ae22 <__kernel_rem_pio2f+0x226>
 802ad46:	2c00      	cmp	r4, #0
 802ad48:	dd04      	ble.n	802ad54 <__kernel_rem_pio2f+0x158>
 802ad4a:	2c01      	cmp	r4, #1
 802ad4c:	d07e      	beq.n	802ae4c <__kernel_rem_pio2f+0x250>
 802ad4e:	2c02      	cmp	r4, #2
 802ad50:	f000 8086 	beq.w	802ae60 <__kernel_rem_pio2f+0x264>
 802ad54:	f1b8 0f02 	cmp.w	r8, #2
 802ad58:	d130      	bne.n	802adbc <__kernel_rem_pio2f+0x1c0>
 802ad5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802ad5e:	ee30 8a48 	vsub.f32	s16, s0, s16
 802ad62:	b359      	cbz	r1, 802adbc <__kernel_rem_pio2f+0x1c0>
 802ad64:	4620      	mov	r0, r4
 802ad66:	f000 fd51 	bl	802b80c <scalbnf>
 802ad6a:	ee38 8a40 	vsub.f32	s16, s16, s0
 802ad6e:	e025      	b.n	802adbc <__kernel_rem_pio2f+0x1c0>
 802ad70:	ee60 7a28 	vmul.f32	s15, s0, s17
 802ad74:	a806      	add	r0, sp, #24
 802ad76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802ad7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802ad7e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802ad82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802ad86:	ee10 1a10 	vmov	r1, s0
 802ad8a:	ed32 0a01 	vldmdb	r2!, {s0}
 802ad8e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 802ad92:	ee37 0a80 	vadd.f32	s0, s15, s0
 802ad96:	3301      	adds	r3, #1
 802ad98:	e79a      	b.n	802acd0 <__kernel_rem_pio2f+0xd4>
 802ad9a:	d106      	bne.n	802adaa <__kernel_rem_pio2f+0x1ae>
 802ad9c:	1e6b      	subs	r3, r5, #1
 802ad9e:	aa06      	add	r2, sp, #24
 802ada0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802ada4:	ea4f 2822 	mov.w	r8, r2, asr #8
 802ada8:	e7c3      	b.n	802ad32 <__kernel_rem_pio2f+0x136>
 802adaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802adae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802adb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802adb6:	da31      	bge.n	802ae1c <__kernel_rem_pio2f+0x220>
 802adb8:	f04f 0800 	mov.w	r8, #0
 802adbc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802adc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802adc4:	f040 80a8 	bne.w	802af18 <__kernel_rem_pio2f+0x31c>
 802adc8:	1e6b      	subs	r3, r5, #1
 802adca:	4618      	mov	r0, r3
 802adcc:	2200      	movs	r2, #0
 802adce:	4548      	cmp	r0, r9
 802add0:	da4d      	bge.n	802ae6e <__kernel_rem_pio2f+0x272>
 802add2:	2a00      	cmp	r2, #0
 802add4:	f000 8087 	beq.w	802aee6 <__kernel_rem_pio2f+0x2ea>
 802add8:	aa06      	add	r2, sp, #24
 802adda:	3c08      	subs	r4, #8
 802addc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802ade0:	2900      	cmp	r1, #0
 802ade2:	f000 808d 	beq.w	802af00 <__kernel_rem_pio2f+0x304>
 802ade6:	4620      	mov	r0, r4
 802ade8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802adec:	9302      	str	r3, [sp, #8]
 802adee:	f000 fd0d 	bl	802b80c <scalbnf>
 802adf2:	9b02      	ldr	r3, [sp, #8]
 802adf4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 802af10 <__kernel_rem_pio2f+0x314>
 802adf8:	0099      	lsls	r1, r3, #2
 802adfa:	aa42      	add	r2, sp, #264	; 0x108
 802adfc:	1850      	adds	r0, r2, r1
 802adfe:	1d05      	adds	r5, r0, #4
 802ae00:	461c      	mov	r4, r3
 802ae02:	2c00      	cmp	r4, #0
 802ae04:	f280 80b8 	bge.w	802af78 <__kernel_rem_pio2f+0x37c>
 802ae08:	2500      	movs	r5, #0
 802ae0a:	1b5c      	subs	r4, r3, r5
 802ae0c:	2c00      	cmp	r4, #0
 802ae0e:	f2c0 80d8 	blt.w	802afc2 <__kernel_rem_pio2f+0x3c6>
 802ae12:	4f3d      	ldr	r7, [pc, #244]	; (802af08 <__kernel_rem_pio2f+0x30c>)
 802ae14:	eddf 7a3f 	vldr	s15, [pc, #252]	; 802af14 <__kernel_rem_pio2f+0x318>
 802ae18:	2400      	movs	r4, #0
 802ae1a:	e0c6      	b.n	802afaa <__kernel_rem_pio2f+0x3ae>
 802ae1c:	f04f 0802 	mov.w	r8, #2
 802ae20:	e78a      	b.n	802ad38 <__kernel_rem_pio2f+0x13c>
 802ae22:	ab06      	add	r3, sp, #24
 802ae24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802ae28:	b949      	cbnz	r1, 802ae3e <__kernel_rem_pio2f+0x242>
 802ae2a:	b12b      	cbz	r3, 802ae38 <__kernel_rem_pio2f+0x23c>
 802ae2c:	aa06      	add	r2, sp, #24
 802ae2e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802ae32:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802ae36:	2301      	movs	r3, #1
 802ae38:	3001      	adds	r0, #1
 802ae3a:	4619      	mov	r1, r3
 802ae3c:	e781      	b.n	802ad42 <__kernel_rem_pio2f+0x146>
 802ae3e:	aa06      	add	r2, sp, #24
 802ae40:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 802ae44:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802ae48:	460b      	mov	r3, r1
 802ae4a:	e7f5      	b.n	802ae38 <__kernel_rem_pio2f+0x23c>
 802ae4c:	1e68      	subs	r0, r5, #1
 802ae4e:	ab06      	add	r3, sp, #24
 802ae50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802ae54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802ae58:	aa06      	add	r2, sp, #24
 802ae5a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802ae5e:	e779      	b.n	802ad54 <__kernel_rem_pio2f+0x158>
 802ae60:	1e68      	subs	r0, r5, #1
 802ae62:	ab06      	add	r3, sp, #24
 802ae64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802ae68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802ae6c:	e7f4      	b.n	802ae58 <__kernel_rem_pio2f+0x25c>
 802ae6e:	a906      	add	r1, sp, #24
 802ae70:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802ae74:	3801      	subs	r0, #1
 802ae76:	430a      	orrs	r2, r1
 802ae78:	e7a9      	b.n	802adce <__kernel_rem_pio2f+0x1d2>
 802ae7a:	f10c 0c01 	add.w	ip, ip, #1
 802ae7e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802ae82:	2a00      	cmp	r2, #0
 802ae84:	d0f9      	beq.n	802ae7a <__kernel_rem_pio2f+0x27e>
 802ae86:	eb0b 0305 	add.w	r3, fp, r5
 802ae8a:	aa1a      	add	r2, sp, #104	; 0x68
 802ae8c:	009b      	lsls	r3, r3, #2
 802ae8e:	1898      	adds	r0, r3, r2
 802ae90:	3004      	adds	r0, #4
 802ae92:	1c69      	adds	r1, r5, #1
 802ae94:	3704      	adds	r7, #4
 802ae96:	2200      	movs	r2, #0
 802ae98:	4465      	add	r5, ip
 802ae9a:	9005      	str	r0, [sp, #20]
 802ae9c:	428d      	cmp	r5, r1
 802ae9e:	f6ff af0a 	blt.w	802acb6 <__kernel_rem_pio2f+0xba>
 802aea2:	a81a      	add	r0, sp, #104	; 0x68
 802aea4:	eb02 0c03 	add.w	ip, r2, r3
 802aea8:	4484      	add	ip, r0
 802aeaa:	9803      	ldr	r0, [sp, #12]
 802aeac:	f8dd e008 	ldr.w	lr, [sp, #8]
 802aeb0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 802aeb4:	9001      	str	r0, [sp, #4]
 802aeb6:	ee07 0a90 	vmov	s15, r0
 802aeba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802aebe:	9805      	ldr	r0, [sp, #20]
 802aec0:	edcc 7a00 	vstr	s15, [ip]
 802aec4:	eddf 7a13 	vldr	s15, [pc, #76]	; 802af14 <__kernel_rem_pio2f+0x318>
 802aec8:	eb00 0802 	add.w	r8, r0, r2
 802aecc:	f04f 0c00 	mov.w	ip, #0
 802aed0:	45d4      	cmp	ip, sl
 802aed2:	dd0c      	ble.n	802aeee <__kernel_rem_pio2f+0x2f2>
 802aed4:	eb02 0c07 	add.w	ip, r2, r7
 802aed8:	a842      	add	r0, sp, #264	; 0x108
 802aeda:	4484      	add	ip, r0
 802aedc:	edcc 7a01 	vstr	s15, [ip, #4]
 802aee0:	3101      	adds	r1, #1
 802aee2:	3204      	adds	r2, #4
 802aee4:	e7da      	b.n	802ae9c <__kernel_rem_pio2f+0x2a0>
 802aee6:	9b04      	ldr	r3, [sp, #16]
 802aee8:	f04f 0c01 	mov.w	ip, #1
 802aeec:	e7c7      	b.n	802ae7e <__kernel_rem_pio2f+0x282>
 802aeee:	ecfe 6a01 	vldmia	lr!, {s13}
 802aef2:	ed38 7a01 	vldmdb	r8!, {s14}
 802aef6:	f10c 0c01 	add.w	ip, ip, #1
 802aefa:	eee6 7a87 	vfma.f32	s15, s13, s14
 802aefe:	e7e7      	b.n	802aed0 <__kernel_rem_pio2f+0x2d4>
 802af00:	3b01      	subs	r3, #1
 802af02:	e769      	b.n	802add8 <__kernel_rem_pio2f+0x1dc>
 802af04:	0802ddec 	.word	0x0802ddec
 802af08:	0802ddc0 	.word	0x0802ddc0
 802af0c:	43800000 	.word	0x43800000
 802af10:	3b800000 	.word	0x3b800000
 802af14:	00000000 	.word	0x00000000
 802af18:	4260      	negs	r0, r4
 802af1a:	eeb0 0a48 	vmov.f32	s0, s16
 802af1e:	f000 fc75 	bl	802b80c <scalbnf>
 802af22:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 802af0c <__kernel_rem_pio2f+0x310>
 802af26:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802af2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802af2e:	db1a      	blt.n	802af66 <__kernel_rem_pio2f+0x36a>
 802af30:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802af10 <__kernel_rem_pio2f+0x314>
 802af34:	ee60 7a27 	vmul.f32	s15, s0, s15
 802af38:	aa06      	add	r2, sp, #24
 802af3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802af3e:	a906      	add	r1, sp, #24
 802af40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802af44:	3408      	adds	r4, #8
 802af46:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802af4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802af4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802af52:	ee10 3a10 	vmov	r3, s0
 802af56:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802af5a:	1c6b      	adds	r3, r5, #1
 802af5c:	ee17 2a90 	vmov	r2, s15
 802af60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802af64:	e73f      	b.n	802ade6 <__kernel_rem_pio2f+0x1ea>
 802af66:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802af6a:	aa06      	add	r2, sp, #24
 802af6c:	ee10 3a10 	vmov	r3, s0
 802af70:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802af74:	462b      	mov	r3, r5
 802af76:	e736      	b.n	802ade6 <__kernel_rem_pio2f+0x1ea>
 802af78:	aa06      	add	r2, sp, #24
 802af7a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 802af7e:	9202      	str	r2, [sp, #8]
 802af80:	ee07 2a90 	vmov	s15, r2
 802af84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802af88:	3c01      	subs	r4, #1
 802af8a:	ee67 7a80 	vmul.f32	s15, s15, s0
 802af8e:	ee20 0a07 	vmul.f32	s0, s0, s14
 802af92:	ed65 7a01 	vstmdb	r5!, {s15}
 802af96:	e734      	b.n	802ae02 <__kernel_rem_pio2f+0x206>
 802af98:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 802af9c:	ecf7 6a01 	vldmia	r7!, {s13}
 802afa0:	ed9c 7a00 	vldr	s14, [ip]
 802afa4:	eee6 7a87 	vfma.f32	s15, s13, s14
 802afa8:	3401      	adds	r4, #1
 802afaa:	454c      	cmp	r4, r9
 802afac:	dc01      	bgt.n	802afb2 <__kernel_rem_pio2f+0x3b6>
 802afae:	42a5      	cmp	r5, r4
 802afb0:	daf2      	bge.n	802af98 <__kernel_rem_pio2f+0x39c>
 802afb2:	aa56      	add	r2, sp, #344	; 0x158
 802afb4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 802afb8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 802afbc:	3501      	adds	r5, #1
 802afbe:	3804      	subs	r0, #4
 802afc0:	e723      	b.n	802ae0a <__kernel_rem_pio2f+0x20e>
 802afc2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802afc4:	2a03      	cmp	r2, #3
 802afc6:	d84d      	bhi.n	802b064 <__kernel_rem_pio2f+0x468>
 802afc8:	e8df f002 	tbb	[pc, r2]
 802afcc:	021f1f3e 	.word	0x021f1f3e
 802afd0:	aa56      	add	r2, sp, #344	; 0x158
 802afd2:	4411      	add	r1, r2
 802afd4:	399c      	subs	r1, #156	; 0x9c
 802afd6:	4608      	mov	r0, r1
 802afd8:	461c      	mov	r4, r3
 802afda:	2c00      	cmp	r4, #0
 802afdc:	dc5f      	bgt.n	802b09e <__kernel_rem_pio2f+0x4a2>
 802afde:	4608      	mov	r0, r1
 802afe0:	461c      	mov	r4, r3
 802afe2:	2c01      	cmp	r4, #1
 802afe4:	dc6b      	bgt.n	802b0be <__kernel_rem_pio2f+0x4c2>
 802afe6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 802af14 <__kernel_rem_pio2f+0x318>
 802afea:	2b01      	cmp	r3, #1
 802afec:	dc77      	bgt.n	802b0de <__kernel_rem_pio2f+0x4e2>
 802afee:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802aff2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802aff6:	f1b8 0f00 	cmp.w	r8, #0
 802affa:	d176      	bne.n	802b0ea <__kernel_rem_pio2f+0x4ee>
 802affc:	edc6 6a00 	vstr	s13, [r6]
 802b000:	ed86 7a01 	vstr	s14, [r6, #4]
 802b004:	edc6 7a02 	vstr	s15, [r6, #8]
 802b008:	e02c      	b.n	802b064 <__kernel_rem_pio2f+0x468>
 802b00a:	aa56      	add	r2, sp, #344	; 0x158
 802b00c:	4411      	add	r1, r2
 802b00e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 802af14 <__kernel_rem_pio2f+0x318>
 802b012:	399c      	subs	r1, #156	; 0x9c
 802b014:	4618      	mov	r0, r3
 802b016:	2800      	cmp	r0, #0
 802b018:	da32      	bge.n	802b080 <__kernel_rem_pio2f+0x484>
 802b01a:	f1b8 0f00 	cmp.w	r8, #0
 802b01e:	d035      	beq.n	802b08c <__kernel_rem_pio2f+0x490>
 802b020:	eef1 7a47 	vneg.f32	s15, s14
 802b024:	edc6 7a00 	vstr	s15, [r6]
 802b028:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802b02c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b030:	a82f      	add	r0, sp, #188	; 0xbc
 802b032:	2101      	movs	r1, #1
 802b034:	428b      	cmp	r3, r1
 802b036:	da2c      	bge.n	802b092 <__kernel_rem_pio2f+0x496>
 802b038:	f1b8 0f00 	cmp.w	r8, #0
 802b03c:	d001      	beq.n	802b042 <__kernel_rem_pio2f+0x446>
 802b03e:	eef1 7a67 	vneg.f32	s15, s15
 802b042:	edc6 7a01 	vstr	s15, [r6, #4]
 802b046:	e00d      	b.n	802b064 <__kernel_rem_pio2f+0x468>
 802b048:	aa56      	add	r2, sp, #344	; 0x158
 802b04a:	4411      	add	r1, r2
 802b04c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802af14 <__kernel_rem_pio2f+0x318>
 802b050:	399c      	subs	r1, #156	; 0x9c
 802b052:	2b00      	cmp	r3, #0
 802b054:	da0e      	bge.n	802b074 <__kernel_rem_pio2f+0x478>
 802b056:	f1b8 0f00 	cmp.w	r8, #0
 802b05a:	d001      	beq.n	802b060 <__kernel_rem_pio2f+0x464>
 802b05c:	eef1 7a67 	vneg.f32	s15, s15
 802b060:	edc6 7a00 	vstr	s15, [r6]
 802b064:	9b01      	ldr	r3, [sp, #4]
 802b066:	f003 0007 	and.w	r0, r3, #7
 802b06a:	b057      	add	sp, #348	; 0x15c
 802b06c:	ecbd 8b04 	vpop	{d8-d9}
 802b070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b074:	ed31 7a01 	vldmdb	r1!, {s14}
 802b078:	3b01      	subs	r3, #1
 802b07a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802b07e:	e7e8      	b.n	802b052 <__kernel_rem_pio2f+0x456>
 802b080:	ed71 7a01 	vldmdb	r1!, {s15}
 802b084:	3801      	subs	r0, #1
 802b086:	ee37 7a27 	vadd.f32	s14, s14, s15
 802b08a:	e7c4      	b.n	802b016 <__kernel_rem_pio2f+0x41a>
 802b08c:	eef0 7a47 	vmov.f32	s15, s14
 802b090:	e7c8      	b.n	802b024 <__kernel_rem_pio2f+0x428>
 802b092:	ecb0 7a01 	vldmia	r0!, {s14}
 802b096:	3101      	adds	r1, #1
 802b098:	ee77 7a87 	vadd.f32	s15, s15, s14
 802b09c:	e7ca      	b.n	802b034 <__kernel_rem_pio2f+0x438>
 802b09e:	ed50 7a02 	vldr	s15, [r0, #-8]
 802b0a2:	ed70 6a01 	vldmdb	r0!, {s13}
 802b0a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802b0aa:	3c01      	subs	r4, #1
 802b0ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b0b0:	ed00 7a01 	vstr	s14, [r0, #-4]
 802b0b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802b0b8:	edc0 7a00 	vstr	s15, [r0]
 802b0bc:	e78d      	b.n	802afda <__kernel_rem_pio2f+0x3de>
 802b0be:	ed50 7a02 	vldr	s15, [r0, #-8]
 802b0c2:	ed70 6a01 	vldmdb	r0!, {s13}
 802b0c6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802b0ca:	3c01      	subs	r4, #1
 802b0cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b0d0:	ed00 7a01 	vstr	s14, [r0, #-4]
 802b0d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802b0d8:	edc0 7a00 	vstr	s15, [r0]
 802b0dc:	e781      	b.n	802afe2 <__kernel_rem_pio2f+0x3e6>
 802b0de:	ed31 7a01 	vldmdb	r1!, {s14}
 802b0e2:	3b01      	subs	r3, #1
 802b0e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 802b0e8:	e77f      	b.n	802afea <__kernel_rem_pio2f+0x3ee>
 802b0ea:	eef1 6a66 	vneg.f32	s13, s13
 802b0ee:	eeb1 7a47 	vneg.f32	s14, s14
 802b0f2:	edc6 6a00 	vstr	s13, [r6]
 802b0f6:	ed86 7a01 	vstr	s14, [r6, #4]
 802b0fa:	eef1 7a67 	vneg.f32	s15, s15
 802b0fe:	e781      	b.n	802b004 <__kernel_rem_pio2f+0x408>

0802b100 <__kernel_sinf>:
 802b100:	ee10 3a10 	vmov	r3, s0
 802b104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b108:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802b10c:	da04      	bge.n	802b118 <__kernel_sinf+0x18>
 802b10e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802b112:	ee17 3a90 	vmov	r3, s15
 802b116:	b35b      	cbz	r3, 802b170 <__kernel_sinf+0x70>
 802b118:	ee20 7a00 	vmul.f32	s14, s0, s0
 802b11c:	eddf 7a15 	vldr	s15, [pc, #84]	; 802b174 <__kernel_sinf+0x74>
 802b120:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802b178 <__kernel_sinf+0x78>
 802b124:	eea7 6a27 	vfma.f32	s12, s14, s15
 802b128:	eddf 7a14 	vldr	s15, [pc, #80]	; 802b17c <__kernel_sinf+0x7c>
 802b12c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802b130:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802b180 <__kernel_sinf+0x80>
 802b134:	eea7 6a87 	vfma.f32	s12, s15, s14
 802b138:	eddf 7a12 	vldr	s15, [pc, #72]	; 802b184 <__kernel_sinf+0x84>
 802b13c:	ee60 6a07 	vmul.f32	s13, s0, s14
 802b140:	eee6 7a07 	vfma.f32	s15, s12, s14
 802b144:	b930      	cbnz	r0, 802b154 <__kernel_sinf+0x54>
 802b146:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802b188 <__kernel_sinf+0x88>
 802b14a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802b14e:	eea6 0a26 	vfma.f32	s0, s12, s13
 802b152:	4770      	bx	lr
 802b154:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802b158:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802b15c:	eee0 7a86 	vfma.f32	s15, s1, s12
 802b160:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802b164:	eddf 7a09 	vldr	s15, [pc, #36]	; 802b18c <__kernel_sinf+0x8c>
 802b168:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802b16c:	ee30 0a60 	vsub.f32	s0, s0, s1
 802b170:	4770      	bx	lr
 802b172:	bf00      	nop
 802b174:	2f2ec9d3 	.word	0x2f2ec9d3
 802b178:	b2d72f34 	.word	0xb2d72f34
 802b17c:	3638ef1b 	.word	0x3638ef1b
 802b180:	b9500d01 	.word	0xb9500d01
 802b184:	3c088889 	.word	0x3c088889
 802b188:	be2aaaab 	.word	0xbe2aaaab
 802b18c:	3e2aaaab 	.word	0x3e2aaaab

0802b190 <atan>:
 802b190:	b538      	push	{r3, r4, r5, lr}
 802b192:	eeb0 7b40 	vmov.f64	d7, d0
 802b196:	ee17 5a90 	vmov	r5, s15
 802b19a:	4b73      	ldr	r3, [pc, #460]	; (802b368 <atan+0x1d8>)
 802b19c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802b1a0:	429c      	cmp	r4, r3
 802b1a2:	dd13      	ble.n	802b1cc <atan+0x3c>
 802b1a4:	4b71      	ldr	r3, [pc, #452]	; (802b36c <atan+0x1dc>)
 802b1a6:	429c      	cmp	r4, r3
 802b1a8:	dc03      	bgt.n	802b1b2 <atan+0x22>
 802b1aa:	d107      	bne.n	802b1bc <atan+0x2c>
 802b1ac:	ee10 3a10 	vmov	r3, s0
 802b1b0:	b123      	cbz	r3, 802b1bc <atan+0x2c>
 802b1b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 802b1b6:	eeb0 0b47 	vmov.f64	d0, d7
 802b1ba:	bd38      	pop	{r3, r4, r5, pc}
 802b1bc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 802b2f8 <atan+0x168>
 802b1c0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 802b300 <atan+0x170>
 802b1c4:	2d00      	cmp	r5, #0
 802b1c6:	fe37 7b06 	vselgt.f64	d7, d7, d6
 802b1ca:	e7f4      	b.n	802b1b6 <atan+0x26>
 802b1cc:	4b68      	ldr	r3, [pc, #416]	; (802b370 <atan+0x1e0>)
 802b1ce:	429c      	cmp	r4, r3
 802b1d0:	dc11      	bgt.n	802b1f6 <atan+0x66>
 802b1d2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 802b1d6:	429c      	cmp	r4, r3
 802b1d8:	dc0a      	bgt.n	802b1f0 <atan+0x60>
 802b1da:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 802b1de:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 802b308 <atan+0x178>
 802b1e2:	ee30 6b06 	vadd.f64	d6, d0, d6
 802b1e6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 802b1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b1ee:	dce2      	bgt.n	802b1b6 <atan+0x26>
 802b1f0:	f04f 33ff 	mov.w	r3, #4294967295
 802b1f4:	e013      	b.n	802b21e <atan+0x8e>
 802b1f6:	f000 f8c5 	bl	802b384 <fabs>
 802b1fa:	4b5e      	ldr	r3, [pc, #376]	; (802b374 <atan+0x1e4>)
 802b1fc:	429c      	cmp	r4, r3
 802b1fe:	dc4f      	bgt.n	802b2a0 <atan+0x110>
 802b200:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 802b204:	429c      	cmp	r4, r3
 802b206:	dc41      	bgt.n	802b28c <atan+0xfc>
 802b208:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 802b20c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802b210:	2300      	movs	r3, #0
 802b212:	eea0 6b07 	vfma.f64	d6, d0, d7
 802b216:	ee30 0b07 	vadd.f64	d0, d0, d7
 802b21a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 802b21e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802b310 <atan+0x180>
 802b222:	ee27 4b07 	vmul.f64	d4, d7, d7
 802b226:	ee24 5b04 	vmul.f64	d5, d4, d4
 802b22a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 802b318 <atan+0x188>
 802b22e:	eea5 3b06 	vfma.f64	d3, d5, d6
 802b232:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 802b320 <atan+0x190>
 802b236:	eea3 6b05 	vfma.f64	d6, d3, d5
 802b23a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 802b328 <atan+0x198>
 802b23e:	eea6 3b05 	vfma.f64	d3, d6, d5
 802b242:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 802b330 <atan+0x1a0>
 802b246:	eea3 6b05 	vfma.f64	d6, d3, d5
 802b24a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 802b338 <atan+0x1a8>
 802b24e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 802b340 <atan+0x1b0>
 802b252:	eea6 3b05 	vfma.f64	d3, d6, d5
 802b256:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802b348 <atan+0x1b8>
 802b25a:	eea5 2b06 	vfma.f64	d2, d5, d6
 802b25e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802b350 <atan+0x1c0>
 802b262:	eea2 6b05 	vfma.f64	d6, d2, d5
 802b266:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 802b358 <atan+0x1c8>
 802b26a:	eea6 2b05 	vfma.f64	d2, d6, d5
 802b26e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802b360 <atan+0x1d0>
 802b272:	1c5a      	adds	r2, r3, #1
 802b274:	eea2 6b05 	vfma.f64	d6, d2, d5
 802b278:	ee26 6b05 	vmul.f64	d6, d6, d5
 802b27c:	eea3 6b04 	vfma.f64	d6, d3, d4
 802b280:	ee26 6b07 	vmul.f64	d6, d6, d7
 802b284:	d121      	bne.n	802b2ca <atan+0x13a>
 802b286:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b28a:	e794      	b.n	802b1b6 <atan+0x26>
 802b28c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802b290:	2301      	movs	r3, #1
 802b292:	ee30 6b47 	vsub.f64	d6, d0, d7
 802b296:	ee30 0b07 	vadd.f64	d0, d0, d7
 802b29a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 802b29e:	e7be      	b.n	802b21e <atan+0x8e>
 802b2a0:	4b35      	ldr	r3, [pc, #212]	; (802b378 <atan+0x1e8>)
 802b2a2:	429c      	cmp	r4, r3
 802b2a4:	dc0b      	bgt.n	802b2be <atan+0x12e>
 802b2a6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802b2aa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802b2ae:	ee30 5b47 	vsub.f64	d5, d0, d7
 802b2b2:	eea0 6b07 	vfma.f64	d6, d0, d7
 802b2b6:	2302      	movs	r3, #2
 802b2b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 802b2bc:	e7af      	b.n	802b21e <atan+0x8e>
 802b2be:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802b2c2:	2303      	movs	r3, #3
 802b2c4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 802b2c8:	e7a9      	b.n	802b21e <atan+0x8e>
 802b2ca:	4a2c      	ldr	r2, [pc, #176]	; (802b37c <atan+0x1ec>)
 802b2cc:	492c      	ldr	r1, [pc, #176]	; (802b380 <atan+0x1f0>)
 802b2ce:	00db      	lsls	r3, r3, #3
 802b2d0:	441a      	add	r2, r3
 802b2d2:	440b      	add	r3, r1
 802b2d4:	ed93 5b00 	vldr	d5, [r3]
 802b2d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 802b2dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b2e0:	ed92 6b00 	vldr	d6, [r2]
 802b2e4:	2d00      	cmp	r5, #0
 802b2e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b2ea:	bfb8      	it	lt
 802b2ec:	eeb1 7b47 	vneglt.f64	d7, d7
 802b2f0:	e761      	b.n	802b1b6 <atan+0x26>
 802b2f2:	bf00      	nop
 802b2f4:	f3af 8000 	nop.w
 802b2f8:	54442d18 	.word	0x54442d18
 802b2fc:	bff921fb 	.word	0xbff921fb
 802b300:	54442d18 	.word	0x54442d18
 802b304:	3ff921fb 	.word	0x3ff921fb
 802b308:	8800759c 	.word	0x8800759c
 802b30c:	7e37e43c 	.word	0x7e37e43c
 802b310:	e322da11 	.word	0xe322da11
 802b314:	3f90ad3a 	.word	0x3f90ad3a
 802b318:	24760deb 	.word	0x24760deb
 802b31c:	3fa97b4b 	.word	0x3fa97b4b
 802b320:	a0d03d51 	.word	0xa0d03d51
 802b324:	3fb10d66 	.word	0x3fb10d66
 802b328:	c54c206e 	.word	0xc54c206e
 802b32c:	3fb745cd 	.word	0x3fb745cd
 802b330:	920083ff 	.word	0x920083ff
 802b334:	3fc24924 	.word	0x3fc24924
 802b338:	5555550d 	.word	0x5555550d
 802b33c:	3fd55555 	.word	0x3fd55555
 802b340:	52defd9a 	.word	0x52defd9a
 802b344:	bfadde2d 	.word	0xbfadde2d
 802b348:	2c6a6c2f 	.word	0x2c6a6c2f
 802b34c:	bfa2b444 	.word	0xbfa2b444
 802b350:	af749a6d 	.word	0xaf749a6d
 802b354:	bfb3b0f2 	.word	0xbfb3b0f2
 802b358:	fe231671 	.word	0xfe231671
 802b35c:	bfbc71c6 	.word	0xbfbc71c6
 802b360:	9998ebc4 	.word	0x9998ebc4
 802b364:	bfc99999 	.word	0xbfc99999
 802b368:	440fffff 	.word	0x440fffff
 802b36c:	7ff00000 	.word	0x7ff00000
 802b370:	3fdbffff 	.word	0x3fdbffff
 802b374:	3ff2ffff 	.word	0x3ff2ffff
 802b378:	40037fff 	.word	0x40037fff
 802b37c:	0802ddf8 	.word	0x0802ddf8
 802b380:	0802de18 	.word	0x0802de18

0802b384 <fabs>:
 802b384:	ec51 0b10 	vmov	r0, r1, d0
 802b388:	ee10 2a10 	vmov	r2, s0
 802b38c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802b390:	ec43 2b10 	vmov	d0, r2, r3
 802b394:	4770      	bx	lr

0802b396 <finite>:
 802b396:	ee10 3a90 	vmov	r3, s1
 802b39a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 802b39e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802b3a2:	0fc0      	lsrs	r0, r0, #31
 802b3a4:	4770      	bx	lr

0802b3a6 <matherr>:
 802b3a6:	2000      	movs	r0, #0
 802b3a8:	4770      	bx	lr
 802b3aa:	0000      	movs	r0, r0
 802b3ac:	0000      	movs	r0, r0
	...

0802b3b0 <nan>:
 802b3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802b3b8 <nan+0x8>
 802b3b4:	4770      	bx	lr
 802b3b6:	bf00      	nop
 802b3b8:	00000000 	.word	0x00000000
 802b3bc:	7ff80000 	.word	0x7ff80000

0802b3c0 <rint>:
 802b3c0:	b530      	push	{r4, r5, lr}
 802b3c2:	b085      	sub	sp, #20
 802b3c4:	ed8d 0b00 	vstr	d0, [sp]
 802b3c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b3cc:	f3c3 510a 	ubfx	r1, r3, #20, #11
 802b3d0:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 802b3d4:	2813      	cmp	r0, #19
 802b3d6:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 802b3da:	dc5a      	bgt.n	802b492 <rint+0xd2>
 802b3dc:	2800      	cmp	r0, #0
 802b3de:	da2f      	bge.n	802b440 <rint+0x80>
 802b3e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802b3e4:	4311      	orrs	r1, r2
 802b3e6:	d027      	beq.n	802b438 <rint+0x78>
 802b3e8:	f3c3 0513 	ubfx	r5, r3, #0, #20
 802b3ec:	4315      	orrs	r5, r2
 802b3ee:	426a      	negs	r2, r5
 802b3f0:	432a      	orrs	r2, r5
 802b3f2:	0b12      	lsrs	r2, r2, #12
 802b3f4:	0c5b      	lsrs	r3, r3, #17
 802b3f6:	045b      	lsls	r3, r3, #17
 802b3f8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 802b3fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b400:	ea42 0103 	orr.w	r1, r2, r3
 802b404:	4b31      	ldr	r3, [pc, #196]	; (802b4cc <rint+0x10c>)
 802b406:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802b40a:	ed93 6b00 	vldr	d6, [r3]
 802b40e:	ec41 0b17 	vmov	d7, r0, r1
 802b412:	ee36 7b07 	vadd.f64	d7, d6, d7
 802b416:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b41a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b41e:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b422:	ed8d 7b00 	vstr	d7, [sp]
 802b426:	9b01      	ldr	r3, [sp, #4]
 802b428:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b42c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b430:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 802b434:	e9cd 0100 	strd	r0, r1, [sp]
 802b438:	ed9d 0b00 	vldr	d0, [sp]
 802b43c:	b005      	add	sp, #20
 802b43e:	bd30      	pop	{r4, r5, pc}
 802b440:	4923      	ldr	r1, [pc, #140]	; (802b4d0 <rint+0x110>)
 802b442:	4101      	asrs	r1, r0
 802b444:	ea03 0501 	and.w	r5, r3, r1
 802b448:	4315      	orrs	r5, r2
 802b44a:	d0f5      	beq.n	802b438 <rint+0x78>
 802b44c:	0849      	lsrs	r1, r1, #1
 802b44e:	ea03 0501 	and.w	r5, r3, r1
 802b452:	432a      	orrs	r2, r5
 802b454:	d00b      	beq.n	802b46e <rint+0xae>
 802b456:	ea23 0101 	bic.w	r1, r3, r1
 802b45a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802b45e:	2813      	cmp	r0, #19
 802b460:	fa43 f300 	asr.w	r3, r3, r0
 802b464:	bf0c      	ite	eq
 802b466:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 802b46a:	2200      	movne	r2, #0
 802b46c:	430b      	orrs	r3, r1
 802b46e:	4619      	mov	r1, r3
 802b470:	4b16      	ldr	r3, [pc, #88]	; (802b4cc <rint+0x10c>)
 802b472:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802b476:	ed94 6b00 	vldr	d6, [r4]
 802b47a:	4610      	mov	r0, r2
 802b47c:	ec41 0b17 	vmov	d7, r0, r1
 802b480:	ee36 7b07 	vadd.f64	d7, d6, d7
 802b484:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b488:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b48c:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b490:	e008      	b.n	802b4a4 <rint+0xe4>
 802b492:	2833      	cmp	r0, #51	; 0x33
 802b494:	dd09      	ble.n	802b4aa <rint+0xea>
 802b496:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 802b49a:	d1cd      	bne.n	802b438 <rint+0x78>
 802b49c:	ed9d 7b00 	vldr	d7, [sp]
 802b4a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 802b4a4:	ed8d 7b00 	vstr	d7, [sp]
 802b4a8:	e7c6      	b.n	802b438 <rint+0x78>
 802b4aa:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 802b4ae:	f04f 31ff 	mov.w	r1, #4294967295
 802b4b2:	40c1      	lsrs	r1, r0
 802b4b4:	420a      	tst	r2, r1
 802b4b6:	d0bf      	beq.n	802b438 <rint+0x78>
 802b4b8:	0849      	lsrs	r1, r1, #1
 802b4ba:	420a      	tst	r2, r1
 802b4bc:	bf1f      	itttt	ne
 802b4be:	ea22 0101 	bicne.w	r1, r2, r1
 802b4c2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 802b4c6:	4102      	asrne	r2, r0
 802b4c8:	430a      	orrne	r2, r1
 802b4ca:	e7d0      	b.n	802b46e <rint+0xae>
 802b4cc:	0802de38 	.word	0x0802de38
 802b4d0:	000fffff 	.word	0x000fffff
 802b4d4:	00000000 	.word	0x00000000

0802b4d8 <scalbn>:
 802b4d8:	b500      	push	{lr}
 802b4da:	ed2d 8b02 	vpush	{d8}
 802b4de:	b083      	sub	sp, #12
 802b4e0:	ed8d 0b00 	vstr	d0, [sp]
 802b4e4:	9b01      	ldr	r3, [sp, #4]
 802b4e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802b4ea:	b9a2      	cbnz	r2, 802b516 <scalbn+0x3e>
 802b4ec:	9a00      	ldr	r2, [sp, #0]
 802b4ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b4f2:	4313      	orrs	r3, r2
 802b4f4:	d03a      	beq.n	802b56c <scalbn+0x94>
 802b4f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 802b5b0 <scalbn+0xd8>
 802b4fa:	4b35      	ldr	r3, [pc, #212]	; (802b5d0 <scalbn+0xf8>)
 802b4fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 802b500:	4298      	cmp	r0, r3
 802b502:	ed8d 7b00 	vstr	d7, [sp]
 802b506:	da11      	bge.n	802b52c <scalbn+0x54>
 802b508:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 802b5b8 <scalbn+0xe0>
 802b50c:	ed9d 6b00 	vldr	d6, [sp]
 802b510:	ee27 7b06 	vmul.f64	d7, d7, d6
 802b514:	e007      	b.n	802b526 <scalbn+0x4e>
 802b516:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802b51a:	428a      	cmp	r2, r1
 802b51c:	d10a      	bne.n	802b534 <scalbn+0x5c>
 802b51e:	ed9d 7b00 	vldr	d7, [sp]
 802b522:	ee37 7b07 	vadd.f64	d7, d7, d7
 802b526:	ed8d 7b00 	vstr	d7, [sp]
 802b52a:	e01f      	b.n	802b56c <scalbn+0x94>
 802b52c:	9b01      	ldr	r3, [sp, #4]
 802b52e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802b532:	3a36      	subs	r2, #54	; 0x36
 802b534:	4402      	add	r2, r0
 802b536:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802b53a:	428a      	cmp	r2, r1
 802b53c:	dd0a      	ble.n	802b554 <scalbn+0x7c>
 802b53e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 802b5c0 <scalbn+0xe8>
 802b542:	eeb0 0b48 	vmov.f64	d0, d8
 802b546:	ed9d 1b00 	vldr	d1, [sp]
 802b54a:	f000 f9bf 	bl	802b8cc <copysign>
 802b54e:	ee20 7b08 	vmul.f64	d7, d0, d8
 802b552:	e7e8      	b.n	802b526 <scalbn+0x4e>
 802b554:	2a00      	cmp	r2, #0
 802b556:	dd10      	ble.n	802b57a <scalbn+0xa2>
 802b558:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b55c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802b560:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802b564:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802b568:	e9cd 0100 	strd	r0, r1, [sp]
 802b56c:	ed9d 0b00 	vldr	d0, [sp]
 802b570:	b003      	add	sp, #12
 802b572:	ecbd 8b02 	vpop	{d8}
 802b576:	f85d fb04 	ldr.w	pc, [sp], #4
 802b57a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802b57e:	da06      	bge.n	802b58e <scalbn+0xb6>
 802b580:	f24c 3350 	movw	r3, #50000	; 0xc350
 802b584:	4298      	cmp	r0, r3
 802b586:	dcda      	bgt.n	802b53e <scalbn+0x66>
 802b588:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 802b5b8 <scalbn+0xe0>
 802b58c:	e7d9      	b.n	802b542 <scalbn+0x6a>
 802b58e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b592:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802b596:	3236      	adds	r2, #54	; 0x36
 802b598:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802b59c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802b5a0:	ec41 0b17 	vmov	d7, r0, r1
 802b5a4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 802b5c8 <scalbn+0xf0>
 802b5a8:	e7b2      	b.n	802b510 <scalbn+0x38>
 802b5aa:	bf00      	nop
 802b5ac:	f3af 8000 	nop.w
 802b5b0:	00000000 	.word	0x00000000
 802b5b4:	43500000 	.word	0x43500000
 802b5b8:	c2f8f359 	.word	0xc2f8f359
 802b5bc:	01a56e1f 	.word	0x01a56e1f
 802b5c0:	8800759c 	.word	0x8800759c
 802b5c4:	7e37e43c 	.word	0x7e37e43c
 802b5c8:	00000000 	.word	0x00000000
 802b5cc:	3c900000 	.word	0x3c900000
 802b5d0:	ffff3cb0 	.word	0xffff3cb0

0802b5d4 <atanf>:
 802b5d4:	b538      	push	{r3, r4, r5, lr}
 802b5d6:	ee10 5a10 	vmov	r5, s0
 802b5da:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802b5de:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 802b5e2:	eef0 7a40 	vmov.f32	s15, s0
 802b5e6:	db0f      	blt.n	802b608 <atanf+0x34>
 802b5e8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802b5ec:	dd04      	ble.n	802b5f8 <atanf+0x24>
 802b5ee:	ee70 7a00 	vadd.f32	s15, s0, s0
 802b5f2:	eeb0 0a67 	vmov.f32	s0, s15
 802b5f6:	bd38      	pop	{r3, r4, r5, pc}
 802b5f8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 802b72c <atanf+0x158>
 802b5fc:	eddf 7a4c 	vldr	s15, [pc, #304]	; 802b730 <atanf+0x15c>
 802b600:	2d00      	cmp	r5, #0
 802b602:	fe77 7a87 	vselgt.f32	s15, s15, s14
 802b606:	e7f4      	b.n	802b5f2 <atanf+0x1e>
 802b608:	4b4a      	ldr	r3, [pc, #296]	; (802b734 <atanf+0x160>)
 802b60a:	429c      	cmp	r4, r3
 802b60c:	dc10      	bgt.n	802b630 <atanf+0x5c>
 802b60e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 802b612:	da0a      	bge.n	802b62a <atanf+0x56>
 802b614:	ed9f 7a48 	vldr	s14, [pc, #288]	; 802b738 <atanf+0x164>
 802b618:	ee30 7a07 	vadd.f32	s14, s0, s14
 802b61c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802b620:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802b624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b628:	dce3      	bgt.n	802b5f2 <atanf+0x1e>
 802b62a:	f04f 33ff 	mov.w	r3, #4294967295
 802b62e:	e013      	b.n	802b658 <atanf+0x84>
 802b630:	f000 f8a2 	bl	802b778 <fabsf>
 802b634:	4b41      	ldr	r3, [pc, #260]	; (802b73c <atanf+0x168>)
 802b636:	429c      	cmp	r4, r3
 802b638:	dc4f      	bgt.n	802b6da <atanf+0x106>
 802b63a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 802b63e:	429c      	cmp	r4, r3
 802b640:	dc41      	bgt.n	802b6c6 <atanf+0xf2>
 802b642:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802b646:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802b64a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802b64e:	2300      	movs	r3, #0
 802b650:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b654:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b658:	1c5a      	adds	r2, r3, #1
 802b65a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802b65e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802b740 <atanf+0x16c>
 802b662:	eddf 5a38 	vldr	s11, [pc, #224]	; 802b744 <atanf+0x170>
 802b666:	ed9f 5a38 	vldr	s10, [pc, #224]	; 802b748 <atanf+0x174>
 802b66a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802b66e:	eee6 5a87 	vfma.f32	s11, s13, s14
 802b672:	ed9f 7a36 	vldr	s14, [pc, #216]	; 802b74c <atanf+0x178>
 802b676:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802b67a:	eddf 5a35 	vldr	s11, [pc, #212]	; 802b750 <atanf+0x17c>
 802b67e:	eee7 5a26 	vfma.f32	s11, s14, s13
 802b682:	ed9f 7a34 	vldr	s14, [pc, #208]	; 802b754 <atanf+0x180>
 802b686:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802b68a:	eddf 5a33 	vldr	s11, [pc, #204]	; 802b758 <atanf+0x184>
 802b68e:	eee7 5a26 	vfma.f32	s11, s14, s13
 802b692:	ed9f 7a32 	vldr	s14, [pc, #200]	; 802b75c <atanf+0x188>
 802b696:	eea6 5a87 	vfma.f32	s10, s13, s14
 802b69a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 802b760 <atanf+0x18c>
 802b69e:	eea5 7a26 	vfma.f32	s14, s10, s13
 802b6a2:	ed9f 5a30 	vldr	s10, [pc, #192]	; 802b764 <atanf+0x190>
 802b6a6:	eea7 5a26 	vfma.f32	s10, s14, s13
 802b6aa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 802b768 <atanf+0x194>
 802b6ae:	eea5 7a26 	vfma.f32	s14, s10, s13
 802b6b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 802b6b6:	eea5 7a86 	vfma.f32	s14, s11, s12
 802b6ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 802b6be:	d121      	bne.n	802b704 <atanf+0x130>
 802b6c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b6c4:	e795      	b.n	802b5f2 <atanf+0x1e>
 802b6c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802b6ca:	ee30 7a67 	vsub.f32	s14, s0, s15
 802b6ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b6d2:	2301      	movs	r3, #1
 802b6d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b6d8:	e7be      	b.n	802b658 <atanf+0x84>
 802b6da:	4b24      	ldr	r3, [pc, #144]	; (802b76c <atanf+0x198>)
 802b6dc:	429c      	cmp	r4, r3
 802b6de:	dc0b      	bgt.n	802b6f8 <atanf+0x124>
 802b6e0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 802b6e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b6e8:	eea0 7a27 	vfma.f32	s14, s0, s15
 802b6ec:	2302      	movs	r3, #2
 802b6ee:	ee70 6a67 	vsub.f32	s13, s0, s15
 802b6f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802b6f6:	e7af      	b.n	802b658 <atanf+0x84>
 802b6f8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802b6fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b700:	2303      	movs	r3, #3
 802b702:	e7a9      	b.n	802b658 <atanf+0x84>
 802b704:	4a1a      	ldr	r2, [pc, #104]	; (802b770 <atanf+0x19c>)
 802b706:	491b      	ldr	r1, [pc, #108]	; (802b774 <atanf+0x1a0>)
 802b708:	009b      	lsls	r3, r3, #2
 802b70a:	441a      	add	r2, r3
 802b70c:	440b      	add	r3, r1
 802b70e:	edd3 6a00 	vldr	s13, [r3]
 802b712:	ee37 7a66 	vsub.f32	s14, s14, s13
 802b716:	2d00      	cmp	r5, #0
 802b718:	ee77 7a67 	vsub.f32	s15, s14, s15
 802b71c:	ed92 7a00 	vldr	s14, [r2]
 802b720:	ee77 7a67 	vsub.f32	s15, s14, s15
 802b724:	bfb8      	it	lt
 802b726:	eef1 7a67 	vneglt.f32	s15, s15
 802b72a:	e762      	b.n	802b5f2 <atanf+0x1e>
 802b72c:	bfc90fdb 	.word	0xbfc90fdb
 802b730:	3fc90fdb 	.word	0x3fc90fdb
 802b734:	3edfffff 	.word	0x3edfffff
 802b738:	7149f2ca 	.word	0x7149f2ca
 802b73c:	3f97ffff 	.word	0x3f97ffff
 802b740:	3c8569d7 	.word	0x3c8569d7
 802b744:	3d4bda59 	.word	0x3d4bda59
 802b748:	bd6ef16b 	.word	0xbd6ef16b
 802b74c:	3d886b35 	.word	0x3d886b35
 802b750:	3dba2e6e 	.word	0x3dba2e6e
 802b754:	3e124925 	.word	0x3e124925
 802b758:	3eaaaaab 	.word	0x3eaaaaab
 802b75c:	bd15a221 	.word	0xbd15a221
 802b760:	bd9d8795 	.word	0xbd9d8795
 802b764:	bde38e38 	.word	0xbde38e38
 802b768:	be4ccccd 	.word	0xbe4ccccd
 802b76c:	401bffff 	.word	0x401bffff
 802b770:	0802de48 	.word	0x0802de48
 802b774:	0802de58 	.word	0x0802de58

0802b778 <fabsf>:
 802b778:	ee10 3a10 	vmov	r3, s0
 802b77c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b780:	ee00 3a10 	vmov	s0, r3
 802b784:	4770      	bx	lr
	...

0802b788 <floorf>:
 802b788:	ee10 3a10 	vmov	r3, s0
 802b78c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802b790:	0dca      	lsrs	r2, r1, #23
 802b792:	3a7f      	subs	r2, #127	; 0x7f
 802b794:	2a16      	cmp	r2, #22
 802b796:	dc2a      	bgt.n	802b7ee <floorf+0x66>
 802b798:	2a00      	cmp	r2, #0
 802b79a:	da11      	bge.n	802b7c0 <floorf+0x38>
 802b79c:	eddf 7a18 	vldr	s15, [pc, #96]	; 802b800 <floorf+0x78>
 802b7a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b7a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7ac:	dd05      	ble.n	802b7ba <floorf+0x32>
 802b7ae:	2b00      	cmp	r3, #0
 802b7b0:	da23      	bge.n	802b7fa <floorf+0x72>
 802b7b2:	4a14      	ldr	r2, [pc, #80]	; (802b804 <floorf+0x7c>)
 802b7b4:	2900      	cmp	r1, #0
 802b7b6:	bf18      	it	ne
 802b7b8:	4613      	movne	r3, r2
 802b7ba:	ee00 3a10 	vmov	s0, r3
 802b7be:	4770      	bx	lr
 802b7c0:	4911      	ldr	r1, [pc, #68]	; (802b808 <floorf+0x80>)
 802b7c2:	4111      	asrs	r1, r2
 802b7c4:	420b      	tst	r3, r1
 802b7c6:	d0fa      	beq.n	802b7be <floorf+0x36>
 802b7c8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802b800 <floorf+0x78>
 802b7cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b7d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7d8:	ddef      	ble.n	802b7ba <floorf+0x32>
 802b7da:	2b00      	cmp	r3, #0
 802b7dc:	bfbe      	ittt	lt
 802b7de:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802b7e2:	fa40 f202 	asrlt.w	r2, r0, r2
 802b7e6:	189b      	addlt	r3, r3, r2
 802b7e8:	ea23 0301 	bic.w	r3, r3, r1
 802b7ec:	e7e5      	b.n	802b7ba <floorf+0x32>
 802b7ee:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802b7f2:	d3e4      	bcc.n	802b7be <floorf+0x36>
 802b7f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 802b7f8:	4770      	bx	lr
 802b7fa:	2300      	movs	r3, #0
 802b7fc:	e7dd      	b.n	802b7ba <floorf+0x32>
 802b7fe:	bf00      	nop
 802b800:	7149f2ca 	.word	0x7149f2ca
 802b804:	bf800000 	.word	0xbf800000
 802b808:	007fffff 	.word	0x007fffff

0802b80c <scalbnf>:
 802b80c:	b508      	push	{r3, lr}
 802b80e:	ee10 2a10 	vmov	r2, s0
 802b812:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 802b816:	ed2d 8b02 	vpush	{d8}
 802b81a:	eef0 0a40 	vmov.f32	s1, s0
 802b81e:	d004      	beq.n	802b82a <scalbnf+0x1e>
 802b820:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802b824:	d306      	bcc.n	802b834 <scalbnf+0x28>
 802b826:	ee70 0a00 	vadd.f32	s1, s0, s0
 802b82a:	ecbd 8b02 	vpop	{d8}
 802b82e:	eeb0 0a60 	vmov.f32	s0, s1
 802b832:	bd08      	pop	{r3, pc}
 802b834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802b838:	d21c      	bcs.n	802b874 <scalbnf+0x68>
 802b83a:	4b1f      	ldr	r3, [pc, #124]	; (802b8b8 <scalbnf+0xac>)
 802b83c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802b8bc <scalbnf+0xb0>
 802b840:	4298      	cmp	r0, r3
 802b842:	ee60 0a27 	vmul.f32	s1, s0, s15
 802b846:	db10      	blt.n	802b86a <scalbnf+0x5e>
 802b848:	ee10 2a90 	vmov	r2, s1
 802b84c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 802b850:	3b19      	subs	r3, #25
 802b852:	4403      	add	r3, r0
 802b854:	2bfe      	cmp	r3, #254	; 0xfe
 802b856:	dd0f      	ble.n	802b878 <scalbnf+0x6c>
 802b858:	ed9f 8a19 	vldr	s16, [pc, #100]	; 802b8c0 <scalbnf+0xb4>
 802b85c:	eeb0 0a48 	vmov.f32	s0, s16
 802b860:	f000 f843 	bl	802b8ea <copysignf>
 802b864:	ee60 0a08 	vmul.f32	s1, s0, s16
 802b868:	e7df      	b.n	802b82a <scalbnf+0x1e>
 802b86a:	eddf 7a16 	vldr	s15, [pc, #88]	; 802b8c4 <scalbnf+0xb8>
 802b86e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802b872:	e7da      	b.n	802b82a <scalbnf+0x1e>
 802b874:	0ddb      	lsrs	r3, r3, #23
 802b876:	e7ec      	b.n	802b852 <scalbnf+0x46>
 802b878:	2b00      	cmp	r3, #0
 802b87a:	dd06      	ble.n	802b88a <scalbnf+0x7e>
 802b87c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802b880:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802b884:	ee00 3a90 	vmov	s1, r3
 802b888:	e7cf      	b.n	802b82a <scalbnf+0x1e>
 802b88a:	f113 0f16 	cmn.w	r3, #22
 802b88e:	da06      	bge.n	802b89e <scalbnf+0x92>
 802b890:	f24c 3350 	movw	r3, #50000	; 0xc350
 802b894:	4298      	cmp	r0, r3
 802b896:	dcdf      	bgt.n	802b858 <scalbnf+0x4c>
 802b898:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 802b8c4 <scalbnf+0xb8>
 802b89c:	e7de      	b.n	802b85c <scalbnf+0x50>
 802b89e:	3319      	adds	r3, #25
 802b8a0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802b8a4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802b8a8:	eddf 7a07 	vldr	s15, [pc, #28]	; 802b8c8 <scalbnf+0xbc>
 802b8ac:	ee07 3a10 	vmov	s14, r3
 802b8b0:	ee67 0a27 	vmul.f32	s1, s14, s15
 802b8b4:	e7b9      	b.n	802b82a <scalbnf+0x1e>
 802b8b6:	bf00      	nop
 802b8b8:	ffff3cb0 	.word	0xffff3cb0
 802b8bc:	4c000000 	.word	0x4c000000
 802b8c0:	7149f2ca 	.word	0x7149f2ca
 802b8c4:	0da24260 	.word	0x0da24260
 802b8c8:	33000000 	.word	0x33000000

0802b8cc <copysign>:
 802b8cc:	ec51 0b10 	vmov	r0, r1, d0
 802b8d0:	ee11 0a90 	vmov	r0, s3
 802b8d4:	ee10 2a10 	vmov	r2, s0
 802b8d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802b8dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 802b8e0:	ea41 0300 	orr.w	r3, r1, r0
 802b8e4:	ec43 2b10 	vmov	d0, r2, r3
 802b8e8:	4770      	bx	lr

0802b8ea <copysignf>:
 802b8ea:	ee10 3a10 	vmov	r3, s0
 802b8ee:	ee10 2a90 	vmov	r2, s1
 802b8f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b8f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802b8fa:	4313      	orrs	r3, r2
 802b8fc:	ee00 3a10 	vmov	s0, r3
 802b900:	4770      	bx	lr
	...

0802b904 <__assert_func>:
 802b904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b906:	461c      	mov	r4, r3
 802b908:	4b09      	ldr	r3, [pc, #36]	; (802b930 <__assert_func+0x2c>)
 802b90a:	681b      	ldr	r3, [r3, #0]
 802b90c:	4605      	mov	r5, r0
 802b90e:	68d8      	ldr	r0, [r3, #12]
 802b910:	b152      	cbz	r2, 802b928 <__assert_func+0x24>
 802b912:	4b08      	ldr	r3, [pc, #32]	; (802b934 <__assert_func+0x30>)
 802b914:	9100      	str	r1, [sp, #0]
 802b916:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802b91a:	4907      	ldr	r1, [pc, #28]	; (802b938 <__assert_func+0x34>)
 802b91c:	462b      	mov	r3, r5
 802b91e:	4622      	mov	r2, r4
 802b920:	f000 f814 	bl	802b94c <fiprintf>
 802b924:	f000 fd14 	bl	802c350 <abort>
 802b928:	4b04      	ldr	r3, [pc, #16]	; (802b93c <__assert_func+0x38>)
 802b92a:	461a      	mov	r2, r3
 802b92c:	e7f2      	b.n	802b914 <__assert_func+0x10>
 802b92e:	bf00      	nop
 802b930:	240006b0 	.word	0x240006b0
 802b934:	0802de68 	.word	0x0802de68
 802b938:	0802de75 	.word	0x0802de75
 802b93c:	0802dea3 	.word	0x0802dea3

0802b940 <__errno>:
 802b940:	4b01      	ldr	r3, [pc, #4]	; (802b948 <__errno+0x8>)
 802b942:	6818      	ldr	r0, [r3, #0]
 802b944:	4770      	bx	lr
 802b946:	bf00      	nop
 802b948:	240006b0 	.word	0x240006b0

0802b94c <fiprintf>:
 802b94c:	b40e      	push	{r1, r2, r3}
 802b94e:	b503      	push	{r0, r1, lr}
 802b950:	4601      	mov	r1, r0
 802b952:	ab03      	add	r3, sp, #12
 802b954:	4805      	ldr	r0, [pc, #20]	; (802b96c <fiprintf+0x20>)
 802b956:	f853 2b04 	ldr.w	r2, [r3], #4
 802b95a:	6800      	ldr	r0, [r0, #0]
 802b95c:	9301      	str	r3, [sp, #4]
 802b95e:	f000 f867 	bl	802ba30 <_vfiprintf_r>
 802b962:	b002      	add	sp, #8
 802b964:	f85d eb04 	ldr.w	lr, [sp], #4
 802b968:	b003      	add	sp, #12
 802b96a:	4770      	bx	lr
 802b96c:	240006b0 	.word	0x240006b0

0802b970 <__libc_init_array>:
 802b970:	b570      	push	{r4, r5, r6, lr}
 802b972:	4e0d      	ldr	r6, [pc, #52]	; (802b9a8 <__libc_init_array+0x38>)
 802b974:	4c0d      	ldr	r4, [pc, #52]	; (802b9ac <__libc_init_array+0x3c>)
 802b976:	1ba4      	subs	r4, r4, r6
 802b978:	10a4      	asrs	r4, r4, #2
 802b97a:	2500      	movs	r5, #0
 802b97c:	42a5      	cmp	r5, r4
 802b97e:	d109      	bne.n	802b994 <__libc_init_array+0x24>
 802b980:	4e0b      	ldr	r6, [pc, #44]	; (802b9b0 <__libc_init_array+0x40>)
 802b982:	4c0c      	ldr	r4, [pc, #48]	; (802b9b4 <__libc_init_array+0x44>)
 802b984:	f001 f87c 	bl	802ca80 <_init>
 802b988:	1ba4      	subs	r4, r4, r6
 802b98a:	10a4      	asrs	r4, r4, #2
 802b98c:	2500      	movs	r5, #0
 802b98e:	42a5      	cmp	r5, r4
 802b990:	d105      	bne.n	802b99e <__libc_init_array+0x2e>
 802b992:	bd70      	pop	{r4, r5, r6, pc}
 802b994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802b998:	4798      	blx	r3
 802b99a:	3501      	adds	r5, #1
 802b99c:	e7ee      	b.n	802b97c <__libc_init_array+0xc>
 802b99e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802b9a2:	4798      	blx	r3
 802b9a4:	3501      	adds	r5, #1
 802b9a6:	e7f2      	b.n	802b98e <__libc_init_array+0x1e>
 802b9a8:	0802df44 	.word	0x0802df44
 802b9ac:	0802df44 	.word	0x0802df44
 802b9b0:	0802df44 	.word	0x0802df44
 802b9b4:	0802df68 	.word	0x0802df68

0802b9b8 <memcpy>:
 802b9b8:	b510      	push	{r4, lr}
 802b9ba:	1e43      	subs	r3, r0, #1
 802b9bc:	440a      	add	r2, r1
 802b9be:	4291      	cmp	r1, r2
 802b9c0:	d100      	bne.n	802b9c4 <memcpy+0xc>
 802b9c2:	bd10      	pop	{r4, pc}
 802b9c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b9c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b9cc:	e7f7      	b.n	802b9be <memcpy+0x6>

0802b9ce <memset>:
 802b9ce:	4402      	add	r2, r0
 802b9d0:	4603      	mov	r3, r0
 802b9d2:	4293      	cmp	r3, r2
 802b9d4:	d100      	bne.n	802b9d8 <memset+0xa>
 802b9d6:	4770      	bx	lr
 802b9d8:	f803 1b01 	strb.w	r1, [r3], #1
 802b9dc:	e7f9      	b.n	802b9d2 <memset+0x4>

0802b9de <__sfputc_r>:
 802b9de:	6893      	ldr	r3, [r2, #8]
 802b9e0:	3b01      	subs	r3, #1
 802b9e2:	2b00      	cmp	r3, #0
 802b9e4:	b410      	push	{r4}
 802b9e6:	6093      	str	r3, [r2, #8]
 802b9e8:	da08      	bge.n	802b9fc <__sfputc_r+0x1e>
 802b9ea:	6994      	ldr	r4, [r2, #24]
 802b9ec:	42a3      	cmp	r3, r4
 802b9ee:	db01      	blt.n	802b9f4 <__sfputc_r+0x16>
 802b9f0:	290a      	cmp	r1, #10
 802b9f2:	d103      	bne.n	802b9fc <__sfputc_r+0x1e>
 802b9f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b9f8:	f000 bbea 	b.w	802c1d0 <__swbuf_r>
 802b9fc:	6813      	ldr	r3, [r2, #0]
 802b9fe:	1c58      	adds	r0, r3, #1
 802ba00:	6010      	str	r0, [r2, #0]
 802ba02:	7019      	strb	r1, [r3, #0]
 802ba04:	4608      	mov	r0, r1
 802ba06:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ba0a:	4770      	bx	lr

0802ba0c <__sfputs_r>:
 802ba0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ba0e:	4606      	mov	r6, r0
 802ba10:	460f      	mov	r7, r1
 802ba12:	4614      	mov	r4, r2
 802ba14:	18d5      	adds	r5, r2, r3
 802ba16:	42ac      	cmp	r4, r5
 802ba18:	d101      	bne.n	802ba1e <__sfputs_r+0x12>
 802ba1a:	2000      	movs	r0, #0
 802ba1c:	e007      	b.n	802ba2e <__sfputs_r+0x22>
 802ba1e:	463a      	mov	r2, r7
 802ba20:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ba24:	4630      	mov	r0, r6
 802ba26:	f7ff ffda 	bl	802b9de <__sfputc_r>
 802ba2a:	1c43      	adds	r3, r0, #1
 802ba2c:	d1f3      	bne.n	802ba16 <__sfputs_r+0xa>
 802ba2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802ba30 <_vfiprintf_r>:
 802ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ba34:	460c      	mov	r4, r1
 802ba36:	b09d      	sub	sp, #116	; 0x74
 802ba38:	4617      	mov	r7, r2
 802ba3a:	461d      	mov	r5, r3
 802ba3c:	4606      	mov	r6, r0
 802ba3e:	b118      	cbz	r0, 802ba48 <_vfiprintf_r+0x18>
 802ba40:	6983      	ldr	r3, [r0, #24]
 802ba42:	b90b      	cbnz	r3, 802ba48 <_vfiprintf_r+0x18>
 802ba44:	f000 fd7c 	bl	802c540 <__sinit>
 802ba48:	4b7c      	ldr	r3, [pc, #496]	; (802bc3c <_vfiprintf_r+0x20c>)
 802ba4a:	429c      	cmp	r4, r3
 802ba4c:	d158      	bne.n	802bb00 <_vfiprintf_r+0xd0>
 802ba4e:	6874      	ldr	r4, [r6, #4]
 802ba50:	89a3      	ldrh	r3, [r4, #12]
 802ba52:	0718      	lsls	r0, r3, #28
 802ba54:	d55e      	bpl.n	802bb14 <_vfiprintf_r+0xe4>
 802ba56:	6923      	ldr	r3, [r4, #16]
 802ba58:	2b00      	cmp	r3, #0
 802ba5a:	d05b      	beq.n	802bb14 <_vfiprintf_r+0xe4>
 802ba5c:	2300      	movs	r3, #0
 802ba5e:	9309      	str	r3, [sp, #36]	; 0x24
 802ba60:	2320      	movs	r3, #32
 802ba62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ba66:	2330      	movs	r3, #48	; 0x30
 802ba68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ba6c:	9503      	str	r5, [sp, #12]
 802ba6e:	f04f 0b01 	mov.w	fp, #1
 802ba72:	46b8      	mov	r8, r7
 802ba74:	4645      	mov	r5, r8
 802ba76:	f815 3b01 	ldrb.w	r3, [r5], #1
 802ba7a:	b10b      	cbz	r3, 802ba80 <_vfiprintf_r+0x50>
 802ba7c:	2b25      	cmp	r3, #37	; 0x25
 802ba7e:	d154      	bne.n	802bb2a <_vfiprintf_r+0xfa>
 802ba80:	ebb8 0a07 	subs.w	sl, r8, r7
 802ba84:	d00b      	beq.n	802ba9e <_vfiprintf_r+0x6e>
 802ba86:	4653      	mov	r3, sl
 802ba88:	463a      	mov	r2, r7
 802ba8a:	4621      	mov	r1, r4
 802ba8c:	4630      	mov	r0, r6
 802ba8e:	f7ff ffbd 	bl	802ba0c <__sfputs_r>
 802ba92:	3001      	adds	r0, #1
 802ba94:	f000 80c2 	beq.w	802bc1c <_vfiprintf_r+0x1ec>
 802ba98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ba9a:	4453      	add	r3, sl
 802ba9c:	9309      	str	r3, [sp, #36]	; 0x24
 802ba9e:	f898 3000 	ldrb.w	r3, [r8]
 802baa2:	2b00      	cmp	r3, #0
 802baa4:	f000 80ba 	beq.w	802bc1c <_vfiprintf_r+0x1ec>
 802baa8:	2300      	movs	r3, #0
 802baaa:	f04f 32ff 	mov.w	r2, #4294967295
 802baae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bab2:	9304      	str	r3, [sp, #16]
 802bab4:	9307      	str	r3, [sp, #28]
 802bab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802baba:	931a      	str	r3, [sp, #104]	; 0x68
 802babc:	46a8      	mov	r8, r5
 802babe:	2205      	movs	r2, #5
 802bac0:	f818 1b01 	ldrb.w	r1, [r8], #1
 802bac4:	485e      	ldr	r0, [pc, #376]	; (802bc40 <_vfiprintf_r+0x210>)
 802bac6:	f7d4 fc13 	bl	80002f0 <memchr>
 802baca:	9b04      	ldr	r3, [sp, #16]
 802bacc:	bb78      	cbnz	r0, 802bb2e <_vfiprintf_r+0xfe>
 802bace:	06d9      	lsls	r1, r3, #27
 802bad0:	bf44      	itt	mi
 802bad2:	2220      	movmi	r2, #32
 802bad4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802bad8:	071a      	lsls	r2, r3, #28
 802bada:	bf44      	itt	mi
 802badc:	222b      	movmi	r2, #43	; 0x2b
 802bade:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802bae2:	782a      	ldrb	r2, [r5, #0]
 802bae4:	2a2a      	cmp	r2, #42	; 0x2a
 802bae6:	d02a      	beq.n	802bb3e <_vfiprintf_r+0x10e>
 802bae8:	9a07      	ldr	r2, [sp, #28]
 802baea:	46a8      	mov	r8, r5
 802baec:	2000      	movs	r0, #0
 802baee:	250a      	movs	r5, #10
 802baf0:	4641      	mov	r1, r8
 802baf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 802baf6:	3b30      	subs	r3, #48	; 0x30
 802baf8:	2b09      	cmp	r3, #9
 802bafa:	d969      	bls.n	802bbd0 <_vfiprintf_r+0x1a0>
 802bafc:	b360      	cbz	r0, 802bb58 <_vfiprintf_r+0x128>
 802bafe:	e024      	b.n	802bb4a <_vfiprintf_r+0x11a>
 802bb00:	4b50      	ldr	r3, [pc, #320]	; (802bc44 <_vfiprintf_r+0x214>)
 802bb02:	429c      	cmp	r4, r3
 802bb04:	d101      	bne.n	802bb0a <_vfiprintf_r+0xda>
 802bb06:	68b4      	ldr	r4, [r6, #8]
 802bb08:	e7a2      	b.n	802ba50 <_vfiprintf_r+0x20>
 802bb0a:	4b4f      	ldr	r3, [pc, #316]	; (802bc48 <_vfiprintf_r+0x218>)
 802bb0c:	429c      	cmp	r4, r3
 802bb0e:	bf08      	it	eq
 802bb10:	68f4      	ldreq	r4, [r6, #12]
 802bb12:	e79d      	b.n	802ba50 <_vfiprintf_r+0x20>
 802bb14:	4621      	mov	r1, r4
 802bb16:	4630      	mov	r0, r6
 802bb18:	f000 fbac 	bl	802c274 <__swsetup_r>
 802bb1c:	2800      	cmp	r0, #0
 802bb1e:	d09d      	beq.n	802ba5c <_vfiprintf_r+0x2c>
 802bb20:	f04f 30ff 	mov.w	r0, #4294967295
 802bb24:	b01d      	add	sp, #116	; 0x74
 802bb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb2a:	46a8      	mov	r8, r5
 802bb2c:	e7a2      	b.n	802ba74 <_vfiprintf_r+0x44>
 802bb2e:	4a44      	ldr	r2, [pc, #272]	; (802bc40 <_vfiprintf_r+0x210>)
 802bb30:	1a80      	subs	r0, r0, r2
 802bb32:	fa0b f000 	lsl.w	r0, fp, r0
 802bb36:	4318      	orrs	r0, r3
 802bb38:	9004      	str	r0, [sp, #16]
 802bb3a:	4645      	mov	r5, r8
 802bb3c:	e7be      	b.n	802babc <_vfiprintf_r+0x8c>
 802bb3e:	9a03      	ldr	r2, [sp, #12]
 802bb40:	1d11      	adds	r1, r2, #4
 802bb42:	6812      	ldr	r2, [r2, #0]
 802bb44:	9103      	str	r1, [sp, #12]
 802bb46:	2a00      	cmp	r2, #0
 802bb48:	db01      	blt.n	802bb4e <_vfiprintf_r+0x11e>
 802bb4a:	9207      	str	r2, [sp, #28]
 802bb4c:	e004      	b.n	802bb58 <_vfiprintf_r+0x128>
 802bb4e:	4252      	negs	r2, r2
 802bb50:	f043 0302 	orr.w	r3, r3, #2
 802bb54:	9207      	str	r2, [sp, #28]
 802bb56:	9304      	str	r3, [sp, #16]
 802bb58:	f898 3000 	ldrb.w	r3, [r8]
 802bb5c:	2b2e      	cmp	r3, #46	; 0x2e
 802bb5e:	d10e      	bne.n	802bb7e <_vfiprintf_r+0x14e>
 802bb60:	f898 3001 	ldrb.w	r3, [r8, #1]
 802bb64:	2b2a      	cmp	r3, #42	; 0x2a
 802bb66:	d138      	bne.n	802bbda <_vfiprintf_r+0x1aa>
 802bb68:	9b03      	ldr	r3, [sp, #12]
 802bb6a:	1d1a      	adds	r2, r3, #4
 802bb6c:	681b      	ldr	r3, [r3, #0]
 802bb6e:	9203      	str	r2, [sp, #12]
 802bb70:	2b00      	cmp	r3, #0
 802bb72:	bfb8      	it	lt
 802bb74:	f04f 33ff 	movlt.w	r3, #4294967295
 802bb78:	f108 0802 	add.w	r8, r8, #2
 802bb7c:	9305      	str	r3, [sp, #20]
 802bb7e:	4d33      	ldr	r5, [pc, #204]	; (802bc4c <_vfiprintf_r+0x21c>)
 802bb80:	f898 1000 	ldrb.w	r1, [r8]
 802bb84:	2203      	movs	r2, #3
 802bb86:	4628      	mov	r0, r5
 802bb88:	f7d4 fbb2 	bl	80002f0 <memchr>
 802bb8c:	b140      	cbz	r0, 802bba0 <_vfiprintf_r+0x170>
 802bb8e:	2340      	movs	r3, #64	; 0x40
 802bb90:	1b40      	subs	r0, r0, r5
 802bb92:	fa03 f000 	lsl.w	r0, r3, r0
 802bb96:	9b04      	ldr	r3, [sp, #16]
 802bb98:	4303      	orrs	r3, r0
 802bb9a:	f108 0801 	add.w	r8, r8, #1
 802bb9e:	9304      	str	r3, [sp, #16]
 802bba0:	f898 1000 	ldrb.w	r1, [r8]
 802bba4:	482a      	ldr	r0, [pc, #168]	; (802bc50 <_vfiprintf_r+0x220>)
 802bba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802bbaa:	2206      	movs	r2, #6
 802bbac:	f108 0701 	add.w	r7, r8, #1
 802bbb0:	f7d4 fb9e 	bl	80002f0 <memchr>
 802bbb4:	2800      	cmp	r0, #0
 802bbb6:	d037      	beq.n	802bc28 <_vfiprintf_r+0x1f8>
 802bbb8:	4b26      	ldr	r3, [pc, #152]	; (802bc54 <_vfiprintf_r+0x224>)
 802bbba:	bb1b      	cbnz	r3, 802bc04 <_vfiprintf_r+0x1d4>
 802bbbc:	9b03      	ldr	r3, [sp, #12]
 802bbbe:	3307      	adds	r3, #7
 802bbc0:	f023 0307 	bic.w	r3, r3, #7
 802bbc4:	3308      	adds	r3, #8
 802bbc6:	9303      	str	r3, [sp, #12]
 802bbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bbca:	444b      	add	r3, r9
 802bbcc:	9309      	str	r3, [sp, #36]	; 0x24
 802bbce:	e750      	b.n	802ba72 <_vfiprintf_r+0x42>
 802bbd0:	fb05 3202 	mla	r2, r5, r2, r3
 802bbd4:	2001      	movs	r0, #1
 802bbd6:	4688      	mov	r8, r1
 802bbd8:	e78a      	b.n	802baf0 <_vfiprintf_r+0xc0>
 802bbda:	2300      	movs	r3, #0
 802bbdc:	f108 0801 	add.w	r8, r8, #1
 802bbe0:	9305      	str	r3, [sp, #20]
 802bbe2:	4619      	mov	r1, r3
 802bbe4:	250a      	movs	r5, #10
 802bbe6:	4640      	mov	r0, r8
 802bbe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bbec:	3a30      	subs	r2, #48	; 0x30
 802bbee:	2a09      	cmp	r2, #9
 802bbf0:	d903      	bls.n	802bbfa <_vfiprintf_r+0x1ca>
 802bbf2:	2b00      	cmp	r3, #0
 802bbf4:	d0c3      	beq.n	802bb7e <_vfiprintf_r+0x14e>
 802bbf6:	9105      	str	r1, [sp, #20]
 802bbf8:	e7c1      	b.n	802bb7e <_vfiprintf_r+0x14e>
 802bbfa:	fb05 2101 	mla	r1, r5, r1, r2
 802bbfe:	2301      	movs	r3, #1
 802bc00:	4680      	mov	r8, r0
 802bc02:	e7f0      	b.n	802bbe6 <_vfiprintf_r+0x1b6>
 802bc04:	ab03      	add	r3, sp, #12
 802bc06:	9300      	str	r3, [sp, #0]
 802bc08:	4622      	mov	r2, r4
 802bc0a:	4b13      	ldr	r3, [pc, #76]	; (802bc58 <_vfiprintf_r+0x228>)
 802bc0c:	a904      	add	r1, sp, #16
 802bc0e:	4630      	mov	r0, r6
 802bc10:	f3af 8000 	nop.w
 802bc14:	f1b0 3fff 	cmp.w	r0, #4294967295
 802bc18:	4681      	mov	r9, r0
 802bc1a:	d1d5      	bne.n	802bbc8 <_vfiprintf_r+0x198>
 802bc1c:	89a3      	ldrh	r3, [r4, #12]
 802bc1e:	065b      	lsls	r3, r3, #25
 802bc20:	f53f af7e 	bmi.w	802bb20 <_vfiprintf_r+0xf0>
 802bc24:	9809      	ldr	r0, [sp, #36]	; 0x24
 802bc26:	e77d      	b.n	802bb24 <_vfiprintf_r+0xf4>
 802bc28:	ab03      	add	r3, sp, #12
 802bc2a:	9300      	str	r3, [sp, #0]
 802bc2c:	4622      	mov	r2, r4
 802bc2e:	4b0a      	ldr	r3, [pc, #40]	; (802bc58 <_vfiprintf_r+0x228>)
 802bc30:	a904      	add	r1, sp, #16
 802bc32:	4630      	mov	r0, r6
 802bc34:	f000 f888 	bl	802bd48 <_printf_i>
 802bc38:	e7ec      	b.n	802bc14 <_vfiprintf_r+0x1e4>
 802bc3a:	bf00      	nop
 802bc3c:	0802defc 	.word	0x0802defc
 802bc40:	0802dea8 	.word	0x0802dea8
 802bc44:	0802df1c 	.word	0x0802df1c
 802bc48:	0802dedc 	.word	0x0802dedc
 802bc4c:	0802deae 	.word	0x0802deae
 802bc50:	0802deb2 	.word	0x0802deb2
 802bc54:	00000000 	.word	0x00000000
 802bc58:	0802ba0d 	.word	0x0802ba0d

0802bc5c <_printf_common>:
 802bc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bc60:	4691      	mov	r9, r2
 802bc62:	461f      	mov	r7, r3
 802bc64:	688a      	ldr	r2, [r1, #8]
 802bc66:	690b      	ldr	r3, [r1, #16]
 802bc68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802bc6c:	4293      	cmp	r3, r2
 802bc6e:	bfb8      	it	lt
 802bc70:	4613      	movlt	r3, r2
 802bc72:	f8c9 3000 	str.w	r3, [r9]
 802bc76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802bc7a:	4606      	mov	r6, r0
 802bc7c:	460c      	mov	r4, r1
 802bc7e:	b112      	cbz	r2, 802bc86 <_printf_common+0x2a>
 802bc80:	3301      	adds	r3, #1
 802bc82:	f8c9 3000 	str.w	r3, [r9]
 802bc86:	6823      	ldr	r3, [r4, #0]
 802bc88:	0699      	lsls	r1, r3, #26
 802bc8a:	bf42      	ittt	mi
 802bc8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 802bc90:	3302      	addmi	r3, #2
 802bc92:	f8c9 3000 	strmi.w	r3, [r9]
 802bc96:	6825      	ldr	r5, [r4, #0]
 802bc98:	f015 0506 	ands.w	r5, r5, #6
 802bc9c:	d107      	bne.n	802bcae <_printf_common+0x52>
 802bc9e:	f104 0a19 	add.w	sl, r4, #25
 802bca2:	68e3      	ldr	r3, [r4, #12]
 802bca4:	f8d9 2000 	ldr.w	r2, [r9]
 802bca8:	1a9b      	subs	r3, r3, r2
 802bcaa:	42ab      	cmp	r3, r5
 802bcac:	dc28      	bgt.n	802bd00 <_printf_common+0xa4>
 802bcae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802bcb2:	6822      	ldr	r2, [r4, #0]
 802bcb4:	3300      	adds	r3, #0
 802bcb6:	bf18      	it	ne
 802bcb8:	2301      	movne	r3, #1
 802bcba:	0692      	lsls	r2, r2, #26
 802bcbc:	d42d      	bmi.n	802bd1a <_printf_common+0xbe>
 802bcbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802bcc2:	4639      	mov	r1, r7
 802bcc4:	4630      	mov	r0, r6
 802bcc6:	47c0      	blx	r8
 802bcc8:	3001      	adds	r0, #1
 802bcca:	d020      	beq.n	802bd0e <_printf_common+0xb2>
 802bccc:	6823      	ldr	r3, [r4, #0]
 802bcce:	68e5      	ldr	r5, [r4, #12]
 802bcd0:	f8d9 2000 	ldr.w	r2, [r9]
 802bcd4:	f003 0306 	and.w	r3, r3, #6
 802bcd8:	2b04      	cmp	r3, #4
 802bcda:	bf08      	it	eq
 802bcdc:	1aad      	subeq	r5, r5, r2
 802bcde:	68a3      	ldr	r3, [r4, #8]
 802bce0:	6922      	ldr	r2, [r4, #16]
 802bce2:	bf0c      	ite	eq
 802bce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802bce8:	2500      	movne	r5, #0
 802bcea:	4293      	cmp	r3, r2
 802bcec:	bfc4      	itt	gt
 802bcee:	1a9b      	subgt	r3, r3, r2
 802bcf0:	18ed      	addgt	r5, r5, r3
 802bcf2:	f04f 0900 	mov.w	r9, #0
 802bcf6:	341a      	adds	r4, #26
 802bcf8:	454d      	cmp	r5, r9
 802bcfa:	d11a      	bne.n	802bd32 <_printf_common+0xd6>
 802bcfc:	2000      	movs	r0, #0
 802bcfe:	e008      	b.n	802bd12 <_printf_common+0xb6>
 802bd00:	2301      	movs	r3, #1
 802bd02:	4652      	mov	r2, sl
 802bd04:	4639      	mov	r1, r7
 802bd06:	4630      	mov	r0, r6
 802bd08:	47c0      	blx	r8
 802bd0a:	3001      	adds	r0, #1
 802bd0c:	d103      	bne.n	802bd16 <_printf_common+0xba>
 802bd0e:	f04f 30ff 	mov.w	r0, #4294967295
 802bd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bd16:	3501      	adds	r5, #1
 802bd18:	e7c3      	b.n	802bca2 <_printf_common+0x46>
 802bd1a:	18e1      	adds	r1, r4, r3
 802bd1c:	1c5a      	adds	r2, r3, #1
 802bd1e:	2030      	movs	r0, #48	; 0x30
 802bd20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802bd24:	4422      	add	r2, r4
 802bd26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802bd2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802bd2e:	3302      	adds	r3, #2
 802bd30:	e7c5      	b.n	802bcbe <_printf_common+0x62>
 802bd32:	2301      	movs	r3, #1
 802bd34:	4622      	mov	r2, r4
 802bd36:	4639      	mov	r1, r7
 802bd38:	4630      	mov	r0, r6
 802bd3a:	47c0      	blx	r8
 802bd3c:	3001      	adds	r0, #1
 802bd3e:	d0e6      	beq.n	802bd0e <_printf_common+0xb2>
 802bd40:	f109 0901 	add.w	r9, r9, #1
 802bd44:	e7d8      	b.n	802bcf8 <_printf_common+0x9c>
	...

0802bd48 <_printf_i>:
 802bd48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802bd4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802bd50:	460c      	mov	r4, r1
 802bd52:	7e09      	ldrb	r1, [r1, #24]
 802bd54:	b085      	sub	sp, #20
 802bd56:	296e      	cmp	r1, #110	; 0x6e
 802bd58:	4617      	mov	r7, r2
 802bd5a:	4606      	mov	r6, r0
 802bd5c:	4698      	mov	r8, r3
 802bd5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802bd60:	f000 80b3 	beq.w	802beca <_printf_i+0x182>
 802bd64:	d822      	bhi.n	802bdac <_printf_i+0x64>
 802bd66:	2963      	cmp	r1, #99	; 0x63
 802bd68:	d036      	beq.n	802bdd8 <_printf_i+0x90>
 802bd6a:	d80a      	bhi.n	802bd82 <_printf_i+0x3a>
 802bd6c:	2900      	cmp	r1, #0
 802bd6e:	f000 80b9 	beq.w	802bee4 <_printf_i+0x19c>
 802bd72:	2958      	cmp	r1, #88	; 0x58
 802bd74:	f000 8083 	beq.w	802be7e <_printf_i+0x136>
 802bd78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802bd7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802bd80:	e032      	b.n	802bde8 <_printf_i+0xa0>
 802bd82:	2964      	cmp	r1, #100	; 0x64
 802bd84:	d001      	beq.n	802bd8a <_printf_i+0x42>
 802bd86:	2969      	cmp	r1, #105	; 0x69
 802bd88:	d1f6      	bne.n	802bd78 <_printf_i+0x30>
 802bd8a:	6820      	ldr	r0, [r4, #0]
 802bd8c:	6813      	ldr	r3, [r2, #0]
 802bd8e:	0605      	lsls	r5, r0, #24
 802bd90:	f103 0104 	add.w	r1, r3, #4
 802bd94:	d52a      	bpl.n	802bdec <_printf_i+0xa4>
 802bd96:	681b      	ldr	r3, [r3, #0]
 802bd98:	6011      	str	r1, [r2, #0]
 802bd9a:	2b00      	cmp	r3, #0
 802bd9c:	da03      	bge.n	802bda6 <_printf_i+0x5e>
 802bd9e:	222d      	movs	r2, #45	; 0x2d
 802bda0:	425b      	negs	r3, r3
 802bda2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802bda6:	486f      	ldr	r0, [pc, #444]	; (802bf64 <_printf_i+0x21c>)
 802bda8:	220a      	movs	r2, #10
 802bdaa:	e039      	b.n	802be20 <_printf_i+0xd8>
 802bdac:	2973      	cmp	r1, #115	; 0x73
 802bdae:	f000 809d 	beq.w	802beec <_printf_i+0x1a4>
 802bdb2:	d808      	bhi.n	802bdc6 <_printf_i+0x7e>
 802bdb4:	296f      	cmp	r1, #111	; 0x6f
 802bdb6:	d020      	beq.n	802bdfa <_printf_i+0xb2>
 802bdb8:	2970      	cmp	r1, #112	; 0x70
 802bdba:	d1dd      	bne.n	802bd78 <_printf_i+0x30>
 802bdbc:	6823      	ldr	r3, [r4, #0]
 802bdbe:	f043 0320 	orr.w	r3, r3, #32
 802bdc2:	6023      	str	r3, [r4, #0]
 802bdc4:	e003      	b.n	802bdce <_printf_i+0x86>
 802bdc6:	2975      	cmp	r1, #117	; 0x75
 802bdc8:	d017      	beq.n	802bdfa <_printf_i+0xb2>
 802bdca:	2978      	cmp	r1, #120	; 0x78
 802bdcc:	d1d4      	bne.n	802bd78 <_printf_i+0x30>
 802bdce:	2378      	movs	r3, #120	; 0x78
 802bdd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802bdd4:	4864      	ldr	r0, [pc, #400]	; (802bf68 <_printf_i+0x220>)
 802bdd6:	e055      	b.n	802be84 <_printf_i+0x13c>
 802bdd8:	6813      	ldr	r3, [r2, #0]
 802bdda:	1d19      	adds	r1, r3, #4
 802bddc:	681b      	ldr	r3, [r3, #0]
 802bdde:	6011      	str	r1, [r2, #0]
 802bde0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802bde4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802bde8:	2301      	movs	r3, #1
 802bdea:	e08c      	b.n	802bf06 <_printf_i+0x1be>
 802bdec:	681b      	ldr	r3, [r3, #0]
 802bdee:	6011      	str	r1, [r2, #0]
 802bdf0:	f010 0f40 	tst.w	r0, #64	; 0x40
 802bdf4:	bf18      	it	ne
 802bdf6:	b21b      	sxthne	r3, r3
 802bdf8:	e7cf      	b.n	802bd9a <_printf_i+0x52>
 802bdfa:	6813      	ldr	r3, [r2, #0]
 802bdfc:	6825      	ldr	r5, [r4, #0]
 802bdfe:	1d18      	adds	r0, r3, #4
 802be00:	6010      	str	r0, [r2, #0]
 802be02:	0628      	lsls	r0, r5, #24
 802be04:	d501      	bpl.n	802be0a <_printf_i+0xc2>
 802be06:	681b      	ldr	r3, [r3, #0]
 802be08:	e002      	b.n	802be10 <_printf_i+0xc8>
 802be0a:	0668      	lsls	r0, r5, #25
 802be0c:	d5fb      	bpl.n	802be06 <_printf_i+0xbe>
 802be0e:	881b      	ldrh	r3, [r3, #0]
 802be10:	4854      	ldr	r0, [pc, #336]	; (802bf64 <_printf_i+0x21c>)
 802be12:	296f      	cmp	r1, #111	; 0x6f
 802be14:	bf14      	ite	ne
 802be16:	220a      	movne	r2, #10
 802be18:	2208      	moveq	r2, #8
 802be1a:	2100      	movs	r1, #0
 802be1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802be20:	6865      	ldr	r5, [r4, #4]
 802be22:	60a5      	str	r5, [r4, #8]
 802be24:	2d00      	cmp	r5, #0
 802be26:	f2c0 8095 	blt.w	802bf54 <_printf_i+0x20c>
 802be2a:	6821      	ldr	r1, [r4, #0]
 802be2c:	f021 0104 	bic.w	r1, r1, #4
 802be30:	6021      	str	r1, [r4, #0]
 802be32:	2b00      	cmp	r3, #0
 802be34:	d13d      	bne.n	802beb2 <_printf_i+0x16a>
 802be36:	2d00      	cmp	r5, #0
 802be38:	f040 808e 	bne.w	802bf58 <_printf_i+0x210>
 802be3c:	4665      	mov	r5, ip
 802be3e:	2a08      	cmp	r2, #8
 802be40:	d10b      	bne.n	802be5a <_printf_i+0x112>
 802be42:	6823      	ldr	r3, [r4, #0]
 802be44:	07db      	lsls	r3, r3, #31
 802be46:	d508      	bpl.n	802be5a <_printf_i+0x112>
 802be48:	6923      	ldr	r3, [r4, #16]
 802be4a:	6862      	ldr	r2, [r4, #4]
 802be4c:	429a      	cmp	r2, r3
 802be4e:	bfde      	ittt	le
 802be50:	2330      	movle	r3, #48	; 0x30
 802be52:	f805 3c01 	strble.w	r3, [r5, #-1]
 802be56:	f105 35ff 	addle.w	r5, r5, #4294967295
 802be5a:	ebac 0305 	sub.w	r3, ip, r5
 802be5e:	6123      	str	r3, [r4, #16]
 802be60:	f8cd 8000 	str.w	r8, [sp]
 802be64:	463b      	mov	r3, r7
 802be66:	aa03      	add	r2, sp, #12
 802be68:	4621      	mov	r1, r4
 802be6a:	4630      	mov	r0, r6
 802be6c:	f7ff fef6 	bl	802bc5c <_printf_common>
 802be70:	3001      	adds	r0, #1
 802be72:	d14d      	bne.n	802bf10 <_printf_i+0x1c8>
 802be74:	f04f 30ff 	mov.w	r0, #4294967295
 802be78:	b005      	add	sp, #20
 802be7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802be7e:	4839      	ldr	r0, [pc, #228]	; (802bf64 <_printf_i+0x21c>)
 802be80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802be84:	6813      	ldr	r3, [r2, #0]
 802be86:	6821      	ldr	r1, [r4, #0]
 802be88:	1d1d      	adds	r5, r3, #4
 802be8a:	681b      	ldr	r3, [r3, #0]
 802be8c:	6015      	str	r5, [r2, #0]
 802be8e:	060a      	lsls	r2, r1, #24
 802be90:	d50b      	bpl.n	802beaa <_printf_i+0x162>
 802be92:	07ca      	lsls	r2, r1, #31
 802be94:	bf44      	itt	mi
 802be96:	f041 0120 	orrmi.w	r1, r1, #32
 802be9a:	6021      	strmi	r1, [r4, #0]
 802be9c:	b91b      	cbnz	r3, 802bea6 <_printf_i+0x15e>
 802be9e:	6822      	ldr	r2, [r4, #0]
 802bea0:	f022 0220 	bic.w	r2, r2, #32
 802bea4:	6022      	str	r2, [r4, #0]
 802bea6:	2210      	movs	r2, #16
 802bea8:	e7b7      	b.n	802be1a <_printf_i+0xd2>
 802beaa:	064d      	lsls	r5, r1, #25
 802beac:	bf48      	it	mi
 802beae:	b29b      	uxthmi	r3, r3
 802beb0:	e7ef      	b.n	802be92 <_printf_i+0x14a>
 802beb2:	4665      	mov	r5, ip
 802beb4:	fbb3 f1f2 	udiv	r1, r3, r2
 802beb8:	fb02 3311 	mls	r3, r2, r1, r3
 802bebc:	5cc3      	ldrb	r3, [r0, r3]
 802bebe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802bec2:	460b      	mov	r3, r1
 802bec4:	2900      	cmp	r1, #0
 802bec6:	d1f5      	bne.n	802beb4 <_printf_i+0x16c>
 802bec8:	e7b9      	b.n	802be3e <_printf_i+0xf6>
 802beca:	6813      	ldr	r3, [r2, #0]
 802becc:	6825      	ldr	r5, [r4, #0]
 802bece:	6961      	ldr	r1, [r4, #20]
 802bed0:	1d18      	adds	r0, r3, #4
 802bed2:	6010      	str	r0, [r2, #0]
 802bed4:	0628      	lsls	r0, r5, #24
 802bed6:	681b      	ldr	r3, [r3, #0]
 802bed8:	d501      	bpl.n	802bede <_printf_i+0x196>
 802beda:	6019      	str	r1, [r3, #0]
 802bedc:	e002      	b.n	802bee4 <_printf_i+0x19c>
 802bede:	066a      	lsls	r2, r5, #25
 802bee0:	d5fb      	bpl.n	802beda <_printf_i+0x192>
 802bee2:	8019      	strh	r1, [r3, #0]
 802bee4:	2300      	movs	r3, #0
 802bee6:	6123      	str	r3, [r4, #16]
 802bee8:	4665      	mov	r5, ip
 802beea:	e7b9      	b.n	802be60 <_printf_i+0x118>
 802beec:	6813      	ldr	r3, [r2, #0]
 802beee:	1d19      	adds	r1, r3, #4
 802bef0:	6011      	str	r1, [r2, #0]
 802bef2:	681d      	ldr	r5, [r3, #0]
 802bef4:	6862      	ldr	r2, [r4, #4]
 802bef6:	2100      	movs	r1, #0
 802bef8:	4628      	mov	r0, r5
 802befa:	f7d4 f9f9 	bl	80002f0 <memchr>
 802befe:	b108      	cbz	r0, 802bf04 <_printf_i+0x1bc>
 802bf00:	1b40      	subs	r0, r0, r5
 802bf02:	6060      	str	r0, [r4, #4]
 802bf04:	6863      	ldr	r3, [r4, #4]
 802bf06:	6123      	str	r3, [r4, #16]
 802bf08:	2300      	movs	r3, #0
 802bf0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bf0e:	e7a7      	b.n	802be60 <_printf_i+0x118>
 802bf10:	6923      	ldr	r3, [r4, #16]
 802bf12:	462a      	mov	r2, r5
 802bf14:	4639      	mov	r1, r7
 802bf16:	4630      	mov	r0, r6
 802bf18:	47c0      	blx	r8
 802bf1a:	3001      	adds	r0, #1
 802bf1c:	d0aa      	beq.n	802be74 <_printf_i+0x12c>
 802bf1e:	6823      	ldr	r3, [r4, #0]
 802bf20:	079b      	lsls	r3, r3, #30
 802bf22:	d413      	bmi.n	802bf4c <_printf_i+0x204>
 802bf24:	68e0      	ldr	r0, [r4, #12]
 802bf26:	9b03      	ldr	r3, [sp, #12]
 802bf28:	4298      	cmp	r0, r3
 802bf2a:	bfb8      	it	lt
 802bf2c:	4618      	movlt	r0, r3
 802bf2e:	e7a3      	b.n	802be78 <_printf_i+0x130>
 802bf30:	2301      	movs	r3, #1
 802bf32:	464a      	mov	r2, r9
 802bf34:	4639      	mov	r1, r7
 802bf36:	4630      	mov	r0, r6
 802bf38:	47c0      	blx	r8
 802bf3a:	3001      	adds	r0, #1
 802bf3c:	d09a      	beq.n	802be74 <_printf_i+0x12c>
 802bf3e:	3501      	adds	r5, #1
 802bf40:	68e3      	ldr	r3, [r4, #12]
 802bf42:	9a03      	ldr	r2, [sp, #12]
 802bf44:	1a9b      	subs	r3, r3, r2
 802bf46:	42ab      	cmp	r3, r5
 802bf48:	dcf2      	bgt.n	802bf30 <_printf_i+0x1e8>
 802bf4a:	e7eb      	b.n	802bf24 <_printf_i+0x1dc>
 802bf4c:	2500      	movs	r5, #0
 802bf4e:	f104 0919 	add.w	r9, r4, #25
 802bf52:	e7f5      	b.n	802bf40 <_printf_i+0x1f8>
 802bf54:	2b00      	cmp	r3, #0
 802bf56:	d1ac      	bne.n	802beb2 <_printf_i+0x16a>
 802bf58:	7803      	ldrb	r3, [r0, #0]
 802bf5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802bf5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802bf62:	e76c      	b.n	802be3e <_printf_i+0xf6>
 802bf64:	0802deb9 	.word	0x0802deb9
 802bf68:	0802deca 	.word	0x0802deca

0802bf6c <iprintf>:
 802bf6c:	b40f      	push	{r0, r1, r2, r3}
 802bf6e:	4b0a      	ldr	r3, [pc, #40]	; (802bf98 <iprintf+0x2c>)
 802bf70:	b513      	push	{r0, r1, r4, lr}
 802bf72:	681c      	ldr	r4, [r3, #0]
 802bf74:	b124      	cbz	r4, 802bf80 <iprintf+0x14>
 802bf76:	69a3      	ldr	r3, [r4, #24]
 802bf78:	b913      	cbnz	r3, 802bf80 <iprintf+0x14>
 802bf7a:	4620      	mov	r0, r4
 802bf7c:	f000 fae0 	bl	802c540 <__sinit>
 802bf80:	ab05      	add	r3, sp, #20
 802bf82:	9a04      	ldr	r2, [sp, #16]
 802bf84:	68a1      	ldr	r1, [r4, #8]
 802bf86:	9301      	str	r3, [sp, #4]
 802bf88:	4620      	mov	r0, r4
 802bf8a:	f7ff fd51 	bl	802ba30 <_vfiprintf_r>
 802bf8e:	b002      	add	sp, #8
 802bf90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bf94:	b004      	add	sp, #16
 802bf96:	4770      	bx	lr
 802bf98:	240006b0 	.word	0x240006b0

0802bf9c <_puts_r>:
 802bf9c:	b570      	push	{r4, r5, r6, lr}
 802bf9e:	460e      	mov	r6, r1
 802bfa0:	4605      	mov	r5, r0
 802bfa2:	b118      	cbz	r0, 802bfac <_puts_r+0x10>
 802bfa4:	6983      	ldr	r3, [r0, #24]
 802bfa6:	b90b      	cbnz	r3, 802bfac <_puts_r+0x10>
 802bfa8:	f000 faca 	bl	802c540 <__sinit>
 802bfac:	69ab      	ldr	r3, [r5, #24]
 802bfae:	68ac      	ldr	r4, [r5, #8]
 802bfb0:	b913      	cbnz	r3, 802bfb8 <_puts_r+0x1c>
 802bfb2:	4628      	mov	r0, r5
 802bfb4:	f000 fac4 	bl	802c540 <__sinit>
 802bfb8:	4b23      	ldr	r3, [pc, #140]	; (802c048 <_puts_r+0xac>)
 802bfba:	429c      	cmp	r4, r3
 802bfbc:	d117      	bne.n	802bfee <_puts_r+0x52>
 802bfbe:	686c      	ldr	r4, [r5, #4]
 802bfc0:	89a3      	ldrh	r3, [r4, #12]
 802bfc2:	071b      	lsls	r3, r3, #28
 802bfc4:	d51d      	bpl.n	802c002 <_puts_r+0x66>
 802bfc6:	6923      	ldr	r3, [r4, #16]
 802bfc8:	b1db      	cbz	r3, 802c002 <_puts_r+0x66>
 802bfca:	3e01      	subs	r6, #1
 802bfcc:	68a3      	ldr	r3, [r4, #8]
 802bfce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802bfd2:	3b01      	subs	r3, #1
 802bfd4:	60a3      	str	r3, [r4, #8]
 802bfd6:	b9e9      	cbnz	r1, 802c014 <_puts_r+0x78>
 802bfd8:	2b00      	cmp	r3, #0
 802bfda:	da2e      	bge.n	802c03a <_puts_r+0x9e>
 802bfdc:	4622      	mov	r2, r4
 802bfde:	210a      	movs	r1, #10
 802bfe0:	4628      	mov	r0, r5
 802bfe2:	f000 f8f5 	bl	802c1d0 <__swbuf_r>
 802bfe6:	3001      	adds	r0, #1
 802bfe8:	d011      	beq.n	802c00e <_puts_r+0x72>
 802bfea:	200a      	movs	r0, #10
 802bfec:	e011      	b.n	802c012 <_puts_r+0x76>
 802bfee:	4b17      	ldr	r3, [pc, #92]	; (802c04c <_puts_r+0xb0>)
 802bff0:	429c      	cmp	r4, r3
 802bff2:	d101      	bne.n	802bff8 <_puts_r+0x5c>
 802bff4:	68ac      	ldr	r4, [r5, #8]
 802bff6:	e7e3      	b.n	802bfc0 <_puts_r+0x24>
 802bff8:	4b15      	ldr	r3, [pc, #84]	; (802c050 <_puts_r+0xb4>)
 802bffa:	429c      	cmp	r4, r3
 802bffc:	bf08      	it	eq
 802bffe:	68ec      	ldreq	r4, [r5, #12]
 802c000:	e7de      	b.n	802bfc0 <_puts_r+0x24>
 802c002:	4621      	mov	r1, r4
 802c004:	4628      	mov	r0, r5
 802c006:	f000 f935 	bl	802c274 <__swsetup_r>
 802c00a:	2800      	cmp	r0, #0
 802c00c:	d0dd      	beq.n	802bfca <_puts_r+0x2e>
 802c00e:	f04f 30ff 	mov.w	r0, #4294967295
 802c012:	bd70      	pop	{r4, r5, r6, pc}
 802c014:	2b00      	cmp	r3, #0
 802c016:	da04      	bge.n	802c022 <_puts_r+0x86>
 802c018:	69a2      	ldr	r2, [r4, #24]
 802c01a:	429a      	cmp	r2, r3
 802c01c:	dc06      	bgt.n	802c02c <_puts_r+0x90>
 802c01e:	290a      	cmp	r1, #10
 802c020:	d004      	beq.n	802c02c <_puts_r+0x90>
 802c022:	6823      	ldr	r3, [r4, #0]
 802c024:	1c5a      	adds	r2, r3, #1
 802c026:	6022      	str	r2, [r4, #0]
 802c028:	7019      	strb	r1, [r3, #0]
 802c02a:	e7cf      	b.n	802bfcc <_puts_r+0x30>
 802c02c:	4622      	mov	r2, r4
 802c02e:	4628      	mov	r0, r5
 802c030:	f000 f8ce 	bl	802c1d0 <__swbuf_r>
 802c034:	3001      	adds	r0, #1
 802c036:	d1c9      	bne.n	802bfcc <_puts_r+0x30>
 802c038:	e7e9      	b.n	802c00e <_puts_r+0x72>
 802c03a:	6823      	ldr	r3, [r4, #0]
 802c03c:	200a      	movs	r0, #10
 802c03e:	1c5a      	adds	r2, r3, #1
 802c040:	6022      	str	r2, [r4, #0]
 802c042:	7018      	strb	r0, [r3, #0]
 802c044:	e7e5      	b.n	802c012 <_puts_r+0x76>
 802c046:	bf00      	nop
 802c048:	0802defc 	.word	0x0802defc
 802c04c:	0802df1c 	.word	0x0802df1c
 802c050:	0802dedc 	.word	0x0802dedc

0802c054 <puts>:
 802c054:	4b02      	ldr	r3, [pc, #8]	; (802c060 <puts+0xc>)
 802c056:	4601      	mov	r1, r0
 802c058:	6818      	ldr	r0, [r3, #0]
 802c05a:	f7ff bf9f 	b.w	802bf9c <_puts_r>
 802c05e:	bf00      	nop
 802c060:	240006b0 	.word	0x240006b0

0802c064 <setvbuf>:
 802c064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c068:	461d      	mov	r5, r3
 802c06a:	4b51      	ldr	r3, [pc, #324]	; (802c1b0 <setvbuf+0x14c>)
 802c06c:	681e      	ldr	r6, [r3, #0]
 802c06e:	4604      	mov	r4, r0
 802c070:	460f      	mov	r7, r1
 802c072:	4690      	mov	r8, r2
 802c074:	b126      	cbz	r6, 802c080 <setvbuf+0x1c>
 802c076:	69b3      	ldr	r3, [r6, #24]
 802c078:	b913      	cbnz	r3, 802c080 <setvbuf+0x1c>
 802c07a:	4630      	mov	r0, r6
 802c07c:	f000 fa60 	bl	802c540 <__sinit>
 802c080:	4b4c      	ldr	r3, [pc, #304]	; (802c1b4 <setvbuf+0x150>)
 802c082:	429c      	cmp	r4, r3
 802c084:	d152      	bne.n	802c12c <setvbuf+0xc8>
 802c086:	6874      	ldr	r4, [r6, #4]
 802c088:	f1b8 0f02 	cmp.w	r8, #2
 802c08c:	d006      	beq.n	802c09c <setvbuf+0x38>
 802c08e:	f1b8 0f01 	cmp.w	r8, #1
 802c092:	f200 8089 	bhi.w	802c1a8 <setvbuf+0x144>
 802c096:	2d00      	cmp	r5, #0
 802c098:	f2c0 8086 	blt.w	802c1a8 <setvbuf+0x144>
 802c09c:	4621      	mov	r1, r4
 802c09e:	4630      	mov	r0, r6
 802c0a0:	f000 f9e4 	bl	802c46c <_fflush_r>
 802c0a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c0a6:	b141      	cbz	r1, 802c0ba <setvbuf+0x56>
 802c0a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c0ac:	4299      	cmp	r1, r3
 802c0ae:	d002      	beq.n	802c0b6 <setvbuf+0x52>
 802c0b0:	4630      	mov	r0, r6
 802c0b2:	f000 fb3b 	bl	802c72c <_free_r>
 802c0b6:	2300      	movs	r3, #0
 802c0b8:	6363      	str	r3, [r4, #52]	; 0x34
 802c0ba:	2300      	movs	r3, #0
 802c0bc:	61a3      	str	r3, [r4, #24]
 802c0be:	6063      	str	r3, [r4, #4]
 802c0c0:	89a3      	ldrh	r3, [r4, #12]
 802c0c2:	061b      	lsls	r3, r3, #24
 802c0c4:	d503      	bpl.n	802c0ce <setvbuf+0x6a>
 802c0c6:	6921      	ldr	r1, [r4, #16]
 802c0c8:	4630      	mov	r0, r6
 802c0ca:	f000 fb2f 	bl	802c72c <_free_r>
 802c0ce:	89a3      	ldrh	r3, [r4, #12]
 802c0d0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 802c0d4:	f023 0303 	bic.w	r3, r3, #3
 802c0d8:	f1b8 0f02 	cmp.w	r8, #2
 802c0dc:	81a3      	strh	r3, [r4, #12]
 802c0de:	d05d      	beq.n	802c19c <setvbuf+0x138>
 802c0e0:	ab01      	add	r3, sp, #4
 802c0e2:	466a      	mov	r2, sp
 802c0e4:	4621      	mov	r1, r4
 802c0e6:	4630      	mov	r0, r6
 802c0e8:	f000 fab4 	bl	802c654 <__swhatbuf_r>
 802c0ec:	89a3      	ldrh	r3, [r4, #12]
 802c0ee:	4318      	orrs	r0, r3
 802c0f0:	81a0      	strh	r0, [r4, #12]
 802c0f2:	bb2d      	cbnz	r5, 802c140 <setvbuf+0xdc>
 802c0f4:	9d00      	ldr	r5, [sp, #0]
 802c0f6:	4628      	mov	r0, r5
 802c0f8:	f000 fb10 	bl	802c71c <malloc>
 802c0fc:	4607      	mov	r7, r0
 802c0fe:	2800      	cmp	r0, #0
 802c100:	d14e      	bne.n	802c1a0 <setvbuf+0x13c>
 802c102:	f8dd 9000 	ldr.w	r9, [sp]
 802c106:	45a9      	cmp	r9, r5
 802c108:	d13c      	bne.n	802c184 <setvbuf+0x120>
 802c10a:	f04f 30ff 	mov.w	r0, #4294967295
 802c10e:	89a3      	ldrh	r3, [r4, #12]
 802c110:	f043 0302 	orr.w	r3, r3, #2
 802c114:	81a3      	strh	r3, [r4, #12]
 802c116:	2300      	movs	r3, #0
 802c118:	60a3      	str	r3, [r4, #8]
 802c11a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c11e:	6023      	str	r3, [r4, #0]
 802c120:	6123      	str	r3, [r4, #16]
 802c122:	2301      	movs	r3, #1
 802c124:	6163      	str	r3, [r4, #20]
 802c126:	b003      	add	sp, #12
 802c128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c12c:	4b22      	ldr	r3, [pc, #136]	; (802c1b8 <setvbuf+0x154>)
 802c12e:	429c      	cmp	r4, r3
 802c130:	d101      	bne.n	802c136 <setvbuf+0xd2>
 802c132:	68b4      	ldr	r4, [r6, #8]
 802c134:	e7a8      	b.n	802c088 <setvbuf+0x24>
 802c136:	4b21      	ldr	r3, [pc, #132]	; (802c1bc <setvbuf+0x158>)
 802c138:	429c      	cmp	r4, r3
 802c13a:	bf08      	it	eq
 802c13c:	68f4      	ldreq	r4, [r6, #12]
 802c13e:	e7a3      	b.n	802c088 <setvbuf+0x24>
 802c140:	2f00      	cmp	r7, #0
 802c142:	d0d8      	beq.n	802c0f6 <setvbuf+0x92>
 802c144:	69b3      	ldr	r3, [r6, #24]
 802c146:	b913      	cbnz	r3, 802c14e <setvbuf+0xea>
 802c148:	4630      	mov	r0, r6
 802c14a:	f000 f9f9 	bl	802c540 <__sinit>
 802c14e:	f1b8 0f01 	cmp.w	r8, #1
 802c152:	bf08      	it	eq
 802c154:	89a3      	ldrheq	r3, [r4, #12]
 802c156:	6027      	str	r7, [r4, #0]
 802c158:	bf04      	itt	eq
 802c15a:	f043 0301 	orreq.w	r3, r3, #1
 802c15e:	81a3      	strheq	r3, [r4, #12]
 802c160:	89a3      	ldrh	r3, [r4, #12]
 802c162:	f013 0008 	ands.w	r0, r3, #8
 802c166:	e9c4 7504 	strd	r7, r5, [r4, #16]
 802c16a:	d01b      	beq.n	802c1a4 <setvbuf+0x140>
 802c16c:	f013 0001 	ands.w	r0, r3, #1
 802c170:	bf18      	it	ne
 802c172:	426d      	negne	r5, r5
 802c174:	f04f 0300 	mov.w	r3, #0
 802c178:	bf1d      	ittte	ne
 802c17a:	60a3      	strne	r3, [r4, #8]
 802c17c:	61a5      	strne	r5, [r4, #24]
 802c17e:	4618      	movne	r0, r3
 802c180:	60a5      	streq	r5, [r4, #8]
 802c182:	e7d0      	b.n	802c126 <setvbuf+0xc2>
 802c184:	4648      	mov	r0, r9
 802c186:	f000 fac9 	bl	802c71c <malloc>
 802c18a:	4607      	mov	r7, r0
 802c18c:	2800      	cmp	r0, #0
 802c18e:	d0bc      	beq.n	802c10a <setvbuf+0xa6>
 802c190:	89a3      	ldrh	r3, [r4, #12]
 802c192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c196:	81a3      	strh	r3, [r4, #12]
 802c198:	464d      	mov	r5, r9
 802c19a:	e7d3      	b.n	802c144 <setvbuf+0xe0>
 802c19c:	2000      	movs	r0, #0
 802c19e:	e7b6      	b.n	802c10e <setvbuf+0xaa>
 802c1a0:	46a9      	mov	r9, r5
 802c1a2:	e7f5      	b.n	802c190 <setvbuf+0x12c>
 802c1a4:	60a0      	str	r0, [r4, #8]
 802c1a6:	e7be      	b.n	802c126 <setvbuf+0xc2>
 802c1a8:	f04f 30ff 	mov.w	r0, #4294967295
 802c1ac:	e7bb      	b.n	802c126 <setvbuf+0xc2>
 802c1ae:	bf00      	nop
 802c1b0:	240006b0 	.word	0x240006b0
 802c1b4:	0802defc 	.word	0x0802defc
 802c1b8:	0802df1c 	.word	0x0802df1c
 802c1bc:	0802dedc 	.word	0x0802dedc

0802c1c0 <strcpy>:
 802c1c0:	4603      	mov	r3, r0
 802c1c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c1c6:	f803 2b01 	strb.w	r2, [r3], #1
 802c1ca:	2a00      	cmp	r2, #0
 802c1cc:	d1f9      	bne.n	802c1c2 <strcpy+0x2>
 802c1ce:	4770      	bx	lr

0802c1d0 <__swbuf_r>:
 802c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c1d2:	460e      	mov	r6, r1
 802c1d4:	4614      	mov	r4, r2
 802c1d6:	4605      	mov	r5, r0
 802c1d8:	b118      	cbz	r0, 802c1e2 <__swbuf_r+0x12>
 802c1da:	6983      	ldr	r3, [r0, #24]
 802c1dc:	b90b      	cbnz	r3, 802c1e2 <__swbuf_r+0x12>
 802c1de:	f000 f9af 	bl	802c540 <__sinit>
 802c1e2:	4b21      	ldr	r3, [pc, #132]	; (802c268 <__swbuf_r+0x98>)
 802c1e4:	429c      	cmp	r4, r3
 802c1e6:	d12a      	bne.n	802c23e <__swbuf_r+0x6e>
 802c1e8:	686c      	ldr	r4, [r5, #4]
 802c1ea:	69a3      	ldr	r3, [r4, #24]
 802c1ec:	60a3      	str	r3, [r4, #8]
 802c1ee:	89a3      	ldrh	r3, [r4, #12]
 802c1f0:	071a      	lsls	r2, r3, #28
 802c1f2:	d52e      	bpl.n	802c252 <__swbuf_r+0x82>
 802c1f4:	6923      	ldr	r3, [r4, #16]
 802c1f6:	b363      	cbz	r3, 802c252 <__swbuf_r+0x82>
 802c1f8:	6923      	ldr	r3, [r4, #16]
 802c1fa:	6820      	ldr	r0, [r4, #0]
 802c1fc:	1ac0      	subs	r0, r0, r3
 802c1fe:	6963      	ldr	r3, [r4, #20]
 802c200:	b2f6      	uxtb	r6, r6
 802c202:	4283      	cmp	r3, r0
 802c204:	4637      	mov	r7, r6
 802c206:	dc04      	bgt.n	802c212 <__swbuf_r+0x42>
 802c208:	4621      	mov	r1, r4
 802c20a:	4628      	mov	r0, r5
 802c20c:	f000 f92e 	bl	802c46c <_fflush_r>
 802c210:	bb28      	cbnz	r0, 802c25e <__swbuf_r+0x8e>
 802c212:	68a3      	ldr	r3, [r4, #8]
 802c214:	3b01      	subs	r3, #1
 802c216:	60a3      	str	r3, [r4, #8]
 802c218:	6823      	ldr	r3, [r4, #0]
 802c21a:	1c5a      	adds	r2, r3, #1
 802c21c:	6022      	str	r2, [r4, #0]
 802c21e:	701e      	strb	r6, [r3, #0]
 802c220:	6963      	ldr	r3, [r4, #20]
 802c222:	3001      	adds	r0, #1
 802c224:	4283      	cmp	r3, r0
 802c226:	d004      	beq.n	802c232 <__swbuf_r+0x62>
 802c228:	89a3      	ldrh	r3, [r4, #12]
 802c22a:	07db      	lsls	r3, r3, #31
 802c22c:	d519      	bpl.n	802c262 <__swbuf_r+0x92>
 802c22e:	2e0a      	cmp	r6, #10
 802c230:	d117      	bne.n	802c262 <__swbuf_r+0x92>
 802c232:	4621      	mov	r1, r4
 802c234:	4628      	mov	r0, r5
 802c236:	f000 f919 	bl	802c46c <_fflush_r>
 802c23a:	b190      	cbz	r0, 802c262 <__swbuf_r+0x92>
 802c23c:	e00f      	b.n	802c25e <__swbuf_r+0x8e>
 802c23e:	4b0b      	ldr	r3, [pc, #44]	; (802c26c <__swbuf_r+0x9c>)
 802c240:	429c      	cmp	r4, r3
 802c242:	d101      	bne.n	802c248 <__swbuf_r+0x78>
 802c244:	68ac      	ldr	r4, [r5, #8]
 802c246:	e7d0      	b.n	802c1ea <__swbuf_r+0x1a>
 802c248:	4b09      	ldr	r3, [pc, #36]	; (802c270 <__swbuf_r+0xa0>)
 802c24a:	429c      	cmp	r4, r3
 802c24c:	bf08      	it	eq
 802c24e:	68ec      	ldreq	r4, [r5, #12]
 802c250:	e7cb      	b.n	802c1ea <__swbuf_r+0x1a>
 802c252:	4621      	mov	r1, r4
 802c254:	4628      	mov	r0, r5
 802c256:	f000 f80d 	bl	802c274 <__swsetup_r>
 802c25a:	2800      	cmp	r0, #0
 802c25c:	d0cc      	beq.n	802c1f8 <__swbuf_r+0x28>
 802c25e:	f04f 37ff 	mov.w	r7, #4294967295
 802c262:	4638      	mov	r0, r7
 802c264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c266:	bf00      	nop
 802c268:	0802defc 	.word	0x0802defc
 802c26c:	0802df1c 	.word	0x0802df1c
 802c270:	0802dedc 	.word	0x0802dedc

0802c274 <__swsetup_r>:
 802c274:	4b32      	ldr	r3, [pc, #200]	; (802c340 <__swsetup_r+0xcc>)
 802c276:	b570      	push	{r4, r5, r6, lr}
 802c278:	681d      	ldr	r5, [r3, #0]
 802c27a:	4606      	mov	r6, r0
 802c27c:	460c      	mov	r4, r1
 802c27e:	b125      	cbz	r5, 802c28a <__swsetup_r+0x16>
 802c280:	69ab      	ldr	r3, [r5, #24]
 802c282:	b913      	cbnz	r3, 802c28a <__swsetup_r+0x16>
 802c284:	4628      	mov	r0, r5
 802c286:	f000 f95b 	bl	802c540 <__sinit>
 802c28a:	4b2e      	ldr	r3, [pc, #184]	; (802c344 <__swsetup_r+0xd0>)
 802c28c:	429c      	cmp	r4, r3
 802c28e:	d10f      	bne.n	802c2b0 <__swsetup_r+0x3c>
 802c290:	686c      	ldr	r4, [r5, #4]
 802c292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c296:	b29a      	uxth	r2, r3
 802c298:	0715      	lsls	r5, r2, #28
 802c29a:	d42c      	bmi.n	802c2f6 <__swsetup_r+0x82>
 802c29c:	06d0      	lsls	r0, r2, #27
 802c29e:	d411      	bmi.n	802c2c4 <__swsetup_r+0x50>
 802c2a0:	2209      	movs	r2, #9
 802c2a2:	6032      	str	r2, [r6, #0]
 802c2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c2a8:	81a3      	strh	r3, [r4, #12]
 802c2aa:	f04f 30ff 	mov.w	r0, #4294967295
 802c2ae:	e03e      	b.n	802c32e <__swsetup_r+0xba>
 802c2b0:	4b25      	ldr	r3, [pc, #148]	; (802c348 <__swsetup_r+0xd4>)
 802c2b2:	429c      	cmp	r4, r3
 802c2b4:	d101      	bne.n	802c2ba <__swsetup_r+0x46>
 802c2b6:	68ac      	ldr	r4, [r5, #8]
 802c2b8:	e7eb      	b.n	802c292 <__swsetup_r+0x1e>
 802c2ba:	4b24      	ldr	r3, [pc, #144]	; (802c34c <__swsetup_r+0xd8>)
 802c2bc:	429c      	cmp	r4, r3
 802c2be:	bf08      	it	eq
 802c2c0:	68ec      	ldreq	r4, [r5, #12]
 802c2c2:	e7e6      	b.n	802c292 <__swsetup_r+0x1e>
 802c2c4:	0751      	lsls	r1, r2, #29
 802c2c6:	d512      	bpl.n	802c2ee <__swsetup_r+0x7a>
 802c2c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c2ca:	b141      	cbz	r1, 802c2de <__swsetup_r+0x6a>
 802c2cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c2d0:	4299      	cmp	r1, r3
 802c2d2:	d002      	beq.n	802c2da <__swsetup_r+0x66>
 802c2d4:	4630      	mov	r0, r6
 802c2d6:	f000 fa29 	bl	802c72c <_free_r>
 802c2da:	2300      	movs	r3, #0
 802c2dc:	6363      	str	r3, [r4, #52]	; 0x34
 802c2de:	89a3      	ldrh	r3, [r4, #12]
 802c2e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802c2e4:	81a3      	strh	r3, [r4, #12]
 802c2e6:	2300      	movs	r3, #0
 802c2e8:	6063      	str	r3, [r4, #4]
 802c2ea:	6923      	ldr	r3, [r4, #16]
 802c2ec:	6023      	str	r3, [r4, #0]
 802c2ee:	89a3      	ldrh	r3, [r4, #12]
 802c2f0:	f043 0308 	orr.w	r3, r3, #8
 802c2f4:	81a3      	strh	r3, [r4, #12]
 802c2f6:	6923      	ldr	r3, [r4, #16]
 802c2f8:	b94b      	cbnz	r3, 802c30e <__swsetup_r+0x9a>
 802c2fa:	89a3      	ldrh	r3, [r4, #12]
 802c2fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802c300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c304:	d003      	beq.n	802c30e <__swsetup_r+0x9a>
 802c306:	4621      	mov	r1, r4
 802c308:	4630      	mov	r0, r6
 802c30a:	f000 f9c7 	bl	802c69c <__smakebuf_r>
 802c30e:	89a2      	ldrh	r2, [r4, #12]
 802c310:	f012 0301 	ands.w	r3, r2, #1
 802c314:	d00c      	beq.n	802c330 <__swsetup_r+0xbc>
 802c316:	2300      	movs	r3, #0
 802c318:	60a3      	str	r3, [r4, #8]
 802c31a:	6963      	ldr	r3, [r4, #20]
 802c31c:	425b      	negs	r3, r3
 802c31e:	61a3      	str	r3, [r4, #24]
 802c320:	6923      	ldr	r3, [r4, #16]
 802c322:	b953      	cbnz	r3, 802c33a <__swsetup_r+0xc6>
 802c324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c328:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802c32c:	d1ba      	bne.n	802c2a4 <__swsetup_r+0x30>
 802c32e:	bd70      	pop	{r4, r5, r6, pc}
 802c330:	0792      	lsls	r2, r2, #30
 802c332:	bf58      	it	pl
 802c334:	6963      	ldrpl	r3, [r4, #20]
 802c336:	60a3      	str	r3, [r4, #8]
 802c338:	e7f2      	b.n	802c320 <__swsetup_r+0xac>
 802c33a:	2000      	movs	r0, #0
 802c33c:	e7f7      	b.n	802c32e <__swsetup_r+0xba>
 802c33e:	bf00      	nop
 802c340:	240006b0 	.word	0x240006b0
 802c344:	0802defc 	.word	0x0802defc
 802c348:	0802df1c 	.word	0x0802df1c
 802c34c:	0802dedc 	.word	0x0802dedc

0802c350 <abort>:
 802c350:	b508      	push	{r3, lr}
 802c352:	2006      	movs	r0, #6
 802c354:	f000 faca 	bl	802c8ec <raise>
 802c358:	2001      	movs	r0, #1
 802c35a:	f7e5 fe15 	bl	8011f88 <_exit>
	...

0802c360 <__sflush_r>:
 802c360:	898a      	ldrh	r2, [r1, #12]
 802c362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c366:	4605      	mov	r5, r0
 802c368:	0710      	lsls	r0, r2, #28
 802c36a:	460c      	mov	r4, r1
 802c36c:	d458      	bmi.n	802c420 <__sflush_r+0xc0>
 802c36e:	684b      	ldr	r3, [r1, #4]
 802c370:	2b00      	cmp	r3, #0
 802c372:	dc05      	bgt.n	802c380 <__sflush_r+0x20>
 802c374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802c376:	2b00      	cmp	r3, #0
 802c378:	dc02      	bgt.n	802c380 <__sflush_r+0x20>
 802c37a:	2000      	movs	r0, #0
 802c37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c382:	2e00      	cmp	r6, #0
 802c384:	d0f9      	beq.n	802c37a <__sflush_r+0x1a>
 802c386:	2300      	movs	r3, #0
 802c388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802c38c:	682f      	ldr	r7, [r5, #0]
 802c38e:	6a21      	ldr	r1, [r4, #32]
 802c390:	602b      	str	r3, [r5, #0]
 802c392:	d032      	beq.n	802c3fa <__sflush_r+0x9a>
 802c394:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802c396:	89a3      	ldrh	r3, [r4, #12]
 802c398:	075a      	lsls	r2, r3, #29
 802c39a:	d505      	bpl.n	802c3a8 <__sflush_r+0x48>
 802c39c:	6863      	ldr	r3, [r4, #4]
 802c39e:	1ac0      	subs	r0, r0, r3
 802c3a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c3a2:	b10b      	cbz	r3, 802c3a8 <__sflush_r+0x48>
 802c3a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c3a6:	1ac0      	subs	r0, r0, r3
 802c3a8:	2300      	movs	r3, #0
 802c3aa:	4602      	mov	r2, r0
 802c3ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c3ae:	6a21      	ldr	r1, [r4, #32]
 802c3b0:	4628      	mov	r0, r5
 802c3b2:	47b0      	blx	r6
 802c3b4:	1c43      	adds	r3, r0, #1
 802c3b6:	89a3      	ldrh	r3, [r4, #12]
 802c3b8:	d106      	bne.n	802c3c8 <__sflush_r+0x68>
 802c3ba:	6829      	ldr	r1, [r5, #0]
 802c3bc:	291d      	cmp	r1, #29
 802c3be:	d848      	bhi.n	802c452 <__sflush_r+0xf2>
 802c3c0:	4a29      	ldr	r2, [pc, #164]	; (802c468 <__sflush_r+0x108>)
 802c3c2:	40ca      	lsrs	r2, r1
 802c3c4:	07d6      	lsls	r6, r2, #31
 802c3c6:	d544      	bpl.n	802c452 <__sflush_r+0xf2>
 802c3c8:	2200      	movs	r2, #0
 802c3ca:	6062      	str	r2, [r4, #4]
 802c3cc:	04d9      	lsls	r1, r3, #19
 802c3ce:	6922      	ldr	r2, [r4, #16]
 802c3d0:	6022      	str	r2, [r4, #0]
 802c3d2:	d504      	bpl.n	802c3de <__sflush_r+0x7e>
 802c3d4:	1c42      	adds	r2, r0, #1
 802c3d6:	d101      	bne.n	802c3dc <__sflush_r+0x7c>
 802c3d8:	682b      	ldr	r3, [r5, #0]
 802c3da:	b903      	cbnz	r3, 802c3de <__sflush_r+0x7e>
 802c3dc:	6560      	str	r0, [r4, #84]	; 0x54
 802c3de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c3e0:	602f      	str	r7, [r5, #0]
 802c3e2:	2900      	cmp	r1, #0
 802c3e4:	d0c9      	beq.n	802c37a <__sflush_r+0x1a>
 802c3e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c3ea:	4299      	cmp	r1, r3
 802c3ec:	d002      	beq.n	802c3f4 <__sflush_r+0x94>
 802c3ee:	4628      	mov	r0, r5
 802c3f0:	f000 f99c 	bl	802c72c <_free_r>
 802c3f4:	2000      	movs	r0, #0
 802c3f6:	6360      	str	r0, [r4, #52]	; 0x34
 802c3f8:	e7c0      	b.n	802c37c <__sflush_r+0x1c>
 802c3fa:	2301      	movs	r3, #1
 802c3fc:	4628      	mov	r0, r5
 802c3fe:	47b0      	blx	r6
 802c400:	1c41      	adds	r1, r0, #1
 802c402:	d1c8      	bne.n	802c396 <__sflush_r+0x36>
 802c404:	682b      	ldr	r3, [r5, #0]
 802c406:	2b00      	cmp	r3, #0
 802c408:	d0c5      	beq.n	802c396 <__sflush_r+0x36>
 802c40a:	2b1d      	cmp	r3, #29
 802c40c:	d001      	beq.n	802c412 <__sflush_r+0xb2>
 802c40e:	2b16      	cmp	r3, #22
 802c410:	d101      	bne.n	802c416 <__sflush_r+0xb6>
 802c412:	602f      	str	r7, [r5, #0]
 802c414:	e7b1      	b.n	802c37a <__sflush_r+0x1a>
 802c416:	89a3      	ldrh	r3, [r4, #12]
 802c418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c41c:	81a3      	strh	r3, [r4, #12]
 802c41e:	e7ad      	b.n	802c37c <__sflush_r+0x1c>
 802c420:	690f      	ldr	r7, [r1, #16]
 802c422:	2f00      	cmp	r7, #0
 802c424:	d0a9      	beq.n	802c37a <__sflush_r+0x1a>
 802c426:	0793      	lsls	r3, r2, #30
 802c428:	680e      	ldr	r6, [r1, #0]
 802c42a:	bf08      	it	eq
 802c42c:	694b      	ldreq	r3, [r1, #20]
 802c42e:	600f      	str	r7, [r1, #0]
 802c430:	bf18      	it	ne
 802c432:	2300      	movne	r3, #0
 802c434:	eba6 0807 	sub.w	r8, r6, r7
 802c438:	608b      	str	r3, [r1, #8]
 802c43a:	f1b8 0f00 	cmp.w	r8, #0
 802c43e:	dd9c      	ble.n	802c37a <__sflush_r+0x1a>
 802c440:	4643      	mov	r3, r8
 802c442:	463a      	mov	r2, r7
 802c444:	6a21      	ldr	r1, [r4, #32]
 802c446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802c448:	4628      	mov	r0, r5
 802c44a:	47b0      	blx	r6
 802c44c:	2800      	cmp	r0, #0
 802c44e:	dc06      	bgt.n	802c45e <__sflush_r+0xfe>
 802c450:	89a3      	ldrh	r3, [r4, #12]
 802c452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c456:	81a3      	strh	r3, [r4, #12]
 802c458:	f04f 30ff 	mov.w	r0, #4294967295
 802c45c:	e78e      	b.n	802c37c <__sflush_r+0x1c>
 802c45e:	4407      	add	r7, r0
 802c460:	eba8 0800 	sub.w	r8, r8, r0
 802c464:	e7e9      	b.n	802c43a <__sflush_r+0xda>
 802c466:	bf00      	nop
 802c468:	20400001 	.word	0x20400001

0802c46c <_fflush_r>:
 802c46c:	b538      	push	{r3, r4, r5, lr}
 802c46e:	690b      	ldr	r3, [r1, #16]
 802c470:	4605      	mov	r5, r0
 802c472:	460c      	mov	r4, r1
 802c474:	b1db      	cbz	r3, 802c4ae <_fflush_r+0x42>
 802c476:	b118      	cbz	r0, 802c480 <_fflush_r+0x14>
 802c478:	6983      	ldr	r3, [r0, #24]
 802c47a:	b90b      	cbnz	r3, 802c480 <_fflush_r+0x14>
 802c47c:	f000 f860 	bl	802c540 <__sinit>
 802c480:	4b0c      	ldr	r3, [pc, #48]	; (802c4b4 <_fflush_r+0x48>)
 802c482:	429c      	cmp	r4, r3
 802c484:	d109      	bne.n	802c49a <_fflush_r+0x2e>
 802c486:	686c      	ldr	r4, [r5, #4]
 802c488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c48c:	b17b      	cbz	r3, 802c4ae <_fflush_r+0x42>
 802c48e:	4621      	mov	r1, r4
 802c490:	4628      	mov	r0, r5
 802c492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c496:	f7ff bf63 	b.w	802c360 <__sflush_r>
 802c49a:	4b07      	ldr	r3, [pc, #28]	; (802c4b8 <_fflush_r+0x4c>)
 802c49c:	429c      	cmp	r4, r3
 802c49e:	d101      	bne.n	802c4a4 <_fflush_r+0x38>
 802c4a0:	68ac      	ldr	r4, [r5, #8]
 802c4a2:	e7f1      	b.n	802c488 <_fflush_r+0x1c>
 802c4a4:	4b05      	ldr	r3, [pc, #20]	; (802c4bc <_fflush_r+0x50>)
 802c4a6:	429c      	cmp	r4, r3
 802c4a8:	bf08      	it	eq
 802c4aa:	68ec      	ldreq	r4, [r5, #12]
 802c4ac:	e7ec      	b.n	802c488 <_fflush_r+0x1c>
 802c4ae:	2000      	movs	r0, #0
 802c4b0:	bd38      	pop	{r3, r4, r5, pc}
 802c4b2:	bf00      	nop
 802c4b4:	0802defc 	.word	0x0802defc
 802c4b8:	0802df1c 	.word	0x0802df1c
 802c4bc:	0802dedc 	.word	0x0802dedc

0802c4c0 <std>:
 802c4c0:	2300      	movs	r3, #0
 802c4c2:	b510      	push	{r4, lr}
 802c4c4:	4604      	mov	r4, r0
 802c4c6:	e9c0 3300 	strd	r3, r3, [r0]
 802c4ca:	6083      	str	r3, [r0, #8]
 802c4cc:	8181      	strh	r1, [r0, #12]
 802c4ce:	6643      	str	r3, [r0, #100]	; 0x64
 802c4d0:	81c2      	strh	r2, [r0, #14]
 802c4d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c4d6:	6183      	str	r3, [r0, #24]
 802c4d8:	4619      	mov	r1, r3
 802c4da:	2208      	movs	r2, #8
 802c4dc:	305c      	adds	r0, #92	; 0x5c
 802c4de:	f7ff fa76 	bl	802b9ce <memset>
 802c4e2:	4b05      	ldr	r3, [pc, #20]	; (802c4f8 <std+0x38>)
 802c4e4:	6263      	str	r3, [r4, #36]	; 0x24
 802c4e6:	4b05      	ldr	r3, [pc, #20]	; (802c4fc <std+0x3c>)
 802c4e8:	62a3      	str	r3, [r4, #40]	; 0x28
 802c4ea:	4b05      	ldr	r3, [pc, #20]	; (802c500 <std+0x40>)
 802c4ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 802c4ee:	4b05      	ldr	r3, [pc, #20]	; (802c504 <std+0x44>)
 802c4f0:	6224      	str	r4, [r4, #32]
 802c4f2:	6323      	str	r3, [r4, #48]	; 0x30
 802c4f4:	bd10      	pop	{r4, pc}
 802c4f6:	bf00      	nop
 802c4f8:	0802c925 	.word	0x0802c925
 802c4fc:	0802c947 	.word	0x0802c947
 802c500:	0802c97f 	.word	0x0802c97f
 802c504:	0802c9a3 	.word	0x0802c9a3

0802c508 <_cleanup_r>:
 802c508:	4901      	ldr	r1, [pc, #4]	; (802c510 <_cleanup_r+0x8>)
 802c50a:	f000 b885 	b.w	802c618 <_fwalk_reent>
 802c50e:	bf00      	nop
 802c510:	0802c46d 	.word	0x0802c46d

0802c514 <__sfmoreglue>:
 802c514:	b570      	push	{r4, r5, r6, lr}
 802c516:	1e4a      	subs	r2, r1, #1
 802c518:	2568      	movs	r5, #104	; 0x68
 802c51a:	4355      	muls	r5, r2
 802c51c:	460e      	mov	r6, r1
 802c51e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802c522:	f000 f951 	bl	802c7c8 <_malloc_r>
 802c526:	4604      	mov	r4, r0
 802c528:	b140      	cbz	r0, 802c53c <__sfmoreglue+0x28>
 802c52a:	2100      	movs	r1, #0
 802c52c:	e9c0 1600 	strd	r1, r6, [r0]
 802c530:	300c      	adds	r0, #12
 802c532:	60a0      	str	r0, [r4, #8]
 802c534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802c538:	f7ff fa49 	bl	802b9ce <memset>
 802c53c:	4620      	mov	r0, r4
 802c53e:	bd70      	pop	{r4, r5, r6, pc}

0802c540 <__sinit>:
 802c540:	6983      	ldr	r3, [r0, #24]
 802c542:	b510      	push	{r4, lr}
 802c544:	4604      	mov	r4, r0
 802c546:	bb33      	cbnz	r3, 802c596 <__sinit+0x56>
 802c548:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802c54c:	6503      	str	r3, [r0, #80]	; 0x50
 802c54e:	4b12      	ldr	r3, [pc, #72]	; (802c598 <__sinit+0x58>)
 802c550:	4a12      	ldr	r2, [pc, #72]	; (802c59c <__sinit+0x5c>)
 802c552:	681b      	ldr	r3, [r3, #0]
 802c554:	6282      	str	r2, [r0, #40]	; 0x28
 802c556:	4298      	cmp	r0, r3
 802c558:	bf04      	itt	eq
 802c55a:	2301      	moveq	r3, #1
 802c55c:	6183      	streq	r3, [r0, #24]
 802c55e:	f000 f81f 	bl	802c5a0 <__sfp>
 802c562:	6060      	str	r0, [r4, #4]
 802c564:	4620      	mov	r0, r4
 802c566:	f000 f81b 	bl	802c5a0 <__sfp>
 802c56a:	60a0      	str	r0, [r4, #8]
 802c56c:	4620      	mov	r0, r4
 802c56e:	f000 f817 	bl	802c5a0 <__sfp>
 802c572:	2200      	movs	r2, #0
 802c574:	60e0      	str	r0, [r4, #12]
 802c576:	2104      	movs	r1, #4
 802c578:	6860      	ldr	r0, [r4, #4]
 802c57a:	f7ff ffa1 	bl	802c4c0 <std>
 802c57e:	2201      	movs	r2, #1
 802c580:	2109      	movs	r1, #9
 802c582:	68a0      	ldr	r0, [r4, #8]
 802c584:	f7ff ff9c 	bl	802c4c0 <std>
 802c588:	2202      	movs	r2, #2
 802c58a:	2112      	movs	r1, #18
 802c58c:	68e0      	ldr	r0, [r4, #12]
 802c58e:	f7ff ff97 	bl	802c4c0 <std>
 802c592:	2301      	movs	r3, #1
 802c594:	61a3      	str	r3, [r4, #24]
 802c596:	bd10      	pop	{r4, pc}
 802c598:	0802dea4 	.word	0x0802dea4
 802c59c:	0802c509 	.word	0x0802c509

0802c5a0 <__sfp>:
 802c5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c5a2:	4b1b      	ldr	r3, [pc, #108]	; (802c610 <__sfp+0x70>)
 802c5a4:	681e      	ldr	r6, [r3, #0]
 802c5a6:	69b3      	ldr	r3, [r6, #24]
 802c5a8:	4607      	mov	r7, r0
 802c5aa:	b913      	cbnz	r3, 802c5b2 <__sfp+0x12>
 802c5ac:	4630      	mov	r0, r6
 802c5ae:	f7ff ffc7 	bl	802c540 <__sinit>
 802c5b2:	3648      	adds	r6, #72	; 0x48
 802c5b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802c5b8:	3b01      	subs	r3, #1
 802c5ba:	d503      	bpl.n	802c5c4 <__sfp+0x24>
 802c5bc:	6833      	ldr	r3, [r6, #0]
 802c5be:	b133      	cbz	r3, 802c5ce <__sfp+0x2e>
 802c5c0:	6836      	ldr	r6, [r6, #0]
 802c5c2:	e7f7      	b.n	802c5b4 <__sfp+0x14>
 802c5c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802c5c8:	b16d      	cbz	r5, 802c5e6 <__sfp+0x46>
 802c5ca:	3468      	adds	r4, #104	; 0x68
 802c5cc:	e7f4      	b.n	802c5b8 <__sfp+0x18>
 802c5ce:	2104      	movs	r1, #4
 802c5d0:	4638      	mov	r0, r7
 802c5d2:	f7ff ff9f 	bl	802c514 <__sfmoreglue>
 802c5d6:	6030      	str	r0, [r6, #0]
 802c5d8:	2800      	cmp	r0, #0
 802c5da:	d1f1      	bne.n	802c5c0 <__sfp+0x20>
 802c5dc:	230c      	movs	r3, #12
 802c5de:	603b      	str	r3, [r7, #0]
 802c5e0:	4604      	mov	r4, r0
 802c5e2:	4620      	mov	r0, r4
 802c5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c5e6:	4b0b      	ldr	r3, [pc, #44]	; (802c614 <__sfp+0x74>)
 802c5e8:	6665      	str	r5, [r4, #100]	; 0x64
 802c5ea:	e9c4 5500 	strd	r5, r5, [r4]
 802c5ee:	60a5      	str	r5, [r4, #8]
 802c5f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802c5f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802c5f8:	2208      	movs	r2, #8
 802c5fa:	4629      	mov	r1, r5
 802c5fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802c600:	f7ff f9e5 	bl	802b9ce <memset>
 802c604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802c608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802c60c:	e7e9      	b.n	802c5e2 <__sfp+0x42>
 802c60e:	bf00      	nop
 802c610:	0802dea4 	.word	0x0802dea4
 802c614:	ffff0001 	.word	0xffff0001

0802c618 <_fwalk_reent>:
 802c618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c61c:	4680      	mov	r8, r0
 802c61e:	4689      	mov	r9, r1
 802c620:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802c624:	2600      	movs	r6, #0
 802c626:	b914      	cbnz	r4, 802c62e <_fwalk_reent+0x16>
 802c628:	4630      	mov	r0, r6
 802c62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c62e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802c632:	3f01      	subs	r7, #1
 802c634:	d501      	bpl.n	802c63a <_fwalk_reent+0x22>
 802c636:	6824      	ldr	r4, [r4, #0]
 802c638:	e7f5      	b.n	802c626 <_fwalk_reent+0xe>
 802c63a:	89ab      	ldrh	r3, [r5, #12]
 802c63c:	2b01      	cmp	r3, #1
 802c63e:	d907      	bls.n	802c650 <_fwalk_reent+0x38>
 802c640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c644:	3301      	adds	r3, #1
 802c646:	d003      	beq.n	802c650 <_fwalk_reent+0x38>
 802c648:	4629      	mov	r1, r5
 802c64a:	4640      	mov	r0, r8
 802c64c:	47c8      	blx	r9
 802c64e:	4306      	orrs	r6, r0
 802c650:	3568      	adds	r5, #104	; 0x68
 802c652:	e7ee      	b.n	802c632 <_fwalk_reent+0x1a>

0802c654 <__swhatbuf_r>:
 802c654:	b570      	push	{r4, r5, r6, lr}
 802c656:	460e      	mov	r6, r1
 802c658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c65c:	2900      	cmp	r1, #0
 802c65e:	b096      	sub	sp, #88	; 0x58
 802c660:	4614      	mov	r4, r2
 802c662:	461d      	mov	r5, r3
 802c664:	da07      	bge.n	802c676 <__swhatbuf_r+0x22>
 802c666:	2300      	movs	r3, #0
 802c668:	602b      	str	r3, [r5, #0]
 802c66a:	89b3      	ldrh	r3, [r6, #12]
 802c66c:	061a      	lsls	r2, r3, #24
 802c66e:	d410      	bmi.n	802c692 <__swhatbuf_r+0x3e>
 802c670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c674:	e00e      	b.n	802c694 <__swhatbuf_r+0x40>
 802c676:	466a      	mov	r2, sp
 802c678:	f000 f9ba 	bl	802c9f0 <_fstat_r>
 802c67c:	2800      	cmp	r0, #0
 802c67e:	dbf2      	blt.n	802c666 <__swhatbuf_r+0x12>
 802c680:	9a01      	ldr	r2, [sp, #4]
 802c682:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c686:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c68a:	425a      	negs	r2, r3
 802c68c:	415a      	adcs	r2, r3
 802c68e:	602a      	str	r2, [r5, #0]
 802c690:	e7ee      	b.n	802c670 <__swhatbuf_r+0x1c>
 802c692:	2340      	movs	r3, #64	; 0x40
 802c694:	2000      	movs	r0, #0
 802c696:	6023      	str	r3, [r4, #0]
 802c698:	b016      	add	sp, #88	; 0x58
 802c69a:	bd70      	pop	{r4, r5, r6, pc}

0802c69c <__smakebuf_r>:
 802c69c:	898b      	ldrh	r3, [r1, #12]
 802c69e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c6a0:	079d      	lsls	r5, r3, #30
 802c6a2:	4606      	mov	r6, r0
 802c6a4:	460c      	mov	r4, r1
 802c6a6:	d507      	bpl.n	802c6b8 <__smakebuf_r+0x1c>
 802c6a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c6ac:	6023      	str	r3, [r4, #0]
 802c6ae:	6123      	str	r3, [r4, #16]
 802c6b0:	2301      	movs	r3, #1
 802c6b2:	6163      	str	r3, [r4, #20]
 802c6b4:	b002      	add	sp, #8
 802c6b6:	bd70      	pop	{r4, r5, r6, pc}
 802c6b8:	ab01      	add	r3, sp, #4
 802c6ba:	466a      	mov	r2, sp
 802c6bc:	f7ff ffca 	bl	802c654 <__swhatbuf_r>
 802c6c0:	9900      	ldr	r1, [sp, #0]
 802c6c2:	4605      	mov	r5, r0
 802c6c4:	4630      	mov	r0, r6
 802c6c6:	f000 f87f 	bl	802c7c8 <_malloc_r>
 802c6ca:	b948      	cbnz	r0, 802c6e0 <__smakebuf_r+0x44>
 802c6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c6d0:	059a      	lsls	r2, r3, #22
 802c6d2:	d4ef      	bmi.n	802c6b4 <__smakebuf_r+0x18>
 802c6d4:	f023 0303 	bic.w	r3, r3, #3
 802c6d8:	f043 0302 	orr.w	r3, r3, #2
 802c6dc:	81a3      	strh	r3, [r4, #12]
 802c6de:	e7e3      	b.n	802c6a8 <__smakebuf_r+0xc>
 802c6e0:	4b0d      	ldr	r3, [pc, #52]	; (802c718 <__smakebuf_r+0x7c>)
 802c6e2:	62b3      	str	r3, [r6, #40]	; 0x28
 802c6e4:	89a3      	ldrh	r3, [r4, #12]
 802c6e6:	6020      	str	r0, [r4, #0]
 802c6e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c6ec:	81a3      	strh	r3, [r4, #12]
 802c6ee:	9b00      	ldr	r3, [sp, #0]
 802c6f0:	6163      	str	r3, [r4, #20]
 802c6f2:	9b01      	ldr	r3, [sp, #4]
 802c6f4:	6120      	str	r0, [r4, #16]
 802c6f6:	b15b      	cbz	r3, 802c710 <__smakebuf_r+0x74>
 802c6f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c6fc:	4630      	mov	r0, r6
 802c6fe:	f000 f989 	bl	802ca14 <_isatty_r>
 802c702:	b128      	cbz	r0, 802c710 <__smakebuf_r+0x74>
 802c704:	89a3      	ldrh	r3, [r4, #12]
 802c706:	f023 0303 	bic.w	r3, r3, #3
 802c70a:	f043 0301 	orr.w	r3, r3, #1
 802c70e:	81a3      	strh	r3, [r4, #12]
 802c710:	89a3      	ldrh	r3, [r4, #12]
 802c712:	431d      	orrs	r5, r3
 802c714:	81a5      	strh	r5, [r4, #12]
 802c716:	e7cd      	b.n	802c6b4 <__smakebuf_r+0x18>
 802c718:	0802c509 	.word	0x0802c509

0802c71c <malloc>:
 802c71c:	4b02      	ldr	r3, [pc, #8]	; (802c728 <malloc+0xc>)
 802c71e:	4601      	mov	r1, r0
 802c720:	6818      	ldr	r0, [r3, #0]
 802c722:	f000 b851 	b.w	802c7c8 <_malloc_r>
 802c726:	bf00      	nop
 802c728:	240006b0 	.word	0x240006b0

0802c72c <_free_r>:
 802c72c:	b538      	push	{r3, r4, r5, lr}
 802c72e:	4605      	mov	r5, r0
 802c730:	2900      	cmp	r1, #0
 802c732:	d045      	beq.n	802c7c0 <_free_r+0x94>
 802c734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c738:	1f0c      	subs	r4, r1, #4
 802c73a:	2b00      	cmp	r3, #0
 802c73c:	bfb8      	it	lt
 802c73e:	18e4      	addlt	r4, r4, r3
 802c740:	f000 f98a 	bl	802ca58 <__malloc_lock>
 802c744:	4a1f      	ldr	r2, [pc, #124]	; (802c7c4 <_free_r+0x98>)
 802c746:	6813      	ldr	r3, [r2, #0]
 802c748:	4610      	mov	r0, r2
 802c74a:	b933      	cbnz	r3, 802c75a <_free_r+0x2e>
 802c74c:	6063      	str	r3, [r4, #4]
 802c74e:	6014      	str	r4, [r2, #0]
 802c750:	4628      	mov	r0, r5
 802c752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c756:	f000 b980 	b.w	802ca5a <__malloc_unlock>
 802c75a:	42a3      	cmp	r3, r4
 802c75c:	d90c      	bls.n	802c778 <_free_r+0x4c>
 802c75e:	6821      	ldr	r1, [r4, #0]
 802c760:	1862      	adds	r2, r4, r1
 802c762:	4293      	cmp	r3, r2
 802c764:	bf04      	itt	eq
 802c766:	681a      	ldreq	r2, [r3, #0]
 802c768:	685b      	ldreq	r3, [r3, #4]
 802c76a:	6063      	str	r3, [r4, #4]
 802c76c:	bf04      	itt	eq
 802c76e:	1852      	addeq	r2, r2, r1
 802c770:	6022      	streq	r2, [r4, #0]
 802c772:	6004      	str	r4, [r0, #0]
 802c774:	e7ec      	b.n	802c750 <_free_r+0x24>
 802c776:	4613      	mov	r3, r2
 802c778:	685a      	ldr	r2, [r3, #4]
 802c77a:	b10a      	cbz	r2, 802c780 <_free_r+0x54>
 802c77c:	42a2      	cmp	r2, r4
 802c77e:	d9fa      	bls.n	802c776 <_free_r+0x4a>
 802c780:	6819      	ldr	r1, [r3, #0]
 802c782:	1858      	adds	r0, r3, r1
 802c784:	42a0      	cmp	r0, r4
 802c786:	d10b      	bne.n	802c7a0 <_free_r+0x74>
 802c788:	6820      	ldr	r0, [r4, #0]
 802c78a:	4401      	add	r1, r0
 802c78c:	1858      	adds	r0, r3, r1
 802c78e:	4282      	cmp	r2, r0
 802c790:	6019      	str	r1, [r3, #0]
 802c792:	d1dd      	bne.n	802c750 <_free_r+0x24>
 802c794:	6810      	ldr	r0, [r2, #0]
 802c796:	6852      	ldr	r2, [r2, #4]
 802c798:	605a      	str	r2, [r3, #4]
 802c79a:	4401      	add	r1, r0
 802c79c:	6019      	str	r1, [r3, #0]
 802c79e:	e7d7      	b.n	802c750 <_free_r+0x24>
 802c7a0:	d902      	bls.n	802c7a8 <_free_r+0x7c>
 802c7a2:	230c      	movs	r3, #12
 802c7a4:	602b      	str	r3, [r5, #0]
 802c7a6:	e7d3      	b.n	802c750 <_free_r+0x24>
 802c7a8:	6820      	ldr	r0, [r4, #0]
 802c7aa:	1821      	adds	r1, r4, r0
 802c7ac:	428a      	cmp	r2, r1
 802c7ae:	bf04      	itt	eq
 802c7b0:	6811      	ldreq	r1, [r2, #0]
 802c7b2:	6852      	ldreq	r2, [r2, #4]
 802c7b4:	6062      	str	r2, [r4, #4]
 802c7b6:	bf04      	itt	eq
 802c7b8:	1809      	addeq	r1, r1, r0
 802c7ba:	6021      	streq	r1, [r4, #0]
 802c7bc:	605c      	str	r4, [r3, #4]
 802c7be:	e7c7      	b.n	802c750 <_free_r+0x24>
 802c7c0:	bd38      	pop	{r3, r4, r5, pc}
 802c7c2:	bf00      	nop
 802c7c4:	24005d34 	.word	0x24005d34

0802c7c8 <_malloc_r>:
 802c7c8:	b570      	push	{r4, r5, r6, lr}
 802c7ca:	1ccd      	adds	r5, r1, #3
 802c7cc:	f025 0503 	bic.w	r5, r5, #3
 802c7d0:	3508      	adds	r5, #8
 802c7d2:	2d0c      	cmp	r5, #12
 802c7d4:	bf38      	it	cc
 802c7d6:	250c      	movcc	r5, #12
 802c7d8:	2d00      	cmp	r5, #0
 802c7da:	4606      	mov	r6, r0
 802c7dc:	db01      	blt.n	802c7e2 <_malloc_r+0x1a>
 802c7de:	42a9      	cmp	r1, r5
 802c7e0:	d903      	bls.n	802c7ea <_malloc_r+0x22>
 802c7e2:	230c      	movs	r3, #12
 802c7e4:	6033      	str	r3, [r6, #0]
 802c7e6:	2000      	movs	r0, #0
 802c7e8:	bd70      	pop	{r4, r5, r6, pc}
 802c7ea:	f000 f935 	bl	802ca58 <__malloc_lock>
 802c7ee:	4a21      	ldr	r2, [pc, #132]	; (802c874 <_malloc_r+0xac>)
 802c7f0:	6814      	ldr	r4, [r2, #0]
 802c7f2:	4621      	mov	r1, r4
 802c7f4:	b991      	cbnz	r1, 802c81c <_malloc_r+0x54>
 802c7f6:	4c20      	ldr	r4, [pc, #128]	; (802c878 <_malloc_r+0xb0>)
 802c7f8:	6823      	ldr	r3, [r4, #0]
 802c7fa:	b91b      	cbnz	r3, 802c804 <_malloc_r+0x3c>
 802c7fc:	4630      	mov	r0, r6
 802c7fe:	f000 f83d 	bl	802c87c <_sbrk_r>
 802c802:	6020      	str	r0, [r4, #0]
 802c804:	4629      	mov	r1, r5
 802c806:	4630      	mov	r0, r6
 802c808:	f000 f838 	bl	802c87c <_sbrk_r>
 802c80c:	1c43      	adds	r3, r0, #1
 802c80e:	d124      	bne.n	802c85a <_malloc_r+0x92>
 802c810:	230c      	movs	r3, #12
 802c812:	6033      	str	r3, [r6, #0]
 802c814:	4630      	mov	r0, r6
 802c816:	f000 f920 	bl	802ca5a <__malloc_unlock>
 802c81a:	e7e4      	b.n	802c7e6 <_malloc_r+0x1e>
 802c81c:	680b      	ldr	r3, [r1, #0]
 802c81e:	1b5b      	subs	r3, r3, r5
 802c820:	d418      	bmi.n	802c854 <_malloc_r+0x8c>
 802c822:	2b0b      	cmp	r3, #11
 802c824:	d90f      	bls.n	802c846 <_malloc_r+0x7e>
 802c826:	600b      	str	r3, [r1, #0]
 802c828:	50cd      	str	r5, [r1, r3]
 802c82a:	18cc      	adds	r4, r1, r3
 802c82c:	4630      	mov	r0, r6
 802c82e:	f000 f914 	bl	802ca5a <__malloc_unlock>
 802c832:	f104 000b 	add.w	r0, r4, #11
 802c836:	1d23      	adds	r3, r4, #4
 802c838:	f020 0007 	bic.w	r0, r0, #7
 802c83c:	1ac3      	subs	r3, r0, r3
 802c83e:	d0d3      	beq.n	802c7e8 <_malloc_r+0x20>
 802c840:	425a      	negs	r2, r3
 802c842:	50e2      	str	r2, [r4, r3]
 802c844:	e7d0      	b.n	802c7e8 <_malloc_r+0x20>
 802c846:	428c      	cmp	r4, r1
 802c848:	684b      	ldr	r3, [r1, #4]
 802c84a:	bf16      	itet	ne
 802c84c:	6063      	strne	r3, [r4, #4]
 802c84e:	6013      	streq	r3, [r2, #0]
 802c850:	460c      	movne	r4, r1
 802c852:	e7eb      	b.n	802c82c <_malloc_r+0x64>
 802c854:	460c      	mov	r4, r1
 802c856:	6849      	ldr	r1, [r1, #4]
 802c858:	e7cc      	b.n	802c7f4 <_malloc_r+0x2c>
 802c85a:	1cc4      	adds	r4, r0, #3
 802c85c:	f024 0403 	bic.w	r4, r4, #3
 802c860:	42a0      	cmp	r0, r4
 802c862:	d005      	beq.n	802c870 <_malloc_r+0xa8>
 802c864:	1a21      	subs	r1, r4, r0
 802c866:	4630      	mov	r0, r6
 802c868:	f000 f808 	bl	802c87c <_sbrk_r>
 802c86c:	3001      	adds	r0, #1
 802c86e:	d0cf      	beq.n	802c810 <_malloc_r+0x48>
 802c870:	6025      	str	r5, [r4, #0]
 802c872:	e7db      	b.n	802c82c <_malloc_r+0x64>
 802c874:	24005d34 	.word	0x24005d34
 802c878:	24005d38 	.word	0x24005d38

0802c87c <_sbrk_r>:
 802c87c:	b538      	push	{r3, r4, r5, lr}
 802c87e:	4c06      	ldr	r4, [pc, #24]	; (802c898 <_sbrk_r+0x1c>)
 802c880:	2300      	movs	r3, #0
 802c882:	4605      	mov	r5, r0
 802c884:	4608      	mov	r0, r1
 802c886:	6023      	str	r3, [r4, #0]
 802c888:	f7e5 fbf6 	bl	8012078 <_sbrk>
 802c88c:	1c43      	adds	r3, r0, #1
 802c88e:	d102      	bne.n	802c896 <_sbrk_r+0x1a>
 802c890:	6823      	ldr	r3, [r4, #0]
 802c892:	b103      	cbz	r3, 802c896 <_sbrk_r+0x1a>
 802c894:	602b      	str	r3, [r5, #0]
 802c896:	bd38      	pop	{r3, r4, r5, pc}
 802c898:	2400d250 	.word	0x2400d250

0802c89c <_raise_r>:
 802c89c:	291f      	cmp	r1, #31
 802c89e:	b538      	push	{r3, r4, r5, lr}
 802c8a0:	4604      	mov	r4, r0
 802c8a2:	460d      	mov	r5, r1
 802c8a4:	d904      	bls.n	802c8b0 <_raise_r+0x14>
 802c8a6:	2316      	movs	r3, #22
 802c8a8:	6003      	str	r3, [r0, #0]
 802c8aa:	f04f 30ff 	mov.w	r0, #4294967295
 802c8ae:	bd38      	pop	{r3, r4, r5, pc}
 802c8b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802c8b2:	b112      	cbz	r2, 802c8ba <_raise_r+0x1e>
 802c8b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802c8b8:	b94b      	cbnz	r3, 802c8ce <_raise_r+0x32>
 802c8ba:	4620      	mov	r0, r4
 802c8bc:	f000 f830 	bl	802c920 <_getpid_r>
 802c8c0:	462a      	mov	r2, r5
 802c8c2:	4601      	mov	r1, r0
 802c8c4:	4620      	mov	r0, r4
 802c8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c8ca:	f000 b817 	b.w	802c8fc <_kill_r>
 802c8ce:	2b01      	cmp	r3, #1
 802c8d0:	d00a      	beq.n	802c8e8 <_raise_r+0x4c>
 802c8d2:	1c59      	adds	r1, r3, #1
 802c8d4:	d103      	bne.n	802c8de <_raise_r+0x42>
 802c8d6:	2316      	movs	r3, #22
 802c8d8:	6003      	str	r3, [r0, #0]
 802c8da:	2001      	movs	r0, #1
 802c8dc:	e7e7      	b.n	802c8ae <_raise_r+0x12>
 802c8de:	2400      	movs	r4, #0
 802c8e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802c8e4:	4628      	mov	r0, r5
 802c8e6:	4798      	blx	r3
 802c8e8:	2000      	movs	r0, #0
 802c8ea:	e7e0      	b.n	802c8ae <_raise_r+0x12>

0802c8ec <raise>:
 802c8ec:	4b02      	ldr	r3, [pc, #8]	; (802c8f8 <raise+0xc>)
 802c8ee:	4601      	mov	r1, r0
 802c8f0:	6818      	ldr	r0, [r3, #0]
 802c8f2:	f7ff bfd3 	b.w	802c89c <_raise_r>
 802c8f6:	bf00      	nop
 802c8f8:	240006b0 	.word	0x240006b0

0802c8fc <_kill_r>:
 802c8fc:	b538      	push	{r3, r4, r5, lr}
 802c8fe:	4c07      	ldr	r4, [pc, #28]	; (802c91c <_kill_r+0x20>)
 802c900:	2300      	movs	r3, #0
 802c902:	4605      	mov	r5, r0
 802c904:	4608      	mov	r0, r1
 802c906:	4611      	mov	r1, r2
 802c908:	6023      	str	r3, [r4, #0]
 802c90a:	f7e5 fb2d 	bl	8011f68 <_kill>
 802c90e:	1c43      	adds	r3, r0, #1
 802c910:	d102      	bne.n	802c918 <_kill_r+0x1c>
 802c912:	6823      	ldr	r3, [r4, #0]
 802c914:	b103      	cbz	r3, 802c918 <_kill_r+0x1c>
 802c916:	602b      	str	r3, [r5, #0]
 802c918:	bd38      	pop	{r3, r4, r5, pc}
 802c91a:	bf00      	nop
 802c91c:	2400d250 	.word	0x2400d250

0802c920 <_getpid_r>:
 802c920:	f7e5 bb1a 	b.w	8011f58 <_getpid>

0802c924 <__sread>:
 802c924:	b510      	push	{r4, lr}
 802c926:	460c      	mov	r4, r1
 802c928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c92c:	f000 f896 	bl	802ca5c <_read_r>
 802c930:	2800      	cmp	r0, #0
 802c932:	bfab      	itete	ge
 802c934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802c936:	89a3      	ldrhlt	r3, [r4, #12]
 802c938:	181b      	addge	r3, r3, r0
 802c93a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802c93e:	bfac      	ite	ge
 802c940:	6563      	strge	r3, [r4, #84]	; 0x54
 802c942:	81a3      	strhlt	r3, [r4, #12]
 802c944:	bd10      	pop	{r4, pc}

0802c946 <__swrite>:
 802c946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c94a:	461f      	mov	r7, r3
 802c94c:	898b      	ldrh	r3, [r1, #12]
 802c94e:	05db      	lsls	r3, r3, #23
 802c950:	4605      	mov	r5, r0
 802c952:	460c      	mov	r4, r1
 802c954:	4616      	mov	r6, r2
 802c956:	d505      	bpl.n	802c964 <__swrite+0x1e>
 802c958:	2302      	movs	r3, #2
 802c95a:	2200      	movs	r2, #0
 802c95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c960:	f000 f868 	bl	802ca34 <_lseek_r>
 802c964:	89a3      	ldrh	r3, [r4, #12]
 802c966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c96a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802c96e:	81a3      	strh	r3, [r4, #12]
 802c970:	4632      	mov	r2, r6
 802c972:	463b      	mov	r3, r7
 802c974:	4628      	mov	r0, r5
 802c976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c97a:	f000 b817 	b.w	802c9ac <_write_r>

0802c97e <__sseek>:
 802c97e:	b510      	push	{r4, lr}
 802c980:	460c      	mov	r4, r1
 802c982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c986:	f000 f855 	bl	802ca34 <_lseek_r>
 802c98a:	1c43      	adds	r3, r0, #1
 802c98c:	89a3      	ldrh	r3, [r4, #12]
 802c98e:	bf15      	itete	ne
 802c990:	6560      	strne	r0, [r4, #84]	; 0x54
 802c992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802c996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802c99a:	81a3      	strheq	r3, [r4, #12]
 802c99c:	bf18      	it	ne
 802c99e:	81a3      	strhne	r3, [r4, #12]
 802c9a0:	bd10      	pop	{r4, pc}

0802c9a2 <__sclose>:
 802c9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c9a6:	f000 b813 	b.w	802c9d0 <_close_r>
	...

0802c9ac <_write_r>:
 802c9ac:	b538      	push	{r3, r4, r5, lr}
 802c9ae:	4c07      	ldr	r4, [pc, #28]	; (802c9cc <_write_r+0x20>)
 802c9b0:	4605      	mov	r5, r0
 802c9b2:	4608      	mov	r0, r1
 802c9b4:	4611      	mov	r1, r2
 802c9b6:	2200      	movs	r2, #0
 802c9b8:	6022      	str	r2, [r4, #0]
 802c9ba:	461a      	mov	r2, r3
 802c9bc:	f7e5 fb0b 	bl	8011fd6 <_write>
 802c9c0:	1c43      	adds	r3, r0, #1
 802c9c2:	d102      	bne.n	802c9ca <_write_r+0x1e>
 802c9c4:	6823      	ldr	r3, [r4, #0]
 802c9c6:	b103      	cbz	r3, 802c9ca <_write_r+0x1e>
 802c9c8:	602b      	str	r3, [r5, #0]
 802c9ca:	bd38      	pop	{r3, r4, r5, pc}
 802c9cc:	2400d250 	.word	0x2400d250

0802c9d0 <_close_r>:
 802c9d0:	b538      	push	{r3, r4, r5, lr}
 802c9d2:	4c06      	ldr	r4, [pc, #24]	; (802c9ec <_close_r+0x1c>)
 802c9d4:	2300      	movs	r3, #0
 802c9d6:	4605      	mov	r5, r0
 802c9d8:	4608      	mov	r0, r1
 802c9da:	6023      	str	r3, [r4, #0]
 802c9dc:	f7e5 fb17 	bl	801200e <_close>
 802c9e0:	1c43      	adds	r3, r0, #1
 802c9e2:	d102      	bne.n	802c9ea <_close_r+0x1a>
 802c9e4:	6823      	ldr	r3, [r4, #0]
 802c9e6:	b103      	cbz	r3, 802c9ea <_close_r+0x1a>
 802c9e8:	602b      	str	r3, [r5, #0]
 802c9ea:	bd38      	pop	{r3, r4, r5, pc}
 802c9ec:	2400d250 	.word	0x2400d250

0802c9f0 <_fstat_r>:
 802c9f0:	b538      	push	{r3, r4, r5, lr}
 802c9f2:	4c07      	ldr	r4, [pc, #28]	; (802ca10 <_fstat_r+0x20>)
 802c9f4:	2300      	movs	r3, #0
 802c9f6:	4605      	mov	r5, r0
 802c9f8:	4608      	mov	r0, r1
 802c9fa:	4611      	mov	r1, r2
 802c9fc:	6023      	str	r3, [r4, #0]
 802c9fe:	f7e5 fb12 	bl	8012026 <_fstat>
 802ca02:	1c43      	adds	r3, r0, #1
 802ca04:	d102      	bne.n	802ca0c <_fstat_r+0x1c>
 802ca06:	6823      	ldr	r3, [r4, #0]
 802ca08:	b103      	cbz	r3, 802ca0c <_fstat_r+0x1c>
 802ca0a:	602b      	str	r3, [r5, #0]
 802ca0c:	bd38      	pop	{r3, r4, r5, pc}
 802ca0e:	bf00      	nop
 802ca10:	2400d250 	.word	0x2400d250

0802ca14 <_isatty_r>:
 802ca14:	b538      	push	{r3, r4, r5, lr}
 802ca16:	4c06      	ldr	r4, [pc, #24]	; (802ca30 <_isatty_r+0x1c>)
 802ca18:	2300      	movs	r3, #0
 802ca1a:	4605      	mov	r5, r0
 802ca1c:	4608      	mov	r0, r1
 802ca1e:	6023      	str	r3, [r4, #0]
 802ca20:	f7e5 fb11 	bl	8012046 <_isatty>
 802ca24:	1c43      	adds	r3, r0, #1
 802ca26:	d102      	bne.n	802ca2e <_isatty_r+0x1a>
 802ca28:	6823      	ldr	r3, [r4, #0]
 802ca2a:	b103      	cbz	r3, 802ca2e <_isatty_r+0x1a>
 802ca2c:	602b      	str	r3, [r5, #0]
 802ca2e:	bd38      	pop	{r3, r4, r5, pc}
 802ca30:	2400d250 	.word	0x2400d250

0802ca34 <_lseek_r>:
 802ca34:	b538      	push	{r3, r4, r5, lr}
 802ca36:	4c07      	ldr	r4, [pc, #28]	; (802ca54 <_lseek_r+0x20>)
 802ca38:	4605      	mov	r5, r0
 802ca3a:	4608      	mov	r0, r1
 802ca3c:	4611      	mov	r1, r2
 802ca3e:	2200      	movs	r2, #0
 802ca40:	6022      	str	r2, [r4, #0]
 802ca42:	461a      	mov	r2, r3
 802ca44:	f7e5 fb0a 	bl	801205c <_lseek>
 802ca48:	1c43      	adds	r3, r0, #1
 802ca4a:	d102      	bne.n	802ca52 <_lseek_r+0x1e>
 802ca4c:	6823      	ldr	r3, [r4, #0]
 802ca4e:	b103      	cbz	r3, 802ca52 <_lseek_r+0x1e>
 802ca50:	602b      	str	r3, [r5, #0]
 802ca52:	bd38      	pop	{r3, r4, r5, pc}
 802ca54:	2400d250 	.word	0x2400d250

0802ca58 <__malloc_lock>:
 802ca58:	4770      	bx	lr

0802ca5a <__malloc_unlock>:
 802ca5a:	4770      	bx	lr

0802ca5c <_read_r>:
 802ca5c:	b538      	push	{r3, r4, r5, lr}
 802ca5e:	4c07      	ldr	r4, [pc, #28]	; (802ca7c <_read_r+0x20>)
 802ca60:	4605      	mov	r5, r0
 802ca62:	4608      	mov	r0, r1
 802ca64:	4611      	mov	r1, r2
 802ca66:	2200      	movs	r2, #0
 802ca68:	6022      	str	r2, [r4, #0]
 802ca6a:	461a      	mov	r2, r3
 802ca6c:	f7e5 fa96 	bl	8011f9c <_read>
 802ca70:	1c43      	adds	r3, r0, #1
 802ca72:	d102      	bne.n	802ca7a <_read_r+0x1e>
 802ca74:	6823      	ldr	r3, [r4, #0]
 802ca76:	b103      	cbz	r3, 802ca7a <_read_r+0x1e>
 802ca78:	602b      	str	r3, [r5, #0]
 802ca7a:	bd38      	pop	{r3, r4, r5, pc}
 802ca7c:	2400d250 	.word	0x2400d250

0802ca80 <_init>:
 802ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ca82:	bf00      	nop
 802ca84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ca86:	bc08      	pop	{r3}
 802ca88:	469e      	mov	lr, r3
 802ca8a:	4770      	bx	lr

0802ca8c <_fini>:
 802ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ca8e:	bf00      	nop
 802ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ca92:	bc08      	pop	{r3}
 802ca94:	469e      	mov	lr, r3
 802ca96:	4770      	bx	lr
