
FlightController_STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002e048  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000150c  0802e2e8  0802e2e8  0003e2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f7f4  0802f7f4  00040714  2**0
                  CONTENTS
  4 .ARM          00000008  0802f7f4  0802f7f4  0003f7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f7fc  0802f7fc  00040714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0802f7fc  0802f7fc  0003f7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f820  0802f820  0003f820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000714  24000000  0802f824  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cb3c  24000718  0802ff38  00040718  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400d254  0802ff38  0004d254  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040714  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009981a  00000000  00000000  00040742  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000f9b0  00000000  00000000  000d9f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000036e0  00000000  00000000  000e9910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000031f0  00000000  00000000  000ecff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004d5e8  00000000  00000000  000f01e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00045908  00000000  00000000  0013d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0019bfca  00000000  00000000  001830d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0031f09a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f69c  00000000  00000000  0031f118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000718 	.word	0x24000718
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802e2d0 	.word	0x0802e2d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400071c 	.word	0x2400071c
 80002dc:	0802e2d0 	.word	0x0802e2d0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004ce:	f1a4 0401 	sub.w	r4, r4, #1
 80004d2:	d1e9      	bne.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_ldivmod>:
 8000708:	b97b      	cbnz	r3, 800072a <__aeabi_ldivmod+0x22>
 800070a:	b972      	cbnz	r2, 800072a <__aeabi_ldivmod+0x22>
 800070c:	2900      	cmp	r1, #0
 800070e:	bfbe      	ittt	lt
 8000710:	2000      	movlt	r0, #0
 8000712:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000716:	e006      	blt.n	8000726 <__aeabi_ldivmod+0x1e>
 8000718:	bf08      	it	eq
 800071a:	2800      	cmpeq	r0, #0
 800071c:	bf1c      	itt	ne
 800071e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000722:	f04f 30ff 	movne.w	r0, #4294967295
 8000726:	f000 b9bd 	b.w	8000aa4 <__aeabi_idiv0>
 800072a:	f1ad 0c08 	sub.w	ip, sp, #8
 800072e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000732:	2900      	cmp	r1, #0
 8000734:	db09      	blt.n	800074a <__aeabi_ldivmod+0x42>
 8000736:	2b00      	cmp	r3, #0
 8000738:	db1a      	blt.n	8000770 <__aeabi_ldivmod+0x68>
 800073a:	f000 f84d 	bl	80007d8 <__udivmoddi4>
 800073e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000746:	b004      	add	sp, #16
 8000748:	4770      	bx	lr
 800074a:	4240      	negs	r0, r0
 800074c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	db1b      	blt.n	800078c <__aeabi_ldivmod+0x84>
 8000754:	f000 f840 	bl	80007d8 <__udivmoddi4>
 8000758:	f8dd e004 	ldr.w	lr, [sp, #4]
 800075c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000760:	b004      	add	sp, #16
 8000762:	4240      	negs	r0, r0
 8000764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000768:	4252      	negs	r2, r2
 800076a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800076e:	4770      	bx	lr
 8000770:	4252      	negs	r2, r2
 8000772:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000776:	f000 f82f 	bl	80007d8 <__udivmoddi4>
 800077a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000782:	b004      	add	sp, #16
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	4770      	bx	lr
 800078c:	4252      	negs	r2, r2
 800078e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000792:	f000 f821 	bl	80007d8 <__udivmoddi4>
 8000796:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079e:	b004      	add	sp, #16
 80007a0:	4252      	negs	r2, r2
 80007a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a6:	4770      	bx	lr

080007a8 <__aeabi_uldivmod>:
 80007a8:	b953      	cbnz	r3, 80007c0 <__aeabi_uldivmod+0x18>
 80007aa:	b94a      	cbnz	r2, 80007c0 <__aeabi_uldivmod+0x18>
 80007ac:	2900      	cmp	r1, #0
 80007ae:	bf08      	it	eq
 80007b0:	2800      	cmpeq	r0, #0
 80007b2:	bf1c      	itt	ne
 80007b4:	f04f 31ff 	movne.w	r1, #4294967295
 80007b8:	f04f 30ff 	movne.w	r0, #4294967295
 80007bc:	f000 b972 	b.w	8000aa4 <__aeabi_idiv0>
 80007c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007c8:	f000 f806 	bl	80007d8 <__udivmoddi4>
 80007cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	4688      	mov	r8, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14b      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4615      	mov	r5, r2
 80007ea:	d967      	bls.n	80008bc <__udivmoddi4+0xe4>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0720 	rsb	r7, r2, #32
 80007f6:	fa01 f302 	lsl.w	r3, r1, r2
 80007fa:	fa20 f707 	lsr.w	r7, r0, r7
 80007fe:	4095      	lsls	r5, r2
 8000800:	ea47 0803 	orr.w	r8, r7, r3
 8000804:	4094      	lsls	r4, r2
 8000806:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800080a:	0c23      	lsrs	r3, r4, #16
 800080c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000810:	fa1f fc85 	uxth.w	ip, r5
 8000814:	fb0e 8817 	mls	r8, lr, r7, r8
 8000818:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081c:	fb07 f10c 	mul.w	r1, r7, ip
 8000820:	4299      	cmp	r1, r3
 8000822:	d909      	bls.n	8000838 <__udivmoddi4+0x60>
 8000824:	18eb      	adds	r3, r5, r3
 8000826:	f107 30ff 	add.w	r0, r7, #4294967295
 800082a:	f080 811b 	bcs.w	8000a64 <__udivmoddi4+0x28c>
 800082e:	4299      	cmp	r1, r3
 8000830:	f240 8118 	bls.w	8000a64 <__udivmoddi4+0x28c>
 8000834:	3f02      	subs	r7, #2
 8000836:	442b      	add	r3, r5
 8000838:	1a5b      	subs	r3, r3, r1
 800083a:	b2a4      	uxth	r4, r4
 800083c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000840:	fb0e 3310 	mls	r3, lr, r0, r3
 8000844:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000848:	fb00 fc0c 	mul.w	ip, r0, ip
 800084c:	45a4      	cmp	ip, r4
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x8c>
 8000850:	192c      	adds	r4, r5, r4
 8000852:	f100 33ff 	add.w	r3, r0, #4294967295
 8000856:	f080 8107 	bcs.w	8000a68 <__udivmoddi4+0x290>
 800085a:	45a4      	cmp	ip, r4
 800085c:	f240 8104 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000860:	3802      	subs	r0, #2
 8000862:	442c      	add	r4, r5
 8000864:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000868:	eba4 040c 	sub.w	r4, r4, ip
 800086c:	2700      	movs	r7, #0
 800086e:	b11e      	cbz	r6, 8000878 <__udivmoddi4+0xa0>
 8000870:	40d4      	lsrs	r4, r2
 8000872:	2300      	movs	r3, #0
 8000874:	e9c6 4300 	strd	r4, r3, [r6]
 8000878:	4639      	mov	r1, r7
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d909      	bls.n	8000896 <__udivmoddi4+0xbe>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80eb 	beq.w	8000a5e <__udivmoddi4+0x286>
 8000888:	2700      	movs	r7, #0
 800088a:	e9c6 0100 	strd	r0, r1, [r6]
 800088e:	4638      	mov	r0, r7
 8000890:	4639      	mov	r1, r7
 8000892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000896:	fab3 f783 	clz	r7, r3
 800089a:	2f00      	cmp	r7, #0
 800089c:	d147      	bne.n	800092e <__udivmoddi4+0x156>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d302      	bcc.n	80008a8 <__udivmoddi4+0xd0>
 80008a2:	4282      	cmp	r2, r0
 80008a4:	f200 80fa 	bhi.w	8000a9c <__udivmoddi4+0x2c4>
 80008a8:	1a84      	subs	r4, r0, r2
 80008aa:	eb61 0303 	sbc.w	r3, r1, r3
 80008ae:	2001      	movs	r0, #1
 80008b0:	4698      	mov	r8, r3
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d0e0      	beq.n	8000878 <__udivmoddi4+0xa0>
 80008b6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ba:	e7dd      	b.n	8000878 <__udivmoddi4+0xa0>
 80008bc:	b902      	cbnz	r2, 80008c0 <__udivmoddi4+0xe8>
 80008be:	deff      	udf	#255	; 0xff
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	f040 808f 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008ca:	1b49      	subs	r1, r1, r5
 80008cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008d0:	fa1f f885 	uxth.w	r8, r5
 80008d4:	2701      	movs	r7, #1
 80008d6:	fbb1 fcfe 	udiv	ip, r1, lr
 80008da:	0c23      	lsrs	r3, r4, #16
 80008dc:	fb0e 111c 	mls	r1, lr, ip, r1
 80008e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e4:	fb08 f10c 	mul.w	r1, r8, ip
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ec:	18eb      	adds	r3, r5, r3
 80008ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4299      	cmp	r1, r3
 80008f6:	f200 80cd 	bhi.w	8000a94 <__udivmoddi4+0x2bc>
 80008fa:	4684      	mov	ip, r0
 80008fc:	1a59      	subs	r1, r3, r1
 80008fe:	b2a3      	uxth	r3, r4
 8000900:	fbb1 f0fe 	udiv	r0, r1, lr
 8000904:	fb0e 1410 	mls	r4, lr, r0, r1
 8000908:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800090c:	fb08 f800 	mul.w	r8, r8, r0
 8000910:	45a0      	cmp	r8, r4
 8000912:	d907      	bls.n	8000924 <__udivmoddi4+0x14c>
 8000914:	192c      	adds	r4, r5, r4
 8000916:	f100 33ff 	add.w	r3, r0, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x14a>
 800091c:	45a0      	cmp	r8, r4
 800091e:	f200 80b6 	bhi.w	8000a8e <__udivmoddi4+0x2b6>
 8000922:	4618      	mov	r0, r3
 8000924:	eba4 0408 	sub.w	r4, r4, r8
 8000928:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800092c:	e79f      	b.n	800086e <__udivmoddi4+0x96>
 800092e:	f1c7 0c20 	rsb	ip, r7, #32
 8000932:	40bb      	lsls	r3, r7
 8000934:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000938:	ea4e 0e03 	orr.w	lr, lr, r3
 800093c:	fa01 f407 	lsl.w	r4, r1, r7
 8000940:	fa20 f50c 	lsr.w	r5, r0, ip
 8000944:	fa21 f30c 	lsr.w	r3, r1, ip
 8000948:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800094c:	4325      	orrs	r5, r4
 800094e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000952:	0c2c      	lsrs	r4, r5, #16
 8000954:	fb08 3319 	mls	r3, r8, r9, r3
 8000958:	fa1f fa8e 	uxth.w	sl, lr
 800095c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000960:	fb09 f40a 	mul.w	r4, r9, sl
 8000964:	429c      	cmp	r4, r3
 8000966:	fa02 f207 	lsl.w	r2, r2, r7
 800096a:	fa00 f107 	lsl.w	r1, r0, r7
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1e 0303 	adds.w	r3, lr, r3
 8000974:	f109 30ff 	add.w	r0, r9, #4294967295
 8000978:	f080 8087 	bcs.w	8000a8a <__udivmoddi4+0x2b2>
 800097c:	429c      	cmp	r4, r3
 800097e:	f240 8084 	bls.w	8000a8a <__udivmoddi4+0x2b2>
 8000982:	f1a9 0902 	sub.w	r9, r9, #2
 8000986:	4473      	add	r3, lr
 8000988:	1b1b      	subs	r3, r3, r4
 800098a:	b2ad      	uxth	r5, r5
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3310 	mls	r3, r8, r0, r3
 8000994:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000998:	fb00 fa0a 	mul.w	sl, r0, sl
 800099c:	45a2      	cmp	sl, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1e 0404 	adds.w	r4, lr, r4
 80009a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a8:	d26b      	bcs.n	8000a82 <__udivmoddi4+0x2aa>
 80009aa:	45a2      	cmp	sl, r4
 80009ac:	d969      	bls.n	8000a82 <__udivmoddi4+0x2aa>
 80009ae:	3802      	subs	r0, #2
 80009b0:	4474      	add	r4, lr
 80009b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009b6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ba:	eba4 040a 	sub.w	r4, r4, sl
 80009be:	454c      	cmp	r4, r9
 80009c0:	46c2      	mov	sl, r8
 80009c2:	464b      	mov	r3, r9
 80009c4:	d354      	bcc.n	8000a70 <__udivmoddi4+0x298>
 80009c6:	d051      	beq.n	8000a6c <__udivmoddi4+0x294>
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d069      	beq.n	8000aa0 <__udivmoddi4+0x2c8>
 80009cc:	ebb1 050a 	subs.w	r5, r1, sl
 80009d0:	eb64 0403 	sbc.w	r4, r4, r3
 80009d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80009d8:	40fd      	lsrs	r5, r7
 80009da:	40fc      	lsrs	r4, r7
 80009dc:	ea4c 0505 	orr.w	r5, ip, r5
 80009e0:	e9c6 5400 	strd	r5, r4, [r6]
 80009e4:	2700      	movs	r7, #0
 80009e6:	e747      	b.n	8000878 <__udivmoddi4+0xa0>
 80009e8:	f1c2 0320 	rsb	r3, r2, #32
 80009ec:	fa20 f703 	lsr.w	r7, r0, r3
 80009f0:	4095      	lsls	r5, r2
 80009f2:	fa01 f002 	lsl.w	r0, r1, r2
 80009f6:	fa21 f303 	lsr.w	r3, r1, r3
 80009fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009fe:	4338      	orrs	r0, r7
 8000a00:	0c01      	lsrs	r1, r0, #16
 8000a02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a06:	fa1f f885 	uxth.w	r8, r5
 8000a0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a12:	fb07 f308 	mul.w	r3, r7, r8
 8000a16:	428b      	cmp	r3, r1
 8000a18:	fa04 f402 	lsl.w	r4, r4, r2
 8000a1c:	d907      	bls.n	8000a2e <__udivmoddi4+0x256>
 8000a1e:	1869      	adds	r1, r5, r1
 8000a20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a24:	d22f      	bcs.n	8000a86 <__udivmoddi4+0x2ae>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d92d      	bls.n	8000a86 <__udivmoddi4+0x2ae>
 8000a2a:	3f02      	subs	r7, #2
 8000a2c:	4429      	add	r1, r5
 8000a2e:	1acb      	subs	r3, r1, r3
 8000a30:	b281      	uxth	r1, r0
 8000a32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a3e:	fb00 f308 	mul.w	r3, r0, r8
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d907      	bls.n	8000a56 <__udivmoddi4+0x27e>
 8000a46:	1869      	adds	r1, r5, r1
 8000a48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a4c:	d217      	bcs.n	8000a7e <__udivmoddi4+0x2a6>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d915      	bls.n	8000a7e <__udivmoddi4+0x2a6>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4429      	add	r1, r5
 8000a56:	1ac9      	subs	r1, r1, r3
 8000a58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a5c:	e73b      	b.n	80008d6 <__udivmoddi4+0xfe>
 8000a5e:	4637      	mov	r7, r6
 8000a60:	4630      	mov	r0, r6
 8000a62:	e709      	b.n	8000878 <__udivmoddi4+0xa0>
 8000a64:	4607      	mov	r7, r0
 8000a66:	e6e7      	b.n	8000838 <__udivmoddi4+0x60>
 8000a68:	4618      	mov	r0, r3
 8000a6a:	e6fb      	b.n	8000864 <__udivmoddi4+0x8c>
 8000a6c:	4541      	cmp	r1, r8
 8000a6e:	d2ab      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000a74:	eb69 020e 	sbc.w	r2, r9, lr
 8000a78:	3801      	subs	r0, #1
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	e7a4      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a7e:	4660      	mov	r0, ip
 8000a80:	e7e9      	b.n	8000a56 <__udivmoddi4+0x27e>
 8000a82:	4618      	mov	r0, r3
 8000a84:	e795      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a86:	4667      	mov	r7, ip
 8000a88:	e7d1      	b.n	8000a2e <__udivmoddi4+0x256>
 8000a8a:	4681      	mov	r9, r0
 8000a8c:	e77c      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a8e:	3802      	subs	r0, #2
 8000a90:	442c      	add	r4, r5
 8000a92:	e747      	b.n	8000924 <__udivmoddi4+0x14c>
 8000a94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a98:	442b      	add	r3, r5
 8000a9a:	e72f      	b.n	80008fc <__udivmoddi4+0x124>
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	e708      	b.n	80008b2 <__udivmoddi4+0xda>
 8000aa0:	4637      	mov	r7, r6
 8000aa2:	e6e9      	b.n	8000878 <__udivmoddi4+0xa0>

08000aa4 <__aeabi_idiv0>:
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>:
Motor m3(&htim1, TIM_CHANNEL_1);
Motor m4(&htim3, TIM_CHANNEL_4);
Motor m5(&htim3, TIM_CHANNEL_2);
Motor m6(&htim3, TIM_CHANNEL_1);

Motor::Motor(TIM_HandleTypeDef *htim, uint32_t Channel)
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	: htim(htim)
	, Channel(Channel)
	, pwm(1000)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ac6:	811a      	strh	r2, [r3, #8]
{ }
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_ZN2FC5Motor5startEv>:

void Motor::start(){
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim, Channel);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4610      	mov	r0, r2
 8000aea:	f01e fdcf 	bl	801f68c <HAL_TIM_PWM_Start>
	setPWM(1000);
 8000aee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 f804 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_ZN2FC5Motor6setPWMEt>:

void Motor::stop(){
	HAL_TIMEx_PWMN_Stop(htim, Channel);
}

void Motor::setPWM(uint16_t pwm){
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
	if(pwm < MIN_PWM) 			pwm = MIN_PWM;
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b12:	d203      	bcs.n	8000b1c <_ZN2FC5Motor6setPWMEt+0x1c>
 8000b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b18:	807b      	strh	r3, [r7, #2]
 8000b1a:	e006      	b.n	8000b2a <_ZN2FC5Motor6setPWMEt+0x2a>
	else if(pwm > MAX_PWM)		pwm = MAX_PWM;
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b22:	d902      	bls.n	8000b2a <_ZN2FC5Motor6setPWMEt+0x2a>
 8000b24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b28:	807b      	strh	r3, [r7, #2]

	this->pwm = pwm;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	887a      	ldrh	r2, [r7, #2]
 8000b2e:	811a      	strh	r2, [r3, #8]

	/*
	 *  pwm(1000 ~ 2000) scale to CCR register value(10500 ~ 21000);
	 */
	uint16_t output = (pwm - MIN_PWM) * ((MAX_CCR - MIN_CCR) / (MAX_PWM - MIN_PWM)) + MIN_CCR;
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	461a      	mov	r2, r3
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	4413      	add	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d105      	bne.n	8000b52 <_ZN2FC5Motor6setPWMEt+0x52>
 8000b46:	89fa      	ldrh	r2, [r7, #14]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b50:	e02c      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d105      	bne.n	8000b66 <_ZN2FC5Motor6setPWMEt+0x66>
 8000b5a:	89fa      	ldrh	r2, [r7, #14]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b64:	e022      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d105      	bne.n	8000b7a <_ZN2FC5Motor6setPWMEt+0x7a>
 8000b6e:	89fa      	ldrh	r2, [r7, #14]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b78:	e018      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b0c      	cmp	r3, #12
 8000b80:	d105      	bne.n	8000b8e <_ZN2FC5Motor6setPWMEt+0x8e>
 8000b82:	89fa      	ldrh	r2, [r7, #14]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b8c:	e00e      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b10      	cmp	r3, #16
 8000b94:	d105      	bne.n	8000ba2 <_ZN2FC5Motor6setPWMEt+0xa2>
 8000b96:	89fa      	ldrh	r2, [r7, #14]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000ba0:	e004      	b.n	8000bac <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000ba2:	89fa      	ldrh	r2, [r7, #14]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_Z41__static_initialization_and_destruction_0ii>:

} /* namespace FC */
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d122      	bne.n	8000c0e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d11d      	bne.n	8000c0e <_Z41__static_initialization_and_destruction_0ii+0x56>
Motor m1(&htim1, TIM_CHANNEL_3);
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	4910      	ldr	r1, [pc, #64]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000bd8:	f7ff ff66 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m2(&htim1, TIM_CHANNEL_4);
 8000bdc:	220c      	movs	r2, #12
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000be0:	480f      	ldr	r0, [pc, #60]	; (8000c20 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000be2:	f7ff ff61 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m3(&htim1, TIM_CHANNEL_1);
 8000be6:	2200      	movs	r2, #0
 8000be8:	490b      	ldr	r1, [pc, #44]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000bec:	f7ff ff5c 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m4(&htim3, TIM_CHANNEL_4);
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000bf6:	f7ff ff57 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m5(&htim3, TIM_CHANNEL_2);
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	490a      	ldr	r1, [pc, #40]	; (8000c28 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000c00:	f7ff ff52 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m6(&htim3, TIM_CHANNEL_1);
 8000c04:	2200      	movs	r2, #0
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000c0a:	f7ff ff4d 	bl	8000aa8 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
} /* namespace FC */
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2400c5e0 	.word	0x2400c5e0
 8000c1c:	24000734 	.word	0x24000734
 8000c20:	24000740 	.word	0x24000740
 8000c24:	2400074c 	.word	0x2400074c
 8000c28:	2400c594 	.word	0x2400c594
 8000c2c:	24000758 	.word	0x24000758
 8000c30:	24000764 	.word	0x24000764
 8000c34:	24000770 	.word	0x24000770

08000c38 <_GLOBAL__sub_I__ZN2FC2m1E>:
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff ffb9 	bl	8000bb8 <_Z41__static_initialization_and_destruction_0ii>
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <IST8310+0x24>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 8000c56:	f000 f8f7 	bl	8000e48 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 8000c5a:	210b      	movs	r1, #11
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f000 f8e1 	bl	8000e24 <IST8310_write_reg>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24001320 	.word	0x24001320

08000c70 <IST8310_i2cRxCpltCallback>:

	HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
	bm_i2cFlag = bm_i2cIST8310;

}
uint8_t IST8310_i2cRxCpltCallback(){
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return 0;
 8000c74:	4b5a      	ldr	r3, [pc, #360]	; (8000de0 <IST8310_i2cRxCpltCallback+0x170>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d001      	beq.n	8000c80 <IST8310_i2cRxCpltCallback+0x10>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e098      	b.n	8000db2 <IST8310_i2cRxCpltCallback+0x142>

	bm_i2cFlag = bm_i2cIdle;
 8000c80:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <IST8310_i2cRxCpltCallback+0x170>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 8000c86:	4b57      	ldr	r3, [pc, #348]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c88:	795b      	ldrb	r3, [r3, #5]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b55      	ldr	r3, [pc, #340]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c90:	791b      	ldrb	r3, [r3, #4]
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	4b52      	ldr	r3, [pc, #328]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c9a:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 8000c9c:	4b51      	ldr	r3, [pc, #324]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c9e:	79db      	ldrb	r3, [r3, #7]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	4b4f      	ldr	r3, [pc, #316]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000ca6:	799b      	ldrb	r3, [r3, #6]
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	4b4d      	ldr	r3, [pc, #308]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cb0:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 8000cb2:	4b4c      	ldr	r3, [pc, #304]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cb4:	7a5b      	ldrb	r3, [r3, #9]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cbc:	7a1b      	ldrb	r3, [r3, #8]
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cc6:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8000cc8:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cd6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8000dc0 <IST8310_i2cRxCpltCallback+0x150>
 8000cda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce2:	dc45      	bgt.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
 8000ce4:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000ce6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cf2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000dc8 <IST8310_i2cRxCpltCallback+0x158>
 8000cf6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfe:	d437      	bmi.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000d00:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d02:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8000d0e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000dc0 <IST8310_i2cRxCpltCallback+0x150>
 8000d12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	dc29      	bgt.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d2a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000dc8 <IST8310_i2cRxCpltCallback+0x158>
 8000d2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d36:	d41b      	bmi.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d3a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000d46:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000dd0 <IST8310_i2cRxCpltCallback+0x160>
 8000d4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d52:	dc0d      	bgt.n	8000d70 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d62:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000dd8 <IST8310_i2cRxCpltCallback+0x168>
 8000d66:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	d501      	bpl.n	8000d74 <IST8310_i2cRxCpltCallback+0x104>
	{
		return 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	e01e      	b.n	8000db2 <IST8310_i2cRxCpltCallback+0x142>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d76:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d7a:	ee07 3a90 	vmov	s15, r3
 8000d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d84:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d8e:	ee07 3a90 	vmov	s15, r3
 8000d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d98:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d9e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <IST8310_i2cRxCpltCallback+0x174>)
 8000dac:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	55555556 	.word	0x55555556
 8000dc4:	40b4d655 	.word	0x40b4d655
 8000dc8:	55555556 	.word	0x55555556
 8000dcc:	c0b4d655 	.word	0xc0b4d655
 8000dd0:	aaaaaaab 	.word	0xaaaaaaab
 8000dd4:	40c0472a 	.word	0x40c0472a
 8000dd8:	aaaaaaab 	.word	0xaaaaaaab
 8000ddc:	c0c0472a 	.word	0xc0c0472a
 8000de0:	2400133c 	.word	0x2400133c
 8000de4:	24001320 	.word	0x24001320

08000de8 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <IST8310_write+0x38>)
 8000dfa:	6818      	ldr	r0, [r3, #0]
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	b299      	uxth	r1, r3
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	2264      	movs	r2, #100	; 0x64
 8000e06:	9202      	str	r2, [sp, #8]
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	460a      	mov	r2, r1
 8000e12:	211c      	movs	r1, #28
 8000e14:	f017 fad8 	bl	80183c8 <HAL_I2C_Mem_Write>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	24001320 	.word	0x24001320

08000e24 <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 8000e34:	1db9      	adds	r1, r7, #6
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffd4 	bl	8000de8 <IST8310_write>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f7ff ffe8 	bl	8000e24 <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 8000e54:	2124      	movs	r1, #36	; 0x24
 8000e56:	2041      	movs	r0, #65	; 0x41
 8000e58:	f7ff ffe4 	bl	8000e24 <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 8000e5c:	21c0      	movs	r1, #192	; 0xc0
 8000e5e:	2042      	movs	r0, #66	; 0x42
 8000e60:	f7ff ffe0 	bl	8000e24 <IST8310_write_reg>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <Lidar1D_CaptureCallback>:
	if(HAL_TIM_IC_Start_IT(lidar1D.htim, lidar1D.indirectChannel) != HAL_OK) Error_Handler();
	return HAL_OK;
}


void Lidar1D_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	if(htim->Instance != lidar1D.htim->Instance) return;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d118      	bne.n	8000eb0 <Lidar1D_CaptureCallback+0x48>

	if(htim->Channel == lidar1D.activeChannel1){
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7f1a      	ldrb	r2, [r3, #28]
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000e84:	7b1b      	ldrb	r3, [r3, #12]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d104      	bne.n	8000e94 <Lidar1D_CaptureCallback+0x2c>
//		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		lidar1D.htim->Instance->CNT = 0;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(htim->Channel == lidar1D.activeChannel2){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7f1a      	ldrb	r2, [r3, #28]
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000e9a:	7b5b      	ldrb	r3, [r3, #13]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d108      	bne.n	8000eb2 <Lidar1D_CaptureCallback+0x4a>
		lidar1D.distance_mm = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f01f f85a 	bl	801ff5c <HAL_TIM_ReadCapturedValue>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <Lidar1D_CaptureCallback+0x50>)
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	e000      	b.n	8000eb2 <Lidar1D_CaptureCallback+0x4a>
	if(htim->Instance != lidar1D.htim->Instance) return;
 8000eb0:	bf00      	nop
	}
}
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2400077c 	.word	0x2400077c

08000ebc <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 8000ec4:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <MPU9250+0xec>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <MPU9250+0xec>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MPU9250+0xec>)
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <MPU9250+0xec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <MPU9250+0xec>)
 8000ede:	2206      	movs	r2, #6
 8000ee0:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <MPU9250+0xec>)
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <MPU9250+0xec>)
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MPU9250+0xec>)
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 8000efa:	2206      	movs	r2, #6
 8000efc:	2100      	movs	r1, #0
 8000efe:	482b      	ldr	r0, [pc, #172]	; (8000fac <MPU9250+0xf0>)
 8000f00:	f02c f9a5 	bl	802d24e <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 8000f04:	2206      	movs	r2, #6
 8000f06:	2100      	movs	r1, #0
 8000f08:	4829      	ldr	r0, [pc, #164]	; (8000fb0 <MPU9250+0xf4>)
 8000f0a:	f02c f9a0 	bl	802d24e <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 8000f0e:	2206      	movs	r2, #6
 8000f10:	2100      	movs	r1, #0
 8000f12:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <MPU9250+0xf8>)
 8000f14:	f02c f99b 	bl	802d24e <memset>
	mpu9250.tmpCount = 0;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MPU9250+0xec>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 8000f1e:	220c      	movs	r2, #12
 8000f20:	2100      	movs	r1, #0
 8000f22:	4825      	ldr	r0, [pc, #148]	; (8000fb8 <MPU9250+0xfc>)
 8000f24:	f02c f993 	bl	802d24e <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 8000f28:	220c      	movs	r2, #12
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MPU9250+0x100>)
 8000f2e:	f02c f98e 	bl	802d24e <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 8000f32:	220c      	movs	r2, #12
 8000f34:	2100      	movs	r1, #0
 8000f36:	4822      	ldr	r0, [pc, #136]	; (8000fc0 <MPU9250+0x104>)
 8000f38:	f02c f989 	bl	802d24e <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <MPU9250+0x108>)
 8000f42:	f02c f984 	bl	802d24e <memset>
	mpu9250.tmp = 0;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MPU9250+0xec>)
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 8000f4e:	220e      	movs	r2, #14
 8000f50:	2100      	movs	r1, #0
 8000f52:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <MPU9250+0x10c>)
 8000f54:	f02c f97b 	bl	802d24e <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 8000f58:	2207      	movs	r2, #7
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	481b      	ldr	r0, [pc, #108]	; (8000fcc <MPU9250+0x110>)
 8000f5e:	f02c f976 	bl	802d24e <memset>
	mpu9250.AK8963_lastUpdate = 0;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MPU9250+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MPU9250+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MPU9250+0xec>)
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <MPU9250+0x114>)
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MPU9250+0xec>)
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <MPU9250+0x118>)
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MPU9250+0xec>)
 8000f80:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <MPU9250+0x11c>)
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 8000f84:	f000 fa22 	bl	80013cc <MPU9250_getMres>
	MPU9250_getGres();
 8000f88:	f000 fa3c 	bl	8001404 <MPU9250_getGres>
	MPU9250_getAres();
 8000f8c:	f000 fa6c 	bl	8001468 <MPU9250_getAres>

	MPU9250_resetMPU9250();
 8000f90:	f000 fa98 	bl	80014c4 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 8000f94:	f000 fb84 	bl	80016a0 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 8000f98:	f000 fb0e 	bl	80015b8 <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 8000f9c:	f000 fa9e 	bl	80014dc <MPU9250_initAK8963>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24000fa4 	.word	0x24000fa4
 8000fac:	24000fb8 	.word	0x24000fb8
 8000fb0:	24000fbe 	.word	0x24000fbe
 8000fb4:	24000fc4 	.word	0x24000fc4
 8000fb8:	24000fcc 	.word	0x24000fcc
 8000fbc:	24000fe4 	.word	0x24000fe4
 8000fc0:	24000ff0 	.word	0x24000ff0
 8000fc4:	24000ffc 	.word	0x24000ffc
 8000fc8:	2400100c 	.word	0x2400100c
 8000fcc:	2400101a 	.word	0x2400101a
 8000fd0:	438c0000 	.word	0x438c0000
 8000fd4:	438e8000 	.word	0x438e8000
 8000fd8:	43a50000 	.word	0x43a50000

08000fdc <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MPU9250_updateDMA+0x38>)
 8000fe4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10f      	bne.n	800100c <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MPU9250_updateDMA+0x38>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MPU9250_updateDMA+0x38>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	230e      	movs	r3, #14
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MPU9250_updateDMA+0x3c>)
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	223b      	movs	r2, #59	; 0x3b
 8001004:	21d0      	movs	r1, #208	; 0xd0
 8001006:	f017 fca3 	bl	8018950 <HAL_I2C_Mem_Read_DMA>
 800100a:	e000      	b.n	800100e <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 800100c:	bf00      	nop
}
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	24000fa4 	.word	0x24000fa4
 8001018:	2400100c 	.word	0x2400100c

0800101c <MPU9250_i2cRxCpltCallback>:

uint8_t MPU9250_i2cRxCpltCallback(){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af02      	add	r7, sp, #8
	static uint8_t res = 0;
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001024:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001028:	2b01      	cmp	r3, #1
 800102a:	d12a      	bne.n	8001082 <MPU9250_i2cRxCpltCallback+0x66>
		if(MPU9250_calRawData() != MPU9250_Fail){
 800102c:	f000 f848 	bl	80010c0 <MPU9250_calRawData>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <MPU9250_i2cRxCpltCallback+0x24>
			MPU9250_calCalibValue();
 8001036:	f000 f8c5 	bl	80011c4 <MPU9250_calCalibValue>
			res = 1;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MPU9250_i2cRxCpltCallback+0x9c>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 8001040:	f027 fa86 	bl	8028550 <xTaskGetTickCount>
 8001044:	4602      	mov	r2, r0
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b0a      	cmp	r3, #10
 8001050:	d926      	bls.n	80010a0 <MPU9250_i2cRxCpltCallback+0x84>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001054:	2202      	movs	r2, #2
 8001056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	2307      	movs	r3, #7
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MPU9250_i2cRxCpltCallback+0xa0>)
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	2118      	movs	r1, #24
 800106c:	f017 fc70 	bl	8018950 <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 8001070:	f027 fa6e 	bl	8028550 <xTaskGetTickCount>
 8001074:	4602      	mov	r2, r0
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return res;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MPU9250_i2cRxCpltCallback+0x9c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	e014      	b.n	80010ac <MPU9250_i2cRxCpltCallback+0x90>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 8001084:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001088:	2b02      	cmp	r3, #2
 800108a:	d109      	bne.n	80010a0 <MPU9250_i2cRxCpltCallback+0x84>
		if(AK8963_calRawData() == MPU9250_Success){
 800108c:	f000 f90c 	bl	80012a8 <AK8963_calRawData>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d104      	bne.n	80010a0 <MPU9250_i2cRxCpltCallback+0x84>
			AK8963_calCalibValue();
 8001096:	f000 f945 	bl	8001324 <AK8963_calCalibValue>
			res = 2;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MPU9250_i2cRxCpltCallback+0x9c>)
 800109c:	2202      	movs	r2, #2
 800109e:	701a      	strb	r2, [r3, #0]
		}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <MPU9250_i2cRxCpltCallback+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	return res;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <MPU9250_i2cRxCpltCallback+0x9c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000fa4 	.word	0x24000fa4
 80010b8:	24000790 	.word	0x24000790
 80010bc:	2400101a 	.word	0x2400101a

080010c0 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 80010c4:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010c6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010d0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21b      	sxth	r3, r3
 80010da:	b29b      	uxth	r3, r3
 80010dc:	425b      	negs	r3, r3
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010e4:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010e8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <MPU9250_calRawData+0x100>)
 80010f2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	425b      	negs	r3, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	b21a      	sxth	r2, r3
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001106:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MPU9250_calRawData+0x100>)
 800110a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001114:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21b      	sxth	r3, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	425b      	negs	r3, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001128:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <MPU9250_calRawData+0x100>)
 800112c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001136:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001142:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001146:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001150:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MPU9250_calRawData+0x100>)
 800115c:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001160:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MPU9250_calRawData+0x100>)
 800116a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001176:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MPU9250_calRawData+0x100>)
 800117a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001184:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21a      	sxth	r2, r3
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001190:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MPU9250_calRawData+0x100>)
 8001194:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10b      	bne.n	80011b4 <MPU9250_calRawData+0xf4>
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MPU9250_calRawData+0x100>)
 800119e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <MPU9250_calRawData+0xf4>
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MPU9250_calRawData+0x100>)
 80011a8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <MPU9250_calRawData+0xf4>
 80011b0:	2300      	movs	r3, #0
 80011b2:	e000      	b.n	80011b6 <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	24000fa4 	.word	0x24000fa4

080011c4 <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011e2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 80011f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001200:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001206:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001214:	edd3 7a02 	vldr	s15, [r3, #8]
 8001218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 800121e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001224:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001232:	edd3 7a03 	vldr	s15, [r3, #12]
 8001236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012a4 <MPU9250_calCalibValue+0xe0>
 800123e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001244:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 800124a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001258:	edd3 7a03 	vldr	s15, [r3, #12]
 800125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001260:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012a4 <MPU9250_calCalibValue+0xe0>
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 800126a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001270:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 800127e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001286:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012a4 <MPU9250_calCalibValue+0xe0>
 800128a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <MPU9250_calCalibValue+0xdc>)
 8001290:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	24000fa4 	.word	0x24000fa4
 80012a4:	3c8efa35 	.word	0x3c8efa35

080012a8 <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <AK8963_calRawData+0x78>)
 80012ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <AK8963_calRawData+0x16>
 80012ba:	2300      	movs	r3, #0
 80012bc:	e02b      	b.n	8001316 <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <AK8963_calRawData+0x78>)
 80012c0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <AK8963_calRawData+0x78>)
 80012ca:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <AK8963_calRawData+0x78>)
 80012d6:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <AK8963_calRawData+0x78>)
 80012da:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <AK8963_calRawData+0x78>)
 80012e4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <AK8963_calRawData+0x78>)
 80012f0:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <AK8963_calRawData+0x78>)
 80012f4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <AK8963_calRawData+0x78>)
 80012fe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21b      	sxth	r3, r3
 8001308:	b29b      	uxth	r3, r3
 800130a:	425b      	negs	r3, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <AK8963_calRawData+0x78>)
 8001312:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	24000fa4 	.word	0x24000fa4

08001324 <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800132a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001338:	edd3 7a04 	vldr	s15, [r3, #16]
 800133c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001342:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800134c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001356:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800135c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800136a:	edd3 7a04 	vldr	s15, [r3, #16]
 800136e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001374:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800137e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 8001388:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800138e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 800139c:	edd3 7a04 	vldr	s15, [r3, #16]
 80013a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 80013a6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 80013b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80013b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <AK8963_calCalibValue+0xa4>)
 80013ba:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	24000fa4 	.word	0x24000fa4

080013cc <MPU9250_getMres>:

void MPU9250_getMres() {
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MPU9250_getMres+0x2c>)
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <MPU9250_getMres+0x12>
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d004      	beq.n	80013e6 <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 80013dc:	e007      	b.n	80013ee <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MPU9250_getMres+0x2c>)
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <MPU9250_getMres+0x30>)
 80013e2:	611a      	str	r2, [r3, #16]
		  break;
 80013e4:	e003      	b.n	80013ee <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <MPU9250_getMres+0x2c>)
 80013e8:	4a05      	ldr	r2, [pc, #20]	; (8001400 <MPU9250_getMres+0x34>)
 80013ea:	611a      	str	r2, [r3, #16]
		  break;
 80013ec:	bf00      	nop
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	24000fa4 	.word	0x24000fa4
 80013fc:	40bfebff 	.word	0x40bfebff
 8001400:	3fbfebff 	.word	0x3fbfebff

08001404 <MPU9250_getGres>:

void MPU9250_getGres() {
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MPU9250_getGres+0x50>)
 800140a:	795b      	ldrb	r3, [r3, #5]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d81b      	bhi.n	8001448 <MPU9250_getGres+0x44>
 8001410:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <MPU9250_getGres+0x14>)
 8001412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001416:	bf00      	nop
 8001418:	08001429 	.word	0x08001429
 800141c:	08001431 	.word	0x08001431
 8001420:	08001439 	.word	0x08001439
 8001424:	08001441 	.word	0x08001441
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MPU9250_getGres+0x50>)
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <MPU9250_getGres+0x54>)
 800142c:	60da      	str	r2, [r3, #12]
          break;
 800142e:	e00b      	b.n	8001448 <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MPU9250_getGres+0x50>)
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <MPU9250_getGres+0x58>)
 8001434:	60da      	str	r2, [r3, #12]
          break;
 8001436:	e007      	b.n	8001448 <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MPU9250_getGres+0x50>)
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <MPU9250_getGres+0x5c>)
 800143c:	60da      	str	r2, [r3, #12]
          break;
 800143e:	e003      	b.n	8001448 <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <MPU9250_getGres+0x50>)
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <MPU9250_getGres+0x60>)
 8001444:	60da      	str	r2, [r3, #12]
          break;
 8001446:	bf00      	nop
  }
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	24000fa4 	.word	0x24000fa4
 8001458:	3bfa0000 	.word	0x3bfa0000
 800145c:	3c7a0000 	.word	0x3c7a0000
 8001460:	3cfa0000 	.word	0x3cfa0000
 8001464:	3d7a0000 	.word	0x3d7a0000

08001468 <MPU9250_getAres>:


void MPU9250_getAres() {
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MPU9250_getAres+0x58>)
 800146e:	791b      	ldrb	r3, [r3, #4]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d81f      	bhi.n	80014b4 <MPU9250_getAres+0x4c>
 8001474:	a201      	add	r2, pc, #4	; (adr r2, 800147c <MPU9250_getAres+0x14>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	0800148d 	.word	0x0800148d
 8001480:	08001497 	.word	0x08001497
 8001484:	080014a1 	.word	0x080014a1
 8001488:	080014ab 	.word	0x080014ab
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MPU9250_getAres+0x58>)
 800148e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001492:	609a      	str	r2, [r3, #8]
          break;
 8001494:	e00e      	b.n	80014b4 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MPU9250_getAres+0x58>)
 8001498:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800149c:	609a      	str	r2, [r3, #8]
          break;
 800149e:	e009      	b.n	80014b4 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MPU9250_getAres+0x58>)
 80014a2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80014a6:	609a      	str	r2, [r3, #8]
          break;
 80014a8:	e004      	b.n	80014b4 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <MPU9250_getAres+0x58>)
 80014ac:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80014b0:	609a      	str	r2, [r3, #8]
          break;
 80014b2:	bf00      	nop
  }
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	24000fa4 	.word	0x24000fa4

080014c4 <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	216b      	movs	r1, #107	; 0x6b
 80014cc:	20d0      	movs	r0, #208	; 0xd0
 80014ce:	f000 fb3f 	bl	8001b50 <MPU9250_writeByte>
    HAL_Delay(10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f013 f974 	bl	80147c0 <HAL_Delay>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80014e2:	2200      	movs	r2, #0
 80014e4:	210a      	movs	r1, #10
 80014e6:	2018      	movs	r0, #24
 80014e8:	f000 fb32 	bl	8001b50 <MPU9250_writeByte>
	HAL_Delay(10);
 80014ec:	200a      	movs	r0, #10
 80014ee:	f013 f967 	bl	80147c0 <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80014f2:	220f      	movs	r2, #15
 80014f4:	210a      	movs	r1, #10
 80014f6:	2018      	movs	r0, #24
 80014f8:	f000 fb2a 	bl	8001b50 <MPU9250_writeByte>
	HAL_Delay(10);
 80014fc:	200a      	movs	r0, #10
 80014fe:	f013 f95f 	bl	80147c0 <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2203      	movs	r2, #3
 8001506:	2110      	movs	r1, #16
 8001508:	2018      	movs	r0, #24
 800150a:	f000 fb3f 	bl	8001b8c <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	3b80      	subs	r3, #128	; 0x80
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800151a:	eddf 6a25 	vldr	s13, [pc, #148]	; 80015b0 <MPU9250_initAK8963+0xd4>
 800151e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 800152c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001530:	797b      	ldrb	r3, [r7, #5]
 8001532:	3b80      	subs	r3, #128	; 0x80
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80015b0 <MPU9250_initAK8963+0xd4>
 8001540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 800154e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 8001552:	79bb      	ldrb	r3, [r7, #6]
 8001554:	3b80      	subs	r3, #128	; 0x80
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155e:	eddf 6a14 	vldr	s13, [pc, #80]	; 80015b0 <MPU9250_initAK8963+0xd4>
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800156a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 8001570:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001574:	2200      	movs	r2, #0
 8001576:	210a      	movs	r1, #10
 8001578:	2018      	movs	r0, #24
 800157a:	f000 fae9 	bl	8001b50 <MPU9250_writeByte>
	HAL_Delay(10);
 800157e:	200a      	movs	r0, #10
 8001580:	f013 f91e 	bl	80147c0 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 8001586:	799b      	ldrb	r3, [r3, #6]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b25a      	sxtb	r2, r3
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MPU9250_initAK8963+0xd8>)
 800158e:	79db      	ldrb	r3, [r3, #7]
 8001590:	b25b      	sxtb	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b25b      	sxtb	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	210a      	movs	r1, #10
 800159c:	2018      	movs	r0, #24
 800159e:	f000 fad7 	bl	8001b50 <MPU9250_writeByte>
	HAL_Delay(10);
 80015a2:	200a      	movs	r0, #10
 80015a4:	f013 f90c 	bl	80147c0 <HAL_Delay>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	43800000 	.word	0x43800000
 80015b4:	24000fa4 	.word	0x24000fa4

080015b8 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80015be:	2200      	movs	r2, #0
 80015c0:	216b      	movs	r1, #107	; 0x6b
 80015c2:	20d0      	movs	r0, #208	; 0xd0
 80015c4:	f000 fac4 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80015c8:	2064      	movs	r0, #100	; 0x64
 80015ca:	f013 f8f9 	bl	80147c0 <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80015ce:	2201      	movs	r2, #1
 80015d0:	216b      	movs	r1, #107	; 0x6b
 80015d2:	20d0      	movs	r0, #208	; 0xd0
 80015d4:	f000 fabc 	bl	8001b50 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 80015d8:	2203      	movs	r2, #3
 80015da:	211a      	movs	r1, #26
 80015dc:	20d0      	movs	r0, #208	; 0xd0
 80015de:	f000 fab7 	bl	8001b50 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80015e2:	2204      	movs	r2, #4
 80015e4:	2119      	movs	r1, #25
 80015e6:	20d0      	movs	r0, #208	; 0xd0
 80015e8:	f000 fab2 	bl	8001b50 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80015ec:	211b      	movs	r1, #27
 80015ee:	20d0      	movs	r0, #208	; 0xd0
 80015f0:	f000 faee 	bl	8001bd0 <MPU9250_readByte>
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f023 0302 	bic.w	r3, r3, #2
 80015fe:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f023 0318 	bic.w	r3, r3, #24
 8001606:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <MPU9250_initMPU9250+0xe4>)
 800160a:	795b      	ldrb	r3, [r3, #5]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	b25a      	sxtb	r2, r3
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4313      	orrs	r3, r2
 8001616:	b25b      	sxtb	r3, r3
 8001618:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	461a      	mov	r2, r3
 800161e:	211b      	movs	r1, #27
 8001620:	20d0      	movs	r0, #208	; 0xd0
 8001622:	f000 fa95 	bl	8001b50 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8001626:	211c      	movs	r1, #28
 8001628:	20d0      	movs	r0, #208	; 0xd0
 800162a:	f000 fad1 	bl	8001bd0 <MPU9250_readByte>
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f023 0318 	bic.w	r3, r3, #24
 8001638:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <MPU9250_initMPU9250+0xe4>)
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	b25a      	sxtb	r2, r3
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	4313      	orrs	r3, r2
 8001648:	b25b      	sxtb	r3, r3
 800164a:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	461a      	mov	r2, r3
 8001650:	211c      	movs	r1, #28
 8001652:	20d0      	movs	r0, #208	; 0xd0
 8001654:	f000 fa7c 	bl	8001b50 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8001658:	211d      	movs	r1, #29
 800165a:	20d0      	movs	r0, #208	; 0xd0
 800165c:	f000 fab8 	bl	8001bd0 <MPU9250_readByte>
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f023 030f 	bic.w	r3, r3, #15
 800166a:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f043 0303 	orr.w	r3, r3, #3
 8001672:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	461a      	mov	r2, r3
 8001678:	211d      	movs	r1, #29
 800167a:	20d0      	movs	r0, #208	; 0xd0
 800167c:	f000 fa68 	bl	8001b50 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001680:	2222      	movs	r2, #34	; 0x22
 8001682:	2137      	movs	r1, #55	; 0x37
 8001684:	20d0      	movs	r0, #208	; 0xd0
 8001686:	f000 fa63 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800168a:	2201      	movs	r2, #1
 800168c:	2138      	movs	r1, #56	; 0x38
 800168e:	20d0      	movs	r0, #208	; 0xd0
 8001690:	f000 fa5e 	bl	8001b50 <MPU9250_writeByte>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24000fa4 	.word	0x24000fa4

080016a0 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b094      	sub	sp, #80	; 0x50
 80016a4:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	216b      	movs	r1, #107	; 0x6b
 80016c2:	20d0      	movs	r0, #208	; 0xd0
 80016c4:	f000 fa44 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(100);
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	f013 f879 	bl	80147c0 <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 80016ce:	2201      	movs	r2, #1
 80016d0:	216b      	movs	r1, #107	; 0x6b
 80016d2:	20d0      	movs	r0, #208	; 0xd0
 80016d4:	f000 fa3c 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 80016d8:	2200      	movs	r2, #0
 80016da:	216c      	movs	r1, #108	; 0x6c
 80016dc:	20d0      	movs	r0, #208	; 0xd0
 80016de:	f000 fa37 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(200);
 80016e2:	20c8      	movs	r0, #200	; 0xc8
 80016e4:	f013 f86c 	bl	80147c0 <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 80016e8:	2200      	movs	r2, #0
 80016ea:	2138      	movs	r1, #56	; 0x38
 80016ec:	20d0      	movs	r0, #208	; 0xd0
 80016ee:	f000 fa2f 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 80016f2:	2200      	movs	r2, #0
 80016f4:	2123      	movs	r1, #35	; 0x23
 80016f6:	20d0      	movs	r0, #208	; 0xd0
 80016f8:	f000 fa2a 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 80016fc:	2200      	movs	r2, #0
 80016fe:	216b      	movs	r1, #107	; 0x6b
 8001700:	20d0      	movs	r0, #208	; 0xd0
 8001702:	f000 fa25 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001706:	2200      	movs	r2, #0
 8001708:	2124      	movs	r1, #36	; 0x24
 800170a:	20d0      	movs	r0, #208	; 0xd0
 800170c:	f000 fa20 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001710:	2200      	movs	r2, #0
 8001712:	216a      	movs	r1, #106	; 0x6a
 8001714:	20d0      	movs	r0, #208	; 0xd0
 8001716:	f000 fa1b 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 800171a:	220c      	movs	r2, #12
 800171c:	216a      	movs	r1, #106	; 0x6a
 800171e:	20d0      	movs	r0, #208	; 0xd0
 8001720:	f000 fa16 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(15);
 8001724:	200f      	movs	r0, #15
 8001726:	f013 f84b 	bl	80147c0 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 800172a:	2201      	movs	r2, #1
 800172c:	211a      	movs	r1, #26
 800172e:	20d0      	movs	r0, #208	; 0xd0
 8001730:	f000 fa0e 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001734:	2200      	movs	r2, #0
 8001736:	2119      	movs	r1, #25
 8001738:	20d0      	movs	r0, #208	; 0xd0
 800173a:	f000 fa09 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800173e:	2200      	movs	r2, #0
 8001740:	211b      	movs	r1, #27
 8001742:	20d0      	movs	r0, #208	; 0xd0
 8001744:	f000 fa04 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001748:	2200      	movs	r2, #0
 800174a:	211c      	movs	r1, #28
 800174c:	20d0      	movs	r0, #208	; 0xd0
 800174e:	f000 f9ff 	bl	8001b50 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	216a      	movs	r1, #106	; 0x6a
 8001756:	20d0      	movs	r0, #208	; 0xd0
 8001758:	f000 f9fa 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 800175c:	2278      	movs	r2, #120	; 0x78
 800175e:	2123      	movs	r1, #35	; 0x23
 8001760:	20d0      	movs	r0, #208	; 0xd0
 8001762:	f000 f9f5 	bl	8001b50 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001766:	2028      	movs	r0, #40	; 0x28
 8001768:	f013 f82a 	bl	80147c0 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800176c:	2200      	movs	r2, #0
 800176e:	2123      	movs	r1, #35	; 0x23
 8001770:	20d0      	movs	r0, #208	; 0xd0
 8001772:	f000 f9ed 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001776:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800177a:	2202      	movs	r2, #2
 800177c:	2172      	movs	r1, #114	; 0x72
 800177e:	20d0      	movs	r0, #208	; 0xd0
 8001780:	f000 fa04 	bl	8001b8c <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001784:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b21a      	sxth	r2, r3
 800178c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21b      	sxth	r3, r3
 8001796:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 800179a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800179e:	4ab3      	ldr	r2, [pc, #716]	; (8001a6c <MPU9250_calibrateMPU9250+0x3cc>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80017b0:	e071      	b.n	8001896 <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80017b2:	2300      	movs	r3, #0
 80017b4:	813b      	strh	r3, [r7, #8]
 80017b6:	2300      	movs	r3, #0
 80017b8:	817b      	strh	r3, [r7, #10]
 80017ba:	2300      	movs	r3, #0
 80017bc:	81bb      	strh	r3, [r7, #12]
 80017be:	2300      	movs	r3, #0
 80017c0:	803b      	strh	r3, [r7, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	807b      	strh	r3, [r7, #2]
 80017c6:	2300      	movs	r3, #0
 80017c8:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80017ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ce:	220c      	movs	r2, #12
 80017d0:	2174      	movs	r1, #116	; 0x74
 80017d2:	20d0      	movs	r0, #208	; 0xd0
 80017d4:	f000 f9da 	bl	8001b8c <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80017d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	b21a      	sxth	r2, r3
 80017e0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80017ec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001800:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800180c:	b21b      	sxth	r3, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	b21b      	sxth	r3, r3
 8001812:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001814:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	b21a      	sxth	r2, r3
 800181c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	b21b      	sxth	r3, r3
 8001826:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001828:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b21a      	sxth	r2, r3
 8001830:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001834:	b21b      	sxth	r3, r3
 8001836:	4313      	orrs	r3, r2
 8001838:	b21b      	sxth	r3, r3
 800183a:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 800183c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21a      	sxth	r2, r3
 8001844:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001860:	4413      	add	r3, r2
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001874:	4413      	add	r3, r2
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800187e:	4413      	add	r3, r2
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001884:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 800188c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001890:	3301      	adds	r3, #1
 8001892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001896:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800189a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800189e:	429a      	cmp	r2, r3
 80018a0:	d387      	bcc.n	80017b2 <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80018a2:	6a3a      	ldr	r2, [r7, #32]
 80018a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ac:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 80018ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 80018c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 80018d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 80018de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 80018ea:	4b61      	ldr	r3, [pc, #388]	; (8001a70 <MPU9250_calibrateMPU9250+0x3d0>)
 80018ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80018f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fc:	ee17 3a90 	vmov	r3, s15
 8001900:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	dd05      	ble.n	8001916 <MPU9250_calibrateMPU9250+0x276>
 800190a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800190c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
 8001914:	e004      	b.n	8001920 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001918:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800191c:	4413      	add	r3, r2
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	425b      	negs	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	da00      	bge.n	800192a <MPU9250_calibrateMPU9250+0x28a>
 8001928:	3303      	adds	r3, #3
 800192a:	109b      	asrs	r3, r3, #2
 800192c:	121b      	asrs	r3, r3, #8
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	425b      	negs	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	da00      	bge.n	800193e <MPU9250_calibrateMPU9250+0x29e>
 800193c:	3303      	adds	r3, #3
 800193e:	109b      	asrs	r3, r3, #2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	425b      	negs	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	da00      	bge.n	8001950 <MPU9250_calibrateMPU9250+0x2b0>
 800194e:	3303      	adds	r3, #3
 8001950:	109b      	asrs	r3, r3, #2
 8001952:	121b      	asrs	r3, r3, #8
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	425b      	negs	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	da00      	bge.n	8001964 <MPU9250_calibrateMPU9250+0x2c4>
 8001962:	3303      	adds	r3, #3
 8001964:	109b      	asrs	r3, r3, #2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	425b      	negs	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	da00      	bge.n	8001976 <MPU9250_calibrateMPU9250+0x2d6>
 8001974:	3303      	adds	r3, #3
 8001976:	109b      	asrs	r3, r3, #2
 8001978:	121b      	asrs	r3, r3, #8
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	425b      	negs	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	da00      	bge.n	800198a <MPU9250_calibrateMPU9250+0x2ea>
 8001988:	3303      	adds	r3, #3
 800198a:	109b      	asrs	r3, r3, #2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8001992:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001996:	461a      	mov	r2, r3
 8001998:	2113      	movs	r1, #19
 800199a:	20d0      	movs	r0, #208	; 0xd0
 800199c:	f000 f8d8 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 80019a0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80019a4:	461a      	mov	r2, r3
 80019a6:	2114      	movs	r1, #20
 80019a8:	20d0      	movs	r0, #208	; 0xd0
 80019aa:	f000 f8d1 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 80019ae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80019b2:	461a      	mov	r2, r3
 80019b4:	2115      	movs	r1, #21
 80019b6:	20d0      	movs	r0, #208	; 0xd0
 80019b8:	f000 f8ca 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 80019bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019c0:	461a      	mov	r2, r3
 80019c2:	2116      	movs	r1, #22
 80019c4:	20d0      	movs	r0, #208	; 0xd0
 80019c6:	f000 f8c3 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 80019ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019ce:	461a      	mov	r2, r3
 80019d0:	2117      	movs	r1, #23
 80019d2:	20d0      	movs	r0, #208	; 0xd0
 80019d4:	f000 f8bc 	bl	8001b50 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 80019d8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80019dc:	461a      	mov	r2, r3
 80019de:	2118      	movs	r1, #24
 80019e0:	20d0      	movs	r0, #208	; 0xd0
 80019e2:	f000 f8b5 	bl	8001b50 <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80019f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019f6:	2202      	movs	r2, #2
 80019f8:	2177      	movs	r1, #119	; 0x77
 80019fa:	20d0      	movs	r0, #208	; 0xd0
 80019fc:	f000 f8c6 	bl	8001b8c <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a00:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8001a12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a16:	2202      	movs	r2, #2
 8001a18:	217a      	movs	r1, #122	; 0x7a
 8001a1a:	20d0      	movs	r0, #208	; 0xd0
 8001a1c:	f000 f8b6 	bl	8001b8c <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a20:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8001a32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a36:	2202      	movs	r2, #2
 8001a38:	217d      	movs	r1, #125	; 0x7d
 8001a3a:	20d0      	movs	r0, #208	; 0xd0
 8001a3c:	f000 f8a6 	bl	8001b8c <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a40:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001a52:	2301      	movs	r3, #1
 8001a54:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001a56:	2300      	movs	r3, #0
 8001a58:	743b      	strb	r3, [r7, #16]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	747b      	strb	r3, [r7, #17]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001a68:	e01e      	b.n	8001aa8 <MPU9250_calibrateMPU9250+0x408>
 8001a6a:	bf00      	nop
 8001a6c:	aaaaaaab 	.word	0xaaaaaaab
 8001a70:	24000fa4 	.word	0x24000fa4
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001a74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001a7e:	4413      	add	r3, r2
 8001a80:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001a84:	461a      	mov	r2, r3
 8001a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <MPU9250_calibrateMPU9250+0x3fe>
 8001a8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001a96:	4413      	add	r3, r2
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 8001a9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001aa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d9e1      	bls.n	8001a74 <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da00      	bge.n	8001aba <MPU9250_calibrateMPU9250+0x41a>
 8001ab8:	3307      	adds	r3, #7
 8001aba:	10db      	asrs	r3, r3, #3
 8001abc:	425b      	negs	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da00      	bge.n	8001acc <MPU9250_calibrateMPU9250+0x42c>
 8001aca:	3307      	adds	r3, #7
 8001acc:	10db      	asrs	r3, r3, #3
 8001ace:	425b      	negs	r3, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <MPU9250_calibrateMPU9250+0x43e>
 8001adc:	3307      	adds	r3, #7
 8001ade:	10db      	asrs	r3, r3, #3
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	121b      	asrs	r3, r3, #8
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001af8:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001afc:	7c3b      	ldrb	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	121b      	asrs	r3, r3, #8
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b18:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001b1c:	7c7b      	ldrb	r3, [r7, #17]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	121b      	asrs	r3, r3, #8
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b38:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b3c:	7cbb      	ldrb	r3, [r7, #18]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	; 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af04      	add	r7, sp, #16
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	71bb      	strb	r3, [r7, #6]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MPU9250_writeByte+0x38>)
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	b299      	uxth	r1, r3
 8001b6a:	79bb      	ldrb	r3, [r7, #6]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	2364      	movs	r3, #100	; 0x64
 8001b70:	9302      	str	r3, [sp, #8]
 8001b72:	2301      	movs	r3, #1
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	1d7b      	adds	r3, r7, #5
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f016 fc24 	bl	80183c8 <HAL_I2C_Mem_Write>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	24000fa4 	.word	0x24000fa4

08001b8c <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	71bb      	strb	r3, [r7, #6]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MPU9250_readBytes+0x40>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	b299      	uxth	r1, r3
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	b29c      	uxth	r4, r3
 8001bac:	797b      	ldrb	r3, [r7, #5]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2264      	movs	r2, #100	; 0x64
 8001bb2:	9202      	str	r2, [sp, #8]
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	f016 fd17 	bl	80185f0 <HAL_I2C_Mem_Read>
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	24000fa4 	.word	0x24000fa4

08001bd0 <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460a      	mov	r2, r1
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 8001be0:	f107 030f 	add.w	r3, r7, #15
 8001be4:	79b9      	ldrb	r1, [r7, #6]
 8001be6:	79f8      	ldrb	r0, [r7, #7]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f7ff ffcf 	bl	8001b8c <MPU9250_readBytes>
	return data;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <BME280_init>:
#include "bme280.h"
#include "math.h"

BME280_t bme280 = {0,};

void BME280_init(I2C_HandleTypeDef *hi2c, uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	4608      	mov	r0, r1
 8001c02:	4611      	mov	r1, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	70fb      	strb	r3, [r7, #3]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70bb      	strb	r3, [r7, #2]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	707b      	strb	r3, [r7, #1]
	bme280.hi2c = hi2c;
 8001c12:	4a74      	ldr	r2, [pc, #464]	; (8001de4 <BME280_init+0x1ec>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6013      	str	r3, [r2, #0]
	BME280_reset();
 8001c18:	f000 f962 	bl	8001ee0 <BME280_reset>
	// Configure the BME280
	// Set H oversampling rate
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 8001c1c:	78bb      	ldrb	r3, [r7, #2]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	21f2      	movs	r1, #242	; 0xf2
 8001c28:	20ec      	movs	r0, #236	; 0xec
 8001c2a:	f000 fb8d 	bl	8002348 <BME280_writeByte>
	// Set T and P oversampling rates and sensor mode
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 8001c2e:	787b      	ldrb	r3, [r7, #1]
 8001c30:	015b      	lsls	r3, r3, #5
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	21f4      	movs	r1, #244	; 0xf4
 8001c4c:	20ec      	movs	r0, #236	; 0xec
 8001c4e:	f000 fb7b 	bl	8002348 <BME280_writeByte>
	// Set standby time interval in normal mode and bandwidth
	BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 8001c52:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	b25a      	sxtb	r2, r3
 8001c5a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	21f5      	movs	r1, #245	; 0xf5
 8001c6c:	20ec      	movs	r0, #236	; 0xec
 8001c6e:	f000 fb6b 	bl	8002348 <BME280_writeByte>

	//wait.
	HAL_Delay(50);
 8001c72:	2032      	movs	r0, #50	; 0x32
 8001c74:	f012 fda4 	bl	80147c0 <HAL_Delay>
	uint8_t calib[26];
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	221a      	movs	r2, #26
 8001c7e:	2188      	movs	r1, #136	; 0x88
 8001c80:	20ec      	movs	r0, #236	; 0xec
 8001c82:	f000 fb7f 	bl	8002384 <BME280_readBytes>
	bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 8001c86:	7a7b      	ldrb	r3, [r7, #9]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	7a3b      	ldrb	r3, [r7, #8]
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <BME280_init+0x1ec>)
 8001c98:	821a      	strh	r2, [r3, #16]
	bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	7abb      	ldrb	r3, [r7, #10]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <BME280_init+0x1ec>)
 8001caa:	831a      	strh	r2, [r3, #24]
	bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 8001cac:	7b7b      	ldrb	r3, [r7, #13]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	7b3b      	ldrb	r3, [r7, #12]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <BME280_init+0x1ec>)
 8001cbc:	835a      	strh	r2, [r3, #26]
	bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	7bbb      	ldrb	r3, [r7, #14]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <BME280_init+0x1ec>)
 8001cd0:	825a      	strh	r2, [r3, #18]
	bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 8001cd2:	7c7b      	ldrb	r3, [r7, #17]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	7c3b      	ldrb	r3, [r7, #16]
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <BME280_init+0x1ec>)
 8001ce2:	839a      	strh	r2, [r3, #28]
	bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	7cbb      	ldrb	r3, [r7, #18]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <BME280_init+0x1ec>)
 8001cf4:	83da      	strh	r2, [r3, #30]
	bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 8001cf6:	7d7b      	ldrb	r3, [r7, #21]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	7d3b      	ldrb	r3, [r7, #20]
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <BME280_init+0x1ec>)
 8001d06:	841a      	strh	r2, [r3, #32]
	bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	7dbb      	ldrb	r3, [r7, #22]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <BME280_init+0x1ec>)
 8001d18:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 8001d1a:	7e7b      	ldrb	r3, [r7, #25]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	7e3b      	ldrb	r3, [r7, #24]
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <BME280_init+0x1ec>)
 8001d2a:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 8001d2c:	7efb      	ldrb	r3, [r7, #27]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	7ebb      	ldrb	r3, [r7, #26]
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <BME280_init+0x1ec>)
 8001d3c:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 8001d3e:	7f7b      	ldrb	r3, [r7, #29]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	7f3b      	ldrb	r3, [r7, #28]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <BME280_init+0x1ec>)
 8001d4e:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 8001d50:	7ffb      	ldrb	r3, [r7, #31]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	7fbb      	ldrb	r3, [r7, #30]
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <BME280_init+0x1ec>)
 8001d60:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280._dig_H1 = calib[25];
 8001d62:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <BME280_init+0x1ec>)
 8001d68:	735a      	strb	r2, [r3, #13]
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	2207      	movs	r2, #7
 8001d70:	21e1      	movs	r1, #225	; 0xe1
 8001d72:	20ec      	movs	r0, #236	; 0xec
 8001d74:	f000 fb06 	bl	8002384 <BME280_readBytes>
	bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 8001d78:	7a7b      	ldrb	r3, [r7, #9]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	7a3b      	ldrb	r3, [r7, #8]
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <BME280_init+0x1ec>)
 8001d88:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280._dig_H3 = calib[2];
 8001d8a:	7aba      	ldrb	r2, [r7, #10]
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <BME280_init+0x1ec>)
 8001d8e:	739a      	strb	r2, [r3, #14]
	bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	021a      	lsls	r2, r3, #8
 8001d94:	7b3b      	ldrb	r3, [r7, #12]
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	111b      	asrs	r3, r3, #4
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <BME280_init+0x1ec>)
 8001da2:	829a      	strh	r2, [r3, #20]
	bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 8001da4:	7b7b      	ldrb	r3, [r7, #13]
 8001da6:	021a      	lsls	r2, r3, #8
 8001da8:	7b3b      	ldrb	r3, [r7, #12]
 8001daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dae:	4313      	orrs	r3, r2
 8001db0:	111b      	asrs	r3, r3, #4
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <BME280_init+0x1ec>)
 8001db6:	82da      	strh	r2, [r3, #22]
	bme280._dig_H6 = calib[6];
 8001db8:	7bba      	ldrb	r2, [r7, #14]
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <BME280_init+0x1ec>)
 8001dbc:	73da      	strb	r2, [r3, #15]

	/* dump trash value */
	for(int i=0; i<10; i++){
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	e008      	b.n	8001dd6 <BME280_init+0x1de>
		BME280_readTemperature();
 8001dc4:	f000 f895 	bl	8001ef2 <BME280_readTemperature>
		BME280_readPressure();
 8001dc8:	f000 f8a9 	bl	8001f1e <BME280_readPressure>
		BME280_readHumidity();
 8001dcc:	f000 f8bd 	bl	8001f4a <BME280_readHumidity>
	for(int i=0; i<10; i++){
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	2b09      	cmp	r3, #9
 8001dda:	ddf3      	ble.n	8001dc4 <BME280_init+0x1cc>
	}
}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	24000794 	.word	0x24000794

08001de8 <BME280_readIT>:

void BME280_readIT(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
	if(bm_i2cFlag == bm_i2cIdle){
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <BME280_readIT+0x30>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10e      	bne.n	8001e14 <BME280_readIT+0x2c>
		HAL_I2C_Mem_Read_IT(bme280.hi2c, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <BME280_readIT+0x34>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <BME280_readIT+0x38>)
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2301      	movs	r3, #1
 8001e04:	22f7      	movs	r2, #247	; 0xf7
 8001e06:	21ec      	movs	r1, #236	; 0xec
 8001e08:	f016 fd0c 	bl	8018824 <HAL_I2C_Mem_Read_IT>
		bm_i2cFlag = bm_i2cBME280;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <BME280_readIT+0x30>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
		return;
 8001e12:	bf00      	nop
	}
}
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2400133c 	.word	0x2400133c
 8001e1c:	24000794 	.word	0x24000794
 8001e20:	24000798 	.word	0x24000798
 8001e24:	00000000 	.word	0x00000000

08001e28 <BME280_i2cRxCpltCallback>:

uint8_t BME280_i2cRxCpltCallback(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return 0;
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <BME280_i2cRxCpltCallback+0xb0>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d001      	beq.n	8001e38 <BME280_i2cRxCpltCallback+0x10>
 8001e34:	2300      	movs	r3, #0
 8001e36:	e044      	b.n	8001ec2 <BME280_i2cRxCpltCallback+0x9a>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e3a:	791b      	ldrb	r3, [r3, #4]
 8001e3c:	061a      	lsls	r2, r3, #24
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e40:	795b      	ldrb	r3, [r3, #5]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	431a      	orrs	r2, r3
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e48:	799b      	ldrb	r3, [r3, #6]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	131b      	asrs	r3, r3, #12
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e58:	79db      	ldrb	r3, [r3, #7]
 8001e5a:	061a      	lsls	r2, r3, #24
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e5e:	7a1b      	ldrb	r3, [r3, #8]
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e66:	7a5b      	ldrb	r3, [r3, #9]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	131b      	asrs	r3, r3, #12
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e70:	6353      	str	r3, [r2, #52]	; 0x34

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f8b8 	bl	8001fec <BME280_compensate_P>
 8001e7c:	ee07 0a90 	vmov	s15, r0
 8001e80:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e84:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001ec8 <BME280_i2cRxCpltCallback+0xa0>
 8001e88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e92:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f86a 	bl	8001f74 <BME280_compensate_T>
 8001ea0:	ee07 0a90 	vmov	s15, r0
 8001ea4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ea8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001ed0 <BME280_i2cRxCpltCallback+0xa8>
 8001eac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001eb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001eb6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

    bm_i2cFlag = bm_i2cIdle;
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <BME280_i2cRxCpltCallback+0xb0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	40d90000 	.word	0x40d90000
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40590000 	.word	0x40590000
 8001ed8:	2400133c 	.word	0x2400133c
 8001edc:	24000794 	.word	0x24000794

08001ee0 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 8001ee4:	22b6      	movs	r2, #182	; 0xb6
 8001ee6:	21e0      	movs	r1, #224	; 0xe0
 8001ee8:	20ec      	movs	r0, #236	; 0xec
 8001eea:	f000 fa2d 	bl	8002348 <BME280_writeByte>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <BME280_readTemperature>:

int32_t BME280_readTemperature(){
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_TEMP_MSB, 3, &rawData[0]);
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2203      	movs	r2, #3
 8001efc:	21fa      	movs	r1, #250	; 0xfa
 8001efe:	20ec      	movs	r0, #236	; 0xec
 8001f00:	f000 fa40 	bl	8002384 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8001f04:	793b      	ldrb	r3, [r7, #4]
 8001f06:	061a      	lsls	r2, r3, #24
 8001f08:	797b      	ldrb	r3, [r7, #5]
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	79bb      	ldrb	r3, [r7, #6]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	4313      	orrs	r3, r2
 8001f14:	131b      	asrs	r3, r3, #12
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <BME280_readPressure>:

int32_t BME280_readPressure(){
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_PRESS_MSB, 3, &rawData[0]);
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2203      	movs	r2, #3
 8001f28:	21f7      	movs	r1, #247	; 0xf7
 8001f2a:	20ec      	movs	r0, #236	; 0xec
 8001f2c:	f000 fa2a 	bl	8002384 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8001f30:	793b      	ldrb	r3, [r7, #4]
 8001f32:	061a      	lsls	r2, r3, #24
 8001f34:	797b      	ldrb	r3, [r7, #5]
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	131b      	asrs	r3, r3, #12
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <BME280_readHumidity>:
int16_t BME280_readHumidity(){
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_HUM_MSB, 2, &rawData[0]);
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2202      	movs	r2, #2
 8001f54:	21fd      	movs	r1, #253	; 0xfd
 8001f56:	20ec      	movs	r0, #236	; 0xec
 8001f58:	f000 fa14 	bl	8002384 <BME280_readBytes>
	  return (int16_t) (((int16_t) rawData[0] << 8 | rawData[1]) );
 8001f5c:	793b      	ldrb	r3, [r7, #4]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	797b      	ldrb	r3, [r7, #5]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b21b      	sxth	r3, r3
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <BME280_compensate_T>:



// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	10da      	asrs	r2, r3, #3
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001f82:	8a1b      	ldrh	r3, [r3, #16]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001f8a:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	12db      	asrs	r3, r3, #11
 8001f94:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	111b      	asrs	r3, r3, #4
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001f9c:	8a12      	ldrh	r2, [r2, #16]
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	1112      	asrs	r2, r2, #4
 8001fa4:	4910      	ldr	r1, [pc, #64]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001fa6:	8a09      	ldrh	r1, [r1, #16]
 8001fa8:	1a52      	subs	r2, r2, r1
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	131b      	asrs	r3, r3, #12
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001fb2:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	139b      	asrs	r3, r3, #14
 8001fbc:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
	  T = (bme280._t_fine * 5 + 128) >> 8;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <BME280_compensate_T+0x74>)
 8001fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3380      	adds	r3, #128	; 0x80
 8001fd4:	121b      	asrs	r3, r3, #8
 8001fd6:	60fb      	str	r3, [r7, #12]
	  return T;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	24000794 	.word	0x24000794

08001fec <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 8001fec:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001ff0:	b088      	sub	sp, #32
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <BME280_compensate_P+0x1a0>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002000:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002004:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002008:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	fb02 f203 	mul.w	r2, r2, r3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	441a      	add	r2, r3
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fba1 3403 	umull	r3, r4, r1, r3
 8002026:	4422      	add	r2, r4
 8002028:	4614      	mov	r4, r2
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <BME280_compensate_P+0x1a0>)
 800202c:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8002030:	b211      	sxth	r1, r2
 8002032:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002036:	fb01 f504 	mul.w	r5, r1, r4
 800203a:	fb03 f002 	mul.w	r0, r3, r2
 800203e:	4428      	add	r0, r5
 8002040:	fba3 3401 	umull	r3, r4, r3, r1
 8002044:	1902      	adds	r2, r0, r4
 8002046:	4614      	mov	r4, r2
 8002048:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800204c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 8002050:	4b4e      	ldr	r3, [pc, #312]	; (800218c <BME280_compensate_P+0x1a0>)
 8002052:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002056:	b21b      	sxth	r3, r3
 8002058:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	fb04 f102 	mul.w	r1, r4, r2
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	fb03 f202 	mul.w	r2, r3, r2
 8002068:	1888      	adds	r0, r1, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	fba2 1203 	umull	r1, r2, r2, r3
 8002070:	1883      	adds	r3, r0, r2
 8002072:	461a      	mov	r2, r3
 8002074:	f04f 0500 	mov.w	r5, #0
 8002078:	f04f 0600 	mov.w	r6, #0
 800207c:	0456      	lsls	r6, r2, #17
 800207e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8002082:	044d      	lsls	r5, r1, #17
 8002084:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002088:	186b      	adds	r3, r5, r1
 800208a:	eb46 0402 	adc.w	r4, r6, r2
 800208e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <BME280_compensate_P+0x1a0>)
 8002094:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002098:	b219      	sxth	r1, r3
 800209a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800209e:	f04f 0500 	mov.w	r5, #0
 80020a2:	f04f 0600 	mov.w	r6, #0
 80020a6:	00ce      	lsls	r6, r1, #3
 80020a8:	2500      	movs	r5, #0
 80020aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80020ae:	186b      	adds	r3, r5, r1
 80020b0:	eb46 0402 	adc.w	r4, r6, r2
 80020b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	fb02 f203 	mul.w	r2, r2, r3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	441a      	add	r2, r3
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fba1 3403 	umull	r3, r4, r1, r3
 80020d2:	4422      	add	r2, r4
 80020d4:	4614      	mov	r4, r2
 80020d6:	4a2d      	ldr	r2, [pc, #180]	; (800218c <BME280_compensate_P+0x1a0>)
 80020d8:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 80020dc:	b211      	sxth	r1, r2
 80020de:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80020e2:	fb01 f504 	mul.w	r5, r1, r4
 80020e6:	fb03 f002 	mul.w	r0, r3, r2
 80020ea:	4428      	add	r0, r5
 80020ec:	fba3 3401 	umull	r3, r4, r3, r1
 80020f0:	1902      	adds	r2, r0, r4
 80020f2:	4614      	mov	r4, r2
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	0a19      	lsrs	r1, r3, #8
 80020fe:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002102:	1222      	asrs	r2, r4, #8
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <BME280_compensate_P+0x1a0>)
 8002106:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800210a:	b21b      	sxth	r3, r3
 800210c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002110:	69b8      	ldr	r0, [r7, #24]
 8002112:	fb04 f500 	mul.w	r5, r4, r0
 8002116:	69f8      	ldr	r0, [r7, #28]
 8002118:	fb03 f000 	mul.w	r0, r3, r0
 800211c:	4428      	add	r0, r5
 800211e:	69bd      	ldr	r5, [r7, #24]
 8002120:	fba5 5603 	umull	r5, r6, r5, r3
 8002124:	1983      	adds	r3, r0, r6
 8002126:	461e      	mov	r6, r3
 8002128:	f04f 0b00 	mov.w	fp, #0
 800212c:	f04f 0c00 	mov.w	ip, #0
 8002130:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002134:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002138:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 800213c:	eb1b 0301 	adds.w	r3, fp, r1
 8002140:	eb4c 0402 	adc.w	r4, ip, r2
 8002144:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 8002148:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800214c:	1c19      	adds	r1, r3, #0
 800214e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <BME280_compensate_P+0x1a0>)
 8002154:	8a5b      	ldrh	r3, [r3, #18]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f04f 0400 	mov.w	r4, #0
 800215c:	fb03 f502 	mul.w	r5, r3, r2
 8002160:	fb01 f004 	mul.w	r0, r1, r4
 8002164:	4428      	add	r0, r5
 8002166:	fba1 3403 	umull	r3, r4, r1, r3
 800216a:	1902      	adds	r2, r0, r4
 800216c:	4614      	mov	r4, r2
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	1061      	asrs	r1, r4, #1
 8002178:	17e2      	asrs	r2, r4, #31
 800217a:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 800217e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002182:	4323      	orrs	r3, r4
 8002184:	d104      	bne.n	8002190 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 8002186:	2300      	movs	r3, #0
 8002188:	e0d7      	b.n	800233a <BME280_compensate_P+0x34e>
 800218a:	bf00      	nop
 800218c:	24000794 	.word	0x24000794
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002196:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800219a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	ea4f 0963 	mov.w	r9, r3, asr #1
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80021aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80021ae:	4645      	mov	r5, r8
 80021b0:	464e      	mov	r6, r9
 80021b2:	1aed      	subs	r5, r5, r3
 80021b4:	eb66 0604 	sbc.w	r6, r6, r4
 80021b8:	46a8      	mov	r8, r5
 80021ba:	46b1      	mov	r9, r6
 80021bc:	eb18 0308 	adds.w	r3, r8, r8
 80021c0:	eb49 0409 	adc.w	r4, r9, r9
 80021c4:	4698      	mov	r8, r3
 80021c6:	46a1      	mov	r9, r4
 80021c8:	eb18 0805 	adds.w	r8, r8, r5
 80021cc:	eb49 0906 	adc.w	r9, r9, r6
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80021dc:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80021e0:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80021e4:	eb18 0801 	adds.w	r8, r8, r1
 80021e8:	eb49 0902 	adc.w	r9, r9, r2
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80021f8:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80021fc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002200:	4688      	mov	r8, r1
 8002202:	4691      	mov	r9, r2
 8002204:	eb18 0805 	adds.w	r8, r8, r5
 8002208:	eb49 0906 	adc.w	r9, r9, r6
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002218:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800221c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002220:	4688      	mov	r8, r1
 8002222:	4691      	mov	r9, r2
 8002224:	eb18 0005 	adds.w	r0, r8, r5
 8002228:	eb49 0106 	adc.w	r1, r9, r6
 800222c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002230:	f7fe fa6a 	bl	8000708 <__aeabi_ldivmod>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <BME280_compensate_P+0x358>)
 800223e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002242:	b219      	sxth	r1, r3
 8002244:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002248:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	f04f 0400 	mov.w	r4, #0
 8002254:	0b6b      	lsrs	r3, r5, #13
 8002256:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800225a:	1374      	asrs	r4, r6, #13
 800225c:	fb03 f502 	mul.w	r5, r3, r2
 8002260:	fb01 f004 	mul.w	r0, r1, r4
 8002264:	4428      	add	r0, r5
 8002266:	fba1 1203 	umull	r1, r2, r1, r3
 800226a:	1883      	adds	r3, r0, r2
 800226c:	461a      	mov	r2, r3
 800226e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	f04f 0400 	mov.w	r4, #0
 800227a:	0b6b      	lsrs	r3, r5, #13
 800227c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002280:	1374      	asrs	r4, r6, #13
 8002282:	fb03 f502 	mul.w	r5, r3, r2
 8002286:	fb01 f004 	mul.w	r0, r1, r4
 800228a:	4428      	add	r0, r5
 800228c:	fba1 1203 	umull	r1, r2, r1, r3
 8002290:	1883      	adds	r3, r0, r2
 8002292:	461a      	mov	r2, r3
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	f04f 0400 	mov.w	r4, #0
 800229c:	0e4b      	lsrs	r3, r1, #25
 800229e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80022a2:	1654      	asrs	r4, r2, #25
 80022a4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <BME280_compensate_P+0x358>)
 80022aa:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80022ae:	b21b      	sxth	r3, r3
 80022b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	fb04 f102 	mul.w	r1, r4, r2
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	fb03 f202 	mul.w	r2, r3, r2
 80022c0:	1888      	adds	r0, r1, r2
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	fba2 1203 	umull	r1, r2, r2, r3
 80022c8:	1883      	adds	r3, r0, r2
 80022ca:	461a      	mov	r2, r3
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	f04f 0400 	mov.w	r4, #0
 80022d4:	0ccb      	lsrs	r3, r1, #19
 80022d6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80022da:	14d4      	asrs	r4, r2, #19
 80022dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 80022e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80022e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80022e8:	eb11 0803 	adds.w	r8, r1, r3
 80022ec:	eb42 0904 	adc.w	r9, r2, r4
 80022f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80022f4:	eb13 0508 	adds.w	r5, r3, r8
 80022f8:	eb44 0609 	adc.w	r6, r4, r9
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	0a29      	lsrs	r1, r5, #8
 8002306:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800230a:	1232      	asrs	r2, r6, #8
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <BME280_compensate_P+0x358>)
 800230e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002312:	b21d      	sxth	r5, r3
 8002314:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002318:	f04f 0800 	mov.w	r8, #0
 800231c:	f04f 0900 	mov.w	r9, #0
 8002320:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002324:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002328:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800232c:	eb18 0301 	adds.w	r3, r8, r1
 8002330:	eb49 0402 	adc.w	r4, r9, r2
 8002334:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 8002338:	68bb      	ldr	r3, [r7, #8]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002344:	24000794 	.word	0x24000794

08002348 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af04      	add	r7, sp, #16
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
 8002352:	460b      	mov	r3, r1
 8002354:	71bb      	strb	r3, [r7, #6]
 8002356:	4613      	mov	r3, r2
 8002358:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(bme280.hi2c, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <BME280_writeByte+0x38>)
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	b299      	uxth	r1, r3
 8002362:	79bb      	ldrb	r3, [r7, #6]
 8002364:	b29a      	uxth	r2, r3
 8002366:	2364      	movs	r3, #100	; 0x64
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	2301      	movs	r3, #1
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	1d7b      	adds	r3, r7, #5
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2301      	movs	r3, #1
 8002374:	f016 f828 	bl	80183c8 <HAL_I2C_Mem_Write>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	24000794 	.word	0x24000794

08002384 <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b087      	sub	sp, #28
 8002388:	af04      	add	r7, sp, #16
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
 8002390:	460b      	mov	r3, r1
 8002392:	71bb      	strb	r3, [r7, #6]
 8002394:	4613      	mov	r3, r2
 8002396:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(bme280.hi2c, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <BME280_readBytes+0x40>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	b299      	uxth	r1, r3
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	b29c      	uxth	r4, r3
 80023a4:	797b      	ldrb	r3, [r7, #5]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2264      	movs	r2, #100	; 0x64
 80023aa:	9202      	str	r2, [sp, #8]
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2301      	movs	r3, #1
 80023b4:	4622      	mov	r2, r4
 80023b6:	f016 f91b 	bl	80185f0 <HAL_I2C_Mem_Read>
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd90      	pop	{r4, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	24000794 	.word	0x24000794

080023c8 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <TM_GPS_Init+0x124>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <TM_GPS_Init+0x128>)
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 80023de:	4844      	ldr	r0, [pc, #272]	; (80024f0 <TM_GPS_Init+0x128>)
 80023e0:	f001 f9ac 	bl	800373c <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	4a41      	ldr	r2, [pc, #260]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023ee:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 80023f0:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f8:	4a3e      	ldr	r2, [pc, #248]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023fa:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <TM_GPS_Init+0x12c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002406:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <TM_GPS_Init+0x12c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f043 0320 	orr.w	r3, r3, #32
 8002410:	4a38      	ldr	r2, [pc, #224]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002412:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	4a35      	ldr	r2, [pc, #212]	; (80024f4 <TM_GPS_Init+0x12c>)
 800241e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 8002420:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <TM_GPS_Init+0x12c>)
 800242a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 800242c:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <TM_GPS_Init+0x12c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f043 0310 	orr.w	r3, r3, #16
 8002434:	4a2f      	ldr	r2, [pc, #188]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002436:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 8002438:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <TM_GPS_Init+0x12c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002440:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002442:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	4a29      	ldr	r2, [pc, #164]	; (80024f4 <TM_GPS_Init+0x12c>)
 800244e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002458:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <TM_GPS_Init+0x12c>)
 800245a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <TM_GPS_Init+0x12c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002464:	4a23      	ldr	r2, [pc, #140]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002466:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 8002468:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <TM_GPS_Init+0x12c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002472:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <TM_GPS_Init+0x12c>)
 800247e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002488:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <TM_GPS_Init+0x12c>)
 800248a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <TM_GPS_Init+0x12c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002494:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <TM_GPS_Init+0x12c>)
 8002496:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <TM_GPS_Init+0x12c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024a2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024ae:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024ba:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <TM_GPS_Init+0x12c>)
 80024c6:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 80024c8:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <TM_GPS_Init+0x128>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <TM_GPS_Init+0x128>)
 80024d2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80024d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024da:	4907      	ldr	r1, [pc, #28]	; (80024f8 <TM_GPS_Init+0x130>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f01e fbd5 	bl	8020c8c <HAL_UART_Receive_DMA>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	24000928 	.word	0x24000928
 80024f0:	240010c8 	.word	0x240010c8
 80024f4:	240007f8 	.word	0x240007f8
 80024f8:	240011f4 	.word	0x240011f4

080024fc <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update(UART_HandleTypeDef* huart) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	if(huart->Instance != gpsUart.huart->Instance) return TM_GPS_Result_None;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <TM_GPS_Update+0x74>)
 800250a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <TM_GPS_Update+0x1c>
 8002514:	2303      	movs	r3, #3
 8002516:	e027      	b.n	8002568 <TM_GPS_Update+0x6c>

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	e013      	b.n	800254a <TM_GPS_Update+0x4e>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <TM_GPS_Update+0x74>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4413      	add	r3, r2
 8002528:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	480f      	ldr	r0, [pc, #60]	; (8002570 <TM_GPS_Update+0x74>)
 8002532:	f000 f8d9 	bl	80026e8 <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <TM_GPS_Update+0x74>)
 8002538:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <TM_GPS_Update+0x48>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3301      	adds	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002550:	dbe7      	blt.n	8002522 <TM_GPS_Update+0x26>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <TM_GPS_Update+0x78>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <TM_GPS_Update+0x6a>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <TM_GPS_Update+0x74>)
 800255c:	2202      	movs	r2, #2
 800255e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002562:	2302      	movs	r3, #2
 8002564:	e000      	b.n	8002568 <TM_GPS_Update+0x6c>
	}
	
	/* We have old data */
//	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);

	return result;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	240010c8 	.word	0x240010c8
 8002574:	24000928 	.word	0x24000928

08002578 <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002582:	4603      	mov	r3, r0
 8002584:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	2b0e      	cmp	r3, #14
 800258a:	f200 8086 	bhi.w	800269a <TM_GPS_ConvertSpeed+0x122>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <TM_GPS_ConvertSpeed+0x1c>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025d1 	.word	0x080025d1
 8002598:	080025df 	.word	0x080025df
 800259c:	080025ed 	.word	0x080025ed
 80025a0:	080025fb 	.word	0x080025fb
 80025a4:	08002609 	.word	0x08002609
 80025a8:	08002617 	.word	0x08002617
 80025ac:	08002625 	.word	0x08002625
 80025b0:	08002633 	.word	0x08002633
 80025b4:	08002641 	.word	0x08002641
 80025b8:	0800264f 	.word	0x0800264f
 80025bc:	0800265d 	.word	0x0800265d
 80025c0:	0800266b 	.word	0x0800266b
 80025c4:	08002679 	.word	0x08002679
 80025c8:	08002687 	.word	0x08002687
 80025cc:	08002695 	.word	0x08002695
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 80025d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80026ac <TM_GPS_ConvertSpeed+0x134>
 80025d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025dc:	e05f      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 80025de:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80026b0 <TM_GPS_ConvertSpeed+0x138>
 80025e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ea:	e058      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 80025ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80026b4 <TM_GPS_ConvertSpeed+0x13c>
 80025f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f8:	e051      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 80025fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fe:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80026b8 <TM_GPS_ConvertSpeed+0x140>
 8002602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002606:	e04a      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002608:	edd7 7a01 	vldr	s15, [r7, #4]
 800260c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80026bc <TM_GPS_ConvertSpeed+0x144>
 8002610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002614:	e043      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002616:	edd7 7a01 	vldr	s15, [r7, #4]
 800261a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80026c0 <TM_GPS_ConvertSpeed+0x148>
 800261e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002622:	e03c      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 8002624:	edd7 7a01 	vldr	s15, [r7, #4]
 8002628:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80026c4 <TM_GPS_ConvertSpeed+0x14c>
 800262c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002630:	e035      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 8002632:	edd7 7a01 	vldr	s15, [r7, #4]
 8002636:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80026c8 <TM_GPS_ConvertSpeed+0x150>
 800263a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263e:	e02e      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 8002640:	edd7 7a01 	vldr	s15, [r7, #4]
 8002644:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80026cc <TM_GPS_ConvertSpeed+0x154>
 8002648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264c:	e027      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 800264e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002652:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026d0 <TM_GPS_ConvertSpeed+0x158>
 8002656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265a:	e020      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 800265c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002660:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80026d4 <TM_GPS_ConvertSpeed+0x15c>
 8002664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002668:	e019      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 800266a:	edd7 7a01 	vldr	s15, [r7, #4]
 800266e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80026d8 <TM_GPS_ConvertSpeed+0x160>
 8002672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002676:	e012      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 8002678:	edd7 7a01 	vldr	s15, [r7, #4]
 800267c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80026dc <TM_GPS_ConvertSpeed+0x164>
 8002680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002684:	e00b      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002686:	edd7 7a01 	vldr	s15, [r7, #4]
 800268a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80026e0 <TM_GPS_ConvertSpeed+0x168>
 800268e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002692:	e004      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002694:	edd7 7a01 	vldr	s15, [r7, #4]
 8002698:	e001      	b.n	800269e <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 800269a:	eddf 7a12 	vldr	s15, [pc, #72]	; 80026e4 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 800269e:	eeb0 0a67 	vmov.f32	s0, s15
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	3a06bdf5 	.word	0x3a06bdf5
 80026b0:	3f03afb8 	.word	0x3f03afb8
 80026b4:	3fed0e56 	.word	0x3fed0e56
 80026b8:	41f6f5c3 	.word	0x41f6f5c3
 80026bc:	39a79d68 	.word	0x39a79d68
 80026c0:	3f9353f8 	.word	0x3f9353f8
 80026c4:	3fd81062 	.word	0x3fd81062
 80026c8:	42ca999a 	.word	0x42ca999a
 80026cc:	4201999a 	.word	0x4201999a
 80026d0:	44f30000 	.word	0x44f30000
 80026d4:	43426666 	.word	0x43426666
 80026d8:	42508f5c 	.word	0x42508f5c
 80026dc:	45438000 	.word	0x45438000
 80026e0:	4331b333 	.word	0x4331b333
 80026e4:	00000000 	.word	0x00000000

080026e8 <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fff3 	bl	80036e0 <TM_GPS_INT_FlagsOk>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f001 f81b 	bl	800373c <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	2b24      	cmp	r3, #36	; 0x24
 8002712:	d116      	bne.n	8002742 <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002714:	4b5d      	ldr	r3, [pc, #372]	; (800288c <TM_GPS_INT_Do+0x1a4>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 800271a:	4b5d      	ldr	r3, [pc, #372]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 8002720:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	b2d1      	uxtb	r1, r2
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002736:	7011      	strb	r1, [r2, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	4a58      	ldr	r2, [pc, #352]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	5453      	strb	r3, [r2, r1]
 8002740:	e09b      	b.n	800287a <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	2b2c      	cmp	r3, #44	; 0x2c
 8002746:	d120      	bne.n	800278a <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 8002748:	4b51      	ldr	r3, [pc, #324]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	4053      	eors	r3, r2
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 8002754:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	b2d1      	uxtb	r1, r2
 800275e:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002760:	7011      	strb	r1, [r2, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4b4d      	ldr	r3, [pc, #308]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 8002766:	2100      	movs	r1, #0
 8002768:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f001 f80a 	bl	8003784 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8a1 	bl	80028b8 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b45      	ldr	r3, [pc, #276]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002780:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002782:	4b45      	ldr	r3, [pc, #276]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e077      	b.n	800287a <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	2b0a      	cmp	r3, #10
 800278e:	d113      	bne.n	80027b8 <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002796:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <TM_GPS_INT_Do+0x1b8>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d16d      	bne.n	800287a <TM_GPS_INT_Do+0x192>
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <TM_GPS_INT_Do+0x1bc>)
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <TM_GPS_INT_Do+0x1c0>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d167      	bne.n	800287a <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 80027aa:	4b40      	ldr	r3, [pc, #256]	; (80028ac <TM_GPS_INT_Do+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b2:	4a3e      	ldr	r2, [pc, #248]	; (80028ac <TM_GPS_INT_Do+0x1c4>)
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e060      	b.n	800287a <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	2b0d      	cmp	r3, #13
 80027bc:	d128      	bne.n	8002810 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	b2d1      	uxtb	r1, r2
 80027c6:	4a34      	ldr	r2, [pc, #208]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 80027c8:	7011      	strb	r1, [r2, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 80027ce:	2100      	movs	r1, #0
 80027d0:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 80027d2:	4b32      	ldr	r3, [pc, #200]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 ff58 	bl	800368c <TM_GPS_INT_Hex2Dec>
 80027dc:	4603      	mov	r3, r0
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	b2dc      	uxtb	r4, r3
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 ff50 	bl	800368c <TM_GPS_INT_Hex2Dec>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4423      	add	r3, r4
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <TM_GPS_INT_Do+0x1c8>)
 80027f4:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 80027f6:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <TM_GPS_INT_Do+0x1c8>)
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d002      	beq.n	8002808 <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 ff9a 	bl	800373c <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e034      	b.n	800287a <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	2b2a      	cmp	r3, #42	; 0x2a
 8002814:	d11c      	bne.n	8002850 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <TM_GPS_INT_Do+0x1a4>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	b2d1      	uxtb	r1, r2
 8002824:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002826:	7011      	strb	r1, [r2, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 ffa7 	bl	8003784 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f83e 	bl	80028b8 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <TM_GPS_INT_Do+0x1ac>)
 8002846:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e014      	b.n	800287a <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <TM_GPS_INT_Do+0x1a4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	4053      	eors	r3, r2
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <TM_GPS_INT_Do+0x1a8>)
 8002864:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	b2d1      	uxtb	r1, r2
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <TM_GPS_INT_Do+0x1b0>)
 8002870:	7011      	strb	r1, [r2, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	4a09      	ldr	r2, [pc, #36]	; (800289c <TM_GPS_INT_Do+0x1b4>)
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fdf0 	bl	8003460 <TM_GPS_INT_Return>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	bf00      	nop
 800288c:	240007f3 	.word	0x240007f3
 8002890:	240007f1 	.word	0x240007f1
 8002894:	240007ef 	.word	0x240007ef
 8002898:	240007f0 	.word	0x240007f0
 800289c:	240007e0 	.word	0x240007e0
 80028a0:	24000000 	.word	0x24000000
 80028a4:	24000933 	.word	0x24000933
 80028a8:	24000934 	.word	0x24000934
 80028ac:	240007f4 	.word	0x240007f4
 80028b0:	240007f2 	.word	0x240007f2
 80028b4:	00000000 	.word	0x00000000

080028b8 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	ed2d 8b02 	vpush	{d8}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 80028c4:	4bc2      	ldr	r3, [pc, #776]	; (8002bd0 <TM_GPS_INT_CheckTerm+0x318>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d134      	bne.n	8002936 <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 80028cc:	49c1      	ldr	r1, [pc, #772]	; (8002bd4 <TM_GPS_INT_CheckTerm+0x31c>)
 80028ce:	48c2      	ldr	r0, [pc, #776]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 80028d0:	f000 fe76 	bl	80035c0 <TM_GPS_INT_StringStartsWith>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 80028da:	4bc0      	ldr	r3, [pc, #768]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e023      	b.n	800292a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 80028e2:	49bf      	ldr	r1, [pc, #764]	; (8002be0 <TM_GPS_INT_CheckTerm+0x328>)
 80028e4:	48bc      	ldr	r0, [pc, #752]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 80028e6:	f000 fe6b 	bl	80035c0 <TM_GPS_INT_StringStartsWith>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 80028f0:	4bba      	ldr	r3, [pc, #744]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e018      	b.n	800292a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 80028f8:	49ba      	ldr	r1, [pc, #744]	; (8002be4 <TM_GPS_INT_CheckTerm+0x32c>)
 80028fa:	48b7      	ldr	r0, [pc, #732]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 80028fc:	f000 fe60 	bl	80035c0 <TM_GPS_INT_StringStartsWith>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8002906:	4bb5      	ldr	r3, [pc, #724]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 8002908:	2202      	movs	r2, #2
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e00d      	b.n	800292a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 800290e:	49b6      	ldr	r1, [pc, #728]	; (8002be8 <TM_GPS_INT_CheckTerm+0x330>)
 8002910:	48b1      	ldr	r0, [pc, #708]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 8002912:	f000 fe55 	bl	80035c0 <TM_GPS_INT_StringStartsWith>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 800291c:	4baf      	ldr	r3, [pc, #700]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 800291e:	2203      	movs	r2, #3
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e002      	b.n	800292a <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 8002924:	4bad      	ldr	r3, [pc, #692]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 8002926:	2204      	movs	r2, #4
 8002928:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 800292a:	49ab      	ldr	r1, [pc, #684]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 800292c:	48af      	ldr	r0, [pc, #700]	; (8002bec <TM_GPS_INT_CheckTerm+0x334>)
 800292e:	f02b f86f 	bl	802da10 <strcpy>
 8002932:	f000 bd7b 	b.w	800342c <TM_GPS_INT_CheckTerm+0xb74>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8002936:	4ba9      	ldr	r3, [pc, #676]	; (8002bdc <TM_GPS_INT_CheckTerm+0x324>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	015b      	lsls	r3, r3, #5
 800293c:	4aa4      	ldr	r2, [pc, #656]	; (8002bd0 <TM_GPS_INT_CheckTerm+0x318>)
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	4313      	orrs	r3, r2
 8002942:	3b01      	subs	r3, #1
 8002944:	2b62      	cmp	r3, #98	; 0x62
 8002946:	f200 84d9 	bhi.w	80032fc <TM_GPS_INT_CheckTerm+0xa44>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <TM_GPS_INT_CheckTerm+0x98>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002e41 	.word	0x08002e41
 8002954:	08002add 	.word	0x08002add
 8002958:	08002b9d 	.word	0x08002b9d
 800295c:	08002c01 	.word	0x08002c01
 8002960:	08002cc1 	.word	0x08002cc1
 8002964:	08002d09 	.word	0x08002d09
 8002968:	08002ce7 	.word	0x08002ce7
 800296c:	080032fd 	.word	0x080032fd
 8002970:	08002d2b 	.word	0x08002d2b
 8002974:	080032fd 	.word	0x080032fd
 8002978:	080032fd 	.word	0x080032fd
 800297c:	080032fd 	.word	0x080032fd
 8002980:	080032fd 	.word	0x080032fd
 8002984:	080032fd 	.word	0x080032fd
 8002988:	080032fd 	.word	0x080032fd
 800298c:	080032fd 	.word	0x080032fd
 8002990:	080032fd 	.word	0x080032fd
 8002994:	080032fd 	.word	0x080032fd
 8002998:	080032fd 	.word	0x080032fd
 800299c:	080032fd 	.word	0x080032fd
 80029a0:	080032fd 	.word	0x080032fd
 80029a4:	080032fd 	.word	0x080032fd
 80029a8:	080032fd 	.word	0x080032fd
 80029ac:	080032fd 	.word	0x080032fd
 80029b0:	080032fd 	.word	0x080032fd
 80029b4:	080032fd 	.word	0x080032fd
 80029b8:	080032fd 	.word	0x080032fd
 80029bc:	080032fd 	.word	0x080032fd
 80029c0:	080032fd 	.word	0x080032fd
 80029c4:	080032fd 	.word	0x080032fd
 80029c8:	080032fd 	.word	0x080032fd
 80029cc:	080032fd 	.word	0x080032fd
 80029d0:	080032fd 	.word	0x080032fd
 80029d4:	08003045 	.word	0x08003045
 80029d8:	080032fd 	.word	0x080032fd
 80029dc:	080032fd 	.word	0x080032fd
 80029e0:	080032fd 	.word	0x080032fd
 80029e4:	080032fd 	.word	0x080032fd
 80029e8:	08002f29 	.word	0x08002f29
 80029ec:	08003069 	.word	0x08003069
 80029f0:	08002fab 	.word	0x08002fab
 80029f4:	080032fd 	.word	0x080032fd
 80029f8:	080032fd 	.word	0x080032fd
 80029fc:	080032fd 	.word	0x080032fd
 8002a00:	080032fd 	.word	0x080032fd
 8002a04:	080032fd 	.word	0x080032fd
 8002a08:	080032fd 	.word	0x080032fd
 8002a0c:	080032fd 	.word	0x080032fd
 8002a10:	080032fd 	.word	0x080032fd
 8002a14:	080032fd 	.word	0x080032fd
 8002a18:	080032fd 	.word	0x080032fd
 8002a1c:	080032fd 	.word	0x080032fd
 8002a20:	080032fd 	.word	0x080032fd
 8002a24:	080032fd 	.word	0x080032fd
 8002a28:	080032fd 	.word	0x080032fd
 8002a2c:	080032fd 	.word	0x080032fd
 8002a30:	080032fd 	.word	0x080032fd
 8002a34:	080032fd 	.word	0x080032fd
 8002a38:	080032fd 	.word	0x080032fd
 8002a3c:	080032fd 	.word	0x080032fd
 8002a40:	080032fd 	.word	0x080032fd
 8002a44:	080032fd 	.word	0x080032fd
 8002a48:	080032fd 	.word	0x080032fd
 8002a4c:	080032fd 	.word	0x080032fd
 8002a50:	080032fd 	.word	0x080032fd
 8002a54:	08003269 	.word	0x08003269
 8002a58:	0800328d 	.word	0x0800328d
 8002a5c:	0800328d 	.word	0x0800328d
 8002a60:	0800328d 	.word	0x0800328d
 8002a64:	0800328d 	.word	0x0800328d
 8002a68:	0800328d 	.word	0x0800328d
 8002a6c:	0800328d 	.word	0x0800328d
 8002a70:	0800328d 	.word	0x0800328d
 8002a74:	0800328d 	.word	0x0800328d
 8002a78:	0800328d 	.word	0x0800328d
 8002a7c:	0800328d 	.word	0x0800328d
 8002a80:	0800328d 	.word	0x0800328d
 8002a84:	0800328d 	.word	0x0800328d
 8002a88:	0800315d 	.word	0x0800315d
 8002a8c:	080030e3 	.word	0x080030e3
 8002a90:	080031d7 	.word	0x080031d7
 8002a94:	080032fd 	.word	0x080032fd
 8002a98:	080032fd 	.word	0x080032fd
 8002a9c:	080032fd 	.word	0x080032fd
 8002aa0:	080032fd 	.word	0x080032fd
 8002aa4:	080032fd 	.word	0x080032fd
 8002aa8:	080032fd 	.word	0x080032fd
 8002aac:	080032fd 	.word	0x080032fd
 8002ab0:	080032fd 	.word	0x080032fd
 8002ab4:	080032fd 	.word	0x080032fd
 8002ab8:	080032fd 	.word	0x080032fd
 8002abc:	080032fd 	.word	0x080032fd
 8002ac0:	080032fd 	.word	0x080032fd
 8002ac4:	080032fd 	.word	0x080032fd
 8002ac8:	080032fd 	.word	0x080032fd
 8002acc:	080032fd 	.word	0x080032fd
 8002ad0:	080032fd 	.word	0x080032fd
 8002ad4:	080032fd 	.word	0x080032fd
 8002ad8:	080032d9 	.word	0x080032d9
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002adc:	f107 0308 	add.w	r3, r7, #8
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	483d      	ldr	r0, [pc, #244]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 8002ae4:	f000 fd89 	bl	80035fa <TM_GPS_INT_Atoi>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4a40      	ldr	r2, [pc, #256]	; (8002bf0 <TM_GPS_INT_CheckTerm+0x338>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b00:	ed83 7b00 	vstr	d7, [r3]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 8002b04:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b06:	ed93 6b00 	vldr	d6, [r3]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <TM_GPS_INT_CheckTerm+0x338>)
 8002b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2164      	movs	r1, #100	; 0x64
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	ee07 3a90 	vmov	s15, r3
 8002b20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b24:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002bf8 <TM_GPS_INT_CheckTerm+0x340>
 8002b28:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8002b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b36:	ed83 7b00 	vstr	d7, [r3]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 8002b44:	4413      	add	r3, r2
 8002b46:	f107 0208 	add.w	r2, r7, #8
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fd54 	bl	80035fa <TM_GPS_INT_Atoi>
 8002b52:	4603      	mov	r3, r0
 8002b54:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	4619      	mov	r1, r3
 8002b64:	200a      	movs	r0, #10
 8002b66:	f000 fd75 	bl	8003654 <TM_GPS_INT_Pow>
 8002b6a:	ee07 0a90 	vmov	s15, r0
 8002b6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b72:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002bc8 <TM_GPS_INT_CheckTerm+0x310>
 8002b76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b7a:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b80:	ed93 7b00 	vldr	d7, [r3]
 8002b84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b8a:	ed83 7b00 	vstr	d7, [r3]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <TM_GPS_INT_CheckTerm+0x344>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <TM_GPS_INT_CheckTerm+0x344>)
 8002b98:	6013      	str	r3, [r2, #0]
			break;
 8002b9a:	e3b2      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <TM_GPS_INT_CheckTerm+0x320>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b53      	cmp	r3, #83	; 0x53
 8002ba2:	d107      	bne.n	8002bb4 <TM_GPS_INT_CheckTerm+0x2fc>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002ba6:	ed93 7b00 	vldr	d7, [r3]
 8002baa:	eeb1 7b47 	vneg.f64	d7, d7
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <TM_GPS_INT_CheckTerm+0x33c>)
 8002bb0:	ed83 7b00 	vstr	d7, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <TM_GPS_INT_CheckTerm+0x344>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <TM_GPS_INT_CheckTerm+0x344>)
 8002bbe:	6013      	str	r3, [r2, #0]
			break;
 8002bc0:	e39f      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
 8002bc2:	bf00      	nop
 8002bc4:	f3af 8000 	nop.w
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	404e0000 	.word	0x404e0000
 8002bd0:	240007ef 	.word	0x240007ef
 8002bd4:	0802e2e8 	.word	0x0802e2e8
 8002bd8:	240007e0 	.word	0x240007e0
 8002bdc:	24000000 	.word	0x24000000
 8002be0:	0802e2f0 	.word	0x0802e2f0
 8002be4:	0802e2f8 	.word	0x0802e2f8
 8002be8:	0802e300 	.word	0x0802e300
 8002bec:	2400092c 	.word	0x2400092c
 8002bf0:	51eb851f 	.word	0x51eb851f
 8002bf4:	24000800 	.word	0x24000800
 8002bf8:	42700000 	.word	0x42700000
 8002bfc:	240007f4 	.word	0x240007f4
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	4619      	mov	r1, r3
 8002c06:	48c0      	ldr	r0, [pc, #768]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002c08:	f000 fcf7 	bl	80035fa <TM_GPS_INT_Atoi>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4abe      	ldr	r2, [pc, #760]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c22:	4bbb      	ldr	r3, [pc, #748]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002c24:	ed83 7b02 	vstr	d7, [r3, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 8002c28:	4bb9      	ldr	r3, [pc, #740]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002c2a:	ed93 6b02 	vldr	d6, [r3, #8]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4bb6      	ldr	r3, [pc, #728]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002c32:	fba3 1302 	umull	r1, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2164      	movs	r1, #100	; 0x64
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c48:	eddf 5ab2 	vldr	s11, [pc, #712]	; 8002f14 <TM_GPS_INT_CheckTerm+0x65c>
 8002c4c:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8002c50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c58:	4bad      	ldr	r3, [pc, #692]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002c5a:	ed83 7b02 	vstr	d7, [r3, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	3301      	adds	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	4aa8      	ldr	r2, [pc, #672]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002c68:	4413      	add	r3, r2
 8002c6a:	f107 0208 	add.w	r2, r7, #8
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fcc2 	bl	80035fa <TM_GPS_INT_Atoi>
 8002c76:	4603      	mov	r3, r0
 8002c78:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	ee07 3a90 	vmov	s15, r3
 8002c80:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	4619      	mov	r1, r3
 8002c88:	200a      	movs	r0, #10
 8002c8a:	f000 fce3 	bl	8003654 <TM_GPS_INT_Pow>
 8002c8e:	ee07 0a90 	vmov	s15, r0
 8002c92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c96:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8002f00 <TM_GPS_INT_CheckTerm+0x648>
 8002c9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c9e:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002ca2:	4b9b      	ldr	r3, [pc, #620]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002ca4:	ed93 7b02 	vldr	d7, [r3, #8]
 8002ca8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002cac:	4b98      	ldr	r3, [pc, #608]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002cae:	ed83 7b02 	vstr	d7, [r3, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 8002cb2:	4b99      	ldr	r3, [pc, #612]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	4a97      	ldr	r2, [pc, #604]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002cbc:	6013      	str	r3, [r2, #0]
			break;
 8002cbe:	e320      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 8002cc0:	4b91      	ldr	r3, [pc, #580]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b57      	cmp	r3, #87	; 0x57
 8002cc6:	d107      	bne.n	8002cd8 <TM_GPS_INT_CheckTerm+0x420>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 8002cc8:	4b91      	ldr	r3, [pc, #580]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002cca:	ed93 7b02 	vldr	d7, [r3, #8]
 8002cce:	eeb1 7b47 	vneg.f64	d7, d7
 8002cd2:	4b8f      	ldr	r3, [pc, #572]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002cd4:	ed83 7b02 	vstr	d7, [r3, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 8002cd8:	4b8f      	ldr	r3, [pc, #572]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f043 0320 	orr.w	r3, r3, #32
 8002ce0:	4a8d      	ldr	r2, [pc, #564]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002ce2:	6013      	str	r3, [r2, #0]
			break;
 8002ce4:	e30d      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	4619      	mov	r1, r3
 8002cec:	4886      	ldr	r0, [pc, #536]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002cee:	f000 fc84 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b86      	ldr	r3, [pc, #536]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002cf8:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 8002cfa:	4b87      	ldr	r3, [pc, #540]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	4a85      	ldr	r2, [pc, #532]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002d04:	6013      	str	r3, [r2, #0]
			break;
 8002d06:	e2fc      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	487e      	ldr	r0, [pc, #504]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002d10:	f000 fc73 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b7d      	ldr	r3, [pc, #500]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002d1a:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 8002d1c:	4b7e      	ldr	r3, [pc, #504]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	4a7c      	ldr	r2, [pc, #496]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002d26:	6013      	str	r3, [r2, #0]
			break;
 8002d28:	e2eb      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 8002d2a:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b2d      	cmp	r3, #45	; 0x2d
 8002d30:	d145      	bne.n	8002dbe <TM_GPS_INT_CheckTerm+0x506>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 8002d32:	f107 0308 	add.w	r3, r7, #8
 8002d36:	4619      	mov	r1, r3
 8002d38:	4878      	ldr	r0, [pc, #480]	; (8002f1c <TM_GPS_INT_CheckTerm+0x664>)
 8002d3a:	f000 fc5e 	bl	80035fa <TM_GPS_INT_Atoi>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4c:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002d4e:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	3301      	adds	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002d62:	4413      	add	r3, r2
 8002d64:	f107 0208 	add.w	r2, r7, #8
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fc45 	bl	80035fa <TM_GPS_INT_Atoi>
 8002d70:	4603      	mov	r3, r0
 8002d72:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	4619      	mov	r1, r3
 8002d82:	200a      	movs	r0, #10
 8002d84:	f000 fc66 	bl	8003654 <TM_GPS_INT_Pow>
 8002d88:	ee07 0a90 	vmov	s15, r0
 8002d8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d90:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002d94:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002d96:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002da2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002da6:	4b5a      	ldr	r3, [pc, #360]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002da8:	edc3 7a04 	vstr	s15, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 8002dac:	4b58      	ldr	r3, [pc, #352]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002dae:	edd3 7a04 	vldr	s15, [r3, #16]
 8002db2:	eef1 7a67 	vneg.f32	s15, s15
 8002db6:	4b56      	ldr	r3, [pc, #344]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002db8:	edc3 7a04 	vstr	s15, [r3, #16]
 8002dbc:	e039      	b.n	8002e32 <TM_GPS_INT_CheckTerm+0x57a>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002dbe:	f107 0308 	add.w	r3, r7, #8
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4850      	ldr	r0, [pc, #320]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002dc6:	f000 fc18 	bl	80035fa <TM_GPS_INT_Atoi>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	ee07 3a90 	vmov	s15, r3
 8002dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002dda:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	3301      	adds	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002de8:	4413      	add	r3, r2
 8002dea:	f107 0208 	add.w	r2, r7, #8
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fc02 	bl	80035fa <TM_GPS_INT_Atoi>
 8002df6:	4603      	mov	r3, r0
 8002df8:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	4619      	mov	r1, r3
 8002e08:	200a      	movs	r0, #10
 8002e0a:	f000 fc23 	bl	8003654 <TM_GPS_INT_Pow>
 8002e0e:	ee07 0a90 	vmov	s15, r0
 8002e12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002e16:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002e1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e2c:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002e2e:	edc3 7a04 	vstr	s15, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f043 0310 	orr.w	r3, r3, #16
 8002e3a:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002e3c:	6013      	str	r3, [r2, #0]
			break;
 8002e3e:	e260      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002e40:	f107 0308 	add.w	r3, r7, #8
 8002e44:	4619      	mov	r1, r3
 8002e46:	4830      	ldr	r0, [pc, #192]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002e48:	f000 fbd7 	bl	80035fa <TM_GPS_INT_Atoi>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002e54:	fba3 1302 	umull	r1, r3, r3, r2
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	2164      	movs	r1, #100	; 0x64
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002e66:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002f20 <TM_GPS_INT_CheckTerm+0x668>
 8002e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e7e:	ee17 2a90 	vmov	r2, s15
 8002e82:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002e84:	fb83 1302 	smull	r1, r3, r3, r2
 8002e88:	1159      	asrs	r1, r3, #5
 8002e8a:	17d3      	asrs	r3, r2, #31
 8002e8c:	1acb      	subs	r3, r1, r3
 8002e8e:	2164      	movs	r1, #100	; 0x64
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002e9a:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002f24 <TM_GPS_INT_CheckTerm+0x66c>
 8002eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb2:	ee17 2a90 	vmov	r2, s15
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <TM_GPS_INT_CheckTerm+0x654>)
 8002eb8:	fb83 1302 	smull	r1, r3, r3, r2
 8002ebc:	1159      	asrs	r1, r3, #5
 8002ebe:	17d3      	asrs	r3, r2, #31
 8002ec0:	1acb      	subs	r3, r1, r3
 8002ec2:	2164      	movs	r1, #100	; 0x64
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002ece:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <TM_GPS_INT_CheckTerm+0x650>)
 8002eda:	4413      	add	r3, r2
 8002edc:	f107 0208 	add.w	r2, r7, #8
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fb89 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <TM_GPS_INT_CheckTerm+0x658>)
 8002eee:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef8:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <TM_GPS_INT_CheckTerm+0x660>)
 8002efa:	6013      	str	r3, [r2, #0]
			break;
 8002efc:	e201      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
 8002efe:	bf00      	nop
 8002f00:	00000000 	.word	0x00000000
 8002f04:	404e0000 	.word	0x404e0000
 8002f08:	240007e0 	.word	0x240007e0
 8002f0c:	51eb851f 	.word	0x51eb851f
 8002f10:	24000800 	.word	0x24000800
 8002f14:	42700000 	.word	0x42700000
 8002f18:	240007f4 	.word	0x240007f4
 8002f1c:	240007e1 	.word	0x240007e1
 8002f20:	3c23d70a 	.word	0x3c23d70a
 8002f24:	38d1b717 	.word	0x38d1b717
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	48c8      	ldr	r0, [pc, #800]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8002f30:	f000 fb63 	bl	80035fa <TM_GPS_INT_Atoi>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f42:	4bc4      	ldr	r3, [pc, #784]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f44:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	4abf      	ldr	r2, [pc, #764]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8002f52:	4413      	add	r3, r2
 8002f54:	f107 0208 	add.w	r2, r7, #8
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fb4d 	bl	80035fa <TM_GPS_INT_Atoi>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	4619      	mov	r1, r3
 8002f76:	200a      	movs	r0, #10
 8002f78:	f000 fb6c 	bl	8003654 <TM_GPS_INT_Pow>
 8002f7c:	ee07 0a90 	vmov	s15, r0
 8002f80:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002f84:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002f88:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002f8c:	4bb1      	ldr	r3, [pc, #708]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f96:	4baf      	ldr	r3, [pc, #700]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f98:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 8002f9c:	4bae      	ldr	r3, [pc, #696]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	4aac      	ldr	r2, [pc, #688]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002fa6:	6013      	str	r3, [r2, #0]
			break;
 8002fa8:	e1ab      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002faa:	f107 0308 	add.w	r3, r7, #8
 8002fae:	4619      	mov	r1, r3
 8002fb0:	48a7      	ldr	r0, [pc, #668]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8002fb2:	f000 fb22 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4ba8      	ldr	r3, [pc, #672]	; (800325c <TM_GPS_INT_CheckTerm+0x9a4>)
 8002fba:	fba3 1302 	umull	r1, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2164      	movs	r1, #100	; 0x64
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4ba2      	ldr	r3, [pc, #648]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8002fcc:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd8:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8003260 <TM_GPS_INT_CheckTerm+0x9a8>
 8002fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe4:	ee17 2a90 	vmov	r2, s15
 8002fe8:	4b9c      	ldr	r3, [pc, #624]	; (800325c <TM_GPS_INT_CheckTerm+0x9a4>)
 8002fea:	fb83 1302 	smull	r1, r3, r3, r2
 8002fee:	1159      	asrs	r1, r3, #5
 8002ff0:	17d3      	asrs	r3, r2, #31
 8002ff2:	1acb      	subs	r3, r1, r3
 8002ff4:	2164      	movs	r1, #100	; 0x64
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b95      	ldr	r3, [pc, #596]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003000:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003264 <TM_GPS_INT_CheckTerm+0x9ac>
 8003010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003018:	ee17 2a90 	vmov	r2, s15
 800301c:	4b8f      	ldr	r3, [pc, #572]	; (800325c <TM_GPS_INT_CheckTerm+0x9a4>)
 800301e:	fb83 1302 	smull	r1, r3, r3, r2
 8003022:	1159      	asrs	r1, r3, #5
 8003024:	17d3      	asrs	r3, r2, #31
 8003026:	1acb      	subs	r3, r1, r3
 8003028:	2164      	movs	r1, #100	; 0x64
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003034:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 8003036:	4b88      	ldr	r3, [pc, #544]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303e:	4a86      	ldr	r2, [pc, #536]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003040:	6013      	str	r3, [r2, #0]
			break;
 8003042:	e15e      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 8003044:	4b82      	ldr	r3, [pc, #520]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b41      	cmp	r3, #65	; 0x41
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	4b7f      	ldr	r3, [pc, #508]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 800305a:	4b7f      	ldr	r3, [pc, #508]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003062:	4a7d      	ldr	r2, [pc, #500]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003064:	6013      	str	r3, [r2, #0]
			break;
 8003066:	e14c      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003068:	f107 0308 	add.w	r3, r7, #8
 800306c:	4619      	mov	r1, r3
 800306e:	4878      	ldr	r0, [pc, #480]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003070:	f000 fac3 	bl	80035fa <TM_GPS_INT_Atoi>
 8003074:	4603      	mov	r3, r0
 8003076:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003082:	4b74      	ldr	r3, [pc, #464]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003084:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	3301      	adds	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	4a6f      	ldr	r2, [pc, #444]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003092:	4413      	add	r3, r2
 8003094:	f107 0208 	add.w	r2, r7, #8
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f000 faad 	bl	80035fa <TM_GPS_INT_Atoi>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	4619      	mov	r1, r3
 80030b2:	200a      	movs	r0, #10
 80030b4:	f000 face 	bl	8003654 <TM_GPS_INT_Pow>
 80030b8:	ee07 0a90 	vmov	s15, r0
 80030bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c0:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80030c4:	4b63      	ldr	r3, [pc, #396]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80030c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80030ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ce:	4b61      	ldr	r3, [pc, #388]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80030d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 80030d4:	4b60      	ldr	r3, [pc, #384]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030dc:	4a5e      	ldr	r2, [pc, #376]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030de:	6013      	str	r3, [r2, #0]
			break;
 80030e0:	e10f      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80030e2:	f107 0308 	add.w	r3, r7, #8
 80030e6:	4619      	mov	r1, r3
 80030e8:	4859      	ldr	r0, [pc, #356]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 80030ea:	f000 fa86 	bl	80035fa <TM_GPS_INT_Atoi>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fc:	4b55      	ldr	r3, [pc, #340]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80030fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	3301      	adds	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	4a51      	ldr	r2, [pc, #324]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 800310c:	4413      	add	r3, r2
 800310e:	f107 0208 	add.w	r2, r7, #8
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fa70 	bl	80035fa <TM_GPS_INT_Atoi>
 800311a:	4603      	mov	r3, r0
 800311c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	4619      	mov	r1, r3
 800312c:	200a      	movs	r0, #10
 800312e:	f000 fa91 	bl	8003654 <TM_GPS_INT_Pow>
 8003132:	ee07 0a90 	vmov	s15, r0
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800313e:	4b45      	ldr	r3, [pc, #276]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003140:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003148:	4b42      	ldr	r3, [pc, #264]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 800314a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 800314e:	4b42      	ldr	r3, [pc, #264]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003156:	4a40      	ldr	r2, [pc, #256]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003158:	6013      	str	r3, [r2, #0]
			break;
 800315a:	e0d2      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800315c:	f107 0308 	add.w	r3, r7, #8
 8003160:	4619      	mov	r1, r3
 8003162:	483b      	ldr	r0, [pc, #236]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003164:	f000 fa49 	bl	80035fa <TM_GPS_INT_Atoi>
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003178:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	3301      	adds	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	4a32      	ldr	r2, [pc, #200]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003186:	4413      	add	r3, r2
 8003188:	f107 0208 	add.w	r2, r7, #8
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fa33 	bl	80035fa <TM_GPS_INT_Atoi>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	4619      	mov	r1, r3
 80031a6:	200a      	movs	r0, #10
 80031a8:	f000 fa54 	bl	8003654 <TM_GPS_INT_Pow>
 80031ac:	ee07 0a90 	vmov	s15, r0
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80031b8:	4b26      	ldr	r3, [pc, #152]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80031ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80031be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80031c4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 80031d2:	6013      	str	r3, [r2, #0]
			break;
 80031d4:	e095      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	4619      	mov	r1, r3
 80031dc:	481c      	ldr	r0, [pc, #112]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 80031de:	f000 fa0c 	bl	80035fa <TM_GPS_INT_Atoi>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 80031f2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3301      	adds	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <TM_GPS_INT_CheckTerm+0x998>)
 8003200:	4413      	add	r3, r2
 8003202:	f107 0208 	add.w	r2, r7, #8
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f9f6 	bl	80035fa <TM_GPS_INT_Atoi>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	4619      	mov	r1, r3
 8003220:	200a      	movs	r0, #10
 8003222:	f000 fa17 	bl	8003654 <TM_GPS_INT_Pow>
 8003226:	ee07 0a90 	vmov	s15, r0
 800322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322e:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 8003234:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <TM_GPS_INT_CheckTerm+0x99c>)
 800323e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800324a:	4a03      	ldr	r2, [pc, #12]	; (8003258 <TM_GPS_INT_CheckTerm+0x9a0>)
 800324c:	6013      	str	r3, [r2, #0]
			break;
 800324e:	e058      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
 8003250:	240007e0 	.word	0x240007e0
 8003254:	24000800 	.word	0x24000800
 8003258:	240007f4 	.word	0x240007f4
 800325c:	51eb851f 	.word	0x51eb851f
 8003260:	3c23d70a 	.word	0x3c23d70a
 8003264:	38d1b717 	.word	0x38d1b717
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	4619      	mov	r1, r3
 800326e:	4872      	ldr	r0, [pc, #456]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 8003270:	f000 f9c3 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	4b70      	ldr	r3, [pc, #448]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 800327a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 800327e:	4b70      	ldr	r3, [pc, #448]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003286:	4a6e      	ldr	r2, [pc, #440]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 8003288:	6013      	str	r3, [r2, #0]
			break;
 800328a:	e03a      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800328c:	f107 0308 	add.w	r3, r7, #8
 8003290:	4619      	mov	r1, r3
 8003292:	4869      	ldr	r0, [pc, #420]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 8003294:	f000 f9b1 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	3b03      	subs	r3, #3
 80032a0:	b2d1      	uxtb	r1, r2
 80032a2:	4a66      	ldr	r2, [pc, #408]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80032a4:	4413      	add	r3, r2
 80032a6:	460a      	mov	r2, r1
 80032a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 80032ac:	4b66      	ldr	r3, [pc, #408]	; (8003448 <TM_GPS_INT_CheckTerm+0xb90>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	4b64      	ldr	r3, [pc, #400]	; (8003448 <TM_GPS_INT_CheckTerm+0xb90>)
 80032b6:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 80032b8:	4b60      	ldr	r3, [pc, #384]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80032ba:	7d1a      	ldrb	r2, [r3, #20]
 80032bc:	4b62      	ldr	r3, [pc, #392]	; (8003448 <TM_GPS_INT_CheckTerm+0xb90>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d11d      	bne.n	8003300 <TM_GPS_INT_CheckTerm+0xa48>
				ids_count = 0;						/* Reset count, we have all statements */
 80032c4:	4b60      	ldr	r3, [pc, #384]	; (8003448 <TM_GPS_INT_CheckTerm+0xb90>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 80032ca:	4b5d      	ldr	r3, [pc, #372]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d2:	4a5b      	ldr	r2, [pc, #364]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 80032d4:	6013      	str	r3, [r2, #0]
			}
			break;
 80032d6:	e013      	b.n	8003300 <TM_GPS_INT_CheckTerm+0xa48>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	4619      	mov	r1, r3
 80032de:	4856      	ldr	r0, [pc, #344]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 80032e0:	f000 f98b 	bl	80035fa <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	4b54      	ldr	r3, [pc, #336]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80032ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 80032ee:	4b54      	ldr	r3, [pc, #336]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	4a52      	ldr	r2, [pc, #328]	; (8003440 <TM_GPS_INT_CheckTerm+0xb88>)
 80032f8:	6013      	str	r3, [r2, #0]
			break;
 80032fa:	e002      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
#endif
		default: 
			break;
 80032fc:	bf00      	nop
 80032fe:	e000      	b.n	8003302 <TM_GPS_INT_CheckTerm+0xa4a>
			break;
 8003300:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 8003302:	4b52      	ldr	r3, [pc, #328]	; (800344c <TM_GPS_INT_CheckTerm+0xb94>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b03      	cmp	r3, #3
 8003308:	f040 8090 	bne.w	800342c <TM_GPS_INT_CheckTerm+0xb74>
		if (GPS_Term_Number == 1) {
 800330c:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d109      	bne.n	8003328 <TM_GPS_INT_CheckTerm+0xa70>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 8003314:	f107 0308 	add.w	r3, r7, #8
 8003318:	4619      	mov	r1, r3
 800331a:	4847      	ldr	r0, [pc, #284]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 800331c:	f000 f96d 	bl	80035fa <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	4b4a      	ldr	r3, [pc, #296]	; (8003450 <TM_GPS_INT_CheckTerm+0xb98>)
 8003326:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d109      	bne.n	8003344 <TM_GPS_INT_CheckTerm+0xa8c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 8003330:	f107 0308 	add.w	r3, r7, #8
 8003334:	4619      	mov	r1, r3
 8003336:	4840      	ldr	r0, [pc, #256]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 8003338:	f000 f95f 	bl	80035fa <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b44      	ldr	r3, [pc, #272]	; (8003454 <TM_GPS_INT_CheckTerm+0xb9c>)
 8003342:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 8003344:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d96f      	bls.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 800334c:	f107 0308 	add.w	r3, r7, #8
 8003350:	4619      	mov	r1, r3
 8003352:	4839      	ldr	r0, [pc, #228]	; (8003438 <TM_GPS_INT_CheckTerm+0xb80>)
 8003354:	f000 f951 	bl	80035fa <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <TM_GPS_INT_CheckTerm+0xb8c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	3b04      	subs	r3, #4
 800335e:	b2da      	uxtb	r2, r3
 8003360:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003362:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 8003364:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 8003370:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 8003372:	4b38      	ldr	r3, [pc, #224]	; (8003454 <TM_GPS_INT_CheckTerm+0xb9c>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	333f      	adds	r3, #63	; 0x3f
 8003378:	b2db      	uxtb	r3, r3
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	b2db      	uxtb	r3, r3
 8003386:	4413      	add	r3, r2
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 800338c:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 800338e:	4b32      	ldr	r3, [pc, #200]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b17      	cmp	r3, #23
 8003394:	d84a      	bhi.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8003396:	4b31      	ldr	r3, [pc, #196]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10e      	bne.n	80033bc <TM_GPS_INT_CheckTerm+0xb04>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4619      	mov	r1, r3
 80033a6:	b2d0      	uxtb	r0, r2
 80033a8:	4a24      	ldr	r2, [pc, #144]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80033aa:	460b      	mov	r3, r1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	440b      	add	r3, r1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	3346      	adds	r3, #70	; 0x46
 80033b6:	4602      	mov	r2, r0
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e037      	b.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 1) {
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10e      	bne.n	80033e2 <TM_GPS_INT_CheckTerm+0xb2a>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	b2d0      	uxtb	r0, r2
 80033ce:	4a1b      	ldr	r2, [pc, #108]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80033d0:	460b      	mov	r3, r1
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	440b      	add	r3, r1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	3347      	adds	r3, #71	; 0x47
 80033dc:	4602      	mov	r2, r0
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e024      	b.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 2) {
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d10e      	bne.n	8003408 <TM_GPS_INT_CheckTerm+0xb50>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	b290      	uxth	r0, r2
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 80033f6:	460b      	mov	r3, r1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	440b      	add	r3, r1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	3348      	adds	r3, #72	; 0x48
 8003402:	4602      	mov	r2, r0
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	e011      	b.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 3) {
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <TM_GPS_INT_CheckTerm+0xba4>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d10d      	bne.n	800342c <TM_GPS_INT_CheckTerm+0xb74>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <TM_GPS_INT_CheckTerm+0xba0>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	b2d0      	uxtb	r0, r2
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <TM_GPS_INT_CheckTerm+0xb84>)
 800341c:	460b      	mov	r3, r1
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	440b      	add	r3, r1
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	334a      	adds	r3, #74	; 0x4a
 8003428:	4602      	mov	r2, r0
 800342a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	ecbd 8b02 	vpop	{d8}
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	240007e0 	.word	0x240007e0
 800343c:	24000800 	.word	0x24000800
 8003440:	240007f4 	.word	0x240007f4
 8003444:	240007ef 	.word	0x240007ef
 8003448:	24000937 	.word	0x24000937
 800344c:	24000000 	.word	0x24000000
 8003450:	24000933 	.word	0x24000933
 8003454:	24000934 	.word	0x24000934
 8003458:	24000935 	.word	0x24000935
 800345c:	24000936 	.word	0x24000936

08003460 <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f939 	bl	80036e0 <TM_GPS_INT_FlagsOk>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 808d 	beq.w	8003590 <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 8003476:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <TM_GPS_INT_Return+0x158>)
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 800347c:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800347e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003488:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800348a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8003494:	4b49      	ldr	r3, [pc, #292]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 8003496:	7d1a      	ldrb	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 800349c:	4b47      	ldr	r3, [pc, #284]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800349e:	7d5a      	ldrb	r2, [r3, #21]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 80034a4:	4b45      	ldr	r3, [pc, #276]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a43      	ldr	r2, [pc, #268]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034b0:	3316      	adds	r3, #22
 80034b2:	3216      	adds	r2, #22
 80034b4:	6811      	ldr	r1, [r2, #0]
 80034b6:	6019      	str	r1, [r3, #0]
 80034b8:	8892      	ldrh	r2, [r2, #4]
 80034ba:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3d      	ldr	r2, [pc, #244]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034c8:	331c      	adds	r3, #28
 80034ca:	321c      	adds	r2, #28
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4611      	mov	r1, r2
 80034d0:	8019      	strh	r1, [r3, #0]
 80034d2:	3302      	adds	r3, #2
 80034d4:	0c12      	lsrs	r2, r2, #16
 80034d6:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 80034d8:	4b38      	ldr	r3, [pc, #224]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034da:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 80034ec:	4b33      	ldr	r3, [pc, #204]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 80034fc:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 80034fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 8003506:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	e00d      	b.n	8003532 <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	4928      	ldr	r1, [pc, #160]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800351c:	440a      	add	r2, r1
 800351e:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	460a      	mov	r2, r1
 8003528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	3301      	adds	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b0b      	cmp	r3, #11
 8003536:	d9ee      	bls.n	8003516 <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 8003538:	4b20      	ldr	r3, [pc, #128]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 800353a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e019      	b.n	800357e <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	7bf9      	ldrb	r1, [r7, #15]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	440b      	add	r3, r1
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4403      	add	r3, r0
 800355a:	f103 0046 	add.w	r0, r3, #70	; 0x46
 800355e:	4917      	ldr	r1, [pc, #92]	; (80035bc <TM_GPS_INT_Return+0x15c>)
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	440b      	add	r3, r1
 800356a:	f103 0246 	add.w	r2, r3, #70	; 0x46
 800356e:	4603      	mov	r3, r0
 8003570:	6811      	ldr	r1, [r2, #0]
 8003572:	6019      	str	r1, [r3, #0]
 8003574:	8892      	ldrh	r2, [r2, #4]
 8003576:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	3301      	adds	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b17      	cmp	r3, #23
 8003582:	d9e2      	bls.n	800354a <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 800358c:	2300      	movs	r3, #0
 800358e:	e00e      	b.n	80035ae <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <TM_GPS_INT_Return+0x158>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 80035a0:	2302      	movs	r3, #2
 80035a2:	e004      	b.n	80035ae <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 80035ac:	2301      	movs	r3, #1
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	24000928 	.word	0x24000928
 80035bc:	24000800 	.word	0x24000800

080035c0 <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	while (*str) {
 80035ca:	e00b      	b.n	80035e4 <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	603a      	str	r2, [r7, #0]
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1c59      	adds	r1, r3, #1
 80035d8:	6079      	str	r1, [r7, #4]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e004      	b.n	80035ee <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ef      	bne.n	80035cc <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 80035ec:	2301      	movs	r3, #1
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 800360e:	e012      	b.n	8003636 <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4619      	mov	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	440b      	add	r3, r1
 8003628:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	601a      	str	r2, [r3, #0]
		count++;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	3301      	adds	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b2f      	cmp	r3, #47	; 0x2f
 800363c:	d903      	bls.n	8003646 <TM_GPS_INT_Atoi+0x4c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b39      	cmp	r3, #57	; 0x39
 8003644:	d9e4      	bls.n	8003610 <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	460a      	mov	r2, r1
 800365e:	71fb      	strb	r3, [r7, #7]
 8003660:	4613      	mov	r3, r2
 8003662:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 8003664:	2301      	movs	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003668:	e004      	b.n	8003674 <TM_GPS_INT_Pow+0x20>
		ret *= x;
 800366a:	79fa      	ldrb	r2, [r7, #7]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	1e5a      	subs	r2, r3, #1
 8003678:	71ba      	strb	r2, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f5      	bne.n	800366a <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	2b2f      	cmp	r3, #47	; 0x2f
 800369a:	d906      	bls.n	80036aa <TM_GPS_INT_Hex2Dec+0x1e>
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b39      	cmp	r3, #57	; 0x39
 80036a0:	d803      	bhi.n	80036aa <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	3b30      	subs	r3, #48	; 0x30
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e014      	b.n	80036d4 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d906      	bls.n	80036be <TM_GPS_INT_Hex2Dec+0x32>
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	2b46      	cmp	r3, #70	; 0x46
 80036b4:	d803      	bhi.n	80036be <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	3b37      	subs	r3, #55	; 0x37
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	e00a      	b.n	80036d4 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	2b60      	cmp	r3, #96	; 0x60
 80036c2:	d906      	bls.n	80036d2 <TM_GPS_INT_Hex2Dec+0x46>
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	2b66      	cmp	r3, #102	; 0x66
 80036c8:	d803      	bhi.n	80036d2 <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	3b57      	subs	r3, #87	; 0x57
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	e000      	b.n	80036d4 <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <TM_GPS_INT_FlagsOk+0x54>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <TM_GPS_INT_FlagsOk+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d118      	bne.n	8003726 <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	e00d      	b.n	8003716 <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	333e      	adds	r3, #62	; 0x3e
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	7ddb      	ldrb	r3, [r3, #23]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 800370c:	2300      	movs	r3, #0
 800370e:	e00b      	b.n	8003728 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	3301      	adds	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	429a      	cmp	r2, r3
 8003720:	d3eb      	bcc.n	80036fa <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	240007f4 	.word	0x240007f4
 8003738:	240007f8 	.word	0x240007f8

0800373c <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <TM_GPS_INT_ClearFlags+0x44>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e00a      	b.n	8003766 <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	333e      	adds	r3, #62	; 0x3e
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	3301      	adds	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	429a      	cmp	r2, r3
 8003770:	d3ee      	bcc.n	8003750 <TM_GPS_INT_ClearFlags+0x14>
	}
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	240007f4 	.word	0x240007f4

08003784 <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 800378c:	4baf      	ldr	r3, [pc, #700]	; (8003a4c <TM_GPS_INT_CheckEmpty+0x2c8>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 8151 	bne.w	8003a38 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003796:	4bae      	ldr	r3, [pc, #696]	; (8003a50 <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	015b      	lsls	r3, r3, #5
 800379c:	4aad      	ldr	r2, [pc, #692]	; (8003a54 <TM_GPS_INT_CheckEmpty+0x2d0>)
 800379e:	7812      	ldrb	r2, [r2, #0]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	3b01      	subs	r3, #1
 80037a4:	2b62      	cmp	r3, #98	; 0x62
 80037a6:	f200 8149 	bhi.w	8003a3c <TM_GPS_INT_CheckEmpty+0x2b8>
 80037aa:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <TM_GPS_INT_CheckEmpty+0x2c>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	0800399f 	.word	0x0800399f
 80037b4:	0800393d 	.word	0x0800393d
 80037b8:	0800394b 	.word	0x0800394b
 80037bc:	08003959 	.word	0x08003959
 80037c0:	08003967 	.word	0x08003967
 80037c4:	08003983 	.word	0x08003983
 80037c8:	08003975 	.word	0x08003975
 80037cc:	08003a3d 	.word	0x08003a3d
 80037d0:	08003991 	.word	0x08003991
 80037d4:	08003a3d 	.word	0x08003a3d
 80037d8:	08003a3d 	.word	0x08003a3d
 80037dc:	08003a3d 	.word	0x08003a3d
 80037e0:	08003a3d 	.word	0x08003a3d
 80037e4:	08003a3d 	.word	0x08003a3d
 80037e8:	08003a3d 	.word	0x08003a3d
 80037ec:	08003a3d 	.word	0x08003a3d
 80037f0:	08003a3d 	.word	0x08003a3d
 80037f4:	08003a3d 	.word	0x08003a3d
 80037f8:	08003a3d 	.word	0x08003a3d
 80037fc:	08003a3d 	.word	0x08003a3d
 8003800:	08003a3d 	.word	0x08003a3d
 8003804:	08003a3d 	.word	0x08003a3d
 8003808:	08003a3d 	.word	0x08003a3d
 800380c:	08003a3d 	.word	0x08003a3d
 8003810:	08003a3d 	.word	0x08003a3d
 8003814:	08003a3d 	.word	0x08003a3d
 8003818:	08003a3d 	.word	0x08003a3d
 800381c:	08003a3d 	.word	0x08003a3d
 8003820:	08003a3d 	.word	0x08003a3d
 8003824:	08003a3d 	.word	0x08003a3d
 8003828:	08003a3d 	.word	0x08003a3d
 800382c:	08003a3d 	.word	0x08003a3d
 8003830:	08003a3d 	.word	0x08003a3d
 8003834:	080039c9 	.word	0x080039c9
 8003838:	08003a3d 	.word	0x08003a3d
 800383c:	08003a3d 	.word	0x08003a3d
 8003840:	08003a3d 	.word	0x08003a3d
 8003844:	08003a3d 	.word	0x08003a3d
 8003848:	080039ad 	.word	0x080039ad
 800384c:	080039d7 	.word	0x080039d7
 8003850:	080039bb 	.word	0x080039bb
 8003854:	08003a3d 	.word	0x08003a3d
 8003858:	08003a3d 	.word	0x08003a3d
 800385c:	08003a3d 	.word	0x08003a3d
 8003860:	08003a3d 	.word	0x08003a3d
 8003864:	08003a3d 	.word	0x08003a3d
 8003868:	08003a3d 	.word	0x08003a3d
 800386c:	08003a3d 	.word	0x08003a3d
 8003870:	08003a3d 	.word	0x08003a3d
 8003874:	08003a3d 	.word	0x08003a3d
 8003878:	08003a3d 	.word	0x08003a3d
 800387c:	08003a3d 	.word	0x08003a3d
 8003880:	08003a3d 	.word	0x08003a3d
 8003884:	08003a3d 	.word	0x08003a3d
 8003888:	08003a3d 	.word	0x08003a3d
 800388c:	08003a3d 	.word	0x08003a3d
 8003890:	08003a3d 	.word	0x08003a3d
 8003894:	08003a3d 	.word	0x08003a3d
 8003898:	08003a3d 	.word	0x08003a3d
 800389c:	08003a3d 	.word	0x08003a3d
 80038a0:	08003a3d 	.word	0x08003a3d
 80038a4:	08003a3d 	.word	0x08003a3d
 80038a8:	08003a3d 	.word	0x08003a3d
 80038ac:	08003a3d 	.word	0x08003a3d
 80038b0:	08003a3d 	.word	0x08003a3d
 80038b4:	08003a0f 	.word	0x08003a0f
 80038b8:	08003a1d 	.word	0x08003a1d
 80038bc:	08003a1d 	.word	0x08003a1d
 80038c0:	08003a1d 	.word	0x08003a1d
 80038c4:	08003a1d 	.word	0x08003a1d
 80038c8:	08003a1d 	.word	0x08003a1d
 80038cc:	08003a1d 	.word	0x08003a1d
 80038d0:	08003a1d 	.word	0x08003a1d
 80038d4:	08003a1d 	.word	0x08003a1d
 80038d8:	08003a1d 	.word	0x08003a1d
 80038dc:	08003a1d 	.word	0x08003a1d
 80038e0:	08003a1d 	.word	0x08003a1d
 80038e4:	08003a1d 	.word	0x08003a1d
 80038e8:	080039f3 	.word	0x080039f3
 80038ec:	080039e5 	.word	0x080039e5
 80038f0:	08003a01 	.word	0x08003a01
 80038f4:	08003a3d 	.word	0x08003a3d
 80038f8:	08003a3d 	.word	0x08003a3d
 80038fc:	08003a3d 	.word	0x08003a3d
 8003900:	08003a3d 	.word	0x08003a3d
 8003904:	08003a3d 	.word	0x08003a3d
 8003908:	08003a3d 	.word	0x08003a3d
 800390c:	08003a3d 	.word	0x08003a3d
 8003910:	08003a3d 	.word	0x08003a3d
 8003914:	08003a3d 	.word	0x08003a3d
 8003918:	08003a3d 	.word	0x08003a3d
 800391c:	08003a3d 	.word	0x08003a3d
 8003920:	08003a3d 	.word	0x08003a3d
 8003924:	08003a3d 	.word	0x08003a3d
 8003928:	08003a3d 	.word	0x08003a3d
 800392c:	08003a3d 	.word	0x08003a3d
 8003930:	08003a3d 	.word	0x08003a3d
 8003934:	08003a3d 	.word	0x08003a3d
 8003938:	08003a2b 	.word	0x08003a2b
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	4a44      	ldr	r2, [pc, #272]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	e079      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 800394a:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003952:	4a41      	ldr	r2, [pc, #260]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e072      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 8003958:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e06b      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 8003966:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f043 0320 	orr.w	r3, r3, #32
 800396e:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e064      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 8003974:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	4a36      	ldr	r2, [pc, #216]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e05d      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 8003982:	4b35      	ldr	r3, [pc, #212]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f043 0308 	orr.w	r3, r3, #8
 800398a:	4a33      	ldr	r2, [pc, #204]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e056      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f043 0310 	orr.w	r3, r3, #16
 8003998:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e04f      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 800399e:	4b2e      	ldr	r3, [pc, #184]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a6:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e048      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 80039ac:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e041      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 80039ba:	4b27      	ldr	r3, [pc, #156]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e03a      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e033      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039de:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e02c      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 80039e4:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ec:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e025      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 80039f2:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039fa:	4a17      	ldr	r2, [pc, #92]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e01e      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a08:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e017      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a16:	4a10      	ldr	r2, [pc, #64]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e010      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a24:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a26:	6013      	str	r3, [r2, #0]
				break;
 8003a28:	e009      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a32:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e002      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 8003a3c:	bf00      	nop
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	240007f0 	.word	0x240007f0
 8003a50:	24000000 	.word	0x24000000
 8003a54:	240007ef 	.word	0x240007ef
 8003a58:	240007f4 	.word	0x240007f4

08003a5c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a66:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a6a:	eef0 7ae7 	vabs.f32	s15, s15
 8003a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a86:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a8a:	fefa 7a67 	vrintp.f32	s15, s15
 8003a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aaa:	fefb 7a67 	vrintm.f32	s15, s15
 8003aae:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <_Z13rt_roundf_snff>:

// Const memory section
// Definition for custom storage class: Const
const real32_T Max_angle_coef = 0.5F;  // Referenced by: '<S1>/Max_angle_coef'
real32_T rt_roundf_snf(real32_T u)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if (std::abs(u) < 8.388608E+6F) {
 8003ac6:	ed97 0a01 	vldr	s0, [r7, #4]
 8003aca:	f7ff ffc7 	bl	8003a5c <_ZSt3absf>
 8003ace:	eeb0 7a40 	vmov.f32	s14, s0
 8003ad2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003b68 <_Z13rt_roundf_snff+0xac>
 8003ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ade:	bf4c      	ite	mi
 8003ae0:	2301      	movmi	r3, #1
 8003ae2:	2300      	movpl	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d034      	beq.n	8003b54 <_Z13rt_roundf_snff+0x98>
    if (u >= 0.5F) {
 8003aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afa:	db0c      	blt.n	8003b16 <_Z13rt_roundf_snff+0x5a>
      y = std::floor(u + 0.5F);
 8003afc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b08:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0c:	f7ff ffc6 	bl	8003a9c <_ZSt5floorf>
 8003b10:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b14:	e020      	b.n	8003b58 <_Z13rt_roundf_snff+0x9c>
    } else if (u > -0.5F) {
 8003b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b1a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	dd08      	ble.n	8003b3a <_Z13rt_roundf_snff+0x7e>
      y = u * 0.0F;
 8003b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b2c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003b6c <_Z13rt_roundf_snff+0xb0>
 8003b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b34:	edc7 7a03 	vstr	s15, [r7, #12]
 8003b38:	e00e      	b.n	8003b58 <_Z13rt_roundf_snff+0x9c>
    } else {
      y = std::ceil(u - 0.5F);
 8003b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b46:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4a:	f7ff ff97 	bl	8003a7c <_ZSt4ceilf>
 8003b4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b52:	e001      	b.n	8003b58 <_Z13rt_roundf_snff+0x9c>
    }
  } else {
    y = u;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  return y;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	ee07 3a90 	vmov	s15, r3
}
 8003b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	4b000000 	.word	0x4b000000
 8003b6c:	00000000 	.word	0x00000000

08003b70 <_ZN23px4_AlgorithmModelClass4stepEv>:

// Model step function
void px4_AlgorithmModelClass::step()
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  // Gain: '<S1>/Max_angle_coef' incorporates:
  //   Inport: '<Root>/set_pitch'
  //   Inport: '<Root>/set_roll'

  Second_att_control_codeblock__B.Max_angle_coef_m[0] = Max_angle_coef *
    Second_att_control_codeblock__U.set_roll;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
  Second_att_control_codeblock__B.Max_angle_coef_m[0] = Max_angle_coef *
 8003b7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	edc3 7a00 	vstr	s15, [r3]
  Second_att_control_codeblock__B.Max_angle_coef_m[1] = Max_angle_coef *
    Second_att_control_codeblock__U.set_pitch;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
  Second_att_control_codeblock__B.Max_angle_coef_m[1] = Max_angle_coef *
 8003b92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	edc3 7a01 	vstr	s15, [r3, #4]

  // Sum: '<S4>/Sum' incorporates:
  //   Inport: '<Root>/Roll'

  Second_att_control_codeblock__B.pitchrollerror =
    Second_att_control_codeblock__B.Max_angle_coef_m[0] -
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	ed93 7a00 	vldr	s14, [r3]
    Second_att_control_codeblock__U.Roll;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
    Second_att_control_codeblock__B.Max_angle_coef_m[0] -
 8003bac:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror =
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	edc3 7a02 	vstr	s15, [r3, #8]

  // Gain: '<S4>/P_pr'
  Second_att_control_codeblock__B.P_pr = Angle_rate_roll_PI_kP *
    Second_att_control_codeblock__B.pitchrollerror;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	ed93 7a02 	vldr	s14, [r3, #8]
  Second_att_control_codeblock__B.P_pr = Angle_rate_roll_PI_kP *
 8003bbc:	4bb0      	ldr	r3, [pc, #704]	; (8003e80 <_ZN23px4_AlgorithmModelClass4stepEv+0x310>)
 8003bbe:	edd3 7a00 	vldr	s15, [r3]
 8003bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	edc3 7a03 	vstr	s15, [r3, #12]

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]

  // Gain: '<S4>/I_pr'
  Second_att_control_codeblock__B.I_pr = Angle_rate_roll_PI_kI *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	ed93 7a04 	vldr	s14, [r3, #16]
  Second_att_control_codeblock__B.I_pr = Angle_rate_roll_PI_kI *
 8003bdc:	4ba9      	ldr	r3, [pc, #676]	; (8003e84 <_ZN23px4_AlgorithmModelClass4stepEv+0x314>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	edc3 7a05 	vstr	s15, [r3, #20]

  // Sum: '<S4>/Sum16'
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	ed93 7a03 	vldr	s14, [r3, #12]
    + Second_att_control_codeblock__B.I_pr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	edc3 7a06 	vstr	s15, [r3, #24]

  // Sum: '<S5>/Sum' incorporates:
  //   Inport: '<Root>/p'

  Second_att_control_codeblock__B.pitchrollerror_b =
    Second_att_control_codeblock__B.P_pr_m - Second_att_control_codeblock__U.p;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	ed93 7a06 	vldr	s14, [r3, #24]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_b =
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	edc3 7a07 	vstr	s15, [r3, #28]

  // Gain: '<S5>/P_pr'
  Second_att_control_codeblock__B.P_pr_b = kP_Roll_rate_PID *
    Second_att_control_codeblock__B.pitchrollerror_b;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	ed93 7a07 	vldr	s14, [r3, #28]
  Second_att_control_codeblock__B.P_pr_b = kP_Roll_rate_PID *
 8003c1e:	4b9a      	ldr	r3, [pc, #616]	; (8003e88 <_ZN23px4_AlgorithmModelClass4stepEv+0x318>)
 8003c20:	edd3 7a00 	vldr	s15, [r3]
 8003c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	edc3 7a08 	vstr	s15, [r3, #32]

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

  // Gain: '<S5>/I_pr'
  Second_att_control_codeblock__B.I_pr_d = kI_Roll_rate_PID *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
  Second_att_control_codeblock__B.I_pr_d = kI_Roll_rate_PID *
 8003c3e:	4b93      	ldr	r3, [pc, #588]	; (8003e8c <_ZN23px4_AlgorithmModelClass4stepEv+0x31c>)
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  //
  //  About '<S7>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp =
    Second_att_control_codeblock__B.pitchrollerror_b *
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock__P.TSamp_WtEt;
 8003c54:	4b8e      	ldr	r3, [pc, #568]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003c56:	edd3 7a07 	vldr	s15, [r3, #28]
    Second_att_control_codeblock__B.pitchrollerror_b *
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp =
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1 =
    Second_att_control_codeblock_DW.UD_DSTATE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
  Second_att_control_codeblock__B.Uk1 =
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
  //
  //  Block description for '<S7>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Uk1;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8003c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // Gain: '<S5>/D_pr'
  Second_att_control_codeblock__B.D_pr = kD_Roll_rate_PID *
    Second_att_control_codeblock__B.Diff;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
  Second_att_control_codeblock__B.D_pr = kD_Roll_rate_PID *
 8003c8a:	4b82      	ldr	r3, [pc, #520]	; (8003e94 <_ZN23px4_AlgorithmModelClass4stepEv+0x324>)
 8003c8c:	edd3 7a00 	vldr	s15, [r3]
 8003c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  // Sum: '<S5>/Sum16'
  Second_att_control_codeblock__B.P_pr_d =
    (Second_att_control_codeblock__B.P_pr_b +
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	ed93 7a08 	vldr	s14, [r3, #32]
     Second_att_control_codeblock__B.I_pr_d) +
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    (Second_att_control_codeblock__B.P_pr_b +
 8003ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
     Second_att_control_codeblock__B.I_pr_d) +
 8003cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_d =
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // Saturate: '<S5>/Saturation'
  u0 = Second_att_control_codeblock__B.P_pr_d;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation_LowerSat;
 8003cc0:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation_UpperSat;
 8003cc6:	4b72      	ldr	r3, [pc, #456]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 8003ccc:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cdc:	dd03      	ble.n	8003ce6 <_ZN23px4_AlgorithmModelClass4stepEv+0x176>
    Second_att_control_codeblock__B.Saturation = u2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ce4:	e00f      	b.n	8003d06 <_ZN23px4_AlgorithmModelClass4stepEv+0x196>
  } else if (u0 < u1) {
 8003ce6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf6:	d503      	bpl.n	8003d00 <_ZN23px4_AlgorithmModelClass4stepEv+0x190>
    Second_att_control_codeblock__B.Saturation = u1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8003cfe:	e002      	b.n	8003d06 <_ZN23px4_AlgorithmModelClass4stepEv+0x196>
  } else {
    Second_att_control_codeblock__B.Saturation = u0;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

  // End of Saturate: '<S5>/Saturation'

  // Gain: '<S5>/Gain'
  Second_att_control_codeblock__B.Gain =
    Second_att_control_codeblock__P.Gain_Gain *
 8003d06:	4b62      	ldr	r3, [pc, #392]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003d08:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
    Second_att_control_codeblock__B.Saturation;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    Second_att_control_codeblock__P.Gain_Gain *
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain =
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  // Sum: '<S4>/Sum2' incorporates:
  //   Inport: '<Root>/Pitch'

  Second_att_control_codeblock__B.pitchrollerror_m =
    Second_att_control_codeblock__B.Max_angle_coef_m[1] -
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	ed93 7a01 	vldr	s14, [r3, #4]
    Second_att_control_codeblock__U.Pitch;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
    Second_att_control_codeblock__B.Max_angle_coef_m[1] -
 8003d28:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_m =
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  // Gain: '<S4>/P_pr1'
  Second_att_control_codeblock__B.P_pr1 = Angle_rate_pitch_kP *
    Second_att_control_codeblock__B.pitchrollerror_m;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
  Second_att_control_codeblock__B.P_pr1 = Angle_rate_pitch_kP *
 8003d38:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <_ZN23px4_AlgorithmModelClass4stepEv+0x328>)
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	651a      	str	r2, [r3, #80]	; 0x50

  // Gain: '<S4>/I_pr1'
  Second_att_control_codeblock__B.I_pr1 = Angle_rate_pitch_kI *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
  Second_att_control_codeblock__B.I_pr1 = Angle_rate_pitch_kI *
 8003d58:	4b50      	ldr	r3, [pc, #320]	; (8003e9c <_ZN23px4_AlgorithmModelClass4stepEv+0x32c>)
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Sum: '<S4>/Sum1'
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    + Second_att_control_codeblock__B.I_pr1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d74:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Sum: '<S5>/Sum1' incorporates:
  //   Inport: '<Root>/q'

  Second_att_control_codeblock__B.pitchrollerror_i =
    Second_att_control_codeblock__B.P_pr_o - Second_att_control_codeblock__U.q;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_i =
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  // Gain: '<S5>/P_pr1'
  Second_att_control_codeblock__B.P_pr1_p = kP_Pitch_rate_PID *
    Second_att_control_codeblock__B.pitchrollerror_i;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
  Second_att_control_codeblock__B.P_pr1_p = kP_Pitch_rate_PID *
 8003d9a:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <_ZN23px4_AlgorithmModelClass4stepEv+0x330>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	665a      	str	r2, [r3, #100]	; 0x64

  // Gain: '<S5>/I_pr1'
  Second_att_control_codeblock__B.I_pr1_j = kI_Pitch_rate_PID *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
  Second_att_control_codeblock__B.I_pr1_j = kI_Pitch_rate_PID *
 8003dba:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <_ZN23px4_AlgorithmModelClass4stepEv+0x334>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
  //
  //  About '<S8>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp_h =
    Second_att_control_codeblock__B.pitchrollerror_i *
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__P.TSamp_WtEt_l;
 8003dd0:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003dd2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
    Second_att_control_codeblock__B.pitchrollerror_i *
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp_h =
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1_i =
    Second_att_control_codeblock_DW.UD_DSTATE_e;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
  Second_att_control_codeblock__B.Uk1_i =
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	671a      	str	r2, [r3, #112]	; 0x70
  //  Block description for '<S8>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff_l =
    Second_att_control_codeblock__B.TSamp_h -
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
    Second_att_control_codeblock__B.Uk1_i;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
    Second_att_control_codeblock__B.TSamp_h -
 8003df6:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Diff_l =
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

  // Gain: '<S5>/D_pr1'
  Second_att_control_codeblock__B.D_pr1 = kD_Pitch_rate_PID *
    Second_att_control_codeblock__B.Diff_l;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
  Second_att_control_codeblock__B.D_pr1 = kD_Pitch_rate_PID *
 8003e06:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <_ZN23px4_AlgorithmModelClass4stepEv+0x338>)
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

  // Sum: '<S5>/Sum2'
  Second_att_control_codeblock__B.P_pr_j =
    (Second_att_control_codeblock__B.P_pr1_p +
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
     Second_att_control_codeblock__B.I_pr1_j) +
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    (Second_att_control_codeblock__B.P_pr1_p +
 8003e22:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
     Second_att_control_codeblock__B.I_pr1_j) +
 8003e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_j =
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  // Saturate: '<S5>/Saturation1'
  u0 = Second_att_control_codeblock__B.P_pr_j;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3a:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation1_LowerSat;
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation1_UpperSat;
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <_ZN23px4_AlgorithmModelClass4stepEv+0x320>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 8003e48:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	dd04      	ble.n	8003e64 <_ZN23px4_AlgorithmModelClass4stepEv+0x2f4>
    Second_att_control_codeblock__B.Saturation1 = u2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003e62:	e027      	b.n	8003eb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x344>
  } else if (u0 < u1) {
 8003e64:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e68:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e74:	d51a      	bpl.n	8003eac <_ZN23px4_AlgorithmModelClass4stepEv+0x33c>
    Second_att_control_codeblock__B.Saturation1 = u1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003e7e:	e019      	b.n	8003eb4 <_ZN23px4_AlgorithmModelClass4stepEv+0x344>
 8003e80:	24000010 	.word	0x24000010
 8003e84:	2400000c 	.word	0x2400000c
 8003e88:	24000030 	.word	0x24000030
 8003e8c:	24000024 	.word	0x24000024
 8003e90:	24000038 	.word	0x24000038
 8003e94:	2400001c 	.word	0x2400001c
 8003e98:	24000008 	.word	0x24000008
 8003e9c:	24000004 	.word	0x24000004
 8003ea0:	2400002c 	.word	0x2400002c
 8003ea4:	24000020 	.word	0x24000020
 8003ea8:	24000018 	.word	0x24000018
  } else {
    Second_att_control_codeblock__B.Saturation1 = u0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  // End of Saturate: '<S5>/Saturation1'

  // Gain: '<S5>/Gain1'
  Second_att_control_codeblock__B.Gain1 =
    Second_att_control_codeblock__P.Gain1_Gain *
 8003eb4:	4bbb      	ldr	r3, [pc, #748]	; (80041a4 <_ZN23px4_AlgorithmModelClass4stepEv+0x634>)
 8003eb6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    Second_att_control_codeblock__B.Saturation1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
    Second_att_control_codeblock__P.Gain1_Gain *
 8003ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain1 =
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

  // Sum: '<S6>/Sum' incorporates:
  //   Inport: '<Root>/r'
  //   Inport: '<Root>/set_yaw'

  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
    - Second_att_control_codeblock__U.r;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

  // Gain: '<S6>/Gain'
  Second_att_control_codeblock__B.Gain_f = Yaw_angel_rate_P *
    Second_att_control_codeblock__B.Sum;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
  Second_att_control_codeblock__B.Gain_f = Yaw_angel_rate_P *
 8003ee6:	4bb0      	ldr	r3, [pc, #704]	; (80041a8 <_ZN23px4_AlgorithmModelClass4stepEv+0x638>)
 8003ee8:	edd3 7a00 	vldr	s15, [r3]
 8003eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

  // Gain: '<S46>/Proportional Gain'
  Second_att_control_codeblock__B.ProportionalGain = kP_Yaw_rate_PID *
    Second_att_control_codeblock__B.Gain_f;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
  Second_att_control_codeblock__B.ProportionalGain = kP_Yaw_rate_PID *
 8003efc:	4bab      	ldr	r3, [pc, #684]	; (80041ac <_ZN23px4_AlgorithmModelClass4stepEv+0x63c>)
 8003efe:	edd3 7a00 	vldr	s15, [r3]
 8003f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

  // DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock__B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
  Second_att_control_codeblock__B.Integrator =
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  // Sum: '<S50>/Sum'
  Second_att_control_codeblock__B.Sum_f =
    Second_att_control_codeblock__B.ProportionalGain +
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
    Second_att_control_codeblock__B.Integrator;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
    Second_att_control_codeblock__B.ProportionalGain +
 8003f24:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum_f =
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

  // MATLAB Function: '<S1>/pwm_out1' incorporates:
  //   Inport: '<Root>/set_thrust'

  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003f34:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 8003f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8003f48:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003f4c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003f50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain -
 8003f5e:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 8003f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	f7ff fda7 	bl	8003abc <_Z13rt_roundf_snff>
 8003f6e:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8003f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f76:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8003f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	d511      	bpl.n	8003fa8 <_ZN23px4_AlgorithmModelClass4stepEv+0x438>
    if (u0 >= 0.0F) {
 8003f84:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	db07      	blt.n	8003fa2 <_ZN23px4_AlgorithmModelClass4stepEv+0x432>
      y = static_cast<uint16_T>(u0);
 8003f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9a:	ee17 3a90 	vmov	r3, s15
 8003f9e:	837b      	strh	r3, [r7, #26]
 8003fa0:	e005      	b.n	8003fae <_ZN23px4_AlgorithmModelClass4stepEv+0x43e>
    } else {
      y = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	837b      	strh	r3, [r7, #26]
 8003fa6:	e002      	b.n	8003fae <_ZN23px4_AlgorithmModelClass4stepEv+0x43e>
    }
  } else {
    y = MAX_uint16_T;
 8003fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fac:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8003fae:	8b7b      	ldrh	r3, [r7, #26]
 8003fb0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003fb4:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbc:	d302      	bcc.n	8003fc4 <_ZN23px4_AlgorithmModelClass4stepEv+0x454>
    tmp = 65535U;
 8003fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fc2:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M1 = static_cast<uint16_T>(tmp);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
                       Second_att_control_codeblock__B.Sum_f) *
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 8003fda:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8003fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003fe8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003fec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain +
 8003ffa:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 8003ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004002:	eeb0 0a67 	vmov.f32	s0, s15
 8004006:	f7ff fd59 	bl	8003abc <_Z13rt_roundf_snff>
 800400a:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800400e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004012:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401e:	d511      	bpl.n	8004044 <_ZN23px4_AlgorithmModelClass4stepEv+0x4d4>
    if (u0 >= 0.0F) {
 8004020:	edd7 7a05 	vldr	s15, [r7, #20]
 8004024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	db07      	blt.n	800403e <_ZN23px4_AlgorithmModelClass4stepEv+0x4ce>
      y = static_cast<uint16_T>(u0);
 800402e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004036:	ee17 3a90 	vmov	r3, s15
 800403a:	837b      	strh	r3, [r7, #26]
 800403c:	e005      	b.n	800404a <_ZN23px4_AlgorithmModelClass4stepEv+0x4da>
    } else {
      y = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	837b      	strh	r3, [r7, #26]
 8004042:	e002      	b.n	800404a <_ZN23px4_AlgorithmModelClass4stepEv+0x4da>
    }
  } else {
    y = MAX_uint16_T;
 8004044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004048:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 800404a:	8b7b      	ldrh	r3, [r7, #26]
 800404c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004050:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d302      	bcc.n	8004060 <_ZN23px4_AlgorithmModelClass4stepEv+0x4f0>
    tmp = 65535U;
 800405a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800405e:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M2 = static_cast<uint16_T>(tmp);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004070:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004074:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        Second_att_control_codeblock__B.Gain1) -
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 800407e:	ee37 7a27 	vadd.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain1) -
 8004088:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004092:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004096:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800409a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80040a4:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 80040a8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 80040ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b0:	eeb0 0a67 	vmov.f32	s0, s15
 80040b4:	f7ff fd02 	bl	8003abc <_Z13rt_roundf_snff>
 80040b8:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 80040bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80040c0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 80040c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	d511      	bpl.n	80040f2 <_ZN23px4_AlgorithmModelClass4stepEv+0x582>
    if (u0 >= 0.0F) {
 80040ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80040d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040da:	db07      	blt.n	80040ec <_ZN23px4_AlgorithmModelClass4stepEv+0x57c>
      y = static_cast<uint16_T>(u0);
 80040dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80040e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e4:	ee17 3a90 	vmov	r3, s15
 80040e8:	837b      	strh	r3, [r7, #26]
 80040ea:	e005      	b.n	80040f8 <_ZN23px4_AlgorithmModelClass4stepEv+0x588>
    } else {
      y = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	837b      	strh	r3, [r7, #26]
 80040f0:	e002      	b.n	80040f8 <_ZN23px4_AlgorithmModelClass4stepEv+0x588>
    }
  } else {
    y = MAX_uint16_T;
 80040f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040f6:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80040f8:	8b7b      	ldrh	r3, [r7, #26]
 80040fa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80040fe:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004106:	d302      	bcc.n	800410e <_ZN23px4_AlgorithmModelClass4stepEv+0x59e>
    tmp = 65535U;
 8004108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800410c:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M3 = static_cast<uint16_T>(tmp);
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800411e:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8004128:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800412c:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004130:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 800413a:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004144:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004148:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800414c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004156:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 800415a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 800415e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004162:	eeb0 0a67 	vmov.f32	s0, s15
 8004166:	f7ff fca9 	bl	8003abc <_Z13rt_roundf_snff>
 800416a:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800416e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004172:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	d51b      	bpl.n	80041b8 <_ZN23px4_AlgorithmModelClass4stepEv+0x648>
    if (u0 >= 0.0F) {
 8004180:	edd7 7a05 	vldr	s15, [r7, #20]
 8004184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418c:	db07      	blt.n	800419e <_ZN23px4_AlgorithmModelClass4stepEv+0x62e>
      y = static_cast<uint16_T>(u0);
 800418e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004196:	ee17 3a90 	vmov	r3, s15
 800419a:	837b      	strh	r3, [r7, #26]
 800419c:	e00f      	b.n	80041be <_ZN23px4_AlgorithmModelClass4stepEv+0x64e>
    } else {
      y = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	837b      	strh	r3, [r7, #26]
 80041a2:	e00c      	b.n	80041be <_ZN23px4_AlgorithmModelClass4stepEv+0x64e>
 80041a4:	24000038 	.word	0x24000038
 80041a8:	24000014 	.word	0x24000014
 80041ac:	24000034 	.word	0x24000034
 80041b0:	447a0000 	.word	0x447a0000
 80041b4:	47800000 	.word	0x47800000
    }
  } else {
    y = MAX_uint16_T;
 80041b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041bc:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80041be:	8b7b      	ldrh	r3, [r7, #26]
 80041c0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80041c4:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d302      	bcc.n	80041d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x664>
    tmp = 65535U;
 80041ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041d2:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M4 = static_cast<uint16_T>(tmp);
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80041ea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80041ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80041f2:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        Second_att_control_codeblock__B.Gain / 2.0F) +
 80041fc:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 8004206:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800420a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800420e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004218:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 800421c:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 8004220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004224:	eeb0 0a67 	vmov.f32	s0, s15
 8004228:	f7ff fc48 	bl	8003abc <_Z13rt_roundf_snff>
 800422c:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8004230:	edd7 7a05 	vldr	s15, [r7, #20]
 8004234:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 8004238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	d511      	bpl.n	8004266 <_ZN23px4_AlgorithmModelClass4stepEv+0x6f6>
    if (u0 >= 0.0F) {
 8004242:	edd7 7a05 	vldr	s15, [r7, #20]
 8004246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	db07      	blt.n	8004260 <_ZN23px4_AlgorithmModelClass4stepEv+0x6f0>
      y = static_cast<uint16_T>(u0);
 8004250:	edd7 7a05 	vldr	s15, [r7, #20]
 8004254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004258:	ee17 3a90 	vmov	r3, s15
 800425c:	837b      	strh	r3, [r7, #26]
 800425e:	e005      	b.n	800426c <_ZN23px4_AlgorithmModelClass4stepEv+0x6fc>
    } else {
      y = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	837b      	strh	r3, [r7, #26]
 8004264:	e002      	b.n	800426c <_ZN23px4_AlgorithmModelClass4stepEv+0x6fc>
    }
  } else {
    y = MAX_uint16_T;
 8004266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800426a:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 800426c:	8b7b      	ldrh	r3, [r7, #26]
 800426e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004272:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427a:	d302      	bcc.n	8004282 <_ZN23px4_AlgorithmModelClass4stepEv+0x712>
    tmp = 65535U;
 800427c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004280:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M5 = static_cast<uint16_T>(tmp);
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004292:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004296:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        -Second_att_control_codeblock__B.Gain1) -
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 80042a0:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
                        -Second_att_control_codeblock__B.Gain1) -
 80042aa:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                       Second_att_control_codeblock__B.Sum_f) *
 80042b4:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80042b8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80042bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80042c6:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain / 2.0F +
 80042ca:	ed1f 7a47 	vldr	s14, [pc, #-284]	; 80041b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x640>
 80042ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d2:	eeb0 0a67 	vmov.f32	s0, s15
 80042d6:	f7ff fbf1 	bl	8003abc <_Z13rt_roundf_snff>
 80042da:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 80042de:	edd7 7a05 	vldr	s15, [r7, #20]
 80042e2:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 80041b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x644>
 80042e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ee:	d511      	bpl.n	8004314 <_ZN23px4_AlgorithmModelClass4stepEv+0x7a4>
    if (u0 >= 0.0F) {
 80042f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80042f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	db07      	blt.n	800430e <_ZN23px4_AlgorithmModelClass4stepEv+0x79e>
      y = static_cast<uint16_T>(u0);
 80042fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	ee17 3a90 	vmov	r3, s15
 800430a:	837b      	strh	r3, [r7, #26]
 800430c:	e005      	b.n	800431a <_ZN23px4_AlgorithmModelClass4stepEv+0x7aa>
    } else {
      y = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	837b      	strh	r3, [r7, #26]
 8004312:	e002      	b.n	800431a <_ZN23px4_AlgorithmModelClass4stepEv+0x7aa>
    }
  } else {
    y = MAX_uint16_T;
 8004314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004318:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 800431a:	8b7b      	ldrh	r3, [r7, #26]
 800431c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004320:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d302      	bcc.n	8004330 <_ZN23px4_AlgorithmModelClass4stepEv+0x7c0>
    tmp = 65535U;
 800432a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800432e:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M6 = static_cast<uint16_T>(tmp);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

  // End of MATLAB Function: '<S1>/pwm_out1'

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M1 >
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004340:	4b60      	ldr	r3, [pc, #384]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M1 >
 8004346:	429a      	cmp	r2, r3
 8004348:	d904      	bls.n	8004354 <_ZN23px4_AlgorithmModelClass4stepEv+0x7e4>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800434a:	4b5e      	ldr	r3, [pc, #376]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800434c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004350:	837b      	strh	r3, [r7, #26]
 8004352:	e010      	b.n	8004376 <_ZN23px4_AlgorithmModelClass4stepEv+0x806>
  } else if (Second_att_control_codeblock__B.M1 <
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 800435a:	4b5a      	ldr	r3, [pc, #360]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800435c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M1 <
 8004360:	429a      	cmp	r2, r3
 8004362:	d204      	bcs.n	800436e <_ZN23px4_AlgorithmModelClass4stepEv+0x7fe>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004364:	4b57      	ldr	r3, [pc, #348]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800436a:	837b      	strh	r3, [r7, #26]
 800436c:	e003      	b.n	8004376 <_ZN23px4_AlgorithmModelClass4stepEv+0x806>
  } else {
    y = Second_att_control_codeblock__B.M1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8004374:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[0] = y;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8b7a      	ldrh	r2, [r7, #26]
 800437a:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M2 >
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004384:	4b4f      	ldr	r3, [pc, #316]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M2 >
 800438a:	429a      	cmp	r2, r3
 800438c:	d904      	bls.n	8004398 <_ZN23px4_AlgorithmModelClass4stepEv+0x828>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800438e:	4b4d      	ldr	r3, [pc, #308]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004390:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004394:	837b      	strh	r3, [r7, #26]
 8004396:	e010      	b.n	80043ba <_ZN23px4_AlgorithmModelClass4stepEv+0x84a>
  } else if (Second_att_control_codeblock__B.M2 <
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 800439e:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M2 <
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d204      	bcs.n	80043b2 <_ZN23px4_AlgorithmModelClass4stepEv+0x842>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80043a8:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043ae:	837b      	strh	r3, [r7, #26]
 80043b0:	e003      	b.n	80043ba <_ZN23px4_AlgorithmModelClass4stepEv+0x84a>
  } else {
    y = Second_att_control_codeblock__B.M2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80043b8:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[1] = y;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8b7a      	ldrh	r2, [r7, #26]
 80043be:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M3 >
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 80043c8:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M3 >
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d904      	bls.n	80043dc <_ZN23px4_AlgorithmModelClass4stepEv+0x86c>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 80043d2:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043d8:	837b      	strh	r3, [r7, #26]
 80043da:	e010      	b.n	80043fe <_ZN23px4_AlgorithmModelClass4stepEv+0x88e>
  } else if (Second_att_control_codeblock__B.M3 <
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 80043e2:	4b38      	ldr	r3, [pc, #224]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M3 <
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d204      	bcs.n	80043f6 <_ZN23px4_AlgorithmModelClass4stepEv+0x886>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80043ec:	4b35      	ldr	r3, [pc, #212]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80043ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043f2:	837b      	strh	r3, [r7, #26]
 80043f4:	e003      	b.n	80043fe <_ZN23px4_AlgorithmModelClass4stepEv+0x88e>
  } else {
    y = Second_att_control_codeblock__B.M3;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80043fc:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[2] = y;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8b7a      	ldrh	r2, [r7, #26]
 8004402:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M4 >
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800440e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M4 >
 8004412:	429a      	cmp	r2, r3
 8004414:	d904      	bls.n	8004420 <_ZN23px4_AlgorithmModelClass4stepEv+0x8b0>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004416:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004418:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800441c:	837b      	strh	r3, [r7, #26]
 800441e:	e010      	b.n	8004442 <_ZN23px4_AlgorithmModelClass4stepEv+0x8d2>
  } else if (Second_att_control_codeblock__B.M4 <
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004426:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004428:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M4 <
 800442c:	429a      	cmp	r2, r3
 800442e:	d204      	bcs.n	800443a <_ZN23px4_AlgorithmModelClass4stepEv+0x8ca>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004430:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004432:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004436:	837b      	strh	r3, [r7, #26]
 8004438:	e003      	b.n	8004442 <_ZN23px4_AlgorithmModelClass4stepEv+0x8d2>
  } else {
    y = Second_att_control_codeblock__B.M4;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8004440:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[3] = y;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8b7a      	ldrh	r2, [r7, #26]
 8004446:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M5 >
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M5 >
 8004456:	429a      	cmp	r2, r3
 8004458:	d904      	bls.n	8004464 <_ZN23px4_AlgorithmModelClass4stepEv+0x8f4>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800445a:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800445c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004460:	837b      	strh	r3, [r7, #26]
 8004462:	e010      	b.n	8004486 <_ZN23px4_AlgorithmModelClass4stepEv+0x916>
  } else if (Second_att_control_codeblock__B.M5 <
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 800446c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M5 <
 8004470:	429a      	cmp	r2, r3
 8004472:	d204      	bcs.n	800447e <_ZN23px4_AlgorithmModelClass4stepEv+0x90e>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004474:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800447a:	837b      	strh	r3, [r7, #26]
 800447c:	e003      	b.n	8004486 <_ZN23px4_AlgorithmModelClass4stepEv+0x916>
  } else {
    y = Second_att_control_codeblock__B.M5;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004484:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[4] = y;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8b7a      	ldrh	r2, [r7, #26]
 800448a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M6 >
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 8004496:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  if (Second_att_control_codeblock__B.M6 >
 800449a:	429a      	cmp	r2, r3
 800449c:	d904      	bls.n	80044a8 <_ZN23px4_AlgorithmModelClass4stepEv+0x938>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80044a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80044a4:	837b      	strh	r3, [r7, #26]
 80044a6:	e013      	b.n	80044d0 <_ZN23px4_AlgorithmModelClass4stepEv+0x960>
  } else if (Second_att_control_codeblock__B.M6 <
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80044b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  } else if (Second_att_control_codeblock__B.M6 <
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d207      	bcs.n	80044c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x958>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80044b8:	4b02      	ldr	r3, [pc, #8]	; (80044c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x954>)
 80044ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80044be:	837b      	strh	r3, [r7, #26]
 80044c0:	e006      	b.n	80044d0 <_ZN23px4_AlgorithmModelClass4stepEv+0x960>
 80044c2:	bf00      	nop
 80044c4:	24000038 	.word	0x24000038
  } else {
    y = Second_att_control_codeblock__B.M6;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80044ce:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[5] = y;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8b7a      	ldrh	r2, [r7, #26]
 80044d4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

  // Delay: '<S5>/Delay'
  Second_att_control_codeblock__B.Delay =
    Second_att_control_codeblock_DW.Delay_DSTATE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  Second_att_control_codeblock__B.Delay =
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  // Gain: '<S5>/antiWU_Gain'
  Second_att_control_codeblock__B.antiWU_Gain =
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 80044e4:	4b52      	ldr	r3, [pc, #328]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 80044e6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
    Second_att_control_codeblock__B.Delay;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 80044f0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain =
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

  // Sum: '<S5>/Add'
  Second_att_control_codeblock__B.Add =
    Second_att_control_codeblock__B.pitchrollerror_b -
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	ed93 7a07 	vldr	s14, [r3, #28]
    Second_att_control_codeblock__B.antiWU_Gain;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004506:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add =
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  // Delay: '<S5>/Delay1'
  Second_att_control_codeblock__B.Delay1 =
    Second_att_control_codeblock_DW.Delay1_DSTATE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  Second_att_control_codeblock__B.Delay1 =
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  // Gain: '<S5>/antiWU_Gain1'
  Second_att_control_codeblock__B.antiWU_Gain1 =
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 800451c:	4b44      	ldr	r3, [pc, #272]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 800451e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__B.Delay1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain1 =
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac

  // Sum: '<S5>/Add1'
  Second_att_control_codeblock__B.Add1 =
    Second_att_control_codeblock__B.pitchrollerror_i -
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    Second_att_control_codeblock__B.antiWU_Gain1;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
    Second_att_control_codeblock__B.pitchrollerror_i -
 800453e:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add1 =
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

  // Gain: '<S38>/Integral Gain'
  Second_att_control_codeblock__B.IntegralGain = kI_Yaw_rate_PID *
    Second_att_control_codeblock__B.Gain_f;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
  Second_att_control_codeblock__B.IntegralGain = kI_Yaw_rate_PID *
 800454e:	4b39      	ldr	r3, [pc, #228]	; (8004634 <_ZN23px4_AlgorithmModelClass4stepEv+0xac4>)
 8004550:	edd3 7a00 	vldr	s15, [r3]
 8004554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004564:	4b32      	ldr	r3, [pc, #200]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004566:	edd3 6a03 	vldr	s13, [r3, #12]
    Second_att_control_codeblock__B.pitchrollerror;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	edd3 7a02 	vldr	s15, [r3, #8]
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004570:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004584:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 8004586:	edd3 6a05 	vldr	s13, [r3, #20]
    Second_att_control_codeblock__B.Add;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004590:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 8004594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__B.TSamp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  Second_att_control_codeblock_DW.UD_DSTATE =
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 80045b0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.pitchrollerror_m;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 80045ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 80045be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 80045ce:	4b18      	ldr	r3, [pc, #96]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 80045d0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
    Second_att_control_codeblock__B.Add1;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 80045da:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 80045de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__B.TSamp_h;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  // Update for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
    Second_att_control_codeblock__P.Integrator_gainval *
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0xac0>)
 80045fa:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
    Second_att_control_codeblock__B.IntegralGain;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
    Second_att_control_codeblock__P.Integrator_gainval *
 8004604:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8004608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

  // Update for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  Second_att_control_codeblock_DW.Delay_DSTATE =
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // Update for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8004626:	bf00      	nop
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	24000038 	.word	0x24000038
 8004634:	24000028 	.word	0x24000028

08004638 <_ZN23px4_AlgorithmModelClass10initializeEv>:

// Model initialize function
void px4_AlgorithmModelClass::initialize()
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC;
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004642:	691a      	ldr	r2, [r3, #16]
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC_k;
 800464a:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 800464c:	699a      	ldr	r2, [r3, #24]
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__P.DiscreteDerivative_ICPrevScaled;
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004656:	681a      	ldr	r2, [r3, #0]
  Second_att_control_codeblock_DW.UD_DSTATE =
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC;
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC_j;
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 800466a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__P.DiscreteDerivative1_ICPrevScale;
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004674:	685a      	ldr	r2, [r3, #4]
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  // InitializeConditions for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE =
    Second_att_control_codeblock__P.DiscretePIDController_InitialCo;
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 800467e:	689a      	ldr	r2, [r3, #8]
  Second_att_control_codeblock_DW.Integrator_DSTATE =
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  // InitializeConditions for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__P.Delay_InitialCondition;
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  Second_att_control_codeblock_DW.Delay_DSTATE =
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // InitializeConditions for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__P.Delay1_InitialCondition;
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004692:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	24000038 	.word	0x24000038

080046ac <_ZN23px4_AlgorithmModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
px4_AlgorithmModelClass::px4_AlgorithmModelClass():
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  Second_att_control_codeblock__B()
  ,Second_att_control_codeblock_DW()
  ,Second_att_control_codeblock__U()
  ,Second_att_control_codeblock__Y()
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	23c4      	movs	r3, #196	; 0xc4
 80046ba:	461a      	mov	r2, r3
 80046bc:	2100      	movs	r1, #0
 80046be:	f028 fdc6 	bl	802d24e <memset>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	33c4      	adds	r3, #196	; 0xc4
 80046c6:	2224      	movs	r2, #36	; 0x24
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f028 fdbf 	bl	802d24e <memset>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	33e8      	adds	r3, #232	; 0xe8
 80046d4:	2224      	movs	r2, #36	; 0x24
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f028 fdb8 	bl	802d24e <memset>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
{
  // Currently there is no constructor body generated.
}
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <_ZN25positionControlModelClass4stepEv>:
                                          //  Referenced by: '<S189>/Proportional Gain'


// Model step function
void positionControlModelClass::step()
{
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b08f      	sub	sp, #60	; 0x3c
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  real_T u2;

  // DataTypeConversion: '<S1>/Data Type Conversion' incorporates:
  //   Inport: '<Root>/estim_yaw'

  positionControl_B.DataTypeConversion = positionControl_U.estim_yaw;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	edd3 7aca 	vldr	s15, [r3, #808]	; 0x328
 8004706:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S8>/Trigonometric Function'
  cosOut = positionControl_B.DataTypeConversion;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004716:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = std::sin(cosOut);
 800471a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800471e:	f025 fe33 	bl	802a388 <sin>
 8004722:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
  cosOut = std::cos(cosOut);
 8004726:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800472a:	f025 fd79 	bl	802a220 <cos>
 800472e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.TrigonometricFunction_o1 = sinOut;
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004738:	e9c2 3402 	strd	r3, r4, [r2, #8]
  positionControl_B.TrigonometricFunction_o2 = cosOut;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004742:	e9c2 3404 	strd	r3, r4, [r2, #16]

  // SignalConversion generated from: '<S8>/Vector Concatenate'
  positionControl_B.MatrixConcatenate[0] =
    positionControl_B.TrigonometricFunction_o2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_B.MatrixConcatenate[0] =
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	e9c2 3406 	strd	r3, r4, [r2, #24]

  // Gain: '<S8>/Gain'
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 8004752:	4b8e      	ldr	r3, [pc, #568]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 8004754:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
    positionControl_B.TrigonometricFunction_o1;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	ed93 7b02 	vldr	d7, [r3, #8]
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 800475e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	ed83 7b08 	vstr	d7, [r3, #32]

  // SignalConversion generated from: '<S8>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[2] =
    positionControl_B.TrigonometricFunction_o1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_B.MatrixConcatenate[2] =
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

  // SignalConversion generated from: '<S8>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[3] =
    positionControl_B.TrigonometricFunction_o2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_B.MatrixConcatenate[3] =
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

  // Sum: '<S1>/Add' incorporates:
  //   Inport: '<Root>/estim_x'
  //   Inport: '<Root>/set_x'

  positionControl_B.x_error = positionControl_U.set_x -
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	ed93 6bce 	vldr	d6, [r3, #824]	; 0x338
    positionControl_U.estim_x;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	ed93 7bd4 	vldr	d7, [r3, #848]	; 0x350
  positionControl_B.x_error = positionControl_U.set_x -
 800478c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

  // Gain: '<S45>/Proportional Gain'
  positionControl_B.ProportionalGain = pos_x_P * positionControl_B.x_error;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 800479c:	4b7c      	ldr	r3, [pc, #496]	; (8004990 <_ZN25positionControlModelClass4stepEv+0x298>)
 800479e:	ed93 7b00 	vldr	d7, [r3]
 80047a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

  // DiscreteIntegrator: '<S40>/Integrator'
  positionControl_B.Integrator = positionControl_DW.Integrator_DSTATE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	e9d3 34b2 	ldrd	r3, r4, [r3, #712]	; 0x2c8
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

  // Gain: '<S34>/Derivative Gain'
  positionControl_B.DerivativeGain = pos_x_D * positionControl_B.x_error;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80047be:	4b75      	ldr	r3, [pc, #468]	; (8004994 <_ZN25positionControlModelClass4stepEv+0x29c>)
 80047c0:	ed93 7b00 	vldr	d7, [r3]
 80047c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

  // DiscreteIntegrator: '<S35>/Filter'
  positionControl_B.Filter = positionControl_DW.Filter_DSTATE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	e9d3 34b4 	ldrd	r3, r4, [r3, #720]	; 0x2d0
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

  // Sum: '<S35>/SumD'
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
    positionControl_B.Filter;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 80047e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

  // Gain: '<S43>/Filter Coefficient'
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 80047f0:	4b66      	ldr	r3, [pc, #408]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 80047f2:	ed93 6b26 	vldr	d6, [r3, #152]	; 0x98
    positionControl_B.SumD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 80047fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68

  // Sum: '<S49>/Sum'
  positionControl_B.Sum = positionControl_B.ProportionalGain +
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
    positionControl_B.Integrator + positionControl_B.FilterCoefficient;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
  positionControl_B.Sum = positionControl_B.ProportionalGain +
 8004812:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator + positionControl_B.FilterCoefficient;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800481c:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum = positionControl_B.ProportionalGain +
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70

  // Saturate: '<S47>/Saturation'
  cosOut = positionControl_B.Sum;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800482c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController_LowerSaturationLi;
 8004830:	4b56      	ldr	r3, [pc, #344]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 8004832:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8004836:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController_UpperSaturationLi;
 800483a:	4b54      	ldr	r3, [pc, #336]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 800483c:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8004840:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004844:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004848:	ed97 7b08 	vldr	d7, [r7, #32]
 800484c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	dd05      	ble.n	8004862 <_ZN25positionControlModelClass4stepEv+0x16a>
    positionControl_B.Saturation = u2;
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800485c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8004860:	e013      	b.n	800488a <_ZN25positionControlModelClass4stepEv+0x192>
  } else if (cosOut < sinOut) {
 8004862:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004866:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800486a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800486e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004872:	d505      	bpl.n	8004880 <_ZN25positionControlModelClass4stepEv+0x188>
    positionControl_B.Saturation = sinOut;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800487a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 800487e:	e004      	b.n	800488a <_ZN25positionControlModelClass4stepEv+0x192>
  } else {
    positionControl_B.Saturation = cosOut;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004886:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

  // Sum: '<S1>/Add4' incorporates:
  //   Inport: '<Root>/estim_y'
  //   Inport: '<Root>/set_y'

  positionControl_B.y_error = positionControl_U.set_y -
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	ed93 6bd0 	vldr	d6, [r3, #832]	; 0x340
    positionControl_U.estim_y;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
  positionControl_B.y_error = positionControl_U.set_y -
 8004896:	ee36 7b47 	vsub.f64	d7, d6, d7
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80

  // Gain: '<S237>/Proportional Gain'
  positionControl_B.ProportionalGain_p = pos_y_P * positionControl_B.y_error;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 80048a6:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <_ZN25positionControlModelClass4stepEv+0x2a0>)
 80048a8:	ed93 7b00 	vldr	d7, [r3]
 80048ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88

  // DiscreteIntegrator: '<S232>/Integrator'
  positionControl_B.Integrator_f = positionControl_DW.Integrator_DSTATE_k;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	e9d3 34b6 	ldrd	r3, r4, [r3, #728]	; 0x2d8
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90

  // Gain: '<S226>/Derivative Gain'
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 80048c2:	4b32      	ldr	r3, [pc, #200]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 80048c4:	ed93 6b00 	vldr	d6, [r3]
    positionControl_B.y_error;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 80048ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98

  // DiscreteIntegrator: '<S227>/Filter'
  positionControl_B.Filter_p = positionControl_DW.Filter_DSTATE_m;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

  // Sum: '<S227>/SumD'
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	ed93 6b26 	vldr	d6, [r3, #152]	; 0x98
    positionControl_B.Filter_p;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 80048f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8

  // Gain: '<S235>/Filter Coefficient'
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 80048fc:	ed93 6b28 	vldr	d6, [r3, #160]	; 0xa0
    positionControl_B.SumD_k;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 8004906:	ee26 7b07 	vmul.f64	d7, d6, d7
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0

  // Sum: '<S241>/Sum'
  positionControl_B.Sum_k = positionControl_B.ProportionalGain_p +
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
    positionControl_B.Integrator_f + positionControl_B.FilterCoefficient_n;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
  positionControl_B.Sum_k = positionControl_B.ProportionalGain_p +
 800491c:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_f + positionControl_B.FilterCoefficient_n;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004926:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_k = positionControl_B.ProportionalGain_p +
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8

  // Saturate: '<S239>/Saturation'
  cosOut = positionControl_B.Sum_k;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 8004936:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController4_LowerSaturationL;
 800493a:	4b14      	ldr	r3, [pc, #80]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 800493c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004940:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController4_UpperSaturationL;
 8004944:	4b11      	ldr	r3, [pc, #68]	; (800498c <_ZN25positionControlModelClass4stepEv+0x294>)
 8004946:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 800494a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 800494e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004952:	ed97 7b08 	vldr	d7, [r7, #32]
 8004956:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800495a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495e:	dd05      	ble.n	800496c <_ZN25positionControlModelClass4stepEv+0x274>
    positionControl_B.Saturation_o = u2;
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004966:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 800496a:	e01c      	b.n	80049a6 <_ZN25positionControlModelClass4stepEv+0x2ae>
  } else if (cosOut < sinOut) {
 800496c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004970:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004974:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497c:	d50e      	bpl.n	800499c <_ZN25positionControlModelClass4stepEv+0x2a4>
    positionControl_B.Saturation_o = sinOut;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004984:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 8004988:	e00d      	b.n	80049a6 <_ZN25positionControlModelClass4stepEv+0x2ae>
 800498a:	bf00      	nop
 800498c:	24000118 	.word	0x24000118
 8004990:	240000b0 	.word	0x240000b0
 8004994:	24000938 	.word	0x24000938
 8004998:	240000d8 	.word	0x240000d8
  } else {
    positionControl_B.Saturation_o = cosOut;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80049a2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

  // Sum: '<S1>/Add1' incorporates:
  //   Inport: '<Root>/estim_dx'
  //   Inport: '<Root>/estim_dy'

  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	ed93 6bda 	vldr	d6, [r3, #872]	; 0x368
    positionControl_B.Saturation;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 80049b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	ed93 6bdc 	vldr	d6, [r3, #880]	; 0x370
    positionControl_B.Saturation_o;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 80049c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0

  // Product: '<S1>/Matrix Multiply'
  cosOut = positionControl_B.MatrixConcatenate[0];
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80049d8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_B.MatrixConcatenate[1];
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80049e2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_B.MatrixConcatenate[2];
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80049ec:	e9c7 3408 	strd	r3, r4, [r7, #32]
  tmp = positionControl_B.MatrixConcatenate[3];
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80049f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
  tmp_0 = positionControl_B.Add1[0];
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8004a00:	e9c7 3404 	strd	r3, r4, [r7, #16]
  tmp_1 = positionControl_B.Add1[1];
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 8004a0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
  cosOut *= tmp_0;
 8004a0e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004a12:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a1a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  cosOut += u2 * tmp_1;
 8004a1e:	ed97 6b08 	vldr	d6, [r7, #32]
 8004a22:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a2a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004a2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a32:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  positionControl_B.vel_error[0] = cosOut;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004a3c:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
  sinOut *= tmp_0;
 8004a40:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004a44:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a4c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  sinOut += tmp * tmp_1;
 8004a50:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a54:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a5c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004a60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a64:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  positionControl_B.vel_error[1] = sinOut;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004a6e:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0

  // Gain: '<S285>/Proportional Gain'
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
    positionControl_B.vel_error[1];
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	ed93 6b38 	vldr	d6, [r3, #224]	; 0xe0
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
 8004a78:	4b7f      	ldr	r3, [pc, #508]	; (8004c78 <_ZN25positionControlModelClass4stepEv+0x580>)
 8004a7a:	ed93 7b00 	vldr	d7, [r3]
 8004a7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8

  // DiscreteIntegrator: '<S280>/Integrator'
  positionControl_B.Integrator_h = positionControl_DW.Integrator_DSTATE_f;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

  // Gain: '<S274>/Derivative Gain'
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
    positionControl_B.vel_error[1];
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	ed93 6b38 	vldr	d6, [r3, #224]	; 0xe0
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
 8004a9a:	4b78      	ldr	r3, [pc, #480]	; (8004c7c <_ZN25positionControlModelClass4stepEv+0x584>)
 8004a9c:	ed93 7b00 	vldr	d7, [r3]
 8004aa0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8

  // DiscreteIntegrator: '<S275>/Filter'
  positionControl_B.Filter_g = positionControl_DW.Filter_DSTATE_j;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	e9d3 34bc 	ldrd	r3, r4, [r3, #752]	; 0x2f0
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100

  // Sum: '<S275>/SumD'
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	ed93 6b3e 	vldr	d6, [r3, #248]	; 0xf8
    positionControl_B.Filter_g;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 8004ac2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108

  // Gain: '<S283>/Filter Coefficient'
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 8004acc:	4b6c      	ldr	r3, [pc, #432]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004ace:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
    positionControl_B.SumD_f;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 8004ad8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110

  // Sum: '<S289>/Sum'
  positionControl_B.Sum_m = positionControl_B.ProportionalGain_m +
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	ed93 6b3a 	vldr	d6, [r3, #232]	; 0xe8
    positionControl_B.Integrator_h + positionControl_B.FilterCoefficient_e;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
  positionControl_B.Sum_m = positionControl_B.ProportionalGain_m +
 8004aee:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_h + positionControl_B.FilterCoefficient_e;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8004af8:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_m = positionControl_B.ProportionalGain_m +
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118

  // Saturate: '<S287>/Saturation'
  cosOut = positionControl_B.Sum_m;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	e9d3 3446 	ldrd	r3, r4, [r3, #280]	; 0x118
 8004b08:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController5_LowerSaturationL;
 8004b0c:	4b5c      	ldr	r3, [pc, #368]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004b0e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8004b12:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController5_UpperSaturationL;
 8004b16:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004b18:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 8004b1c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004b20:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004b24:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	dd05      	ble.n	8004b3e <_ZN25positionControlModelClass4stepEv+0x446>
    positionControl_B.Saturation_l = u2;
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b38:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 8004b3c:	e013      	b.n	8004b66 <_ZN25positionControlModelClass4stepEv+0x46e>
  } else if (cosOut < sinOut) {
 8004b3e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004b42:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004b46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4e:	d505      	bpl.n	8004b5c <_ZN25positionControlModelClass4stepEv+0x464>
    positionControl_B.Saturation_l = sinOut;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004b56:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 8004b5a:	e004      	b.n	8004b66 <_ZN25positionControlModelClass4stepEv+0x46e>
  } else {
    positionControl_B.Saturation_l = cosOut;
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004b62:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
  }

  // End of Saturate: '<S287>/Saturation'

  // Gain: '<S1>/Gain1'
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 8004b66:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004b68:	ed93 6b52 	vldr	d6, [r3, #328]	; 0x148
    positionControl_B.Saturation_l;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 8004b72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128

  // Outport: '<Root>/des_roll' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion3'

  positionControl_Y.des_roll = static_cast<real32_T>(positionControl_B.Gain1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 8004b82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	edc3 7ae0 	vstr	s15, [r3, #896]	; 0x380

  // Gain: '<S93>/Proportional Gain'
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
    positionControl_B.vel_error[0];
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	ed93 6b36 	vldr	d6, [r3, #216]	; 0xd8
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
 8004b92:	4b3c      	ldr	r3, [pc, #240]	; (8004c84 <_ZN25positionControlModelClass4stepEv+0x58c>)
 8004b94:	ed93 7b00 	vldr	d7, [r3]
 8004b98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130

  // DiscreteIntegrator: '<S88>/Integrator'
  positionControl_B.Integrator_c = positionControl_DW.Integrator_DSTATE_m;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	e9d3 34be 	ldrd	r3, r4, [r3, #760]	; 0x2f8
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138

  // Gain: '<S82>/Derivative Gain'
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
    positionControl_B.vel_error[0];
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	ed93 6b36 	vldr	d6, [r3, #216]	; 0xd8
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
 8004bb4:	4b34      	ldr	r3, [pc, #208]	; (8004c88 <_ZN25positionControlModelClass4stepEv+0x590>)
 8004bb6:	ed93 7b00 	vldr	d7, [r3]
 8004bba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140

  // DiscreteIntegrator: '<S83>/Filter'
  positionControl_B.Filter_i = positionControl_DW.Filter_DSTATE_d;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	e9d3 34c0 	ldrd	r3, r4, [r3, #768]	; 0x300
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	e9c2 3452 	strd	r3, r4, [r2, #328]	; 0x148

  // Sum: '<S83>/SumD'
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	ed93 6b50 	vldr	d6, [r3, #320]	; 0x140
    positionControl_B.Filter_i;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 8004bdc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150

  // Gain: '<S91>/Filter Coefficient'
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 8004be6:	4b26      	ldr	r3, [pc, #152]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004be8:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
    positionControl_B.SumD_h;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 8004bf2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158

  // Sum: '<S97>/Sum'
  positionControl_B.Sum_o = positionControl_B.ProportionalGain_h +
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	ed93 6b4c 	vldr	d6, [r3, #304]	; 0x130
    positionControl_B.Integrator_c + positionControl_B.FilterCoefficient_f;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
  positionControl_B.Sum_o = positionControl_B.ProportionalGain_h +
 8004c08:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_c + positionControl_B.FilterCoefficient_f;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8004c12:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_o = positionControl_B.ProportionalGain_h +
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160

  // Saturate: '<S95>/Saturation'
  cosOut = positionControl_B.Sum_o;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	e9d3 3458 	ldrd	r3, r4, [r3, #352]	; 0x160
 8004c22:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController1_LowerSaturationL;
 8004c26:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004c28:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004c2c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController1_UpperSaturationL;
 8004c30:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004c32:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8004c36:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004c3a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004c3e:	ed97 7b08 	vldr	d7, [r7, #32]
 8004c42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	dd05      	ble.n	8004c58 <_ZN25positionControlModelClass4stepEv+0x560>
    positionControl_B.Saturation_j = u2;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004c52:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 8004c56:	e01e      	b.n	8004c96 <_ZN25positionControlModelClass4stepEv+0x59e>
  } else if (cosOut < sinOut) {
 8004c58:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004c5c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004c60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c68:	d510      	bpl.n	8004c8c <_ZN25positionControlModelClass4stepEv+0x594>
    positionControl_B.Saturation_j = sinOut;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004c70:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 8004c74:	e00f      	b.n	8004c96 <_ZN25positionControlModelClass4stepEv+0x59e>
 8004c76:	bf00      	nop
 8004c78:	240000f0 	.word	0x240000f0
 8004c7c:	240000e0 	.word	0x240000e0
 8004c80:	24000118 	.word	0x24000118
 8004c84:	240000c8 	.word	0x240000c8
 8004c88:	240000b8 	.word	0x240000b8
  } else {
    positionControl_B.Saturation_j = cosOut;
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004c92:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168

  // Outport: '<Root>/des_pitch' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion2'

  positionControl_Y.des_pitch = static_cast<real32_T>
    (positionControl_B.Saturation_j);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
  positionControl_Y.des_pitch = static_cast<real32_T>
 8004c9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	edc3 7ae1 	vstr	s15, [r3, #900]	; 0x384

  // Sum: '<S1>/Sum' incorporates:
  //   Inport: '<Root>/set_yaw'

  positionControl_B.Sum_my = positionControl_U.set_yaw -
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	ed93 6bcc 	vldr	d6, [r3, #816]	; 0x330
    positionControl_B.DataTypeConversion;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	ed93 7b00 	vldr	d7, [r3]
  positionControl_B.Sum_my = positionControl_U.set_yaw -
 8004cb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

  // Gain: '<S1>/Gain'
  positionControl_B.Gain = Yaw_angleToRate_P * positionControl_B.Sum_my;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	ed93 6b5c 	vldr	d6, [r3, #368]	; 0x170
 8004cc2:	4ba7      	ldr	r3, [pc, #668]	; (8004f60 <_ZN25positionControlModelClass4stepEv+0x868>)
 8004cc4:	ed93 7b00 	vldr	d7, [r3]
 8004cc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178

  // Outport: '<Root>/des_yaw_rate' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion1'

  positionControl_Y.des_yaw_rate = static_cast<real32_T>(positionControl_B.Gain);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004cd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	edc3 7ae2 	vstr	s15, [r3, #904]	; 0x388

  // Sum: '<S1>/Add2' incorporates:
  //   Inport: '<Root>/estim_z'
  //   Inport: '<Root>/set_z'

  positionControl_B.alt_error = positionControl_U.set_z -
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	ed93 6bd2 	vldr	d6, [r3, #840]	; 0x348
    positionControl_U.estim_z;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	ed93 7bd8 	vldr	d7, [r3, #864]	; 0x360
  positionControl_B.alt_error = positionControl_U.set_z -
 8004cee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180

  // Gain: '<S141>/Proportional Gain'
  positionControl_B.ProportionalGain_p4 = pos_z_P * positionControl_B.alt_error;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	ed93 6b60 	vldr	d6, [r3, #384]	; 0x180
 8004cfe:	4b99      	ldr	r3, [pc, #612]	; (8004f64 <_ZN25positionControlModelClass4stepEv+0x86c>)
 8004d00:	ed93 7b00 	vldr	d7, [r3]
 8004d04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188

  // DiscreteIntegrator: '<S136>/Integrator'
  positionControl_B.Integrator_b = positionControl_DW.Integrator_DSTATE_j;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	e9d3 34c2 	ldrd	r3, r4, [r3, #776]	; 0x308
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	e9c2 3464 	strd	r3, r4, [r2, #400]	; 0x190

  // Gain: '<S130>/Derivative Gain'
  positionControl_B.DerivativeGain_b = pos_z_D * positionControl_B.alt_error;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	ed93 6b60 	vldr	d6, [r3, #384]	; 0x180
 8004d20:	4b91      	ldr	r3, [pc, #580]	; (8004f68 <_ZN25positionControlModelClass4stepEv+0x870>)
 8004d22:	ed93 7b00 	vldr	d7, [r3]
 8004d26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198

  // DiscreteIntegrator: '<S131>/Filter'
  positionControl_B.Filter_o = positionControl_DW.Filter_DSTATE_mf;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	e9d3 34c4 	ldrd	r3, r4, [r3, #784]	; 0x310
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

  // Sum: '<S131>/SumD'
  positionControl_B.SumD_m = positionControl_B.DerivativeGain_b -
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	ed93 6b66 	vldr	d6, [r3, #408]	; 0x198
    positionControl_B.Filter_o;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	ed93 7b68 	vldr	d7, [r3, #416]	; 0x1a0
  positionControl_B.SumD_m = positionControl_B.DerivativeGain_b -
 8004d48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8

  // Gain: '<S139>/Filter Coefficient'
  positionControl_B.FilterCoefficient_d = positionControl_P.PIDController2_N *
 8004d52:	4b86      	ldr	r3, [pc, #536]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004d54:	ed93 6b2e 	vldr	d6, [r3, #184]	; 0xb8
    positionControl_B.SumD_m;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
  positionControl_B.FilterCoefficient_d = positionControl_P.PIDController2_N *
 8004d5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0

  // Sum: '<S145>/Sum'
  positionControl_B.Sum_f = positionControl_B.ProportionalGain_p4 +
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	ed93 6b62 	vldr	d6, [r3, #392]	; 0x188
    positionControl_B.Integrator_b + positionControl_B.FilterCoefficient_d;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
  positionControl_B.Sum_f = positionControl_B.ProportionalGain_p4 +
 8004d74:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_b + positionControl_B.FilterCoefficient_d;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8004d7e:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_f = positionControl_B.ProportionalGain_p4 +
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8

  // Saturate: '<S143>/Saturation'
  cosOut = positionControl_B.Sum_f;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	e9d3 346e 	ldrd	r3, r4, [r3, #440]	; 0x1b8
 8004d8e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController2_LowerSaturationL;
 8004d92:	4b76      	ldr	r3, [pc, #472]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004d94:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8004d98:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController2_UpperSaturationL;
 8004d9c:	4b73      	ldr	r3, [pc, #460]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004d9e:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8004da2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004da6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004daa:	ed97 7b08 	vldr	d7, [r7, #32]
 8004dae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db6:	dd05      	ble.n	8004dc4 <_ZN25positionControlModelClass4stepEv+0x6cc>
    positionControl_B.Saturation_m = u2;
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004dbe:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
 8004dc2:	e013      	b.n	8004dec <_ZN25positionControlModelClass4stepEv+0x6f4>
  } else if (cosOut < sinOut) {
 8004dc4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004dc8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004dcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd4:	d505      	bpl.n	8004de2 <_ZN25positionControlModelClass4stepEv+0x6ea>
    positionControl_B.Saturation_m = sinOut;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004ddc:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
 8004de0:	e004      	b.n	8004dec <_ZN25positionControlModelClass4stepEv+0x6f4>
  } else {
    positionControl_B.Saturation_m = cosOut;
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004de8:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
  // End of Saturate: '<S143>/Saturation'

  // Sum: '<S1>/Add3' incorporates:
  //   Inport: '<Root>/estim_dz'

  positionControl_B.vz_error = positionControl_B.Saturation_m -
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	ed93 6b70 	vldr	d6, [r3, #448]	; 0x1c0
    positionControl_U.estim_dz;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	ed93 7bde 	vldr	d7, [r3, #888]	; 0x378
  positionControl_B.vz_error = positionControl_B.Saturation_m -
 8004df8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8

  // Gain: '<S189>/Proportional Gain'
  positionControl_B.ProportionalGain_k = pos_z_vel_P *
    positionControl_B.vz_error;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	ed93 6b72 	vldr	d6, [r3, #456]	; 0x1c8
  positionControl_B.ProportionalGain_k = pos_z_vel_P *
 8004e08:	4b59      	ldr	r3, [pc, #356]	; (8004f70 <_ZN25positionControlModelClass4stepEv+0x878>)
 8004e0a:	ed93 7b00 	vldr	d7, [r3]
 8004e0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0

  // DiscreteIntegrator: '<S184>/Integrator'
  positionControl_B.Integrator_p = positionControl_DW.Integrator_DSTATE_b;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	e9d3 34c6 	ldrd	r3, r4, [r3, #792]	; 0x318
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	e9c2 3476 	strd	r3, r4, [r2, #472]	; 0x1d8

  // Gain: '<S178>/Derivative Gain'
  positionControl_B.DerivativeGain_pu = pos_z_vel_D * positionControl_B.vz_error;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	ed93 6b72 	vldr	d6, [r3, #456]	; 0x1c8
 8004e2a:	4b52      	ldr	r3, [pc, #328]	; (8004f74 <_ZN25positionControlModelClass4stepEv+0x87c>)
 8004e2c:	ed93 7b00 	vldr	d7, [r3]
 8004e30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0

  // DiscreteIntegrator: '<S179>/Filter'
  positionControl_B.Filter_m = positionControl_DW.Filter_DSTATE_e;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	e9d3 34c8 	ldrd	r3, r4, [r3, #800]	; 0x320
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	e9c2 347a 	strd	r3, r4, [r2, #488]	; 0x1e8

  // Sum: '<S179>/SumD'
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	ed93 6b78 	vldr	d6, [r3, #480]	; 0x1e0
    positionControl_B.Filter_m;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 8004e52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	ed83 7b7c 	vstr	d7, [r3, #496]	; 0x1f0

  // Gain: '<S187>/Filter Coefficient'
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 8004e5c:	4b43      	ldr	r3, [pc, #268]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004e5e:	ed93 6b30 	vldr	d6, [r3, #192]	; 0xc0
    positionControl_B.SumD_b;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	ed93 7b7c 	vldr	d7, [r3, #496]	; 0x1f0
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 8004e68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	ed83 7b7e 	vstr	d7, [r3, #504]	; 0x1f8

  // Sum: '<S193>/Sum'
  positionControl_B.Sum_c = positionControl_B.ProportionalGain_k +
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	ed93 6b74 	vldr	d6, [r3, #464]	; 0x1d0
    positionControl_B.Integrator_p + positionControl_B.FilterCoefficient_a;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
  positionControl_B.Sum_c = positionControl_B.ProportionalGain_k +
 8004e7e:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_p + positionControl_B.FilterCoefficient_a;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
 8004e88:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_c = positionControl_B.ProportionalGain_k +
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	ed83 7b80 	vstr	d7, [r3, #512]	; 0x200

  // Saturate: '<S191>/Saturation'
  cosOut = positionControl_B.Sum_c;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	e9d3 3480 	ldrd	r3, r4, [r3, #512]	; 0x200
 8004e98:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController3_LowerSaturationL;
 8004e9c:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004e9e:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8004ea2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController3_UpperSaturationL;
 8004ea6:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004ea8:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 8004eac:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004eb0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004eb4:	ed97 7b08 	vldr	d7, [r7, #32]
 8004eb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	dd05      	ble.n	8004ece <_ZN25positionControlModelClass4stepEv+0x7d6>
    positionControl_B.Saturation_li = u2;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004ec8:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208
 8004ecc:	e013      	b.n	8004ef6 <_ZN25positionControlModelClass4stepEv+0x7fe>
  } else if (cosOut < sinOut) {
 8004ece:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004ed2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004ed6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	d505      	bpl.n	8004eec <_ZN25positionControlModelClass4stepEv+0x7f4>
    positionControl_B.Saturation_li = sinOut;
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004ee6:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208
 8004eea:	e004      	b.n	8004ef6 <_ZN25positionControlModelClass4stepEv+0x7fe>
  } else {
    positionControl_B.Saturation_li = cosOut;
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004ef2:	e9c2 3482 	strd	r3, r4, [r2, #520]	; 0x208

  // Outport: '<Root>/des_Thrust' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion4'

  positionControl_Y.des_Thrust = static_cast<real32_T>
    (positionControl_B.Saturation_li);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	ed93 7b82 	vldr	d7, [r3, #520]	; 0x208
  positionControl_Y.des_Thrust = static_cast<real32_T>
 8004efc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	edc3 7ae3 	vstr	s15, [r3, #908]	; 0x38c

  // Gain: '<S37>/Integral Gain'
  positionControl_B.IntegralGain = pos_x_I * positionControl_B.x_error;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <_ZN25positionControlModelClass4stepEv+0x880>)
 8004f0e:	ed93 7b00 	vldr	d7, [r3]
 8004f12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	ed83 7b84 	vstr	d7, [r3, #528]	; 0x210

  // Gain: '<S81>/ZeroGain'
  positionControl_B.ZeroGain = positionControl_P.ZeroGain_Gain *
 8004f1c:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004f1e:	ed93 6b60 	vldr	d6, [r3, #384]	; 0x180
    positionControl_B.Sum_o;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
  positionControl_B.ZeroGain = positionControl_P.ZeroGain_Gain *
 8004f28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218

  // DeadZone: '<S81>/DeadZone'
  if (positionControl_B.Sum_o >
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	ed93 6b58 	vldr	d6, [r3, #352]	; 0x160
      positionControl_P.PIDController1_UpperSaturationL) {
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004f3a:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
  if (positionControl_B.Sum_o >
 8004f3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	dd19      	ble.n	8004f7c <_ZN25positionControlModelClass4stepEv+0x884>
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	ed93 6b58 	vldr	d6, [r3, #352]	; 0x160
      positionControl_P.PIDController1_UpperSaturationL;
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <_ZN25positionControlModelClass4stepEv+0x874>)
 8004f50:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 8004f54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	ed83 7b88 	vstr	d7, [r3, #544]	; 0x220
 8004f5e:	e02b      	b.n	8004fb8 <_ZN25positionControlModelClass4stepEv+0x8c0>
 8004f60:	240000a0 	.word	0x240000a0
 8004f64:	240000f8 	.word	0x240000f8
 8004f68:	24000940 	.word	0x24000940
 8004f6c:	24000118 	.word	0x24000118
 8004f70:	24000110 	.word	0x24000110
 8004f74:	24000100 	.word	0x24000100
 8004f78:	240000a8 	.word	0x240000a8
  } else if (positionControl_B.Sum_o >=
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	ed93 6b58 	vldr	d6, [r3, #352]	; 0x160
             positionControl_P.PIDController1_LowerSaturationL) {
 8004f82:	4baf      	ldr	r3, [pc, #700]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 8004f84:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
  } else if (positionControl_B.Sum_o >=
 8004f88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	db07      	blt.n	8004fa2 <_ZN25positionControlModelClass4stepEv+0x8aa>
    positionControl_B.DeadZone = 0.0;
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	f04f 0400 	mov.w	r4, #0
 8004f9c:	e9c2 3488 	strd	r3, r4, [r2, #544]	; 0x220
 8004fa0:	e00a      	b.n	8004fb8 <_ZN25positionControlModelClass4stepEv+0x8c0>
  } else {
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	ed93 6b58 	vldr	d6, [r3, #352]	; 0x160
      positionControl_P.PIDController1_LowerSaturationL;
 8004fa8:	4ba5      	ldr	r3, [pc, #660]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 8004faa:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
    positionControl_B.DeadZone = positionControl_B.Sum_o -
 8004fae:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	ed83 7b88 	vstr	d7, [r3, #544]	; 0x220
  }

  // End of DeadZone: '<S81>/DeadZone'

  // RelationalOperator: '<S81>/NotEqual'
  positionControl_B.NotEqual = positionControl_B.ZeroGain !=
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	ed93 6b86 	vldr	d6, [r3, #536]	; 0x218
    positionControl_B.DeadZone;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
  positionControl_B.NotEqual = positionControl_B.ZeroGain !=
 8004fc4:	eeb4 6b47 	vcmp.f64	d6, d7
 8004fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fcc:	bf14      	ite	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	2300      	moveq	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be

  // Signum: '<S81>/SignPreSat'
  cosOut = positionControl_B.DeadZone;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	e9d3 3488 	ldrd	r3, r4, [r3, #544]	; 0x220
 8004fe2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 8004fe6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004fea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff2:	d506      	bpl.n	8005002 <_ZN25positionControlModelClass4stepEv+0x90a>
    positionControl_B.SignPreSat = -1.0;
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	4c92      	ldr	r4, [pc, #584]	; (8005244 <_ZN25positionControlModelClass4stepEv+0xb4c>)
 8004ffc:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
 8005000:	e012      	b.n	8005028 <_ZN25positionControlModelClass4stepEv+0x930>
  } else if (cosOut > 0.0) {
 8005002:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005006:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800500a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500e:	dd06      	ble.n	800501e <_ZN25positionControlModelClass4stepEv+0x926>
    positionControl_B.SignPreSat = 1.0;
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	4c8c      	ldr	r4, [pc, #560]	; (8005248 <_ZN25positionControlModelClass4stepEv+0xb50>)
 8005018:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
 800501c:	e004      	b.n	8005028 <_ZN25positionControlModelClass4stepEv+0x930>
  } else {
    positionControl_B.SignPreSat = cosOut;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005024:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
  }

  // End of Signum: '<S81>/SignPreSat'

  // DataTypeConversion: '<S81>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat), 256.0);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	ed93 7b8a 	vldr	d7, [r3, #552]	; 0x228
 800502e:	eeb0 0b47 	vmov.f64	d0, d7
 8005032:	f025 f931 	bl	802a298 <floor>
 8005036:	eeb0 7b40 	vmov.f64	d7, d0
 800503a:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8005238 <_ZN25positionControlModelClass4stepEv+0xb40>
 800503e:	eeb0 0b47 	vmov.f64	d0, d7
 8005042:	f025 fa61 	bl	802a508 <fmod>
 8005046:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 800504a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800504e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	d50d      	bpl.n	8005074 <_ZN25positionControlModelClass4stepEv+0x97c>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 8005058:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800505c:	eeb1 7b47 	vneg.f64	d7, d7
 8005060:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005064:	edc7 7a00 	vstr	s15, [r7]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 800506c:	425b      	negs	r3, r3
 800506e:	b2db      	uxtb	r3, r3
 8005070:	b25b      	sxtb	r3, r3
 8005072:	e008      	b.n	8005086 <_ZN25positionControlModelClass4stepEv+0x98e>
    (static_cast<uint8_T>(cosOut))));
 8005074:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005078:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800507c:	edc7 7a00 	vstr	s15, [r7]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 8005084:	b25b      	sxtb	r3, r3
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	f882 32b8 	strb.w	r3, [r2, #696]	; 0x2b8

  // Gain: '<S85>/Integral Gain'
  positionControl_B.IntegralGain_k = pos_x_vel_I * positionControl_B.vel_error[0];
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	ed93 6b36 	vldr	d6, [r3, #216]	; 0xd8
 8005092:	4b6e      	ldr	r3, [pc, #440]	; (800524c <_ZN25positionControlModelClass4stepEv+0xb54>)
 8005094:	ed93 7b00 	vldr	d7, [r3]
 8005098:	ee26 7b07 	vmul.f64	d7, d6, d7
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	ed83 7b8c 	vstr	d7, [r3, #560]	; 0x230

  // Signum: '<S81>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_k;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	e9d3 348c 	ldrd	r3, r4, [r3, #560]	; 0x230
 80050a8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 80050ac:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80050b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	d506      	bpl.n	80050c8 <_ZN25positionControlModelClass4stepEv+0x9d0>
    positionControl_B.SignPreIntegrator = -1.0;
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	4c60      	ldr	r4, [pc, #384]	; (8005244 <_ZN25positionControlModelClass4stepEv+0xb4c>)
 80050c2:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238
 80050c6:	e012      	b.n	80050ee <_ZN25positionControlModelClass4stepEv+0x9f6>
  } else if (cosOut > 0.0) {
 80050c8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80050cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d4:	dd06      	ble.n	80050e4 <_ZN25positionControlModelClass4stepEv+0x9ec>
    positionControl_B.SignPreIntegrator = 1.0;
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	4c5a      	ldr	r4, [pc, #360]	; (8005248 <_ZN25positionControlModelClass4stepEv+0xb50>)
 80050de:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238
 80050e2:	e004      	b.n	80050ee <_ZN25positionControlModelClass4stepEv+0x9f6>
  } else {
    positionControl_B.SignPreIntegrator = cosOut;
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80050ea:	e9c2 348e 	strd	r3, r4, [r2, #568]	; 0x238
  }

  // End of Signum: '<S81>/SignPreIntegrator'

  // DataTypeConversion: '<S81>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator), 256.0);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	ed93 7b8e 	vldr	d7, [r3, #568]	; 0x238
 80050f4:	eeb0 0b47 	vmov.f64	d0, d7
 80050f8:	f025 f8ce 	bl	802a298 <floor>
 80050fc:	eeb0 7b40 	vmov.f64	d7, d0
 8005100:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8005238 <_ZN25positionControlModelClass4stepEv+0xb40>
 8005104:	eeb0 0b47 	vmov.f64	d0, d7
 8005108:	f025 f9fe 	bl	802a508 <fmod>
 800510c:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 8005110:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005114:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	d50d      	bpl.n	800513a <_ZN25positionControlModelClass4stepEv+0xa42>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>(static_cast<
    uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>(static_cast<
 800511e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005122:	eeb1 7b47 	vneg.f64	d7, d7
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>(static_cast<
 8005126:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800512a:	edc7 7a00 	vstr	s15, [r7]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 8005132:	425b      	negs	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	b25b      	sxtb	r3, r3
 8005138:	e008      	b.n	800514c <_ZN25positionControlModelClass4stepEv+0xa54>
    uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>(static_cast<
 800513a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800513e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005142:	edc7 7a00 	vstr	s15, [r7]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 800514a:	b25b      	sxtb	r3, r3
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	f882 32b9 	strb.w	r3, [r2, #697]	; 0x2b9
    uint8_T>(cosOut))));

  // RelationalOperator: '<S81>/Equal1'
  positionControl_B.Equal1 = positionControl_B.DataTypeConv1 ==
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f993 22b8 	ldrsb.w	r2, [r3, #696]	; 0x2b8
    positionControl_B.DataTypeConv2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f993 32b9 	ldrsb.w	r3, [r3, #697]	; 0x2b9
  positionControl_B.Equal1 = positionControl_B.DataTypeConv1 ==
 800515e:	429a      	cmp	r2, r3
 8005160:	bf0c      	ite	eq
 8005162:	2301      	moveq	r3, #1
 8005164:	2300      	movne	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf

  // Logic: '<S81>/AND3'
  positionControl_B.AND3 = positionControl_B.NotEqual &&
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
 8005176:	2b00      	cmp	r3, #0
 8005178:	d006      	beq.n	8005188 <_ZN25positionControlModelClass4stepEv+0xa90>
    positionControl_B.Equal1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 32bf 	ldrb.w	r3, [r3, #703]	; 0x2bf
  positionControl_B.AND3 = positionControl_B.NotEqual &&
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <_ZN25positionControlModelClass4stepEv+0xa90>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <_ZN25positionControlModelClass4stepEv+0xa92>
 8005188:	2300      	movs	r3, #0
 800518a:	461a      	mov	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0

  // Switch: '<S81>/Switch' incorporates:
  //   Constant: '<S81>/Constant1'

  if (positionControl_B.AND3) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d006      	beq.n	80051aa <_ZN25positionControlModelClass4stepEv+0xab2>
    positionControl_B.Switch = positionControl_P.Constant1_Value;
 800519c:	4b28      	ldr	r3, [pc, #160]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 800519e:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240
 80051a8:	e005      	b.n	80051b6 <_ZN25positionControlModelClass4stepEv+0xabe>
  } else {
    positionControl_B.Switch = positionControl_B.IntegralGain_k;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	e9d3 348c 	ldrd	r3, r4, [r3, #560]	; 0x230
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240
  }

  // End of Switch: '<S81>/Switch'

  // Gain: '<S229>/Integral Gain'
  positionControl_B.IntegralGain_o = pos_y_I * positionControl_B.y_error;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 80051bc:	4b24      	ldr	r3, [pc, #144]	; (8005250 <_ZN25positionControlModelClass4stepEv+0xb58>)
 80051be:	ed93 7b00 	vldr	d7, [r3]
 80051c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	ed83 7b92 	vstr	d7, [r3, #584]	; 0x248

  // Gain: '<S273>/ZeroGain'
  positionControl_B.ZeroGain_b = positionControl_P.ZeroGain_Gain_m *
 80051cc:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 80051ce:	ed93 6b62 	vldr	d6, [r3, #392]	; 0x188
    positionControl_B.Sum_m;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
  positionControl_B.ZeroGain_b = positionControl_P.ZeroGain_Gain_m *
 80051d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	ed83 7b94 	vstr	d7, [r3, #592]	; 0x250

  // DeadZone: '<S273>/DeadZone'
  if (positionControl_B.Sum_m >
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	ed93 6b46 	vldr	d6, [r3, #280]	; 0x118
      positionControl_P.PIDController5_UpperSaturationL) {
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 80051ea:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
  if (positionControl_B.Sum_m >
 80051ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	dd0b      	ble.n	8005210 <_ZN25positionControlModelClass4stepEv+0xb18>
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	ed93 6b46 	vldr	d6, [r3, #280]	; 0x118
      positionControl_P.PIDController5_UpperSaturationL;
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 8005200:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005204:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	ed83 7b96 	vstr	d7, [r3, #600]	; 0x258
 800520e:	e02c      	b.n	800526a <_ZN25positionControlModelClass4stepEv+0xb72>
  } else if (positionControl_B.Sum_m >=
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	ed93 6b46 	vldr	d6, [r3, #280]	; 0x118
             positionControl_P.PIDController5_LowerSaturationL) {
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <_ZN25positionControlModelClass4stepEv+0xb48>)
 8005218:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
  } else if (positionControl_B.Sum_m >=
 800521c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	db16      	blt.n	8005254 <_ZN25positionControlModelClass4stepEv+0xb5c>
    positionControl_B.DeadZone_m = 0.0;
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	e9c2 3496 	strd	r3, r4, [r2, #600]	; 0x258
 8005234:	e019      	b.n	800526a <_ZN25positionControlModelClass4stepEv+0xb72>
 8005236:	bf00      	nop
 8005238:	00000000 	.word	0x00000000
 800523c:	40700000 	.word	0x40700000
 8005240:	24000118 	.word	0x24000118
 8005244:	bff00000 	.word	0xbff00000
 8005248:	3ff00000 	.word	0x3ff00000
 800524c:	240000c0 	.word	0x240000c0
 8005250:	240000d0 	.word	0x240000d0
  } else {
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	ed93 6b46 	vldr	d6, [r3, #280]	; 0x118
      positionControl_P.PIDController5_LowerSaturationL;
 800525a:	4ba5      	ldr	r3, [pc, #660]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 800525c:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
    positionControl_B.DeadZone_m = positionControl_B.Sum_m -
 8005260:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	ed83 7b96 	vstr	d7, [r3, #600]	; 0x258
  }

  // End of DeadZone: '<S273>/DeadZone'

  // RelationalOperator: '<S273>/NotEqual'
  positionControl_B.NotEqual_p = positionControl_B.ZeroGain_b !=
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	ed93 6b94 	vldr	d6, [r3, #592]	; 0x250
    positionControl_B.DeadZone_m;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	ed93 7b96 	vldr	d7, [r3, #600]	; 0x258
  positionControl_B.NotEqual_p = positionControl_B.ZeroGain_b !=
 8005276:	eeb4 6b47 	vcmp.f64	d6, d7
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1

  // Signum: '<S273>/SignPreSat'
  cosOut = positionControl_B.DeadZone_m;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8005294:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 8005298:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800529c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80052a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a4:	d506      	bpl.n	80052b4 <_ZN25positionControlModelClass4stepEv+0xbbc>
    positionControl_B.SignPreSat_n = -1.0;
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	4c91      	ldr	r4, [pc, #580]	; (80054f4 <_ZN25positionControlModelClass4stepEv+0xdfc>)
 80052ae:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260
 80052b2:	e012      	b.n	80052da <_ZN25positionControlModelClass4stepEv+0xbe2>
  } else if (cosOut > 0.0) {
 80052b4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80052b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80052bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c0:	dd06      	ble.n	80052d0 <_ZN25positionControlModelClass4stepEv+0xbd8>
    positionControl_B.SignPreSat_n = 1.0;
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	4c8b      	ldr	r4, [pc, #556]	; (80054f8 <_ZN25positionControlModelClass4stepEv+0xe00>)
 80052ca:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260
 80052ce:	e004      	b.n	80052da <_ZN25positionControlModelClass4stepEv+0xbe2>
  } else {
    positionControl_B.SignPreSat_n = cosOut;
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80052d6:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260
  }

  // End of Signum: '<S273>/SignPreSat'

  // DataTypeConversion: '<S273>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat_n), 256.0);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	ed93 7b98 	vldr	d7, [r3, #608]	; 0x260
 80052e0:	eeb0 0b47 	vmov.f64	d0, d7
 80052e4:	f024 ffd8 	bl	802a298 <floor>
 80052e8:	eeb0 7b40 	vmov.f64	d7, d0
 80052ec:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 80054e8 <_ZN25positionControlModelClass4stepEv+0xdf0>
 80052f0:	eeb0 0b47 	vmov.f64	d0, d7
 80052f4:	f025 f908 	bl	802a508 <fmod>
 80052f8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv1_e = static_cast<int8_T>(cosOut < 0.0 ?
 80052fc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005300:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005308:	d50d      	bpl.n	8005326 <_ZN25positionControlModelClass4stepEv+0xc2e>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 800530a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800530e:	eeb1 7b47 	vneg.f64	d7, d7
 8005312:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005316:	edc7 7a00 	vstr	s15, [r7]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_e = static_cast<int8_T>(cosOut < 0.0 ?
 800531e:	425b      	negs	r3, r3
 8005320:	b2db      	uxtb	r3, r3
 8005322:	b25b      	sxtb	r3, r3
 8005324:	e008      	b.n	8005338 <_ZN25positionControlModelClass4stepEv+0xc40>
    (static_cast<uint8_T>(cosOut))));
 8005326:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800532a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800532e:	edc7 7a00 	vstr	s15, [r7]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_e = static_cast<int8_T>(cosOut < 0.0 ?
 8005336:	b25b      	sxtb	r3, r3
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	f882 32ba 	strb.w	r3, [r2, #698]	; 0x2ba

  // Gain: '<S277>/Integral Gain'
  positionControl_B.IntegralGain_b = pos_y_vel_I * positionControl_B.vel_error[1];
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	ed93 6b38 	vldr	d6, [r3, #224]	; 0xe0
 8005344:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <_ZN25positionControlModelClass4stepEv+0xe04>)
 8005346:	ed93 7b00 	vldr	d7, [r3]
 800534a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	ed83 7b9a 	vstr	d7, [r3, #616]	; 0x268

  // Signum: '<S273>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_b;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 800535a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 800535e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005362:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	d506      	bpl.n	800537a <_ZN25positionControlModelClass4stepEv+0xc82>
    positionControl_B.SignPreIntegrator_n = -1.0;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	4c60      	ldr	r4, [pc, #384]	; (80054f4 <_ZN25positionControlModelClass4stepEv+0xdfc>)
 8005374:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270
 8005378:	e012      	b.n	80053a0 <_ZN25positionControlModelClass4stepEv+0xca8>
  } else if (cosOut > 0.0) {
 800537a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800537e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005386:	dd06      	ble.n	8005396 <_ZN25positionControlModelClass4stepEv+0xc9e>
    positionControl_B.SignPreIntegrator_n = 1.0;
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	4c5a      	ldr	r4, [pc, #360]	; (80054f8 <_ZN25positionControlModelClass4stepEv+0xe00>)
 8005390:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270
 8005394:	e004      	b.n	80053a0 <_ZN25positionControlModelClass4stepEv+0xca8>
  } else {
    positionControl_B.SignPreIntegrator_n = cosOut;
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800539c:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270
  }

  // End of Signum: '<S273>/SignPreIntegrator'

  // DataTypeConversion: '<S273>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator_n), 256.0);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	ed93 7b9c 	vldr	d7, [r3, #624]	; 0x270
 80053a6:	eeb0 0b47 	vmov.f64	d0, d7
 80053aa:	f024 ff75 	bl	802a298 <floor>
 80053ae:	eeb0 7b40 	vmov.f64	d7, d0
 80053b2:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 80054e8 <_ZN25positionControlModelClass4stepEv+0xdf0>
 80053b6:	eeb0 0b47 	vmov.f64	d0, d7
 80053ba:	f025 f8a5 	bl	802a508 <fmod>
 80053be:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv2_a = static_cast<int8_T>(cosOut < 0.0 ?
 80053c2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80053c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	d50d      	bpl.n	80053ec <_ZN25positionControlModelClass4stepEv+0xcf4>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 80053d0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80053d4:	eeb1 7b47 	vneg.f64	d7, d7
 80053d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80053dc:	edc7 7a00 	vstr	s15, [r7]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_a = static_cast<int8_T>(cosOut < 0.0 ?
 80053e4:	425b      	negs	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	b25b      	sxtb	r3, r3
 80053ea:	e008      	b.n	80053fe <_ZN25positionControlModelClass4stepEv+0xd06>
    (static_cast<uint8_T>(cosOut))));
 80053ec:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80053f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80053f4:	edc7 7a00 	vstr	s15, [r7]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_a = static_cast<int8_T>(cosOut < 0.0 ?
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	f882 32bb 	strb.w	r3, [r2, #699]	; 0x2bb

  // RelationalOperator: '<S273>/Equal1'
  positionControl_B.Equal1_c = positionControl_B.DataTypeConv1_e ==
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f993 22ba 	ldrsb.w	r2, [r3, #698]	; 0x2ba
    positionControl_B.DataTypeConv2_a;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f993 32bb 	ldrsb.w	r3, [r3, #699]	; 0x2bb
  positionControl_B.Equal1_c = positionControl_B.DataTypeConv1_e ==
 8005410:	429a      	cmp	r2, r3
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2

  // Logic: '<S273>/AND3'
  positionControl_B.AND3_n = positionControl_B.NotEqual_p &&
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d006      	beq.n	800543a <_ZN25positionControlModelClass4stepEv+0xd42>
    positionControl_B.Equal1_c;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
  positionControl_B.AND3_n = positionControl_B.NotEqual_p &&
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <_ZN25positionControlModelClass4stepEv+0xd42>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <_ZN25positionControlModelClass4stepEv+0xd44>
 800543a:	2300      	movs	r3, #0
 800543c:	461a      	mov	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3

  // Switch: '<S273>/Switch' incorporates:
  //   Constant: '<S273>/Constant1'

  if (positionControl_B.AND3_n) {
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 32c3 	ldrb.w	r3, [r3, #707]	; 0x2c3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d006      	beq.n	800545c <_ZN25positionControlModelClass4stepEv+0xd64>
    positionControl_B.Switch_m = positionControl_P.Constant1_Value_n;
 800544e:	4b28      	ldr	r3, [pc, #160]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 8005450:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	e9c2 349e 	strd	r3, r4, [r2, #632]	; 0x278
 800545a:	e005      	b.n	8005468 <_ZN25positionControlModelClass4stepEv+0xd70>
  } else {
    positionControl_B.Switch_m = positionControl_B.IntegralGain_b;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	e9c2 349e 	strd	r3, r4, [r2, #632]	; 0x278
  }

  // End of Switch: '<S273>/Switch'

  // Gain: '<S133>/Integral Gain'
  positionControl_B.IntegralGain_f = pos_z_I * positionControl_B.alt_error;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	ed93 6b60 	vldr	d6, [r3, #384]	; 0x180
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <_ZN25positionControlModelClass4stepEv+0xe08>)
 8005470:	ed93 7b00 	vldr	d7, [r3]
 8005474:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	ed83 7ba0 	vstr	d7, [r3, #640]	; 0x280

  // Gain: '<S177>/ZeroGain'
  positionControl_B.ZeroGain_e = positionControl_P.ZeroGain_Gain_h *
 800547e:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 8005480:	ed93 6b64 	vldr	d6, [r3, #400]	; 0x190
    positionControl_B.Sum_c;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	ed93 7b80 	vldr	d7, [r3, #512]	; 0x200
  positionControl_B.ZeroGain_e = positionControl_P.ZeroGain_Gain_h *
 800548a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	ed83 7ba2 	vstr	d7, [r3, #648]	; 0x288

  // DeadZone: '<S177>/DeadZone'
  if (positionControl_B.Sum_c >
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	ed93 6b80 	vldr	d6, [r3, #512]	; 0x200
      positionControl_P.PIDController3_UpperSaturationL) {
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 800549c:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
  if (positionControl_B.Sum_c >
 80054a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a8:	dd0b      	ble.n	80054c2 <_ZN25positionControlModelClass4stepEv+0xdca>
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	ed93 6b80 	vldr	d6, [r3, #512]	; 0x200
      positionControl_P.PIDController3_UpperSaturationL;
 80054b0:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 80054b2:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 80054b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	ed83 7ba4 	vstr	d7, [r3, #656]	; 0x290
 80054c0:	e02b      	b.n	800551a <_ZN25positionControlModelClass4stepEv+0xe22>
  } else if (positionControl_B.Sum_c >=
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	ed93 6b80 	vldr	d6, [r3, #512]	; 0x200
             positionControl_P.PIDController3_LowerSaturationL) {
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <_ZN25positionControlModelClass4stepEv+0xdf8>)
 80054ca:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
  } else if (positionControl_B.Sum_c >=
 80054ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	db15      	blt.n	8005504 <_ZN25positionControlModelClass4stepEv+0xe0c>
    positionControl_B.DeadZone_e = 0.0;
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	f04f 0400 	mov.w	r4, #0
 80054e2:	e9c2 34a4 	strd	r3, r4, [r2, #656]	; 0x290
 80054e6:	e018      	b.n	800551a <_ZN25positionControlModelClass4stepEv+0xe22>
 80054e8:	00000000 	.word	0x00000000
 80054ec:	40700000 	.word	0x40700000
 80054f0:	24000118 	.word	0x24000118
 80054f4:	bff00000 	.word	0xbff00000
 80054f8:	3ff00000 	.word	0x3ff00000
 80054fc:	240000e8 	.word	0x240000e8
 8005500:	24000948 	.word	0x24000948
  } else {
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	ed93 6b80 	vldr	d6, [r3, #512]	; 0x200
      positionControl_P.PIDController3_LowerSaturationL;
 800550a:	4b83      	ldr	r3, [pc, #524]	; (8005718 <_ZN25positionControlModelClass4stepEv+0x1020>)
 800550c:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
    positionControl_B.DeadZone_e = positionControl_B.Sum_c -
 8005510:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	ed83 7ba4 	vstr	d7, [r3, #656]	; 0x290
  }

  // End of DeadZone: '<S177>/DeadZone'

  // RelationalOperator: '<S177>/NotEqual'
  positionControl_B.NotEqual_o = positionControl_B.ZeroGain_e !=
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	ed93 6ba2 	vldr	d6, [r3, #648]	; 0x288
    positionControl_B.DeadZone_e;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	ed93 7ba4 	vldr	d7, [r3, #656]	; 0x290
  positionControl_B.NotEqual_o = positionControl_B.ZeroGain_e !=
 8005526:	eeb4 6b47 	vcmp.f64	d6, d7
 800552a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f883 22c4 	strb.w	r2, [r3, #708]	; 0x2c4

  // Signum: '<S177>/SignPreSat'
  cosOut = positionControl_B.DeadZone_e;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	e9d3 34a4 	ldrd	r3, r4, [r3, #656]	; 0x290
 8005544:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 8005548:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800554c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005554:	d506      	bpl.n	8005564 <_ZN25positionControlModelClass4stepEv+0xe6c>
    positionControl_B.SignPreSat_h = -1.0;
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	4c6f      	ldr	r4, [pc, #444]	; (800571c <_ZN25positionControlModelClass4stepEv+0x1024>)
 800555e:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298
 8005562:	e012      	b.n	800558a <_ZN25positionControlModelClass4stepEv+0xe92>
  } else if (cosOut > 0.0) {
 8005564:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005568:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800556c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005570:	dd06      	ble.n	8005580 <_ZN25positionControlModelClass4stepEv+0xe88>
    positionControl_B.SignPreSat_h = 1.0;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	4c69      	ldr	r4, [pc, #420]	; (8005720 <_ZN25positionControlModelClass4stepEv+0x1028>)
 800557a:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298
 800557e:	e004      	b.n	800558a <_ZN25positionControlModelClass4stepEv+0xe92>
  } else {
    positionControl_B.SignPreSat_h = cosOut;
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005586:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298
  }

  // End of Signum: '<S177>/SignPreSat'

  // DataTypeConversion: '<S177>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat_h), 256.0);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	ed93 7ba6 	vldr	d7, [r3, #664]	; 0x298
 8005590:	eeb0 0b47 	vmov.f64	d0, d7
 8005594:	f024 fe80 	bl	802a298 <floor>
 8005598:	eeb0 7b40 	vmov.f64	d7, d0
 800559c:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8005710 <_ZN25positionControlModelClass4stepEv+0x1018>
 80055a0:	eeb0 0b47 	vmov.f64	d0, d7
 80055a4:	f024 ffb0 	bl	802a508 <fmod>
 80055a8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv1_m = static_cast<int8_T>(cosOut < 0.0 ?
 80055ac:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80055b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80055b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b8:	d50d      	bpl.n	80055d6 <_ZN25positionControlModelClass4stepEv+0xede>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 80055ba:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80055be:	eeb1 7b47 	vneg.f64	d7, d7
 80055c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055c6:	edc7 7a00 	vstr	s15, [r7]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_m = static_cast<int8_T>(cosOut < 0.0 ?
 80055ce:	425b      	negs	r3, r3
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	e008      	b.n	80055e8 <_ZN25positionControlModelClass4stepEv+0xef0>
    (static_cast<uint8_T>(cosOut))));
 80055d6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80055da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055de:	edc7 7a00 	vstr	s15, [r7]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1_m = static_cast<int8_T>(cosOut < 0.0 ?
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	f882 32bc 	strb.w	r3, [r2, #700]	; 0x2bc

  // Gain: '<S181>/Integral Gain'
  positionControl_B.IntegralGain_l = pos_z_vel_I * positionControl_B.vz_error;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	ed93 6b72 	vldr	d6, [r3, #456]	; 0x1c8
 80055f4:	4b4b      	ldr	r3, [pc, #300]	; (8005724 <_ZN25positionControlModelClass4stepEv+0x102c>)
 80055f6:	ed93 7b00 	vldr	d7, [r3]
 80055fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	ed83 7ba8 	vstr	d7, [r3, #672]	; 0x2a0

  // Signum: '<S177>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_l;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	e9d3 34a8 	ldrd	r3, r4, [r3, #672]	; 0x2a0
 800560a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 800560e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005612:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561a:	d506      	bpl.n	800562a <_ZN25positionControlModelClass4stepEv+0xf32>
    positionControl_B.SignPreIntegrator_d = -1.0;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	4c3e      	ldr	r4, [pc, #248]	; (800571c <_ZN25positionControlModelClass4stepEv+0x1024>)
 8005624:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8
 8005628:	e012      	b.n	8005650 <_ZN25positionControlModelClass4stepEv+0xf58>
  } else if (cosOut > 0.0) {
 800562a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800562e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	dd06      	ble.n	8005646 <_ZN25positionControlModelClass4stepEv+0xf4e>
    positionControl_B.SignPreIntegrator_d = 1.0;
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	4c38      	ldr	r4, [pc, #224]	; (8005720 <_ZN25positionControlModelClass4stepEv+0x1028>)
 8005640:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8
 8005644:	e004      	b.n	8005650 <_ZN25positionControlModelClass4stepEv+0xf58>
  } else {
    positionControl_B.SignPreIntegrator_d = cosOut;
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800564c:	e9c2 34aa 	strd	r3, r4, [r2, #680]	; 0x2a8
  }

  // End of Signum: '<S177>/SignPreIntegrator'

  // DataTypeConversion: '<S177>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator_d), 256.0);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	ed93 7baa 	vldr	d7, [r3, #680]	; 0x2a8
 8005656:	eeb0 0b47 	vmov.f64	d0, d7
 800565a:	f024 fe1d 	bl	802a298 <floor>
 800565e:	eeb0 7b40 	vmov.f64	d7, d0
 8005662:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8005710 <_ZN25positionControlModelClass4stepEv+0x1018>
 8005666:	eeb0 0b47 	vmov.f64	d0, d7
 800566a:	f024 ff4d 	bl	802a508 <fmod>
 800566e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv2_j = static_cast<int8_T>(cosOut < 0.0 ?
 8005672:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005676:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567e:	d50d      	bpl.n	800569c <_ZN25positionControlModelClass4stepEv+0xfa4>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 8005680:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005684:	eeb1 7b47 	vneg.f64	d7, d7
 8005688:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800568c:	edc7 7a00 	vstr	s15, [r7]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_j = static_cast<int8_T>(cosOut < 0.0 ?
 8005694:	425b      	negs	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	b25b      	sxtb	r3, r3
 800569a:	e008      	b.n	80056ae <_ZN25positionControlModelClass4stepEv+0xfb6>
    (static_cast<uint8_T>(cosOut))));
 800569c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80056a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80056a4:	edc7 7a00 	vstr	s15, [r7]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2_j = static_cast<int8_T>(cosOut < 0.0 ?
 80056ac:	b25b      	sxtb	r3, r3
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	f882 32bd 	strb.w	r3, [r2, #701]	; 0x2bd

  // RelationalOperator: '<S177>/Equal1'
  positionControl_B.Equal1_i = positionControl_B.DataTypeConv1_m ==
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f993 22bc 	ldrsb.w	r2, [r3, #700]	; 0x2bc
    positionControl_B.DataTypeConv2_j;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f993 32bd 	ldrsb.w	r3, [r3, #701]	; 0x2bd
  positionControl_B.Equal1_i = positionControl_B.DataTypeConv1_m ==
 80056c0:	429a      	cmp	r2, r3
 80056c2:	bf0c      	ite	eq
 80056c4:	2301      	moveq	r3, #1
 80056c6:	2300      	movne	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f883 22c5 	strb.w	r2, [r3, #709]	; 0x2c5

  // Logic: '<S177>/AND3'
  positionControl_B.AND3_nv = positionControl_B.NotEqual_o &&
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 32c4 	ldrb.w	r3, [r3, #708]	; 0x2c4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <_ZN25positionControlModelClass4stepEv+0xff2>
    positionControl_B.Equal1_i;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 32c5 	ldrb.w	r3, [r3, #709]	; 0x2c5
  positionControl_B.AND3_nv = positionControl_B.NotEqual_o &&
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <_ZN25positionControlModelClass4stepEv+0xff2>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <_ZN25positionControlModelClass4stepEv+0xff4>
 80056ea:	2300      	movs	r3, #0
 80056ec:	461a      	mov	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6

  // Switch: '<S177>/Switch' incorporates:
  //   Constant: '<S177>/Constant1'

  if (positionControl_B.AND3_nv) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 32c6 	ldrb.w	r3, [r3, #710]	; 0x2c6
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d014      	beq.n	8005728 <_ZN25positionControlModelClass4stepEv+0x1030>
    positionControl_B.Switch_e = positionControl_P.Constant1_Value_k;
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <_ZN25positionControlModelClass4stepEv+0x1020>)
 8005700:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	e9c2 34ac 	strd	r3, r4, [r2, #688]	; 0x2b0
 800570a:	e013      	b.n	8005734 <_ZN25positionControlModelClass4stepEv+0x103c>
 800570c:	f3af 8000 	nop.w
 8005710:	00000000 	.word	0x00000000
 8005714:	40700000 	.word	0x40700000
 8005718:	24000118 	.word	0x24000118
 800571c:	bff00000 	.word	0xbff00000
 8005720:	3ff00000 	.word	0x3ff00000
 8005724:	24000108 	.word	0x24000108
  } else {
    positionControl_B.Switch_e = positionControl_B.IntegralGain_l;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	e9d3 34a8 	ldrd	r3, r4, [r3, #672]	; 0x2a0
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	e9c2 34ac 	strd	r3, r4, [r2, #688]	; 0x2b0
  }

  // End of Switch: '<S177>/Switch'

  // Update for DiscreteIntegrator: '<S40>/Integrator'
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	ed93 6bb2 	vldr	d6, [r3, #712]	; 0x2c8
 800573a:	4b60      	ldr	r3, [pc, #384]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800573c:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
    positionControl_B.IntegralGain;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 8005746:	ee25 7b07 	vmul.f64	d7, d5, d7
 800574a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	ed83 7bb2 	vstr	d7, [r3, #712]	; 0x2c8

  // Update for DiscreteIntegrator: '<S35>/Filter'
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	ed93 6bb4 	vldr	d6, [r3, #720]	; 0x2d0
 800575a:	4b58      	ldr	r3, [pc, #352]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800575c:	ed93 5b48 	vldr	d5, [r3, #288]	; 0x120
    positionControl_B.FilterCoefficient;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 8005766:	ee25 7b07 	vmul.f64	d7, d5, d7
 800576a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	ed83 7bb4 	vstr	d7, [r3, #720]	; 0x2d0

  // Update for DiscreteIntegrator: '<S232>/Integrator'
  positionControl_DW.Integrator_DSTATE_k +=
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	ed93 6bb6 	vldr	d6, [r3, #728]	; 0x2d8
    positionControl_P.Integrator_gainval_l * positionControl_B.IntegralGain_o;
 800577a:	4b50      	ldr	r3, [pc, #320]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800577c:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	ed93 7b92 	vldr	d7, [r3, #584]	; 0x248
 8005786:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_k +=
 800578a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	ed83 7bb6 	vstr	d7, [r3, #728]	; 0x2d8

  // Update for DiscreteIntegrator: '<S227>/Filter'
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	ed93 6bb8 	vldr	d6, [r3, #736]	; 0x2e0
 800579a:	4b48      	ldr	r3, [pc, #288]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800579c:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
    positionControl_B.FilterCoefficient_n;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 80057a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80057aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	ed83 7bb8 	vstr	d7, [r3, #736]	; 0x2e0

  // Update for DiscreteIntegrator: '<S280>/Integrator'
  positionControl_DW.Integrator_DSTATE_f +=
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	ed93 6bba 	vldr	d6, [r3, #744]	; 0x2e8
    positionControl_P.Integrator_gainval_k * positionControl_B.Switch_m;
 80057ba:	4b40      	ldr	r3, [pc, #256]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 80057bc:	ed93 5b4e 	vldr	d5, [r3, #312]	; 0x138
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	ed93 7b9e 	vldr	d7, [r3, #632]	; 0x278
 80057c6:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_f +=
 80057ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	ed83 7bba 	vstr	d7, [r3, #744]	; 0x2e8

  // Update for DiscreteIntegrator: '<S275>/Filter'
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	ed93 6bbc 	vldr	d6, [r3, #752]	; 0x2f0
 80057da:	4b38      	ldr	r3, [pc, #224]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 80057dc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
    positionControl_B.FilterCoefficient_e;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 80057e6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80057ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	ed83 7bbc 	vstr	d7, [r3, #752]	; 0x2f0

  // Update for DiscreteIntegrator: '<S88>/Integrator'
  positionControl_DW.Integrator_DSTATE_m +=
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	ed93 6bbe 	vldr	d6, [r3, #760]	; 0x2f8
    positionControl_P.Integrator_gainval_lc * positionControl_B.Switch;
 80057fa:	4b30      	ldr	r3, [pc, #192]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 80057fc:	ed93 5b54 	vldr	d5, [r3, #336]	; 0x150
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	ed93 7b90 	vldr	d7, [r3, #576]	; 0x240
 8005806:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_m +=
 800580a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	ed83 7bbe 	vstr	d7, [r3, #760]	; 0x2f8

  // Update for DiscreteIntegrator: '<S83>/Filter'
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	ed93 6bc0 	vldr	d6, [r3, #768]	; 0x300
 800581a:	4b28      	ldr	r3, [pc, #160]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800581c:	ed93 5b56 	vldr	d5, [r3, #344]	; 0x158
    positionControl_B.FilterCoefficient_f;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 8005826:	ee25 7b07 	vmul.f64	d7, d5, d7
 800582a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	ed83 7bc0 	vstr	d7, [r3, #768]	; 0x300

  // Update for DiscreteIntegrator: '<S136>/Integrator'
  positionControl_DW.Integrator_DSTATE_j +=
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	ed93 6bc2 	vldr	d6, [r3, #776]	; 0x308
    positionControl_P.Integrator_gainval_o * positionControl_B.IntegralGain_f;
 800583a:	4b20      	ldr	r3, [pc, #128]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800583c:	ed93 5b58 	vldr	d5, [r3, #352]	; 0x160
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 8005846:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_j +=
 800584a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	ed83 7bc2 	vstr	d7, [r3, #776]	; 0x308

  // Update for DiscreteIntegrator: '<S131>/Filter'
  positionControl_DW.Filter_DSTATE_mf += positionControl_P.Filter_gainval_f *
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	ed93 6bc4 	vldr	d6, [r3, #784]	; 0x310
 800585a:	4b18      	ldr	r3, [pc, #96]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800585c:	ed93 5b5a 	vldr	d5, [r3, #360]	; 0x168
    positionControl_B.FilterCoefficient_d;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
  positionControl_DW.Filter_DSTATE_mf += positionControl_P.Filter_gainval_f *
 8005866:	ee25 7b07 	vmul.f64	d7, d5, d7
 800586a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	ed83 7bc4 	vstr	d7, [r3, #784]	; 0x310

  // Update for DiscreteIntegrator: '<S184>/Integrator'
  positionControl_DW.Integrator_DSTATE_b +=
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	ed93 6bc6 	vldr	d6, [r3, #792]	; 0x318
    positionControl_P.Integrator_gainval_a * positionControl_B.Switch_e;
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800587c:	ed93 5b5c 	vldr	d5, [r3, #368]	; 0x170
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	ed93 7bac 	vldr	d7, [r3, #688]	; 0x2b0
 8005886:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_b +=
 800588a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	ed83 7bc6 	vstr	d7, [r3, #792]	; 0x318

  // Update for DiscreteIntegrator: '<S179>/Filter'
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	ed93 6bc8 	vldr	d6, [r3, #800]	; 0x320
 800589a:	4b08      	ldr	r3, [pc, #32]	; (80058bc <_ZN25positionControlModelClass4stepEv+0x11c4>)
 800589c:	ed93 5b5e 	vldr	d5, [r3, #376]	; 0x178
    positionControl_B.FilterCoefficient_a;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 80058a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80058aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	ed83 7bc8 	vstr	d7, [r3, #800]	; 0x320
}
 80058b4:	bf00      	nop
 80058b6:	373c      	adds	r7, #60	; 0x3c
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd90      	pop	{r4, r7, pc}
 80058bc:	24000118 	.word	0x24000118

080058c0 <_ZN25positionControlModelClass10initializeEv>:

// Model initialize function
void positionControlModelClass::initialize()
{
 80058c0:	b490      	push	{r4, r7}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S40>/Integrator'
  positionControl_DW.Integrator_DSTATE =
    positionControl_P.PIDController_InitialConditio_c;
 80058c8:	4b26      	ldr	r3, [pc, #152]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058ca:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
  positionControl_DW.Integrator_DSTATE =
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	e9c2 34b2 	strd	r3, r4, [r2, #712]	; 0x2c8

  // InitializeConditions for DiscreteIntegrator: '<S35>/Filter'
  positionControl_DW.Filter_DSTATE =
    positionControl_P.PIDController_InitialConditionF;
 80058d4:	4b23      	ldr	r3, [pc, #140]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058d6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_DW.Filter_DSTATE =
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	e9c2 34b4 	strd	r3, r4, [r2, #720]	; 0x2d0

  // InitializeConditions for DiscreteIntegrator: '<S232>/Integrator'
  positionControl_DW.Integrator_DSTATE_k =
    positionControl_P.PIDController4_InitialConditi_i;
 80058e0:	4b20      	ldr	r3, [pc, #128]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058e2:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
  positionControl_DW.Integrator_DSTATE_k =
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	e9c2 34b6 	strd	r3, r4, [r2, #728]	; 0x2d8

  // InitializeConditions for DiscreteIntegrator: '<S227>/Filter'
  positionControl_DW.Filter_DSTATE_m =
    positionControl_P.PIDController4_InitialCondition;
 80058ec:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058ee:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_DW.Filter_DSTATE_m =
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	e9c2 34b8 	strd	r3, r4, [r2, #736]	; 0x2e0

  // InitializeConditions for DiscreteIntegrator: '<S280>/Integrator'
  positionControl_DW.Integrator_DSTATE_f =
    positionControl_P.PIDController5_InitialConditi_c;
 80058f8:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 80058fa:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
  positionControl_DW.Integrator_DSTATE_f =
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8

  // InitializeConditions for DiscreteIntegrator: '<S275>/Filter'
  positionControl_DW.Filter_DSTATE_j =
    positionControl_P.PIDController5_InitialCondition;
 8005904:	4b17      	ldr	r3, [pc, #92]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005906:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
  positionControl_DW.Filter_DSTATE_j =
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	e9c2 34bc 	strd	r3, r4, [r2, #752]	; 0x2f0

  // InitializeConditions for DiscreteIntegrator: '<S88>/Integrator'
  positionControl_DW.Integrator_DSTATE_m =
    positionControl_P.PIDController1_InitialConditi_a;
 8005910:	4b14      	ldr	r3, [pc, #80]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005912:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
  positionControl_DW.Integrator_DSTATE_m =
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	e9c2 34be 	strd	r3, r4, [r2, #760]	; 0x2f8

  // InitializeConditions for DiscreteIntegrator: '<S83>/Filter'
  positionControl_DW.Filter_DSTATE_d =
    positionControl_P.PIDController1_InitialCondition;
 800591c:	4b11      	ldr	r3, [pc, #68]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 800591e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
  positionControl_DW.Filter_DSTATE_d =
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	e9c2 34c0 	strd	r3, r4, [r2, #768]	; 0x300

  // InitializeConditions for DiscreteIntegrator: '<S136>/Integrator'
  positionControl_DW.Integrator_DSTATE_j =
    positionControl_P.PIDController2_InitialConditi_n;
 8005928:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 800592a:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
  positionControl_DW.Integrator_DSTATE_j =
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	e9c2 34c2 	strd	r3, r4, [r2, #776]	; 0x308

  // InitializeConditions for DiscreteIntegrator: '<S131>/Filter'
  positionControl_DW.Filter_DSTATE_mf =
    positionControl_P.PIDController2_InitialCondition;
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005936:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
  positionControl_DW.Filter_DSTATE_mf =
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	e9c2 34c4 	strd	r3, r4, [r2, #784]	; 0x310

  // InitializeConditions for DiscreteIntegrator: '<S184>/Integrator'
  positionControl_DW.Integrator_DSTATE_b =
    positionControl_P.PIDController3_InitialConditi_d;
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 8005942:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
  positionControl_DW.Integrator_DSTATE_b =
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	e9c2 34c6 	strd	r3, r4, [r2, #792]	; 0x318

  // InitializeConditions for DiscreteIntegrator: '<S179>/Filter'
  positionControl_DW.Filter_DSTATE_e =
    positionControl_P.PIDController3_InitialCondition;
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <_ZN25positionControlModelClass10initializeEv+0xa4>)
 800594e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
  positionControl_DW.Filter_DSTATE_e =
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	e9c2 34c8 	strd	r3, r4, [r2, #800]	; 0x320
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bc90      	pop	{r4, r7}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	24000118 	.word	0x24000118

08005968 <_ZN25positionControlModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
positionControlModelClass::positionControlModelClass():
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  positionControl_B()
  ,positionControl_DW()
  ,positionControl_U()
  ,positionControl_Y()
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4618      	mov	r0, r3
 8005974:	f44f 7332 	mov.w	r3, #712	; 0x2c8
 8005978:	461a      	mov	r2, r3
 800597a:	2100      	movs	r1, #0
 800597c:	f027 fc67 	bl	802d24e <memset>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8005986:	2260      	movs	r2, #96	; 0x60
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f027 fc5f 	bl	802d24e <memset>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8005996:	2258      	movs	r2, #88	; 0x58
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f027 fc57 	bl	802d24e <memset>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	605a      	str	r2, [r3, #4]
 80059ac:	609a      	str	r2, [r3, #8]
 80059ae:	60da      	str	r2, [r3, #12]
{
  // Currently there is no constructor body generated.
}
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	ed87 0b00 	vstr	d0, [r7]
 80059c4:	ed97 7b00 	vldr	d7, [r7]
 80059c8:	eeb0 7bc7 	vabs.f64	d7, d7
 80059cc:	eeb0 0b47 	vmov.f64	d0, d7
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <rtGetNaN>:
  //
  // Initialize rtNaN needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetNaN(void)
  {
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80059e2:	2340      	movs	r3, #64	; 0x40
 80059e4:	60fb      	str	r3, [r7, #12]
    real_T nan = 0.0;
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	f04f 0400 	mov.w	r4, #0
 80059ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d108      	bne.n	8005a0a <rtGetNaN+0x2e>
      nan = rtGetNaNF();
 80059f8:	f000 f81a 	bl	8005a30 <rtGetNaNF>
 80059fc:	eef0 7a40 	vmov.f32	s15, s0
 8005a00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a04:	ed87 7b04 	vstr	d7, [r7, #16]
 8005a08:	e007      	b.n	8005a1a <rtGetNaN+0x3e>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <rtGetNaN+0x50>)
 8005a0c:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	603b      	str	r3, [r7, #0]
      nan = tmpVal.fltVal;
 8005a12:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a16:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return nan;
 8005a1a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005a1e:	ec44 3b17 	vmov	d7, r3, r4
  }
 8005a22:	eeb0 0b47 	vmov.f64	d0, d7
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd90      	pop	{r4, r7, pc}
 8005a2c:	fff80000 	.word	0xfff80000

08005a30 <rtGetNaNF>:
  //
  // Initialize rtNaNF needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetNaNF(void)
  {
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
    IEEESingle nanF = { { 0 } };
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	607b      	str	r3, [r7, #4]

    nanF.wordL.wordLuint = 0xFFC00000U;
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <rtGetNaNF+0x24>)
 8005a3e:	607b      	str	r3, [r7, #4]
    return nanF.wordL.wordLreal;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	ee07 3a90 	vmov	s15, r3
  }
 8005a46:	eeb0 0a67 	vmov.f32	s0, s15
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	ffc00000 	.word	0xffc00000

08005a58 <rt_InitInfAndNaN>:
  //
  // Initialize the rtInf, rtMinusInf, and rtNaN needed by the
  // generated code. NaN is initialized as non-signaling. Assumes IEEE.
  //
  static void rt_InitInfAndNaN(size_t realSize)
  {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
    (void) (realSize);
    rtNaN = rtGetNaN();
 8005a60:	f7ff ffbc 	bl	80059dc <rtGetNaN>
 8005a64:	eeb0 7b40 	vmov.f64	d7, d0
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <rt_InitInfAndNaN+0x64>)
 8005a6a:	ed83 7b00 	vstr	d7, [r3]
    rtNaNF = rtGetNaNF();
 8005a6e:	f7ff ffdf 	bl	8005a30 <rtGetNaNF>
 8005a72:	eef0 7a40 	vmov.f32	s15, s0
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <rt_InitInfAndNaN+0x68>)
 8005a78:	edc3 7a00 	vstr	s15, [r3]
    rtInf = rtGetInf();
 8005a7c:	f000 f8a0 	bl	8005bc0 <rtGetInf>
 8005a80:	eeb0 7b40 	vmov.f64	d7, d0
 8005a84:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <rt_InitInfAndNaN+0x6c>)
 8005a86:	ed83 7b00 	vstr	d7, [r3]
    rtInfF = rtGetInfF();
 8005a8a:	f000 f8c3 	bl	8005c14 <rtGetInfF>
 8005a8e:	eef0 7a40 	vmov.f32	s15, s0
 8005a92:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <rt_InitInfAndNaN+0x70>)
 8005a94:	edc3 7a00 	vstr	s15, [r3]
    rtMinusInf = rtGetMinusInf();
 8005a98:	f000 f8cc 	bl	8005c34 <rtGetMinusInf>
 8005a9c:	eeb0 7b40 	vmov.f64	d7, d0
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <rt_InitInfAndNaN+0x74>)
 8005aa2:	ed83 7b00 	vstr	d7, [r3]
    rtMinusInfF = rtGetMinusInfF();
 8005aa6:	f000 f8ef 	bl	8005c88 <rtGetMinusInfF>
 8005aaa:	eef0 7a40 	vmov.f32	s15, s0
 8005aae:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <rt_InitInfAndNaN+0x78>)
 8005ab0:	edc3 7a00 	vstr	s15, [r3]
  }
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	24000960 	.word	0x24000960
 8005ac0:	24000970 	.word	0x24000970
 8005ac4:	24000950 	.word	0x24000950
 8005ac8:	24000968 	.word	0x24000968
 8005acc:	24000958 	.word	0x24000958
 8005ad0:	2400096c 	.word	0x2400096c

08005ad4 <rtIsInf>:

  // Test if value is infinite
  static boolean_T rtIsInf(real_T value)
  {
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	ed87 0b00 	vstr	d0, [r7]
    return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8005ade:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <rtIsInf+0x44>)
 8005ae0:	ed93 7b00 	vldr	d7, [r3]
 8005ae4:	ed97 6b00 	vldr	d6, [r7]
 8005ae8:	eeb4 6b47 	vcmp.f64	d6, d7
 8005aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af0:	d009      	beq.n	8005b06 <rtIsInf+0x32>
 8005af2:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <rtIsInf+0x48>)
 8005af4:	ed93 7b00 	vldr	d7, [r3]
 8005af8:	ed97 6b00 	vldr	d6, [r7]
 8005afc:	eeb4 6b47 	vcmp.f64	d6, d7
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	d101      	bne.n	8005b0a <rtIsInf+0x36>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <rtIsInf+0x38>
 8005b0a:	2300      	movs	r3, #0
  }
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	24000950 	.word	0x24000950
 8005b1c:	24000958 	.word	0x24000958

08005b20 <rtIsNaN>:
    return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
  }

  // Test if value is not a number
  static boolean_T rtIsNaN(real_T value)
  {
 8005b20:	b590      	push	{r4, r7, lr}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	ed87 0b00 	vstr	d0, [r7]
    boolean_T result = (boolean_T) 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005b2e:	2340      	movs	r3, #64	; 0x40
 8005b30:	613b      	str	r3, [r7, #16]
    if (bitsPerReal == 32U) {
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d10a      	bne.n	8005b4e <rtIsNaN+0x2e>
      result = rtIsNaNF((real32_T)value);
 8005b38:	ed97 7b00 	vldr	d7, [r7]
 8005b3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005b40:	eeb0 0a67 	vmov.f32	s0, s15
 8005b44:	f000 f820 	bl	8005b88 <rtIsNaNF>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	75fb      	strb	r3, [r7, #23]
 8005b4c:	e015      	b.n	8005b7a <rtIsNaN+0x5a>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.fltVal = value;
 8005b4e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b52:	e9c7 3402 	strd	r3, r4, [r7, #8]
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <rtIsNaN+0x64>)
 8005b5a:	4013      	ands	r3, r2
                           0x7FF00000 &&
 8005b5c:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <rtIsNaN+0x64>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d109      	bne.n	8005b76 <rtIsNaN+0x56>
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
                           0x7FF00000 &&
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <rtIsNaN+0x52>
                            (tmpVal.bitVal.words.wordL != 0) ));
 8005b6c:	68bb      	ldr	r3, [r7, #8]
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <rtIsNaN+0x56>
                           0x7FF00000 &&
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <rtIsNaN+0x58>
 8005b76:	2300      	movs	r3, #0
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8005b78:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
  }
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd90      	pop	{r4, r7, pc}
 8005b84:	7ff00000 	.word	0x7ff00000

08005b88 <rtIsNaNF>:

  // Test if single-precision value is not a number
  static boolean_T rtIsNaNF(real32_T value)
  {
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	ed87 0a01 	vstr	s0, [r7, #4]
    IEEESingle tmp;
    tmp.wordL.wordLreal = value;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8005b9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005ba0:	d106      	bne.n	8005bb0 <rtIsNaNF+0x28>
                       (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f3c3 0316 	ubfx	r3, r3, #0, #23
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <rtIsNaNF+0x28>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <rtIsNaNF+0x2a>
 8005bb0:	2300      	movs	r3, #0
  }
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <rtGetInf>:
  //
  // Initialize rtInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetInf(void)
  {
 8005bc0:	b590      	push	{r4, r7, lr}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005bc6:	2340      	movs	r3, #64	; 0x40
 8005bc8:	60fb      	str	r3, [r7, #12]
    real_T inf = 0.0;
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	f04f 0400 	mov.w	r4, #0
 8005bd2:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d108      	bne.n	8005bee <rtGetInf+0x2e>
      inf = rtGetInfF();
 8005bdc:	f000 f81a 	bl	8005c14 <rtGetInfF>
 8005be0:	eef0 7a40 	vmov.f32	s15, s0
 8005be4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005be8:	ed87 7b04 	vstr	d7, [r7, #16]
 8005bec:	e007      	b.n	8005bfe <rtGetInf+0x3e>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8005bee:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <rtGetInf+0x50>)
 8005bf0:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	603b      	str	r3, [r7, #0]
      inf = tmpVal.fltVal;
 8005bf6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005bfa:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return inf;
 8005bfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005c02:	ec44 3b17 	vmov	d7, r3, r4
  }
 8005c06:	eeb0 0b47 	vmov.f64	d0, d7
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd90      	pop	{r4, r7, pc}
 8005c10:	7ff00000 	.word	0x7ff00000

08005c14 <rtGetInfF>:
  //
  // Initialize rtInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetInfF(void)
  {
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
    IEEESingle infF;
    infF.wordL.wordLuint = 0x7F800000U;
 8005c1a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8005c1e:	607b      	str	r3, [r7, #4]
    return infF.wordL.wordLreal;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	ee07 3a90 	vmov	s15, r3
  }
 8005c26:	eeb0 0a67 	vmov.f32	s0, s15
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <rtGetMinusInf>:
  //
  // Initialize rtMinusInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetMinusInf(void)
  {
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005c3a:	2340      	movs	r3, #64	; 0x40
 8005c3c:	60fb      	str	r3, [r7, #12]
    real_T minf = 0.0;
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	f04f 0400 	mov.w	r4, #0
 8005c46:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	d108      	bne.n	8005c62 <rtGetMinusInf+0x2e>
      minf = rtGetMinusInfF();
 8005c50:	f000 f81a 	bl	8005c88 <rtGetMinusInfF>
 8005c54:	eef0 7a40 	vmov.f32	s15, s0
 8005c58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c5c:	ed87 7b04 	vstr	d7, [r7, #16]
 8005c60:	e007      	b.n	8005c72 <rtGetMinusInf+0x3e>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8005c62:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <rtGetMinusInf+0x50>)
 8005c64:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	603b      	str	r3, [r7, #0]
      minf = tmpVal.fltVal;
 8005c6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005c6e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return minf;
 8005c72:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005c76:	ec44 3b17 	vmov	d7, r3, r4
  }
 8005c7a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd90      	pop	{r4, r7, pc}
 8005c84:	fff00000 	.word	0xfff00000

08005c88 <rtGetMinusInfF>:
  //
  // Initialize rtMinusInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetMinusInfF(void)
  {
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
    IEEESingle minfF;
    minfF.wordL.wordLuint = 0xFF800000U;
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <rtGetMinusInfF+0x20>)
 8005c90:	607b      	str	r3, [r7, #4]
    return minfF.wordL.wordLreal;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	ee07 3a90 	vmov	s15, r3
  }
 8005c98:	eeb0 0a67 	vmov.f32	s0, s15
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	ff800000 	.word	0xff800000
 8005cac:	00000000 	.word	0x00000000

08005cb0 <_Z11rt_modd_snfdd>:
}

real_T rt_modd_snf(real_T u0, real_T u1)
{
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b08b      	sub	sp, #44	; 0x2c
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	ed87 0b02 	vstr	d0, [r7, #8]
 8005cba:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  boolean_T yEq;
  real_T q;
  y = u0;
 8005cbe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005cc2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (u1 == 0.0) {
 8005cc6:	ed97 7b00 	vldr	d7, [r7]
 8005cca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd2:	d10c      	bne.n	8005cee <_Z11rt_modd_snfdd+0x3e>
    if (u0 == 0.0) {
 8005cd4:	ed97 7b02 	vldr	d7, [r7, #8]
 8005cd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce0:	f040 80e2 	bne.w	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
      y = u1;
 8005ce4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005ce8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8005cec:	e0dc      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
    }
  } else if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {
 8005cee:	ed97 0b02 	vldr	d0, [r7, #8]
 8005cf2:	f7ff ff15 	bl	8005b20 <rtIsNaN>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10d      	bne.n	8005d18 <_Z11rt_modd_snfdd+0x68>
 8005cfc:	ed97 0b00 	vldr	d0, [r7]
 8005d00:	f7ff ff0e 	bl	8005b20 <rtIsNaN>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <_Z11rt_modd_snfdd+0x68>
 8005d0a:	ed97 0b02 	vldr	d0, [r7, #8]
 8005d0e:	f7ff fee1 	bl	8005ad4 <rtIsInf>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <_Z11rt_modd_snfdd+0x6c>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <_Z11rt_modd_snfdd+0x6e>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <_Z11rt_modd_snfdd+0x7e>
    y = (rtNaN);
 8005d22:	4b6b      	ldr	r3, [pc, #428]	; (8005ed0 <_Z11rt_modd_snfdd+0x220>)
 8005d24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d28:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8005d2c:	e0bc      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
  } else if (u0 == 0.0) {
 8005d2e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3a:	d108      	bne.n	8005d4e <_Z11rt_modd_snfdd+0x9e>
    y = 0.0 / u1;
 8005d3c:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8005ec0 <_Z11rt_modd_snfdd+0x210>
 8005d40:	ed97 6b00 	vldr	d6, [r7]
 8005d44:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005d48:	ed87 7b08 	vstr	d7, [r7, #32]
 8005d4c:	e0ac      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
  } else if (rtIsInf(u1)) {
 8005d4e:	ed97 0b00 	vldr	d0, [r7]
 8005d52:	f7ff febf 	bl	8005ad4 <rtIsInf>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bf14      	ite	ne
 8005d5c:	2301      	movne	r3, #1
 8005d5e:	2300      	moveq	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01d      	beq.n	8005da2 <_Z11rt_modd_snfdd+0xf2>
    if ((u1 < 0.0) != (u0 < 0.0)) {
 8005d66:	ed97 7b00 	vldr	d7, [r7]
 8005d6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d72:	bf4c      	ite	mi
 8005d74:	2301      	movmi	r3, #1
 8005d76:	2300      	movpl	r3, #0
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	bf4c      	ite	mi
 8005d88:	2301      	movmi	r3, #1
 8005d8a:	2300      	movpl	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	4053      	eors	r3, r2
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8088 	beq.w	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
      y = u1;
 8005d98:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005d9c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8005da0:	e082      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
    }
  } else {
    y = std::fmod(u0, u1);
 8005da2:	ed97 1b00 	vldr	d1, [r7]
 8005da6:	ed97 0b02 	vldr	d0, [r7, #8]
 8005daa:	f024 fbad 	bl	802a508 <fmod>
 8005dae:	ed87 0b08 	vstr	d0, [r7, #32]
    yEq = (y == 0.0);
 8005db2:	ed97 7b08 	vldr	d7, [r7, #32]
 8005db6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2301      	moveq	r3, #1
 8005dc2:	2300      	movne	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	77fb      	strb	r3, [r7, #31]
    if ((!yEq) && (u1 > std::floor(u1))) {
 8005dc8:	7ffb      	ldrb	r3, [r7, #31]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d140      	bne.n	8005e50 <_Z11rt_modd_snfdd+0x1a0>
 8005dce:	ed97 0b00 	vldr	d0, [r7]
 8005dd2:	f024 fa61 	bl	802a298 <floor>
 8005dd6:	eeb0 6b40 	vmov.f64	d6, d0
 8005dda:	ed97 7b00 	vldr	d7, [r7]
 8005dde:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de6:	dd33      	ble.n	8005e50 <_Z11rt_modd_snfdd+0x1a0>
      q = std::abs(u0 / u1);
 8005de8:	ed97 6b02 	vldr	d6, [r7, #8]
 8005dec:	ed97 7b00 	vldr	d7, [r7]
 8005df0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005df4:	eeb0 0b45 	vmov.f64	d0, d5
 8005df8:	f7ff fddf 	bl	80059ba <_ZSt3absd>
 8005dfc:	ed87 0b04 	vstr	d0, [r7, #16]
      yEq = !(std::abs(q - std::floor(q + 0.5)) > DBL_EPSILON * q);
 8005e00:	ed97 7b04 	vldr	d7, [r7, #16]
 8005e04:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8005e08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e0c:	eeb0 0b47 	vmov.f64	d0, d7
 8005e10:	f024 fa42 	bl	802a298 <floor>
 8005e14:	eeb0 6b40 	vmov.f64	d6, d0
 8005e18:	ed97 7b04 	vldr	d7, [r7, #16]
 8005e1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e20:	eeb0 0b47 	vmov.f64	d0, d7
 8005e24:	f7ff fdc9 	bl	80059ba <_ZSt3absd>
 8005e28:	eeb0 5b40 	vmov.f64	d5, d0
 8005e2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005e30:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8005ec8 <_Z11rt_modd_snfdd+0x218>
 8005e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e38:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e40:	bfcc      	ite	gt
 8005e42:	2301      	movgt	r3, #1
 8005e44:	2300      	movle	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f083 0301 	eor.w	r3, r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	77fb      	strb	r3, [r7, #31]
    }

    if (yEq) {
 8005e50:	7ffb      	ldrb	r3, [r7, #31]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <_Z11rt_modd_snfdd+0x1b8>
      y = u1 * 0.0;
 8005e56:	ed97 7b00 	vldr	d7, [r7]
 8005e5a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8005ec0 <_Z11rt_modd_snfdd+0x210>
 8005e5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e62:	ed87 7b08 	vstr	d7, [r7, #32]
 8005e66:	e01f      	b.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
    } else {
      if ((u0 < 0.0) != (u1 < 0.0)) {
 8005e68:	ed97 7b02 	vldr	d7, [r7, #8]
 8005e6c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e74:	bf4c      	ite	mi
 8005e76:	2301      	movmi	r3, #1
 8005e78:	2300      	movpl	r3, #0
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	ed97 7b00 	vldr	d7, [r7]
 8005e80:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e88:	bf4c      	ite	mi
 8005e8a:	2301      	movmi	r3, #1
 8005e8c:	2300      	movpl	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4053      	eors	r3, r2
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <_Z11rt_modd_snfdd+0x1f8>
        y += u1;
 8005e98:	ed97 6b08 	vldr	d6, [r7, #32]
 8005e9c:	ed97 7b00 	vldr	d7, [r7]
 8005ea0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005ea4:	ed87 7b08 	vstr	d7, [r7, #32]
      }
    }
  }

  return y;
 8005ea8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005eac:	ec44 3b17 	vmov	d7, r3, r4
}
 8005eb0:	eeb0 0b47 	vmov.f64	d0, d7
 8005eb4:	372c      	adds	r7, #44	; 0x2c
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd90      	pop	{r4, r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	f3af 8000 	nop.w
	...
 8005ecc:	3cb00000 	.word	0x3cb00000
 8005ed0:	24000960 	.word	0x24000960
 8005ed4:	00000000 	.word	0x00000000

08005ed8 <_Z13rt_atan2d_snfdd>:

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	ed87 0b02 	vstr	d0, [r7, #8]
 8005ee2:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  int32_T tmp;
  int32_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8005ee6:	ed97 0b02 	vldr	d0, [r7, #8]
 8005eea:	f7ff fe19 	bl	8005b20 <rtIsNaN>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <_Z13rt_atan2d_snfdd+0x2a>
 8005ef4:	ed97 0b00 	vldr	d0, [r7]
 8005ef8:	f7ff fe12 	bl	8005b20 <rtIsNaN>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <_Z13rt_atan2d_snfdd+0x2e>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <_Z13rt_atan2d_snfdd+0x30>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <_Z13rt_atan2d_snfdd+0x40>
    y = (rtNaN);
 8005f0c:	4b44      	ldr	r3, [pc, #272]	; (8006020 <_Z13rt_atan2d_snfdd+0x148>)
 8005f0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f12:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8005f16:	e06f      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
 8005f18:	ed97 0b02 	vldr	d0, [r7, #8]
 8005f1c:	f7ff fdda 	bl	8005ad4 <rtIsInf>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <_Z13rt_atan2d_snfdd+0x60>
 8005f26:	ed97 0b00 	vldr	d0, [r7]
 8005f2a:	f7ff fdd3 	bl	8005ad4 <rtIsInf>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <_Z13rt_atan2d_snfdd+0x60>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <_Z13rt_atan2d_snfdd+0x62>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02c      	beq.n	8005f98 <_Z13rt_atan2d_snfdd+0xc0>
    if (u1 > 0.0) {
 8005f3e:	ed97 7b00 	vldr	d7, [r7]
 8005f42:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4a:	dd02      	ble.n	8005f52 <_Z13rt_atan2d_snfdd+0x7a>
      tmp = 1;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e002      	b.n	8005f58 <_Z13rt_atan2d_snfdd+0x80>
    } else {
      tmp = -1;
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295
 8005f56:	617b      	str	r3, [r7, #20]
    }

    if (u0 > 0.0) {
 8005f58:	ed97 7b02 	vldr	d7, [r7, #8]
 8005f5c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	dd02      	ble.n	8005f6c <_Z13rt_atan2d_snfdd+0x94>
      tmp_0 = 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	e002      	b.n	8005f72 <_Z13rt_atan2d_snfdd+0x9a>
    } else {
      tmp_0 = -1;
 8005f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f70:	613b      	str	r3, [r7, #16]
    }

    y = atan2(static_cast<real_T>(tmp_0), static_cast<real_T>(tmp));
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	ee07 3a90 	vmov	s15, r3
 8005f78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	ee06 3a90 	vmov	s13, r3
 8005f82:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005f86:	eeb0 1b46 	vmov.f64	d1, d6
 8005f8a:	eeb0 0b47 	vmov.f64	d0, d7
 8005f8e:	f024 fab9 	bl	802a504 <atan2>
 8005f92:	ed87 0b06 	vstr	d0, [r7, #24]
 8005f96:	e02f      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
  } else if (u1 == 0.0) {
 8005f98:	ed97 7b00 	vldr	d7, [r7]
 8005f9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa4:	d120      	bne.n	8005fe8 <_Z13rt_atan2d_snfdd+0x110>
    if (u0 > 0.0) {
 8005fa6:	ed97 7b02 	vldr	d7, [r7, #8]
 8005faa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	dd05      	ble.n	8005fc0 <_Z13rt_atan2d_snfdd+0xe8>
      y = RT_PI / 2.0;
 8005fb4:	a416      	add	r4, pc, #88	; (adr r4, 8006010 <_Z13rt_atan2d_snfdd+0x138>)
 8005fb6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005fba:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8005fbe:	e01b      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
    } else if (u0 < 0.0) {
 8005fc0:	ed97 7b02 	vldr	d7, [r7, #8]
 8005fc4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fcc:	d505      	bpl.n	8005fda <_Z13rt_atan2d_snfdd+0x102>
      y = -(RT_PI / 2.0);
 8005fce:	a412      	add	r4, pc, #72	; (adr r4, 8006018 <_Z13rt_atan2d_snfdd+0x140>)
 8005fd0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005fd4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8005fd8:	e00e      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
    } else {
      y = 0.0;
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	f04f 0400 	mov.w	r4, #0
 8005fe2:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8005fe6:	e007      	b.n	8005ff8 <_Z13rt_atan2d_snfdd+0x120>
    }
  } else {
    y = atan2(u0, u1);
 8005fe8:	ed97 1b00 	vldr	d1, [r7]
 8005fec:	ed97 0b02 	vldr	d0, [r7, #8]
 8005ff0:	f024 fa88 	bl	802a504 <atan2>
 8005ff4:	ed87 0b06 	vstr	d0, [r7, #24]
  }

  return y;
 8005ff8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005ffc:	ec44 3b17 	vmov	d7, r3, r4
}
 8006000:	eeb0 0b47 	vmov.f64	d0, d7
 8006004:	3724      	adds	r7, #36	; 0x24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd90      	pop	{r4, r7, pc}
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w
 8006010:	54442d18 	.word	0x54442d18
 8006014:	3ff921fb 	.word	0x3ff921fb
 8006018:	54442d18 	.word	0x54442d18
 800601c:	bff921fb 	.word	0xbff921fb
 8006020:	24000960 	.word	0x24000960

08006024 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>:

// Function for MATLAB Function: '<S14>/Correct'
void positionEstimatorModelClass::EKFCorrector_correctStateAndCov(real_T x[6],
  real_T P_0[36], const real_T y[4], const real_T Pxy[24], const real_T Pyy[16],
  const real_T dHdx[24])
{
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 800602a:	af00      	add	r7, sp, #0
 800602c:	f107 040c 	add.w	r4, r7, #12
 8006030:	6020      	str	r0, [r4, #0]
 8006032:	f107 0008 	add.w	r0, r7, #8
 8006036:	6001      	str	r1, [r0, #0]
 8006038:	1d39      	adds	r1, r7, #4
 800603a:	600a      	str	r2, [r1, #0]
 800603c:	463a      	mov	r2, r7
 800603e:	6013      	str	r3, [r2, #0]
  int32_T d;
  int32_T ijA;
  real_T X_1[36];
  real_T P_1[36];
  int8_T ipiv_0;
  for (b_j = 0; b_j < 16; b_j++) {
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006046:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800604a:	2b0f      	cmp	r3, #15
 800604c:	dc15      	bgt.n	800607a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x56>
    A[b_j] = Pyy[b_j];
 800604e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8006058:	4413      	add	r3, r2
 800605a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800605e:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006062:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006066:	00d2      	lsls	r2, r2, #3
 8006068:	440a      	add	r2, r1
 800606a:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 16; b_j++) {
 800606e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006072:	3301      	adds	r3, #1
 8006074:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006078:	e7e5      	b.n	8006046 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x22>
  }

  ipiv[0] = 1;
 800607a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800607e:	2201      	movs	r2, #1
 8006080:	701a      	strb	r2, [r3, #0]
  ipiv[1] = 2;
 8006082:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006086:	2202      	movs	r2, #2
 8006088:	705a      	strb	r2, [r3, #1]
  ipiv[2] = 3;
 800608a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800608e:	2203      	movs	r2, #3
 8006090:	709a      	strb	r2, [r3, #2]
  ipiv[3] = 4;
 8006092:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006096:	2204      	movs	r2, #4
 8006098:	70da      	strb	r2, [r3, #3]
  for (b_j = 0; b_j < 3; b_j++) {
 800609a:	2300      	movs	r3, #0
 800609c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80060a0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	f300 81ea 	bgt.w	800647e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x45a>
    c = b_j * 5;
 80060aa:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
    jA = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c;
 80060be:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80060c2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    smax = std::abs(A[c]);
 80060c6:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80060ca:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4413      	add	r3, r2
 80060d2:	ed93 7b00 	vldr	d7, [r3]
 80060d6:	eeb0 0b47 	vmov.f64	d0, d7
 80060da:	f7ff fc6e 	bl	80059ba <_ZSt3absd>
 80060de:	ed87 0bee 	vstr	d0, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 80060e2:	2302      	movs	r3, #2
 80060e4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80060e8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80060ec:	f1c3 0304 	rsb	r3, r3, #4
 80060f0:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80060f4:	429a      	cmp	r2, r3
 80060f6:	dc2a      	bgt.n	800614e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x12a>
      ix++;
 80060f8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80060fc:	3301      	adds	r3, #1
 80060fe:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      b_y = std::abs(A[ix]);
 8006102:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006106:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	ed93 7b00 	vldr	d7, [r3]
 8006112:	eeb0 0b47 	vmov.f64	d0, d7
 8006116:	f7ff fc50 	bl	80059ba <_ZSt3absd>
 800611a:	ed87 0be8 	vstr	d0, [r7, #928]	; 0x3a0
      if (b_y > smax) {
 800611e:	ed97 6be8 	vldr	d6, [r7, #928]	; 0x3a0
 8006122:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006126:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612e:	dd08      	ble.n	8006142 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x11e>
        jA = iy - 1;
 8006130:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006134:	3b01      	subs	r3, #1
 8006136:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
        smax = b_y;
 800613a:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 800613e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 8006142:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006146:	3301      	adds	r3, #1
 8006148:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800614c:	e7cc      	b.n	80060e8 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc4>
      }
    }

    if (A[c + jA] != 0.0) {
 800614e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006152:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006156:	4413      	add	r3, r2
 8006158:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	ed93 7b00 	vldr	d7, [r3]
 8006164:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	f000 8103 	beq.w	8006376 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x352>
      if (jA != 0) {
 8006170:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80cb 	beq.w	8006310 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x2ec>
        ipiv[b_j] = static_cast<int8_T>((b_j + jA) + 1);
 800617a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800617e:	b2da      	uxtb	r2, r3
 8006180:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	4413      	add	r3, r2
 8006188:	b2db      	uxtb	r3, r3
 800618a:	3301      	adds	r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	b259      	sxtb	r1, r3
 8006190:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8006194:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006198:	4413      	add	r3, r2
 800619a:	460a      	mov	r2, r1
 800619c:	701a      	strb	r2, [r3, #0]
        ix = b_j;
 800619e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80061a2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy = b_j + jA;
 80061a6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80061aa:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80061ae:	4413      	add	r3, r2
 80061b0:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 80061b4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80061b8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061c4:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 80061c8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80061cc:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061d8:	f507 7116 	add.w	r1, r7, #600	; 0x258
 80061dc:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80061e0:	00d2      	lsls	r2, r2, #3
 80061e2:	440a      	add	r2, r1
 80061e4:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80061e8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80061ec:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	441a      	add	r2, r3
 80061f4:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80061f8:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 80061fc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006200:	3304      	adds	r3, #4
 8006202:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006206:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800620a:	3304      	adds	r3, #4
 800620c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 8006210:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006214:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006220:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006224:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006228:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4413      	add	r3, r2
 8006230:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006234:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006238:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800623c:	00d2      	lsls	r2, r2, #3
 800623e:	440a      	add	r2, r1
 8006240:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 8006244:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006248:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	441a      	add	r2, r3
 8006250:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006254:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 8006258:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800625c:	3304      	adds	r3, #4
 800625e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006262:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006266:	3304      	adds	r3, #4
 8006268:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 800626c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006270:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	4413      	add	r3, r2
 8006278:	e9d3 3400 	ldrd	r3, r4, [r3]
 800627c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006280:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006284:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	4413      	add	r3, r2
 800628c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006290:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006294:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006298:	00d2      	lsls	r2, r2, #3
 800629a:	440a      	add	r2, r1
 800629c:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80062a0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80062a4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	441a      	add	r2, r3
 80062ac:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80062b0:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 80062b4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80062b8:	3304      	adds	r3, #4
 80062ba:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 80062be:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80062c2:	3304      	adds	r3, #4
 80062c4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 80062c8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80062cc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062d8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 80062dc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80062e0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4413      	add	r3, r2
 80062e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062ec:	f507 7116 	add.w	r1, r7, #600	; 0x258
 80062f0:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80062f4:	00d2      	lsls	r2, r2, #3
 80062f6:	440a      	add	r2, r1
 80062f8:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80062fc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006300:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	441a      	add	r2, r3
 8006308:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800630c:	e9c2 3400 	strd	r3, r4, [r2]
      }

      jA = (c - b_j) + 4;
 8006310:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006314:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	3304      	adds	r3, #4
 800631c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (ix = c + 1; ix < jA; ix++) {
 8006320:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006324:	3301      	adds	r3, #1
 8006326:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800632a:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800632e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006332:	429a      	cmp	r2, r3
 8006334:	da1f      	bge.n	8006376 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x352>
        A[ix] /= A[c];
 8006336:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800633a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	4413      	add	r3, r2
 8006342:	ed93 5b00 	vldr	d5, [r3]
 8006346:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800634a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4413      	add	r3, r2
 8006352:	ed93 6b00 	vldr	d6, [r3]
 8006356:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800635a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800635e:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	4413      	add	r3, r2
 8006366:	ed83 7b00 	vstr	d7, [r3]
      for (ix = c + 1; ix < jA; ix++) {
 800636a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800636e:	3301      	adds	r3, #1
 8006370:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8006374:	e7d9      	b.n	800632a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x306>
      }
    }

    jA = c;
 8006376:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800637a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c + 4;
 800637e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006382:	3304      	adds	r3, #4
 8006384:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800638e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006392:	f1c3 0302 	rsb	r3, r3, #2
 8006396:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800639a:	429a      	cmp	r2, r3
 800639c:	dc69      	bgt.n	8006472 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x44e>
      if (A[ix] != 0.0) {
 800639e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80063a2:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	ed93 7b00 	vldr	d7, [r3]
 80063ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b6:	d04c      	beq.n	8006452 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x42e>
        smax = -A[ix];
 80063b8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80063bc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4413      	add	r3, r2
 80063c4:	ed93 7b00 	vldr	d7, [r3]
 80063c8:	eeb1 7b47 	vneg.f64	d7, d7
 80063cc:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
        c_ix = c + 1;
 80063d0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80063d4:	3301      	adds	r3, #1
 80063d6:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        d = (jA - b_j) + 8;
 80063da:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80063de:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	3308      	adds	r3, #8
 80063e6:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
        for (ijA = jA + 5; ijA < d; ijA++) {
 80063ea:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80063ee:	3305      	adds	r3, #5
 80063f0:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80063f4:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 80063f8:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80063fc:	429a      	cmp	r2, r3
 80063fe:	da28      	bge.n	8006452 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x42e>
          A[ijA] += A[c_ix] * smax;
 8006400:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006404:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	4413      	add	r3, r2
 800640c:	ed93 6b00 	vldr	d6, [r3]
 8006410:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006414:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	ed93 5b00 	vldr	d5, [r3]
 8006420:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006424:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006428:	ee36 7b07 	vadd.f64	d7, d6, d7
 800642c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006430:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	ed83 7b00 	vstr	d7, [r3]
          c_ix++;
 800643c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006440:	3301      	adds	r3, #1
 8006442:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        for (ijA = jA + 5; ijA < d; ijA++) {
 8006446:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800644a:	3301      	adds	r3, #1
 800644c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8006450:	e7d0      	b.n	80063f4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x3d0>
        }
      }

      ix += 4;
 8006452:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006456:	3304      	adds	r3, #4
 8006458:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      jA += 4;
 800645c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006460:	3304      	adds	r3, #4
 8006462:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8006466:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800646a:	3301      	adds	r3, #1
 800646c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006470:	e78d      	b.n	800638e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x36a>
  for (b_j = 0; b_j < 3; b_j++) {
 8006472:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006476:	3301      	adds	r3, #1
 8006478:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800647c:	e610      	b.n	80060a0 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7c>
    }
  }

  for (b_j = 0; b_j < 24; b_j++) {
 800647e:	2300      	movs	r3, #0
 8006480:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006484:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006488:	2b17      	cmp	r3, #23
 800648a:	dc16      	bgt.n	80064ba <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x496>
    X_0[b_j] = Pxy[b_j];
 800648c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8006496:	4413      	add	r3, r2
 8006498:	e9d3 3400 	ldrd	r3, r4, [r3]
 800649c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80064a0:	00d2      	lsls	r2, r2, #3
 80064a2:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80064a6:	440a      	add	r2, r1
 80064a8:	3af8      	subs	r2, #248	; 0xf8
 80064aa:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 24; b_j++) {
 80064ae:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80064b2:	3301      	adds	r3, #1
 80064b4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80064b8:	e7e4      	b.n	8006484 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x460>
  }

  for (b_j = 0; b_j < 4; b_j++) {
 80064ba:	2300      	movs	r3, #0
 80064bc:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80064c0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	f300 80b4 	bgt.w	8006632 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x60e>
    jA = 6 * b_j;
 80064ca:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80064ce:	4613      	mov	r3, r2
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	4413      	add	r3, r2
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = b_j << 2;
 80064da:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy < b_j; iy++) {
 80064e4:	2300      	movs	r3, #0
 80064e6:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80064ea:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80064ee:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80064f2:	429a      	cmp	r2, r3
 80064f4:	da5d      	bge.n	80065b2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x58e>
      c_ix = 6 * iy;
 80064f6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 8006506:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800650a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800650e:	4413      	add	r3, r2
 8006510:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	ed93 7b00 	vldr	d7, [r3]
 800651c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006524:	d03f      	beq.n	80065a6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x582>
        for (c = 0; c < 6; c++) {
 8006526:	2300      	movs	r3, #0
 8006528:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800652c:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006530:	2b05      	cmp	r3, #5
 8006532:	dc38      	bgt.n	80065a6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x582>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 8006534:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006538:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800653c:	4413      	add	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006544:	4413      	add	r3, r2
 8006546:	3bf8      	subs	r3, #248	; 0xf8
 8006548:	ed93 6b00 	vldr	d6, [r3]
 800654c:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006550:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006554:	4413      	add	r3, r2
 8006556:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	ed93 5b00 	vldr	d5, [r3]
 8006562:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006566:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800656a:	4413      	add	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006572:	4413      	add	r3, r2
 8006574:	3bf8      	subs	r3, #248	; 0xf8
 8006576:	ed93 7b00 	vldr	d7, [r3]
 800657a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800657e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006582:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006586:	4413      	add	r3, r2
 8006588:	ee36 7b47 	vsub.f64	d7, d6, d7
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006592:	4413      	add	r3, r2
 8006594:	3bf8      	subs	r3, #248	; 0xf8
 8006596:	ed83 7b00 	vstr	d7, [r3]
        for (c = 0; c < 6; c++) {
 800659a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800659e:	3301      	adds	r3, #1
 80065a0:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80065a4:	e7c2      	b.n	800652c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x508>
    for (iy = 0; iy < b_j; iy++) {
 80065a6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80065aa:	3301      	adds	r3, #1
 80065ac:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80065b0:	e79b      	b.n	80064ea <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x4c6>
        }
      }
    }

    smax = 1.0 / A[b_j + ix];
 80065b2:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80065b6:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80065ba:	4413      	add	r3, r2
 80065bc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	ed93 6b00 	vldr	d6, [r3]
 80065c8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80065cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80065d0:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    for (c = 0; c < 6; c++) {
 80065d4:	2300      	movs	r3, #0
 80065d6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80065da:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80065de:	2b05      	cmp	r3, #5
 80065e0:	dc21      	bgt.n	8006626 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x602>
      X_0[c + jA] *= smax;
 80065e2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80065e6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80065ea:	4413      	add	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80065f2:	4413      	add	r3, r2
 80065f4:	3bf8      	subs	r3, #248	; 0xf8
 80065f6:	ed93 6b00 	vldr	d6, [r3]
 80065fa:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80065fe:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006602:	4413      	add	r3, r2
 8006604:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006608:	ee26 7b07 	vmul.f64	d7, d6, d7
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006612:	4413      	add	r3, r2
 8006614:	3bf8      	subs	r3, #248	; 0xf8
 8006616:	ed83 7b00 	vstr	d7, [r3]
    for (c = 0; c < 6; c++) {
 800661a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800661e:	3301      	adds	r3, #1
 8006620:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006624:	e7d9      	b.n	80065da <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x5b6>
  for (b_j = 0; b_j < 4; b_j++) {
 8006626:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800662a:	3301      	adds	r3, #1
 800662c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006630:	e746      	b.n	80064c0 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x49c>
    }
  }

  for (b_j = 3; b_j >= 0; b_j--) {
 8006632:	2303      	movs	r3, #3
 8006634:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006638:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800663c:	2b00      	cmp	r3, #0
 800663e:	db7b      	blt.n	8006738 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x714>
    jA = 6 * b_j;
 8006640:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006644:	4613      	mov	r3, r2
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	4413      	add	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = (b_j << 2) - 1;
 8006650:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	3b01      	subs	r3, #1
 8006658:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = b_j + 2; iy < 5; iy++) {
 800665c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006660:	3302      	adds	r3, #2
 8006662:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006666:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800666a:	2b04      	cmp	r3, #4
 800666c:	dc5e      	bgt.n	800672c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x708>
      c_ix = (iy - 1) * 6;
 800666e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006672:	1e5a      	subs	r2, r3, #1
 8006674:	4613      	mov	r3, r2
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	4413      	add	r3, r2
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 8006680:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006684:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006688:	4413      	add	r3, r2
 800668a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	ed93 7b00 	vldr	d7, [r3]
 8006696:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669e:	d03f      	beq.n	8006720 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6fc>
        for (c = 0; c < 6; c++) {
 80066a0:	2300      	movs	r3, #0
 80066a2:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80066a6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	dc38      	bgt.n	8006720 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6fc>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 80066ae:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80066b2:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80066b6:	4413      	add	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80066be:	4413      	add	r3, r2
 80066c0:	3bf8      	subs	r3, #248	; 0xf8
 80066c2:	ed93 6b00 	vldr	d6, [r3]
 80066c6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80066ca:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80066ce:	4413      	add	r3, r2
 80066d0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	4413      	add	r3, r2
 80066d8:	ed93 5b00 	vldr	d5, [r3]
 80066dc:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80066e0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80066e4:	4413      	add	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80066ec:	4413      	add	r3, r2
 80066ee:	3bf8      	subs	r3, #248	; 0xf8
 80066f0:	ed93 7b00 	vldr	d7, [r3]
 80066f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80066f8:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80066fc:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006700:	4413      	add	r3, r2
 8006702:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 800670c:	4413      	add	r3, r2
 800670e:	3bf8      	subs	r3, #248	; 0xf8
 8006710:	ed83 7b00 	vstr	d7, [r3]
        for (c = 0; c < 6; c++) {
 8006714:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006718:	3301      	adds	r3, #1
 800671a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800671e:	e7c2      	b.n	80066a6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x682>
    for (iy = b_j + 2; iy < 5; iy++) {
 8006720:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006724:	3301      	adds	r3, #1
 8006726:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800672a:	e79c      	b.n	8006666 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x642>
  for (b_j = 3; b_j >= 0; b_j--) {
 800672c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006730:	3b01      	subs	r3, #1
 8006732:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006736:	e77f      	b.n	8006638 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x614>
        }
      }
    }
  }

  for (b_j = 2; b_j >= 0; b_j--) {
 8006738:	2302      	movs	r3, #2
 800673a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800673e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006742:	2b00      	cmp	r3, #0
 8006744:	db6f      	blt.n	8006826 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x802>
    ipiv_0 = ipiv[b_j];
 8006746:	f507 7215 	add.w	r2, r7, #596	; 0x254
 800674a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800674e:	4413      	add	r3, r2
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
    if (b_j + 1 != ipiv_0) {
 8006756:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 8006760:	429a      	cmp	r2, r3
 8006762:	d05a      	beq.n	800681a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7f6>
      jA = ipiv_0 - 1;
 8006764:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 8006768:	3b01      	subs	r3, #1
 800676a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (c = 0; c < 6; c++) {
 800676e:	2300      	movs	r3, #0
 8006770:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006774:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006778:	2b05      	cmp	r3, #5
 800677a:	dc4e      	bgt.n	800681a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7f6>
        smax = X_0[6 * b_j + c];
 800677c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006780:	4613      	mov	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4413      	add	r3, r2
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006796:	4413      	add	r3, r2
 8006798:	3bf8      	subs	r3, #248	; 0xf8
 800679a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800679e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        X_0[c + 6 * b_j] = X_0[6 * jA + c];
 80067a2:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80067a6:	4613      	mov	r3, r2
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4413      	add	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80067b4:	18d1      	adds	r1, r2, r3
 80067b6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	461a      	mov	r2, r3
 80067c4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80067c8:	441a      	add	r2, r3
 80067ca:	00cb      	lsls	r3, r1, #3
 80067cc:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80067d0:	440b      	add	r3, r1
 80067d2:	3bf8      	subs	r3, #248	; 0xf8
 80067d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067d8:	00d2      	lsls	r2, r2, #3
 80067da:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80067de:	440a      	add	r2, r1
 80067e0:	3af8      	subs	r2, #248	; 0xf8
 80067e2:	e9c2 3400 	strd	r3, r4, [r2]
        X_0[c + 6 * jA] = smax;
 80067e6:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80067ea:	4613      	mov	r3, r2
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	4413      	add	r3, r2
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	461a      	mov	r2, r3
 80067f4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80067f8:	4413      	add	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006800:	4413      	add	r3, r2
 8006802:	f1a3 02f8 	sub.w	r2, r3, #248	; 0xf8
 8006806:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800680a:	e9c2 3400 	strd	r3, r4, [r2]
      for (c = 0; c < 6; c++) {
 800680e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006812:	3301      	adds	r3, #1
 8006814:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006818:	e7ac      	b.n	8006774 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x750>
  for (b_j = 2; b_j >= 0; b_j--) {
 800681a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800681e:	3b01      	subs	r3, #1
 8006820:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006824:	e78b      	b.n	800673e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x71a>
      }
    }
  }

  for (b_j = 0; b_j < 6; b_j++) {
 8006826:	2300      	movs	r3, #0
 8006828:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800682c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006830:	2b05      	cmp	r3, #5
 8006832:	f300 81fe 	bgt.w	8006c32 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc0e>
    smax = X_0[b_j] * y[0];
 8006836:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006840:	4413      	add	r3, r2
 8006842:	3bf8      	subs	r3, #248	; 0xf8
 8006844:	ed93 6b00 	vldr	d6, [r3]
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	ed93 7b00 	vldr	d7, [r3]
 8006850:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006854:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 6] * y[1];
 8006858:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800685c:	3306      	adds	r3, #6
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006864:	4413      	add	r3, r2
 8006866:	3bf8      	subs	r3, #248	; 0xf8
 8006868:	ed93 6b00 	vldr	d6, [r3]
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3308      	adds	r3, #8
 8006872:	ed93 7b00 	vldr	d7, [r3]
 8006876:	ee26 7b07 	vmul.f64	d7, d6, d7
 800687a:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 800687e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006882:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 12] * y[2];
 8006886:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800688a:	330c      	adds	r3, #12
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006892:	4413      	add	r3, r2
 8006894:	3bf8      	subs	r3, #248	; 0xf8
 8006896:	ed93 6b00 	vldr	d6, [r3]
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3310      	adds	r3, #16
 80068a0:	ed93 7b00 	vldr	d7, [r3]
 80068a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80068a8:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 80068ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80068b0:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 18] * y[3];
 80068b4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80068b8:	3312      	adds	r3, #18
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80068c0:	4413      	add	r3, r2
 80068c2:	3bf8      	subs	r3, #248	; 0xf8
 80068c4:	ed93 6b00 	vldr	d6, [r3]
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3318      	adds	r3, #24
 80068ce:	ed93 7b00 	vldr	d7, [r3]
 80068d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80068d6:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 80068da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80068de:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    x[b_j] += smax;
 80068e2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	f107 0208 	add.w	r2, r7, #8
 80068ec:	6812      	ldr	r2, [r2, #0]
 80068ee:	4413      	add	r3, r2
 80068f0:	ed93 6b00 	vldr	d6, [r3]
 80068f4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	4413      	add	r3, r2
 8006902:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006906:	ee36 7b07 	vadd.f64	d7, d6, d7
 800690a:	ed83 7b00 	vstr	d7, [r3]
    for (c = 0; c < 6; c++) {
 800690e:	2300      	movs	r3, #0
 8006910:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006914:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006918:	2b05      	cmp	r3, #5
 800691a:	f300 8118 	bgt.w	8006b4e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xb2a>
      X_1[b_j + 6 * c] = 0.0;
 800691e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006922:	4613      	mov	r3, r2
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	4413      	add	r3, r2
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	461a      	mov	r2, r3
 800692c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006930:	4413      	add	r3, r2
 8006932:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	441a      	add	r2, r3
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	f04f 0400 	mov.w	r4, #0
 8006942:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006946:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800694a:	4613      	mov	r3, r2
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4413      	add	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	461a      	mov	r2, r3
 8006954:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006958:	4413      	add	r3, r2
 800695a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	4413      	add	r3, r2
 8006962:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006966:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[c << 2] * X_0[b_j];
 800696a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006976:	4413      	add	r3, r2
 8006978:	ed93 6b00 	vldr	d6, [r3]
 800697c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006986:	4413      	add	r3, r2
 8006988:	3bf8      	subs	r3, #248	; 0xf8
 800698a:	ed93 7b00 	vldr	d7, [r3]
 800698e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006992:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006996:	ee36 7b07 	vadd.f64	d7, d6, d7
 800699a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 800699e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80069a2:	4613      	mov	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	4413      	add	r3, r2
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	461a      	mov	r2, r3
 80069ac:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069b0:	4413      	add	r3, r2
 80069b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	441a      	add	r2, r3
 80069ba:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80069be:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 80069c2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80069c6:	4613      	mov	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	461a      	mov	r2, r3
 80069d0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069d4:	4413      	add	r3, r2
 80069d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	4413      	add	r3, r2
 80069de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069e2:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 1] * X_0[b_j + 6];
 80069e6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	3301      	adds	r3, #1
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80069f4:	4413      	add	r3, r2
 80069f6:	ed93 6b00 	vldr	d6, [r3]
 80069fa:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069fe:	3306      	adds	r3, #6
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006a06:	4413      	add	r3, r2
 8006a08:	3bf8      	subs	r3, #248	; 0xf8
 8006a0a:	ed93 7b00 	vldr	d7, [r3]
 8006a0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006a12:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006a16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a1a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006a1e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006a22:	4613      	mov	r3, r2
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	4413      	add	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006a30:	4413      	add	r3, r2
 8006a32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	441a      	add	r2, r3
 8006a3a:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006a3e:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006a42:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006a46:	4613      	mov	r3, r2
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	4413      	add	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006a54:	4413      	add	r3, r2
 8006a56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a62:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 2] * X_0[b_j + 12];
 8006a66:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006a74:	4413      	add	r3, r2
 8006a76:	ed93 6b00 	vldr	d6, [r3]
 8006a7a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006a7e:	330c      	adds	r3, #12
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006a86:	4413      	add	r3, r2
 8006a88:	3bf8      	subs	r3, #248	; 0xf8
 8006a8a:	ed93 7b00 	vldr	d7, [r3]
 8006a8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006a92:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006a96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a9a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006a9e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	441a      	add	r2, r3
 8006aba:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006abe:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006ac2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	4413      	add	r3, r2
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	4413      	add	r3, r2
 8006ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ae2:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 3] * X_0[b_j + 18];
 8006ae6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	3303      	adds	r3, #3
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006af4:	4413      	add	r3, r2
 8006af6:	ed93 6b00 	vldr	d6, [r3]
 8006afa:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006afe:	3312      	adds	r3, #18
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006b06:	4413      	add	r3, r2
 8006b08:	3bf8      	subs	r3, #248	; 0xf8
 8006b0a:	ed93 7b00 	vldr	d7, [r3]
 8006b0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006b12:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006b16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b1a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006b1e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b30:	4413      	add	r3, r2
 8006b32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	441a      	add	r2, r3
 8006b3a:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006b3e:	e9c2 3400 	strd	r3, r4, [r2]
    for (c = 0; c < 6; c++) {
 8006b42:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006b46:	3301      	adds	r3, #1
 8006b48:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006b4c:	e6e2      	b.n	8006914 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x8f0>
    }

    for (c = 0; c < 6; c++) {
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006b54:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	dc64      	bgt.n	8006c26 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc02>
      smax = 0.0;
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	f04f 0400 	mov.w	r4, #0
 8006b64:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8006b6e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	dc2d      	bgt.n	8006bd2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xbae>
        smax += X_1[6 * jA + b_j] * P_0[6 * c + jA];
 8006b76:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	461a      	mov	r2, r3
 8006b84:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b88:	4413      	add	r3, r2
 8006b8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	4413      	add	r3, r2
 8006b92:	ed93 6b00 	vldr	d6, [r3]
 8006b96:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006ba8:	4413      	add	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	1d3a      	adds	r2, r7, #4
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	ed93 7b00 	vldr	d7, [r3]
 8006bb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006bba:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006bbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006bc2:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 8006bc6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006bca:	3301      	adds	r3, #1
 8006bcc:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8006bd0:	e7cd      	b.n	8006b6e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xb4a>
      }

      P_1[b_j + 6 * c] = P_0[6 * c + b_j] - smax;
 8006bd2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4413      	add	r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	461a      	mov	r2, r3
 8006be0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006be4:	4413      	add	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	1d3a      	adds	r2, r7, #4
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	4413      	add	r3, r2
 8006bee:	ed93 6b00 	vldr	d6, [r3]
 8006bf2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c04:	4413      	add	r3, r2
 8006c06:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006c0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c0e:	f107 0210 	add.w	r2, r7, #16
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4413      	add	r3, r2
 8006c16:	ed83 7b00 	vstr	d7, [r3]
    for (c = 0; c < 6; c++) {
 8006c1a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006c24:	e796      	b.n	8006b54 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xb30>
  for (b_j = 0; b_j < 6; b_j++) {
 8006c26:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c30:	e5fc      	b.n	800682c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x808>
    }
  }

  for (b_j = 0; b_j < 36; b_j++) {
 8006c32:	2300      	movs	r3, #0
 8006c34:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c38:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c3c:	2b23      	cmp	r3, #35	; 0x23
 8006c3e:	dc15      	bgt.n	8006c6c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc48>
    P_0[b_j] = P_1[b_j];
 8006c40:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	1d3a      	adds	r2, r7, #4
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	441a      	add	r2, r3
 8006c4c:	f107 0110 	add.w	r1, r7, #16
 8006c50:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	440b      	add	r3, r1
 8006c58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c5c:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 36; b_j++) {
 8006c60:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c64:	3301      	adds	r3, #1
 8006c66:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006c6a:	e7e5      	b.n	8006c38 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc14>
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	f507 7775 	add.w	r7, r7, #980	; 0x3d4
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}
	...

08006c78 <_ZN27positionEstimatorModelClass4stepEv>:

// Model step function
void positionEstimatorModelClass::step()
{
 8006c78:	b590      	push	{r4, r7, lr}
 8006c7a:	ed2d 8b02 	vpush	{d8}
 8006c7e:	f6ad 0de4 	subw	sp, sp, #2276	; 0x8e4
 8006c82:	af04      	add	r7, sp, #16
 8006c84:	1d3b      	adds	r3, r7, #4
 8006c86:	6018      	str	r0, [r3, #0]
    0.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  // Abs: '<S34>/Abs' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Abs = std::abs(rtU.HOME_lla[0]);
 8006c88:	1d3b      	adds	r3, r7, #4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8006c90:	ed93 7b00 	vldr	d7, [r3]
 8006c94:	eeb0 0b47 	vmov.f64	d0, d7
 8006c98:	f7fe fe8f 	bl	80059ba <_ZSt3absd>
 8006c9c:	eeb0 7b40 	vmov.f64	d7, d0
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 8006ca8:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S35>/Compare' incorporates:
  //   Constant: '<S35>/Constant'

  rtDW.Compare = (rtDW.Abs > rtP.CompareToConstant_const);
 8006cac:	1d3b      	adds	r3, r7, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 8006cb4:	ed93 6b00 	vldr	d6, [r3]
 8006cb8:	4ba0      	ldr	r3, [pc, #640]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006cba:	ed93 7b00 	vldr	d7, [r3]
 8006cbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc6:	bfcc      	ite	gt
 8006cc8:	2301      	movgt	r3, #1
 8006cca:	2300      	movle	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	1d3b      	adds	r3, r7, #4
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38

  // Switch: '<S34>/Switch' incorporates:
  //   Inport: '<Root>/HOME_lla'

  if (rtDW.Compare) {
 8006cd8:	1d3b      	adds	r3, r7, #4
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f893 3c38 	ldrb.w	r3, [r3, #3128]	; 0xc38
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d045      	beq.n	8006d70 <_ZN27positionEstimatorModelClass4stepEv+0xf8>
    // Bias: '<S34>/Bias' incorporates:
    //   Inport: '<Root>/HOME_lla'

    rtDW.Bias_m = rtU.HOME_lla[0] + rtP.Bias_Bias_al;
 8006ce4:	1d3b      	adds	r3, r7, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8006cec:	ed93 6b00 	vldr	d6, [r3]
 8006cf0:	4b92      	ldr	r3, [pc, #584]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006cf2:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8006cf6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006cfa:	1d3b      	adds	r3, r7, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8006d02:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S34>/Math Function1' incorporates:
    //   Constant: '<S34>/Constant2'

    rtDW.MathFunction1_i = rt_modd_snf(rtDW.Bias_m, rtP.Constant2_Value_j);
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8006d0e:	ed93 7b00 	vldr	d7, [r3]
 8006d12:	4b8a      	ldr	r3, [pc, #552]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006d14:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 8006d18:	eeb0 1b46 	vmov.f64	d1, d6
 8006d1c:	eeb0 0b47 	vmov.f64	d0, d7
 8006d20:	f7fe ffc6 	bl	8005cb0 <_Z11rt_modd_snfdd>
 8006d24:	eeb0 7b40 	vmov.f64	d7, d0
 8006d28:	1d3b      	adds	r3, r7, #4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8006d30:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S34>/Bias1'
    rtDW.Bias1_k = rtDW.MathFunction1_i + rtP.Bias1_Bias_k;
 8006d34:	1d3b      	adds	r3, r7, #4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8006d3c:	ed93 6b00 	vldr	d6, [r3]
 8006d40:	4b7e      	ldr	r3, [pc, #504]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006d42:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8006d46:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d4a:	1d3b      	adds	r3, r7, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 8006d52:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch = rtDW.Bias1_k;
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 8006d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d62:	1d3a      	adds	r2, r7, #4
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8006d6a:	e9c2 3400 	strd	r3, r4, [r2]
 8006d6e:	e00b      	b.n	8006d88 <_ZN27positionEstimatorModelClass4stepEv+0x110>
  } else {
    rtDW.Switch = rtU.HOME_lla[0];
 8006d70:	1d3b      	adds	r3, r7, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8006d78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d7c:	1d3a      	adds	r2, r7, #4
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 8006d84:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Switch: '<S34>/Switch'

  // Abs: '<S31>/Abs1'
  rtDW.Abs1 = std::abs(rtDW.Switch);
 8006d88:	1d3b      	adds	r3, r7, #4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8006d90:	ed93 7b00 	vldr	d7, [r3]
 8006d94:	eeb0 0b47 	vmov.f64	d0, d7
 8006d98:	f7fe fe0f 	bl	80059ba <_ZSt3absd>
 8006d9c:	eeb0 7b40 	vmov.f64	d7, d0
 8006da0:	1d3b      	adds	r3, r7, #4
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8006da8:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S33>/Compare' incorporates:
  //   Constant: '<S33>/Constant'

  rtDW.Compare_c = (rtDW.Abs1 > rtP.CompareToConstant_const_d);
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8006db4:	ed93 6b00 	vldr	d6, [r3]
 8006db8:	4b60      	ldr	r3, [pc, #384]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006dba:	ed93 7b02 	vldr	d7, [r3, #8]
 8006dbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc6:	bfcc      	ite	gt
 8006dc8:	2301      	movgt	r3, #1
 8006dca:	2300      	movle	r3, #0
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	1d3b      	adds	r3, r7, #4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f883 2c39 	strb.w	r2, [r3, #3129]	; 0xc39
  // Switch: '<S31>/Switch' incorporates:
  //   Constant: '<S22>/Constant'
  //   Constant: '<S22>/Constant1'
  //   Switch: '<S22>/Switch1'

  if (rtDW.Compare_c) {
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f893 3c39 	ldrb.w	r3, [r3, #3129]	; 0xc39
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80b3 	beq.w	8006f4c <_ZN27positionEstimatorModelClass4stepEv+0x2d4>
    // Bias: '<S31>/Bias'
    rtDW.Bias_d = rtDW.Abs1 + rtP.Bias_Bias_e;
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8006dee:	ed93 6b00 	vldr	d6, [r3]
 8006df2:	4b52      	ldr	r3, [pc, #328]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006df4:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8006df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006dfc:	1d3b      	adds	r3, r7, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8006e04:	ed83 7b00 	vstr	d7, [r3]

    // Gain: '<S31>/Gain'
    rtDW.Gain = rtP.Gain_Gain_n * rtDW.Bias_d;
 8006e08:	4b4c      	ldr	r3, [pc, #304]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006e0a:	ed93 6b28 	vldr	d6, [r3, #160]	; 0xa0
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8006e16:	ed93 7b00 	vldr	d7, [r3]
 8006e1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8006e26:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S31>/Bias1'
    rtDW.Bias1_o = rtDW.Gain + rtP.Bias1_Bias_c;
 8006e2a:	1d3b      	adds	r3, r7, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8006e32:	ed93 6b00 	vldr	d6, [r3]
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006e38:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8006e3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e40:	1d3b      	adds	r3, r7, #4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8006e48:	ed83 7b00 	vstr	d7, [r3]

    // Signum: '<S31>/Sign1'
    u = rtDW.Switch;
 8006e4c:	1d3b      	adds	r3, r7, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8006e54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e58:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8006e5c:	e9c2 3400 	strd	r3, r4, [r2]
    if (u < 0.0) {
 8006e60:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006e64:	ed93 7b00 	vldr	d7, [r3]
 8006e68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e70:	d509      	bpl.n	8006e86 <_ZN27positionEstimatorModelClass4stepEv+0x20e>
      rtDW.Sign1 = -1.0;
 8006e72:	1d3b      	adds	r3, r7, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f503 623d 	add.w	r2, r3, #3024	; 0xbd0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	4c30      	ldr	r4, [pc, #192]	; (8006f40 <_ZN27positionEstimatorModelClass4stepEv+0x2c8>)
 8006e80:	e9c2 3400 	strd	r3, r4, [r2]
 8006e84:	e02f      	b.n	8006ee6 <_ZN27positionEstimatorModelClass4stepEv+0x26e>
    } else if (u > 0.0) {
 8006e86:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006e8a:	ed93 7b00 	vldr	d7, [r3]
 8006e8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e96:	dd09      	ble.n	8006eac <_ZN27positionEstimatorModelClass4stepEv+0x234>
      rtDW.Sign1 = 1.0;
 8006e98:	1d3b      	adds	r3, r7, #4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f503 623d 	add.w	r2, r3, #3024	; 0xbd0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	4c27      	ldr	r4, [pc, #156]	; (8006f44 <_ZN27positionEstimatorModelClass4stepEv+0x2cc>)
 8006ea6:	e9c2 3400 	strd	r3, r4, [r2]
 8006eaa:	e01c      	b.n	8006ee6 <_ZN27positionEstimatorModelClass4stepEv+0x26e>
    } else if (u == 0.0) {
 8006eac:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006eb0:	ed93 7b00 	vldr	d7, [r3]
 8006eb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebc:	d10a      	bne.n	8006ed4 <_ZN27positionEstimatorModelClass4stepEv+0x25c>
      rtDW.Sign1 = 0.0;
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f503 623d 	add.w	r2, r3, #3024	; 0xbd0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	f04f 0400 	mov.w	r4, #0
 8006ece:	e9c2 3400 	strd	r3, r4, [r2]
 8006ed2:	e008      	b.n	8006ee6 <_ZN27positionEstimatorModelClass4stepEv+0x26e>
    } else {
      rtDW.Sign1 = (rtNaN);
 8006ed4:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <_ZN27positionEstimatorModelClass4stepEv+0x2d0>)
 8006ed6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006eda:	1d3a      	adds	r2, r7, #4
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	f502 623d 	add.w	r2, r2, #3024	; 0xbd0
 8006ee2:	e9c2 3400 	strd	r3, r4, [r2]
    }

    // End of Signum: '<S31>/Sign1'

    // Product: '<S31>/Divide1'
    rtDW.Divide1 = rtDW.Sign1 * rtDW.Bias1_o;
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8006eee:	ed93 6b00 	vldr	d6, [r3]
 8006ef2:	1d3b      	adds	r3, r7, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8006efa:	ed93 7b00 	vldr	d7, [r3]
 8006efe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8006f0a:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_b = rtDW.Divide1;
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8006f16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f1a:	1d3a      	adds	r2, r7, #4
 8006f1c:	6812      	ldr	r2, [r2, #0]
 8006f1e:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8006f22:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1 = rtP.Constant_Value_m;
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006f28:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8006f2c:	1d3a      	adds	r2, r7, #4
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8006f34:	e9c2 3400 	strd	r3, r4, [r2]
 8006f38:	e01d      	b.n	8006f76 <_ZN27positionEstimatorModelClass4stepEv+0x2fe>
 8006f3a:	bf00      	nop
 8006f3c:	240002b0 	.word	0x240002b0
 8006f40:	bff00000 	.word	0xbff00000
 8006f44:	3ff00000 	.word	0x3ff00000
 8006f48:	24000960 	.word	0x24000960
  } else {
    rtDW.Switch_b = rtDW.Switch;
 8006f4c:	1d3b      	adds	r3, r7, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8006f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f58:	1d3a      	adds	r2, r7, #4
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 8006f60:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1 = rtP.Constant1_Value_f;
 8006f64:	4b98      	ldr	r3, [pc, #608]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8006f66:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8006f6a:	1d3a      	adds	r2, r7, #4
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8006f72:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Switch: '<S31>/Switch'

  // Sum: '<S22>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Sum = rtDW.Switch1 + rtU.HOME_lla[1];
 8006f76:	1d3b      	adds	r3, r7, #4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8006f7e:	ed93 6b00 	vldr	d6, [r3]
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006f8a:	ed93 7b00 	vldr	d7, [r3]
 8006f8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f92:	1d3b      	adds	r3, r7, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006f9a:	ed83 7b00 	vstr	d7, [r3]

  // Abs: '<S32>/Abs'
  rtDW.Abs_i = std::abs(rtDW.Sum);
 8006f9e:	1d3b      	adds	r3, r7, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006fa6:	ed93 7b00 	vldr	d7, [r3]
 8006faa:	eeb0 0b47 	vmov.f64	d0, d7
 8006fae:	f7fe fd04 	bl	80059ba <_ZSt3absd>
 8006fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8006fb6:	1d3b      	adds	r3, r7, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8006fbe:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S36>/Compare' incorporates:
  //   Constant: '<S36>/Constant'

  rtDW.Compare_d = (rtDW.Abs_i > rtP.CompareToConstant_const_j);
 8006fc2:	1d3b      	adds	r3, r7, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8006fca:	ed93 6b00 	vldr	d6, [r3]
 8006fce:	4b7e      	ldr	r3, [pc, #504]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8006fd0:	ed93 7b04 	vldr	d7, [r3, #16]
 8006fd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	bfcc      	ite	gt
 8006fde:	2301      	movgt	r3, #1
 8006fe0:	2300      	movle	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f883 2c3a 	strb.w	r2, [r3, #3130]	; 0xc3a

  // Switch: '<S32>/Switch'
  if (rtDW.Compare_d) {
 8006fee:	1d3b      	adds	r3, r7, #4
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f893 3c3a 	ldrb.w	r3, [r3, #3130]	; 0xc3a
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d045      	beq.n	8007086 <_ZN27positionEstimatorModelClass4stepEv+0x40e>
    // Bias: '<S32>/Bias'
    rtDW.Bias = rtDW.Sum + rtP.Bias_Bias_d;
 8006ffa:	1d3b      	adds	r3, r7, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8007002:	ed93 6b00 	vldr	d6, [r3]
 8007006:	4b70      	ldr	r3, [pc, #448]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007008:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 800700c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007010:	1d3b      	adds	r3, r7, #4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8007018:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S32>/Math Function1' incorporates:
    //   Constant: '<S32>/Constant2'

    rtDW.MathFunction1 = rt_modd_snf(rtDW.Bias, rtP.Constant2_Value_k);
 800701c:	1d3b      	adds	r3, r7, #4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8007024:	ed93 7b00 	vldr	d7, [r3]
 8007028:	4b67      	ldr	r3, [pc, #412]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 800702a:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 800702e:	eeb0 1b46 	vmov.f64	d1, d6
 8007032:	eeb0 0b47 	vmov.f64	d0, d7
 8007036:	f7fe fe3b 	bl	8005cb0 <_Z11rt_modd_snfdd>
 800703a:	eeb0 7b40 	vmov.f64	d7, d0
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007046:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S32>/Bias1'
    rtDW.Bias1 = rtDW.MathFunction1 + rtP.Bias1_Bias_cz;
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007052:	ed93 6b00 	vldr	d6, [r3]
 8007056:	4b5c      	ldr	r3, [pc, #368]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007058:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 800705c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007060:	1d3b      	adds	r3, r7, #4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8007068:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_h = rtDW.Bias1;
 800706c:	1d3b      	adds	r3, r7, #4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8007074:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007078:	1d3a      	adds	r2, r7, #4
 800707a:	6812      	ldr	r2, [r2, #0]
 800707c:	f602 2248 	addw	r2, r2, #2632	; 0xa48
 8007080:	e9c2 3400 	strd	r3, r4, [r2]
 8007084:	e00b      	b.n	800709e <_ZN27positionEstimatorModelClass4stepEv+0x426>
  } else {
    rtDW.Switch_h = rtDW.Sum;
 8007086:	1d3b      	adds	r3, r7, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800708e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007092:	1d3a      	adds	r2, r7, #4
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	f602 2248 	addw	r2, r2, #2632	; 0xa48
 800709a:	e9c2 3400 	strd	r3, r4, [r2]

  // Sum: '<S20>/Sum1' incorporates:
  //   Inport: '<Root>/lat'
  //   Inport: '<Root>/lon'

  rtDW.Sum1[0] = rtU.lat - rtDW.Switch_b;
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 80070a6:	ed93 6b00 	vldr	d6, [r3]
 80070aa:	1d3b      	adds	r3, r7, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80070b2:	ed93 7b00 	vldr	d7, [r3]
 80070b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80070ba:	1d3b      	adds	r3, r7, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	ed83 7b00 	vstr	d7, [r3]
  rtDW.Sum1[1] = rtU.lon - rtDW.Switch_h;
 80070c2:	1d3b      	adds	r3, r7, #4
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80070ca:	ed93 6b00 	vldr	d6, [r3]
 80070ce:	1d3b      	adds	r3, r7, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f603 2348 	addw	r3, r3, #2632	; 0xa48
 80070d6:	ed93 7b00 	vldr	d7, [r3]
 80070da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80070de:	1d3b      	adds	r3, r7, #4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	ed83 7b02 	vstr	d7, [r3, #8]

  // Abs: '<S28>/Abs'
  rtDW.Abs_b = std::abs(rtDW.Sum1[0]);
 80070e6:	1d3b      	adds	r3, r7, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	ed93 7b00 	vldr	d7, [r3]
 80070ee:	eeb0 0b47 	vmov.f64	d0, d7
 80070f2:	f7fe fc62 	bl	80059ba <_ZSt3absd>
 80070f6:	eeb0 7b40 	vmov.f64	d7, d0
 80070fa:	1d3b      	adds	r3, r7, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 8007102:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S29>/Compare' incorporates:
  //   Constant: '<S29>/Constant'

  rtDW.Compare_ds = (rtDW.Abs_b > rtP.CompareToConstant_const_n);
 8007106:	1d3b      	adds	r3, r7, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 800710e:	ed93 6b00 	vldr	d6, [r3]
 8007112:	4b2d      	ldr	r3, [pc, #180]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007114:	ed93 7b06 	vldr	d7, [r3, #24]
 8007118:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007120:	bfcc      	ite	gt
 8007122:	2301      	movgt	r3, #1
 8007124:	2300      	movle	r3, #0
 8007126:	b2db      	uxtb	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f883 2c3b 	strb.w	r2, [r3, #3131]	; 0xc3b

  // Switch: '<S28>/Switch'
  if (rtDW.Compare_ds) {
 8007132:	1d3b      	adds	r3, r7, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f893 3c3b 	ldrb.w	r3, [r3, #3131]	; 0xc3b
 800713a:	2b00      	cmp	r3, #0
 800713c:	d046      	beq.n	80071cc <_ZN27positionEstimatorModelClass4stepEv+0x554>
    // Bias: '<S28>/Bias'
    rtDW.Bias_e = rtDW.Sum1[0] + rtP.Bias_Bias_b;
 800713e:	1d3b      	adds	r3, r7, #4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	ed93 6b00 	vldr	d6, [r3]
 8007146:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007148:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800714c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8007158:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S28>/Math Function1' incorporates:
    //   Constant: '<S28>/Constant2'

    rtDW.MathFunction1_o = rt_modd_snf(rtDW.Bias_e, rtP.Constant2_Value);
 800715c:	1d3b      	adds	r3, r7, #4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8007164:	ed93 7b00 	vldr	d7, [r3]
 8007168:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 800716a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800716e:	eeb0 1b46 	vmov.f64	d1, d6
 8007172:	eeb0 0b47 	vmov.f64	d0, d7
 8007176:	f7fe fd9b 	bl	8005cb0 <_Z11rt_modd_snfdd>
 800717a:	eeb0 7b40 	vmov.f64	d7, d0
 800717e:	1d3b      	adds	r3, r7, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007186:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S28>/Bias1'
    rtDW.Bias1_oh = rtDW.MathFunction1_o + rtP.Bias1_Bias_p;
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007192:	ed93 6b00 	vldr	d6, [r3]
 8007196:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007198:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800719c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071a0:	1d3b      	adds	r3, r7, #4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 80071a8:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_f = rtDW.Bias1_oh;
 80071ac:	1d3b      	adds	r3, r7, #4
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 80071b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071b8:	1d3a      	adds	r2, r7, #4
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	f602 2258 	addw	r2, r2, #2648	; 0xa58
 80071c0:	e9c2 3400 	strd	r3, r4, [r2]
 80071c4:	e00c      	b.n	80071e0 <_ZN27positionEstimatorModelClass4stepEv+0x568>
 80071c6:	bf00      	nop
 80071c8:	240002b0 	.word	0x240002b0
  } else {
    rtDW.Switch_f = rtDW.Sum1[0];
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071d4:	1d3a      	adds	r2, r7, #4
 80071d6:	6812      	ldr	r2, [r2, #0]
 80071d8:	f602 2258 	addw	r2, r2, #2648	; 0xa58
 80071dc:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Switch: '<S28>/Switch'

  // Abs: '<S25>/Abs1'
  rtDW.Abs1_j = std::abs(rtDW.Switch_f);
 80071e0:	1d3b      	adds	r3, r7, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80071e8:	ed93 7b00 	vldr	d7, [r3]
 80071ec:	eeb0 0b47 	vmov.f64	d0, d7
 80071f0:	f7fe fbe3 	bl	80059ba <_ZSt3absd>
 80071f4:	eeb0 7b40 	vmov.f64	d7, d0
 80071f8:	1d3b      	adds	r3, r7, #4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8007200:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S27>/Compare' incorporates:
  //   Constant: '<S27>/Constant'

  rtDW.Compare_m = (rtDW.Abs1_j > rtP.CompareToConstant_const_e);
 8007204:	1d3b      	adds	r3, r7, #4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 800720c:	ed93 6b00 	vldr	d6, [r3]
 8007210:	4bad      	ldr	r3, [pc, #692]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007212:	ed93 7b08 	vldr	d7, [r3, #32]
 8007216:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800721a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721e:	bfcc      	ite	gt
 8007220:	2301      	movgt	r3, #1
 8007222:	2300      	movle	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	1d3b      	adds	r3, r7, #4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f883 2c3c 	strb.w	r2, [r3, #3132]	; 0xc3c
  // Switch: '<S25>/Switch' incorporates:
  //   Constant: '<S21>/Constant'
  //   Constant: '<S21>/Constant1'
  //   Switch: '<S21>/Switch1'

  if (rtDW.Compare_m) {
 8007230:	1d3b      	adds	r3, r7, #4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f893 3c3c 	ldrb.w	r3, [r3, #3132]	; 0xc3c
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 80aa 	beq.w	8007392 <_ZN27positionEstimatorModelClass4stepEv+0x71a>
    // Bias: '<S25>/Bias'
    rtDW.Bias_mj = rtDW.Abs1_j + rtP.Bias_Bias;
 800723e:	1d3b      	adds	r3, r7, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8007246:	ed93 6b00 	vldr	d6, [r3]
 800724a:	4b9f      	ldr	r3, [pc, #636]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800724c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8007250:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007254:	1d3b      	adds	r3, r7, #4
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 800725c:	ed83 7b00 	vstr	d7, [r3]

    // Gain: '<S25>/Gain'
    rtDW.Gain_c = rtP.Gain_Gain * rtDW.Bias_mj;
 8007260:	4b99      	ldr	r3, [pc, #612]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007262:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 800726e:	ed93 7b00 	vldr	d7, [r3]
 8007272:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007276:	1d3b      	adds	r3, r7, #4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 800727e:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S25>/Bias1'
    rtDW.Bias1_n = rtDW.Gain_c + rtP.Bias1_Bias;
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 800728a:	ed93 6b00 	vldr	d6, [r3]
 800728e:	4b8e      	ldr	r3, [pc, #568]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007290:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8007294:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007298:	1d3b      	adds	r3, r7, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 80072a0:	ed83 7b00 	vstr	d7, [r3]

    // Signum: '<S25>/Sign1'
    u = rtDW.Switch_f;
 80072a4:	1d3b      	adds	r3, r7, #4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80072ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072b0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80072b4:	e9c2 3400 	strd	r3, r4, [r2]
    if (u < 0.0) {
 80072b8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80072bc:	ed93 7b00 	vldr	d7, [r3]
 80072c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80072c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c8:	d509      	bpl.n	80072de <_ZN27positionEstimatorModelClass4stepEv+0x666>
      rtDW.Sign1_g = -1.0;
 80072ca:	1d3b      	adds	r3, r7, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f603 4228 	addw	r2, r3, #3112	; 0xc28
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	4c7d      	ldr	r4, [pc, #500]	; (80074cc <_ZN27positionEstimatorModelClass4stepEv+0x854>)
 80072d8:	e9c2 3400 	strd	r3, r4, [r2]
 80072dc:	e02f      	b.n	800733e <_ZN27positionEstimatorModelClass4stepEv+0x6c6>
    } else if (u > 0.0) {
 80072de:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80072e2:	ed93 7b00 	vldr	d7, [r3]
 80072e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80072ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ee:	dd09      	ble.n	8007304 <_ZN27positionEstimatorModelClass4stepEv+0x68c>
      rtDW.Sign1_g = 1.0;
 80072f0:	1d3b      	adds	r3, r7, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f603 4228 	addw	r2, r3, #3112	; 0xc28
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	4c74      	ldr	r4, [pc, #464]	; (80074d0 <_ZN27positionEstimatorModelClass4stepEv+0x858>)
 80072fe:	e9c2 3400 	strd	r3, r4, [r2]
 8007302:	e01c      	b.n	800733e <_ZN27positionEstimatorModelClass4stepEv+0x6c6>
    } else if (u == 0.0) {
 8007304:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007308:	ed93 7b00 	vldr	d7, [r3]
 800730c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	d10a      	bne.n	800732c <_ZN27positionEstimatorModelClass4stepEv+0x6b4>
      rtDW.Sign1_g = 0.0;
 8007316:	1d3b      	adds	r3, r7, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f603 4228 	addw	r2, r3, #3112	; 0xc28
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	f04f 0400 	mov.w	r4, #0
 8007326:	e9c2 3400 	strd	r3, r4, [r2]
 800732a:	e008      	b.n	800733e <_ZN27positionEstimatorModelClass4stepEv+0x6c6>
    } else {
      rtDW.Sign1_g = (rtNaN);
 800732c:	4b69      	ldr	r3, [pc, #420]	; (80074d4 <_ZN27positionEstimatorModelClass4stepEv+0x85c>)
 800732e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007332:	1d3a      	adds	r2, r7, #4
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 800733a:	e9c2 3400 	strd	r3, r4, [r2]
    }

    // End of Signum: '<S25>/Sign1'

    // Product: '<S25>/Divide1'
    rtDW.Divide1_h = rtDW.Sign1_g * rtDW.Bias1_n;
 800733e:	1d3b      	adds	r3, r7, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8007346:	ed93 6b00 	vldr	d6, [r3]
 800734a:	1d3b      	adds	r3, r7, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8007352:	ed93 7b00 	vldr	d7, [r3]
 8007356:	ee26 7b07 	vmul.f64	d7, d6, d7
 800735a:	1d3b      	adds	r3, r7, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8007362:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_j = rtDW.Divide1_h;
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800736e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007372:	1d3a      	adds	r2, r7, #4
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	f602 2268 	addw	r2, r2, #2664	; 0xa68
 800737a:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1_b = rtP.Constant_Value;
 800737e:	4b52      	ldr	r3, [pc, #328]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007380:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007384:	1d3a      	adds	r2, r7, #4
 8007386:	6812      	ldr	r2, [r2, #0]
 8007388:	f502 6227 	add.w	r2, r2, #2672	; 0xa70
 800738c:	e9c2 3400 	strd	r3, r4, [r2]
 8007390:	e014      	b.n	80073bc <_ZN27positionEstimatorModelClass4stepEv+0x744>
  } else {
    rtDW.Switch_j = rtDW.Switch_f;
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800739a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800739e:	1d3a      	adds	r2, r7, #4
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	f602 2268 	addw	r2, r2, #2664	; 0xa68
 80073a6:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1_b = rtP.Constant1_Value;
 80073aa:	4b47      	ldr	r3, [pc, #284]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 80073ac:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80073b0:	1d3a      	adds	r2, r7, #4
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	f502 6227 	add.w	r2, r2, #2672	; 0xa70
 80073b8:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Switch: '<S25>/Switch'

  // Sum: '<S21>/Sum'
  rtDW.Sum_j = rtDW.Switch1_b + rtDW.Sum1[1];
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 80073c4:	ed93 6b00 	vldr	d6, [r3]
 80073c8:	1d3b      	adds	r3, r7, #4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80073d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 80073dc:	ed83 7b00 	vstr	d7, [r3]

  // Abs: '<S26>/Abs'
  rtDW.Abs_b0 = std::abs(rtDW.Sum_j);
 80073e0:	1d3b      	adds	r3, r7, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 80073e8:	ed93 7b00 	vldr	d7, [r3]
 80073ec:	eeb0 0b47 	vmov.f64	d0, d7
 80073f0:	f7fe fae3 	bl	80059ba <_ZSt3absd>
 80073f4:	eeb0 7b40 	vmov.f64	d7, d0
 80073f8:	1d3b      	adds	r3, r7, #4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8007400:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S30>/Compare' incorporates:
  //   Constant: '<S30>/Constant'

  rtDW.Compare_k = (rtDW.Abs_b0 > rtP.CompareToConstant_const_ei);
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 800740c:	ed93 6b00 	vldr	d6, [r3]
 8007410:	4b2d      	ldr	r3, [pc, #180]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007412:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8007416:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800741a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741e:	bfcc      	ite	gt
 8007420:	2301      	movgt	r3, #1
 8007422:	2300      	movle	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	461a      	mov	r2, r3
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f883 2c3d 	strb.w	r2, [r3, #3133]	; 0xc3d

  // Switch: '<S26>/Switch'
  if (rtDW.Compare_k) {
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f893 3c3d 	ldrb.w	r3, [r3, #3133]	; 0xc3d
 8007438:	2b00      	cmp	r3, #0
 800743a:	d04d      	beq.n	80074d8 <_ZN27positionEstimatorModelClass4stepEv+0x860>
    // Bias: '<S26>/Bias'
    rtDW.Bias_j = rtDW.Sum_j + rtP.Bias_Bias_a;
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8007444:	ed93 6b00 	vldr	d6, [r3]
 8007448:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800744a:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800744e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007452:	1d3b      	adds	r3, r7, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 800745a:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S26>/Math Function1' incorporates:
    //   Constant: '<S26>/Constant2'

    rtDW.MathFunction1_h = rt_modd_snf(rtDW.Bias_j, rtP.Constant2_Value_g);
 800745e:	1d3b      	adds	r3, r7, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8007466:	ed93 7b00 	vldr	d7, [r3]
 800746a:	4b17      	ldr	r3, [pc, #92]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800746c:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8007470:	eeb0 1b46 	vmov.f64	d1, d6
 8007474:	eeb0 0b47 	vmov.f64	d0, d7
 8007478:	f7fe fc1a 	bl	8005cb0 <_Z11rt_modd_snfdd>
 800747c:	eeb0 7b40 	vmov.f64	d7, d0
 8007480:	1d3b      	adds	r3, r7, #4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8007488:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S26>/Bias1'
    rtDW.Bias1_p = rtDW.MathFunction1_h + rtP.Bias1_Bias_l;
 800748c:	1d3b      	adds	r3, r7, #4
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8007494:	ed93 6b00 	vldr	d6, [r3]
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800749a:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 800749e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 80074aa:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_m = rtDW.Bias1_p;
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 80074b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074ba:	1d3a      	adds	r2, r7, #4
 80074bc:	6812      	ldr	r2, [r2, #0]
 80074be:	f602 2288 	addw	r2, r2, #2696	; 0xa88
 80074c2:	e9c2 3400 	strd	r3, r4, [r2]
 80074c6:	e013      	b.n	80074f0 <_ZN27positionEstimatorModelClass4stepEv+0x878>
 80074c8:	240002b0 	.word	0x240002b0
 80074cc:	bff00000 	.word	0xbff00000
 80074d0:	3ff00000 	.word	0x3ff00000
 80074d4:	24000960 	.word	0x24000960
  } else {
    rtDW.Switch_m = rtDW.Sum_j;
 80074d8:	1d3b      	adds	r3, r7, #4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 80074e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074e4:	1d3a      	adds	r2, r7, #4
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	f602 2288 	addw	r2, r2, #2696	; 0xa88
 80074ec:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Switch: '<S26>/Switch'

  // UnitConversion: '<S24>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion[0] = 0.017453292519943295 * rtDW.Switch_j;
 80074f0:	1d3b      	adds	r3, r7, #4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 80074f8:	ed93 7b00 	vldr	d7, [r3]
 80074fc:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8007868 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 8007500:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007504:	1d3b      	adds	r3, r7, #4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	ed83 7b04 	vstr	d7, [r3, #16]
  rtDW.UnitConversion[1] = 0.017453292519943295 * rtDW.Switch_m;
 800750c:	1d3b      	adds	r3, r7, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8007514:	ed93 7b00 	vldr	d7, [r3]
 8007518:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 8007868 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 800751c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007520:	1d3b      	adds	r3, r7, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	ed83 7b06 	vstr	d7, [r3, #24]

  // Sum: '<S41>/Sum' incorporates:
  //   Constant: '<S41>/Constant'
  //   Constant: '<S41>/f'

  rtDW.Sum_a = rtP.f_Value - rtP.Constant_Value_c;
 8007528:	4bd1      	ldr	r3, [pc, #836]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800752a:	ed93 6b42 	vldr	d6, [r3, #264]	; 0x108
 800752e:	4bd0      	ldr	r3, [pc, #832]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 8007530:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8007534:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007538:	1d3b      	adds	r3, r7, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8007540:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S42>/Product1'
  rtDW.Product1 = rtDW.Sum_a * rtDW.Sum_a;
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 800754c:	ed93 6b00 	vldr	d6, [r3]
 8007550:	1d3b      	adds	r3, r7, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8007558:	ed93 7b00 	vldr	d7, [r3]
 800755c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007560:	1d3b      	adds	r3, r7, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f603 2398 	addw	r3, r3, #2712	; 0xa98
 8007568:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S42>/Sum1' incorporates:
  //   Constant: '<S42>/Constant'

  rtDW.Sum1_e = rtP.Constant_Value_a - rtDW.Product1;
 800756c:	4bc0      	ldr	r3, [pc, #768]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800756e:	ed93 6b3e 	vldr	d6, [r3, #248]	; 0xf8
 8007572:	1d3b      	adds	r3, r7, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f603 2398 	addw	r3, r3, #2712	; 0xa98
 800757a:	ed93 7b00 	vldr	d7, [r3]
 800757e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007582:	1d3b      	adds	r3, r7, #4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 800758a:	ed83 7b00 	vstr	d7, [r3]

  // Sqrt: '<S42>/sqrt'
  rtDW.sqrt_c = std::sqrt(rtDW.Sum1_e);
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 8007596:	ed93 7b00 	vldr	d7, [r3]
 800759a:	eeb0 0b47 	vmov.f64	d0, d7
 800759e:	f023 f937 	bl	802a810 <sqrt>
 80075a2:	eeb0 7b40 	vmov.f64	d7, d0
 80075a6:	1d3b      	adds	r3, r7, #4
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80075ae:	ed83 7b00 	vstr	d7, [r3]

  // UnitConversion: '<S39>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_m = 0.017453292519943295 * rtDW.Switch_b;
 80075b2:	1d3b      	adds	r3, r7, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80075ba:	ed93 7b00 	vldr	d7, [r3]
 80075be:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8007868 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 80075c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075c6:	1d3b      	adds	r3, r7, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 80075ce:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S40>/Trigonometric Function1'
  rtDW.TrigonometricFunction1 = std::sin(rtDW.UnitConversion_m);
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 80075da:	ed93 7b00 	vldr	d7, [r3]
 80075de:	eeb0 0b47 	vmov.f64	d0, d7
 80075e2:	f022 fed1 	bl	802a388 <sin>
 80075e6:	eeb0 7b40 	vmov.f64	d7, d0
 80075ea:	1d3b      	adds	r3, r7, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80075f2:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S40>/Product1'
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 80075f6:	1d3b      	adds	r3, r7, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80075fe:	ed93 6b00 	vldr	d6, [r3]
 8007602:	1d3b      	adds	r3, r7, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 800760a:	ed93 7b00 	vldr	d7, [r3]
 800760e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 800761a:	ed93 7b00 	vldr	d7, [r3]
 800761e:	ee26 6b07 	vmul.f64	d6, d6, d7
    rtDW.TrigonometricFunction1;
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 800762a:	ed93 7b00 	vldr	d7, [r3]
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 800762e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007632:	1d3b      	adds	r3, r7, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 800763a:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S40>/Sum1' incorporates:
  //   Constant: '<S40>/Constant'

  rtDW.Sum1_c = rtP.Constant_Value_f - rtDW.Product1_n;
 800763e:	4b8c      	ldr	r3, [pc, #560]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 8007640:	ed93 6b3c 	vldr	d6, [r3, #240]	; 0xf0
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 800764c:	ed93 7b00 	vldr	d7, [r3]
 8007650:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007654:	1d3b      	adds	r3, r7, #4
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 800765c:	ed83 7b00 	vstr	d7, [r3]

  // Sqrt: '<S38>/sqrt'
  rtDW.sqrt_d = std::sqrt(rtDW.Sum1_c);
 8007660:	1d3b      	adds	r3, r7, #4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8007668:	ed93 7b00 	vldr	d7, [r3]
 800766c:	eeb0 0b47 	vmov.f64	d0, d7
 8007670:	f023 f8ce 	bl	802a810 <sqrt>
 8007674:	eeb0 7b40 	vmov.f64	d7, d0
 8007678:	1d3b      	adds	r3, r7, #4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8007680:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product1' incorporates:
  //   Constant: '<S38>/Constant1'

  rtDW.Rn = rtP.Constant1_Value_d / rtDW.sqrt_d;
 8007684:	4b7a      	ldr	r3, [pc, #488]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 8007686:	ed93 5b3a 	vldr	d5, [r3, #232]	; 0xe8
 800768a:	1d3b      	adds	r3, r7, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8007692:	ed93 6b00 	vldr	d6, [r3]
 8007696:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 80076a2:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product2'
  rtDW.Product2 = rtDW.sqrt_c * rtDW.sqrt_c;
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80076ae:	ed93 6b00 	vldr	d6, [r3]
 80076b2:	1d3b      	adds	r3, r7, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f603 23a8 	addw	r3, r3, #2728	; 0xaa8
 80076ba:	ed93 7b00 	vldr	d7, [r3]
 80076be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80076c2:	1d3b      	adds	r3, r7, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 80076ca:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S38>/Sum1' incorporates:
  //   Constant: '<S38>/Constant'

  rtDW.Sum1_g = rtP.Constant_Value_ch - rtDW.Product2;
 80076ce:	4b68      	ldr	r3, [pc, #416]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 80076d0:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80076d4:	1d3b      	adds	r3, r7, #4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 80076dc:	ed93 7b00 	vldr	d7, [r3]
 80076e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80076e4:	1d3b      	adds	r3, r7, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 80076ec:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product3'
  rtDW.Rm = rtDW.Rn * rtDW.Sum1_g / rtDW.Sum1_c;
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 80076f8:	ed93 6b00 	vldr	d6, [r3]
 80076fc:	1d3b      	adds	r3, r7, #4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 8007704:	ed93 7b00 	vldr	d7, [r3]
 8007708:	ee26 5b07 	vmul.f64	d5, d6, d7
 800770c:	1d3b      	adds	r3, r7, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8007714:	ed93 6b00 	vldr	d6, [r3]
 8007718:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800771c:	1d3b      	adds	r3, r7, #4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8007724:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S38>/Trigonometric Function1' incorporates:
  //   Constant: '<S38>/Constant2'

  rtDW.TrigonometricFunction1_l = rt_atan2d_snf(rtP.Constant2_Value_h, rtDW.Rm);
 8007728:	4b51      	ldr	r3, [pc, #324]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800772a:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 800772e:	1d3b      	adds	r3, r7, #4
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8007736:	ed93 6b00 	vldr	d6, [r3]
 800773a:	eeb0 1b46 	vmov.f64	d1, d6
 800773e:	eeb0 0b47 	vmov.f64	d0, d7
 8007742:	f7fe fbc9 	bl	8005ed8 <_Z13rt_atan2d_snfdd>
 8007746:	eeb0 7b40 	vmov.f64	d7, d0
 800774a:	1d3b      	adds	r3, r7, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8007752:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/dNorth'
  rtDW.dNorth = rtDW.UnitConversion[0] / rtDW.TrigonometricFunction1_l;
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	ed93 5b04 	vldr	d5, [r3, #16]
 800775e:	1d3b      	adds	r3, r7, #4
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8007766:	ed93 6b00 	vldr	d6, [r3]
 800776a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800776e:	1d3b      	adds	r3, r7, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007776:	ed83 7b00 	vstr	d7, [r3]
  // UnitConversion: '<S37>/Unit Conversion' incorporates:
  //   Constant: '<S3>/flat-x_from_N'

  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_p = 0.017453292519943295 * rtP.flatx_from_N_Value;
 800777a:	4b3d      	ldr	r3, [pc, #244]	; (8007870 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800777c:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8007780:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8007868 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 8007784:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007788:	1d3b      	adds	r3, r7, #4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8007790:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S23>/SinCos'
  a22 = rtDW.UnitConversion_p;
 8007794:	1d3b      	adds	r3, r7, #4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 800779c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077a0:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 80077a4:	e9c2 3400 	strd	r3, r4, [r2]
  epsilon = std::sin(a22);
 80077a8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80077ac:	ed93 0b00 	vldr	d0, [r3]
 80077b0:	f022 fdea 	bl	802a388 <sin>
 80077b4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80077b8:	ed83 0b00 	vstr	d0, [r3]
  a22 = std::cos(a22);
 80077bc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80077c0:	ed93 0b00 	vldr	d0, [r3]
 80077c4:	f022 fd2c 	bl	802a220 <cos>
 80077c8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80077cc:	ed83 0b00 	vstr	d0, [r3]
  rtDW.SinCos_o1 = epsilon;
 80077d0:	1d3b      	adds	r3, r7, #4
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f503 6231 	add.w	r2, r3, #2832	; 0xb10
 80077d8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80077dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077e0:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.SinCos_o2 = a22;
 80077e4:	1d3b      	adds	r3, r7, #4
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f603 3218 	addw	r2, r3, #2840	; 0xb18
 80077ec:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80077f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077f4:	e9c2 3400 	strd	r3, r4, [r2]

  // Product: '<S23>/x*cos'
  rtDW.xcos = rtDW.dNorth * rtDW.SinCos_o2;
 80077f8:	1d3b      	adds	r3, r7, #4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	ed93 6b00 	vldr	d6, [r3]
 8007804:	1d3b      	adds	r3, r7, #4
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 800780c:	ed93 7b00 	vldr	d7, [r3]
 8007810:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007814:	1d3b      	adds	r3, r7, #4
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 800781c:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S38>/Trigonometric Function'
  rtDW.TrigonometricFunction = std::cos(rtDW.UnitConversion_m);
 8007820:	1d3b      	adds	r3, r7, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8007828:	ed93 7b00 	vldr	d7, [r3]
 800782c:	eeb0 0b47 	vmov.f64	d0, d7
 8007830:	f022 fcf6 	bl	802a220 <cos>
 8007834:	eeb0 7b40 	vmov.f64	d7, d0
 8007838:	1d3b      	adds	r3, r7, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8007840:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S38>/Product4'
  rtDW.Product4 = rtDW.Rn * rtDW.TrigonometricFunction;
 8007844:	1d3b      	adds	r3, r7, #4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 800784c:	ed93 6b00 	vldr	d6, [r3]
 8007850:	1d3b      	adds	r3, r7, #4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8007858:	ed93 7b00 	vldr	d7, [r3]
 800785c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007860:	1d3b      	adds	r3, r7, #4
 8007862:	e007      	b.n	8007874 <_ZN27positionEstimatorModelClass4stepEv+0xbfc>
 8007864:	f3af 8000 	nop.w
 8007868:	a2529d39 	.word	0xa2529d39
 800786c:	3f91df46 	.word	0x3f91df46
 8007870:	240002b0 	.word	0x240002b0
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 800787a:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S38>/Trigonometric Function2' incorporates:
  //   Constant: '<S38>/Constant3'

  rtDW.TrigonometricFunction2 = rt_atan2d_snf(rtP.Constant3_Value, rtDW.Product4);
 800787e:	4bc4      	ldr	r3, [pc, #784]	; (8007b90 <_ZN27positionEstimatorModelClass4stepEv+0xf18>)
 8007880:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8007884:	1d3b      	adds	r3, r7, #4
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 800788c:	ed93 6b00 	vldr	d6, [r3]
 8007890:	eeb0 1b46 	vmov.f64	d1, d6
 8007894:	eeb0 0b47 	vmov.f64	d0, d7
 8007898:	f7fe fb1e 	bl	8005ed8 <_Z13rt_atan2d_snfdd>
 800789c:	eeb0 7b40 	vmov.f64	d7, d0
 80078a0:	1d3b      	adds	r3, r7, #4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 80078a8:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/dEast'
  rtDW.dEast = 1.0 / rtDW.TrigonometricFunction2 * rtDW.UnitConversion[1];
 80078ac:	1d3b      	adds	r3, r7, #4
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 80078b4:	ed93 7b00 	vldr	d7, [r3]
 80078b8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80078bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	ed93 7b06 	vldr	d7, [r3, #24]
 80078c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80078cc:	1d3b      	adds	r3, r7, #4
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80078d4:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/y*sin'
  rtDW.ysin = rtDW.dEast * rtDW.SinCos_o1;
 80078d8:	1d3b      	adds	r3, r7, #4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80078e0:	ed93 6b00 	vldr	d6, [r3]
 80078e4:	1d3b      	adds	r3, r7, #4
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80078ec:	ed93 7b00 	vldr	d7, [r3]
 80078f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80078f4:	1d3b      	adds	r3, r7, #4
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 80078fc:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S23>/Sum2'
  rtDW.Px = rtDW.xcos + rtDW.ysin;
 8007900:	1d3b      	adds	r3, r7, #4
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8007908:	ed93 6b00 	vldr	d6, [r3]
 800790c:	1d3b      	adds	r3, r7, #4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 8007914:	ed93 7b00 	vldr	d7, [r3]
 8007918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800791c:	1d3b      	adds	r3, r7, #4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 8007924:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/x*sin'
  rtDW.xsin = rtDW.dNorth * rtDW.SinCos_o1;
 8007928:	1d3b      	adds	r3, r7, #4
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007930:	ed93 6b00 	vldr	d6, [r3]
 8007934:	1d3b      	adds	r3, r7, #4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 800793c:	ed93 7b00 	vldr	d7, [r3]
 8007940:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007944:	1d3b      	adds	r3, r7, #4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 800794c:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S23>/y*cos'
  rtDW.ycos = rtDW.dEast * rtDW.SinCos_o2;
 8007950:	1d3b      	adds	r3, r7, #4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8007958:	ed93 6b00 	vldr	d6, [r3]
 800795c:	1d3b      	adds	r3, r7, #4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 8007964:	ed93 7b00 	vldr	d7, [r3]
 8007968:	ee26 7b07 	vmul.f64	d7, d6, d7
 800796c:	1d3b      	adds	r3, r7, #4
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 8007974:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S23>/Sum3'
  rtDW.Py = rtDW.ycos - rtDW.xsin;
 8007978:	1d3b      	adds	r3, r7, #4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 8007980:	ed93 6b00 	vldr	d6, [r3]
 8007984:	1d3b      	adds	r3, r7, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 800798c:	ed93 7b00 	vldr	d7, [r3]
 8007990:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 800799c:	ed83 7b00 	vstr	d7, [r3]

  // DataTypeConversion: '<S2>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1 = (rtU.AhrsFlag != 0.0);
 80079a0:	1d3b      	adds	r3, r7, #4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 80079a8:	ed93 7b00 	vldr	d7, [r3]
 80079ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b4:	bf14      	ite	ne
 80079b6:	2301      	movne	r3, #1
 80079b8:	2300      	moveq	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	1d3b      	adds	r3, r7, #4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f883 2c3e 	strb.w	r2, [r3, #3134]	; 0xc3e

  // Outputs for Enabled SubSystem: '<S2>/Correct1' incorporates:
  //   EnablePort: '<S13>/Enable'

  if (rtDW.DataTypeConversion_Enable1) {
 80079c6:	1d3b      	adds	r3, r7, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f893 3c3e 	ldrb.w	r3, [r3, #3134]	; 0xc3e
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 85af 	beq.w	8008532 <_ZN27positionEstimatorModelClass4stepEv+0x18ba>
    // DataStoreRead: '<S13>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 80079d4:	2300      	movs	r3, #0
 80079d6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80079da:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80079de:	2b05      	cmp	r3, #5
 80079e0:	dc18      	bgt.n	8007a14 <_ZN27positionEstimatorModelClass4stepEv+0xd9c>
      rtDW.DataStoreReadX_p[i] = rtDW.x_p[i];
 80079e2:	1d3b      	adds	r3, r7, #4
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80079ea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4413      	add	r3, r2
 80079f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079f6:	1d3a      	adds	r2, r7, #4
 80079f8:	6811      	ldr	r1, [r2, #0]
 80079fa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80079fe:	3292      	adds	r2, #146	; 0x92
 8007a00:	00d2      	lsls	r2, r2, #3
 8007a02:	440a      	add	r2, r1
 8007a04:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8007a08:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007a12:	e7e2      	b.n	80079da <_ZN27positionEstimatorModelClass4stepEv+0xd62>
    // SignalConversion generated from: '<S17>/ SFunction ' incorporates:
    //   Inport: '<Root>/ax'
    //   Inport: '<Root>/ay'
    //   MATLAB Function: '<S13>/Correct'

    rtDW.TmpSignalConversionAtSFunctio_i[0] = rtU.ax;
 8007a14:	1d3b      	adds	r3, r7, #4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 8007a1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a20:	1d3a      	adds	r2, r7, #4
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	f502 6298 	add.w	r2, r2, #1216	; 0x4c0
 8007a28:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.TmpSignalConversionAtSFunctio_i[1] = rtU.ay;
 8007a2c:	1d3b      	adds	r3, r7, #4
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8007a34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a38:	1d3a      	adds	r2, r7, #4
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	f502 6299 	add.w	r2, r2, #1224	; 0x4c8
 8007a40:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S13>/Correct' incorporates:
    //   Constant: '<S2>/BlockOrdering'

    rtDW.blockOrdering_f = rtP.BlockOrdering_Value;
 8007a44:	4b52      	ldr	r3, [pc, #328]	; (8007b90 <_ZN27positionEstimatorModelClass4stepEv+0xf18>)
 8007a46:	f893 23e5 	ldrb.w	r2, [r3, #997]	; 0x3e5
 8007a4a:	1d3b      	adds	r3, r7, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
    blockOrdering = rtDW.blockOrdering_f;
 8007a52:	1d3b      	adds	r3, r7, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8007a5a:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_f = blockOrdering;
 8007a5e:	1d3b      	adds	r3, r7, #4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8007a66:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
    for (i = 0; i < 36; i++) {
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007a70:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007a74:	2b23      	cmp	r3, #35	; 0x23
 8007a76:	dc32      	bgt.n	8007ade <_ZN27positionEstimatorModelClass4stepEv+0xe66>
      // DataStoreRead: '<S13>/Data Store ReadP'
      rtDW.P_k[i] = rtDW.P_n_c[i];
 8007a78:	1d3b      	adds	r3, r7, #4
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007a80:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	4413      	add	r3, r2
 8007a88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a8c:	1d3a      	adds	r2, r7, #4
 8007a8e:	6811      	ldr	r1, [r2, #0]
 8007a90:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007a94:	32a0      	adds	r2, #160	; 0xa0
 8007a96:	00d2      	lsls	r2, r2, #3
 8007a98:	440a      	add	r2, r1
 8007a9a:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S13>/Correct'
      u = rtDW.P_k[i];
 8007a9e:	1d3b      	adds	r3, r7, #4
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007aa6:	33a0      	adds	r3, #160	; 0xa0
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	4413      	add	r3, r2
 8007aac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ab0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007ab4:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_k[i] = u;
 8007ab8:	1d3b      	adds	r3, r7, #4
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007ac0:	33a0      	adds	r3, #160	; 0xa0
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	441a      	add	r2, r3
 8007ac6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007aca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ace:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 8007ad2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007adc:	e7c8      	b.n	8007a70 <_ZN27positionEstimatorModelClass4stepEv+0xdf8>
    }

    // MATLAB Function: '<S13>/Correct' incorporates:
    //   Constant: '<S2>/R1'

    for (r1 = 0; r1 < 6; r1++) {
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007ae4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007ae8:	2b05      	cmp	r3, #5
 8007aea:	f300 80b1 	bgt.w	8007c50 <_ZN27positionEstimatorModelClass4stepEv+0xfd8>
      for (i = 0; i < 6; i++) {
 8007aee:	2300      	movs	r3, #0
 8007af0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007af4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007af8:	2b05      	cmp	r3, #5
 8007afa:	dc16      	bgt.n	8007b2a <_ZN27positionEstimatorModelClass4stepEv+0xeb2>
        imvec[i] = rtDW.DataStoreReadX_p[i];
 8007afc:	1d3b      	adds	r3, r7, #4
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007b04:	3392      	adds	r3, #146	; 0x92
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	4413      	add	r3, r2
 8007b0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b0e:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8007b12:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007b16:	00d2      	lsls	r2, r2, #3
 8007b18:	440a      	add	r2, r1
 8007b1a:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 6; i++) {
 8007b1e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007b22:	3301      	adds	r3, #1
 8007b24:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007b28:	e7e4      	b.n	8007af4 <_ZN27positionEstimatorModelClass4stepEv+0xe7c>
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_p[r1]);
 8007b2a:	1d3b      	adds	r3, r7, #4
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007b32:	3392      	adds	r3, #146	; 0x92
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	4413      	add	r3, r2
 8007b38:	ed93 7b00 	vldr	d7, [r3]
 8007b3c:	eeb0 0b47 	vmov.f64	d0, d7
 8007b40:	f7fd ff3b 	bl	80059ba <_ZSt3absd>
 8007b44:	eeb0 6b40 	vmov.f64	d6, d0
 8007b48:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007b88 <_ZN27positionEstimatorModelClass4stepEv+0xf10>
 8007b4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007b50:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007b54:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8007b58:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007b5c:	ed93 7b00 	vldr	d7, [r3]
 8007b60:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8007b88 <_ZN27positionEstimatorModelClass4stepEv+0xf10>
 8007b64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6c:	d408      	bmi.n	8007b80 <_ZN27positionEstimatorModelClass4stepEv+0xf08>
 8007b6e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007b72:	ed93 0b00 	vldr	d0, [r3]
 8007b76:	f7fd ffd3 	bl	8005b20 <rtIsNaN>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d009      	beq.n	8007b94 <_ZN27positionEstimatorModelClass4stepEv+0xf1c>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e008      	b.n	8007b96 <_ZN27positionEstimatorModelClass4stepEv+0xf1e>
 8007b84:	f3af 8000 	nop.w
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	3e500000 	.word	0x3e500000
 8007b90:	240002b0 	.word	0x240002b0
 8007b94:	2300      	movs	r3, #0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d006      	beq.n	8007ba8 <_ZN27positionEstimatorModelClass4stepEv+0xf30>
        epsilon = 1.4901161193847656E-8;
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	4ce5      	ldr	r4, [pc, #916]	; (8007f34 <_ZN27positionEstimatorModelClass4stepEv+0x12bc>)
 8007ba0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007ba4:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec[r1] = rtDW.DataStoreReadX_p[r1] + epsilon;
 8007ba8:	1d3b      	adds	r3, r7, #4
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007bb0:	3392      	adds	r3, #146	; 0x92
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	ed93 6b00 	vldr	d6, [r3]
 8007bba:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007bbe:	ed93 7b00 	vldr	d7, [r3]
 8007bc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007bc6:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8007bca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	ed83 7b00 	vstr	d7, [r3]
      dHdx[r1 << 1] = (imvec[4] - rtDW.DataStoreReadX_p[4]) / epsilon;
 8007bd6:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007bda:	ed93 6b08 	vldr	d6, [r3, #32]
 8007bde:	1d3b      	adds	r3, r7, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8007be6:	ed93 7b00 	vldr	d7, [r3]
 8007bea:	ee36 5b47 	vsub.f64	d5, d6, d7
 8007bee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007bf8:	ed92 6b00 	vldr	d6, [r2]
 8007bfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007c00:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	4413      	add	r3, r2
 8007c08:	ed83 7b00 	vstr	d7, [r3]
      dHdx[(r1 << 1) + 1] = (imvec[5] - rtDW.DataStoreReadX_p[5]) / epsilon;
 8007c0c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007c10:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8007c14:	1d3b      	adds	r3, r7, #4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8007c1c:	ed93 7b00 	vldr	d7, [r3]
 8007c20:	ee36 5b47 	vsub.f64	d5, d6, d7
 8007c24:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007c30:	ed92 6b00 	vldr	d6, [r2]
 8007c34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007c38:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	4413      	add	r3, r2
 8007c40:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 6; r1++) {
 8007c44:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007c48:	3301      	adds	r3, #1
 8007c4a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007c4e:	e749      	b.n	8007ae4 <_ZN27positionEstimatorModelClass4stepEv+0xe6c>
    }

    for (r1 = 0; r1 < 6; r1++) {
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007c56:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007c5a:	2b05      	cmp	r3, #5
 8007c5c:	f300 808a 	bgt.w	8007d74 <_ZN27positionEstimatorModelClass4stepEv+0x10fc>
      for (i = 0; i < 2; i++) {
 8007c60:	2300      	movs	r3, #0
 8007c62:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007c66:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	dc7c      	bgt.n	8007d68 <_ZN27positionEstimatorModelClass4stepEv+0x10f0>
        Pxy[r1 + 6 * i] = 0.0;
 8007c6e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007c72:	4613      	mov	r3, r2
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	4413      	add	r3, r2
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007c80:	4413      	add	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007c88:	4413      	add	r3, r2
 8007c8a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
 8007c8e:	f04f 0300 	mov.w	r3, #0
 8007c92:	f04f 0400 	mov.w	r4, #0
 8007c96:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007ca0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007ca4:	2b05      	cmp	r3, #5
 8007ca6:	dc59      	bgt.n	8007d5c <_ZN27positionEstimatorModelClass4stepEv+0x10e4>
          u = Pxy[6 * i + r1];
 8007ca8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007cac:	4613      	mov	r3, r2
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	4413      	add	r3, r2
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007cba:	4413      	add	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007cc2:	4413      	add	r3, r2
 8007cc4:	3b90      	subs	r3, #144	; 0x90
 8007cc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cca:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007cce:	e9c2 3400 	strd	r3, r4, [r2]
          u += rtDW.P_k[6 * k + r1] * dHdx[(k << 1) + i];
 8007cd2:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	4413      	add	r3, r2
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007ce4:	4413      	add	r3, r2
 8007ce6:	1d3a      	adds	r2, r7, #4
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	33a0      	adds	r3, #160	; 0xa0
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	ed93 6b00 	vldr	d6, [r3]
 8007cf4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007cf8:	005a      	lsls	r2, r3, #1
 8007cfa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007cfe:	4413      	add	r3, r2
 8007d00:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	4413      	add	r3, r2
 8007d08:	ed93 7b00 	vldr	d7, [r3]
 8007d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007d10:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007d14:	ed93 6b00 	vldr	d6, [r3]
 8007d18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007d1c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007d20:	ed83 7b00 	vstr	d7, [r3]
          Pxy[r1 + 6 * i] = u;
 8007d24:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007d28:	4613      	mov	r3, r2
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	4413      	add	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	461a      	mov	r2, r3
 8007d32:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d36:	4413      	add	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007d3e:	4413      	add	r3, r2
 8007d40:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
 8007d44:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007d48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d4c:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007d50:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007d54:	3301      	adds	r3, #1
 8007d56:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007d5a:	e7a1      	b.n	8007ca0 <_ZN27positionEstimatorModelClass4stepEv+0x1028>
      for (i = 0; i < 2; i++) {
 8007d5c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007d60:	3301      	adds	r3, #1
 8007d62:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007d66:	e77e      	b.n	8007c66 <_ZN27positionEstimatorModelClass4stepEv+0xfee>
    for (r1 = 0; r1 < 6; r1++) {
 8007d68:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007d72:	e770      	b.n	8007c56 <_ZN27positionEstimatorModelClass4stepEv+0xfde>
        }
      }
    }

    for (r1 = 0; r1 < 2; r1++) {
 8007d74:	2300      	movs	r3, #0
 8007d76:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007d7a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	f300 80e2 	bgt.w	8007f48 <_ZN27positionEstimatorModelClass4stepEv+0x12d0>
      for (i = 0; i < 6; i++) {
 8007d84:	2300      	movs	r3, #0
 8007d86:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007d8a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	dc6b      	bgt.n	8007e6a <_ZN27positionEstimatorModelClass4stepEv+0x11f2>
        gain[r1 + (i << 1)] = 0.0;
 8007d92:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007d96:	005a      	lsls	r2, r3, #1
 8007d98:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	441a      	add	r2, r3
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	f04f 0400 	mov.w	r4, #0
 8007dae:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007db2:	2300      	movs	r3, #0
 8007db4:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007db8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007dbc:	2b05      	cmp	r3, #5
 8007dbe:	dc4e      	bgt.n	8007e5e <_ZN27positionEstimatorModelClass4stepEv+0x11e6>
          u = gain[(i << 1) + r1];
 8007dc0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007dc4:	005a      	lsls	r2, r3, #1
 8007dc6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007dca:	4413      	add	r3, r2
 8007dcc:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dd8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007ddc:	e9c2 3400 	strd	r3, r4, [r2]
          u += dHdx[(k << 1) + r1] * rtDW.P_k[6 * i + k];
 8007de0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007de4:	005a      	lsls	r2, r3, #1
 8007de6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007dea:	4413      	add	r3, r2
 8007dec:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	4413      	add	r3, r2
 8007df4:	ed93 6b00 	vldr	d6, [r3]
 8007df8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	4413      	add	r3, r2
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	461a      	mov	r2, r3
 8007e06:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007e0a:	4413      	add	r3, r2
 8007e0c:	1d3a      	adds	r2, r7, #4
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	33a0      	adds	r3, #160	; 0xa0
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4413      	add	r3, r2
 8007e16:	ed93 7b00 	vldr	d7, [r3]
 8007e1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e1e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e22:	ed93 6b00 	vldr	d6, [r3]
 8007e26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007e2a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e2e:	ed83 7b00 	vstr	d7, [r3]
          gain[r1 + (i << 1)] = u;
 8007e32:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007e36:	005a      	lsls	r2, r3, #1
 8007e38:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	441a      	add	r2, r3
 8007e46:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e4e:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007e52:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007e56:	3301      	adds	r3, #1
 8007e58:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007e5c:	e7ac      	b.n	8007db8 <_ZN27positionEstimatorModelClass4stepEv+0x1140>
      for (i = 0; i < 6; i++) {
 8007e5e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007e62:	3301      	adds	r3, #1
 8007e64:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007e68:	e78f      	b.n	8007d8a <_ZN27positionEstimatorModelClass4stepEv+0x1112>
        }
      }

      for (i = 0; i < 2; i++) {
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007e70:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	dc61      	bgt.n	8007f3c <_ZN27positionEstimatorModelClass4stepEv+0x12c4>
        u = 0.0;
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	f04f 0400 	mov.w	r4, #0
 8007e80:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007e84:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007e8e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	dc29      	bgt.n	8007eea <_ZN27positionEstimatorModelClass4stepEv+0x1272>
          u += gain[(k << 1) + r1] * dHdx[(k << 1) + i];
 8007e96:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007e9a:	005a      	lsls	r2, r3, #1
 8007e9c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	ed93 6b00 	vldr	d6, [r3]
 8007eae:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007eb2:	005a      	lsls	r2, r3, #1
 8007eb4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007eb8:	4413      	add	r3, r2
 8007eba:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	ed93 7b00 	vldr	d7, [r3]
 8007ec6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007eca:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007ece:	ed93 6b00 	vldr	d6, [r3]
 8007ed2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007ed6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007eda:	ed83 7b00 	vstr	d7, [r3]
        for (k = 0; k < 6; k++) {
 8007ede:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007ee8:	e7d1      	b.n	8007e8e <_ZN27positionEstimatorModelClass4stepEv+0x1216>
        }

        Pyy[r1 + (i << 1)] = rtP.R1_Value[(i << 1) + r1] + u;
 8007eea:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007eee:	005a      	lsls	r2, r3, #1
 8007ef0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007ef4:	4413      	add	r3, r2
 8007ef6:	4a10      	ldr	r2, [pc, #64]	; (8007f38 <_ZN27positionEstimatorModelClass4stepEv+0x12c0>)
 8007ef8:	3336      	adds	r3, #54	; 0x36
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	ed93 6b00 	vldr	d6, [r3]
 8007f02:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007f06:	005a      	lsls	r2, r3, #1
 8007f08:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007f12:	ed92 7b00 	vldr	d7, [r2]
 8007f16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007f20:	4413      	add	r3, r2
 8007f22:	3bb0      	subs	r3, #176	; 0xb0
 8007f24:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 2; i++) {
 8007f28:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007f32:	e79d      	b.n	8007e70 <_ZN27positionEstimatorModelClass4stepEv+0x11f8>
 8007f34:	3e500000 	.word	0x3e500000
 8007f38:	240002b0 	.word	0x240002b0
    for (r1 = 0; r1 < 2; r1++) {
 8007f3c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007f40:	3301      	adds	r3, #1
 8007f42:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007f46:	e718      	b.n	8007d7a <_ZN27positionEstimatorModelClass4stepEv+0x1102>
      }
    }

    if (std::abs(Pyy[1]) > std::abs(Pyy[0])) {
 8007f48:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8007f4c:	ed93 7b00 	vldr	d7, [r3]
 8007f50:	eeb0 0b47 	vmov.f64	d0, d7
 8007f54:	f7fd fd31 	bl	80059ba <_ZSt3absd>
 8007f58:	eeb0 8b40 	vmov.f64	d8, d0
 8007f5c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8007f60:	ed93 7b00 	vldr	d7, [r3]
 8007f64:	eeb0 0b47 	vmov.f64	d0, d7
 8007f68:	f7fd fd27 	bl	80059ba <_ZSt3absd>
 8007f6c:	eeb0 7b40 	vmov.f64	d7, d0
 8007f70:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f78:	bfcc      	ite	gt
 8007f7a:	2301      	movgt	r3, #1
 8007f7c:	2300      	movle	r3, #0
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d006      	beq.n	8007f92 <_ZN27positionEstimatorModelClass4stepEv+0x131a>
      r1 = 1;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007f90:	e005      	b.n	8007f9e <_ZN27positionEstimatorModelClass4stepEv+0x1326>
    } else {
      r1 = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 1;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    }

    epsilon = Pyy[i] / Pyy[r1];
 8007f9e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007fa8:	4413      	add	r3, r2
 8007faa:	3bb0      	subs	r3, #176	; 0xb0
 8007fac:	ed93 5b00 	vldr	d5, [r3]
 8007fb0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007fba:	4413      	add	r3, r2
 8007fbc:	3bb0      	subs	r3, #176	; 0xb0
 8007fbe:	ed93 6b00 	vldr	d6, [r3]
 8007fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007fc6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007fca:	ed83 7b00 	vstr	d7, [r3]
    a22 = Pyy[i + 2] - Pyy[r1 + 2] * epsilon;
 8007fce:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007fd2:	3302      	adds	r3, #2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007fda:	4413      	add	r3, r2
 8007fdc:	3bb0      	subs	r3, #176	; 0xb0
 8007fde:	ed93 6b00 	vldr	d6, [r3]
 8007fe2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007fe6:	3302      	adds	r3, #2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007fee:	4413      	add	r3, r2
 8007ff0:	3bb0      	subs	r3, #176	; 0xb0
 8007ff2:	ed93 5b00 	vldr	d5, [r3]
 8007ff6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007ffa:	ed93 7b00 	vldr	d7, [r3]
 8007ffe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008002:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008006:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800800a:	ed83 7b00 	vstr	d7, [r3]
    for (k = 0; k < 6; k++) {
 800800e:	2300      	movs	r3, #0
 8008010:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008014:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008018:	2b05      	cmp	r3, #5
 800801a:	f300 80a0 	bgt.w	800815e <_ZN27positionEstimatorModelClass4stepEv+0x14e6>
      gain[k + 6 * r1] = Pxy[k] / Pyy[r1];
 800801e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008022:	00db      	lsls	r3, r3, #3
 8008024:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008028:	4413      	add	r3, r2
 800802a:	3b90      	subs	r3, #144	; 0x90
 800802c:	ed93 5b00 	vldr	d5, [r3]
 8008030:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 800803a:	4413      	add	r3, r2
 800803c:	3bb0      	subs	r3, #176	; 0xb0
 800803e:	ed93 6b00 	vldr	d6, [r3]
 8008042:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008046:	4613      	mov	r3, r2
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	4413      	add	r3, r2
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	461a      	mov	r2, r3
 8008050:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008054:	4413      	add	r3, r2
 8008056:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800805a:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	ed83 7b00 	vstr	d7, [r3]
      gain[k + 6 * i] = (Pxy[k + 6] - gain[6 * r1 + k] * Pyy[r1 + 2]) / a22;
 8008066:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800806a:	3306      	adds	r3, #6
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008072:	4413      	add	r3, r2
 8008074:	3b90      	subs	r3, #144	; 0x90
 8008076:	ed93 6b00 	vldr	d6, [r3]
 800807a:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800807e:	4613      	mov	r3, r2
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	4413      	add	r3, r2
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800808c:	4413      	add	r3, r2
 800808e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	4413      	add	r3, r2
 8008096:	ed93 5b00 	vldr	d5, [r3]
 800809a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800809e:	3302      	adds	r3, #2
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80080a6:	4413      	add	r3, r2
 80080a8:	3bb0      	subs	r3, #176	; 0xb0
 80080aa:	ed93 7b00 	vldr	d7, [r3]
 80080ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80080b2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80080b6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80080ba:	4613      	mov	r3, r2
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	4413      	add	r3, r2
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	461a      	mov	r2, r3
 80080c4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80080c8:	4413      	add	r3, r2
 80080ca:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 80080ce:	ed92 6b00 	vldr	d6, [r2]
 80080d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80080d6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	4413      	add	r3, r2
 80080de:	ed83 7b00 	vstr	d7, [r3]
      gain[k + 6 * r1] -= gain[6 * i + k] * epsilon;
 80080e2:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80080e6:	4613      	mov	r3, r2
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	4413      	add	r3, r2
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	461a      	mov	r2, r3
 80080f0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80080f4:	4413      	add	r3, r2
 80080f6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	4413      	add	r3, r2
 80080fe:	ed93 6b00 	vldr	d6, [r3]
 8008102:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008106:	4613      	mov	r3, r2
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	4413      	add	r3, r2
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	461a      	mov	r2, r3
 8008110:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008114:	4413      	add	r3, r2
 8008116:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4413      	add	r3, r2
 800811e:	ed93 5b00 	vldr	d5, [r3]
 8008122:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008126:	ed93 7b00 	vldr	d7, [r3]
 800812a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800812e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008132:	4613      	mov	r3, r2
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	4413      	add	r3, r2
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	461a      	mov	r2, r3
 800813c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008140:	4413      	add	r3, r2
 8008142:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008146:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	4413      	add	r3, r2
 800814e:	ed83 7b00 	vstr	d7, [r3]
    for (k = 0; k < 6; k++) {
 8008152:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008156:	3301      	adds	r3, #1
 8008158:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800815c:	e75a      	b.n	8008014 <_ZN27positionEstimatorModelClass4stepEv+0x139c>
    }

    a22 = rtDW.TmpSignalConversionAtSFunctio_i[0] - rtDW.DataStoreReadX_p[4];
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008166:	ed93 6b00 	vldr	d6, [r3]
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8008172:	ed93 7b00 	vldr	d7, [r3]
 8008176:	ee36 7b47 	vsub.f64	d7, d6, d7
 800817a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800817e:	ed83 7b00 	vstr	d7, [r3]
    epsilon = rtDW.TmpSignalConversionAtSFunctio_i[1] - rtDW.DataStoreReadX_p[5];
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 800818a:	ed93 6b00 	vldr	d6, [r3]
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8008196:	ed93 7b00 	vldr	d7, [r3]
 800819a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800819e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80081a2:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 6; r1++) {
 80081a6:	2300      	movs	r3, #0
 80081a8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80081ac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80081b0:	2b05      	cmp	r3, #5
 80081b2:	f300 816d 	bgt.w	8008490 <_ZN27positionEstimatorModelClass4stepEv+0x1818>
      u = gain[r1] * a22;
 80081b6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80081ba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	4413      	add	r3, r2
 80081c2:	ed93 7b00 	vldr	d7, [r3]
 80081c6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80081ca:	ed93 6b00 	vldr	d6, [r3]
 80081ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80081d2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80081d6:	ed83 7b00 	vstr	d7, [r3]
      u += gain[r1 + 6] * epsilon;
 80081da:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80081de:	3306      	adds	r3, #6
 80081e0:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4413      	add	r3, r2
 80081e8:	ed93 6b00 	vldr	d6, [r3]
 80081ec:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80081f0:	ed93 7b00 	vldr	d7, [r3]
 80081f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80081f8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80081fc:	ed93 6b00 	vldr	d6, [r3]
 8008200:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008204:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008208:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_n[r1] = rtDW.DataStoreReadX_p[r1] + u;
 800820c:	1d3b      	adds	r3, r7, #4
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008214:	3392      	adds	r3, #146	; 0x92
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4413      	add	r3, r2
 800821a:	ed93 6b00 	vldr	d6, [r3]
 800821e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008222:	ed93 7b00 	vldr	d7, [r3]
 8008226:	ee36 7b07 	vadd.f64	d7, d6, d7
 800822a:	1d3b      	adds	r3, r7, #4
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008232:	339a      	adds	r3, #154	; 0x9a
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4413      	add	r3, r2
 8008238:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 6; i++) {
 800823c:	2300      	movs	r3, #0
 800823e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008242:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008246:	2b05      	cmp	r3, #5
 8008248:	f300 80a6 	bgt.w	8008398 <_ZN27positionEstimatorModelClass4stepEv+0x1720>
        gain_0[r1 + 6 * i] = 0.0;
 800824c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008250:	4613      	mov	r3, r2
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	4413      	add	r3, r2
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	461a      	mov	r2, r3
 800825a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800825e:	4413      	add	r3, r2
 8008260:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	441a      	add	r2, r3
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	f04f 0400 	mov.w	r4, #0
 8008270:	e9c2 3400 	strd	r3, r4, [r2]
        u = gain_0[6 * i + r1];
 8008274:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008278:	4613      	mov	r3, r2
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	4413      	add	r3, r2
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	461a      	mov	r2, r3
 8008282:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008286:	4413      	add	r3, r2
 8008288:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	4413      	add	r3, r2
 8008290:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008294:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008298:	e9c2 3400 	strd	r3, r4, [r2]
        u += dHdx[i << 1] * gain[r1];
 800829c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	4413      	add	r3, r2
 80082aa:	ed93 6b00 	vldr	d6, [r3]
 80082ae:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80082b2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	ed93 7b00 	vldr	d7, [r3]
 80082be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80082c2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80082c6:	ed93 6b00 	vldr	d6, [r3]
 80082ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80082ce:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80082d2:	ed83 7b00 	vstr	d7, [r3]
        gain_0[r1 + 6 * i] = u;
 80082d6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80082da:	4613      	mov	r3, r2
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	4413      	add	r3, r2
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	461a      	mov	r2, r3
 80082e4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80082e8:	4413      	add	r3, r2
 80082ea:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	441a      	add	r2, r3
 80082f2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80082f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082fa:	e9c2 3400 	strd	r3, r4, [r2]
        u = gain_0[6 * i + r1];
 80082fe:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008302:	4613      	mov	r3, r2
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	4413      	add	r3, r2
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	461a      	mov	r2, r3
 800830c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008310:	4413      	add	r3, r2
 8008312:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	4413      	add	r3, r2
 800831a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800831e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008322:	e9c2 3400 	strd	r3, r4, [r2]
        u += dHdx[(i << 1) + 1] * gain[r1 + 6];
 8008326:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	3301      	adds	r3, #1
 800832e:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	4413      	add	r3, r2
 8008336:	ed93 6b00 	vldr	d6, [r3]
 800833a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800833e:	3306      	adds	r3, #6
 8008340:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	4413      	add	r3, r2
 8008348:	ed93 7b00 	vldr	d7, [r3]
 800834c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008350:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008354:	ed93 6b00 	vldr	d6, [r3]
 8008358:	ee36 7b07 	vadd.f64	d7, d6, d7
 800835c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008360:	ed83 7b00 	vstr	d7, [r3]
        gain_0[r1 + 6 * i] = u;
 8008364:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008368:	4613      	mov	r3, r2
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	4413      	add	r3, r2
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	461a      	mov	r2, r3
 8008372:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008376:	4413      	add	r3, r2
 8008378:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	441a      	add	r2, r3
 8008380:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008384:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008388:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 6; i++) {
 800838c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008390:	3301      	adds	r3, #1
 8008392:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008396:	e754      	b.n	8008242 <_ZN27positionEstimatorModelClass4stepEv+0x15ca>
      }

      for (i = 0; i < 6; i++) {
 8008398:	2300      	movs	r3, #0
 800839a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800839e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80083a2:	2b05      	cmp	r3, #5
 80083a4:	dc6e      	bgt.n	8008484 <_ZN27positionEstimatorModelClass4stepEv+0x180c>
        u = 0.0;
 80083a6:	f04f 0300 	mov.w	r3, #0
 80083aa:	f04f 0400 	mov.w	r4, #0
 80083ae:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80083b2:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 80083b6:	2300      	movs	r3, #0
 80083b8:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80083bc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80083c0:	2b05      	cmp	r3, #5
 80083c2:	dc32      	bgt.n	800842a <_ZN27positionEstimatorModelClass4stepEv+0x17b2>
          u += gain_0[6 * k + r1] * rtDW.P_k[6 * i + k];
 80083c4:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 80083c8:	4613      	mov	r3, r2
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	4413      	add	r3, r2
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	461a      	mov	r2, r3
 80083d2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80083d6:	4413      	add	r3, r2
 80083d8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	4413      	add	r3, r2
 80083e0:	ed93 6b00 	vldr	d6, [r3]
 80083e4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80083e8:	4613      	mov	r3, r2
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	4413      	add	r3, r2
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	461a      	mov	r2, r3
 80083f2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80083f6:	4413      	add	r3, r2
 80083f8:	1d3a      	adds	r2, r7, #4
 80083fa:	6812      	ldr	r2, [r2, #0]
 80083fc:	33a0      	adds	r3, #160	; 0xa0
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	4413      	add	r3, r2
 8008402:	ed93 7b00 	vldr	d7, [r3]
 8008406:	ee26 7b07 	vmul.f64	d7, d6, d7
 800840a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800840e:	ed93 6b00 	vldr	d6, [r3]
 8008412:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008416:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800841a:	ed83 7b00 	vstr	d7, [r3]
        for (k = 0; k < 6; k++) {
 800841e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008422:	3301      	adds	r3, #1
 8008424:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008428:	e7c8      	b.n	80083bc <_ZN27positionEstimatorModelClass4stepEv+0x1744>
        }

        a_0[r1 + 6 * i] = rtDW.P_k[6 * i + r1] - u;
 800842a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800842e:	4613      	mov	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4413      	add	r3, r2
 8008434:	005b      	lsls	r3, r3, #1
 8008436:	461a      	mov	r2, r3
 8008438:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800843c:	4413      	add	r3, r2
 800843e:	1d3a      	adds	r2, r7, #4
 8008440:	6812      	ldr	r2, [r2, #0]
 8008442:	33a0      	adds	r3, #160	; 0xa0
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	4413      	add	r3, r2
 8008448:	ed93 6b00 	vldr	d6, [r3]
 800844c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008450:	4613      	mov	r3, r2
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	4413      	add	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	461a      	mov	r2, r3
 800845a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800845e:	4413      	add	r3, r2
 8008460:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008464:	ed92 7b00 	vldr	d7, [r2]
 8008468:	ee36 7b47 	vsub.f64	d7, d6, d7
 800846c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008470:	00db      	lsls	r3, r3, #3
 8008472:	4413      	add	r3, r2
 8008474:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 6; i++) {
 8008478:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800847c:	3301      	adds	r3, #1
 800847e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008482:	e78c      	b.n	800839e <_ZN27positionEstimatorModelClass4stepEv+0x1726>
    for (r1 = 0; r1 < 6; r1++) {
 8008484:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008488:	3301      	adds	r3, #1
 800848a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800848e:	e68d      	b.n	80081ac <_ZN27positionEstimatorModelClass4stepEv+0x1534>
      }
    }

    for (i = 0; i < 36; i++) {
 8008490:	2300      	movs	r3, #0
 8008492:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008496:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800849a:	2b23      	cmp	r3, #35	; 0x23
 800849c:	dc29      	bgt.n	80084f2 <_ZN27positionEstimatorModelClass4stepEv+0x187a>
      rtDW.P_k[i] = a_0[i];
 800849e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80084a2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	4413      	add	r3, r2
 80084aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084ae:	1d3a      	adds	r2, r7, #4
 80084b0:	6811      	ldr	r1, [r2, #0]
 80084b2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80084b6:	32a0      	adds	r2, #160	; 0xa0
 80084b8:	00d2      	lsls	r2, r2, #3
 80084ba:	440a      	add	r2, r1
 80084bc:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S13>/Data Store WriteP'
      rtDW.P_n_c[i] = rtDW.P_k[i];
 80084c0:	1d3b      	adds	r3, r7, #4
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084c8:	33a0      	adds	r3, #160	; 0xa0
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084d2:	1d3a      	adds	r2, r7, #4
 80084d4:	6811      	ldr	r1, [r2, #0]
 80084d6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80084da:	f502 728c 	add.w	r2, r2, #280	; 0x118
 80084de:	00d2      	lsls	r2, r2, #3
 80084e0:	440a      	add	r2, r1
 80084e2:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 80084e6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084ea:	3301      	adds	r3, #1
 80084ec:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80084f0:	e7d1      	b.n	8008496 <_ZN27positionEstimatorModelClass4stepEv+0x181e>
    }

    // DataStoreWrite: '<S13>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 80084f2:	2300      	movs	r3, #0
 80084f4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80084f8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084fc:	2b05      	cmp	r3, #5
 80084fe:	dc18      	bgt.n	8008532 <_ZN27positionEstimatorModelClass4stepEv+0x18ba>
      rtDW.x_p[i] = rtDW.xNew_n[i];
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008508:	339a      	adds	r3, #154	; 0x9a
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	4413      	add	r3, r2
 800850e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008512:	1d3a      	adds	r2, r7, #4
 8008514:	6811      	ldr	r1, [r2, #0]
 8008516:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800851a:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800851e:	00d2      	lsls	r2, r2, #3
 8008520:	440a      	add	r2, r1
 8008522:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8008526:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800852a:	3301      	adds	r3, #1
 800852c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008530:	e7e2      	b.n	80084f8 <_ZN27positionEstimatorModelClass4stepEv+0x1880>

  // Logic: '<Root>/Logical Operator' incorporates:
  //   Inport: '<Root>/GPS_switch'
  //   Inport: '<Root>/GpsFlag'

  rtDW.LogicalOperator = ((rtU.GPS_switch != 0.0) && (rtU.GpsFlag != 0.0));
 8008532:	1d3b      	adds	r3, r7, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 800853a:	ed93 7b00 	vldr	d7, [r3]
 800853e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	d00c      	beq.n	8008562 <_ZN27positionEstimatorModelClass4stepEv+0x18ea>
 8008548:	1d3b      	adds	r3, r7, #4
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 8008550:	ed93 7b00 	vldr	d7, [r3]
 8008554:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800855c:	d001      	beq.n	8008562 <_ZN27positionEstimatorModelClass4stepEv+0x18ea>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <_ZN27positionEstimatorModelClass4stepEv+0x18ec>
 8008562:	2300      	movs	r3, #0
 8008564:	461a      	mov	r2, r3
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f883 2c3f 	strb.w	r2, [r3, #3135]	; 0xc3f

  // Outputs for Enabled SubSystem: '<S2>/Correct2' incorporates:
  //   EnablePort: '<S14>/Enable'

  if (rtDW.LogicalOperator) {
 800856e:	1d3b      	adds	r3, r7, #4
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f893 3c3f 	ldrb.w	r3, [r3, #3135]	; 0xc3f
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 83ae 	beq.w	8008cd8 <_ZN27positionEstimatorModelClass4stepEv+0x2060>
    // DataStoreRead: '<S14>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 800857c:	2300      	movs	r3, #0
 800857e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008582:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008586:	2b05      	cmp	r3, #5
 8008588:	dc18      	bgt.n	80085bc <_ZN27positionEstimatorModelClass4stepEv+0x1944>
      rtDW.DataStoreReadX_j[i] = rtDW.x_p[i];
 800858a:	1d3b      	adds	r3, r7, #4
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008592:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800859e:	1d3a      	adds	r2, r7, #4
 80085a0:	6811      	ldr	r1, [r2, #0]
 80085a2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80085a6:	325e      	adds	r2, #94	; 0x5e
 80085a8:	00d2      	lsls	r2, r2, #3
 80085aa:	440a      	add	r2, r1
 80085ac:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 80085b0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80085b4:	3301      	adds	r3, #1
 80085b6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80085ba:	e7e2      	b.n	8008582 <_ZN27positionEstimatorModelClass4stepEv+0x190a>
    // SignalConversion generated from: '<S18>/ SFunction ' incorporates:
    //   Inport: '<Root>/vx'
    //   Inport: '<Root>/vy'
    //   MATLAB Function: '<S14>/Correct'

    rtDW.TmpSignalConversionAtSFunctionI[0] = rtDW.Px;
 80085bc:	1d3b      	adds	r3, r7, #4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 80085c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085c8:	1d3a      	adds	r2, r7, #4
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	e9c2 34c8 	strd	r3, r4, [r2, #800]	; 0x320
    rtDW.TmpSignalConversionAtSFunctionI[1] = rtDW.Py;
 80085d0:	1d3b      	adds	r3, r7, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 80085d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085dc:	1d3a      	adds	r2, r7, #4
 80085de:	6812      	ldr	r2, [r2, #0]
 80085e0:	e9c2 34ca 	strd	r3, r4, [r2, #808]	; 0x328
    rtDW.TmpSignalConversionAtSFunctionI[2] = rtU.vx;
 80085e4:	1d3b      	adds	r3, r7, #4
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 80085ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085f0:	1d3a      	adds	r2, r7, #4
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	e9c2 34cc 	strd	r3, r4, [r2, #816]	; 0x330
    rtDW.TmpSignalConversionAtSFunctionI[3] = rtU.vy;
 80085f8:	1d3b      	adds	r3, r7, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8008600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008604:	1d3a      	adds	r2, r7, #4
 8008606:	6812      	ldr	r2, [r2, #0]
 8008608:	e9c2 34ce 	strd	r3, r4, [r2, #824]	; 0x338

    // MATLAB Function: '<S14>/Correct'
    rtDW.blockOrdering = rtDW.blockOrdering_f;
 800860c:	1d3b      	adds	r3, r7, #4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f893 2c44 	ldrb.w	r2, [r3, #3140]	; 0xc44
 8008614:	1d3b      	adds	r3, r7, #4
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43
    blockOrdering = rtDW.blockOrdering;
 800861c:	1d3b      	adds	r3, r7, #4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f893 3c43 	ldrb.w	r3, [r3, #3139]	; 0xc43
 8008624:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering = blockOrdering;
 8008628:	1d3b      	adds	r3, r7, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8008630:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43
    for (i = 0; i < 36; i++) {
 8008634:	2300      	movs	r3, #0
 8008636:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800863a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800863e:	2b23      	cmp	r3, #35	; 0x23
 8008640:	dc32      	bgt.n	80086a8 <_ZN27positionEstimatorModelClass4stepEv+0x1a30>
      // DataStoreRead: '<S14>/Data Store ReadP'
      rtDW.P_f[i] = rtDW.P_n_c[i];
 8008642:	1d3b      	adds	r3, r7, #4
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800864a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	4413      	add	r3, r2
 8008652:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008656:	1d3a      	adds	r2, r7, #4
 8008658:	6811      	ldr	r1, [r2, #0]
 800865a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800865e:	326e      	adds	r2, #110	; 0x6e
 8008660:	00d2      	lsls	r2, r2, #3
 8008662:	440a      	add	r2, r1
 8008664:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S14>/Correct'
      u = rtDW.P_f[i];
 8008668:	1d3b      	adds	r3, r7, #4
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008670:	336e      	adds	r3, #110	; 0x6e
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4413      	add	r3, r2
 8008676:	e9d3 3400 	ldrd	r3, r4, [r3]
 800867a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800867e:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_f[i] = u;
 8008682:	1d3b      	adds	r3, r7, #4
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800868a:	336e      	adds	r3, #110	; 0x6e
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	441a      	add	r2, r3
 8008690:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008694:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008698:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 800869c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086a0:	3301      	adds	r3, #1
 80086a2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80086a6:	e7c8      	b.n	800863a <_ZN27positionEstimatorModelClass4stepEv+0x19c2>
    }

    // MATLAB Function: '<S14>/Correct' incorporates:
    //   Constant: '<S2>/R2'

    for (r1 = 0; r1 < 6; r1++) {
 80086a8:	2300      	movs	r3, #0
 80086aa:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80086ae:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80086b2:	2b05      	cmp	r3, #5
 80086b4:	f300 80d9 	bgt.w	800886a <_ZN27positionEstimatorModelClass4stepEv+0x1bf2>
      for (i = 0; i < 6; i++) {
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80086be:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086c2:	2b05      	cmp	r3, #5
 80086c4:	dc16      	bgt.n	80086f4 <_ZN27positionEstimatorModelClass4stepEv+0x1a7c>
        imvec[i] = rtDW.DataStoreReadX_j[i];
 80086c6:	1d3b      	adds	r3, r7, #4
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086ce:	335e      	adds	r3, #94	; 0x5e
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	4413      	add	r3, r2
 80086d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086d8:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 80086dc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80086e0:	00d2      	lsls	r2, r2, #3
 80086e2:	440a      	add	r2, r1
 80086e4:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 6; i++) {
 80086e8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086ec:	3301      	adds	r3, #1
 80086ee:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80086f2:	e7e4      	b.n	80086be <_ZN27positionEstimatorModelClass4stepEv+0x1a46>
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_j[r1]);
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80086fc:	335e      	adds	r3, #94	; 0x5e
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	ed93 7b00 	vldr	d7, [r3]
 8008706:	eeb0 0b47 	vmov.f64	d0, d7
 800870a:	f7fd f956 	bl	80059ba <_ZSt3absd>
 800870e:	eeb0 6b40 	vmov.f64	d6, d0
 8008712:	ed9f 7bb5 	vldr	d7, [pc, #724]	; 80089e8 <_ZN27positionEstimatorModelClass4stepEv+0x1d70>
 8008716:	ee26 7b07 	vmul.f64	d7, d6, d7
 800871a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800871e:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8008722:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008726:	ed93 7b00 	vldr	d7, [r3]
 800872a:	ed9f 6baf 	vldr	d6, [pc, #700]	; 80089e8 <_ZN27positionEstimatorModelClass4stepEv+0x1d70>
 800872e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008736:	d408      	bmi.n	800874a <_ZN27positionEstimatorModelClass4stepEv+0x1ad2>
 8008738:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800873c:	ed93 0b00 	vldr	d0, [r3]
 8008740:	f7fd f9ee 	bl	8005b20 <rtIsNaN>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <_ZN27positionEstimatorModelClass4stepEv+0x1ad6>
 800874a:	2301      	movs	r3, #1
 800874c:	e000      	b.n	8008750 <_ZN27positionEstimatorModelClass4stepEv+0x1ad8>
 800874e:	2300      	movs	r3, #0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <_ZN27positionEstimatorModelClass4stepEv+0x1aea>
        epsilon = 1.4901161193847656E-8;
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	4ca5      	ldr	r4, [pc, #660]	; (80089f0 <_ZN27positionEstimatorModelClass4stepEv+0x1d78>)
 800875a:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800875e:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec[r1] = rtDW.DataStoreReadX_j[r1] + epsilon;
 8008762:	1d3b      	adds	r3, r7, #4
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800876a:	335e      	adds	r3, #94	; 0x5e
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4413      	add	r3, r2
 8008770:	ed93 6b00 	vldr	d6, [r3]
 8008774:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008778:	ed93 7b00 	vldr	d7, [r3]
 800877c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008780:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8008784:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	4413      	add	r3, r2
 800878c:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[r1 << 2] = (imvec[0] - rtDW.DataStoreReadX_j[0]) / epsilon;
 8008790:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8008794:	ed93 6b00 	vldr	d6, [r3]
 8008798:	1d3b      	adds	r3, r7, #4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	ed93 7bbc 	vldr	d7, [r3, #752]	; 0x2f0
 80087a0:	ee36 5b47 	vsub.f64	d5, d6, d7
 80087a4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80087ae:	ed92 6b00 	vldr	d6, [r2]
 80087b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80087b6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4413      	add	r3, r2
 80087be:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[(r1 << 2) + 1] = (imvec[1] - rtDW.DataStoreReadX_j[1]) / epsilon;
 80087c2:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80087c6:	ed93 6b02 	vldr	d6, [r3, #8]
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	ed93 7bbe 	vldr	d7, [r3, #760]	; 0x2f8
 80087d2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80087d6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	3301      	adds	r3, #1
 80087de:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80087e2:	ed92 6b00 	vldr	d6, [r2]
 80087e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80087ea:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	4413      	add	r3, r2
 80087f2:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[(r1 << 2) + 2] = (imvec[2] - rtDW.DataStoreReadX_j[2]) / epsilon;
 80087f6:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80087fa:	ed93 6b04 	vldr	d6, [r3, #16]
 80087fe:	1d3b      	adds	r3, r7, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	ed93 7bc0 	vldr	d7, [r3, #768]	; 0x300
 8008806:	ee36 5b47 	vsub.f64	d5, d6, d7
 800880a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	3302      	adds	r3, #2
 8008812:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8008816:	ed92 6b00 	vldr	d6, [r2]
 800881a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800881e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	4413      	add	r3, r2
 8008826:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[(r1 << 2) + 3] = (imvec[3] - rtDW.DataStoreReadX_j[3]) / epsilon;
 800882a:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800882e:	ed93 6b06 	vldr	d6, [r3, #24]
 8008832:	1d3b      	adds	r3, r7, #4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	ed93 7bc2 	vldr	d7, [r3, #776]	; 0x308
 800883a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800883e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	3303      	adds	r3, #3
 8008846:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800884a:	ed92 6b00 	vldr	d6, [r2]
 800884e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008852:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	4413      	add	r3, r2
 800885a:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 6; r1++) {
 800885e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008862:	3301      	adds	r3, #1
 8008864:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008868:	e721      	b.n	80086ae <_ZN27positionEstimatorModelClass4stepEv+0x1a36>
    }

    for (i = 0; i < 6; i++) {
 800886a:	2300      	movs	r3, #0
 800886c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008870:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008874:	2b05      	cmp	r3, #5
 8008876:	dc16      	bgt.n	80088a6 <_ZN27positionEstimatorModelClass4stepEv+0x1c2e>
      imvec[i] = rtDW.DataStoreReadX_j[i];
 8008878:	1d3b      	adds	r3, r7, #4
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008880:	335e      	adds	r3, #94	; 0x5e
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	4413      	add	r3, r2
 8008886:	e9d3 3400 	ldrd	r3, r4, [r3]
 800888a:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 800888e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008892:	00d2      	lsls	r2, r2, #3
 8008894:	440a      	add	r2, r1
 8008896:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800889a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800889e:	3301      	adds	r3, #1
 80088a0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80088a4:	e7e4      	b.n	8008870 <_ZN27positionEstimatorModelClass4stepEv+0x1bf8>
    }

    for (r1 = 0; r1 < 4; r1++) {
 80088a6:	2300      	movs	r3, #0
 80088a8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80088ac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	f300 809f 	bgt.w	80089f4 <_ZN27positionEstimatorModelClass4stepEv+0x1d7c>
      for (i = 0; i < 6; i++) {
 80088b6:	2300      	movs	r3, #0
 80088b8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80088bc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80088c0:	2b05      	cmp	r3, #5
 80088c2:	dc6b      	bgt.n	800899c <_ZN27positionEstimatorModelClass4stepEv+0x1d24>
        dHdx_2[r1 + (i << 2)] = 0.0;
 80088c4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80088c8:	009a      	lsls	r2, r3, #2
 80088ca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80088ce:	4413      	add	r3, r2
 80088d0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80088d4:	00db      	lsls	r3, r3, #3
 80088d6:	441a      	add	r2, r3
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	f04f 0400 	mov.w	r4, #0
 80088e0:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80088ea:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80088ee:	2b05      	cmp	r3, #5
 80088f0:	dc4e      	bgt.n	8008990 <_ZN27positionEstimatorModelClass4stepEv+0x1d18>
          u = dHdx_2[(i << 2) + r1];
 80088f2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80088f6:	009a      	lsls	r2, r3, #2
 80088f8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80088fc:	4413      	add	r3, r2
 80088fe:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	4413      	add	r3, r2
 8008906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800890a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800890e:	e9c2 3400 	strd	r3, r4, [r2]
          u += dHdx_0[(k << 2) + r1] * rtDW.P_f[6 * i + k];
 8008912:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008916:	009a      	lsls	r2, r3, #2
 8008918:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800891c:	4413      	add	r3, r2
 800891e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	4413      	add	r3, r2
 8008926:	ed93 6b00 	vldr	d6, [r3]
 800892a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800892e:	4613      	mov	r3, r2
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	4413      	add	r3, r2
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	461a      	mov	r2, r3
 8008938:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800893c:	4413      	add	r3, r2
 800893e:	1d3a      	adds	r2, r7, #4
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	336e      	adds	r3, #110	; 0x6e
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	4413      	add	r3, r2
 8008948:	ed93 7b00 	vldr	d7, [r3]
 800894c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008950:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008954:	ed93 6b00 	vldr	d6, [r3]
 8008958:	ee36 7b07 	vadd.f64	d7, d6, d7
 800895c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008960:	ed83 7b00 	vstr	d7, [r3]
          dHdx_2[r1 + (i << 2)] = u;
 8008964:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008968:	009a      	lsls	r2, r3, #2
 800896a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800896e:	4413      	add	r3, r2
 8008970:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	441a      	add	r2, r3
 8008978:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800897c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008980:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008984:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008988:	3301      	adds	r3, #1
 800898a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800898e:	e7ac      	b.n	80088ea <_ZN27positionEstimatorModelClass4stepEv+0x1c72>
      for (i = 0; i < 6; i++) {
 8008990:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008994:	3301      	adds	r3, #1
 8008996:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800899a:	e78f      	b.n	80088bc <_ZN27positionEstimatorModelClass4stepEv+0x1c44>
        }
      }

      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 800899c:	1d3b      	adds	r3, r7, #4
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089a4:	3364      	adds	r3, #100	; 0x64
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	4413      	add	r3, r2
 80089aa:	ed93 6b00 	vldr	d6, [r3]
        rtDW.DataStoreReadX_j[r1];
 80089ae:	1d3b      	adds	r3, r7, #4
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089b6:	335e      	adds	r3, #94	; 0x5e
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	4413      	add	r3, r2
 80089bc:	ed93 7b00 	vldr	d7, [r3]
      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 80089c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80089c4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80089ce:	4413      	add	r3, r2
 80089d0:	3bb0      	subs	r3, #176	; 0xb0
 80089d2:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 4; r1++) {
 80089d6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089da:	3301      	adds	r3, #1
 80089dc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80089e0:	e764      	b.n	80088ac <_ZN27positionEstimatorModelClass4stepEv+0x1c34>
 80089e2:	bf00      	nop
 80089e4:	f3af 8000 	nop.w
 80089e8:	00000000 	.word	0x00000000
 80089ec:	3e500000 	.word	0x3e500000
 80089f0:	3e500000 	.word	0x3e500000
    }

    for (r1 = 0; r1 < 6; r1++) {
 80089f4:	2300      	movs	r3, #0
 80089f6:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80089fa:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089fe:	2b05      	cmp	r3, #5
 8008a00:	f300 8085 	bgt.w	8008b0e <_ZN27positionEstimatorModelClass4stepEv+0x1e96>
      for (i = 0; i < 4; i++) {
 8008a04:	2300      	movs	r3, #0
 8008a06:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008a0a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	dc77      	bgt.n	8008b02 <_ZN27positionEstimatorModelClass4stepEv+0x1e8a>
        tmp[r1 + 6 * i] = 0.0;
 8008a12:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008a16:	4613      	mov	r3, r2
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	4413      	add	r3, r2
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a24:	4413      	add	r3, r2
 8008a26:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	441a      	add	r2, r3
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	f04f 0400 	mov.w	r4, #0
 8008a36:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008a40:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	dc56      	bgt.n	8008af6 <_ZN27positionEstimatorModelClass4stepEv+0x1e7e>
          u = tmp[6 * i + r1];
 8008a48:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	4413      	add	r3, r2
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	461a      	mov	r2, r3
 8008a56:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	4413      	add	r3, r2
 8008a64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a68:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008a6c:	e9c2 3400 	strd	r3, r4, [r2]
          u += rtDW.P_f[6 * k + r1] * dHdx_0[(k << 2) + i];
 8008a70:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8008a74:	4613      	mov	r3, r2
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	4413      	add	r3, r2
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a82:	4413      	add	r3, r2
 8008a84:	1d3a      	adds	r2, r7, #4
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	336e      	adds	r3, #110	; 0x6e
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	ed93 6b00 	vldr	d6, [r3]
 8008a92:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008a96:	009a      	lsls	r2, r3, #2
 8008a98:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	ed93 7b00 	vldr	d7, [r3]
 8008aaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008aae:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008ab2:	ed93 6b00 	vldr	d6, [r3]
 8008ab6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008aba:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008abe:	ed83 7b00 	vstr	d7, [r3]
          tmp[r1 + 6 * i] = u;
 8008ac2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4413      	add	r3, r2
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	441a      	add	r2, r3
 8008ade:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ae6:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008aea:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008aee:	3301      	adds	r3, #1
 8008af0:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008af4:	e7a4      	b.n	8008a40 <_ZN27positionEstimatorModelClass4stepEv+0x1dc8>
      for (i = 0; i < 4; i++) {
 8008af6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008afa:	3301      	adds	r3, #1
 8008afc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008b00:	e783      	b.n	8008a0a <_ZN27positionEstimatorModelClass4stepEv+0x1d92>
    for (r1 = 0; r1 < 6; r1++) {
 8008b02:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b06:	3301      	adds	r3, #1
 8008b08:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008b0c:	e775      	b.n	80089fa <_ZN27positionEstimatorModelClass4stepEv+0x1d82>
        }
      }
    }

    for (r1 = 0; r1 < 4; r1++) {
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008b14:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	dc69      	bgt.n	8008bf0 <_ZN27positionEstimatorModelClass4stepEv+0x1f78>
      for (i = 0; i < 4; i++) {
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008b22:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	dc5c      	bgt.n	8008be4 <_ZN27positionEstimatorModelClass4stepEv+0x1f6c>
        u = 0.0;
 8008b2a:	f04f 0300 	mov.w	r3, #0
 8008b2e:	f04f 0400 	mov.w	r4, #0
 8008b32:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008b36:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008b40:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b44:	2b05      	cmp	r3, #5
 8008b46:	dc29      	bgt.n	8008b9c <_ZN27positionEstimatorModelClass4stepEv+0x1f24>
          u += dHdx_2[(k << 2) + r1] * dHdx_0[(k << 2) + i];
 8008b48:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b4c:	009a      	lsls	r2, r3, #2
 8008b4e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b52:	4413      	add	r3, r2
 8008b54:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	4413      	add	r3, r2
 8008b5c:	ed93 6b00 	vldr	d6, [r3]
 8008b60:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b64:	009a      	lsls	r2, r3, #2
 8008b66:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	4413      	add	r3, r2
 8008b74:	ed93 7b00 	vldr	d7, [r3]
 8008b78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b7c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008b80:	ed93 6b00 	vldr	d6, [r3]
 8008b84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008b88:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008b8c:	ed83 7b00 	vstr	d7, [r3]
        for (k = 0; k < 6; k++) {
 8008b90:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b94:	3301      	adds	r3, #1
 8008b96:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008b9a:	e7d1      	b.n	8008b40 <_ZN27positionEstimatorModelClass4stepEv+0x1ec8>
        }

        dHdx_3[r1 + (i << 2)] = rtP.R2_Value[(i << 2) + r1] + u;
 8008b9c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ba0:	009a      	lsls	r2, r3, #2
 8008ba2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ba6:	4413      	add	r3, r2
 8008ba8:	4a6b      	ldr	r2, [pc, #428]	; (8008d58 <_ZN27positionEstimatorModelClass4stepEv+0x20e0>)
 8008baa:	3325      	adds	r3, #37	; 0x25
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	4413      	add	r3, r2
 8008bb0:	ed93 6b00 	vldr	d6, [r3]
 8008bb4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008bb8:	009a      	lsls	r2, r3, #2
 8008bba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008bc4:	ed92 7b00 	vldr	d7, [r2]
 8008bc8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008bcc:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	4413      	add	r3, r2
 8008bd4:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 4; i++) {
 8008bd8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008bdc:	3301      	adds	r3, #1
 8008bde:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008be2:	e79e      	b.n	8008b22 <_ZN27positionEstimatorModelClass4stepEv+0x1eaa>
    for (r1 = 0; r1 < 4; r1++) {
 8008be4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008be8:	3301      	adds	r3, #1
 8008bea:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008bee:	e791      	b.n	8008b14 <_ZN27positionEstimatorModelClass4stepEv+0x1e9c>
      }
    }

    EKFCorrector_correctStateAndCov(imvec, rtDW.P_f, Pyy, tmp, dHdx_3, dHdx_0);
 8008bf0:	1d3b      	adds	r3, r7, #4
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f503 725c 	add.w	r2, r3, #880	; 0x370
 8008bf8:	f507 6402 	add.w	r4, r7, #2080	; 0x820
 8008bfc:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8008c00:	1d38      	adds	r0, r7, #4
 8008c02:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8008c06:	9302      	str	r3, [sp, #8]
 8008c08:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	4623      	mov	r3, r4
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	f7fd fa04 	bl	8006024 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>
    for (i = 0; i < 6; i++) {
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c22:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	dc16      	bgt.n	8008c58 <_ZN27positionEstimatorModelClass4stepEv+0x1fe0>
      rtDW.xNew_g[i] = imvec[i];
 8008c2a:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8008c2e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	4413      	add	r3, r2
 8008c36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c3a:	1d3a      	adds	r2, r7, #4
 8008c3c:	6811      	ldr	r1, [r2, #0]
 8008c3e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008c42:	3268      	adds	r2, #104	; 0x68
 8008c44:	00d2      	lsls	r2, r2, #3
 8008c46:	440a      	add	r2, r1
 8008c48:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8008c4c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c50:	3301      	adds	r3, #1
 8008c52:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c56:	e7e4      	b.n	8008c22 <_ZN27positionEstimatorModelClass4stepEv+0x1faa>
    }

    // DataStoreWrite: '<S14>/Data Store WriteP'
    for (i = 0; i < 36; i++) {
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c5e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c62:	2b23      	cmp	r3, #35	; 0x23
 8008c64:	dc18      	bgt.n	8008c98 <_ZN27positionEstimatorModelClass4stepEv+0x2020>
      rtDW.P_n_c[i] = rtDW.P_f[i];
 8008c66:	1d3b      	adds	r3, r7, #4
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c6e:	336e      	adds	r3, #110	; 0x6e
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	4413      	add	r3, r2
 8008c74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c78:	1d3a      	adds	r2, r7, #4
 8008c7a:	6811      	ldr	r1, [r2, #0]
 8008c7c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008c80:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8008c84:	00d2      	lsls	r2, r2, #3
 8008c86:	440a      	add	r2, r1
 8008c88:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 8008c8c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c90:	3301      	adds	r3, #1
 8008c92:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c96:	e7e2      	b.n	8008c5e <_ZN27positionEstimatorModelClass4stepEv+0x1fe6>
    }

    // End of DataStoreWrite: '<S14>/Data Store WriteP'

    // DataStoreWrite: '<S14>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c9e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ca2:	2b05      	cmp	r3, #5
 8008ca4:	dc18      	bgt.n	8008cd8 <_ZN27positionEstimatorModelClass4stepEv+0x2060>
      rtDW.x_p[i] = rtDW.xNew_g[i];
 8008ca6:	1d3b      	adds	r3, r7, #4
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cae:	3368      	adds	r3, #104	; 0x68
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cb8:	1d3a      	adds	r2, r7, #4
 8008cba:	6811      	ldr	r1, [r2, #0]
 8008cbc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008cc0:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 8008cc4:	00d2      	lsls	r2, r2, #3
 8008cc6:	440a      	add	r2, r1
 8008cc8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8008ccc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008cd6:	e7e2      	b.n	8008c9e <_ZN27positionEstimatorModelClass4stepEv+0x2026>

  // End of Outputs for SubSystem: '<S2>/Correct2'

  // Outputs for Atomic SubSystem: '<S2>/Output'
  // DataStoreRead: '<S15>/Data Store Read'
  for (i = 0; i < 6; i++) {
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008cde:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ce2:	2b05      	cmp	r3, #5
 8008ce4:	dc18      	bgt.n	8008d18 <_ZN27positionEstimatorModelClass4stepEv+0x20a0>
    rtDW.DataStoreRead[i] = rtDW.x_p[i];
 8008ce6:	1d3b      	adds	r3, r7, #4
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	4413      	add	r3, r2
 8008cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cfa:	1d3a      	adds	r2, r7, #4
 8008cfc:	6811      	ldr	r1, [r2, #0]
 8008cfe:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008d02:	3234      	adds	r2, #52	; 0x34
 8008d04:	00d2      	lsls	r2, r2, #3
 8008d06:	440a      	add	r2, r1
 8008d08:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 8008d0c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d10:	3301      	adds	r3, #1
 8008d12:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d16:	e7e2      	b.n	8008cde <_ZN27positionEstimatorModelClass4stepEv+0x2066>
  }

  // End of DataStoreRead: '<S15>/Data Store Read'

  // DataStoreRead: '<S15>/Data Store Read1'
  for (i = 0; i < 36; i++) {
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d1e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d22:	2b23      	cmp	r3, #35	; 0x23
 8008d24:	dc1a      	bgt.n	8008d5c <_ZN27positionEstimatorModelClass4stepEv+0x20e4>
    rtDW.DataStoreRead1[i] = rtDW.P_n_c[i];
 8008d26:	1d3b      	adds	r3, r7, #4
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d2e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	4413      	add	r3, r2
 8008d36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d3a:	1d3a      	adds	r2, r7, #4
 8008d3c:	6811      	ldr	r1, [r2, #0]
 8008d3e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008d42:	323a      	adds	r2, #58	; 0x3a
 8008d44:	00d2      	lsls	r2, r2, #3
 8008d46:	440a      	add	r2, r1
 8008d48:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 8008d4c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d50:	3301      	adds	r3, #1
 8008d52:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d56:	e7e2      	b.n	8008d1e <_ZN27positionEstimatorModelClass4stepEv+0x20a6>
 8008d58:	240002b0 	.word	0x240002b0
  }

  // End of DataStoreRead: '<S15>/Data Store Read1'

  // Inport: '<S15>/uBlockOrdering'
  rtDW.uBlockOrdering = rtDW.blockOrdering;
 8008d5c:	1d3b      	adds	r3, r7, #4
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f893 2c43 	ldrb.w	r2, [r3, #3139]	; 0xc43
 8008d64:	1d3b      	adds	r3, r7, #4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f883 2c42 	strb.w	r2, [r3, #3138]	; 0xc42

  // End of Outputs for SubSystem: '<S2>/Output'

  // Outport: '<Root>/estiX'
  rtY.estiX = rtDW.DataStoreRead[0];
 8008d6c:	1d3b      	adds	r3, r7, #4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	e9d3 3468 	ldrd	r3, r4, [r3, #416]	; 0x1a0
 8008d74:	1d3a      	adds	r2, r7, #4
 8008d76:	6812      	ldr	r2, [r2, #0]
 8008d78:	f502 624d 	add.w	r2, r2, #3280	; 0xcd0
 8008d7c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiY'
  rtY.estiY = rtDW.DataStoreRead[1];
 8008d80:	1d3b      	adds	r3, r7, #4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	e9d3 346a 	ldrd	r3, r4, [r3, #424]	; 0x1a8
 8008d88:	1d3a      	adds	r2, r7, #4
 8008d8a:	6812      	ldr	r2, [r2, #0]
 8008d8c:	f602 42d8 	addw	r2, r2, #3288	; 0xcd8
 8008d90:	e9c2 3400 	strd	r3, r4, [r2]

  // Gain: '<Root>/NED_convert' incorporates:
  //   Inport: '<Root>/baroZ'

  rtDW.NED_convert = rtP.NED_convert_Gain * rtU.baroZ;
 8008d94:	4ba2      	ldr	r3, [pc, #648]	; (8009020 <_ZN27positionEstimatorModelClass4stepEv+0x23a8>)
 8008d96:	ed93 6b76 	vldr	d6, [r3, #472]	; 0x1d8
 8008d9a:	1d3b      	adds	r3, r7, #4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8008da2:	ed93 7b00 	vldr	d7, [r3]
 8008da6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008daa:	1d3b      	adds	r3, r7, #4
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8008db2:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S20>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'
  //   Inport: '<Root>/alt'

  rtDW.alt = rtU.alt + rtU.HOME_lla[2];
 8008db6:	1d3b      	adds	r3, r7, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 8008dbe:	ed93 6b00 	vldr	d6, [r3]
 8008dc2:	1d3b      	adds	r3, r7, #4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f503 634c 	add.w	r3, r3, #3264	; 0xcc0
 8008dca:	ed93 7b00 	vldr	d7, [r3]
 8008dce:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008dd2:	1d3b      	adds	r3, r7, #4
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 8008dda:	ed83 7b00 	vstr	d7, [r3]

  // UnaryMinus: '<S20>/Ze2height'
  rtDW.Pz = -rtDW.alt;
 8008dde:	1d3b      	adds	r3, r7, #4
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 8008de6:	ed93 7b00 	vldr	d7, [r3]
 8008dea:	eeb1 7b47 	vneg.f64	d7, d7
 8008dee:	1d3b      	adds	r3, r7, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 8008df6:	ed83 7b00 	vstr	d7, [r3]

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1_a = (rtU.AhrsFlag != 0.0);
 8008dfa:	1d3b      	adds	r3, r7, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 8008e02:	ed93 7b00 	vldr	d7, [r3]
 8008e06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0e:	bf14      	ite	ne
 8008e10:	2301      	movne	r3, #1
 8008e12:	2300      	moveq	r3, #0
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	1d3b      	adds	r3, r7, #4
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f883 2c40 	strb.w	r2, [r3, #3136]	; 0xc40

  // Outputs for Enabled SubSystem: '<S1>/Correct1' incorporates:
  //   EnablePort: '<S4>/Enable'

  if (rtDW.DataTypeConversion_Enable1_a) {
 8008e20:	1d3b      	adds	r3, r7, #4
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f893 3c40 	ldrb.w	r3, [r3, #3136]	; 0xc40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8382 	beq.w	8009532 <_ZN27positionEstimatorModelClass4stepEv+0x28ba>
    // DataStoreRead: '<S4>/Data Store ReadX'
    rtDW.DataStoreReadX_o[0] = rtDW.x[0];
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8008e36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e3a:	1d3a      	adds	r2, r7, #4
 8008e3c:	6812      	ldr	r2, [r2, #0]
 8008e3e:	f502 62fd 	add.w	r2, r2, #2024	; 0x7e8
 8008e42:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[1] = rtDW.x[1];
 8008e46:	1d3b      	adds	r3, r7, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8008e4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e52:	1d3a      	adds	r2, r7, #4
 8008e54:	6812      	ldr	r2, [r2, #0]
 8008e56:	f502 62fe 	add.w	r2, r2, #2032	; 0x7f0
 8008e5a:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[2] = rtDW.x[2];
 8008e5e:	1d3b      	adds	r3, r7, #4
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8008e66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e6a:	1d3a      	adds	r2, r7, #4
 8008e6c:	6812      	ldr	r2, [r2, #0]
 8008e6e:	f502 62ff 	add.w	r2, r2, #2040	; 0x7f8
 8008e72:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/BlockOrdering'

    rtDW.blockOrdering_k = rtP.BlockOrdering_Value_b;
 8008e76:	4b6a      	ldr	r3, [pc, #424]	; (8009020 <_ZN27positionEstimatorModelClass4stepEv+0x23a8>)
 8008e78:	f893 23e6 	ldrb.w	r2, [r3, #998]	; 0x3e6
 8008e7c:	1d3b      	adds	r3, r7, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
    blockOrdering = rtDW.blockOrdering_k;
 8008e84:	1d3b      	adds	r3, r7, #4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f893 3c48 	ldrb.w	r3, [r3, #3144]	; 0xc48
 8008e8c:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_k = blockOrdering;
 8008e90:	1d3b      	adds	r3, r7, #4
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8008e98:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
    for (i = 0; i < 9; i++) {
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008ea2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	dc35      	bgt.n	8008f16 <_ZN27positionEstimatorModelClass4stepEv+0x229e>
      // DataStoreRead: '<S4>/Data Store ReadP'
      rtDW.P_g[i] = rtDW.P_i_m[i];
 8008eaa:	1d3b      	adds	r3, r7, #4
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008eb2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	4413      	add	r3, r2
 8008eba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ebe:	1d3a      	adds	r2, r7, #4
 8008ec0:	6811      	ldr	r1, [r2, #0]
 8008ec2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008ec6:	f202 1203 	addw	r2, r2, #259	; 0x103
 8008eca:	00d2      	lsls	r2, r2, #3
 8008ecc:	440a      	add	r2, r1
 8008ece:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S4>/Correct'
      u = rtDW.P_g[i];
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008eda:	f203 1303 	addw	r3, r3, #259	; 0x103
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	4413      	add	r3, r2
 8008ee2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ee6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008eea:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_g[i] = u;
 8008eee:	1d3b      	adds	r3, r7, #4
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ef6:	f203 1303 	addw	r3, r3, #259	; 0x103
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	441a      	add	r2, r3
 8008efe:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008f02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f06:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8008f0a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008f0e:	3301      	adds	r3, #1
 8008f10:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008f14:	e7c5      	b.n	8008ea2 <_ZN27positionEstimatorModelClass4stepEv+0x222a>

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/R1'
    //   Inport: '<Root>/az'

    for (r1 = 0; r1 < 3; r1++) {
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008f1c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	f300 8081 	bgt.w	8009028 <_ZN27positionEstimatorModelClass4stepEv+0x23b0>
      imvec_0[2] = rtDW.DataStoreReadX_o[2];
 8008f26:	1d3b      	adds	r3, r7, #4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8008f2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f32:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8008f36:	e9c2 3404 	strd	r3, r4, [r2, #16]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_o[r1]);
 8008f3a:	1d3b      	adds	r3, r7, #4
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008f42:	33fd      	adds	r3, #253	; 0xfd
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	4413      	add	r3, r2
 8008f48:	ed93 7b00 	vldr	d7, [r3]
 8008f4c:	eeb0 0b47 	vmov.f64	d0, d7
 8008f50:	f7fc fd33 	bl	80059ba <_ZSt3absd>
 8008f54:	eeb0 6b40 	vmov.f64	d6, d0
 8008f58:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009018 <_ZN27positionEstimatorModelClass4stepEv+0x23a0>
 8008f5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008f60:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008f64:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8008f68:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008f6c:	ed93 7b00 	vldr	d7, [r3]
 8008f70:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8009018 <_ZN27positionEstimatorModelClass4stepEv+0x23a0>
 8008f74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7c:	d408      	bmi.n	8008f90 <_ZN27positionEstimatorModelClass4stepEv+0x2318>
 8008f7e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008f82:	ed93 0b00 	vldr	d0, [r3]
 8008f86:	f7fc fdcb 	bl	8005b20 <rtIsNaN>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <_ZN27positionEstimatorModelClass4stepEv+0x231c>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <_ZN27positionEstimatorModelClass4stepEv+0x231e>
 8008f94:	2300      	movs	r3, #0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d006      	beq.n	8008fa8 <_ZN27positionEstimatorModelClass4stepEv+0x2330>
        epsilon = 1.4901161193847656E-8;
 8008f9a:	f04f 0300 	mov.w	r3, #0
 8008f9e:	4c21      	ldr	r4, [pc, #132]	; (8009024 <_ZN27positionEstimatorModelClass4stepEv+0x23ac>)
 8008fa0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8008fa4:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_o[r1] + epsilon;
 8008fa8:	1d3b      	adds	r3, r7, #4
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008fb0:	33fd      	adds	r3, #253	; 0xfd
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	ed93 6b00 	vldr	d6, [r3]
 8008fba:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008fbe:	ed93 7b00 	vldr	d7, [r3]
 8008fc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008fc6:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8008fca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	4413      	add	r3, r2
 8008fd2:	ed83 7b00 	vstr	d7, [r3]
      dHdx_1[r1] = (imvec_0[2] - rtDW.DataStoreReadX_o[2]) / epsilon;
 8008fd6:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8008fda:	ed93 6b04 	vldr	d6, [r3, #16]
 8008fde:	1d3b      	adds	r3, r7, #4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8008fe6:	ed93 7b00 	vldr	d7, [r3]
 8008fea:	ee36 5b47 	vsub.f64	d5, d6, d7
 8008fee:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008ff2:	ed93 6b00 	vldr	d6, [r3]
 8008ff6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008ffa:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8008ffe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	4413      	add	r3, r2
 8009006:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 800900a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800900e:	3301      	adds	r3, #1
 8009010:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009014:	e782      	b.n	8008f1c <_ZN27positionEstimatorModelClass4stepEv+0x22a4>
 8009016:	bf00      	nop
 8009018:	00000000 	.word	0x00000000
 800901c:	3e500000 	.word	0x3e500000
 8009020:	240002b0 	.word	0x240002b0
 8009024:	3e500000 	.word	0x3e500000
    }

    u = 0.0;
 8009028:	f04f 0300 	mov.w	r3, #0
 800902c:	f04f 0400 	mov.w	r4, #0
 8009030:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009034:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009038:	2300      	movs	r3, #0
 800903a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800903e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009042:	2b02      	cmp	r3, #2
 8009044:	dc70      	bgt.n	8009128 <_ZN27positionEstimatorModelClass4stepEv+0x24b0>
      a22 = rtDW.P_g[3 * r1] * dHdx_1[0];
 8009046:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800904a:	4613      	mov	r3, r2
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	4413      	add	r3, r2
 8009050:	1d3a      	adds	r2, r7, #4
 8009052:	6812      	ldr	r2, [r2, #0]
 8009054:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	4413      	add	r3, r2
 800905c:	ed93 6b00 	vldr	d6, [r3]
 8009060:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009064:	ed93 7b00 	vldr	d7, [r3]
 8009068:	ee26 7b07 	vmul.f64	d7, d6, d7
 800906c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009070:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_g[3 * r1 + 1] * dHdx_1[1];
 8009074:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009078:	4613      	mov	r3, r2
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	4413      	add	r3, r2
 800907e:	3301      	adds	r3, #1
 8009080:	1d3a      	adds	r2, r7, #4
 8009082:	6812      	ldr	r2, [r2, #0]
 8009084:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	4413      	add	r3, r2
 800908c:	ed93 6b00 	vldr	d6, [r3]
 8009090:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009094:	ed93 7b02 	vldr	d7, [r3, #8]
 8009098:	ee26 7b07 	vmul.f64	d7, d6, d7
 800909c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80090a0:	ed93 6b00 	vldr	d6, [r3]
 80090a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80090a8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80090ac:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_g[3 * r1 + 2] * dHdx_1[2];
 80090b0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80090b4:	4613      	mov	r3, r2
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	4413      	add	r3, r2
 80090ba:	3302      	adds	r3, #2
 80090bc:	1d3a      	adds	r2, r7, #4
 80090be:	6812      	ldr	r2, [r2, #0]
 80090c0:	f203 1303 	addw	r3, r3, #259	; 0x103
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	4413      	add	r3, r2
 80090c8:	ed93 6b00 	vldr	d6, [r3]
 80090cc:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80090d0:	ed93 7b04 	vldr	d7, [r3, #16]
 80090d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80090d8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80090dc:	ed93 6b00 	vldr	d6, [r3]
 80090e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80090e4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80090e8:	ed83 7b00 	vstr	d7, [r3]
      u += a22 * dHdx_1[r1];
 80090ec:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80090f0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	4413      	add	r3, r2
 80090f8:	ed93 6b00 	vldr	d6, [r3]
 80090fc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009100:	ed93 7b00 	vldr	d7, [r3]
 8009104:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009108:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800910c:	ed93 6b00 	vldr	d6, [r3]
 8009110:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009114:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009118:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 800911c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009120:	3301      	adds	r3, #1
 8009122:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009126:	e78a      	b.n	800903e <_ZN27positionEstimatorModelClass4stepEv+0x23c6>
    }

    epsilon = u + rtP.R1_Value_j;
 8009128:	4bd5      	ldr	r3, [pc, #852]	; (8009480 <_ZN27positionEstimatorModelClass4stepEv+0x2808>)
 800912a:	ed93 7b80 	vldr	d7, [r3, #512]	; 0x200
 800912e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009132:	ed93 6b00 	vldr	d6, [r3]
 8009136:	ee36 7b07 	vadd.f64	d7, d6, d7
 800913a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800913e:	ed83 7b00 	vstr	d7, [r3]
    a22 = rtU.az - rtDW.DataStoreReadX_o[2];
 8009142:	1d3b      	adds	r3, r7, #4
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 800914a:	ed93 6b00 	vldr	d6, [r3]
 800914e:	1d3b      	adds	r3, r7, #4
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8009156:	ed93 7b00 	vldr	d7, [r3]
 800915a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800915e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009162:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 8009166:	2300      	movs	r3, #0
 8009168:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800916c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009170:	2b02      	cmp	r3, #2
 8009172:	f300 8089 	bgt.w	8009288 <_ZN27positionEstimatorModelClass4stepEv+0x2610>
      u = rtDW.P_g[i] * dHdx_1[0];
 8009176:	1d3b      	adds	r3, r7, #4
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800917e:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	4413      	add	r3, r2
 8009186:	ed93 6b00 	vldr	d6, [r3]
 800918a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800918e:	ed93 7b00 	vldr	d7, [r3]
 8009192:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009196:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800919a:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_g[i + 3] * dHdx_1[1];
 800919e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80091a2:	3303      	adds	r3, #3
 80091a4:	1d3a      	adds	r2, r7, #4
 80091a6:	6812      	ldr	r2, [r2, #0]
 80091a8:	f203 1303 	addw	r3, r3, #259	; 0x103
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	4413      	add	r3, r2
 80091b0:	ed93 6b00 	vldr	d6, [r3]
 80091b4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80091b8:	ed93 7b02 	vldr	d7, [r3, #8]
 80091bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80091c0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80091c4:	ed93 6b00 	vldr	d6, [r3]
 80091c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80091cc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80091d0:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_g[i + 6] * dHdx_1[2];
 80091d4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80091d8:	3306      	adds	r3, #6
 80091da:	1d3a      	adds	r2, r7, #4
 80091dc:	6812      	ldr	r2, [r2, #0]
 80091de:	f203 1303 	addw	r3, r3, #259	; 0x103
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	4413      	add	r3, r2
 80091e6:	ed93 6b00 	vldr	d6, [r3]
 80091ea:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80091ee:	ed93 7b04 	vldr	d7, [r3, #16]
 80091f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80091f6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80091fa:	ed93 6b00 	vldr	d6, [r3]
 80091fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009202:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009206:	ed83 7b00 	vstr	d7, [r3]
      u /= epsilon;
 800920a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800920e:	ed93 5b00 	vldr	d5, [r3]
 8009212:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009216:	ed93 6b00 	vldr	d6, [r3]
 800921a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800921e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009222:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_o[i] = u * a22 + rtDW.DataStoreReadX_o[i];
 8009226:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800922a:	ed93 6b00 	vldr	d6, [r3]
 800922e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009232:	ed93 7b00 	vldr	d7, [r3]
 8009236:	ee26 6b07 	vmul.f64	d6, d6, d7
 800923a:	1d3b      	adds	r3, r7, #4
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009242:	33fd      	adds	r3, #253	; 0xfd
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	4413      	add	r3, r2
 8009248:	ed93 7b00 	vldr	d7, [r3]
 800924c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009250:	1d3b      	adds	r3, r7, #4
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009258:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4413      	add	r3, r2
 8009260:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[i] = u;
 8009264:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009268:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	441a      	add	r2, r3
 8009270:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009274:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009278:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800927c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009280:	3301      	adds	r3, #1
 8009282:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009286:	e771      	b.n	800916c <_ZN27positionEstimatorModelClass4stepEv+0x24f4>
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009288:	2300      	movs	r3, #0
 800928a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800928e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009292:	2b02      	cmp	r3, #2
 8009294:	dc52      	bgt.n	800933c <_ZN27positionEstimatorModelClass4stepEv+0x26c4>
      u = dHdx_1[r1];
 8009296:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800929a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4413      	add	r3, r2
 80092a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80092a6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80092aa:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 80092ae:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80092b2:	ed93 6b00 	vldr	d6, [r3]
 80092b6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80092ba:	4613      	mov	r3, r2
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	4413      	add	r3, r2
 80092c0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80092c4:	ed92 7b00 	vldr	d7, [r2]
 80092c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80092cc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	4413      	add	r3, r2
 80092d4:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 80092d8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80092dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80092e0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80092e4:	4613      	mov	r3, r2
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	4413      	add	r3, r2
 80092ea:	3301      	adds	r3, #1
 80092ec:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80092f0:	ed92 7b00 	vldr	d7, [r2]
 80092f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80092f8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80092fc:	00db      	lsls	r3, r3, #3
 80092fe:	4413      	add	r3, r2
 8009300:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 8009304:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009308:	ed93 6b04 	vldr	d6, [r3, #16]
 800930c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009310:	4613      	mov	r3, r2
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	4413      	add	r3, r2
 8009316:	3302      	adds	r3, #2
 8009318:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800931c:	ed92 7b00 	vldr	d7, [r2]
 8009320:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009324:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	4413      	add	r3, r2
 800932c:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009330:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009334:	3301      	adds	r3, #1
 8009336:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800933a:	e7a8      	b.n	800928e <_ZN27positionEstimatorModelClass4stepEv+0x2616>
    }

    for (r1 = 0; r1 < 3; r1++) {
 800933c:	2300      	movs	r3, #0
 800933e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009342:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009346:	2b02      	cmp	r3, #2
 8009348:	f300 809c 	bgt.w	8009484 <_ZN27positionEstimatorModelClass4stepEv+0x280c>
      for (i = 0; i < 3; i++) {
 800934c:	2300      	movs	r3, #0
 800934e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009352:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009356:	2b02      	cmp	r3, #2
 8009358:	f300 808b 	bgt.w	8009472 <_ZN27positionEstimatorModelClass4stepEv+0x27fa>
        u = rtDW.P_g[3 * r1] * imvec_1[i];
 800935c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009360:	4613      	mov	r3, r2
 8009362:	005b      	lsls	r3, r3, #1
 8009364:	4413      	add	r3, r2
 8009366:	1d3a      	adds	r2, r7, #4
 8009368:	6812      	ldr	r2, [r2, #0]
 800936a:	f203 1303 	addw	r3, r3, #259	; 0x103
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	ed93 6b00 	vldr	d6, [r3]
 8009376:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800937a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	ed93 7b00 	vldr	d7, [r3]
 8009386:	ee26 7b07 	vmul.f64	d7, d6, d7
 800938a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800938e:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_g[3 * r1 + 1] * imvec_1[i + 3];
 8009392:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009396:	4613      	mov	r3, r2
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	4413      	add	r3, r2
 800939c:	3301      	adds	r3, #1
 800939e:	1d3a      	adds	r2, r7, #4
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	f203 1303 	addw	r3, r3, #259	; 0x103
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	ed93 6b00 	vldr	d6, [r3]
 80093ae:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093b2:	3303      	adds	r3, #3
 80093b4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	4413      	add	r3, r2
 80093bc:	ed93 7b00 	vldr	d7, [r3]
 80093c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80093c4:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80093c8:	ed93 6b00 	vldr	d6, [r3]
 80093cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80093d0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80093d4:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_g[3 * r1 + 2] * imvec_1[i + 6];
 80093d8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80093dc:	4613      	mov	r3, r2
 80093de:	005b      	lsls	r3, r3, #1
 80093e0:	4413      	add	r3, r2
 80093e2:	3302      	adds	r3, #2
 80093e4:	1d3a      	adds	r2, r7, #4
 80093e6:	6812      	ldr	r2, [r2, #0]
 80093e8:	f203 1303 	addw	r3, r3, #259	; 0x103
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	4413      	add	r3, r2
 80093f0:	ed93 6b00 	vldr	d6, [r3]
 80093f4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093f8:	3306      	adds	r3, #6
 80093fa:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	4413      	add	r3, r2
 8009402:	ed93 7b00 	vldr	d7, [r3]
 8009406:	ee26 7b07 	vmul.f64	d7, d6, d7
 800940a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800940e:	ed93 6b00 	vldr	d6, [r3]
 8009412:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009416:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800941a:	ed83 7b00 	vstr	d7, [r3]
        a[i + 3 * r1] = rtDW.P_g[3 * r1 + i] - u;
 800941e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009422:	4613      	mov	r3, r2
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	441a      	add	r2, r3
 8009428:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800942c:	4413      	add	r3, r2
 800942e:	1d3a      	adds	r2, r7, #4
 8009430:	6812      	ldr	r2, [r2, #0]
 8009432:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	4413      	add	r3, r2
 800943a:	ed93 6b00 	vldr	d6, [r3]
 800943e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009442:	4613      	mov	r3, r2
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	441a      	add	r2, r3
 8009448:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800944c:	4413      	add	r3, r2
 800944e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009452:	ed92 7b00 	vldr	d7, [r2]
 8009456:	ee36 7b47 	vsub.f64	d7, d6, d7
 800945a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	4413      	add	r3, r2
 8009462:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 3; i++) {
 8009466:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800946a:	3301      	adds	r3, #1
 800946c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009470:	e76f      	b.n	8009352 <_ZN27positionEstimatorModelClass4stepEv+0x26da>
    for (r1 = 0; r1 < 3; r1++) {
 8009472:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009476:	3301      	adds	r3, #1
 8009478:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800947c:	e761      	b.n	8009342 <_ZN27positionEstimatorModelClass4stepEv+0x26ca>
 800947e:	bf00      	nop
 8009480:	240002b0 	.word	0x240002b0
      }
    }

    for (i = 0; i < 9; i++) {
 8009484:	2300      	movs	r3, #0
 8009486:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800948a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800948e:	2b08      	cmp	r3, #8
 8009490:	dc2b      	bgt.n	80094ea <_ZN27positionEstimatorModelClass4stepEv+0x2872>
      rtDW.P_g[i] = a[i];
 8009492:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8009496:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	4413      	add	r3, r2
 800949e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094a2:	1d3a      	adds	r2, r7, #4
 80094a4:	6811      	ldr	r1, [r2, #0]
 80094a6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80094aa:	f202 1203 	addw	r2, r2, #259	; 0x103
 80094ae:	00d2      	lsls	r2, r2, #3
 80094b0:	440a      	add	r2, r1
 80094b2:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S4>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_g[i];
 80094b6:	1d3b      	adds	r3, r7, #4
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094be:	f203 1303 	addw	r3, r3, #259	; 0x103
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4413      	add	r3, r2
 80094c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094ca:	1d3a      	adds	r2, r7, #4
 80094cc:	6811      	ldr	r1, [r2, #0]
 80094ce:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80094d2:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 80094d6:	00d2      	lsls	r2, r2, #3
 80094d8:	440a      	add	r2, r1
 80094da:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 80094de:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094e2:	3301      	adds	r3, #1
 80094e4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80094e8:	e7cf      	b.n	800948a <_ZN27positionEstimatorModelClass4stepEv+0x2812>
    }

    // DataStoreWrite: '<S4>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_o[0];
 80094ea:	1d3b      	adds	r3, r7, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094f6:	1d3a      	adds	r2, r7, #4
 80094f8:	6812      	ldr	r2, [r2, #0]
 80094fa:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 80094fe:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_o[1];
 8009502:	1d3b      	adds	r3, r7, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800950a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800950e:	1d3a      	adds	r2, r7, #4
 8009510:	6812      	ldr	r2, [r2, #0]
 8009512:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 8009516:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_o[2];
 800951a:	1d3b      	adds	r3, r7, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8009522:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009526:	1d3a      	adds	r2, r7, #4
 8009528:	6812      	ldr	r2, [r2, #0]
 800952a:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800952e:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Outputs for SubSystem: '<S1>/Correct1'

  // Outputs for Enabled SubSystem: '<S1>/Correct2' incorporates:
  //   EnablePort: '<S5>/Enable'

  if (rtDW.LogicalOperator) {
 8009532:	1d3b      	adds	r3, r7, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f893 3c3f 	ldrb.w	r3, [r3, #3135]	; 0xc3f
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 8370 	beq.w	8009c20 <_ZN27positionEstimatorModelClass4stepEv+0x2fa8>
    // DataStoreRead: '<S5>/Data Store ReadX'
    rtDW.DataStoreReadX_m[0] = rtDW.x[0];
 8009540:	1d3b      	adds	r3, r7, #4
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8009548:	e9d3 3400 	ldrd	r3, r4, [r3]
 800954c:	1d3a      	adds	r2, r7, #4
 800954e:	6812      	ldr	r2, [r2, #0]
 8009550:	f502 62ee 	add.w	r2, r2, #1904	; 0x770
 8009554:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_m[1] = rtDW.x[1];
 8009558:	1d3b      	adds	r3, r7, #4
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8009560:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009564:	1d3a      	adds	r2, r7, #4
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	f502 62ef 	add.w	r2, r2, #1912	; 0x778
 800956c:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_m[2] = rtDW.x[2];
 8009570:	1d3b      	adds	r3, r7, #4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8009578:	e9d3 3400 	ldrd	r3, r4, [r3]
 800957c:	1d3a      	adds	r2, r7, #4
 800957e:	6812      	ldr	r2, [r2, #0]
 8009580:	f502 62f0 	add.w	r2, r2, #1920	; 0x780
 8009584:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S5>/Correct'
    rtDW.blockOrdering_n = rtDW.blockOrdering_k;
 8009588:	1d3b      	adds	r3, r7, #4
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f893 2c48 	ldrb.w	r2, [r3, #3144]	; 0xc48
 8009590:	1d3b      	adds	r3, r7, #4
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47
    blockOrdering = rtDW.blockOrdering_n;
 8009598:	1d3b      	adds	r3, r7, #4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f893 3c47 	ldrb.w	r3, [r3, #3143]	; 0xc47
 80095a0:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_n = blockOrdering;
 80095a4:	1d3b      	adds	r3, r7, #4
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 80095ac:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47
    for (i = 0; i < 9; i++) {
 80095b0:	2300      	movs	r3, #0
 80095b2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80095b6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095ba:	2b08      	cmp	r3, #8
 80095bc:	dc32      	bgt.n	8009624 <_ZN27positionEstimatorModelClass4stepEv+0x29ac>
      // DataStoreRead: '<S5>/Data Store ReadP'
      rtDW.P_c[i] = rtDW.P_i_m[i];
 80095be:	1d3b      	adds	r3, r7, #4
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095c6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	4413      	add	r3, r2
 80095ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095d2:	1d3a      	adds	r2, r7, #4
 80095d4:	6811      	ldr	r1, [r2, #0]
 80095d6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80095da:	32f4      	adds	r2, #244	; 0xf4
 80095dc:	00d2      	lsls	r2, r2, #3
 80095de:	440a      	add	r2, r1
 80095e0:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S5>/Correct'
      u = rtDW.P_c[i];
 80095e4:	1d3b      	adds	r3, r7, #4
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095ec:	33f4      	adds	r3, #244	; 0xf4
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4413      	add	r3, r2
 80095f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095f6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80095fa:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_c[i] = u;
 80095fe:	1d3b      	adds	r3, r7, #4
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009606:	33f4      	adds	r3, #244	; 0xf4
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	441a      	add	r2, r3
 800960c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009610:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009614:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009618:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800961c:	3301      	adds	r3, #1
 800961e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009622:	e7c8      	b.n	80095b6 <_ZN27positionEstimatorModelClass4stepEv+0x293e>
    }

    // MATLAB Function: '<S5>/Correct' incorporates:
    //   Constant: '<S1>/R2'

    for (r1 = 0; r1 < 3; r1++) {
 8009624:	2300      	movs	r3, #0
 8009626:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800962a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800962e:	2b02      	cmp	r3, #2
 8009630:	dc77      	bgt.n	8009722 <_ZN27positionEstimatorModelClass4stepEv+0x2aaa>
      imvec_0[0] = rtDW.DataStoreReadX_m[0];
 8009632:	1d3b      	adds	r3, r7, #4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800963a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800963e:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009642:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_m[r1]);
 8009646:	1d3b      	adds	r3, r7, #4
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800964e:	33ee      	adds	r3, #238	; 0xee
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	4413      	add	r3, r2
 8009654:	ed93 7b00 	vldr	d7, [r3]
 8009658:	eeb0 0b47 	vmov.f64	d0, d7
 800965c:	f7fc f9ad 	bl	80059ba <_ZSt3absd>
 8009660:	eeb0 6b40 	vmov.f64	d6, d0
 8009664:	ed9f 7bc4 	vldr	d7, [pc, #784]	; 8009978 <_ZN27positionEstimatorModelClass4stepEv+0x2d00>
 8009668:	ee26 7b07 	vmul.f64	d7, d6, d7
 800966c:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009670:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8009674:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009678:	ed93 7b00 	vldr	d7, [r3]
 800967c:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8009978 <_ZN27positionEstimatorModelClass4stepEv+0x2d00>
 8009680:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009688:	d408      	bmi.n	800969c <_ZN27positionEstimatorModelClass4stepEv+0x2a24>
 800968a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800968e:	ed93 0b00 	vldr	d0, [r3]
 8009692:	f7fc fa45 	bl	8005b20 <rtIsNaN>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <_ZN27positionEstimatorModelClass4stepEv+0x2a28>
 800969c:	2301      	movs	r3, #1
 800969e:	e000      	b.n	80096a2 <_ZN27positionEstimatorModelClass4stepEv+0x2a2a>
 80096a0:	2300      	movs	r3, #0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d006      	beq.n	80096b4 <_ZN27positionEstimatorModelClass4stepEv+0x2a3c>
        epsilon = 1.4901161193847656E-8;
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	4cb5      	ldr	r4, [pc, #724]	; (8009980 <_ZN27positionEstimatorModelClass4stepEv+0x2d08>)
 80096ac:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80096b0:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_m[r1] + epsilon;
 80096b4:	1d3b      	adds	r3, r7, #4
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80096bc:	33ee      	adds	r3, #238	; 0xee
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	4413      	add	r3, r2
 80096c2:	ed93 6b00 	vldr	d6, [r3]
 80096c6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80096ca:	ed93 7b00 	vldr	d7, [r3]
 80096ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80096d2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80096d6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	4413      	add	r3, r2
 80096de:	ed83 7b00 	vstr	d7, [r3]
      dHdx_1[r1] = (imvec_0[0] - rtDW.DataStoreReadX_m[0]) / epsilon;
 80096e2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80096e6:	ed93 6b00 	vldr	d6, [r3]
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80096f2:	ed93 7b00 	vldr	d7, [r3]
 80096f6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80096fa:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80096fe:	ed93 6b00 	vldr	d6, [r3]
 8009702:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009706:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800970a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	4413      	add	r3, r2
 8009712:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009716:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800971a:	3301      	adds	r3, #1
 800971c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009720:	e783      	b.n	800962a <_ZN27positionEstimatorModelClass4stepEv+0x29b2>
    }

    u = 0.0;
 8009722:	f04f 0300 	mov.w	r3, #0
 8009726:	f04f 0400 	mov.w	r4, #0
 800972a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800972e:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009732:	2300      	movs	r3, #0
 8009734:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009738:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800973c:	2b02      	cmp	r3, #2
 800973e:	dc6d      	bgt.n	800981c <_ZN27positionEstimatorModelClass4stepEv+0x2ba4>
      a22 = rtDW.P_c[3 * r1] * dHdx_1[0];
 8009740:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009744:	4613      	mov	r3, r2
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	4413      	add	r3, r2
 800974a:	1d3a      	adds	r2, r7, #4
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	33f4      	adds	r3, #244	; 0xf4
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	4413      	add	r3, r2
 8009754:	ed93 6b00 	vldr	d6, [r3]
 8009758:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800975c:	ed93 7b00 	vldr	d7, [r3]
 8009760:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009764:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009768:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_c[3 * r1 + 1] * dHdx_1[1];
 800976c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009770:	4613      	mov	r3, r2
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	4413      	add	r3, r2
 8009776:	3301      	adds	r3, #1
 8009778:	1d3a      	adds	r2, r7, #4
 800977a:	6812      	ldr	r2, [r2, #0]
 800977c:	33f4      	adds	r3, #244	; 0xf4
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	4413      	add	r3, r2
 8009782:	ed93 6b00 	vldr	d6, [r3]
 8009786:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800978a:	ed93 7b02 	vldr	d7, [r3, #8]
 800978e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009792:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009796:	ed93 6b00 	vldr	d6, [r3]
 800979a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800979e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80097a2:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_c[3 * r1 + 2] * dHdx_1[2];
 80097a6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80097aa:	4613      	mov	r3, r2
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	4413      	add	r3, r2
 80097b0:	3302      	adds	r3, #2
 80097b2:	1d3a      	adds	r2, r7, #4
 80097b4:	6812      	ldr	r2, [r2, #0]
 80097b6:	33f4      	adds	r3, #244	; 0xf4
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	4413      	add	r3, r2
 80097bc:	ed93 6b00 	vldr	d6, [r3]
 80097c0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80097c4:	ed93 7b04 	vldr	d7, [r3, #16]
 80097c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097cc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80097d0:	ed93 6b00 	vldr	d6, [r3]
 80097d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80097d8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80097dc:	ed83 7b00 	vstr	d7, [r3]
      u += a22 * dHdx_1[r1];
 80097e0:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80097e4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	4413      	add	r3, r2
 80097ec:	ed93 6b00 	vldr	d6, [r3]
 80097f0:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80097f4:	ed93 7b00 	vldr	d7, [r3]
 80097f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097fc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009800:	ed93 6b00 	vldr	d6, [r3]
 8009804:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009808:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800980c:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009810:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009814:	3301      	adds	r3, #1
 8009816:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800981a:	e78d      	b.n	8009738 <_ZN27positionEstimatorModelClass4stepEv+0x2ac0>
    }

    epsilon = u + rtP.R2_Value_g;
 800981c:	4b59      	ldr	r3, [pc, #356]	; (8009984 <_ZN27positionEstimatorModelClass4stepEv+0x2d0c>)
 800981e:	ed93 7b7c 	vldr	d7, [r3, #496]	; 0x1f0
 8009822:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009826:	ed93 6b00 	vldr	d6, [r3]
 800982a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800982e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009832:	ed83 7b00 	vstr	d7, [r3]
    a22 = rtDW.Pz - rtDW.DataStoreReadX_m[0];
 8009836:	1d3b      	adds	r3, r7, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 800983e:	ed93 6b00 	vldr	d6, [r3]
 8009842:	1d3b      	adds	r3, r7, #4
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800984a:	ed93 7b00 	vldr	d7, [r3]
 800984e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009852:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009856:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 800985a:	2300      	movs	r3, #0
 800985c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009860:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009864:	2b02      	cmp	r3, #2
 8009866:	f300 808f 	bgt.w	8009988 <_ZN27positionEstimatorModelClass4stepEv+0x2d10>
      u = rtDW.P_c[i] * dHdx_1[0];
 800986a:	1d3b      	adds	r3, r7, #4
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009872:	33f4      	adds	r3, #244	; 0xf4
 8009874:	00db      	lsls	r3, r3, #3
 8009876:	4413      	add	r3, r2
 8009878:	ed93 6b00 	vldr	d6, [r3]
 800987c:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009880:	ed93 7b00 	vldr	d7, [r3]
 8009884:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009888:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800988c:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_c[i + 3] * dHdx_1[1];
 8009890:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009894:	3303      	adds	r3, #3
 8009896:	1d3a      	adds	r2, r7, #4
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	33f4      	adds	r3, #244	; 0xf4
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	4413      	add	r3, r2
 80098a0:	ed93 6b00 	vldr	d6, [r3]
 80098a4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80098a8:	ed93 7b02 	vldr	d7, [r3, #8]
 80098ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80098b0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098b4:	ed93 6b00 	vldr	d6, [r3]
 80098b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80098bc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098c0:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_c[i + 6] * dHdx_1[2];
 80098c4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80098c8:	3306      	adds	r3, #6
 80098ca:	1d3a      	adds	r2, r7, #4
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	33f4      	adds	r3, #244	; 0xf4
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	4413      	add	r3, r2
 80098d4:	ed93 6b00 	vldr	d6, [r3]
 80098d8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80098dc:	ed93 7b04 	vldr	d7, [r3, #16]
 80098e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80098e4:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098e8:	ed93 6b00 	vldr	d6, [r3]
 80098ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80098f0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098f4:	ed83 7b00 	vstr	d7, [r3]
      u /= epsilon;
 80098f8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80098fc:	ed93 5b00 	vldr	d5, [r3]
 8009900:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009904:	ed93 6b00 	vldr	d6, [r3]
 8009908:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800990c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009910:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_g1[i] = u * a22 + rtDW.DataStoreReadX_m[i];
 8009914:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009918:	ed93 6b00 	vldr	d6, [r3]
 800991c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009920:	ed93 7b00 	vldr	d7, [r3]
 8009924:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009928:	1d3b      	adds	r3, r7, #4
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009930:	33ee      	adds	r3, #238	; 0xee
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	4413      	add	r3, r2
 8009936:	ed93 7b00 	vldr	d7, [r3]
 800993a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800993e:	1d3b      	adds	r3, r7, #4
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009946:	33f1      	adds	r3, #241	; 0xf1
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	4413      	add	r3, r2
 800994c:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[i] = u;
 8009950:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009954:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	441a      	add	r2, r3
 800995c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009960:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009964:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 8009968:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800996c:	3301      	adds	r3, #1
 800996e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009972:	e775      	b.n	8009860 <_ZN27positionEstimatorModelClass4stepEv+0x2be8>
 8009974:	f3af 8000 	nop.w
 8009978:	00000000 	.word	0x00000000
 800997c:	3e500000 	.word	0x3e500000
 8009980:	3e500000 	.word	0x3e500000
 8009984:	240002b0 	.word	0x240002b0
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009988:	2300      	movs	r3, #0
 800998a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800998e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009992:	2b02      	cmp	r3, #2
 8009994:	dc52      	bgt.n	8009a3c <_ZN27positionEstimatorModelClass4stepEv+0x2dc4>
      u = dHdx_1[r1];
 8009996:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800999a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	4413      	add	r3, r2
 80099a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099a6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80099aa:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 80099ae:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80099b2:	ed93 6b00 	vldr	d6, [r3]
 80099b6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80099ba:	4613      	mov	r3, r2
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4413      	add	r3, r2
 80099c0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80099c4:	ed92 7b00 	vldr	d7, [r2]
 80099c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80099cc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	4413      	add	r3, r2
 80099d4:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 80099d8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80099dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80099e0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80099e4:	4613      	mov	r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	4413      	add	r3, r2
 80099ea:	3301      	adds	r3, #1
 80099ec:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80099f0:	ed92 7b00 	vldr	d7, [r2]
 80099f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80099f8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	4413      	add	r3, r2
 8009a00:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 8009a04:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009a08:	ed93 6b04 	vldr	d6, [r3, #16]
 8009a0c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009a10:	4613      	mov	r3, r2
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	4413      	add	r3, r2
 8009a16:	3302      	adds	r3, #2
 8009a18:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009a1c:	ed92 7b00 	vldr	d7, [r2]
 8009a20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a24:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009a28:	00db      	lsls	r3, r3, #3
 8009a2a:	4413      	add	r3, r2
 8009a2c:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009a30:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009a34:	3301      	adds	r3, #1
 8009a36:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009a3a:	e7a8      	b.n	800998e <_ZN27positionEstimatorModelClass4stepEv+0x2d16>
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009a42:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	f300 8095 	bgt.w	8009b76 <_ZN27positionEstimatorModelClass4stepEv+0x2efe>
      for (i = 0; i < 3; i++) {
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009a52:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	f300 8087 	bgt.w	8009b6a <_ZN27positionEstimatorModelClass4stepEv+0x2ef2>
        u = rtDW.P_c[3 * r1] * imvec_1[i];
 8009a5c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009a60:	4613      	mov	r3, r2
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	4413      	add	r3, r2
 8009a66:	1d3a      	adds	r2, r7, #4
 8009a68:	6812      	ldr	r2, [r2, #0]
 8009a6a:	33f4      	adds	r3, #244	; 0xf4
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	4413      	add	r3, r2
 8009a70:	ed93 6b00 	vldr	d6, [r3]
 8009a74:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009a78:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	4413      	add	r3, r2
 8009a80:	ed93 7b00 	vldr	d7, [r3]
 8009a84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a88:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009a8c:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_c[3 * r1 + 1] * imvec_1[i + 3];
 8009a90:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	1d3a      	adds	r2, r7, #4
 8009a9e:	6812      	ldr	r2, [r2, #0]
 8009aa0:	33f4      	adds	r3, #244	; 0xf4
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	4413      	add	r3, r2
 8009aa6:	ed93 6b00 	vldr	d6, [r3]
 8009aaa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009aae:	3303      	adds	r3, #3
 8009ab0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	ed93 7b00 	vldr	d7, [r3]
 8009abc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ac0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009ac4:	ed93 6b00 	vldr	d6, [r3]
 8009ac8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009acc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009ad0:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_c[3 * r1 + 2] * imvec_1[i + 6];
 8009ad4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009ad8:	4613      	mov	r3, r2
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	4413      	add	r3, r2
 8009ade:	3302      	adds	r3, #2
 8009ae0:	1d3a      	adds	r2, r7, #4
 8009ae2:	6812      	ldr	r2, [r2, #0]
 8009ae4:	33f4      	adds	r3, #244	; 0xf4
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	4413      	add	r3, r2
 8009aea:	ed93 6b00 	vldr	d6, [r3]
 8009aee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009af2:	3306      	adds	r3, #6
 8009af4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	4413      	add	r3, r2
 8009afc:	ed93 7b00 	vldr	d7, [r3]
 8009b00:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b04:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009b08:	ed93 6b00 	vldr	d6, [r3]
 8009b0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009b10:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009b14:	ed83 7b00 	vstr	d7, [r3]
        a[i + 3 * r1] = rtDW.P_c[3 * r1 + i] - u;
 8009b18:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	441a      	add	r2, r3
 8009b22:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b26:	4413      	add	r3, r2
 8009b28:	1d3a      	adds	r2, r7, #4
 8009b2a:	6812      	ldr	r2, [r2, #0]
 8009b2c:	33f4      	adds	r3, #244	; 0xf4
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	4413      	add	r3, r2
 8009b32:	ed93 6b00 	vldr	d6, [r3]
 8009b36:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	005b      	lsls	r3, r3, #1
 8009b3e:	441a      	add	r2, r3
 8009b40:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b44:	4413      	add	r3, r2
 8009b46:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009b4a:	ed92 7b00 	vldr	d7, [r2]
 8009b4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009b52:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	4413      	add	r3, r2
 8009b5a:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 3; i++) {
 8009b5e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b62:	3301      	adds	r3, #1
 8009b64:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009b68:	e773      	b.n	8009a52 <_ZN27positionEstimatorModelClass4stepEv+0x2dda>
    for (r1 = 0; r1 < 3; r1++) {
 8009b6a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009b6e:	3301      	adds	r3, #1
 8009b70:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009b74:	e765      	b.n	8009a42 <_ZN27positionEstimatorModelClass4stepEv+0x2dca>
      }
    }

    for (i = 0; i < 9; i++) {
 8009b76:	2300      	movs	r3, #0
 8009b78:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009b7c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	dc29      	bgt.n	8009bd8 <_ZN27positionEstimatorModelClass4stepEv+0x2f60>
      rtDW.P_c[i] = a[i];
 8009b84:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8009b88:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	4413      	add	r3, r2
 8009b90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b94:	1d3a      	adds	r2, r7, #4
 8009b96:	6811      	ldr	r1, [r2, #0]
 8009b98:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009b9c:	32f4      	adds	r2, #244	; 0xf4
 8009b9e:	00d2      	lsls	r2, r2, #3
 8009ba0:	440a      	add	r2, r1
 8009ba2:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S5>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_c[i];
 8009ba6:	1d3b      	adds	r3, r7, #4
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009bae:	33f4      	adds	r3, #244	; 0xf4
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	4413      	add	r3, r2
 8009bb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bb8:	1d3a      	adds	r2, r7, #4
 8009bba:	6811      	ldr	r1, [r2, #0]
 8009bbc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009bc0:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 8009bc4:	00d2      	lsls	r2, r2, #3
 8009bc6:	440a      	add	r2, r1
 8009bc8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009bcc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009bd6:	e7d1      	b.n	8009b7c <_ZN27positionEstimatorModelClass4stepEv+0x2f04>
    }

    // DataStoreWrite: '<S5>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_g1[0];
 8009bd8:	1d3b      	adds	r3, r7, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8009be0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009be4:	1d3a      	adds	r2, r7, #4
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 8009bec:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_g1[1];
 8009bf0:	1d3b      	adds	r3, r7, #4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8009bf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bfc:	1d3a      	adds	r2, r7, #4
 8009bfe:	6812      	ldr	r2, [r2, #0]
 8009c00:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 8009c04:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_g1[2];
 8009c08:	1d3b      	adds	r3, r7, #4
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8009c10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c14:	1d3a      	adds	r2, r7, #4
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 8009c1c:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Outputs for SubSystem: '<S1>/Correct2'

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable3' incorporates:
  //   Inport: '<Root>/BaroFlag'

  rtDW.DataTypeConversion_Enable3 = (rtU.BaroFlag != 0.0);
 8009c20:	1d3b      	adds	r3, r7, #4
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8009c28:	ed93 7b00 	vldr	d7, [r3]
 8009c2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c34:	bf14      	ite	ne
 8009c36:	2301      	movne	r3, #1
 8009c38:	2300      	moveq	r3, #0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	1d3b      	adds	r3, r7, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f883 2c41 	strb.w	r2, [r3, #3137]	; 0xc41

  // Outputs for Enabled SubSystem: '<S1>/Correct3' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (rtDW.DataTypeConversion_Enable3) {
 8009c46:	1d3b      	adds	r3, r7, #4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f893 3c41 	ldrb.w	r3, [r3, #3137]	; 0xc41
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 836e 	beq.w	800a330 <_ZN27positionEstimatorModelClass4stepEv+0x36b8>
    // DataStoreRead: '<S6>/Data Store ReadX'
    rtDW.DataStoreReadX_i[0] = rtDW.x[0];
 8009c54:	1d3b      	adds	r3, r7, #4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8009c5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c60:	1d3a      	adds	r2, r7, #4
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	f502 62df 	add.w	r2, r2, #1784	; 0x6f8
 8009c68:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[1] = rtDW.x[1];
 8009c6c:	1d3b      	adds	r3, r7, #4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8009c74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c78:	1d3a      	adds	r2, r7, #4
 8009c7a:	6812      	ldr	r2, [r2, #0]
 8009c7c:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 8009c80:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[2] = rtDW.x[2];
 8009c84:	1d3b      	adds	r3, r7, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8009c8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c90:	1d3a      	adds	r2, r7, #4
 8009c92:	6812      	ldr	r2, [r2, #0]
 8009c94:	f502 62e1 	add.w	r2, r2, #1800	; 0x708
 8009c98:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S6>/Correct'
    rtDW.blockOrdering_p = rtDW.blockOrdering_n;
 8009c9c:	1d3b      	adds	r3, r7, #4
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f893 2c47 	ldrb.w	r2, [r3, #3143]	; 0xc47
 8009ca4:	1d3b      	adds	r3, r7, #4
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46
    blockOrdering = rtDW.blockOrdering_p;
 8009cac:	1d3b      	adds	r3, r7, #4
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f893 3c46 	ldrb.w	r3, [r3, #3142]	; 0xc46
 8009cb4:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_p = blockOrdering;
 8009cb8:	1d3b      	adds	r3, r7, #4
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8009cc0:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46
    for (i = 0; i < 9; i++) {
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009cca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	dc32      	bgt.n	8009d38 <_ZN27positionEstimatorModelClass4stepEv+0x30c0>
      // DataStoreRead: '<S6>/Data Store ReadP'
      rtDW.P_a[i] = rtDW.P_i_m[i];
 8009cd2:	1d3b      	adds	r3, r7, #4
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009cda:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	4413      	add	r3, r2
 8009ce2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ce6:	1d3a      	adds	r2, r7, #4
 8009ce8:	6811      	ldr	r1, [r2, #0]
 8009cea:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009cee:	32e5      	adds	r2, #229	; 0xe5
 8009cf0:	00d2      	lsls	r2, r2, #3
 8009cf2:	440a      	add	r2, r1
 8009cf4:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S6>/Correct'
      u = rtDW.P_a[i];
 8009cf8:	1d3b      	adds	r3, r7, #4
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d00:	33e5      	adds	r3, #229	; 0xe5
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	4413      	add	r3, r2
 8009d06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d0a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009d0e:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_a[i] = u;
 8009d12:	1d3b      	adds	r3, r7, #4
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d1a:	33e5      	adds	r3, #229	; 0xe5
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	441a      	add	r2, r3
 8009d20:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009d24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d28:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009d2c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d30:	3301      	adds	r3, #1
 8009d32:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009d36:	e7c8      	b.n	8009cca <_ZN27positionEstimatorModelClass4stepEv+0x3052>
    }

    // MATLAB Function: '<S6>/Correct' incorporates:
    //   Constant: '<S1>/R3'

    for (r1 = 0; r1 < 3; r1++) {
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009d3e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	dc77      	bgt.n	8009e36 <_ZN27positionEstimatorModelClass4stepEv+0x31be>
      imvec_0[0] = rtDW.DataStoreReadX_i[0];
 8009d46:	1d3b      	adds	r3, r7, #4
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8009d4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d52:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009d56:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_i[r1]);
 8009d5a:	1d3b      	adds	r3, r7, #4
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009d62:	33df      	adds	r3, #223	; 0xdf
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	4413      	add	r3, r2
 8009d68:	ed93 7b00 	vldr	d7, [r3]
 8009d6c:	eeb0 0b47 	vmov.f64	d0, d7
 8009d70:	f7fb fe23 	bl	80059ba <_ZSt3absd>
 8009d74:	eeb0 6b40 	vmov.f64	d6, d0
 8009d78:	ed9f 7bc3 	vldr	d7, [pc, #780]	; 800a088 <_ZN27positionEstimatorModelClass4stepEv+0x3410>
 8009d7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d80:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009d84:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8009d88:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009d8c:	ed93 7b00 	vldr	d7, [r3]
 8009d90:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 800a088 <_ZN27positionEstimatorModelClass4stepEv+0x3410>
 8009d94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9c:	d408      	bmi.n	8009db0 <_ZN27positionEstimatorModelClass4stepEv+0x3138>
 8009d9e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009da2:	ed93 0b00 	vldr	d0, [r3]
 8009da6:	f7fb febb 	bl	8005b20 <rtIsNaN>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <_ZN27positionEstimatorModelClass4stepEv+0x313c>
 8009db0:	2301      	movs	r3, #1
 8009db2:	e000      	b.n	8009db6 <_ZN27positionEstimatorModelClass4stepEv+0x313e>
 8009db4:	2300      	movs	r3, #0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d006      	beq.n	8009dc8 <_ZN27positionEstimatorModelClass4stepEv+0x3150>
        epsilon = 1.4901161193847656E-8;
 8009dba:	f04f 0300 	mov.w	r3, #0
 8009dbe:	4cb4      	ldr	r4, [pc, #720]	; (800a090 <_ZN27positionEstimatorModelClass4stepEv+0x3418>)
 8009dc0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8009dc4:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_i[r1] + epsilon;
 8009dc8:	1d3b      	adds	r3, r7, #4
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009dd0:	33df      	adds	r3, #223	; 0xdf
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	ed93 6b00 	vldr	d6, [r3]
 8009dda:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009dde:	ed93 7b00 	vldr	d7, [r3]
 8009de2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009de6:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009dea:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	4413      	add	r3, r2
 8009df2:	ed83 7b00 	vstr	d7, [r3]
      dHdx_1[r1] = (imvec_0[0] - rtDW.DataStoreReadX_i[0]) / epsilon;
 8009df6:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009dfa:	ed93 6b00 	vldr	d6, [r3]
 8009dfe:	1d3b      	adds	r3, r7, #4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8009e06:	ed93 7b00 	vldr	d7, [r3]
 8009e0a:	ee36 5b47 	vsub.f64	d5, d6, d7
 8009e0e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009e12:	ed93 6b00 	vldr	d6, [r3]
 8009e16:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009e1a:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8009e1e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009e22:	00db      	lsls	r3, r3, #3
 8009e24:	4413      	add	r3, r2
 8009e26:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009e2a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009e2e:	3301      	adds	r3, #1
 8009e30:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009e34:	e783      	b.n	8009d3e <_ZN27positionEstimatorModelClass4stepEv+0x30c6>
    }

    u = 0.0;
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	f04f 0400 	mov.w	r4, #0
 8009e3e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009e42:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009e46:	2300      	movs	r3, #0
 8009e48:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009e4c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	dc6d      	bgt.n	8009f30 <_ZN27positionEstimatorModelClass4stepEv+0x32b8>
      a22 = rtDW.P_a[3 * r1] * dHdx_1[0];
 8009e54:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009e58:	4613      	mov	r3, r2
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	4413      	add	r3, r2
 8009e5e:	1d3a      	adds	r2, r7, #4
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	33e5      	adds	r3, #229	; 0xe5
 8009e64:	00db      	lsls	r3, r3, #3
 8009e66:	4413      	add	r3, r2
 8009e68:	ed93 6b00 	vldr	d6, [r3]
 8009e6c:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009e70:	ed93 7b00 	vldr	d7, [r3]
 8009e74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009e78:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009e7c:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_a[3 * r1 + 1] * dHdx_1[1];
 8009e80:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009e84:	4613      	mov	r3, r2
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	4413      	add	r3, r2
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	1d3a      	adds	r2, r7, #4
 8009e8e:	6812      	ldr	r2, [r2, #0]
 8009e90:	33e5      	adds	r3, #229	; 0xe5
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	4413      	add	r3, r2
 8009e96:	ed93 6b00 	vldr	d6, [r3]
 8009e9a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009e9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ea2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ea6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009eaa:	ed93 6b00 	vldr	d6, [r3]
 8009eae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009eb2:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009eb6:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_a[3 * r1 + 2] * dHdx_1[2];
 8009eba:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4413      	add	r3, r2
 8009ec4:	3302      	adds	r3, #2
 8009ec6:	1d3a      	adds	r2, r7, #4
 8009ec8:	6812      	ldr	r2, [r2, #0]
 8009eca:	33e5      	adds	r3, #229	; 0xe5
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	4413      	add	r3, r2
 8009ed0:	ed93 6b00 	vldr	d6, [r3]
 8009ed4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009ed8:	ed93 7b04 	vldr	d7, [r3, #16]
 8009edc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ee0:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009ee4:	ed93 6b00 	vldr	d6, [r3]
 8009ee8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009eec:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009ef0:	ed83 7b00 	vstr	d7, [r3]
      u += a22 * dHdx_1[r1];
 8009ef4:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8009ef8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009efc:	00db      	lsls	r3, r3, #3
 8009efe:	4413      	add	r3, r2
 8009f00:	ed93 6b00 	vldr	d6, [r3]
 8009f04:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009f08:	ed93 7b00 	vldr	d7, [r3]
 8009f0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009f10:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009f14:	ed93 6b00 	vldr	d6, [r3]
 8009f18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f1c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009f20:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009f24:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009f28:	3301      	adds	r3, #1
 8009f2a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009f2e:	e78d      	b.n	8009e4c <_ZN27positionEstimatorModelClass4stepEv+0x31d4>
    }

    epsilon = u + rtP.R3_Value;
 8009f30:	4b58      	ldr	r3, [pc, #352]	; (800a094 <_ZN27positionEstimatorModelClass4stepEv+0x341c>)
 8009f32:	ed93 7b78 	vldr	d7, [r3, #480]	; 0x1e0
 8009f36:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009f3a:	ed93 6b00 	vldr	d6, [r3]
 8009f3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f42:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009f46:	ed83 7b00 	vstr	d7, [r3]
    a22 = rtDW.NED_convert - rtDW.DataStoreReadX_i[0];
 8009f4a:	1d3b      	adds	r3, r7, #4
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8009f52:	ed93 6b00 	vldr	d6, [r3]
 8009f56:	1d3b      	adds	r3, r7, #4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8009f5e:	ed93 7b00 	vldr	d7, [r3]
 8009f62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009f66:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009f6a:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009f74:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	f300 808d 	bgt.w	800a098 <_ZN27positionEstimatorModelClass4stepEv+0x3420>
      u = rtDW.P_a[i] * dHdx_1[0];
 8009f7e:	1d3b      	adds	r3, r7, #4
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009f86:	33e5      	adds	r3, #229	; 0xe5
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	4413      	add	r3, r2
 8009f8c:	ed93 6b00 	vldr	d6, [r3]
 8009f90:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009f94:	ed93 7b00 	vldr	d7, [r3]
 8009f98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009f9c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009fa0:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_a[i + 3] * dHdx_1[1];
 8009fa4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009fa8:	3303      	adds	r3, #3
 8009faa:	1d3a      	adds	r2, r7, #4
 8009fac:	6812      	ldr	r2, [r2, #0]
 8009fae:	33e5      	adds	r3, #229	; 0xe5
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	ed93 6b00 	vldr	d6, [r3]
 8009fb8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009fbc:	ed93 7b02 	vldr	d7, [r3, #8]
 8009fc0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009fc4:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009fc8:	ed93 6b00 	vldr	d6, [r3]
 8009fcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009fd0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009fd4:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_a[i + 6] * dHdx_1[2];
 8009fd8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009fdc:	3306      	adds	r3, #6
 8009fde:	1d3a      	adds	r2, r7, #4
 8009fe0:	6812      	ldr	r2, [r2, #0]
 8009fe2:	33e5      	adds	r3, #229	; 0xe5
 8009fe4:	00db      	lsls	r3, r3, #3
 8009fe6:	4413      	add	r3, r2
 8009fe8:	ed93 6b00 	vldr	d6, [r3]
 8009fec:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009ff0:	ed93 7b04 	vldr	d7, [r3, #16]
 8009ff4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ff8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009ffc:	ed93 6b00 	vldr	d6, [r3]
 800a000:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a004:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a008:	ed83 7b00 	vstr	d7, [r3]
      u /= epsilon;
 800a00c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a010:	ed93 5b00 	vldr	d5, [r3]
 800a014:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800a018:	ed93 6b00 	vldr	d6, [r3]
 800a01c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a020:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a024:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_p[i] = u * a22 + rtDW.DataStoreReadX_i[i];
 800a028:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a02c:	ed93 6b00 	vldr	d6, [r3]
 800a030:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a034:	ed93 7b00 	vldr	d7, [r3]
 800a038:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a03c:	1d3b      	adds	r3, r7, #4
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a044:	33df      	adds	r3, #223	; 0xdf
 800a046:	00db      	lsls	r3, r3, #3
 800a048:	4413      	add	r3, r2
 800a04a:	ed93 7b00 	vldr	d7, [r3]
 800a04e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a052:	1d3b      	adds	r3, r7, #4
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a05a:	33e2      	adds	r3, #226	; 0xe2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	4413      	add	r3, r2
 800a060:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[i] = u;
 800a064:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800a068:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	441a      	add	r2, r3
 800a070:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a074:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a078:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a07c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a080:	3301      	adds	r3, #1
 800a082:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a086:	e775      	b.n	8009f74 <_ZN27positionEstimatorModelClass4stepEv+0x32fc>
 800a088:	00000000 	.word	0x00000000
 800a08c:	3e500000 	.word	0x3e500000
 800a090:	3e500000 	.word	0x3e500000
 800a094:	240002b0 	.word	0x240002b0
    }

    for (r1 = 0; r1 < 3; r1++) {
 800a098:	2300      	movs	r3, #0
 800a09a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a09e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	dc52      	bgt.n	800a14c <_ZN27positionEstimatorModelClass4stepEv+0x34d4>
      u = dHdx_1[r1];
 800a0a6:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800a0aa:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0b6:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a0ba:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 800a0be:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a0c2:	ed93 6b00 	vldr	d6, [r3]
 800a0c6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a0d4:	ed92 7b00 	vldr	d7, [r2]
 800a0d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a0dc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a0e0:	00db      	lsls	r3, r3, #3
 800a0e2:	4413      	add	r3, r2
 800a0e4:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 800a0e8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a0ec:	ed93 6b02 	vldr	d6, [r3, #8]
 800a0f0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a100:	ed92 7b00 	vldr	d7, [r2]
 800a104:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a108:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	4413      	add	r3, r2
 800a110:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 800a114:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a118:	ed93 6b04 	vldr	d6, [r3, #16]
 800a11c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a120:	4613      	mov	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	4413      	add	r3, r2
 800a126:	3302      	adds	r3, #2
 800a128:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a12c:	ed92 7b00 	vldr	d7, [r2]
 800a130:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a134:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a138:	00db      	lsls	r3, r3, #3
 800a13a:	4413      	add	r3, r2
 800a13c:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 800a140:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a144:	3301      	adds	r3, #1
 800a146:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a14a:	e7a8      	b.n	800a09e <_ZN27positionEstimatorModelClass4stepEv+0x3426>
    }

    for (r1 = 0; r1 < 3; r1++) {
 800a14c:	2300      	movs	r3, #0
 800a14e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a152:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a156:	2b02      	cmp	r3, #2
 800a158:	f300 8095 	bgt.w	800a286 <_ZN27positionEstimatorModelClass4stepEv+0x360e>
      for (i = 0; i < 3; i++) {
 800a15c:	2300      	movs	r3, #0
 800a15e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a162:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a166:	2b02      	cmp	r3, #2
 800a168:	f300 8087 	bgt.w	800a27a <_ZN27positionEstimatorModelClass4stepEv+0x3602>
        u = rtDW.P_a[3 * r1] * imvec_1[i];
 800a16c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a170:	4613      	mov	r3, r2
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	4413      	add	r3, r2
 800a176:	1d3a      	adds	r2, r7, #4
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	33e5      	adds	r3, #229	; 0xe5
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	4413      	add	r3, r2
 800a180:	ed93 6b00 	vldr	d6, [r3]
 800a184:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a188:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a18c:	00db      	lsls	r3, r3, #3
 800a18e:	4413      	add	r3, r2
 800a190:	ed93 7b00 	vldr	d7, [r3]
 800a194:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a198:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a19c:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_a[3 * r1 + 1] * imvec_1[i + 3];
 800a1a0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	4413      	add	r3, r2
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	1d3a      	adds	r2, r7, #4
 800a1ae:	6812      	ldr	r2, [r2, #0]
 800a1b0:	33e5      	adds	r3, #229	; 0xe5
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	4413      	add	r3, r2
 800a1b6:	ed93 6b00 	vldr	d6, [r3]
 800a1ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a1be:	3303      	adds	r3, #3
 800a1c0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	4413      	add	r3, r2
 800a1c8:	ed93 7b00 	vldr	d7, [r3]
 800a1cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a1d0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a1d4:	ed93 6b00 	vldr	d6, [r3]
 800a1d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a1dc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a1e0:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_a[3 * r1 + 2] * imvec_1[i + 6];
 800a1e4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	4413      	add	r3, r2
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	1d3a      	adds	r2, r7, #4
 800a1f2:	6812      	ldr	r2, [r2, #0]
 800a1f4:	33e5      	adds	r3, #229	; 0xe5
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	ed93 6b00 	vldr	d6, [r3]
 800a1fe:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a202:	3306      	adds	r3, #6
 800a204:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	4413      	add	r3, r2
 800a20c:	ed93 7b00 	vldr	d7, [r3]
 800a210:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a214:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a218:	ed93 6b00 	vldr	d6, [r3]
 800a21c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a220:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a224:	ed83 7b00 	vstr	d7, [r3]
        a[i + 3 * r1] = rtDW.P_a[3 * r1 + i] - u;
 800a228:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a22c:	4613      	mov	r3, r2
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	441a      	add	r2, r3
 800a232:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a236:	4413      	add	r3, r2
 800a238:	1d3a      	adds	r2, r7, #4
 800a23a:	6812      	ldr	r2, [r2, #0]
 800a23c:	33e5      	adds	r3, #229	; 0xe5
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	4413      	add	r3, r2
 800a242:	ed93 6b00 	vldr	d6, [r3]
 800a246:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a24a:	4613      	mov	r3, r2
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	441a      	add	r2, r3
 800a250:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a254:	4413      	add	r3, r2
 800a256:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a25a:	ed92 7b00 	vldr	d7, [r2]
 800a25e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a262:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	4413      	add	r3, r2
 800a26a:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 3; i++) {
 800a26e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a272:	3301      	adds	r3, #1
 800a274:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a278:	e773      	b.n	800a162 <_ZN27positionEstimatorModelClass4stepEv+0x34ea>
    for (r1 = 0; r1 < 3; r1++) {
 800a27a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a27e:	3301      	adds	r3, #1
 800a280:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a284:	e765      	b.n	800a152 <_ZN27positionEstimatorModelClass4stepEv+0x34da>
      }
    }

    for (i = 0; i < 9; i++) {
 800a286:	2300      	movs	r3, #0
 800a288:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a28c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a290:	2b08      	cmp	r3, #8
 800a292:	dc29      	bgt.n	800a2e8 <_ZN27positionEstimatorModelClass4stepEv+0x3670>
      rtDW.P_a[i] = a[i];
 800a294:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a298:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	4413      	add	r3, r2
 800a2a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2a4:	1d3a      	adds	r2, r7, #4
 800a2a6:	6811      	ldr	r1, [r2, #0]
 800a2a8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a2ac:	32e5      	adds	r2, #229	; 0xe5
 800a2ae:	00d2      	lsls	r2, r2, #3
 800a2b0:	440a      	add	r2, r1
 800a2b2:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S6>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_a[i];
 800a2b6:	1d3b      	adds	r3, r7, #4
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a2be:	33e5      	adds	r3, #229	; 0xe5
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	4413      	add	r3, r2
 800a2c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2c8:	1d3a      	adds	r2, r7, #4
 800a2ca:	6811      	ldr	r1, [r2, #0]
 800a2cc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a2d0:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800a2d4:	00d2      	lsls	r2, r2, #3
 800a2d6:	440a      	add	r2, r1
 800a2d8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800a2dc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a2e6:	e7d1      	b.n	800a28c <_ZN27positionEstimatorModelClass4stepEv+0x3614>
    }

    // DataStoreWrite: '<S6>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_p[0];
 800a2e8:	1d3b      	adds	r3, r7, #4
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800a2f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2f4:	1d3a      	adds	r2, r7, #4
 800a2f6:	6812      	ldr	r2, [r2, #0]
 800a2f8:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800a2fc:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_p[1];
 800a300:	1d3b      	adds	r3, r7, #4
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f503 63e3 	add.w	r3, r3, #1816	; 0x718
 800a308:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a30c:	1d3a      	adds	r2, r7, #4
 800a30e:	6812      	ldr	r2, [r2, #0]
 800a310:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800a314:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_p[2];
 800a318:	1d3b      	adds	r3, r7, #4
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800a320:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a324:	1d3a      	adds	r2, r7, #4
 800a326:	6812      	ldr	r2, [r2, #0]
 800a328:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800a32c:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Correct3'

  // Outputs for Atomic SubSystem: '<S1>/Output'
  // DataStoreRead: '<S7>/Data Store Read'
  rtDW.DataStoreRead_f[0] = rtDW.x[0];
 800a330:	1d3b      	adds	r3, r7, #4
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800a338:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a33c:	1d3a      	adds	r2, r7, #4
 800a33e:	6812      	ldr	r2, [r2, #0]
 800a340:	f502 62d3 	add.w	r2, r2, #1688	; 0x698
 800a344:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[1] = rtDW.x[1];
 800a348:	1d3b      	adds	r3, r7, #4
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800a350:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a354:	1d3a      	adds	r2, r7, #4
 800a356:	6812      	ldr	r2, [r2, #0]
 800a358:	f502 62d4 	add.w	r2, r2, #1696	; 0x6a0
 800a35c:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[2] = rtDW.x[2];
 800a360:	1d3b      	adds	r3, r7, #4
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800a368:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a36c:	1d3a      	adds	r2, r7, #4
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	f502 62d5 	add.w	r2, r2, #1704	; 0x6a8
 800a374:	e9c2 3400 	strd	r3, r4, [r2]

  // Inport: '<S7>/uBlockOrdering'
  rtDW.uBlockOrdering_b = rtDW.blockOrdering_p;
 800a378:	1d3b      	adds	r3, r7, #4
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f893 2c46 	ldrb.w	r2, [r3, #3142]	; 0xc46
 800a380:	1d3b      	adds	r3, r7, #4
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45

  // End of Outputs for SubSystem: '<S1>/Output'

  // Outport: '<Root>/estiZ'
  rtY.estiZ = rtDW.DataStoreRead_f[0];
 800a388:	1d3b      	adds	r3, r7, #4
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800a390:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a394:	1d3a      	adds	r2, r7, #4
 800a396:	6812      	ldr	r2, [r2, #0]
 800a398:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800a39c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVX'
  rtY.estiVX = rtDW.DataStoreRead[2];
 800a3a0:	1d3b      	adds	r3, r7, #4
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	e9d3 346c 	ldrd	r3, r4, [r3, #432]	; 0x1b0
 800a3a8:	1d3a      	adds	r2, r7, #4
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	f602 42e8 	addw	r2, r2, #3304	; 0xce8
 800a3b0:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVY'
  rtY.estiVY = rtDW.DataStoreRead[3];
 800a3b4:	1d3b      	adds	r3, r7, #4
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	e9d3 346e 	ldrd	r3, r4, [r3, #440]	; 0x1b8
 800a3bc:	1d3a      	adds	r2, r7, #4
 800a3be:	6812      	ldr	r2, [r2, #0]
 800a3c0:	f502 624f 	add.w	r2, r2, #3312	; 0xcf0
 800a3c4:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVZ'
  rtY.estiVZ = rtDW.DataStoreRead_f[1];
 800a3c8:	1d3b      	adds	r3, r7, #4
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800a3d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3d4:	1d3a      	adds	r2, r7, #4
 800a3d6:	6812      	ldr	r2, [r2, #0]
 800a3d8:	f602 42f8 	addw	r2, r2, #3320	; 0xcf8
 800a3dc:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAX'
  rtY.estiAX = rtDW.DataStoreRead[4];
 800a3e0:	1d3b      	adds	r3, r7, #4
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	e9d3 3470 	ldrd	r3, r4, [r3, #448]	; 0x1c0
 800a3e8:	1d3a      	adds	r2, r7, #4
 800a3ea:	6812      	ldr	r2, [r2, #0]
 800a3ec:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800a3f0:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAY'
  rtY.estiAY = rtDW.DataStoreRead[5];
 800a3f4:	1d3b      	adds	r3, r7, #4
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	e9d3 3472 	ldrd	r3, r4, [r3, #456]	; 0x1c8
 800a3fc:	1d3a      	adds	r2, r7, #4
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	f602 5208 	addw	r2, r2, #3336	; 0xd08
 800a404:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAZ'
  rtY.estiAZ = rtDW.DataStoreRead_f[2];
 800a408:	1d3b      	adds	r3, r7, #4
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 800a410:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a414:	1d3a      	adds	r2, r7, #4
 800a416:	6812      	ldr	r2, [r2, #0]
 800a418:	f502 6251 	add.w	r2, r2, #3344	; 0xd10
 800a41c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outputs for Atomic SubSystem: '<S1>/Predict'
  // DataStoreRead: '<S8>/Data Store ReadX'
  rtDW.DataStoreReadX_g[0] = rtDW.x[0];
 800a420:	1d3b      	adds	r3, r7, #4
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800a428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a42c:	1d3a      	adds	r2, r7, #4
 800a42e:	6812      	ldr	r2, [r2, #0]
 800a430:	f502 62c4 	add.w	r2, r2, #1568	; 0x620
 800a434:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[1] = rtDW.x[1];
 800a438:	1d3b      	adds	r3, r7, #4
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 800a440:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a444:	1d3a      	adds	r2, r7, #4
 800a446:	6812      	ldr	r2, [r2, #0]
 800a448:	f502 62c5 	add.w	r2, r2, #1576	; 0x628
 800a44c:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[2] = rtDW.x[2];
 800a450:	1d3b      	adds	r3, r7, #4
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800a458:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a45c:	1d3a      	adds	r2, r7, #4
 800a45e:	6812      	ldr	r2, [r2, #0]
 800a460:	f502 62c6 	add.w	r2, r2, #1584	; 0x630
 800a464:	e9c2 3400 	strd	r3, r4, [r2]

  // Outputs for Atomic SubSystem: '<S1>/Output'
  for (i = 0; i < 9; i++) {
 800a468:	2300      	movs	r3, #0
 800a46a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a46e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a472:	2b08      	cmp	r3, #8
 800a474:	dc45      	bgt.n	800a502 <_ZN27positionEstimatorModelClass4stepEv+0x388a>
    // DataStoreRead: '<S7>/Data Store Read1'
    rtDW.DataStoreRead1_h[i] = rtDW.P_i_m[i];
 800a476:	1d3b      	adds	r3, r7, #4
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a47e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	4413      	add	r3, r2
 800a486:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a48a:	1d3a      	adds	r2, r7, #4
 800a48c:	6811      	ldr	r1, [r2, #0]
 800a48e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a492:	32d6      	adds	r2, #214	; 0xd6
 800a494:	00d2      	lsls	r2, r2, #3
 800a496:	440a      	add	r2, r1
 800a498:	e9c2 3400 	strd	r3, r4, [r2]

    // DataStoreRead: '<S8>/Data Store ReadP'
    rtDW.P_i[i] = rtDW.P_i_m[i];
 800a49c:	1d3b      	adds	r3, r7, #4
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	4413      	add	r3, r2
 800a4ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4b0:	1d3a      	adds	r2, r7, #4
 800a4b2:	6811      	ldr	r1, [r2, #0]
 800a4b4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a4b8:	32ca      	adds	r2, #202	; 0xca
 800a4ba:	00d2      	lsls	r2, r2, #3
 800a4bc:	440a      	add	r2, r1
 800a4be:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S8>/Predict'
    u = rtDW.P_i[i];
 800a4c2:	1d3b      	adds	r3, r7, #4
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4ca:	33ca      	adds	r3, #202	; 0xca
 800a4cc:	00db      	lsls	r3, r3, #3
 800a4ce:	4413      	add	r3, r2
 800a4d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4d4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a4d8:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_i[i] = u;
 800a4dc:	1d3b      	adds	r3, r7, #4
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4e4:	33ca      	adds	r3, #202	; 0xca
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	441a      	add	r2, r3
 800a4ea:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a4ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4f2:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800a4f6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a500:	e7b5      	b.n	800a46e <_ZN27positionEstimatorModelClass4stepEv+0x37f6>
  // End of Outputs for SubSystem: '<S1>/Output'

  // MATLAB Function: '<S8>/Predict' incorporates:
  //   Constant: '<S1>/Q'

  for (r1 = 0; r1 < 3; r1++) {
 800a502:	2300      	movs	r3, #0
 800a504:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a508:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	f300 8239 	bgt.w	800a984 <_ZN27positionEstimatorModelClass4stepEv+0x3d0c>
    u = 0.0;
 800a512:	f04f 0300 	mov.w	r3, #0
 800a516:	f04f 0400 	mov.w	r4, #0
 800a51a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a51e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a522:	2300      	movs	r3, #0
 800a524:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a528:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	f300 8109 	bgt.w	800a744 <_ZN27positionEstimatorModelClass4stepEv+0x3acc>
      u += a_1[3 * i + r1] * rtDW.DataStoreReadX_g[i];
 800a532:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a536:	4613      	mov	r3, r2
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	441a      	add	r2, r3
 800a53c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a540:	4413      	add	r3, r2
 800a542:	4a7f      	ldr	r2, [pc, #508]	; (800a740 <_ZN27positionEstimatorModelClass4stepEv+0x3ac8>)
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	4413      	add	r3, r2
 800a548:	ed93 6b00 	vldr	d6, [r3]
 800a54c:	1d3b      	adds	r3, r7, #4
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a554:	33c4      	adds	r3, #196	; 0xc4
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	4413      	add	r3, r2
 800a55a:	ed93 7b00 	vldr	d7, [r3]
 800a55e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a562:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a566:	ed93 6b00 	vldr	d6, [r3]
 800a56a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a56e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a572:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = 0.0;
 800a576:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a57a:	4613      	mov	r3, r2
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	441a      	add	r2, r3
 800a580:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a584:	4413      	add	r3, r2
 800a586:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	441a      	add	r2, r3
 800a58e:	f04f 0300 	mov.w	r3, #0
 800a592:	f04f 0400 	mov.w	r4, #0
 800a596:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800a59a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a59e:	4613      	mov	r3, r2
 800a5a0:	005b      	lsls	r3, r3, #1
 800a5a2:	441a      	add	r2, r3
 800a5a4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	4413      	add	r3, r2
 800a5b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5b6:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a5ba:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i] * a_1[r1];
 800a5be:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	4413      	add	r3, r2
 800a5c8:	1d3a      	adds	r2, r7, #4
 800a5ca:	6812      	ldr	r2, [r2, #0]
 800a5cc:	33ca      	adds	r3, #202	; 0xca
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	4413      	add	r3, r2
 800a5d2:	ed93 6b00 	vldr	d6, [r3]
 800a5d6:	4a5a      	ldr	r2, [pc, #360]	; (800a740 <_ZN27positionEstimatorModelClass4stepEv+0x3ac8>)
 800a5d8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	4413      	add	r3, r2
 800a5e0:	ed93 7b00 	vldr	d7, [r3]
 800a5e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a5e8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a5ec:	ed93 6b00 	vldr	d6, [r3]
 800a5f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a5f4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a5f8:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = a22;
 800a5fc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a600:	4613      	mov	r3, r2
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	441a      	add	r2, r3
 800a606:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a60a:	4413      	add	r3, r2
 800a60c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	441a      	add	r2, r3
 800a614:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a618:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a61c:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800a620:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a624:	4613      	mov	r3, r2
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	441a      	add	r2, r3
 800a62a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a62e:	4413      	add	r3, r2
 800a630:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	4413      	add	r3, r2
 800a638:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a63c:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a640:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 1] * a_1[r1 + 3];
 800a644:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a648:	4613      	mov	r3, r2
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	4413      	add	r3, r2
 800a64e:	3301      	adds	r3, #1
 800a650:	1d3a      	adds	r2, r7, #4
 800a652:	6812      	ldr	r2, [r2, #0]
 800a654:	33ca      	adds	r3, #202	; 0xca
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	4413      	add	r3, r2
 800a65a:	ed93 6b00 	vldr	d6, [r3]
 800a65e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a662:	3303      	adds	r3, #3
 800a664:	4a36      	ldr	r2, [pc, #216]	; (800a740 <_ZN27positionEstimatorModelClass4stepEv+0x3ac8>)
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	4413      	add	r3, r2
 800a66a:	ed93 7b00 	vldr	d7, [r3]
 800a66e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a672:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a676:	ed93 6b00 	vldr	d6, [r3]
 800a67a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a67e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a682:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = a22;
 800a686:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a68a:	4613      	mov	r3, r2
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	441a      	add	r2, r3
 800a690:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a694:	4413      	add	r3, r2
 800a696:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	441a      	add	r2, r3
 800a69e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a6a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6a6:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800a6aa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	441a      	add	r2, r3
 800a6b4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a6be:	00db      	lsls	r3, r3, #3
 800a6c0:	4413      	add	r3, r2
 800a6c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6c6:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a6ca:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 2] * a_1[r1 + 6];
 800a6ce:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	4413      	add	r3, r2
 800a6d8:	3302      	adds	r3, #2
 800a6da:	1d3a      	adds	r2, r7, #4
 800a6dc:	6812      	ldr	r2, [r2, #0]
 800a6de:	33ca      	adds	r3, #202	; 0xca
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	4413      	add	r3, r2
 800a6e4:	ed93 6b00 	vldr	d6, [r3]
 800a6e8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a6ec:	3306      	adds	r3, #6
 800a6ee:	4a14      	ldr	r2, [pc, #80]	; (800a740 <_ZN27positionEstimatorModelClass4stepEv+0x3ac8>)
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	4413      	add	r3, r2
 800a6f4:	ed93 7b00 	vldr	d7, [r3]
 800a6f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a6fc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a700:	ed93 6b00 	vldr	d6, [r3]
 800a704:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a708:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a70c:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = a22;
 800a710:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a714:	4613      	mov	r3, r2
 800a716:	005b      	lsls	r3, r3, #1
 800a718:	441a      	add	r2, r3
 800a71a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a71e:	4413      	add	r3, r2
 800a720:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	441a      	add	r2, r3
 800a728:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a72c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a730:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a734:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a738:	3301      	adds	r3, #1
 800a73a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a73e:	e6f3      	b.n	800a528 <_ZN27positionEstimatorModelClass4stepEv+0x38b0>
 800a740:	0802e5a0 	.word	0x0802e5a0
    }

    rtDW.xNew_k[r1] = u;
 800a744:	1d3b      	adds	r3, r7, #4
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a74c:	33c7      	adds	r3, #199	; 0xc7
 800a74e:	00db      	lsls	r3, r3, #3
 800a750:	441a      	add	r2, r3
 800a752:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a756:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a75a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a75e:	2300      	movs	r3, #0
 800a760:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a764:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a768:	2b02      	cmp	r3, #2
 800a76a:	f300 8105 	bgt.w	800a978 <_ZN27positionEstimatorModelClass4stepEv+0x3d00>
      a[r1 + 3 * i] = 0.0;
 800a76e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a772:	4613      	mov	r3, r2
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	441a      	add	r2, r3
 800a778:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a77c:	4413      	add	r3, r2
 800a77e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	441a      	add	r2, r3
 800a786:	f04f 0300 	mov.w	r3, #0
 800a78a:	f04f 0400 	mov.w	r4, #0
 800a78e:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800a792:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a796:	4613      	mov	r3, r2
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	441a      	add	r2, r3
 800a79c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	4413      	add	r3, r2
 800a7aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7ae:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a7b2:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i] * imvec_1[r1];
 800a7b6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	4413      	add	r3, r2
 800a7c0:	4acd      	ldr	r2, [pc, #820]	; (800aaf8 <_ZN27positionEstimatorModelClass4stepEv+0x3e80>)
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	4413      	add	r3, r2
 800a7c6:	ed93 6b00 	vldr	d6, [r3]
 800a7ca:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a7ce:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a7d2:	00db      	lsls	r3, r3, #3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	ed93 7b00 	vldr	d7, [r3]
 800a7da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a7de:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a7e2:	ed93 6b00 	vldr	d6, [r3]
 800a7e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a7ea:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a7ee:	ed83 7b00 	vstr	d7, [r3]
      a[r1 + 3 * i] = a22;
 800a7f2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	441a      	add	r2, r3
 800a7fc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a800:	4413      	add	r3, r2
 800a802:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	441a      	add	r2, r3
 800a80a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a80e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a812:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800a816:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a81a:	4613      	mov	r3, r2
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	441a      	add	r2, r3
 800a820:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a824:	4413      	add	r3, r2
 800a826:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	4413      	add	r3, r2
 800a82e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a832:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a836:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 1] * imvec_1[r1 + 3];
 800a83a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a83e:	4613      	mov	r3, r2
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	4413      	add	r3, r2
 800a844:	3301      	adds	r3, #1
 800a846:	4aac      	ldr	r2, [pc, #688]	; (800aaf8 <_ZN27positionEstimatorModelClass4stepEv+0x3e80>)
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	4413      	add	r3, r2
 800a84c:	ed93 6b00 	vldr	d6, [r3]
 800a850:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a854:	3303      	adds	r3, #3
 800a856:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	4413      	add	r3, r2
 800a85e:	ed93 7b00 	vldr	d7, [r3]
 800a862:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a866:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a86a:	ed93 6b00 	vldr	d6, [r3]
 800a86e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a872:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a876:	ed83 7b00 	vstr	d7, [r3]
      a[r1 + 3 * i] = a22;
 800a87a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a87e:	4613      	mov	r3, r2
 800a880:	005b      	lsls	r3, r3, #1
 800a882:	441a      	add	r2, r3
 800a884:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a888:	4413      	add	r3, r2
 800a88a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	441a      	add	r2, r3
 800a892:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a896:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a89a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800a89e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	441a      	add	r2, r3
 800a8a8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8ba:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a8be:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 2] * imvec_1[r1 + 6];
 800a8c2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	4413      	add	r3, r2
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	4a8a      	ldr	r2, [pc, #552]	; (800aaf8 <_ZN27positionEstimatorModelClass4stepEv+0x3e80>)
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	ed93 6b00 	vldr	d6, [r3]
 800a8d8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a8dc:	3306      	adds	r3, #6
 800a8de:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	ed93 7b00 	vldr	d7, [r3]
 800a8ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a8ee:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a8f2:	ed93 6b00 	vldr	d6, [r3]
 800a8f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a8fa:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a8fe:	ed83 7b00 	vstr	d7, [r3]
      a[r1 + 3 * i] = a22;
 800a902:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a906:	4613      	mov	r3, r2
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	441a      	add	r2, r3
 800a90c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a910:	4413      	add	r3, r2
 800a912:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	441a      	add	r2, r3
 800a91a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a91e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a922:	e9c2 3400 	strd	r3, r4, [r2]
      b_a[i + 3 * r1] = b_a_1[i] * rtP.Q_Value * b_a_1[r1];
 800a926:	4a75      	ldr	r2, [pc, #468]	; (800aafc <_ZN27positionEstimatorModelClass4stepEv+0x3e84>)
 800a928:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a92c:	00db      	lsls	r3, r3, #3
 800a92e:	4413      	add	r3, r2
 800a930:	ed93 6b00 	vldr	d6, [r3]
 800a934:	4b72      	ldr	r3, [pc, #456]	; (800ab00 <_ZN27positionEstimatorModelClass4stepEv+0x3e88>)
 800a936:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 800a93a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a93e:	4a6f      	ldr	r2, [pc, #444]	; (800aafc <_ZN27positionEstimatorModelClass4stepEv+0x3e84>)
 800a940:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a944:	00db      	lsls	r3, r3, #3
 800a946:	4413      	add	r3, r2
 800a948:	ed93 7b00 	vldr	d7, [r3]
 800a94c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a950:	4613      	mov	r3, r2
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	441a      	add	r2, r3
 800a956:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a95a:	4413      	add	r3, r2
 800a95c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a960:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	4413      	add	r3, r2
 800a968:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 800a96c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a970:	3301      	adds	r3, #1
 800a972:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a976:	e6f5      	b.n	800a764 <_ZN27positionEstimatorModelClass4stepEv+0x3aec>
  for (r1 = 0; r1 < 3; r1++) {
 800a978:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a97c:	3301      	adds	r3, #1
 800a97e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a982:	e5c1      	b.n	800a508 <_ZN27positionEstimatorModelClass4stepEv+0x3890>
    }
  }

  for (i = 0; i < 9; i++) {
 800a984:	2300      	movs	r3, #0
 800a986:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a98a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a98e:	2b08      	cmp	r3, #8
 800a990:	dc33      	bgt.n	800a9fa <_ZN27positionEstimatorModelClass4stepEv+0x3d82>
    rtDW.P_i[i] = a[i] + b_a[i];
 800a992:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a996:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	4413      	add	r3, r2
 800a99e:	ed93 6b00 	vldr	d6, [r3]
 800a9a2:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a9a6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	4413      	add	r3, r2
 800a9ae:	ed93 7b00 	vldr	d7, [r3]
 800a9b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a9b6:	1d3b      	adds	r3, r7, #4
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9be:	33ca      	adds	r3, #202	; 0xca
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	4413      	add	r3, r2
 800a9c4:	ed83 7b00 	vstr	d7, [r3]

    // DataStoreWrite: '<S8>/Data Store WriteP'
    rtDW.P_i_m[i] = rtDW.P_i[i];
 800a9c8:	1d3b      	adds	r3, r7, #4
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9d0:	33ca      	adds	r3, #202	; 0xca
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	4413      	add	r3, r2
 800a9d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9da:	1d3a      	adds	r2, r7, #4
 800a9dc:	6811      	ldr	r1, [r2, #0]
 800a9de:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a9e2:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800a9e6:	00d2      	lsls	r2, r2, #3
 800a9e8:	440a      	add	r2, r1
 800a9ea:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800a9ee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a9f8:	e7c7      	b.n	800a98a <_ZN27positionEstimatorModelClass4stepEv+0x3d12>
  }

  // DataStoreWrite: '<S8>/Data Store WriteX'
  rtDW.x[0] = rtDW.xNew_k[0];
 800a9fa:	1d3b      	adds	r3, r7, #4
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 800aa02:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa06:	1d3a      	adds	r2, r7, #4
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800aa0e:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[1] = rtDW.xNew_k[1];
 800aa12:	1d3b      	adds	r3, r7, #4
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800aa1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa1e:	1d3a      	adds	r2, r7, #4
 800aa20:	6812      	ldr	r2, [r2, #0]
 800aa22:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800aa26:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[2] = rtDW.xNew_k[2];
 800aa2a:	1d3b      	adds	r3, r7, #4
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 800aa32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa36:	1d3a      	adds	r2, r7, #4
 800aa38:	6812      	ldr	r2, [r2, #0]
 800aa3a:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800aa3e:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Predict'

  // Outputs for Atomic SubSystem: '<S2>/Predict'
  // DataStoreRead: '<S16>/Data Store ReadX'
  for (i = 0; i < 6; i++) {
 800aa42:	2300      	movs	r3, #0
 800aa44:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aa48:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa4c:	2b05      	cmp	r3, #5
 800aa4e:	dc18      	bgt.n	800aa82 <_ZN27positionEstimatorModelClass4stepEv+0x3e0a>
    rtDW.DataStoreReadX[i] = rtDW.x_p[i];
 800aa50:	1d3b      	adds	r3, r7, #4
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa58:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	4413      	add	r3, r2
 800aa60:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa64:	1d3a      	adds	r2, r7, #4
 800aa66:	6811      	ldr	r1, [r2, #0]
 800aa68:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800aa6c:	3204      	adds	r2, #4
 800aa6e:	00d2      	lsls	r2, r2, #3
 800aa70:	440a      	add	r2, r1
 800aa72:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800aa76:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aa80:	e7e2      	b.n	800aa48 <_ZN27positionEstimatorModelClass4stepEv+0x3dd0>
  }

  // End of DataStoreRead: '<S16>/Data Store ReadX'
  for (i = 0; i < 36; i++) {
 800aa82:	2300      	movs	r3, #0
 800aa84:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aa88:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa8c:	2b23      	cmp	r3, #35	; 0x23
 800aa8e:	dc39      	bgt.n	800ab04 <_ZN27positionEstimatorModelClass4stepEv+0x3e8c>
    // DataStoreRead: '<S16>/Data Store ReadP'
    rtDW.P_n[i] = rtDW.P_n_c[i];
 800aa90:	1d3b      	adds	r3, r7, #4
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa98:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	4413      	add	r3, r2
 800aaa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaa4:	1d3a      	adds	r2, r7, #4
 800aaa6:	6811      	ldr	r1, [r2, #0]
 800aaa8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800aaac:	3210      	adds	r2, #16
 800aaae:	00d2      	lsls	r2, r2, #3
 800aab0:	440a      	add	r2, r1
 800aab2:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S16>/Predict'
    u = rtDW.P_n[i];
 800aab6:	1d3b      	adds	r3, r7, #4
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aabe:	3310      	adds	r3, #16
 800aac0:	00db      	lsls	r3, r3, #3
 800aac2:	4413      	add	r3, r2
 800aac4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aac8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800aacc:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_n[i] = u;
 800aad0:	1d3b      	adds	r3, r7, #4
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aad8:	3310      	adds	r3, #16
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	441a      	add	r2, r3
 800aade:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800aae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aae6:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800aaea:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aaee:	3301      	adds	r3, #1
 800aaf0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aaf4:	e7c8      	b.n	800aa88 <_ZN27positionEstimatorModelClass4stepEv+0x3e10>
 800aaf6:	bf00      	nop
 800aaf8:	0802e5e8 	.word	0x0802e5e8
 800aafc:	0802e630 	.word	0x0802e630
 800ab00:	240002b0 	.word	0x240002b0
  }

  // MATLAB Function: '<S16>/Predict' incorporates:
  //   Constant: '<S2>/Q'

  for (r1 = 0; r1 < 6; r1++) {
 800ab04:	2300      	movs	r3, #0
 800ab06:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ab0a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	f300 8169 	bgt.w	800ade6 <_ZN27positionEstimatorModelClass4stepEv+0x416e>
    u = 0.0;
 800ab14:	f04f 0300 	mov.w	r3, #0
 800ab18:	f04f 0400 	mov.w	r4, #0
 800ab1c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800ab20:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800ab24:	2300      	movs	r3, #0
 800ab26:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ab2a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ab2e:	2b05      	cmp	r3, #5
 800ab30:	f300 809f 	bgt.w	800ac72 <_ZN27positionEstimatorModelClass4stepEv+0x3ffa>
      u += a_2[6 * i + r1] * rtDW.DataStoreReadX[i];
 800ab34:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ab38:	4613      	mov	r3, r2
 800ab3a:	005b      	lsls	r3, r3, #1
 800ab3c:	4413      	add	r3, r2
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	461a      	mov	r2, r3
 800ab42:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ab46:	4413      	add	r3, r2
 800ab48:	4ad8      	ldr	r2, [pc, #864]	; (800aeac <_ZN27positionEstimatorModelClass4stepEv+0x4234>)
 800ab4a:	00db      	lsls	r3, r3, #3
 800ab4c:	4413      	add	r3, r2
 800ab4e:	ed93 6b00 	vldr	d6, [r3]
 800ab52:	1d3b      	adds	r3, r7, #4
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	4413      	add	r3, r2
 800ab60:	ed93 7b00 	vldr	d7, [r3]
 800ab64:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ab68:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ab6c:	ed93 6b00 	vldr	d6, [r3]
 800ab70:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ab74:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ab78:	ed83 7b00 	vstr	d7, [r3]
      gain_0[r1 + 6 * i] = 0.0;
 800ab7c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ab80:	4613      	mov	r3, r2
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	4413      	add	r3, r2
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	461a      	mov	r2, r3
 800ab8a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ab8e:	4413      	add	r3, r2
 800ab90:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	441a      	add	r2, r3
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800aba4:	2300      	movs	r3, #0
 800aba6:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800abaa:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800abae:	2b05      	cmp	r3, #5
 800abb0:	dc59      	bgt.n	800ac66 <_ZN27positionEstimatorModelClass4stepEv+0x3fee>
        a22 = gain_0[6 * i + r1];
 800abb2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800abb6:	4613      	mov	r3, r2
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4413      	add	r3, r2
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	461a      	mov	r2, r3
 800abc0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800abc4:	4413      	add	r3, r2
 800abc6:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800abca:	00db      	lsls	r3, r3, #3
 800abcc:	4413      	add	r3, r2
 800abce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abd2:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800abd6:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += a_2[6 * k + r1] * rtDW.P_n[6 * i + k];
 800abda:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800abde:	4613      	mov	r3, r2
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	4413      	add	r3, r2
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	461a      	mov	r2, r3
 800abe8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800abec:	4413      	add	r3, r2
 800abee:	4aaf      	ldr	r2, [pc, #700]	; (800aeac <_ZN27positionEstimatorModelClass4stepEv+0x4234>)
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	4413      	add	r3, r2
 800abf4:	ed93 6b00 	vldr	d6, [r3]
 800abf8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800abfc:	4613      	mov	r3, r2
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	4413      	add	r3, r2
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	461a      	mov	r2, r3
 800ac06:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800ac0a:	4413      	add	r3, r2
 800ac0c:	1d3a      	adds	r2, r7, #4
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	3310      	adds	r3, #16
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	4413      	add	r3, r2
 800ac16:	ed93 7b00 	vldr	d7, [r3]
 800ac1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ac1e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ac22:	ed93 6b00 	vldr	d6, [r3]
 800ac26:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ac2a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ac2e:	ed83 7b00 	vstr	d7, [r3]
        gain_0[r1 + 6 * i] = a22;
 800ac32:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ac36:	4613      	mov	r3, r2
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	4413      	add	r3, r2
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ac44:	4413      	add	r3, r2
 800ac46:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	441a      	add	r2, r3
 800ac4e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ac52:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac56:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800ac5a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800ac5e:	3301      	adds	r3, #1
 800ac60:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800ac64:	e7a1      	b.n	800abaa <_ZN27positionEstimatorModelClass4stepEv+0x3f32>
    for (i = 0; i < 6; i++) {
 800ac66:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ac70:	e75b      	b.n	800ab2a <_ZN27positionEstimatorModelClass4stepEv+0x3eb2>
      }
    }

    rtDW.xNew[r1] = u;
 800ac72:	1d3b      	adds	r3, r7, #4
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ac7a:	330a      	adds	r3, #10
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	441a      	add	r2, r3
 800ac80:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800ac84:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac88:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ac92:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ac96:	2b05      	cmp	r3, #5
 800ac98:	f300 809f 	bgt.w	800adda <_ZN27positionEstimatorModelClass4stepEv+0x4162>
      a_0[r1 + 6 * i] = 0.0;
 800ac9c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800aca0:	4613      	mov	r3, r2
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	4413      	add	r3, r2
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	461a      	mov	r2, r3
 800acaa:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800acae:	4413      	add	r3, r2
 800acb0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800acb4:	00db      	lsls	r3, r3, #3
 800acb6:	441a      	add	r2, r3
 800acb8:	f04f 0300 	mov.w	r3, #0
 800acbc:	f04f 0400 	mov.w	r4, #0
 800acc0:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800acc4:	2300      	movs	r3, #0
 800acc6:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800acca:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800acce:	2b05      	cmp	r3, #5
 800acd0:	dc58      	bgt.n	800ad84 <_ZN27positionEstimatorModelClass4stepEv+0x410c>
        a22 = a_0[6 * i + r1];
 800acd2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800acd6:	4613      	mov	r3, r2
 800acd8:	005b      	lsls	r3, r3, #1
 800acda:	4413      	add	r3, r2
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	461a      	mov	r2, r3
 800ace0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ace4:	4413      	add	r3, r2
 800ace6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	4413      	add	r3, r2
 800acee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acf2:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800acf6:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += gain_0[6 * k + r1] * b_0[6 * i + k];
 800acfa:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800acfe:	4613      	mov	r3, r2
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	4413      	add	r3, r2
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	461a      	mov	r2, r3
 800ad08:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	4413      	add	r3, r2
 800ad16:	ed93 6b00 	vldr	d6, [r3]
 800ad1a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ad1e:	4613      	mov	r3, r2
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	4413      	add	r3, r2
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	461a      	mov	r2, r3
 800ad28:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800ad2c:	4413      	add	r3, r2
 800ad2e:	4a60      	ldr	r2, [pc, #384]	; (800aeb0 <_ZN27positionEstimatorModelClass4stepEv+0x4238>)
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	4413      	add	r3, r2
 800ad34:	ed93 7b00 	vldr	d7, [r3]
 800ad38:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ad3c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ad40:	ed93 6b00 	vldr	d6, [r3]
 800ad44:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ad48:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ad4c:	ed83 7b00 	vstr	d7, [r3]
        a_0[r1 + 6 * i] = a22;
 800ad50:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ad54:	4613      	mov	r3, r2
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	4413      	add	r3, r2
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ad62:	4413      	add	r3, r2
 800ad64:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	441a      	add	r2, r3
 800ad6c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800ad70:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad74:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800ad78:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800ad82:	e7a2      	b.n	800acca <_ZN27positionEstimatorModelClass4stepEv+0x4052>
      }

      b_a_0[i + 6 * r1] = b_a_2[i] * rtP.Q_Value_c * b_a_2[r1];
 800ad84:	4a4b      	ldr	r2, [pc, #300]	; (800aeb4 <_ZN27positionEstimatorModelClass4stepEv+0x423c>)
 800ad86:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	ed93 6b00 	vldr	d6, [r3]
 800ad92:	4b49      	ldr	r3, [pc, #292]	; (800aeb8 <_ZN27positionEstimatorModelClass4stepEv+0x4240>)
 800ad94:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 800ad98:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad9c:	4a45      	ldr	r2, [pc, #276]	; (800aeb4 <_ZN27positionEstimatorModelClass4stepEv+0x423c>)
 800ad9e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	4413      	add	r3, r2
 800ada6:	ed93 7b00 	vldr	d7, [r3]
 800adaa:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800adae:	4613      	mov	r3, r2
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	4413      	add	r3, r2
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	461a      	mov	r2, r3
 800adb8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800adbc:	4413      	add	r3, r2
 800adbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 800adc2:	f107 0208 	add.w	r2, r7, #8
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	4413      	add	r3, r2
 800adca:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 6; i++) {
 800adce:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800add2:	3301      	adds	r3, #1
 800add4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800add8:	e75b      	b.n	800ac92 <_ZN27positionEstimatorModelClass4stepEv+0x401a>
  for (r1 = 0; r1 < 6; r1++) {
 800adda:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800adde:	3301      	adds	r3, #1
 800ade0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800ade4:	e691      	b.n	800ab0a <_ZN27positionEstimatorModelClass4stepEv+0x3e92>
    }
  }

  for (i = 0; i < 36; i++) {
 800ade6:	2300      	movs	r3, #0
 800ade8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800adec:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800adf0:	2b23      	cmp	r3, #35	; 0x23
 800adf2:	dc33      	bgt.n	800ae5c <_ZN27positionEstimatorModelClass4stepEv+0x41e4>
    rtDW.P_n[i] = a_0[i] + b_a_0[i];
 800adf4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800adf8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	4413      	add	r3, r2
 800ae00:	ed93 6b00 	vldr	d6, [r3]
 800ae04:	f107 0208 	add.w	r2, r7, #8
 800ae08:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	4413      	add	r3, r2
 800ae10:	ed93 7b00 	vldr	d7, [r3]
 800ae14:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ae18:	1d3b      	adds	r3, r7, #4
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae20:	3310      	adds	r3, #16
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	4413      	add	r3, r2
 800ae26:	ed83 7b00 	vstr	d7, [r3]

    // DataStoreWrite: '<S16>/Data Store WriteP'
    rtDW.P_n_c[i] = rtDW.P_n[i];
 800ae2a:	1d3b      	adds	r3, r7, #4
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae32:	3310      	adds	r3, #16
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	4413      	add	r3, r2
 800ae38:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae3c:	1d3a      	adds	r2, r7, #4
 800ae3e:	6811      	ldr	r1, [r2, #0]
 800ae40:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ae44:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800ae48:	00d2      	lsls	r2, r2, #3
 800ae4a:	440a      	add	r2, r1
 800ae4c:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800ae50:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae54:	3301      	adds	r3, #1
 800ae56:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ae5a:	e7c7      	b.n	800adec <_ZN27positionEstimatorModelClass4stepEv+0x4174>
  }

  // DataStoreWrite: '<S16>/Data Store WriteX'
  for (i = 0; i < 6; i++) {
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ae62:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae66:	2b05      	cmp	r3, #5
 800ae68:	dc18      	bgt.n	800ae9c <_ZN27positionEstimatorModelClass4stepEv+0x4224>
    rtDW.x_p[i] = rtDW.xNew[i];
 800ae6a:	1d3b      	adds	r3, r7, #4
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae72:	330a      	adds	r3, #10
 800ae74:	00db      	lsls	r3, r3, #3
 800ae76:	4413      	add	r3, r2
 800ae78:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae7c:	1d3a      	adds	r2, r7, #4
 800ae7e:	6811      	ldr	r1, [r2, #0]
 800ae80:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800ae84:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800ae88:	00d2      	lsls	r2, r2, #3
 800ae8a:	440a      	add	r2, r1
 800ae8c:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800ae90:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800ae94:	3301      	adds	r3, #1
 800ae96:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800ae9a:	e7e2      	b.n	800ae62 <_ZN27positionEstimatorModelClass4stepEv+0x41ea>
  }

  // End of DataStoreWrite: '<S16>/Data Store WriteX'
  // End of Outputs for SubSystem: '<S2>/Predict'
}
 800ae9c:	bf00      	nop
 800ae9e:	f607 07d4 	addw	r7, r7, #2260	; 0x8d4
 800aea2:	46bd      	mov	sp, r7
 800aea4:	ecbd 8b02 	vpop	{d8}
 800aea8:	bd90      	pop	{r4, r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	0802e648 	.word	0x0802e648
 800aeb0:	0802e798 	.word	0x0802e798
 800aeb4:	0802e768 	.word	0x0802e768
 800aeb8:	240002b0 	.word	0x240002b0

0800aebc <_ZN27positionEstimatorModelClass10initializeEv>:

// Model initialize function
void positionEstimatorModelClass::initialize()
{
 800aebc:	b590      	push	{r4, r7, lr}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));
 800aec4:	2008      	movs	r0, #8
 800aec6:	f7fa fdc7 	bl	8005a58 <rt_InitInfAndNaN>

  {
    int32_T i;

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - P'
    for (i = 0; i < 9; i++) {
 800aeca:	2300      	movs	r3, #0
 800aecc:	60fb      	str	r3, [r7, #12]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b08      	cmp	r3, #8
 800aed2:	dc12      	bgt.n	800aefa <_ZN27positionEstimatorModelClass10initializeEv+0x3e>
      rtDW.P_i_m[i] = rtP.DataStoreMemoryP_InitialValue[i];
 800aed4:	4a3e      	ldr	r2, [pc, #248]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3344      	adds	r3, #68	; 0x44
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	4413      	add	r3, r2
 800aede:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aee2:	6879      	ldr	r1, [r7, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800aeea:	00d2      	lsls	r2, r2, #3
 800aeec:	440a      	add	r2, r1
 800aeee:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3301      	adds	r3, #1
 800aef6:	60fb      	str	r3, [r7, #12]
 800aef8:	e7e9      	b.n	800aece <_ZN27positionEstimatorModelClass10initializeEv+0x12>
    }

    // End of Start for DataStoreMemory: '<S1>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - x'
    rtDW.x[0] = rtP.DataStoreMemoryx_InitialValue[0];
 800aefa:	4b35      	ldr	r3, [pc, #212]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800aefc:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	f602 02a8 	addw	r2, r2, #2216	; 0x8a8
 800af06:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtP.DataStoreMemoryx_InitialValue[1];
 800af0a:	4b31      	ldr	r3, [pc, #196]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af0c:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	f502 620b 	add.w	r2, r2, #2224	; 0x8b0
 800af16:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtP.DataStoreMemoryx_InitialValue[2];
 800af1a:	4b2d      	ldr	r3, [pc, #180]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af1c:	e9d3 349e 	ldrd	r3, r4, [r3, #632]	; 0x278
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	f602 02b8 	addw	r2, r2, #2232	; 0x8b8
 800af26:	e9c2 3400 	strd	r3, r4, [r2]

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - P'
    for (i = 0; i < 36; i++) {
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b23      	cmp	r3, #35	; 0x23
 800af32:	dc12      	bgt.n	800af5a <_ZN27positionEstimatorModelClass10initializeEv+0x9e>
      rtDW.P_n_c[i] = rtP.DataStoreMemoryP_InitialValue_m[i];
 800af34:	4a26      	ldr	r2, [pc, #152]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3352      	adds	r3, #82	; 0x52
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	4413      	add	r3, r2
 800af3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af42:	6879      	ldr	r1, [r7, #4]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800af4a:	00d2      	lsls	r2, r2, #3
 800af4c:	440a      	add	r2, r1
 800af4e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3301      	adds	r3, #1
 800af56:	60fb      	str	r3, [r7, #12]
 800af58:	e7e9      	b.n	800af2e <_ZN27positionEstimatorModelClass10initializeEv+0x72>
    }

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - x'
    for (i = 0; i < 6; i++) {
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b05      	cmp	r3, #5
 800af62:	dc12      	bgt.n	800af8a <_ZN27positionEstimatorModelClass10initializeEv+0xce>
      rtDW.x_p[i] = rtP.DataStoreMemoryx_InitialValue_j[i];
 800af64:	4a1a      	ldr	r2, [pc, #104]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	3376      	adds	r3, #118	; 0x76
 800af6a:	00db      	lsls	r3, r3, #3
 800af6c:	4413      	add	r3, r2
 800af6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af72:	6879      	ldr	r1, [r7, #4]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 800af7a:	00d2      	lsls	r2, r2, #3
 800af7c:	440a      	add	r2, r1
 800af7e:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3301      	adds	r3, #1
 800af86:	60fb      	str	r3, [r7, #12]
 800af88:	e7e9      	b.n	800af5e <_ZN27positionEstimatorModelClass10initializeEv+0xa2>

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - x'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct1'
    // SystemInitialize for Outport: '<S13>/yBlockOrdering'
    rtDW.blockOrdering_f = rtP.yBlockOrdering_Y0_a;
 800af8a:	4b11      	ldr	r3, [pc, #68]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af8c:	f893 23e3 	ldrb.w	r2, [r3, #995]	; 0x3e3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

    // End of SystemInitialize for SubSystem: '<S2>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct2'
    // SystemInitialize for Outport: '<S14>/yBlockOrdering'
    rtDW.blockOrdering = rtP.yBlockOrdering_Y0_g;
 800af96:	4b0e      	ldr	r3, [pc, #56]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800af98:	f893 23e4 	ldrb.w	r2, [r3, #996]	; 0x3e4
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f883 2c43 	strb.w	r2, [r3, #3139]	; 0xc43

    // End of SystemInitialize for SubSystem: '<S2>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct1'
    // SystemInitialize for Outport: '<S4>/yBlockOrdering'
    rtDW.blockOrdering_k = rtP.yBlockOrdering_Y0;
 800afa2:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800afa4:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48

    // End of SystemInitialize for SubSystem: '<S1>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct2'
    // SystemInitialize for Outport: '<S5>/yBlockOrdering'
    rtDW.blockOrdering_n = rtP.yBlockOrdering_Y0_k;
 800afae:	4b08      	ldr	r3, [pc, #32]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800afb0:	f893 23e1 	ldrb.w	r2, [r3, #993]	; 0x3e1
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f883 2c47 	strb.w	r2, [r3, #3143]	; 0xc47

    // End of SystemInitialize for SubSystem: '<S1>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct3'
    // SystemInitialize for Outport: '<S6>/yBlockOrdering'
    rtDW.blockOrdering_p = rtP.yBlockOrdering_Y0_b;
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <_ZN27positionEstimatorModelClass10initializeEv+0x114>)
 800afbc:	f893 23e2 	ldrb.w	r2, [r3, #994]	; 0x3e2
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f883 2c46 	strb.w	r2, [r3, #3142]	; 0xc46

    // End of SystemInitialize for SubSystem: '<S1>/Correct3'
  }
}
 800afc6:	bf00      	nop
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd90      	pop	{r4, r7, pc}
 800afce:	bf00      	nop
 800afd0:	240002b0 	.word	0x240002b0

0800afd4 <_ZN27positionEstimatorModelClassC1Ev>:

// Constructor
positionEstimatorModelClass::positionEstimatorModelClass():
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  rtDW()
  ,rtU()
  ,rtY()
  ,rtM()
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4618      	mov	r0, r3
 800afe0:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 800afe4:	461a      	mov	r2, r3
 800afe6:	2100      	movs	r1, #0
 800afe8:	f022 f931 	bl	802d24e <memset>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 800aff2:	2280      	movs	r2, #128	; 0x80
 800aff4:	2100      	movs	r1, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f022 f929 	bl	802d24e <memset>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 800b002:	2248      	movs	r2, #72	; 0x48
 800b004:	2100      	movs	r1, #0
 800b006:	4618      	mov	r0, r3
 800b008:	f022 f921 	bl	802d24e <memset>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
{
  // Currently there is no constructor body generated.
}
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800b01e:	b480      	push	{r7}
 800b020:	b085      	sub	sp, #20
 800b022:	af00      	add	r7, sp, #0
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
 800b02a:	4603      	mov	r3, r0
 800b02c:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d204      	bcs.n	800b040 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4413      	add	r3, r2
 800b03c:	7bfa      	ldrb	r2, [r7, #15]
 800b03e:	701a      	strb	r2, [r3, #0]
  }
}
 800b040:	bf00      	nop
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	60b9      	str	r1, [r7, #8]
 800b054:	607a      	str	r2, [r7, #4]
 800b056:	603b      	str	r3, [r7, #0]
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800b05c:	bf00      	nop
 800b05e:	3714      	adds	r7, #20
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	607a      	str	r2, [r7, #4]
 800b072:	603b      	str	r3, [r7, #0]
 800b074:	4603      	mov	r3, r0
 800b076:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d003      	beq.n	800b086 <_out_char+0x1e>
    _putchar(character);
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
 800b080:	4618      	mov	r0, r3
 800b082:	f006 ff4b 	bl	8011f1c <_putchar>
  }
}
 800b086:	bf00      	nop
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800b08e:	b480      	push	{r7}
 800b090:	b085      	sub	sp, #20
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	e002      	b.n	800b0a4 <_strnlen_s+0x16>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	60fb      	str	r3, [r7, #12]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d004      	beq.n	800b0b6 <_strnlen_s+0x28>
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	1e5a      	subs	r2, r3, #1
 800b0b0:	603a      	str	r2, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1f3      	bne.n	800b09e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	1ad3      	subs	r3, r2, r3
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800b0d2:	79fb      	ldrb	r3, [r7, #7]
 800b0d4:	2b2f      	cmp	r3, #47	; 0x2f
 800b0d6:	d904      	bls.n	800b0e2 <_is_digit+0x1a>
 800b0d8:	79fb      	ldrb	r3, [r7, #7]
 800b0da:	2b39      	cmp	r3, #57	; 0x39
 800b0dc:	d801      	bhi.n	800b0e2 <_is_digit+0x1a>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e000      	b.n	800b0e4 <_is_digit+0x1c>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	b2db      	uxtb	r3, r3
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800b102:	e00e      	b.n	800b122 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	005b      	lsls	r3, r3, #1
 800b10e:	4618      	mov	r0, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	1c59      	adds	r1, r3, #1
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	6011      	str	r1, [r2, #0]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	4403      	add	r3, r0
 800b11e:	3b30      	subs	r3, #48	; 0x30
 800b120:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	4618      	mov	r0, r3
 800b12a:	f7ff ffcd 	bl	800b0c8 <_is_digit>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e7      	bne.n	800b104 <_atoi+0xe>
  }
  return i;
 800b134:	68fb      	ldr	r3, [r7, #12]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800b13e:	b590      	push	{r4, r7, lr}
 800b140:	b087      	sub	sp, #28
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	60b9      	str	r1, [r7, #8]
 800b148:	607a      	str	r2, [r7, #4]
 800b14a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800b150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b152:	f003 0302 	and.w	r3, r3, #2
 800b156:	2b00      	cmp	r3, #0
 800b158:	d125      	bne.n	800b1a6 <_out_rev+0x68>
 800b15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	d120      	bne.n	800b1a6 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800b164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	e00a      	b.n	800b180 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	1c53      	adds	r3, r2, #1
 800b16e:	607b      	str	r3, [r7, #4]
 800b170:	68fc      	ldr	r4, [r7, #12]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68b9      	ldr	r1, [r7, #8]
 800b176:	2020      	movs	r0, #32
 800b178:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	3301      	adds	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	429a      	cmp	r2, r3
 800b186:	d3f0      	bcc.n	800b16a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800b188:	e00d      	b.n	800b1a6 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800b18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18c:	3b01      	subs	r3, #1
 800b18e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	4413      	add	r3, r2
 800b196:	7818      	ldrb	r0, [r3, #0]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	1c53      	adds	r3, r2, #1
 800b19c:	607b      	str	r3, [r7, #4]
 800b19e:	68fc      	ldr	r4, [r7, #12]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	68b9      	ldr	r1, [r7, #8]
 800b1a4:	47a0      	blx	r4
  while (len) {
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1ee      	bne.n	800b18a <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800b1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ae:	f003 0302 	and.w	r3, r3, #2
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00e      	beq.n	800b1d4 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800b1b6:	e007      	b.n	800b1c8 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	1c53      	adds	r3, r2, #1
 800b1bc:	607b      	str	r3, [r7, #4]
 800b1be:	68fc      	ldr	r4, [r7, #12]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	68b9      	ldr	r1, [r7, #8]
 800b1c4:	2020      	movs	r0, #32
 800b1c6:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d8f1      	bhi.n	800b1b8 <_out_rev+0x7a>
    }
  }

  return idx;
 800b1d4:	687b      	ldr	r3, [r7, #4]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	371c      	adds	r7, #28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd90      	pop	{r4, r7, pc}

0800b1de <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b088      	sub	sp, #32
 800b1e2:	af04      	add	r7, sp, #16
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	607a      	str	r2, [r7, #4]
 800b1ea:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	f003 0302 	and.w	r3, r3, #2
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d136      	bne.n	800b264 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800b1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d018      	beq.n	800b22e <_ntoa_format+0x50>
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b00      	cmp	r3, #0
 800b204:	d013      	beq.n	800b22e <_ntoa_format+0x50>
 800b206:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d104      	bne.n	800b218 <_ntoa_format+0x3a>
 800b20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b210:	f003 030c 	and.w	r3, r3, #12
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00a      	beq.n	800b22e <_ntoa_format+0x50>
      width--;
 800b218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21a:	3b01      	subs	r3, #1
 800b21c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b21e:	e006      	b.n	800b22e <_ntoa_format+0x50>
      buf[len++] = '0';
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	61fa      	str	r2, [r7, #28]
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	4413      	add	r3, r2
 800b22a:	2230      	movs	r2, #48	; 0x30
 800b22c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b22e:	69fa      	ldr	r2, [r7, #28]
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	429a      	cmp	r2, r3
 800b234:	d20a      	bcs.n	800b24c <_ntoa_format+0x6e>
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	2b1f      	cmp	r3, #31
 800b23a:	d9f1      	bls.n	800b220 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b23c:	e006      	b.n	800b24c <_ntoa_format+0x6e>
      buf[len++] = '0';
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	1c5a      	adds	r2, r3, #1
 800b242:	61fa      	str	r2, [r7, #28]
 800b244:	69ba      	ldr	r2, [r7, #24]
 800b246:	4413      	add	r3, r2
 800b248:	2230      	movs	r2, #48	; 0x30
 800b24a:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	f003 0301 	and.w	r3, r3, #1
 800b252:	2b00      	cmp	r3, #0
 800b254:	d006      	beq.n	800b264 <_ntoa_format+0x86>
 800b256:	69fa      	ldr	r2, [r7, #28]
 800b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d202      	bcs.n	800b264 <_ntoa_format+0x86>
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	2b1f      	cmp	r3, #31
 800b262:	d9ec      	bls.n	800b23e <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	f003 0310 	and.w	r3, r3, #16
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d058      	beq.n	800b320 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b274:	2b00      	cmp	r3, #0
 800b276:	d116      	bne.n	800b2a6 <_ntoa_format+0xc8>
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d013      	beq.n	800b2a6 <_ntoa_format+0xc8>
 800b27e:	69fa      	ldr	r2, [r7, #28]
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	429a      	cmp	r2, r3
 800b284:	d003      	beq.n	800b28e <_ntoa_format+0xb0>
 800b286:	69fa      	ldr	r2, [r7, #28]
 800b288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d10b      	bne.n	800b2a6 <_ntoa_format+0xc8>
      len--;
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	3b01      	subs	r3, #1
 800b292:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d005      	beq.n	800b2a6 <_ntoa_format+0xc8>
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	2b10      	cmp	r3, #16
 800b29e:	d102      	bne.n	800b2a6 <_ntoa_format+0xc8>
        len--;
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a8:	2b10      	cmp	r3, #16
 800b2aa:	d10f      	bne.n	800b2cc <_ntoa_format+0xee>
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	f003 0320 	and.w	r3, r3, #32
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10a      	bne.n	800b2cc <_ntoa_format+0xee>
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	2b1f      	cmp	r3, #31
 800b2ba:	d807      	bhi.n	800b2cc <_ntoa_format+0xee>
      buf[len++] = 'x';
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	61fa      	str	r2, [r7, #28]
 800b2c2:	69ba      	ldr	r2, [r7, #24]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	2278      	movs	r2, #120	; 0x78
 800b2c8:	701a      	strb	r2, [r3, #0]
 800b2ca:	e01f      	b.n	800b30c <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	2b10      	cmp	r3, #16
 800b2d0:	d10f      	bne.n	800b2f2 <_ntoa_format+0x114>
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	f003 0320 	and.w	r3, r3, #32
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <_ntoa_format+0x114>
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	2b1f      	cmp	r3, #31
 800b2e0:	d807      	bhi.n	800b2f2 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	1c5a      	adds	r2, r3, #1
 800b2e6:	61fa      	str	r2, [r7, #28]
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	2258      	movs	r2, #88	; 0x58
 800b2ee:	701a      	strb	r2, [r3, #0]
 800b2f0:	e00c      	b.n	800b30c <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d109      	bne.n	800b30c <_ntoa_format+0x12e>
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2b1f      	cmp	r3, #31
 800b2fc:	d806      	bhi.n	800b30c <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	1c5a      	adds	r2, r3, #1
 800b302:	61fa      	str	r2, [r7, #28]
 800b304:	69ba      	ldr	r2, [r7, #24]
 800b306:	4413      	add	r3, r2
 800b308:	2262      	movs	r2, #98	; 0x62
 800b30a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	2b1f      	cmp	r3, #31
 800b310:	d806      	bhi.n	800b320 <_ntoa_format+0x142>
      buf[len++] = '0';
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	61fa      	str	r2, [r7, #28]
 800b318:	69ba      	ldr	r2, [r7, #24]
 800b31a:	4413      	add	r3, r2
 800b31c:	2230      	movs	r2, #48	; 0x30
 800b31e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	2b1f      	cmp	r3, #31
 800b324:	d824      	bhi.n	800b370 <_ntoa_format+0x192>
    if (negative) {
 800b326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d007      	beq.n	800b33e <_ntoa_format+0x160>
      buf[len++] = '-';
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	1c5a      	adds	r2, r3, #1
 800b332:	61fa      	str	r2, [r7, #28]
 800b334:	69ba      	ldr	r2, [r7, #24]
 800b336:	4413      	add	r3, r2
 800b338:	222d      	movs	r2, #45	; 0x2d
 800b33a:	701a      	strb	r2, [r3, #0]
 800b33c:	e018      	b.n	800b370 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d007      	beq.n	800b358 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	1c5a      	adds	r2, r3, #1
 800b34c:	61fa      	str	r2, [r7, #28]
 800b34e:	69ba      	ldr	r2, [r7, #24]
 800b350:	4413      	add	r3, r2
 800b352:	222b      	movs	r2, #43	; 0x2b
 800b354:	701a      	strb	r2, [r3, #0]
 800b356:	e00b      	b.n	800b370 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	f003 0308 	and.w	r3, r3, #8
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d006      	beq.n	800b370 <_ntoa_format+0x192>
      buf[len++] = ' ';
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	61fa      	str	r2, [r7, #28]
 800b368:	69ba      	ldr	r2, [r7, #24]
 800b36a:	4413      	add	r3, r2
 800b36c:	2220      	movs	r2, #32
 800b36e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	9303      	str	r3, [sp, #12]
 800b374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b376:	9302      	str	r3, [sp, #8]
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	9301      	str	r3, [sp, #4]
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	68b9      	ldr	r1, [r7, #8]
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7ff fed9 	bl	800b13e <_out_rev>
 800b38c:	4603      	mov	r3, r0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b096      	sub	sp, #88	; 0x58
 800b39a:	af08      	add	r7, sp, #32
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	607a      	str	r2, [r7, #4]
 800b3a2:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800b3a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d103      	bne.n	800b3b6 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800b3ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3b0:	f023 0310 	bic.w	r3, r3, #16
 800b3b4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b3b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <_ntoa_long+0x30>
 800b3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d033      	beq.n	800b42e <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800b3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b3d0:	fb01 f202 	mul.w	r2, r1, r2
 800b3d4:	1a9b      	subs	r3, r3, r2
 800b3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b3da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3de:	2b09      	cmp	r3, #9
 800b3e0:	d804      	bhi.n	800b3ec <_ntoa_long+0x56>
 800b3e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3e6:	3330      	adds	r3, #48	; 0x30
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	e00d      	b.n	800b408 <_ntoa_long+0x72>
 800b3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3ee:	f003 0320 	and.w	r3, r3, #32
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <_ntoa_long+0x64>
 800b3f6:	2241      	movs	r2, #65	; 0x41
 800b3f8:	e000      	b.n	800b3fc <_ntoa_long+0x66>
 800b3fa:	2261      	movs	r2, #97	; 0x61
 800b3fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b400:	4413      	add	r3, r2
 800b402:	b2db      	uxtb	r3, r3
 800b404:	3b0a      	subs	r3, #10
 800b406:	b2da      	uxtb	r2, r3
 800b408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40a:	1c59      	adds	r1, r3, #1
 800b40c:	6379      	str	r1, [r7, #52]	; 0x34
 800b40e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b412:	440b      	add	r3, r1
 800b414:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800b418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b41a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b420:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <_ntoa_long+0x98>
 800b428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42a:	2b1f      	cmp	r3, #31
 800b42c:	d9cb      	bls.n	800b3c6 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b430:	9306      	str	r3, [sp, #24]
 800b432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b434:	9305      	str	r3, [sp, #20]
 800b436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43c:	9303      	str	r3, [sp, #12]
 800b43e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b442:	9302      	str	r3, [sp, #8]
 800b444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	f107 0310 	add.w	r3, r7, #16
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	68b9      	ldr	r1, [r7, #8]
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f7ff fec2 	bl	800b1de <_ntoa_format>
 800b45a:	4603      	mov	r3, r0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3738      	adds	r7, #56	; 0x38
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b097      	sub	sp, #92	; 0x5c
 800b468:	af08      	add	r7, sp, #32
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800b476:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800b47a:	4323      	orrs	r3, r4
 800b47c:	d103      	bne.n	800b486 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800b47e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b480:	f023 0310 	bic.w	r3, r3, #16
 800b484:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d003      	beq.n	800b498 <_ntoa_long_long+0x34>
 800b490:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800b494:	4323      	orrs	r3, r4
 800b496:	d039      	beq.n	800b50c <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800b498:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b49c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b4a0:	f7f5 f982 	bl	80007a8 <__aeabi_uldivmod>
 800b4a4:	461c      	mov	r4, r3
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b4ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4b0:	2b09      	cmp	r3, #9
 800b4b2:	d804      	bhi.n	800b4be <_ntoa_long_long+0x5a>
 800b4b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4b8:	3330      	adds	r3, #48	; 0x30
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	e00d      	b.n	800b4da <_ntoa_long_long+0x76>
 800b4be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4c0:	f003 0320 	and.w	r3, r3, #32
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d001      	beq.n	800b4cc <_ntoa_long_long+0x68>
 800b4c8:	2241      	movs	r2, #65	; 0x41
 800b4ca:	e000      	b.n	800b4ce <_ntoa_long_long+0x6a>
 800b4cc:	2261      	movs	r2, #97	; 0x61
 800b4ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4d2:	4413      	add	r3, r2
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	3b0a      	subs	r3, #10
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4dc:	1c59      	adds	r1, r3, #1
 800b4de:	6379      	str	r1, [r7, #52]	; 0x34
 800b4e0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b4e4:	440b      	add	r3, r1
 800b4e6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800b4ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b4ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b4f2:	f7f5 f959 	bl	80007a8 <__aeabi_uldivmod>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b4fe:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800b502:	4323      	orrs	r3, r4
 800b504:	d002      	beq.n	800b50c <_ntoa_long_long+0xa8>
 800b506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b508:	2b1f      	cmp	r3, #31
 800b50a:	d9c5      	bls.n	800b498 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b50c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b50e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b510:	9206      	str	r2, [sp, #24]
 800b512:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b514:	9205      	str	r2, [sp, #20]
 800b516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b518:	9204      	str	r2, [sp, #16]
 800b51a:	9303      	str	r3, [sp, #12]
 800b51c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800b520:	9302      	str	r3, [sp, #8]
 800b522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	f107 0310 	add.w	r3, r7, #16
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	68b9      	ldr	r1, [r7, #8]
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7ff fe53 	bl	800b1de <_ntoa_format>
 800b538:	4603      	mov	r3, r0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	373c      	adds	r7, #60	; 0x3c
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd90      	pop	{r4, r7, pc}
 800b542:	0000      	movs	r0, r0
 800b544:	0000      	movs	r0, r0
	...

0800b548 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b548:	b590      	push	{r4, r7, lr}
 800b54a:	b09d      	sub	sp, #116	; 0x74
 800b54c:	af04      	add	r7, sp, #16
 800b54e:	6178      	str	r0, [r7, #20]
 800b550:	6139      	str	r1, [r7, #16]
 800b552:	60fa      	str	r2, [r7, #12]
 800b554:	60bb      	str	r3, [r7, #8]
 800b556:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800b55e:	f04f 0300 	mov.w	r3, #0
 800b562:	f04f 0400 	mov.w	r4, #0
 800b566:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800b56a:	ed97 6b00 	vldr	d6, [r7]
 800b56e:	ed97 7b00 	vldr	d7, [r7]
 800b572:	eeb4 6b47 	vcmp.f64	d6, d7
 800b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57a:	d00f      	beq.n	800b59c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800b57c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b57e:	9303      	str	r3, [sp, #12]
 800b580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b582:	9302      	str	r3, [sp, #8]
 800b584:	2303      	movs	r3, #3
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	4bb7      	ldr	r3, [pc, #732]	; (800b868 <_ftoa+0x320>)
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	6939      	ldr	r1, [r7, #16]
 800b592:	6978      	ldr	r0, [r7, #20]
 800b594:	f7ff fdd3 	bl	800b13e <_out_rev>
 800b598:	4603      	mov	r3, r0
 800b59a:	e21e      	b.n	800b9da <_ftoa+0x492>
  if (value < -DBL_MAX)
 800b59c:	ed97 7b00 	vldr	d7, [r7]
 800b5a0:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 800b840 <_ftoa+0x2f8>
 800b5a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ac:	d50f      	bpl.n	800b5ce <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800b5ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5b0:	9303      	str	r3, [sp, #12]
 800b5b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5b4:	9302      	str	r3, [sp, #8]
 800b5b6:	2304      	movs	r3, #4
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	4bac      	ldr	r3, [pc, #688]	; (800b86c <_ftoa+0x324>)
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	6939      	ldr	r1, [r7, #16]
 800b5c4:	6978      	ldr	r0, [r7, #20]
 800b5c6:	f7ff fdba 	bl	800b13e <_out_rev>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	e205      	b.n	800b9da <_ftoa+0x492>
  if (value > DBL_MAX)
 800b5ce:	ed97 7b00 	vldr	d7, [r7]
 800b5d2:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 800b848 <_ftoa+0x300>
 800b5d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5de:	dd1d      	ble.n	800b61c <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800b5e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5e2:	f003 0304 	and.w	r3, r3, #4
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <_ftoa+0xa6>
 800b5ea:	4ba1      	ldr	r3, [pc, #644]	; (800b870 <_ftoa+0x328>)
 800b5ec:	e000      	b.n	800b5f0 <_ftoa+0xa8>
 800b5ee:	4ba1      	ldr	r3, [pc, #644]	; (800b874 <_ftoa+0x32c>)
 800b5f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5f2:	f002 0204 	and.w	r2, r2, #4
 800b5f6:	2a00      	cmp	r2, #0
 800b5f8:	d001      	beq.n	800b5fe <_ftoa+0xb6>
 800b5fa:	2204      	movs	r2, #4
 800b5fc:	e000      	b.n	800b600 <_ftoa+0xb8>
 800b5fe:	2203      	movs	r2, #3
 800b600:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b602:	9103      	str	r1, [sp, #12]
 800b604:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b606:	9102      	str	r1, [sp, #8]
 800b608:	9201      	str	r2, [sp, #4]
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	6939      	ldr	r1, [r7, #16]
 800b612:	6978      	ldr	r0, [r7, #20]
 800b614:	f7ff fd93 	bl	800b13e <_out_rev>
 800b618:	4603      	mov	r3, r0
 800b61a:	e1de      	b.n	800b9da <_ftoa+0x492>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800b61c:	ed97 7b00 	vldr	d7, [r7]
 800b620:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 800b850 <_ftoa+0x308>
 800b624:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62c:	dc08      	bgt.n	800b640 <_ftoa+0xf8>
 800b62e:	ed97 7b00 	vldr	d7, [r7]
 800b632:	ed9f 6b89 	vldr	d6, [pc, #548]	; 800b858 <_ftoa+0x310>
 800b636:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b63e:	d50f      	bpl.n	800b660 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800b640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b642:	9302      	str	r3, [sp, #8]
 800b644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	ed97 0b00 	vldr	d0, [r7]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	6939      	ldr	r1, [r7, #16]
 800b656:	6978      	ldr	r0, [r7, #20]
 800b658:	f000 f9c6 	bl	800b9e8 <_etoa>
 800b65c:	4603      	mov	r3, r0
 800b65e:	e1bc      	b.n	800b9da <_ftoa+0x492>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800b660:	2300      	movs	r3, #0
 800b662:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800b666:	ed97 7b00 	vldr	d7, [r7]
 800b66a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b672:	d50a      	bpl.n	800b68a <_ftoa+0x142>
    negative = true;
 800b674:	2301      	movs	r3, #1
 800b676:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800b67a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800b860 <_ftoa+0x318>
 800b67e:	ed97 7b00 	vldr	d7, [r7]
 800b682:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b686:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800b68a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b68c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10e      	bne.n	800b6b2 <_ftoa+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800b694:	2306      	movs	r3, #6
 800b696:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800b698:	e00b      	b.n	800b6b2 <_ftoa+0x16a>
    buf[len++] = '0';
 800b69a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b6a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b6a4:	4413      	add	r3, r2
 800b6a6:	2230      	movs	r2, #48	; 0x30
 800b6a8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800b6ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800b6b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6b4:	2b1f      	cmp	r3, #31
 800b6b6:	d802      	bhi.n	800b6be <_ftoa+0x176>
 800b6b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6ba:	2b09      	cmp	r3, #9
 800b6bc:	d8ed      	bhi.n	800b69a <_ftoa+0x152>
  }

  int whole = (int)value;
 800b6be:	ed97 7b00 	vldr	d7, [r7]
 800b6c2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b6c6:	ee17 3a90 	vmov	r3, s15
 800b6ca:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800b6cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b6d6:	ed97 6b00 	vldr	d6, [r7]
 800b6da:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b6de:	4a66      	ldr	r2, [pc, #408]	; (800b878 <_ftoa+0x330>)
 800b6e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	4413      	add	r3, r2
 800b6e6:	ed93 7b00 	vldr	d7, [r3]
 800b6ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b6ee:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800b6f2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800b6f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b6fa:	ee17 3a90 	vmov	r3, s15
 800b6fe:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800b700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b70a:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800b70e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b712:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800b716:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800b71a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b71e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b726:	dd18      	ble.n	800b75a <_ftoa+0x212>
    ++frac;
 800b728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b72a:	3301      	adds	r3, #1
 800b72c:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800b72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b730:	ee07 3a90 	vmov	s15, r3
 800b734:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800b738:	4a4f      	ldr	r2, [pc, #316]	; (800b878 <_ftoa+0x330>)
 800b73a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b73c:	00db      	lsls	r3, r3, #3
 800b73e:	4413      	add	r3, r2
 800b740:	ed93 7b00 	vldr	d7, [r3]
 800b744:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74c:	db19      	blt.n	800b782 <_ftoa+0x23a>
      frac = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800b752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b754:	3301      	adds	r3, #1
 800b756:	657b      	str	r3, [r7, #84]	; 0x54
 800b758:	e013      	b.n	800b782 <_ftoa+0x23a>
    }
  }
  else if (diff < 0.5) {
 800b75a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800b75e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b762:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b76a:	d40a      	bmi.n	800b782 <_ftoa+0x23a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800b76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d004      	beq.n	800b77c <_ftoa+0x234>
 800b772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <_ftoa+0x23a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800b77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b77e:	3301      	adds	r3, #1
 800b780:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800b782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b784:	2b00      	cmp	r3, #0
 800b786:	d12e      	bne.n	800b7e6 <_ftoa+0x29e>
    diff = value - (double)whole;
 800b788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b78a:	ee07 3a90 	vmov	s15, r3
 800b78e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b792:	ed97 6b00 	vldr	d6, [r7]
 800b796:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b79a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800b79e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800b7a2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b7a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ae:	bf4c      	ite	mi
 800b7b0:	2301      	movmi	r3, #1
 800b7b2:	2300      	movpl	r3, #0
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	f083 0301 	eor.w	r3, r3, #1
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d108      	bne.n	800b7d2 <_ftoa+0x28a>
 800b7c0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800b7c4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b7c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d0:	dd73      	ble.n	800b8ba <_ftoa+0x372>
 800b7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7d4:	f003 0301 	and.w	r3, r3, #1
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f000 8091 	beq.w	800b900 <_ftoa+0x3b8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800b7de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	657b      	str	r3, [r7, #84]	; 0x54
 800b7e4:	e08c      	b.n	800b900 <_ftoa+0x3b8>
    }
  }
  else {
    unsigned int count = prec;
 800b7e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b7ea:	e020      	b.n	800b82e <_ftoa+0x2e6>
      --count;
 800b7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800b7f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7f4:	4b21      	ldr	r3, [pc, #132]	; (800b87c <_ftoa+0x334>)
 800b7f6:	fba3 2301 	umull	r2, r3, r3, r1
 800b7fa:	08da      	lsrs	r2, r3, #3
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	1aca      	subs	r2, r1, r3
 800b806:	b2d2      	uxtb	r2, r2
 800b808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b80a:	1c59      	adds	r1, r3, #1
 800b80c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800b80e:	3230      	adds	r2, #48	; 0x30
 800b810:	b2d2      	uxtb	r2, r2
 800b812:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b816:	440b      	add	r3, r1
 800b818:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800b81c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b81e:	4a17      	ldr	r2, [pc, #92]	; (800b87c <_ftoa+0x334>)
 800b820:	fba2 2303 	umull	r2, r3, r2, r3
 800b824:	08db      	lsrs	r3, r3, #3
 800b826:	653b      	str	r3, [r7, #80]	; 0x50
 800b828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <_ftoa+0x2ee>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b82e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b830:	2b1f      	cmp	r3, #31
 800b832:	d9db      	bls.n	800b7ec <_ftoa+0x2a4>
 800b834:	e02d      	b.n	800b892 <_ftoa+0x34a>
        break;
 800b836:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800b838:	e02b      	b.n	800b892 <_ftoa+0x34a>
 800b83a:	bf00      	nop
 800b83c:	f3af 8000 	nop.w
 800b840:	ffffffff 	.word	0xffffffff
 800b844:	ffefffff 	.word	0xffefffff
 800b848:	ffffffff 	.word	0xffffffff
 800b84c:	7fefffff 	.word	0x7fefffff
 800b850:	00000000 	.word	0x00000000
 800b854:	41cdcd65 	.word	0x41cdcd65
 800b858:	00000000 	.word	0x00000000
 800b85c:	c1cdcd65 	.word	0xc1cdcd65
	...
 800b868:	0802e308 	.word	0x0802e308
 800b86c:	0802e30c 	.word	0x0802e30c
 800b870:	0802e314 	.word	0x0802e314
 800b874:	0802e31c 	.word	0x0802e31c
 800b878:	0802e8b8 	.word	0x0802e8b8
 800b87c:	cccccccd 	.word	0xcccccccd
      buf[len++] = '0';
 800b880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b886:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b88a:	4413      	add	r3, r2
 800b88c:	2230      	movs	r2, #48	; 0x30
 800b88e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800b892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b894:	2b1f      	cmp	r3, #31
 800b896:	d804      	bhi.n	800b8a2 <_ftoa+0x35a>
 800b898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b89a:	1e5a      	subs	r2, r3, #1
 800b89c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1ee      	bne.n	800b880 <_ftoa+0x338>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b8a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8a4:	2b1f      	cmp	r3, #31
 800b8a6:	d82b      	bhi.n	800b900 <_ftoa+0x3b8>
      // add decimal
      buf[len++] = '.';
 800b8a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b8ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b8b2:	4413      	add	r3, r2
 800b8b4:	222e      	movs	r2, #46	; 0x2e
 800b8b6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b8ba:	e021      	b.n	800b900 <_ftoa+0x3b8>
    buf[len++] = (char)(48 + (whole % 10));
 800b8bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8be:	4b49      	ldr	r3, [pc, #292]	; (800b9e4 <_ftoa+0x49c>)
 800b8c0:	fb83 1302 	smull	r1, r3, r3, r2
 800b8c4:	1099      	asrs	r1, r3, #2
 800b8c6:	17d3      	asrs	r3, r2, #31
 800b8c8:	1ac9      	subs	r1, r1, r3
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	440b      	add	r3, r1
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	1ad1      	subs	r1, r2, r3
 800b8d4:	b2ca      	uxtb	r2, r1
 800b8d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8d8:	1c59      	adds	r1, r3, #1
 800b8da:	65f9      	str	r1, [r7, #92]	; 0x5c
 800b8dc:	3230      	adds	r2, #48	; 0x30
 800b8de:	b2d2      	uxtb	r2, r2
 800b8e0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b8e4:	440b      	add	r3, r1
 800b8e6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800b8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8ec:	4a3d      	ldr	r2, [pc, #244]	; (800b9e4 <_ftoa+0x49c>)
 800b8ee:	fb82 1203 	smull	r1, r2, r2, r3
 800b8f2:	1092      	asrs	r2, r2, #2
 800b8f4:	17db      	asrs	r3, r3, #31
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	657b      	str	r3, [r7, #84]	; 0x54
 800b8fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d003      	beq.n	800b908 <_ftoa+0x3c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b902:	2b1f      	cmp	r3, #31
 800b904:	d9da      	bls.n	800b8bc <_ftoa+0x374>
 800b906:	e000      	b.n	800b90a <_ftoa+0x3c2>
      break;
 800b908:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800b90a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b90c:	f003 0302 	and.w	r3, r3, #2
 800b910:	2b00      	cmp	r3, #0
 800b912:	d124      	bne.n	800b95e <_ftoa+0x416>
 800b914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d01f      	beq.n	800b95e <_ftoa+0x416>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800b91e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b920:	2b00      	cmp	r3, #0
 800b922:	d015      	beq.n	800b950 <_ftoa+0x408>
 800b924:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d104      	bne.n	800b936 <_ftoa+0x3ee>
 800b92c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b92e:	f003 030c 	and.w	r3, r3, #12
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00c      	beq.n	800b950 <_ftoa+0x408>
      width--;
 800b936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b938:	3b01      	subs	r3, #1
 800b93a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800b93c:	e008      	b.n	800b950 <_ftoa+0x408>
      buf[len++] = '0';
 800b93e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b944:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b948:	4413      	add	r3, r2
 800b94a:	2230      	movs	r2, #48	; 0x30
 800b94c:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800b950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b954:	429a      	cmp	r2, r3
 800b956:	d202      	bcs.n	800b95e <_ftoa+0x416>
 800b958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b95a:	2b1f      	cmp	r3, #31
 800b95c:	d9ef      	bls.n	800b93e <_ftoa+0x3f6>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b95e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b960:	2b1f      	cmp	r3, #31
 800b962:	d82a      	bhi.n	800b9ba <_ftoa+0x472>
    if (negative) {
 800b964:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d009      	beq.n	800b980 <_ftoa+0x438>
      buf[len++] = '-';
 800b96c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b96e:	1c5a      	adds	r2, r3, #1
 800b970:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b972:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b976:	4413      	add	r3, r2
 800b978:	222d      	movs	r2, #45	; 0x2d
 800b97a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800b97e:	e01c      	b.n	800b9ba <_ftoa+0x472>
    }
    else if (flags & FLAGS_PLUS) {
 800b980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b982:	f003 0304 	and.w	r3, r3, #4
 800b986:	2b00      	cmp	r3, #0
 800b988:	d009      	beq.n	800b99e <_ftoa+0x456>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800b98a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b990:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b994:	4413      	add	r3, r2
 800b996:	222b      	movs	r2, #43	; 0x2b
 800b998:	f803 2c48 	strb.w	r2, [r3, #-72]
 800b99c:	e00d      	b.n	800b9ba <_ftoa+0x472>
    }
    else if (flags & FLAGS_SPACE) {
 800b99e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9a0:	f003 0308 	and.w	r3, r3, #8
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d008      	beq.n	800b9ba <_ftoa+0x472>
      buf[len++] = ' ';
 800b9a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b9ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b9b2:	4413      	add	r3, r2
 800b9b4:	2220      	movs	r2, #32
 800b9b6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800b9ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9bc:	9303      	str	r3, [sp, #12]
 800b9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9c0:	9302      	str	r3, [sp, #8]
 800b9c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	f107 0318 	add.w	r3, r7, #24
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	6939      	ldr	r1, [r7, #16]
 800b9d2:	6978      	ldr	r0, [r7, #20]
 800b9d4:	f7ff fbb3 	bl	800b13e <_out_rev>
 800b9d8:	4603      	mov	r3, r0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3764      	adds	r7, #100	; 0x64
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd90      	pop	{r4, r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	66666667 	.word	0x66666667

0800b9e8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b9e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b9ec:	b09a      	sub	sp, #104	; 0x68
 800b9ee:	af06      	add	r7, sp, #24
 800b9f0:	6178      	str	r0, [r7, #20]
 800b9f2:	6139      	str	r1, [r7, #16]
 800b9f4:	60fa      	str	r2, [r7, #12]
 800b9f6:	60bb      	str	r3, [r7, #8]
 800b9f8:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800b9fc:	ed97 6b00 	vldr	d6, [r7]
 800ba00:	ed97 7b00 	vldr	d7, [r7]
 800ba04:	eeb4 6b47 	vcmp.f64	d6, d7
 800ba08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0c:	d111      	bne.n	800ba32 <_etoa+0x4a>
 800ba0e:	ed97 7b00 	vldr	d7, [r7]
 800ba12:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 800bd28 <_etoa+0x340>
 800ba16:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1e:	dc08      	bgt.n	800ba32 <_etoa+0x4a>
 800ba20:	ed97 7b00 	vldr	d7, [r7]
 800ba24:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 800bd30 <_etoa+0x348>
 800ba28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba30:	d50f      	bpl.n	800ba52 <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800ba32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba34:	9302      	str	r3, [sp, #8]
 800ba36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	ed97 0b00 	vldr	d0, [r7]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	6939      	ldr	r1, [r7, #16]
 800ba48:	6978      	ldr	r0, [r7, #20]
 800ba4a:	f7ff fd7d 	bl	800b548 <_ftoa>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	e1cd      	b.n	800bdee <_etoa+0x406>
  }

  // determine the sign
  const bool negative = value < 0;
 800ba52:	ed97 7b00 	vldr	d7, [r7]
 800ba56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ba5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5e:	bf4c      	ite	mi
 800ba60:	2301      	movmi	r3, #1
 800ba62:	2300      	movpl	r3, #0
 800ba64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 800ba68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d005      	beq.n	800ba7c <_etoa+0x94>
    value = -value;
 800ba70:	ed97 7b00 	vldr	d7, [r7]
 800ba74:	eeb1 7b47 	vneg.f64	d7, d7
 800ba78:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800ba7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800ba86:	2306      	movs	r3, #6
 800ba88:	663b      	str	r3, [r7, #96]	; 0x60
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800ba8a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ba8e:	e9c7 3406 	strd	r3, r4, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800ba92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba96:	f04f 0300 	mov.w	r3, #0
 800ba9a:	f04f 0400 	mov.w	r4, #0
 800ba9e:	0d13      	lsrs	r3, r2, #20
 800baa0:	2400      	movs	r4, #0
 800baa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800baa6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800baaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800baac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bab0:	f04f 31ff 	mov.w	r1, #4294967295
 800bab4:	4ab0      	ldr	r2, [pc, #704]	; (800bd78 <_etoa+0x390>)
 800bab6:	ea03 0b01 	and.w	fp, r3, r1
 800baba:	ea04 0c02 	and.w	ip, r4, r2
 800babe:	f04f 0100 	mov.w	r1, #0
 800bac2:	4aae      	ldr	r2, [pc, #696]	; (800bd7c <_etoa+0x394>)
 800bac4:	ea4b 0301 	orr.w	r3, fp, r1
 800bac8:	ea4c 0402 	orr.w	r4, ip, r2
 800bacc:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800bad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad2:	ee07 3a90 	vmov	s15, r3
 800bad6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bada:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800bd38 <_etoa+0x350>
 800bade:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bae2:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800bd40 <_etoa+0x358>
 800bae6:	ee37 6b06 	vadd.f64	d6, d7, d6
 800baea:	ed97 7b06 	vldr	d7, [r7, #24]
 800baee:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800baf2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800baf6:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800bd48 <_etoa+0x360>
 800bafa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bafe:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb02:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bb06:	ee17 3a90 	vmov	r3, s15
 800bb0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800bb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bb16:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 800bd50 <_etoa+0x368>
 800bb1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb1e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800bb22:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bb26:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bb2a:	ee17 3a90 	vmov	r3, s15
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800bb30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb32:	ee07 3a90 	vmov	s15, r3
 800bb36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bb3a:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800bd58 <_etoa+0x370>
 800bb3e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bb42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb44:	ee07 3a90 	vmov	s15, r3
 800bb48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bb4c:	ed9f 5b84 	vldr	d5, [pc, #528]	; 800bd60 <_etoa+0x378>
 800bb50:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bb54:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bb58:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 800bb5c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800bb60:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800bb64:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bb68:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800bb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bb72:	4619      	mov	r1, r3
 800bb74:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800bb78:	f04f 0300 	mov.w	r3, #0
 800bb7c:	f04f 0400 	mov.w	r4, #0
 800bb80:	050c      	lsls	r4, r1, #20
 800bb82:	2300      	movs	r3, #0
 800bb84:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800bb88:	ed97 6b06 	vldr	d6, [r7, #24]
 800bb8c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800bb90:	ee37 4b07 	vadd.f64	d4, d7, d7
 800bb94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bb98:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800bb9c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bba0:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800bba4:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 800bba8:	ee83 7b02 	vdiv.f64	d7, d3, d2
 800bbac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bbb0:	ee37 3b03 	vadd.f64	d3, d7, d3
 800bbb4:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800bbb8:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800bbbc:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 800bbc0:	ee37 3b03 	vadd.f64	d3, d7, d3
 800bbc4:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800bbc8:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800bbcc:	ee35 5b07 	vadd.f64	d5, d5, d7
 800bbd0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800bbd4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800bbd8:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bbdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bbe0:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 800bbe4:	ed97 7b06 	vldr	d7, [r7, #24]
 800bbe8:	ed97 6b00 	vldr	d6, [r7]
 800bbec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf4:	d50a      	bpl.n	800bc0c <_etoa+0x224>
    expval--;
 800bbf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800bbfc:	ed97 6b06 	vldr	d6, [r7, #24]
 800bc00:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800bc04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bc08:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800bc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc0e:	2b63      	cmp	r3, #99	; 0x63
 800bc10:	dc05      	bgt.n	800bc1e <_etoa+0x236>
 800bc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc14:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800bc18:	db01      	blt.n	800bc1e <_etoa+0x236>
 800bc1a:	2304      	movs	r3, #4
 800bc1c:	e000      	b.n	800bc20 <_etoa+0x238>
 800bc1e:	2305      	movs	r3, #5
 800bc20:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800bc22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d031      	beq.n	800bc90 <_etoa+0x2a8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800bc2c:	ed97 7b00 	vldr	d7, [r7]
 800bc30:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800bd68 <_etoa+0x380>
 800bc34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3c:	db1d      	blt.n	800bc7a <_etoa+0x292>
 800bc3e:	ed97 7b00 	vldr	d7, [r7]
 800bc42:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800bd70 <_etoa+0x388>
 800bc46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4e:	d514      	bpl.n	800bc7a <_etoa+0x292>
      if ((int)prec > expval) {
 800bc50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc54:	429a      	cmp	r2, r3
 800bc56:	da05      	bge.n	800bc64 <_etoa+0x27c>
        prec = (unsigned)((int)prec - expval - 1);
 800bc58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	663b      	str	r3, [r7, #96]	; 0x60
 800bc62:	e001      	b.n	800bc68 <_etoa+0x280>
      }
      else {
        prec = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	663b      	str	r3, [r7, #96]	; 0x60
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800bc68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc6e:	66bb      	str	r3, [r7, #104]	; 0x68
      // no characters in exponent
      minwidth = 0U;
 800bc70:	2300      	movs	r3, #0
 800bc72:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc78:	e00a      	b.n	800bc90 <_etoa+0x2a8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800bc7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d007      	beq.n	800bc90 <_etoa+0x2a8>
 800bc80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d002      	beq.n	800bc90 <_etoa+0x2a8>
        --prec;
 800bc8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	663b      	str	r3, [r7, #96]	; 0x60
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800bc90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc92:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800bc94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d904      	bls.n	800bca6 <_etoa+0x2be>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800bc9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	647b      	str	r3, [r7, #68]	; 0x44
 800bca4:	e001      	b.n	800bcaa <_etoa+0x2c2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800bca6:	2300      	movs	r3, #0
 800bca8:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800bcaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcac:	f003 0302 	and.w	r3, r3, #2
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d004      	beq.n	800bcbe <_etoa+0x2d6>
 800bcb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <_etoa+0x2d6>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800bcbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d007      	beq.n	800bcd4 <_etoa+0x2ec>
    value /= conv.F;
 800bcc4:	ed97 6b06 	vldr	d6, [r7, #24]
 800bcc8:	ed97 5b00 	vldr	d5, [r7]
 800bccc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bcd0:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800bcd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d004      	beq.n	800bcea <_etoa+0x302>
 800bce0:	ed97 7b00 	vldr	d7, [r7]
 800bce4:	eeb1 7b47 	vneg.f64	d7, d7
 800bce8:	e001      	b.n	800bcee <_etoa+0x306>
 800bcea:	ed97 7b00 	vldr	d7, [r7]
 800bcee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcf4:	9302      	str	r3, [sp, #8]
 800bcf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcf8:	9301      	str	r3, [sp, #4]
 800bcfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	eeb0 0b47 	vmov.f64	d0, d7
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	6939      	ldr	r1, [r7, #16]
 800bd08:	6978      	ldr	r0, [r7, #20]
 800bd0a:	f7ff fc1d 	bl	800b548 <_ftoa>
 800bd0e:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800bd10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d06a      	beq.n	800bdec <_etoa+0x404>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800bd16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd18:	f003 0320 	and.w	r3, r3, #32
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d02f      	beq.n	800bd80 <_etoa+0x398>
 800bd20:	2045      	movs	r0, #69	; 0x45
 800bd22:	e02e      	b.n	800bd82 <_etoa+0x39a>
 800bd24:	f3af 8000 	nop.w
 800bd28:	ffffffff 	.word	0xffffffff
 800bd2c:	7fefffff 	.word	0x7fefffff
 800bd30:	ffffffff 	.word	0xffffffff
 800bd34:	ffefffff 	.word	0xffefffff
 800bd38:	509f79fb 	.word	0x509f79fb
 800bd3c:	3fd34413 	.word	0x3fd34413
 800bd40:	8b60c8b3 	.word	0x8b60c8b3
 800bd44:	3fc68a28 	.word	0x3fc68a28
 800bd48:	636f4361 	.word	0x636f4361
 800bd4c:	3fd287a7 	.word	0x3fd287a7
 800bd50:	0979a371 	.word	0x0979a371
 800bd54:	400a934f 	.word	0x400a934f
 800bd58:	bbb55516 	.word	0xbbb55516
 800bd5c:	40026bb1 	.word	0x40026bb1
 800bd60:	fefa39ef 	.word	0xfefa39ef
 800bd64:	3fe62e42 	.word	0x3fe62e42
 800bd68:	eb1c432d 	.word	0xeb1c432d
 800bd6c:	3f1a36e2 	.word	0x3f1a36e2
 800bd70:	00000000 	.word	0x00000000
 800bd74:	412e8480 	.word	0x412e8480
 800bd78:	000fffff 	.word	0x000fffff
 800bd7c:	3ff00000 	.word	0x3ff00000
 800bd80:	2065      	movs	r0, #101	; 0x65
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	1c53      	adds	r3, r2, #1
 800bd86:	60fb      	str	r3, [r7, #12]
 800bd88:	697c      	ldr	r4, [r7, #20]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	6939      	ldr	r1, [r7, #16]
 800bd8e:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800bd90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	bfb8      	it	lt
 800bd96:	425b      	neglt	r3, r3
 800bd98:	4618      	mov	r0, r3
 800bd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd9c:	0fdb      	lsrs	r3, r3, #31
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bda2:	3a01      	subs	r2, #1
 800bda4:	2105      	movs	r1, #5
 800bda6:	9105      	str	r1, [sp, #20]
 800bda8:	9204      	str	r2, [sp, #16]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	9203      	str	r2, [sp, #12]
 800bdae:	220a      	movs	r2, #10
 800bdb0:	9202      	str	r2, [sp, #8]
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	9000      	str	r0, [sp, #0]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	6939      	ldr	r1, [r7, #16]
 800bdbc:	6978      	ldr	r0, [r7, #20]
 800bdbe:	f7ff faea 	bl	800b396 <_ntoa_long>
 800bdc2:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800bdc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdc6:	f003 0302 	and.w	r3, r3, #2
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00e      	beq.n	800bdec <_etoa+0x404>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800bdce:	e007      	b.n	800bde0 <_etoa+0x3f8>
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	1c53      	adds	r3, r2, #1
 800bdd4:	60fb      	str	r3, [r7, #12]
 800bdd6:	697c      	ldr	r4, [r7, #20]
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	6939      	ldr	r1, [r7, #16]
 800bddc:	2020      	movs	r0, #32
 800bdde:	47a0      	blx	r4
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d8f1      	bhi.n	800bdd0 <_etoa+0x3e8>
    }
  }
  return idx;
 800bdec:	68fb      	ldr	r3, [r7, #12]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3750      	adds	r7, #80	; 0x50
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bdf8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800bdf8:	b5b0      	push	{r4, r5, r7, lr}
 800bdfa:	b0a0      	sub	sp, #128	; 0x80
 800bdfc:	af0a      	add	r7, sp, #40	; 0x28
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
 800be04:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800be06:	2300      	movs	r3, #0
 800be08:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f040 848e 	bne.w	800c72e <_vsnprintf+0x936>
    // use null output function
    out = _out_null;
 800be12:	4ba0      	ldr	r3, [pc, #640]	; (800c094 <_vsnprintf+0x29c>)
 800be14:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800be16:	f000 bc8a 	b.w	800c72e <_vsnprintf+0x936>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	2b25      	cmp	r3, #37	; 0x25
 800be20:	d00d      	beq.n	800be3e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	7818      	ldrb	r0, [r3, #0]
 800be26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be28:	1c53      	adds	r3, r2, #1
 800be2a:	647b      	str	r3, [r7, #68]	; 0x44
 800be2c:	68fc      	ldr	r4, [r7, #12]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68b9      	ldr	r1, [r7, #8]
 800be32:	47a0      	blx	r4
      format++;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	3301      	adds	r3, #1
 800be38:	603b      	str	r3, [r7, #0]
      continue;
 800be3a:	f000 bc78 	b.w	800c72e <_vsnprintf+0x936>
    }
    else {
      // yes, evaluate it
      format++;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	3301      	adds	r3, #1
 800be42:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800be44:	2300      	movs	r3, #0
 800be46:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	3b20      	subs	r3, #32
 800be4e:	2b10      	cmp	r3, #16
 800be50:	d856      	bhi.n	800bf00 <_vsnprintf+0x108>
 800be52:	a201      	add	r2, pc, #4	; (adr r2, 800be58 <_vsnprintf+0x60>)
 800be54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be58:	0800bed9 	.word	0x0800bed9
 800be5c:	0800bf01 	.word	0x0800bf01
 800be60:	0800bf01 	.word	0x0800bf01
 800be64:	0800beed 	.word	0x0800beed
 800be68:	0800bf01 	.word	0x0800bf01
 800be6c:	0800bf01 	.word	0x0800bf01
 800be70:	0800bf01 	.word	0x0800bf01
 800be74:	0800bf01 	.word	0x0800bf01
 800be78:	0800bf01 	.word	0x0800bf01
 800be7c:	0800bf01 	.word	0x0800bf01
 800be80:	0800bf01 	.word	0x0800bf01
 800be84:	0800bec5 	.word	0x0800bec5
 800be88:	0800bf01 	.word	0x0800bf01
 800be8c:	0800beb1 	.word	0x0800beb1
 800be90:	0800bf01 	.word	0x0800bf01
 800be94:	0800bf01 	.word	0x0800bf01
 800be98:	0800be9d 	.word	0x0800be9d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800be9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be9e:	f043 0301 	orr.w	r3, r3, #1
 800bea2:	657b      	str	r3, [r7, #84]	; 0x54
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	3301      	adds	r3, #1
 800bea8:	603b      	str	r3, [r7, #0]
 800beaa:	2301      	movs	r3, #1
 800beac:	64bb      	str	r3, [r7, #72]	; 0x48
 800beae:	e02a      	b.n	800bf06 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800beb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beb2:	f043 0302 	orr.w	r3, r3, #2
 800beb6:	657b      	str	r3, [r7, #84]	; 0x54
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	3301      	adds	r3, #1
 800bebc:	603b      	str	r3, [r7, #0]
 800bebe:	2301      	movs	r3, #1
 800bec0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bec2:	e020      	b.n	800bf06 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800bec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bec6:	f043 0304 	orr.w	r3, r3, #4
 800beca:	657b      	str	r3, [r7, #84]	; 0x54
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	3301      	adds	r3, #1
 800bed0:	603b      	str	r3, [r7, #0]
 800bed2:	2301      	movs	r3, #1
 800bed4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bed6:	e016      	b.n	800bf06 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800bed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beda:	f043 0308 	orr.w	r3, r3, #8
 800bede:	657b      	str	r3, [r7, #84]	; 0x54
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	3301      	adds	r3, #1
 800bee4:	603b      	str	r3, [r7, #0]
 800bee6:	2301      	movs	r3, #1
 800bee8:	64bb      	str	r3, [r7, #72]	; 0x48
 800beea:	e00c      	b.n	800bf06 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800beec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beee:	f043 0310 	orr.w	r3, r3, #16
 800bef2:	657b      	str	r3, [r7, #84]	; 0x54
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	3301      	adds	r3, #1
 800bef8:	603b      	str	r3, [r7, #0]
 800befa:	2301      	movs	r3, #1
 800befc:	64bb      	str	r3, [r7, #72]	; 0x48
 800befe:	e002      	b.n	800bf06 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800bf00:	2300      	movs	r3, #0
 800bf02:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf04:	bf00      	nop
      }
    } while (n);
 800bf06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d19d      	bne.n	800be48 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7ff f8d7 	bl	800b0c8 <_is_digit>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <_vsnprintf+0x134>
      width = _atoi(&format);
 800bf20:	463b      	mov	r3, r7
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff f8e7 	bl	800b0f6 <_atoi>
 800bf28:	6538      	str	r0, [r7, #80]	; 0x50
 800bf2a:	e018      	b.n	800bf5e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	2b2a      	cmp	r3, #42	; 0x2a
 800bf32:	d114      	bne.n	800bf5e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800bf34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf36:	1d1a      	adds	r2, r3, #4
 800bf38:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	da07      	bge.n	800bf54 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800bf44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf46:	f043 0302 	orr.w	r3, r3, #2
 800bf4a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	425b      	negs	r3, r3
 800bf50:	653b      	str	r3, [r7, #80]	; 0x50
 800bf52:	e001      	b.n	800bf58 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b2e      	cmp	r3, #46	; 0x2e
 800bf68:	d124      	bne.n	800bfb4 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800bf6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf70:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	3301      	adds	r3, #1
 800bf76:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7ff f8a3 	bl	800b0c8 <_is_digit>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d005      	beq.n	800bf94 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800bf88:	463b      	mov	r3, r7
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7ff f8b3 	bl	800b0f6 <_atoi>
 800bf90:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bf92:	e00f      	b.n	800bfb4 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b2a      	cmp	r3, #42	; 0x2a
 800bf9a:	d10b      	bne.n	800bfb4 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800bf9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf9e:	1d1a      	adds	r2, r3, #4
 800bfa0:	66ba      	str	r2, [r7, #104]	; 0x68
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bfac:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	3b68      	subs	r3, #104	; 0x68
 800bfba:	2b12      	cmp	r3, #18
 800bfbc:	d866      	bhi.n	800c08c <_vsnprintf+0x294>
 800bfbe:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <_vsnprintf+0x1cc>)
 800bfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc4:	0800c037 	.word	0x0800c037
 800bfc8:	0800c08d 	.word	0x0800c08d
 800bfcc:	0800c06d 	.word	0x0800c06d
 800bfd0:	0800c08d 	.word	0x0800c08d
 800bfd4:	0800c011 	.word	0x0800c011
 800bfd8:	0800c08d 	.word	0x0800c08d
 800bfdc:	0800c08d 	.word	0x0800c08d
 800bfe0:	0800c08d 	.word	0x0800c08d
 800bfe4:	0800c08d 	.word	0x0800c08d
 800bfe8:	0800c08d 	.word	0x0800c08d
 800bfec:	0800c08d 	.word	0x0800c08d
 800bff0:	0800c08d 	.word	0x0800c08d
 800bff4:	0800c05d 	.word	0x0800c05d
 800bff8:	0800c08d 	.word	0x0800c08d
 800bffc:	0800c08d 	.word	0x0800c08d
 800c000:	0800c08d 	.word	0x0800c08d
 800c004:	0800c08d 	.word	0x0800c08d
 800c008:	0800c08d 	.word	0x0800c08d
 800c00c:	0800c07d 	.word	0x0800c07d
      case 'l' :
        flags |= FLAGS_LONG;
 800c010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c016:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	3301      	adds	r3, #1
 800c01c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	2b6c      	cmp	r3, #108	; 0x6c
 800c024:	d134      	bne.n	800c090 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800c026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c028:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c02c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	3301      	adds	r3, #1
 800c032:	603b      	str	r3, [r7, #0]
        }
        break;
 800c034:	e02c      	b.n	800c090 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800c036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c03c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	3301      	adds	r3, #1
 800c042:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	2b68      	cmp	r3, #104	; 0x68
 800c04a:	d125      	bne.n	800c098 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800c04c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c04e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c052:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	3301      	adds	r3, #1
 800c058:	603b      	str	r3, [r7, #0]
        }
        break;
 800c05a:	e01d      	b.n	800c098 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c05c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c05e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c062:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	3301      	adds	r3, #1
 800c068:	603b      	str	r3, [r7, #0]
        break;
 800c06a:	e016      	b.n	800c09a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c06c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c06e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c072:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	3301      	adds	r3, #1
 800c078:	603b      	str	r3, [r7, #0]
        break;
 800c07a:	e00e      	b.n	800c09a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c07c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c07e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c082:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	3301      	adds	r3, #1
 800c088:	603b      	str	r3, [r7, #0]
        break;
 800c08a:	e006      	b.n	800c09a <_vsnprintf+0x2a2>
      default :
        break;
 800c08c:	bf00      	nop
 800c08e:	e004      	b.n	800c09a <_vsnprintf+0x2a2>
        break;
 800c090:	bf00      	nop
 800c092:	e002      	b.n	800c09a <_vsnprintf+0x2a2>
 800c094:	0800b04d 	.word	0x0800b04d
        break;
 800c098:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	3b25      	subs	r3, #37	; 0x25
 800c0a0:	2b53      	cmp	r3, #83	; 0x53
 800c0a2:	f200 8337 	bhi.w	800c714 <_vsnprintf+0x91c>
 800c0a6:	a201      	add	r2, pc, #4	; (adr r2, 800c0ac <_vsnprintf+0x2b4>)
 800c0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ac:	0800c6fd 	.word	0x0800c6fd
 800c0b0:	0800c715 	.word	0x0800c715
 800c0b4:	0800c715 	.word	0x0800c715
 800c0b8:	0800c715 	.word	0x0800c715
 800c0bc:	0800c715 	.word	0x0800c715
 800c0c0:	0800c715 	.word	0x0800c715
 800c0c4:	0800c715 	.word	0x0800c715
 800c0c8:	0800c715 	.word	0x0800c715
 800c0cc:	0800c715 	.word	0x0800c715
 800c0d0:	0800c715 	.word	0x0800c715
 800c0d4:	0800c715 	.word	0x0800c715
 800c0d8:	0800c715 	.word	0x0800c715
 800c0dc:	0800c715 	.word	0x0800c715
 800c0e0:	0800c715 	.word	0x0800c715
 800c0e4:	0800c715 	.word	0x0800c715
 800c0e8:	0800c715 	.word	0x0800c715
 800c0ec:	0800c715 	.word	0x0800c715
 800c0f0:	0800c715 	.word	0x0800c715
 800c0f4:	0800c715 	.word	0x0800c715
 800c0f8:	0800c715 	.word	0x0800c715
 800c0fc:	0800c715 	.word	0x0800c715
 800c100:	0800c715 	.word	0x0800c715
 800c104:	0800c715 	.word	0x0800c715
 800c108:	0800c715 	.word	0x0800c715
 800c10c:	0800c715 	.word	0x0800c715
 800c110:	0800c715 	.word	0x0800c715
 800c114:	0800c715 	.word	0x0800c715
 800c118:	0800c715 	.word	0x0800c715
 800c11c:	0800c715 	.word	0x0800c715
 800c120:	0800c715 	.word	0x0800c715
 800c124:	0800c715 	.word	0x0800c715
 800c128:	0800c715 	.word	0x0800c715
 800c12c:	0800c4d1 	.word	0x0800c4d1
 800c130:	0800c489 	.word	0x0800c489
 800c134:	0800c4d1 	.word	0x0800c4d1
 800c138:	0800c715 	.word	0x0800c715
 800c13c:	0800c715 	.word	0x0800c715
 800c140:	0800c715 	.word	0x0800c715
 800c144:	0800c715 	.word	0x0800c715
 800c148:	0800c715 	.word	0x0800c715
 800c14c:	0800c715 	.word	0x0800c715
 800c150:	0800c715 	.word	0x0800c715
 800c154:	0800c715 	.word	0x0800c715
 800c158:	0800c715 	.word	0x0800c715
 800c15c:	0800c715 	.word	0x0800c715
 800c160:	0800c715 	.word	0x0800c715
 800c164:	0800c715 	.word	0x0800c715
 800c168:	0800c715 	.word	0x0800c715
 800c16c:	0800c715 	.word	0x0800c715
 800c170:	0800c715 	.word	0x0800c715
 800c174:	0800c715 	.word	0x0800c715
 800c178:	0800c1fd 	.word	0x0800c1fd
 800c17c:	0800c715 	.word	0x0800c715
 800c180:	0800c715 	.word	0x0800c715
 800c184:	0800c715 	.word	0x0800c715
 800c188:	0800c715 	.word	0x0800c715
 800c18c:	0800c715 	.word	0x0800c715
 800c190:	0800c715 	.word	0x0800c715
 800c194:	0800c715 	.word	0x0800c715
 800c198:	0800c715 	.word	0x0800c715
 800c19c:	0800c715 	.word	0x0800c715
 800c1a0:	0800c1fd 	.word	0x0800c1fd
 800c1a4:	0800c539 	.word	0x0800c539
 800c1a8:	0800c1fd 	.word	0x0800c1fd
 800c1ac:	0800c4d1 	.word	0x0800c4d1
 800c1b0:	0800c489 	.word	0x0800c489
 800c1b4:	0800c4d1 	.word	0x0800c4d1
 800c1b8:	0800c715 	.word	0x0800c715
 800c1bc:	0800c1fd 	.word	0x0800c1fd
 800c1c0:	0800c715 	.word	0x0800c715
 800c1c4:	0800c715 	.word	0x0800c715
 800c1c8:	0800c715 	.word	0x0800c715
 800c1cc:	0800c715 	.word	0x0800c715
 800c1d0:	0800c715 	.word	0x0800c715
 800c1d4:	0800c1fd 	.word	0x0800c1fd
 800c1d8:	0800c671 	.word	0x0800c671
 800c1dc:	0800c715 	.word	0x0800c715
 800c1e0:	0800c715 	.word	0x0800c715
 800c1e4:	0800c5ad 	.word	0x0800c5ad
 800c1e8:	0800c715 	.word	0x0800c715
 800c1ec:	0800c1fd 	.word	0x0800c1fd
 800c1f0:	0800c715 	.word	0x0800c715
 800c1f4:	0800c715 	.word	0x0800c715
 800c1f8:	0800c1fd 	.word	0x0800c1fd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b78      	cmp	r3, #120	; 0x78
 800c202:	d003      	beq.n	800c20c <_vsnprintf+0x414>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	2b58      	cmp	r3, #88	; 0x58
 800c20a:	d102      	bne.n	800c212 <_vsnprintf+0x41a>
          base = 16U;
 800c20c:	2310      	movs	r3, #16
 800c20e:	643b      	str	r3, [r7, #64]	; 0x40
 800c210:	e013      	b.n	800c23a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	2b6f      	cmp	r3, #111	; 0x6f
 800c218:	d102      	bne.n	800c220 <_vsnprintf+0x428>
          base =  8U;
 800c21a:	2308      	movs	r3, #8
 800c21c:	643b      	str	r3, [r7, #64]	; 0x40
 800c21e:	e00c      	b.n	800c23a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	2b62      	cmp	r3, #98	; 0x62
 800c226:	d102      	bne.n	800c22e <_vsnprintf+0x436>
          base =  2U;
 800c228:	2302      	movs	r3, #2
 800c22a:	643b      	str	r3, [r7, #64]	; 0x40
 800c22c:	e005      	b.n	800c23a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800c22e:	230a      	movs	r3, #10
 800c230:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800c232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c234:	f023 0310 	bic.w	r3, r3, #16
 800c238:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	2b58      	cmp	r3, #88	; 0x58
 800c240:	d103      	bne.n	800c24a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800c242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c244:	f043 0320 	orr.w	r3, r3, #32
 800c248:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b69      	cmp	r3, #105	; 0x69
 800c250:	d007      	beq.n	800c262 <_vsnprintf+0x46a>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b64      	cmp	r3, #100	; 0x64
 800c258:	d003      	beq.n	800c262 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800c25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c25c:	f023 030c 	bic.w	r3, r3, #12
 800c260:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800c262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800c26c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c26e:	f023 0301 	bic.w	r3, r3, #1
 800c272:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b69      	cmp	r3, #105	; 0x69
 800c27a:	d004      	beq.n	800c286 <_vsnprintf+0x48e>
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2b64      	cmp	r3, #100	; 0x64
 800c282:	f040 808d 	bne.w	800c3a0 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800c286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d02e      	beq.n	800c2ee <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800c290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c292:	3307      	adds	r3, #7
 800c294:	f023 0307 	bic.w	r3, r3, #7
 800c298:	f103 0208 	add.w	r2, r3, #8
 800c29c:	66ba      	str	r2, [r7, #104]	; 0x68
 800c29e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c2a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f174 0200 	sbcs.w	r2, r4, #0
 800c2b0:	da02      	bge.n	800c2b8 <_vsnprintf+0x4c0>
 800c2b2:	425b      	negs	r3, r3
 800c2b4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4622      	mov	r2, r4
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	0fdb      	lsrs	r3, r3, #31
 800c2c0:	b2d8      	uxtb	r0, r3
 800c2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2c4:	f04f 0400 	mov.w	r4, #0
 800c2c8:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800c2ca:	9508      	str	r5, [sp, #32]
 800c2cc:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800c2ce:	9507      	str	r5, [sp, #28]
 800c2d0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800c2d2:	9506      	str	r5, [sp, #24]
 800c2d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2d8:	9002      	str	r0, [sp, #8]
 800c2da:	e9cd 1200 	strd	r1, r2, [sp]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2e2:	68b9      	ldr	r1, [r7, #8]
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f7ff f8bd 	bl	800b464 <_ntoa_long_long>
 800c2ea:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800c2ec:	e0c8      	b.n	800c480 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800c2ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d01e      	beq.n	800c336 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800c2f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2fa:	1d1a      	adds	r2, r3, #4
 800c2fc:	66ba      	str	r2, [r7, #104]	; 0x68
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	2b00      	cmp	r3, #0
 800c306:	bfb8      	it	lt
 800c308:	425b      	neglt	r3, r3
 800c30a:	4619      	mov	r1, r3
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	0fdb      	lsrs	r3, r3, #31
 800c310:	b2db      	uxtb	r3, r3
 800c312:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c314:	9205      	str	r2, [sp, #20]
 800c316:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c318:	9204      	str	r2, [sp, #16]
 800c31a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c31c:	9203      	str	r2, [sp, #12]
 800c31e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c320:	9202      	str	r2, [sp, #8]
 800c322:	9301      	str	r3, [sp, #4]
 800c324:	9100      	str	r1, [sp, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c32a:	68b9      	ldr	r1, [r7, #8]
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f7ff f832 	bl	800b396 <_ntoa_long>
 800c332:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800c334:	e0a4      	b.n	800c480 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800c336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d005      	beq.n	800c34c <_vsnprintf+0x554>
 800c340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c342:	1d1a      	adds	r2, r3, #4
 800c344:	66ba      	str	r2, [r7, #104]	; 0x68
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	e00e      	b.n	800c36a <_vsnprintf+0x572>
 800c34c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c352:	2b00      	cmp	r3, #0
 800c354:	d005      	beq.n	800c362 <_vsnprintf+0x56a>
 800c356:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c358:	1d1a      	adds	r2, r3, #4
 800c35a:	66ba      	str	r2, [r7, #104]	; 0x68
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	b21b      	sxth	r3, r3
 800c360:	e003      	b.n	800c36a <_vsnprintf+0x572>
 800c362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c364:	1d1a      	adds	r2, r3, #4
 800c366:	66ba      	str	r2, [r7, #104]	; 0x68
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	bfb8      	it	lt
 800c372:	425b      	neglt	r3, r3
 800c374:	4619      	mov	r1, r3
 800c376:	6a3b      	ldr	r3, [r7, #32]
 800c378:	0fdb      	lsrs	r3, r3, #31
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c37e:	9205      	str	r2, [sp, #20]
 800c380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c382:	9204      	str	r2, [sp, #16]
 800c384:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c386:	9203      	str	r2, [sp, #12]
 800c388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c38a:	9202      	str	r2, [sp, #8]
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	9100      	str	r1, [sp, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c394:	68b9      	ldr	r1, [r7, #8]
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f7fe fffd 	bl	800b396 <_ntoa_long>
 800c39c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800c39e:	e06f      	b.n	800c480 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800c3a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d020      	beq.n	800c3ec <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800c3aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3ac:	3307      	adds	r3, #7
 800c3ae:	f023 0307 	bic.w	r3, r3, #7
 800c3b2:	f103 0208 	add.w	r2, r3, #8
 800c3b6:	66ba      	str	r2, [r7, #104]	; 0x68
 800c3b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c3bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3be:	4611      	mov	r1, r2
 800c3c0:	f04f 0200 	mov.w	r2, #0
 800c3c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c3c6:	9008      	str	r0, [sp, #32]
 800c3c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c3ca:	9007      	str	r0, [sp, #28]
 800c3cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c3ce:	9006      	str	r0, [sp, #24]
 800c3d0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	9202      	str	r2, [sp, #8]
 800c3d8:	e9cd 3400 	strd	r3, r4, [sp]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f7ff f83e 	bl	800b464 <_ntoa_long_long>
 800c3e8:	6478      	str	r0, [r7, #68]	; 0x44
 800c3ea:	e049      	b.n	800c480 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800c3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d016      	beq.n	800c424 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800c3f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3f8:	1d1a      	adds	r2, r3, #4
 800c3fa:	66ba      	str	r2, [r7, #104]	; 0x68
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c400:	9205      	str	r2, [sp, #20]
 800c402:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c404:	9204      	str	r2, [sp, #16]
 800c406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c408:	9203      	str	r2, [sp, #12]
 800c40a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c40c:	9202      	str	r2, [sp, #8]
 800c40e:	2200      	movs	r2, #0
 800c410:	9201      	str	r2, [sp, #4]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c418:	68b9      	ldr	r1, [r7, #8]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7fe ffbb 	bl	800b396 <_ntoa_long>
 800c420:	6478      	str	r0, [r7, #68]	; 0x44
 800c422:	e02d      	b.n	800c480 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800c424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d005      	beq.n	800c43a <_vsnprintf+0x642>
 800c42e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c430:	1d1a      	adds	r2, r3, #4
 800c432:	66ba      	str	r2, [r7, #104]	; 0x68
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	b2db      	uxtb	r3, r3
 800c438:	e00e      	b.n	800c458 <_vsnprintf+0x660>
 800c43a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c43c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c440:	2b00      	cmp	r3, #0
 800c442:	d005      	beq.n	800c450 <_vsnprintf+0x658>
 800c444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c446:	1d1a      	adds	r2, r3, #4
 800c448:	66ba      	str	r2, [r7, #104]	; 0x68
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	e003      	b.n	800c458 <_vsnprintf+0x660>
 800c450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c452:	1d1a      	adds	r2, r3, #4
 800c454:	66ba      	str	r2, [r7, #104]	; 0x68
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800c45a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c45c:	9305      	str	r3, [sp, #20]
 800c45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c460:	9304      	str	r3, [sp, #16]
 800c462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c464:	9303      	str	r3, [sp, #12]
 800c466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c468:	9302      	str	r3, [sp, #8]
 800c46a:	2300      	movs	r3, #0
 800c46c:	9301      	str	r3, [sp, #4]
 800c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c476:	68b9      	ldr	r1, [r7, #8]
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	f7fe ff8c 	bl	800b396 <_ntoa_long>
 800c47e:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	3301      	adds	r3, #1
 800c484:	603b      	str	r3, [r7, #0]
        break;
 800c486:	e152      	b.n	800c72e <_vsnprintf+0x936>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	2b46      	cmp	r3, #70	; 0x46
 800c48e:	d103      	bne.n	800c498 <_vsnprintf+0x6a0>
 800c490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c492:	f043 0320 	orr.w	r3, r3, #32
 800c496:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800c498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c49a:	3307      	adds	r3, #7
 800c49c:	f023 0307 	bic.w	r3, r3, #7
 800c4a0:	f103 0208 	add.w	r2, r3, #8
 800c4a4:	66ba      	str	r2, [r7, #104]	; 0x68
 800c4a6:	ed93 7b00 	vldr	d7, [r3]
 800c4aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4ac:	9302      	str	r3, [sp, #8]
 800c4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4b0:	9301      	str	r3, [sp, #4]
 800c4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	eeb0 0b47 	vmov.f64	d0, d7
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4be:	68b9      	ldr	r1, [r7, #8]
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f7ff f841 	bl	800b548 <_ftoa>
 800c4c6:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	603b      	str	r3, [r7, #0]
        break;
 800c4ce:	e12e      	b.n	800c72e <_vsnprintf+0x936>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b67      	cmp	r3, #103	; 0x67
 800c4d6:	d003      	beq.n	800c4e0 <_vsnprintf+0x6e8>
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b47      	cmp	r3, #71	; 0x47
 800c4de:	d103      	bne.n	800c4e8 <_vsnprintf+0x6f0>
 800c4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c4e6:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	2b45      	cmp	r3, #69	; 0x45
 800c4ee:	d003      	beq.n	800c4f8 <_vsnprintf+0x700>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	2b47      	cmp	r3, #71	; 0x47
 800c4f6:	d103      	bne.n	800c500 <_vsnprintf+0x708>
 800c4f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4fa:	f043 0320 	orr.w	r3, r3, #32
 800c4fe:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800c500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c502:	3307      	adds	r3, #7
 800c504:	f023 0307 	bic.w	r3, r3, #7
 800c508:	f103 0208 	add.w	r2, r3, #8
 800c50c:	66ba      	str	r2, [r7, #104]	; 0x68
 800c50e:	ed93 7b00 	vldr	d7, [r3]
 800c512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c514:	9302      	str	r3, [sp, #8]
 800c516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c518:	9301      	str	r3, [sp, #4]
 800c51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	eeb0 0b47 	vmov.f64	d0, d7
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c526:	68b9      	ldr	r1, [r7, #8]
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f7ff fa5d 	bl	800b9e8 <_etoa>
 800c52e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	3301      	adds	r3, #1
 800c534:	603b      	str	r3, [r7, #0]
        break;
 800c536:	e0fa      	b.n	800c72e <_vsnprintf+0x936>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800c538:	2301      	movs	r3, #1
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800c53c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c53e:	f003 0302 	and.w	r3, r3, #2
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10e      	bne.n	800c564 <_vsnprintf+0x76c>
          while (l++ < width) {
 800c546:	e007      	b.n	800c558 <_vsnprintf+0x760>
            out(' ', buffer, idx++, maxlen);
 800c548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c54a:	1c53      	adds	r3, r2, #1
 800c54c:	647b      	str	r3, [r7, #68]	; 0x44
 800c54e:	68fc      	ldr	r4, [r7, #12]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68b9      	ldr	r1, [r7, #8]
 800c554:	2020      	movs	r0, #32
 800c556:	47a0      	blx	r4
          while (l++ < width) {
 800c558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c55e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c560:	429a      	cmp	r2, r3
 800c562:	d8f1      	bhi.n	800c548 <_vsnprintf+0x750>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800c564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	66ba      	str	r2, [r7, #104]	; 0x68
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	b2d8      	uxtb	r0, r3
 800c56e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c570:	1c53      	adds	r3, r2, #1
 800c572:	647b      	str	r3, [r7, #68]	; 0x44
 800c574:	68fc      	ldr	r4, [r7, #12]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	68b9      	ldr	r1, [r7, #8]
 800c57a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800c57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c57e:	f003 0302 	and.w	r3, r3, #2
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00e      	beq.n	800c5a4 <_vsnprintf+0x7ac>
          while (l++ < width) {
 800c586:	e007      	b.n	800c598 <_vsnprintf+0x7a0>
            out(' ', buffer, idx++, maxlen);
 800c588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c58a:	1c53      	adds	r3, r2, #1
 800c58c:	647b      	str	r3, [r7, #68]	; 0x44
 800c58e:	68fc      	ldr	r4, [r7, #12]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	2020      	movs	r0, #32
 800c596:	47a0      	blx	r4
          while (l++ < width) {
 800c598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59a:	1c5a      	adds	r2, r3, #1
 800c59c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c59e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d8f1      	bhi.n	800c588 <_vsnprintf+0x790>
          }
        }
        format++;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	603b      	str	r3, [r7, #0]
        break;
 800c5aa:	e0c0      	b.n	800c72e <_vsnprintf+0x936>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800c5ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5ae:	1d1a      	adds	r2, r3, #4
 800c5b0:	66ba      	str	r2, [r7, #104]	; 0x68
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800c5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d001      	beq.n	800c5c0 <_vsnprintf+0x7c8>
 800c5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5be:	e001      	b.n	800c5c4 <_vsnprintf+0x7cc>
 800c5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5c8:	f7fe fd61 	bl	800b08e <_strnlen_s>
 800c5cc:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800c5ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d005      	beq.n	800c5e4 <_vsnprintf+0x7ec>
          l = (l < precision ? l : precision);
 800c5d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	bf28      	it	cs
 800c5e0:	4613      	movcs	r3, r2
 800c5e2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800c5e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e6:	f003 0302 	and.w	r3, r3, #2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d11a      	bne.n	800c624 <_vsnprintf+0x82c>
          while (l++ < width) {
 800c5ee:	e007      	b.n	800c600 <_vsnprintf+0x808>
            out(' ', buffer, idx++, maxlen);
 800c5f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5f2:	1c53      	adds	r3, r2, #1
 800c5f4:	647b      	str	r3, [r7, #68]	; 0x44
 800c5f6:	68fc      	ldr	r4, [r7, #12]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	68b9      	ldr	r1, [r7, #8]
 800c5fc:	2020      	movs	r0, #32
 800c5fe:	47a0      	blx	r4
          while (l++ < width) {
 800c600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c602:	1c5a      	adds	r2, r3, #1
 800c604:	637a      	str	r2, [r7, #52]	; 0x34
 800c606:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c608:	429a      	cmp	r2, r3
 800c60a:	d8f1      	bhi.n	800c5f0 <_vsnprintf+0x7f8>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800c60c:	e00a      	b.n	800c624 <_vsnprintf+0x82c>
          out(*(p++), buffer, idx++, maxlen);
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	63ba      	str	r2, [r7, #56]	; 0x38
 800c614:	7818      	ldrb	r0, [r3, #0]
 800c616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c618:	1c53      	adds	r3, r2, #1
 800c61a:	647b      	str	r3, [r7, #68]	; 0x44
 800c61c:	68fc      	ldr	r4, [r7, #12]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	68b9      	ldr	r1, [r7, #8]
 800c622:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d009      	beq.n	800c640 <_vsnprintf+0x848>
 800c62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c62e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0eb      	beq.n	800c60e <_vsnprintf+0x816>
 800c636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c638:	1e5a      	subs	r2, r3, #1
 800c63a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e6      	bne.n	800c60e <_vsnprintf+0x816>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800c640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c642:	f003 0302 	and.w	r3, r3, #2
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00e      	beq.n	800c668 <_vsnprintf+0x870>
          while (l++ < width) {
 800c64a:	e007      	b.n	800c65c <_vsnprintf+0x864>
            out(' ', buffer, idx++, maxlen);
 800c64c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c64e:	1c53      	adds	r3, r2, #1
 800c650:	647b      	str	r3, [r7, #68]	; 0x44
 800c652:	68fc      	ldr	r4, [r7, #12]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	68b9      	ldr	r1, [r7, #8]
 800c658:	2020      	movs	r0, #32
 800c65a:	47a0      	blx	r4
          while (l++ < width) {
 800c65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65e:	1c5a      	adds	r2, r3, #1
 800c660:	637a      	str	r2, [r7, #52]	; 0x34
 800c662:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c664:	429a      	cmp	r2, r3
 800c666:	d8f1      	bhi.n	800c64c <_vsnprintf+0x854>
          }
        }
        format++;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	3301      	adds	r3, #1
 800c66c:	603b      	str	r3, [r7, #0]
        break;
 800c66e:	e05e      	b.n	800c72e <_vsnprintf+0x936>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800c670:	2308      	movs	r3, #8
 800c672:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800c674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c676:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800c67a:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800c67c:	2300      	movs	r3, #0
 800c67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800c682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c686:	2b00      	cmp	r3, #0
 800c688:	d01d      	beq.n	800c6c6 <_vsnprintf+0x8ce>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800c68a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c68c:	1d1a      	adds	r2, r3, #4
 800c68e:	66ba      	str	r2, [r7, #104]	; 0x68
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f04f 0400 	mov.w	r4, #0
 800c696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c698:	9208      	str	r2, [sp, #32]
 800c69a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c69c:	9207      	str	r2, [sp, #28]
 800c69e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6a0:	9206      	str	r2, [sp, #24]
 800c6a2:	f04f 0110 	mov.w	r1, #16
 800c6a6:	f04f 0200 	mov.w	r2, #0
 800c6aa:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	9202      	str	r2, [sp, #8]
 800c6b2:	e9cd 3400 	strd	r3, r4, [sp]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ba:	68b9      	ldr	r1, [r7, #8]
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f7fe fed1 	bl	800b464 <_ntoa_long_long>
 800c6c2:	6478      	str	r0, [r7, #68]	; 0x44
 800c6c4:	e016      	b.n	800c6f4 <_vsnprintf+0x8fc>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800c6c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6c8:	1d1a      	adds	r2, r3, #4
 800c6ca:	66ba      	str	r2, [r7, #104]	; 0x68
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6d2:	9305      	str	r3, [sp, #20]
 800c6d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6d6:	9304      	str	r3, [sp, #16]
 800c6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6da:	9303      	str	r3, [sp, #12]
 800c6dc:	2310      	movs	r3, #16
 800c6de:	9302      	str	r3, [sp, #8]
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	9200      	str	r2, [sp, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f7fe fe52 	bl	800b396 <_ntoa_long>
 800c6f2:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	603b      	str	r3, [r7, #0]
        break;
 800c6fa:	e018      	b.n	800c72e <_vsnprintf+0x936>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800c6fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6fe:	1c53      	adds	r3, r2, #1
 800c700:	647b      	str	r3, [r7, #68]	; 0x44
 800c702:	68fc      	ldr	r4, [r7, #12]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	2025      	movs	r0, #37	; 0x25
 800c70a:	47a0      	blx	r4
        format++;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	3301      	adds	r3, #1
 800c710:	603b      	str	r3, [r7, #0]
        break;
 800c712:	e00c      	b.n	800c72e <_vsnprintf+0x936>

      default :
        out(*format, buffer, idx++, maxlen);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	7818      	ldrb	r0, [r3, #0]
 800c718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c71a:	1c53      	adds	r3, r2, #1
 800c71c:	647b      	str	r3, [r7, #68]	; 0x44
 800c71e:	68fc      	ldr	r4, [r7, #12]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	47a0      	blx	r4
        format++;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	3301      	adds	r3, #1
 800c72a:	603b      	str	r3, [r7, #0]
        break;
 800c72c:	bf00      	nop
  while (*format)
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	f47f ab71 	bne.w	800be1a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800c738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d302      	bcc.n	800c746 <_vsnprintf+0x94e>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	1e5a      	subs	r2, r3, #1
 800c744:	e000      	b.n	800c748 <_vsnprintf+0x950>
 800c746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c748:	68fc      	ldr	r4, [r7, #12]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	2000      	movs	r0, #0
 800c750:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800c752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c754:	4618      	mov	r0, r3
 800c756:	3758      	adds	r7, #88	; 0x58
 800c758:	46bd      	mov	sp, r7
 800c75a:	bdb0      	pop	{r4, r5, r7, pc}

0800c75c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800c75c:	b40f      	push	{r0, r1, r2, r3}
 800c75e:	b580      	push	{r7, lr}
 800c760:	b086      	sub	sp, #24
 800c762:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800c764:	f107 031c 	add.w	r3, r7, #28
 800c768:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800c76a:	1d39      	adds	r1, r7, #4
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	f04f 32ff 	mov.w	r2, #4294967295
 800c776:	4806      	ldr	r0, [pc, #24]	; (800c790 <printf_+0x34>)
 800c778:	f7ff fb3e 	bl	800bdf8 <_vsnprintf>
 800c77c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800c77e:	68fb      	ldr	r3, [r7, #12]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c78a:	b004      	add	sp, #16
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	0800b069 	.word	0x0800b069

0800c794 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 800c794:	b40e      	push	{r1, r2, r3}
 800c796:	b580      	push	{r7, lr}
 800c798:	b087      	sub	sp, #28
 800c79a:	af02      	add	r7, sp, #8
 800c79c:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800c79e:	f107 0320 	add.w	r3, r7, #32
 800c7a2:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ae:	6879      	ldr	r1, [r7, #4]
 800c7b0:	4805      	ldr	r0, [pc, #20]	; (800c7c8 <sprintf_+0x34>)
 800c7b2:	f7ff fb21 	bl	800bdf8 <_vsnprintf>
 800c7b6:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7c4:	b003      	add	sp, #12
 800c7c6:	4770      	bx	lr
 800c7c8:	0800b01f 	.word	0x0800b01f

0800c7cc <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c7d6:	ed97 0a01 	vldr	s0, [r7, #4]
 800c7da:	f01e f865 	bl	802a8a8 <asinf>
 800c7de:	eef0 7a40 	vmov.f32	s15, s0
 800c7e2:	eeb0 0a67 	vmov.f32	s0, s15
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c7f6:	edc7 0a00 	vstr	s1, [r7]
 800c7fa:	edd7 0a00 	vldr	s1, [r7]
 800c7fe:	ed97 0a01 	vldr	s0, [r7, #4]
 800c802:	f01e f8a5 	bl	802a950 <atan2f>
 800c806:	eef0 7a40 	vmov.f32	s15, s0
 800c80a:	eeb0 0a67 	vmov.f32	s0, s15
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c81e:	ed97 0a01 	vldr	s0, [r7, #4]
 800c822:	f01e f899 	bl	802a958 <sqrtf>
 800c826:	eef0 7a40 	vmov.f32	s15, s0
 800c82a:	eeb0 0a67 	vmov.f32	s0, s15
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:
	 *  \return variable is updated(true), variable is not updated(false)
	 *
	 *  setFunction :
	 *  \param[in]		variable		msgBus data is changed to input data
	 */
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 800c834:	b4b0      	push	{r4, r5, r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
 800c83e:	2300      	movs	r3, #0
 800c840:	73fb      	strb	r3, [r7, #15]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c84e:	42a2      	cmp	r2, r4
 800c850:	bf08      	it	eq
 800c852:	4299      	cmpeq	r1, r3
 800c854:	d001      	beq.n	800c85a <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x26>
 800c856:	2301      	movs	r3, #1
 800c858:	73fb      	strb	r3, [r7, #15]
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4614      	mov	r4, r2
 800c860:	461d      	mov	r5, r3
 800c862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c866:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c86a:	e884 0003 	stmia.w	r4, {r0, r1}
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
 800c870:	4618      	mov	r0, r3
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	bcb0      	pop	{r4, r5, r7}
 800c878:	4770      	bx	lr

0800c87a <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 800c87a:	b4b0      	push	{r4, r5, r7}
 800c87c:	b085      	sub	sp, #20
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	6039      	str	r1, [r7, #0]
 800c884:	2300      	movs	r3, #0
 800c886:	73fb      	strb	r3, [r7, #15]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800c894:	42a2      	cmp	r2, r4
 800c896:	bf08      	it	eq
 800c898:	4299      	cmpeq	r1, r3
 800c89a:	d001      	beq.n	800c8a0 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x26>
 800c89c:	2301      	movs	r3, #1
 800c89e:	73fb      	strb	r3, [r7, #15]
 800c8a0:	683a      	ldr	r2, [r7, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4615      	mov	r5, r2
 800c8a6:	f103 0418 	add.w	r4, r3, #24
 800c8aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c8b2:	e885 0003 	stmia.w	r5, {r0, r1}
 800c8b6:	7bfb      	ldrb	r3, [r7, #15]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bcb0      	pop	{r4, r5, r7}
 800c8c0:	4770      	bx	lr

0800c8c2 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 800c8c2:	b4b0      	push	{r4, r5, r7}
 800c8c4:	b085      	sub	sp, #20
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	6039      	str	r1, [r7, #0]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	73fb      	strb	r3, [r7, #15]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800c8dc:	42a2      	cmp	r2, r4
 800c8de:	bf08      	it	eq
 800c8e0:	4299      	cmpeq	r1, r3
 800c8e2:	d001      	beq.n	800c8e8 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x26>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	73fb      	strb	r3, [r7, #15]
 800c8e8:	683a      	ldr	r2, [r7, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4615      	mov	r5, r2
 800c8ee:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800c8f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c8fa:	e885 0003 	stmia.w	r5, {r0, r1}
 800c8fe:	7bfb      	ldrb	r3, [r7, #15]
 800c900:	4618      	mov	r0, r3
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	bcb0      	pop	{r4, r5, r7}
 800c908:	4770      	bx	lr

0800c90a <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:

    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
    SIMPLE_FUNC_IMPL(VehiclePositionSP, VehiclePositionSP, vehiclePositionSP)
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800c90a:	b4b0      	push	{r4, r5, r7}
 800c90c:	b083      	sub	sp, #12
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800c91c:	4615      	mov	r5, r2
 800c91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c926:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c92a:	e884 0003 	stmia.w	r4, {r0, r1}
 800c92e:	bf00      	nop
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	bcb0      	pop	{r4, r5, r7}
 800c936:	4770      	bx	lr

0800c938 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 800c938:	b4b0      	push	{r4, r5, r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	683a      	ldr	r2, [r7, #0]
 800c946:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800c94a:	4615      	mov	r5, r2
 800c94c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c94e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c950:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c954:	e884 0003 	stmia.w	r4, {r0, r1}
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bcb0      	pop	{r4, r5, r7}
 800c960:	4770      	bx	lr
	...

0800c964 <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 800c964:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800c968:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800c96a:	4b0e      	ldr	r3, [pc, #56]	; (800c9a4 <_ZL11microsecondv+0x40>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4619      	mov	r1, r3
 800c970:	f04f 0200 	mov.w	r2, #0
 800c974:	f04f 0b00 	mov.w	fp, #0
 800c978:	f04f 0c00 	mov.w	ip, #0
 800c97c:	468c      	mov	ip, r1
 800c97e:	f04f 0b00 	mov.w	fp, #0
 800c982:	4a09      	ldr	r2, [pc, #36]	; (800c9a8 <_ZL11microsecondv+0x44>)
 800c984:	6812      	ldr	r2, [r2, #0]
 800c986:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c988:	4611      	mov	r1, r2
 800c98a:	f04f 0200 	mov.w	r2, #0
 800c98e:	ea4b 0301 	orr.w	r3, fp, r1
 800c992:	ea4c 0402 	orr.w	r4, ip, r2
}
 800c996:	4618      	mov	r0, r3
 800c998:	4621      	mov	r1, r4
 800c99a:	46bd      	mov	sp, r7
 800c99c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	24000974 	.word	0x24000974
 800c9a8:	2400c62c 	.word	0x2400c62c

0800c9ac <_ZN2FC10ModuleAHRSC1Ev>:
#include "Lib/Matrix/matrix/Quaternion.hpp"
#include "cmath"

namespace FC{

ModuleAHRS::ModuleAHRS()
 800c9ac:	b590      	push	{r4, r7, lr}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
	, lastUpdate{0}
	, beta{0.6f}
	, q0{1.0f}
	, q1{0.0f}
	, q2{0.0f}
	, q3{0.0f}
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	6053      	str	r3, [r2, #4]
 800c9be:	6093      	str	r3, [r2, #8]
 800c9c0:	60d3      	str	r3, [r2, #12]
 800c9c2:	6113      	str	r3, [r2, #16]
 800c9c4:	6153      	str	r3, [r2, #20]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	3318      	adds	r3, #24
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	605a      	str	r2, [r3, #4]
 800c9d0:	609a      	str	r2, [r3, #8]
 800c9d2:	60da      	str	r2, [r3, #12]
 800c9d4:	611a      	str	r2, [r3, #16]
 800c9d6:	615a      	str	r2, [r3, #20]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	3330      	adds	r3, #48	; 0x30
 800c9dc:	2200      	movs	r2, #0
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	605a      	str	r2, [r3, #4]
 800c9e2:	609a      	str	r2, [r3, #8]
 800c9e4:	60da      	str	r2, [r3, #12]
 800c9e6:	611a      	str	r2, [r3, #16]
 800c9e8:	615a      	str	r2, [r3, #20]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	3348      	adds	r3, #72	; 0x48
 800c9ee:	2228      	movs	r2, #40	; 0x28
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f020 fc2b 	bl	802d24e <memset>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3370      	adds	r3, #112	; 0x70
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	605a      	str	r2, [r3, #4]
 800ca02:	609a      	str	r2, [r3, #8]
 800ca04:	60da      	str	r2, [r3, #12]
 800ca06:	611a      	str	r2, [r3, #16]
 800ca08:	615a      	str	r2, [r3, #20]
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	f04f 0300 	mov.w	r3, #0
 800ca10:	f04f 0400 	mov.w	r4, #0
 800ca14:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4a0e      	ldr	r2, [pc, #56]	; (800ca54 <_ZN2FC10ModuleAHRSC1Ev+0xa8>)
 800ca1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ca26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f04f 0200 	mov.w	r2, #0
 800ca30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f04f 0200 	mov.w	r2, #0
 800ca3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f04f 0200 	mov.w	r2, #0
 800ca44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
{

}
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd90      	pop	{r4, r7, pc}
 800ca52:	bf00      	nop
 800ca54:	3f19999a 	.word	0x3f19999a

0800ca58 <_ZN2FC10ModuleAHRS7oneStepEv>:

void ModuleAHRS::oneStep(){
 800ca58:	b590      	push	{r4, r7, lr}
 800ca5a:	b09d      	sub	sp, #116	; 0x74
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
	/* receive data */
	msgBus.getBodyAccel(&this->bodyAccelSub);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4619      	mov	r1, r3
 800ca64:	48c1      	ldr	r0, [pc, #772]	; (800cd6c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800ca66:	f7ff fee5 	bl	800c834 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
	msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	3318      	adds	r3, #24
 800ca6e:	4619      	mov	r1, r3
 800ca70:	48be      	ldr	r0, [pc, #760]	; (800cd6c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800ca72:	f7ff ff02 	bl	800c87a <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
//						   bodyAccelSub.xyz[2],
//						   bodyMagSub.xyz[0],
//						   bodyMagSub.xyz[1],
//						   bodyMagSub.xyz[2]);
//	}
	msgBus.getBodyMag(&this->bodyMagSub);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	3330      	adds	r3, #48	; 0x30
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	48bb      	ldr	r0, [pc, #748]	; (800cd6c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800ca7e:	f7ff ff20 	bl	800c8c2 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
	MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	edd3 7a08 	vldr	s15, [r3, #32]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	ed93 6a02 	vldr	s12, [r3, #8]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	edd3 5a03 	vldr	s11, [r3, #12]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	ed93 5a04 	vldr	s10, [r3, #16]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 800cab8:	eeb0 3a64 	vmov.f32	s6, s9
 800cabc:	eef0 2a45 	vmov.f32	s5, s10
 800cac0:	eeb0 2a65 	vmov.f32	s4, s11
 800cac4:	eef0 1a46 	vmov.f32	s3, s12
 800cac8:	eeb0 1a66 	vmov.f32	s2, s13
 800cacc:	eef0 0a47 	vmov.f32	s1, s14
 800cad0:	eeb0 0a67 	vmov.f32	s0, s15
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 f94f 	bl	800cd78 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
					   bodyMagSub.xyz[1],
					   bodyMagSub.xyz[2]);

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
	roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800cae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800caf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cafa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cafe:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cb0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800cb1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb22:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cb32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb36:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cb46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb4e:	eef0 0a67 	vmov.f32	s1, s15
 800cb52:	eeb0 0a46 	vmov.f32	s0, s12
 800cb56:	f7ff fe49 	bl	800c7ec <_ZSt5atan2ff>
 800cb5a:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cb6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cb7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb86:	eeb0 0a67 	vmov.f32	s0, s15
 800cb8a:	f7ff fe1f 	bl	800c7cc <_ZSt4asinf>
 800cb8e:	eef0 7a40 	vmov.f32	s15, s0
 800cb92:	eef1 7a67 	vneg.f32	s15, s15
 800cb96:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cbb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cbba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbbe:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cbce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800cbde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cbe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cbf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cbf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cc06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cc0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc0e:	eef0 0a67 	vmov.f32	s1, s15
 800cc12:	eeb0 0a46 	vmov.f32	s0, s12
 800cc16:	f7ff fde9 	bl	800c7ec <_ZSt5atan2ff>
 800cc1a:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64

	matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800cc36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cc3a:	eef0 1a46 	vmov.f32	s3, s12
 800cc3e:	eeb0 1a66 	vmov.f32	s2, s13
 800cc42:	eef0 0a47 	vmov.f32	s1, s14
 800cc46:	eeb0 0a67 	vmov.f32	s0, s15
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f001 fb5f 	bl	800e30e <_ZN6matrix10QuaternionIfEC1Effff>
	matrix::Dcmf dcm(quat/*.inversed()*/);		/* body -> NED DCM */
 800cc50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cc54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc58:	4611      	mov	r1, r2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f001 fbab 	bl	800e3b6 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
	matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
								   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	ed93 7a03 	vldr	s14, [r3, #12]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	edd3 6a04 	vldr	s13, [r3, #16]
 800cc72:	f107 0318 	add.w	r3, r7, #24
 800cc76:	eeb0 1a66 	vmov.f32	s2, s13
 800cc7a:	eef0 0a47 	vmov.f32	s1, s14
 800cc7e:	eeb0 0a67 	vmov.f32	s0, s15
 800cc82:	4618      	mov	r0, r3
 800cc84:	f001 fce0 	bl	800e648 <_ZN6matrix7Vector3IfEC1Efff>

	matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 800cc88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cc8c:	f107 0218 	add.w	r2, r7, #24
 800cc90:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 fd04 	bl	800e6a2 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 800cc9a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cc9e:	f107 030c 	add.w	r3, r7, #12
 800cca2:	4611      	mov	r1, r2
 800cca4:	4618      	mov	r0, r3
 800cca6:	f001 fd4d 	bl	800e744 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

	attitudePub.timestamp = microsecond();
 800ccaa:	f7ff fe5b 	bl	800c964 <_ZL11microsecondv>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	attitudePub.q[0] = this->q0;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	651a      	str	r2, [r3, #80]	; 0x50
	attitudePub.q[1] = this->q1;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	655a      	str	r2, [r3, #84]	; 0x54
	attitudePub.q[2] = this->q2;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	659a      	str	r2, [r3, #88]	; 0x58
	attitudePub.q[3] = this->q3;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	65da      	str	r2, [r3, #92]	; 0x5c
	attitudePub.roll = roll;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cce4:	661a      	str	r2, [r3, #96]	; 0x60
	attitudePub.pitch = pitch;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccea:	665a      	str	r2, [r3, #100]	; 0x64
	attitudePub.yaw = yaw;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ccf0:	669a      	str	r2, [r3, #104]	; 0x68

	msgBus.setAttitude(attitudePub);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	3348      	adds	r3, #72	; 0x48
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	481c      	ldr	r0, [pc, #112]	; (800cd6c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800ccfa:	f7ff fe06 	bl	800c90a <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

	nedAccelPub.timestamp = microsecond();
 800ccfe:	f7ff fe31 	bl	800c964 <_ZL11microsecondv>
 800cd02:	4603      	mov	r3, r0
 800cd04:	460c      	mov	r4, r1
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	nedAccelPub.xyz[0] = tempNedAccel(0);
 800cd0c:	f107 030c 	add.w	r3, r7, #12
 800cd10:	2100      	movs	r1, #0
 800cd12:	4618      	mov	r0, r3
 800cd14:	f001 fd3c 	bl	800e790 <_ZN6matrix6VectorIfLj3EEclEj>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	679a      	str	r2, [r3, #120]	; 0x78
	nedAccelPub.xyz[1] = tempNedAccel(1);
 800cd20:	f107 030c 	add.w	r3, r7, #12
 800cd24:	2101      	movs	r1, #1
 800cd26:	4618      	mov	r0, r3
 800cd28:	f001 fd32 	bl	800e790 <_ZN6matrix6VectorIfLj3EEclEj>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	67da      	str	r2, [r3, #124]	; 0x7c
	nedAccelPub.xyz[2] = tempNedAccel(2);
 800cd34:	f107 030c 	add.w	r3, r7, #12
 800cd38:	2102      	movs	r1, #2
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f001 fd28 	bl	800e790 <_ZN6matrix6VectorIfLj3EEclEj>
 800cd40:	4603      	mov	r3, r0
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	msgBus.setNedAccel(nedAccelPub);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3370      	adds	r3, #112	; 0x70
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4806      	ldr	r0, [pc, #24]	; (800cd6c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800cd52:	f7ff fdf1 	bl	800c938 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>

	/* Freq class variable */
	freqCnt++;
 800cd56:	4b06      	ldr	r3, [pc, #24]	; (800cd70 <_ZN2FC10ModuleAHRS7oneStepEv+0x318>)
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	4b04      	ldr	r3, [pc, #16]	; (800cd70 <_ZN2FC10ModuleAHRS7oneStepEv+0x318>)
 800cd60:	801a      	strh	r2, [r3, #0]
}
 800cd62:	bf00      	nop
 800cd64:	3774      	adds	r7, #116	; 0x74
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd90      	pop	{r4, r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	24000a50 	.word	0x24000a50
 800cd70:	24000978 	.word	0x24000978
 800cd74:	00000000 	.word	0x00000000

0800cd78 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 800cd78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800cd7c:	b0ae      	sub	sp, #184	; 0xb8
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6278      	str	r0, [r7, #36]	; 0x24
 800cd82:	ed87 0a08 	vstr	s0, [r7, #32]
 800cd86:	edc7 0a07 	vstr	s1, [r7, #28]
 800cd8a:	ed87 1a06 	vstr	s2, [r7, #24]
 800cd8e:	edc7 1a05 	vstr	s3, [r7, #20]
 800cd92:	ed87 2a04 	vstr	s4, [r7, #16]
 800cd96:	edc7 2a03 	vstr	s5, [r7, #12]
 800cd9a:	ed87 3a02 	vstr	s6, [r7, #8]
 800cd9e:	edc7 3a01 	vstr	s7, [r7, #4]
 800cda2:	ed87 4a00 	vstr	s8, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800cda6:	edd7 7a02 	vldr	s15, [r7, #8]
 800cdaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb2:	d11e      	bne.n	800cdf2 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
 800cdb4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc0:	d117      	bne.n	800cdf2 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
 800cdc2:	edd7 7a00 	vldr	s15, [r7]
 800cdc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdce:	d110      	bne.n	800cdf2 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800cdd0:	edd7 2a03 	vldr	s5, [r7, #12]
 800cdd4:	ed97 2a04 	vldr	s4, [r7, #16]
 800cdd8:	edd7 1a05 	vldr	s3, [r7, #20]
 800cddc:	ed97 1a06 	vldr	s2, [r7, #24]
 800cde0:	edd7 0a07 	vldr	s1, [r7, #28]
 800cde4:	ed97 0a08 	vldr	s0, [r7, #32]
 800cde8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdea:	f000 feed 	bl	800dbc8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 800cdee:	f000 bed9 	b.w	800dba4 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe2c>
		return;
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800cdf8:	eeb1 7a67 	vneg.f32	s14, s15
 800cdfc:	edd7 7a08 	vldr	s15, [r7, #32]
 800ce00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800ce0a:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce18:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800ce1c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ce20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ce2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce30:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ce3a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ce3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800ce48:	edd7 7a06 	vldr	s15, [r7, #24]
 800ce4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce50:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce56:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800ce5a:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ce6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce6e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce74:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ce78:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800ce86:	edd7 7a06 	vldr	s15, [r7, #24]
 800ce8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800ce98:	edd7 7a08 	vldr	s15, [r7, #32]
 800ce9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cea4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ceac:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800ceb6:	edd7 7a06 	vldr	s15, [r7, #24]
 800ceba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800cec4:	edd7 7a07 	vldr	s15, [r7, #28]
 800cec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800ced6:	edd7 7a08 	vldr	s15, [r7, #32]
 800ceda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cede:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cee2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ceea:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800ceee:	ed97 7a05 	vldr	s14, [r7, #20]
 800cef2:	edd7 7a05 	vldr	s15, [r7, #20]
 800cef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cefa:	edd7 6a04 	vldr	s13, [r7, #16]
 800cefe:	edd7 7a04 	vldr	s15, [r7, #16]
 800cf02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf06:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf0a:	edd7 6a03 	vldr	s13, [r7, #12]
 800cf0e:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf1a:	eeb0 0a67 	vmov.f32	s0, s15
 800cf1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf20:	f001 f998 	bl	800e254 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800cf24:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 800cf28:	ed97 7a05 	vldr	s14, [r7, #20]
 800cf2c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800cf30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf34:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 800cf38:	ed97 7a04 	vldr	s14, [r7, #16]
 800cf3c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800cf40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf44:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 800cf48:	ed97 7a03 	vldr	s14, [r7, #12]
 800cf4c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800cf50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf54:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800cf58:	ed97 7a02 	vldr	s14, [r7, #8]
 800cf5c:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf64:	edd7 6a01 	vldr	s13, [r7, #4]
 800cf68:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf70:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf74:	edd7 6a00 	vldr	s13, [r7]
 800cf78:	edd7 7a00 	vldr	s15, [r7]
 800cf7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf84:	eeb0 0a67 	vmov.f32	s0, s15
 800cf88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf8a:	f001 f963 	bl	800e254 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800cf8e:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 800cf92:	ed97 7a02 	vldr	s14, [r7, #8]
 800cf96:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800cf9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf9e:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 800cfa2:	ed97 7a01 	vldr	s14, [r7, #4]
 800cfa6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800cfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfae:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 800cfb2:	ed97 7a00 	vldr	s14, [r7]
 800cfb6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800cfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfbe:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 800cfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cfc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cfcc:	ed97 7a02 	vldr	s14, [r7, #8]
 800cfd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfd4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfda:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cfde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cfe2:	ed97 7a01 	vldr	s14, [r7, #4]
 800cfe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 800cfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cff4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cff8:	ed97 7a00 	vldr	s14, [r7]
 800cffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d000:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 800d004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d006:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d00a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d00e:	ed97 7a02 	vldr	s14, [r7, #8]
 800d012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d016:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d020:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d024:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 800d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d02e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d032:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 800d036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d038:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d03c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d040:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d04a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d04e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d058:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d066:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 800d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d070:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d07a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d07e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 800d082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d084:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d092:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 800d096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d098:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0a6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ba:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ce:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0e2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0f6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d10a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 800d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d110:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d11e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 800d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d124:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d132:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d138:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d146:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800d14a:	ed97 7a02 	vldr	s14, [r7, #8]
 800d14e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800d152:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d15c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800d160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d164:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d16e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800d172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d176:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d17a:	edd7 6a02 	vldr	s13, [r7, #8]
 800d17e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d18a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800d18e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d192:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d19c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1a4:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800d1a8:	edd7 7a00 	vldr	s15, [r7]
 800d1ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d1b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1be:	edd7 6a02 	vldr	s13, [r7, #8]
 800d1c2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d1c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d1ce:	edd7 6a02 	vldr	s13, [r7, #8]
 800d1d2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d1d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1de:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800d1e8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800d1ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1f0:	edd7 6a01 	vldr	s13, [r7, #4]
 800d1f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800d1f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d206:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800d20a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d20e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d214:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d218:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800d21c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d220:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d224:	edd7 6a01 	vldr	s13, [r7, #4]
 800d228:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d22c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d230:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d234:	edd7 6a01 	vldr	s13, [r7, #4]
 800d238:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d23c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d240:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d244:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800d248:	edd7 7a00 	vldr	s15, [r7]
 800d24c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d25a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d25e:	edd7 6a01 	vldr	s13, [r7, #4]
 800d262:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d26a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d26e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 800d272:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800d276:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800d27a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d27e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800d282:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800d286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d28a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d28e:	eeb0 0a67 	vmov.f32	s0, s15
 800d292:	f7ff fabf 	bl	800c814 <_ZSt4sqrtf>
 800d296:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800d29a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800d29e:	eeb1 7a67 	vneg.f32	s14, s15
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d2a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d2b2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800d2b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d2be:	edd7 6a00 	vldr	s13, [r7]
 800d2c2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800d2c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d2d4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800d2d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d2e0:	edd7 6a00 	vldr	s13, [r7]
 800d2e4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d2e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d2f0:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800d2f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d30a:	edd7 6a00 	vldr	s13, [r7]
 800d30e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d31a:	edd7 6a00 	vldr	s13, [r7]
 800d31e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d32a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 800d32e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d332:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d336:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 800d33a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d33e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d342:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800d346:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800d34a:	eeb1 7a67 	vneg.f32	s14, s15
 800d34e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d352:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d356:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d35a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d35e:	edd7 7a05 	vldr	s15, [r7, #20]
 800d362:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d36a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800d36e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d372:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800d376:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d37a:	edd7 7a04 	vldr	s15, [r7, #16]
 800d37e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d382:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800d386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d38a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d390:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d394:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d398:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d39c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d3a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d3a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d3a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d3ac:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d3b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d3b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d3b8:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800d3bc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800d3c0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d3c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d3c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d3cc:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d3d0:	edd7 7a02 	vldr	s15, [r7, #8]
 800d3d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d3d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d3e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d3e4:	eef1 6a67 	vneg.f32	s13, s15
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d3ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800d3f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d3fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d400:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d404:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800d408:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d40c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d410:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d414:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d418:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d41c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d420:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d424:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d428:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d42c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d430:	edd7 7a01 	vldr	s15, [r7, #4]
 800d434:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d43c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d442:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d446:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d44a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d44e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800d452:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d456:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d45a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d45e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d462:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d466:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d46a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d46e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d472:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d476:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d47a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d47e:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d482:	edd7 7a00 	vldr	s15, [r7]
 800d486:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d48a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d48e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d492:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800d496:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d49a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d49e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d4a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d4a6:	edd7 7a05 	vldr	s15, [r7, #20]
 800d4aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d4ae:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d4b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4b6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800d4ba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d4be:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800d4c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d4c6:	edd7 7a04 	vldr	s15, [r7, #16]
 800d4ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d4ce:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d4d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4dc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d4e0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d4e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d4e8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d4ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d4f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d4f4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d4f8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d4fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d500:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d504:	edd7 7a03 	vldr	s15, [r7, #12]
 800d508:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d50c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d510:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d51a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d51e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d522:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d526:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d52a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d52e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d532:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d536:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d53a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d53e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800d542:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800d546:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d54a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d54e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d552:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d556:	edd7 7a02 	vldr	s15, [r7, #8]
 800d55a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d55e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d562:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d568:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d56c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d570:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800d57a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d57e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d582:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d586:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800d58a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d58e:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d592:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d596:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d59a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d59e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d5a2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d5a6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d5aa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d5ae:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d5b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d5b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d5ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c4:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d5c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d5cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d2:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800d5d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d5da:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d5de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d5e2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800d5e6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d5ea:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d5ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d5f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d5f6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d5fa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d5fe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d602:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d606:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d60a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d60e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d612:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d616:	edd7 7a00 	vldr	s15, [r7]
 800d61a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d61e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d622:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d626:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800d62a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d62e:	eeb1 7a67 	vneg.f32	s14, s15
 800d632:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d636:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d63a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d63e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d642:	edd7 7a05 	vldr	s15, [r7, #20]
 800d646:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d64a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d64e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800d652:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d656:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800d65a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d65e:	edd7 7a04 	vldr	s15, [r7, #16]
 800d662:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d666:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d66a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d66e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d678:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d67c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d680:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d684:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d688:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d68c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d690:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d694:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d698:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d69c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d6a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d6a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d6ac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d6b0:	eef1 6a67 	vneg.f32	s13, s15
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d6ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800d6c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d6c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d6cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d6d0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d6d4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d6d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d6dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d6e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d6e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d6e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d6ec:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800d6f0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800d6f4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d6f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d6fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d700:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d704:	edd7 7a02 	vldr	s15, [r7, #8]
 800d708:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d70c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d710:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d71a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d71e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d724:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800d728:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d72c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d730:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d734:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800d738:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d73c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d740:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d744:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d748:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d74c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d750:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d754:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d758:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d75c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d760:	edd7 7a01 	vldr	s15, [r7, #4]
 800d764:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d76c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d772:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800d776:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d77a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d780:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800d784:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d788:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d78c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d790:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800d794:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d798:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d79c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d7a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d7a4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d7a8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d7ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d7b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d7b4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d7b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d7bc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d7c0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d7c4:	edd7 7a00 	vldr	s15, [r7]
 800d7c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d7cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7d4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800d7d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d7dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d7e0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d7e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d7e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d7f0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800d7f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7f8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800d7fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d800:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800d804:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d808:	edd7 7a04 	vldr	s15, [r7, #16]
 800d80c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d810:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800d814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d81c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d820:	eef1 6a67 	vneg.f32	s13, s15
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d82a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d830:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800d834:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d838:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d83c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d840:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d844:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d848:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d84c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d850:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d854:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d858:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d85c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800d860:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800d864:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d868:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d86c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d870:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d874:	edd7 7a02 	vldr	s15, [r7, #8]
 800d878:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d87c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d880:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d884:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d888:	eef1 6a67 	vneg.f32	s13, s15
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d892:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d898:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800d89c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d8a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d8a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d8a8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800d8ac:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d8b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d8b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d8b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d8bc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d8c0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d8c4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d8c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d8cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d8d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d8d4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d8d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d8dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e6:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d8ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d8ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d8f2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800d8f6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d8fa:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d8fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d902:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d906:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d90a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d90e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d912:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d916:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d91a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d91e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d922:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d926:	edd7 7a00 	vldr	s15, [r7]
 800d92a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d92e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d932:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d936:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800d93a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d93e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d942:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d946:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800d94a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d94e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d952:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d956:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800d95a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d95e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d962:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d966:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d96a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d96e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d972:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d976:	eeb0 0a67 	vmov.f32	s0, s15
 800d97a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d97c:	f000 fc6a 	bl	800e254 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800d980:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 800d984:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d988:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d98c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d990:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 800d994:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d998:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d99c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9a0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 800d9a4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d9a8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d9ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 800d9b4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d9b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d9bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800d9ca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9d2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800d9d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9da:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800d9e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d9e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ec:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800d9f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9f4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fa:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800d9fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800da02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da06:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800da0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da0e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 800da12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da14:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800da18:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800da1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da20:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800da24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da28:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)/1000000.0;	/*[second]*/
 800da2c:	f7fe ff9a 	bl	800c964 <_ZL11microsecondv>
 800da30:	460a      	mov	r2, r1
 800da32:	4601      	mov	r1, r0
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	e9d3 bc22 	ldrd	fp, ip, [r3, #136]	; 0x88
 800da3a:	460b      	mov	r3, r1
 800da3c:	4614      	mov	r4, r2
 800da3e:	ebb3 030b 	subs.w	r3, r3, fp
 800da42:	eb64 040c 	sbc.w	r4, r4, ip
 800da46:	4618      	mov	r0, r3
 800da48:	4621      	mov	r1, r4
 800da4a:	f7f2 fe27 	bl	800069c <__aeabi_ul2d>
 800da4e:	ec41 0b15 	vmov	d5, r0, r1
 800da52:	ed9f 6b57 	vldr	d6, [pc, #348]	; 800dbb0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe38>
 800da56:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800da5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800da5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 800da62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800da6a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800dbb8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe40>
 800da6e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da76:	dd01      	ble.n	800da7c <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xd04>
 800da78:	4b51      	ldr	r3, [pc, #324]	; (800dbc0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe48>)
 800da7a:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800da82:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da86:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800da8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da94:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800da9e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800daa2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800daa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800daaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab0:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab6:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800daba:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dabe:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800dac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800dad6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dada:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800dade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae8:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800daf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafe:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800db02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db04:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800db08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800db1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db20:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800db30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db38:	eeb0 0a67 	vmov.f32	s0, s15
 800db3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db3e:	f000 fb89 	bl	800e254 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800db42:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 800db46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db48:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800db4c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800db50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800db60:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800db64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800db6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db70:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800db74:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800db78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7e:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800db88:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800db8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800db96:	f7fe fee5 	bl	800c964 <_ZL11microsecondv>
 800db9a:	4603      	mov	r3, r0
 800db9c:	460c      	mov	r4, r1
 800db9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dba0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800dba4:	37b8      	adds	r7, #184	; 0xb8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800dbac:	f3af 8000 	nop.w
 800dbb0:	00000000 	.word	0x00000000
 800dbb4:	412e8480 	.word	0x412e8480
 800dbb8:	47ae147b 	.word	0x47ae147b
 800dbbc:	3f847ae1 	.word	0x3f847ae1
 800dbc0:	3c23d70a 	.word	0x3c23d70a
 800dbc4:	00000000 	.word	0x00000000

0800dbc8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800dbc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800dbcc:	b0a0      	sub	sp, #128	; 0x80
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	61f8      	str	r0, [r7, #28]
 800dbd2:	ed87 0a06 	vstr	s0, [r7, #24]
 800dbd6:	edc7 0a05 	vstr	s1, [r7, #20]
 800dbda:	ed87 1a04 	vstr	s2, [r7, #16]
 800dbde:	edc7 1a03 	vstr	s3, [r7, #12]
 800dbe2:	ed87 2a02 	vstr	s4, [r7, #8]
 800dbe6:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800dbf0:	eeb1 7a67 	vneg.f32	s14, s15
 800dbf4:	edd7 7a06 	vldr	s15, [r7, #24]
 800dbf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800dc02:	edd7 7a05 	vldr	s15, [r7, #20]
 800dc06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800dc14:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc24:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc28:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800dc32:	edd7 7a06 	vldr	s15, [r7, #24]
 800dc36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800dc40:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800dc52:	edd7 7a05 	vldr	s15, [r7, #20]
 800dc56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc66:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800dc70:	edd7 7a05 	vldr	s15, [r7, #20]
 800dc74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800dc7e:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc86:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800dc90:	edd7 7a06 	vldr	s15, [r7, #24]
 800dc94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dca4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800dcae:	edd7 7a04 	vldr	s15, [r7, #16]
 800dcb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800dcbc:	edd7 7a05 	vldr	s15, [r7, #20]
 800dcc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dcc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800dcce:	edd7 7a06 	vldr	s15, [r7, #24]
 800dcd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dcd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dcda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dcde:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dce2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800dce6:	ed97 7a03 	vldr	s14, [r7, #12]
 800dcea:	edd7 7a03 	vldr	s15, [r7, #12]
 800dcee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcf2:	edd7 6a02 	vldr	s13, [r7, #8]
 800dcf6:	edd7 7a02 	vldr	s15, [r7, #8]
 800dcfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dcfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd02:	edd7 6a01 	vldr	s13, [r7, #4]
 800dd06:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd12:	eeb0 0a67 	vmov.f32	s0, s15
 800dd16:	69f8      	ldr	r0, [r7, #28]
 800dd18:	f000 fa9c 	bl	800e254 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800dd1c:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 800dd20:	ed97 7a03 	vldr	s14, [r7, #12]
 800dd24:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800dd28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd2c:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 800dd30:	ed97 7a02 	vldr	s14, [r7, #8]
 800dd34:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800dd38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd3c:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 800dd40:	ed97 7a01 	vldr	s14, [r7, #4]
 800dd44:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800dd48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd4c:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dd56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd5a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800dd64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd68:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800dd72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd76:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800dd80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dd84:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dd8e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800dd92:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd96:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800dda0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800dda4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dda8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800ddb2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ddb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800ddc4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800ddc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddcc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800ddd6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800ddda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddde:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800ddee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddf2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800de02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de06:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800de16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de1a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800de2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de2e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800de32:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800de36:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800de3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de3e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800de42:	edd7 7a03 	vldr	s15, [r7, #12]
 800de46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de4e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800de52:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800de56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de5e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800de62:	edd7 7a02 	vldr	s15, [r7, #8]
 800de66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800de72:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800de76:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800de7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de7e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800de82:	edd7 7a03 	vldr	s15, [r7, #12]
 800de86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de8e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800de92:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800de96:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800dea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dea8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800deac:	edd7 7a02 	vldr	s15, [r7, #8]
 800deb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800deb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800deb8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800debc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dec0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800dec4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800dec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800decc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ded0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800ded4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ded8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dedc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dee0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800dee4:	edd7 7a01 	vldr	s15, [r7, #4]
 800dee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800deec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800def0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800def4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800def8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800defc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800df06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df0a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800df0e:	edd7 7a03 	vldr	s15, [r7, #12]
 800df12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df16:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df1a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800df1e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800df22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df26:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df2a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800df2e:	edd7 7a02 	vldr	s15, [r7, #8]
 800df32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df36:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df3a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800df3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df42:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800df46:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800df4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df52:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800df56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800df5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df62:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800df66:	edd7 7a01 	vldr	s15, [r7, #4]
 800df6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df72:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800df76:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800df7a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800df7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800df88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df8c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800df90:	edd7 7a03 	vldr	s15, [r7, #12]
 800df94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df98:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df9c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dfa0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800dfa4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800dfae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dfb6:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800dfba:	edd7 7a02 	vldr	s15, [r7, #8]
 800dfbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfc6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800dfca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dfce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dfd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfd6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800dfda:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dfde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dfe6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dfea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dfee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dff2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dff6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dffa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e002:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e006:	eeb0 0a67 	vmov.f32	s0, s15
 800e00a:	69f8      	ldr	r0, [r7, #28]
 800e00c:	f000 f922 	bl	800e254 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800e010:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 800e014:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e018:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e020:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 800e024:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e028:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e02c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e030:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 800e034:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e038:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e040:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 800e044:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e048:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e04c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e050:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800e05a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e062:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800e066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e06a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800e074:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e07c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800e080:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e084:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800e08e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e096:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800e09a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e09e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800e0a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0b0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800e0b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0b8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)/1000000.0;			/*[second]*/
 800e0bc:	f7fe fc52 	bl	800c964 <_ZL11microsecondv>
 800e0c0:	460a      	mov	r2, r1
 800e0c2:	4601      	mov	r1, r0
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	e9d3 bc22 	ldrd	fp, ip, [r3, #136]	; 0x88
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	4614      	mov	r4, r2
 800e0ce:	ebb3 030b 	subs.w	r3, r3, fp
 800e0d2:	eb64 040c 	sbc.w	r4, r4, ip
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	4621      	mov	r1, r4
 800e0da:	f7f2 fadf 	bl	800069c <__aeabi_ul2d>
 800e0de:	ec41 0b15 	vmov	d5, r0, r1
 800e0e2:	ed9f 6b57 	vldr	d6, [pc, #348]	; 800e240 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x678>
 800e0e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e0ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800e0ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 800e0f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e0f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e0fa:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800e248 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x680>
 800e0fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e106:	dd01      	ble.n	800e10c <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x544>
 800e108:	4b51      	ldr	r3, [pc, #324]	; (800e250 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x688>)
 800e10a:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e112:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e116:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800e11a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e11e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800e12e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e132:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800e136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e13a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800e14a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e14e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800e152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800e166:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e16a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800e16e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e172:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800e188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800e198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e19c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800e1ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800e1c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1c8:	eeb0 0a67 	vmov.f32	s0, s15
 800e1cc:	69f8      	ldr	r0, [r7, #28]
 800e1ce:	f000 f841 	bl	800e254 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800e1d2:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800e1dc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e1e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800e1f0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800e204:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800e218:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e21c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800e226:	f7fe fb9d 	bl	800c964 <_ZL11microsecondv>
 800e22a:	4603      	mov	r3, r0
 800e22c:	460c      	mov	r4, r1
 800e22e:	69fa      	ldr	r2, [r7, #28]
 800e230:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800e234:	bf00      	nop
 800e236:	3780      	adds	r7, #128	; 0x80
 800e238:	46bd      	mov	sp, r7
 800e23a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800e23e:	bf00      	nop
 800e240:	00000000 	.word	0x00000000
 800e244:	412e8480 	.word	0x412e8480
 800e248:	47ae147b 	.word	0x47ae147b
 800e24c:	3f847ae1 	.word	0x3f847ae1
 800e250:	3c23d70a 	.word	0x3c23d70a

0800e254 <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 800e254:	b480      	push	{r7}
 800e256:	b087      	sub	sp, #28
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 800e260:	edd7 7a00 	vldr	s15, [r7]
 800e264:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e26c:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800e274:	f107 0310 	add.w	r3, r7, #16
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	105a      	asrs	r2, r3, #1
 800e280:	4b12      	ldr	r3, [pc, #72]	; (800e2cc <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 800e282:	1a9b      	subs	r3, r3, r2
 800e284:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800e286:	f107 030c 	add.w	r3, r7, #12
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800e28e:	ed97 7a04 	vldr	s14, [r7, #16]
 800e292:	edd7 7a05 	vldr	s15, [r7, #20]
 800e296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e29a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2a2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800e2a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e2aa:	edd7 7a04 	vldr	s15, [r7, #16]
 800e2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2b2:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	ee07 3a90 	vmov	s15, r3
}
 800e2bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e2c0:	371c      	adds	r7, #28
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	5f3759df 	.word	0x5f3759df

0800e2d0 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	2300      	movs	r3, #0
 800e2de:	6013      	str	r3, [r2, #0]
 800e2e0:	6053      	str	r3, [r2, #4]
 800e2e2:	6093      	str	r3, [r2, #8]
 800e2e4:	60d3      	str	r3, [r2, #12]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff ffe6 	bl	800e2d0 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4618      	mov	r0, r3
 800e308:	3708      	adds	r7, #8
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 800e30e:	b580      	push	{r7, lr}
 800e310:	b088      	sub	sp, #32
 800e312:	af00      	add	r7, sp, #0
 800e314:	6178      	str	r0, [r7, #20]
 800e316:	ed87 0a04 	vstr	s0, [r7, #16]
 800e31a:	edc7 0a03 	vstr	s1, [r7, #12]
 800e31e:	ed87 1a02 	vstr	s2, [r7, #8]
 800e322:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	4618      	mov	r0, r3
 800e32a:	f7ff ffe3 	bl	800e2f4 <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	2100      	movs	r1, #0
 800e336:	4618      	mov	r0, r3
 800e338:	f000 fa4a 	bl	800e7d0 <_ZN6matrix6VectorIfLj4EEclEj>
 800e33c:	4602      	mov	r2, r0
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	6013      	str	r3, [r2, #0]
        q(1) = b;
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	2101      	movs	r1, #1
 800e346:	4618      	mov	r0, r3
 800e348:	f000 fa42 	bl	800e7d0 <_ZN6matrix6VectorIfLj4EEclEj>
 800e34c:	4602      	mov	r2, r0
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6013      	str	r3, [r2, #0]
        q(2) = c;
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	2102      	movs	r1, #2
 800e356:	4618      	mov	r0, r3
 800e358:	f000 fa3a 	bl	800e7d0 <_ZN6matrix6VectorIfLj4EEclEj>
 800e35c:	4602      	mov	r2, r0
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	6013      	str	r3, [r2, #0]
        q(3) = d;
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	2103      	movs	r1, #3
 800e366:	4618      	mov	r0, r3
 800e368:	f000 fa32 	bl	800e7d0 <_ZN6matrix6VectorIfLj4EEclEj>
 800e36c:	4602      	mov	r2, r0
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6013      	str	r3, [r2, #0]
    }
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	4618      	mov	r0, r3
 800e376:	3720      	adds	r7, #32
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4618      	mov	r0, r3
 800e388:	2324      	movs	r3, #36	; 0x24
 800e38a:	461a      	mov	r2, r3
 800e38c:	2100      	movs	r1, #0
 800e38e:	f01e ff5e 	bl	802d24e <memset>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4618      	mov	r0, r3
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7ff ffe8 	bl	800e37c <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	ed2d 8b02 	vpush	{d8}
 800e3bc:	b092      	sub	sp, #72	; 0x48
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	6039      	str	r1, [r7, #0]
    {
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff ffe8 	bl	800e39c <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2100      	movs	r1, #0
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f000 fa1b 	bl	800e810 <_ZNK6matrix6VectorIfLj4EEclEj>
 800e3da:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	2101      	movs	r1, #1
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f000 fa14 	bl	800e810 <_ZNK6matrix6VectorIfLj4EEclEj>
 800e3e8:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	2102      	movs	r1, #2
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f000 fa0d 	bl	800e810 <_ZNK6matrix6VectorIfLj4EEclEj>
 800e3f6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2103      	movs	r1, #3
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 fa06 	bl	800e810 <_ZNK6matrix6VectorIfLj4EEclEj>
 800e404:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 800e408:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800e40c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800e410:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e414:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 800e418:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800e41c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e420:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e424:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 800e428:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800e42c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e430:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e434:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 800e438:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800e43c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e440:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e444:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 800e448:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800e44c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e454:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 800e458:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800e45c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e464:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 800e468:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800e46c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e470:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e474:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 800e478:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800e47c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e480:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e484:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 800e488:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800e48c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e490:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e494:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 800e498:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e49c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4a4:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 800e4a8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e4ac:	edd7 7a08 	vldr	s15, [r7, #32]
 800e4b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e4b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800e4b8:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e4bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4be:	2200      	movs	r2, #0
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 f9c6 	bl	800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800e4ce:	ee78 7a67 	vsub.f32	s15, s16, s15
 800e4d2:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 800e4d6:	ed97 7a07 	vldr	s14, [r7, #28]
 800e4da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e4de:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f000 f9b3 	bl	800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e4f4:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 800e4f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e4fc:	edd7 7a06 	vldr	s15, [r7, #24]
 800e500:	ee37 8a27 	vadd.f32	s16, s14, s15
 800e504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e506:	2202      	movs	r2, #2
 800e508:	2100      	movs	r1, #0
 800e50a:	4618      	mov	r0, r3
 800e50c:	f000 f9a2 	bl	800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e510:	4603      	mov	r3, r0
 800e512:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e516:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 800e51a:	ed97 7a07 	vldr	s14, [r7, #28]
 800e51e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e522:	ee37 8a27 	vadd.f32	s16, s14, s15
 800e526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e528:	2200      	movs	r2, #0
 800e52a:	2101      	movs	r1, #1
 800e52c:	4618      	mov	r0, r3
 800e52e:	f000 f991 	bl	800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e532:	4603      	mov	r3, r0
 800e534:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e538:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 800e53c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e540:	edd7 7a08 	vldr	s15, [r7, #32]
 800e544:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e548:	edd7 7a05 	vldr	s15, [r7, #20]
 800e54c:	ee37 8a27 	vadd.f32	s16, s14, s15
 800e550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e552:	2201      	movs	r2, #1
 800e554:	2101      	movs	r1, #1
 800e556:	4618      	mov	r0, r3
 800e558:	f000 f97c 	bl	800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e55c:	4603      	mov	r3, r0
 800e55e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e562:	ee78 7a67 	vsub.f32	s15, s16, s15
 800e566:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 800e56a:	ed97 7a04 	vldr	s14, [r7, #16]
 800e56e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e572:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e578:	2202      	movs	r2, #2
 800e57a:	2101      	movs	r1, #1
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 f969 	bl	800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e582:	4603      	mov	r3, r0
 800e584:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e588:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 800e58c:	ed97 7a06 	vldr	s14, [r7, #24]
 800e590:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e594:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e59a:	2200      	movs	r2, #0
 800e59c:	2102      	movs	r1, #2
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 f958 	bl	800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e5aa:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 800e5ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e5b2:	edd7 7a04 	vldr	s15, [r7, #16]
 800e5b6:	ee37 8a27 	vadd.f32	s16, s14, s15
 800e5ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5bc:	2201      	movs	r2, #1
 800e5be:	2102      	movs	r1, #2
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 f947 	bl	800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e5cc:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 800e5d0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e5d4:	edd7 7a08 	vldr	s15, [r7, #32]
 800e5d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e5dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800e5e0:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e5e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5e6:	2202      	movs	r2, #2
 800e5e8:	2102      	movs	r1, #2
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f000 f932 	bl	800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	edd7 7a03 	vldr	s15, [r7, #12]
 800e5f6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e5fa:	edc3 7a00 	vstr	s15, [r3]
    }
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4618      	mov	r0, r3
 800e602:	3748      	adds	r7, #72	; 0x48
 800e604:	46bd      	mov	sp, r7
 800e606:	ecbd 8b02 	vpop	{d8}
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	461a      	mov	r2, r3
 800e618:	2300      	movs	r3, #0
 800e61a:	6013      	str	r3, [r2, #0]
 800e61c:	6053      	str	r3, [r2, #4]
 800e61e:	6093      	str	r3, [r2, #8]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4618      	mov	r0, r3
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <_ZN6matrix6VectorIfLj3EEC1Ev>:
 800e62e:	b580      	push	{r7, lr}
 800e630:	b082      	sub	sp, #8
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4618      	mov	r0, r3
 800e63a:	f7ff ffe7 	bl	800e60c <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4618      	mov	r0, r3
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	ed87 0a02 	vstr	s0, [r7, #8]
 800e654:	edc7 0a01 	vstr	s1, [r7, #4]
 800e658:	ed87 1a00 	vstr	s2, [r7]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	4618      	mov	r0, r3
 800e660:	f7ff ffe5 	bl	800e62e <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	617b      	str	r3, [r7, #20]
        v(0) = x;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	2100      	movs	r1, #0
 800e66c:	4618      	mov	r0, r3
 800e66e:	f000 f88f 	bl	800e790 <_ZN6matrix6VectorIfLj3EEclEj>
 800e672:	4602      	mov	r2, r0
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	6013      	str	r3, [r2, #0]
        v(1) = y;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	2101      	movs	r1, #1
 800e67c:	4618      	mov	r0, r3
 800e67e:	f000 f887 	bl	800e790 <_ZN6matrix6VectorIfLj3EEclEj>
 800e682:	4602      	mov	r2, r0
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6013      	str	r3, [r2, #0]
        v(2) = z;
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	2102      	movs	r1, #2
 800e68c:	4618      	mov	r0, r3
 800e68e:	f000 f87f 	bl	800e790 <_ZN6matrix6VectorIfLj3EEclEj>
 800e692:	4602      	mov	r2, r0
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	6013      	str	r3, [r2, #0]
    }
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	4618      	mov	r0, r3
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	ed2d 8b02 	vpush	{d8}
 800e6a8:	b088      	sub	sp, #32
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	60f8      	str	r0, [r7, #12]
 800e6ae:	60b9      	str	r1, [r7, #8]
 800e6b0:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	6013      	str	r3, [r2, #0]
 800e6be:	6053      	str	r3, [r2, #4]
 800e6c0:	6093      	str	r3, [r2, #8]
        res.setZero();
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f000 f8f4 	bl	800e8b0 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	61fb      	str	r3, [r7, #28]
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	2b02      	cmp	r3, #2
 800e6d0:	d831      	bhi.n	800e736 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	61bb      	str	r3, [r7, #24]
 800e6d6:	69bb      	ldr	r3, [r7, #24]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d128      	bne.n	800e72e <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 800e6dc:	2300      	movs	r3, #0
 800e6de:	617b      	str	r3, [r7, #20]
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	d81f      	bhi.n	800e726 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	69f9      	ldr	r1, [r7, #28]
 800e6ea:	6938      	ldr	r0, [r7, #16]
 800e6ec:	f000 f918 	bl	800e920 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 800e6f0:	eeb0 8a40 	vmov.f32	s16, s0
 800e6f4:	69ba      	ldr	r2, [r7, #24]
 800e6f6:	6979      	ldr	r1, [r7, #20]
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 f943 	bl	800e984 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 800e6fe:	eef0 7a40 	vmov.f32	s15, s0
 800e702:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e706:	69ba      	ldr	r2, [r7, #24]
 800e708:	69f9      	ldr	r1, [r7, #28]
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f000 f8de 	bl	800e8cc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800e710:	4603      	mov	r3, r0
 800e712:	edd3 7a00 	vldr	s15, [r3]
 800e716:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e71a:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	3301      	adds	r3, #1
 800e722:	617b      	str	r3, [r7, #20]
 800e724:	e7dc      	b.n	800e6e0 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	3301      	adds	r3, #1
 800e72a:	61bb      	str	r3, [r7, #24]
 800e72c:	e7d3      	b.n	800e6d6 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	3301      	adds	r3, #1
 800e732:	61fb      	str	r3, [r7, #28]
 800e734:	e7ca      	b.n	800e6cc <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 800e736:	bf00      	nop
    }
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	3720      	adds	r7, #32
 800e73c:	46bd      	mov	sp, r7
 800e73e:	ecbd 8b02 	vpop	{d8}
 800e742:	bd80      	pop	{r7, pc}

0800e744 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6839      	ldr	r1, [r7, #0]
 800e752:	4618      	mov	r0, r3
 800e754:	f000 f944 	bl	800e9e0 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4618      	mov	r0, r3
 800e75c:	3708      	adds	r7, #8
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}

0800e762 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 800e762:	b580      	push	{r7, lr}
 800e764:	b082      	sub	sp, #8
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
 800e76a:	6039      	str	r1, [r7, #0]
    {
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	461a      	mov	r2, r3
 800e770:	2300      	movs	r3, #0
 800e772:	6013      	str	r3, [r2, #0]
 800e774:	6053      	str	r3, [r2, #4]
 800e776:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6839      	ldr	r1, [r7, #0]
 800e77c:	220c      	movs	r2, #12
 800e77e:	4618      	mov	r0, r3
 800e780:	f01e fd5a 	bl	802d238 <memcpy>
    }
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4618      	mov	r0, r3
 800e788:	3708      	adds	r7, #8
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
	...

0800e790 <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	d905      	bls.n	800e7ac <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 800e7a0:	4b08      	ldr	r3, [pc, #32]	; (800e7c4 <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 800e7a2:	4a09      	ldr	r2, [pc, #36]	; (800e7c8 <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 800e7a4:	2137      	movs	r1, #55	; 0x37
 800e7a6:	4809      	ldr	r0, [pc, #36]	; (800e7cc <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 800e7a8:	f01e fcec 	bl	802d184 <__assert_func>

        MatrixM1 &v = *this;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f000 f889 	bl	800e8cc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800e7ba:	4603      	mov	r3, r0
    }
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	0802e320 	.word	0x0802e320
 800e7c8:	0802ed6c 	.word	0x0802ed6c
 800e7cc:	0802e328 	.word	0x0802e328

0800e7d0 <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	2b03      	cmp	r3, #3
 800e7de:	d905      	bls.n	800e7ec <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 800e7e0:	4b08      	ldr	r3, [pc, #32]	; (800e804 <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 800e7e2:	4a09      	ldr	r2, [pc, #36]	; (800e808 <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 800e7e4:	2137      	movs	r1, #55	; 0x37
 800e7e6:	4809      	ldr	r0, [pc, #36]	; (800e80c <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 800e7e8:	f01e fccc 	bl	802d184 <__assert_func>
        MatrixM1 &v = *this;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	6839      	ldr	r1, [r7, #0]
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f000 f903 	bl	800ea00 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 800e7fa:	4603      	mov	r3, r0
    }
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3710      	adds	r7, #16
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	0802e320 	.word	0x0802e320
 800e808:	0802e908 	.word	0x0802e908
 800e80c:	0802e328 	.word	0x0802e328

0800e810 <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	d905      	bls.n	800e82c <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 800e820:	4b09      	ldr	r3, [pc, #36]	; (800e848 <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 800e822:	4a0a      	ldr	r2, [pc, #40]	; (800e84c <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 800e824:	212e      	movs	r1, #46	; 0x2e
 800e826:	480a      	ldr	r0, [pc, #40]	; (800e850 <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 800e828:	f01e fcac 	bl	802d184 <__assert_func>
        const MatrixM1 &v = *this;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800e830:	2200      	movs	r2, #0
 800e832:	6839      	ldr	r1, [r7, #0]
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f000 f90d 	bl	800ea54 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 800e83a:	eef0 7a40 	vmov.f32	s15, s0
    }
 800e83e:	eeb0 0a67 	vmov.f32	s0, s15
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	0802e320 	.word	0x0802e320
 800e84c:	0802ea0c 	.word	0x0802ea0c
 800e850:	0802e328 	.word	0x0802e328

0800e854 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	2b02      	cmp	r3, #2
 800e864:	d905      	bls.n	800e872 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800e866:	4b0e      	ldr	r3, [pc, #56]	; (800e8a0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 800e868:	4a0e      	ldr	r2, [pc, #56]	; (800e8a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800e86a:	216e      	movs	r1, #110	; 0x6e
 800e86c:	480e      	ldr	r0, [pc, #56]	; (800e8a8 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800e86e:	f01e fc89 	bl	802d184 <__assert_func>
        assert(j < N);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2b02      	cmp	r3, #2
 800e876:	d905      	bls.n	800e884 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800e878:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800e87a:	4a0a      	ldr	r2, [pc, #40]	; (800e8a4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800e87c:	2170      	movs	r1, #112	; 0x70
 800e87e:	480a      	ldr	r0, [pc, #40]	; (800e8a8 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800e880:	f01e fc80 	bl	802d184 <__assert_func>
        return _data[i][j];
 800e884:	68ba      	ldr	r2, [r7, #8]
 800e886:	4613      	mov	r3, r2
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	4413      	add	r3, r2
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	4413      	add	r3, r2
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	4413      	add	r3, r2
    }
 800e896:	4618      	mov	r0, r3
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	0802e320 	.word	0x0802e320
 800e8a4:	0802eb1c 	.word	0x0802eb1c
 800e8a8:	0802e364 	.word	0x0802e364
 800e8ac:	0802e3a0 	.word	0x0802e3a0

0800e8b0 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	220c      	movs	r2, #12
 800e8bc:	2100      	movs	r1, #0
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f01e fcc5 	bl	802d24e <memset>
    }
 800e8c4:	bf00      	nop
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	d905      	bls.n	800e8ea <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800e8de:	4b0c      	ldr	r3, [pc, #48]	; (800e910 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 800e8e0:	4a0c      	ldr	r2, [pc, #48]	; (800e914 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800e8e2:	216e      	movs	r1, #110	; 0x6e
 800e8e4:	480c      	ldr	r0, [pc, #48]	; (800e918 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800e8e6:	f01e fc4d 	bl	802d184 <__assert_func>
        assert(j < N);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d005      	beq.n	800e8fc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800e8f0:	4b0a      	ldr	r3, [pc, #40]	; (800e91c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800e8f2:	4a08      	ldr	r2, [pc, #32]	; (800e914 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800e8f4:	2170      	movs	r1, #112	; 0x70
 800e8f6:	4808      	ldr	r0, [pc, #32]	; (800e918 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800e8f8:	f01e fc44 	bl	802d184 <__assert_func>
        return _data[i][j];
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4413      	add	r3, r2
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	4413      	add	r3, r2
    }
 800e908:	4618      	mov	r0, r3
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	0802e320 	.word	0x0802e320
 800e914:	0802ecdc 	.word	0x0802ecdc
 800e918:	0802e364 	.word	0x0802e364
 800e91c:	0802e3a0 	.word	0x0802e3a0

0800e920 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	2b02      	cmp	r3, #2
 800e930:	d905      	bls.n	800e93e <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800e932:	4b10      	ldr	r3, [pc, #64]	; (800e974 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800e934:	4a10      	ldr	r2, [pc, #64]	; (800e978 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800e936:	2164      	movs	r1, #100	; 0x64
 800e938:	4810      	ldr	r0, [pc, #64]	; (800e97c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800e93a:	f01e fc23 	bl	802d184 <__assert_func>
        assert(j < N);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b02      	cmp	r3, #2
 800e942:	d905      	bls.n	800e950 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800e944:	4b0e      	ldr	r3, [pc, #56]	; (800e980 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 800e946:	4a0c      	ldr	r2, [pc, #48]	; (800e978 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800e948:	2166      	movs	r1, #102	; 0x66
 800e94a:	480c      	ldr	r0, [pc, #48]	; (800e97c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800e94c:	f01e fc1a 	bl	802d184 <__assert_func>
        return _data[i][j];
 800e950:	68f9      	ldr	r1, [r7, #12]
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	4613      	mov	r3, r2
 800e956:	005b      	lsls	r3, r3, #1
 800e958:	4413      	add	r3, r2
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	4413      	add	r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	440b      	add	r3, r1
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	ee07 3a90 	vmov	s15, r3
    }
 800e968:	eeb0 0a67 	vmov.f32	s0, s15
 800e96c:	3710      	adds	r7, #16
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	0802e320 	.word	0x0802e320
 800e978:	0802ebac 	.word	0x0802ebac
 800e97c:	0802e364 	.word	0x0802e364
 800e980:	0802e3a0 	.word	0x0802e3a0

0800e984 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2b02      	cmp	r3, #2
 800e994:	d905      	bls.n	800e9a2 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800e996:	4b0e      	ldr	r3, [pc, #56]	; (800e9d0 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800e998:	4a0e      	ldr	r2, [pc, #56]	; (800e9d4 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800e99a:	2164      	movs	r1, #100	; 0x64
 800e99c:	480e      	ldr	r0, [pc, #56]	; (800e9d8 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800e99e:	f01e fbf1 	bl	802d184 <__assert_func>
        assert(j < N);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d005      	beq.n	800e9b4 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800e9a8:	4b0c      	ldr	r3, [pc, #48]	; (800e9dc <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 800e9aa:	4a0a      	ldr	r2, [pc, #40]	; (800e9d4 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800e9ac:	2166      	movs	r1, #102	; 0x66
 800e9ae:	480a      	ldr	r0, [pc, #40]	; (800e9d8 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800e9b0:	f01e fbe8 	bl	802d184 <__assert_func>
        return _data[i][j];
 800e9b4:	68fa      	ldr	r2, [r7, #12]
 800e9b6:	68b9      	ldr	r1, [r7, #8]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	440b      	add	r3, r1
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	4413      	add	r3, r2
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	ee07 3a90 	vmov	s15, r3
    }
 800e9c6:	eeb0 0a67 	vmov.f32	s0, s15
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	0802e320 	.word	0x0802e320
 800e9d4:	0802ec44 	.word	0x0802ec44
 800e9d8:	0802e364 	.word	0x0802e364
 800e9dc:	0802e3a0 	.word	0x0802e3a0

0800e9e0 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff feb7 	bl	800e762 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
	...

0800ea00 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	2b03      	cmp	r3, #3
 800ea10:	d905      	bls.n	800ea1e <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800ea12:	4b0c      	ldr	r3, [pc, #48]	; (800ea44 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 800ea14:	4a0c      	ldr	r2, [pc, #48]	; (800ea48 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800ea16:	216e      	movs	r1, #110	; 0x6e
 800ea18:	480c      	ldr	r0, [pc, #48]	; (800ea4c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800ea1a:	f01e fbb3 	bl	802d184 <__assert_func>
        assert(j < N);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d005      	beq.n	800ea30 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800ea24:	4b0a      	ldr	r3, [pc, #40]	; (800ea50 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800ea26:	4a08      	ldr	r2, [pc, #32]	; (800ea48 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800ea28:	2170      	movs	r1, #112	; 0x70
 800ea2a:	4808      	ldr	r0, [pc, #32]	; (800ea4c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800ea2c:	f01e fbaa 	bl	802d184 <__assert_func>
        return _data[i][j];
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4413      	add	r3, r2
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	4413      	add	r3, r2
    }
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	0802e320 	.word	0x0802e320
 800ea48:	0802e97c 	.word	0x0802e97c
 800ea4c:	0802e364 	.word	0x0802e364
 800ea50:	0802e3a0 	.word	0x0802e3a0

0800ea54 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	2b03      	cmp	r3, #3
 800ea64:	d905      	bls.n	800ea72 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800ea66:	4b0e      	ldr	r3, [pc, #56]	; (800eaa0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800ea68:	4a0e      	ldr	r2, [pc, #56]	; (800eaa4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800ea6a:	2164      	movs	r1, #100	; 0x64
 800ea6c:	480e      	ldr	r0, [pc, #56]	; (800eaa8 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800ea6e:	f01e fb89 	bl	802d184 <__assert_func>
        assert(j < N);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d005      	beq.n	800ea84 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800ea78:	4b0c      	ldr	r3, [pc, #48]	; (800eaac <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 800ea7a:	4a0a      	ldr	r2, [pc, #40]	; (800eaa4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800ea7c:	2166      	movs	r1, #102	; 0x66
 800ea7e:	480a      	ldr	r0, [pc, #40]	; (800eaa8 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800ea80:	f01e fb80 	bl	802d184 <__assert_func>
        return _data[i][j];
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	68b9      	ldr	r1, [r7, #8]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	440b      	add	r3, r1
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4413      	add	r3, r2
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	ee07 3a90 	vmov	s15, r3
    }
 800ea96:	eeb0 0a67 	vmov.f32	s0, s15
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	0802e320 	.word	0x0802e320
 800eaa4:	0802ea84 	.word	0x0802ea84
 800eaa8:	0802e364 	.word	0x0802e364
 800eaac:	0802e3a0 	.word	0x0802e3a0

0800eab0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 800eab0:	b490      	push	{r4, r7}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
 800eaba:	2300      	movs	r3, #0
 800eabc:	73fb      	strb	r3, [r7, #15]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 800eaca:	42a2      	cmp	r2, r4
 800eacc:	bf08      	it	eq
 800eace:	4299      	cmpeq	r1, r3
 800ead0:	d001      	beq.n	800ead6 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE+0x26>
 800ead2:	2301      	movs	r3, #1
 800ead4:	73fb      	strb	r3, [r7, #15]
 800ead6:	683a      	ldr	r2, [r7, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	4614      	mov	r4, r2
 800eadc:	33a8      	adds	r3, #168	; 0xa8
 800eade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eae4:	7bfb      	ldrb	r3, [r7, #15]
 800eae6:	4618      	mov	r0, r3
 800eae8:	3710      	adds	r7, #16
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bc90      	pop	{r4, r7}
 800eaee:	4770      	bx	lr

0800eaf0 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 800eaf0:	b4b0      	push	{r4, r5, r7}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
 800eafa:	2300      	movs	r3, #0
 800eafc:	73fb      	strb	r3, [r7, #15]
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	e9d3 1200 	ldrd	r1, r2, [r3]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 800eb0a:	42a2      	cmp	r2, r4
 800eb0c:	bf08      	it	eq
 800eb0e:	4299      	cmpeq	r1, r3
 800eb10:	d001      	beq.n	800eb16 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE+0x26>
 800eb12:	2301      	movs	r3, #1
 800eb14:	73fb      	strb	r3, [r7, #15]
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4615      	mov	r5, r2
 800eb1c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800eb20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb24:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eb28:	e885 0003 	stmia.w	r5, {r0, r1}
 800eb2c:	7bfb      	ldrb	r3, [r7, #15]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3714      	adds	r7, #20
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bcb0      	pop	{r4, r5, r7}
 800eb36:	4770      	bx	lr

0800eb38 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>:
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800eb38:	b4b0      	push	{r4, r5, r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
 800eb42:	2300      	movs	r3, #0
 800eb44:	73fb      	strb	r3, [r7, #15]
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	e9d3 1200 	ldrd	r1, r2, [r3]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 800eb52:	42a2      	cmp	r2, r4
 800eb54:	bf08      	it	eq
 800eb56:	4299      	cmpeq	r1, r3
 800eb58:	d001      	beq.n	800eb5e <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x26>
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	73fb      	strb	r3, [r7, #15]
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4615      	mov	r5, r2
 800eb64:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800eb68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb70:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eb74:	e885 0003 	stmia.w	r5, {r0, r1}
 800eb78:	7bfb      	ldrb	r3, [r7, #15]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3714      	adds	r7, #20
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bcb0      	pop	{r4, r5, r7}
 800eb82:	4770      	bx	lr

0800eb84 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>:

    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)

    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 800eb84:	b490      	push	{r4, r7}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	73fb      	strb	r3, [r7, #15]
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	e9d3 1200 	ldrd	r1, r2, [r3]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800eb9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eba2:	42a2      	cmp	r2, r4
 800eba4:	bf08      	it	eq
 800eba6:	4299      	cmpeq	r1, r3
 800eba8:	d001      	beq.n	800ebae <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x2a>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	73fb      	strb	r3, [r7, #15]
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	4614      	mov	r4, r2
 800ebb4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ebb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ebba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ebbe:	7bfb      	ldrb	r3, [r7, #15]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bc90      	pop	{r4, r7}
 800ebc8:	4770      	bx	lr

0800ebca <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>:

    SIMPLE_FUNC_IMPL(Health, Health, health)

    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 800ebca:	b4b0      	push	{r4, r5, r7}
 800ebcc:	b083      	sub	sp, #12
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	6039      	str	r1, [r7, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	683a      	ldr	r2, [r7, #0]
 800ebd8:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800ebdc:	4615      	mov	r5, r2
 800ebde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebe2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ebe6:	e884 0003 	stmia.w	r4, {r0, r1}
 800ebea:	bf00      	nop
 800ebec:	370c      	adds	r7, #12
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bcb0      	pop	{r4, r5, r7}
 800ebf2:	4770      	bx	lr

0800ebf4 <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>:
  ~px4_AlgorithmModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_Second_att_control_codeb_T
 800ebf4:	b4b0      	push	{r4, r5, r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
    * pExtU_Second_att_control_codeb_T)
  {
    Second_att_control_codeblock__U = *pExtU_Second_att_control_codeb_T;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	683a      	ldr	r2, [r7, #0]
 800ec02:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 800ec06:	4615      	mov	r5, r2
 800ec08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	6023      	str	r3, [r4, #0]
  }
 800ec14:	bf00      	nop
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bcb0      	pop	{r4, r5, r7}
 800ec1c:	4770      	bx	lr

0800ec1e <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const px4_AlgorithmModelClass::ExtY_Second_att_control_codeb_T
    & getExternalOutputs() const
 800ec1e:	b480      	push	{r7}
 800ec20:	b083      	sub	sp, #12
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  {
    return Second_att_control_codeblock__Y;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f503 7386 	add.w	r3, r3, #268	; 0x10c
  }
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800ec38:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800ec3c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800ec3e:	4b0e      	ldr	r3, [pc, #56]	; (800ec78 <_ZL11microsecondv+0x40>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4619      	mov	r1, r3
 800ec44:	f04f 0200 	mov.w	r2, #0
 800ec48:	f04f 0b00 	mov.w	fp, #0
 800ec4c:	f04f 0c00 	mov.w	ip, #0
 800ec50:	468c      	mov	ip, r1
 800ec52:	f04f 0b00 	mov.w	fp, #0
 800ec56:	4a09      	ldr	r2, [pc, #36]	; (800ec7c <_ZL11microsecondv+0x44>)
 800ec58:	6812      	ldr	r2, [r2, #0]
 800ec5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	f04f 0200 	mov.w	r2, #0
 800ec62:	ea4b 0301 	orr.w	r3, fp, r1
 800ec66:	ea4c 0402 	orr.w	r4, ip, r2
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	2400097c 	.word	0x2400097c
 800ec7c:	2400c62c 	.word	0x2400c62c

0800ec80 <_ZN2FCL3mapEtttff>:

#include "Constant.h"

namespace FC{

static float map(uint16_t value, uint16_t in_min, uint16_t in_max, float out_min, float out_max){
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	4603      	mov	r3, r0
 800ec88:	ed87 0a01 	vstr	s0, [r7, #4]
 800ec8c:	edc7 0a00 	vstr	s1, [r7]
 800ec90:	81fb      	strh	r3, [r7, #14]
 800ec92:	460b      	mov	r3, r1
 800ec94:	81bb      	strh	r3, [r7, #12]
 800ec96:	4613      	mov	r3, r2
 800ec98:	817b      	strh	r3, [r7, #10]
	return (float)(value - in_min)*(out_max - out_min) / (in_max - in_min) + out_min;
 800ec9a:	89fa      	ldrh	r2, [r7, #14]
 800ec9c:	89bb      	ldrh	r3, [r7, #12]
 800ec9e:	1ad3      	subs	r3, r2, r3
 800eca0:	ee07 3a90 	vmov	s15, r3
 800eca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eca8:	edd7 6a00 	vldr	s13, [r7]
 800ecac:	edd7 7a01 	vldr	s15, [r7, #4]
 800ecb0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ecb4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ecb8:	897a      	ldrh	r2, [r7, #10]
 800ecba:	89bb      	ldrh	r3, [r7, #12]
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	ee07 3a90 	vmov	s15, r3
 800ecc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecca:	edd7 7a01 	vldr	s15, [r7, #4]
 800ecce:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800ecd2:	eeb0 0a67 	vmov.f32	s0, s15
 800ecd6:	3714      	adds	r7, #20
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <_ZN2FC24ModuleAttitudeControllerC1Ev>:
#include "Utils/function.h"
#include "printf.h"

namespace FC {

ModuleAttitudeController::ModuleAttitudeController(){}
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7f5 fcde 	bl	80046ac <_ZN23px4_AlgorithmModelClassC1Ev>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
	...

0800ecfc <_ZN2FC24ModuleAttitudeController7oneStepEv>:

void ModuleAttitudeController::oneStep(){
 800ecfc:	b5b0      	push	{r4, r5, r7, lr}
 800ecfe:	b092      	sub	sp, #72	; 0x48
 800ed00:	af04      	add	r7, sp, #16
 800ed02:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	4840      	ldr	r0, [pc, #256]	; (800ee10 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800ed0e:	f7ff ff39 	bl	800eb84 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>

	/* not armed */
	if(modeFlagSub.armMode != Command::Arm){
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800ed18:	2b08      	cmp	r3, #8
 800ed1a:	d012      	beq.n	800ed42 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x46>
		setMotor(1000, 1000, 1000, 1000, 1000, 1000);
 800ed1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed20:	9302      	str	r3, [sp, #8]
 800ed22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed26:	9301      	str	r3, [sp, #4]
 800ed28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed2c:	9300      	str	r3, [sp, #0]
 800ed2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 f8f4 	bl	800ef28 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
 800ed40:	e062      	b.n	800ee08 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x10c>
//		armFlag = true;
//		initialize();
//	}

	/* manual control */
	if(modeFlagSub.flightMode == Command::ControlAttitude){
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d103      	bne.n	800ed54 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x58>
		setFromRC();
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 f88b 	bl	800ee68 <_ZN2FC24ModuleAttitudeController9setFromRCEv>
 800ed52:	e002      	b.n	800ed5a <_ZN2FC24ModuleAttitudeController7oneStepEv+0x5e>
	}
	/* position control */
	else{
		setFromPositionController();
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 f85d 	bl	800ee14 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>
	}

	ExtU_Second_att_control_codeb_T input;
	input.set_pitch = targetPitch;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800ed60:	633b      	str	r3, [r7, #48]	; 0x30
	input.set_roll = targetRoll;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800ed68:	62fb      	str	r3, [r7, #44]	; 0x2c
	input.set_yaw = targetYawRate;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ed70:	637b      	str	r3, [r7, #52]	; 0x34
	input.set_thrust = targetThrottle;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800ed78:	62bb      	str	r3, [r7, #40]	; 0x28

	msgBus.getAttitude(&attitudeSub);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800ed80:	4619      	mov	r1, r3
 800ed82:	4823      	ldr	r0, [pc, #140]	; (800ee10 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800ed84:	f7ff fed8 	bl	800eb38 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	msgBus.getBodyAngularVelocity(&bodyAngularVelocitySub);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ed8e:	4619      	mov	r1, r3
 800ed90:	481f      	ldr	r0, [pc, #124]	; (800ee10 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800ed92:	f7fd fd72 	bl	800c87a <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	input.Roll = attitudeSub.roll;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800ed9c:	617b      	str	r3, [r7, #20]
	input.Pitch = attitudeSub.pitch;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800eda4:	61bb      	str	r3, [r7, #24]
	input.p = bodyAngularVelocitySub.xyz[0];
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800edac:	61fb      	str	r3, [r7, #28]
	input.q = bodyAngularVelocitySub.xyz[1];
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800edb4:	623b      	str	r3, [r7, #32]
	input.r = bodyAngularVelocitySub.xyz[2];
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800edbc:	627b      	str	r3, [r7, #36]	; 0x24

	/* matlab codegen function */
	setExternalInputs(&input);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f107 0214 	add.w	r2, r7, #20
 800edc4:	4611      	mov	r1, r2
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7ff ff14 	bl	800ebf4 <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>
	step();
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4618      	mov	r0, r3
 800edd0:	f7f4 fece 	bl	8003b70 <_ZN23px4_AlgorithmModelClass4stepEv>
	ExtY_Second_att_control_codeb_T output = getExternalOutputs();
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7ff ff21 	bl	800ec1e <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>
 800eddc:	4602      	mov	r2, r0
 800edde:	f107 0308 	add.w	r3, r7, #8
 800ede2:	6810      	ldr	r0, [r2, #0]
 800ede4:	6851      	ldr	r1, [r2, #4]
 800ede6:	6892      	ldr	r2, [r2, #8]
 800ede8:	c307      	stmia	r3!, {r0, r1, r2}

	/* set motor pwm */
	setMotor((uint16_t)output.PWM_OUT[0],
 800edea:	8938      	ldrh	r0, [r7, #8]
			 (uint16_t)output.PWM_OUT[1],
 800edec:	897c      	ldrh	r4, [r7, #10]
			 (uint16_t)output.PWM_OUT[2],
 800edee:	89bd      	ldrh	r5, [r7, #12]
			 (uint16_t)output.PWM_OUT[3],
 800edf0:	89fb      	ldrh	r3, [r7, #14]
			 (uint16_t)output.PWM_OUT[4],
 800edf2:	8a3a      	ldrh	r2, [r7, #16]
			 (uint16_t)output.PWM_OUT[5]);
 800edf4:	8a79      	ldrh	r1, [r7, #18]
	setMotor((uint16_t)output.PWM_OUT[0],
 800edf6:	9102      	str	r1, [sp, #8]
 800edf8:	9201      	str	r2, [sp, #4]
 800edfa:	9300      	str	r3, [sp, #0]
 800edfc:	462b      	mov	r3, r5
 800edfe:	4622      	mov	r2, r4
 800ee00:	4601      	mov	r1, r0
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 f890 	bl	800ef28 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
}
 800ee08:	3738      	adds	r7, #56	; 0x38
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	24000a50 	.word	0x24000a50

0800ee14 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>:

void ModuleAttitudeController::setFromPositionController(){
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
	msgBus.getVehicleAttitueSP(&vehicleAttitudeSpSub);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ee22:	4619      	mov	r1, r3
 800ee24:	480f      	ldr	r0, [pc, #60]	; (800ee64 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv+0x50>)
 800ee26:	f7ff fe63 	bl	800eaf0 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
	targetRoll = vehicleAttitudeSpSub.roll;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	targetPitch = vehicleAttitudeSpSub.pitch;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	targetYawRate = vehicleAttitudeSpSub.yawRate;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	targetThrottle = vehicleAttitudeSpSub.throttle;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
}
 800ee5a:	bf00      	nop
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	24000a50 	.word	0x24000a50

0800ee68 <_ZN2FC24ModuleAttitudeController9setFromRCEv>:

void ModuleAttitudeController::setFromRC(){
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
	msgBus.getController(&controllerSub);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ee76:	4619      	mov	r1, r3
 800ee78:	4829      	ldr	r0, [pc, #164]	; (800ef20 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xb8>)
 800ee7a:	f7ff fe19 	bl	800eab0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
//	targetRoll = (float)(controllerSub.roll - 1500)/500.0;				/* map 1000~2000 to -1 ~ 1 */
//	targetPitch = -(float)(controllerSub.pitch - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
//	targetYawRate = (float)(controllerSub.yaw - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
//	targetThrottle = (float)(controllerSub.throttle - 1000)/1000.0;		/* map 1000~2000 to 0 ~ 1 */
	targetRoll = map(controllerSub.roll, 1000, 2000, -1.0, 1.0);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 800ee84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800ee88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ee8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ee90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7ff fef3 	bl	800ec80 <_ZN2FCL3mapEtttff>
 800ee9a:	eef0 7a40 	vmov.f32	s15, s0
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
	targetPitch = map(controllerSub.pitch, 1000, 2000, -1.0, 1.0);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800eeaa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800eeae:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800eeb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800eeb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7ff fee0 	bl	800ec80 <_ZN2FCL3mapEtttff>
 800eec0:	eef0 7a40 	vmov.f32	s15, s0
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
	targetYawRate = map(controllerSub.yaw, 1000, 2000, -1.0, 1.0);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 800eed0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800eed4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800eed8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800eedc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7ff fecd 	bl	800ec80 <_ZN2FCL3mapEtttff>
 800eee6:	eef0 7a40 	vmov.f32	s15, s0
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	edc3 7a6c 	vstr	s15, [r3, #432]	; 0x1b0
	targetThrottle = map(controllerSub.throttle, 1000, 2000, 0.0, 1.0);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
 800eef6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800eefa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800ef24 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xbc>
 800eefe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ef02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7ff feba 	bl	800ec80 <_ZN2FCL3mapEtttff>
 800ef0c:	eef0 7a40 	vmov.f32	s15, s0
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
}
 800ef16:	bf00      	nop
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	24000a50 	.word	0x24000a50
 800ef24:	00000000 	.word	0x00000000

0800ef28 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>:

void ModuleAttitudeController::setMotor(uint16_t pwm1, uint16_t pwm2, uint16_t pwm3, uint16_t pwm4, uint16_t pwm5, uint16_t pwm6){
 800ef28:	b590      	push	{r4, r7, lr}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	4608      	mov	r0, r1
 800ef32:	4611      	mov	r1, r2
 800ef34:	461a      	mov	r2, r3
 800ef36:	4603      	mov	r3, r0
 800ef38:	817b      	strh	r3, [r7, #10]
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	813b      	strh	r3, [r7, #8]
 800ef3e:	4613      	mov	r3, r2
 800ef40:	80fb      	strh	r3, [r7, #6]
	m1.setPWM(pwm1);
 800ef42:	897b      	ldrh	r3, [r7, #10]
 800ef44:	4619      	mov	r1, r3
 800ef46:	4824      	ldr	r0, [pc, #144]	; (800efd8 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb0>)
 800ef48:	f7f1 fdda 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m2.setPWM(pwm2);
 800ef4c:	893b      	ldrh	r3, [r7, #8]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4822      	ldr	r0, [pc, #136]	; (800efdc <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb4>)
 800ef52:	f7f1 fdd5 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m3.setPWM(pwm3);
 800ef56:	88fb      	ldrh	r3, [r7, #6]
 800ef58:	4619      	mov	r1, r3
 800ef5a:	4821      	ldr	r0, [pc, #132]	; (800efe0 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb8>)
 800ef5c:	f7f1 fdd0 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m4.setPWM(pwm4);
 800ef60:	8c3b      	ldrh	r3, [r7, #32]
 800ef62:	4619      	mov	r1, r3
 800ef64:	481f      	ldr	r0, [pc, #124]	; (800efe4 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xbc>)
 800ef66:	f7f1 fdcb 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m5.setPWM(pwm5);
 800ef6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	481e      	ldr	r0, [pc, #120]	; (800efe8 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc0>)
 800ef70:	f7f1 fdc6 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
	m6.setPWM(pwm6);
 800ef74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef76:	4619      	mov	r1, r3
 800ef78:	481c      	ldr	r0, [pc, #112]	; (800efec <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc4>)
 800ef7a:	f7f1 fdc1 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>

	motorPwmSub.timestamp = microsecond();
 800ef7e:	f7ff fe5b 	bl	800ec38 <_ZL11microsecondv>
 800ef82:	4603      	mov	r3, r0
 800ef84:	460c      	mov	r4, r1
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 800ef8c:	e9c2 3400 	strd	r3, r4, [r2]
	motorPwmSub.m1 = pwm1;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	897a      	ldrh	r2, [r7, #10]
 800ef94:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	motorPwmSub.m2 = pwm2;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	893a      	ldrh	r2, [r7, #8]
 800ef9c:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
	motorPwmSub.m3 = pwm3;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	88fa      	ldrh	r2, [r7, #6]
 800efa4:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	motorPwmSub.m4 = pwm4;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	8c3a      	ldrh	r2, [r7, #32]
 800efac:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
	motorPwmSub.m5 = pwm5;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800efb4:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
	motorPwmSub.m6 = pwm6;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800efbc:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

	msgBus.setMotorPWM(motorPwmSub);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800efc6:	4619      	mov	r1, r3
 800efc8:	4809      	ldr	r0, [pc, #36]	; (800eff0 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc8>)
 800efca:	f7ff fdfe 	bl	800ebca <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>
}
 800efce:	bf00      	nop
 800efd0:	3714      	adds	r7, #20
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd90      	pop	{r4, r7, pc}
 800efd6:	bf00      	nop
 800efd8:	24000734 	.word	0x24000734
 800efdc:	24000740 	.word	0x24000740
 800efe0:	2400074c 	.word	0x2400074c
 800efe4:	24000758 	.word	0x24000758
 800efe8:	24000764 	.word	0x24000764
 800efec:	24000770 	.word	0x24000770
 800eff0:	24000a50 	.word	0x24000a50

0800eff4 <_ZN2FC12ModuleBuzzer4mainEv>:
	.mq_mem = &Buzzer_QueueBuffer,
	.mq_size = sizeof(Buzzer_QueueBuffer)
};


void ModuleBuzzer::main() {
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b08e      	sub	sp, #56	; 0x38
 800eff8:	af00      	add	r7, sp, #0
	 *  TIM4, TIM_CHANNEL_1
	 *  PCLK 100Mhz
	 *  Prescaler 0
	 *  Counter Period 10-1
	 */
	ModuleBuzzer buzzer(&htim4, TIM_CHANNEL_1, 100000000);
 800effa:	1d38      	adds	r0, r7, #4
 800effc:	4b12      	ldr	r3, [pc, #72]	; (800f048 <_ZN2FC12ModuleBuzzer4mainEv+0x54>)
 800effe:	2200      	movs	r2, #0
 800f000:	4912      	ldr	r1, [pc, #72]	; (800f04c <_ZN2FC12ModuleBuzzer4mainEv+0x58>)
 800f002:	f000 f827 	bl	800f054 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>

	BuzzerCommand rcvResult;
	while(1){
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 800f006:	4b12      	ldr	r3, [pc, #72]	; (800f050 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 800f008:	6818      	ldr	r0, [r3, #0]
 800f00a:	4639      	mov	r1, r7
 800f00c:	f04f 33ff 	mov.w	r3, #4294967295
 800f010:	2200      	movs	r2, #0
 800f012:	f017 fd5d 	bl	8026ad0 <osMessageQueueGet>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	bf0c      	ite	eq
 800f01c:	2301      	moveq	r3, #1
 800f01e:	2300      	movne	r3, #0
 800f020:	b2db      	uxtb	r3, r3
 800f022:	2b00      	cmp	r3, #0
 800f024:	d006      	beq.n	800f034 <_ZN2FC12ModuleBuzzer4mainEv+0x40>
			buzzer.commandHandler(rcvResult);
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	1d3b      	adds	r3, r7, #4
 800f02a:	4611      	mov	r1, r2
 800f02c:	4618      	mov	r0, r3
 800f02e:	f000 f881 	bl	800f134 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>
 800f032:	e004      	b.n	800f03e <_ZN2FC12ModuleBuzzer4mainEv+0x4a>
//			osDelay(10);
		}
		else{
			osMessageQueueReset(Buzzer_QueueHandle);
 800f034:	4b06      	ldr	r3, [pc, #24]	; (800f050 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4618      	mov	r0, r3
 800f03a:	f017 fe03 	bl	8026c44 <osMessageQueueReset>
		}
		osDelay(10);
 800f03e:	200a      	movs	r0, #10
 800f040:	f017 fa4c 	bl	80264dc <osDelay>
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 800f044:	e7df      	b.n	800f006 <_ZN2FC12ModuleBuzzer4mainEv+0x12>
 800f046:	bf00      	nop
 800f048:	05f5e100 	.word	0x05f5e100
 800f04c:	2400c548 	.word	0x2400c548
 800f050:	24000980 	.word	0x24000980

0800f054 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>:
	}
}

ModuleBuzzer::ModuleBuzzer(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t CLK)
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
 800f060:	603b      	str	r3, [r7, #0]
	: A{Z1, Z2, Z5, Z6}
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	330c      	adds	r3, #12
 800f066:	2228      	movs	r2, #40	; 0x28
 800f068:	2100      	movs	r1, #0
 800f06a:	4618      	mov	r0, r3
 800f06c:	f01e f8ef 	bl	802d24e <memset>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	4a17      	ldr	r2, [pc, #92]	; (800f0d0 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x7c>)
 800f074:	60da      	str	r2, [r3, #12]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	4a16      	ldr	r2, [pc, #88]	; (800f0d4 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x80>)
 800f07a:	611a      	str	r2, [r3, #16]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	4a16      	ldr	r2, [pc, #88]	; (800f0d8 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x84>)
 800f080:	615a      	str	r2, [r3, #20]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	4a15      	ldr	r2, [pc, #84]	; (800f0dc <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x88>)
 800f086:	619a      	str	r2, [r3, #24]
{
	  /* creation of Buzzer_Queue */
	  Buzzer_QueueHandle = osMessageQueueNew (3, sizeof(BuzzerCommand), &Buzzer_Queue_attributes);
 800f088:	4a15      	ldr	r2, [pc, #84]	; (800f0e0 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x8c>)
 800f08a:	2104      	movs	r1, #4
 800f08c:	2003      	movs	r0, #3
 800f08e:	f017 fc25 	bl	80268dc <osMessageQueueNew>
 800f092:	4602      	mov	r2, r0
 800f094:	4b13      	ldr	r3, [pc, #76]	; (800f0e4 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x90>)
 800f096:	601a      	str	r2, [r3, #0]

	  this->htim = htim;
 800f098:	68ba      	ldr	r2, [r7, #8]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	601a      	str	r2, [r3, #0]
	  this->Channel = Channel;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	605a      	str	r2, [r3, #4]
	  this->CLK = CLK/10;		/* 10 : AutoReload Register+1 */
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	4a10      	ldr	r2, [pc, #64]	; (800f0e8 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x94>)
 800f0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800f0ac:	08da      	lsrs	r2, r3, #3
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_PRESCALER(htim, this->CLK / 4000);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	689a      	ldr	r2, [r3, #8]
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	490c      	ldr	r1, [pc, #48]	; (800f0ec <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x98>)
 800f0bc:	fba1 1202 	umull	r1, r2, r1, r2
 800f0c0:	0a12      	lsrs	r2, r2, #8
 800f0c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	0003f7a0 	.word	0x0003f7a0
 800f0d4:	00042e50 	.word	0x00042e50
 800f0d8:	00045948 	.word	0x00045948
 800f0dc:	0005cc60 	.word	0x0005cc60
 800f0e0:	0802ede0 	.word	0x0802ede0
 800f0e4:	24000980 	.word	0x24000980
 800f0e8:	cccccccd 	.word	0xcccccccd
 800f0ec:	10624dd3 	.word	0x10624dd3

0800f0f0 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>:


bool ModuleBuzzer::sendCommand(BuzzerCommand cmd){
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Buzzer_QueueHandle) != 0){
 800f0f8:	4b0d      	ldr	r3, [pc, #52]	; (800f130 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f017 fd59 	bl	8026bb4 <osMessageQueueGetSpace>
 800f102:	4603      	mov	r3, r0
 800f104:	2b00      	cmp	r3, #0
 800f106:	bf14      	ite	ne
 800f108:	2301      	movne	r3, #1
 800f10a:	2300      	moveq	r3, #0
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d008      	beq.n	800f124 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x34>
		osMessageQueuePut(Buzzer_QueueHandle, (void*)&cmd, 0, 0);
 800f112:	4b07      	ldr	r3, [pc, #28]	; (800f130 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 800f114:	6818      	ldr	r0, [r3, #0]
 800f116:	1d39      	adds	r1, r7, #4
 800f118:	2300      	movs	r3, #0
 800f11a:	2200      	movs	r2, #0
 800f11c:	f017 fc64 	bl	80269e8 <osMessageQueuePut>
		return true;
 800f120:	2301      	movs	r3, #1
 800f122:	e000      	b.n	800f126 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x36>
	}
	return false;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	24000980 	.word	0x24000980

0800f134 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>:

void ModuleBuzzer::commandHandler(BuzzerCommand result){
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
	switch(result){
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	2b03      	cmp	r3, #3
 800f142:	d81b      	bhi.n	800f17c <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
 800f144:	a201      	add	r2, pc, #4	; (adr r2, 800f14c <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x18>)
 800f146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f14a:	bf00      	nop
 800f14c:	0800f15d 	.word	0x0800f15d
 800f150:	0800f165 	.word	0x0800f165
 800f154:	0800f16d 	.word	0x0800f16d
 800f158:	0800f175 	.word	0x0800f175
	case BuzzerCommand::Armed:
		armed();
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 f811 	bl	800f184 <_ZN2FC12ModuleBuzzer5armedEv>
		break;
 800f162:	e00b      	b.n	800f17c <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::DisArmed:
		disarmed();
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 f817 	bl	800f198 <_ZN2FC12ModuleBuzzer8disarmedEv>
		break;
 800f16a:	e007      	b.n	800f17c <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Success:
		success();
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 f827 	bl	800f1c0 <_ZN2FC12ModuleBuzzer7successEv>
		break;
 800f172:	e003      	b.n	800f17c <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Denied:
		denied();
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 f819 	bl	800f1ac <_ZN2FC12ModuleBuzzer6deniedEv>
		break;
 800f17a:	bf00      	nop
	}
}
 800f17c:	bf00      	nop
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <_ZN2FC12ModuleBuzzer5armedEv>:

void ModuleBuzzer::armed(){
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
	//TODO armed sound
}
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <_ZN2FC12ModuleBuzzer8disarmedEv>:

void ModuleBuzzer::disarmed(){
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
	//TODO disarmed sound
}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <_ZN2FC12ModuleBuzzer6deniedEv>:

void ModuleBuzzer::denied(){
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
	//TODO denied sound
}
 800f1b4:	bf00      	nop
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <_ZN2FC12ModuleBuzzer7successEv>:

void ModuleBuzzer::success(){
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
//
//		/* Make each note sound and cut 1 mileecond */
//		HAL_TIM_PWM_Stop(htim, Channel);
//		osDelay(10);
//	}
	HAL_TIM_PWM_Start(htim, Channel);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	4610      	mov	r0, r2
 800f1d4:	f010 fa5a 	bl	801f68c <HAL_TIM_PWM_Start>
	osDelay(2000);
 800f1d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f1dc:	f017 f97e 	bl	80264dc <osDelay>
	HAL_TIM_PWM_Stop(htim, Channel);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	4610      	mov	r0, r2
 800f1ec:	f010 fb20 	bl	801f830 <HAL_TIM_PWM_Stop>
}
 800f1f0:	bf00      	nop
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>:
    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 800f1f8:	b490      	push	{r4, r7}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	683a      	ldr	r2, [r7, #0]
 800f206:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 800f20a:	4613      	mov	r3, r2
 800f20c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f20e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f212:	bf00      	nop
 800f214:	3708      	adds	r7, #8
 800f216:	46bd      	mov	sp, r7
 800f218:	bc90      	pop	{r4, r7}
 800f21a:	4770      	bx	lr

0800f21c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800f21c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f220:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800f222:	4b0e      	ldr	r3, [pc, #56]	; (800f25c <_ZL11microsecondv+0x40>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4619      	mov	r1, r3
 800f228:	f04f 0200 	mov.w	r2, #0
 800f22c:	f04f 0b00 	mov.w	fp, #0
 800f230:	f04f 0c00 	mov.w	ip, #0
 800f234:	468c      	mov	ip, r1
 800f236:	f04f 0b00 	mov.w	fp, #0
 800f23a:	4a09      	ldr	r2, [pc, #36]	; (800f260 <_ZL11microsecondv+0x44>)
 800f23c:	6812      	ldr	r2, [r2, #0]
 800f23e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f240:	4611      	mov	r1, r2
 800f242:	f04f 0200 	mov.w	r2, #0
 800f246:	ea4b 0301 	orr.w	r3, fp, r1
 800f24a:	ea4c 0402 	orr.w	r4, ip, r2
}
 800f24e:	4618      	mov	r0, r3
 800f250:	4621      	mov	r1, r4
 800f252:	46bd      	mov	sp, r7
 800f254:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	240009e0 	.word	0x240009e0
 800f260:	2400c62c 	.word	0x2400c62c

0800f264 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum PcSignal signal){
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	4603      	mov	r3, r0
 800f26c:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(PC_TaskHandle, signal);
 800f26e:	4b05      	ldr	r3, [pc, #20]	; (800f284 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE+0x20>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	79fa      	ldrb	r2, [r7, #7]
 800f274:	4611      	mov	r1, r2
 800f276:	4618      	mov	r0, r3
 800f278:	f016 ffb6 	bl	80261e8 <osThreadFlagsSet>
	}
 800f27c:	bf00      	nop
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	240094a0 	.word	0x240094a0

0800f288 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum AcSignal signal){
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	4603      	mov	r3, r0
 800f290:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(AC_TaskHandle, signal);
 800f292:	4b05      	ldr	r3, [pc, #20]	; (800f2a8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE+0x20>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	79fa      	ldrb	r2, [r7, #7]
 800f298:	4611      	mov	r1, r2
 800f29a:	4618      	mov	r0, r3
 800f29c:	f016 ffa4 	bl	80261e8 <osThreadFlagsSet>
	}
 800f2a0:	bf00      	nop
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	24009440 	.word	0x24009440

0800f2ac <_ZN2FC15ModuleCommanderC1Ev>:
  .cb_size = sizeof(Commander_QueueControlBlock),
  .mq_mem = &Commander_QueueBuffer,
  .mq_size = sizeof(Commander_QueueBuffer)
};

ModuleCommander::ModuleCommander(){
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	6013      	str	r3, [r2, #0]
 800f2bc:	6053      	str	r3, [r2, #4]
 800f2be:	6093      	str	r3, [r2, #8]
 800f2c0:	60d3      	str	r3, [r2, #12]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3310      	adds	r3, #16
 800f2c6:	2220      	movs	r2, #32
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f01d ffbf 	bl	802d24e <memset>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	3330      	adds	r3, #48	; 0x30
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	601a      	str	r2, [r3, #0]
 800f2d8:	605a      	str	r2, [r3, #4]
 800f2da:	609a      	str	r2, [r3, #8]
 800f2dc:	60da      	str	r2, [r3, #12]
	  /* creation of Command_Queue */
	  Commander_QueueHandle = osMessageQueueNew (3, sizeof(Command), &Commander_Queue_attributes);
 800f2de:	4a06      	ldr	r2, [pc, #24]	; (800f2f8 <_ZN2FC15ModuleCommanderC1Ev+0x4c>)
 800f2e0:	2104      	movs	r1, #4
 800f2e2:	2003      	movs	r0, #3
 800f2e4:	f017 fafa 	bl	80268dc <osMessageQueueNew>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	4b04      	ldr	r3, [pc, #16]	; (800f2fc <_ZN2FC15ModuleCommanderC1Ev+0x50>)
 800f2ec:	601a      	str	r2, [r3, #0]
}
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	0802edf8 	.word	0x0802edf8
 800f2fc:	240009e4 	.word	0x240009e4

0800f300 <_ZN2FC15ModuleCommander4mainEv>:

void ModuleCommander::main(){
 800f300:	b580      	push	{r7, lr}
 800f302:	b092      	sub	sp, #72	; 0x48
 800f304:	af00      	add	r7, sp, #0
	ModuleCommander moduleCommander;
 800f306:	f107 0308 	add.w	r3, r7, #8
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7ff ffce 	bl	800f2ac <_ZN2FC15ModuleCommanderC1Ev>

	osDelay(1500);
 800f310:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800f314:	f017 f8e2 	bl	80264dc <osDelay>
	sensorAccel.setBias();
 800f318:	4814      	ldr	r0, [pc, #80]	; (800f36c <_ZN2FC15ModuleCommander4mainEv+0x6c>)
 800f31a:	f001 f9cd 	bl	80106b8 <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 800f31e:	4814      	ldr	r0, [pc, #80]	; (800f370 <_ZN2FC15ModuleCommander4mainEv+0x70>)
 800f320:	f001 fdc2 	bl	8010ea8 <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setSeaLevelPressure(26.0); /* inha univ. altitude */
 800f324:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 800f328:	4812      	ldr	r0, [pc, #72]	; (800f374 <_ZN2FC15ModuleCommander4mainEv+0x74>)
 800f32a:	f001 fba5 	bl	8010a78 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>
	sensorBaro.setRefAltitude();
 800f32e:	4811      	ldr	r0, [pc, #68]	; (800f374 <_ZN2FC15ModuleCommander4mainEv+0x74>)
 800f330:	f001 fbbb 	bl	8010aaa <_ZN2FC10SensorBaro14setRefAltitudeEv>
	osDelay(500);
 800f334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f338:	f017 f8d0 	bl	80264dc <osDelay>

	while(1){
		Command rcvCommand;
		if(osMessageQueueGet(Commander_QueueHandle, (void*)&rcvCommand, NULL, osWaitForever) == osOK){
 800f33c:	4b0e      	ldr	r3, [pc, #56]	; (800f378 <_ZN2FC15ModuleCommander4mainEv+0x78>)
 800f33e:	6818      	ldr	r0, [r3, #0]
 800f340:	1d39      	adds	r1, r7, #4
 800f342:	f04f 33ff 	mov.w	r3, #4294967295
 800f346:	2200      	movs	r2, #0
 800f348:	f017 fbc2 	bl	8026ad0 <osMessageQueueGet>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bf0c      	ite	eq
 800f352:	2301      	moveq	r3, #1
 800f354:	2300      	movne	r3, #0
 800f356:	b2db      	uxtb	r3, r3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d0ef      	beq.n	800f33c <_ZN2FC15ModuleCommander4mainEv+0x3c>
			moduleCommander.commandHandler(rcvCommand);
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	f107 0308 	add.w	r3, r7, #8
 800f362:	4611      	mov	r1, r2
 800f364:	4618      	mov	r0, r3
 800f366:	f000 f83d 	bl	800f3e4 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>
		}
	}
 800f36a:	e7e7      	b.n	800f33c <_ZN2FC15ModuleCommander4mainEv+0x3c>
 800f36c:	24000e30 	.word	0x24000e30
 800f370:	24000f10 	.word	0x24000f10
 800f374:	24000e70 	.word	0x24000e70
 800f378:	240009e4 	.word	0x240009e4

0800f37c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>:
}

bool ModuleCommander::sendCommand(Command cmd){
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Commander_QueueHandle) != 0){
 800f384:	4b0d      	ldr	r3, [pc, #52]	; (800f3bc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4618      	mov	r0, r3
 800f38a:	f017 fc13 	bl	8026bb4 <osMessageQueueGetSpace>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	bf14      	ite	ne
 800f394:	2301      	movne	r3, #1
 800f396:	2300      	moveq	r3, #0
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d008      	beq.n	800f3b0 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x34>
		osMessageQueuePut(Commander_QueueHandle, (void*)&cmd, 0, 0);
 800f39e:	4b07      	ldr	r3, [pc, #28]	; (800f3bc <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 800f3a0:	6818      	ldr	r0, [r3, #0]
 800f3a2:	1d39      	adds	r1, r7, #4
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f017 fb1e 	bl	80269e8 <osMessageQueuePut>
		return true;
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	e000      	b.n	800f3b2 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x36>
	}
	return false;
 800f3b0:	2300      	movs	r3, #0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3708      	adds	r7, #8
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	240009e4 	.word	0x240009e4

0800f3c0 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>:

void ModuleCommander::sendSignal(enum CmdSignal signal){
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	71fb      	strb	r3, [r7, #7]
	osThreadFlagsSet(Commander_TaskHandle, signal);
 800f3ca:	4b05      	ldr	r3, [pc, #20]	; (800f3e0 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE+0x20>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	79fa      	ldrb	r2, [r7, #7]
 800f3d0:	4611      	mov	r1, r2
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f016 ff08 	bl	80261e8 <osThreadFlagsSet>
}
 800f3d8:	bf00      	nop
 800f3da:	3708      	adds	r7, #8
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	24008fb0 	.word	0x24008fb0

0800f3e4 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>:

bool ModuleCommander::commandHandler(Command cmd){
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
	switch(cmd){
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	2b0a      	cmp	r3, #10
 800f3f2:	d847      	bhi.n	800f484 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa0>
 800f3f4:	a201      	add	r2, pc, #4	; (adr r2, 800f3fc <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x18>)
 800f3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3fa:	bf00      	nop
 800f3fc:	0800f429 	.word	0x0800f429
 800f400:	0800f433 	.word	0x0800f433
 800f404:	0800f433 	.word	0x0800f433
 800f408:	0800f43f 	.word	0x0800f43f
 800f40c:	0800f449 	.word	0x0800f449
 800f410:	0800f453 	.word	0x0800f453
 800f414:	0800f45d 	.word	0x0800f45d
 800f418:	0800f485 	.word	0x0800f485
 800f41c:	0800f467 	.word	0x0800f467
 800f420:	0800f471 	.word	0x0800f471
 800f424:	0800f47b 	.word	0x0800f47b
	case Command::ControlAttitude:
		return toAttitude();
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 f831 	bl	800f490 <_ZN2FC15ModuleCommander10toAttitudeEv>
 800f42e:	4603      	mov	r3, r0
 800f430:	e029      	b.n	800f486 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::ControlALT:
	case Command::ControlPosition:
		return toPosition(cmd);
 800f432:	6839      	ldr	r1, [r7, #0]
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f84f 	bl	800f4d8 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE>
 800f43a:	4603      	mov	r3, r0
 800f43c:	e023      	b.n	800f486 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoWaypoint:
		return toWaypoint();
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 f886 	bl	800f550 <_ZN2FC15ModuleCommander10toWaypointEv>
 800f444:	4603      	mov	r3, r0
 800f446:	e01e      	b.n	800f486 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoRTL:
		return toRTL();
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 f88c 	bl	800f566 <_ZN2FC15ModuleCommander5toRTLEv>
 800f44e:	4603      	mov	r3, r0
 800f450:	e019      	b.n	800f486 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoTakeoff:
		return toTakeoff();
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 f892 	bl	800f57c <_ZN2FC15ModuleCommander9toTakeoffEv>
 800f458:	4603      	mov	r3, r0
 800f45a:	e014      	b.n	800f486 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoLand:
		return toLand();
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 f898 	bl	800f592 <_ZN2FC15ModuleCommander6toLandEv>
 800f462:	4603      	mov	r3, r0
 800f464:	e00f      	b.n	800f486 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;

	case Command::Arm:
		return toArm();
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 f89e 	bl	800f5a8 <_ZN2FC15ModuleCommander5toArmEv>
 800f46c:	4603      	mov	r3, r0
 800f46e:	e00a      	b.n	800f486 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::DisArm:
		return toDisArm();
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 f8dd 	bl	800f630 <_ZN2FC15ModuleCommander8toDisArmEv>
 800f476:	4603      	mov	r3, r0
 800f478:	e005      	b.n	800f486 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;

	case Command::MotorCalibration:
		return toMotorCalibration();
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f8fa 	bl	800f674 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>
 800f480:	4603      	mov	r3, r0
 800f482:	e000      	b.n	800f486 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	}
	return false;
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop

0800f490 <_ZN2FC15ModuleCommander10toAttitudeEv>:

bool ModuleCommander::toAttitude(){
 800f490:	b590      	push	{r4, r7, lr}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
	/*
	 * check condition of attitude control
	 */


	resetController();
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 f93b 	bl	800f714 <_ZN2FC15ModuleCommander15resetControllerEv>
	/* change to attitude */
	modeFlagPub.timestamp = microsecond();
 800f49e:	f7ff febd 	bl	800f21c <_ZL11microsecondv>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	460c      	mov	r4, r1
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = Command::ControlAttitude;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	3330      	adds	r3, #48	; 0x30
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	4806      	ldr	r0, [pc, #24]	; (800f4d4 <_ZN2FC15ModuleCommander10toAttitudeEv+0x44>)
 800f4ba:	f7ff fe9d 	bl	800f1f8 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 f912 	bl	800f6e8 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800f4c4:	2002      	movs	r0, #2
 800f4c6:	f7ff fe13 	bl	800f0f0 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 800f4ca:	2301      	movs	r3, #1
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd90      	pop	{r4, r7, pc}
 800f4d4:	24000a50 	.word	0x24000a50

0800f4d8 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE>:

bool ModuleCommander::toPosition(Command cmd){
 800f4d8:	b590      	push	{r4, r7, lr}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
	//TODO check condition of position controller

	/* set position controller */
	ModulePositionController::setSignal(PC_start);
 800f4e2:	2002      	movs	r0, #2
 800f4e4:	f7ff febe 	bl	800f264 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
	if(!(osThreadFlagsWait(CMD_ACK, osFlagsWaitAny, 500) & CMD_ACK)){
 800f4e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f4ec:	2100      	movs	r1, #0
 800f4ee:	2001      	movs	r0, #1
 800f4f0:	f016 ff60 	bl	80263b4 <osThreadFlagsWait>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	f003 0301 	and.w	r3, r3, #1
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	bf0c      	ite	eq
 800f4fe:	2301      	moveq	r3, #1
 800f500:	2300      	movne	r3, #0
 800f502:	b2db      	uxtb	r3, r3
 800f504:	2b00      	cmp	r3, #0
 800f506:	d004      	beq.n	800f512 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE+0x3a>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 800f508:	2003      	movs	r0, #3
 800f50a:	f7ff fdf1 	bl	800f0f0 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false;
 800f50e:	2300      	movs	r3, #0
 800f510:	e018      	b.n	800f544 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE+0x6c>
	}

	/* reset */
	resetController();
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 f8fe 	bl	800f714 <_ZN2FC15ModuleCommander15resetControllerEv>

	/* mode set */
	modeFlagPub.timestamp = microsecond();
 800f518:	f7ff fe80 	bl	800f21c <_ZL11microsecondv>
 800f51c:	4603      	mov	r3, r0
 800f51e:	460c      	mov	r4, r1
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = cmd;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	683a      	ldr	r2, [r7, #0]
 800f52a:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	3330      	adds	r3, #48	; 0x30
 800f530:	4619      	mov	r1, r3
 800f532:	4806      	ldr	r0, [pc, #24]	; (800f54c <_ZN2FC15ModuleCommander10toPositionENS_7CommandE+0x74>)
 800f534:	f7ff fe60 	bl	800f1f8 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 f8d5 	bl	800f6e8 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800f53e:	2002      	movs	r0, #2
 800f540:	f7ff fdd6 	bl	800f0f0 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 800f544:	4618      	mov	r0, r3
 800f546:	370c      	adds	r7, #12
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd90      	pop	{r4, r7, pc}
 800f54c:	24000a50 	.word	0x24000a50

0800f550 <_ZN2FC15ModuleCommander10toWaypointEv>:

bool ModuleCommander::toWaypoint(){
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
	//TODO change to waypoint autopilot
}
 800f558:	bf00      	nop
 800f55a:	4618      	mov	r0, r3
 800f55c:	370c      	adds	r7, #12
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr

0800f566 <_ZN2FC15ModuleCommander5toRTLEv>:

bool ModuleCommander::toRTL(){
 800f566:	b480      	push	{r7}
 800f568:	b083      	sub	sp, #12
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
	//TODO change to auto RTL
}
 800f56e:	bf00      	nop
 800f570:	4618      	mov	r0, r3
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <_ZN2FC15ModuleCommander9toTakeoffEv>:

bool ModuleCommander::toTakeoff(){
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
	//TODO change to auto takeoff
}
 800f584:	bf00      	nop
 800f586:	4618      	mov	r0, r3
 800f588:	370c      	adds	r7, #12
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr

0800f592 <_ZN2FC15ModuleCommander6toLandEv>:

bool ModuleCommander::toLand(){
 800f592:	b480      	push	{r7}
 800f594:	b083      	sub	sp, #12
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
	//TODO change to auto land
}
 800f59a:	bf00      	nop
 800f59c:	4618      	mov	r0, r3
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <_ZN2FC15ModuleCommander5toArmEv>:

bool ModuleCommander::toArm(){
 800f5a8:	b590      	push	{r4, r7, lr}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
	//TODO check arm condition

	/* toArm condition */
	msgBus.getController(&controllerSub);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	481a      	ldr	r0, [pc, #104]	; (800f620 <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 800f5b6:	f7ff fa7b 	bl	800eab0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
	if(controllerSub.throttle > 1050){
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	89db      	ldrh	r3, [r3, #14]
 800f5be:	f240 421a 	movw	r2, #1050	; 0x41a
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d904      	bls.n	800f5d0 <_ZN2FC15ModuleCommander5toArmEv+0x28>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 800f5c6:	2003      	movs	r0, #3
 800f5c8:	f7ff fd92 	bl	800f0f0 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false; /* can't arm */
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	e022      	b.n	800f616 <_ZN2FC15ModuleCommander5toArmEv+0x6e>
	}

	/* arm initialize */
	sensorAccel.setBias();
 800f5d0:	4814      	ldr	r0, [pc, #80]	; (800f624 <_ZN2FC15ModuleCommander5toArmEv+0x7c>)
 800f5d2:	f001 f871 	bl	80106b8 <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 800f5d6:	4814      	ldr	r0, [pc, #80]	; (800f628 <_ZN2FC15ModuleCommander5toArmEv+0x80>)
 800f5d8:	f001 fc66 	bl	8010ea8 <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setRefAltitude();
 800f5dc:	4813      	ldr	r0, [pc, #76]	; (800f62c <_ZN2FC15ModuleCommander5toArmEv+0x84>)
 800f5de:	f001 fa64 	bl	8010aaa <_ZN2FC10SensorBaro14setRefAltitudeEv>
	resetController();
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 f896 	bl	800f714 <_ZN2FC15ModuleCommander15resetControllerEv>
	osDelay(150);					/* wait sensor calibration */
 800f5e8:	2096      	movs	r0, #150	; 0x96
 800f5ea:	f016 ff77 	bl	80264dc <osDelay>

	modeFlagPub.timestamp = microsecond();
 800f5ee:	f7ff fe15 	bl	800f21c <_ZL11microsecondv>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::Arm;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2208      	movs	r2, #8
 800f600:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	3330      	adds	r3, #48	; 0x30
 800f606:	4619      	mov	r1, r3
 800f608:	4805      	ldr	r0, [pc, #20]	; (800f620 <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 800f60a:	f7ff fdf5 	bl	800f1f8 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800f60e:	2002      	movs	r0, #2
 800f610:	f7ff fd6e 	bl	800f0f0 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 800f614:	2301      	movs	r3, #1
}
 800f616:	4618      	mov	r0, r3
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd90      	pop	{r4, r7, pc}
 800f61e:	bf00      	nop
 800f620:	24000a50 	.word	0x24000a50
 800f624:	24000e30 	.word	0x24000e30
 800f628:	24000f10 	.word	0x24000f10
 800f62c:	24000e70 	.word	0x24000e70

0800f630 <_ZN2FC15ModuleCommander8toDisArmEv>:

bool ModuleCommander::toDisArm(){
 800f630:	b590      	push	{r4, r7, lr}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
//	   pwm.m4 > DISARM_PWM && pwm.m5 > DISARM_PWM && pwm.m6 > DISARM_PWM){
//		/* can't disarm */
//
//	}

	modeFlagPub.timestamp = microsecond();
 800f638:	f7ff fdf0 	bl	800f21c <_ZL11microsecondv>
 800f63c:	4603      	mov	r3, r0
 800f63e:	460c      	mov	r4, r1
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::DisArm;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2209      	movs	r2, #9
 800f64a:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	3330      	adds	r3, #48	; 0x30
 800f650:	4619      	mov	r1, r3
 800f652:	4807      	ldr	r0, [pc, #28]	; (800f670 <_ZN2FC15ModuleCommander8toDisArmEv+0x40>)
 800f654:	f7ff fdd0 	bl	800f1f8 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f000 f845 	bl	800f6e8 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800f65e:	2002      	movs	r0, #2
 800f660:	f7ff fd46 	bl	800f0f0 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 800f664:	2301      	movs	r3, #1
}
 800f666:	4618      	mov	r0, r3
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd90      	pop	{r4, r7, pc}
 800f66e:	bf00      	nop
 800f670:	24000a50 	.word	0x24000a50

0800f674 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>:

bool ModuleCommander::toMotorCalibration(){
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
	osKernelLock();
 800f67c:	f016 fcae 	bl	8025fdc <osKernelLock>

	struct Controller ctl;

	while(1){
		msgBus.getController(&ctl);
 800f680:	f107 0308 	add.w	r3, r7, #8
 800f684:	4619      	mov	r1, r3
 800f686:	4811      	ldr	r0, [pc, #68]	; (800f6cc <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x58>)
 800f688:	f7ff fa12 	bl	800eab0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

		m1.setPWM(ctl.throttle);
 800f68c:	8afb      	ldrh	r3, [r7, #22]
 800f68e:	4619      	mov	r1, r3
 800f690:	480f      	ldr	r0, [pc, #60]	; (800f6d0 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x5c>)
 800f692:	f7f1 fa35 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m2.setPWM(ctl.throttle);
 800f696:	8afb      	ldrh	r3, [r7, #22]
 800f698:	4619      	mov	r1, r3
 800f69a:	480e      	ldr	r0, [pc, #56]	; (800f6d4 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x60>)
 800f69c:	f7f1 fa30 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m3.setPWM(ctl.throttle);
 800f6a0:	8afb      	ldrh	r3, [r7, #22]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	480c      	ldr	r0, [pc, #48]	; (800f6d8 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x64>)
 800f6a6:	f7f1 fa2b 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m4.setPWM(ctl.throttle);
 800f6aa:	8afb      	ldrh	r3, [r7, #22]
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	480b      	ldr	r0, [pc, #44]	; (800f6dc <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x68>)
 800f6b0:	f7f1 fa26 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m5.setPWM(ctl.throttle);
 800f6b4:	8afb      	ldrh	r3, [r7, #22]
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	4809      	ldr	r0, [pc, #36]	; (800f6e0 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x6c>)
 800f6ba:	f7f1 fa21 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		m6.setPWM(ctl.throttle);
 800f6be:	8afb      	ldrh	r3, [r7, #22]
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	4808      	ldr	r0, [pc, #32]	; (800f6e4 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x70>)
 800f6c4:	f7f1 fa1c 	bl	8000b00 <_ZN2FC5Motor6setPWMEt>
		msgBus.getController(&ctl);
 800f6c8:	e7da      	b.n	800f680 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0xc>
 800f6ca:	bf00      	nop
 800f6cc:	24000a50 	.word	0x24000a50
 800f6d0:	24000734 	.word	0x24000734
 800f6d4:	24000740 	.word	0x24000740
 800f6d8:	2400074c 	.word	0x2400074c
 800f6dc:	24000758 	.word	0x24000758
 800f6e0:	24000764 	.word	0x24000764
 800f6e4:	24000770 	.word	0x24000770

0800f6e8 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>:
	}
	osKernelUnlock();
}

bool ModuleCommander::stopTheOtherTask(){
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d004      	beq.n	800f702 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x1a>
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	db06      	blt.n	800f70a <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
 800f6fc:	2b03      	cmp	r3, #3
 800f6fe:	dc04      	bgt.n	800f70a <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
	case Command::ControlPosition:
	case Command::ControlALT:
		//TODO stop auto controller
	case Command::AutoWaypoint:
		//??
		break;
 800f700:	e002      	b.n	800f708 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x20>
		ModulePositionController::setSignal(PC_stop);
 800f702:	2004      	movs	r0, #4
 800f704:	f7ff fdae 	bl	800f264 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		break;
 800f708:	bf00      	nop
	}
}
 800f70a:	bf00      	nop
 800f70c:	4618      	mov	r0, r3
 800f70e:	3708      	adds	r7, #8
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <_ZN2FC15ModuleCommander15resetControllerEv>:

void ModuleCommander::resetController(){
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f720:	2b00      	cmp	r3, #0
 800f722:	d006      	beq.n	800f732 <_ZN2FC15ModuleCommander15resetControllerEv+0x1e>
 800f724:	2b00      	cmp	r3, #0
 800f726:	db08      	blt.n	800f73a <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
 800f728:	2b03      	cmp	r3, #3
 800f72a:	dc06      	bgt.n	800f73a <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
	case Command::AutoWaypoint:
		//TODO initialize auto controller
		/* not break */
	case Command::ControlPosition:
	case Command::ControlALT:
		ModulePositionController::setSignal(PC_reset);
 800f72c:	2008      	movs	r0, #8
 800f72e:	f7ff fd99 	bl	800f264 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		/* not break */
	case Command::ControlAttitude:
		ModuleAttitudeController::setSignal(AC_reset);
 800f732:	2002      	movs	r0, #2
 800f734:	f7ff fda8 	bl	800f288 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
		break;
 800f738:	bf00      	nop
	}
}
 800f73a:	bf00      	nop
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>:
  ~positionEstimatorModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU* pExtU)
 800f742:	b580      	push	{r7, lr}
 800f744:	b082      	sub	sp, #8
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
 800f74a:	6039      	str	r1, [r7, #0]
  {
    rtU = *pExtU;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	683a      	ldr	r2, [r7, #0]
 800f750:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 800f754:	4611      	mov	r1, r2
 800f756:	2280      	movs	r2, #128	; 0x80
 800f758:	4618      	mov	r0, r3
 800f75a:	f01d fd6d 	bl	802d238 <memcpy>
  }
 800f75e:	bf00      	nop
 800f760:	3708      	adds	r7, #8
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const positionEstimatorModelClass::ExtY & getExternalOutputs() const
 800f766:	b480      	push	{r7}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
  {
    return rtY;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
  }
 800f774:	4618      	mov	r0, r3
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 800f780:	b590      	push	{r4, r7, lr}
 800f782:	b085      	sub	sp, #20
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
 800f78a:	2300      	movs	r3, #0
 800f78c:	73fb      	strb	r3, [r7, #15]
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 800f79a:	42a2      	cmp	r2, r4
 800f79c:	bf08      	it	eq
 800f79e:	4299      	cmpeq	r1, r3
 800f7a0:	d001      	beq.n	800f7a6 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE+0x26>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	73fb      	strb	r3, [r7, #15]
 800f7a6:	683a      	ldr	r2, [r7, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4610      	mov	r0, r2
 800f7ac:	3348      	adds	r3, #72	; 0x48
 800f7ae:	2248      	movs	r2, #72	; 0x48
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	f01d fd41 	bl	802d238 <memcpy>
 800f7b6:	7bfb      	ldrb	r3, [r7, #15]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3714      	adds	r7, #20
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd90      	pop	{r4, r7, pc}

0800f7c0 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 800f7c0:	b4b0      	push	{r4, r5, r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	73fb      	strb	r3, [r7, #15]
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800f7da:	42a2      	cmp	r2, r4
 800f7dc:	bf08      	it	eq
 800f7de:	4299      	cmpeq	r1, r3
 800f7e0:	d001      	beq.n	800f7e6 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE+0x26>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	73fb      	strb	r3, [r7, #15]
 800f7e6:	683a      	ldr	r2, [r7, #0]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4615      	mov	r5, r2
 800f7ec:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800f7f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f7f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f7f8:	e885 0003 	stmia.w	r5, {r0, r1}
 800f7fc:	7bfb      	ldrb	r3, [r7, #15]
 800f7fe:	4618      	mov	r0, r3
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	bcb0      	pop	{r4, r5, r7}
 800f806:	4770      	bx	lr

0800f808 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 800f808:	b4b0      	push	{r4, r5, r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
 800f812:	2300      	movs	r3, #0
 800f814:	73fb      	strb	r3, [r7, #15]
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800f822:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f826:	42a2      	cmp	r2, r4
 800f828:	bf08      	it	eq
 800f82a:	4299      	cmpeq	r1, r3
 800f82c:	d001      	beq.n	800f832 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x2a>
 800f82e:	2301      	movs	r3, #1
 800f830:	73fb      	strb	r3, [r7, #15]
 800f832:	683a      	ldr	r2, [r7, #0]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	4615      	mov	r5, r2
 800f838:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800f83c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f83e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f840:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f844:	e885 0003 	stmia.w	r5, {r0, r1}
 800f848:	7bfb      	ldrb	r3, [r7, #15]
 800f84a:	4618      	mov	r0, r3
 800f84c:	3714      	adds	r7, #20
 800f84e:	46bd      	mov	sp, r7
 800f850:	bcb0      	pop	{r4, r5, r7}
 800f852:	4770      	bx	lr

0800f854 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800f866:	4611      	mov	r1, r2
 800f868:	2248      	movs	r2, #72	; 0x48
 800f86a:	4618      	mov	r0, r3
 800f86c:	f01d fce4 	bl	802d238 <memcpy>
 800f870:	bf00      	nop
 800f872:	3708      	adds	r7, #8
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800f878:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f87c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800f87e:	4b0e      	ldr	r3, [pc, #56]	; (800f8b8 <_ZL11microsecondv+0x40>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4619      	mov	r1, r3
 800f884:	f04f 0200 	mov.w	r2, #0
 800f888:	f04f 0b00 	mov.w	fp, #0
 800f88c:	f04f 0c00 	mov.w	ip, #0
 800f890:	468c      	mov	ip, r1
 800f892:	f04f 0b00 	mov.w	fp, #0
 800f896:	4a09      	ldr	r2, [pc, #36]	; (800f8bc <_ZL11microsecondv+0x44>)
 800f898:	6812      	ldr	r2, [r2, #0]
 800f89a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f89c:	4611      	mov	r1, r2
 800f89e:	f04f 0200 	mov.w	r2, #0
 800f8a2:	ea4b 0301 	orr.w	r3, fp, r1
 800f8a6:	ea4c 0402 	orr.w	r4, ip, r2
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	4621      	mov	r1, r4
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	24000a44 	.word	0x24000a44
 800f8bc:	2400c62c 	.word	0x2400c62c

0800f8c0 <_ZN2FC9ModuleINSC1Ev>:
#include "Utils/Constant.h"

namespace FC {


ModuleINS::ModuleINS()
 800f8c0:	b590      	push	{r4, r7, lr}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
	: refLat(0)
	, refLon(0)
	, refAlt(0)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fb fb82 	bl	800afd4 <_ZN27positionEstimatorModelClassC1Ev>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f603 6208 	addw	r2, r3, #3592	; 0xe08
 800f8d6:	f04f 0300 	mov.w	r3, #0
 800f8da:	f04f 0400 	mov.w	r4, #0
 800f8de:	e9c2 3400 	strd	r3, r4, [r2]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f503 6261 	add.w	r2, r3, #3600	; 0xe10
 800f8e8:	f04f 0300 	mov.w	r3, #0
 800f8ec:	f04f 0400 	mov.w	r4, #0
 800f8f0:	e9c2 3400 	strd	r3, r4, [r2]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f603 6318 	addw	r3, r3, #3608	; 0xe18
 800f8fa:	f04f 0200 	mov.w	r2, #0
 800f8fe:	601a      	str	r2, [r3, #0]
{}
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4618      	mov	r0, r3
 800f904:	370c      	adds	r7, #12
 800f906:	46bd      	mov	sp, r7
 800f908:	bd90      	pop	{r4, r7, pc}
 800f90a:	0000      	movs	r0, r0
 800f90c:	0000      	movs	r0, r0
	...

0800f910 <_ZN2FC9ModuleINS7onestepEv>:

void ModuleINS::onestep(){
 800f910:	b590      	push	{r4, r7, lr}
 800f912:	b0b5      	sub	sp, #212	; 0xd4
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
	ExtU input;

	if(msgBus.getNedAccel(&nedAccelSub)){
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 800f91e:	4619      	mov	r1, r3
 800f920:	487b      	ldr	r0, [pc, #492]	; (800fb10 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800f922:	f7ff ff71 	bl	800f808 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d024      	beq.n	800f976 <_ZN2FC9ModuleINS7onestepEv+0x66>
		input.AhrsFlag = true;
 800f92c:	f04f 0300 	mov.w	r3, #0
 800f930:	4c78      	ldr	r4, [pc, #480]	; (800fb14 <_ZN2FC9ModuleINS7onestepEv+0x204>)
 800f932:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		input.ax = nedAccelSub.xyz[0];
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 800f93c:	edd3 7a00 	vldr	s15, [r3]
 800f940:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f944:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
		input.ay = nedAccelSub.xyz[1];
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f603 5354 	addw	r3, r3, #3412	; 0xd54
 800f94e:	edd3 7a00 	vldr	s15, [r3]
 800f952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f956:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		input.az = nedAccelSub.xyz[2] - FC_GRAVITY_ACCEERATION;		/* subtract gravity */
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f603 5358 	addw	r3, r3, #3416	; 0xd58
 800f960:	edd3 7a00 	vldr	s15, [r3]
 800f964:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f968:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800fb08 <_ZN2FC9ModuleINS7onestepEv+0x1f8>
 800f96c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f970:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
 800f974:	e005      	b.n	800f982 <_ZN2FC9ModuleINS7onestepEv+0x72>
	}
	else input.AhrsFlag = false;
 800f976:	f04f 0300 	mov.w	r3, #0
 800f97a:	f04f 0400 	mov.w	r4, #0
 800f97e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	if(msgBus.getGPS(&gpsSub)){
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f503 6356 	add.w	r3, r3, #3424	; 0xd60
 800f988:	4619      	mov	r1, r3
 800f98a:	4861      	ldr	r0, [pc, #388]	; (800fb10 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800f98c:	f7ff fef8 	bl	800f780 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d006      	beq.n	800f9a4 <_ZN2FC9ModuleINS7onestepEv+0x94>
		input.GpsFlag = false;
 800f996:	f04f 0300 	mov.w	r3, #0
 800f99a:	f04f 0400 	mov.w	r4, #0
 800f99e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 800f9a2:	e005      	b.n	800f9b0 <_ZN2FC9ModuleINS7onestepEv+0xa0>
	}
	else input.GpsFlag = false;
 800f9a4:	f04f 0300 	mov.w	r3, #0
 800f9a8:	f04f 0400 	mov.w	r4, #0
 800f9ac:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	if(msgBus.getBarometer(&baroSub)){
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f603 53a8 	addw	r3, r3, #3496	; 0xda8
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	4855      	ldr	r0, [pc, #340]	; (800fb10 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800f9ba:	f7ff ff01 	bl	800f7c0 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d00e      	beq.n	800f9e2 <_ZN2FC9ModuleINS7onestepEv+0xd2>
		input.BaroFlag = true;
 800f9c4:	f04f 0300 	mov.w	r3, #0
 800f9c8:	4c52      	ldr	r4, [pc, #328]	; (800fb14 <_ZN2FC9ModuleINS7onestepEv+0x204>)
 800f9ca:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		input.baroZ = baroSub.altitude;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
 800f9d4:	edd3 7a00 	vldr	s15, [r3]
 800f9d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f9dc:	ed87 7b2a 	vstr	d7, [r7, #168]	; 0xa8
 800f9e0:	e005      	b.n	800f9ee <_ZN2FC9ModuleINS7onestepEv+0xde>
	}
	else input.BaroFlag = false;
 800f9e2:	f04f 0300 	mov.w	r3, #0
 800f9e6:	f04f 0400 	mov.w	r4, #0
 800f9ea:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0

	setExternalInputs(&input);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f9f4:	4611      	mov	r1, r2
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff fea3 	bl	800f742 <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>
	step();
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7f7 f93a 	bl	8006c78 <_ZN27positionEstimatorModelClass4stepEv>
	ExtY output = getExternalOutputs();
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7ff fead 	bl	800f766 <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	f107 0308 	add.w	r3, r7, #8
 800fa12:	4611      	mov	r1, r2
 800fa14:	2248      	movs	r2, #72	; 0x48
 800fa16:	4618      	mov	r0, r3
 800fa18:	f01d fc0e 	bl	802d238 <memcpy>


	localPositionPub.timestamp = microsecond();
 800fa1c:	f7ff ff2c 	bl	800f878 <_ZL11microsecondv>
 800fa20:	4603      	mov	r3, r0
 800fa22:	460c      	mov	r4, r1
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	f502 625c 	add.w	r2, r2, #3520	; 0xdc0
 800fa2a:	e9c2 3400 	strd	r3, r4, [r2]
	localPositionPub.ax = (float)output.estiAX;
 800fa2e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800fa32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f503 635e 	add.w	r3, r3, #3552	; 0xde0
 800fa3c:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.ay = (float)output.estiAY;
 800fa40:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800fa44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f603 53e4 	addw	r3, r3, #3556	; 0xde4
 800fa4e:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.az = (float)output.estiAZ;
 800fa52:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800fa56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f603 53e8 	addw	r3, r3, #3560	; 0xde8
 800fa60:	edc3 7a00 	vstr	s15, [r3]

	localPositionPub.vx = (float)output.estiVX;
 800fa64:	ed97 7b08 	vldr	d7, [r7, #32]
 800fa68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 800fa72:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.vy = (float)output.estiVY;
 800fa76:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800fa7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 800fa84:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.vz = (float)output.estiVZ;
 800fa88:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800fa8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800fa96:	edc3 7a00 	vstr	s15, [r3]

	localPositionPub.x = (float)output.estiX;
 800fa9a:	ed97 7b02 	vldr	d7, [r7, #8]
 800fa9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 800faa8:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.y = (float)output.estiY;
 800faac:	ed97 7b04 	vldr	d7, [r7, #16]
 800fab0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f603 53cc 	addw	r3, r3, #3532	; 0xdcc
 800faba:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.z = (float)output.estiZ;
 800fabe:	ed97 7b06 	vldr	d7, [r7, #24]
 800fac2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 800facc:	edc3 7a00 	vstr	s15, [r3]

	msgBus.getAttitude(&attitudeSub);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800fad6:	4619      	mov	r1, r3
 800fad8:	480d      	ldr	r0, [pc, #52]	; (800fb10 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800fada:	f7ff f82d 	bl	800eb38 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	localPositionPub.yaw = attitudeSub.yaw;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f603 53ec 	addw	r3, r3, #3564	; 0xdec
 800faec:	601a      	str	r2, [r3, #0]

	msgBus.setLocalPosition(localPositionPub);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 800faf4:	4619      	mov	r1, r3
 800faf6:	4806      	ldr	r0, [pc, #24]	; (800fb10 <_ZN2FC9ModuleINS7onestepEv+0x200>)
 800faf8:	f7ff feac 	bl	800f854 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>
}
 800fafc:	bf00      	nop
 800fafe:	37d4      	adds	r7, #212	; 0xd4
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd90      	pop	{r4, r7, pc}
 800fb04:	f3af 8000 	nop.w
 800fb08:	3a92a305 	.word	0x3a92a305
 800fb0c:	40239d01 	.word	0x40239d01
 800fb10:	24000a50 	.word	0x24000a50
 800fb14:	3ff00000 	.word	0x3ff00000

0800fb18 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	ed87 0a01 	vstr	s0, [r7, #4]
 800fb22:	ed97 0a01 	vldr	s0, [r7, #4]
 800fb26:	f01a fc6b 	bl	802a400 <cosf>
 800fb2a:	eef0 7a40 	vmov.f32	s15, s0
 800fb2e:	eeb0 0a67 	vmov.f32	s0, s15
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	ed87 0a01 	vstr	s0, [r7, #4]
 800fb42:	ed97 0a01 	vldr	s0, [r7, #4]
 800fb46:	f01a fc9b 	bl	802a480 <sinf>
 800fb4a:	eef0 7a40 	vmov.f32	s15, s0
 800fb4e:	eeb0 0a67 	vmov.f32	s0, s15
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <_ZN25positionControlModelClass17setExternalInputsEPK22ExtU_positionControl_T>:
  void setBlockParameters(const P_positionControl_T *ppositionControl_P);

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_positionControl_T* pExtU_positionControl_T)
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  {
    positionControl_U = *pExtU_positionControl_T;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	683a      	ldr	r2, [r7, #0]
 800fb66:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800fb6a:	4611      	mov	r1, r2
 800fb6c:	2258      	movs	r2, #88	; 0x58
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f01d fb62 	bl	802d238 <memcpy>
  }
 800fb74:	bf00      	nop
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <_ZNK25positionControlModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const ExtY_positionControl_T & getExternalOutputs() const
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  {
    return positionControl_Y;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f503 7360 	add.w	r3, r3, #896	; 0x380
  }
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	370c      	adds	r7, #12
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr

0800fb96 <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 800fb96:	b4b0      	push	{r4, r5, r7}
 800fb98:	b083      	sub	sp, #12
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
 800fb9e:	6039      	str	r1, [r7, #0]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800fba8:	4615      	mov	r5, r2
 800fbaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fbb2:	e884 0003 	stmia.w	r4, {r0, r1}
 800fbb6:	bf00      	nop
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bcb0      	pop	{r4, r5, r7}
 800fbbe:	4770      	bx	lr

0800fbc0 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 800fbc0:	b590      	push	{r4, r7, lr}
 800fbc2:	b085      	sub	sp, #20
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
 800fbca:	2300      	movs	r3, #0
 800fbcc:	73fb      	strb	r3, [r7, #15]
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800fbda:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fbde:	42a2      	cmp	r2, r4
 800fbe0:	bf08      	it	eq
 800fbe2:	4299      	cmpeq	r1, r3
 800fbe4:	d001      	beq.n	800fbea <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE+0x2a>
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	73fb      	strb	r3, [r7, #15]
 800fbea:	683a      	ldr	r2, [r7, #0]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	4610      	mov	r0, r2
 800fbf0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800fbf4:	2248      	movs	r2, #72	; 0x48
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	f01d fb1e 	bl	802d238 <memcpy>
 800fbfc:	7bfb      	ldrb	r3, [r7, #15]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3714      	adds	r7, #20
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd90      	pop	{r4, r7, pc}
	...

0800fc08 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800fc08:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800fc0c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800fc0e:	4b0e      	ldr	r3, [pc, #56]	; (800fc48 <_ZL11microsecondv+0x40>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4619      	mov	r1, r3
 800fc14:	f04f 0200 	mov.w	r2, #0
 800fc18:	f04f 0b00 	mov.w	fp, #0
 800fc1c:	f04f 0c00 	mov.w	ip, #0
 800fc20:	468c      	mov	ip, r1
 800fc22:	f04f 0b00 	mov.w	fp, #0
 800fc26:	4a09      	ldr	r2, [pc, #36]	; (800fc4c <_ZL11microsecondv+0x44>)
 800fc28:	6812      	ldr	r2, [r2, #0]
 800fc2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fc2c:	4611      	mov	r1, r2
 800fc2e:	f04f 0200 	mov.w	r2, #0
 800fc32:	ea4b 0301 	orr.w	r3, fp, r1
 800fc36:	ea4c 0402 	orr.w	r4, ip, r2
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	4621      	mov	r1, r4
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	24000a48 	.word	0x24000a48
 800fc4c:	2400c62c 	.word	0x2400c62c

0800fc50 <_ZN2FCL3mapEtttff>:
static float map(uint16_t value, uint16_t in_min, uint16_t in_max, float out_min, float out_max){
 800fc50:	b480      	push	{r7}
 800fc52:	b085      	sub	sp, #20
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	4603      	mov	r3, r0
 800fc58:	ed87 0a01 	vstr	s0, [r7, #4]
 800fc5c:	edc7 0a00 	vstr	s1, [r7]
 800fc60:	81fb      	strh	r3, [r7, #14]
 800fc62:	460b      	mov	r3, r1
 800fc64:	81bb      	strh	r3, [r7, #12]
 800fc66:	4613      	mov	r3, r2
 800fc68:	817b      	strh	r3, [r7, #10]
	return (float)(value - in_min)*(out_max - out_min) / (in_max - in_min) + out_min;
 800fc6a:	89fa      	ldrh	r2, [r7, #14]
 800fc6c:	89bb      	ldrh	r3, [r7, #12]
 800fc6e:	1ad3      	subs	r3, r2, r3
 800fc70:	ee07 3a90 	vmov	s15, r3
 800fc74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fc78:	edd7 6a00 	vldr	s13, [r7]
 800fc7c:	edd7 7a01 	vldr	s15, [r7, #4]
 800fc80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fc84:	ee67 6a27 	vmul.f32	s13, s14, s15
 800fc88:	897a      	ldrh	r2, [r7, #10]
 800fc8a:	89bb      	ldrh	r3, [r7, #12]
 800fc8c:	1ad3      	subs	r3, r2, r3
 800fc8e:	ee07 3a90 	vmov	s15, r3
 800fc92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc9a:	edd7 7a01 	vldr	s15, [r7, #4]
 800fc9e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800fca2:	eeb0 0a67 	vmov.f32	s0, s15
 800fca6:	3714      	adds	r7, #20
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <_ZN2FCL15radianThresholdEf>:

static float radianThreshold(float radian){
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	ed87 0a01 	vstr	s0, [r7, #4]
	while(radian >= FC_PI){
 800fcba:	edd7 7a01 	vldr	s15, [r7, #4]
 800fcbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fcc2:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 800fd30 <_ZN2FCL15radianThresholdEf+0x80>
 800fcc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcce:	da00      	bge.n	800fcd2 <_ZN2FCL15radianThresholdEf+0x22>
 800fcd0:	e00c      	b.n	800fcec <_ZN2FCL15radianThresholdEf+0x3c>
		radian -= FC_2PI;
 800fcd2:	edd7 7a01 	vldr	s15, [r7, #4]
 800fcd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fcda:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800fd38 <_ZN2FCL15radianThresholdEf+0x88>
 800fcde:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fce2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fce6:	edc7 7a01 	vstr	s15, [r7, #4]
	while(radian >= FC_PI){
 800fcea:	e7e6      	b.n	800fcba <_ZN2FCL15radianThresholdEf+0xa>
	}
	while(radian <= -FC_PI){
 800fcec:	edd7 7a01 	vldr	s15, [r7, #4]
 800fcf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fcf4:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800fd40 <_ZN2FCL15radianThresholdEf+0x90>
 800fcf8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd00:	d80c      	bhi.n	800fd1c <_ZN2FCL15radianThresholdEf+0x6c>
		radian += FC_2PI;
 800fd02:	edd7 7a01 	vldr	s15, [r7, #4]
 800fd06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fd0a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 800fd38 <_ZN2FCL15radianThresholdEf+0x88>
 800fd0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fd12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800fd16:	edc7 7a01 	vstr	s15, [r7, #4]
	while(radian <= -FC_PI){
 800fd1a:	e7e7      	b.n	800fcec <_ZN2FCL15radianThresholdEf+0x3c>
	}
	return radian;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	ee07 3a90 	vmov	s15, r3
}
 800fd22:	eeb0 0a67 	vmov.f32	s0, s15
 800fd26:	370c      	adds	r7, #12
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr
 800fd30:	54442d18 	.word	0x54442d18
 800fd34:	400921fb 	.word	0x400921fb
 800fd38:	54442d18 	.word	0x54442d18
 800fd3c:	401921fb 	.word	0x401921fb
 800fd40:	54442d18 	.word	0x54442d18
 800fd44:	c00921fb 	.word	0xc00921fb

0800fd48 <_ZN2FC24ModulePositionControllerC1Ev>:
#include "Utils/function.h"
#include "Utils/Constant.h"
#include "printf.h"
namespace FC {

ModulePositionController::ModulePositionController() {
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7f5 fe08 	bl	8005968 <_ZN25positionControlModelClassC1Ev>
	// TODO Auto-generated constructor stub
}
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
	...

0800fd64 <_ZN2FC24ModulePositionController7oneStepEv>:

void ModulePositionController::oneStep(){
 800fd64:	b590      	push	{r4, r7, lr}
 800fd66:	b09d      	sub	sp, #116	; 0x74
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 800fd72:	4619      	mov	r1, r3
 800fd74:	4878      	ldr	r0, [pc, #480]	; (800ff58 <_ZN2FC24ModulePositionController7oneStepEv+0x1f4>)
 800fd76:	f7fe ff05 	bl	800eb84 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	msgBus.getLocalPosition(&localPositionSub);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800fd80:	4619      	mov	r1, r3
 800fd82:	4875      	ldr	r0, [pc, #468]	; (800ff58 <_ZN2FC24ModulePositionController7oneStepEv+0x1f4>)
 800fd84:	f7ff ff1c 	bl	800fbc0 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>

	if(modeFlagSub.flightMode == Command::ControlPosition || modeFlagSub.flightMode == Command::ControlALT){
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	d004      	beq.n	800fd9c <_ZN2FC24ModulePositionController7oneStepEv+0x38>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d103      	bne.n	800fda4 <_ZN2FC24ModulePositionController7oneStepEv+0x40>
		setFromRC();
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 f8dd 	bl	800ff5c <_ZN2FC24ModulePositionController9setFromRCEv>
 800fda2:	e002      	b.n	800fdaa <_ZN2FC24ModulePositionController7oneStepEv+0x46>
	}
	else{
		setFromAutoController();
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 fa2d 	bl	8010204 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>
	}

	ExtU_positionControl_T input;

	input.set_x = targetX;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800fdb0:	edd3 7a00 	vldr	s15, [r3]
 800fdb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fdb8:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	input.set_y = targetY;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f203 4334 	addw	r3, r3, #1076	; 0x434
 800fdc2:	edd3 7a00 	vldr	s15, [r3]
 800fdc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fdca:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	input.set_z = -targetZ;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800fdd4:	edd3 7a00 	vldr	s15, [r3]
 800fdd8:	eef1 7a67 	vneg.f32	s15, s15
 800fddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fde0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	input.set_yaw = targetYaw;;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800fdea:	edd3 7a00 	vldr	s15, [r3]
 800fdee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fdf2:	ed87 7b08 	vstr	d7, [r7, #32]

	input.estim_dx = localPositionSub.vx;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	edd3 7ae9 	vldr	s15, [r3, #932]	; 0x3a4
 800fdfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fe00:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	input.estim_dy = localPositionSub.vy;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	edd3 7aea 	vldr	s15, [r3, #936]	; 0x3a8
 800fe0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fe0e:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
	input.estim_dz = localPositionSub.vz;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	edd3 7aeb 	vldr	s15, [r3, #940]	; 0x3ac
 800fe18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fe1c:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	input.estim_x = localPositionSub.x;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	edd3 7ae6 	vldr	s15, [r3, #920]	; 0x398
 800fe26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fe2a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	input.estim_y = localPositionSub.y;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	edd3 7ae7 	vldr	s15, [r3, #924]	; 0x39c
 800fe34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fe38:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	input.estim_z = localPositionSub.z;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	edd3 7ae8 	vldr	s15, [r3, #928]	; 0x3a0
 800fe42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800fe46:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	input.estim_yaw = localPositionSub.yaw;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800fe50:	61bb      	str	r3, [r7, #24]

	setExternalInputs(&input);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f107 0218 	add.w	r2, r7, #24
 800fe58:	4611      	mov	r1, r2
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff fe7c 	bl	800fb58 <_ZN25positionControlModelClass17setExternalInputsEPK22ExtU_positionControl_T>
	step();
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7f4 fc48 	bl	80046f8 <_ZN25positionControlModelClass4stepEv>
	ExtY_positionControl_T output = getExternalOutputs();
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7ff fe86 	bl	800fb7c <_ZNK25positionControlModelClass18getExternalOutputsEv>
 800fe70:	4603      	mov	r3, r0
 800fe72:	f107 0408 	add.w	r4, r7, #8
 800fe76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	vehicleAttitudeSpPub.timestamp = microsecond();
 800fe7c:	f7ff fec4 	bl	800fc08 <_ZL11microsecondv>
 800fe80:	4603      	mov	r3, r0
 800fe82:	460c      	mov	r4, r1
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	f502 6283 	add.w	r2, r2, #1048	; 0x418
 800fe8a:	e9c2 3400 	strd	r3, r4, [r2]
	vehicleAttitudeSpPub.throttle = output.des_Thrust;
 800fe8e:	697a      	ldr	r2, [r7, #20]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800fe96:	601a      	str	r2, [r3, #0]


	/* position control mode */
	if(modeFlagSub.flightMode == Command::ControlPosition){
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800fe9e:	2b02      	cmp	r3, #2
 800fea0:	d10f      	bne.n	800fec2 <_ZN2FC24ModulePositionController7oneStepEv+0x15e>
		vehicleAttitudeSpPub.pitch = output.des_pitch;
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800feaa:	601a      	str	r2, [r3, #0]
		vehicleAttitudeSpPub.roll = output.des_roll;
 800feac:	68ba      	ldr	r2, [r7, #8]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800feb4:	601a      	str	r2, [r3, #0]
		vehicleAttitudeSpPub.yawRate = output.des_yaw_rate;
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800febe:	601a      	str	r2, [r3, #0]
 800fec0:	e03e      	b.n	800ff40 <_ZN2FC24ModulePositionController7oneStepEv+0x1dc>
	}
	/* alt hold mode */
	else {
		vehicleAttitudeSpPub.pitch = map(controllerSub.pitch, 1000, 2000, -1.0, 1.0);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 800fec8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800fecc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800fed0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800fed4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fed8:	4618      	mov	r0, r3
 800feda:	f7ff feb9 	bl	800fc50 <_ZN2FCL3mapEtttff>
 800fede:	eef0 7a40 	vmov.f32	s15, s0
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800fee8:	edc3 7a00 	vstr	s15, [r3]
		vehicleAttitudeSpPub.roll = map(controllerSub.roll, 1000, 2000, -1.0, 1.0);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 800fef2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800fef6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800fefa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800fefe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7ff fea4 	bl	800fc50 <_ZN2FCL3mapEtttff>
 800ff08:	eef0 7a40 	vmov.f32	s15, s0
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800ff12:	edc3 7a00 	vstr	s15, [r3]
		vehicleAttitudeSpPub.yawRate = map(controllerSub.yaw, 1000, 2000, -1.0, 1.0);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800ff1c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800ff20:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ff24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ff28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7ff fe8f 	bl	800fc50 <_ZN2FCL3mapEtttff>
 800ff32:	eef0 7a40 	vmov.f32	s15, s0
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800ff3c:	edc3 7a00 	vstr	s15, [r3]
	}
	msgBus.setVehicleAttitueSP(vehicleAttitudeSpPub);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800ff46:	4619      	mov	r1, r3
 800ff48:	4803      	ldr	r0, [pc, #12]	; (800ff58 <_ZN2FC24ModulePositionController7oneStepEv+0x1f4>)
 800ff4a:	f7ff fe24 	bl	800fb96 <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>
}
 800ff4e:	bf00      	nop
 800ff50:	3774      	adds	r7, #116	; 0x74
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd90      	pop	{r4, r7, pc}
 800ff56:	bf00      	nop
 800ff58:	24000a50 	.word	0x24000a50

0800ff5c <_ZN2FC24ModulePositionController9setFromRCEv>:

void ModulePositionController::setFromRC(){
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	ed2d 8b02 	vpush	{d8}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
	static bool rollStickSet = false;
	static bool pitchStickSet = false;
	float roll;
	float pitch;

	msgBus.getController(&controllerSub);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ff6e:	4619      	mov	r1, r3
 800ff70:	489d      	ldr	r0, [pc, #628]	; (80101e8 <_ZN2FC24ModulePositionController9setFromRCEv+0x28c>)
 800ff72:	f7fe fd9d 	bl	800eab0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

	if( 1500 - STICK_THRESHOLD < controllerSub.throttle && controllerSub.throttle < 1500 + STICK_THRESHOLD){
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800ff7c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800ff80:	d917      	bls.n	800ffb2 <_ZN2FC24ModulePositionController9setFromRCEv+0x56>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800ff88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff8c:	d211      	bcs.n	800ffb2 <_ZN2FC24ModulePositionController9setFromRCEv+0x56>
		// set altitude
		if(!throtleStickSet){
 800ff8e:	4b97      	ldr	r3, [pc, #604]	; (80101ec <_ZN2FC24ModulePositionController9setFromRCEv+0x290>)
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	f083 0301 	eor.w	r3, r3, #1
 800ff96:	b2db      	uxtb	r3, r3
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d027      	beq.n	800ffec <_ZN2FC24ModulePositionController9setFromRCEv+0x90>
			targetZ = localPositionSub.z;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800ffa8:	601a      	str	r2, [r3, #0]
			throtleStickSet = true;
 800ffaa:	4b90      	ldr	r3, [pc, #576]	; (80101ec <_ZN2FC24ModulePositionController9setFromRCEv+0x290>)
 800ffac:	2201      	movs	r2, #1
 800ffae:	701a      	strb	r2, [r3, #0]
		if(!throtleStickSet){
 800ffb0:	e01c      	b.n	800ffec <_ZN2FC24ModulePositionController9setFromRCEv+0x90>
		}
	}
	else{
		targetZ = localPositionSub.z - map(controllerSub.throttle, 1000, 2000, -MAX_VELTICAL, MAX_VELTICAL);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	ed93 8ae8 	vldr	s16, [r3, #928]	; 0x3a0
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800ffbe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800ffc2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ffc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ffca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7ff fe3e 	bl	800fc50 <_ZN2FCL3mapEtttff>
 800ffd4:	eef0 7a40 	vmov.f32	s15, s0
 800ffd8:	ee78 7a67 	vsub.f32	s15, s16, s15
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800ffe2:	edc3 7a00 	vstr	s15, [r3]
		throtleStickSet = false;
 800ffe6:	4b81      	ldr	r3, [pc, #516]	; (80101ec <_ZN2FC24ModulePositionController9setFromRCEv+0x290>)
 800ffe8:	2200      	movs	r2, #0
 800ffea:	701a      	strb	r2, [r3, #0]
	}

	if( 1500 - STICK_THRESHOLD < controllerSub.yaw && controllerSub.yaw < 1500 + STICK_THRESHOLD){
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800fff2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800fff6:	d917      	bls.n	8010028 <_ZN2FC24ModulePositionController9setFromRCEv+0xcc>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800fffe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010002:	d211      	bcs.n	8010028 <_ZN2FC24ModulePositionController9setFromRCEv+0xcc>
		// set altitude
		if(!yawStickSet){
 8010004:	4b7a      	ldr	r3, [pc, #488]	; (80101f0 <_ZN2FC24ModulePositionController9setFromRCEv+0x294>)
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	f083 0301 	eor.w	r3, r3, #1
 801000c:	b2db      	uxtb	r3, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	d037      	beq.n	8010082 <_ZN2FC24ModulePositionController9setFromRCEv+0x126>
			targetYaw = localPositionSub.yaw;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801001e:	601a      	str	r2, [r3, #0]
			yawStickSet = true;
 8010020:	4b73      	ldr	r3, [pc, #460]	; (80101f0 <_ZN2FC24ModulePositionController9setFromRCEv+0x294>)
 8010022:	2201      	movs	r2, #1
 8010024:	701a      	strb	r2, [r3, #0]
		if(!yawStickSet){
 8010026:	e02c      	b.n	8010082 <_ZN2FC24ModulePositionController9setFromRCEv+0x126>
		}
	}
	else{
		targetYaw = localPositionSub.yaw + map(controllerSub.yaw, 1000, 2000, -MAX_YAW, MAX_YAW);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	ed93 8aef 	vldr	s16, [r3, #956]	; 0x3bc
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010034:	eddf 0a6f 	vldr	s1, [pc, #444]	; 80101f4 <_ZN2FC24ModulePositionController9setFromRCEv+0x298>
 8010038:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80101f8 <_ZN2FC24ModulePositionController9setFromRCEv+0x29c>
 801003c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010040:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010044:	4618      	mov	r0, r3
 8010046:	f7ff fe03 	bl	800fc50 <_ZN2FCL3mapEtttff>
 801004a:	eef0 7a40 	vmov.f32	s15, s0
 801004e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010058:	edc3 7a00 	vstr	s15, [r3]
		targetYaw = radianThreshold(targetYaw);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010062:	edd3 7a00 	vldr	s15, [r3]
 8010066:	eeb0 0a67 	vmov.f32	s0, s15
 801006a:	f7ff fe21 	bl	800fcb0 <_ZN2FCL15radianThresholdEf>
 801006e:	eef0 7a40 	vmov.f32	s15, s0
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010078:	edc3 7a00 	vstr	s15, [r3]
		yawStickSet = false;
 801007c:	4b5c      	ldr	r3, [pc, #368]	; (80101f0 <_ZN2FC24ModulePositionController9setFromRCEv+0x294>)
 801007e:	2200      	movs	r2, #0
 8010080:	701a      	strb	r2, [r3, #0]
	}

	if(1500 - STICK_THRESHOLD < controllerSub.roll && controllerSub.roll < 1500 + STICK_THRESHOLD){
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8010088:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801008c:	d913      	bls.n	80100b6 <_ZN2FC24ModulePositionController9setFromRCEv+0x15a>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8010094:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010098:	d20d      	bcs.n	80100b6 <_ZN2FC24ModulePositionController9setFromRCEv+0x15a>
		if(!rollStickSet){
 801009a:	4b58      	ldr	r3, [pc, #352]	; (80101fc <_ZN2FC24ModulePositionController9setFromRCEv+0x2a0>)
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	f083 0301 	eor.w	r3, r3, #1
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d019      	beq.n	80100dc <_ZN2FC24ModulePositionController9setFromRCEv+0x180>
			roll = 0;
 80100a8:	f04f 0300 	mov.w	r3, #0
 80100ac:	617b      	str	r3, [r7, #20]
			rollStickSet = true;
 80100ae:	4b53      	ldr	r3, [pc, #332]	; (80101fc <_ZN2FC24ModulePositionController9setFromRCEv+0x2a0>)
 80100b0:	2201      	movs	r2, #1
 80100b2:	701a      	strb	r2, [r3, #0]
		if(!rollStickSet){
 80100b4:	e012      	b.n	80100dc <_ZN2FC24ModulePositionController9setFromRCEv+0x180>
		}
	}
	else{
		roll = map(controllerSub.roll, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* roll */
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 80100bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80100c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80100c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80100c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7ff fdbf 	bl	800fc50 <_ZN2FCL3mapEtttff>
 80100d2:	ed87 0a05 	vstr	s0, [r7, #20]
		rollStickSet = false;
 80100d6:	4b49      	ldr	r3, [pc, #292]	; (80101fc <_ZN2FC24ModulePositionController9setFromRCEv+0x2a0>)
 80100d8:	2200      	movs	r2, #0
 80100da:	701a      	strb	r2, [r3, #0]
	}
	if(1500 - STICK_THRESHOLD < controllerSub.pitch && controllerSub.pitch < 1500 + STICK_THRESHOLD){
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 80100e2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80100e6:	d913      	bls.n	8010110 <_ZN2FC24ModulePositionController9setFromRCEv+0x1b4>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 80100ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100f2:	d20d      	bcs.n	8010110 <_ZN2FC24ModulePositionController9setFromRCEv+0x1b4>
		if(!pitchStickSet){
 80100f4:	4b42      	ldr	r3, [pc, #264]	; (8010200 <_ZN2FC24ModulePositionController9setFromRCEv+0x2a4>)
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	f083 0301 	eor.w	r3, r3, #1
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d019      	beq.n	8010136 <_ZN2FC24ModulePositionController9setFromRCEv+0x1da>
			pitch = 0;
 8010102:	f04f 0300 	mov.w	r3, #0
 8010106:	613b      	str	r3, [r7, #16]
			pitchStickSet = true;
 8010108:	4b3d      	ldr	r3, [pc, #244]	; (8010200 <_ZN2FC24ModulePositionController9setFromRCEv+0x2a4>)
 801010a:	2201      	movs	r2, #1
 801010c:	701a      	strb	r2, [r3, #0]
		if(!pitchStickSet){
 801010e:	e012      	b.n	8010136 <_ZN2FC24ModulePositionController9setFromRCEv+0x1da>
		}
	}
	else{
		pitch = map(controllerSub.pitch, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* pitch */
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8b3 33f2 	ldrh.w	r3, [r3, #1010]	; 0x3f2
 8010116:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801011a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801011e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010122:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010126:	4618      	mov	r0, r3
 8010128:	f7ff fd92 	bl	800fc50 <_ZN2FCL3mapEtttff>
 801012c:	ed87 0a04 	vstr	s0, [r7, #16]
		pitchStickSet = false;
 8010130:	4b33      	ldr	r3, [pc, #204]	; (8010200 <_ZN2FC24ModulePositionController9setFromRCEv+0x2a4>)
 8010132:	2200      	movs	r2, #0
 8010134:	701a      	strb	r2, [r3, #0]
	}
//	float roll = map(controllerSub.roll, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* roll */
//	float pitch = map(controllerSub.pitch, 1000, 2000, -MAX_HORISION, MAX_HORISION);	/* pitch */
//	targetYaw = map(controllerSub.yaw, 1000, 2000, -MAX_YAW, MAX_YAW);

	if( !rollStickSet || !pitchStickSet){
 8010136:	4b31      	ldr	r3, [pc, #196]	; (80101fc <_ZN2FC24ModulePositionController9setFromRCEv+0x2a0>)
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	f083 0301 	eor.w	r3, r3, #1
 801013e:	b2db      	uxtb	r3, r3
 8010140:	2b00      	cmp	r3, #0
 8010142:	d106      	bne.n	8010152 <_ZN2FC24ModulePositionController9setFromRCEv+0x1f6>
 8010144:	4b2e      	ldr	r3, [pc, #184]	; (8010200 <_ZN2FC24ModulePositionController9setFromRCEv+0x2a4>)
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	f083 0301 	eor.w	r3, r3, #1
 801014c:	b2db      	uxtb	r3, r3
 801014e:	2b00      	cmp	r3, #0
 8010150:	d043      	beq.n	80101da <_ZN2FC24ModulePositionController9setFromRCEv+0x27e>
		float cosYaw = cos(localPositionSub.yaw);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	edd3 7aef 	vldr	s15, [r3, #956]	; 0x3bc
 8010158:	eeb0 0a67 	vmov.f32	s0, s15
 801015c:	f7ff fcdc 	bl	800fb18 <_ZSt3cosf>
 8010160:	ed87 0a03 	vstr	s0, [r7, #12]
		float sinYaw = sin(localPositionSub.yaw);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	edd3 7aef 	vldr	s15, [r3, #956]	; 0x3bc
 801016a:	eeb0 0a67 	vmov.f32	s0, s15
 801016e:	f7ff fce3 	bl	800fb38 <_ZSt3sinf>
 8010172:	ed87 0a02 	vstr	s0, [r7, #8]
		targetX = localPositionSub.x + pitch*cosYaw + -roll*sinYaw;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	ed93 7ae6 	vldr	s14, [r3, #920]	; 0x398
 801017c:	edd7 6a04 	vldr	s13, [r7, #16]
 8010180:	edd7 7a03 	vldr	s15, [r7, #12]
 8010184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010188:	ee37 7a27 	vadd.f32	s14, s14, s15
 801018c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010190:	eef1 6a67 	vneg.f32	s13, s15
 8010194:	edd7 7a02 	vldr	s15, [r7, #8]
 8010198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801019c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80101a6:	edc3 7a00 	vstr	s15, [r3]
		targetY = localPositionSub.y + pitch*sinYaw + roll*cosYaw;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	ed93 7ae7 	vldr	s14, [r3, #924]	; 0x39c
 80101b0:	edd7 6a04 	vldr	s13, [r7, #16]
 80101b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80101b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80101c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80101c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f203 4334 	addw	r3, r3, #1076	; 0x434
 80101d6:	edc3 7a00 	vstr	s15, [r3]
	}
//	targetZ += localPositionSub.z;
//	targetYaw += localPositionSub.yaw;
}
 80101da:	bf00      	nop
 80101dc:	3718      	adds	r7, #24
 80101de:	46bd      	mov	sp, r7
 80101e0:	ecbd 8b02 	vpop	{d8}
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	24000a50 	.word	0x24000a50
 80101ec:	24000a4c 	.word	0x24000a4c
 80101f0:	24000a4d 	.word	0x24000a4d
 80101f4:	3fc90fd8 	.word	0x3fc90fd8
 80101f8:	bfc90fd8 	.word	0xbfc90fd8
 80101fc:	24000a4e 	.word	0x24000a4e
 8010200:	24000a4f 	.word	0x24000a4f

08010204 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>:

void ModulePositionController::setFromAutoController(){
 8010204:	b480      	push	{r7}
 8010206:	b083      	sub	sp, #12
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
	//TODO add struct VehiclePositionSP, convert to target
}
 801020c:	bf00      	nop
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <_ZN2FC6MsgBusC1Ev>:
	MsgBus()
 8010218:	b590      	push	{r4, r7, lr}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
		, health{0}
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	461a      	mov	r2, r3
 8010224:	2300      	movs	r3, #0
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	6053      	str	r3, [r2, #4]
 801022a:	6093      	str	r3, [r2, #8]
 801022c:	60d3      	str	r3, [r2, #12]
 801022e:	6113      	str	r3, [r2, #16]
 8010230:	6153      	str	r3, [r2, #20]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	3318      	adds	r3, #24
 8010236:	2200      	movs	r2, #0
 8010238:	601a      	str	r2, [r3, #0]
 801023a:	605a      	str	r2, [r3, #4]
 801023c:	609a      	str	r2, [r3, #8]
 801023e:	60da      	str	r2, [r3, #12]
 8010240:	611a      	str	r2, [r3, #16]
 8010242:	615a      	str	r2, [r3, #20]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	3330      	adds	r3, #48	; 0x30
 8010248:	2200      	movs	r2, #0
 801024a:	601a      	str	r2, [r3, #0]
 801024c:	605a      	str	r2, [r3, #4]
 801024e:	609a      	str	r2, [r3, #8]
 8010250:	60da      	str	r2, [r3, #12]
 8010252:	611a      	str	r2, [r3, #16]
 8010254:	615a      	str	r2, [r3, #20]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	3348      	adds	r3, #72	; 0x48
 801025a:	2248      	movs	r2, #72	; 0x48
 801025c:	2100      	movs	r1, #0
 801025e:	4618      	mov	r0, r3
 8010260:	f01c fff5 	bl	802d24e <memset>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	3390      	adds	r3, #144	; 0x90
 8010268:	2200      	movs	r2, #0
 801026a:	601a      	str	r2, [r3, #0]
 801026c:	605a      	str	r2, [r3, #4]
 801026e:	609a      	str	r2, [r3, #8]
 8010270:	60da      	str	r2, [r3, #12]
 8010272:	611a      	str	r2, [r3, #16]
 8010274:	615a      	str	r2, [r3, #20]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	33a8      	adds	r3, #168	; 0xa8
 801027a:	2200      	movs	r2, #0
 801027c:	601a      	str	r2, [r3, #0]
 801027e:	605a      	str	r2, [r3, #4]
 8010280:	609a      	str	r2, [r3, #8]
 8010282:	60da      	str	r2, [r3, #12]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	33f0      	adds	r3, #240	; 0xf0
 8010288:	2228      	movs	r2, #40	; 0x28
 801028a:	2100      	movs	r1, #0
 801028c:	4618      	mov	r0, r3
 801028e:	f01c ffde 	bl	802d24e <memset>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010298:	2200      	movs	r2, #0
 801029a:	601a      	str	r2, [r3, #0]
 801029c:	605a      	str	r2, [r3, #4]
 801029e:	609a      	str	r2, [r3, #8]
 80102a0:	60da      	str	r2, [r3, #12]
 80102a2:	611a      	str	r2, [r3, #16]
 80102a4:	615a      	str	r2, [r3, #20]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 80102ac:	f04f 0300 	mov.w	r3, #0
 80102b0:	f04f 0400 	mov.w	r4, #0
 80102b4:	e9c2 3400 	strd	r3, r4, [r2]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2209      	movs	r2, #9
 80102bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80102ce:	2220      	movs	r2, #32
 80102d0:	2100      	movs	r1, #0
 80102d2:	4618      	mov	r0, r3
 80102d4:	f01c ffbb 	bl	802d24e <memset>
	{}
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	4618      	mov	r0, r3
 80102dc:	370c      	adds	r7, #12
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd90      	pop	{r4, r7, pc}
	...

080102e4 <_Z41__static_initialization_and_destruction_0ii>:

namespace FC{

MsgBus msgBus;

}
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d107      	bne.n	8010304 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d102      	bne.n	8010304 <_Z41__static_initialization_and_destruction_0ii+0x20>
MsgBus msgBus;
 80102fe:	4803      	ldr	r0, [pc, #12]	; (801030c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8010300:	f7ff ff8a 	bl	8010218 <_ZN2FC6MsgBusC1Ev>
}
 8010304:	bf00      	nop
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	24000a50 	.word	0x24000a50

08010310 <_GLOBAL__sub_I__ZN2FC6msgBusE>:
 8010310:	b580      	push	{r7, lr}
 8010312:	af00      	add	r7, sp, #0
 8010314:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010318:	2001      	movs	r0, #1
 801031a:	f7ff ffe3 	bl	80102e4 <_Z41__static_initialization_and_destruction_0ii>
 801031e:	bd80      	pop	{r7, pc}

08010320 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 8010320:	b490      	push	{r4, r7}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8010332:	4613      	mov	r3, r2
 8010334:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010336:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801033a:	bf00      	nop
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bc90      	pop	{r4, r7}
 8010342:	4770      	bx	lr

08010344 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010344:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010348:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 801034a:	4b0e      	ldr	r3, [pc, #56]	; (8010384 <_ZL11microsecondv+0x40>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4619      	mov	r1, r3
 8010350:	f04f 0200 	mov.w	r2, #0
 8010354:	f04f 0b00 	mov.w	fp, #0
 8010358:	f04f 0c00 	mov.w	ip, #0
 801035c:	468c      	mov	ip, r1
 801035e:	f04f 0b00 	mov.w	fp, #0
 8010362:	4a09      	ldr	r2, [pc, #36]	; (8010388 <_ZL11microsecondv+0x44>)
 8010364:	6812      	ldr	r2, [r2, #0]
 8010366:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010368:	4611      	mov	r1, r2
 801036a:	f04f 0200 	mov.w	r2, #0
 801036e:	ea4b 0301 	orr.w	r3, fp, r1
 8010372:	ea4c 0402 	orr.w	r4, ip, r2
}
 8010376:	4618      	mov	r0, r3
 8010378:	4621      	mov	r1, r4
 801037a:	46bd      	mov	sp, r7
 801037c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010380:	4770      	bx	lr
 8010382:	bf00      	nop
 8010384:	24000e00 	.word	0x24000e00
 8010388:	2400c62c 	.word	0x2400c62c

0801038c <_ZL11millisecondv>:

static __inline uint32_t millisecond(){
 801038c:	b580      	push	{r7, lr}
 801038e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8010390:	f004 fa0a 	bl	80147a8 <HAL_GetTick>
 8010394:	4603      	mov	r3, r0
}
 8010396:	4618      	mov	r0, r3
 8010398:	bd80      	pop	{r7, pc}

0801039a <_ZN2FC2RCC1Ev>:

#define ARMING_THRESHOLD 1500

class RC : public Freq<RC>{
public:
	RC() : start(false) {}
 801039a:	b480      	push	{r7}
 801039c:	b083      	sub	sp, #12
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2200      	movs	r2, #0
 80103a6:	761a      	strb	r2, [r3, #24]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4618      	mov	r0, r3
 80103ac:	370c      	adds	r7, #12
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr
	...

080103b8 <_ZN2FC2RC5setRCEtttttt>:
RC rc;

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode)
{
 80103b8:	b590      	push	{r4, r7, lr}
 80103ba:	b08b      	sub	sp, #44	; 0x2c
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	4608      	mov	r0, r1
 80103c2:	4611      	mov	r1, r2
 80103c4:	461a      	mov	r2, r3
 80103c6:	4603      	mov	r3, r0
 80103c8:	817b      	strh	r3, [r7, #10]
 80103ca:	460b      	mov	r3, r1
 80103cc:	813b      	strh	r3, [r7, #8]
 80103ce:	4613      	mov	r3, r2
 80103d0:	80fb      	strh	r3, [r7, #6]
	if(start == false && throttle > MOTOR_CALIBRATION_THROTLE){
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	7e1b      	ldrb	r3, [r3, #24]
 80103d6:	f083 0301 	eor.w	r3, r3, #1
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d007      	beq.n	80103f0 <_ZN2FC2RC5setRCEtttttt+0x38>
 80103e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80103e2:	f240 729e 	movw	r2, #1950	; 0x79e
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d902      	bls.n	80103f0 <_ZN2FC2RC5setRCEtttttt+0x38>
		ModuleCommander::sendCommand(Command::MotorCalibration);
 80103ea:	200a      	movs	r0, #10
 80103ec:	f7fe ffc6 	bl	800f37c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
	}
	start = true;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2201      	movs	r2, #1
 80103f4:	761a      	strb	r2, [r3, #24]

	/* cotnroller publish */
	this->controllerPub.timestamp = microsecond();
 80103f6:	f7ff ffa5 	bl	8010344 <_ZL11microsecondv>
 80103fa:	4603      	mov	r3, r0
 80103fc:	460c      	mov	r4, r1
 80103fe:	68fa      	ldr	r2, [r7, #12]
 8010400:	e9c2 3400 	strd	r3, r4, [r2]
	this->controllerPub.roll = roll;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	897a      	ldrh	r2, [r7, #10]
 8010408:	811a      	strh	r2, [r3, #8]
	this->controllerPub.pitch = pitch;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	893a      	ldrh	r2, [r7, #8]
 801040e:	815a      	strh	r2, [r3, #10]
	this->controllerPub.yaw = yaw;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	88fa      	ldrh	r2, [r7, #6]
 8010414:	819a      	strh	r2, [r3, #12]
	this->controllerPub.throttle = throttle;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801041a:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controllerPub);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	4619      	mov	r1, r3
 8010420:	484e      	ldr	r0, [pc, #312]	; (801055c <_ZN2FC2RC5setRCEtttttt+0x1a4>)
 8010422:	f7ff ff7d 	bl	8010320 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>

	/* arming */
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);							/* current arm mode */
 8010426:	f107 0310 	add.w	r3, r7, #16
 801042a:	4619      	mov	r1, r3
 801042c:	484b      	ldr	r0, [pc, #300]	; (801055c <_ZN2FC2RC5setRCEtttttt+0x1a4>)
 801042e:	f7fe fba9 	bl	800eb84 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	Command rcvArmFlag = Command::DisArm;						/* request arm mode */
 8010432:	2309      	movs	r3, #9
 8010434:	627b      	str	r3, [r7, #36]	; 0x24
	if( armming > ARMING_THRESHOLD ) rcvArmFlag = Command::Arm;
 8010436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010438:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801043c:	4293      	cmp	r3, r2
 801043e:	d901      	bls.n	8010444 <_ZN2FC2RC5setRCEtttttt+0x8c>
 8010440:	2308      	movs	r3, #8
 8010442:	627b      	str	r3, [r7, #36]	; 0x24
	if(modeFlag.armMode != rcvArmFlag && millisecond()-lastArmReq > 500){
 8010444:	69bb      	ldr	r3, [r7, #24]
 8010446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010448:	429a      	cmp	r2, r3
 801044a:	d00a      	beq.n	8010462 <_ZN2FC2RC5setRCEtttttt+0xaa>
 801044c:	f7ff ff9e 	bl	801038c <_ZL11millisecondv>
 8010450:	4602      	mov	r2, r0
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	691b      	ldr	r3, [r3, #16]
 8010456:	1ad3      	subs	r3, r2, r3
 8010458:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801045c:	d901      	bls.n	8010462 <_ZN2FC2RC5setRCEtttttt+0xaa>
 801045e:	2301      	movs	r3, #1
 8010460:	e000      	b.n	8010464 <_ZN2FC2RC5setRCEtttttt+0xac>
 8010462:	2300      	movs	r3, #0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d007      	beq.n	8010478 <_ZN2FC2RC5setRCEtttttt+0xc0>
		ModuleCommander::sendCommand(rcvArmFlag); /* send command */
 8010468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801046a:	f7fe ff87 	bl	800f37c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
		lastArmReq = millisecond();
 801046e:	f7ff ff8d 	bl	801038c <_ZL11millisecondv>
 8010472:	4602      	mov	r2, r0
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	611a      	str	r2, [r3, #16]
	}

	if(millisecond() - lastModeReq > 500){
 8010478:	f7ff ff88 	bl	801038c <_ZL11millisecondv>
 801047c:	4602      	mov	r2, r0
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	695b      	ldr	r3, [r3, #20]
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010488:	bf8c      	ite	hi
 801048a:	2301      	movhi	r3, #1
 801048c:	2300      	movls	r3, #0
 801048e:	b2db      	uxtb	r3, r3
 8010490:	2b00      	cmp	r3, #0
 8010492:	d058      	beq.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
		if(mode > FLIGHT_ATTITUDE_MODE_THRSHOLD){
 8010494:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010498:	f240 726c 	movw	r2, #1900	; 0x76c
 801049c:	4293      	cmp	r3, r2
 801049e:	d90b      	bls.n	80104b8 <_ZN2FC2RC5setRCEtttttt+0x100>
			if(modeFlag.flightMode != Command::ControlAttitude){
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d04f      	beq.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlAttitude); /* send command */
 80104a6:	2000      	movs	r0, #0
 80104a8:	f7fe ff68 	bl	800f37c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 80104ac:	f7ff ff6e 	bl	801038c <_ZL11millisecondv>
 80104b0:	4602      	mov	r2, r0
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	615a      	str	r2, [r3, #20]
 80104b6:	e046      	b.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_POSITION_MODE_THRSHOLD){
 80104b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80104bc:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d90b      	bls.n	80104dc <_ZN2FC2RC5setRCEtttttt+0x124>
			if(modeFlag.flightMode != Command::ControlPosition){
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d03d      	beq.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 80104ca:	2002      	movs	r0, #2
 80104cc:	f7fe ff56 	bl	800f37c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 80104d0:	f7ff ff5c 	bl	801038c <_ZL11millisecondv>
 80104d4:	4602      	mov	r2, r0
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	615a      	str	r2, [r3, #20]
 80104da:	e034      	b.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_AUTO_MODE_THRSHOLD){ /* FLIGHT_AUTO_MODE_THRSHOLD */
 80104dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80104e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d90b      	bls.n	8010500 <_ZN2FC2RC5setRCEtttttt+0x148>
			if(modeFlag.flightMode != Command::AutoWaypoint){
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	2b03      	cmp	r3, #3
 80104ec:	d02b      	beq.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 80104ee:	2002      	movs	r0, #2
 80104f0:	f7fe ff44 	bl	800f37c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 80104f4:	f7ff ff4a 	bl	801038c <_ZL11millisecondv>
 80104f8:	4602      	mov	r2, r0
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	615a      	str	r2, [r3, #20]
 80104fe:	e022      	b.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_RTL_MODE_THRSHOLD){
 8010500:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010504:	f240 5246 	movw	r2, #1350	; 0x546
 8010508:	4293      	cmp	r3, r2
 801050a:	d90b      	bls.n	8010524 <_ZN2FC2RC5setRCEtttttt+0x16c>
			if(modeFlag.flightMode != Command::AutoRTL){
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	2b04      	cmp	r3, #4
 8010510:	d019      	beq.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::AutoRTL); /* send command */
 8010512:	2004      	movs	r0, #4
 8010514:	f7fe ff32 	bl	800f37c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 8010518:	f7ff ff38 	bl	801038c <_ZL11millisecondv>
 801051c:	4602      	mov	r2, r0
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	615a      	str	r2, [r3, #20]
 8010522:	e010      	b.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_ALT_MODE_THRSHOLD){
 8010524:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010528:	f240 32b6 	movw	r2, #950	; 0x3b6
 801052c:	4293      	cmp	r3, r2
 801052e:	d90a      	bls.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
			if(modeFlag.flightMode != Command::ControlALT){
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	2b01      	cmp	r3, #1
 8010534:	d007      	beq.n	8010546 <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlALT); /* send command */
 8010536:	2001      	movs	r0, #1
 8010538:	f7fe ff20 	bl	800f37c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 801053c:	f7ff ff26 	bl	801038c <_ZL11millisecondv>
 8010540:	4602      	mov	r2, r0
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	615a      	str	r2, [r3, #20]
			}
		}
	}

	/* Freq class variable */
	freqCnt++;
 8010546:	4b06      	ldr	r3, [pc, #24]	; (8010560 <_ZN2FC2RC5setRCEtttttt+0x1a8>)
 8010548:	881b      	ldrh	r3, [r3, #0]
 801054a:	3301      	adds	r3, #1
 801054c:	b29a      	uxth	r2, r3
 801054e:	4b04      	ldr	r3, [pc, #16]	; (8010560 <_ZN2FC2RC5setRCEtttttt+0x1a8>)
 8010550:	801a      	strh	r2, [r3, #0]
}
 8010552:	bf00      	nop
 8010554:	372c      	adds	r7, #44	; 0x2c
 8010556:	46bd      	mov	sp, r7
 8010558:	bd90      	pop	{r4, r7, pc}
 801055a:	bf00      	nop
 801055c:	24000a50 	.word	0x24000a50
 8010560:	24000e28 	.word	0x24000e28

08010564 <_Z41__static_initialization_and_destruction_0ii>:
}
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d107      	bne.n	8010584 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801057a:	4293      	cmp	r3, r2
 801057c:	d102      	bne.n	8010584 <_Z41__static_initialization_and_destruction_0ii+0x20>
RC rc;
 801057e:	4803      	ldr	r0, [pc, #12]	; (801058c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8010580:	f7ff ff0b 	bl	801039a <_ZN2FC2RCC1Ev>
}
 8010584:	bf00      	nop
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	24000e08 	.word	0x24000e08

08010590 <_GLOBAL__sub_I__ZN2FC2rcE>:
 8010590:	b580      	push	{r7, lr}
 8010592:	af00      	add	r7, sp, #0
 8010594:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010598:	2001      	movs	r0, #1
 801059a:	f7ff ffe3 	bl	8010564 <_Z41__static_initialization_and_destruction_0ii>
 801059e:	bd80      	pop	{r7, pc}

080105a0 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 80105a0:	b4b0      	push	{r4, r5, r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	4614      	mov	r4, r2
 80105b0:	461d      	mov	r5, r3
 80105b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80105ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80105be:	bf00      	nop
 80105c0:	370c      	adds	r7, #12
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bcb0      	pop	{r4, r5, r7}
 80105c6:	4770      	bx	lr

080105c8 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 80105c8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80105cc:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80105ce:	4b0e      	ldr	r3, [pc, #56]	; (8010608 <_ZL11microsecondv+0x40>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	4619      	mov	r1, r3
 80105d4:	f04f 0200 	mov.w	r2, #0
 80105d8:	f04f 0b00 	mov.w	fp, #0
 80105dc:	f04f 0c00 	mov.w	ip, #0
 80105e0:	468c      	mov	ip, r1
 80105e2:	f04f 0b00 	mov.w	fp, #0
 80105e6:	4a09      	ldr	r2, [pc, #36]	; (801060c <_ZL11microsecondv+0x44>)
 80105e8:	6812      	ldr	r2, [r2, #0]
 80105ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80105ec:	4611      	mov	r1, r2
 80105ee:	f04f 0200 	mov.w	r2, #0
 80105f2:	ea4b 0301 	orr.w	r3, fp, r1
 80105f6:	ea4c 0402 	orr.w	r4, ip, r2
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	4621      	mov	r1, r4
 80105fe:	46bd      	mov	sp, r7
 8010600:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop
 8010608:	24000e2c 	.word	0x24000e2c
 801060c:	2400c62c 	.word	0x2400c62c

08010610 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>:

    /*
     *  signal to AHRS main function
     *  this function is called by SensorAccel, SensorGyro (peripheral interface)
     */
    static inline void setSignal(enum AhrsSignal signal){
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	4603      	mov	r3, r0
 8010618:	71fb      	strb	r3, [r7, #7]
    	switch(signal){
 801061a:	79fb      	ldrb	r3, [r7, #7]
 801061c:	2b01      	cmp	r3, #1
 801061e:	d002      	beq.n	8010626 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x16>
 8010620:	2b02      	cmp	r3, #2
 8010622:	d008      	beq.n	8010636 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x26>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
        	break;
    	case AHRS_fromGyro:
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
    	}
    }
 8010624:	e00d      	b.n	8010642 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
 8010626:	4b09      	ldr	r3, [pc, #36]	; (801064c <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2101      	movs	r1, #1
 801062c:	4618      	mov	r0, r3
 801062e:	f015 fddb 	bl	80261e8 <osThreadFlagsSet>
        	break;
 8010632:	bf00      	nop
    }
 8010634:	e005      	b.n	8010642 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
 8010636:	4b05      	ldr	r3, [pc, #20]	; (801064c <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2102      	movs	r1, #2
 801063c:	4618      	mov	r0, r3
 801063e:	f015 fdd3 	bl	80261e8 <osThreadFlagsSet>
    }
 8010642:	bf00      	nop
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	240098a4 	.word	0x240098a4

08010650 <_ZN2FC11SensorAccelC1Ev>:

namespace FC{

SensorAccel sensorAccel;

SensorAccel::SensorAccel()
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
: bodyAccel{0,}, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	461a      	mov	r2, r3
 801065c:	2300      	movs	r3, #0
 801065e:	6013      	str	r3, [r2, #0]
 8010660:	6053      	str	r3, [r2, #4]
 8010662:	6093      	str	r3, [r2, #8]
 8010664:	60d3      	str	r3, [r2, #12]
 8010666:	6113      	str	r3, [r2, #16]
 8010668:	6153      	str	r3, [r2, #20]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f04f 0200 	mov.w	r2, #0
 8010670:	619a      	str	r2, [r3, #24]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f04f 0200 	mov.w	r2, #0
 8010678:	61da      	str	r2, [r3, #28]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f04f 0200 	mov.w	r2, #0
 8010680:	621a      	str	r2, [r3, #32]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f04f 0200 	mov.w	r2, #0
 8010688:	625a      	str	r2, [r3, #36]	; 0x24
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f04f 0200 	mov.w	r2, #0
 8010690:	629a      	str	r2, [r3, #40]	; 0x28
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f04f 0200 	mov.w	r2, #0
 8010698:	62da      	str	r2, [r3, #44]	; 0x2c
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2200      	movs	r2, #0
 801069e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4618      	mov	r0, r3
 80106ae:	370c      	adds	r7, #12
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <_ZN2FC11SensorAccel7setBiasEv>:

void SensorAccel::setBias(){
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2201      	movs	r2, #1
 80106c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f04f 0200 	mov.w	r2, #0
 80106d6:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f04f 0200 	mov.w	r2, #0
 80106de:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f04f 0200 	mov.w	r2, #0
 80106e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80106e8:	bf00      	nop
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <_ZN2FC11SensorAccel8setAccelEfff>:

void SensorAccel::setAccel(float x, float y, float z){
 80106f4:	b590      	push	{r4, r7, lr}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8010700:	edc7 0a01 	vstr	s1, [r7, #4]
 8010704:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8010708:	edd7 7a02 	vldr	s15, [r7, #8]
 801070c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010714:	d10d      	bne.n	8010732 <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8010716:	edd7 7a01 	vldr	s15, [r7, #4]
 801071a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801071e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010722:	d106      	bne.n	8010732 <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 8010724:	edd7 7a00 	vldr	s15, [r7]
 8010728:	eef5 7a40 	vcmp.f32	s15, #0.0
 801072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010730:	d041      	beq.n	80107b6 <_ZN2FC11SensorAccel8setAccelEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010738:	2b00      	cmp	r3, #0
 801073a:	d008      	beq.n	801074e <_ZN2FC11SensorAccel8setAccelEfff+0x5a>
 801073c:	ed97 1a00 	vldr	s2, [r7]
 8010740:	edd7 0a01 	vldr	s1, [r7, #4]
 8010744:	ed97 0a02 	vldr	s0, [r7, #8]
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f000 f83d 	bl	80107c8 <_ZN2FC11SensorAccel10calAverageEfff>

	this->bodyAccel.timestamp = microsecond();
 801074e:	f7ff ff3b 	bl	80105c8 <_ZL11microsecondv>
 8010752:	4603      	mov	r3, r0
 8010754:	460c      	mov	r4, r1
 8010756:	68fa      	ldr	r2, [r7, #12]
 8010758:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x - biasX;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	edd3 7a06 	vldr	s15, [r3, #24]
 8010762:	ed97 7a02 	vldr	s14, [r7, #8]
 8010766:	ee77 7a67 	vsub.f32	s15, s14, s15
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAccel.xyz[1] = y - biasY;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	edd3 7a07 	vldr	s15, [r3, #28]
 8010776:	ed97 7a01 	vldr	s14, [r7, #4]
 801077a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAccel.xyz[2] = z - biasZ;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	edd3 7a08 	vldr	s15, [r3, #32]
 801078a:	ed97 7a00 	vldr	s14, [r7]
 801078e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	4619      	mov	r1, r3
 801079c:	4808      	ldr	r0, [pc, #32]	; (80107c0 <_ZN2FC11SensorAccel8setAccelEfff+0xcc>)
 801079e:	f7ff feff 	bl	80105a0 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
	ModuleAHRS::setSignal(AHRS_fromAccel);
 80107a2:	2001      	movs	r0, #1
 80107a4:	f7ff ff34 	bl	8010610 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	/* Freq class variable */
	freqCnt++;
 80107a8:	4b06      	ldr	r3, [pc, #24]	; (80107c4 <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 80107aa:	881b      	ldrh	r3, [r3, #0]
 80107ac:	3301      	adds	r3, #1
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	4b04      	ldr	r3, [pc, #16]	; (80107c4 <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 80107b2:	801a      	strh	r2, [r3, #0]
 80107b4:	e000      	b.n	80107b8 <_ZN2FC11SensorAccel8setAccelEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80107b6:	bf00      	nop
}
 80107b8:	3714      	adds	r7, #20
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd90      	pop	{r4, r7, pc}
 80107be:	bf00      	nop
 80107c0:	24000a50 	.word	0x24000a50
 80107c4:	24000e68 	.word	0x24000e68

080107c8 <_ZN2FC11SensorAccel10calAverageEfff>:

void SensorAccel::calAverage(float x, float y, float z){
 80107c8:	b480      	push	{r7}
 80107ca:	b087      	sub	sp, #28
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80107d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80107d8:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107e2:	3b01      	subs	r3, #1
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 80107ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80107ee:	ee07 3a90 	vmov	s15, r3
 80107f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107f6:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010800:	edd7 7a05 	vldr	s15, [r7, #20]
 8010804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801080c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010810:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010814:	edd7 7a02 	vldr	s15, [r7, #8]
 8010818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801081c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801082c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010838:	edd7 7a05 	vldr	s15, [r7, #20]
 801083c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010840:	edd7 7a01 	vldr	s15, [r7, #4]
 8010844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010848:	ee77 7a27 	vadd.f32	s15, s14, s15
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8010858:	edd7 7a05 	vldr	s15, [r7, #20]
 801085c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010864:	edd7 7a05 	vldr	s15, [r7, #20]
 8010868:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801086c:	edd7 7a00 	vldr	s15, [r7]
 8010870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010884:	3301      	adds	r3, #1
 8010886:	b2da      	uxtb	r2, r3
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010894:	2b14      	cmp	r3, #20
 8010896:	d919      	bls.n	80108cc <_ZN2FC11SensorAccel10calAverageEfff+0x104>
		calBiasFlag = false;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2200      	movs	r2, #0
 801089c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	619a      	str	r2, [r3, #24]
		biasY = averY;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	61da      	str	r2, [r3, #28]
		biasZ = averZ - FC_GRAVITY_ACCEERATION;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80108b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80108ba:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80108d8 <_ZN2FC11SensorAccel10calAverageEfff+0x110>
 80108be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80108c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	edc3 7a08 	vstr	s15, [r3, #32]
	}
}
 80108cc:	bf00      	nop
 80108ce:	371c      	adds	r7, #28
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	3a92a305 	.word	0x3a92a305
 80108dc:	40239d01 	.word	0x40239d01

080108e0 <_Z41__static_initialization_and_destruction_0ii>:

}
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d107      	bne.n	8010900 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d102      	bne.n	8010900 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorAccel sensorAccel;
 80108fa:	4803      	ldr	r0, [pc, #12]	; (8010908 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80108fc:	f7ff fea8 	bl	8010650 <_ZN2FC11SensorAccelC1Ev>
}
 8010900:	bf00      	nop
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	24000e30 	.word	0x24000e30

0801090c <_GLOBAL__sub_I__ZN2FC11sensorAccelE>:
 801090c:	b580      	push	{r7, lr}
 801090e:	af00      	add	r7, sp, #0
 8010910:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010914:	2001      	movs	r0, #1
 8010916:	f7ff ffe3 	bl	80108e0 <_Z41__static_initialization_and_destruction_0ii>
 801091a:	bd80      	pop	{r7, pc}

0801091c <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 801091c:	b4b0      	push	{r4, r5, r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	6039      	str	r1, [r7, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	683a      	ldr	r2, [r7, #0]
 801092a:	f103 0490 	add.w	r4, r3, #144	; 0x90
 801092e:	4615      	mov	r5, r2
 8010930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010934:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010938:	e884 0003 	stmia.w	r4, {r0, r1}
 801093c:	bf00      	nop
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	bcb0      	pop	{r4, r5, r7}
 8010944:	4770      	bx	lr
	...

08010948 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010948:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 801094c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 801094e:	4b0e      	ldr	r3, [pc, #56]	; (8010988 <_ZL11microsecondv+0x40>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4619      	mov	r1, r3
 8010954:	f04f 0200 	mov.w	r2, #0
 8010958:	f04f 0b00 	mov.w	fp, #0
 801095c:	f04f 0c00 	mov.w	ip, #0
 8010960:	468c      	mov	ip, r1
 8010962:	f04f 0b00 	mov.w	fp, #0
 8010966:	4a09      	ldr	r2, [pc, #36]	; (801098c <_ZL11microsecondv+0x44>)
 8010968:	6812      	ldr	r2, [r2, #0]
 801096a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801096c:	4611      	mov	r1, r2
 801096e:	f04f 0200 	mov.w	r2, #0
 8010972:	ea4b 0301 	orr.w	r3, fp, r1
 8010976:	ea4c 0402 	orr.w	r4, ip, r2
}
 801097a:	4618      	mov	r0, r3
 801097c:	4621      	mov	r1, r4
 801097e:	46bd      	mov	sp, r7
 8010980:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop
 8010988:	24000e6c 	.word	0x24000e6c
 801098c:	2400c62c 	.word	0x2400c62c

08010990 <_ZN2FC10SensorBaroC1Ev>:

namespace FC{

class SensorBaro : public Freq<SensorBaro>{
public:
	SensorBaro()
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
	: barometerPub{0, }
	, seaLevelPressure(1013.25)
	, pressure(0)
	, temperature(0)
	, altitude(0)
	, refAltitude(0)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	461a      	mov	r2, r3
 801099c:	2300      	movs	r3, #0
 801099e:	6013      	str	r3, [r2, #0]
 80109a0:	6053      	str	r3, [r2, #4]
 80109a2:	6093      	str	r3, [r2, #8]
 80109a4:	60d3      	str	r3, [r2, #12]
 80109a6:	6113      	str	r3, [r2, #16]
 80109a8:	6153      	str	r3, [r2, #20]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4a0c      	ldr	r2, [pc, #48]	; (80109e0 <_ZN2FC10SensorBaroC1Ev+0x50>)
 80109ae:	619a      	str	r2, [r3, #24]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f04f 0200 	mov.w	r2, #0
 80109b6:	61da      	str	r2, [r3, #28]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f04f 0200 	mov.w	r2, #0
 80109be:	621a      	str	r2, [r3, #32]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f04f 0200 	mov.w	r2, #0
 80109c6:	625a      	str	r2, [r3, #36]	; 0x24
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f04f 0200 	mov.w	r2, #0
 80109ce:	629a      	str	r2, [r3, #40]	; 0x28
	{}
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	4618      	mov	r0, r3
 80109d4:	370c      	adds	r7, #12
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop
 80109e0:	447d5000 	.word	0x447d5000

080109e4 <_ZN2FC10SensorBaro7setBaroEff>:

namespace FC{

SensorBaro sensorBaro;

void SensorBaro::setBaro(float pressure, float temperature){
 80109e4:	b590      	push	{r4, r7, lr}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80109f0:	edc7 0a01 	vstr	s1, [r7, #4]
	/* invalid pressure */
//	if(pressure > 1200.0 || pressure < 900.0) return;

	this->pressure = pressure;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	68ba      	ldr	r2, [r7, #8]
 80109f8:	61da      	str	r2, [r3, #28]
	this->temperature = temperature;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	687a      	ldr	r2, [r7, #4]
 80109fe:	621a      	str	r2, [r3, #32]
	this->altitude = calAltitude(seaLevelPressure, pressure);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	edd3 7a06 	vldr	s15, [r3, #24]
 8010a06:	edd7 0a02 	vldr	s1, [r7, #8]
 8010a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f000 f87e 	bl	8010b10 <_ZN2FC10SensorBaro11calAltitudeEff>
 8010a14:	eef0 7a40 	vmov.f32	s15, s0
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->barometerPub.timestamp = microsecond();
 8010a1e:	f7ff ff93 	bl	8010948 <_ZL11microsecondv>
 8010a22:	4603      	mov	r3, r0
 8010a24:	460c      	mov	r4, r1
 8010a26:	68fa      	ldr	r2, [r7, #12]
 8010a28:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometerPub.pressure = this->pressure;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	69da      	ldr	r2, [r3, #28]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	609a      	str	r2, [r3, #8]
	this->barometerPub.temperature = this->temperature;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	6a1a      	ldr	r2, [r3, #32]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	60da      	str	r2, [r3, #12]
	this->barometerPub.altitude = this->altitude - refAltitude;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	edc3 7a04 	vstr	s15, [r3, #16]

	msgBus.setBarometer(this->barometerPub);
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	4619      	mov	r1, r3
 8010a56:	4806      	ldr	r0, [pc, #24]	; (8010a70 <_ZN2FC10SensorBaro7setBaroEff+0x8c>)
 8010a58:	f7ff ff60 	bl	801091c <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>

	/* Freq class variable */
	freqCnt++;
 8010a5c:	4b05      	ldr	r3, [pc, #20]	; (8010a74 <_ZN2FC10SensorBaro7setBaroEff+0x90>)
 8010a5e:	881b      	ldrh	r3, [r3, #0]
 8010a60:	3301      	adds	r3, #1
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	4b03      	ldr	r3, [pc, #12]	; (8010a74 <_ZN2FC10SensorBaro7setBaroEff+0x90>)
 8010a66:	801a      	strh	r2, [r3, #0]
}
 8010a68:	bf00      	nop
 8010a6a:	3714      	adds	r7, #20
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd90      	pop	{r4, r7, pc}
 8010a70:	24000a50 	.word	0x24000a50
 8010a74:	24000ea0 	.word	0x24000ea0

08010a78 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>:

void SensorBaro::setSeaLevelPressure(float altitude){
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	ed87 0a00 	vstr	s0, [r7]
	seaLevelPressure = calSeaLevelPressure(altitude, pressure);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	edd3 7a07 	vldr	s15, [r3, #28]
 8010a8a:	eef0 0a67 	vmov.f32	s1, s15
 8010a8e:	ed97 0a00 	vldr	s0, [r7]
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f000 f86c 	bl	8010b70 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>
 8010a98:	eef0 7a40 	vmov.f32	s15, s0
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8010aa2:	bf00      	nop
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <_ZN2FC10SensorBaro14setRefAltitudeEv>:

void SensorBaro::setRefAltitude(){
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b082      	sub	sp, #8
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
	refAltitude = calAltitude(seaLevelPressure, pressure);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	edd3 7a06 	vldr	s15, [r3, #24]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	ed93 7a07 	vldr	s14, [r3, #28]
 8010abe:	eef0 0a47 	vmov.f32	s1, s14
 8010ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 f822 	bl	8010b10 <_ZN2FC10SensorBaro11calAltitudeEff>
 8010acc:	eef0 7a40 	vmov.f32	s15, s0
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8010ad6:	bf00      	nop
 8010ad8:	3708      	adds	r7, #8
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b084      	sub	sp, #16
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	ed87 0a03 	vstr	s0, [r7, #12]
 8010ae8:	ed87 1b00 	vstr	d1, [r7]
      return pow(__type(__x), __type(__y));
 8010aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8010af0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010af4:	ed97 1b00 	vldr	d1, [r7]
 8010af8:	eeb0 0b47 	vmov.f64	d0, d7
 8010afc:	f019 fd58 	bl	802a5b0 <pow>
 8010b00:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8010b04:	eeb0 0b47 	vmov.f64	d0, d7
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
	...

08010b10 <_ZN2FC10SensorBaro11calAltitudeEff>:

float SensorBaro::calAltitude(float seaLevel, float pressure){
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	ed87 0a02 	vstr	s0, [r7, #8]
 8010b1c:	edc7 0a01 	vstr	s1, [r7, #4]
	return 44330.0 * (1.0 - pow(pressure / seaLevel, 0.1903));
 8010b20:	ed97 7a01 	vldr	s14, [r7, #4]
 8010b24:	edd7 7a02 	vldr	s15, [r7, #8]
 8010b28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010b2c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8010b60 <_ZN2FC10SensorBaro11calAltitudeEff+0x50>
 8010b30:	eeb0 0a66 	vmov.f32	s0, s13
 8010b34:	f7ff ffd3 	bl	8010ade <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8010b38:	eeb0 6b40 	vmov.f64	d6, d0
 8010b3c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010b40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b44:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8010b68 <_ZN2FC10SensorBaro11calAltitudeEff+0x58>
 8010b48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8010b50:	eeb0 0a67 	vmov.f32	s0, s15
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	f3af 8000 	nop.w
 8010b60:	1a36e2eb 	.word	0x1a36e2eb
 8010b64:	3fc85bc0 	.word	0x3fc85bc0
 8010b68:	00000000 	.word	0x00000000
 8010b6c:	40e5a540 	.word	0x40e5a540

08010b70 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>:

float SensorBaro::calSeaLevelPressure(float altitude, float pressure){
 8010b70:	b580      	push	{r7, lr}
 8010b72:	ed2d 8b02 	vpush	{d8}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8010b80:	edc7 0a01 	vstr	s1, [r7, #4]
	return pressure / pow(1.0 - (altitude / 44330.0), 5.255);
 8010b84:	edd7 7a01 	vldr	s15, [r7, #4]
 8010b88:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8010b8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010b90:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8010b94:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8010bd0 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x60>
 8010b98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010b9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010ba0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010ba4:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8010bd8 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x68>
 8010ba8:	eeb0 0b47 	vmov.f64	d0, d7
 8010bac:	f019 fd00 	bl	802a5b0 <pow>
 8010bb0:	eeb0 6b40 	vmov.f64	d6, d0
 8010bb4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8010bb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8010bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8010bc0:	3710      	adds	r7, #16
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	ecbd 8b02 	vpop	{d8}
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	f3af 8000 	nop.w
 8010bd0:	00000000 	.word	0x00000000
 8010bd4:	40e5a540 	.word	0x40e5a540
 8010bd8:	b851eb85 	.word	0xb851eb85
 8010bdc:	4015051e 	.word	0x4015051e

08010be0 <_Z41__static_initialization_and_destruction_0ii>:


}
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d107      	bne.n	8010c00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d102      	bne.n	8010c00 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorBaro sensorBaro;
 8010bfa:	4803      	ldr	r0, [pc, #12]	; (8010c08 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8010bfc:	f7ff fec8 	bl	8010990 <_ZN2FC10SensorBaroC1Ev>
}
 8010c00:	bf00      	nop
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	24000e70 	.word	0x24000e70

08010c0c <_GLOBAL__sub_I__ZN2FC10sensorBaroE>:
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010c14:	2001      	movs	r0, #1
 8010c16:	f7ff ffe3 	bl	8010be0 <_Z41__static_initialization_and_destruction_0ii>
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	683a      	ldr	r2, [r7, #0]
 8010c2a:	3348      	adds	r3, #72	; 0x48
 8010c2c:	4611      	mov	r1, r2
 8010c2e:	2248      	movs	r2, #72	; 0x48
 8010c30:	4618      	mov	r0, r3
 8010c32:	f01c fb01 	bl	802d238 <memcpy>
 8010c36:	bf00      	nop
 8010c38:	3708      	adds	r7, #8
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
	...

08010c40 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010c40:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010c44:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8010c46:	4b0e      	ldr	r3, [pc, #56]	; (8010c80 <_ZL11microsecondv+0x40>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	f04f 0200 	mov.w	r2, #0
 8010c50:	f04f 0b00 	mov.w	fp, #0
 8010c54:	f04f 0c00 	mov.w	ip, #0
 8010c58:	468c      	mov	ip, r1
 8010c5a:	f04f 0b00 	mov.w	fp, #0
 8010c5e:	4a09      	ldr	r2, [pc, #36]	; (8010c84 <_ZL11microsecondv+0x44>)
 8010c60:	6812      	ldr	r2, [r2, #0]
 8010c62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010c64:	4611      	mov	r1, r2
 8010c66:	f04f 0200 	mov.w	r2, #0
 8010c6a:	ea4b 0301 	orr.w	r3, fp, r1
 8010c6e:	ea4c 0402 	orr.w	r4, ip, r2
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	4621      	mov	r1, r4
 8010c76:	46bd      	mov	sp, r7
 8010c78:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	24000ea4 	.word	0x24000ea4
 8010c84:	2400c62c 	.word	0x2400c62c

08010c88 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:
SensorGPS sensorGPS;

void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 8010c88:	b590      	push	{r4, r7, lr}
 8010c8a:	b091      	sub	sp, #68	; 0x44
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010c90:	ed87 0b08 	vstr	d0, [r7, #32]
 8010c94:	ed87 1b06 	vstr	d1, [r7, #24]
 8010c98:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8010c9c:	edc7 2a05 	vstr	s5, [r7, #20]
 8010ca0:	ed87 3a04 	vstr	s6, [r7, #16]
 8010ca4:	edc7 3a03 	vstr	s7, [r7, #12]
 8010ca8:	ed87 4a02 	vstr	s8, [r7, #8]
 8010cac:	460b      	mov	r3, r1
 8010cae:	71fb      	strb	r3, [r7, #7]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	71bb      	strb	r3, [r7, #6]

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 8010cb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8010cb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010cbc:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8010d90 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x108>
 8010cc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010cc4:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8010d98 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x110>
 8010cc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010ccc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010cd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 8010cd4:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8010cd8:	f7fe ff1e 	bl	800fb18 <_ZSt3cosf>
 8010cdc:	eeb0 7a40 	vmov.f32	s14, s0
 8010ce0:	edd7 7a05 	vldr	s15, [r7, #20]
 8010ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ce8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 8010cec:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8010cf0:	f7fe ff22 	bl	800fb38 <_ZSt3sinf>
 8010cf4:	eeb0 7a40 	vmov.f32	s14, s0
 8010cf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8010cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d00:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 8010d04:	f7ff ff9c 	bl	8010c40 <_ZL11microsecondv>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	460c      	mov	r4, r1
 8010d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d0e:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 8010d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d14:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8010d18:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 8010d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d1e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010d22:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 8010d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d28:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010d2c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 8010d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d34:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 8010d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d38:	697a      	ldr	r2, [r7, #20]
 8010d3a:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 8010d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d40:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 8010d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d46:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 8010d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4a:	f04f 0200 	mov.w	r2, #0
 8010d4e:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 8010d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d54:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 8010d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d58:	68fa      	ldr	r2, [r7, #12]
 8010d5a:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 8010d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5e:	68ba      	ldr	r2, [r7, #8]
 8010d60:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 8010d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d64:	79fa      	ldrb	r2, [r7, #7]
 8010d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 8010d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6c:	79ba      	ldrb	r2, [r7, #6]
 8010d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 8010d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d74:	4619      	mov	r1, r3
 8010d76:	480a      	ldr	r0, [pc, #40]	; (8010da0 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x118>)
 8010d78:	f7ff ff50 	bl	8010c1c <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>

	/* Freq class variable */
	freqCnt++;
 8010d7c:	4b09      	ldr	r3, [pc, #36]	; (8010da4 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x11c>)
 8010d7e:	881b      	ldrh	r3, [r3, #0]
 8010d80:	3301      	adds	r3, #1
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	4b07      	ldr	r3, [pc, #28]	; (8010da4 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x11c>)
 8010d86:	801a      	strh	r2, [r3, #0]

}
 8010d88:	bf00      	nop
 8010d8a:	3744      	adds	r7, #68	; 0x44
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd90      	pop	{r4, r7, pc}
 8010d90:	54442d18 	.word	0x54442d18
 8010d94:	400921fb 	.word	0x400921fb
 8010d98:	00000000 	.word	0x00000000
 8010d9c:	40668000 	.word	0x40668000
 8010da0:	24000a50 	.word	0x24000a50
 8010da4:	24000f08 	.word	0x24000f08

08010da8 <_Z41__static_initialization_and_destruction_0ii>:

}
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
 8010db2:	bf00      	nop
 8010db4:	370c      	adds	r7, #12
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <_GLOBAL__sub_I__ZN2FC9sensorGPSE>:
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010dc6:	2001      	movs	r0, #1
 8010dc8:	f7ff ffee 	bl	8010da8 <_Z41__static_initialization_and_destruction_0ii>
 8010dcc:	bd80      	pop	{r7, pc}

08010dce <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 8010dce:	b4b0      	push	{r4, r5, r7}
 8010dd0:	b083      	sub	sp, #12
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6078      	str	r0, [r7, #4]
 8010dd6:	6039      	str	r1, [r7, #0]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	683a      	ldr	r2, [r7, #0]
 8010ddc:	f103 0418 	add.w	r4, r3, #24
 8010de0:	4615      	mov	r5, r2
 8010de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010de6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010dea:	e884 0003 	stmia.w	r4, {r0, r1}
 8010dee:	bf00      	nop
 8010df0:	370c      	adds	r7, #12
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bcb0      	pop	{r4, r5, r7}
 8010df6:	4770      	bx	lr

08010df8 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010df8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010dfc:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8010dfe:	4b0e      	ldr	r3, [pc, #56]	; (8010e38 <_ZL11microsecondv+0x40>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4619      	mov	r1, r3
 8010e04:	f04f 0200 	mov.w	r2, #0
 8010e08:	f04f 0b00 	mov.w	fp, #0
 8010e0c:	f04f 0c00 	mov.w	ip, #0
 8010e10:	468c      	mov	ip, r1
 8010e12:	f04f 0b00 	mov.w	fp, #0
 8010e16:	4a09      	ldr	r2, [pc, #36]	; (8010e3c <_ZL11microsecondv+0x44>)
 8010e18:	6812      	ldr	r2, [r2, #0]
 8010e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	f04f 0200 	mov.w	r2, #0
 8010e22:	ea4b 0301 	orr.w	r3, fp, r1
 8010e26:	ea4c 0402 	orr.w	r4, ip, r2
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	4621      	mov	r1, r4
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop
 8010e38:	24000f0c 	.word	0x24000f0c
 8010e3c:	2400c62c 	.word	0x2400c62c

08010e40 <_ZN2FC10SensorGyroC1Ev>:

namespace FC{

SensorGyro sensorGyro;

SensorGyro::SensorGyro()
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
: bodyAngularVelocity{0, }
, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	6013      	str	r3, [r2, #0]
 8010e50:	6053      	str	r3, [r2, #4]
 8010e52:	6093      	str	r3, [r2, #8]
 8010e54:	60d3      	str	r3, [r2, #12]
 8010e56:	6113      	str	r3, [r2, #16]
 8010e58:	6153      	str	r3, [r2, #20]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f04f 0200 	mov.w	r2, #0
 8010e60:	619a      	str	r2, [r3, #24]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f04f 0200 	mov.w	r2, #0
 8010e68:	61da      	str	r2, [r3, #28]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f04f 0200 	mov.w	r2, #0
 8010e70:	621a      	str	r2, [r3, #32]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f04f 0200 	mov.w	r2, #0
 8010e78:	625a      	str	r2, [r3, #36]	; 0x24
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f04f 0200 	mov.w	r2, #0
 8010e80:	629a      	str	r2, [r3, #40]	; 0x28
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f04f 0200 	mov.w	r2, #0
 8010e88:	62da      	str	r2, [r3, #44]	; 0x2c
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	370c      	adds	r7, #12
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr

08010ea8 <_ZN2FC10SensorGyro7setBiasEv>:

void SensorGyro::setBias(){
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f04f 0200 	mov.w	r2, #0
 8010ec6:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f04f 0200 	mov.w	r2, #0
 8010ece:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f04f 0200 	mov.w	r2, #0
 8010ed6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010ed8:	bf00      	nop
 8010eda:	370c      	adds	r7, #12
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr

08010ee4 <_ZN2FC10SensorGyro7setGyroEfff>:

void SensorGyro::setGyro(float x, float y, float z){
 8010ee4:	b590      	push	{r4, r7, lr}
 8010ee6:	b085      	sub	sp, #20
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	ed87 0a02 	vstr	s0, [r7, #8]
 8010ef0:	edc7 0a01 	vstr	s1, [r7, #4]
 8010ef4:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8010ef8:	edd7 7a02 	vldr	s15, [r7, #8]
 8010efc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f04:	d10d      	bne.n	8010f22 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8010f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8010f0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f12:	d106      	bne.n	8010f22 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8010f14:	edd7 7a00 	vldr	s15, [r7]
 8010f18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f20:	d041      	beq.n	8010fa6 <_ZN2FC10SensorGyro7setGyroEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d008      	beq.n	8010f3e <_ZN2FC10SensorGyro7setGyroEfff+0x5a>
 8010f2c:	ed97 1a00 	vldr	s2, [r7]
 8010f30:	edd7 0a01 	vldr	s1, [r7, #4]
 8010f34:	ed97 0a02 	vldr	s0, [r7, #8]
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f000 f83d 	bl	8010fb8 <_ZN2FC10SensorGyro10calAverageEfff>

	this->bodyAngularVelocity.timestamp = microsecond();
 8010f3e:	f7ff ff5b 	bl	8010df8 <_ZL11microsecondv>
 8010f42:	4603      	mov	r3, r0
 8010f44:	460c      	mov	r4, r1
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x - biasX;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8010f52:	ed97 7a02 	vldr	s14, [r7, #8]
 8010f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y - biasY;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	edd3 7a07 	vldr	s15, [r3, #28]
 8010f66:	ed97 7a01 	vldr	s14, [r7, #4]
 8010f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z - biasZ;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	edd3 7a08 	vldr	s15, [r3, #32]
 8010f7a:	ed97 7a00 	vldr	s14, [r7]
 8010f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	4808      	ldr	r0, [pc, #32]	; (8010fb0 <_ZN2FC10SensorGyro7setGyroEfff+0xcc>)
 8010f8e:	f7ff ff1e 	bl	8010dce <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
	ModuleAHRS::setSignal(AHRS_fromGyro);
 8010f92:	2002      	movs	r0, #2
 8010f94:	f7ff fb3c 	bl	8010610 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	freqCnt++;
 8010f98:	4b06      	ldr	r3, [pc, #24]	; (8010fb4 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 8010f9a:	881b      	ldrh	r3, [r3, #0]
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	4b04      	ldr	r3, [pc, #16]	; (8010fb4 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 8010fa2:	801a      	strh	r2, [r3, #0]
 8010fa4:	e000      	b.n	8010fa8 <_ZN2FC10SensorGyro7setGyroEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8010fa6:	bf00      	nop
}
 8010fa8:	3714      	adds	r7, #20
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd90      	pop	{r4, r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	24000a50 	.word	0x24000a50
 8010fb4:	24000f48 	.word	0x24000f48

08010fb8 <_ZN2FC10SensorGyro10calAverageEfff>:

void SensorGyro::calAverage(float x, float y, float z){
 8010fb8:	b480      	push	{r7}
 8010fba:	b087      	sub	sp, #28
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8010fc4:	edc7 0a01 	vstr	s1, [r7, #4]
 8010fc8:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	68fa      	ldr	r2, [r7, #12]
 8010fd6:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8010fda:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fde:	ee07 3a90 	vmov	s15, r3
 8010fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fe6:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8010ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8011000:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011004:	edd7 7a02 	vldr	s15, [r7, #8]
 8011008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801100c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011028:	edd7 7a05 	vldr	s15, [r7, #20]
 801102c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011030:	edd7 7a01 	vldr	s15, [r7, #4]
 8011034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011038:	ee77 7a27 	vadd.f32	s15, s14, s15
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8011048:	edd7 7a05 	vldr	s15, [r7, #20]
 801104c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011054:	edd7 7a05 	vldr	s15, [r7, #20]
 8011058:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801105c:	edd7 7a00 	vldr	s15, [r7]
 8011060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011074:	3301      	adds	r3, #1
 8011076:	b2da      	uxtb	r2, r3
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011084:	2b14      	cmp	r3, #20
 8011086:	d90f      	bls.n	80110a8 <_ZN2FC10SensorGyro10calAverageEfff+0xf0>
		calBiasFlag = false;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2200      	movs	r2, #0
 801108c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	619a      	str	r2, [r3, #24]
		biasY = averY;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	61da      	str	r2, [r3, #28]
		biasZ = averZ;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	621a      	str	r2, [r3, #32]
	}
}
 80110a8:	bf00      	nop
 80110aa:	371c      	adds	r7, #28
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr

080110b4 <_Z41__static_initialization_and_destruction_0ii>:

}
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	6039      	str	r1, [r7, #0]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d107      	bne.n	80110d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d102      	bne.n	80110d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorGyro sensorGyro;
 80110ce:	4803      	ldr	r0, [pc, #12]	; (80110dc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80110d0:	f7ff feb6 	bl	8010e40 <_ZN2FC10SensorGyroC1Ev>
}
 80110d4:	bf00      	nop
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	24000f10 	.word	0x24000f10

080110e0 <_GLOBAL__sub_I__ZN2FC10sensorGyroE>:
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80110e8:	2001      	movs	r0, #1
 80110ea:	f7ff ffe3 	bl	80110b4 <_Z41__static_initialization_and_destruction_0ii>
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 80110f0:	b4b0      	push	{r4, r5, r7}
 80110f2:	b083      	sub	sp, #12
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	683a      	ldr	r2, [r7, #0]
 80110fe:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8011102:	4615      	mov	r5, r2
 8011104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011108:	e895 0003 	ldmia.w	r5, {r0, r1}
 801110c:	e884 0003 	stmia.w	r4, {r0, r1}
 8011110:	bf00      	nop
 8011112:	370c      	adds	r7, #12
 8011114:	46bd      	mov	sp, r7
 8011116:	bcb0      	pop	{r4, r5, r7}
 8011118:	4770      	bx	lr
	...

0801111c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 801111c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8011120:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8011122:	4b0e      	ldr	r3, [pc, #56]	; (801115c <_ZL11microsecondv+0x40>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	4619      	mov	r1, r3
 8011128:	f04f 0200 	mov.w	r2, #0
 801112c:	f04f 0b00 	mov.w	fp, #0
 8011130:	f04f 0c00 	mov.w	ip, #0
 8011134:	468c      	mov	ip, r1
 8011136:	f04f 0b00 	mov.w	fp, #0
 801113a:	4a09      	ldr	r2, [pc, #36]	; (8011160 <_ZL11microsecondv+0x44>)
 801113c:	6812      	ldr	r2, [r2, #0]
 801113e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011140:	4611      	mov	r1, r2
 8011142:	f04f 0200 	mov.w	r2, #0
 8011146:	ea4b 0301 	orr.w	r3, fp, r1
 801114a:	ea4c 0402 	orr.w	r4, ip, r2
}
 801114e:	4618      	mov	r0, r3
 8011150:	4621      	mov	r1, r4
 8011152:	46bd      	mov	sp, r7
 8011154:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8011158:	4770      	bx	lr
 801115a:	bf00      	nop
 801115c:	24000f4c 	.word	0x24000f4c
 8011160:	2400c62c 	.word	0x2400c62c

08011164 <_ZN2FC9SensorMagC1Ev>:

namespace FC{

SensorMag sensorMag;

SensorMag::SensorMag()
 8011164:	b480      	push	{r7}
 8011166:	b083      	sub	sp, #12
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
: bodyMag{0, }
, startCalibrationFlag(false)
, endCalibrationFlag(false)
, bias{-216.450f,-276.416f, -170.502f}
, scale{0.95011f, 1.04095f, 1.01334f}
, min{0, }, max{0, }
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	461a      	mov	r2, r3
 8011170:	2300      	movs	r3, #0
 8011172:	6013      	str	r3, [r2, #0]
 8011174:	6053      	str	r3, [r2, #4]
 8011176:	6093      	str	r3, [r2, #8]
 8011178:	60d3      	str	r3, [r2, #12]
 801117a:	6113      	str	r3, [r2, #16]
 801117c:	6153      	str	r3, [r2, #20]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2200      	movs	r2, #0
 8011182:	761a      	strb	r2, [r3, #24]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2200      	movs	r2, #0
 8011188:	765a      	strb	r2, [r3, #25]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4a0e      	ldr	r2, [pc, #56]	; (80111c8 <_ZN2FC9SensorMagC1Ev+0x64>)
 801118e:	331c      	adds	r3, #28
 8011190:	ca07      	ldmia	r2, {r0, r1, r2}
 8011192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	4a0c      	ldr	r2, [pc, #48]	; (80111cc <_ZN2FC9SensorMagC1Ev+0x68>)
 801119a:	3328      	adds	r3, #40	; 0x28
 801119c:	ca07      	ldmia	r2, {r0, r1, r2}
 801119e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	3334      	adds	r3, #52	; 0x34
 80111a6:	2200      	movs	r2, #0
 80111a8:	601a      	str	r2, [r3, #0]
 80111aa:	605a      	str	r2, [r3, #4]
 80111ac:	609a      	str	r2, [r3, #8]
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	3340      	adds	r3, #64	; 0x40
 80111b2:	2200      	movs	r2, #0
 80111b4:	601a      	str	r2, [r3, #0]
 80111b6:	605a      	str	r2, [r3, #4]
 80111b8:	609a      	str	r2, [r3, #8]
	 * 		biasZ = -170.502f
	 * 		scaleX = 0.95011f
	 * 		scaleY = 1.04095f
	 * 		scaleZ = 1.01334f
	 */
}
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4618      	mov	r0, r3
 80111be:	370c      	adds	r7, #12
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr
 80111c8:	0802e3c8 	.word	0x0802e3c8
 80111cc:	0802e3d4 	.word	0x0802e3d4

080111d0 <_ZN2FC9SensorMag6setMagEfff>:

void SensorMag::setMag(float x, float y, float z){
 80111d0:	b590      	push	{r4, r7, lr}
 80111d2:	b085      	sub	sp, #20
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80111dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80111e0:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80111e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80111e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80111ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f0:	d10d      	bne.n	801120e <_ZN2FC9SensorMag6setMagEfff+0x3e>
 80111f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80111f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80111fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fe:	d106      	bne.n	801120e <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8011200:	edd7 7a00 	vldr	s15, [r7]
 8011204:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801120c:	d04c      	beq.n	80112a8 <_ZN2FC9SensorMag6setMagEfff+0xd8>

	if(startCalibrationFlag) calCalibration(x, y, z);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	7e1b      	ldrb	r3, [r3, #24]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d008      	beq.n	8011228 <_ZN2FC9SensorMag6setMagEfff+0x58>
 8011216:	ed97 1a00 	vldr	s2, [r7]
 801121a:	edd7 0a01 	vldr	s1, [r7, #4]
 801121e:	ed97 0a02 	vldr	s0, [r7, #8]
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	f000 f848 	bl	80112b8 <_ZN2FC9SensorMag14calCalibrationEfff>

	this->bodyMag.timestamp = microsecond();
 8011228:	f7ff ff78 	bl	801111c <_ZL11microsecondv>
 801122c:	4603      	mov	r3, r0
 801122e:	460c      	mov	r4, r1
 8011230:	68fa      	ldr	r2, [r7, #12]
 8011232:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = (x - bias[0])*scale[0];
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	edd3 7a07 	vldr	s15, [r3, #28]
 801123c:	ed97 7a02 	vldr	s14, [r7, #8]
 8011240:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyMag.xyz[1] = (y - bias[1])*scale[1];
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	edd3 7a08 	vldr	s15, [r3, #32]
 801125a:	ed97 7a01 	vldr	s14, [r7, #4]
 801125e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8011268:	ee67 7a27 	vmul.f32	s15, s14, s15
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyMag.xyz[2] = (z - bias[2])*scale[2];
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011278:	ed97 7a00 	vldr	s14, [r7]
 801127c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8011286:	ee67 7a27 	vmul.f32	s15, s14, s15
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	4619      	mov	r1, r3
 8011294:	4806      	ldr	r0, [pc, #24]	; (80112b0 <_ZN2FC9SensorMag6setMagEfff+0xe0>)
 8011296:	f7ff ff2b 	bl	80110f0 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>

	/* Freq class variable */
	freqCnt++;
 801129a:	4b06      	ldr	r3, [pc, #24]	; (80112b4 <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 801129c:	881b      	ldrh	r3, [r3, #0]
 801129e:	3301      	adds	r3, #1
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	4b04      	ldr	r3, [pc, #16]	; (80112b4 <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 80112a4:	801a      	strh	r2, [r3, #0]
 80112a6:	e000      	b.n	80112aa <_ZN2FC9SensorMag6setMagEfff+0xda>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80112a8:	bf00      	nop
}
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd90      	pop	{r4, r7, pc}
 80112b0:	24000a50 	.word	0x24000a50
 80112b4:	24000fa0 	.word	0x24000fa0

080112b8 <_ZN2FC9SensorMag14calCalibrationEfff>:

void SensorMag::endCalibration(){
	endCalibrationFlag = true;
}

void SensorMag::calCalibration(float x, float y, float z){
 80112b8:	b480      	push	{r7}
 80112ba:	b087      	sub	sp, #28
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80112c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80112c8:	ed87 1a00 	vstr	s2, [r7]
	if(x > max[0]) max[0] = x;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80112d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80112d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112de:	dd02      	ble.n	80112e6 <_ZN2FC9SensorMag14calCalibrationEfff+0x2e>
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	68ba      	ldr	r2, [r7, #8]
 80112e4:	641a      	str	r2, [r3, #64]	; 0x40
	if(y > max[1]) max[1] = y;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80112ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80112f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f8:	dd02      	ble.n	8011300 <_ZN2FC9SensorMag14calCalibrationEfff+0x48>
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	645a      	str	r2, [r3, #68]	; 0x44
	if(z > max[2]) max[2] = z;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8011306:	ed97 7a00 	vldr	s14, [r7]
 801130a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011312:	dd02      	ble.n	801131a <_ZN2FC9SensorMag14calCalibrationEfff+0x62>
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	683a      	ldr	r2, [r7, #0]
 8011318:	649a      	str	r2, [r3, #72]	; 0x48

	if(x < min[0]) min[0] = x;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011320:	ed97 7a02 	vldr	s14, [r7, #8]
 8011324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801132c:	d502      	bpl.n	8011334 <_ZN2FC9SensorMag14calCalibrationEfff+0x7c>
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	68ba      	ldr	r2, [r7, #8]
 8011332:	635a      	str	r2, [r3, #52]	; 0x34
	if(y < min[1]) min[1] = y;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801133a:	ed97 7a01 	vldr	s14, [r7, #4]
 801133e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011346:	d502      	bpl.n	801134e <_ZN2FC9SensorMag14calCalibrationEfff+0x96>
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	687a      	ldr	r2, [r7, #4]
 801134c:	639a      	str	r2, [r3, #56]	; 0x38
	if(z < min[2]) min[2] = z;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8011354:	ed97 7a00 	vldr	s14, [r7]
 8011358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011360:	d502      	bpl.n	8011368 <_ZN2FC9SensorMag14calCalibrationEfff+0xb0>
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	683a      	ldr	r2, [r7, #0]
 8011366:	63da      	str	r2, [r3, #60]	; 0x3c

	if(endCalibrationFlag/* end */){
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	7e5b      	ldrb	r3, [r3, #25]
 801136c:	2b00      	cmp	r3, #0
 801136e:	f000 8091 	beq.w	8011494 <_ZN2FC9SensorMag14calCalibrationEfff+0x1dc>
		/* get hard iron correction */
		bias[0] = (max[0] + min[0])/2;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011382:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	edc3 7a07 	vstr	s15, [r3, #28]
		bias[1] = (max[1] + min[1])/2;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801139c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80113a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80113a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	edc3 7a08 	vstr	s15, [r3, #32]
		bias[2] = (max[2] + min[2])/2;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80113ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80113be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80113c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		/* get soft iron correction estimate */
		scale[0] = (max[0] - min[0])/2;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80113d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80113dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80113e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = (max[1] - min[1])/2;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80113f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80113fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80113fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = (max[2] - min[2])/2;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8011414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011418:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801141c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		float avgRad = (scale[0] + scale[1] + scale[2])/3.0f;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8011432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801143c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011440:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011448:	edc7 7a05 	vstr	s15, [r7, #20]

		scale[0] = avgRad/scale[0];
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8011452:	edd7 6a05 	vldr	s13, [r7, #20]
 8011456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = avgRad/scale[1];
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8011466:	edd7 6a05 	vldr	s13, [r7, #20]
 801146a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = avgRad/scale[2];
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801147a:	edd7 6a05 	vldr	s13, [r7, #20]
 801147e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		startCalibrationFlag = false;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2200      	movs	r2, #0
 801148c:	761a      	strb	r2, [r3, #24]
		endCalibrationFlag = false;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2200      	movs	r2, #0
 8011492:	765a      	strb	r2, [r3, #25]
	}
}
 8011494:	bf00      	nop
 8011496:	371c      	adds	r7, #28
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <_Z41__static_initialization_and_destruction_0ii>:

}
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	6039      	str	r1, [r7, #0]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d107      	bne.n	80114c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d102      	bne.n	80114c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorMag sensorMag;
 80114ba:	4803      	ldr	r0, [pc, #12]	; (80114c8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80114bc:	f7ff fe52 	bl	8011164 <_ZN2FC9SensorMagC1Ev>
}
 80114c0:	bf00      	nop
 80114c2:	3708      	adds	r7, #8
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}
 80114c8:	24000f50 	.word	0x24000f50

080114cc <_GLOBAL__sub_I__ZN2FC9sensorMagE>:
 80114cc:	b580      	push	{r7, lr}
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80114d4:	2001      	movs	r0, #1
 80114d6:	f7ff ffe3 	bl	80114a0 <_Z41__static_initialization_and_destruction_0ii>
 80114da:	bd80      	pop	{r7, pc}

080114dc <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 80114dc:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80114e0:	b085      	sub	sp, #20
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 80114e8:	2300      	movs	r3, #0
 80114ea:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 80114ec:	2300      	movs	r3, #0
 80114ee:	60bb      	str	r3, [r7, #8]
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	2b3f      	cmp	r3, #63	; 0x3f
 80114f4:	dc16      	bgt.n	8011524 <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 80114f6:	2201      	movs	r2, #1
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	fa02 f303 	lsl.w	r3, r2, r3
 80114fe:	4619      	mov	r1, r3
 8011500:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8011504:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011508:	ea03 0b01 	and.w	fp, r3, r1
 801150c:	ea04 0c02 	and.w	ip, r4, r2
 8011510:	ea5b 030c 	orrs.w	r3, fp, ip
 8011514:	d002      	beq.n	801151c <_bitCount64+0x40>
 8011516:	7bfb      	ldrb	r3, [r7, #15]
 8011518:	3301      	adds	r3, #1
 801151a:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	3301      	adds	r3, #1
 8011520:	60bb      	str	r3, [r7, #8]
 8011522:	e7e5      	b.n	80114f0 <_bitCount64+0x14>
	}
	return cnt;
 8011524:	7bfb      	ldrb	r3, [r7, #15]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3714      	adds	r7, #20
 801152a:	46bd      	mov	sp, r7
 801152c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8011530:	4770      	bx	lr
	...

08011534 <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 801153c:	4a12      	ldr	r2, [pc, #72]	; (8011588 <SBUS_init+0x54>)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 8011542:	2219      	movs	r2, #25
 8011544:	2100      	movs	r1, #0
 8011546:	4811      	ldr	r0, [pc, #68]	; (801158c <SBUS_init+0x58>)
 8011548:	f01b fe81 	bl	802d24e <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 801154c:	2219      	movs	r2, #25
 801154e:	2100      	movs	r1, #0
 8011550:	480f      	ldr	r0, [pc, #60]	; (8011590 <SBUS_init+0x5c>)
 8011552:	f01b fe7c 	bl	802d24e <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 8011556:	2224      	movs	r2, #36	; 0x24
 8011558:	2100      	movs	r1, #0
 801155a:	480e      	ldr	r0, [pc, #56]	; (8011594 <SBUS_init+0x60>)
 801155c:	f01b fe77 	bl	802d24e <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 8011560:	2224      	movs	r2, #36	; 0x24
 8011562:	2100      	movs	r1, #0
 8011564:	480c      	ldr	r0, [pc, #48]	; (8011598 <SBUS_init+0x64>)
 8011566:	f01b fe72 	bl	802d24e <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 801156a:	4b07      	ldr	r3, [pc, #28]	; (8011588 <SBUS_init+0x54>)
 801156c:	2200      	movs	r2, #0
 801156e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 8011572:	4b05      	ldr	r3, [pc, #20]	; (8011588 <SBUS_init+0x54>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	2219      	movs	r2, #25
 8011578:	4904      	ldr	r1, [pc, #16]	; (801158c <SBUS_init+0x58>)
 801157a:	4618      	mov	r0, r3
 801157c:	f00f fb86 	bl	8020c8c <HAL_UART_Receive_DMA>
}
 8011580:	bf00      	nop
 8011582:	3708      	adds	r7, #8
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	24001030 	.word	0x24001030
 801158c:	24001034 	.word	0x24001034
 8011590:	2400104d 	.word	0x2400104d
 8011594:	24001066 	.word	0x24001066
 8011598:	2400108a 	.word	0x2400108a

0801159c <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 801159c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80115a0:	b082      	sub	sp, #8
 80115a2:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 80115a4:	4b3a      	ldr	r3, [pc, #232]	; (8011690 <SBUS_decoding+0xf4>)
 80115a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115aa:	f003 0308 	and.w	r3, r3, #8
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d005      	beq.n	80115be <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 80115b2:	4b37      	ldr	r3, [pc, #220]	; (8011690 <SBUS_decoding+0xf4>)
 80115b4:	2200      	movs	r2, #0
 80115b6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 80115ba:	2300      	movs	r3, #0
 80115bc:	e1f6      	b.n	80119ac <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 80115be:	4b34      	ldr	r3, [pc, #208]	; (8011690 <SBUS_decoding+0xf4>)
 80115c0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80115c4:	3301      	adds	r3, #1
 80115c6:	b2da      	uxtb	r2, r3
 80115c8:	4b31      	ldr	r3, [pc, #196]	; (8011690 <SBUS_decoding+0xf4>)
 80115ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80115ce:	4b30      	ldr	r3, [pc, #192]	; (8011690 <SBUS_decoding+0xf4>)
 80115d0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80115d4:	2b40      	cmp	r3, #64	; 0x40
 80115d6:	bf0c      	ite	eq
 80115d8:	2301      	moveq	r3, #1
 80115da:	2300      	movne	r3, #0
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d003      	beq.n	80115ea <SBUS_decoding+0x4e>
 80115e2:	4b2b      	ldr	r3, [pc, #172]	; (8011690 <SBUS_decoding+0xf4>)
 80115e4:	2200      	movs	r2, #0
 80115e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 80115ea:	4b29      	ldr	r3, [pc, #164]	; (8011690 <SBUS_decoding+0xf4>)
 80115ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115f0:	f003 0304 	and.w	r3, r3, #4
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d013      	beq.n	8011620 <SBUS_decoding+0x84>
 80115f8:	4b25      	ldr	r3, [pc, #148]	; (8011690 <SBUS_decoding+0xf4>)
 80115fa:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 80115fe:	4b24      	ldr	r3, [pc, #144]	; (8011690 <SBUS_decoding+0xf4>)
 8011600:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8011604:	4618      	mov	r0, r3
 8011606:	2301      	movs	r3, #1
 8011608:	4083      	lsls	r3, r0
 801160a:	469b      	mov	fp, r3
 801160c:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8011610:	ea4b 0301 	orr.w	r3, fp, r1
 8011614:	ea4c 0402 	orr.w	r4, ip, r2
 8011618:	4a1d      	ldr	r2, [pc, #116]	; (8011690 <SBUS_decoding+0xf4>)
 801161a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 801161e:	e013      	b.n	8011648 <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 8011620:	4b1b      	ldr	r3, [pc, #108]	; (8011690 <SBUS_decoding+0xf4>)
 8011622:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 8011626:	4b1a      	ldr	r3, [pc, #104]	; (8011690 <SBUS_decoding+0xf4>)
 8011628:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 801162c:	4618      	mov	r0, r3
 801162e:	2301      	movs	r3, #1
 8011630:	4083      	lsls	r3, r0
 8011632:	43db      	mvns	r3, r3
 8011634:	469b      	mov	fp, r3
 8011636:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 801163a:	ea0b 0301 	and.w	r3, fp, r1
 801163e:	ea0c 0402 	and.w	r4, ip, r2
 8011642:	4a13      	ldr	r2, [pc, #76]	; (8011690 <SBUS_decoding+0xf4>)
 8011644:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 8011648:	4b11      	ldr	r3, [pc, #68]	; (8011690 <SBUS_decoding+0xf4>)
 801164a:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 801164e:	4618      	mov	r0, r3
 8011650:	4621      	mov	r1, r4
 8011652:	f7ff ff43 	bl	80114dc <_bitCount64>
 8011656:	4603      	mov	r3, r0
 8011658:	461a      	mov	r2, r3
 801165a:	4b0d      	ldr	r3, [pc, #52]	; (8011690 <SBUS_decoding+0xf4>)
 801165c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 8011660:	4b0b      	ldr	r3, [pc, #44]	; (8011690 <SBUS_decoding+0xf4>)
 8011662:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8011666:	2b14      	cmp	r3, #20
 8011668:	d904      	bls.n	8011674 <SBUS_decoding+0xd8>
 801166a:	4b09      	ldr	r3, [pc, #36]	; (8011690 <SBUS_decoding+0xf4>)
 801166c:	2201      	movs	r2, #1
 801166e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8011672:	e003      	b.n	801167c <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 8011674:	4b06      	ldr	r3, [pc, #24]	; (8011690 <SBUS_decoding+0xf4>)
 8011676:	2202      	movs	r2, #2
 8011678:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 801167c:	4b04      	ldr	r3, [pc, #16]	; (8011690 <SBUS_decoding+0xf4>)
 801167e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011682:	f003 0304 	and.w	r3, r3, #4
 8011686:	2b00      	cmp	r3, #0
 8011688:	d004      	beq.n	8011694 <SBUS_decoding+0xf8>
 801168a:	2300      	movs	r3, #0
 801168c:	e18e      	b.n	80119ac <SBUS_decoding+0x410>
 801168e:	bf00      	nop
 8011690:	24001030 	.word	0x24001030

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 8011694:	4ba7      	ldr	r3, [pc, #668]	; (8011934 <SBUS_decoding+0x398>)
 8011696:	7f9b      	ldrb	r3, [r3, #30]
 8011698:	b21a      	sxth	r2, r3
 801169a:	4ba6      	ldr	r3, [pc, #664]	; (8011934 <SBUS_decoding+0x398>)
 801169c:	7fdb      	ldrb	r3, [r3, #31]
 801169e:	021b      	lsls	r3, r3, #8
 80116a0:	b21b      	sxth	r3, r3
 80116a2:	4313      	orrs	r3, r2
 80116a4:	b21b      	sxth	r3, r3
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80116ac:	b29a      	uxth	r2, r3
 80116ae:	4ba1      	ldr	r3, [pc, #644]	; (8011934 <SBUS_decoding+0x398>)
 80116b0:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 80116b2:	4ba0      	ldr	r3, [pc, #640]	; (8011934 <SBUS_decoding+0x398>)
 80116b4:	7fdb      	ldrb	r3, [r3, #31]
 80116b6:	10db      	asrs	r3, r3, #3
 80116b8:	b21a      	sxth	r2, r3
 80116ba:	4b9e      	ldr	r3, [pc, #632]	; (8011934 <SBUS_decoding+0x398>)
 80116bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116c0:	015b      	lsls	r3, r3, #5
 80116c2:	b21b      	sxth	r3, r3
 80116c4:	4313      	orrs	r3, r2
 80116c6:	b21b      	sxth	r3, r3
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	4b98      	ldr	r3, [pc, #608]	; (8011934 <SBUS_decoding+0x398>)
 80116d2:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 80116d4:	4b97      	ldr	r3, [pc, #604]	; (8011934 <SBUS_decoding+0x398>)
 80116d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116da:	119b      	asrs	r3, r3, #6
 80116dc:	b21a      	sxth	r2, r3
 80116de:	4b95      	ldr	r3, [pc, #596]	; (8011934 <SBUS_decoding+0x398>)
 80116e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	b21b      	sxth	r3, r3
 80116e8:	4313      	orrs	r3, r2
 80116ea:	b21a      	sxth	r2, r3
 80116ec:	4b91      	ldr	r3, [pc, #580]	; (8011934 <SBUS_decoding+0x398>)
 80116ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80116f2:	029b      	lsls	r3, r3, #10
 80116f4:	b21b      	sxth	r3, r3
 80116f6:	4313      	orrs	r3, r2
 80116f8:	b21b      	sxth	r3, r3
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011700:	b29a      	uxth	r2, r3
 8011702:	4b8c      	ldr	r3, [pc, #560]	; (8011934 <SBUS_decoding+0x398>)
 8011704:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 8011706:	4b8b      	ldr	r3, [pc, #556]	; (8011934 <SBUS_decoding+0x398>)
 8011708:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801170c:	105b      	asrs	r3, r3, #1
 801170e:	b21a      	sxth	r2, r3
 8011710:	4b88      	ldr	r3, [pc, #544]	; (8011934 <SBUS_decoding+0x398>)
 8011712:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011716:	01db      	lsls	r3, r3, #7
 8011718:	b21b      	sxth	r3, r3
 801171a:	4313      	orrs	r3, r2
 801171c:	b21b      	sxth	r3, r3
 801171e:	b29b      	uxth	r3, r3
 8011720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011724:	b29a      	uxth	r2, r3
 8011726:	4b83      	ldr	r3, [pc, #524]	; (8011934 <SBUS_decoding+0x398>)
 8011728:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 801172a:	4b82      	ldr	r3, [pc, #520]	; (8011934 <SBUS_decoding+0x398>)
 801172c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011730:	111b      	asrs	r3, r3, #4
 8011732:	b21a      	sxth	r2, r3
 8011734:	4b7f      	ldr	r3, [pc, #508]	; (8011934 <SBUS_decoding+0x398>)
 8011736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801173a:	011b      	lsls	r3, r3, #4
 801173c:	b21b      	sxth	r3, r3
 801173e:	4313      	orrs	r3, r2
 8011740:	b21b      	sxth	r3, r3
 8011742:	b29b      	uxth	r3, r3
 8011744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011748:	b29a      	uxth	r2, r3
 801174a:	4b7a      	ldr	r3, [pc, #488]	; (8011934 <SBUS_decoding+0x398>)
 801174c:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 801174e:	4b79      	ldr	r3, [pc, #484]	; (8011934 <SBUS_decoding+0x398>)
 8011750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011754:	11db      	asrs	r3, r3, #7
 8011756:	b21a      	sxth	r2, r3
 8011758:	4b76      	ldr	r3, [pc, #472]	; (8011934 <SBUS_decoding+0x398>)
 801175a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	b21b      	sxth	r3, r3
 8011762:	4313      	orrs	r3, r2
 8011764:	b21a      	sxth	r2, r3
 8011766:	4b73      	ldr	r3, [pc, #460]	; (8011934 <SBUS_decoding+0x398>)
 8011768:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801176c:	025b      	lsls	r3, r3, #9
 801176e:	b21b      	sxth	r3, r3
 8011770:	4313      	orrs	r3, r2
 8011772:	b21b      	sxth	r3, r3
 8011774:	b29b      	uxth	r3, r3
 8011776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801177a:	b29a      	uxth	r2, r3
 801177c:	4b6d      	ldr	r3, [pc, #436]	; (8011934 <SBUS_decoding+0x398>)
 801177e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 8011782:	4b6c      	ldr	r3, [pc, #432]	; (8011934 <SBUS_decoding+0x398>)
 8011784:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8011788:	109b      	asrs	r3, r3, #2
 801178a:	b21a      	sxth	r2, r3
 801178c:	4b69      	ldr	r3, [pc, #420]	; (8011934 <SBUS_decoding+0x398>)
 801178e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011792:	019b      	lsls	r3, r3, #6
 8011794:	b21b      	sxth	r3, r3
 8011796:	4313      	orrs	r3, r2
 8011798:	b21b      	sxth	r3, r3
 801179a:	b29b      	uxth	r3, r3
 801179c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	4b64      	ldr	r3, [pc, #400]	; (8011934 <SBUS_decoding+0x398>)
 80117a4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 80117a8:	4b62      	ldr	r3, [pc, #392]	; (8011934 <SBUS_decoding+0x398>)
 80117aa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80117ae:	115b      	asrs	r3, r3, #5
 80117b0:	b21a      	sxth	r2, r3
 80117b2:	4b60      	ldr	r3, [pc, #384]	; (8011934 <SBUS_decoding+0x398>)
 80117b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117b8:	00db      	lsls	r3, r3, #3
 80117ba:	b21b      	sxth	r3, r3
 80117bc:	4313      	orrs	r3, r2
 80117be:	b21b      	sxth	r3, r3
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	4b5a      	ldr	r3, [pc, #360]	; (8011934 <SBUS_decoding+0x398>)
 80117ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 80117ce:	4b59      	ldr	r3, [pc, #356]	; (8011934 <SBUS_decoding+0x398>)
 80117d0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80117d4:	b21a      	sxth	r2, r3
 80117d6:	4b57      	ldr	r3, [pc, #348]	; (8011934 <SBUS_decoding+0x398>)
 80117d8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80117dc:	021b      	lsls	r3, r3, #8
 80117de:	b21b      	sxth	r3, r3
 80117e0:	4313      	orrs	r3, r2
 80117e2:	b21b      	sxth	r3, r3
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	4b51      	ldr	r3, [pc, #324]	; (8011934 <SBUS_decoding+0x398>)
 80117ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 80117f2:	4b50      	ldr	r3, [pc, #320]	; (8011934 <SBUS_decoding+0x398>)
 80117f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80117f8:	10db      	asrs	r3, r3, #3
 80117fa:	b21a      	sxth	r2, r3
 80117fc:	4b4d      	ldr	r3, [pc, #308]	; (8011934 <SBUS_decoding+0x398>)
 80117fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8011802:	015b      	lsls	r3, r3, #5
 8011804:	b21b      	sxth	r3, r3
 8011806:	4313      	orrs	r3, r2
 8011808:	b21b      	sxth	r3, r3
 801180a:	b29b      	uxth	r3, r3
 801180c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011810:	b29a      	uxth	r2, r3
 8011812:	4b48      	ldr	r3, [pc, #288]	; (8011934 <SBUS_decoding+0x398>)
 8011814:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 8011818:	4b46      	ldr	r3, [pc, #280]	; (8011934 <SBUS_decoding+0x398>)
 801181a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801181e:	119b      	asrs	r3, r3, #6
 8011820:	b21a      	sxth	r2, r3
 8011822:	4b44      	ldr	r3, [pc, #272]	; (8011934 <SBUS_decoding+0x398>)
 8011824:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011828:	009b      	lsls	r3, r3, #2
 801182a:	b21b      	sxth	r3, r3
 801182c:	4313      	orrs	r3, r2
 801182e:	b21a      	sxth	r2, r3
 8011830:	4b40      	ldr	r3, [pc, #256]	; (8011934 <SBUS_decoding+0x398>)
 8011832:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011836:	029b      	lsls	r3, r3, #10
 8011838:	b21b      	sxth	r3, r3
 801183a:	4313      	orrs	r3, r2
 801183c:	b21b      	sxth	r3, r3
 801183e:	b29b      	uxth	r3, r3
 8011840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011844:	b29a      	uxth	r2, r3
 8011846:	4b3b      	ldr	r3, [pc, #236]	; (8011934 <SBUS_decoding+0x398>)
 8011848:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 801184c:	4b39      	ldr	r3, [pc, #228]	; (8011934 <SBUS_decoding+0x398>)
 801184e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011852:	105b      	asrs	r3, r3, #1
 8011854:	b21a      	sxth	r2, r3
 8011856:	4b37      	ldr	r3, [pc, #220]	; (8011934 <SBUS_decoding+0x398>)
 8011858:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801185c:	01db      	lsls	r3, r3, #7
 801185e:	b21b      	sxth	r3, r3
 8011860:	4313      	orrs	r3, r2
 8011862:	b21b      	sxth	r3, r3
 8011864:	b29b      	uxth	r3, r3
 8011866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801186a:	b29a      	uxth	r2, r3
 801186c:	4b31      	ldr	r3, [pc, #196]	; (8011934 <SBUS_decoding+0x398>)
 801186e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 8011872:	4b30      	ldr	r3, [pc, #192]	; (8011934 <SBUS_decoding+0x398>)
 8011874:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011878:	111b      	asrs	r3, r3, #4
 801187a:	b21a      	sxth	r2, r3
 801187c:	4b2d      	ldr	r3, [pc, #180]	; (8011934 <SBUS_decoding+0x398>)
 801187e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011882:	011b      	lsls	r3, r3, #4
 8011884:	b21b      	sxth	r3, r3
 8011886:	4313      	orrs	r3, r2
 8011888:	b21b      	sxth	r3, r3
 801188a:	b29b      	uxth	r3, r3
 801188c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011890:	b29a      	uxth	r2, r3
 8011892:	4b28      	ldr	r3, [pc, #160]	; (8011934 <SBUS_decoding+0x398>)
 8011894:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 8011898:	4b26      	ldr	r3, [pc, #152]	; (8011934 <SBUS_decoding+0x398>)
 801189a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801189e:	11db      	asrs	r3, r3, #7
 80118a0:	b21a      	sxth	r2, r3
 80118a2:	4b24      	ldr	r3, [pc, #144]	; (8011934 <SBUS_decoding+0x398>)
 80118a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118a8:	005b      	lsls	r3, r3, #1
 80118aa:	b21b      	sxth	r3, r3
 80118ac:	4313      	orrs	r3, r2
 80118ae:	b21a      	sxth	r2, r3
 80118b0:	4b20      	ldr	r3, [pc, #128]	; (8011934 <SBUS_decoding+0x398>)
 80118b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80118b6:	025b      	lsls	r3, r3, #9
 80118b8:	b21b      	sxth	r3, r3
 80118ba:	4313      	orrs	r3, r2
 80118bc:	b21b      	sxth	r3, r3
 80118be:	b29b      	uxth	r3, r3
 80118c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80118c4:	b29a      	uxth	r2, r3
 80118c6:	4b1b      	ldr	r3, [pc, #108]	; (8011934 <SBUS_decoding+0x398>)
 80118c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 80118cc:	4b19      	ldr	r3, [pc, #100]	; (8011934 <SBUS_decoding+0x398>)
 80118ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80118d2:	109b      	asrs	r3, r3, #2
 80118d4:	b21a      	sxth	r2, r3
 80118d6:	4b17      	ldr	r3, [pc, #92]	; (8011934 <SBUS_decoding+0x398>)
 80118d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80118dc:	019b      	lsls	r3, r3, #6
 80118de:	b21b      	sxth	r3, r3
 80118e0:	4313      	orrs	r3, r2
 80118e2:	b21b      	sxth	r3, r3
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	4b11      	ldr	r3, [pc, #68]	; (8011934 <SBUS_decoding+0x398>)
 80118ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 80118f2:	4b10      	ldr	r3, [pc, #64]	; (8011934 <SBUS_decoding+0x398>)
 80118f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80118f8:	115b      	asrs	r3, r3, #5
 80118fa:	b21a      	sxth	r2, r3
 80118fc:	4b0d      	ldr	r3, [pc, #52]	; (8011934 <SBUS_decoding+0x398>)
 80118fe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011902:	00db      	lsls	r3, r3, #3
 8011904:	b21b      	sxth	r3, r3
 8011906:	4313      	orrs	r3, r2
 8011908:	b21b      	sxth	r3, r3
 801190a:	b29b      	uxth	r3, r3
 801190c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011910:	b29a      	uxth	r2, r3
 8011912:	4b08      	ldr	r3, [pc, #32]	; (8011934 <SBUS_decoding+0x398>)
 8011914:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 8011918:	4b06      	ldr	r3, [pc, #24]	; (8011934 <SBUS_decoding+0x398>)
 801191a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801191e:	f003 0301 	and.w	r3, r3, #1
 8011922:	2b00      	cmp	r3, #0
 8011924:	d008      	beq.n	8011938 <SBUS_decoding+0x39c>
 8011926:	4b03      	ldr	r3, [pc, #12]	; (8011934 <SBUS_decoding+0x398>)
 8011928:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801192c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8011930:	e007      	b.n	8011942 <SBUS_decoding+0x3a6>
 8011932:	bf00      	nop
 8011934:	24001030 	.word	0x24001030
 8011938:	4b1f      	ldr	r3, [pc, #124]	; (80119b8 <SBUS_decoding+0x41c>)
 801193a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801193e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 8011942:	4b1d      	ldr	r3, [pc, #116]	; (80119b8 <SBUS_decoding+0x41c>)
 8011944:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011948:	f003 0302 	and.w	r3, r3, #2
 801194c:	2b00      	cmp	r3, #0
 801194e:	d005      	beq.n	801195c <SBUS_decoding+0x3c0>
 8011950:	4b19      	ldr	r3, [pc, #100]	; (80119b8 <SBUS_decoding+0x41c>)
 8011952:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8011956:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 801195a:	e004      	b.n	8011966 <SBUS_decoding+0x3ca>
 801195c:	4b16      	ldr	r3, [pc, #88]	; (80119b8 <SBUS_decoding+0x41c>)
 801195e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011962:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 8011966:	2300      	movs	r3, #0
 8011968:	607b      	str	r3, [r7, #4]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2b11      	cmp	r3, #17
 801196e:	dc1c      	bgt.n	80119aa <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 8011970:	4a11      	ldr	r2, [pc, #68]	; (80119b8 <SBUS_decoding+0x41c>)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	3318      	adds	r3, #24
 8011976:	005b      	lsls	r3, r3, #1
 8011978:	4413      	add	r3, r2
 801197a:	88db      	ldrh	r3, [r3, #6]
 801197c:	461a      	mov	r2, r3
 801197e:	4613      	mov	r3, r2
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	4413      	add	r3, r2
 8011984:	2b00      	cmp	r3, #0
 8011986:	da00      	bge.n	801198a <SBUS_decoding+0x3ee>
 8011988:	3307      	adds	r3, #7
 801198a:	10db      	asrs	r3, r3, #3
 801198c:	b29b      	uxth	r3, r3
 801198e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8011992:	b299      	uxth	r1, r3
 8011994:	4a08      	ldr	r2, [pc, #32]	; (80119b8 <SBUS_decoding+0x41c>)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	332c      	adds	r3, #44	; 0x2c
 801199a:	005b      	lsls	r3, r3, #1
 801199c:	4413      	add	r3, r2
 801199e:	460a      	mov	r2, r1
 80119a0:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	3301      	adds	r3, #1
 80119a6:	607b      	str	r3, [r7, #4]
 80119a8:	e7df      	b.n	801196a <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 80119aa:	2301      	movs	r3, #1
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80119b6:	bf00      	nop
 80119b8:	24001030 	.word	0x24001030

080119bc <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 80119c2:	2300      	movs	r3, #0
 80119c4:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 80119c6:	4b37      	ldr	r3, [pc, #220]	; (8011aa4 <SBUS_uartRxCpltCallback+0xe8>)
 80119c8:	2200      	movs	r2, #0
 80119ca:	701a      	strb	r2, [r3, #0]
 80119cc:	4b35      	ldr	r3, [pc, #212]	; (8011aa4 <SBUS_uartRxCpltCallback+0xe8>)
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	2b18      	cmp	r3, #24
 80119d2:	d862      	bhi.n	8011a9a <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 80119d4:	4b33      	ldr	r3, [pc, #204]	; (8011aa4 <SBUS_uartRxCpltCallback+0xe8>)
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	461a      	mov	r2, r3
 80119da:	4b33      	ldr	r3, [pc, #204]	; (8011aa8 <SBUS_uartRxCpltCallback+0xec>)
 80119dc:	4413      	add	r3, r2
 80119de:	791a      	ldrb	r2, [r3, #4]
 80119e0:	4b32      	ldr	r3, [pc, #200]	; (8011aac <SBUS_uartRxCpltCallback+0xf0>)
 80119e2:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 80119e4:	4b32      	ldr	r3, [pc, #200]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d120      	bne.n	8011a2e <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 80119ec:	4b2f      	ldr	r3, [pc, #188]	; (8011aac <SBUS_uartRxCpltCallback+0xf0>)
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	2b0f      	cmp	r3, #15
 80119f2:	d118      	bne.n	8011a26 <SBUS_uartRxCpltCallback+0x6a>
 80119f4:	4b2f      	ldr	r3, [pc, #188]	; (8011ab4 <SBUS_uartRxCpltCallback+0xf8>)
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d005      	beq.n	8011a08 <SBUS_uartRxCpltCallback+0x4c>
 80119fc:	4b2d      	ldr	r3, [pc, #180]	; (8011ab4 <SBUS_uartRxCpltCallback+0xf8>)
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	f003 030f 	and.w	r3, r3, #15
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10e      	bne.n	8011a26 <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 8011a08:	4b29      	ldr	r3, [pc, #164]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	4b27      	ldr	r3, [pc, #156]	; (8011aac <SBUS_uartRxCpltCallback+0xf0>)
 8011a10:	781a      	ldrb	r2, [r3, #0]
 8011a12:	4b25      	ldr	r3, [pc, #148]	; (8011aa8 <SBUS_uartRxCpltCallback+0xec>)
 8011a14:	440b      	add	r3, r1
 8011a16:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8011a18:	4b25      	ldr	r3, [pc, #148]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	4b23      	ldr	r3, [pc, #140]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a22:	701a      	strb	r2, [r3, #0]
 8011a24:	e02e      	b.n	8011a84 <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 8011a26:	4b22      	ldr	r3, [pc, #136]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a28:	2200      	movs	r2, #0
 8011a2a:	701a      	strb	r2, [r3, #0]
 8011a2c:	e02a      	b.n	8011a84 <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 8011a2e:	4b20      	ldr	r3, [pc, #128]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	2b18      	cmp	r3, #24
 8011a34:	d80d      	bhi.n	8011a52 <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 8011a36:	4b1e      	ldr	r3, [pc, #120]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	4b1b      	ldr	r3, [pc, #108]	; (8011aac <SBUS_uartRxCpltCallback+0xf0>)
 8011a3e:	781a      	ldrb	r2, [r3, #0]
 8011a40:	4b19      	ldr	r3, [pc, #100]	; (8011aa8 <SBUS_uartRxCpltCallback+0xec>)
 8011a42:	440b      	add	r3, r1
 8011a44:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8011a46:	4b1a      	ldr	r3, [pc, #104]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	b2da      	uxtb	r2, r3
 8011a4e:	4b18      	ldr	r3, [pc, #96]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a50:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 8011a52:	4b17      	ldr	r3, [pc, #92]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	2b19      	cmp	r3, #25
 8011a58:	d114      	bne.n	8011a84 <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 8011a5a:	4b14      	ldr	r3, [pc, #80]	; (8011aac <SBUS_uartRxCpltCallback+0xf0>)
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d005      	beq.n	8011a6e <SBUS_uartRxCpltCallback+0xb2>
 8011a62:	4b12      	ldr	r3, [pc, #72]	; (8011aac <SBUS_uartRxCpltCallback+0xf0>)
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	f003 030f 	and.w	r3, r3, #15
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d107      	bne.n	8011a7e <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 8011a6e:	4b10      	ldr	r3, [pc, #64]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a70:	2200      	movs	r2, #0
 8011a72:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 8011a74:	f7ff fd92 	bl	801159c <SBUS_decoding>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	71fb      	strb	r3, [r7, #7]
 8011a7c:	e002      	b.n	8011a84 <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 8011a7e:	4b0c      	ldr	r3, [pc, #48]	; (8011ab0 <SBUS_uartRxCpltCallback+0xf4>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 8011a84:	4b09      	ldr	r3, [pc, #36]	; (8011aac <SBUS_uartRxCpltCallback+0xf0>)
 8011a86:	781a      	ldrb	r2, [r3, #0]
 8011a88:	4b0a      	ldr	r3, [pc, #40]	; (8011ab4 <SBUS_uartRxCpltCallback+0xf8>)
 8011a8a:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 8011a8c:	4b05      	ldr	r3, [pc, #20]	; (8011aa4 <SBUS_uartRxCpltCallback+0xe8>)
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	3301      	adds	r3, #1
 8011a92:	b2da      	uxtb	r2, r3
 8011a94:	4b03      	ldr	r3, [pc, #12]	; (8011aa4 <SBUS_uartRxCpltCallback+0xe8>)
 8011a96:	701a      	strb	r2, [r3, #0]
 8011a98:	e798      	b.n	80119cc <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 8011a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	240010c3 	.word	0x240010c3
 8011aa8:	24001030 	.word	0x24001030
 8011aac:	240010c1 	.word	0x240010c1
 8011ab0:	240010c0 	.word	0x240010c0
 8011ab4:	240010c2 	.word	0x240010c2

08011ab8 <SBUS_getChannel>:
//		printf("%d \t", sbus.compRcValue[i]);
//	}
//	printf("\r\n");
//}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 8011ab8:	b480      	push	{r7}
 8011aba:	b083      	sub	sp, #12
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	4603      	mov	r3, r0
 8011ac0:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 8011ac2:	79fb      	ldrb	r3, [r7, #7]
 8011ac4:	3b01      	subs	r3, #1
 8011ac6:	4a05      	ldr	r2, [pc, #20]	; (8011adc <SBUS_getChannel+0x24>)
 8011ac8:	332c      	adds	r3, #44	; 0x2c
 8011aca:	005b      	lsls	r3, r3, #1
 8011acc:	4413      	add	r3, r2
 8011ace:	885b      	ldrh	r3, [r3, #2]
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	370c      	adds	r7, #12
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ada:	4770      	bx	lr
 8011adc:	24001030 	.word	0x24001030

08011ae0 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>:
    SIMPLE_FUNC_IMPL(Health, Health, health)
 8011ae0:	b4b0      	push	{r4, r5, r7}
 8011ae2:	b085      	sub	sp, #20
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
 8011aea:	2300      	movs	r3, #0
 8011aec:	73fb      	strb	r3, [r7, #15]
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	e9d3 1200 	ldrd	r1, r2, [r3]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8011afa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011afe:	42a2      	cmp	r2, r4
 8011b00:	bf08      	it	eq
 8011b02:	4299      	cmpeq	r1, r3
 8011b04:	d001      	beq.n	8011b0a <_ZN2FC6MsgBus9getHealthEPNS_6HealthE+0x2a>
 8011b06:	2301      	movs	r3, #1
 8011b08:	73fb      	strb	r3, [r7, #15]
 8011b0a:	683a      	ldr	r2, [r7, #0]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	4615      	mov	r5, r2
 8011b10:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8011b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011b1c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8011b20:	7bfb      	ldrb	r3, [r7, #15]
 8011b22:	4618      	mov	r0, r3
 8011b24:	3714      	adds	r7, #20
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bcb0      	pop	{r4, r5, r7}
 8011b2a:	4770      	bx	lr

08011b2c <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>:
 8011b2c:	b4b0      	push	{r4, r5, r7}
 8011b2e:	b083      	sub	sp, #12
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6039      	str	r1, [r7, #0]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	683a      	ldr	r2, [r7, #0]
 8011b3a:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8011b3e:	4615      	mov	r5, r2
 8011b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011b4c:	bf00      	nop
 8011b4e:	370c      	adds	r7, #12
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bcb0      	pop	{r4, r5, r7}
 8011b54:	4770      	bx	lr

08011b56 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>:
    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 8011b56:	b4b0      	push	{r4, r5, r7}
 8011b58:	b085      	sub	sp, #20
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	6078      	str	r0, [r7, #4]
 8011b5e:	6039      	str	r1, [r7, #0]
 8011b60:	2300      	movs	r3, #0
 8011b62:	73fb      	strb	r3, [r7, #15]
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	e9d3 1200 	ldrd	r1, r2, [r3]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011b70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011b74:	42a2      	cmp	r2, r4
 8011b76:	bf08      	it	eq
 8011b78:	4299      	cmpeq	r1, r3
 8011b7a:	d001      	beq.n	8011b80 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME+0x2a>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	73fb      	strb	r3, [r7, #15]
 8011b80:	683a      	ldr	r2, [r7, #0]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	4615      	mov	r5, r2
 8011b86:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8011b96:	7bfb      	ldrb	r3, [r7, #15]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3714      	adds	r7, #20
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bcb0      	pop	{r4, r5, r7}
 8011ba0:	4770      	bx	lr
	...

08011ba4 <_ZN2FC24ModuleAttitudeController4mainEv>:
	static void main(){
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b0ee      	sub	sp, #440	; 0x1b8
 8011ba8:	af00      	add	r7, sp, #0
		ModuleAttitudeController attitudeController;
 8011baa:	463b      	mov	r3, r7
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7fd f897 	bl	800ece0 <_ZN2FC24ModuleAttitudeControllerC1Ev>
			if(osThreadFlagsGet() & AC_reset){
 8011bb2:	f014 fbcb 	bl	802634c <osThreadFlagsGet>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	f003 0302 	and.w	r3, r3, #2
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	bf14      	ite	ne
 8011bc0:	2301      	movne	r3, #1
 8011bc2:	2300      	moveq	r3, #0
 8011bc4:	b2db      	uxtb	r3, r3
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d006      	beq.n	8011bd8 <_ZN2FC24ModuleAttitudeController4mainEv+0x34>
				osThreadFlagsClear(AC_reset);
 8011bca:	2002      	movs	r0, #2
 8011bcc:	f014 fb6e 	bl	80262ac <osThreadFlagsClear>
				attitudeController.initialize();
 8011bd0:	463b      	mov	r3, r7
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7f2 fd30 	bl	8004638 <_ZN23px4_AlgorithmModelClass10initializeEv>
			osThreadFlagsWait(AC_fromAHRS, osFlagsWaitAny, osWaitForever);
 8011bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8011bdc:	2100      	movs	r1, #0
 8011bde:	2001      	movs	r0, #1
 8011be0:	f014 fbe8 	bl	80263b4 <osThreadFlagsWait>
			attitudeController.oneStep();
 8011be4:	463b      	mov	r3, r7
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fd f888 	bl	800ecfc <_ZN2FC24ModuleAttitudeController7oneStepEv>
			freqCnt++;
 8011bec:	4b03      	ldr	r3, [pc, #12]	; (8011bfc <_ZN2FC24ModuleAttitudeController4mainEv+0x58>)
 8011bee:	881b      	ldrh	r3, [r3, #0]
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	b29a      	uxth	r2, r3
 8011bf4:	4b01      	ldr	r3, [pc, #4]	; (8011bfc <_ZN2FC24ModuleAttitudeController4mainEv+0x58>)
 8011bf6:	801a      	strh	r2, [r3, #0]
			if(osThreadFlagsGet() & AC_reset){
 8011bf8:	e7db      	b.n	8011bb2 <_ZN2FC24ModuleAttitudeController4mainEv+0xe>
 8011bfa:	bf00      	nop
 8011bfc:	240013e4 	.word	0x240013e4

08011c00 <_ZN2FC10ModuleAHRS4mainEv>:
	/*
	 *  ModuleAHRS main function
	 *  this function is called by CMSIS task function
	 *	wait signal from accelerometer and gyrometer
	 */
    static void main(){
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b0ac      	sub	sp, #176	; 0xb0
 8011c04:	af00      	add	r7, sp, #0
    	ModuleAHRS moduleAHRS;
 8011c06:	463b      	mov	r3, r7
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7fa fecf 	bl	800c9ac <_ZN2FC10ModuleAHRSC1Ev>
    	uint8_t cnt = 0;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    	while(1){
    		/* wait accel, gyro value set */
//    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
    		moduleAHRS.oneStep();
 8011c14:	463b      	mov	r3, r7
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fa ff1e 	bl	800ca58 <_ZN2FC10ModuleAHRS7oneStepEv>
    		if(cnt>4){
 8011c1c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8011c20:	2b04      	cmp	r3, #4
 8011c22:	d902      	bls.n	8011c2a <_ZN2FC10ModuleAHRS4mainEv+0x2a>
        		ModuleAttitudeController::setSignal(AC_fromAHRS);		/* 200hz */
 8011c24:	2001      	movs	r0, #1
 8011c26:	f7fd fb2f 	bl	800f288 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
    		}

    		cnt++;
 8011c2a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8011c2e:	3301      	adds	r3, #1
 8011c30:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    		osDelay(1);			/* 1000hz */
 8011c34:	2001      	movs	r0, #1
 8011c36:	f014 fc51 	bl	80264dc <osDelay>
    		moduleAHRS.oneStep();
 8011c3a:	e7eb      	b.n	8011c14 <_ZN2FC10ModuleAHRS4mainEv+0x14>

08011c3c <_ZN2FC24ModulePositionController4mainEv>:

class ModulePositionController : public positionControlModelClass, public Freq<ModulePositionController> {
public:
	ModulePositionController();

	static void main(){
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8011c42:	af00      	add	r7, sp, #0
		uint8_t firstLoop;
		ModulePositionController positionController;
 8011c44:	463b      	mov	r3, r7
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fe f87e 	bl	800fd48 <_ZN2FC24ModulePositionControllerC1Ev>
		while(1){
			firstLoop = 0;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
			/* wait position controller start */
			osThreadFlagsWait(PC_start, osFlagsWaitAny, osWaitForever);
 8011c52:	f04f 32ff 	mov.w	r2, #4294967295
 8011c56:	2100      	movs	r1, #0
 8011c58:	2002      	movs	r0, #2
 8011c5a:	f014 fbab 	bl	80263b4 <osThreadFlagsWait>
			while(1){
				/* if first loop or reset command, initialize */
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 8011c5e:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d106      	bne.n	8011c74 <_ZN2FC24ModulePositionController4mainEv+0x38>
 8011c66:	f014 fb71 	bl	802634c <osThreadFlagsGet>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	f003 0308 	and.w	r3, r3, #8
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d001      	beq.n	8011c78 <_ZN2FC24ModulePositionController4mainEv+0x3c>
 8011c74:	2301      	movs	r3, #1
 8011c76:	e000      	b.n	8011c7a <_ZN2FC24ModulePositionController4mainEv+0x3e>
 8011c78:	2300      	movs	r3, #0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d006      	beq.n	8011c8c <_ZN2FC24ModulePositionController4mainEv+0x50>
					osThreadFlagsClear(PC_reset);
 8011c7e:	2008      	movs	r0, #8
 8011c80:	f014 fb14 	bl	80262ac <osThreadFlagsClear>
					positionController.initialize();
 8011c84:	463b      	mov	r3, r7
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7f3 fe1a 	bl	80058c0 <_ZN25positionControlModelClass10initializeEv>
				}

				/* wait EKF data */
				osThreadFlagsWait(PC_fromEKF, osFlagsWaitAny, osWaitForever);
 8011c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c90:	2100      	movs	r1, #0
 8011c92:	2001      	movs	r0, #1
 8011c94:	f014 fb8e 	bl	80263b4 <osThreadFlagsWait>
				positionController.oneStep();
 8011c98:	463b      	mov	r3, r7
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7fe f862 	bl	800fd64 <_ZN2FC24ModulePositionController7oneStepEv>

				/* check position controller stop */
				if(osThreadFlagsGet() & PC_stop){
 8011ca0:	f014 fb54 	bl	802634c <osThreadFlagsGet>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	f003 0304 	and.w	r3, r3, #4
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	bf14      	ite	ne
 8011cae:	2301      	movne	r3, #1
 8011cb0:	2300      	moveq	r3, #0
 8011cb2:	b2db      	uxtb	r3, r3
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d003      	beq.n	8011cc0 <_ZN2FC24ModulePositionController4mainEv+0x84>
					osThreadFlagsClear(PC_stop);
 8011cb8:	2004      	movs	r0, #4
 8011cba:	f014 faf7 	bl	80262ac <osThreadFlagsClear>
					break;
 8011cbe:	e012      	b.n	8011ce6 <_ZN2FC24ModulePositionController4mainEv+0xaa>
				}

				/* if first loop, send ACK */
				if(firstLoop < 2){
 8011cc0:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d807      	bhi.n	8011cd8 <_ZN2FC24ModulePositionController4mainEv+0x9c>
					ModuleCommander::sendSignal(CMD_ACK);
 8011cc8:	2001      	movs	r0, #1
 8011cca:	f7fd fb79 	bl	800f3c0 <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>
					firstLoop++;
 8011cce:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
				}
				freqCnt++;
 8011cd8:	4b03      	ldr	r3, [pc, #12]	; (8011ce8 <_ZN2FC24ModulePositionController4mainEv+0xac>)
 8011cda:	881b      	ldrh	r3, [r3, #0]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	4b01      	ldr	r3, [pc, #4]	; (8011ce8 <_ZN2FC24ModulePositionController4mainEv+0xac>)
 8011ce2:	801a      	strh	r2, [r3, #0]
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 8011ce4:	e7bb      	b.n	8011c5e <_ZN2FC24ModulePositionController4mainEv+0x22>
			firstLoop = 0;
 8011ce6:	e7b1      	b.n	8011c4c <_ZN2FC24ModulePositionController4mainEv+0x10>
 8011ce8:	240013e6 	.word	0x240013e6

08011cec <_ZN2FC9ModuleINS4mainEv>:
};

class ModuleINS : public positionEstimatorModelClass, public Freq<ModuleINS> {
public:

	static void main(){
 8011cec:	b580      	push	{r7, lr}
 8011cee:	f5ad 6d62 	sub.w	sp, sp, #3616	; 0xe20
 8011cf2:	af00      	add	r7, sp, #0
		ModuleINS moduleINS;
 8011cf4:	463b      	mov	r3, r7
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7fd fde2 	bl	800f8c0 <_ZN2FC9ModuleINSC1Ev>
		moduleINS.initialize();
 8011cfc:	463b      	mov	r3, r7
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7f9 f8dc 	bl	800aebc <_ZN27positionEstimatorModelClass10initializeEv>
		osDelay(2000);
 8011d04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8011d08:	f014 fbe8 	bl	80264dc <osDelay>
		while(1){
			moduleINS.onestep();
 8011d0c:	463b      	mov	r3, r7
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fd fdfe 	bl	800f910 <_ZN2FC9ModuleINS7onestepEv>
			ModulePositionController::setSignal(PC_fromEKF);
 8011d14:	2001      	movs	r0, #1
 8011d16:	f7fd faa5 	bl	800f264 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
			freqCnt++;
 8011d1a:	4b05      	ldr	r3, [pc, #20]	; (8011d30 <_ZN2FC9ModuleINS4mainEv+0x44>)
 8011d1c:	881b      	ldrh	r3, [r3, #0]
 8011d1e:	3301      	adds	r3, #1
 8011d20:	b29a      	uxth	r2, r3
 8011d22:	4b03      	ldr	r3, [pc, #12]	; (8011d30 <_ZN2FC9ModuleINS4mainEv+0x44>)
 8011d24:	801a      	strh	r2, [r3, #0]
			osDelay(20);
 8011d26:	2014      	movs	r0, #20
 8011d28:	f014 fbd8 	bl	80264dc <osDelay>
			moduleINS.onestep();
 8011d2c:	e7ee      	b.n	8011d0c <_ZN2FC9ModuleINS4mainEv+0x20>
 8011d2e:	bf00      	nop
 8011d30:	240013e8 	.word	0x240013e8

08011d34 <_ZN2FC12ModuleHealth4mainEv>:

namespace FC {

class ModuleHealth {
public:
	static void main(){
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b08a      	sub	sp, #40	; 0x28
 8011d38:	af00      	add	r7, sp, #0
		uint32_t tick;
		tick = osKernelGetTickCount();
 8011d3a:	f014 f987 	bl	802604c <osKernelGetTickCount>
 8011d3e:	6278      	str	r0, [r7, #36]	; 0x24

		struct Health health;
		while(1){
			tick += 1000;
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011d46:	627b      	str	r3, [r7, #36]	; 0x24
			osDelayUntil(tick);		/* 1hz */
 8011d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d4a:	f014 fbf5 	bl	8026538 <osDelayUntil>

			health.accel = SensorAccel::checkFreq();
 8011d4e:	f000 fcdd 	bl	801270c <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>
 8011d52:	4603      	mov	r3, r0
 8011d54:	813b      	strh	r3, [r7, #8]
			health.gyro = SensorGyro::checkFreq();
 8011d56:	f000 fceb 	bl	8012730 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	817b      	strh	r3, [r7, #10]
			health.rc = RC::checkFreq();
 8011d5e:	f000 fcf9 	bl	8012754 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>
 8011d62:	4603      	mov	r3, r0
 8011d64:	81bb      	strh	r3, [r7, #12]

			health.mag = SensorMag::checkFreq();
 8011d66:	f000 fd07 	bl	8012778 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	81fb      	strh	r3, [r7, #14]
			health.gps = SensorGPS::checkFreq();
 8011d6e:	f000 fd15 	bl	801279c <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>
 8011d72:	4603      	mov	r3, r0
 8011d74:	823b      	strh	r3, [r7, #16]

			health.baro = SensorBaro::checkFreq();
 8011d76:	f000 fd23 	bl	80127c0 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	827b      	strh	r3, [r7, #18]

			health.ahrs = ModuleAHRS::checkFreq();
 8011d7e:	f000 fd31 	bl	80127e4 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>
 8011d82:	4603      	mov	r3, r0
 8011d84:	82fb      	strh	r3, [r7, #22]
			health.ins = ModuleINS::checkFreq();
 8011d86:	f000 fd3f 	bl	8012808 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	833b      	strh	r3, [r7, #24]

			health.attitudeController = ModuleAttitudeController::checkFreq();
 8011d8e:	f000 fd4d 	bl	801282c <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>
 8011d92:	4603      	mov	r3, r0
 8011d94:	837b      	strh	r3, [r7, #26]
			health.positionController = ModulePositionController::checkFreq();
 8011d96:	f000 fd5b 	bl	8012850 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	83bb      	strh	r3, [r7, #28]
			//TODO auto, lidar health check
			health.autoController = 0;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	83fb      	strh	r3, [r7, #30]
			health.lidar = 0;
 8011da2:	2300      	movs	r3, #0
 8011da4:	82bb      	strh	r3, [r7, #20]

			msgBus.setHealth(health);
 8011da6:	463b      	mov	r3, r7
 8011da8:	4619      	mov	r1, r3
 8011daa:	480c      	ldr	r0, [pc, #48]	; (8011ddc <_ZN2FC12ModuleHealth4mainEv+0xa8>)
 8011dac:	f7ff febe 	bl	8011b2c <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>

			if(health.accel > ACCEL_THRESHOLD &&
 8011db0:	893b      	ldrh	r3, [r7, #8]
 8011db2:	2b96      	cmp	r3, #150	; 0x96
 8011db4:	d9c4      	bls.n	8011d40 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.gyro > GYRO_THRESHOLD &&
 8011db6:	897b      	ldrh	r3, [r7, #10]
			if(health.accel > ACCEL_THRESHOLD &&
 8011db8:	2b96      	cmp	r3, #150	; 0x96
 8011dba:	d9c1      	bls.n	8011d40 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.rc > RC_THRESHOLD &&
 8011dbc:	89bb      	ldrh	r3, [r7, #12]
			   health.gyro > GYRO_THRESHOLD &&
 8011dbe:	2b64      	cmp	r3, #100	; 0x64
 8011dc0:	d9be      	bls.n	8011d40 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.ahrs > AHRS_THRESHOLD &&
 8011dc2:	8afb      	ldrh	r3, [r7, #22]
			   health.rc > RC_THRESHOLD &&
 8011dc4:	2b96      	cmp	r3, #150	; 0x96
 8011dc6:	d9bb      	bls.n	8011d40 <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.attitudeController > ATTITUDE_CTL_THRESHOLD){
 8011dc8:	8b7b      	ldrh	r3, [r7, #26]
			   health.ahrs > AHRS_THRESHOLD &&
 8011dca:	2b96      	cmp	r3, #150	; 0x96
 8011dcc:	d9b8      	bls.n	8011d40 <_ZN2FC12ModuleHealth4mainEv+0xc>
				/* arm(attitude controller) enable */

				if(health.mag > MAG_THRESHOLD &&
 8011dce:	89fb      	ldrh	r3, [r7, #14]
 8011dd0:	2b32      	cmp	r3, #50	; 0x32
 8011dd2:	d9b5      	bls.n	8011d40 <_ZN2FC12ModuleHealth4mainEv+0xc>
						health.gps > GPS_THRESHOLD &&
 8011dd4:	8a3b      	ldrh	r3, [r7, #16]
				if(health.mag > MAG_THRESHOLD &&
 8011dd6:	2b03      	cmp	r3, #3
			tick += 1000;
 8011dd8:	e7b2      	b.n	8011d40 <_ZN2FC12ModuleHealth4mainEv+0xc>
 8011dda:	bf00      	nop
 8011ddc:	24000a50 	.word	0x24000a50

08011de0 <_ZN2FC8ModuleSD4mainEv>:

class ModuleSD {
public:
	ModuleSD() = default;

	static void main(){
 8011de0:	b5b0      	push	{r4, r5, r7, lr}
 8011de2:	b0ca      	sub	sp, #296	; 0x128
 8011de4:	af00      	add	r7, sp, #0
		uint8_t writeBuf[256];
		uint32_t bytesWritten = 0;
 8011de6:	f107 0320 	add.w	r3, r7, #32
 8011dea:	2200      	movs	r2, #0
 8011dec:	601a      	str	r2, [r3, #0]
		uint8_t writeLen = 0;
 8011dee:	2300      	movs	r3, #0
 8011df0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		/*
		 *  TODO
		 *  FR_DISK_ERR		hardware layer error.
		 *  				retry after circuit
		 */
		uint8_t wtext[] = "Hello from SDIO DMA RTOS\n";
 8011df4:	1d3b      	adds	r3, r7, #4
 8011df6:	4a3e      	ldr	r2, [pc, #248]	; (8011ef0 <_ZN2FC8ModuleSD4mainEv+0x110>)
 8011df8:	461c      	mov	r4, r3
 8011dfa:	4615      	mov	r5, r2
 8011dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011e04:	c403      	stmia	r4!, {r0, r1}
 8011e06:	8022      	strh	r2, [r4, #0]
		/* 1. Mount - 0 */
		f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8011e08:	2201      	movs	r2, #1
 8011e0a:	493a      	ldr	r1, [pc, #232]	; (8011ef4 <_ZN2FC8ModuleSD4mainEv+0x114>)
 8011e0c:	483a      	ldr	r0, [pc, #232]	; (8011ef8 <_ZN2FC8ModuleSD4mainEv+0x118>)
 8011e0e:	f013 fb29 	bl	8025464 <f_mount>
		osDelay(1000);
 8011e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011e16:	f014 fb61 	bl	80264dc <osDelay>
		printf_("try to open file\r\n");
 8011e1a:	4838      	ldr	r0, [pc, #224]	; (8011efc <_ZN2FC8ModuleSD4mainEv+0x11c>)
 8011e1c:	f7fa fc9e 	bl	800c75c <printf_>
		if((res = f_open(&SDFile, "0:/test.txt", FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK){
 8011e20:	220a      	movs	r2, #10
 8011e22:	4937      	ldr	r1, [pc, #220]	; (8011f00 <_ZN2FC8ModuleSD4mainEv+0x120>)
 8011e24:	4837      	ldr	r0, [pc, #220]	; (8011f04 <_ZN2FC8ModuleSD4mainEv+0x124>)
 8011e26:	f013 fb81 	bl	802552c <f_open>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8011e30:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	bf14      	ite	ne
 8011e38:	2301      	movne	r3, #1
 8011e3a:	2300      	moveq	r3, #0
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d006      	beq.n	8011e50 <_ZN2FC8ModuleSD4mainEv+0x70>
			/* fail to open file */
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
			printf_("fail to open file %d\r\n", res);
 8011e42:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8011e46:	4619      	mov	r1, r3
 8011e48:	482f      	ldr	r0, [pc, #188]	; (8011f08 <_ZN2FC8ModuleSD4mainEv+0x128>)
 8011e4a:	f7fa fc87 	bl	800c75c <printf_>
 8011e4e:	e024      	b.n	8011e9a <_ZN2FC8ModuleSD4mainEv+0xba>
		}
		else{
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
			res = f_write(&SDFile, wtext, strlen((char*)wtext), (UINT*)bytesWritten);
 8011e50:	1d3b      	adds	r3, r7, #4
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7ee fa44 	bl	80002e0 <strlen>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	f107 0320 	add.w	r3, r7, #32
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	1d39      	adds	r1, r7, #4
 8011e62:	4828      	ldr	r0, [pc, #160]	; (8011f04 <_ZN2FC8ModuleSD4mainEv+0x124>)
 8011e64:	f013 fd27 	bl	80258b6 <f_write>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			if((bytesWritten == 0) || (res != FR_OK)){
 8011e6e:	f107 0320 	add.w	r3, r7, #32
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d003      	beq.n	8011e80 <_ZN2FC8ModuleSD4mainEv+0xa0>
 8011e78:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d006      	beq.n	8011e8e <_ZN2FC8ModuleSD4mainEv+0xae>
				/* fail to write file */
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
				printf_("fail to write %d\r\n", res);
 8011e80:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8011e84:	4619      	mov	r1, r3
 8011e86:	4821      	ldr	r0, [pc, #132]	; (8011f0c <_ZN2FC8ModuleSD4mainEv+0x12c>)
 8011e88:	f7fa fc68 	bl	800c75c <printf_>
 8011e8c:	e002      	b.n	8011e94 <_ZN2FC8ModuleSD4mainEv+0xb4>
			}
			else{
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
				printf_("success write\r\n");
 8011e8e:	4820      	ldr	r0, [pc, #128]	; (8011f10 <_ZN2FC8ModuleSD4mainEv+0x130>)
 8011e90:	f7fa fc64 	bl	800c75c <printf_>
			}

			f_close(&SDFile);
 8011e94:	481b      	ldr	r0, [pc, #108]	; (8011f04 <_ZN2FC8ModuleSD4mainEv+0x124>)
 8011e96:	f013 ff3b 	bl	8025d10 <f_close>
		}

		while(1){
			/* sdopen */
			if(f_open(&SDFile,"0:/log.txt", FA_CREATE_ALWAYS | FA_WRITE ) != FR_OK){
 8011e9a:	220a      	movs	r2, #10
 8011e9c:	491d      	ldr	r1, [pc, #116]	; (8011f14 <_ZN2FC8ModuleSD4mainEv+0x134>)
 8011e9e:	4819      	ldr	r0, [pc, #100]	; (8011f04 <_ZN2FC8ModuleSD4mainEv+0x124>)
 8011ea0:	f013 fb44 	bl	802552c <f_open>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	bf14      	ite	ne
 8011eaa:	2301      	movne	r3, #1
 8011eac:	2300      	moveq	r3, #0
 8011eae:	b2db      	uxtb	r3, r3
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d119      	bne.n	8011ee8 <_ZN2FC8ModuleSD4mainEv+0x108>
//					}
//					else{
//						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//					}
//				}
				writeLen = sprintf_((char*)writeBuf,"hello fucking world\n");
 8011eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011eb8:	4917      	ldr	r1, [pc, #92]	; (8011f18 <_ZN2FC8ModuleSD4mainEv+0x138>)
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fa fc6a 	bl	800c794 <sprintf_>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				res = f_write(&SDFile, writeBuf, writeLen, (UINT*)&bytesWritten);
 8011ec6:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8011eca:	f107 0320 	add.w	r3, r7, #32
 8011ece:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8011ed2:	480c      	ldr	r0, [pc, #48]	; (8011f04 <_ZN2FC8ModuleSD4mainEv+0x124>)
 8011ed4:	f013 fcef 	bl	80258b6 <f_write>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				}
				else{
//					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
				}

				if(f_close(&SDFile) != FR_OK){
 8011ede:	4809      	ldr	r0, [pc, #36]	; (8011f04 <_ZN2FC8ModuleSD4mainEv+0x124>)
 8011ee0:	f013 ff16 	bl	8025d10 <f_close>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
				else{
//					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
				}
			}

			osDelay(5);			/* 10hz */
 8011ee8:	2005      	movs	r0, #5
 8011eea:	f014 faf7 	bl	80264dc <osDelay>
			if(f_open(&SDFile,"0:/log.txt", FA_CREATE_ALWAYS | FA_WRITE ) != FR_OK){
 8011eee:	e7d4      	b.n	8011e9a <_ZN2FC8ModuleSD4mainEv+0xba>
 8011ef0:	0802e460 	.word	0x0802e460
 8011ef4:	2400cda8 	.word	0x2400cda8
 8011ef8:	2400cfdc 	.word	0x2400cfdc
 8011efc:	0802e3e0 	.word	0x0802e3e0
 8011f00:	0802e3f4 	.word	0x0802e3f4
 8011f04:	2400cdac 	.word	0x2400cdac
 8011f08:	0802e400 	.word	0x0802e400
 8011f0c:	0802e418 	.word	0x0802e418
 8011f10:	0802e42c 	.word	0x0802e42c
 8011f14:	0802e43c 	.word	0x0802e43c
 8011f18:	0802e448 	.word	0x0802e448

08011f1c <_putchar>:
uint32_t channel;

uint16_t timeCheck;
int test = 0;

void _putchar(char character){
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	4603      	mov	r3, r0
 8011f24:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, (uint8_t*)&character, 1, 10);
 8011f26:	1df9      	adds	r1, r7, #7
 8011f28:	230a      	movs	r3, #10
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	4803      	ldr	r0, [pc, #12]	; (8011f3c <_putchar+0x20>)
 8011f2e:	f00e fe17 	bl	8020b60 <HAL_UART_Transmit>
}
 8011f32:	bf00      	nop
 8011f34:	3708      	adds	r7, #8
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	2400c704 	.word	0x2400c704

08011f40 <Health_StartTask>:

void Health_StartTask(void *argument){
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
	ModuleHealth::main();
 8011f48:	f7ff fef4 	bl	8011d34 <_ZN2FC12ModuleHealth4mainEv>
}
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <Debug_StartTask>:
void Debug_StartTask(void *argument){
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b0ec      	sub	sp, #432	; 0x1b0
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	1d3b      	adds	r3, r7, #4
 8011f5c:	6018      	str	r0, [r3, #0]
	uint32_t tick;
	tick = osKernelGetTickCount();
 8011f5e:	f014 f875 	bl	802604c <osKernelGetTickCount>
 8011f62:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac

	struct VehicleAttitueSP attitudeSP;
//	osDelay(2000);
//	sensorBaro.setSeaLevelPressure(gps.alt);
	while(1){
		tick += 5;
 8011f66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8011f6a:	3305      	adds	r3, #5
 8011f6c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		osDelayUntil(tick);
 8011f70:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8011f74:	f014 fae0 	bl	8026538 <osDelayUntil>
		msgBus.getHealth(&health);
 8011f78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	48a9      	ldr	r0, [pc, #676]	; (8012224 <Debug_StartTask+0x2d0>)
 8011f80:	f7ff fdae 	bl	8011ae0 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>
		hzAccel = health.accel;
 8011f84:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8011f88:	4ba7      	ldr	r3, [pc, #668]	; (8012228 <Debug_StartTask+0x2d4>)
 8011f8a:	801a      	strh	r2, [r3, #0]
		hzBaro = health.baro;
 8011f8c:	f8b7 219a 	ldrh.w	r2, [r7, #410]	; 0x19a
 8011f90:	4ba6      	ldr	r3, [pc, #664]	; (801222c <Debug_StartTask+0x2d8>)
 8011f92:	801a      	strh	r2, [r3, #0]
		hzGyro = health.gyro;
 8011f94:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8011f98:	4ba5      	ldr	r3, [pc, #660]	; (8012230 <Debug_StartTask+0x2dc>)
 8011f9a:	801a      	strh	r2, [r3, #0]
		hzGPS = health.gps;
 8011f9c:	f8b7 2198 	ldrh.w	r2, [r7, #408]	; 0x198
 8011fa0:	4ba4      	ldr	r3, [pc, #656]	; (8012234 <Debug_StartTask+0x2e0>)
 8011fa2:	801a      	strh	r2, [r3, #0]
		hzMag = health.mag;
 8011fa4:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8011fa8:	4ba3      	ldr	r3, [pc, #652]	; (8012238 <Debug_StartTask+0x2e4>)
 8011faa:	801a      	strh	r2, [r3, #0]
		hzAHRS = health.ahrs;
 8011fac:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8011fb0:	4ba2      	ldr	r3, [pc, #648]	; (801223c <Debug_StartTask+0x2e8>)
 8011fb2:	801a      	strh	r2, [r3, #0]
		hzRC = health.rc;
 8011fb4:	f8b7 2194 	ldrh.w	r2, [r7, #404]	; 0x194
 8011fb8:	4ba1      	ldr	r3, [pc, #644]	; (8012240 <Debug_StartTask+0x2ec>)
 8011fba:	801a      	strh	r2, [r3, #0]
		hzAtti = health.attitudeController;
 8011fbc:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 8011fc0:	4ba0      	ldr	r3, [pc, #640]	; (8012244 <Debug_StartTask+0x2f0>)
 8011fc2:	801a      	strh	r2, [r3, #0]
		hzPos = health.positionController;
 8011fc4:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8011fc8:	4b9f      	ldr	r3, [pc, #636]	; (8012248 <Debug_StartTask+0x2f4>)
 8011fca:	801a      	strh	r2, [r3, #0]
		hzINS = health.ins;
 8011fcc:	f8b7 21a0 	ldrh.w	r2, [r7, #416]	; 0x1a0
 8011fd0:	4b9e      	ldr	r3, [pc, #632]	; (801224c <Debug_StartTask+0x2f8>)
 8011fd2:	801a      	strh	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

		msgBus.getMotorPWM(&pwm);
 8011fd4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4892      	ldr	r0, [pc, #584]	; (8012224 <Debug_StartTask+0x2d0>)
 8011fdc:	f7ff fdbb 	bl	8011b56 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>
		pwm1 = pwm.m1;
 8011fe0:	f8b7 2178 	ldrh.w	r2, [r7, #376]	; 0x178
 8011fe4:	4b9a      	ldr	r3, [pc, #616]	; (8012250 <Debug_StartTask+0x2fc>)
 8011fe6:	801a      	strh	r2, [r3, #0]
		pwm2 = pwm.m2;
 8011fe8:	f8b7 217a 	ldrh.w	r2, [r7, #378]	; 0x17a
 8011fec:	4b99      	ldr	r3, [pc, #612]	; (8012254 <Debug_StartTask+0x300>)
 8011fee:	801a      	strh	r2, [r3, #0]
		pwm3 = pwm.m3;
 8011ff0:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 8011ff4:	4b98      	ldr	r3, [pc, #608]	; (8012258 <Debug_StartTask+0x304>)
 8011ff6:	801a      	strh	r2, [r3, #0]
		pwm4 = pwm.m4;
 8011ff8:	f8b7 217e 	ldrh.w	r2, [r7, #382]	; 0x17e
 8011ffc:	4b97      	ldr	r3, [pc, #604]	; (801225c <Debug_StartTask+0x308>)
 8011ffe:	801a      	strh	r2, [r3, #0]
		pwm5 = pwm.m5;
 8012000:	f8b7 2180 	ldrh.w	r2, [r7, #384]	; 0x180
 8012004:	4b96      	ldr	r3, [pc, #600]	; (8012260 <Debug_StartTask+0x30c>)
 8012006:	801a      	strh	r2, [r3, #0]
		pwm6 = pwm.m6;
 8012008:	f8b7 2182 	ldrh.w	r2, [r7, #386]	; 0x182
 801200c:	4b95      	ldr	r3, [pc, #596]	; (8012264 <Debug_StartTask+0x310>)
 801200e:	801a      	strh	r2, [r3, #0]

		msgBus.getAttitude(&att);
 8012010:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8012014:	4619      	mov	r1, r3
 8012016:	4883      	ldr	r0, [pc, #524]	; (8012224 <Debug_StartTask+0x2d0>)
 8012018:	f7fc fd8e 	bl	800eb38 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
		att_roll = att.roll;
 801201c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8012020:	4a91      	ldr	r2, [pc, #580]	; (8012268 <Debug_StartTask+0x314>)
 8012022:	6013      	str	r3, [r2, #0]
		att_pitch = att.pitch;
 8012024:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8012028:	4a90      	ldr	r2, [pc, #576]	; (801226c <Debug_StartTask+0x318>)
 801202a:	6013      	str	r3, [r2, #0]
		att_yaw = att.yaw;
 801202c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012030:	4a8f      	ldr	r2, [pc, #572]	; (8012270 <Debug_StartTask+0x31c>)
 8012032:	6013      	str	r3, [r2, #0]

		msgBus.getController(&ctl);
 8012034:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012038:	4619      	mov	r1, r3
 801203a:	487a      	ldr	r0, [pc, #488]	; (8012224 <Debug_StartTask+0x2d0>)
 801203c:	f7fc fd38 	bl	800eab0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
		ctl_roll = ctl.roll;
 8012040:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8012044:	4b8b      	ldr	r3, [pc, #556]	; (8012274 <Debug_StartTask+0x320>)
 8012046:	801a      	strh	r2, [r3, #0]
		ctl_pitch = ctl.pitch;
 8012048:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 801204c:	4b8a      	ldr	r3, [pc, #552]	; (8012278 <Debug_StartTask+0x324>)
 801204e:	801a      	strh	r2, [r3, #0]
		ctl_yaw = ctl.yaw;
 8012050:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8012054:	4b89      	ldr	r3, [pc, #548]	; (801227c <Debug_StartTask+0x328>)
 8012056:	801a      	strh	r2, [r3, #0]
		ctl_throtle = ctl.throttle;
 8012058:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 801205c:	4b88      	ldr	r3, [pc, #544]	; (8012280 <Debug_StartTask+0x32c>)
 801205e:	801a      	strh	r2, [r3, #0]

		if(msgBus.getBodyAccel(&bodyAccel)){
 8012060:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012064:	4619      	mov	r1, r3
 8012066:	486f      	ldr	r0, [pc, #444]	; (8012224 <Debug_StartTask+0x2d0>)
 8012068:	f7fa fbe4 	bl	800c834 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	d00e      	beq.n	8012090 <Debug_StartTask+0x13c>
			body_ax = bodyAccel.xyz[0];
 8012072:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	4a82      	ldr	r2, [pc, #520]	; (8012284 <Debug_StartTask+0x330>)
 801207a:	6013      	str	r3, [r2, #0]
			body_ay = bodyAccel.xyz[1];
 801207c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012080:	68db      	ldr	r3, [r3, #12]
 8012082:	4a81      	ldr	r2, [pc, #516]	; (8012288 <Debug_StartTask+0x334>)
 8012084:	6013      	str	r3, [r2, #0]
			body_az = bodyAccel.xyz[2];
 8012086:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801208a:	691b      	ldr	r3, [r3, #16]
 801208c:	4a7f      	ldr	r2, [pc, #508]	; (801228c <Debug_StartTask+0x338>)
 801208e:	6013      	str	r3, [r2, #0]
		}
		if(msgBus.getBodyAngularVelocity(&bodyAnglularVel)){
 8012090:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012094:	4619      	mov	r1, r3
 8012096:	4863      	ldr	r0, [pc, #396]	; (8012224 <Debug_StartTask+0x2d0>)
 8012098:	f7fa fbef 	bl	800c87a <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 801209c:	4603      	mov	r3, r0
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d00e      	beq.n	80120c0 <Debug_StartTask+0x16c>
			body_gx = bodyAnglularVel.xyz[0];
 80120a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80120a6:	689b      	ldr	r3, [r3, #8]
 80120a8:	4a79      	ldr	r2, [pc, #484]	; (8012290 <Debug_StartTask+0x33c>)
 80120aa:	6013      	str	r3, [r2, #0]
			body_gy = bodyAnglularVel.xyz[1];
 80120ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	4a78      	ldr	r2, [pc, #480]	; (8012294 <Debug_StartTask+0x340>)
 80120b4:	6013      	str	r3, [r2, #0]
			body_gz = bodyAnglularVel.xyz[2];
 80120b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80120ba:	691b      	ldr	r3, [r3, #16]
 80120bc:	4a76      	ldr	r2, [pc, #472]	; (8012298 <Debug_StartTask+0x344>)
 80120be:	6013      	str	r3, [r2, #0]
		}
//		osKernelLock();
		if(msgBus.getBarometer(&baro)){
 80120c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80120c4:	4619      	mov	r1, r3
 80120c6:	4857      	ldr	r0, [pc, #348]	; (8012224 <Debug_StartTask+0x2d0>)
 80120c8:	f7fd fb7a 	bl	800f7c0 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d003      	beq.n	80120da <Debug_StartTask+0x186>
			baro_alt = baro.altitude;
 80120d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80120d6:	4a71      	ldr	r2, [pc, #452]	; (801229c <Debug_StartTask+0x348>)
 80120d8:	6013      	str	r3, [r2, #0]
//			printf_("baro : %u %f\r\n", (unsigned int)baro.timestamp, baro_alt);
		}

		if(msgBus.getNedAccel(&nedAccel)){
 80120da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120de:	4619      	mov	r1, r3
 80120e0:	4850      	ldr	r0, [pc, #320]	; (8012224 <Debug_StartTask+0x2d0>)
 80120e2:	f7fd fb91 	bl	800f808 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d00b      	beq.n	8012104 <Debug_StartTask+0x1b0>
			ned_ax = nedAccel.xyz[0];
 80120ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80120f0:	4a6b      	ldr	r2, [pc, #428]	; (80122a0 <Debug_StartTask+0x34c>)
 80120f2:	6013      	str	r3, [r2, #0]
			ned_ay = nedAccel.xyz[1];
 80120f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80120f8:	4a6a      	ldr	r2, [pc, #424]	; (80122a4 <Debug_StartTask+0x350>)
 80120fa:	6013      	str	r3, [r2, #0]
			ned_az = nedAccel.xyz[2];
 80120fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012100:	4a69      	ldr	r2, [pc, #420]	; (80122a8 <Debug_StartTask+0x354>)
 8012102:	6013      	str	r3, [r2, #0]
//			printf_("ned accel : %u %f %f %f\r\n", (unsigned int)nedAccel.timestamp, nedAccel.xyz[0], nedAccel.xyz[1], nedAccel.xyz[2]);
		}

		if(msgBus.getGPS(&gps)){
 8012104:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012108:	4619      	mov	r1, r3
 801210a:	4846      	ldr	r0, [pc, #280]	; (8012224 <Debug_StartTask+0x2d0>)
 801210c:	f7fd fb38 	bl	800f780 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	d016      	beq.n	8012144 <Debug_StartTask+0x1f0>
			gps_lat = gps.lat;
 8012116:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801211a:	ed93 7b04 	vldr	d7, [r3, #16]
 801211e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012122:	4b62      	ldr	r3, [pc, #392]	; (80122ac <Debug_StartTask+0x358>)
 8012124:	edc3 7a00 	vstr	s15, [r3]
			gps_lon = gps.lon;
 8012128:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801212c:	ed93 7b06 	vldr	d7, [r3, #24]
 8012130:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012134:	4b5e      	ldr	r3, [pc, #376]	; (80122b0 <Debug_StartTask+0x35c>)
 8012136:	edc3 7a00 	vstr	s15, [r3]
			gps_alt = gps.alt;
 801213a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801213e:	6a1b      	ldr	r3, [r3, #32]
 8012140:	4a5c      	ldr	r2, [pc, #368]	; (80122b4 <Debug_StartTask+0x360>)
 8012142:	6013      	str	r3, [r2, #0]
//			printf_("GPS : %u %f %f %f %f %f %f %f %u %f %f\r\n", (unsigned int)gps.timestamp, gps.lat, gps.lon, gps.alt, gps.velN, gps.velE
//						   , gps.direction, gps.vel
//						   , gps.fixType, gps.hdop, gps.vdop);
		}

		if(msgBus.getLocalPosition(&localPosition)){
 8012144:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012148:	4619      	mov	r1, r3
 801214a:	4836      	ldr	r0, [pc, #216]	; (8012224 <Debug_StartTask+0x2d0>)
 801214c:	f7fd fd38 	bl	800fbc0 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d017      	beq.n	8012186 <Debug_StartTask+0x232>
			local_x = localPosition.x;
 8012156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801215a:	4a57      	ldr	r2, [pc, #348]	; (80122b8 <Debug_StartTask+0x364>)
 801215c:	6013      	str	r3, [r2, #0]
			local_y = localPosition.y;
 801215e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012162:	4a56      	ldr	r2, [pc, #344]	; (80122bc <Debug_StartTask+0x368>)
 8012164:	6013      	str	r3, [r2, #0]
			local_z = localPosition.z;
 8012166:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801216a:	4a55      	ldr	r2, [pc, #340]	; (80122c0 <Debug_StartTask+0x36c>)
 801216c:	6013      	str	r3, [r2, #0]
			local_vx = localPosition.vx;
 801216e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012172:	4a54      	ldr	r2, [pc, #336]	; (80122c4 <Debug_StartTask+0x370>)
 8012174:	6013      	str	r3, [r2, #0]
			local_vy = localPosition.vy;
 8012176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801217a:	4a53      	ldr	r2, [pc, #332]	; (80122c8 <Debug_StartTask+0x374>)
 801217c:	6013      	str	r3, [r2, #0]
			local_vz = localPosition.vz;
 801217e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012182:	4a52      	ldr	r2, [pc, #328]	; (80122cc <Debug_StartTask+0x378>)
 8012184:	6013      	str	r3, [r2, #0]
//			printf_("ned position : %u %f %f %f\r\n", (unsigned int)localPosition.timestamp, local_x, local_y, local_z);
		}

		if(msgBus.getBodyMag(&bodyMag)){
 8012186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801218a:	4619      	mov	r1, r3
 801218c:	4825      	ldr	r0, [pc, #148]	; (8012224 <Debug_StartTask+0x2d0>)
 801218e:	f7fa fb98 	bl	800c8c2 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d00e      	beq.n	80121b6 <Debug_StartTask+0x262>
			mag_x = bodyMag.xyz[0];
 8012198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801219c:	689b      	ldr	r3, [r3, #8]
 801219e:	4a4c      	ldr	r2, [pc, #304]	; (80122d0 <Debug_StartTask+0x37c>)
 80121a0:	6013      	str	r3, [r2, #0]
			mag_y = bodyMag.xyz[1];
 80121a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	4a4a      	ldr	r2, [pc, #296]	; (80122d4 <Debug_StartTask+0x380>)
 80121aa:	6013      	str	r3, [r2, #0]
			mag_z = bodyMag.xyz[2];
 80121ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80121b0:	691b      	ldr	r3, [r3, #16]
 80121b2:	4a49      	ldr	r2, [pc, #292]	; (80122d8 <Debug_StartTask+0x384>)
 80121b4:	6013      	str	r3, [r2, #0]
		}

		if(msgBus.getModeFlag(&modeFlag)){
 80121b6:	f107 0320 	add.w	r3, r7, #32
 80121ba:	4619      	mov	r1, r3
 80121bc:	4819      	ldr	r0, [pc, #100]	; (8012224 <Debug_StartTask+0x2d0>)
 80121be:	f7fc fce1 	bl	800eb84 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d00b      	beq.n	80121e0 <Debug_StartTask+0x28c>
			mode_arm = (uint8_t)modeFlag.armMode;
 80121c8:	f107 0320 	add.w	r3, r7, #32
 80121cc:	689b      	ldr	r3, [r3, #8]
 80121ce:	b2da      	uxtb	r2, r3
 80121d0:	4b42      	ldr	r3, [pc, #264]	; (80122dc <Debug_StartTask+0x388>)
 80121d2:	701a      	strb	r2, [r3, #0]
			mode_flight = (uint8_t)modeFlag.flightMode;
 80121d4:	f107 0320 	add.w	r3, r7, #32
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	4b40      	ldr	r3, [pc, #256]	; (80122e0 <Debug_StartTask+0x38c>)
 80121de:	701a      	strb	r2, [r3, #0]
		}

		if(msgBus.getVehicleAttitueSP(&attitudeSP)){
 80121e0:	f107 0308 	add.w	r3, r7, #8
 80121e4:	4619      	mov	r1, r3
 80121e6:	480f      	ldr	r0, [pc, #60]	; (8012224 <Debug_StartTask+0x2d0>)
 80121e8:	f7fc fc82 	bl	800eaf0 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
 80121ec:	4603      	mov	r3, r0
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d013      	beq.n	801221a <Debug_StartTask+0x2c6>
			sp_roll = attitudeSP.roll;
 80121f2:	f107 0308 	add.w	r3, r7, #8
 80121f6:	689b      	ldr	r3, [r3, #8]
 80121f8:	4a3a      	ldr	r2, [pc, #232]	; (80122e4 <Debug_StartTask+0x390>)
 80121fa:	6013      	str	r3, [r2, #0]
			sp_pitch = attitudeSP.pitch;
 80121fc:	f107 0308 	add.w	r3, r7, #8
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	4a39      	ldr	r2, [pc, #228]	; (80122e8 <Debug_StartTask+0x394>)
 8012204:	6013      	str	r3, [r2, #0]
			sp_throtle = attitudeSP.throttle;
 8012206:	f107 0308 	add.w	r3, r7, #8
 801220a:	695b      	ldr	r3, [r3, #20]
 801220c:	4a37      	ldr	r2, [pc, #220]	; (80122ec <Debug_StartTask+0x398>)
 801220e:	6013      	str	r3, [r2, #0]
			sp_yaw = attitudeSP.yawRate;
 8012210:	f107 0308 	add.w	r3, r7, #8
 8012214:	691b      	ldr	r3, [r3, #16]
 8012216:	4a36      	ldr	r2, [pc, #216]	; (80122f0 <Debug_StartTask+0x39c>)
 8012218:	6013      	str	r3, [r2, #0]
		}
//		osKernelUnlock();
		channel = m1.Channel;
 801221a:	4b36      	ldr	r3, [pc, #216]	; (80122f4 <Debug_StartTask+0x3a0>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	4a36      	ldr	r2, [pc, #216]	; (80122f8 <Debug_StartTask+0x3a4>)
 8012220:	6013      	str	r3, [r2, #0]
		tick += 5;
 8012222:	e6a0      	b.n	8011f66 <Debug_StartTask+0x12>
 8012224:	24000a50 	.word	0x24000a50
 8012228:	2400133e 	.word	0x2400133e
 801222c:	24001340 	.word	0x24001340
 8012230:	24001342 	.word	0x24001342
 8012234:	24001344 	.word	0x24001344
 8012238:	24001346 	.word	0x24001346
 801223c:	24001348 	.word	0x24001348
 8012240:	2400134a 	.word	0x2400134a
 8012244:	2400134c 	.word	0x2400134c
 8012248:	2400134e 	.word	0x2400134e
 801224c:	24001350 	.word	0x24001350
 8012250:	24001352 	.word	0x24001352
 8012254:	24001354 	.word	0x24001354
 8012258:	24001356 	.word	0x24001356
 801225c:	24001358 	.word	0x24001358
 8012260:	2400135a 	.word	0x2400135a
 8012264:	2400135c 	.word	0x2400135c
 8012268:	24001360 	.word	0x24001360
 801226c:	24001364 	.word	0x24001364
 8012270:	24001368 	.word	0x24001368
 8012274:	2400136c 	.word	0x2400136c
 8012278:	2400136e 	.word	0x2400136e
 801227c:	24001370 	.word	0x24001370
 8012280:	24001372 	.word	0x24001372
 8012284:	240013a8 	.word	0x240013a8
 8012288:	240013ac 	.word	0x240013ac
 801228c:	240013b0 	.word	0x240013b0
 8012290:	240013b4 	.word	0x240013b4
 8012294:	240013b8 	.word	0x240013b8
 8012298:	240013bc 	.word	0x240013bc
 801229c:	24001374 	.word	0x24001374
 80122a0:	24001378 	.word	0x24001378
 80122a4:	2400137c 	.word	0x2400137c
 80122a8:	24001380 	.word	0x24001380
 80122ac:	2400139c 	.word	0x2400139c
 80122b0:	240013a0 	.word	0x240013a0
 80122b4:	240013a4 	.word	0x240013a4
 80122b8:	24001384 	.word	0x24001384
 80122bc:	24001388 	.word	0x24001388
 80122c0:	2400138c 	.word	0x2400138c
 80122c4:	24001390 	.word	0x24001390
 80122c8:	24001394 	.word	0x24001394
 80122cc:	24001398 	.word	0x24001398
 80122d0:	240013c0 	.word	0x240013c0
 80122d4:	240013c4 	.word	0x240013c4
 80122d8:	240013c8 	.word	0x240013c8
 80122dc:	240013dc 	.word	0x240013dc
 80122e0:	240013dd 	.word	0x240013dd
 80122e4:	240013cc 	.word	0x240013cc
 80122e8:	240013d0 	.word	0x240013d0
 80122ec:	240013d4 	.word	0x240013d4
 80122f0:	240013d8 	.word	0x240013d8
 80122f4:	24000734 	.word	0x24000734
 80122f8:	240013e0 	.word	0x240013e0

080122fc <MPU9250_StartTask>:

//		osDelay(5);
	}
}

void MPU9250_StartTask(void *argument){
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b084      	sub	sp, #16
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = osKernelGetTickCount();
 8012304:	f013 fea2 	bl	802604c <osKernelGetTickCount>
 8012308:	60f8      	str	r0, [r7, #12]
	while(1){
		tick += 5;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	3305      	adds	r3, #5
 801230e:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick);/* 200hz */
 8012310:	68f8      	ldr	r0, [r7, #12]
 8012312:	f014 f911 	bl	8026538 <osDelayUntil>
		MPU9250_updateDMA();
 8012316:	f7ee fe61 	bl	8000fdc <MPU9250_updateDMA>
		tick += 5;
 801231a:	e7f6      	b.n	801230a <MPU9250_StartTask+0xe>

0801231c <BME280_StartTask>:
	}
}
void BME280_StartTask(void *argument){
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
	while(1){
		BME280_readIT();
 8012324:	f7ef fd60 	bl	8001de8 <BME280_readIT>
		osDelay(20); 			/* 50hz */
 8012328:	2014      	movs	r0, #20
 801232a:	f014 f8d7 	bl	80264dc <osDelay>
		BME280_readIT();
 801232e:	e7f9      	b.n	8012324 <BME280_StartTask+0x8>

08012330 <IST8310_StartTask>:
	}
}
void IST8310_StartTask(void *argument){
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
	while(1){
//		IST8310_updataIT();
		osDelay(10); 			/* 100hz */
 8012338:	200a      	movs	r0, #10
 801233a:	f014 f8cf 	bl	80264dc <osDelay>
 801233e:	e7fb      	b.n	8012338 <IST8310_StartTask+0x8>

08012340 <SD_StartTask>:
	}
}
void SD_StartTask(void *argument){
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
	ModuleSD::main();
 8012348:	f7ff fd4a 	bl	8011de0 <_ZN2FC8ModuleSD4mainEv>
}
 801234c:	bf00      	nop
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}

08012354 <AHRS_StartTask>:

void AHRS_StartTask(void *argument){
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
	ModuleAHRS::main();
 801235c:	f7ff fc50 	bl	8011c00 <_ZN2FC10ModuleAHRS4mainEv>
}
 8012360:	bf00      	nop
 8012362:	3708      	adds	r7, #8
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <Commander_StartTask>:

void Commander_StartTask(void *argument){
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
	ModuleCommander::main();
 8012370:	f7fc ffc6 	bl	800f300 <_ZN2FC15ModuleCommander4mainEv>
}
 8012374:	bf00      	nop
 8012376:	3708      	adds	r7, #8
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <Buzzer_StartTask>:

void Buzzer_StartTask(void *argument){
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
	ModuleBuzzer::main();
 8012384:	f7fc fe36 	bl	800eff4 <_ZN2FC12ModuleBuzzer4mainEv>
}
 8012388:	bf00      	nop
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <AC_StartTask>:

void AC_StartTask(void *argument){
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
	ModuleAttitudeController::main();
 8012398:	f7ff fc04 	bl	8011ba4 <_ZN2FC24ModuleAttitudeController4mainEv>
}
 801239c:	bf00      	nop
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <INS_StartTask>:

void INS_StartTask(void *argument){
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
	ModuleINS::main();
 80123ac:	f7ff fc9e 	bl	8011cec <_ZN2FC9ModuleINS4mainEv>
}
 80123b0:	bf00      	nop
 80123b2:	3708      	adds	r7, #8
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <PC_StartTask>:

void PC_StartTask(void *argument){
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
	ModulePositionController::main();
 80123c0:	f7ff fc3c 	bl	8011c3c <_ZN2FC24ModulePositionController4mainEv>
}
 80123c4:	bf00      	nop
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <cppMain>:
/*
 *  LED signal
 *  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 */

void cppMain(){
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b084      	sub	sp, #16
 80123d0:	af04      	add	r7, sp, #16
    setvbuf(stdout, NULL, _IONBF, 0);
 80123d2:	4b1f      	ldr	r3, [pc, #124]	; (8012450 <cppMain+0x84>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	6898      	ldr	r0, [r3, #8]
 80123d8:	2300      	movs	r3, #0
 80123da:	2202      	movs	r2, #2
 80123dc:	2100      	movs	r1, #0
 80123de:	f01b fa69 	bl	802d8b4 <setvbuf>
    printf("test\r\n");
 80123e2:	481c      	ldr	r0, [pc, #112]	; (8012454 <cppMain+0x88>)
 80123e4:	f01b fa5e 	bl	802d8a4 <puts>


    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 80123e8:	481b      	ldr	r0, [pc, #108]	; (8012458 <cppMain+0x8c>)
 80123ea:	f00d f8b7 	bl	801f55c <HAL_TIM_Base_Start_IT>
	 * \setting		i2c1
	 * 				fastmode
	 * 				using global interrupt
	 * 				using dma_rx
	 */
	MPU9250(&hi2c1);
 80123ee:	481b      	ldr	r0, [pc, #108]	; (801245c <cppMain+0x90>)
 80123f0:	f7ee fd64 	bl	8000ebc <MPU9250>
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(&hi2c2, P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 80123f4:	2300      	movs	r3, #0
 80123f6:	9302      	str	r3, [sp, #8]
 80123f8:	2304      	movs	r3, #4
 80123fa:	9301      	str	r3, [sp, #4]
 80123fc:	2303      	movs	r3, #3
 80123fe:	9300      	str	r3, [sp, #0]
 8012400:	2301      	movs	r3, #1
 8012402:	2201      	movs	r2, #1
 8012404:	2103      	movs	r1, #3
 8012406:	4816      	ldr	r0, [pc, #88]	; (8012460 <cppMain+0x94>)
 8012408:	f7ef fbf6 	bl	8001bf8 <BME280_init>
	 * \setting		i2c2
	 * 				fastmode
	 * 				using global interrupt
	 * 	magnetometer in gps module
	 */
	IST8310(&hi2c2);
 801240c:	4814      	ldr	r0, [pc, #80]	; (8012460 <cppMain+0x94>)
 801240e:	f7ee fc1b 	bl	8000c48 <IST8310>
	/*
	 *  \setting		uart8
	 *  				baudrate		38400
	 *  				rx_dma(circular)
	 */
    TM_GPS_Init(&huart8);
 8012412:	4814      	ldr	r0, [pc, #80]	; (8012464 <cppMain+0x98>)
 8012414:	f7ef ffd8 	bl	80023c8 <TM_GPS_Init>
     *  				word length			9bits
     *  				parity				even
     *  				stop_bits			2
     *  				rx_dma(circular)
     */
	SBUS_init(&huart7);
 8012418:	4813      	ldr	r0, [pc, #76]	; (8012468 <cppMain+0x9c>)
 801241a:	f7ff f88b 	bl	8011534 <SBUS_init>

//	Lidar1D_init(&htim15, TIM_CHANNEL_1, TIM_CHANNEL_2);
//	Lidar1D_run();

	m1.start();
 801241e:	4813      	ldr	r0, [pc, #76]	; (801246c <cppMain+0xa0>)
 8012420:	f7ee fb59 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m2.start();
 8012424:	4812      	ldr	r0, [pc, #72]	; (8012470 <cppMain+0xa4>)
 8012426:	f7ee fb56 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m3.start();
 801242a:	4812      	ldr	r0, [pc, #72]	; (8012474 <cppMain+0xa8>)
 801242c:	f7ee fb53 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m4.start();
 8012430:	4811      	ldr	r0, [pc, #68]	; (8012478 <cppMain+0xac>)
 8012432:	f7ee fb50 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m5.start();
 8012436:	4811      	ldr	r0, [pc, #68]	; (801247c <cppMain+0xb0>)
 8012438:	f7ee fb4d 	bl	8000ad6 <_ZN2FC5Motor5startEv>
	m6.start();
 801243c:	4810      	ldr	r0, [pc, #64]	; (8012480 <cppMain+0xb4>)
 801243e:	f7ee fb4a 	bl	8000ad6 <_ZN2FC5Motor5startEv>

    std::printf("boot complete\r\n");
 8012442:	4810      	ldr	r0, [pc, #64]	; (8012484 <cppMain+0xb8>)
 8012444:	f01b fa2e 	bl	802d8a4 <puts>
}
 8012448:	bf00      	nop
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}
 801244e:	bf00      	nop
 8012450:	240006b0 	.word	0x240006b0
 8012454:	0802e47c 	.word	0x0802e47c
 8012458:	2400c62c 	.word	0x2400c62c
 801245c:	2400c36c 	.word	0x2400c36c
 8012460:	2400c3b8 	.word	0x2400c3b8
 8012464:	2400c880 	.word	0x2400c880
 8012468:	2400c678 	.word	0x2400c678
 801246c:	24000734 	.word	0x24000734
 8012470:	24000740 	.word	0x24000740
 8012474:	2400074c 	.word	0x2400074c
 8012478:	24000758 	.word	0x24000758
 801247c:	24000764 	.word	0x24000764
 8012480:	24000770 	.word	0x24000770
 8012484:	0802e484 	.word	0x0802e484

08012488 <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681a      	ldr	r2, [r3, #0]
 8012494:	4b46      	ldr	r3, [pc, #280]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	429a      	cmp	r2, r3
 801249c:	d157      	bne.n	801254e <HAL_I2C_MemRxCpltCallback+0xc6>
		switch(MPU9250_i2cRxCpltCallback()){
 801249e:	f7ee fdbd 	bl	800101c <MPU9250_i2cRxCpltCallback>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d002      	beq.n	80124ae <HAL_I2C_MemRxCpltCallback+0x26>
 80124a8:	2b02      	cmp	r3, #2
 80124aa:	d03d      	beq.n	8012528 <HAL_I2C_MemRxCpltCallback+0xa0>
 80124ac:	e04f      	b.n	801254e <HAL_I2C_MemRxCpltCallback+0xc6>
		case 1:
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 80124ae:	4b40      	ldr	r3, [pc, #256]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 80124b0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80124b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80124b8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80125a8 <HAL_I2C_MemRxCpltCallback+0x120>
 80124bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80124c0:	eef7 5bc7 	vcvt.f32.f64	s11, d7
							   , mpu9250.accel[1]*FC_GRAVITY_ACCEERATION
 80124c4:	4b3a      	ldr	r3, [pc, #232]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 80124c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80124ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80124ce:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80125a8 <HAL_I2C_MemRxCpltCallback+0x120>
 80124d2:	ee27 7b06 	vmul.f64	d7, d7, d6
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 80124d6:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
							   , mpu9250.accel[2]*FC_GRAVITY_ACCEERATION);
 80124da:	4b35      	ldr	r3, [pc, #212]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 80124dc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80124e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80124e4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80125a8 <HAL_I2C_MemRxCpltCallback+0x120>
 80124e8:	ee27 7b06 	vmul.f64	d7, d7, d6
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 80124ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80124f0:	eeb0 1a67 	vmov.f32	s2, s15
 80124f4:	eef0 0a45 	vmov.f32	s1, s10
 80124f8:	eeb0 0a65 	vmov.f32	s0, s11
 80124fc:	482d      	ldr	r0, [pc, #180]	; (80125b4 <HAL_I2C_MemRxCpltCallback+0x12c>)
 80124fe:	f7fe f8f9 	bl	80106f4 <_ZN2FC11SensorAccel8setAccelEfff>
			sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8012502:	4b2b      	ldr	r3, [pc, #172]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 8012504:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8012508:	4b29      	ldr	r3, [pc, #164]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 801250a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801250e:	4b28      	ldr	r3, [pc, #160]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 8012510:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8012514:	eeb0 1a66 	vmov.f32	s2, s13
 8012518:	eef0 0a47 	vmov.f32	s1, s14
 801251c:	eeb0 0a67 	vmov.f32	s0, s15
 8012520:	4825      	ldr	r0, [pc, #148]	; (80125b8 <HAL_I2C_MemRxCpltCallback+0x130>)
 8012522:	f7fe fcdf 	bl	8010ee4 <_ZN2FC10SensorGyro7setGyroEfff>
			break;
 8012526:	e012      	b.n	801254e <HAL_I2C_MemRxCpltCallback+0xc6>
		case 2:
			sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
 8012528:	4b21      	ldr	r3, [pc, #132]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 801252a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801252e:	4b20      	ldr	r3, [pc, #128]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 8012530:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8012534:	4b1e      	ldr	r3, [pc, #120]	; (80125b0 <HAL_I2C_MemRxCpltCallback+0x128>)
 8012536:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 801253a:	eeb0 1a66 	vmov.f32	s2, s13
 801253e:	eef0 0a47 	vmov.f32	s1, s14
 8012542:	eeb0 0a67 	vmov.f32	s0, s15
 8012546:	481d      	ldr	r0, [pc, #116]	; (80125bc <HAL_I2C_MemRxCpltCallback+0x134>)
 8012548:	f7fe fe42 	bl	80111d0 <_ZN2FC9SensorMag6setMagEfff>
			break;
 801254c:	bf00      	nop
		}
	}

	if(hi2c->Instance == ist8310.hi2c->Instance){
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	4b1b      	ldr	r3, [pc, #108]	; (80125c0 <HAL_I2C_MemRxCpltCallback+0x138>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	429a      	cmp	r2, r3
 801255a:	d103      	bne.n	8012564 <HAL_I2C_MemRxCpltCallback+0xdc>
		if(IST8310_i2cRxCpltCallback()){
 801255c:	f7ee fb88 	bl	8000c70 <IST8310_i2cRxCpltCallback>
 8012560:	4603      	mov	r3, r0
 8012562:	2b00      	cmp	r3, #0
//			sensorMag.setMag(ist8310.raw[0], ist8310.raw[1], ist8310.raw[2]);
		}
	}

	if(hi2c->Instance == bme280.hi2c->Instance){
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681a      	ldr	r2, [r3, #0]
 8012568:	4b16      	ldr	r3, [pc, #88]	; (80125c4 <HAL_I2C_MemRxCpltCallback+0x13c>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	429a      	cmp	r2, r3
 8012570:	d116      	bne.n	80125a0 <HAL_I2C_MemRxCpltCallback+0x118>
		if(BME280_i2cRxCpltCallback()){
 8012572:	f7ef fc59 	bl	8001e28 <BME280_i2cRxCpltCallback>
 8012576:	4603      	mov	r3, r0
 8012578:	2b00      	cmp	r3, #0
 801257a:	bf14      	ite	ne
 801257c:	2301      	movne	r3, #1
 801257e:	2300      	moveq	r3, #0
 8012580:	b2db      	uxtb	r3, r3
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00c      	beq.n	80125a0 <HAL_I2C_MemRxCpltCallback+0x118>
			sensorBaro.setBaro(bme280.P, bme280.T);
 8012586:	4b0f      	ldr	r3, [pc, #60]	; (80125c4 <HAL_I2C_MemRxCpltCallback+0x13c>)
 8012588:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 801258c:	4b0d      	ldr	r3, [pc, #52]	; (80125c4 <HAL_I2C_MemRxCpltCallback+0x13c>)
 801258e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8012592:	eef0 0a47 	vmov.f32	s1, s14
 8012596:	eeb0 0a67 	vmov.f32	s0, s15
 801259a:	480b      	ldr	r0, [pc, #44]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x140>)
 801259c:	f7fe fa22 	bl	80109e4 <_ZN2FC10SensorBaro7setBaroEff>
		}
	}
}
 80125a0:	bf00      	nop
 80125a2:	3708      	adds	r7, #8
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}
 80125a8:	3a92a305 	.word	0x3a92a305
 80125ac:	40239d01 	.word	0x40239d01
 80125b0:	24000fa4 	.word	0x24000fa4
 80125b4:	24000e30 	.word	0x24000e30
 80125b8:	24000f10 	.word	0x24000f10
 80125bc:	24000f50 	.word	0x24000f50
 80125c0:	24001320 	.word	0x24001320
 80125c4:	24000794 	.word	0x24000794
 80125c8:	24000e70 	.word	0x24000e70

080125cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80125cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125d0:	ed2d 8b06 	vpush	{d8-d10}
 80125d4:	b087      	sub	sp, #28
 80125d6:	af04      	add	r7, sp, #16
 80125d8:	6078      	str	r0, [r7, #4]
	if(huart->Instance == sbus.huart->Instance){
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	4b41      	ldr	r3, [pc, #260]	; (80126e4 <HAL_UART_RxCpltCallback+0x118>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d12f      	bne.n	8012648 <HAL_UART_RxCpltCallback+0x7c>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 80125e8:	f7ff f9e8 	bl	80119bc <SBUS_uartRxCpltCallback>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	bf0c      	ite	eq
 80125f2:	2301      	moveq	r3, #1
 80125f4:	2300      	movne	r3, #0
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d025      	beq.n	8012648 <HAL_UART_RxCpltCallback+0x7c>
			rc.setRC(SBUS_getChannel(2),	/* roll */
 80125fc:	2002      	movs	r0, #2
 80125fe:	f7ff fa5b 	bl	8011ab8 <SBUS_getChannel>
 8012602:	4603      	mov	r3, r0
 8012604:	461e      	mov	r6, r3
 8012606:	2003      	movs	r0, #3
 8012608:	f7ff fa56 	bl	8011ab8 <SBUS_getChannel>
 801260c:	4603      	mov	r3, r0
 801260e:	4698      	mov	r8, r3
 8012610:	2004      	movs	r0, #4
 8012612:	f7ff fa51 	bl	8011ab8 <SBUS_getChannel>
 8012616:	4603      	mov	r3, r0
 8012618:	4699      	mov	r9, r3
 801261a:	2001      	movs	r0, #1
 801261c:	f7ff fa4c 	bl	8011ab8 <SBUS_getChannel>
 8012620:	4603      	mov	r3, r0
 8012622:	461c      	mov	r4, r3
 8012624:	200b      	movs	r0, #11
 8012626:	f7ff fa47 	bl	8011ab8 <SBUS_getChannel>
 801262a:	4603      	mov	r3, r0
 801262c:	461d      	mov	r5, r3
 801262e:	2005      	movs	r0, #5
 8012630:	f7ff fa42 	bl	8011ab8 <SBUS_getChannel>
 8012634:	4603      	mov	r3, r0
 8012636:	9302      	str	r3, [sp, #8]
 8012638:	9501      	str	r5, [sp, #4]
 801263a:	9400      	str	r4, [sp, #0]
 801263c:	464b      	mov	r3, r9
 801263e:	4642      	mov	r2, r8
 8012640:	4631      	mov	r1, r6
 8012642:	4829      	ldr	r0, [pc, #164]	; (80126e8 <HAL_UART_RxCpltCallback+0x11c>)
 8012644:	f7fd feb8 	bl	80103b8 <_ZN2FC2RC5setRCEtttttt>
//							 TM_GPS_ConvertSpeed(gpsUart.gpsData.Speed, TM_GPS_Speed_MeterPerSecond), gpsUart.gpsData.Direction, gpsUart.gpsData.HDOP, gpsUart.gpsData.VDOP,
//							 gpsUart.gpsData.Satellites, gpsUart.gpsData.FixMode, 0/* UTC in microsecond */);
//		}
//	}

	if(TM_GPS_Update(huart) == TM_GPS_Result_NewData && gpsUart.gpsData.Fix != 0 /* gps must fixed */){
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7ef ff57 	bl	80024fc <TM_GPS_Update>
 801264e:	4603      	mov	r3, r0
 8012650:	2b00      	cmp	r3, #0
 8012652:	d105      	bne.n	8012660 <HAL_UART_RxCpltCallback+0x94>
 8012654:	4b25      	ldr	r3, [pc, #148]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 8012656:	7d5b      	ldrb	r3, [r3, #21]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d001      	beq.n	8012660 <HAL_UART_RxCpltCallback+0x94>
 801265c:	2301      	movs	r3, #1
 801265e:	e000      	b.n	8012662 <HAL_UART_RxCpltCallback+0x96>
 8012660:	2300      	movs	r3, #0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d037      	beq.n	80126d6 <HAL_UART_RxCpltCallback+0x10a>
		sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 8012666:	4b21      	ldr	r3, [pc, #132]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 8012668:	ed93 8b00 	vldr	d8, [r3]
 801266c:	4b1f      	ldr	r3, [pc, #124]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 801266e:	ed93 9b02 	vldr	d9, [r3, #8]
 8012672:	4b1e      	ldr	r3, [pc, #120]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 8012674:	ed93 aa04 	vldr	s20, [r3, #16]
 8012678:	4b1c      	ldr	r3, [pc, #112]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 801267a:	edd3 7a08 	vldr	s15, [r3, #32]
 801267e:	2001      	movs	r0, #1
 8012680:	eeb0 0a67 	vmov.f32	s0, s15
 8012684:	f7ef ff78 	bl	8002578 <TM_GPS_ConvertSpeed>
 8012688:	eeb0 6a40 	vmov.f32	s12, s0
 801268c:	4b17      	ldr	r3, [pc, #92]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 801268e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012692:	4b16      	ldr	r3, [pc, #88]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 8012694:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8012698:	4b14      	ldr	r3, [pc, #80]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 801269a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 801269e:	4b13      	ldr	r3, [pc, #76]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 80126a0:	7d19      	ldrb	r1, [r3, #20]
 80126a2:	4b12      	ldr	r3, [pc, #72]	; (80126ec <HAL_UART_RxCpltCallback+0x120>)
 80126a4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80126a8:	f04f 0300 	mov.w	r3, #0
 80126ac:	f04f 0400 	mov.w	r4, #0
 80126b0:	e9cd 3400 	strd	r3, r4, [sp]
 80126b4:	eeb0 4a66 	vmov.f32	s8, s13
 80126b8:	eef0 3a47 	vmov.f32	s7, s14
 80126bc:	eeb0 3a67 	vmov.f32	s6, s15
 80126c0:	eef0 2a46 	vmov.f32	s5, s12
 80126c4:	eeb0 2a4a 	vmov.f32	s4, s20
 80126c8:	eeb0 1b49 	vmov.f64	d1, d9
 80126cc:	eeb0 0b48 	vmov.f64	d0, d8
 80126d0:	4807      	ldr	r0, [pc, #28]	; (80126f0 <HAL_UART_RxCpltCallback+0x124>)
 80126d2:	f7fe fad9 	bl	8010c88 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
						 TM_GPS_ConvertSpeed(gpsUart.gpsData.Speed, TM_GPS_Speed_MeterPerSecond), gpsUart.gpsData.Direction, gpsUart.gpsData.HDOP, gpsUart.gpsData.VDOP,
						 gpsUart.gpsData.Satellites, gpsUart.gpsData.FixMode, 0/* UTC in microsecond */);
	}
}
 80126d6:	bf00      	nop
 80126d8:	370c      	adds	r7, #12
 80126da:	46bd      	mov	sp, r7
 80126dc:	ecbd 8b06 	vpop	{d8-d10}
 80126e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126e4:	24001030 	.word	0x24001030
 80126e8:	24000e08 	.word	0x24000e08
 80126ec:	240010c8 	.word	0x240010c8
 80126f0:	24000ea8 	.word	0x24000ea8

080126f4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
	Lidar1D_CaptureCallback(htim);
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f7ee fbb3 	bl	8000e68 <Lidar1D_CaptureCallback>
}
 8012702:	bf00      	nop
 8012704:	3708      	adds	r7, #8
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
	...

0801270c <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>:
template<typename T>
class Freq {
public:
	static uint16_t freqCnt;

	static uint16_t checkFreq(){
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8012712:	4b06      	ldr	r3, [pc, #24]	; (801272c <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012718:	4b04      	ldr	r3, [pc, #16]	; (801272c <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 801271a:	2200      	movs	r2, #0
 801271c:	801a      	strh	r2, [r3, #0]
		return res;
 801271e:	88fb      	ldrh	r3, [r7, #6]
	}
 8012720:	4618      	mov	r0, r3
 8012722:	370c      	adds	r7, #12
 8012724:	46bd      	mov	sp, r7
 8012726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272a:	4770      	bx	lr
 801272c:	24000e68 	.word	0x24000e68

08012730 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8012736:	4b06      	ldr	r3, [pc, #24]	; (8012750 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 801273c:	4b04      	ldr	r3, [pc, #16]	; (8012750 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 801273e:	2200      	movs	r2, #0
 8012740:	801a      	strh	r2, [r3, #0]
		return res;
 8012742:	88fb      	ldrh	r3, [r7, #6]
	}
 8012744:	4618      	mov	r0, r3
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr
 8012750:	24000f48 	.word	0x24000f48

08012754 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801275a:	4b06      	ldr	r3, [pc, #24]	; (8012774 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012760:	4b04      	ldr	r3, [pc, #16]	; (8012774 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 8012762:	2200      	movs	r2, #0
 8012764:	801a      	strh	r2, [r3, #0]
		return res;
 8012766:	88fb      	ldrh	r3, [r7, #6]
	}
 8012768:	4618      	mov	r0, r3
 801276a:	370c      	adds	r7, #12
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr
 8012774:	24000e28 	.word	0x24000e28

08012778 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801277e:	4b06      	ldr	r3, [pc, #24]	; (8012798 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 8012780:	881b      	ldrh	r3, [r3, #0]
 8012782:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012784:	4b04      	ldr	r3, [pc, #16]	; (8012798 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 8012786:	2200      	movs	r2, #0
 8012788:	801a      	strh	r2, [r3, #0]
		return res;
 801278a:	88fb      	ldrh	r3, [r7, #6]
	}
 801278c:	4618      	mov	r0, r3
 801278e:	370c      	adds	r7, #12
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr
 8012798:	24000fa0 	.word	0x24000fa0

0801279c <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80127a2:	4b06      	ldr	r3, [pc, #24]	; (80127bc <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 80127a4:	881b      	ldrh	r3, [r3, #0]
 80127a6:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80127a8:	4b04      	ldr	r3, [pc, #16]	; (80127bc <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 80127aa:	2200      	movs	r2, #0
 80127ac:	801a      	strh	r2, [r3, #0]
		return res;
 80127ae:	88fb      	ldrh	r3, [r7, #6]
	}
 80127b0:	4618      	mov	r0, r3
 80127b2:	370c      	adds	r7, #12
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr
 80127bc:	24000f08 	.word	0x24000f08

080127c0 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80127c6:	4b06      	ldr	r3, [pc, #24]	; (80127e0 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 80127c8:	881b      	ldrh	r3, [r3, #0]
 80127ca:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80127cc:	4b04      	ldr	r3, [pc, #16]	; (80127e0 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 80127ce:	2200      	movs	r2, #0
 80127d0:	801a      	strh	r2, [r3, #0]
		return res;
 80127d2:	88fb      	ldrh	r3, [r7, #6]
	}
 80127d4:	4618      	mov	r0, r3
 80127d6:	370c      	adds	r7, #12
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr
 80127e0:	24000ea0 	.word	0x24000ea0

080127e4 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80127ea:	4b06      	ldr	r3, [pc, #24]	; (8012804 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 80127ec:	881b      	ldrh	r3, [r3, #0]
 80127ee:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80127f0:	4b04      	ldr	r3, [pc, #16]	; (8012804 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 80127f2:	2200      	movs	r2, #0
 80127f4:	801a      	strh	r2, [r3, #0]
		return res;
 80127f6:	88fb      	ldrh	r3, [r7, #6]
	}
 80127f8:	4618      	mov	r0, r3
 80127fa:	370c      	adds	r7, #12
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr
 8012804:	24000978 	.word	0x24000978

08012808 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801280e:	4b06      	ldr	r3, [pc, #24]	; (8012828 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 8012810:	881b      	ldrh	r3, [r3, #0]
 8012812:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012814:	4b04      	ldr	r3, [pc, #16]	; (8012828 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 8012816:	2200      	movs	r2, #0
 8012818:	801a      	strh	r2, [r3, #0]
		return res;
 801281a:	88fb      	ldrh	r3, [r7, #6]
	}
 801281c:	4618      	mov	r0, r3
 801281e:	370c      	adds	r7, #12
 8012820:	46bd      	mov	sp, r7
 8012822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012826:	4770      	bx	lr
 8012828:	240013e8 	.word	0x240013e8

0801282c <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8012832:	4b06      	ldr	r3, [pc, #24]	; (801284c <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 8012834:	881b      	ldrh	r3, [r3, #0]
 8012836:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012838:	4b04      	ldr	r3, [pc, #16]	; (801284c <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 801283a:	2200      	movs	r2, #0
 801283c:	801a      	strh	r2, [r3, #0]
		return res;
 801283e:	88fb      	ldrh	r3, [r7, #6]
	}
 8012840:	4618      	mov	r0, r3
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr
 801284c:	240013e4 	.word	0x240013e4

08012850 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8012850:	b480      	push	{r7}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8012856:	4b06      	ldr	r3, [pc, #24]	; (8012870 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 8012858:	881b      	ldrh	r3, [r3, #0]
 801285a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 801285c:	4b04      	ldr	r3, [pc, #16]	; (8012870 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 801285e:	2200      	movs	r2, #0
 8012860:	801a      	strh	r2, [r3, #0]
		return res;
 8012862:	88fb      	ldrh	r3, [r7, #6]
	}
 8012864:	4618      	mov	r0, r3
 8012866:	370c      	adds	r7, #12
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	4770      	bx	lr
 8012870:	240013e6 	.word	0x240013e6

08012874 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b088      	sub	sp, #32
 8012878:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 801287a:	1d3b      	adds	r3, r7, #4
 801287c:	2200      	movs	r2, #0
 801287e:	601a      	str	r2, [r3, #0]
 8012880:	605a      	str	r2, [r3, #4]
 8012882:	609a      	str	r2, [r3, #8]
 8012884:	60da      	str	r2, [r3, #12]
 8012886:	611a      	str	r2, [r3, #16]
 8012888:	615a      	str	r2, [r3, #20]
 801288a:	619a      	str	r2, [r3, #24]

  /** Common config
  */
  hadc3.Instance = ADC3;
 801288c:	4b28      	ldr	r3, [pc, #160]	; (8012930 <MX_ADC3_Init+0xbc>)
 801288e:	4a29      	ldr	r2, [pc, #164]	; (8012934 <MX_ADC3_Init+0xc0>)
 8012890:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8012892:	4b27      	ldr	r3, [pc, #156]	; (8012930 <MX_ADC3_Init+0xbc>)
 8012894:	2200      	movs	r2, #0
 8012896:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8012898:	4b25      	ldr	r3, [pc, #148]	; (8012930 <MX_ADC3_Init+0xbc>)
 801289a:	2200      	movs	r2, #0
 801289c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801289e:	4b24      	ldr	r3, [pc, #144]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128a0:	2200      	movs	r2, #0
 80128a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80128a4:	4b22      	ldr	r3, [pc, #136]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128a6:	2204      	movs	r2, #4
 80128a8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80128aa:	4b21      	ldr	r3, [pc, #132]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128ac:	2200      	movs	r2, #0
 80128ae:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80128b0:	4b1f      	ldr	r3, [pc, #124]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128b2:	2200      	movs	r2, #0
 80128b4:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80128b6:	4b1e      	ldr	r3, [pc, #120]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128b8:	2201      	movs	r2, #1
 80128ba:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80128bc:	4b1c      	ldr	r3, [pc, #112]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128be:	2200      	movs	r2, #0
 80128c0:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80128c2:	4b1b      	ldr	r3, [pc, #108]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128c4:	2200      	movs	r2, #0
 80128c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80128c8:	4b19      	ldr	r3, [pc, #100]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128ca:	2200      	movs	r2, #0
 80128cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80128ce:	4b18      	ldr	r3, [pc, #96]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128d0:	2200      	movs	r2, #0
 80128d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80128d4:	4b16      	ldr	r3, [pc, #88]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128d6:	2200      	movs	r2, #0
 80128d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80128da:	4b15      	ldr	r3, [pc, #84]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128dc:	2200      	movs	r2, #0
 80128de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80128e0:	4b13      	ldr	r3, [pc, #76]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128e2:	2200      	movs	r2, #0
 80128e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80128e8:	4811      	ldr	r0, [pc, #68]	; (8012930 <MX_ADC3_Init+0xbc>)
 80128ea:	f002 f939 	bl	8014b60 <HAL_ADC_Init>
 80128ee:	4603      	mov	r3, r0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d001      	beq.n	80128f8 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80128f4:	f000 fd20 	bl	8013338 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80128f8:	4b0f      	ldr	r3, [pc, #60]	; (8012938 <MX_ADC3_Init+0xc4>)
 80128fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80128fc:	2306      	movs	r3, #6
 80128fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8012900:	2300      	movs	r3, #0
 8012902:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8012904:	4b0d      	ldr	r3, [pc, #52]	; (801293c <MX_ADC3_Init+0xc8>)
 8012906:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8012908:	2304      	movs	r3, #4
 801290a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 801290c:	2300      	movs	r3, #0
 801290e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8012910:	2300      	movs	r3, #0
 8012912:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8012914:	1d3b      	adds	r3, r7, #4
 8012916:	4619      	mov	r1, r3
 8012918:	4805      	ldr	r0, [pc, #20]	; (8012930 <MX_ADC3_Init+0xbc>)
 801291a:	f002 fac1 	bl	8014ea0 <HAL_ADC_ConfigChannel>
 801291e:	4603      	mov	r3, r0
 8012920:	2b00      	cmp	r3, #0
 8012922:	d001      	beq.n	8012928 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8012924:	f000 fd08 	bl	8013338 <Error_Handler>
  }

}
 8012928:	bf00      	nop
 801292a:	3720      	adds	r7, #32
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}
 8012930:	24005d3c 	.word	0x24005d3c
 8012934:	58026000 	.word	0x58026000
 8012938:	04300002 	.word	0x04300002
 801293c:	47ff0000 	.word	0x47ff0000

08012940 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	4a18      	ldr	r2, [pc, #96]	; (80129b0 <HAL_ADC_MspInit+0x70>)
 801294e:	4293      	cmp	r3, r2
 8012950:	d129      	bne.n	80129a6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8012952:	4b18      	ldr	r3, [pc, #96]	; (80129b4 <HAL_ADC_MspInit+0x74>)
 8012954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012958:	4a16      	ldr	r2, [pc, #88]	; (80129b4 <HAL_ADC_MspInit+0x74>)
 801295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801295e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012962:	4b14      	ldr	r3, [pc, #80]	; (80129b4 <HAL_ADC_MspInit+0x74>)
 8012964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801296c:	60fb      	str	r3, [r7, #12]
 801296e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012970:	4b10      	ldr	r3, [pc, #64]	; (80129b4 <HAL_ADC_MspInit+0x74>)
 8012972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012976:	4a0f      	ldr	r2, [pc, #60]	; (80129b4 <HAL_ADC_MspInit+0x74>)
 8012978:	f043 0304 	orr.w	r3, r3, #4
 801297c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012980:	4b0c      	ldr	r3, [pc, #48]	; (80129b4 <HAL_ADC_MspInit+0x74>)
 8012982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012986:	f003 0304 	and.w	r3, r3, #4
 801298a:	60bb      	str	r3, [r7, #8]
 801298c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 801298e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8012992:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012996:	f001 ff41 	bl	801481c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 801299a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 801299e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80129a2:	f001 ff3b 	bl	801481c <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80129a6:	bf00      	nop
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop
 80129b0:	58026000 	.word	0x58026000
 80129b4:	58024400 	.word	0x58024400

080129b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80129be:	4b15      	ldr	r3, [pc, #84]	; (8012a14 <MX_DMA_Init+0x5c>)
 80129c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80129c4:	4a13      	ldr	r2, [pc, #76]	; (8012a14 <MX_DMA_Init+0x5c>)
 80129c6:	f043 0301 	orr.w	r3, r3, #1
 80129ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80129ce:	4b11      	ldr	r3, [pc, #68]	; (8012a14 <MX_DMA_Init+0x5c>)
 80129d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80129d4:	f003 0301 	and.w	r3, r3, #1
 80129d8:	607b      	str	r3, [r7, #4]
 80129da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80129dc:	2200      	movs	r2, #0
 80129de:	2100      	movs	r1, #0
 80129e0:	200b      	movs	r0, #11
 80129e2:	f002 ff21 	bl	8015828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80129e6:	200b      	movs	r0, #11
 80129e8:	f002 ff38 	bl	801585c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 80129ec:	2200      	movs	r2, #0
 80129ee:	210a      	movs	r1, #10
 80129f0:	200c      	movs	r0, #12
 80129f2:	f002 ff19 	bl	8015828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80129f6:	200c      	movs	r0, #12
 80129f8:	f002 ff30 	bl	801585c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80129fc:	2200      	movs	r2, #0
 80129fe:	2105      	movs	r1, #5
 8012a00:	200d      	movs	r0, #13
 8012a02:	f002 ff11 	bl	8015828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8012a06:	200d      	movs	r0, #13
 8012a08:	f002 ff28 	bl	801585c <HAL_NVIC_EnableIRQ>

}
 8012a0c:	bf00      	nop
 8012a0e:	3708      	adds	r7, #8
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	58024400 	.word	0x58024400

08012a18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8012a1c:	4a34      	ldr	r2, [pc, #208]	; (8012af0 <MX_FREERTOS_Init+0xd8>)
 8012a1e:	2100      	movs	r1, #0
 8012a20:	4834      	ldr	r0, [pc, #208]	; (8012af4 <MX_FREERTOS_Init+0xdc>)
 8012a22:	f013 fb3b 	bl	802609c <osThreadNew>
 8012a26:	4602      	mov	r2, r0
 8012a28:	4b33      	ldr	r3, [pc, #204]	; (8012af8 <MX_FREERTOS_Init+0xe0>)
 8012a2a:	601a      	str	r2, [r3, #0]

  /* creation of MPU9250_Task */
  MPU9250_TaskHandle = osThreadNew(MPU9250_StartTask, NULL, &MPU9250_Task_attributes);
 8012a2c:	4a33      	ldr	r2, [pc, #204]	; (8012afc <MX_FREERTOS_Init+0xe4>)
 8012a2e:	2100      	movs	r1, #0
 8012a30:	4833      	ldr	r0, [pc, #204]	; (8012b00 <MX_FREERTOS_Init+0xe8>)
 8012a32:	f013 fb33 	bl	802609c <osThreadNew>
 8012a36:	4602      	mov	r2, r0
 8012a38:	4b32      	ldr	r3, [pc, #200]	; (8012b04 <MX_FREERTOS_Init+0xec>)
 8012a3a:	601a      	str	r2, [r3, #0]

  /* creation of BME280_Task */
  BME280_TaskHandle = osThreadNew(BME280_StartTask, NULL, &BME280_Task_attributes);
 8012a3c:	4a32      	ldr	r2, [pc, #200]	; (8012b08 <MX_FREERTOS_Init+0xf0>)
 8012a3e:	2100      	movs	r1, #0
 8012a40:	4832      	ldr	r0, [pc, #200]	; (8012b0c <MX_FREERTOS_Init+0xf4>)
 8012a42:	f013 fb2b 	bl	802609c <osThreadNew>
 8012a46:	4602      	mov	r2, r0
 8012a48:	4b31      	ldr	r3, [pc, #196]	; (8012b10 <MX_FREERTOS_Init+0xf8>)
 8012a4a:	601a      	str	r2, [r3, #0]

  /* creation of IST8310_Task */
  IST8310_TaskHandle = osThreadNew(IST8310_StartTask, NULL, &IST8310_Task_attributes);
 8012a4c:	4a31      	ldr	r2, [pc, #196]	; (8012b14 <MX_FREERTOS_Init+0xfc>)
 8012a4e:	2100      	movs	r1, #0
 8012a50:	4831      	ldr	r0, [pc, #196]	; (8012b18 <MX_FREERTOS_Init+0x100>)
 8012a52:	f013 fb23 	bl	802609c <osThreadNew>
 8012a56:	4602      	mov	r2, r0
 8012a58:	4b30      	ldr	r3, [pc, #192]	; (8012b1c <MX_FREERTOS_Init+0x104>)
 8012a5a:	601a      	str	r2, [r3, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(SD_StartTask, NULL, &SD_Task_attributes);
 8012a5c:	4a30      	ldr	r2, [pc, #192]	; (8012b20 <MX_FREERTOS_Init+0x108>)
 8012a5e:	2100      	movs	r1, #0
 8012a60:	4830      	ldr	r0, [pc, #192]	; (8012b24 <MX_FREERTOS_Init+0x10c>)
 8012a62:	f013 fb1b 	bl	802609c <osThreadNew>
 8012a66:	4602      	mov	r2, r0
 8012a68:	4b2f      	ldr	r3, [pc, #188]	; (8012b28 <MX_FREERTOS_Init+0x110>)
 8012a6a:	601a      	str	r2, [r3, #0]

  /* creation of AHRS_Task */
  AHRS_TaskHandle = osThreadNew(AHRS_StartTask, NULL, &AHRS_Task_attributes);
 8012a6c:	4a2f      	ldr	r2, [pc, #188]	; (8012b2c <MX_FREERTOS_Init+0x114>)
 8012a6e:	2100      	movs	r1, #0
 8012a70:	482f      	ldr	r0, [pc, #188]	; (8012b30 <MX_FREERTOS_Init+0x118>)
 8012a72:	f013 fb13 	bl	802609c <osThreadNew>
 8012a76:	4602      	mov	r2, r0
 8012a78:	4b2e      	ldr	r3, [pc, #184]	; (8012b34 <MX_FREERTOS_Init+0x11c>)
 8012a7a:	601a      	str	r2, [r3, #0]

  /* creation of Commander_Task */
  Commander_TaskHandle = osThreadNew(Commander_StartTask, NULL, &Commander_Task_attributes);
 8012a7c:	4a2e      	ldr	r2, [pc, #184]	; (8012b38 <MX_FREERTOS_Init+0x120>)
 8012a7e:	2100      	movs	r1, #0
 8012a80:	482e      	ldr	r0, [pc, #184]	; (8012b3c <MX_FREERTOS_Init+0x124>)
 8012a82:	f013 fb0b 	bl	802609c <osThreadNew>
 8012a86:	4602      	mov	r2, r0
 8012a88:	4b2d      	ldr	r3, [pc, #180]	; (8012b40 <MX_FREERTOS_Init+0x128>)
 8012a8a:	601a      	str	r2, [r3, #0]

  /* creation of Debug_Task */
  Debug_TaskHandle = osThreadNew(Debug_StartTask, NULL, &Debug_Task_attributes);
 8012a8c:	4a2d      	ldr	r2, [pc, #180]	; (8012b44 <MX_FREERTOS_Init+0x12c>)
 8012a8e:	2100      	movs	r1, #0
 8012a90:	482d      	ldr	r0, [pc, #180]	; (8012b48 <MX_FREERTOS_Init+0x130>)
 8012a92:	f013 fb03 	bl	802609c <osThreadNew>
 8012a96:	4602      	mov	r2, r0
 8012a98:	4b2c      	ldr	r3, [pc, #176]	; (8012b4c <MX_FREERTOS_Init+0x134>)
 8012a9a:	601a      	str	r2, [r3, #0]

  /* creation of Buzzer_Task */
  Buzzer_TaskHandle = osThreadNew(Buzzer_StartTask, NULL, &Buzzer_Task_attributes);
 8012a9c:	4a2c      	ldr	r2, [pc, #176]	; (8012b50 <MX_FREERTOS_Init+0x138>)
 8012a9e:	2100      	movs	r1, #0
 8012aa0:	482c      	ldr	r0, [pc, #176]	; (8012b54 <MX_FREERTOS_Init+0x13c>)
 8012aa2:	f013 fafb 	bl	802609c <osThreadNew>
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	4b2b      	ldr	r3, [pc, #172]	; (8012b58 <MX_FREERTOS_Init+0x140>)
 8012aaa:	601a      	str	r2, [r3, #0]

  /* creation of Health_Task */
  Health_TaskHandle = osThreadNew(Health_StartTask, NULL, &Health_Task_attributes);
 8012aac:	4a2b      	ldr	r2, [pc, #172]	; (8012b5c <MX_FREERTOS_Init+0x144>)
 8012aae:	2100      	movs	r1, #0
 8012ab0:	482b      	ldr	r0, [pc, #172]	; (8012b60 <MX_FREERTOS_Init+0x148>)
 8012ab2:	f013 faf3 	bl	802609c <osThreadNew>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	4b2a      	ldr	r3, [pc, #168]	; (8012b64 <MX_FREERTOS_Init+0x14c>)
 8012aba:	601a      	str	r2, [r3, #0]

  /* creation of AC_Task */
  AC_TaskHandle = osThreadNew(AC_StartTask, NULL, &AC_Task_attributes);
 8012abc:	4a2a      	ldr	r2, [pc, #168]	; (8012b68 <MX_FREERTOS_Init+0x150>)
 8012abe:	2100      	movs	r1, #0
 8012ac0:	482a      	ldr	r0, [pc, #168]	; (8012b6c <MX_FREERTOS_Init+0x154>)
 8012ac2:	f013 faeb 	bl	802609c <osThreadNew>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	4b29      	ldr	r3, [pc, #164]	; (8012b70 <MX_FREERTOS_Init+0x158>)
 8012aca:	601a      	str	r2, [r3, #0]

  /* creation of INS_Task */
  INS_TaskHandle = osThreadNew(INS_StartTask, NULL, &INS_Task_attributes);
 8012acc:	4a29      	ldr	r2, [pc, #164]	; (8012b74 <MX_FREERTOS_Init+0x15c>)
 8012ace:	2100      	movs	r1, #0
 8012ad0:	4829      	ldr	r0, [pc, #164]	; (8012b78 <MX_FREERTOS_Init+0x160>)
 8012ad2:	f013 fae3 	bl	802609c <osThreadNew>
 8012ad6:	4602      	mov	r2, r0
 8012ad8:	4b28      	ldr	r3, [pc, #160]	; (8012b7c <MX_FREERTOS_Init+0x164>)
 8012ada:	601a      	str	r2, [r3, #0]

  /* creation of PC_Task */
  PC_TaskHandle = osThreadNew(PC_StartTask, NULL, &PC_Task_attributes);
 8012adc:	4a28      	ldr	r2, [pc, #160]	; (8012b80 <MX_FREERTOS_Init+0x168>)
 8012ade:	2100      	movs	r1, #0
 8012ae0:	4828      	ldr	r0, [pc, #160]	; (8012b84 <MX_FREERTOS_Init+0x16c>)
 8012ae2:	f013 fadb 	bl	802609c <osThreadNew>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	4b27      	ldr	r3, [pc, #156]	; (8012b88 <MX_FREERTOS_Init+0x170>)
 8012aea:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8012aec:	bf00      	nop
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	0802ee10 	.word	0x0802ee10
 8012af4:	08012b8d 	.word	0x08012b8d
 8012af8:	24005da0 	.word	0x24005da0
 8012afc:	0802ee34 	.word	0x0802ee34
 8012b00:	080122fd 	.word	0x080122fd
 8012b04:	2400943c 	.word	0x2400943c
 8012b08:	0802ee58 	.word	0x0802ee58
 8012b0c:	0801231d 	.word	0x0801231d
 8012b10:	24009908 	.word	0x24009908
 8012b14:	0802ee7c 	.word	0x0802ee7c
 8012b18:	08012331 	.word	0x08012331
 8012b1c:	240065a8 	.word	0x240065a8
 8012b20:	0802eea0 	.word	0x0802eea0
 8012b24:	08012341 	.word	0x08012341
 8012b28:	24008dac 	.word	0x24008dac
 8012b2c:	0802eec4 	.word	0x0802eec4
 8012b30:	08012355 	.word	0x08012355
 8012b34:	240098a4 	.word	0x240098a4
 8012b38:	0802eee8 	.word	0x0802eee8
 8012b3c:	08012369 	.word	0x08012369
 8012b40:	24008fb0 	.word	0x24008fb0
 8012b44:	0802ef0c 	.word	0x0802ef0c
 8012b48:	08011f55 	.word	0x08011f55
 8012b4c:	2400926c 	.word	0x2400926c
 8012b50:	0802ef30 	.word	0x0802ef30
 8012b54:	0801237d 	.word	0x0801237d
 8012b58:	24009904 	.word	0x24009904
 8012b5c:	0802ef54 	.word	0x0802ef54
 8012b60:	08011f41 	.word	0x08011f41
 8012b64:	2400990c 	.word	0x2400990c
 8012b68:	0802ef78 	.word	0x0802ef78
 8012b6c:	08012391 	.word	0x08012391
 8012b70:	24009440 	.word	0x24009440
 8012b74:	0802ef9c 	.word	0x0802ef9c
 8012b78:	080123a5 	.word	0x080123a5
 8012b7c:	240065a4 	.word	0x240065a4
 8012b80:	0802efc0 	.word	0x0802efc0
 8012b84:	080123b9 	.word	0x080123b9
 8012b88:	240094a0 	.word	0x240094a0

08012b8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8012b94:	2001      	movs	r0, #1
 8012b96:	f013 fca1 	bl	80264dc <osDelay>
 8012b9a:	e7fb      	b.n	8012b94 <StartDefaultTask+0x8>

08012b9c <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA1   ------> S_TIM5_CH2
*/
void MX_GPIO_Init(void)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b08e      	sub	sp, #56	; 0x38
 8012ba0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	601a      	str	r2, [r3, #0]
 8012baa:	605a      	str	r2, [r3, #4]
 8012bac:	609a      	str	r2, [r3, #8]
 8012bae:	60da      	str	r2, [r3, #12]
 8012bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012bb2:	4b8c      	ldr	r3, [pc, #560]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012bb8:	4a8a      	ldr	r2, [pc, #552]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012bba:	f043 0310 	orr.w	r3, r3, #16
 8012bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012bc2:	4b88      	ldr	r3, [pc, #544]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012bc8:	f003 0310 	and.w	r3, r3, #16
 8012bcc:	623b      	str	r3, [r7, #32]
 8012bce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012bd0:	4b84      	ldr	r3, [pc, #528]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012bd6:	4a83      	ldr	r2, [pc, #524]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012bd8:	f043 0304 	orr.w	r3, r3, #4
 8012bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012be0:	4b80      	ldr	r3, [pc, #512]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012be6:	f003 0304 	and.w	r3, r3, #4
 8012bea:	61fb      	str	r3, [r7, #28]
 8012bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012bee:	4b7d      	ldr	r3, [pc, #500]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012bf4:	4a7b      	ldr	r2, [pc, #492]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012bf6:	f043 0320 	orr.w	r3, r3, #32
 8012bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012bfe:	4b79      	ldr	r3, [pc, #484]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c04:	f003 0320 	and.w	r3, r3, #32
 8012c08:	61bb      	str	r3, [r7, #24]
 8012c0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012c0c:	4b75      	ldr	r3, [pc, #468]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c12:	4a74      	ldr	r2, [pc, #464]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c1c:	4b71      	ldr	r3, [pc, #452]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c26:	617b      	str	r3, [r7, #20]
 8012c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c2a:	4b6e      	ldr	r3, [pc, #440]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c30:	4a6c      	ldr	r2, [pc, #432]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c32:	f043 0301 	orr.w	r3, r3, #1
 8012c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c3a:	4b6a      	ldr	r3, [pc, #424]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c40:	f003 0301 	and.w	r3, r3, #1
 8012c44:	613b      	str	r3, [r7, #16]
 8012c46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012c48:	4b66      	ldr	r3, [pc, #408]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c4e:	4a65      	ldr	r2, [pc, #404]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c50:	f043 0302 	orr.w	r3, r3, #2
 8012c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c58:	4b62      	ldr	r3, [pc, #392]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c5e:	f003 0302 	and.w	r3, r3, #2
 8012c62:	60fb      	str	r3, [r7, #12]
 8012c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012c66:	4b5f      	ldr	r3, [pc, #380]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c6c:	4a5d      	ldr	r2, [pc, #372]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c6e:	f043 0308 	orr.w	r3, r3, #8
 8012c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c76:	4b5b      	ldr	r3, [pc, #364]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c7c:	f003 0308 	and.w	r3, r3, #8
 8012c80:	60bb      	str	r3, [r7, #8]
 8012c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012c84:	4b57      	ldr	r3, [pc, #348]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c8a:	4a56      	ldr	r2, [pc, #344]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c94:	4b53      	ldr	r3, [pc, #332]	; (8012de4 <MX_GPIO_Init+0x248>)
 8012c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c9e:	607b      	str	r3, [r7, #4]
 8012ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WINCH_CONTROL1_Pin|WINCH_CONTROL2_Pin, GPIO_PIN_RESET);
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	210c      	movs	r1, #12
 8012ca6:	4850      	ldr	r0, [pc, #320]	; (8012de8 <MX_GPIO_Init+0x24c>)
 8012ca8:	f005 fae4 	bl	8018274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|EXTERNAL_LED_CONTROL_Pin, GPIO_PIN_RESET);
 8012cac:	2200      	movs	r2, #0
 8012cae:	f241 011c 	movw	r1, #4124	; 0x101c
 8012cb2:	484e      	ldr	r0, [pc, #312]	; (8012dec <MX_GPIO_Init+0x250>)
 8012cb4:	f005 fade 	bl	8018274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8012cb8:	2200      	movs	r2, #0
 8012cba:	2101      	movs	r1, #1
 8012cbc:	484c      	ldr	r0, [pc, #304]	; (8012df0 <MX_GPIO_Init+0x254>)
 8012cbe:	f005 fad9 	bl	8018274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012cc8:	484a      	ldr	r0, [pc, #296]	; (8012df4 <MX_GPIO_Init+0x258>)
 8012cca:	f005 fad3 	bl	8018274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WINCH_CONTROL1_Pin|WINCH_CONTROL2_Pin;
 8012cce:	230c      	movs	r3, #12
 8012cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	4840      	ldr	r0, [pc, #256]	; (8012de8 <MX_GPIO_Init+0x24c>)
 8012ce6:	f005 f8fd 	bl	8017ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SD_DETECTION_Pin;
 8012cea:	f242 0320 	movw	r3, #8224	; 0x2020
 8012cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012cfc:	4619      	mov	r1, r3
 8012cfe:	483e      	ldr	r0, [pc, #248]	; (8012df8 <MX_GPIO_Init+0x25c>)
 8012d00:	f005 f8f0 	bl	8017ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|EXTERNAL_LED_CONTROL_Pin;
 8012d04:	f241 031c 	movw	r3, #4124	; 0x101c
 8012d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d12:	2300      	movs	r3, #0
 8012d14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	4833      	ldr	r0, [pc, #204]	; (8012dec <MX_GPIO_Init+0x250>)
 8012d1e:	f005 f8e1 	bl	8017ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8012d22:	2302      	movs	r3, #2
 8012d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d26:	2302      	movs	r3, #2
 8012d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8012d32:	2302      	movs	r3, #2
 8012d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8012d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	482f      	ldr	r0, [pc, #188]	; (8012dfc <MX_GPIO_Init+0x260>)
 8012d3e:	f005 f8d1 	bl	8017ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8012d42:	2301      	movs	r3, #1
 8012d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012d46:	2301      	movs	r3, #1
 8012d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8012d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d56:	4619      	mov	r1, r3
 8012d58:	4825      	ldr	r0, [pc, #148]	; (8012df0 <MX_GPIO_Init+0x254>)
 8012d5a:	f005 f8c3 	bl	8017ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8012d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012d64:	2301      	movs	r3, #1
 8012d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d68:	2300      	movs	r3, #0
 8012d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8012d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d74:	4619      	mov	r1, r3
 8012d76:	481f      	ldr	r0, [pc, #124]	; (8012df4 <MX_GPIO_Init+0x258>)
 8012d78:	f005 f8b4 	bl	8017ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECTIONG3_Pin;
 8012d7c:	2308      	movs	r3, #8
 8012d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012d80:	2300      	movs	r3, #0
 8012d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d84:	2300      	movs	r3, #0
 8012d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECTIONG3_GPIO_Port, &GPIO_InitStruct);
 8012d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	481c      	ldr	r0, [pc, #112]	; (8012e00 <MX_GPIO_Init+0x264>)
 8012d90:	f005 f8a8 	bl	8017ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8012d94:	2380      	movs	r3, #128	; 0x80
 8012d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012d98:	4b1a      	ldr	r3, [pc, #104]	; (8012e04 <MX_GPIO_Init+0x268>)
 8012d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8012da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012da4:	4619      	mov	r1, r3
 8012da6:	4816      	ldr	r0, [pc, #88]	; (8012e00 <MX_GPIO_Init+0x264>)
 8012da8:	f005 f89c 	bl	8017ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAFETY_SWITCH_Pin;
 8012dac:	2380      	movs	r3, #128	; 0x80
 8012dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012db0:	2300      	movs	r3, #0
 8012db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012db4:	2300      	movs	r3, #0
 8012db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SAFETY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8012db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	480d      	ldr	r0, [pc, #52]	; (8012df4 <MX_GPIO_Init+0x258>)
 8012dc0:	f005 f890 	bl	8017ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU9250_INT_Pin;
 8012dc4:	2320      	movs	r3, #32
 8012dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MPU9250_INT_GPIO_Port, &GPIO_InitStruct);
 8012dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	4806      	ldr	r0, [pc, #24]	; (8012df0 <MX_GPIO_Init+0x254>)
 8012dd8:	f005 f884 	bl	8017ee4 <HAL_GPIO_Init>

}
 8012ddc:	bf00      	nop
 8012dde:	3738      	adds	r7, #56	; 0x38
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	58024400 	.word	0x58024400
 8012de8:	58021000 	.word	0x58021000
 8012dec:	58021400 	.word	0x58021400
 8012df0:	58020400 	.word	0x58020400
 8012df4:	58020c00 	.word	0x58020c00
 8012df8:	58020800 	.word	0x58020800
 8012dfc:	58020000 	.word	0x58020000
 8012e00:	58021800 	.word	0x58021800
 8012e04:	11110000 	.word	0x11110000

08012e08 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8012e0c:	4b1b      	ldr	r3, [pc, #108]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e0e:	4a1c      	ldr	r2, [pc, #112]	; (8012e80 <MX_I2C1_Init+0x78>)
 8012e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8012e12:	4b1a      	ldr	r3, [pc, #104]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e14:	4a1b      	ldr	r2, [pc, #108]	; (8012e84 <MX_I2C1_Init+0x7c>)
 8012e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8012e18:	4b18      	ldr	r3, [pc, #96]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012e1e:	4b17      	ldr	r3, [pc, #92]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e20:	2201      	movs	r2, #1
 8012e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012e24:	4b15      	ldr	r3, [pc, #84]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e26:	2200      	movs	r2, #0
 8012e28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8012e2a:	4b14      	ldr	r3, [pc, #80]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012e30:	4b12      	ldr	r3, [pc, #72]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e32:	2200      	movs	r2, #0
 8012e34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012e36:	4b11      	ldr	r3, [pc, #68]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e38:	2200      	movs	r2, #0
 8012e3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012e3c:	4b0f      	ldr	r3, [pc, #60]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e3e:	2200      	movs	r2, #0
 8012e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012e42:	480e      	ldr	r0, [pc, #56]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e44:	f005 fa30 	bl	80182a8 <HAL_I2C_Init>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d001      	beq.n	8012e52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8012e4e:	f000 fa73 	bl	8013338 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012e52:	2100      	movs	r1, #0
 8012e54:	4809      	ldr	r0, [pc, #36]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e56:	f007 fdf9 	bl	801aa4c <HAL_I2CEx_ConfigAnalogFilter>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d001      	beq.n	8012e64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8012e60:	f000 fa6a 	bl	8013338 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8012e64:	2100      	movs	r1, #0
 8012e66:	4805      	ldr	r0, [pc, #20]	; (8012e7c <MX_I2C1_Init+0x74>)
 8012e68:	f007 fe3b 	bl	801aae2 <HAL_I2CEx_ConfigDigitalFilter>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d001      	beq.n	8012e76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8012e72:	f000 fa61 	bl	8013338 <Error_Handler>
  }

}
 8012e76:	bf00      	nop
 8012e78:	bd80      	pop	{r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	2400c36c 	.word	0x2400c36c
 8012e80:	40005400 	.word	0x40005400
 8012e84:	00b03fdb 	.word	0x00b03fdb

08012e88 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8012e8c:	4b1b      	ldr	r3, [pc, #108]	; (8012efc <MX_I2C2_Init+0x74>)
 8012e8e:	4a1c      	ldr	r2, [pc, #112]	; (8012f00 <MX_I2C2_Init+0x78>)
 8012e90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8012e92:	4b1a      	ldr	r3, [pc, #104]	; (8012efc <MX_I2C2_Init+0x74>)
 8012e94:	4a1b      	ldr	r2, [pc, #108]	; (8012f04 <MX_I2C2_Init+0x7c>)
 8012e96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8012e98:	4b18      	ldr	r3, [pc, #96]	; (8012efc <MX_I2C2_Init+0x74>)
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012e9e:	4b17      	ldr	r3, [pc, #92]	; (8012efc <MX_I2C2_Init+0x74>)
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012ea4:	4b15      	ldr	r3, [pc, #84]	; (8012efc <MX_I2C2_Init+0x74>)
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8012eaa:	4b14      	ldr	r3, [pc, #80]	; (8012efc <MX_I2C2_Init+0x74>)
 8012eac:	2200      	movs	r2, #0
 8012eae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012eb0:	4b12      	ldr	r3, [pc, #72]	; (8012efc <MX_I2C2_Init+0x74>)
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012eb6:	4b11      	ldr	r3, [pc, #68]	; (8012efc <MX_I2C2_Init+0x74>)
 8012eb8:	2200      	movs	r2, #0
 8012eba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012ebc:	4b0f      	ldr	r3, [pc, #60]	; (8012efc <MX_I2C2_Init+0x74>)
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8012ec2:	480e      	ldr	r0, [pc, #56]	; (8012efc <MX_I2C2_Init+0x74>)
 8012ec4:	f005 f9f0 	bl	80182a8 <HAL_I2C_Init>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d001      	beq.n	8012ed2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8012ece:	f000 fa33 	bl	8013338 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	4809      	ldr	r0, [pc, #36]	; (8012efc <MX_I2C2_Init+0x74>)
 8012ed6:	f007 fdb9 	bl	801aa4c <HAL_I2CEx_ConfigAnalogFilter>
 8012eda:	4603      	mov	r3, r0
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d001      	beq.n	8012ee4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8012ee0:	f000 fa2a 	bl	8013338 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	4805      	ldr	r0, [pc, #20]	; (8012efc <MX_I2C2_Init+0x74>)
 8012ee8:	f007 fdfb 	bl	801aae2 <HAL_I2CEx_ConfigDigitalFilter>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d001      	beq.n	8012ef6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8012ef2:	f000 fa21 	bl	8013338 <Error_Handler>
  }

}
 8012ef6:	bf00      	nop
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	2400c3b8 	.word	0x2400c3b8
 8012f00:	40005800 	.word	0x40005800
 8012f04:	00b03fdb 	.word	0x00b03fdb

08012f08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b08c      	sub	sp, #48	; 0x30
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f10:	f107 031c 	add.w	r3, r7, #28
 8012f14:	2200      	movs	r2, #0
 8012f16:	601a      	str	r2, [r3, #0]
 8012f18:	605a      	str	r2, [r3, #4]
 8012f1a:	609a      	str	r2, [r3, #8]
 8012f1c:	60da      	str	r2, [r3, #12]
 8012f1e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4a5b      	ldr	r2, [pc, #364]	; (8013094 <HAL_I2C_MspInit+0x18c>)
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d16c      	bne.n	8013004 <HAL_I2C_MspInit+0xfc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012f2a:	4b5b      	ldr	r3, [pc, #364]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8012f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012f30:	4a59      	ldr	r2, [pc, #356]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8012f32:	f043 0302 	orr.w	r3, r3, #2
 8012f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012f3a:	4b57      	ldr	r3, [pc, #348]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8012f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012f40:	f003 0302 	and.w	r3, r3, #2
 8012f44:	61bb      	str	r3, [r7, #24]
 8012f46:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU9250_SCL_Pin|MPU9250_SDA_Pin;
 8012f48:	f44f 7310 	mov.w	r3, #576	; 0x240
 8012f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012f4e:	2312      	movs	r3, #18
 8012f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f56:	2300      	movs	r3, #0
 8012f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012f5a:	2304      	movs	r3, #4
 8012f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012f5e:	f107 031c 	add.w	r3, r7, #28
 8012f62:	4619      	mov	r1, r3
 8012f64:	484d      	ldr	r0, [pc, #308]	; (801309c <HAL_I2C_MspInit+0x194>)
 8012f66:	f004 ffbd 	bl	8017ee4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012f6a:	4b4b      	ldr	r3, [pc, #300]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8012f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012f70:	4a49      	ldr	r2, [pc, #292]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8012f72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012f76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012f7a:	4b47      	ldr	r3, [pc, #284]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8012f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012f84:	617b      	str	r3, [r7, #20]
 8012f86:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8012f88:	4b45      	ldr	r3, [pc, #276]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012f8a:	4a46      	ldr	r2, [pc, #280]	; (80130a4 <HAL_I2C_MspInit+0x19c>)
 8012f8c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8012f8e:	4b44      	ldr	r3, [pc, #272]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012f90:	2221      	movs	r2, #33	; 0x21
 8012f92:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012f94:	4b42      	ldr	r3, [pc, #264]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012f96:	2200      	movs	r2, #0
 8012f98:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012f9a:	4b41      	ldr	r3, [pc, #260]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012fa0:	4b3f      	ldr	r3, [pc, #252]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012fa6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012fa8:	4b3d      	ldr	r3, [pc, #244]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012faa:	2200      	movs	r2, #0
 8012fac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012fae:	4b3c      	ldr	r3, [pc, #240]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8012fb4:	4b3a      	ldr	r3, [pc, #232]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012fba:	4b39      	ldr	r3, [pc, #228]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012fc0:	4b37      	ldr	r3, [pc, #220]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8012fc6:	4836      	ldr	r0, [pc, #216]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012fc8:	f002 fc56 	bl	8015878 <HAL_DMA_Init>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d001      	beq.n	8012fd6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8012fd2:	f000 f9b1 	bl	8013338 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	4a31      	ldr	r2, [pc, #196]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8012fdc:	4a30      	ldr	r2, [pc, #192]	; (80130a0 <HAL_I2C_MspInit+0x198>)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	2105      	movs	r1, #5
 8012fe6:	201f      	movs	r0, #31
 8012fe8:	f002 fc1e 	bl	8015828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8012fec:	201f      	movs	r0, #31
 8012fee:	f002 fc35 	bl	801585c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	2105      	movs	r1, #5
 8012ff6:	2020      	movs	r0, #32
 8012ff8:	f002 fc16 	bl	8015828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8012ffc:	2020      	movs	r0, #32
 8012ffe:	f002 fc2d 	bl	801585c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8013002:	e042      	b.n	801308a <HAL_I2C_MspInit+0x182>
  else if(i2cHandle->Instance==I2C2)
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	4a27      	ldr	r2, [pc, #156]	; (80130a8 <HAL_I2C_MspInit+0x1a0>)
 801300a:	4293      	cmp	r3, r2
 801300c:	d13d      	bne.n	801308a <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801300e:	4b22      	ldr	r3, [pc, #136]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8013010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013014:	4a20      	ldr	r2, [pc, #128]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8013016:	f043 0320 	orr.w	r3, r3, #32
 801301a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801301e:	4b1e      	ldr	r3, [pc, #120]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8013020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013024:	f003 0320 	and.w	r3, r3, #32
 8013028:	613b      	str	r3, [r7, #16]
 801302a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801302c:	2303      	movs	r3, #3
 801302e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013030:	2312      	movs	r3, #18
 8013032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013034:	2300      	movs	r3, #0
 8013036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013038:	2300      	movs	r3, #0
 801303a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801303c:	2304      	movs	r3, #4
 801303e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013040:	f107 031c 	add.w	r3, r7, #28
 8013044:	4619      	mov	r1, r3
 8013046:	4819      	ldr	r0, [pc, #100]	; (80130ac <HAL_I2C_MspInit+0x1a4>)
 8013048:	f004 ff4c 	bl	8017ee4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801304c:	4b12      	ldr	r3, [pc, #72]	; (8013098 <HAL_I2C_MspInit+0x190>)
 801304e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013052:	4a11      	ldr	r2, [pc, #68]	; (8013098 <HAL_I2C_MspInit+0x190>)
 8013054:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013058:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801305c:	4b0e      	ldr	r3, [pc, #56]	; (8013098 <HAL_I2C_MspInit+0x190>)
 801305e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013066:	60fb      	str	r3, [r7, #12]
 8013068:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 801306a:	2200      	movs	r2, #0
 801306c:	2106      	movs	r1, #6
 801306e:	2021      	movs	r0, #33	; 0x21
 8013070:	f002 fbda 	bl	8015828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8013074:	2021      	movs	r0, #33	; 0x21
 8013076:	f002 fbf1 	bl	801585c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 801307a:	2200      	movs	r2, #0
 801307c:	2106      	movs	r1, #6
 801307e:	2022      	movs	r0, #34	; 0x22
 8013080:	f002 fbd2 	bl	8015828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8013084:	2022      	movs	r0, #34	; 0x22
 8013086:	f002 fbe9 	bl	801585c <HAL_NVIC_EnableIRQ>
}
 801308a:	bf00      	nop
 801308c:	3730      	adds	r7, #48	; 0x30
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	40005400 	.word	0x40005400
 8013098:	58024400 	.word	0x58024400
 801309c:	58020400 	.word	0x58020400
 80130a0:	2400c404 	.word	0x2400c404
 80130a4:	40020040 	.word	0x40020040
 80130a8:	40005800 	.word	0x40005800
 80130ac:	58021400 	.word	0x58021400

080130b0 <msOverFlow>:

static __inline void msOverFlow(){
 80130b0:	b480      	push	{r7}
 80130b2:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 80130b4:	4b04      	ldr	r3, [pc, #16]	; (80130c8 <msOverFlow+0x18>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	3301      	adds	r3, #1
 80130ba:	4a03      	ldr	r2, [pc, #12]	; (80130c8 <msOverFlow+0x18>)
 80130bc:	6013      	str	r3, [r2, #0]
}
 80130be:	bf00      	nop
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr
 80130c8:	240013ec 	.word	0x240013ec

080130cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80130d0:	f001 fb1a 	bl	8014708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80130d4:	f000 f82a 	bl	801312c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80130d8:	f7ff fd60 	bl	8012b9c <MX_GPIO_Init>
  MX_DMA_Init();
 80130dc:	f7ff fc6c 	bl	80129b8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80130e0:	f001 f88e 	bl	8014200 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80130e4:	f001 fa5c 	bl	80145a0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80130e8:	f7ff fe8e 	bl	8012e08 <MX_I2C1_Init>
  MX_I2C2_Init();
 80130ec:	f7ff fecc 	bl	8012e88 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80130f0:	f000 f92a 	bl	8013348 <MX_SDMMC1_SD_Init>
  MX_TIM3_Init();
 80130f4:	f000 fd3e 	bl	8013b74 <MX_TIM3_Init>
  MX_TIM4_Init();
 80130f8:	f000 fdca 	bl	8013c90 <MX_TIM4_Init>
  MX_UART7_Init();
 80130fc:	f000 ff96 	bl	801402c <MX_UART7_Init>
  MX_USART2_UART_Init();
 8013100:	f001 f830 	bl	8014164 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8013104:	f010 f9c6 	bl	8023494 <MX_FATFS_Init>
  MX_ADC3_Init();
 8013108:	f7ff fbb4 	bl	8012874 <MX_ADC3_Init>
  MX_TIM2_Init();
 801310c:	f000 fce4 	bl	8013ad8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8013110:	f000 fc10 	bl	8013934 <MX_TIM1_Init>
  MX_UART8_Init();
 8013114:	f000 ffda 	bl	80140cc <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  cppMain();
 8013118:	f7ff f958 	bl	80123cc <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 801311c:	f012 fed2 	bl	8025ec4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8013120:	f7ff fc7a 	bl	8012a18 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8013124:	f012 ff24 	bl	8025f70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8013128:	e7fe      	b.n	8013128 <main+0x5c>
	...

0801312c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b0cc      	sub	sp, #304	; 0x130
 8013130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013132:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013136:	224c      	movs	r2, #76	; 0x4c
 8013138:	2100      	movs	r1, #0
 801313a:	4618      	mov	r0, r3
 801313c:	f01a f887 	bl	802d24e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013140:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013144:	2220      	movs	r2, #32
 8013146:	2100      	movs	r1, #0
 8013148:	4618      	mov	r0, r3
 801314a:	f01a f880 	bl	802d24e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801314e:	f107 0308 	add.w	r3, r7, #8
 8013152:	4618      	mov	r0, r3
 8013154:	23bc      	movs	r3, #188	; 0xbc
 8013156:	461a      	mov	r2, r3
 8013158:	2100      	movs	r1, #0
 801315a:	f01a f878 	bl	802d24e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 801315e:	2002      	movs	r0, #2
 8013160:	f007 fe54 	bl	801ae0c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8013164:	1d3b      	adds	r3, r7, #4
 8013166:	2200      	movs	r2, #0
 8013168:	601a      	str	r2, [r3, #0]
 801316a:	4b65      	ldr	r3, [pc, #404]	; (8013300 <SystemClock_Config+0x1d4>)
 801316c:	699b      	ldr	r3, [r3, #24]
 801316e:	4a64      	ldr	r2, [pc, #400]	; (8013300 <SystemClock_Config+0x1d4>)
 8013170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013174:	6193      	str	r3, [r2, #24]
 8013176:	4b62      	ldr	r3, [pc, #392]	; (8013300 <SystemClock_Config+0x1d4>)
 8013178:	699b      	ldr	r3, [r3, #24]
 801317a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801317e:	1d3b      	adds	r3, r7, #4
 8013180:	601a      	str	r2, [r3, #0]
 8013182:	4b60      	ldr	r3, [pc, #384]	; (8013304 <SystemClock_Config+0x1d8>)
 8013184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013186:	4a5f      	ldr	r2, [pc, #380]	; (8013304 <SystemClock_Config+0x1d8>)
 8013188:	f043 0301 	orr.w	r3, r3, #1
 801318c:	62d3      	str	r3, [r2, #44]	; 0x2c
 801318e:	4b5d      	ldr	r3, [pc, #372]	; (8013304 <SystemClock_Config+0x1d8>)
 8013190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013192:	f003 0201 	and.w	r2, r3, #1
 8013196:	1d3b      	adds	r3, r7, #4
 8013198:	601a      	str	r2, [r3, #0]
 801319a:	1d3b      	adds	r3, r7, #4
 801319c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 801319e:	bf00      	nop
 80131a0:	4b57      	ldr	r3, [pc, #348]	; (8013300 <SystemClock_Config+0x1d4>)
 80131a2:	699b      	ldr	r3, [r3, #24]
 80131a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80131a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80131ac:	d1f8      	bne.n	80131a0 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80131ae:	4b56      	ldr	r3, [pc, #344]	; (8013308 <SystemClock_Config+0x1dc>)
 80131b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131b2:	f023 0303 	bic.w	r3, r3, #3
 80131b6:	4a54      	ldr	r2, [pc, #336]	; (8013308 <SystemClock_Config+0x1dc>)
 80131b8:	f043 0302 	orr.w	r3, r3, #2
 80131bc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80131be:	2301      	movs	r3, #1
 80131c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80131c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80131c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80131cc:	2302      	movs	r3, #2
 80131ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80131d2:	2302      	movs	r3, #2
 80131d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80131d8:	2301      	movs	r3, #1
 80131da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 80131de:	2378      	movs	r3, #120	; 0x78
 80131e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80131e4:	2302      	movs	r3, #2
 80131e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80131ea:	2314      	movs	r3, #20
 80131ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80131f0:	2302      	movs	r3, #2
 80131f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80131f6:	230c      	movs	r3, #12
 80131f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80131fc:	2300      	movs	r3, #0
 80131fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8013202:	2300      	movs	r3, #0
 8013204:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013208:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801320c:	4618      	mov	r0, r3
 801320e:	f007 fe47 	bl	801aea0 <HAL_RCC_OscConfig>
 8013212:	4603      	mov	r3, r0
 8013214:	2b00      	cmp	r3, #0
 8013216:	d001      	beq.n	801321c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8013218:	f000 f88e 	bl	8013338 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801321c:	233f      	movs	r3, #63	; 0x3f
 801321e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013222:	2303      	movs	r3, #3
 8013224:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8013228:	2300      	movs	r3, #0
 801322a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801322e:	2308      	movs	r3, #8
 8013230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8013234:	2340      	movs	r3, #64	; 0x40
 8013236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 801323a:	2340      	movs	r3, #64	; 0x40
 801323c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8013240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013244:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8013248:	2340      	movs	r3, #64	; 0x40
 801324a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801324e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013252:	2104      	movs	r1, #4
 8013254:	4618      	mov	r0, r3
 8013256:	f008 fa33 	bl	801b6c0 <HAL_RCC_ClockConfig>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	d001      	beq.n	8013264 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8013260:	f000 f86a 	bl	8013338 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8013264:	f107 0308 	add.w	r3, r7, #8
 8013268:	4a28      	ldr	r2, [pc, #160]	; (801330c <SystemClock_Config+0x1e0>)
 801326a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 801326c:	f107 0308 	add.w	r3, r7, #8
 8013270:	2201      	movs	r2, #1
 8013272:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8013274:	f107 0308 	add.w	r3, r7, #8
 8013278:	2213      	movs	r2, #19
 801327a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 801327c:	f107 0308 	add.w	r3, r7, #8
 8013280:	2202      	movs	r2, #2
 8013282:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8013284:	f107 0308 	add.w	r3, r7, #8
 8013288:	2202      	movs	r2, #2
 801328a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 801328c:	f107 0308 	add.w	r3, r7, #8
 8013290:	2202      	movs	r2, #2
 8013292:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8013294:	f107 0308 	add.w	r3, r7, #8
 8013298:	22c0      	movs	r2, #192	; 0xc0
 801329a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 801329c:	f107 0308 	add.w	r3, r7, #8
 80132a0:	2220      	movs	r2, #32
 80132a2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80132a4:	f107 0308 	add.w	r3, r7, #8
 80132a8:	2200      	movs	r2, #0
 80132aa:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80132ac:	f107 0308 	add.w	r3, r7, #8
 80132b0:	2200      	movs	r2, #0
 80132b2:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80132b4:	f107 0308 	add.w	r3, r7, #8
 80132b8:	2200      	movs	r2, #0
 80132ba:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80132bc:	f107 0308 	add.w	r3, r7, #8
 80132c0:	2200      	movs	r2, #0
 80132c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80132c6:	f107 0308 	add.w	r3, r7, #8
 80132ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80132ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80132d2:	f107 0308 	add.w	r3, r7, #8
 80132d6:	2200      	movs	r2, #0
 80132d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80132dc:	f107 0308 	add.w	r3, r7, #8
 80132e0:	4618      	mov	r0, r3
 80132e2:	f008 fdb3 	bl	801be4c <HAL_RCCEx_PeriphCLKConfig>
 80132e6:	4603      	mov	r3, r0
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d001      	beq.n	80132f0 <SystemClock_Config+0x1c4>
  {
    Error_Handler();
 80132ec:	f000 f824 	bl	8013338 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80132f0:	f007 fdc6 	bl	801ae80 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80132f4:	bf00      	nop
 80132f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	bf00      	nop
 8013300:	58024800 	.word	0x58024800
 8013304:	58000400 	.word	0x58000400
 8013308:	58024400 	.word	0x58024400
 801330c:	000d000a 	.word	0x000d000a

08013310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	msOverFlow();
 8013318:	f7ff feca 	bl	80130b0 <msOverFlow>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	4a04      	ldr	r2, [pc, #16]	; (8013334 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d101      	bne.n	801332a <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8013326:	f001 fa2b 	bl	8014780 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801332a:	bf00      	nop
 801332c:	3708      	adds	r7, #8
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	40001000 	.word	0x40001000

08013338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013338:	b480      	push	{r7}
 801333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 801333c:	bf00      	nop
 801333e:	46bd      	mov	sp, r7
 8013340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013344:	4770      	bx	lr
	...

08013348 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8013348:	b480      	push	{r7}
 801334a:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 801334c:	4b0d      	ldr	r3, [pc, #52]	; (8013384 <MX_SDMMC1_SD_Init+0x3c>)
 801334e:	4a0e      	ldr	r2, [pc, #56]	; (8013388 <MX_SDMMC1_SD_Init+0x40>)
 8013350:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8013352:	4b0c      	ldr	r3, [pc, #48]	; (8013384 <MX_SDMMC1_SD_Init+0x3c>)
 8013354:	2200      	movs	r2, #0
 8013356:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8013358:	4b0a      	ldr	r3, [pc, #40]	; (8013384 <MX_SDMMC1_SD_Init+0x3c>)
 801335a:	2200      	movs	r2, #0
 801335c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801335e:	4b09      	ldr	r3, [pc, #36]	; (8013384 <MX_SDMMC1_SD_Init+0x3c>)
 8013360:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013364:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8013366:	4b07      	ldr	r3, [pc, #28]	; (8013384 <MX_SDMMC1_SD_Init+0x3c>)
 8013368:	2200      	movs	r2, #0
 801336a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 801336c:	4b05      	ldr	r3, [pc, #20]	; (8013384 <MX_SDMMC1_SD_Init+0x3c>)
 801336e:	2200      	movs	r2, #0
 8013370:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8013372:	4b04      	ldr	r3, [pc, #16]	; (8013384 <MX_SDMMC1_SD_Init+0x3c>)
 8013374:	2201      	movs	r2, #1
 8013376:	619a      	str	r2, [r3, #24]

}
 8013378:	bf00      	nop
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	2400c47c 	.word	0x2400c47c
 8013388:	52007000 	.word	0x52007000

0801338c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b08a      	sub	sp, #40	; 0x28
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013394:	f107 0314 	add.w	r3, r7, #20
 8013398:	2200      	movs	r2, #0
 801339a:	601a      	str	r2, [r3, #0]
 801339c:	605a      	str	r2, [r3, #4]
 801339e:	609a      	str	r2, [r3, #8]
 80133a0:	60da      	str	r2, [r3, #12]
 80133a2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4a36      	ldr	r2, [pc, #216]	; (8013484 <HAL_SD_MspInit+0xf8>)
 80133aa:	4293      	cmp	r3, r2
 80133ac:	d166      	bne.n	801347c <HAL_SD_MspInit+0xf0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80133ae:	4b36      	ldr	r3, [pc, #216]	; (8013488 <HAL_SD_MspInit+0xfc>)
 80133b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80133b4:	4a34      	ldr	r2, [pc, #208]	; (8013488 <HAL_SD_MspInit+0xfc>)
 80133b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80133ba:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80133be:	4b32      	ldr	r3, [pc, #200]	; (8013488 <HAL_SD_MspInit+0xfc>)
 80133c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80133c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80133c8:	613b      	str	r3, [r7, #16]
 80133ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80133cc:	4b2e      	ldr	r3, [pc, #184]	; (8013488 <HAL_SD_MspInit+0xfc>)
 80133ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80133d2:	4a2d      	ldr	r2, [pc, #180]	; (8013488 <HAL_SD_MspInit+0xfc>)
 80133d4:	f043 0304 	orr.w	r3, r3, #4
 80133d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80133dc:	4b2a      	ldr	r3, [pc, #168]	; (8013488 <HAL_SD_MspInit+0xfc>)
 80133de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80133e2:	f003 0304 	and.w	r3, r3, #4
 80133e6:	60fb      	str	r3, [r7, #12]
 80133e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80133ea:	4b27      	ldr	r3, [pc, #156]	; (8013488 <HAL_SD_MspInit+0xfc>)
 80133ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80133f0:	4a25      	ldr	r2, [pc, #148]	; (8013488 <HAL_SD_MspInit+0xfc>)
 80133f2:	f043 0308 	orr.w	r3, r3, #8
 80133f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80133fa:	4b23      	ldr	r3, [pc, #140]	; (8013488 <HAL_SD_MspInit+0xfc>)
 80133fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013400:	f003 0308 	and.w	r3, r3, #8
 8013404:	60bb      	str	r3, [r7, #8]
 8013406:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8013408:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 801340c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801340e:	2302      	movs	r3, #2
 8013410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013412:	2301      	movs	r3, #1
 8013414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013416:	2303      	movs	r3, #3
 8013418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801341a:	230c      	movs	r3, #12
 801341c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801341e:	f107 0314 	add.w	r3, r7, #20
 8013422:	4619      	mov	r1, r3
 8013424:	4819      	ldr	r0, [pc, #100]	; (801348c <HAL_SD_MspInit+0x100>)
 8013426:	f004 fd5d 	bl	8017ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801342a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801342e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013430:	2302      	movs	r3, #2
 8013432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013434:	2300      	movs	r3, #0
 8013436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013438:	2303      	movs	r3, #3
 801343a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801343c:	230c      	movs	r3, #12
 801343e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013440:	f107 0314 	add.w	r3, r7, #20
 8013444:	4619      	mov	r1, r3
 8013446:	4811      	ldr	r0, [pc, #68]	; (801348c <HAL_SD_MspInit+0x100>)
 8013448:	f004 fd4c 	bl	8017ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801344c:	2304      	movs	r3, #4
 801344e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013450:	2302      	movs	r3, #2
 8013452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013454:	2301      	movs	r3, #1
 8013456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013458:	2303      	movs	r3, #3
 801345a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801345c:	230c      	movs	r3, #12
 801345e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013460:	f107 0314 	add.w	r3, r7, #20
 8013464:	4619      	mov	r1, r3
 8013466:	480a      	ldr	r0, [pc, #40]	; (8013490 <HAL_SD_MspInit+0x104>)
 8013468:	f004 fd3c 	bl	8017ee4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 801346c:	2200      	movs	r2, #0
 801346e:	2100      	movs	r1, #0
 8013470:	2031      	movs	r0, #49	; 0x31
 8013472:	f002 f9d9 	bl	8015828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8013476:	2031      	movs	r0, #49	; 0x31
 8013478:	f002 f9f0 	bl	801585c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 801347c:	bf00      	nop
 801347e:	3728      	adds	r7, #40	; 0x28
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}
 8013484:	52007000 	.word	0x52007000
 8013488:	58024400 	.word	0x58024400
 801348c:	58020800 	.word	0x58020800
 8013490:	58020c00 	.word	0x58020c00

08013494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013494:	b480      	push	{r7}
 8013496:	b083      	sub	sp, #12
 8013498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801349a:	4b0a      	ldr	r3, [pc, #40]	; (80134c4 <HAL_MspInit+0x30>)
 801349c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80134a0:	4a08      	ldr	r2, [pc, #32]	; (80134c4 <HAL_MspInit+0x30>)
 80134a2:	f043 0302 	orr.w	r3, r3, #2
 80134a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80134aa:	4b06      	ldr	r3, [pc, #24]	; (80134c4 <HAL_MspInit+0x30>)
 80134ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80134b0:	f003 0302 	and.w	r3, r3, #2
 80134b4:	607b      	str	r3, [r7, #4]
 80134b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80134b8:	bf00      	nop
 80134ba:	370c      	adds	r7, #12
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr
 80134c4:	58024400 	.word	0x58024400

080134c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b08e      	sub	sp, #56	; 0x38
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80134d0:	2300      	movs	r3, #0
 80134d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 80134d4:	2300      	movs	r3, #0
 80134d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80134d8:	2200      	movs	r2, #0
 80134da:	6879      	ldr	r1, [r7, #4]
 80134dc:	2036      	movs	r0, #54	; 0x36
 80134de:	f002 f9a3 	bl	8015828 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80134e2:	2036      	movs	r0, #54	; 0x36
 80134e4:	f002 f9ba 	bl	801585c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80134e8:	4b21      	ldr	r3, [pc, #132]	; (8013570 <HAL_InitTick+0xa8>)
 80134ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80134ee:	4a20      	ldr	r2, [pc, #128]	; (8013570 <HAL_InitTick+0xa8>)
 80134f0:	f043 0310 	orr.w	r3, r3, #16
 80134f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80134f8:	4b1d      	ldr	r3, [pc, #116]	; (8013570 <HAL_InitTick+0xa8>)
 80134fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80134fe:	f003 0310 	and.w	r3, r3, #16
 8013502:	60bb      	str	r3, [r7, #8]
 8013504:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013506:	f107 020c 	add.w	r2, r7, #12
 801350a:	f107 0310 	add.w	r3, r7, #16
 801350e:	4611      	mov	r1, r2
 8013510:	4618      	mov	r0, r3
 8013512:	f008 fc59 	bl	801bdc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8013516:	f008 fc2b 	bl	801bd70 <HAL_RCC_GetPCLK1Freq>
 801351a:	4603      	mov	r3, r0
 801351c:	005b      	lsls	r3, r3, #1
 801351e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8013520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013522:	4a14      	ldr	r2, [pc, #80]	; (8013574 <HAL_InitTick+0xac>)
 8013524:	fba2 2303 	umull	r2, r3, r2, r3
 8013528:	0c9b      	lsrs	r3, r3, #18
 801352a:	3b01      	subs	r3, #1
 801352c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801352e:	4b12      	ldr	r3, [pc, #72]	; (8013578 <HAL_InitTick+0xb0>)
 8013530:	4a12      	ldr	r2, [pc, #72]	; (801357c <HAL_InitTick+0xb4>)
 8013532:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8013534:	4b10      	ldr	r3, [pc, #64]	; (8013578 <HAL_InitTick+0xb0>)
 8013536:	f240 32e7 	movw	r2, #999	; 0x3e7
 801353a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801353c:	4a0e      	ldr	r2, [pc, #56]	; (8013578 <HAL_InitTick+0xb0>)
 801353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013540:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8013542:	4b0d      	ldr	r3, [pc, #52]	; (8013578 <HAL_InitTick+0xb0>)
 8013544:	2200      	movs	r2, #0
 8013546:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013548:	4b0b      	ldr	r3, [pc, #44]	; (8013578 <HAL_InitTick+0xb0>)
 801354a:	2200      	movs	r2, #0
 801354c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801354e:	480a      	ldr	r0, [pc, #40]	; (8013578 <HAL_InitTick+0xb0>)
 8013550:	f00b ffac 	bl	801f4ac <HAL_TIM_Base_Init>
 8013554:	4603      	mov	r3, r0
 8013556:	2b00      	cmp	r3, #0
 8013558:	d104      	bne.n	8013564 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 801355a:	4807      	ldr	r0, [pc, #28]	; (8013578 <HAL_InitTick+0xb0>)
 801355c:	f00b fffe 	bl	801f55c <HAL_TIM_Base_Start_IT>
 8013560:	4603      	mov	r3, r0
 8013562:	e000      	b.n	8013566 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8013564:	2301      	movs	r3, #1
}
 8013566:	4618      	mov	r0, r3
 8013568:	3738      	adds	r7, #56	; 0x38
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	58024400 	.word	0x58024400
 8013574:	431bde83 	.word	0x431bde83
 8013578:	2400c4fc 	.word	0x2400c4fc
 801357c:	40001000 	.word	0x40001000

08013580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013580:	b480      	push	{r7}
 8013582:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8013584:	bf00      	nop
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr

0801358e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801358e:	b480      	push	{r7}
 8013590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013592:	e7fe      	b.n	8013592 <HardFault_Handler+0x4>

08013594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013594:	b480      	push	{r7}
 8013596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013598:	e7fe      	b.n	8013598 <MemManage_Handler+0x4>

0801359a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801359a:	b480      	push	{r7}
 801359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801359e:	e7fe      	b.n	801359e <BusFault_Handler+0x4>

080135a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80135a0:	b480      	push	{r7}
 80135a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80135a4:	e7fe      	b.n	80135a4 <UsageFault_Handler+0x4>

080135a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80135a6:	b480      	push	{r7}
 80135a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80135aa:	bf00      	nop
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr

080135b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80135b8:	4802      	ldr	r0, [pc, #8]	; (80135c4 <DMA1_Stream0_IRQHandler+0x10>)
 80135ba:	f003 f967 	bl	801688c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80135be:	bf00      	nop
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	bf00      	nop
 80135c4:	2400c808 	.word	0x2400c808

080135c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80135cc:	4802      	ldr	r0, [pc, #8]	; (80135d8 <DMA1_Stream1_IRQHandler+0x10>)
 80135ce:	f003 f95d 	bl	801688c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80135d2:	bf00      	nop
 80135d4:	bd80      	pop	{r7, pc}
 80135d6:	bf00      	nop
 80135d8:	2400c790 	.word	0x2400c790

080135dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80135e0:	4802      	ldr	r0, [pc, #8]	; (80135ec <DMA1_Stream2_IRQHandler+0x10>)
 80135e2:	f003 f953 	bl	801688c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80135e6:	bf00      	nop
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	2400c404 	.word	0x2400c404

080135f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80135f4:	4802      	ldr	r0, [pc, #8]	; (8013600 <I2C1_EV_IRQHandler+0x10>)
 80135f6:	f005 faa3 	bl	8018b40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80135fa:	bf00      	nop
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	2400c36c 	.word	0x2400c36c

08013604 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8013608:	4802      	ldr	r0, [pc, #8]	; (8013614 <I2C1_ER_IRQHandler+0x10>)
 801360a:	f005 fab3 	bl	8018b74 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 801360e:	bf00      	nop
 8013610:	bd80      	pop	{r7, pc}
 8013612:	bf00      	nop
 8013614:	2400c36c 	.word	0x2400c36c

08013618 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 801361c:	4802      	ldr	r0, [pc, #8]	; (8013628 <I2C2_EV_IRQHandler+0x10>)
 801361e:	f005 fa8f 	bl	8018b40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8013622:	bf00      	nop
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	2400c3b8 	.word	0x2400c3b8

0801362c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8013630:	4802      	ldr	r0, [pc, #8]	; (801363c <I2C2_ER_IRQHandler+0x10>)
 8013632:	f005 fa9f 	bl	8018b74 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8013636:	bf00      	nop
 8013638:	bd80      	pop	{r7, pc}
 801363a:	bf00      	nop
 801363c:	2400c3b8 	.word	0x2400c3b8

08013640 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8013644:	4802      	ldr	r0, [pc, #8]	; (8013650 <SDMMC1_IRQHandler+0x10>)
 8013646:	f00a fd39 	bl	801e0bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 801364a:	bf00      	nop
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	2400c47c 	.word	0x2400c47c

08013654 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8013658:	4802      	ldr	r0, [pc, #8]	; (8013664 <TIM6_DAC_IRQHandler+0x10>)
 801365a:	f00c f97f 	bl	801f95c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801365e:	bf00      	nop
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	2400c4fc 	.word	0x2400c4fc

08013668 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 801366c:	4802      	ldr	r0, [pc, #8]	; (8013678 <UART7_IRQHandler+0x10>)
 801366e:	f00d fb95 	bl	8020d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8013672:	bf00      	nop
 8013674:	bd80      	pop	{r7, pc}
 8013676:	bf00      	nop
 8013678:	2400c678 	.word	0x2400c678

0801367c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8013680:	4802      	ldr	r0, [pc, #8]	; (801368c <UART8_IRQHandler+0x10>)
 8013682:	f00d fb8b 	bl	8020d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8013686:	bf00      	nop
 8013688:	bd80      	pop	{r7, pc}
 801368a:	bf00      	nop
 801368c:	2400c880 	.word	0x2400c880

08013690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013690:	b480      	push	{r7}
 8013692:	af00      	add	r7, sp, #0
	return 1;
 8013694:	2301      	movs	r3, #1
}
 8013696:	4618      	mov	r0, r3
 8013698:	46bd      	mov	sp, r7
 801369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369e:	4770      	bx	lr

080136a0 <_kill>:

int _kill(int pid, int sig)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80136aa:	f019 fd89 	bl	802d1c0 <__errno>
 80136ae:	4602      	mov	r2, r0
 80136b0:	2316      	movs	r3, #22
 80136b2:	6013      	str	r3, [r2, #0]
	return -1;
 80136b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3708      	adds	r7, #8
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <_exit>:

void _exit (int status)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80136c8:	f04f 31ff 	mov.w	r1, #4294967295
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f7ff ffe7 	bl	80136a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80136d2:	e7fe      	b.n	80136d2 <_exit+0x12>

080136d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b086      	sub	sp, #24
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80136e0:	2300      	movs	r3, #0
 80136e2:	617b      	str	r3, [r7, #20]
 80136e4:	e00a      	b.n	80136fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80136e6:	f3af 8000 	nop.w
 80136ea:	4601      	mov	r1, r0
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	1c5a      	adds	r2, r3, #1
 80136f0:	60ba      	str	r2, [r7, #8]
 80136f2:	b2ca      	uxtb	r2, r1
 80136f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	3301      	adds	r3, #1
 80136fa:	617b      	str	r3, [r7, #20]
 80136fc:	697a      	ldr	r2, [r7, #20]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	429a      	cmp	r2, r3
 8013702:	dbf0      	blt.n	80136e6 <_read+0x12>
	}

return len;
 8013704:	687b      	ldr	r3, [r7, #4]
}
 8013706:	4618      	mov	r0, r3
 8013708:	3718      	adds	r7, #24
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801370e:	b580      	push	{r7, lr}
 8013710:	b086      	sub	sp, #24
 8013712:	af00      	add	r7, sp, #0
 8013714:	60f8      	str	r0, [r7, #12]
 8013716:	60b9      	str	r1, [r7, #8]
 8013718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801371a:	2300      	movs	r3, #0
 801371c:	617b      	str	r3, [r7, #20]
 801371e:	e009      	b.n	8013734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	1c5a      	adds	r2, r3, #1
 8013724:	60ba      	str	r2, [r7, #8]
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	4618      	mov	r0, r3
 801372a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	3301      	adds	r3, #1
 8013732:	617b      	str	r3, [r7, #20]
 8013734:	697a      	ldr	r2, [r7, #20]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	429a      	cmp	r2, r3
 801373a:	dbf1      	blt.n	8013720 <_write+0x12>
	}
	return len;
 801373c:	687b      	ldr	r3, [r7, #4]
}
 801373e:	4618      	mov	r0, r3
 8013740:	3718      	adds	r7, #24
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}

08013746 <_close>:

int _close(int file)
{
 8013746:	b480      	push	{r7}
 8013748:	b083      	sub	sp, #12
 801374a:	af00      	add	r7, sp, #0
 801374c:	6078      	str	r0, [r7, #4]
	return -1;
 801374e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013752:	4618      	mov	r0, r3
 8013754:	370c      	adds	r7, #12
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr

0801375e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801375e:	b480      	push	{r7}
 8013760:	b083      	sub	sp, #12
 8013762:	af00      	add	r7, sp, #0
 8013764:	6078      	str	r0, [r7, #4]
 8013766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801376e:	605a      	str	r2, [r3, #4]
	return 0;
 8013770:	2300      	movs	r3, #0
}
 8013772:	4618      	mov	r0, r3
 8013774:	370c      	adds	r7, #12
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr

0801377e <_isatty>:

int _isatty(int file)
{
 801377e:	b480      	push	{r7}
 8013780:	b083      	sub	sp, #12
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
	return 1;
 8013786:	2301      	movs	r3, #1
}
 8013788:	4618      	mov	r0, r3
 801378a:	370c      	adds	r7, #12
 801378c:	46bd      	mov	sp, r7
 801378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013792:	4770      	bx	lr

08013794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013794:	b480      	push	{r7}
 8013796:	b085      	sub	sp, #20
 8013798:	af00      	add	r7, sp, #0
 801379a:	60f8      	str	r0, [r7, #12]
 801379c:	60b9      	str	r1, [r7, #8]
 801379e:	607a      	str	r2, [r7, #4]
	return 0;
 80137a0:	2300      	movs	r3, #0
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3714      	adds	r7, #20
 80137a6:	46bd      	mov	sp, r7
 80137a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ac:	4770      	bx	lr
	...

080137b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b086      	sub	sp, #24
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80137b8:	4a14      	ldr	r2, [pc, #80]	; (801380c <_sbrk+0x5c>)
 80137ba:	4b15      	ldr	r3, [pc, #84]	; (8013810 <_sbrk+0x60>)
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80137c4:	4b13      	ldr	r3, [pc, #76]	; (8013814 <_sbrk+0x64>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d102      	bne.n	80137d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80137cc:	4b11      	ldr	r3, [pc, #68]	; (8013814 <_sbrk+0x64>)
 80137ce:	4a12      	ldr	r2, [pc, #72]	; (8013818 <_sbrk+0x68>)
 80137d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80137d2:	4b10      	ldr	r3, [pc, #64]	; (8013814 <_sbrk+0x64>)
 80137d4:	681a      	ldr	r2, [r3, #0]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	4413      	add	r3, r2
 80137da:	693a      	ldr	r2, [r7, #16]
 80137dc:	429a      	cmp	r2, r3
 80137de:	d207      	bcs.n	80137f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80137e0:	f019 fcee 	bl	802d1c0 <__errno>
 80137e4:	4602      	mov	r2, r0
 80137e6:	230c      	movs	r3, #12
 80137e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80137ea:	f04f 33ff 	mov.w	r3, #4294967295
 80137ee:	e009      	b.n	8013804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80137f0:	4b08      	ldr	r3, [pc, #32]	; (8013814 <_sbrk+0x64>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80137f6:	4b07      	ldr	r3, [pc, #28]	; (8013814 <_sbrk+0x64>)
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4413      	add	r3, r2
 80137fe:	4a05      	ldr	r2, [pc, #20]	; (8013814 <_sbrk+0x64>)
 8013800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8013802:	68fb      	ldr	r3, [r7, #12]
}
 8013804:	4618      	mov	r0, r3
 8013806:	3718      	adds	r7, #24
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	24080000 	.word	0x24080000
 8013810:	00000400 	.word	0x00000400
 8013814:	240013f0 	.word	0x240013f0
 8013818:	2400d258 	.word	0x2400d258

0801381c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801381c:	b480      	push	{r7}
 801381e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8013820:	4b39      	ldr	r3, [pc, #228]	; (8013908 <SystemInit+0xec>)
 8013822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013826:	4a38      	ldr	r2, [pc, #224]	; (8013908 <SystemInit+0xec>)
 8013828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801382c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8013830:	4b36      	ldr	r3, [pc, #216]	; (801390c <SystemInit+0xf0>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	f003 030f 	and.w	r3, r3, #15
 8013838:	2b06      	cmp	r3, #6
 801383a:	d807      	bhi.n	801384c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 801383c:	4b33      	ldr	r3, [pc, #204]	; (801390c <SystemInit+0xf0>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f023 030f 	bic.w	r3, r3, #15
 8013844:	4a31      	ldr	r2, [pc, #196]	; (801390c <SystemInit+0xf0>)
 8013846:	f043 0307 	orr.w	r3, r3, #7
 801384a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 801384c:	4b30      	ldr	r3, [pc, #192]	; (8013910 <SystemInit+0xf4>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	4a2f      	ldr	r2, [pc, #188]	; (8013910 <SystemInit+0xf4>)
 8013852:	f043 0301 	orr.w	r3, r3, #1
 8013856:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8013858:	4b2d      	ldr	r3, [pc, #180]	; (8013910 <SystemInit+0xf4>)
 801385a:	2200      	movs	r2, #0
 801385c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 801385e:	4b2c      	ldr	r3, [pc, #176]	; (8013910 <SystemInit+0xf4>)
 8013860:	681a      	ldr	r2, [r3, #0]
 8013862:	492b      	ldr	r1, [pc, #172]	; (8013910 <SystemInit+0xf4>)
 8013864:	4b2b      	ldr	r3, [pc, #172]	; (8013914 <SystemInit+0xf8>)
 8013866:	4013      	ands	r3, r2
 8013868:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 801386a:	4b28      	ldr	r3, [pc, #160]	; (801390c <SystemInit+0xf0>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	f003 030f 	and.w	r3, r3, #15
 8013872:	2b07      	cmp	r3, #7
 8013874:	d907      	bls.n	8013886 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8013876:	4b25      	ldr	r3, [pc, #148]	; (801390c <SystemInit+0xf0>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f023 030f 	bic.w	r3, r3, #15
 801387e:	4a23      	ldr	r2, [pc, #140]	; (801390c <SystemInit+0xf0>)
 8013880:	f043 0307 	orr.w	r3, r3, #7
 8013884:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8013886:	4b22      	ldr	r3, [pc, #136]	; (8013910 <SystemInit+0xf4>)
 8013888:	2200      	movs	r2, #0
 801388a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 801388c:	4b20      	ldr	r3, [pc, #128]	; (8013910 <SystemInit+0xf4>)
 801388e:	2200      	movs	r2, #0
 8013890:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8013892:	4b1f      	ldr	r3, [pc, #124]	; (8013910 <SystemInit+0xf4>)
 8013894:	2200      	movs	r2, #0
 8013896:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8013898:	4b1d      	ldr	r3, [pc, #116]	; (8013910 <SystemInit+0xf4>)
 801389a:	4a1f      	ldr	r2, [pc, #124]	; (8013918 <SystemInit+0xfc>)
 801389c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 801389e:	4b1c      	ldr	r3, [pc, #112]	; (8013910 <SystemInit+0xf4>)
 80138a0:	4a1e      	ldr	r2, [pc, #120]	; (801391c <SystemInit+0x100>)
 80138a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80138a4:	4b1a      	ldr	r3, [pc, #104]	; (8013910 <SystemInit+0xf4>)
 80138a6:	4a1e      	ldr	r2, [pc, #120]	; (8013920 <SystemInit+0x104>)
 80138a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80138aa:	4b19      	ldr	r3, [pc, #100]	; (8013910 <SystemInit+0xf4>)
 80138ac:	2200      	movs	r2, #0
 80138ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80138b0:	4b17      	ldr	r3, [pc, #92]	; (8013910 <SystemInit+0xf4>)
 80138b2:	4a1b      	ldr	r2, [pc, #108]	; (8013920 <SystemInit+0x104>)
 80138b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80138b6:	4b16      	ldr	r3, [pc, #88]	; (8013910 <SystemInit+0xf4>)
 80138b8:	2200      	movs	r2, #0
 80138ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80138bc:	4b14      	ldr	r3, [pc, #80]	; (8013910 <SystemInit+0xf4>)
 80138be:	4a18      	ldr	r2, [pc, #96]	; (8013920 <SystemInit+0x104>)
 80138c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80138c2:	4b13      	ldr	r3, [pc, #76]	; (8013910 <SystemInit+0xf4>)
 80138c4:	2200      	movs	r2, #0
 80138c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80138c8:	4b11      	ldr	r3, [pc, #68]	; (8013910 <SystemInit+0xf4>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	4a10      	ldr	r2, [pc, #64]	; (8013910 <SystemInit+0xf4>)
 80138ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80138d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80138d4:	4b0e      	ldr	r3, [pc, #56]	; (8013910 <SystemInit+0xf4>)
 80138d6:	2200      	movs	r2, #0
 80138d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80138da:	4b12      	ldr	r3, [pc, #72]	; (8013924 <SystemInit+0x108>)
 80138dc:	681a      	ldr	r2, [r3, #0]
 80138de:	4b12      	ldr	r3, [pc, #72]	; (8013928 <SystemInit+0x10c>)
 80138e0:	4013      	ands	r3, r2
 80138e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80138e6:	d202      	bcs.n	80138ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80138e8:	4b10      	ldr	r3, [pc, #64]	; (801392c <SystemInit+0x110>)
 80138ea:	2201      	movs	r2, #1
 80138ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80138ee:	4b10      	ldr	r3, [pc, #64]	; (8013930 <SystemInit+0x114>)
 80138f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80138f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80138f6:	4b04      	ldr	r3, [pc, #16]	; (8013908 <SystemInit+0xec>)
 80138f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80138fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80138fe:	bf00      	nop
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr
 8013908:	e000ed00 	.word	0xe000ed00
 801390c:	52002000 	.word	0x52002000
 8013910:	58024400 	.word	0x58024400
 8013914:	eaf6ed7f 	.word	0xeaf6ed7f
 8013918:	02020200 	.word	0x02020200
 801391c:	01ff0000 	.word	0x01ff0000
 8013920:	01010280 	.word	0x01010280
 8013924:	5c001000 	.word	0x5c001000
 8013928:	ffff0000 	.word	0xffff0000
 801392c:	51008108 	.word	0x51008108
 8013930:	52004000 	.word	0x52004000

08013934 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b09a      	sub	sp, #104	; 0x68
 8013938:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801393a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801393e:	2200      	movs	r2, #0
 8013940:	601a      	str	r2, [r3, #0]
 8013942:	605a      	str	r2, [r3, #4]
 8013944:	609a      	str	r2, [r3, #8]
 8013946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013948:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801394c:	2200      	movs	r2, #0
 801394e:	601a      	str	r2, [r3, #0]
 8013950:	605a      	str	r2, [r3, #4]
 8013952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013954:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013958:	2200      	movs	r2, #0
 801395a:	601a      	str	r2, [r3, #0]
 801395c:	605a      	str	r2, [r3, #4]
 801395e:	609a      	str	r2, [r3, #8]
 8013960:	60da      	str	r2, [r3, #12]
 8013962:	611a      	str	r2, [r3, #16]
 8013964:	615a      	str	r2, [r3, #20]
 8013966:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8013968:	1d3b      	adds	r3, r7, #4
 801396a:	222c      	movs	r2, #44	; 0x2c
 801396c:	2100      	movs	r1, #0
 801396e:	4618      	mov	r0, r3
 8013970:	f019 fc6d 	bl	802d24e <memset>

  htim1.Instance = TIM1;
 8013974:	4b56      	ldr	r3, [pc, #344]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013976:	4a57      	ldr	r2, [pc, #348]	; (8013ad4 <MX_TIM1_Init+0x1a0>)
 8013978:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 801397a:	4b55      	ldr	r3, [pc, #340]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 801397c:	220b      	movs	r2, #11
 801397e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013980:	4b53      	ldr	r3, [pc, #332]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013982:	2200      	movs	r2, #0
 8013984:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000-1;
 8013986:	4b52      	ldr	r3, [pc, #328]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013988:	f649 423f 	movw	r2, #39999	; 0x9c3f
 801398c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801398e:	4b50      	ldr	r3, [pc, #320]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013990:	2200      	movs	r2, #0
 8013992:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8013994:	4b4e      	ldr	r3, [pc, #312]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013996:	2200      	movs	r2, #0
 8013998:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801399a:	4b4d      	ldr	r3, [pc, #308]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 801399c:	2280      	movs	r2, #128	; 0x80
 801399e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80139a0:	484b      	ldr	r0, [pc, #300]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 80139a2:	f00b fd83 	bl	801f4ac <HAL_TIM_Base_Init>
 80139a6:	4603      	mov	r3, r0
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d001      	beq.n	80139b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80139ac:	f7ff fcc4 	bl	8013338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80139b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80139b4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80139b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139ba:	4619      	mov	r1, r3
 80139bc:	4844      	ldr	r0, [pc, #272]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 80139be:	f00c f9fd 	bl	801fdbc <HAL_TIM_ConfigClockSource>
 80139c2:	4603      	mov	r3, r0
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d001      	beq.n	80139cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80139c8:	f7ff fcb6 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80139cc:	4840      	ldr	r0, [pc, #256]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 80139ce:	f00b fdfb 	bl	801f5c8 <HAL_TIM_PWM_Init>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d001      	beq.n	80139dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80139d8:	f7ff fcae 	bl	8013338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80139dc:	2300      	movs	r3, #0
 80139de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80139e0:	2300      	movs	r3, #0
 80139e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80139e4:	2300      	movs	r3, #0
 80139e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80139e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80139ec:	4619      	mov	r1, r3
 80139ee:	4838      	ldr	r0, [pc, #224]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 80139f0:	f00c ff42 	bl	8020878 <HAL_TIMEx_MasterConfigSynchronization>
 80139f4:	4603      	mov	r3, r0
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d001      	beq.n	80139fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80139fa:	f7ff fc9d 	bl	8013338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80139fe:	2360      	movs	r3, #96	; 0x60
 8013a00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013a06:	2300      	movs	r3, #0
 8013a08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8013a12:	2300      	movs	r3, #0
 8013a14:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8013a16:	2300      	movs	r3, #0
 8013a18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013a1e:	2200      	movs	r2, #0
 8013a20:	4619      	mov	r1, r3
 8013a22:	482b      	ldr	r0, [pc, #172]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013a24:	f00c f8ba 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d001      	beq.n	8013a32 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8013a2e:	f7ff fc83 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013a32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013a36:	2204      	movs	r2, #4
 8013a38:	4619      	mov	r1, r3
 8013a3a:	4825      	ldr	r0, [pc, #148]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013a3c:	f00c f8ae 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013a40:	4603      	mov	r3, r0
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d001      	beq.n	8013a4a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8013a46:	f7ff fc77 	bl	8013338 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8013a4a:	2304      	movs	r3, #4
 8013a4c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013a52:	2208      	movs	r2, #8
 8013a54:	4619      	mov	r1, r3
 8013a56:	481e      	ldr	r0, [pc, #120]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013a58:	f00c f8a0 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d001      	beq.n	8013a66 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8013a62:	f7ff fc69 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013a66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013a6a:	220c      	movs	r2, #12
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4818      	ldr	r0, [pc, #96]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013a70:	f00c f894 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d001      	beq.n	8013a7e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8013a7a:	f7ff fc5d 	bl	8013338 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8013a82:	2300      	movs	r3, #0
 8013a84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8013a86:	2300      	movs	r3, #0
 8013a88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8013a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8013aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013aa4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8013aae:	1d3b      	adds	r3, r7, #4
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	4807      	ldr	r0, [pc, #28]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013ab4:	f00c ff68 	bl	8020988 <HAL_TIMEx_ConfigBreakDeadTime>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d001      	beq.n	8013ac2 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 8013abe:	f7ff fc3b 	bl	8013338 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8013ac2:	4803      	ldr	r0, [pc, #12]	; (8013ad0 <MX_TIM1_Init+0x19c>)
 8013ac4:	f000 f9e2 	bl	8013e8c <HAL_TIM_MspPostInit>

}
 8013ac8:	bf00      	nop
 8013aca:	3768      	adds	r7, #104	; 0x68
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}
 8013ad0:	2400c5e0 	.word	0x2400c5e0
 8013ad4:	40010000 	.word	0x40010000

08013ad8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b088      	sub	sp, #32
 8013adc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013ade:	f107 0310 	add.w	r3, r7, #16
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	601a      	str	r2, [r3, #0]
 8013ae6:	605a      	str	r2, [r3, #4]
 8013ae8:	609a      	str	r2, [r3, #8]
 8013aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013aec:	1d3b      	adds	r3, r7, #4
 8013aee:	2200      	movs	r2, #0
 8013af0:	601a      	str	r2, [r3, #0]
 8013af2:	605a      	str	r2, [r3, #4]
 8013af4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8013af6:	4b1e      	ldr	r3, [pc, #120]	; (8013b70 <MX_TIM2_Init+0x98>)
 8013af8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013afc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8013afe:	4b1c      	ldr	r3, [pc, #112]	; (8013b70 <MX_TIM2_Init+0x98>)
 8013b00:	22ef      	movs	r2, #239	; 0xef
 8013b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013b04:	4b1a      	ldr	r3, [pc, #104]	; (8013b70 <MX_TIM2_Init+0x98>)
 8013b06:	2200      	movs	r2, #0
 8013b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8013b0a:	4b19      	ldr	r3, [pc, #100]	; (8013b70 <MX_TIM2_Init+0x98>)
 8013b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8013b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013b12:	4b17      	ldr	r3, [pc, #92]	; (8013b70 <MX_TIM2_Init+0x98>)
 8013b14:	2200      	movs	r2, #0
 8013b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013b18:	4b15      	ldr	r3, [pc, #84]	; (8013b70 <MX_TIM2_Init+0x98>)
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8013b1e:	4814      	ldr	r0, [pc, #80]	; (8013b70 <MX_TIM2_Init+0x98>)
 8013b20:	f00b fcc4 	bl	801f4ac <HAL_TIM_Base_Init>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d001      	beq.n	8013b2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8013b2a:	f7ff fc05 	bl	8013338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8013b34:	f107 0310 	add.w	r3, r7, #16
 8013b38:	4619      	mov	r1, r3
 8013b3a:	480d      	ldr	r0, [pc, #52]	; (8013b70 <MX_TIM2_Init+0x98>)
 8013b3c:	f00c f93e 	bl	801fdbc <HAL_TIM_ConfigClockSource>
 8013b40:	4603      	mov	r3, r0
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d001      	beq.n	8013b4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8013b46:	f7ff fbf7 	bl	8013338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8013b52:	1d3b      	adds	r3, r7, #4
 8013b54:	4619      	mov	r1, r3
 8013b56:	4806      	ldr	r0, [pc, #24]	; (8013b70 <MX_TIM2_Init+0x98>)
 8013b58:	f00c fe8e 	bl	8020878 <HAL_TIMEx_MasterConfigSynchronization>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d001      	beq.n	8013b66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8013b62:	f7ff fbe9 	bl	8013338 <Error_Handler>
  }

}
 8013b66:	bf00      	nop
 8013b68:	3720      	adds	r7, #32
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}
 8013b6e:	bf00      	nop
 8013b70:	2400c62c 	.word	0x2400c62c

08013b74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b08e      	sub	sp, #56	; 0x38
 8013b78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013b7e:	2200      	movs	r2, #0
 8013b80:	601a      	str	r2, [r3, #0]
 8013b82:	605a      	str	r2, [r3, #4]
 8013b84:	609a      	str	r2, [r3, #8]
 8013b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013b88:	f107 031c 	add.w	r3, r7, #28
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	601a      	str	r2, [r3, #0]
 8013b90:	605a      	str	r2, [r3, #4]
 8013b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013b94:	463b      	mov	r3, r7
 8013b96:	2200      	movs	r2, #0
 8013b98:	601a      	str	r2, [r3, #0]
 8013b9a:	605a      	str	r2, [r3, #4]
 8013b9c:	609a      	str	r2, [r3, #8]
 8013b9e:	60da      	str	r2, [r3, #12]
 8013ba0:	611a      	str	r2, [r3, #16]
 8013ba2:	615a      	str	r2, [r3, #20]
 8013ba4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8013ba6:	4b38      	ldr	r3, [pc, #224]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013ba8:	4a38      	ldr	r2, [pc, #224]	; (8013c8c <MX_TIM3_Init+0x118>)
 8013baa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 8013bac:	4b36      	ldr	r3, [pc, #216]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013bae:	220b      	movs	r2, #11
 8013bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013bb2:	4b35      	ldr	r3, [pc, #212]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8013bb8:	4b33      	ldr	r3, [pc, #204]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013bba:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8013bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013bc0:	4b31      	ldr	r3, [pc, #196]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8013bc6:	4b30      	ldr	r3, [pc, #192]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013bc8:	2280      	movs	r2, #128	; 0x80
 8013bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8013bcc:	482e      	ldr	r0, [pc, #184]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013bce:	f00b fc6d 	bl	801f4ac <HAL_TIM_Base_Init>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d001      	beq.n	8013bdc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8013bd8:	f7ff fbae 	bl	8013338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013be0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8013be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013be6:	4619      	mov	r1, r3
 8013be8:	4827      	ldr	r0, [pc, #156]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013bea:	f00c f8e7 	bl	801fdbc <HAL_TIM_ConfigClockSource>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d001      	beq.n	8013bf8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8013bf4:	f7ff fba0 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013bf8:	4823      	ldr	r0, [pc, #140]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013bfa:	f00b fce5 	bl	801f5c8 <HAL_TIM_PWM_Init>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d001      	beq.n	8013c08 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8013c04:	f7ff fb98 	bl	8013338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013c08:	2300      	movs	r3, #0
 8013c0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8013c10:	f107 031c 	add.w	r3, r7, #28
 8013c14:	4619      	mov	r1, r3
 8013c16:	481c      	ldr	r0, [pc, #112]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013c18:	f00c fe2e 	bl	8020878 <HAL_TIMEx_MasterConfigSynchronization>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d001      	beq.n	8013c26 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8013c22:	f7ff fb89 	bl	8013338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013c26:	2360      	movs	r3, #96	; 0x60
 8013c28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8013c32:	2304      	movs	r3, #4
 8013c34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013c36:	463b      	mov	r3, r7
 8013c38:	2200      	movs	r2, #0
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	4812      	ldr	r0, [pc, #72]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013c3e:	f00b ffad 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013c42:	4603      	mov	r3, r0
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d001      	beq.n	8013c4c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8013c48:	f7ff fb76 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013c4c:	463b      	mov	r3, r7
 8013c4e:	2204      	movs	r2, #4
 8013c50:	4619      	mov	r1, r3
 8013c52:	480d      	ldr	r0, [pc, #52]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013c54:	f00b ffa2 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d001      	beq.n	8013c62 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8013c5e:	f7ff fb6b 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013c62:	463b      	mov	r3, r7
 8013c64:	220c      	movs	r2, #12
 8013c66:	4619      	mov	r1, r3
 8013c68:	4807      	ldr	r0, [pc, #28]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013c6a:	f00b ff97 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d001      	beq.n	8013c78 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8013c74:	f7ff fb60 	bl	8013338 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8013c78:	4803      	ldr	r0, [pc, #12]	; (8013c88 <MX_TIM3_Init+0x114>)
 8013c7a:	f000 f907 	bl	8013e8c <HAL_TIM_MspPostInit>

}
 8013c7e:	bf00      	nop
 8013c80:	3738      	adds	r7, #56	; 0x38
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
 8013c86:	bf00      	nop
 8013c88:	2400c594 	.word	0x2400c594
 8013c8c:	40000400 	.word	0x40000400

08013c90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b08e      	sub	sp, #56	; 0x38
 8013c94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	601a      	str	r2, [r3, #0]
 8013c9e:	605a      	str	r2, [r3, #4]
 8013ca0:	609a      	str	r2, [r3, #8]
 8013ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013ca4:	f107 031c 	add.w	r3, r7, #28
 8013ca8:	2200      	movs	r2, #0
 8013caa:	601a      	str	r2, [r3, #0]
 8013cac:	605a      	str	r2, [r3, #4]
 8013cae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013cb0:	463b      	mov	r3, r7
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	601a      	str	r2, [r3, #0]
 8013cb6:	605a      	str	r2, [r3, #4]
 8013cb8:	609a      	str	r2, [r3, #8]
 8013cba:	60da      	str	r2, [r3, #12]
 8013cbc:	611a      	str	r2, [r3, #16]
 8013cbe:	615a      	str	r2, [r3, #20]
 8013cc0:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8013cc2:	4b3d      	ldr	r3, [pc, #244]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013cc4:	4a3d      	ldr	r2, [pc, #244]	; (8013dbc <MX_TIM4_Init+0x12c>)
 8013cc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12-1;
 8013cc8:	4b3b      	ldr	r3, [pc, #236]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013cca:	220b      	movs	r2, #11
 8013ccc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013cce:	4b3a      	ldr	r3, [pc, #232]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8013cd4:	4b38      	ldr	r3, [pc, #224]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013cd6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8013cda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013cdc:	4b36      	ldr	r3, [pc, #216]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013cde:	2200      	movs	r2, #0
 8013ce0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8013ce2:	4b35      	ldr	r3, [pc, #212]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013ce4:	2280      	movs	r2, #128	; 0x80
 8013ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8013ce8:	4833      	ldr	r0, [pc, #204]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013cea:	f00b fbdf 	bl	801f4ac <HAL_TIM_Base_Init>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d001      	beq.n	8013cf8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8013cf4:	f7ff fb20 	bl	8013338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8013cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013d02:	4619      	mov	r1, r3
 8013d04:	482c      	ldr	r0, [pc, #176]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013d06:	f00c f859 	bl	801fdbc <HAL_TIM_ConfigClockSource>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d001      	beq.n	8013d14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8013d10:	f7ff fb12 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8013d14:	4828      	ldr	r0, [pc, #160]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013d16:	f00b fc57 	bl	801f5c8 <HAL_TIM_PWM_Init>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d001      	beq.n	8013d24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8013d20:	f7ff fb0a 	bl	8013338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013d24:	2300      	movs	r3, #0
 8013d26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8013d2c:	f107 031c 	add.w	r3, r7, #28
 8013d30:	4619      	mov	r1, r3
 8013d32:	4821      	ldr	r0, [pc, #132]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013d34:	f00c fda0 	bl	8020878 <HAL_TIMEx_MasterConfigSynchronization>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d001      	beq.n	8013d42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8013d3e:	f7ff fafb 	bl	8013338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013d42:	2360      	movs	r3, #96	; 0x60
 8013d44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013d46:	2300      	movs	r3, #0
 8013d48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8013d4e:	2304      	movs	r3, #4
 8013d50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013d52:	463b      	mov	r3, r7
 8013d54:	2200      	movs	r2, #0
 8013d56:	4619      	mov	r1, r3
 8013d58:	4817      	ldr	r0, [pc, #92]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013d5a:	f00b ff1f 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d001      	beq.n	8013d68 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8013d64:	f7ff fae8 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013d68:	463b      	mov	r3, r7
 8013d6a:	2204      	movs	r2, #4
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	4812      	ldr	r0, [pc, #72]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013d70:	f00b ff14 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013d74:	4603      	mov	r3, r0
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d001      	beq.n	8013d7e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8013d7a:	f7ff fadd 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013d7e:	463b      	mov	r3, r7
 8013d80:	2208      	movs	r2, #8
 8013d82:	4619      	mov	r1, r3
 8013d84:	480c      	ldr	r0, [pc, #48]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013d86:	f00b ff09 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d001      	beq.n	8013d94 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8013d90:	f7ff fad2 	bl	8013338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013d94:	463b      	mov	r3, r7
 8013d96:	220c      	movs	r2, #12
 8013d98:	4619      	mov	r1, r3
 8013d9a:	4807      	ldr	r0, [pc, #28]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013d9c:	f00b fefe 	bl	801fb9c <HAL_TIM_PWM_ConfigChannel>
 8013da0:	4603      	mov	r3, r0
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d001      	beq.n	8013daa <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8013da6:	f7ff fac7 	bl	8013338 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8013daa:	4803      	ldr	r0, [pc, #12]	; (8013db8 <MX_TIM4_Init+0x128>)
 8013dac:	f000 f86e 	bl	8013e8c <HAL_TIM_MspPostInit>

}
 8013db0:	bf00      	nop
 8013db2:	3738      	adds	r7, #56	; 0x38
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	2400c548 	.word	0x2400c548
 8013dbc:	40000800 	.word	0x40000800

08013dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b087      	sub	sp, #28
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	4a2b      	ldr	r2, [pc, #172]	; (8013e7c <HAL_TIM_Base_MspInit+0xbc>)
 8013dce:	4293      	cmp	r3, r2
 8013dd0:	d10f      	bne.n	8013df2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8013dd2:	4b2b      	ldr	r3, [pc, #172]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8013dd8:	4a29      	ldr	r2, [pc, #164]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013dda:	f043 0301 	orr.w	r3, r3, #1
 8013dde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8013de2:	4b27      	ldr	r3, [pc, #156]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8013de8:	f003 0301 	and.w	r3, r3, #1
 8013dec:	617b      	str	r3, [r7, #20]
 8013dee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8013df0:	e03d      	b.n	8013e6e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013dfa:	d10f      	bne.n	8013e1c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8013dfc:	4b20      	ldr	r3, [pc, #128]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013e02:	4a1f      	ldr	r2, [pc, #124]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013e04:	f043 0301 	orr.w	r3, r3, #1
 8013e08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8013e0c:	4b1c      	ldr	r3, [pc, #112]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013e12:	f003 0301 	and.w	r3, r3, #1
 8013e16:	613b      	str	r3, [r7, #16]
 8013e18:	693b      	ldr	r3, [r7, #16]
}
 8013e1a:	e028      	b.n	8013e6e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	4a18      	ldr	r2, [pc, #96]	; (8013e84 <HAL_TIM_Base_MspInit+0xc4>)
 8013e22:	4293      	cmp	r3, r2
 8013e24:	d10f      	bne.n	8013e46 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8013e26:	4b16      	ldr	r3, [pc, #88]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013e2c:	4a14      	ldr	r2, [pc, #80]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013e2e:	f043 0302 	orr.w	r3, r3, #2
 8013e32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8013e36:	4b12      	ldr	r3, [pc, #72]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013e3c:	f003 0302 	and.w	r3, r3, #2
 8013e40:	60fb      	str	r3, [r7, #12]
 8013e42:	68fb      	ldr	r3, [r7, #12]
}
 8013e44:	e013      	b.n	8013e6e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	4a0f      	ldr	r2, [pc, #60]	; (8013e88 <HAL_TIM_Base_MspInit+0xc8>)
 8013e4c:	4293      	cmp	r3, r2
 8013e4e:	d10e      	bne.n	8013e6e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8013e50:	4b0b      	ldr	r3, [pc, #44]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013e56:	4a0a      	ldr	r2, [pc, #40]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013e58:	f043 0304 	orr.w	r3, r3, #4
 8013e5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8013e60:	4b07      	ldr	r3, [pc, #28]	; (8013e80 <HAL_TIM_Base_MspInit+0xc0>)
 8013e62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013e66:	f003 0304 	and.w	r3, r3, #4
 8013e6a:	60bb      	str	r3, [r7, #8]
 8013e6c:	68bb      	ldr	r3, [r7, #8]
}
 8013e6e:	bf00      	nop
 8013e70:	371c      	adds	r7, #28
 8013e72:	46bd      	mov	sp, r7
 8013e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e78:	4770      	bx	lr
 8013e7a:	bf00      	nop
 8013e7c:	40010000 	.word	0x40010000
 8013e80:	58024400 	.word	0x58024400
 8013e84:	40000400 	.word	0x40000400
 8013e88:	40000800 	.word	0x40000800

08013e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b08c      	sub	sp, #48	; 0x30
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013e94:	f107 031c 	add.w	r3, r7, #28
 8013e98:	2200      	movs	r2, #0
 8013e9a:	601a      	str	r2, [r3, #0]
 8013e9c:	605a      	str	r2, [r3, #4]
 8013e9e:	609a      	str	r2, [r3, #8]
 8013ea0:	60da      	str	r2, [r3, #12]
 8013ea2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	4a57      	ldr	r2, [pc, #348]	; (8014008 <HAL_TIM_MspPostInit+0x17c>)
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	d120      	bne.n	8013ef0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8013eae:	4b57      	ldr	r3, [pc, #348]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013eb4:	4a55      	ldr	r2, [pc, #340]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013eb6:	f043 0310 	orr.w	r3, r3, #16
 8013eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013ebe:	4b53      	ldr	r3, [pc, #332]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013ec4:	f003 0310 	and.w	r3, r3, #16
 8013ec8:	61bb      	str	r3, [r7, #24]
 8013eca:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8013ecc:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8013ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ed2:	2302      	movs	r3, #2
 8013ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013eda:	2300      	movs	r3, #0
 8013edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8013ede:	2301      	movs	r3, #1
 8013ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013ee2:	f107 031c 	add.w	r3, r7, #28
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	4849      	ldr	r0, [pc, #292]	; (8014010 <HAL_TIM_MspPostInit+0x184>)
 8013eea:	f003 fffb 	bl	8017ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8013eee:	e087      	b.n	8014000 <HAL_TIM_MspPostInit+0x174>
  else if(timHandle->Instance==TIM3)
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4a47      	ldr	r2, [pc, #284]	; (8014014 <HAL_TIM_MspPostInit+0x188>)
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d15d      	bne.n	8013fb6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013efa:	4b44      	ldr	r3, [pc, #272]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013f00:	4a42      	ldr	r2, [pc, #264]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013f02:	f043 0301 	orr.w	r3, r3, #1
 8013f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013f0a:	4b40      	ldr	r3, [pc, #256]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013f10:	f003 0301 	and.w	r3, r3, #1
 8013f14:	617b      	str	r3, [r7, #20]
 8013f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013f18:	4b3c      	ldr	r3, [pc, #240]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013f1e:	4a3b      	ldr	r2, [pc, #236]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013f20:	f043 0302 	orr.w	r3, r3, #2
 8013f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013f28:	4b38      	ldr	r3, [pc, #224]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013f2e:	f003 0302 	and.w	r3, r3, #2
 8013f32:	613b      	str	r3, [r7, #16]
 8013f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013f36:	4b35      	ldr	r3, [pc, #212]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013f3c:	4a33      	ldr	r2, [pc, #204]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013f3e:	f043 0304 	orr.w	r3, r3, #4
 8013f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013f46:	4b31      	ldr	r3, [pc, #196]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013f4c:	f003 0304 	and.w	r3, r3, #4
 8013f50:	60fb      	str	r3, [r7, #12]
 8013f52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M7_Pin;
 8013f54:	2340      	movs	r3, #64	; 0x40
 8013f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f58:	2302      	movs	r3, #2
 8013f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f60:	2300      	movs	r3, #0
 8013f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013f64:	2302      	movs	r3, #2
 8013f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M7_GPIO_Port, &GPIO_InitStruct);
 8013f68:	f107 031c 	add.w	r3, r7, #28
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	482a      	ldr	r0, [pc, #168]	; (8014018 <HAL_TIM_MspPostInit+0x18c>)
 8013f70:	f003 ffb8 	bl	8017ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M5_Pin;
 8013f74:	2302      	movs	r3, #2
 8013f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f78:	2302      	movs	r3, #2
 8013f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f80:	2300      	movs	r3, #0
 8013f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013f84:	2302      	movs	r3, #2
 8013f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M5_GPIO_Port, &GPIO_InitStruct);
 8013f88:	f107 031c 	add.w	r3, r7, #28
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	4823      	ldr	r0, [pc, #140]	; (801401c <HAL_TIM_MspPostInit+0x190>)
 8013f90:	f003 ffa8 	bl	8017ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M6_Pin;
 8013f94:	2380      	movs	r3, #128	; 0x80
 8013f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f98:	2302      	movs	r3, #2
 8013f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013fa4:	2302      	movs	r3, #2
 8013fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M6_GPIO_Port, &GPIO_InitStruct);
 8013fa8:	f107 031c 	add.w	r3, r7, #28
 8013fac:	4619      	mov	r1, r3
 8013fae:	481c      	ldr	r0, [pc, #112]	; (8014020 <HAL_TIM_MspPostInit+0x194>)
 8013fb0:	f003 ff98 	bl	8017ee4 <HAL_GPIO_Init>
}
 8013fb4:	e024      	b.n	8014000 <HAL_TIM_MspPostInit+0x174>
  else if(timHandle->Instance==TIM4)
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	4a1a      	ldr	r2, [pc, #104]	; (8014024 <HAL_TIM_MspPostInit+0x198>)
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	d11f      	bne.n	8014000 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013fc0:	4b12      	ldr	r3, [pc, #72]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013fc6:	4a11      	ldr	r2, [pc, #68]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013fc8:	f043 0308 	orr.w	r3, r3, #8
 8013fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013fd0:	4b0e      	ldr	r3, [pc, #56]	; (801400c <HAL_TIM_MspPostInit+0x180>)
 8013fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013fd6:	f003 0308 	and.w	r3, r3, #8
 8013fda:	60bb      	str	r3, [r7, #8]
 8013fdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_Pin|M4_Pin|M2_Pin|M1_Pin;
 8013fde:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8013fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013fe4:	2302      	movs	r3, #2
 8013fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013fec:	2300      	movs	r3, #0
 8013fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013ff4:	f107 031c 	add.w	r3, r7, #28
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	480b      	ldr	r0, [pc, #44]	; (8014028 <HAL_TIM_MspPostInit+0x19c>)
 8013ffc:	f003 ff72 	bl	8017ee4 <HAL_GPIO_Init>
}
 8014000:	bf00      	nop
 8014002:	3730      	adds	r7, #48	; 0x30
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}
 8014008:	40010000 	.word	0x40010000
 801400c:	58024400 	.word	0x58024400
 8014010:	58021000 	.word	0x58021000
 8014014:	40000400 	.word	0x40000400
 8014018:	58020000 	.word	0x58020000
 801401c:	58020400 	.word	0x58020400
 8014020:	58020800 	.word	0x58020800
 8014024:	40000800 	.word	0x40000800
 8014028:	58020c00 	.word	0x58020c00

0801402c <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8014030:	4b23      	ldr	r3, [pc, #140]	; (80140c0 <MX_UART7_Init+0x94>)
 8014032:	4a24      	ldr	r2, [pc, #144]	; (80140c4 <MX_UART7_Init+0x98>)
 8014034:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8014036:	4b22      	ldr	r3, [pc, #136]	; (80140c0 <MX_UART7_Init+0x94>)
 8014038:	4a23      	ldr	r2, [pc, #140]	; (80140c8 <MX_UART7_Init+0x9c>)
 801403a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 801403c:	4b20      	ldr	r3, [pc, #128]	; (80140c0 <MX_UART7_Init+0x94>)
 801403e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014042:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8014044:	4b1e      	ldr	r3, [pc, #120]	; (80140c0 <MX_UART7_Init+0x94>)
 8014046:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801404a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 801404c:	4b1c      	ldr	r3, [pc, #112]	; (80140c0 <MX_UART7_Init+0x94>)
 801404e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014052:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8014054:	4b1a      	ldr	r3, [pc, #104]	; (80140c0 <MX_UART7_Init+0x94>)
 8014056:	220c      	movs	r2, #12
 8014058:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801405a:	4b19      	ldr	r3, [pc, #100]	; (80140c0 <MX_UART7_Init+0x94>)
 801405c:	2200      	movs	r2, #0
 801405e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8014060:	4b17      	ldr	r3, [pc, #92]	; (80140c0 <MX_UART7_Init+0x94>)
 8014062:	2200      	movs	r2, #0
 8014064:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014066:	4b16      	ldr	r3, [pc, #88]	; (80140c0 <MX_UART7_Init+0x94>)
 8014068:	2200      	movs	r2, #0
 801406a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801406c:	4b14      	ldr	r3, [pc, #80]	; (80140c0 <MX_UART7_Init+0x94>)
 801406e:	2200      	movs	r2, #0
 8014070:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014072:	4b13      	ldr	r3, [pc, #76]	; (80140c0 <MX_UART7_Init+0x94>)
 8014074:	2200      	movs	r2, #0
 8014076:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8014078:	4811      	ldr	r0, [pc, #68]	; (80140c0 <MX_UART7_Init+0x94>)
 801407a:	f00c fd21 	bl	8020ac0 <HAL_UART_Init>
 801407e:	4603      	mov	r3, r0
 8014080:	2b00      	cmp	r3, #0
 8014082:	d001      	beq.n	8014088 <MX_UART7_Init+0x5c>
  {
    Error_Handler();
 8014084:	f7ff f958 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014088:	2100      	movs	r1, #0
 801408a:	480d      	ldr	r0, [pc, #52]	; (80140c0 <MX_UART7_Init+0x94>)
 801408c:	f00e f888 	bl	80221a0 <HAL_UARTEx_SetTxFifoThreshold>
 8014090:	4603      	mov	r3, r0
 8014092:	2b00      	cmp	r3, #0
 8014094:	d001      	beq.n	801409a <MX_UART7_Init+0x6e>
  {
    Error_Handler();
 8014096:	f7ff f94f 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801409a:	2100      	movs	r1, #0
 801409c:	4808      	ldr	r0, [pc, #32]	; (80140c0 <MX_UART7_Init+0x94>)
 801409e:	f00e f8bd 	bl	802221c <HAL_UARTEx_SetRxFifoThreshold>
 80140a2:	4603      	mov	r3, r0
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d001      	beq.n	80140ac <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80140a8:	f7ff f946 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80140ac:	4804      	ldr	r0, [pc, #16]	; (80140c0 <MX_UART7_Init+0x94>)
 80140ae:	f00e f83e 	bl	802212e <HAL_UARTEx_DisableFifoMode>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d001      	beq.n	80140bc <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80140b8:	f7ff f93e 	bl	8013338 <Error_Handler>
  }

}
 80140bc:	bf00      	nop
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	2400c678 	.word	0x2400c678
 80140c4:	40007800 	.word	0x40007800
 80140c8:	000186a0 	.word	0x000186a0

080140cc <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 80140d0:	4b22      	ldr	r3, [pc, #136]	; (801415c <MX_UART8_Init+0x90>)
 80140d2:	4a23      	ldr	r2, [pc, #140]	; (8014160 <MX_UART8_Init+0x94>)
 80140d4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 80140d6:	4b21      	ldr	r3, [pc, #132]	; (801415c <MX_UART8_Init+0x90>)
 80140d8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80140dc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80140de:	4b1f      	ldr	r3, [pc, #124]	; (801415c <MX_UART8_Init+0x90>)
 80140e0:	2200      	movs	r2, #0
 80140e2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80140e4:	4b1d      	ldr	r3, [pc, #116]	; (801415c <MX_UART8_Init+0x90>)
 80140e6:	2200      	movs	r2, #0
 80140e8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80140ea:	4b1c      	ldr	r3, [pc, #112]	; (801415c <MX_UART8_Init+0x90>)
 80140ec:	2200      	movs	r2, #0
 80140ee:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80140f0:	4b1a      	ldr	r3, [pc, #104]	; (801415c <MX_UART8_Init+0x90>)
 80140f2:	220c      	movs	r2, #12
 80140f4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80140f6:	4b19      	ldr	r3, [pc, #100]	; (801415c <MX_UART8_Init+0x90>)
 80140f8:	2200      	movs	r2, #0
 80140fa:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80140fc:	4b17      	ldr	r3, [pc, #92]	; (801415c <MX_UART8_Init+0x90>)
 80140fe:	2200      	movs	r2, #0
 8014100:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014102:	4b16      	ldr	r3, [pc, #88]	; (801415c <MX_UART8_Init+0x90>)
 8014104:	2200      	movs	r2, #0
 8014106:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8014108:	4b14      	ldr	r3, [pc, #80]	; (801415c <MX_UART8_Init+0x90>)
 801410a:	2200      	movs	r2, #0
 801410c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801410e:	4b13      	ldr	r3, [pc, #76]	; (801415c <MX_UART8_Init+0x90>)
 8014110:	2200      	movs	r2, #0
 8014112:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8014114:	4811      	ldr	r0, [pc, #68]	; (801415c <MX_UART8_Init+0x90>)
 8014116:	f00c fcd3 	bl	8020ac0 <HAL_UART_Init>
 801411a:	4603      	mov	r3, r0
 801411c:	2b00      	cmp	r3, #0
 801411e:	d001      	beq.n	8014124 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8014120:	f7ff f90a 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014124:	2100      	movs	r1, #0
 8014126:	480d      	ldr	r0, [pc, #52]	; (801415c <MX_UART8_Init+0x90>)
 8014128:	f00e f83a 	bl	80221a0 <HAL_UARTEx_SetTxFifoThreshold>
 801412c:	4603      	mov	r3, r0
 801412e:	2b00      	cmp	r3, #0
 8014130:	d001      	beq.n	8014136 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8014132:	f7ff f901 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014136:	2100      	movs	r1, #0
 8014138:	4808      	ldr	r0, [pc, #32]	; (801415c <MX_UART8_Init+0x90>)
 801413a:	f00e f86f 	bl	802221c <HAL_UARTEx_SetRxFifoThreshold>
 801413e:	4603      	mov	r3, r0
 8014140:	2b00      	cmp	r3, #0
 8014142:	d001      	beq.n	8014148 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8014144:	f7ff f8f8 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8014148:	4804      	ldr	r0, [pc, #16]	; (801415c <MX_UART8_Init+0x90>)
 801414a:	f00d fff0 	bl	802212e <HAL_UARTEx_DisableFifoMode>
 801414e:	4603      	mov	r3, r0
 8014150:	2b00      	cmp	r3, #0
 8014152:	d001      	beq.n	8014158 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8014154:	f7ff f8f0 	bl	8013338 <Error_Handler>
  }

}
 8014158:	bf00      	nop
 801415a:	bd80      	pop	{r7, pc}
 801415c:	2400c880 	.word	0x2400c880
 8014160:	40007c00 	.word	0x40007c00

08014164 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8014168:	4b23      	ldr	r3, [pc, #140]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 801416a:	4a24      	ldr	r2, [pc, #144]	; (80141fc <MX_USART2_UART_Init+0x98>)
 801416c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801416e:	4b22      	ldr	r3, [pc, #136]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 8014170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8014176:	4b20      	ldr	r3, [pc, #128]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 8014178:	2200      	movs	r2, #0
 801417a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801417c:	4b1e      	ldr	r3, [pc, #120]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 801417e:	2200      	movs	r2, #0
 8014180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8014182:	4b1d      	ldr	r3, [pc, #116]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 8014184:	2200      	movs	r2, #0
 8014186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8014188:	4b1b      	ldr	r3, [pc, #108]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 801418a:	220c      	movs	r2, #12
 801418c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 801418e:	4b1a      	ldr	r3, [pc, #104]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 8014190:	f44f 7240 	mov.w	r2, #768	; 0x300
 8014194:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8014196:	4b18      	ldr	r3, [pc, #96]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 8014198:	2200      	movs	r2, #0
 801419a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801419c:	4b16      	ldr	r3, [pc, #88]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 801419e:	2200      	movs	r2, #0
 80141a0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80141a2:	4b15      	ldr	r3, [pc, #84]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 80141a4:	2200      	movs	r2, #0
 80141a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80141a8:	4b13      	ldr	r3, [pc, #76]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 80141aa:	2200      	movs	r2, #0
 80141ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80141ae:	4812      	ldr	r0, [pc, #72]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 80141b0:	f00c fc86 	bl	8020ac0 <HAL_UART_Init>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d001      	beq.n	80141be <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80141ba:	f7ff f8bd 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80141be:	2100      	movs	r1, #0
 80141c0:	480d      	ldr	r0, [pc, #52]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 80141c2:	f00d ffed 	bl	80221a0 <HAL_UARTEx_SetTxFifoThreshold>
 80141c6:	4603      	mov	r3, r0
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d001      	beq.n	80141d0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80141cc:	f7ff f8b4 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80141d0:	2100      	movs	r1, #0
 80141d2:	4809      	ldr	r0, [pc, #36]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 80141d4:	f00e f822 	bl	802221c <HAL_UARTEx_SetRxFifoThreshold>
 80141d8:	4603      	mov	r3, r0
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d001      	beq.n	80141e2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80141de:	f7ff f8ab 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80141e2:	4805      	ldr	r0, [pc, #20]	; (80141f8 <MX_USART2_UART_Init+0x94>)
 80141e4:	f00d ffa3 	bl	802212e <HAL_UARTEx_DisableFifoMode>
 80141e8:	4603      	mov	r3, r0
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d001      	beq.n	80141f2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80141ee:	f7ff f8a3 	bl	8013338 <Error_Handler>
  }

}
 80141f2:	bf00      	nop
 80141f4:	bd80      	pop	{r7, pc}
 80141f6:	bf00      	nop
 80141f8:	2400c90c 	.word	0x2400c90c
 80141fc:	40004400 	.word	0x40004400

08014200 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8014204:	4b22      	ldr	r3, [pc, #136]	; (8014290 <MX_USART3_UART_Init+0x90>)
 8014206:	4a23      	ldr	r2, [pc, #140]	; (8014294 <MX_USART3_UART_Init+0x94>)
 8014208:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 801420a:	4b21      	ldr	r3, [pc, #132]	; (8014290 <MX_USART3_UART_Init+0x90>)
 801420c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8014210:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8014212:	4b1f      	ldr	r3, [pc, #124]	; (8014290 <MX_USART3_UART_Init+0x90>)
 8014214:	2200      	movs	r2, #0
 8014216:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8014218:	4b1d      	ldr	r3, [pc, #116]	; (8014290 <MX_USART3_UART_Init+0x90>)
 801421a:	2200      	movs	r2, #0
 801421c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801421e:	4b1c      	ldr	r3, [pc, #112]	; (8014290 <MX_USART3_UART_Init+0x90>)
 8014220:	2200      	movs	r2, #0
 8014222:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8014224:	4b1a      	ldr	r3, [pc, #104]	; (8014290 <MX_USART3_UART_Init+0x90>)
 8014226:	220c      	movs	r2, #12
 8014228:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801422a:	4b19      	ldr	r3, [pc, #100]	; (8014290 <MX_USART3_UART_Init+0x90>)
 801422c:	2200      	movs	r2, #0
 801422e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8014230:	4b17      	ldr	r3, [pc, #92]	; (8014290 <MX_USART3_UART_Init+0x90>)
 8014232:	2200      	movs	r2, #0
 8014234:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014236:	4b16      	ldr	r3, [pc, #88]	; (8014290 <MX_USART3_UART_Init+0x90>)
 8014238:	2200      	movs	r2, #0
 801423a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801423c:	4b14      	ldr	r3, [pc, #80]	; (8014290 <MX_USART3_UART_Init+0x90>)
 801423e:	2200      	movs	r2, #0
 8014240:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014242:	4b13      	ldr	r3, [pc, #76]	; (8014290 <MX_USART3_UART_Init+0x90>)
 8014244:	2200      	movs	r2, #0
 8014246:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8014248:	4811      	ldr	r0, [pc, #68]	; (8014290 <MX_USART3_UART_Init+0x90>)
 801424a:	f00c fc39 	bl	8020ac0 <HAL_UART_Init>
 801424e:	4603      	mov	r3, r0
 8014250:	2b00      	cmp	r3, #0
 8014252:	d001      	beq.n	8014258 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8014254:	f7ff f870 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014258:	2100      	movs	r1, #0
 801425a:	480d      	ldr	r0, [pc, #52]	; (8014290 <MX_USART3_UART_Init+0x90>)
 801425c:	f00d ffa0 	bl	80221a0 <HAL_UARTEx_SetTxFifoThreshold>
 8014260:	4603      	mov	r3, r0
 8014262:	2b00      	cmp	r3, #0
 8014264:	d001      	beq.n	801426a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8014266:	f7ff f867 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801426a:	2100      	movs	r1, #0
 801426c:	4808      	ldr	r0, [pc, #32]	; (8014290 <MX_USART3_UART_Init+0x90>)
 801426e:	f00d ffd5 	bl	802221c <HAL_UARTEx_SetRxFifoThreshold>
 8014272:	4603      	mov	r3, r0
 8014274:	2b00      	cmp	r3, #0
 8014276:	d001      	beq.n	801427c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8014278:	f7ff f85e 	bl	8013338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 801427c:	4804      	ldr	r0, [pc, #16]	; (8014290 <MX_USART3_UART_Init+0x90>)
 801427e:	f00d ff56 	bl	802212e <HAL_UARTEx_DisableFifoMode>
 8014282:	4603      	mov	r3, r0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d001      	beq.n	801428c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8014288:	f7ff f856 	bl	8013338 <Error_Handler>
  }

}
 801428c:	bf00      	nop
 801428e:	bd80      	pop	{r7, pc}
 8014290:	2400c704 	.word	0x2400c704
 8014294:	40004800 	.word	0x40004800

08014298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b090      	sub	sp, #64	; 0x40
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80142a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80142a4:	2200      	movs	r2, #0
 80142a6:	601a      	str	r2, [r3, #0]
 80142a8:	605a      	str	r2, [r3, #4]
 80142aa:	609a      	str	r2, [r3, #8]
 80142ac:	60da      	str	r2, [r3, #12]
 80142ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	4aae      	ldr	r2, [pc, #696]	; (8014570 <HAL_UART_MspInit+0x2d8>)
 80142b6:	4293      	cmp	r3, r2
 80142b8:	d165      	bne.n	8014386 <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80142ba:	4bae      	ldr	r3, [pc, #696]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80142bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80142c0:	4aac      	ldr	r2, [pc, #688]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80142c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80142c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80142ca:	4baa      	ldr	r3, [pc, #680]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80142cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80142d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80142d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80142d6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80142d8:	4ba6      	ldr	r3, [pc, #664]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80142da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80142de:	4aa5      	ldr	r2, [pc, #660]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80142e0:	f043 0310 	orr.w	r3, r3, #16
 80142e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80142e8:	4ba2      	ldr	r3, [pc, #648]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80142ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80142ee:	f003 0310 	and.w	r3, r3, #16
 80142f2:	627b      	str	r3, [r7, #36]	; 0x24
 80142f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = SBUS_RX_Pin|SBUS_TX_Pin;
 80142f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80142fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142fc:	2302      	movs	r3, #2
 80142fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014300:	2300      	movs	r3, #0
 8014302:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014304:	2300      	movs	r3, #0
 8014306:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8014308:	2307      	movs	r3, #7
 801430a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801430c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014310:	4619      	mov	r1, r3
 8014312:	4899      	ldr	r0, [pc, #612]	; (8014578 <HAL_UART_MspInit+0x2e0>)
 8014314:	f003 fde6 	bl	8017ee4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream1;
 8014318:	4b98      	ldr	r3, [pc, #608]	; (801457c <HAL_UART_MspInit+0x2e4>)
 801431a:	4a99      	ldr	r2, [pc, #612]	; (8014580 <HAL_UART_MspInit+0x2e8>)
 801431c:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 801431e:	4b97      	ldr	r3, [pc, #604]	; (801457c <HAL_UART_MspInit+0x2e4>)
 8014320:	224f      	movs	r2, #79	; 0x4f
 8014322:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014324:	4b95      	ldr	r3, [pc, #596]	; (801457c <HAL_UART_MspInit+0x2e4>)
 8014326:	2200      	movs	r2, #0
 8014328:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801432a:	4b94      	ldr	r3, [pc, #592]	; (801457c <HAL_UART_MspInit+0x2e4>)
 801432c:	2200      	movs	r2, #0
 801432e:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014330:	4b92      	ldr	r3, [pc, #584]	; (801457c <HAL_UART_MspInit+0x2e4>)
 8014332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014336:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014338:	4b90      	ldr	r3, [pc, #576]	; (801457c <HAL_UART_MspInit+0x2e4>)
 801433a:	2200      	movs	r2, #0
 801433c:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801433e:	4b8f      	ldr	r3, [pc, #572]	; (801457c <HAL_UART_MspInit+0x2e4>)
 8014340:	2200      	movs	r2, #0
 8014342:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8014344:	4b8d      	ldr	r3, [pc, #564]	; (801457c <HAL_UART_MspInit+0x2e4>)
 8014346:	f44f 7280 	mov.w	r2, #256	; 0x100
 801434a:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 801434c:	4b8b      	ldr	r3, [pc, #556]	; (801457c <HAL_UART_MspInit+0x2e4>)
 801434e:	2200      	movs	r2, #0
 8014350:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014352:	4b8a      	ldr	r3, [pc, #552]	; (801457c <HAL_UART_MspInit+0x2e4>)
 8014354:	2200      	movs	r2, #0
 8014356:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8014358:	4888      	ldr	r0, [pc, #544]	; (801457c <HAL_UART_MspInit+0x2e4>)
 801435a:	f001 fa8d 	bl	8015878 <HAL_DMA_Init>
 801435e:	4603      	mov	r3, r0
 8014360:	2b00      	cmp	r3, #0
 8014362:	d001      	beq.n	8014368 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8014364:	f7fe ffe8 	bl	8013338 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	4a84      	ldr	r2, [pc, #528]	; (801457c <HAL_UART_MspInit+0x2e4>)
 801436c:	679a      	str	r2, [r3, #120]	; 0x78
 801436e:	4a83      	ldr	r2, [pc, #524]	; (801457c <HAL_UART_MspInit+0x2e4>)
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 10, 0);
 8014374:	2200      	movs	r2, #0
 8014376:	210a      	movs	r1, #10
 8014378:	2052      	movs	r0, #82	; 0x52
 801437a:	f001 fa55 	bl	8015828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 801437e:	2052      	movs	r0, #82	; 0x52
 8014380:	f001 fa6c 	bl	801585c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8014384:	e0f0      	b.n	8014568 <HAL_UART_MspInit+0x2d0>
  else if(uartHandle->Instance==UART8)
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	4a7e      	ldr	r2, [pc, #504]	; (8014584 <HAL_UART_MspInit+0x2ec>)
 801438c:	4293      	cmp	r3, r2
 801438e:	d164      	bne.n	801445a <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_UART8_CLK_ENABLE();
 8014390:	4b78      	ldr	r3, [pc, #480]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 8014392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014396:	4a77      	ldr	r2, [pc, #476]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 8014398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801439c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80143a0:	4b74      	ldr	r3, [pc, #464]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80143a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80143a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80143aa:	623b      	str	r3, [r7, #32]
 80143ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80143ae:	4b71      	ldr	r3, [pc, #452]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80143b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80143b4:	4a6f      	ldr	r2, [pc, #444]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80143b6:	f043 0310 	orr.w	r3, r3, #16
 80143ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80143be:	4b6d      	ldr	r3, [pc, #436]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80143c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80143c4:	f003 0310 	and.w	r3, r3, #16
 80143c8:	61fb      	str	r3, [r7, #28]
 80143ca:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80143cc:	2303      	movs	r3, #3
 80143ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143d0:	2302      	movs	r3, #2
 80143d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143d4:	2300      	movs	r3, #0
 80143d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80143d8:	2300      	movs	r3, #0
 80143da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80143dc:	2308      	movs	r3, #8
 80143de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80143e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80143e4:	4619      	mov	r1, r3
 80143e6:	4864      	ldr	r0, [pc, #400]	; (8014578 <HAL_UART_MspInit+0x2e0>)
 80143e8:	f003 fd7c 	bl	8017ee4 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 80143ec:	4b66      	ldr	r3, [pc, #408]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 80143ee:	4a67      	ldr	r2, [pc, #412]	; (801458c <HAL_UART_MspInit+0x2f4>)
 80143f0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80143f2:	4b65      	ldr	r3, [pc, #404]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 80143f4:	2251      	movs	r2, #81	; 0x51
 80143f6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80143f8:	4b63      	ldr	r3, [pc, #396]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 80143fa:	2200      	movs	r2, #0
 80143fc:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80143fe:	4b62      	ldr	r3, [pc, #392]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 8014400:	2200      	movs	r2, #0
 8014402:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014404:	4b60      	ldr	r3, [pc, #384]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 8014406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801440a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801440c:	4b5e      	ldr	r3, [pc, #376]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 801440e:	2200      	movs	r2, #0
 8014410:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014412:	4b5d      	ldr	r3, [pc, #372]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 8014414:	2200      	movs	r2, #0
 8014416:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8014418:	4b5b      	ldr	r3, [pc, #364]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 801441a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801441e:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014420:	4b59      	ldr	r3, [pc, #356]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 8014422:	2200      	movs	r2, #0
 8014424:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014426:	4b58      	ldr	r3, [pc, #352]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 8014428:	2200      	movs	r2, #0
 801442a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 801442c:	4856      	ldr	r0, [pc, #344]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 801442e:	f001 fa23 	bl	8015878 <HAL_DMA_Init>
 8014432:	4603      	mov	r3, r0
 8014434:	2b00      	cmp	r3, #0
 8014436:	d001      	beq.n	801443c <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8014438:	f7fe ff7e 	bl	8013338 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	4a52      	ldr	r2, [pc, #328]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 8014440:	679a      	str	r2, [r3, #120]	; 0x78
 8014442:	4a51      	ldr	r2, [pc, #324]	; (8014588 <HAL_UART_MspInit+0x2f0>)
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8014448:	2200      	movs	r2, #0
 801444a:	2100      	movs	r1, #0
 801444c:	2053      	movs	r0, #83	; 0x53
 801444e:	f001 f9eb 	bl	8015828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8014452:	2053      	movs	r0, #83	; 0x53
 8014454:	f001 fa02 	bl	801585c <HAL_NVIC_EnableIRQ>
}
 8014458:	e086      	b.n	8014568 <HAL_UART_MspInit+0x2d0>
  else if(uartHandle->Instance==USART2)
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	4a4c      	ldr	r2, [pc, #304]	; (8014590 <HAL_UART_MspInit+0x2f8>)
 8014460:	4293      	cmp	r3, r2
 8014462:	d14d      	bne.n	8014500 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART2_CLK_ENABLE();
 8014464:	4b43      	ldr	r3, [pc, #268]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 8014466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801446a:	4a42      	ldr	r2, [pc, #264]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 801446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014470:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014474:	4b3f      	ldr	r3, [pc, #252]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 8014476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801447e:	61bb      	str	r3, [r7, #24]
 8014480:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014482:	4b3c      	ldr	r3, [pc, #240]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 8014484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014488:	4a3a      	ldr	r2, [pc, #232]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 801448a:	f043 0301 	orr.w	r3, r3, #1
 801448e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014492:	4b38      	ldr	r3, [pc, #224]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 8014494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014498:	f003 0301 	and.w	r3, r3, #1
 801449c:	617b      	str	r3, [r7, #20]
 801449e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80144a0:	4b34      	ldr	r3, [pc, #208]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80144a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80144a6:	4a33      	ldr	r2, [pc, #204]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80144a8:	f043 0308 	orr.w	r3, r3, #8
 80144ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80144b0:	4b30      	ldr	r3, [pc, #192]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 80144b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80144b6:	f003 0308 	and.w	r3, r3, #8
 80144ba:	613b      	str	r3, [r7, #16]
 80144bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TELEM_CTS_Pin|TELEM_RX_Pin;
 80144be:	2309      	movs	r3, #9
 80144c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144c2:	2302      	movs	r3, #2
 80144c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144c6:	2300      	movs	r3, #0
 80144c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80144ca:	2300      	movs	r3, #0
 80144cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80144ce:	2307      	movs	r3, #7
 80144d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80144d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80144d6:	4619      	mov	r1, r3
 80144d8:	482e      	ldr	r0, [pc, #184]	; (8014594 <HAL_UART_MspInit+0x2fc>)
 80144da:	f003 fd03 	bl	8017ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TELEM_RTS_Pin|TELEM_TX_Pin;
 80144de:	2330      	movs	r3, #48	; 0x30
 80144e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144e2:	2302      	movs	r3, #2
 80144e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144e6:	2300      	movs	r3, #0
 80144e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80144ea:	2300      	movs	r3, #0
 80144ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80144ee:	2307      	movs	r3, #7
 80144f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80144f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80144f6:	4619      	mov	r1, r3
 80144f8:	4827      	ldr	r0, [pc, #156]	; (8014598 <HAL_UART_MspInit+0x300>)
 80144fa:	f003 fcf3 	bl	8017ee4 <HAL_GPIO_Init>
}
 80144fe:	e033      	b.n	8014568 <HAL_UART_MspInit+0x2d0>
  else if(uartHandle->Instance==USART3)
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	4a25      	ldr	r2, [pc, #148]	; (801459c <HAL_UART_MspInit+0x304>)
 8014506:	4293      	cmp	r3, r2
 8014508:	d12e      	bne.n	8014568 <HAL_UART_MspInit+0x2d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 801450a:	4b1a      	ldr	r3, [pc, #104]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 801450c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014510:	4a18      	ldr	r2, [pc, #96]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 8014512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014516:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801451a:	4b16      	ldr	r3, [pc, #88]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 801451c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014524:	60fb      	str	r3, [r7, #12]
 8014526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014528:	4b12      	ldr	r3, [pc, #72]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 801452a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801452e:	4a11      	ldr	r2, [pc, #68]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 8014530:	f043 0308 	orr.w	r3, r3, #8
 8014534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014538:	4b0e      	ldr	r3, [pc, #56]	; (8014574 <HAL_UART_MspInit+0x2dc>)
 801453a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801453e:	f003 0308 	and.w	r3, r3, #8
 8014542:	60bb      	str	r3, [r7, #8]
 8014544:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8014546:	f44f 7340 	mov.w	r3, #768	; 0x300
 801454a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801454c:	2302      	movs	r3, #2
 801454e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014550:	2300      	movs	r3, #0
 8014552:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014554:	2300      	movs	r3, #0
 8014556:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8014558:	2307      	movs	r3, #7
 801455a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801455c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014560:	4619      	mov	r1, r3
 8014562:	480d      	ldr	r0, [pc, #52]	; (8014598 <HAL_UART_MspInit+0x300>)
 8014564:	f003 fcbe 	bl	8017ee4 <HAL_GPIO_Init>
}
 8014568:	bf00      	nop
 801456a:	3740      	adds	r7, #64	; 0x40
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}
 8014570:	40007800 	.word	0x40007800
 8014574:	58024400 	.word	0x58024400
 8014578:	58021000 	.word	0x58021000
 801457c:	2400c790 	.word	0x2400c790
 8014580:	40020028 	.word	0x40020028
 8014584:	40007c00 	.word	0x40007c00
 8014588:	2400c808 	.word	0x2400c808
 801458c:	40020010 	.word	0x40020010
 8014590:	40004400 	.word	0x40004400
 8014594:	58020000 	.word	0x58020000
 8014598:	58020c00 	.word	0x58020c00
 801459c:	40004800 	.word	0x40004800

080145a0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80145a4:	4b15      	ldr	r3, [pc, #84]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145a6:	4a16      	ldr	r2, [pc, #88]	; (8014600 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80145a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80145aa:	4b14      	ldr	r3, [pc, #80]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145ac:	2209      	movs	r2, #9
 80145ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80145b0:	4b12      	ldr	r3, [pc, #72]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145b2:	2202      	movs	r2, #2
 80145b4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80145b6:	4b11      	ldr	r3, [pc, #68]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145b8:	2200      	movs	r2, #0
 80145ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80145bc:	4b0f      	ldr	r3, [pc, #60]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145be:	2202      	movs	r2, #2
 80145c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80145c2:	4b0e      	ldr	r3, [pc, #56]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145c4:	2201      	movs	r2, #1
 80145c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80145c8:	4b0c      	ldr	r3, [pc, #48]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145ca:	2200      	movs	r2, #0
 80145cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80145ce:	4b0b      	ldr	r3, [pc, #44]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145d0:	2200      	movs	r2, #0
 80145d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80145d4:	4b09      	ldr	r3, [pc, #36]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145d6:	2201      	movs	r2, #1
 80145d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80145da:	4b08      	ldr	r3, [pc, #32]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145dc:	2201      	movs	r2, #1
 80145de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80145e0:	4b06      	ldr	r3, [pc, #24]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145e2:	2200      	movs	r2, #0
 80145e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80145e6:	4805      	ldr	r0, [pc, #20]	; (80145fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80145e8:	f006 fac7 	bl	801ab7a <HAL_PCD_Init>
 80145ec:	4603      	mov	r3, r0
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d001      	beq.n	80145f6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80145f2:	f7fe fea1 	bl	8013338 <Error_Handler>
  }

}
 80145f6:	bf00      	nop
 80145f8:	bd80      	pop	{r7, pc}
 80145fa:	bf00      	nop
 80145fc:	2400c998 	.word	0x2400c998
 8014600:	40080000 	.word	0x40080000

08014604 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b08a      	sub	sp, #40	; 0x28
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801460c:	f107 0314 	add.w	r3, r7, #20
 8014610:	2200      	movs	r2, #0
 8014612:	601a      	str	r2, [r3, #0]
 8014614:	605a      	str	r2, [r3, #4]
 8014616:	609a      	str	r2, [r3, #8]
 8014618:	60da      	str	r2, [r3, #12]
 801461a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	4a21      	ldr	r2, [pc, #132]	; (80146a8 <HAL_PCD_MspInit+0xa4>)
 8014622:	4293      	cmp	r3, r2
 8014624:	d13b      	bne.n	801469e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014626:	4b21      	ldr	r3, [pc, #132]	; (80146ac <HAL_PCD_MspInit+0xa8>)
 8014628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801462c:	4a1f      	ldr	r2, [pc, #124]	; (80146ac <HAL_PCD_MspInit+0xa8>)
 801462e:	f043 0301 	orr.w	r3, r3, #1
 8014632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014636:	4b1d      	ldr	r3, [pc, #116]	; (80146ac <HAL_PCD_MspInit+0xa8>)
 8014638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801463c:	f003 0301 	and.w	r3, r3, #1
 8014640:	613b      	str	r3, [r7, #16]
 8014642:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8014644:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8014648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801464a:	2302      	movs	r3, #2
 801464c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801464e:	2300      	movs	r3, #0
 8014650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014652:	2300      	movs	r3, #0
 8014654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014656:	230a      	movs	r3, #10
 8014658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801465a:	f107 0314 	add.w	r3, r7, #20
 801465e:	4619      	mov	r1, r3
 8014660:	4813      	ldr	r0, [pc, #76]	; (80146b0 <HAL_PCD_MspInit+0xac>)
 8014662:	f003 fc3f 	bl	8017ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8014666:	f44f 7300 	mov.w	r3, #512	; 0x200
 801466a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801466c:	2300      	movs	r3, #0
 801466e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014670:	2300      	movs	r3, #0
 8014672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014674:	f107 0314 	add.w	r3, r7, #20
 8014678:	4619      	mov	r1, r3
 801467a:	480d      	ldr	r0, [pc, #52]	; (80146b0 <HAL_PCD_MspInit+0xac>)
 801467c:	f003 fc32 	bl	8017ee4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014680:	4b0a      	ldr	r3, [pc, #40]	; (80146ac <HAL_PCD_MspInit+0xa8>)
 8014682:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014686:	4a09      	ldr	r2, [pc, #36]	; (80146ac <HAL_PCD_MspInit+0xa8>)
 8014688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801468c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014690:	4b06      	ldr	r3, [pc, #24]	; (80146ac <HAL_PCD_MspInit+0xa8>)
 8014692:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801469a:	60fb      	str	r3, [r7, #12]
 801469c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801469e:	bf00      	nop
 80146a0:	3728      	adds	r7, #40	; 0x28
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	40080000 	.word	0x40080000
 80146ac:	58024400 	.word	0x58024400
 80146b0:	58020000 	.word	0x58020000

080146b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80146b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80146ec <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80146b8:	f7ff f8b0 	bl	801381c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80146bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80146be:	e003      	b.n	80146c8 <LoopCopyDataInit>

080146c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80146c0:	4b0b      	ldr	r3, [pc, #44]	; (80146f0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80146c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80146c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80146c6:	3104      	adds	r1, #4

080146c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80146c8:	480a      	ldr	r0, [pc, #40]	; (80146f4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80146ca:	4b0b      	ldr	r3, [pc, #44]	; (80146f8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80146cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80146ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80146d0:	d3f6      	bcc.n	80146c0 <CopyDataInit>
  ldr  r2, =_sbss
 80146d2:	4a0a      	ldr	r2, [pc, #40]	; (80146fc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80146d4:	e002      	b.n	80146dc <LoopFillZerobss>

080146d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80146d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80146d8:	f842 3b04 	str.w	r3, [r2], #4

080146dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80146dc:	4b08      	ldr	r3, [pc, #32]	; (8014700 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80146de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80146e0:	d3f9      	bcc.n	80146d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80146e2:	f018 fd85 	bl	802d1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80146e6:	f7fe fcf1 	bl	80130cc <main>
  bx  lr    
 80146ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80146ec:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80146f0:	0802f824 	.word	0x0802f824
  ldr  r0, =_sdata
 80146f4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80146f8:	24000714 	.word	0x24000714
  ldr  r2, =_sbss
 80146fc:	24000718 	.word	0x24000718
  ldr  r3, = _ebss
 8014700:	2400d254 	.word	0x2400d254

08014704 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014704:	e7fe      	b.n	8014704 <ADC3_IRQHandler>
	...

08014708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801470e:	2003      	movs	r0, #3
 8014710:	f001 f87f 	bl	8015812 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014714:	f007 f98a 	bl	801ba2c <HAL_RCC_GetSysClockFreq>
 8014718:	4601      	mov	r1, r0
 801471a:	4b15      	ldr	r3, [pc, #84]	; (8014770 <HAL_Init+0x68>)
 801471c:	699b      	ldr	r3, [r3, #24]
 801471e:	0a1b      	lsrs	r3, r3, #8
 8014720:	f003 030f 	and.w	r3, r3, #15
 8014724:	4a13      	ldr	r2, [pc, #76]	; (8014774 <HAL_Init+0x6c>)
 8014726:	5cd3      	ldrb	r3, [r2, r3]
 8014728:	f003 031f 	and.w	r3, r3, #31
 801472c:	fa21 f303 	lsr.w	r3, r1, r3
 8014730:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014732:	4b0f      	ldr	r3, [pc, #60]	; (8014770 <HAL_Init+0x68>)
 8014734:	699b      	ldr	r3, [r3, #24]
 8014736:	f003 030f 	and.w	r3, r3, #15
 801473a:	4a0e      	ldr	r2, [pc, #56]	; (8014774 <HAL_Init+0x6c>)
 801473c:	5cd3      	ldrb	r3, [r2, r3]
 801473e:	f003 031f 	and.w	r3, r3, #31
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	fa22 f303 	lsr.w	r3, r2, r3
 8014748:	4a0b      	ldr	r2, [pc, #44]	; (8014778 <HAL_Init+0x70>)
 801474a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801474c:	4a0b      	ldr	r2, [pc, #44]	; (801477c <HAL_Init+0x74>)
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014752:	2000      	movs	r0, #0
 8014754:	f7fe feb8 	bl	80134c8 <HAL_InitTick>
 8014758:	4603      	mov	r3, r0
 801475a:	2b00      	cmp	r3, #0
 801475c:	d001      	beq.n	8014762 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801475e:	2301      	movs	r3, #1
 8014760:	e002      	b.n	8014768 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8014762:	f7fe fe97 	bl	8013494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8014766:	2300      	movs	r3, #0
}
 8014768:	4618      	mov	r0, r3
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	58024400 	.word	0x58024400
 8014774:	0802efe4 	.word	0x0802efe4
 8014778:	2400069c 	.word	0x2400069c
 801477c:	24000698 	.word	0x24000698

08014780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014780:	b480      	push	{r7}
 8014782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8014784:	4b06      	ldr	r3, [pc, #24]	; (80147a0 <HAL_IncTick+0x20>)
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	461a      	mov	r2, r3
 801478a:	4b06      	ldr	r3, [pc, #24]	; (80147a4 <HAL_IncTick+0x24>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	4413      	add	r3, r2
 8014790:	4a04      	ldr	r2, [pc, #16]	; (80147a4 <HAL_IncTick+0x24>)
 8014792:	6013      	str	r3, [r2, #0]
}
 8014794:	bf00      	nop
 8014796:	46bd      	mov	sp, r7
 8014798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479c:	4770      	bx	lr
 801479e:	bf00      	nop
 80147a0:	240006a4 	.word	0x240006a4
 80147a4:	2400cda0 	.word	0x2400cda0

080147a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80147a8:	b480      	push	{r7}
 80147aa:	af00      	add	r7, sp, #0
  return uwTick;
 80147ac:	4b03      	ldr	r3, [pc, #12]	; (80147bc <HAL_GetTick+0x14>)
 80147ae:	681b      	ldr	r3, [r3, #0]
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	46bd      	mov	sp, r7
 80147b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b8:	4770      	bx	lr
 80147ba:	bf00      	nop
 80147bc:	2400cda0 	.word	0x2400cda0

080147c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b084      	sub	sp, #16
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80147c8:	f7ff ffee 	bl	80147a8 <HAL_GetTick>
 80147cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d8:	d005      	beq.n	80147e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80147da:	4b09      	ldr	r3, [pc, #36]	; (8014800 <HAL_Delay+0x40>)
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	461a      	mov	r2, r3
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	4413      	add	r3, r2
 80147e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80147e6:	bf00      	nop
 80147e8:	f7ff ffde 	bl	80147a8 <HAL_GetTick>
 80147ec:	4602      	mov	r2, r0
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	1ad3      	subs	r3, r2, r3
 80147f2:	68fa      	ldr	r2, [r7, #12]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d8f7      	bhi.n	80147e8 <HAL_Delay+0x28>
  {
  }
}
 80147f8:	bf00      	nop
 80147fa:	3710      	adds	r7, #16
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}
 8014800:	240006a4 	.word	0x240006a4

08014804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8014804:	b480      	push	{r7}
 8014806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8014808:	4b03      	ldr	r3, [pc, #12]	; (8014818 <HAL_GetREVID+0x14>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	0c1b      	lsrs	r3, r3, #16
}
 801480e:	4618      	mov	r0, r3
 8014810:	46bd      	mov	sp, r7
 8014812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014816:	4770      	bx	lr
 8014818:	5c001000 	.word	0x5c001000

0801481c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 801481c:	b480      	push	{r7}
 801481e:	b083      	sub	sp, #12
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8014826:	4b07      	ldr	r3, [pc, #28]	; (8014844 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8014828:	685a      	ldr	r2, [r3, #4]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	43db      	mvns	r3, r3
 801482e:	401a      	ands	r2, r3
 8014830:	4904      	ldr	r1, [pc, #16]	; (8014844 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	4313      	orrs	r3, r2
 8014836:	604b      	str	r3, [r1, #4]
}
 8014838:	bf00      	nop
 801483a:	370c      	adds	r7, #12
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr
 8014844:	58000400 	.word	0x58000400

08014848 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8014848:	b480      	push	{r7}
 801484a:	b083      	sub	sp, #12
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	689b      	ldr	r3, [r3, #8]
 8014856:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801485a:	683b      	ldr	r3, [r7, #0]
 801485c:	431a      	orrs	r2, r3
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	609a      	str	r2, [r3, #8]
}
 8014862:	bf00      	nop
 8014864:	370c      	adds	r7, #12
 8014866:	46bd      	mov	sp, r7
 8014868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486c:	4770      	bx	lr

0801486e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801486e:	b480      	push	{r7}
 8014870:	b083      	sub	sp, #12
 8014872:	af00      	add	r7, sp, #0
 8014874:	6078      	str	r0, [r7, #4]
 8014876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	689b      	ldr	r3, [r3, #8]
 801487c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	431a      	orrs	r2, r3
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	609a      	str	r2, [r3, #8]
}
 8014888:	bf00      	nop
 801488a:	370c      	adds	r7, #12
 801488c:	46bd      	mov	sp, r7
 801488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014892:	4770      	bx	lr

08014894 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8014894:	b480      	push	{r7}
 8014896:	b083      	sub	sp, #12
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	689b      	ldr	r3, [r3, #8]
 80148a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	370c      	adds	r7, #12
 80148a8:	46bd      	mov	sp, r7
 80148aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ae:	4770      	bx	lr

080148b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80148b0:	b480      	push	{r7}
 80148b2:	b087      	sub	sp, #28
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	60f8      	str	r0, [r7, #12]
 80148b8:	60b9      	str	r1, [r7, #8]
 80148ba:	607a      	str	r2, [r7, #4]
 80148bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	3360      	adds	r3, #96	; 0x60
 80148c2:	461a      	mov	r2, r3
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	009b      	lsls	r3, r3, #2
 80148c8:	4413      	add	r3, r2
 80148ca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	430b      	orrs	r3, r1
 80148de:	431a      	orrs	r2, r3
 80148e0:	697b      	ldr	r3, [r7, #20]
 80148e2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80148e4:	bf00      	nop
 80148e6:	371c      	adds	r7, #28
 80148e8:	46bd      	mov	sp, r7
 80148ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ee:	4770      	bx	lr

080148f0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80148f0:	b480      	push	{r7}
 80148f2:	b085      	sub	sp, #20
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	60f8      	str	r0, [r7, #12]
 80148f8:	60b9      	str	r1, [r7, #8]
 80148fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	691b      	ldr	r3, [r3, #16]
 8014900:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	f003 031f 	and.w	r3, r3, #31
 801490a:	6879      	ldr	r1, [r7, #4]
 801490c:	fa01 f303 	lsl.w	r3, r1, r3
 8014910:	431a      	orrs	r2, r3
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	611a      	str	r2, [r3, #16]
}
 8014916:	bf00      	nop
 8014918:	3714      	adds	r7, #20
 801491a:	46bd      	mov	sp, r7
 801491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014920:	4770      	bx	lr

08014922 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8014922:	b480      	push	{r7}
 8014924:	b087      	sub	sp, #28
 8014926:	af00      	add	r7, sp, #0
 8014928:	60f8      	str	r0, [r7, #12]
 801492a:	60b9      	str	r1, [r7, #8]
 801492c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	3360      	adds	r3, #96	; 0x60
 8014932:	461a      	mov	r2, r3
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	009b      	lsls	r3, r3, #2
 8014938:	4413      	add	r3, r2
 801493a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	431a      	orrs	r2, r3
 8014948:	697b      	ldr	r3, [r7, #20]
 801494a:	601a      	str	r2, [r3, #0]
  }
}
 801494c:	bf00      	nop
 801494e:	371c      	adds	r7, #28
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr

08014958 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8014958:	b480      	push	{r7}
 801495a:	b087      	sub	sp, #28
 801495c:	af00      	add	r7, sp, #0
 801495e:	60f8      	str	r0, [r7, #12]
 8014960:	60b9      	str	r1, [r7, #8]
 8014962:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	3330      	adds	r3, #48	; 0x30
 8014968:	461a      	mov	r2, r3
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	0a1b      	lsrs	r3, r3, #8
 801496e:	009b      	lsls	r3, r3, #2
 8014970:	f003 030c 	and.w	r3, r3, #12
 8014974:	4413      	add	r3, r2
 8014976:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	f003 031f 	and.w	r3, r3, #31
 8014982:	211f      	movs	r1, #31
 8014984:	fa01 f303 	lsl.w	r3, r1, r3
 8014988:	43db      	mvns	r3, r3
 801498a:	401a      	ands	r2, r3
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	0e9b      	lsrs	r3, r3, #26
 8014990:	f003 011f 	and.w	r1, r3, #31
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	f003 031f 	and.w	r3, r3, #31
 801499a:	fa01 f303 	lsl.w	r3, r1, r3
 801499e:	431a      	orrs	r2, r3
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80149a4:	bf00      	nop
 80149a6:	371c      	adds	r7, #28
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80149b0:	b480      	push	{r7}
 80149b2:	b087      	sub	sp, #28
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	3314      	adds	r3, #20
 80149c0:	461a      	mov	r2, r3
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	0e5b      	lsrs	r3, r3, #25
 80149c6:	009b      	lsls	r3, r3, #2
 80149c8:	f003 0304 	and.w	r3, r3, #4
 80149cc:	4413      	add	r3, r2
 80149ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	0d1b      	lsrs	r3, r3, #20
 80149d8:	f003 031f 	and.w	r3, r3, #31
 80149dc:	2107      	movs	r1, #7
 80149de:	fa01 f303 	lsl.w	r3, r1, r3
 80149e2:	43db      	mvns	r3, r3
 80149e4:	401a      	ands	r2, r3
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	0d1b      	lsrs	r3, r3, #20
 80149ea:	f003 031f 	and.w	r3, r3, #31
 80149ee:	6879      	ldr	r1, [r7, #4]
 80149f0:	fa01 f303 	lsl.w	r3, r1, r3
 80149f4:	431a      	orrs	r2, r3
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80149fa:	bf00      	nop
 80149fc:	371c      	adds	r7, #28
 80149fe:	46bd      	mov	sp, r7
 8014a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a04:	4770      	bx	lr
	...

08014a08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8014a08:	b480      	push	{r7}
 8014a0a:	b085      	sub	sp, #20
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a20:	43db      	mvns	r3, r3
 8014a22:	401a      	ands	r2, r3
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f003 0318 	and.w	r3, r3, #24
 8014a2a:	4908      	ldr	r1, [pc, #32]	; (8014a4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8014a2c:	40d9      	lsrs	r1, r3
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	400b      	ands	r3, r1
 8014a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a36:	431a      	orrs	r2, r3
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8014a3e:	bf00      	nop
 8014a40:	3714      	adds	r7, #20
 8014a42:	46bd      	mov	sp, r7
 8014a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop
 8014a4c:	000fffff 	.word	0x000fffff

08014a50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8014a50:	b480      	push	{r7}
 8014a52:	b083      	sub	sp, #12
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	689a      	ldr	r2, [r3, #8]
 8014a5c:	4b04      	ldr	r3, [pc, #16]	; (8014a70 <LL_ADC_DisableDeepPowerDown+0x20>)
 8014a5e:	4013      	ands	r3, r2
 8014a60:	687a      	ldr	r2, [r7, #4]
 8014a62:	6093      	str	r3, [r2, #8]
}
 8014a64:	bf00      	nop
 8014a66:	370c      	adds	r7, #12
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6e:	4770      	bx	lr
 8014a70:	5fffffc0 	.word	0x5fffffc0

08014a74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8014a74:	b480      	push	{r7}
 8014a76:	b083      	sub	sp, #12
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	689b      	ldr	r3, [r3, #8]
 8014a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014a88:	d101      	bne.n	8014a8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	e000      	b.n	8014a90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8014a8e:	2300      	movs	r3, #0
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	370c      	adds	r7, #12
 8014a94:	46bd      	mov	sp, r7
 8014a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9a:	4770      	bx	lr

08014a9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8014a9c:	b480      	push	{r7}
 8014a9e:	b083      	sub	sp, #12
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	689a      	ldr	r2, [r3, #8]
 8014aa8:	4b05      	ldr	r3, [pc, #20]	; (8014ac0 <LL_ADC_EnableInternalRegulator+0x24>)
 8014aaa:	4013      	ands	r3, r2
 8014aac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8014ab4:	bf00      	nop
 8014ab6:	370c      	adds	r7, #12
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr
 8014ac0:	6fffffc0 	.word	0x6fffffc0

08014ac4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b083      	sub	sp, #12
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	689b      	ldr	r3, [r3, #8]
 8014ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014ad8:	d101      	bne.n	8014ade <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8014ada:	2301      	movs	r3, #1
 8014adc:	e000      	b.n	8014ae0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8014ade:	2300      	movs	r3, #0
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	370c      	adds	r7, #12
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr

08014aec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b083      	sub	sp, #12
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	689b      	ldr	r3, [r3, #8]
 8014af8:	f003 0301 	and.w	r3, r3, #1
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	d101      	bne.n	8014b04 <LL_ADC_IsEnabled+0x18>
 8014b00:	2301      	movs	r3, #1
 8014b02:	e000      	b.n	8014b06 <LL_ADC_IsEnabled+0x1a>
 8014b04:	2300      	movs	r3, #0
}
 8014b06:	4618      	mov	r0, r3
 8014b08:	370c      	adds	r7, #12
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b10:	4770      	bx	lr

08014b12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8014b12:	b480      	push	{r7}
 8014b14:	b083      	sub	sp, #12
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	689b      	ldr	r3, [r3, #8]
 8014b1e:	f003 0304 	and.w	r3, r3, #4
 8014b22:	2b04      	cmp	r3, #4
 8014b24:	d101      	bne.n	8014b2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8014b26:	2301      	movs	r3, #1
 8014b28:	e000      	b.n	8014b2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8014b2a:	2300      	movs	r3, #0
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	370c      	adds	r7, #12
 8014b30:	46bd      	mov	sp, r7
 8014b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b36:	4770      	bx	lr

08014b38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8014b38:	b480      	push	{r7}
 8014b3a:	b083      	sub	sp, #12
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	689b      	ldr	r3, [r3, #8]
 8014b44:	f003 0308 	and.w	r3, r3, #8
 8014b48:	2b08      	cmp	r3, #8
 8014b4a:	d101      	bne.n	8014b50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	e000      	b.n	8014b52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8014b50:	2300      	movs	r3, #0
}
 8014b52:	4618      	mov	r0, r3
 8014b54:	370c      	adds	r7, #12
 8014b56:	46bd      	mov	sp, r7
 8014b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5c:	4770      	bx	lr
	...

08014b60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8014b60:	b590      	push	{r4, r7, lr}
 8014b62:	b089      	sub	sp, #36	; 0x24
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014b68:	2300      	movs	r3, #0
 8014b6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d101      	bne.n	8014b7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8014b76:	2301      	movs	r3, #1
 8014b78:	e18e      	b.n	8014e98 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	68db      	ldr	r3, [r3, #12]
 8014b7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d109      	bne.n	8014b9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7fd fed9 	bl	8012940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2200      	movs	r2, #0
 8014b92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2200      	movs	r2, #0
 8014b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7ff ff67 	bl	8014a74 <LL_ADC_IsDeepPowerDownEnabled>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d004      	beq.n	8014bb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7ff ff4d 	bl	8014a50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7ff ff82 	bl	8014ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d113      	bne.n	8014bee <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7ff ff66 	bl	8014a9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8014bd0:	4b9a      	ldr	r3, [pc, #616]	; (8014e3c <HAL_ADC_Init+0x2dc>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	099b      	lsrs	r3, r3, #6
 8014bd6:	4a9a      	ldr	r2, [pc, #616]	; (8014e40 <HAL_ADC_Init+0x2e0>)
 8014bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8014bdc:	099b      	lsrs	r3, r3, #6
 8014bde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8014be0:	e002      	b.n	8014be8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	3b01      	subs	r3, #1
 8014be6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d1f9      	bne.n	8014be2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7ff ff66 	bl	8014ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d10d      	bne.n	8014c1a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c02:	f043 0210 	orr.w	r2, r3, #16
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c0e:	f043 0201 	orr.w	r2, r3, #1
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8014c16:	2301      	movs	r3, #1
 8014c18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7ff ff77 	bl	8014b12 <LL_ADC_REG_IsConversionOngoing>
 8014c24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c2a:	f003 0310 	and.w	r3, r3, #16
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	f040 8129 	bne.w	8014e86 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	f040 8125 	bne.w	8014e86 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8014c44:	f043 0202 	orr.w	r2, r3, #2
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7ff ff4b 	bl	8014aec <LL_ADC_IsEnabled>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d136      	bne.n	8014cca <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	4a78      	ldr	r2, [pc, #480]	; (8014e44 <HAL_ADC_Init+0x2e4>)
 8014c62:	4293      	cmp	r3, r2
 8014c64:	d004      	beq.n	8014c70 <HAL_ADC_Init+0x110>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	4a77      	ldr	r2, [pc, #476]	; (8014e48 <HAL_ADC_Init+0x2e8>)
 8014c6c:	4293      	cmp	r3, r2
 8014c6e:	d10e      	bne.n	8014c8e <HAL_ADC_Init+0x12e>
 8014c70:	4874      	ldr	r0, [pc, #464]	; (8014e44 <HAL_ADC_Init+0x2e4>)
 8014c72:	f7ff ff3b 	bl	8014aec <LL_ADC_IsEnabled>
 8014c76:	4604      	mov	r4, r0
 8014c78:	4873      	ldr	r0, [pc, #460]	; (8014e48 <HAL_ADC_Init+0x2e8>)
 8014c7a:	f7ff ff37 	bl	8014aec <LL_ADC_IsEnabled>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	4323      	orrs	r3, r4
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	bf0c      	ite	eq
 8014c86:	2301      	moveq	r3, #1
 8014c88:	2300      	movne	r3, #0
 8014c8a:	b2db      	uxtb	r3, r3
 8014c8c:	e008      	b.n	8014ca0 <HAL_ADC_Init+0x140>
 8014c8e:	486f      	ldr	r0, [pc, #444]	; (8014e4c <HAL_ADC_Init+0x2ec>)
 8014c90:	f7ff ff2c 	bl	8014aec <LL_ADC_IsEnabled>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	bf0c      	ite	eq
 8014c9a:	2301      	moveq	r3, #1
 8014c9c:	2300      	movne	r3, #0
 8014c9e:	b2db      	uxtb	r3, r3
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d012      	beq.n	8014cca <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	4a66      	ldr	r2, [pc, #408]	; (8014e44 <HAL_ADC_Init+0x2e4>)
 8014caa:	4293      	cmp	r3, r2
 8014cac:	d004      	beq.n	8014cb8 <HAL_ADC_Init+0x158>
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	4a65      	ldr	r2, [pc, #404]	; (8014e48 <HAL_ADC_Init+0x2e8>)
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d101      	bne.n	8014cbc <HAL_ADC_Init+0x15c>
 8014cb8:	4a65      	ldr	r2, [pc, #404]	; (8014e50 <HAL_ADC_Init+0x2f0>)
 8014cba:	e000      	b.n	8014cbe <HAL_ADC_Init+0x15e>
 8014cbc:	4a65      	ldr	r2, [pc, #404]	; (8014e54 <HAL_ADC_Init+0x2f4>)
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	4610      	mov	r0, r2
 8014cc6:	f7ff fdbf 	bl	8014848 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8014cca:	f7ff fd9b 	bl	8014804 <HAL_GetREVID>
 8014cce:	4602      	mov	r2, r0
 8014cd0:	f241 0303 	movw	r3, #4099	; 0x1003
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d914      	bls.n	8014d02 <HAL_ADC_Init+0x1a2>
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	689b      	ldr	r3, [r3, #8]
 8014cdc:	2b10      	cmp	r3, #16
 8014cde:	d110      	bne.n	8014d02 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	7d5b      	ldrb	r3, [r3, #21]
 8014ce4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8014cea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8014cf0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	7f1b      	ldrb	r3, [r3, #28]
 8014cf6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8014cf8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8014cfa:	f043 030c 	orr.w	r3, r3, #12
 8014cfe:	61bb      	str	r3, [r7, #24]
 8014d00:	e00d      	b.n	8014d1e <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	7d5b      	ldrb	r3, [r3, #21]
 8014d06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8014d0c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8014d12:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	7f1b      	ldrb	r3, [r3, #28]
 8014d18:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8014d1a:	4313      	orrs	r3, r2
 8014d1c:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	7f1b      	ldrb	r3, [r3, #28]
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	d106      	bne.n	8014d34 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	6a1b      	ldr	r3, [r3, #32]
 8014d2a:	3b01      	subs	r3, #1
 8014d2c:	045b      	lsls	r3, r3, #17
 8014d2e:	69ba      	ldr	r2, [r7, #24]
 8014d30:	4313      	orrs	r3, r2
 8014d32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d009      	beq.n	8014d50 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d40:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8014d4a:	69ba      	ldr	r2, [r7, #24]
 8014d4c:	4313      	orrs	r3, r2
 8014d4e:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	68da      	ldr	r2, [r3, #12]
 8014d56:	4b40      	ldr	r3, [pc, #256]	; (8014e58 <HAL_ADC_Init+0x2f8>)
 8014d58:	4013      	ands	r3, r2
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	6812      	ldr	r2, [r2, #0]
 8014d5e:	69b9      	ldr	r1, [r7, #24]
 8014d60:	430b      	orrs	r3, r1
 8014d62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7ff fed2 	bl	8014b12 <LL_ADC_REG_IsConversionOngoing>
 8014d6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7ff fedf 	bl	8014b38 <LL_ADC_INJ_IsConversionOngoing>
 8014d7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d14a      	bne.n	8014e18 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d147      	bne.n	8014e18 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	7d1b      	ldrb	r3, [r3, #20]
 8014d8c:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8014d92:	4313      	orrs	r3, r2
 8014d94:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	68da      	ldr	r2, [r3, #12]
 8014d9c:	4b2f      	ldr	r3, [pc, #188]	; (8014e5c <HAL_ADC_Init+0x2fc>)
 8014d9e:	4013      	ands	r3, r2
 8014da0:	687a      	ldr	r2, [r7, #4]
 8014da2:	6812      	ldr	r2, [r2, #0]
 8014da4:	69b9      	ldr	r1, [r7, #24]
 8014da6:	430b      	orrs	r3, r1
 8014da8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014db0:	2b01      	cmp	r3, #1
 8014db2:	d11b      	bne.n	8014dec <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014db8:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	691a      	ldr	r2, [r3, #16]
 8014dc0:	4b27      	ldr	r3, [pc, #156]	; (8014e60 <HAL_ADC_Init+0x300>)
 8014dc2:	4013      	ands	r3, r2
 8014dc4:	687a      	ldr	r2, [r7, #4]
 8014dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8014dc8:	3a01      	subs	r2, #1
 8014dca:	0411      	lsls	r1, r2, #16
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8014dd0:	4311      	orrs	r1, r2
 8014dd2:	687a      	ldr	r2, [r7, #4]
 8014dd4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8014dd6:	4311      	orrs	r1, r2
 8014dd8:	687a      	ldr	r2, [r7, #4]
 8014dda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014ddc:	430a      	orrs	r2, r1
 8014dde:	431a      	orrs	r2, r3
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	f042 0201 	orr.w	r2, r2, #1
 8014de8:	611a      	str	r2, [r3, #16]
 8014dea:	e007      	b.n	8014dfc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	691a      	ldr	r2, [r3, #16]
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	f022 0201 	bic.w	r2, r2, #1
 8014dfa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	691b      	ldr	r3, [r3, #16]
 8014e02:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	430a      	orrs	r2, r1
 8014e10:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f000 fb58 	bl	80154c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	68db      	ldr	r3, [r3, #12]
 8014e1c:	2b01      	cmp	r3, #1
 8014e1e:	d121      	bne.n	8014e64 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e26:	f023 010f 	bic.w	r1, r3, #15
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	699b      	ldr	r3, [r3, #24]
 8014e2e:	1e5a      	subs	r2, r3, #1
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	430a      	orrs	r2, r1
 8014e36:	631a      	str	r2, [r3, #48]	; 0x30
 8014e38:	e01c      	b.n	8014e74 <HAL_ADC_Init+0x314>
 8014e3a:	bf00      	nop
 8014e3c:	24000698 	.word	0x24000698
 8014e40:	053e2d63 	.word	0x053e2d63
 8014e44:	40022000 	.word	0x40022000
 8014e48:	40022100 	.word	0x40022100
 8014e4c:	58026000 	.word	0x58026000
 8014e50:	40022300 	.word	0x40022300
 8014e54:	58026300 	.word	0x58026300
 8014e58:	fff0c003 	.word	0xfff0c003
 8014e5c:	ffffbffc 	.word	0xffffbffc
 8014e60:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	f022 020f 	bic.w	r2, r2, #15
 8014e72:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e78:	f023 0303 	bic.w	r3, r3, #3
 8014e7c:	f043 0201 	orr.w	r2, r3, #1
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	655a      	str	r2, [r3, #84]	; 0x54
 8014e84:	e007      	b.n	8014e96 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e8a:	f043 0210 	orr.w	r2, r3, #16
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8014e92:	2301      	movs	r3, #1
 8014e94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8014e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3724      	adds	r7, #36	; 0x24
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd90      	pop	{r4, r7, pc}

08014ea0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014ea0:	b590      	push	{r4, r7, lr}
 8014ea2:	b099      	sub	sp, #100	; 0x64
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	68db      	ldr	r3, [r3, #12]
 8014eb8:	4a99      	ldr	r2, [pc, #612]	; (8015120 <HAL_ADC_ConfigChannel+0x280>)
 8014eba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d101      	bne.n	8014eca <HAL_ADC_ConfigChannel+0x2a>
 8014ec6:	2302      	movs	r3, #2
 8014ec8:	e2e6      	b.n	8015498 <HAL_ADC_ConfigChannel+0x5f8>
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2201      	movs	r2, #1
 8014ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f7ff fe1b 	bl	8014b12 <LL_ADC_REG_IsConversionOngoing>
 8014edc:	4603      	mov	r3, r0
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	f040 82cb 	bne.w	801547a <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d108      	bne.n	8014f02 <HAL_ADC_ConfigChannel+0x62>
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	0e9b      	lsrs	r3, r3, #26
 8014ef6:	f003 031f 	and.w	r3, r3, #31
 8014efa:	2201      	movs	r2, #1
 8014efc:	fa02 f303 	lsl.w	r3, r2, r3
 8014f00:	e00f      	b.n	8014f22 <HAL_ADC_ConfigChannel+0x82>
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f0a:	fa93 f3a3 	rbit	r3, r3
 8014f0e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8014f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f12:	fab3 f383 	clz	r3, r3
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	f003 031f 	and.w	r3, r3, #31
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	6812      	ldr	r2, [r2, #0]
 8014f26:	69d1      	ldr	r1, [r2, #28]
 8014f28:	687a      	ldr	r2, [r7, #4]
 8014f2a:	6812      	ldr	r2, [r2, #0]
 8014f2c:	430b      	orrs	r3, r1
 8014f2e:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	6818      	ldr	r0, [r3, #0]
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	6859      	ldr	r1, [r3, #4]
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	461a      	mov	r2, r3
 8014f3e:	f7ff fd0b 	bl	8014958 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7ff fde3 	bl	8014b12 <LL_ADC_REG_IsConversionOngoing>
 8014f4c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7ff fdf0 	bl	8014b38 <LL_ADC_INJ_IsConversionOngoing>
 8014f58:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8014f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	f040 80b3 	bne.w	80150c8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8014f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	f040 80af 	bne.w	80150c8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	6818      	ldr	r0, [r3, #0]
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	6819      	ldr	r1, [r3, #0]
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	689b      	ldr	r3, [r3, #8]
 8014f76:	461a      	mov	r2, r3
 8014f78:	f7ff fd1a 	bl	80149b0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8014f7c:	4b69      	ldr	r3, [pc, #420]	; (8015124 <HAL_ADC_ConfigChannel+0x284>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014f88:	d10b      	bne.n	8014fa2 <HAL_ADC_ConfigChannel+0x102>
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	695a      	ldr	r2, [r3, #20]
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	68db      	ldr	r3, [r3, #12]
 8014f94:	089b      	lsrs	r3, r3, #2
 8014f96:	f003 0307 	and.w	r3, r3, #7
 8014f9a:	005b      	lsls	r3, r3, #1
 8014f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8014fa0:	e01d      	b.n	8014fde <HAL_ADC_ConfigChannel+0x13e>
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	f003 0310 	and.w	r3, r3, #16
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d10b      	bne.n	8014fc8 <HAL_ADC_ConfigChannel+0x128>
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	695a      	ldr	r2, [r3, #20]
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	089b      	lsrs	r3, r3, #2
 8014fbc:	f003 0307 	and.w	r3, r3, #7
 8014fc0:	005b      	lsls	r3, r3, #1
 8014fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8014fc6:	e00a      	b.n	8014fde <HAL_ADC_ConfigChannel+0x13e>
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	695a      	ldr	r2, [r3, #20]
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	089b      	lsrs	r3, r3, #2
 8014fd4:	f003 0304 	and.w	r3, r3, #4
 8014fd8:	005b      	lsls	r3, r3, #1
 8014fda:	fa02 f303 	lsl.w	r3, r2, r3
 8014fde:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	691b      	ldr	r3, [r3, #16]
 8014fe4:	2b04      	cmp	r3, #4
 8014fe6:	d027      	beq.n	8015038 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6818      	ldr	r0, [r3, #0]
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	6919      	ldr	r1, [r3, #16]
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ff6:	f7ff fc5b 	bl	80148b0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	6818      	ldr	r0, [r3, #0]
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	6919      	ldr	r1, [r3, #16]
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	7e5b      	ldrb	r3, [r3, #25]
 8015006:	2b01      	cmp	r3, #1
 8015008:	d102      	bne.n	8015010 <HAL_ADC_ConfigChannel+0x170>
 801500a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801500e:	e000      	b.n	8015012 <HAL_ADC_ConfigChannel+0x172>
 8015010:	2300      	movs	r3, #0
 8015012:	461a      	mov	r2, r3
 8015014:	f7ff fc85 	bl	8014922 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	6818      	ldr	r0, [r3, #0]
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	6919      	ldr	r1, [r3, #16]
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	7e1b      	ldrb	r3, [r3, #24]
 8015024:	2b01      	cmp	r3, #1
 8015026:	d102      	bne.n	801502e <HAL_ADC_ConfigChannel+0x18e>
 8015028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801502c:	e000      	b.n	8015030 <HAL_ADC_ConfigChannel+0x190>
 801502e:	2300      	movs	r3, #0
 8015030:	461a      	mov	r2, r3
 8015032:	f7ff fc5d 	bl	80148f0 <LL_ADC_SetDataRightShift>
 8015036:	e047      	b.n	80150c8 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801503e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	069b      	lsls	r3, r3, #26
 8015048:	429a      	cmp	r2, r3
 801504a:	d107      	bne.n	801505c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801505a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	069b      	lsls	r3, r3, #26
 801506c:	429a      	cmp	r2, r3
 801506e:	d107      	bne.n	8015080 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801507e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	069b      	lsls	r3, r3, #26
 8015090:	429a      	cmp	r2, r3
 8015092:	d107      	bne.n	80150a4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80150a2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	069b      	lsls	r3, r3, #26
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d107      	bne.n	80150c8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80150c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	4618      	mov	r0, r3
 80150ce:	f7ff fd0d 	bl	8014aec <LL_ADC_IsEnabled>
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	f040 81d9 	bne.w	801548c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	6818      	ldr	r0, [r3, #0]
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	6819      	ldr	r1, [r3, #0]
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	68db      	ldr	r3, [r3, #12]
 80150e6:	461a      	mov	r2, r3
 80150e8:	f7ff fc8e 	bl	8014a08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	68db      	ldr	r3, [r3, #12]
 80150f0:	4a0b      	ldr	r2, [pc, #44]	; (8015120 <HAL_ADC_ConfigChannel+0x280>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	f040 8101 	bne.w	80152fa <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015104:	2b00      	cmp	r3, #0
 8015106:	d10f      	bne.n	8015128 <HAL_ADC_ConfigChannel+0x288>
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	0e9b      	lsrs	r3, r3, #26
 801510e:	3301      	adds	r3, #1
 8015110:	f003 031f 	and.w	r3, r3, #31
 8015114:	2b09      	cmp	r3, #9
 8015116:	bf94      	ite	ls
 8015118:	2301      	movls	r3, #1
 801511a:	2300      	movhi	r3, #0
 801511c:	b2db      	uxtb	r3, r3
 801511e:	e016      	b.n	801514e <HAL_ADC_ConfigChannel+0x2ae>
 8015120:	47ff0000 	.word	0x47ff0000
 8015124:	5c001000 	.word	0x5c001000
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801512e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015130:	fa93 f3a3 	rbit	r3, r3
 8015134:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8015136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015138:	fab3 f383 	clz	r3, r3
 801513c:	b2db      	uxtb	r3, r3
 801513e:	3301      	adds	r3, #1
 8015140:	f003 031f 	and.w	r3, r3, #31
 8015144:	2b09      	cmp	r3, #9
 8015146:	bf94      	ite	ls
 8015148:	2301      	movls	r3, #1
 801514a:	2300      	movhi	r3, #0
 801514c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801514e:	2b00      	cmp	r3, #0
 8015150:	d064      	beq.n	801521c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801515a:	2b00      	cmp	r3, #0
 801515c:	d107      	bne.n	801516e <HAL_ADC_ConfigChannel+0x2ce>
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	0e9b      	lsrs	r3, r3, #26
 8015164:	3301      	adds	r3, #1
 8015166:	069b      	lsls	r3, r3, #26
 8015168:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801516c:	e00e      	b.n	801518c <HAL_ADC_ConfigChannel+0x2ec>
 801516e:	683b      	ldr	r3, [r7, #0]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015176:	fa93 f3a3 	rbit	r3, r3
 801517a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801517c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801517e:	fab3 f383 	clz	r3, r3
 8015182:	b2db      	uxtb	r3, r3
 8015184:	3301      	adds	r3, #1
 8015186:	069b      	lsls	r3, r3, #26
 8015188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015194:	2b00      	cmp	r3, #0
 8015196:	d109      	bne.n	80151ac <HAL_ADC_ConfigChannel+0x30c>
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	0e9b      	lsrs	r3, r3, #26
 801519e:	3301      	adds	r3, #1
 80151a0:	f003 031f 	and.w	r3, r3, #31
 80151a4:	2101      	movs	r1, #1
 80151a6:	fa01 f303 	lsl.w	r3, r1, r3
 80151aa:	e010      	b.n	80151ce <HAL_ADC_ConfigChannel+0x32e>
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80151b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b4:	fa93 f3a3 	rbit	r3, r3
 80151b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80151ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151bc:	fab3 f383 	clz	r3, r3
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	3301      	adds	r3, #1
 80151c4:	f003 031f 	and.w	r3, r3, #31
 80151c8:	2101      	movs	r1, #1
 80151ca:	fa01 f303 	lsl.w	r3, r1, r3
 80151ce:	ea42 0103 	orr.w	r1, r2, r3
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d10a      	bne.n	80151f4 <HAL_ADC_ConfigChannel+0x354>
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	0e9b      	lsrs	r3, r3, #26
 80151e4:	3301      	adds	r3, #1
 80151e6:	f003 021f 	and.w	r2, r3, #31
 80151ea:	4613      	mov	r3, r2
 80151ec:	005b      	lsls	r3, r3, #1
 80151ee:	4413      	add	r3, r2
 80151f0:	051b      	lsls	r3, r3, #20
 80151f2:	e011      	b.n	8015218 <HAL_ADC_ConfigChannel+0x378>
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80151fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151fc:	fa93 f3a3 	rbit	r3, r3
 8015200:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8015202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015204:	fab3 f383 	clz	r3, r3
 8015208:	b2db      	uxtb	r3, r3
 801520a:	3301      	adds	r3, #1
 801520c:	f003 021f 	and.w	r2, r3, #31
 8015210:	4613      	mov	r3, r2
 8015212:	005b      	lsls	r3, r3, #1
 8015214:	4413      	add	r3, r2
 8015216:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015218:	430b      	orrs	r3, r1
 801521a:	e069      	b.n	80152f0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015224:	2b00      	cmp	r3, #0
 8015226:	d107      	bne.n	8015238 <HAL_ADC_ConfigChannel+0x398>
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	0e9b      	lsrs	r3, r3, #26
 801522e:	3301      	adds	r3, #1
 8015230:	069b      	lsls	r3, r3, #26
 8015232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8015236:	e00e      	b.n	8015256 <HAL_ADC_ConfigChannel+0x3b6>
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801523e:	6a3b      	ldr	r3, [r7, #32]
 8015240:	fa93 f3a3 	rbit	r3, r3
 8015244:	61fb      	str	r3, [r7, #28]
  return result;
 8015246:	69fb      	ldr	r3, [r7, #28]
 8015248:	fab3 f383 	clz	r3, r3
 801524c:	b2db      	uxtb	r3, r3
 801524e:	3301      	adds	r3, #1
 8015250:	069b      	lsls	r3, r3, #26
 8015252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8015256:	683b      	ldr	r3, [r7, #0]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801525e:	2b00      	cmp	r3, #0
 8015260:	d109      	bne.n	8015276 <HAL_ADC_ConfigChannel+0x3d6>
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	0e9b      	lsrs	r3, r3, #26
 8015268:	3301      	adds	r3, #1
 801526a:	f003 031f 	and.w	r3, r3, #31
 801526e:	2101      	movs	r1, #1
 8015270:	fa01 f303 	lsl.w	r3, r1, r3
 8015274:	e010      	b.n	8015298 <HAL_ADC_ConfigChannel+0x3f8>
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801527c:	69bb      	ldr	r3, [r7, #24]
 801527e:	fa93 f3a3 	rbit	r3, r3
 8015282:	617b      	str	r3, [r7, #20]
  return result;
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	fab3 f383 	clz	r3, r3
 801528a:	b2db      	uxtb	r3, r3
 801528c:	3301      	adds	r3, #1
 801528e:	f003 031f 	and.w	r3, r3, #31
 8015292:	2101      	movs	r1, #1
 8015294:	fa01 f303 	lsl.w	r3, r1, r3
 8015298:	ea42 0103 	orr.w	r1, r2, r3
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d10d      	bne.n	80152c4 <HAL_ADC_ConfigChannel+0x424>
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	0e9b      	lsrs	r3, r3, #26
 80152ae:	3301      	adds	r3, #1
 80152b0:	f003 021f 	and.w	r2, r3, #31
 80152b4:	4613      	mov	r3, r2
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	4413      	add	r3, r2
 80152ba:	3b1e      	subs	r3, #30
 80152bc:	051b      	lsls	r3, r3, #20
 80152be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80152c2:	e014      	b.n	80152ee <HAL_ADC_ConfigChannel+0x44e>
 80152c4:	683b      	ldr	r3, [r7, #0]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	fa93 f3a3 	rbit	r3, r3
 80152d0:	60fb      	str	r3, [r7, #12]
  return result;
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	fab3 f383 	clz	r3, r3
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	3301      	adds	r3, #1
 80152dc:	f003 021f 	and.w	r2, r3, #31
 80152e0:	4613      	mov	r3, r2
 80152e2:	005b      	lsls	r3, r3, #1
 80152e4:	4413      	add	r3, r2
 80152e6:	3b1e      	subs	r3, #30
 80152e8:	051b      	lsls	r3, r3, #20
 80152ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80152ee:	430b      	orrs	r3, r1
 80152f0:	683a      	ldr	r2, [r7, #0]
 80152f2:	6892      	ldr	r2, [r2, #8]
 80152f4:	4619      	mov	r1, r3
 80152f6:	f7ff fb5b 	bl	80149b0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	f280 80c4 	bge.w	801548c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	4a65      	ldr	r2, [pc, #404]	; (80154a0 <HAL_ADC_ConfigChannel+0x600>)
 801530a:	4293      	cmp	r3, r2
 801530c:	d004      	beq.n	8015318 <HAL_ADC_ConfigChannel+0x478>
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	4a64      	ldr	r2, [pc, #400]	; (80154a4 <HAL_ADC_ConfigChannel+0x604>)
 8015314:	4293      	cmp	r3, r2
 8015316:	d101      	bne.n	801531c <HAL_ADC_ConfigChannel+0x47c>
 8015318:	4b63      	ldr	r3, [pc, #396]	; (80154a8 <HAL_ADC_ConfigChannel+0x608>)
 801531a:	e000      	b.n	801531e <HAL_ADC_ConfigChannel+0x47e>
 801531c:	4b63      	ldr	r3, [pc, #396]	; (80154ac <HAL_ADC_ConfigChannel+0x60c>)
 801531e:	4618      	mov	r0, r3
 8015320:	f7ff fab8 	bl	8014894 <LL_ADC_GetCommonPathInternalCh>
 8015324:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	4a5d      	ldr	r2, [pc, #372]	; (80154a0 <HAL_ADC_ConfigChannel+0x600>)
 801532c:	4293      	cmp	r3, r2
 801532e:	d004      	beq.n	801533a <HAL_ADC_ConfigChannel+0x49a>
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	4a5b      	ldr	r2, [pc, #364]	; (80154a4 <HAL_ADC_ConfigChannel+0x604>)
 8015336:	4293      	cmp	r3, r2
 8015338:	d10e      	bne.n	8015358 <HAL_ADC_ConfigChannel+0x4b8>
 801533a:	4859      	ldr	r0, [pc, #356]	; (80154a0 <HAL_ADC_ConfigChannel+0x600>)
 801533c:	f7ff fbd6 	bl	8014aec <LL_ADC_IsEnabled>
 8015340:	4604      	mov	r4, r0
 8015342:	4858      	ldr	r0, [pc, #352]	; (80154a4 <HAL_ADC_ConfigChannel+0x604>)
 8015344:	f7ff fbd2 	bl	8014aec <LL_ADC_IsEnabled>
 8015348:	4603      	mov	r3, r0
 801534a:	4323      	orrs	r3, r4
 801534c:	2b00      	cmp	r3, #0
 801534e:	bf0c      	ite	eq
 8015350:	2301      	moveq	r3, #1
 8015352:	2300      	movne	r3, #0
 8015354:	b2db      	uxtb	r3, r3
 8015356:	e008      	b.n	801536a <HAL_ADC_ConfigChannel+0x4ca>
 8015358:	4855      	ldr	r0, [pc, #340]	; (80154b0 <HAL_ADC_ConfigChannel+0x610>)
 801535a:	f7ff fbc7 	bl	8014aec <LL_ADC_IsEnabled>
 801535e:	4603      	mov	r3, r0
 8015360:	2b00      	cmp	r3, #0
 8015362:	bf0c      	ite	eq
 8015364:	2301      	moveq	r3, #1
 8015366:	2300      	movne	r3, #0
 8015368:	b2db      	uxtb	r3, r3
 801536a:	2b00      	cmp	r3, #0
 801536c:	d07b      	beq.n	8015466 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	4a50      	ldr	r2, [pc, #320]	; (80154b4 <HAL_ADC_ConfigChannel+0x614>)
 8015374:	4293      	cmp	r3, r2
 8015376:	d12e      	bne.n	80153d6 <HAL_ADC_ConfigChannel+0x536>
 8015378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801537a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801537e:	2b00      	cmp	r3, #0
 8015380:	d129      	bne.n	80153d6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	4a4a      	ldr	r2, [pc, #296]	; (80154b0 <HAL_ADC_ConfigChannel+0x610>)
 8015388:	4293      	cmp	r3, r2
 801538a:	d17f      	bne.n	801548c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	4a43      	ldr	r2, [pc, #268]	; (80154a0 <HAL_ADC_ConfigChannel+0x600>)
 8015392:	4293      	cmp	r3, r2
 8015394:	d004      	beq.n	80153a0 <HAL_ADC_ConfigChannel+0x500>
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	4a42      	ldr	r2, [pc, #264]	; (80154a4 <HAL_ADC_ConfigChannel+0x604>)
 801539c:	4293      	cmp	r3, r2
 801539e:	d101      	bne.n	80153a4 <HAL_ADC_ConfigChannel+0x504>
 80153a0:	4a41      	ldr	r2, [pc, #260]	; (80154a8 <HAL_ADC_ConfigChannel+0x608>)
 80153a2:	e000      	b.n	80153a6 <HAL_ADC_ConfigChannel+0x506>
 80153a4:	4a41      	ldr	r2, [pc, #260]	; (80154ac <HAL_ADC_ConfigChannel+0x60c>)
 80153a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80153ac:	4619      	mov	r1, r3
 80153ae:	4610      	mov	r0, r2
 80153b0:	f7ff fa5d 	bl	801486e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80153b4:	4b40      	ldr	r3, [pc, #256]	; (80154b8 <HAL_ADC_ConfigChannel+0x618>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	099b      	lsrs	r3, r3, #6
 80153ba:	4a40      	ldr	r2, [pc, #256]	; (80154bc <HAL_ADC_ConfigChannel+0x61c>)
 80153bc:	fba2 2303 	umull	r2, r3, r2, r3
 80153c0:	099b      	lsrs	r3, r3, #6
 80153c2:	005b      	lsls	r3, r3, #1
 80153c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80153c6:	e002      	b.n	80153ce <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80153c8:	68bb      	ldr	r3, [r7, #8]
 80153ca:	3b01      	subs	r3, #1
 80153cc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d1f9      	bne.n	80153c8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80153d4:	e05a      	b.n	801548c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	4a39      	ldr	r2, [pc, #228]	; (80154c0 <HAL_ADC_ConfigChannel+0x620>)
 80153dc:	4293      	cmp	r3, r2
 80153de:	d11e      	bne.n	801541e <HAL_ADC_ConfigChannel+0x57e>
 80153e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d119      	bne.n	801541e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	4a30      	ldr	r2, [pc, #192]	; (80154b0 <HAL_ADC_ConfigChannel+0x610>)
 80153f0:	4293      	cmp	r3, r2
 80153f2:	d14b      	bne.n	801548c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	4a29      	ldr	r2, [pc, #164]	; (80154a0 <HAL_ADC_ConfigChannel+0x600>)
 80153fa:	4293      	cmp	r3, r2
 80153fc:	d004      	beq.n	8015408 <HAL_ADC_ConfigChannel+0x568>
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	4a28      	ldr	r2, [pc, #160]	; (80154a4 <HAL_ADC_ConfigChannel+0x604>)
 8015404:	4293      	cmp	r3, r2
 8015406:	d101      	bne.n	801540c <HAL_ADC_ConfigChannel+0x56c>
 8015408:	4a27      	ldr	r2, [pc, #156]	; (80154a8 <HAL_ADC_ConfigChannel+0x608>)
 801540a:	e000      	b.n	801540e <HAL_ADC_ConfigChannel+0x56e>
 801540c:	4a27      	ldr	r2, [pc, #156]	; (80154ac <HAL_ADC_ConfigChannel+0x60c>)
 801540e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015410:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015414:	4619      	mov	r1, r3
 8015416:	4610      	mov	r0, r2
 8015418:	f7ff fa29 	bl	801486e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801541c:	e036      	b.n	801548c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	4a28      	ldr	r2, [pc, #160]	; (80154c4 <HAL_ADC_ConfigChannel+0x624>)
 8015424:	4293      	cmp	r3, r2
 8015426:	d131      	bne.n	801548c <HAL_ADC_ConfigChannel+0x5ec>
 8015428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801542a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801542e:	2b00      	cmp	r3, #0
 8015430:	d12c      	bne.n	801548c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	4a1e      	ldr	r2, [pc, #120]	; (80154b0 <HAL_ADC_ConfigChannel+0x610>)
 8015438:	4293      	cmp	r3, r2
 801543a:	d127      	bne.n	801548c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	4a17      	ldr	r2, [pc, #92]	; (80154a0 <HAL_ADC_ConfigChannel+0x600>)
 8015442:	4293      	cmp	r3, r2
 8015444:	d004      	beq.n	8015450 <HAL_ADC_ConfigChannel+0x5b0>
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4a16      	ldr	r2, [pc, #88]	; (80154a4 <HAL_ADC_ConfigChannel+0x604>)
 801544c:	4293      	cmp	r3, r2
 801544e:	d101      	bne.n	8015454 <HAL_ADC_ConfigChannel+0x5b4>
 8015450:	4a15      	ldr	r2, [pc, #84]	; (80154a8 <HAL_ADC_ConfigChannel+0x608>)
 8015452:	e000      	b.n	8015456 <HAL_ADC_ConfigChannel+0x5b6>
 8015454:	4a15      	ldr	r2, [pc, #84]	; (80154ac <HAL_ADC_ConfigChannel+0x60c>)
 8015456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801545c:	4619      	mov	r1, r3
 801545e:	4610      	mov	r0, r2
 8015460:	f7ff fa05 	bl	801486e <LL_ADC_SetCommonPathInternalCh>
 8015464:	e012      	b.n	801548c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801546a:	f043 0220 	orr.w	r2, r3, #32
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8015472:	2301      	movs	r3, #1
 8015474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015478:	e008      	b.n	801548c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801547e:	f043 0220 	orr.w	r2, r3, #32
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8015486:	2301      	movs	r3, #1
 8015488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2200      	movs	r2, #0
 8015490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8015494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8015498:	4618      	mov	r0, r3
 801549a:	3764      	adds	r7, #100	; 0x64
 801549c:	46bd      	mov	sp, r7
 801549e:	bd90      	pop	{r4, r7, pc}
 80154a0:	40022000 	.word	0x40022000
 80154a4:	40022100 	.word	0x40022100
 80154a8:	40022300 	.word	0x40022300
 80154ac:	58026300 	.word	0x58026300
 80154b0:	58026000 	.word	0x58026000
 80154b4:	cb840000 	.word	0xcb840000
 80154b8:	24000698 	.word	0x24000698
 80154bc:	053e2d63 	.word	0x053e2d63
 80154c0:	c7520000 	.word	0xc7520000
 80154c4:	cfb80000 	.word	0xcfb80000

080154c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	4a70      	ldr	r2, [pc, #448]	; (8015698 <ADC_ConfigureBoostMode+0x1d0>)
 80154d6:	4293      	cmp	r3, r2
 80154d8:	d004      	beq.n	80154e4 <ADC_ConfigureBoostMode+0x1c>
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	4a6f      	ldr	r2, [pc, #444]	; (801569c <ADC_ConfigureBoostMode+0x1d4>)
 80154e0:	4293      	cmp	r3, r2
 80154e2:	d109      	bne.n	80154f8 <ADC_ConfigureBoostMode+0x30>
 80154e4:	4b6e      	ldr	r3, [pc, #440]	; (80156a0 <ADC_ConfigureBoostMode+0x1d8>)
 80154e6:	689b      	ldr	r3, [r3, #8]
 80154e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	bf14      	ite	ne
 80154f0:	2301      	movne	r3, #1
 80154f2:	2300      	moveq	r3, #0
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	e008      	b.n	801550a <ADC_ConfigureBoostMode+0x42>
 80154f8:	4b6a      	ldr	r3, [pc, #424]	; (80156a4 <ADC_ConfigureBoostMode+0x1dc>)
 80154fa:	689b      	ldr	r3, [r3, #8]
 80154fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015500:	2b00      	cmp	r3, #0
 8015502:	bf14      	ite	ne
 8015504:	2301      	movne	r3, #1
 8015506:	2300      	moveq	r3, #0
 8015508:	b2db      	uxtb	r3, r3
 801550a:	2b00      	cmp	r3, #0
 801550c:	d01a      	beq.n	8015544 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 801550e:	f006 fbff 	bl	801bd10 <HAL_RCC_GetHCLKFreq>
 8015512:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801551c:	d006      	beq.n	801552c <ADC_ConfigureBoostMode+0x64>
 801551e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015522:	d00b      	beq.n	801553c <ADC_ConfigureBoostMode+0x74>
 8015524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015528:	d000      	beq.n	801552c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 801552a:	e05d      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	0c1b      	lsrs	r3, r3, #16
 8015532:	68fa      	ldr	r2, [r7, #12]
 8015534:	fbb2 f3f3 	udiv	r3, r2, r3
 8015538:	60fb      	str	r3, [r7, #12]
        break;
 801553a:	e055      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	089b      	lsrs	r3, r3, #2
 8015540:	60fb      	str	r3, [r7, #12]
        break;
 8015542:	e051      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8015544:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8015548:	f007 fb6e 	bl	801cc28 <HAL_RCCEx_GetPeriphCLKFreq>
 801554c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	685b      	ldr	r3, [r3, #4]
 8015552:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8015556:	d02a      	beq.n	80155ae <ADC_ConfigureBoostMode+0xe6>
 8015558:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 801555c:	d813      	bhi.n	8015586 <ADC_ConfigureBoostMode+0xbe>
 801555e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8015562:	d024      	beq.n	80155ae <ADC_ConfigureBoostMode+0xe6>
 8015564:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8015568:	d806      	bhi.n	8015578 <ADC_ConfigureBoostMode+0xb0>
 801556a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801556e:	d01e      	beq.n	80155ae <ADC_ConfigureBoostMode+0xe6>
 8015570:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8015574:	d01b      	beq.n	80155ae <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8015576:	e037      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8015578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801557c:	d017      	beq.n	80155ae <ADC_ConfigureBoostMode+0xe6>
 801557e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8015582:	d014      	beq.n	80155ae <ADC_ConfigureBoostMode+0xe6>
        break;
 8015584:	e030      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8015586:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 801558a:	d021      	beq.n	80155d0 <ADC_ConfigureBoostMode+0x108>
 801558c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8015590:	d806      	bhi.n	80155a0 <ADC_ConfigureBoostMode+0xd8>
 8015592:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8015596:	d013      	beq.n	80155c0 <ADC_ConfigureBoostMode+0xf8>
 8015598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801559c:	d014      	beq.n	80155c8 <ADC_ConfigureBoostMode+0x100>
        break;
 801559e:	e023      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80155a0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80155a4:	d018      	beq.n	80155d8 <ADC_ConfigureBoostMode+0x110>
 80155a6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80155aa:	d019      	beq.n	80155e0 <ADC_ConfigureBoostMode+0x118>
        break;
 80155ac:	e01c      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	0c9b      	lsrs	r3, r3, #18
 80155b4:	005b      	lsls	r3, r3, #1
 80155b6:	68fa      	ldr	r2, [r7, #12]
 80155b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80155bc:	60fb      	str	r3, [r7, #12]
        break;
 80155be:	e013      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	091b      	lsrs	r3, r3, #4
 80155c4:	60fb      	str	r3, [r7, #12]
        break;
 80155c6:	e00f      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	095b      	lsrs	r3, r3, #5
 80155cc:	60fb      	str	r3, [r7, #12]
        break;
 80155ce:	e00b      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	099b      	lsrs	r3, r3, #6
 80155d4:	60fb      	str	r3, [r7, #12]
        break;
 80155d6:	e007      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	09db      	lsrs	r3, r3, #7
 80155dc:	60fb      	str	r3, [r7, #12]
        break;
 80155de:	e003      	b.n	80155e8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	0a1b      	lsrs	r3, r3, #8
 80155e4:	60fb      	str	r3, [r7, #12]
        break;
 80155e6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80155e8:	f7ff f90c 	bl	8014804 <HAL_GetREVID>
 80155ec:	4602      	mov	r2, r0
 80155ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d815      	bhi.n	8015622 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	4a2b      	ldr	r2, [pc, #172]	; (80156a8 <ADC_ConfigureBoostMode+0x1e0>)
 80155fa:	4293      	cmp	r3, r2
 80155fc:	d908      	bls.n	8015610 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	689a      	ldr	r2, [r3, #8]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801560c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 801560e:	e03e      	b.n	801568e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	689a      	ldr	r2, [r3, #8]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801561e:	609a      	str	r2, [r3, #8]
}
 8015620:	e035      	b.n	801568e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	085b      	lsrs	r3, r3, #1
 8015626:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	4a20      	ldr	r2, [pc, #128]	; (80156ac <ADC_ConfigureBoostMode+0x1e4>)
 801562c:	4293      	cmp	r3, r2
 801562e:	d808      	bhi.n	8015642 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	689a      	ldr	r2, [r3, #8]
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801563e:	609a      	str	r2, [r3, #8]
}
 8015640:	e025      	b.n	801568e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	4a1a      	ldr	r2, [pc, #104]	; (80156b0 <ADC_ConfigureBoostMode+0x1e8>)
 8015646:	4293      	cmp	r3, r2
 8015648:	d80a      	bhi.n	8015660 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	689b      	ldr	r3, [r3, #8]
 8015650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801565c:	609a      	str	r2, [r3, #8]
}
 801565e:	e016      	b.n	801568e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	4a14      	ldr	r2, [pc, #80]	; (80156b4 <ADC_ConfigureBoostMode+0x1ec>)
 8015664:	4293      	cmp	r3, r2
 8015666:	d80a      	bhi.n	801567e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	689b      	ldr	r3, [r3, #8]
 801566e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801567a:	609a      	str	r2, [r3, #8]
}
 801567c:	e007      	b.n	801568e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	689a      	ldr	r2, [r3, #8]
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801568c:	609a      	str	r2, [r3, #8]
}
 801568e:	bf00      	nop
 8015690:	3710      	adds	r7, #16
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}
 8015696:	bf00      	nop
 8015698:	40022000 	.word	0x40022000
 801569c:	40022100 	.word	0x40022100
 80156a0:	40022300 	.word	0x40022300
 80156a4:	58026300 	.word	0x58026300
 80156a8:	01312d00 	.word	0x01312d00
 80156ac:	005f5e10 	.word	0x005f5e10
 80156b0:	00bebc20 	.word	0x00bebc20
 80156b4:	017d7840 	.word	0x017d7840

080156b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80156b8:	b480      	push	{r7}
 80156ba:	b085      	sub	sp, #20
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f003 0307 	and.w	r3, r3, #7
 80156c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80156c8:	4b0b      	ldr	r3, [pc, #44]	; (80156f8 <__NVIC_SetPriorityGrouping+0x40>)
 80156ca:	68db      	ldr	r3, [r3, #12]
 80156cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80156ce:	68ba      	ldr	r2, [r7, #8]
 80156d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80156d4:	4013      	ands	r3, r2
 80156d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80156e0:	4b06      	ldr	r3, [pc, #24]	; (80156fc <__NVIC_SetPriorityGrouping+0x44>)
 80156e2:	4313      	orrs	r3, r2
 80156e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80156e6:	4a04      	ldr	r2, [pc, #16]	; (80156f8 <__NVIC_SetPriorityGrouping+0x40>)
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	60d3      	str	r3, [r2, #12]
}
 80156ec:	bf00      	nop
 80156ee:	3714      	adds	r7, #20
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr
 80156f8:	e000ed00 	.word	0xe000ed00
 80156fc:	05fa0000 	.word	0x05fa0000

08015700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015700:	b480      	push	{r7}
 8015702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015704:	4b04      	ldr	r3, [pc, #16]	; (8015718 <__NVIC_GetPriorityGrouping+0x18>)
 8015706:	68db      	ldr	r3, [r3, #12]
 8015708:	0a1b      	lsrs	r3, r3, #8
 801570a:	f003 0307 	and.w	r3, r3, #7
}
 801570e:	4618      	mov	r0, r3
 8015710:	46bd      	mov	sp, r7
 8015712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015716:	4770      	bx	lr
 8015718:	e000ed00 	.word	0xe000ed00

0801571c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801571c:	b480      	push	{r7}
 801571e:	b083      	sub	sp, #12
 8015720:	af00      	add	r7, sp, #0
 8015722:	4603      	mov	r3, r0
 8015724:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801572a:	2b00      	cmp	r3, #0
 801572c:	db0b      	blt.n	8015746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801572e:	88fb      	ldrh	r3, [r7, #6]
 8015730:	f003 021f 	and.w	r2, r3, #31
 8015734:	4907      	ldr	r1, [pc, #28]	; (8015754 <__NVIC_EnableIRQ+0x38>)
 8015736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801573a:	095b      	lsrs	r3, r3, #5
 801573c:	2001      	movs	r0, #1
 801573e:	fa00 f202 	lsl.w	r2, r0, r2
 8015742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8015746:	bf00      	nop
 8015748:	370c      	adds	r7, #12
 801574a:	46bd      	mov	sp, r7
 801574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015750:	4770      	bx	lr
 8015752:	bf00      	nop
 8015754:	e000e100 	.word	0xe000e100

08015758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015758:	b480      	push	{r7}
 801575a:	b083      	sub	sp, #12
 801575c:	af00      	add	r7, sp, #0
 801575e:	4603      	mov	r3, r0
 8015760:	6039      	str	r1, [r7, #0]
 8015762:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015768:	2b00      	cmp	r3, #0
 801576a:	db0a      	blt.n	8015782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801576c:	683b      	ldr	r3, [r7, #0]
 801576e:	b2da      	uxtb	r2, r3
 8015770:	490c      	ldr	r1, [pc, #48]	; (80157a4 <__NVIC_SetPriority+0x4c>)
 8015772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015776:	0112      	lsls	r2, r2, #4
 8015778:	b2d2      	uxtb	r2, r2
 801577a:	440b      	add	r3, r1
 801577c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015780:	e00a      	b.n	8015798 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	b2da      	uxtb	r2, r3
 8015786:	4908      	ldr	r1, [pc, #32]	; (80157a8 <__NVIC_SetPriority+0x50>)
 8015788:	88fb      	ldrh	r3, [r7, #6]
 801578a:	f003 030f 	and.w	r3, r3, #15
 801578e:	3b04      	subs	r3, #4
 8015790:	0112      	lsls	r2, r2, #4
 8015792:	b2d2      	uxtb	r2, r2
 8015794:	440b      	add	r3, r1
 8015796:	761a      	strb	r2, [r3, #24]
}
 8015798:	bf00      	nop
 801579a:	370c      	adds	r7, #12
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr
 80157a4:	e000e100 	.word	0xe000e100
 80157a8:	e000ed00 	.word	0xe000ed00

080157ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b089      	sub	sp, #36	; 0x24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	f003 0307 	and.w	r3, r3, #7
 80157be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80157c0:	69fb      	ldr	r3, [r7, #28]
 80157c2:	f1c3 0307 	rsb	r3, r3, #7
 80157c6:	2b04      	cmp	r3, #4
 80157c8:	bf28      	it	cs
 80157ca:	2304      	movcs	r3, #4
 80157cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	3304      	adds	r3, #4
 80157d2:	2b06      	cmp	r3, #6
 80157d4:	d902      	bls.n	80157dc <NVIC_EncodePriority+0x30>
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	3b03      	subs	r3, #3
 80157da:	e000      	b.n	80157de <NVIC_EncodePriority+0x32>
 80157dc:	2300      	movs	r3, #0
 80157de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80157e0:	f04f 32ff 	mov.w	r2, #4294967295
 80157e4:	69bb      	ldr	r3, [r7, #24]
 80157e6:	fa02 f303 	lsl.w	r3, r2, r3
 80157ea:	43da      	mvns	r2, r3
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	401a      	ands	r2, r3
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80157f4:	f04f 31ff 	mov.w	r1, #4294967295
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	fa01 f303 	lsl.w	r3, r1, r3
 80157fe:	43d9      	mvns	r1, r3
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015804:	4313      	orrs	r3, r2
         );
}
 8015806:	4618      	mov	r0, r3
 8015808:	3724      	adds	r7, #36	; 0x24
 801580a:	46bd      	mov	sp, r7
 801580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015810:	4770      	bx	lr

08015812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015812:	b580      	push	{r7, lr}
 8015814:	b082      	sub	sp, #8
 8015816:	af00      	add	r7, sp, #0
 8015818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f7ff ff4c 	bl	80156b8 <__NVIC_SetPriorityGrouping>
}
 8015820:	bf00      	nop
 8015822:	3708      	adds	r7, #8
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}

08015828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b086      	sub	sp, #24
 801582c:	af00      	add	r7, sp, #0
 801582e:	4603      	mov	r3, r0
 8015830:	60b9      	str	r1, [r7, #8]
 8015832:	607a      	str	r2, [r7, #4]
 8015834:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8015836:	f7ff ff63 	bl	8015700 <__NVIC_GetPriorityGrouping>
 801583a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801583c:	687a      	ldr	r2, [r7, #4]
 801583e:	68b9      	ldr	r1, [r7, #8]
 8015840:	6978      	ldr	r0, [r7, #20]
 8015842:	f7ff ffb3 	bl	80157ac <NVIC_EncodePriority>
 8015846:	4602      	mov	r2, r0
 8015848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801584c:	4611      	mov	r1, r2
 801584e:	4618      	mov	r0, r3
 8015850:	f7ff ff82 	bl	8015758 <__NVIC_SetPriority>
}
 8015854:	bf00      	nop
 8015856:	3718      	adds	r7, #24
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}

0801585c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b082      	sub	sp, #8
 8015860:	af00      	add	r7, sp, #0
 8015862:	4603      	mov	r3, r0
 8015864:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801586a:	4618      	mov	r0, r3
 801586c:	f7ff ff56 	bl	801571c <__NVIC_EnableIRQ>
}
 8015870:	bf00      	nop
 8015872:	3708      	adds	r7, #8
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}

08015878 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b086      	sub	sp, #24
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8015880:	f7fe ff92 	bl	80147a8 <HAL_GetTick>
 8015884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d101      	bne.n	8015890 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801588c:	2301      	movs	r3, #1
 801588e:	e316      	b.n	8015ebe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	4a66      	ldr	r2, [pc, #408]	; (8015a30 <HAL_DMA_Init+0x1b8>)
 8015896:	4293      	cmp	r3, r2
 8015898:	d04a      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	4a65      	ldr	r2, [pc, #404]	; (8015a34 <HAL_DMA_Init+0x1bc>)
 80158a0:	4293      	cmp	r3, r2
 80158a2:	d045      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	4a63      	ldr	r2, [pc, #396]	; (8015a38 <HAL_DMA_Init+0x1c0>)
 80158aa:	4293      	cmp	r3, r2
 80158ac:	d040      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	4a62      	ldr	r2, [pc, #392]	; (8015a3c <HAL_DMA_Init+0x1c4>)
 80158b4:	4293      	cmp	r3, r2
 80158b6:	d03b      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	4a60      	ldr	r2, [pc, #384]	; (8015a40 <HAL_DMA_Init+0x1c8>)
 80158be:	4293      	cmp	r3, r2
 80158c0:	d036      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	4a5f      	ldr	r2, [pc, #380]	; (8015a44 <HAL_DMA_Init+0x1cc>)
 80158c8:	4293      	cmp	r3, r2
 80158ca:	d031      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	4a5d      	ldr	r2, [pc, #372]	; (8015a48 <HAL_DMA_Init+0x1d0>)
 80158d2:	4293      	cmp	r3, r2
 80158d4:	d02c      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	4a5c      	ldr	r2, [pc, #368]	; (8015a4c <HAL_DMA_Init+0x1d4>)
 80158dc:	4293      	cmp	r3, r2
 80158de:	d027      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	4a5a      	ldr	r2, [pc, #360]	; (8015a50 <HAL_DMA_Init+0x1d8>)
 80158e6:	4293      	cmp	r3, r2
 80158e8:	d022      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	4a59      	ldr	r2, [pc, #356]	; (8015a54 <HAL_DMA_Init+0x1dc>)
 80158f0:	4293      	cmp	r3, r2
 80158f2:	d01d      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	4a57      	ldr	r2, [pc, #348]	; (8015a58 <HAL_DMA_Init+0x1e0>)
 80158fa:	4293      	cmp	r3, r2
 80158fc:	d018      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	4a56      	ldr	r2, [pc, #344]	; (8015a5c <HAL_DMA_Init+0x1e4>)
 8015904:	4293      	cmp	r3, r2
 8015906:	d013      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	4a54      	ldr	r2, [pc, #336]	; (8015a60 <HAL_DMA_Init+0x1e8>)
 801590e:	4293      	cmp	r3, r2
 8015910:	d00e      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	4a53      	ldr	r2, [pc, #332]	; (8015a64 <HAL_DMA_Init+0x1ec>)
 8015918:	4293      	cmp	r3, r2
 801591a:	d009      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	4a51      	ldr	r2, [pc, #324]	; (8015a68 <HAL_DMA_Init+0x1f0>)
 8015922:	4293      	cmp	r3, r2
 8015924:	d004      	beq.n	8015930 <HAL_DMA_Init+0xb8>
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	4a50      	ldr	r2, [pc, #320]	; (8015a6c <HAL_DMA_Init+0x1f4>)
 801592c:	4293      	cmp	r3, r2
 801592e:	d101      	bne.n	8015934 <HAL_DMA_Init+0xbc>
 8015930:	2301      	movs	r3, #1
 8015932:	e000      	b.n	8015936 <HAL_DMA_Init+0xbe>
 8015934:	2300      	movs	r3, #0
 8015936:	2b00      	cmp	r3, #0
 8015938:	f000 813b 	beq.w	8015bb2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	2200      	movs	r2, #0
 8015940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2202      	movs	r2, #2
 8015948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	4a37      	ldr	r2, [pc, #220]	; (8015a30 <HAL_DMA_Init+0x1b8>)
 8015952:	4293      	cmp	r3, r2
 8015954:	d04a      	beq.n	80159ec <HAL_DMA_Init+0x174>
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	4a36      	ldr	r2, [pc, #216]	; (8015a34 <HAL_DMA_Init+0x1bc>)
 801595c:	4293      	cmp	r3, r2
 801595e:	d045      	beq.n	80159ec <HAL_DMA_Init+0x174>
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	4a34      	ldr	r2, [pc, #208]	; (8015a38 <HAL_DMA_Init+0x1c0>)
 8015966:	4293      	cmp	r3, r2
 8015968:	d040      	beq.n	80159ec <HAL_DMA_Init+0x174>
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	4a33      	ldr	r2, [pc, #204]	; (8015a3c <HAL_DMA_Init+0x1c4>)
 8015970:	4293      	cmp	r3, r2
 8015972:	d03b      	beq.n	80159ec <HAL_DMA_Init+0x174>
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	4a31      	ldr	r2, [pc, #196]	; (8015a40 <HAL_DMA_Init+0x1c8>)
 801597a:	4293      	cmp	r3, r2
 801597c:	d036      	beq.n	80159ec <HAL_DMA_Init+0x174>
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	4a30      	ldr	r2, [pc, #192]	; (8015a44 <HAL_DMA_Init+0x1cc>)
 8015984:	4293      	cmp	r3, r2
 8015986:	d031      	beq.n	80159ec <HAL_DMA_Init+0x174>
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	4a2e      	ldr	r2, [pc, #184]	; (8015a48 <HAL_DMA_Init+0x1d0>)
 801598e:	4293      	cmp	r3, r2
 8015990:	d02c      	beq.n	80159ec <HAL_DMA_Init+0x174>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	4a2d      	ldr	r2, [pc, #180]	; (8015a4c <HAL_DMA_Init+0x1d4>)
 8015998:	4293      	cmp	r3, r2
 801599a:	d027      	beq.n	80159ec <HAL_DMA_Init+0x174>
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	4a2b      	ldr	r2, [pc, #172]	; (8015a50 <HAL_DMA_Init+0x1d8>)
 80159a2:	4293      	cmp	r3, r2
 80159a4:	d022      	beq.n	80159ec <HAL_DMA_Init+0x174>
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	4a2a      	ldr	r2, [pc, #168]	; (8015a54 <HAL_DMA_Init+0x1dc>)
 80159ac:	4293      	cmp	r3, r2
 80159ae:	d01d      	beq.n	80159ec <HAL_DMA_Init+0x174>
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	4a28      	ldr	r2, [pc, #160]	; (8015a58 <HAL_DMA_Init+0x1e0>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d018      	beq.n	80159ec <HAL_DMA_Init+0x174>
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	4a27      	ldr	r2, [pc, #156]	; (8015a5c <HAL_DMA_Init+0x1e4>)
 80159c0:	4293      	cmp	r3, r2
 80159c2:	d013      	beq.n	80159ec <HAL_DMA_Init+0x174>
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	4a25      	ldr	r2, [pc, #148]	; (8015a60 <HAL_DMA_Init+0x1e8>)
 80159ca:	4293      	cmp	r3, r2
 80159cc:	d00e      	beq.n	80159ec <HAL_DMA_Init+0x174>
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	4a24      	ldr	r2, [pc, #144]	; (8015a64 <HAL_DMA_Init+0x1ec>)
 80159d4:	4293      	cmp	r3, r2
 80159d6:	d009      	beq.n	80159ec <HAL_DMA_Init+0x174>
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	4a22      	ldr	r2, [pc, #136]	; (8015a68 <HAL_DMA_Init+0x1f0>)
 80159de:	4293      	cmp	r3, r2
 80159e0:	d004      	beq.n	80159ec <HAL_DMA_Init+0x174>
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	4a21      	ldr	r2, [pc, #132]	; (8015a6c <HAL_DMA_Init+0x1f4>)
 80159e8:	4293      	cmp	r3, r2
 80159ea:	d108      	bne.n	80159fe <HAL_DMA_Init+0x186>
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	681a      	ldr	r2, [r3, #0]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	f022 0201 	bic.w	r2, r2, #1
 80159fa:	601a      	str	r2, [r3, #0]
 80159fc:	e007      	b.n	8015a0e <HAL_DMA_Init+0x196>
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	681a      	ldr	r2, [r3, #0]
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	f022 0201 	bic.w	r2, r2, #1
 8015a0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8015a0e:	e02f      	b.n	8015a70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015a10:	f7fe feca 	bl	80147a8 <HAL_GetTick>
 8015a14:	4602      	mov	r2, r0
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	1ad3      	subs	r3, r2, r3
 8015a1a:	2b05      	cmp	r3, #5
 8015a1c:	d928      	bls.n	8015a70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2220      	movs	r2, #32
 8015a22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	2203      	movs	r2, #3
 8015a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	e246      	b.n	8015ebe <HAL_DMA_Init+0x646>
 8015a30:	40020010 	.word	0x40020010
 8015a34:	40020028 	.word	0x40020028
 8015a38:	40020040 	.word	0x40020040
 8015a3c:	40020058 	.word	0x40020058
 8015a40:	40020070 	.word	0x40020070
 8015a44:	40020088 	.word	0x40020088
 8015a48:	400200a0 	.word	0x400200a0
 8015a4c:	400200b8 	.word	0x400200b8
 8015a50:	40020410 	.word	0x40020410
 8015a54:	40020428 	.word	0x40020428
 8015a58:	40020440 	.word	0x40020440
 8015a5c:	40020458 	.word	0x40020458
 8015a60:	40020470 	.word	0x40020470
 8015a64:	40020488 	.word	0x40020488
 8015a68:	400204a0 	.word	0x400204a0
 8015a6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	f003 0301 	and.w	r3, r3, #1
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d1c8      	bne.n	8015a10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015a86:	697a      	ldr	r2, [r7, #20]
 8015a88:	4b83      	ldr	r3, [pc, #524]	; (8015c98 <HAL_DMA_Init+0x420>)
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8015a96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	691b      	ldr	r3, [r3, #16]
 8015a9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015aa2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	699b      	ldr	r3, [r3, #24]
 8015aa8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015aae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	6a1b      	ldr	r3, [r3, #32]
 8015ab4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8015ab6:	697a      	ldr	r2, [r7, #20]
 8015ab8:	4313      	orrs	r3, r2
 8015aba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac0:	2b04      	cmp	r3, #4
 8015ac2:	d107      	bne.n	8015ad4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015acc:	4313      	orrs	r3, r2
 8015ace:	697a      	ldr	r2, [r7, #20]
 8015ad0:	4313      	orrs	r3, r2
 8015ad2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8015ad4:	4b71      	ldr	r3, [pc, #452]	; (8015c9c <HAL_DMA_Init+0x424>)
 8015ad6:	681a      	ldr	r2, [r3, #0]
 8015ad8:	4b71      	ldr	r3, [pc, #452]	; (8015ca0 <HAL_DMA_Init+0x428>)
 8015ada:	4013      	ands	r3, r2
 8015adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015ae0:	d328      	bcc.n	8015b34 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	2b28      	cmp	r3, #40	; 0x28
 8015ae8:	d903      	bls.n	8015af2 <HAL_DMA_Init+0x27a>
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	685b      	ldr	r3, [r3, #4]
 8015aee:	2b2e      	cmp	r3, #46	; 0x2e
 8015af0:	d917      	bls.n	8015b22 <HAL_DMA_Init+0x2aa>
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	2b3e      	cmp	r3, #62	; 0x3e
 8015af8:	d903      	bls.n	8015b02 <HAL_DMA_Init+0x28a>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	2b42      	cmp	r3, #66	; 0x42
 8015b00:	d90f      	bls.n	8015b22 <HAL_DMA_Init+0x2aa>
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	685b      	ldr	r3, [r3, #4]
 8015b06:	2b46      	cmp	r3, #70	; 0x46
 8015b08:	d903      	bls.n	8015b12 <HAL_DMA_Init+0x29a>
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	2b48      	cmp	r3, #72	; 0x48
 8015b10:	d907      	bls.n	8015b22 <HAL_DMA_Init+0x2aa>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	2b4e      	cmp	r3, #78	; 0x4e
 8015b18:	d905      	bls.n	8015b26 <HAL_DMA_Init+0x2ae>
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	2b52      	cmp	r3, #82	; 0x52
 8015b20:	d801      	bhi.n	8015b26 <HAL_DMA_Init+0x2ae>
 8015b22:	2301      	movs	r3, #1
 8015b24:	e000      	b.n	8015b28 <HAL_DMA_Init+0x2b0>
 8015b26:	2300      	movs	r3, #0
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d003      	beq.n	8015b34 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b32:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	697a      	ldr	r2, [r7, #20]
 8015b3a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	695b      	ldr	r3, [r3, #20]
 8015b42:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	f023 0307 	bic.w	r3, r3, #7
 8015b4a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b50:	697a      	ldr	r2, [r7, #20]
 8015b52:	4313      	orrs	r3, r2
 8015b54:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b5a:	2b04      	cmp	r3, #4
 8015b5c:	d117      	bne.n	8015b8e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b62:	697a      	ldr	r2, [r7, #20]
 8015b64:	4313      	orrs	r3, r2
 8015b66:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d00e      	beq.n	8015b8e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	f002 f82d 	bl	8017bd0 <DMA_CheckFifoParam>
 8015b76:	4603      	mov	r3, r0
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d008      	beq.n	8015b8e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2240      	movs	r2, #64	; 0x40
 8015b80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	2201      	movs	r2, #1
 8015b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	e197      	b.n	8015ebe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	697a      	ldr	r2, [r7, #20]
 8015b94:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	f001 ff68 	bl	8017a6c <DMA_CalcBaseAndBitshift>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ba4:	f003 031f 	and.w	r3, r3, #31
 8015ba8:	223f      	movs	r2, #63	; 0x3f
 8015baa:	409a      	lsls	r2, r3
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	609a      	str	r2, [r3, #8]
 8015bb0:	e0cd      	b.n	8015d4e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	4a3b      	ldr	r2, [pc, #236]	; (8015ca4 <HAL_DMA_Init+0x42c>)
 8015bb8:	4293      	cmp	r3, r2
 8015bba:	d022      	beq.n	8015c02 <HAL_DMA_Init+0x38a>
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	4a39      	ldr	r2, [pc, #228]	; (8015ca8 <HAL_DMA_Init+0x430>)
 8015bc2:	4293      	cmp	r3, r2
 8015bc4:	d01d      	beq.n	8015c02 <HAL_DMA_Init+0x38a>
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	4a38      	ldr	r2, [pc, #224]	; (8015cac <HAL_DMA_Init+0x434>)
 8015bcc:	4293      	cmp	r3, r2
 8015bce:	d018      	beq.n	8015c02 <HAL_DMA_Init+0x38a>
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	4a36      	ldr	r2, [pc, #216]	; (8015cb0 <HAL_DMA_Init+0x438>)
 8015bd6:	4293      	cmp	r3, r2
 8015bd8:	d013      	beq.n	8015c02 <HAL_DMA_Init+0x38a>
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	4a35      	ldr	r2, [pc, #212]	; (8015cb4 <HAL_DMA_Init+0x43c>)
 8015be0:	4293      	cmp	r3, r2
 8015be2:	d00e      	beq.n	8015c02 <HAL_DMA_Init+0x38a>
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	4a33      	ldr	r2, [pc, #204]	; (8015cb8 <HAL_DMA_Init+0x440>)
 8015bea:	4293      	cmp	r3, r2
 8015bec:	d009      	beq.n	8015c02 <HAL_DMA_Init+0x38a>
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	4a32      	ldr	r2, [pc, #200]	; (8015cbc <HAL_DMA_Init+0x444>)
 8015bf4:	4293      	cmp	r3, r2
 8015bf6:	d004      	beq.n	8015c02 <HAL_DMA_Init+0x38a>
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	4a30      	ldr	r2, [pc, #192]	; (8015cc0 <HAL_DMA_Init+0x448>)
 8015bfe:	4293      	cmp	r3, r2
 8015c00:	d101      	bne.n	8015c06 <HAL_DMA_Init+0x38e>
 8015c02:	2301      	movs	r3, #1
 8015c04:	e000      	b.n	8015c08 <HAL_DMA_Init+0x390>
 8015c06:	2300      	movs	r3, #0
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	f000 8097 	beq.w	8015d3c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	4a24      	ldr	r2, [pc, #144]	; (8015ca4 <HAL_DMA_Init+0x42c>)
 8015c14:	4293      	cmp	r3, r2
 8015c16:	d021      	beq.n	8015c5c <HAL_DMA_Init+0x3e4>
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	4a22      	ldr	r2, [pc, #136]	; (8015ca8 <HAL_DMA_Init+0x430>)
 8015c1e:	4293      	cmp	r3, r2
 8015c20:	d01c      	beq.n	8015c5c <HAL_DMA_Init+0x3e4>
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	4a21      	ldr	r2, [pc, #132]	; (8015cac <HAL_DMA_Init+0x434>)
 8015c28:	4293      	cmp	r3, r2
 8015c2a:	d017      	beq.n	8015c5c <HAL_DMA_Init+0x3e4>
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	4a1f      	ldr	r2, [pc, #124]	; (8015cb0 <HAL_DMA_Init+0x438>)
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d012      	beq.n	8015c5c <HAL_DMA_Init+0x3e4>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	4a1e      	ldr	r2, [pc, #120]	; (8015cb4 <HAL_DMA_Init+0x43c>)
 8015c3c:	4293      	cmp	r3, r2
 8015c3e:	d00d      	beq.n	8015c5c <HAL_DMA_Init+0x3e4>
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	4a1c      	ldr	r2, [pc, #112]	; (8015cb8 <HAL_DMA_Init+0x440>)
 8015c46:	4293      	cmp	r3, r2
 8015c48:	d008      	beq.n	8015c5c <HAL_DMA_Init+0x3e4>
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	4a1b      	ldr	r2, [pc, #108]	; (8015cbc <HAL_DMA_Init+0x444>)
 8015c50:	4293      	cmp	r3, r2
 8015c52:	d003      	beq.n	8015c5c <HAL_DMA_Init+0x3e4>
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	4a19      	ldr	r2, [pc, #100]	; (8015cc0 <HAL_DMA_Init+0x448>)
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2200      	movs	r2, #0
 8015c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	2202      	movs	r2, #2
 8015c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8015c76:	697a      	ldr	r2, [r7, #20]
 8015c78:	4b12      	ldr	r3, [pc, #72]	; (8015cc4 <HAL_DMA_Init+0x44c>)
 8015c7a:	4013      	ands	r3, r2
 8015c7c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	689b      	ldr	r3, [r3, #8]
 8015c82:	2b40      	cmp	r3, #64	; 0x40
 8015c84:	d020      	beq.n	8015cc8 <HAL_DMA_Init+0x450>
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	689b      	ldr	r3, [r3, #8]
 8015c8a:	2b80      	cmp	r3, #128	; 0x80
 8015c8c:	d102      	bne.n	8015c94 <HAL_DMA_Init+0x41c>
 8015c8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015c92:	e01a      	b.n	8015cca <HAL_DMA_Init+0x452>
 8015c94:	2300      	movs	r3, #0
 8015c96:	e018      	b.n	8015cca <HAL_DMA_Init+0x452>
 8015c98:	fe10803f 	.word	0xfe10803f
 8015c9c:	5c001000 	.word	0x5c001000
 8015ca0:	ffff0000 	.word	0xffff0000
 8015ca4:	58025408 	.word	0x58025408
 8015ca8:	5802541c 	.word	0x5802541c
 8015cac:	58025430 	.word	0x58025430
 8015cb0:	58025444 	.word	0x58025444
 8015cb4:	58025458 	.word	0x58025458
 8015cb8:	5802546c 	.word	0x5802546c
 8015cbc:	58025480 	.word	0x58025480
 8015cc0:	58025494 	.word	0x58025494
 8015cc4:	fffe000f 	.word	0xfffe000f
 8015cc8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8015cca:	687a      	ldr	r2, [r7, #4]
 8015ccc:	68d2      	ldr	r2, [r2, #12]
 8015cce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8015cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	691b      	ldr	r3, [r3, #16]
 8015cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8015cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	695b      	ldr	r3, [r3, #20]
 8015cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8015ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	699b      	ldr	r3, [r3, #24]
 8015ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8015ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	69db      	ldr	r3, [r3, #28]
 8015cee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8015cf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6a1b      	ldr	r3, [r3, #32]
 8015cf6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8015cf8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8015cfa:	697a      	ldr	r2, [r7, #20]
 8015cfc:	4313      	orrs	r3, r2
 8015cfe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	697a      	ldr	r2, [r7, #20]
 8015d06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	461a      	mov	r2, r3
 8015d0e:	4b6e      	ldr	r3, [pc, #440]	; (8015ec8 <HAL_DMA_Init+0x650>)
 8015d10:	4413      	add	r3, r2
 8015d12:	4a6e      	ldr	r2, [pc, #440]	; (8015ecc <HAL_DMA_Init+0x654>)
 8015d14:	fba2 2303 	umull	r2, r3, r2, r3
 8015d18:	091b      	lsrs	r3, r3, #4
 8015d1a:	009a      	lsls	r2, r3, #2
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f001 fea3 	bl	8017a6c <DMA_CalcBaseAndBitshift>
 8015d26:	4603      	mov	r3, r0
 8015d28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015d2e:	f003 031f 	and.w	r3, r3, #31
 8015d32:	2201      	movs	r2, #1
 8015d34:	409a      	lsls	r2, r3
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	605a      	str	r2, [r3, #4]
 8015d3a:	e008      	b.n	8015d4e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	2240      	movs	r2, #64	; 0x40
 8015d40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2203      	movs	r2, #3
 8015d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8015d4a:	2301      	movs	r3, #1
 8015d4c:	e0b7      	b.n	8015ebe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	4a5f      	ldr	r2, [pc, #380]	; (8015ed0 <HAL_DMA_Init+0x658>)
 8015d54:	4293      	cmp	r3, r2
 8015d56:	d072      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	4a5d      	ldr	r2, [pc, #372]	; (8015ed4 <HAL_DMA_Init+0x65c>)
 8015d5e:	4293      	cmp	r3, r2
 8015d60:	d06d      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	4a5c      	ldr	r2, [pc, #368]	; (8015ed8 <HAL_DMA_Init+0x660>)
 8015d68:	4293      	cmp	r3, r2
 8015d6a:	d068      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	4a5a      	ldr	r2, [pc, #360]	; (8015edc <HAL_DMA_Init+0x664>)
 8015d72:	4293      	cmp	r3, r2
 8015d74:	d063      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	4a59      	ldr	r2, [pc, #356]	; (8015ee0 <HAL_DMA_Init+0x668>)
 8015d7c:	4293      	cmp	r3, r2
 8015d7e:	d05e      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	4a57      	ldr	r2, [pc, #348]	; (8015ee4 <HAL_DMA_Init+0x66c>)
 8015d86:	4293      	cmp	r3, r2
 8015d88:	d059      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	4a56      	ldr	r2, [pc, #344]	; (8015ee8 <HAL_DMA_Init+0x670>)
 8015d90:	4293      	cmp	r3, r2
 8015d92:	d054      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	4a54      	ldr	r2, [pc, #336]	; (8015eec <HAL_DMA_Init+0x674>)
 8015d9a:	4293      	cmp	r3, r2
 8015d9c:	d04f      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	4a53      	ldr	r2, [pc, #332]	; (8015ef0 <HAL_DMA_Init+0x678>)
 8015da4:	4293      	cmp	r3, r2
 8015da6:	d04a      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	4a51      	ldr	r2, [pc, #324]	; (8015ef4 <HAL_DMA_Init+0x67c>)
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d045      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	4a50      	ldr	r2, [pc, #320]	; (8015ef8 <HAL_DMA_Init+0x680>)
 8015db8:	4293      	cmp	r3, r2
 8015dba:	d040      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	4a4e      	ldr	r2, [pc, #312]	; (8015efc <HAL_DMA_Init+0x684>)
 8015dc2:	4293      	cmp	r3, r2
 8015dc4:	d03b      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	4a4d      	ldr	r2, [pc, #308]	; (8015f00 <HAL_DMA_Init+0x688>)
 8015dcc:	4293      	cmp	r3, r2
 8015dce:	d036      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	4a4b      	ldr	r2, [pc, #300]	; (8015f04 <HAL_DMA_Init+0x68c>)
 8015dd6:	4293      	cmp	r3, r2
 8015dd8:	d031      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	4a4a      	ldr	r2, [pc, #296]	; (8015f08 <HAL_DMA_Init+0x690>)
 8015de0:	4293      	cmp	r3, r2
 8015de2:	d02c      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	4a48      	ldr	r2, [pc, #288]	; (8015f0c <HAL_DMA_Init+0x694>)
 8015dea:	4293      	cmp	r3, r2
 8015dec:	d027      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	4a47      	ldr	r2, [pc, #284]	; (8015f10 <HAL_DMA_Init+0x698>)
 8015df4:	4293      	cmp	r3, r2
 8015df6:	d022      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	4a45      	ldr	r2, [pc, #276]	; (8015f14 <HAL_DMA_Init+0x69c>)
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	d01d      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	4a44      	ldr	r2, [pc, #272]	; (8015f18 <HAL_DMA_Init+0x6a0>)
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	d018      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	4a42      	ldr	r2, [pc, #264]	; (8015f1c <HAL_DMA_Init+0x6a4>)
 8015e12:	4293      	cmp	r3, r2
 8015e14:	d013      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	4a41      	ldr	r2, [pc, #260]	; (8015f20 <HAL_DMA_Init+0x6a8>)
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	d00e      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	4a3f      	ldr	r2, [pc, #252]	; (8015f24 <HAL_DMA_Init+0x6ac>)
 8015e26:	4293      	cmp	r3, r2
 8015e28:	d009      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	4a3e      	ldr	r2, [pc, #248]	; (8015f28 <HAL_DMA_Init+0x6b0>)
 8015e30:	4293      	cmp	r3, r2
 8015e32:	d004      	beq.n	8015e3e <HAL_DMA_Init+0x5c6>
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	4a3c      	ldr	r2, [pc, #240]	; (8015f2c <HAL_DMA_Init+0x6b4>)
 8015e3a:	4293      	cmp	r3, r2
 8015e3c:	d101      	bne.n	8015e42 <HAL_DMA_Init+0x5ca>
 8015e3e:	2301      	movs	r3, #1
 8015e40:	e000      	b.n	8015e44 <HAL_DMA_Init+0x5cc>
 8015e42:	2300      	movs	r3, #0
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d032      	beq.n	8015eae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f001 ff3d 	bl	8017cc8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	689b      	ldr	r3, [r3, #8]
 8015e52:	2b80      	cmp	r3, #128	; 0x80
 8015e54:	d102      	bne.n	8015e5c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	2200      	movs	r2, #0
 8015e5a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	685a      	ldr	r2, [r3, #4]
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015e64:	b2d2      	uxtb	r2, r2
 8015e66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8015e70:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d010      	beq.n	8015e9c <HAL_DMA_Init+0x624>
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	685b      	ldr	r3, [r3, #4]
 8015e7e:	2b08      	cmp	r3, #8
 8015e80:	d80c      	bhi.n	8015e9c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f001 ffba 	bl	8017dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e94:	687a      	ldr	r2, [r7, #4]
 8015e96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8015e98:	605a      	str	r2, [r3, #4]
 8015e9a:	e008      	b.n	8015eae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2200      	movs	r2, #0
 8015eac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2201      	movs	r2, #1
 8015eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8015ebc:	2300      	movs	r3, #0
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3718      	adds	r7, #24
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	a7fdabf8 	.word	0xa7fdabf8
 8015ecc:	cccccccd 	.word	0xcccccccd
 8015ed0:	40020010 	.word	0x40020010
 8015ed4:	40020028 	.word	0x40020028
 8015ed8:	40020040 	.word	0x40020040
 8015edc:	40020058 	.word	0x40020058
 8015ee0:	40020070 	.word	0x40020070
 8015ee4:	40020088 	.word	0x40020088
 8015ee8:	400200a0 	.word	0x400200a0
 8015eec:	400200b8 	.word	0x400200b8
 8015ef0:	40020410 	.word	0x40020410
 8015ef4:	40020428 	.word	0x40020428
 8015ef8:	40020440 	.word	0x40020440
 8015efc:	40020458 	.word	0x40020458
 8015f00:	40020470 	.word	0x40020470
 8015f04:	40020488 	.word	0x40020488
 8015f08:	400204a0 	.word	0x400204a0
 8015f0c:	400204b8 	.word	0x400204b8
 8015f10:	58025408 	.word	0x58025408
 8015f14:	5802541c 	.word	0x5802541c
 8015f18:	58025430 	.word	0x58025430
 8015f1c:	58025444 	.word	0x58025444
 8015f20:	58025458 	.word	0x58025458
 8015f24:	5802546c 	.word	0x5802546c
 8015f28:	58025480 	.word	0x58025480
 8015f2c:	58025494 	.word	0x58025494

08015f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b086      	sub	sp, #24
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	60f8      	str	r0, [r7, #12]
 8015f38:	60b9      	str	r1, [r7, #8]
 8015f3a:	607a      	str	r2, [r7, #4]
 8015f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d101      	bne.n	8015f4c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8015f48:	2301      	movs	r3, #1
 8015f4a:	e226      	b.n	801639a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015f52:	2b01      	cmp	r3, #1
 8015f54:	d101      	bne.n	8015f5a <HAL_DMA_Start_IT+0x2a>
 8015f56:	2302      	movs	r3, #2
 8015f58:	e21f      	b.n	801639a <HAL_DMA_Start_IT+0x46a>
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	2201      	movs	r2, #1
 8015f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	2b01      	cmp	r3, #1
 8015f6c:	f040 820a 	bne.w	8016384 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	2202      	movs	r2, #2
 8015f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	4a68      	ldr	r2, [pc, #416]	; (8016124 <HAL_DMA_Start_IT+0x1f4>)
 8015f84:	4293      	cmp	r3, r2
 8015f86:	d04a      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	4a66      	ldr	r2, [pc, #408]	; (8016128 <HAL_DMA_Start_IT+0x1f8>)
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	d045      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	4a65      	ldr	r2, [pc, #404]	; (801612c <HAL_DMA_Start_IT+0x1fc>)
 8015f98:	4293      	cmp	r3, r2
 8015f9a:	d040      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	4a63      	ldr	r2, [pc, #396]	; (8016130 <HAL_DMA_Start_IT+0x200>)
 8015fa2:	4293      	cmp	r3, r2
 8015fa4:	d03b      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	4a62      	ldr	r2, [pc, #392]	; (8016134 <HAL_DMA_Start_IT+0x204>)
 8015fac:	4293      	cmp	r3, r2
 8015fae:	d036      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	4a60      	ldr	r2, [pc, #384]	; (8016138 <HAL_DMA_Start_IT+0x208>)
 8015fb6:	4293      	cmp	r3, r2
 8015fb8:	d031      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	4a5f      	ldr	r2, [pc, #380]	; (801613c <HAL_DMA_Start_IT+0x20c>)
 8015fc0:	4293      	cmp	r3, r2
 8015fc2:	d02c      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	4a5d      	ldr	r2, [pc, #372]	; (8016140 <HAL_DMA_Start_IT+0x210>)
 8015fca:	4293      	cmp	r3, r2
 8015fcc:	d027      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	4a5c      	ldr	r2, [pc, #368]	; (8016144 <HAL_DMA_Start_IT+0x214>)
 8015fd4:	4293      	cmp	r3, r2
 8015fd6:	d022      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	4a5a      	ldr	r2, [pc, #360]	; (8016148 <HAL_DMA_Start_IT+0x218>)
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d01d      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	4a59      	ldr	r2, [pc, #356]	; (801614c <HAL_DMA_Start_IT+0x21c>)
 8015fe8:	4293      	cmp	r3, r2
 8015fea:	d018      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	4a57      	ldr	r2, [pc, #348]	; (8016150 <HAL_DMA_Start_IT+0x220>)
 8015ff2:	4293      	cmp	r3, r2
 8015ff4:	d013      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	4a56      	ldr	r2, [pc, #344]	; (8016154 <HAL_DMA_Start_IT+0x224>)
 8015ffc:	4293      	cmp	r3, r2
 8015ffe:	d00e      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	4a54      	ldr	r2, [pc, #336]	; (8016158 <HAL_DMA_Start_IT+0x228>)
 8016006:	4293      	cmp	r3, r2
 8016008:	d009      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	4a53      	ldr	r2, [pc, #332]	; (801615c <HAL_DMA_Start_IT+0x22c>)
 8016010:	4293      	cmp	r3, r2
 8016012:	d004      	beq.n	801601e <HAL_DMA_Start_IT+0xee>
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	4a51      	ldr	r2, [pc, #324]	; (8016160 <HAL_DMA_Start_IT+0x230>)
 801601a:	4293      	cmp	r3, r2
 801601c:	d108      	bne.n	8016030 <HAL_DMA_Start_IT+0x100>
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	681a      	ldr	r2, [r3, #0]
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	f022 0201 	bic.w	r2, r2, #1
 801602c:	601a      	str	r2, [r3, #0]
 801602e:	e007      	b.n	8016040 <HAL_DMA_Start_IT+0x110>
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	681a      	ldr	r2, [r3, #0]
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	f022 0201 	bic.w	r2, r2, #1
 801603e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	687a      	ldr	r2, [r7, #4]
 8016044:	68b9      	ldr	r1, [r7, #8]
 8016046:	68f8      	ldr	r0, [r7, #12]
 8016048:	f001 fb64 	bl	8017714 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	4a34      	ldr	r2, [pc, #208]	; (8016124 <HAL_DMA_Start_IT+0x1f4>)
 8016052:	4293      	cmp	r3, r2
 8016054:	d04a      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	4a33      	ldr	r2, [pc, #204]	; (8016128 <HAL_DMA_Start_IT+0x1f8>)
 801605c:	4293      	cmp	r3, r2
 801605e:	d045      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	4a31      	ldr	r2, [pc, #196]	; (801612c <HAL_DMA_Start_IT+0x1fc>)
 8016066:	4293      	cmp	r3, r2
 8016068:	d040      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	4a30      	ldr	r2, [pc, #192]	; (8016130 <HAL_DMA_Start_IT+0x200>)
 8016070:	4293      	cmp	r3, r2
 8016072:	d03b      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	4a2e      	ldr	r2, [pc, #184]	; (8016134 <HAL_DMA_Start_IT+0x204>)
 801607a:	4293      	cmp	r3, r2
 801607c:	d036      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	4a2d      	ldr	r2, [pc, #180]	; (8016138 <HAL_DMA_Start_IT+0x208>)
 8016084:	4293      	cmp	r3, r2
 8016086:	d031      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	4a2b      	ldr	r2, [pc, #172]	; (801613c <HAL_DMA_Start_IT+0x20c>)
 801608e:	4293      	cmp	r3, r2
 8016090:	d02c      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4a2a      	ldr	r2, [pc, #168]	; (8016140 <HAL_DMA_Start_IT+0x210>)
 8016098:	4293      	cmp	r3, r2
 801609a:	d027      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4a28      	ldr	r2, [pc, #160]	; (8016144 <HAL_DMA_Start_IT+0x214>)
 80160a2:	4293      	cmp	r3, r2
 80160a4:	d022      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	4a27      	ldr	r2, [pc, #156]	; (8016148 <HAL_DMA_Start_IT+0x218>)
 80160ac:	4293      	cmp	r3, r2
 80160ae:	d01d      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	4a25      	ldr	r2, [pc, #148]	; (801614c <HAL_DMA_Start_IT+0x21c>)
 80160b6:	4293      	cmp	r3, r2
 80160b8:	d018      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	4a24      	ldr	r2, [pc, #144]	; (8016150 <HAL_DMA_Start_IT+0x220>)
 80160c0:	4293      	cmp	r3, r2
 80160c2:	d013      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	4a22      	ldr	r2, [pc, #136]	; (8016154 <HAL_DMA_Start_IT+0x224>)
 80160ca:	4293      	cmp	r3, r2
 80160cc:	d00e      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	4a21      	ldr	r2, [pc, #132]	; (8016158 <HAL_DMA_Start_IT+0x228>)
 80160d4:	4293      	cmp	r3, r2
 80160d6:	d009      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	4a1f      	ldr	r2, [pc, #124]	; (801615c <HAL_DMA_Start_IT+0x22c>)
 80160de:	4293      	cmp	r3, r2
 80160e0:	d004      	beq.n	80160ec <HAL_DMA_Start_IT+0x1bc>
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	4a1e      	ldr	r2, [pc, #120]	; (8016160 <HAL_DMA_Start_IT+0x230>)
 80160e8:	4293      	cmp	r3, r2
 80160ea:	d101      	bne.n	80160f0 <HAL_DMA_Start_IT+0x1c0>
 80160ec:	2301      	movs	r3, #1
 80160ee:	e000      	b.n	80160f2 <HAL_DMA_Start_IT+0x1c2>
 80160f0:	2300      	movs	r3, #0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d036      	beq.n	8016164 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	f023 021e 	bic.w	r2, r3, #30
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	f042 0216 	orr.w	r2, r2, #22
 8016108:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801610e:	2b00      	cmp	r3, #0
 8016110:	d03e      	beq.n	8016190 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	681a      	ldr	r2, [r3, #0]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	f042 0208 	orr.w	r2, r2, #8
 8016120:	601a      	str	r2, [r3, #0]
 8016122:	e035      	b.n	8016190 <HAL_DMA_Start_IT+0x260>
 8016124:	40020010 	.word	0x40020010
 8016128:	40020028 	.word	0x40020028
 801612c:	40020040 	.word	0x40020040
 8016130:	40020058 	.word	0x40020058
 8016134:	40020070 	.word	0x40020070
 8016138:	40020088 	.word	0x40020088
 801613c:	400200a0 	.word	0x400200a0
 8016140:	400200b8 	.word	0x400200b8
 8016144:	40020410 	.word	0x40020410
 8016148:	40020428 	.word	0x40020428
 801614c:	40020440 	.word	0x40020440
 8016150:	40020458 	.word	0x40020458
 8016154:	40020470 	.word	0x40020470
 8016158:	40020488 	.word	0x40020488
 801615c:	400204a0 	.word	0x400204a0
 8016160:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	f023 020e 	bic.w	r2, r3, #14
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	f042 020a 	orr.w	r2, r2, #10
 8016176:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801617c:	2b00      	cmp	r3, #0
 801617e:	d007      	beq.n	8016190 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	681a      	ldr	r2, [r3, #0]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	f042 0204 	orr.w	r2, r2, #4
 801618e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	4a83      	ldr	r2, [pc, #524]	; (80163a4 <HAL_DMA_Start_IT+0x474>)
 8016196:	4293      	cmp	r3, r2
 8016198:	d072      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	4a82      	ldr	r2, [pc, #520]	; (80163a8 <HAL_DMA_Start_IT+0x478>)
 80161a0:	4293      	cmp	r3, r2
 80161a2:	d06d      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	4a80      	ldr	r2, [pc, #512]	; (80163ac <HAL_DMA_Start_IT+0x47c>)
 80161aa:	4293      	cmp	r3, r2
 80161ac:	d068      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	4a7f      	ldr	r2, [pc, #508]	; (80163b0 <HAL_DMA_Start_IT+0x480>)
 80161b4:	4293      	cmp	r3, r2
 80161b6:	d063      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	4a7d      	ldr	r2, [pc, #500]	; (80163b4 <HAL_DMA_Start_IT+0x484>)
 80161be:	4293      	cmp	r3, r2
 80161c0:	d05e      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	4a7c      	ldr	r2, [pc, #496]	; (80163b8 <HAL_DMA_Start_IT+0x488>)
 80161c8:	4293      	cmp	r3, r2
 80161ca:	d059      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	4a7a      	ldr	r2, [pc, #488]	; (80163bc <HAL_DMA_Start_IT+0x48c>)
 80161d2:	4293      	cmp	r3, r2
 80161d4:	d054      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	4a79      	ldr	r2, [pc, #484]	; (80163c0 <HAL_DMA_Start_IT+0x490>)
 80161dc:	4293      	cmp	r3, r2
 80161de:	d04f      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	4a77      	ldr	r2, [pc, #476]	; (80163c4 <HAL_DMA_Start_IT+0x494>)
 80161e6:	4293      	cmp	r3, r2
 80161e8:	d04a      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	4a76      	ldr	r2, [pc, #472]	; (80163c8 <HAL_DMA_Start_IT+0x498>)
 80161f0:	4293      	cmp	r3, r2
 80161f2:	d045      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	4a74      	ldr	r2, [pc, #464]	; (80163cc <HAL_DMA_Start_IT+0x49c>)
 80161fa:	4293      	cmp	r3, r2
 80161fc:	d040      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	4a73      	ldr	r2, [pc, #460]	; (80163d0 <HAL_DMA_Start_IT+0x4a0>)
 8016204:	4293      	cmp	r3, r2
 8016206:	d03b      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	4a71      	ldr	r2, [pc, #452]	; (80163d4 <HAL_DMA_Start_IT+0x4a4>)
 801620e:	4293      	cmp	r3, r2
 8016210:	d036      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	4a70      	ldr	r2, [pc, #448]	; (80163d8 <HAL_DMA_Start_IT+0x4a8>)
 8016218:	4293      	cmp	r3, r2
 801621a:	d031      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	4a6e      	ldr	r2, [pc, #440]	; (80163dc <HAL_DMA_Start_IT+0x4ac>)
 8016222:	4293      	cmp	r3, r2
 8016224:	d02c      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	4a6d      	ldr	r2, [pc, #436]	; (80163e0 <HAL_DMA_Start_IT+0x4b0>)
 801622c:	4293      	cmp	r3, r2
 801622e:	d027      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	4a6b      	ldr	r2, [pc, #428]	; (80163e4 <HAL_DMA_Start_IT+0x4b4>)
 8016236:	4293      	cmp	r3, r2
 8016238:	d022      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	4a6a      	ldr	r2, [pc, #424]	; (80163e8 <HAL_DMA_Start_IT+0x4b8>)
 8016240:	4293      	cmp	r3, r2
 8016242:	d01d      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	4a68      	ldr	r2, [pc, #416]	; (80163ec <HAL_DMA_Start_IT+0x4bc>)
 801624a:	4293      	cmp	r3, r2
 801624c:	d018      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	4a67      	ldr	r2, [pc, #412]	; (80163f0 <HAL_DMA_Start_IT+0x4c0>)
 8016254:	4293      	cmp	r3, r2
 8016256:	d013      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	4a65      	ldr	r2, [pc, #404]	; (80163f4 <HAL_DMA_Start_IT+0x4c4>)
 801625e:	4293      	cmp	r3, r2
 8016260:	d00e      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	4a64      	ldr	r2, [pc, #400]	; (80163f8 <HAL_DMA_Start_IT+0x4c8>)
 8016268:	4293      	cmp	r3, r2
 801626a:	d009      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	4a62      	ldr	r2, [pc, #392]	; (80163fc <HAL_DMA_Start_IT+0x4cc>)
 8016272:	4293      	cmp	r3, r2
 8016274:	d004      	beq.n	8016280 <HAL_DMA_Start_IT+0x350>
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	4a61      	ldr	r2, [pc, #388]	; (8016400 <HAL_DMA_Start_IT+0x4d0>)
 801627c:	4293      	cmp	r3, r2
 801627e:	d101      	bne.n	8016284 <HAL_DMA_Start_IT+0x354>
 8016280:	2301      	movs	r3, #1
 8016282:	e000      	b.n	8016286 <HAL_DMA_Start_IT+0x356>
 8016284:	2300      	movs	r3, #0
 8016286:	2b00      	cmp	r3, #0
 8016288:	d01a      	beq.n	80162c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016294:	2b00      	cmp	r3, #0
 8016296:	d007      	beq.n	80162a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801629c:	681a      	ldr	r2, [r3, #0]
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80162a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d007      	beq.n	80162c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162b4:	681a      	ldr	r2, [r3, #0]
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80162be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	4a37      	ldr	r2, [pc, #220]	; (80163a4 <HAL_DMA_Start_IT+0x474>)
 80162c6:	4293      	cmp	r3, r2
 80162c8:	d04a      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	4a36      	ldr	r2, [pc, #216]	; (80163a8 <HAL_DMA_Start_IT+0x478>)
 80162d0:	4293      	cmp	r3, r2
 80162d2:	d045      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	4a34      	ldr	r2, [pc, #208]	; (80163ac <HAL_DMA_Start_IT+0x47c>)
 80162da:	4293      	cmp	r3, r2
 80162dc:	d040      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	4a33      	ldr	r2, [pc, #204]	; (80163b0 <HAL_DMA_Start_IT+0x480>)
 80162e4:	4293      	cmp	r3, r2
 80162e6:	d03b      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	4a31      	ldr	r2, [pc, #196]	; (80163b4 <HAL_DMA_Start_IT+0x484>)
 80162ee:	4293      	cmp	r3, r2
 80162f0:	d036      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	4a30      	ldr	r2, [pc, #192]	; (80163b8 <HAL_DMA_Start_IT+0x488>)
 80162f8:	4293      	cmp	r3, r2
 80162fa:	d031      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	4a2e      	ldr	r2, [pc, #184]	; (80163bc <HAL_DMA_Start_IT+0x48c>)
 8016302:	4293      	cmp	r3, r2
 8016304:	d02c      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	4a2d      	ldr	r2, [pc, #180]	; (80163c0 <HAL_DMA_Start_IT+0x490>)
 801630c:	4293      	cmp	r3, r2
 801630e:	d027      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	4a2b      	ldr	r2, [pc, #172]	; (80163c4 <HAL_DMA_Start_IT+0x494>)
 8016316:	4293      	cmp	r3, r2
 8016318:	d022      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	4a2a      	ldr	r2, [pc, #168]	; (80163c8 <HAL_DMA_Start_IT+0x498>)
 8016320:	4293      	cmp	r3, r2
 8016322:	d01d      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	4a28      	ldr	r2, [pc, #160]	; (80163cc <HAL_DMA_Start_IT+0x49c>)
 801632a:	4293      	cmp	r3, r2
 801632c:	d018      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	4a27      	ldr	r2, [pc, #156]	; (80163d0 <HAL_DMA_Start_IT+0x4a0>)
 8016334:	4293      	cmp	r3, r2
 8016336:	d013      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	4a25      	ldr	r2, [pc, #148]	; (80163d4 <HAL_DMA_Start_IT+0x4a4>)
 801633e:	4293      	cmp	r3, r2
 8016340:	d00e      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	4a24      	ldr	r2, [pc, #144]	; (80163d8 <HAL_DMA_Start_IT+0x4a8>)
 8016348:	4293      	cmp	r3, r2
 801634a:	d009      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	4a22      	ldr	r2, [pc, #136]	; (80163dc <HAL_DMA_Start_IT+0x4ac>)
 8016352:	4293      	cmp	r3, r2
 8016354:	d004      	beq.n	8016360 <HAL_DMA_Start_IT+0x430>
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	4a21      	ldr	r2, [pc, #132]	; (80163e0 <HAL_DMA_Start_IT+0x4b0>)
 801635c:	4293      	cmp	r3, r2
 801635e:	d108      	bne.n	8016372 <HAL_DMA_Start_IT+0x442>
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	681a      	ldr	r2, [r3, #0]
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	f042 0201 	orr.w	r2, r2, #1
 801636e:	601a      	str	r2, [r3, #0]
 8016370:	e012      	b.n	8016398 <HAL_DMA_Start_IT+0x468>
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	681a      	ldr	r2, [r3, #0]
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	f042 0201 	orr.w	r2, r2, #1
 8016380:	601a      	str	r2, [r3, #0]
 8016382:	e009      	b.n	8016398 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2200      	movs	r2, #0
 8016388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016392:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8016394:	2301      	movs	r3, #1
 8016396:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8016398:	7dfb      	ldrb	r3, [r7, #23]
}
 801639a:	4618      	mov	r0, r3
 801639c:	3718      	adds	r7, #24
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	bf00      	nop
 80163a4:	40020010 	.word	0x40020010
 80163a8:	40020028 	.word	0x40020028
 80163ac:	40020040 	.word	0x40020040
 80163b0:	40020058 	.word	0x40020058
 80163b4:	40020070 	.word	0x40020070
 80163b8:	40020088 	.word	0x40020088
 80163bc:	400200a0 	.word	0x400200a0
 80163c0:	400200b8 	.word	0x400200b8
 80163c4:	40020410 	.word	0x40020410
 80163c8:	40020428 	.word	0x40020428
 80163cc:	40020440 	.word	0x40020440
 80163d0:	40020458 	.word	0x40020458
 80163d4:	40020470 	.word	0x40020470
 80163d8:	40020488 	.word	0x40020488
 80163dc:	400204a0 	.word	0x400204a0
 80163e0:	400204b8 	.word	0x400204b8
 80163e4:	58025408 	.word	0x58025408
 80163e8:	5802541c 	.word	0x5802541c
 80163ec:	58025430 	.word	0x58025430
 80163f0:	58025444 	.word	0x58025444
 80163f4:	58025458 	.word	0x58025458
 80163f8:	5802546c 	.word	0x5802546c
 80163fc:	58025480 	.word	0x58025480
 8016400:	58025494 	.word	0x58025494

08016404 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b084      	sub	sp, #16
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d101      	bne.n	8016416 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8016412:	2301      	movs	r3, #1
 8016414:	e205      	b.n	8016822 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801641c:	b2db      	uxtb	r3, r3
 801641e:	2b02      	cmp	r3, #2
 8016420:	d004      	beq.n	801642c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2280      	movs	r2, #128	; 0x80
 8016426:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016428:	2301      	movs	r3, #1
 801642a:	e1fa      	b.n	8016822 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	4a8c      	ldr	r2, [pc, #560]	; (8016664 <HAL_DMA_Abort_IT+0x260>)
 8016432:	4293      	cmp	r3, r2
 8016434:	d04a      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	4a8b      	ldr	r2, [pc, #556]	; (8016668 <HAL_DMA_Abort_IT+0x264>)
 801643c:	4293      	cmp	r3, r2
 801643e:	d045      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	4a89      	ldr	r2, [pc, #548]	; (801666c <HAL_DMA_Abort_IT+0x268>)
 8016446:	4293      	cmp	r3, r2
 8016448:	d040      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	4a88      	ldr	r2, [pc, #544]	; (8016670 <HAL_DMA_Abort_IT+0x26c>)
 8016450:	4293      	cmp	r3, r2
 8016452:	d03b      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	4a86      	ldr	r2, [pc, #536]	; (8016674 <HAL_DMA_Abort_IT+0x270>)
 801645a:	4293      	cmp	r3, r2
 801645c:	d036      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	4a85      	ldr	r2, [pc, #532]	; (8016678 <HAL_DMA_Abort_IT+0x274>)
 8016464:	4293      	cmp	r3, r2
 8016466:	d031      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	4a83      	ldr	r2, [pc, #524]	; (801667c <HAL_DMA_Abort_IT+0x278>)
 801646e:	4293      	cmp	r3, r2
 8016470:	d02c      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	4a82      	ldr	r2, [pc, #520]	; (8016680 <HAL_DMA_Abort_IT+0x27c>)
 8016478:	4293      	cmp	r3, r2
 801647a:	d027      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	4a80      	ldr	r2, [pc, #512]	; (8016684 <HAL_DMA_Abort_IT+0x280>)
 8016482:	4293      	cmp	r3, r2
 8016484:	d022      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	4a7f      	ldr	r2, [pc, #508]	; (8016688 <HAL_DMA_Abort_IT+0x284>)
 801648c:	4293      	cmp	r3, r2
 801648e:	d01d      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	4a7d      	ldr	r2, [pc, #500]	; (801668c <HAL_DMA_Abort_IT+0x288>)
 8016496:	4293      	cmp	r3, r2
 8016498:	d018      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	4a7c      	ldr	r2, [pc, #496]	; (8016690 <HAL_DMA_Abort_IT+0x28c>)
 80164a0:	4293      	cmp	r3, r2
 80164a2:	d013      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	4a7a      	ldr	r2, [pc, #488]	; (8016694 <HAL_DMA_Abort_IT+0x290>)
 80164aa:	4293      	cmp	r3, r2
 80164ac:	d00e      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	4a79      	ldr	r2, [pc, #484]	; (8016698 <HAL_DMA_Abort_IT+0x294>)
 80164b4:	4293      	cmp	r3, r2
 80164b6:	d009      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	4a77      	ldr	r2, [pc, #476]	; (801669c <HAL_DMA_Abort_IT+0x298>)
 80164be:	4293      	cmp	r3, r2
 80164c0:	d004      	beq.n	80164cc <HAL_DMA_Abort_IT+0xc8>
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	4a76      	ldr	r2, [pc, #472]	; (80166a0 <HAL_DMA_Abort_IT+0x29c>)
 80164c8:	4293      	cmp	r3, r2
 80164ca:	d101      	bne.n	80164d0 <HAL_DMA_Abort_IT+0xcc>
 80164cc:	2301      	movs	r3, #1
 80164ce:	e000      	b.n	80164d2 <HAL_DMA_Abort_IT+0xce>
 80164d0:	2300      	movs	r3, #0
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d065      	beq.n	80165a2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	2204      	movs	r2, #4
 80164da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	4a60      	ldr	r2, [pc, #384]	; (8016664 <HAL_DMA_Abort_IT+0x260>)
 80164e4:	4293      	cmp	r3, r2
 80164e6:	d04a      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	4a5e      	ldr	r2, [pc, #376]	; (8016668 <HAL_DMA_Abort_IT+0x264>)
 80164ee:	4293      	cmp	r3, r2
 80164f0:	d045      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	4a5d      	ldr	r2, [pc, #372]	; (801666c <HAL_DMA_Abort_IT+0x268>)
 80164f8:	4293      	cmp	r3, r2
 80164fa:	d040      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4a5b      	ldr	r2, [pc, #364]	; (8016670 <HAL_DMA_Abort_IT+0x26c>)
 8016502:	4293      	cmp	r3, r2
 8016504:	d03b      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4a5a      	ldr	r2, [pc, #360]	; (8016674 <HAL_DMA_Abort_IT+0x270>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d036      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	4a58      	ldr	r2, [pc, #352]	; (8016678 <HAL_DMA_Abort_IT+0x274>)
 8016516:	4293      	cmp	r3, r2
 8016518:	d031      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	4a57      	ldr	r2, [pc, #348]	; (801667c <HAL_DMA_Abort_IT+0x278>)
 8016520:	4293      	cmp	r3, r2
 8016522:	d02c      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	4a55      	ldr	r2, [pc, #340]	; (8016680 <HAL_DMA_Abort_IT+0x27c>)
 801652a:	4293      	cmp	r3, r2
 801652c:	d027      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	4a54      	ldr	r2, [pc, #336]	; (8016684 <HAL_DMA_Abort_IT+0x280>)
 8016534:	4293      	cmp	r3, r2
 8016536:	d022      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	4a52      	ldr	r2, [pc, #328]	; (8016688 <HAL_DMA_Abort_IT+0x284>)
 801653e:	4293      	cmp	r3, r2
 8016540:	d01d      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	4a51      	ldr	r2, [pc, #324]	; (801668c <HAL_DMA_Abort_IT+0x288>)
 8016548:	4293      	cmp	r3, r2
 801654a:	d018      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	4a4f      	ldr	r2, [pc, #316]	; (8016690 <HAL_DMA_Abort_IT+0x28c>)
 8016552:	4293      	cmp	r3, r2
 8016554:	d013      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	4a4e      	ldr	r2, [pc, #312]	; (8016694 <HAL_DMA_Abort_IT+0x290>)
 801655c:	4293      	cmp	r3, r2
 801655e:	d00e      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	4a4c      	ldr	r2, [pc, #304]	; (8016698 <HAL_DMA_Abort_IT+0x294>)
 8016566:	4293      	cmp	r3, r2
 8016568:	d009      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	4a4b      	ldr	r2, [pc, #300]	; (801669c <HAL_DMA_Abort_IT+0x298>)
 8016570:	4293      	cmp	r3, r2
 8016572:	d004      	beq.n	801657e <HAL_DMA_Abort_IT+0x17a>
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	4a49      	ldr	r2, [pc, #292]	; (80166a0 <HAL_DMA_Abort_IT+0x29c>)
 801657a:	4293      	cmp	r3, r2
 801657c:	d108      	bne.n	8016590 <HAL_DMA_Abort_IT+0x18c>
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	f022 0201 	bic.w	r2, r2, #1
 801658c:	601a      	str	r2, [r3, #0]
 801658e:	e147      	b.n	8016820 <HAL_DMA_Abort_IT+0x41c>
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	681a      	ldr	r2, [r3, #0]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f022 0201 	bic.w	r2, r2, #1
 801659e:	601a      	str	r2, [r3, #0]
 80165a0:	e13e      	b.n	8016820 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	681a      	ldr	r2, [r3, #0]
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	f022 020e 	bic.w	r2, r2, #14
 80165b0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	4a2b      	ldr	r2, [pc, #172]	; (8016664 <HAL_DMA_Abort_IT+0x260>)
 80165b8:	4293      	cmp	r3, r2
 80165ba:	d04a      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4a29      	ldr	r2, [pc, #164]	; (8016668 <HAL_DMA_Abort_IT+0x264>)
 80165c2:	4293      	cmp	r3, r2
 80165c4:	d045      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	4a28      	ldr	r2, [pc, #160]	; (801666c <HAL_DMA_Abort_IT+0x268>)
 80165cc:	4293      	cmp	r3, r2
 80165ce:	d040      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	4a26      	ldr	r2, [pc, #152]	; (8016670 <HAL_DMA_Abort_IT+0x26c>)
 80165d6:	4293      	cmp	r3, r2
 80165d8:	d03b      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	4a25      	ldr	r2, [pc, #148]	; (8016674 <HAL_DMA_Abort_IT+0x270>)
 80165e0:	4293      	cmp	r3, r2
 80165e2:	d036      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	4a23      	ldr	r2, [pc, #140]	; (8016678 <HAL_DMA_Abort_IT+0x274>)
 80165ea:	4293      	cmp	r3, r2
 80165ec:	d031      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	4a22      	ldr	r2, [pc, #136]	; (801667c <HAL_DMA_Abort_IT+0x278>)
 80165f4:	4293      	cmp	r3, r2
 80165f6:	d02c      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	4a20      	ldr	r2, [pc, #128]	; (8016680 <HAL_DMA_Abort_IT+0x27c>)
 80165fe:	4293      	cmp	r3, r2
 8016600:	d027      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	4a1f      	ldr	r2, [pc, #124]	; (8016684 <HAL_DMA_Abort_IT+0x280>)
 8016608:	4293      	cmp	r3, r2
 801660a:	d022      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	4a1d      	ldr	r2, [pc, #116]	; (8016688 <HAL_DMA_Abort_IT+0x284>)
 8016612:	4293      	cmp	r3, r2
 8016614:	d01d      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	4a1c      	ldr	r2, [pc, #112]	; (801668c <HAL_DMA_Abort_IT+0x288>)
 801661c:	4293      	cmp	r3, r2
 801661e:	d018      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	4a1a      	ldr	r2, [pc, #104]	; (8016690 <HAL_DMA_Abort_IT+0x28c>)
 8016626:	4293      	cmp	r3, r2
 8016628:	d013      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	4a19      	ldr	r2, [pc, #100]	; (8016694 <HAL_DMA_Abort_IT+0x290>)
 8016630:	4293      	cmp	r3, r2
 8016632:	d00e      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4a17      	ldr	r2, [pc, #92]	; (8016698 <HAL_DMA_Abort_IT+0x294>)
 801663a:	4293      	cmp	r3, r2
 801663c:	d009      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	4a16      	ldr	r2, [pc, #88]	; (801669c <HAL_DMA_Abort_IT+0x298>)
 8016644:	4293      	cmp	r3, r2
 8016646:	d004      	beq.n	8016652 <HAL_DMA_Abort_IT+0x24e>
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	4a14      	ldr	r2, [pc, #80]	; (80166a0 <HAL_DMA_Abort_IT+0x29c>)
 801664e:	4293      	cmp	r3, r2
 8016650:	d128      	bne.n	80166a4 <HAL_DMA_Abort_IT+0x2a0>
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	681a      	ldr	r2, [r3, #0]
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	f022 0201 	bic.w	r2, r2, #1
 8016660:	601a      	str	r2, [r3, #0]
 8016662:	e027      	b.n	80166b4 <HAL_DMA_Abort_IT+0x2b0>
 8016664:	40020010 	.word	0x40020010
 8016668:	40020028 	.word	0x40020028
 801666c:	40020040 	.word	0x40020040
 8016670:	40020058 	.word	0x40020058
 8016674:	40020070 	.word	0x40020070
 8016678:	40020088 	.word	0x40020088
 801667c:	400200a0 	.word	0x400200a0
 8016680:	400200b8 	.word	0x400200b8
 8016684:	40020410 	.word	0x40020410
 8016688:	40020428 	.word	0x40020428
 801668c:	40020440 	.word	0x40020440
 8016690:	40020458 	.word	0x40020458
 8016694:	40020470 	.word	0x40020470
 8016698:	40020488 	.word	0x40020488
 801669c:	400204a0 	.word	0x400204a0
 80166a0:	400204b8 	.word	0x400204b8
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	681a      	ldr	r2, [r3, #0]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	f022 0201 	bic.w	r2, r2, #1
 80166b2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	4a5c      	ldr	r2, [pc, #368]	; (801682c <HAL_DMA_Abort_IT+0x428>)
 80166ba:	4293      	cmp	r3, r2
 80166bc:	d072      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	4a5b      	ldr	r2, [pc, #364]	; (8016830 <HAL_DMA_Abort_IT+0x42c>)
 80166c4:	4293      	cmp	r3, r2
 80166c6:	d06d      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	4a59      	ldr	r2, [pc, #356]	; (8016834 <HAL_DMA_Abort_IT+0x430>)
 80166ce:	4293      	cmp	r3, r2
 80166d0:	d068      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	4a58      	ldr	r2, [pc, #352]	; (8016838 <HAL_DMA_Abort_IT+0x434>)
 80166d8:	4293      	cmp	r3, r2
 80166da:	d063      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	4a56      	ldr	r2, [pc, #344]	; (801683c <HAL_DMA_Abort_IT+0x438>)
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d05e      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	4a55      	ldr	r2, [pc, #340]	; (8016840 <HAL_DMA_Abort_IT+0x43c>)
 80166ec:	4293      	cmp	r3, r2
 80166ee:	d059      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	4a53      	ldr	r2, [pc, #332]	; (8016844 <HAL_DMA_Abort_IT+0x440>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d054      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	4a52      	ldr	r2, [pc, #328]	; (8016848 <HAL_DMA_Abort_IT+0x444>)
 8016700:	4293      	cmp	r3, r2
 8016702:	d04f      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	4a50      	ldr	r2, [pc, #320]	; (801684c <HAL_DMA_Abort_IT+0x448>)
 801670a:	4293      	cmp	r3, r2
 801670c:	d04a      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	4a4f      	ldr	r2, [pc, #316]	; (8016850 <HAL_DMA_Abort_IT+0x44c>)
 8016714:	4293      	cmp	r3, r2
 8016716:	d045      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	4a4d      	ldr	r2, [pc, #308]	; (8016854 <HAL_DMA_Abort_IT+0x450>)
 801671e:	4293      	cmp	r3, r2
 8016720:	d040      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	4a4c      	ldr	r2, [pc, #304]	; (8016858 <HAL_DMA_Abort_IT+0x454>)
 8016728:	4293      	cmp	r3, r2
 801672a:	d03b      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	4a4a      	ldr	r2, [pc, #296]	; (801685c <HAL_DMA_Abort_IT+0x458>)
 8016732:	4293      	cmp	r3, r2
 8016734:	d036      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	4a49      	ldr	r2, [pc, #292]	; (8016860 <HAL_DMA_Abort_IT+0x45c>)
 801673c:	4293      	cmp	r3, r2
 801673e:	d031      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	4a47      	ldr	r2, [pc, #284]	; (8016864 <HAL_DMA_Abort_IT+0x460>)
 8016746:	4293      	cmp	r3, r2
 8016748:	d02c      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	4a46      	ldr	r2, [pc, #280]	; (8016868 <HAL_DMA_Abort_IT+0x464>)
 8016750:	4293      	cmp	r3, r2
 8016752:	d027      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	4a44      	ldr	r2, [pc, #272]	; (801686c <HAL_DMA_Abort_IT+0x468>)
 801675a:	4293      	cmp	r3, r2
 801675c:	d022      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	4a43      	ldr	r2, [pc, #268]	; (8016870 <HAL_DMA_Abort_IT+0x46c>)
 8016764:	4293      	cmp	r3, r2
 8016766:	d01d      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	4a41      	ldr	r2, [pc, #260]	; (8016874 <HAL_DMA_Abort_IT+0x470>)
 801676e:	4293      	cmp	r3, r2
 8016770:	d018      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	4a40      	ldr	r2, [pc, #256]	; (8016878 <HAL_DMA_Abort_IT+0x474>)
 8016778:	4293      	cmp	r3, r2
 801677a:	d013      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	4a3e      	ldr	r2, [pc, #248]	; (801687c <HAL_DMA_Abort_IT+0x478>)
 8016782:	4293      	cmp	r3, r2
 8016784:	d00e      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	4a3d      	ldr	r2, [pc, #244]	; (8016880 <HAL_DMA_Abort_IT+0x47c>)
 801678c:	4293      	cmp	r3, r2
 801678e:	d009      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	4a3b      	ldr	r2, [pc, #236]	; (8016884 <HAL_DMA_Abort_IT+0x480>)
 8016796:	4293      	cmp	r3, r2
 8016798:	d004      	beq.n	80167a4 <HAL_DMA_Abort_IT+0x3a0>
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	4a3a      	ldr	r2, [pc, #232]	; (8016888 <HAL_DMA_Abort_IT+0x484>)
 80167a0:	4293      	cmp	r3, r2
 80167a2:	d101      	bne.n	80167a8 <HAL_DMA_Abort_IT+0x3a4>
 80167a4:	2301      	movs	r3, #1
 80167a6:	e000      	b.n	80167aa <HAL_DMA_Abort_IT+0x3a6>
 80167a8:	2300      	movs	r3, #0
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d028      	beq.n	8016800 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167b2:	681a      	ldr	r2, [r3, #0]
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80167bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80167c8:	f003 031f 	and.w	r3, r3, #31
 80167cc:	2201      	movs	r2, #1
 80167ce:	409a      	lsls	r2, r3
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80167d8:	687a      	ldr	r2, [r7, #4]
 80167da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80167dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d00c      	beq.n	8016800 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167ea:	681a      	ldr	r2, [r3, #0]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80167f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167fa:	687a      	ldr	r2, [r7, #4]
 80167fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80167fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2200      	movs	r2, #0
 8016804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2201      	movs	r2, #1
 801680c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016814:	2b00      	cmp	r3, #0
 8016816:	d003      	beq.n	8016820 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8016820:	2300      	movs	r3, #0
}
 8016822:	4618      	mov	r0, r3
 8016824:	3710      	adds	r7, #16
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
 801682a:	bf00      	nop
 801682c:	40020010 	.word	0x40020010
 8016830:	40020028 	.word	0x40020028
 8016834:	40020040 	.word	0x40020040
 8016838:	40020058 	.word	0x40020058
 801683c:	40020070 	.word	0x40020070
 8016840:	40020088 	.word	0x40020088
 8016844:	400200a0 	.word	0x400200a0
 8016848:	400200b8 	.word	0x400200b8
 801684c:	40020410 	.word	0x40020410
 8016850:	40020428 	.word	0x40020428
 8016854:	40020440 	.word	0x40020440
 8016858:	40020458 	.word	0x40020458
 801685c:	40020470 	.word	0x40020470
 8016860:	40020488 	.word	0x40020488
 8016864:	400204a0 	.word	0x400204a0
 8016868:	400204b8 	.word	0x400204b8
 801686c:	58025408 	.word	0x58025408
 8016870:	5802541c 	.word	0x5802541c
 8016874:	58025430 	.word	0x58025430
 8016878:	58025444 	.word	0x58025444
 801687c:	58025458 	.word	0x58025458
 8016880:	5802546c 	.word	0x5802546c
 8016884:	58025480 	.word	0x58025480
 8016888:	58025494 	.word	0x58025494

0801688c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b08a      	sub	sp, #40	; 0x28
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8016894:	2300      	movs	r3, #0
 8016896:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016898:	4b67      	ldr	r3, [pc, #412]	; (8016a38 <HAL_DMA_IRQHandler+0x1ac>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	4a67      	ldr	r2, [pc, #412]	; (8016a3c <HAL_DMA_IRQHandler+0x1b0>)
 801689e:	fba2 2303 	umull	r2, r3, r2, r3
 80168a2:	0a9b      	lsrs	r3, r3, #10
 80168a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80168b2:	6a3b      	ldr	r3, [r7, #32]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80168b8:	69fb      	ldr	r3, [r7, #28]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	4a5f      	ldr	r2, [pc, #380]	; (8016a40 <HAL_DMA_IRQHandler+0x1b4>)
 80168c4:	4293      	cmp	r3, r2
 80168c6:	d04a      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	4a5d      	ldr	r2, [pc, #372]	; (8016a44 <HAL_DMA_IRQHandler+0x1b8>)
 80168ce:	4293      	cmp	r3, r2
 80168d0:	d045      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	4a5c      	ldr	r2, [pc, #368]	; (8016a48 <HAL_DMA_IRQHandler+0x1bc>)
 80168d8:	4293      	cmp	r3, r2
 80168da:	d040      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	4a5a      	ldr	r2, [pc, #360]	; (8016a4c <HAL_DMA_IRQHandler+0x1c0>)
 80168e2:	4293      	cmp	r3, r2
 80168e4:	d03b      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	4a59      	ldr	r2, [pc, #356]	; (8016a50 <HAL_DMA_IRQHandler+0x1c4>)
 80168ec:	4293      	cmp	r3, r2
 80168ee:	d036      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	4a57      	ldr	r2, [pc, #348]	; (8016a54 <HAL_DMA_IRQHandler+0x1c8>)
 80168f6:	4293      	cmp	r3, r2
 80168f8:	d031      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	4a56      	ldr	r2, [pc, #344]	; (8016a58 <HAL_DMA_IRQHandler+0x1cc>)
 8016900:	4293      	cmp	r3, r2
 8016902:	d02c      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	4a54      	ldr	r2, [pc, #336]	; (8016a5c <HAL_DMA_IRQHandler+0x1d0>)
 801690a:	4293      	cmp	r3, r2
 801690c:	d027      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	4a53      	ldr	r2, [pc, #332]	; (8016a60 <HAL_DMA_IRQHandler+0x1d4>)
 8016914:	4293      	cmp	r3, r2
 8016916:	d022      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	4a51      	ldr	r2, [pc, #324]	; (8016a64 <HAL_DMA_IRQHandler+0x1d8>)
 801691e:	4293      	cmp	r3, r2
 8016920:	d01d      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	4a50      	ldr	r2, [pc, #320]	; (8016a68 <HAL_DMA_IRQHandler+0x1dc>)
 8016928:	4293      	cmp	r3, r2
 801692a:	d018      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	4a4e      	ldr	r2, [pc, #312]	; (8016a6c <HAL_DMA_IRQHandler+0x1e0>)
 8016932:	4293      	cmp	r3, r2
 8016934:	d013      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	4a4d      	ldr	r2, [pc, #308]	; (8016a70 <HAL_DMA_IRQHandler+0x1e4>)
 801693c:	4293      	cmp	r3, r2
 801693e:	d00e      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	4a4b      	ldr	r2, [pc, #300]	; (8016a74 <HAL_DMA_IRQHandler+0x1e8>)
 8016946:	4293      	cmp	r3, r2
 8016948:	d009      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	4a4a      	ldr	r2, [pc, #296]	; (8016a78 <HAL_DMA_IRQHandler+0x1ec>)
 8016950:	4293      	cmp	r3, r2
 8016952:	d004      	beq.n	801695e <HAL_DMA_IRQHandler+0xd2>
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	4a48      	ldr	r2, [pc, #288]	; (8016a7c <HAL_DMA_IRQHandler+0x1f0>)
 801695a:	4293      	cmp	r3, r2
 801695c:	d101      	bne.n	8016962 <HAL_DMA_IRQHandler+0xd6>
 801695e:	2301      	movs	r3, #1
 8016960:	e000      	b.n	8016964 <HAL_DMA_IRQHandler+0xd8>
 8016962:	2300      	movs	r3, #0
 8016964:	2b00      	cmp	r3, #0
 8016966:	f000 842b 	beq.w	80171c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801696e:	f003 031f 	and.w	r3, r3, #31
 8016972:	2208      	movs	r2, #8
 8016974:	409a      	lsls	r2, r3
 8016976:	69bb      	ldr	r3, [r7, #24]
 8016978:	4013      	ands	r3, r2
 801697a:	2b00      	cmp	r3, #0
 801697c:	f000 80a2 	beq.w	8016ac4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	4a2e      	ldr	r2, [pc, #184]	; (8016a40 <HAL_DMA_IRQHandler+0x1b4>)
 8016986:	4293      	cmp	r3, r2
 8016988:	d04a      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	4a2d      	ldr	r2, [pc, #180]	; (8016a44 <HAL_DMA_IRQHandler+0x1b8>)
 8016990:	4293      	cmp	r3, r2
 8016992:	d045      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	4a2b      	ldr	r2, [pc, #172]	; (8016a48 <HAL_DMA_IRQHandler+0x1bc>)
 801699a:	4293      	cmp	r3, r2
 801699c:	d040      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	4a2a      	ldr	r2, [pc, #168]	; (8016a4c <HAL_DMA_IRQHandler+0x1c0>)
 80169a4:	4293      	cmp	r3, r2
 80169a6:	d03b      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	4a28      	ldr	r2, [pc, #160]	; (8016a50 <HAL_DMA_IRQHandler+0x1c4>)
 80169ae:	4293      	cmp	r3, r2
 80169b0:	d036      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	4a27      	ldr	r2, [pc, #156]	; (8016a54 <HAL_DMA_IRQHandler+0x1c8>)
 80169b8:	4293      	cmp	r3, r2
 80169ba:	d031      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	4a25      	ldr	r2, [pc, #148]	; (8016a58 <HAL_DMA_IRQHandler+0x1cc>)
 80169c2:	4293      	cmp	r3, r2
 80169c4:	d02c      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	4a24      	ldr	r2, [pc, #144]	; (8016a5c <HAL_DMA_IRQHandler+0x1d0>)
 80169cc:	4293      	cmp	r3, r2
 80169ce:	d027      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	4a22      	ldr	r2, [pc, #136]	; (8016a60 <HAL_DMA_IRQHandler+0x1d4>)
 80169d6:	4293      	cmp	r3, r2
 80169d8:	d022      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	4a21      	ldr	r2, [pc, #132]	; (8016a64 <HAL_DMA_IRQHandler+0x1d8>)
 80169e0:	4293      	cmp	r3, r2
 80169e2:	d01d      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	4a1f      	ldr	r2, [pc, #124]	; (8016a68 <HAL_DMA_IRQHandler+0x1dc>)
 80169ea:	4293      	cmp	r3, r2
 80169ec:	d018      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	4a1e      	ldr	r2, [pc, #120]	; (8016a6c <HAL_DMA_IRQHandler+0x1e0>)
 80169f4:	4293      	cmp	r3, r2
 80169f6:	d013      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	4a1c      	ldr	r2, [pc, #112]	; (8016a70 <HAL_DMA_IRQHandler+0x1e4>)
 80169fe:	4293      	cmp	r3, r2
 8016a00:	d00e      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	4a1b      	ldr	r2, [pc, #108]	; (8016a74 <HAL_DMA_IRQHandler+0x1e8>)
 8016a08:	4293      	cmp	r3, r2
 8016a0a:	d009      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	4a19      	ldr	r2, [pc, #100]	; (8016a78 <HAL_DMA_IRQHandler+0x1ec>)
 8016a12:	4293      	cmp	r3, r2
 8016a14:	d004      	beq.n	8016a20 <HAL_DMA_IRQHandler+0x194>
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	4a18      	ldr	r2, [pc, #96]	; (8016a7c <HAL_DMA_IRQHandler+0x1f0>)
 8016a1c:	4293      	cmp	r3, r2
 8016a1e:	d12f      	bne.n	8016a80 <HAL_DMA_IRQHandler+0x1f4>
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	f003 0304 	and.w	r3, r3, #4
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	bf14      	ite	ne
 8016a2e:	2301      	movne	r3, #1
 8016a30:	2300      	moveq	r3, #0
 8016a32:	b2db      	uxtb	r3, r3
 8016a34:	e02e      	b.n	8016a94 <HAL_DMA_IRQHandler+0x208>
 8016a36:	bf00      	nop
 8016a38:	24000698 	.word	0x24000698
 8016a3c:	1b4e81b5 	.word	0x1b4e81b5
 8016a40:	40020010 	.word	0x40020010
 8016a44:	40020028 	.word	0x40020028
 8016a48:	40020040 	.word	0x40020040
 8016a4c:	40020058 	.word	0x40020058
 8016a50:	40020070 	.word	0x40020070
 8016a54:	40020088 	.word	0x40020088
 8016a58:	400200a0 	.word	0x400200a0
 8016a5c:	400200b8 	.word	0x400200b8
 8016a60:	40020410 	.word	0x40020410
 8016a64:	40020428 	.word	0x40020428
 8016a68:	40020440 	.word	0x40020440
 8016a6c:	40020458 	.word	0x40020458
 8016a70:	40020470 	.word	0x40020470
 8016a74:	40020488 	.word	0x40020488
 8016a78:	400204a0 	.word	0x400204a0
 8016a7c:	400204b8 	.word	0x400204b8
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	f003 0308 	and.w	r3, r3, #8
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	bf14      	ite	ne
 8016a8e:	2301      	movne	r3, #1
 8016a90:	2300      	moveq	r3, #0
 8016a92:	b2db      	uxtb	r3, r3
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d015      	beq.n	8016ac4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	681a      	ldr	r2, [r3, #0]
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	f022 0204 	bic.w	r2, r2, #4
 8016aa6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016aac:	f003 031f 	and.w	r3, r3, #31
 8016ab0:	2208      	movs	r2, #8
 8016ab2:	409a      	lsls	r2, r3
 8016ab4:	6a3b      	ldr	r3, [r7, #32]
 8016ab6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016abc:	f043 0201 	orr.w	r2, r3, #1
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ac8:	f003 031f 	and.w	r3, r3, #31
 8016acc:	69ba      	ldr	r2, [r7, #24]
 8016ace:	fa22 f303 	lsr.w	r3, r2, r3
 8016ad2:	f003 0301 	and.w	r3, r3, #1
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d06e      	beq.n	8016bb8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	4a69      	ldr	r2, [pc, #420]	; (8016c84 <HAL_DMA_IRQHandler+0x3f8>)
 8016ae0:	4293      	cmp	r3, r2
 8016ae2:	d04a      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	4a67      	ldr	r2, [pc, #412]	; (8016c88 <HAL_DMA_IRQHandler+0x3fc>)
 8016aea:	4293      	cmp	r3, r2
 8016aec:	d045      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	4a66      	ldr	r2, [pc, #408]	; (8016c8c <HAL_DMA_IRQHandler+0x400>)
 8016af4:	4293      	cmp	r3, r2
 8016af6:	d040      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	4a64      	ldr	r2, [pc, #400]	; (8016c90 <HAL_DMA_IRQHandler+0x404>)
 8016afe:	4293      	cmp	r3, r2
 8016b00:	d03b      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	4a63      	ldr	r2, [pc, #396]	; (8016c94 <HAL_DMA_IRQHandler+0x408>)
 8016b08:	4293      	cmp	r3, r2
 8016b0a:	d036      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	4a61      	ldr	r2, [pc, #388]	; (8016c98 <HAL_DMA_IRQHandler+0x40c>)
 8016b12:	4293      	cmp	r3, r2
 8016b14:	d031      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	4a60      	ldr	r2, [pc, #384]	; (8016c9c <HAL_DMA_IRQHandler+0x410>)
 8016b1c:	4293      	cmp	r3, r2
 8016b1e:	d02c      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	4a5e      	ldr	r2, [pc, #376]	; (8016ca0 <HAL_DMA_IRQHandler+0x414>)
 8016b26:	4293      	cmp	r3, r2
 8016b28:	d027      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	4a5d      	ldr	r2, [pc, #372]	; (8016ca4 <HAL_DMA_IRQHandler+0x418>)
 8016b30:	4293      	cmp	r3, r2
 8016b32:	d022      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	4a5b      	ldr	r2, [pc, #364]	; (8016ca8 <HAL_DMA_IRQHandler+0x41c>)
 8016b3a:	4293      	cmp	r3, r2
 8016b3c:	d01d      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	4a5a      	ldr	r2, [pc, #360]	; (8016cac <HAL_DMA_IRQHandler+0x420>)
 8016b44:	4293      	cmp	r3, r2
 8016b46:	d018      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	4a58      	ldr	r2, [pc, #352]	; (8016cb0 <HAL_DMA_IRQHandler+0x424>)
 8016b4e:	4293      	cmp	r3, r2
 8016b50:	d013      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	4a57      	ldr	r2, [pc, #348]	; (8016cb4 <HAL_DMA_IRQHandler+0x428>)
 8016b58:	4293      	cmp	r3, r2
 8016b5a:	d00e      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	4a55      	ldr	r2, [pc, #340]	; (8016cb8 <HAL_DMA_IRQHandler+0x42c>)
 8016b62:	4293      	cmp	r3, r2
 8016b64:	d009      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	4a54      	ldr	r2, [pc, #336]	; (8016cbc <HAL_DMA_IRQHandler+0x430>)
 8016b6c:	4293      	cmp	r3, r2
 8016b6e:	d004      	beq.n	8016b7a <HAL_DMA_IRQHandler+0x2ee>
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	4a52      	ldr	r2, [pc, #328]	; (8016cc0 <HAL_DMA_IRQHandler+0x434>)
 8016b76:	4293      	cmp	r3, r2
 8016b78:	d10a      	bne.n	8016b90 <HAL_DMA_IRQHandler+0x304>
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	695b      	ldr	r3, [r3, #20]
 8016b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	bf14      	ite	ne
 8016b88:	2301      	movne	r3, #1
 8016b8a:	2300      	moveq	r3, #0
 8016b8c:	b2db      	uxtb	r3, r3
 8016b8e:	e003      	b.n	8016b98 <HAL_DMA_IRQHandler+0x30c>
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2300      	movs	r3, #0
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d00d      	beq.n	8016bb8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ba0:	f003 031f 	and.w	r3, r3, #31
 8016ba4:	2201      	movs	r2, #1
 8016ba6:	409a      	lsls	r2, r3
 8016ba8:	6a3b      	ldr	r3, [r7, #32]
 8016baa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016bb0:	f043 0202 	orr.w	r2, r3, #2
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016bbc:	f003 031f 	and.w	r3, r3, #31
 8016bc0:	2204      	movs	r2, #4
 8016bc2:	409a      	lsls	r2, r3
 8016bc4:	69bb      	ldr	r3, [r7, #24]
 8016bc6:	4013      	ands	r3, r2
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	f000 808f 	beq.w	8016cec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	4a2c      	ldr	r2, [pc, #176]	; (8016c84 <HAL_DMA_IRQHandler+0x3f8>)
 8016bd4:	4293      	cmp	r3, r2
 8016bd6:	d04a      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	4a2a      	ldr	r2, [pc, #168]	; (8016c88 <HAL_DMA_IRQHandler+0x3fc>)
 8016bde:	4293      	cmp	r3, r2
 8016be0:	d045      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	4a29      	ldr	r2, [pc, #164]	; (8016c8c <HAL_DMA_IRQHandler+0x400>)
 8016be8:	4293      	cmp	r3, r2
 8016bea:	d040      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	4a27      	ldr	r2, [pc, #156]	; (8016c90 <HAL_DMA_IRQHandler+0x404>)
 8016bf2:	4293      	cmp	r3, r2
 8016bf4:	d03b      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	4a26      	ldr	r2, [pc, #152]	; (8016c94 <HAL_DMA_IRQHandler+0x408>)
 8016bfc:	4293      	cmp	r3, r2
 8016bfe:	d036      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	4a24      	ldr	r2, [pc, #144]	; (8016c98 <HAL_DMA_IRQHandler+0x40c>)
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d031      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	4a23      	ldr	r2, [pc, #140]	; (8016c9c <HAL_DMA_IRQHandler+0x410>)
 8016c10:	4293      	cmp	r3, r2
 8016c12:	d02c      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	4a21      	ldr	r2, [pc, #132]	; (8016ca0 <HAL_DMA_IRQHandler+0x414>)
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	d027      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	4a20      	ldr	r2, [pc, #128]	; (8016ca4 <HAL_DMA_IRQHandler+0x418>)
 8016c24:	4293      	cmp	r3, r2
 8016c26:	d022      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	4a1e      	ldr	r2, [pc, #120]	; (8016ca8 <HAL_DMA_IRQHandler+0x41c>)
 8016c2e:	4293      	cmp	r3, r2
 8016c30:	d01d      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	4a1d      	ldr	r2, [pc, #116]	; (8016cac <HAL_DMA_IRQHandler+0x420>)
 8016c38:	4293      	cmp	r3, r2
 8016c3a:	d018      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4a1b      	ldr	r2, [pc, #108]	; (8016cb0 <HAL_DMA_IRQHandler+0x424>)
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d013      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	4a1a      	ldr	r2, [pc, #104]	; (8016cb4 <HAL_DMA_IRQHandler+0x428>)
 8016c4c:	4293      	cmp	r3, r2
 8016c4e:	d00e      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	4a18      	ldr	r2, [pc, #96]	; (8016cb8 <HAL_DMA_IRQHandler+0x42c>)
 8016c56:	4293      	cmp	r3, r2
 8016c58:	d009      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	4a17      	ldr	r2, [pc, #92]	; (8016cbc <HAL_DMA_IRQHandler+0x430>)
 8016c60:	4293      	cmp	r3, r2
 8016c62:	d004      	beq.n	8016c6e <HAL_DMA_IRQHandler+0x3e2>
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	4a15      	ldr	r2, [pc, #84]	; (8016cc0 <HAL_DMA_IRQHandler+0x434>)
 8016c6a:	4293      	cmp	r3, r2
 8016c6c:	d12a      	bne.n	8016cc4 <HAL_DMA_IRQHandler+0x438>
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	f003 0302 	and.w	r3, r3, #2
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	bf14      	ite	ne
 8016c7c:	2301      	movne	r3, #1
 8016c7e:	2300      	moveq	r3, #0
 8016c80:	b2db      	uxtb	r3, r3
 8016c82:	e023      	b.n	8016ccc <HAL_DMA_IRQHandler+0x440>
 8016c84:	40020010 	.word	0x40020010
 8016c88:	40020028 	.word	0x40020028
 8016c8c:	40020040 	.word	0x40020040
 8016c90:	40020058 	.word	0x40020058
 8016c94:	40020070 	.word	0x40020070
 8016c98:	40020088 	.word	0x40020088
 8016c9c:	400200a0 	.word	0x400200a0
 8016ca0:	400200b8 	.word	0x400200b8
 8016ca4:	40020410 	.word	0x40020410
 8016ca8:	40020428 	.word	0x40020428
 8016cac:	40020440 	.word	0x40020440
 8016cb0:	40020458 	.word	0x40020458
 8016cb4:	40020470 	.word	0x40020470
 8016cb8:	40020488 	.word	0x40020488
 8016cbc:	400204a0 	.word	0x400204a0
 8016cc0:	400204b8 	.word	0x400204b8
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2300      	movs	r3, #0
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d00d      	beq.n	8016cec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cd4:	f003 031f 	and.w	r3, r3, #31
 8016cd8:	2204      	movs	r2, #4
 8016cda:	409a      	lsls	r2, r3
 8016cdc:	6a3b      	ldr	r3, [r7, #32]
 8016cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ce4:	f043 0204 	orr.w	r2, r3, #4
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cf0:	f003 031f 	and.w	r3, r3, #31
 8016cf4:	2210      	movs	r2, #16
 8016cf6:	409a      	lsls	r2, r3
 8016cf8:	69bb      	ldr	r3, [r7, #24]
 8016cfa:	4013      	ands	r3, r2
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	f000 80a6 	beq.w	8016e4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4a85      	ldr	r2, [pc, #532]	; (8016f1c <HAL_DMA_IRQHandler+0x690>)
 8016d08:	4293      	cmp	r3, r2
 8016d0a:	d04a      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	4a83      	ldr	r2, [pc, #524]	; (8016f20 <HAL_DMA_IRQHandler+0x694>)
 8016d12:	4293      	cmp	r3, r2
 8016d14:	d045      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	4a82      	ldr	r2, [pc, #520]	; (8016f24 <HAL_DMA_IRQHandler+0x698>)
 8016d1c:	4293      	cmp	r3, r2
 8016d1e:	d040      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	4a80      	ldr	r2, [pc, #512]	; (8016f28 <HAL_DMA_IRQHandler+0x69c>)
 8016d26:	4293      	cmp	r3, r2
 8016d28:	d03b      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	4a7f      	ldr	r2, [pc, #508]	; (8016f2c <HAL_DMA_IRQHandler+0x6a0>)
 8016d30:	4293      	cmp	r3, r2
 8016d32:	d036      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	4a7d      	ldr	r2, [pc, #500]	; (8016f30 <HAL_DMA_IRQHandler+0x6a4>)
 8016d3a:	4293      	cmp	r3, r2
 8016d3c:	d031      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	4a7c      	ldr	r2, [pc, #496]	; (8016f34 <HAL_DMA_IRQHandler+0x6a8>)
 8016d44:	4293      	cmp	r3, r2
 8016d46:	d02c      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4a7a      	ldr	r2, [pc, #488]	; (8016f38 <HAL_DMA_IRQHandler+0x6ac>)
 8016d4e:	4293      	cmp	r3, r2
 8016d50:	d027      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	4a79      	ldr	r2, [pc, #484]	; (8016f3c <HAL_DMA_IRQHandler+0x6b0>)
 8016d58:	4293      	cmp	r3, r2
 8016d5a:	d022      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	4a77      	ldr	r2, [pc, #476]	; (8016f40 <HAL_DMA_IRQHandler+0x6b4>)
 8016d62:	4293      	cmp	r3, r2
 8016d64:	d01d      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	4a76      	ldr	r2, [pc, #472]	; (8016f44 <HAL_DMA_IRQHandler+0x6b8>)
 8016d6c:	4293      	cmp	r3, r2
 8016d6e:	d018      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	4a74      	ldr	r2, [pc, #464]	; (8016f48 <HAL_DMA_IRQHandler+0x6bc>)
 8016d76:	4293      	cmp	r3, r2
 8016d78:	d013      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	4a73      	ldr	r2, [pc, #460]	; (8016f4c <HAL_DMA_IRQHandler+0x6c0>)
 8016d80:	4293      	cmp	r3, r2
 8016d82:	d00e      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	4a71      	ldr	r2, [pc, #452]	; (8016f50 <HAL_DMA_IRQHandler+0x6c4>)
 8016d8a:	4293      	cmp	r3, r2
 8016d8c:	d009      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	4a70      	ldr	r2, [pc, #448]	; (8016f54 <HAL_DMA_IRQHandler+0x6c8>)
 8016d94:	4293      	cmp	r3, r2
 8016d96:	d004      	beq.n	8016da2 <HAL_DMA_IRQHandler+0x516>
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	4a6e      	ldr	r2, [pc, #440]	; (8016f58 <HAL_DMA_IRQHandler+0x6cc>)
 8016d9e:	4293      	cmp	r3, r2
 8016da0:	d10a      	bne.n	8016db8 <HAL_DMA_IRQHandler+0x52c>
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	f003 0308 	and.w	r3, r3, #8
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	bf14      	ite	ne
 8016db0:	2301      	movne	r3, #1
 8016db2:	2300      	moveq	r3, #0
 8016db4:	b2db      	uxtb	r3, r3
 8016db6:	e009      	b.n	8016dcc <HAL_DMA_IRQHandler+0x540>
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	f003 0304 	and.w	r3, r3, #4
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	bf14      	ite	ne
 8016dc6:	2301      	movne	r3, #1
 8016dc8:	2300      	moveq	r3, #0
 8016dca:	b2db      	uxtb	r3, r3
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d03e      	beq.n	8016e4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016dd4:	f003 031f 	and.w	r3, r3, #31
 8016dd8:	2210      	movs	r2, #16
 8016dda:	409a      	lsls	r2, r3
 8016ddc:	6a3b      	ldr	r3, [r7, #32]
 8016dde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d018      	beq.n	8016e20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d108      	bne.n	8016e0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d024      	beq.n	8016e4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	4798      	blx	r3
 8016e0c:	e01f      	b.n	8016e4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d01b      	beq.n	8016e4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	4798      	blx	r3
 8016e1e:	e016      	b.n	8016e4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d107      	bne.n	8016e3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	681a      	ldr	r2, [r3, #0]
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	f022 0208 	bic.w	r2, r2, #8
 8016e3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d003      	beq.n	8016e4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e4a:	6878      	ldr	r0, [r7, #4]
 8016e4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e52:	f003 031f 	and.w	r3, r3, #31
 8016e56:	2220      	movs	r2, #32
 8016e58:	409a      	lsls	r2, r3
 8016e5a:	69bb      	ldr	r3, [r7, #24]
 8016e5c:	4013      	ands	r3, r2
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f000 8110 	beq.w	8017084 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	4a2c      	ldr	r2, [pc, #176]	; (8016f1c <HAL_DMA_IRQHandler+0x690>)
 8016e6a:	4293      	cmp	r3, r2
 8016e6c:	d04a      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	4a2b      	ldr	r2, [pc, #172]	; (8016f20 <HAL_DMA_IRQHandler+0x694>)
 8016e74:	4293      	cmp	r3, r2
 8016e76:	d045      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	4a29      	ldr	r2, [pc, #164]	; (8016f24 <HAL_DMA_IRQHandler+0x698>)
 8016e7e:	4293      	cmp	r3, r2
 8016e80:	d040      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	4a28      	ldr	r2, [pc, #160]	; (8016f28 <HAL_DMA_IRQHandler+0x69c>)
 8016e88:	4293      	cmp	r3, r2
 8016e8a:	d03b      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	4a26      	ldr	r2, [pc, #152]	; (8016f2c <HAL_DMA_IRQHandler+0x6a0>)
 8016e92:	4293      	cmp	r3, r2
 8016e94:	d036      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	4a25      	ldr	r2, [pc, #148]	; (8016f30 <HAL_DMA_IRQHandler+0x6a4>)
 8016e9c:	4293      	cmp	r3, r2
 8016e9e:	d031      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	4a23      	ldr	r2, [pc, #140]	; (8016f34 <HAL_DMA_IRQHandler+0x6a8>)
 8016ea6:	4293      	cmp	r3, r2
 8016ea8:	d02c      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	4a22      	ldr	r2, [pc, #136]	; (8016f38 <HAL_DMA_IRQHandler+0x6ac>)
 8016eb0:	4293      	cmp	r3, r2
 8016eb2:	d027      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	4a20      	ldr	r2, [pc, #128]	; (8016f3c <HAL_DMA_IRQHandler+0x6b0>)
 8016eba:	4293      	cmp	r3, r2
 8016ebc:	d022      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	4a1f      	ldr	r2, [pc, #124]	; (8016f40 <HAL_DMA_IRQHandler+0x6b4>)
 8016ec4:	4293      	cmp	r3, r2
 8016ec6:	d01d      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	4a1d      	ldr	r2, [pc, #116]	; (8016f44 <HAL_DMA_IRQHandler+0x6b8>)
 8016ece:	4293      	cmp	r3, r2
 8016ed0:	d018      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	4a1c      	ldr	r2, [pc, #112]	; (8016f48 <HAL_DMA_IRQHandler+0x6bc>)
 8016ed8:	4293      	cmp	r3, r2
 8016eda:	d013      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	4a1a      	ldr	r2, [pc, #104]	; (8016f4c <HAL_DMA_IRQHandler+0x6c0>)
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	d00e      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	4a19      	ldr	r2, [pc, #100]	; (8016f50 <HAL_DMA_IRQHandler+0x6c4>)
 8016eec:	4293      	cmp	r3, r2
 8016eee:	d009      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	4a17      	ldr	r2, [pc, #92]	; (8016f54 <HAL_DMA_IRQHandler+0x6c8>)
 8016ef6:	4293      	cmp	r3, r2
 8016ef8:	d004      	beq.n	8016f04 <HAL_DMA_IRQHandler+0x678>
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	4a16      	ldr	r2, [pc, #88]	; (8016f58 <HAL_DMA_IRQHandler+0x6cc>)
 8016f00:	4293      	cmp	r3, r2
 8016f02:	d12b      	bne.n	8016f5c <HAL_DMA_IRQHandler+0x6d0>
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	f003 0310 	and.w	r3, r3, #16
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	bf14      	ite	ne
 8016f12:	2301      	movne	r3, #1
 8016f14:	2300      	moveq	r3, #0
 8016f16:	b2db      	uxtb	r3, r3
 8016f18:	e02a      	b.n	8016f70 <HAL_DMA_IRQHandler+0x6e4>
 8016f1a:	bf00      	nop
 8016f1c:	40020010 	.word	0x40020010
 8016f20:	40020028 	.word	0x40020028
 8016f24:	40020040 	.word	0x40020040
 8016f28:	40020058 	.word	0x40020058
 8016f2c:	40020070 	.word	0x40020070
 8016f30:	40020088 	.word	0x40020088
 8016f34:	400200a0 	.word	0x400200a0
 8016f38:	400200b8 	.word	0x400200b8
 8016f3c:	40020410 	.word	0x40020410
 8016f40:	40020428 	.word	0x40020428
 8016f44:	40020440 	.word	0x40020440
 8016f48:	40020458 	.word	0x40020458
 8016f4c:	40020470 	.word	0x40020470
 8016f50:	40020488 	.word	0x40020488
 8016f54:	400204a0 	.word	0x400204a0
 8016f58:	400204b8 	.word	0x400204b8
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	f003 0302 	and.w	r3, r3, #2
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	bf14      	ite	ne
 8016f6a:	2301      	movne	r3, #1
 8016f6c:	2300      	moveq	r3, #0
 8016f6e:	b2db      	uxtb	r3, r3
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	f000 8087 	beq.w	8017084 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f7a:	f003 031f 	and.w	r3, r3, #31
 8016f7e:	2220      	movs	r2, #32
 8016f80:	409a      	lsls	r2, r3
 8016f82:	6a3b      	ldr	r3, [r7, #32]
 8016f84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	2b04      	cmp	r3, #4
 8016f90:	d139      	bne.n	8017006 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	681a      	ldr	r2, [r3, #0]
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	f022 0216 	bic.w	r2, r2, #22
 8016fa0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	695a      	ldr	r2, [r3, #20]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016fb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d103      	bne.n	8016fc2 <HAL_DMA_IRQHandler+0x736>
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d007      	beq.n	8016fd2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	681a      	ldr	r2, [r3, #0]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	f022 0208 	bic.w	r2, r2, #8
 8016fd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016fd6:	f003 031f 	and.w	r3, r3, #31
 8016fda:	223f      	movs	r2, #63	; 0x3f
 8016fdc:	409a      	lsls	r2, r3
 8016fde:	6a3b      	ldr	r3, [r7, #32]
 8016fe0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2201      	movs	r2, #1
 8016fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	f000 834a 	beq.w	8017690 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	4798      	blx	r3
          }
          return;
 8017004:	e344      	b.n	8017690 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017010:	2b00      	cmp	r3, #0
 8017012:	d018      	beq.n	8017046 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801701e:	2b00      	cmp	r3, #0
 8017020:	d108      	bne.n	8017034 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017026:	2b00      	cmp	r3, #0
 8017028:	d02c      	beq.n	8017084 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801702e:	6878      	ldr	r0, [r7, #4]
 8017030:	4798      	blx	r3
 8017032:	e027      	b.n	8017084 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017038:	2b00      	cmp	r3, #0
 801703a:	d023      	beq.n	8017084 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	4798      	blx	r3
 8017044:	e01e      	b.n	8017084 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017050:	2b00      	cmp	r3, #0
 8017052:	d10f      	bne.n	8017074 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	681a      	ldr	r2, [r3, #0]
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	f022 0210 	bic.w	r2, r2, #16
 8017062:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	2200      	movs	r2, #0
 8017068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2201      	movs	r2, #1
 8017070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017078:	2b00      	cmp	r3, #0
 801707a:	d003      	beq.n	8017084 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017088:	2b00      	cmp	r3, #0
 801708a:	f000 8306 	beq.w	801769a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017092:	f003 0301 	and.w	r3, r3, #1
 8017096:	2b00      	cmp	r3, #0
 8017098:	f000 8088 	beq.w	80171ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	2204      	movs	r2, #4
 80170a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	4a7a      	ldr	r2, [pc, #488]	; (8017294 <HAL_DMA_IRQHandler+0xa08>)
 80170aa:	4293      	cmp	r3, r2
 80170ac:	d04a      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	4a79      	ldr	r2, [pc, #484]	; (8017298 <HAL_DMA_IRQHandler+0xa0c>)
 80170b4:	4293      	cmp	r3, r2
 80170b6:	d045      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	4a77      	ldr	r2, [pc, #476]	; (801729c <HAL_DMA_IRQHandler+0xa10>)
 80170be:	4293      	cmp	r3, r2
 80170c0:	d040      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	4a76      	ldr	r2, [pc, #472]	; (80172a0 <HAL_DMA_IRQHandler+0xa14>)
 80170c8:	4293      	cmp	r3, r2
 80170ca:	d03b      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	4a74      	ldr	r2, [pc, #464]	; (80172a4 <HAL_DMA_IRQHandler+0xa18>)
 80170d2:	4293      	cmp	r3, r2
 80170d4:	d036      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	4a73      	ldr	r2, [pc, #460]	; (80172a8 <HAL_DMA_IRQHandler+0xa1c>)
 80170dc:	4293      	cmp	r3, r2
 80170de:	d031      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	4a71      	ldr	r2, [pc, #452]	; (80172ac <HAL_DMA_IRQHandler+0xa20>)
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d02c      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	4a70      	ldr	r2, [pc, #448]	; (80172b0 <HAL_DMA_IRQHandler+0xa24>)
 80170f0:	4293      	cmp	r3, r2
 80170f2:	d027      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	4a6e      	ldr	r2, [pc, #440]	; (80172b4 <HAL_DMA_IRQHandler+0xa28>)
 80170fa:	4293      	cmp	r3, r2
 80170fc:	d022      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	4a6d      	ldr	r2, [pc, #436]	; (80172b8 <HAL_DMA_IRQHandler+0xa2c>)
 8017104:	4293      	cmp	r3, r2
 8017106:	d01d      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	4a6b      	ldr	r2, [pc, #428]	; (80172bc <HAL_DMA_IRQHandler+0xa30>)
 801710e:	4293      	cmp	r3, r2
 8017110:	d018      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	4a6a      	ldr	r2, [pc, #424]	; (80172c0 <HAL_DMA_IRQHandler+0xa34>)
 8017118:	4293      	cmp	r3, r2
 801711a:	d013      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	4a68      	ldr	r2, [pc, #416]	; (80172c4 <HAL_DMA_IRQHandler+0xa38>)
 8017122:	4293      	cmp	r3, r2
 8017124:	d00e      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	4a67      	ldr	r2, [pc, #412]	; (80172c8 <HAL_DMA_IRQHandler+0xa3c>)
 801712c:	4293      	cmp	r3, r2
 801712e:	d009      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	4a65      	ldr	r2, [pc, #404]	; (80172cc <HAL_DMA_IRQHandler+0xa40>)
 8017136:	4293      	cmp	r3, r2
 8017138:	d004      	beq.n	8017144 <HAL_DMA_IRQHandler+0x8b8>
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	4a64      	ldr	r2, [pc, #400]	; (80172d0 <HAL_DMA_IRQHandler+0xa44>)
 8017140:	4293      	cmp	r3, r2
 8017142:	d108      	bne.n	8017156 <HAL_DMA_IRQHandler+0x8ca>
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	681a      	ldr	r2, [r3, #0]
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	f022 0201 	bic.w	r2, r2, #1
 8017152:	601a      	str	r2, [r3, #0]
 8017154:	e007      	b.n	8017166 <HAL_DMA_IRQHandler+0x8da>
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	681a      	ldr	r2, [r3, #0]
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	f022 0201 	bic.w	r2, r2, #1
 8017164:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	3301      	adds	r3, #1
 801716a:	60fb      	str	r3, [r7, #12]
 801716c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801716e:	429a      	cmp	r2, r3
 8017170:	d307      	bcc.n	8017182 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	f003 0301 	and.w	r3, r3, #1
 801717c:	2b00      	cmp	r3, #0
 801717e:	d1f2      	bne.n	8017166 <HAL_DMA_IRQHandler+0x8da>
 8017180:	e000      	b.n	8017184 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8017182:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2200      	movs	r2, #0
 8017188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	f003 0301 	and.w	r3, r3, #1
 8017196:	2b00      	cmp	r3, #0
 8017198:	d004      	beq.n	80171a4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2203      	movs	r2, #3
 801719e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80171a2:	e003      	b.n	80171ac <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2201      	movs	r2, #1
 80171a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	f000 8272 	beq.w	801769a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171ba:	6878      	ldr	r0, [r7, #4]
 80171bc:	4798      	blx	r3
 80171be:	e26c      	b.n	801769a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	4a43      	ldr	r2, [pc, #268]	; (80172d4 <HAL_DMA_IRQHandler+0xa48>)
 80171c6:	4293      	cmp	r3, r2
 80171c8:	d022      	beq.n	8017210 <HAL_DMA_IRQHandler+0x984>
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	4a42      	ldr	r2, [pc, #264]	; (80172d8 <HAL_DMA_IRQHandler+0xa4c>)
 80171d0:	4293      	cmp	r3, r2
 80171d2:	d01d      	beq.n	8017210 <HAL_DMA_IRQHandler+0x984>
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	4a40      	ldr	r2, [pc, #256]	; (80172dc <HAL_DMA_IRQHandler+0xa50>)
 80171da:	4293      	cmp	r3, r2
 80171dc:	d018      	beq.n	8017210 <HAL_DMA_IRQHandler+0x984>
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	4a3f      	ldr	r2, [pc, #252]	; (80172e0 <HAL_DMA_IRQHandler+0xa54>)
 80171e4:	4293      	cmp	r3, r2
 80171e6:	d013      	beq.n	8017210 <HAL_DMA_IRQHandler+0x984>
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	4a3d      	ldr	r2, [pc, #244]	; (80172e4 <HAL_DMA_IRQHandler+0xa58>)
 80171ee:	4293      	cmp	r3, r2
 80171f0:	d00e      	beq.n	8017210 <HAL_DMA_IRQHandler+0x984>
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	4a3c      	ldr	r2, [pc, #240]	; (80172e8 <HAL_DMA_IRQHandler+0xa5c>)
 80171f8:	4293      	cmp	r3, r2
 80171fa:	d009      	beq.n	8017210 <HAL_DMA_IRQHandler+0x984>
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	4a3a      	ldr	r2, [pc, #232]	; (80172ec <HAL_DMA_IRQHandler+0xa60>)
 8017202:	4293      	cmp	r3, r2
 8017204:	d004      	beq.n	8017210 <HAL_DMA_IRQHandler+0x984>
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	4a39      	ldr	r2, [pc, #228]	; (80172f0 <HAL_DMA_IRQHandler+0xa64>)
 801720c:	4293      	cmp	r3, r2
 801720e:	d101      	bne.n	8017214 <HAL_DMA_IRQHandler+0x988>
 8017210:	2301      	movs	r3, #1
 8017212:	e000      	b.n	8017216 <HAL_DMA_IRQHandler+0x98a>
 8017214:	2300      	movs	r3, #0
 8017216:	2b00      	cmp	r3, #0
 8017218:	f000 823f 	beq.w	801769a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017228:	f003 031f 	and.w	r3, r3, #31
 801722c:	2204      	movs	r2, #4
 801722e:	409a      	lsls	r2, r3
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	4013      	ands	r3, r2
 8017234:	2b00      	cmp	r3, #0
 8017236:	f000 80cd 	beq.w	80173d4 <HAL_DMA_IRQHandler+0xb48>
 801723a:	693b      	ldr	r3, [r7, #16]
 801723c:	f003 0304 	and.w	r3, r3, #4
 8017240:	2b00      	cmp	r3, #0
 8017242:	f000 80c7 	beq.w	80173d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801724a:	f003 031f 	and.w	r3, r3, #31
 801724e:	2204      	movs	r2, #4
 8017250:	409a      	lsls	r2, r3
 8017252:	69fb      	ldr	r3, [r7, #28]
 8017254:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017256:	693b      	ldr	r3, [r7, #16]
 8017258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801725c:	2b00      	cmp	r3, #0
 801725e:	d049      	beq.n	80172f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017266:	2b00      	cmp	r3, #0
 8017268:	d109      	bne.n	801727e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801726e:	2b00      	cmp	r3, #0
 8017270:	f000 8210 	beq.w	8017694 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801727c:	e20a      	b.n	8017694 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017282:	2b00      	cmp	r3, #0
 8017284:	f000 8206 	beq.w	8017694 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017290:	e200      	b.n	8017694 <HAL_DMA_IRQHandler+0xe08>
 8017292:	bf00      	nop
 8017294:	40020010 	.word	0x40020010
 8017298:	40020028 	.word	0x40020028
 801729c:	40020040 	.word	0x40020040
 80172a0:	40020058 	.word	0x40020058
 80172a4:	40020070 	.word	0x40020070
 80172a8:	40020088 	.word	0x40020088
 80172ac:	400200a0 	.word	0x400200a0
 80172b0:	400200b8 	.word	0x400200b8
 80172b4:	40020410 	.word	0x40020410
 80172b8:	40020428 	.word	0x40020428
 80172bc:	40020440 	.word	0x40020440
 80172c0:	40020458 	.word	0x40020458
 80172c4:	40020470 	.word	0x40020470
 80172c8:	40020488 	.word	0x40020488
 80172cc:	400204a0 	.word	0x400204a0
 80172d0:	400204b8 	.word	0x400204b8
 80172d4:	58025408 	.word	0x58025408
 80172d8:	5802541c 	.word	0x5802541c
 80172dc:	58025430 	.word	0x58025430
 80172e0:	58025444 	.word	0x58025444
 80172e4:	58025458 	.word	0x58025458
 80172e8:	5802546c 	.word	0x5802546c
 80172ec:	58025480 	.word	0x58025480
 80172f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80172f4:	693b      	ldr	r3, [r7, #16]
 80172f6:	f003 0320 	and.w	r3, r3, #32
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d160      	bne.n	80173c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	4a8c      	ldr	r2, [pc, #560]	; (8017534 <HAL_DMA_IRQHandler+0xca8>)
 8017304:	4293      	cmp	r3, r2
 8017306:	d04a      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	4a8a      	ldr	r2, [pc, #552]	; (8017538 <HAL_DMA_IRQHandler+0xcac>)
 801730e:	4293      	cmp	r3, r2
 8017310:	d045      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	4a89      	ldr	r2, [pc, #548]	; (801753c <HAL_DMA_IRQHandler+0xcb0>)
 8017318:	4293      	cmp	r3, r2
 801731a:	d040      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	4a87      	ldr	r2, [pc, #540]	; (8017540 <HAL_DMA_IRQHandler+0xcb4>)
 8017322:	4293      	cmp	r3, r2
 8017324:	d03b      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	4a86      	ldr	r2, [pc, #536]	; (8017544 <HAL_DMA_IRQHandler+0xcb8>)
 801732c:	4293      	cmp	r3, r2
 801732e:	d036      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	4a84      	ldr	r2, [pc, #528]	; (8017548 <HAL_DMA_IRQHandler+0xcbc>)
 8017336:	4293      	cmp	r3, r2
 8017338:	d031      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	4a83      	ldr	r2, [pc, #524]	; (801754c <HAL_DMA_IRQHandler+0xcc0>)
 8017340:	4293      	cmp	r3, r2
 8017342:	d02c      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	4a81      	ldr	r2, [pc, #516]	; (8017550 <HAL_DMA_IRQHandler+0xcc4>)
 801734a:	4293      	cmp	r3, r2
 801734c:	d027      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	4a80      	ldr	r2, [pc, #512]	; (8017554 <HAL_DMA_IRQHandler+0xcc8>)
 8017354:	4293      	cmp	r3, r2
 8017356:	d022      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	4a7e      	ldr	r2, [pc, #504]	; (8017558 <HAL_DMA_IRQHandler+0xccc>)
 801735e:	4293      	cmp	r3, r2
 8017360:	d01d      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	4a7d      	ldr	r2, [pc, #500]	; (801755c <HAL_DMA_IRQHandler+0xcd0>)
 8017368:	4293      	cmp	r3, r2
 801736a:	d018      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	4a7b      	ldr	r2, [pc, #492]	; (8017560 <HAL_DMA_IRQHandler+0xcd4>)
 8017372:	4293      	cmp	r3, r2
 8017374:	d013      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	4a7a      	ldr	r2, [pc, #488]	; (8017564 <HAL_DMA_IRQHandler+0xcd8>)
 801737c:	4293      	cmp	r3, r2
 801737e:	d00e      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	4a78      	ldr	r2, [pc, #480]	; (8017568 <HAL_DMA_IRQHandler+0xcdc>)
 8017386:	4293      	cmp	r3, r2
 8017388:	d009      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	4a77      	ldr	r2, [pc, #476]	; (801756c <HAL_DMA_IRQHandler+0xce0>)
 8017390:	4293      	cmp	r3, r2
 8017392:	d004      	beq.n	801739e <HAL_DMA_IRQHandler+0xb12>
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	4a75      	ldr	r2, [pc, #468]	; (8017570 <HAL_DMA_IRQHandler+0xce4>)
 801739a:	4293      	cmp	r3, r2
 801739c:	d108      	bne.n	80173b0 <HAL_DMA_IRQHandler+0xb24>
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	681a      	ldr	r2, [r3, #0]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	f022 0208 	bic.w	r2, r2, #8
 80173ac:	601a      	str	r2, [r3, #0]
 80173ae:	e007      	b.n	80173c0 <HAL_DMA_IRQHandler+0xb34>
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	681a      	ldr	r2, [r3, #0]
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	f022 0204 	bic.w	r2, r2, #4
 80173be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	f000 8165 	beq.w	8017694 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173ce:	6878      	ldr	r0, [r7, #4]
 80173d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80173d2:	e15f      	b.n	8017694 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80173d8:	f003 031f 	and.w	r3, r3, #31
 80173dc:	2202      	movs	r2, #2
 80173de:	409a      	lsls	r2, r3
 80173e0:	697b      	ldr	r3, [r7, #20]
 80173e2:	4013      	ands	r3, r2
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	f000 80c5 	beq.w	8017574 <HAL_DMA_IRQHandler+0xce8>
 80173ea:	693b      	ldr	r3, [r7, #16]
 80173ec:	f003 0302 	and.w	r3, r3, #2
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	f000 80bf 	beq.w	8017574 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80173fa:	f003 031f 	and.w	r3, r3, #31
 80173fe:	2202      	movs	r2, #2
 8017400:	409a      	lsls	r2, r3
 8017402:	69fb      	ldr	r3, [r7, #28]
 8017404:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017406:	693b      	ldr	r3, [r7, #16]
 8017408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801740c:	2b00      	cmp	r3, #0
 801740e:	d018      	beq.n	8017442 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017416:	2b00      	cmp	r3, #0
 8017418:	d109      	bne.n	801742e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801741e:	2b00      	cmp	r3, #0
 8017420:	f000 813a 	beq.w	8017698 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017428:	6878      	ldr	r0, [r7, #4]
 801742a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801742c:	e134      	b.n	8017698 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017432:	2b00      	cmp	r3, #0
 8017434:	f000 8130 	beq.w	8017698 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801743c:	6878      	ldr	r0, [r7, #4]
 801743e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017440:	e12a      	b.n	8017698 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8017442:	693b      	ldr	r3, [r7, #16]
 8017444:	f003 0320 	and.w	r3, r3, #32
 8017448:	2b00      	cmp	r3, #0
 801744a:	d168      	bne.n	801751e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	4a38      	ldr	r2, [pc, #224]	; (8017534 <HAL_DMA_IRQHandler+0xca8>)
 8017452:	4293      	cmp	r3, r2
 8017454:	d04a      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	4a37      	ldr	r2, [pc, #220]	; (8017538 <HAL_DMA_IRQHandler+0xcac>)
 801745c:	4293      	cmp	r3, r2
 801745e:	d045      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	4a35      	ldr	r2, [pc, #212]	; (801753c <HAL_DMA_IRQHandler+0xcb0>)
 8017466:	4293      	cmp	r3, r2
 8017468:	d040      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	4a34      	ldr	r2, [pc, #208]	; (8017540 <HAL_DMA_IRQHandler+0xcb4>)
 8017470:	4293      	cmp	r3, r2
 8017472:	d03b      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	4a32      	ldr	r2, [pc, #200]	; (8017544 <HAL_DMA_IRQHandler+0xcb8>)
 801747a:	4293      	cmp	r3, r2
 801747c:	d036      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	4a31      	ldr	r2, [pc, #196]	; (8017548 <HAL_DMA_IRQHandler+0xcbc>)
 8017484:	4293      	cmp	r3, r2
 8017486:	d031      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	4a2f      	ldr	r2, [pc, #188]	; (801754c <HAL_DMA_IRQHandler+0xcc0>)
 801748e:	4293      	cmp	r3, r2
 8017490:	d02c      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	4a2e      	ldr	r2, [pc, #184]	; (8017550 <HAL_DMA_IRQHandler+0xcc4>)
 8017498:	4293      	cmp	r3, r2
 801749a:	d027      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	4a2c      	ldr	r2, [pc, #176]	; (8017554 <HAL_DMA_IRQHandler+0xcc8>)
 80174a2:	4293      	cmp	r3, r2
 80174a4:	d022      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	4a2b      	ldr	r2, [pc, #172]	; (8017558 <HAL_DMA_IRQHandler+0xccc>)
 80174ac:	4293      	cmp	r3, r2
 80174ae:	d01d      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	4a29      	ldr	r2, [pc, #164]	; (801755c <HAL_DMA_IRQHandler+0xcd0>)
 80174b6:	4293      	cmp	r3, r2
 80174b8:	d018      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	4a28      	ldr	r2, [pc, #160]	; (8017560 <HAL_DMA_IRQHandler+0xcd4>)
 80174c0:	4293      	cmp	r3, r2
 80174c2:	d013      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	4a26      	ldr	r2, [pc, #152]	; (8017564 <HAL_DMA_IRQHandler+0xcd8>)
 80174ca:	4293      	cmp	r3, r2
 80174cc:	d00e      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	4a25      	ldr	r2, [pc, #148]	; (8017568 <HAL_DMA_IRQHandler+0xcdc>)
 80174d4:	4293      	cmp	r3, r2
 80174d6:	d009      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	4a23      	ldr	r2, [pc, #140]	; (801756c <HAL_DMA_IRQHandler+0xce0>)
 80174de:	4293      	cmp	r3, r2
 80174e0:	d004      	beq.n	80174ec <HAL_DMA_IRQHandler+0xc60>
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	4a22      	ldr	r2, [pc, #136]	; (8017570 <HAL_DMA_IRQHandler+0xce4>)
 80174e8:	4293      	cmp	r3, r2
 80174ea:	d108      	bne.n	80174fe <HAL_DMA_IRQHandler+0xc72>
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	681a      	ldr	r2, [r3, #0]
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	f022 0214 	bic.w	r2, r2, #20
 80174fa:	601a      	str	r2, [r3, #0]
 80174fc:	e007      	b.n	801750e <HAL_DMA_IRQHandler+0xc82>
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	681a      	ldr	r2, [r3, #0]
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	f022 020a 	bic.w	r2, r2, #10
 801750c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	2200      	movs	r2, #0
 8017512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	2201      	movs	r2, #1
 801751a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017522:	2b00      	cmp	r3, #0
 8017524:	f000 80b8 	beq.w	8017698 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017530:	e0b2      	b.n	8017698 <HAL_DMA_IRQHandler+0xe0c>
 8017532:	bf00      	nop
 8017534:	40020010 	.word	0x40020010
 8017538:	40020028 	.word	0x40020028
 801753c:	40020040 	.word	0x40020040
 8017540:	40020058 	.word	0x40020058
 8017544:	40020070 	.word	0x40020070
 8017548:	40020088 	.word	0x40020088
 801754c:	400200a0 	.word	0x400200a0
 8017550:	400200b8 	.word	0x400200b8
 8017554:	40020410 	.word	0x40020410
 8017558:	40020428 	.word	0x40020428
 801755c:	40020440 	.word	0x40020440
 8017560:	40020458 	.word	0x40020458
 8017564:	40020470 	.word	0x40020470
 8017568:	40020488 	.word	0x40020488
 801756c:	400204a0 	.word	0x400204a0
 8017570:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017578:	f003 031f 	and.w	r3, r3, #31
 801757c:	2208      	movs	r2, #8
 801757e:	409a      	lsls	r2, r3
 8017580:	697b      	ldr	r3, [r7, #20]
 8017582:	4013      	ands	r3, r2
 8017584:	2b00      	cmp	r3, #0
 8017586:	f000 8088 	beq.w	801769a <HAL_DMA_IRQHandler+0xe0e>
 801758a:	693b      	ldr	r3, [r7, #16]
 801758c:	f003 0308 	and.w	r3, r3, #8
 8017590:	2b00      	cmp	r3, #0
 8017592:	f000 8082 	beq.w	801769a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	4a41      	ldr	r2, [pc, #260]	; (80176a0 <HAL_DMA_IRQHandler+0xe14>)
 801759c:	4293      	cmp	r3, r2
 801759e:	d04a      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	4a3f      	ldr	r2, [pc, #252]	; (80176a4 <HAL_DMA_IRQHandler+0xe18>)
 80175a6:	4293      	cmp	r3, r2
 80175a8:	d045      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	4a3e      	ldr	r2, [pc, #248]	; (80176a8 <HAL_DMA_IRQHandler+0xe1c>)
 80175b0:	4293      	cmp	r3, r2
 80175b2:	d040      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	4a3c      	ldr	r2, [pc, #240]	; (80176ac <HAL_DMA_IRQHandler+0xe20>)
 80175ba:	4293      	cmp	r3, r2
 80175bc:	d03b      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	4a3b      	ldr	r2, [pc, #236]	; (80176b0 <HAL_DMA_IRQHandler+0xe24>)
 80175c4:	4293      	cmp	r3, r2
 80175c6:	d036      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	4a39      	ldr	r2, [pc, #228]	; (80176b4 <HAL_DMA_IRQHandler+0xe28>)
 80175ce:	4293      	cmp	r3, r2
 80175d0:	d031      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	4a38      	ldr	r2, [pc, #224]	; (80176b8 <HAL_DMA_IRQHandler+0xe2c>)
 80175d8:	4293      	cmp	r3, r2
 80175da:	d02c      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	4a36      	ldr	r2, [pc, #216]	; (80176bc <HAL_DMA_IRQHandler+0xe30>)
 80175e2:	4293      	cmp	r3, r2
 80175e4:	d027      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	4a35      	ldr	r2, [pc, #212]	; (80176c0 <HAL_DMA_IRQHandler+0xe34>)
 80175ec:	4293      	cmp	r3, r2
 80175ee:	d022      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	4a33      	ldr	r2, [pc, #204]	; (80176c4 <HAL_DMA_IRQHandler+0xe38>)
 80175f6:	4293      	cmp	r3, r2
 80175f8:	d01d      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	4a32      	ldr	r2, [pc, #200]	; (80176c8 <HAL_DMA_IRQHandler+0xe3c>)
 8017600:	4293      	cmp	r3, r2
 8017602:	d018      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	4a30      	ldr	r2, [pc, #192]	; (80176cc <HAL_DMA_IRQHandler+0xe40>)
 801760a:	4293      	cmp	r3, r2
 801760c:	d013      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	4a2f      	ldr	r2, [pc, #188]	; (80176d0 <HAL_DMA_IRQHandler+0xe44>)
 8017614:	4293      	cmp	r3, r2
 8017616:	d00e      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	4a2d      	ldr	r2, [pc, #180]	; (80176d4 <HAL_DMA_IRQHandler+0xe48>)
 801761e:	4293      	cmp	r3, r2
 8017620:	d009      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	4a2c      	ldr	r2, [pc, #176]	; (80176d8 <HAL_DMA_IRQHandler+0xe4c>)
 8017628:	4293      	cmp	r3, r2
 801762a:	d004      	beq.n	8017636 <HAL_DMA_IRQHandler+0xdaa>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	4a2a      	ldr	r2, [pc, #168]	; (80176dc <HAL_DMA_IRQHandler+0xe50>)
 8017632:	4293      	cmp	r3, r2
 8017634:	d108      	bne.n	8017648 <HAL_DMA_IRQHandler+0xdbc>
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	681a      	ldr	r2, [r3, #0]
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	f022 021c 	bic.w	r2, r2, #28
 8017644:	601a      	str	r2, [r3, #0]
 8017646:	e007      	b.n	8017658 <HAL_DMA_IRQHandler+0xdcc>
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	681a      	ldr	r2, [r3, #0]
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	f022 020e 	bic.w	r2, r2, #14
 8017656:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801765c:	f003 031f 	and.w	r3, r3, #31
 8017660:	2201      	movs	r2, #1
 8017662:	409a      	lsls	r2, r3
 8017664:	69fb      	ldr	r3, [r7, #28]
 8017666:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2201      	movs	r2, #1
 801766c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	2200      	movs	r2, #0
 8017672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	2201      	movs	r2, #1
 801767a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017682:	2b00      	cmp	r3, #0
 8017684:	d009      	beq.n	801769a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	4798      	blx	r3
 801768e:	e004      	b.n	801769a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8017690:	bf00      	nop
 8017692:	e002      	b.n	801769a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017694:	bf00      	nop
 8017696:	e000      	b.n	801769a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017698:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801769a:	3728      	adds	r7, #40	; 0x28
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}
 80176a0:	40020010 	.word	0x40020010
 80176a4:	40020028 	.word	0x40020028
 80176a8:	40020040 	.word	0x40020040
 80176ac:	40020058 	.word	0x40020058
 80176b0:	40020070 	.word	0x40020070
 80176b4:	40020088 	.word	0x40020088
 80176b8:	400200a0 	.word	0x400200a0
 80176bc:	400200b8 	.word	0x400200b8
 80176c0:	40020410 	.word	0x40020410
 80176c4:	40020428 	.word	0x40020428
 80176c8:	40020440 	.word	0x40020440
 80176cc:	40020458 	.word	0x40020458
 80176d0:	40020470 	.word	0x40020470
 80176d4:	40020488 	.word	0x40020488
 80176d8:	400204a0 	.word	0x400204a0
 80176dc:	400204b8 	.word	0x400204b8

080176e0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80176e0:	b480      	push	{r7}
 80176e2:	b083      	sub	sp, #12
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80176ee:	b2db      	uxtb	r3, r3
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	370c      	adds	r7, #12
 80176f4:	46bd      	mov	sp, r7
 80176f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fa:	4770      	bx	lr

080176fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80176fc:	b480      	push	{r7}
 80176fe:	b083      	sub	sp, #12
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8017708:	4618      	mov	r0, r3
 801770a:	370c      	adds	r7, #12
 801770c:	46bd      	mov	sp, r7
 801770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017712:	4770      	bx	lr

08017714 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017714:	b480      	push	{r7}
 8017716:	b087      	sub	sp, #28
 8017718:	af00      	add	r7, sp, #0
 801771a:	60f8      	str	r0, [r7, #12]
 801771c:	60b9      	str	r1, [r7, #8]
 801771e:	607a      	str	r2, [r7, #4]
 8017720:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017726:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801772c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	4a84      	ldr	r2, [pc, #528]	; (8017944 <DMA_SetConfig+0x230>)
 8017734:	4293      	cmp	r3, r2
 8017736:	d072      	beq.n	801781e <DMA_SetConfig+0x10a>
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	4a82      	ldr	r2, [pc, #520]	; (8017948 <DMA_SetConfig+0x234>)
 801773e:	4293      	cmp	r3, r2
 8017740:	d06d      	beq.n	801781e <DMA_SetConfig+0x10a>
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	4a81      	ldr	r2, [pc, #516]	; (801794c <DMA_SetConfig+0x238>)
 8017748:	4293      	cmp	r3, r2
 801774a:	d068      	beq.n	801781e <DMA_SetConfig+0x10a>
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	4a7f      	ldr	r2, [pc, #508]	; (8017950 <DMA_SetConfig+0x23c>)
 8017752:	4293      	cmp	r3, r2
 8017754:	d063      	beq.n	801781e <DMA_SetConfig+0x10a>
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	4a7e      	ldr	r2, [pc, #504]	; (8017954 <DMA_SetConfig+0x240>)
 801775c:	4293      	cmp	r3, r2
 801775e:	d05e      	beq.n	801781e <DMA_SetConfig+0x10a>
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	4a7c      	ldr	r2, [pc, #496]	; (8017958 <DMA_SetConfig+0x244>)
 8017766:	4293      	cmp	r3, r2
 8017768:	d059      	beq.n	801781e <DMA_SetConfig+0x10a>
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	4a7b      	ldr	r2, [pc, #492]	; (801795c <DMA_SetConfig+0x248>)
 8017770:	4293      	cmp	r3, r2
 8017772:	d054      	beq.n	801781e <DMA_SetConfig+0x10a>
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	4a79      	ldr	r2, [pc, #484]	; (8017960 <DMA_SetConfig+0x24c>)
 801777a:	4293      	cmp	r3, r2
 801777c:	d04f      	beq.n	801781e <DMA_SetConfig+0x10a>
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	4a78      	ldr	r2, [pc, #480]	; (8017964 <DMA_SetConfig+0x250>)
 8017784:	4293      	cmp	r3, r2
 8017786:	d04a      	beq.n	801781e <DMA_SetConfig+0x10a>
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	4a76      	ldr	r2, [pc, #472]	; (8017968 <DMA_SetConfig+0x254>)
 801778e:	4293      	cmp	r3, r2
 8017790:	d045      	beq.n	801781e <DMA_SetConfig+0x10a>
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	4a75      	ldr	r2, [pc, #468]	; (801796c <DMA_SetConfig+0x258>)
 8017798:	4293      	cmp	r3, r2
 801779a:	d040      	beq.n	801781e <DMA_SetConfig+0x10a>
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	4a73      	ldr	r2, [pc, #460]	; (8017970 <DMA_SetConfig+0x25c>)
 80177a2:	4293      	cmp	r3, r2
 80177a4:	d03b      	beq.n	801781e <DMA_SetConfig+0x10a>
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	4a72      	ldr	r2, [pc, #456]	; (8017974 <DMA_SetConfig+0x260>)
 80177ac:	4293      	cmp	r3, r2
 80177ae:	d036      	beq.n	801781e <DMA_SetConfig+0x10a>
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	4a70      	ldr	r2, [pc, #448]	; (8017978 <DMA_SetConfig+0x264>)
 80177b6:	4293      	cmp	r3, r2
 80177b8:	d031      	beq.n	801781e <DMA_SetConfig+0x10a>
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	4a6f      	ldr	r2, [pc, #444]	; (801797c <DMA_SetConfig+0x268>)
 80177c0:	4293      	cmp	r3, r2
 80177c2:	d02c      	beq.n	801781e <DMA_SetConfig+0x10a>
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	4a6d      	ldr	r2, [pc, #436]	; (8017980 <DMA_SetConfig+0x26c>)
 80177ca:	4293      	cmp	r3, r2
 80177cc:	d027      	beq.n	801781e <DMA_SetConfig+0x10a>
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	4a6c      	ldr	r2, [pc, #432]	; (8017984 <DMA_SetConfig+0x270>)
 80177d4:	4293      	cmp	r3, r2
 80177d6:	d022      	beq.n	801781e <DMA_SetConfig+0x10a>
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	4a6a      	ldr	r2, [pc, #424]	; (8017988 <DMA_SetConfig+0x274>)
 80177de:	4293      	cmp	r3, r2
 80177e0:	d01d      	beq.n	801781e <DMA_SetConfig+0x10a>
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	4a69      	ldr	r2, [pc, #420]	; (801798c <DMA_SetConfig+0x278>)
 80177e8:	4293      	cmp	r3, r2
 80177ea:	d018      	beq.n	801781e <DMA_SetConfig+0x10a>
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	4a67      	ldr	r2, [pc, #412]	; (8017990 <DMA_SetConfig+0x27c>)
 80177f2:	4293      	cmp	r3, r2
 80177f4:	d013      	beq.n	801781e <DMA_SetConfig+0x10a>
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	4a66      	ldr	r2, [pc, #408]	; (8017994 <DMA_SetConfig+0x280>)
 80177fc:	4293      	cmp	r3, r2
 80177fe:	d00e      	beq.n	801781e <DMA_SetConfig+0x10a>
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	4a64      	ldr	r2, [pc, #400]	; (8017998 <DMA_SetConfig+0x284>)
 8017806:	4293      	cmp	r3, r2
 8017808:	d009      	beq.n	801781e <DMA_SetConfig+0x10a>
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	4a63      	ldr	r2, [pc, #396]	; (801799c <DMA_SetConfig+0x288>)
 8017810:	4293      	cmp	r3, r2
 8017812:	d004      	beq.n	801781e <DMA_SetConfig+0x10a>
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	4a61      	ldr	r2, [pc, #388]	; (80179a0 <DMA_SetConfig+0x28c>)
 801781a:	4293      	cmp	r3, r2
 801781c:	d101      	bne.n	8017822 <DMA_SetConfig+0x10e>
 801781e:	2301      	movs	r3, #1
 8017820:	e000      	b.n	8017824 <DMA_SetConfig+0x110>
 8017822:	2300      	movs	r3, #0
 8017824:	2b00      	cmp	r3, #0
 8017826:	d00d      	beq.n	8017844 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801782c:	68fa      	ldr	r2, [r7, #12]
 801782e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017830:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017836:	2b00      	cmp	r3, #0
 8017838:	d004      	beq.n	8017844 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801783e:	68fa      	ldr	r2, [r7, #12]
 8017840:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8017842:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	4a3e      	ldr	r2, [pc, #248]	; (8017944 <DMA_SetConfig+0x230>)
 801784a:	4293      	cmp	r3, r2
 801784c:	d04a      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	4a3d      	ldr	r2, [pc, #244]	; (8017948 <DMA_SetConfig+0x234>)
 8017854:	4293      	cmp	r3, r2
 8017856:	d045      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	4a3b      	ldr	r2, [pc, #236]	; (801794c <DMA_SetConfig+0x238>)
 801785e:	4293      	cmp	r3, r2
 8017860:	d040      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	4a3a      	ldr	r2, [pc, #232]	; (8017950 <DMA_SetConfig+0x23c>)
 8017868:	4293      	cmp	r3, r2
 801786a:	d03b      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	4a38      	ldr	r2, [pc, #224]	; (8017954 <DMA_SetConfig+0x240>)
 8017872:	4293      	cmp	r3, r2
 8017874:	d036      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	4a37      	ldr	r2, [pc, #220]	; (8017958 <DMA_SetConfig+0x244>)
 801787c:	4293      	cmp	r3, r2
 801787e:	d031      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	4a35      	ldr	r2, [pc, #212]	; (801795c <DMA_SetConfig+0x248>)
 8017886:	4293      	cmp	r3, r2
 8017888:	d02c      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	4a34      	ldr	r2, [pc, #208]	; (8017960 <DMA_SetConfig+0x24c>)
 8017890:	4293      	cmp	r3, r2
 8017892:	d027      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	4a32      	ldr	r2, [pc, #200]	; (8017964 <DMA_SetConfig+0x250>)
 801789a:	4293      	cmp	r3, r2
 801789c:	d022      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	4a31      	ldr	r2, [pc, #196]	; (8017968 <DMA_SetConfig+0x254>)
 80178a4:	4293      	cmp	r3, r2
 80178a6:	d01d      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	4a2f      	ldr	r2, [pc, #188]	; (801796c <DMA_SetConfig+0x258>)
 80178ae:	4293      	cmp	r3, r2
 80178b0:	d018      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	4a2e      	ldr	r2, [pc, #184]	; (8017970 <DMA_SetConfig+0x25c>)
 80178b8:	4293      	cmp	r3, r2
 80178ba:	d013      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	4a2c      	ldr	r2, [pc, #176]	; (8017974 <DMA_SetConfig+0x260>)
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d00e      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	4a2b      	ldr	r2, [pc, #172]	; (8017978 <DMA_SetConfig+0x264>)
 80178cc:	4293      	cmp	r3, r2
 80178ce:	d009      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	4a29      	ldr	r2, [pc, #164]	; (801797c <DMA_SetConfig+0x268>)
 80178d6:	4293      	cmp	r3, r2
 80178d8:	d004      	beq.n	80178e4 <DMA_SetConfig+0x1d0>
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	4a28      	ldr	r2, [pc, #160]	; (8017980 <DMA_SetConfig+0x26c>)
 80178e0:	4293      	cmp	r3, r2
 80178e2:	d101      	bne.n	80178e8 <DMA_SetConfig+0x1d4>
 80178e4:	2301      	movs	r3, #1
 80178e6:	e000      	b.n	80178ea <DMA_SetConfig+0x1d6>
 80178e8:	2300      	movs	r3, #0
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d05a      	beq.n	80179a4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80178f2:	f003 031f 	and.w	r3, r3, #31
 80178f6:	223f      	movs	r2, #63	; 0x3f
 80178f8:	409a      	lsls	r2, r3
 80178fa:	697b      	ldr	r3, [r7, #20]
 80178fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	681a      	ldr	r2, [r3, #0]
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801790c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	683a      	ldr	r2, [r7, #0]
 8017914:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	689b      	ldr	r3, [r3, #8]
 801791a:	2b40      	cmp	r3, #64	; 0x40
 801791c:	d108      	bne.n	8017930 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	687a      	ldr	r2, [r7, #4]
 8017924:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	68ba      	ldr	r2, [r7, #8]
 801792c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801792e:	e087      	b.n	8017a40 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	68ba      	ldr	r2, [r7, #8]
 8017936:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	687a      	ldr	r2, [r7, #4]
 801793e:	60da      	str	r2, [r3, #12]
}
 8017940:	e07e      	b.n	8017a40 <DMA_SetConfig+0x32c>
 8017942:	bf00      	nop
 8017944:	40020010 	.word	0x40020010
 8017948:	40020028 	.word	0x40020028
 801794c:	40020040 	.word	0x40020040
 8017950:	40020058 	.word	0x40020058
 8017954:	40020070 	.word	0x40020070
 8017958:	40020088 	.word	0x40020088
 801795c:	400200a0 	.word	0x400200a0
 8017960:	400200b8 	.word	0x400200b8
 8017964:	40020410 	.word	0x40020410
 8017968:	40020428 	.word	0x40020428
 801796c:	40020440 	.word	0x40020440
 8017970:	40020458 	.word	0x40020458
 8017974:	40020470 	.word	0x40020470
 8017978:	40020488 	.word	0x40020488
 801797c:	400204a0 	.word	0x400204a0
 8017980:	400204b8 	.word	0x400204b8
 8017984:	58025408 	.word	0x58025408
 8017988:	5802541c 	.word	0x5802541c
 801798c:	58025430 	.word	0x58025430
 8017990:	58025444 	.word	0x58025444
 8017994:	58025458 	.word	0x58025458
 8017998:	5802546c 	.word	0x5802546c
 801799c:	58025480 	.word	0x58025480
 80179a0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	4a28      	ldr	r2, [pc, #160]	; (8017a4c <DMA_SetConfig+0x338>)
 80179aa:	4293      	cmp	r3, r2
 80179ac:	d022      	beq.n	80179f4 <DMA_SetConfig+0x2e0>
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	4a27      	ldr	r2, [pc, #156]	; (8017a50 <DMA_SetConfig+0x33c>)
 80179b4:	4293      	cmp	r3, r2
 80179b6:	d01d      	beq.n	80179f4 <DMA_SetConfig+0x2e0>
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	4a25      	ldr	r2, [pc, #148]	; (8017a54 <DMA_SetConfig+0x340>)
 80179be:	4293      	cmp	r3, r2
 80179c0:	d018      	beq.n	80179f4 <DMA_SetConfig+0x2e0>
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	4a24      	ldr	r2, [pc, #144]	; (8017a58 <DMA_SetConfig+0x344>)
 80179c8:	4293      	cmp	r3, r2
 80179ca:	d013      	beq.n	80179f4 <DMA_SetConfig+0x2e0>
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	4a22      	ldr	r2, [pc, #136]	; (8017a5c <DMA_SetConfig+0x348>)
 80179d2:	4293      	cmp	r3, r2
 80179d4:	d00e      	beq.n	80179f4 <DMA_SetConfig+0x2e0>
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	4a21      	ldr	r2, [pc, #132]	; (8017a60 <DMA_SetConfig+0x34c>)
 80179dc:	4293      	cmp	r3, r2
 80179de:	d009      	beq.n	80179f4 <DMA_SetConfig+0x2e0>
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	4a1f      	ldr	r2, [pc, #124]	; (8017a64 <DMA_SetConfig+0x350>)
 80179e6:	4293      	cmp	r3, r2
 80179e8:	d004      	beq.n	80179f4 <DMA_SetConfig+0x2e0>
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	4a1e      	ldr	r2, [pc, #120]	; (8017a68 <DMA_SetConfig+0x354>)
 80179f0:	4293      	cmp	r3, r2
 80179f2:	d101      	bne.n	80179f8 <DMA_SetConfig+0x2e4>
 80179f4:	2301      	movs	r3, #1
 80179f6:	e000      	b.n	80179fa <DMA_SetConfig+0x2e6>
 80179f8:	2300      	movs	r3, #0
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d020      	beq.n	8017a40 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017a02:	f003 031f 	and.w	r3, r3, #31
 8017a06:	2201      	movs	r2, #1
 8017a08:	409a      	lsls	r2, r3
 8017a0a:	693b      	ldr	r3, [r7, #16]
 8017a0c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	683a      	ldr	r2, [r7, #0]
 8017a14:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	689b      	ldr	r3, [r3, #8]
 8017a1a:	2b40      	cmp	r3, #64	; 0x40
 8017a1c:	d108      	bne.n	8017a30 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	687a      	ldr	r2, [r7, #4]
 8017a24:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	68ba      	ldr	r2, [r7, #8]
 8017a2c:	60da      	str	r2, [r3, #12]
}
 8017a2e:	e007      	b.n	8017a40 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	68ba      	ldr	r2, [r7, #8]
 8017a36:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	687a      	ldr	r2, [r7, #4]
 8017a3e:	60da      	str	r2, [r3, #12]
}
 8017a40:	bf00      	nop
 8017a42:	371c      	adds	r7, #28
 8017a44:	46bd      	mov	sp, r7
 8017a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4a:	4770      	bx	lr
 8017a4c:	58025408 	.word	0x58025408
 8017a50:	5802541c 	.word	0x5802541c
 8017a54:	58025430 	.word	0x58025430
 8017a58:	58025444 	.word	0x58025444
 8017a5c:	58025458 	.word	0x58025458
 8017a60:	5802546c 	.word	0x5802546c
 8017a64:	58025480 	.word	0x58025480
 8017a68:	58025494 	.word	0x58025494

08017a6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	b085      	sub	sp, #20
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	4a42      	ldr	r2, [pc, #264]	; (8017b84 <DMA_CalcBaseAndBitshift+0x118>)
 8017a7a:	4293      	cmp	r3, r2
 8017a7c:	d04a      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	4a41      	ldr	r2, [pc, #260]	; (8017b88 <DMA_CalcBaseAndBitshift+0x11c>)
 8017a84:	4293      	cmp	r3, r2
 8017a86:	d045      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	4a3f      	ldr	r2, [pc, #252]	; (8017b8c <DMA_CalcBaseAndBitshift+0x120>)
 8017a8e:	4293      	cmp	r3, r2
 8017a90:	d040      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	4a3e      	ldr	r2, [pc, #248]	; (8017b90 <DMA_CalcBaseAndBitshift+0x124>)
 8017a98:	4293      	cmp	r3, r2
 8017a9a:	d03b      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	4a3c      	ldr	r2, [pc, #240]	; (8017b94 <DMA_CalcBaseAndBitshift+0x128>)
 8017aa2:	4293      	cmp	r3, r2
 8017aa4:	d036      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	4a3b      	ldr	r2, [pc, #236]	; (8017b98 <DMA_CalcBaseAndBitshift+0x12c>)
 8017aac:	4293      	cmp	r3, r2
 8017aae:	d031      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	4a39      	ldr	r2, [pc, #228]	; (8017b9c <DMA_CalcBaseAndBitshift+0x130>)
 8017ab6:	4293      	cmp	r3, r2
 8017ab8:	d02c      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	4a38      	ldr	r2, [pc, #224]	; (8017ba0 <DMA_CalcBaseAndBitshift+0x134>)
 8017ac0:	4293      	cmp	r3, r2
 8017ac2:	d027      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	4a36      	ldr	r2, [pc, #216]	; (8017ba4 <DMA_CalcBaseAndBitshift+0x138>)
 8017aca:	4293      	cmp	r3, r2
 8017acc:	d022      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	4a35      	ldr	r2, [pc, #212]	; (8017ba8 <DMA_CalcBaseAndBitshift+0x13c>)
 8017ad4:	4293      	cmp	r3, r2
 8017ad6:	d01d      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	4a33      	ldr	r2, [pc, #204]	; (8017bac <DMA_CalcBaseAndBitshift+0x140>)
 8017ade:	4293      	cmp	r3, r2
 8017ae0:	d018      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	4a32      	ldr	r2, [pc, #200]	; (8017bb0 <DMA_CalcBaseAndBitshift+0x144>)
 8017ae8:	4293      	cmp	r3, r2
 8017aea:	d013      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	4a30      	ldr	r2, [pc, #192]	; (8017bb4 <DMA_CalcBaseAndBitshift+0x148>)
 8017af2:	4293      	cmp	r3, r2
 8017af4:	d00e      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	4a2f      	ldr	r2, [pc, #188]	; (8017bb8 <DMA_CalcBaseAndBitshift+0x14c>)
 8017afc:	4293      	cmp	r3, r2
 8017afe:	d009      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	4a2d      	ldr	r2, [pc, #180]	; (8017bbc <DMA_CalcBaseAndBitshift+0x150>)
 8017b06:	4293      	cmp	r3, r2
 8017b08:	d004      	beq.n	8017b14 <DMA_CalcBaseAndBitshift+0xa8>
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	4a2c      	ldr	r2, [pc, #176]	; (8017bc0 <DMA_CalcBaseAndBitshift+0x154>)
 8017b10:	4293      	cmp	r3, r2
 8017b12:	d101      	bne.n	8017b18 <DMA_CalcBaseAndBitshift+0xac>
 8017b14:	2301      	movs	r3, #1
 8017b16:	e000      	b.n	8017b1a <DMA_CalcBaseAndBitshift+0xae>
 8017b18:	2300      	movs	r3, #0
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d024      	beq.n	8017b68 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	b2db      	uxtb	r3, r3
 8017b24:	3b10      	subs	r3, #16
 8017b26:	4a27      	ldr	r2, [pc, #156]	; (8017bc4 <DMA_CalcBaseAndBitshift+0x158>)
 8017b28:	fba2 2303 	umull	r2, r3, r2, r3
 8017b2c:	091b      	lsrs	r3, r3, #4
 8017b2e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	f003 0307 	and.w	r3, r3, #7
 8017b36:	4a24      	ldr	r2, [pc, #144]	; (8017bc8 <DMA_CalcBaseAndBitshift+0x15c>)
 8017b38:	5cd3      	ldrb	r3, [r2, r3]
 8017b3a:	461a      	mov	r2, r3
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	2b03      	cmp	r3, #3
 8017b44:	d908      	bls.n	8017b58 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	461a      	mov	r2, r3
 8017b4c:	4b1f      	ldr	r3, [pc, #124]	; (8017bcc <DMA_CalcBaseAndBitshift+0x160>)
 8017b4e:	4013      	ands	r3, r2
 8017b50:	1d1a      	adds	r2, r3, #4
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	659a      	str	r2, [r3, #88]	; 0x58
 8017b56:	e00d      	b.n	8017b74 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	461a      	mov	r2, r3
 8017b5e:	4b1b      	ldr	r3, [pc, #108]	; (8017bcc <DMA_CalcBaseAndBitshift+0x160>)
 8017b60:	4013      	ands	r3, r2
 8017b62:	687a      	ldr	r2, [r7, #4]
 8017b64:	6593      	str	r3, [r2, #88]	; 0x58
 8017b66:	e005      	b.n	8017b74 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8017b78:	4618      	mov	r0, r3
 8017b7a:	3714      	adds	r7, #20
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b82:	4770      	bx	lr
 8017b84:	40020010 	.word	0x40020010
 8017b88:	40020028 	.word	0x40020028
 8017b8c:	40020040 	.word	0x40020040
 8017b90:	40020058 	.word	0x40020058
 8017b94:	40020070 	.word	0x40020070
 8017b98:	40020088 	.word	0x40020088
 8017b9c:	400200a0 	.word	0x400200a0
 8017ba0:	400200b8 	.word	0x400200b8
 8017ba4:	40020410 	.word	0x40020410
 8017ba8:	40020428 	.word	0x40020428
 8017bac:	40020440 	.word	0x40020440
 8017bb0:	40020458 	.word	0x40020458
 8017bb4:	40020470 	.word	0x40020470
 8017bb8:	40020488 	.word	0x40020488
 8017bbc:	400204a0 	.word	0x400204a0
 8017bc0:	400204b8 	.word	0x400204b8
 8017bc4:	aaaaaaab 	.word	0xaaaaaaab
 8017bc8:	0802eff4 	.word	0x0802eff4
 8017bcc:	fffffc00 	.word	0xfffffc00

08017bd0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8017bd0:	b480      	push	{r7}
 8017bd2:	b085      	sub	sp, #20
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	699b      	ldr	r3, [r3, #24]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d120      	bne.n	8017c26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017be8:	2b03      	cmp	r3, #3
 8017bea:	d858      	bhi.n	8017c9e <DMA_CheckFifoParam+0xce>
 8017bec:	a201      	add	r2, pc, #4	; (adr r2, 8017bf4 <DMA_CheckFifoParam+0x24>)
 8017bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bf2:	bf00      	nop
 8017bf4:	08017c05 	.word	0x08017c05
 8017bf8:	08017c17 	.word	0x08017c17
 8017bfc:	08017c05 	.word	0x08017c05
 8017c00:	08017c9f 	.word	0x08017c9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d048      	beq.n	8017ca2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8017c10:	2301      	movs	r3, #1
 8017c12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8017c14:	e045      	b.n	8017ca2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017c1e:	d142      	bne.n	8017ca6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8017c20:	2301      	movs	r3, #1
 8017c22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8017c24:	e03f      	b.n	8017ca6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	699b      	ldr	r3, [r3, #24]
 8017c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017c2e:	d123      	bne.n	8017c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c34:	2b03      	cmp	r3, #3
 8017c36:	d838      	bhi.n	8017caa <DMA_CheckFifoParam+0xda>
 8017c38:	a201      	add	r2, pc, #4	; (adr r2, 8017c40 <DMA_CheckFifoParam+0x70>)
 8017c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c3e:	bf00      	nop
 8017c40:	08017c51 	.word	0x08017c51
 8017c44:	08017c57 	.word	0x08017c57
 8017c48:	08017c51 	.word	0x08017c51
 8017c4c:	08017c69 	.word	0x08017c69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8017c50:	2301      	movs	r3, #1
 8017c52:	73fb      	strb	r3, [r7, #15]
        break;
 8017c54:	e030      	b.n	8017cb8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d025      	beq.n	8017cae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8017c62:	2301      	movs	r3, #1
 8017c64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8017c66:	e022      	b.n	8017cae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017c70:	d11f      	bne.n	8017cb2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8017c72:	2301      	movs	r3, #1
 8017c74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8017c76:	e01c      	b.n	8017cb2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c7c:	2b02      	cmp	r3, #2
 8017c7e:	d902      	bls.n	8017c86 <DMA_CheckFifoParam+0xb6>
 8017c80:	2b03      	cmp	r3, #3
 8017c82:	d003      	beq.n	8017c8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8017c84:	e018      	b.n	8017cb8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8017c86:	2301      	movs	r3, #1
 8017c88:	73fb      	strb	r3, [r7, #15]
        break;
 8017c8a:	e015      	b.n	8017cb8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d00e      	beq.n	8017cb6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8017c98:	2301      	movs	r3, #1
 8017c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8017c9c:	e00b      	b.n	8017cb6 <DMA_CheckFifoParam+0xe6>
        break;
 8017c9e:	bf00      	nop
 8017ca0:	e00a      	b.n	8017cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8017ca2:	bf00      	nop
 8017ca4:	e008      	b.n	8017cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8017ca6:	bf00      	nop
 8017ca8:	e006      	b.n	8017cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8017caa:	bf00      	nop
 8017cac:	e004      	b.n	8017cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8017cae:	bf00      	nop
 8017cb0:	e002      	b.n	8017cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8017cb2:	bf00      	nop
 8017cb4:	e000      	b.n	8017cb8 <DMA_CheckFifoParam+0xe8>
    break;
 8017cb6:	bf00      	nop
    }
  }

  return status;
 8017cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cba:	4618      	mov	r0, r3
 8017cbc:	3714      	adds	r7, #20
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc4:	4770      	bx	lr
 8017cc6:	bf00      	nop

08017cc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8017cc8:	b480      	push	{r7}
 8017cca:	b085      	sub	sp, #20
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	4a38      	ldr	r2, [pc, #224]	; (8017dbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	d022      	beq.n	8017d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	4a36      	ldr	r2, [pc, #216]	; (8017dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	d01d      	beq.n	8017d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	4a35      	ldr	r2, [pc, #212]	; (8017dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d018      	beq.n	8017d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	4a33      	ldr	r2, [pc, #204]	; (8017dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8017cfa:	4293      	cmp	r3, r2
 8017cfc:	d013      	beq.n	8017d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	4a32      	ldr	r2, [pc, #200]	; (8017dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8017d04:	4293      	cmp	r3, r2
 8017d06:	d00e      	beq.n	8017d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	4a30      	ldr	r2, [pc, #192]	; (8017dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8017d0e:	4293      	cmp	r3, r2
 8017d10:	d009      	beq.n	8017d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	4a2f      	ldr	r2, [pc, #188]	; (8017dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8017d18:	4293      	cmp	r3, r2
 8017d1a:	d004      	beq.n	8017d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	4a2d      	ldr	r2, [pc, #180]	; (8017dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8017d22:	4293      	cmp	r3, r2
 8017d24:	d101      	bne.n	8017d2a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8017d26:	2301      	movs	r3, #1
 8017d28:	e000      	b.n	8017d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d01a      	beq.n	8017d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	b2db      	uxtb	r3, r3
 8017d36:	3b08      	subs	r3, #8
 8017d38:	4a28      	ldr	r2, [pc, #160]	; (8017ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8017d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8017d3e:	091b      	lsrs	r3, r3, #4
 8017d40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8017d42:	68fa      	ldr	r2, [r7, #12]
 8017d44:	4b26      	ldr	r3, [pc, #152]	; (8017de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8017d46:	4413      	add	r3, r2
 8017d48:	009b      	lsls	r3, r3, #2
 8017d4a:	461a      	mov	r2, r3
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	4a24      	ldr	r2, [pc, #144]	; (8017de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8017d54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	f003 031f 	and.w	r3, r3, #31
 8017d5c:	2201      	movs	r2, #1
 8017d5e:	409a      	lsls	r2, r3
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8017d64:	e024      	b.n	8017db0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	b2db      	uxtb	r3, r3
 8017d6c:	3b10      	subs	r3, #16
 8017d6e:	4a1e      	ldr	r2, [pc, #120]	; (8017de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8017d70:	fba2 2303 	umull	r2, r3, r2, r3
 8017d74:	091b      	lsrs	r3, r3, #4
 8017d76:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	4a1c      	ldr	r2, [pc, #112]	; (8017dec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8017d7c:	4293      	cmp	r3, r2
 8017d7e:	d806      	bhi.n	8017d8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8017d80:	68bb      	ldr	r3, [r7, #8]
 8017d82:	4a1b      	ldr	r2, [pc, #108]	; (8017df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8017d84:	4293      	cmp	r3, r2
 8017d86:	d902      	bls.n	8017d8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	3308      	adds	r3, #8
 8017d8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8017d8e:	68fa      	ldr	r2, [r7, #12]
 8017d90:	4b18      	ldr	r3, [pc, #96]	; (8017df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8017d92:	4413      	add	r3, r2
 8017d94:	009b      	lsls	r3, r3, #2
 8017d96:	461a      	mov	r2, r3
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	4a16      	ldr	r2, [pc, #88]	; (8017df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8017da0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	f003 031f 	and.w	r3, r3, #31
 8017da8:	2201      	movs	r2, #1
 8017daa:	409a      	lsls	r2, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8017db0:	bf00      	nop
 8017db2:	3714      	adds	r7, #20
 8017db4:	46bd      	mov	sp, r7
 8017db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dba:	4770      	bx	lr
 8017dbc:	58025408 	.word	0x58025408
 8017dc0:	5802541c 	.word	0x5802541c
 8017dc4:	58025430 	.word	0x58025430
 8017dc8:	58025444 	.word	0x58025444
 8017dcc:	58025458 	.word	0x58025458
 8017dd0:	5802546c 	.word	0x5802546c
 8017dd4:	58025480 	.word	0x58025480
 8017dd8:	58025494 	.word	0x58025494
 8017ddc:	cccccccd 	.word	0xcccccccd
 8017de0:	16009600 	.word	0x16009600
 8017de4:	58025880 	.word	0x58025880
 8017de8:	aaaaaaab 	.word	0xaaaaaaab
 8017dec:	400204b8 	.word	0x400204b8
 8017df0:	4002040f 	.word	0x4002040f
 8017df4:	10008200 	.word	0x10008200
 8017df8:	40020880 	.word	0x40020880

08017dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8017dfc:	b480      	push	{r7}
 8017dfe:	b085      	sub	sp, #20
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	685b      	ldr	r3, [r3, #4]
 8017e08:	b2db      	uxtb	r3, r3
 8017e0a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d04a      	beq.n	8017ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	2b08      	cmp	r3, #8
 8017e16:	d847      	bhi.n	8017ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	4a25      	ldr	r2, [pc, #148]	; (8017eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	d022      	beq.n	8017e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	4a24      	ldr	r2, [pc, #144]	; (8017eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8017e28:	4293      	cmp	r3, r2
 8017e2a:	d01d      	beq.n	8017e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	4a22      	ldr	r2, [pc, #136]	; (8017ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8017e32:	4293      	cmp	r3, r2
 8017e34:	d018      	beq.n	8017e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	4a21      	ldr	r2, [pc, #132]	; (8017ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8017e3c:	4293      	cmp	r3, r2
 8017e3e:	d013      	beq.n	8017e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	4a1f      	ldr	r2, [pc, #124]	; (8017ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8017e46:	4293      	cmp	r3, r2
 8017e48:	d00e      	beq.n	8017e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	4a1e      	ldr	r2, [pc, #120]	; (8017ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8017e50:	4293      	cmp	r3, r2
 8017e52:	d009      	beq.n	8017e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	4a1c      	ldr	r2, [pc, #112]	; (8017ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8017e5a:	4293      	cmp	r3, r2
 8017e5c:	d004      	beq.n	8017e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	4a1b      	ldr	r2, [pc, #108]	; (8017ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8017e64:	4293      	cmp	r3, r2
 8017e66:	d101      	bne.n	8017e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8017e68:	2301      	movs	r3, #1
 8017e6a:	e000      	b.n	8017e6e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d00a      	beq.n	8017e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8017e72:	68fa      	ldr	r2, [r7, #12]
 8017e74:	4b17      	ldr	r3, [pc, #92]	; (8017ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8017e76:	4413      	add	r3, r2
 8017e78:	009b      	lsls	r3, r3, #2
 8017e7a:	461a      	mov	r2, r3
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	4a15      	ldr	r2, [pc, #84]	; (8017ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8017e84:	671a      	str	r2, [r3, #112]	; 0x70
 8017e86:	e009      	b.n	8017e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8017e88:	68fa      	ldr	r2, [r7, #12]
 8017e8a:	4b14      	ldr	r3, [pc, #80]	; (8017edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8017e8c:	4413      	add	r3, r2
 8017e8e:	009b      	lsls	r3, r3, #2
 8017e90:	461a      	mov	r2, r3
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	4a11      	ldr	r2, [pc, #68]	; (8017ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8017e9a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	3b01      	subs	r3, #1
 8017ea0:	2201      	movs	r2, #1
 8017ea2:	409a      	lsls	r2, r3
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8017ea8:	bf00      	nop
 8017eaa:	3714      	adds	r7, #20
 8017eac:	46bd      	mov	sp, r7
 8017eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb2:	4770      	bx	lr
 8017eb4:	58025408 	.word	0x58025408
 8017eb8:	5802541c 	.word	0x5802541c
 8017ebc:	58025430 	.word	0x58025430
 8017ec0:	58025444 	.word	0x58025444
 8017ec4:	58025458 	.word	0x58025458
 8017ec8:	5802546c 	.word	0x5802546c
 8017ecc:	58025480 	.word	0x58025480
 8017ed0:	58025494 	.word	0x58025494
 8017ed4:	1600963f 	.word	0x1600963f
 8017ed8:	58025940 	.word	0x58025940
 8017edc:	1000823f 	.word	0x1000823f
 8017ee0:	40020940 	.word	0x40020940

08017ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017ee4:	b480      	push	{r7}
 8017ee6:	b089      	sub	sp, #36	; 0x24
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
 8017eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8017eee:	2300      	movs	r3, #0
 8017ef0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8017ef2:	4b89      	ldr	r3, [pc, #548]	; (8018118 <HAL_GPIO_Init+0x234>)
 8017ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8017ef6:	e194      	b.n	8018222 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8017ef8:	683b      	ldr	r3, [r7, #0]
 8017efa:	681a      	ldr	r2, [r3, #0]
 8017efc:	2101      	movs	r1, #1
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	fa01 f303 	lsl.w	r3, r1, r3
 8017f04:	4013      	ands	r3, r2
 8017f06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8017f08:	693b      	ldr	r3, [r7, #16]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	f000 8186 	beq.w	801821c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8017f10:	683b      	ldr	r3, [r7, #0]
 8017f12:	685b      	ldr	r3, [r3, #4]
 8017f14:	2b01      	cmp	r3, #1
 8017f16:	d00b      	beq.n	8017f30 <HAL_GPIO_Init+0x4c>
 8017f18:	683b      	ldr	r3, [r7, #0]
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	2b02      	cmp	r3, #2
 8017f1e:	d007      	beq.n	8017f30 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8017f24:	2b11      	cmp	r3, #17
 8017f26:	d003      	beq.n	8017f30 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	2b12      	cmp	r3, #18
 8017f2e:	d130      	bne.n	8017f92 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	689b      	ldr	r3, [r3, #8]
 8017f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8017f36:	69fb      	ldr	r3, [r7, #28]
 8017f38:	005b      	lsls	r3, r3, #1
 8017f3a:	2203      	movs	r2, #3
 8017f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8017f40:	43db      	mvns	r3, r3
 8017f42:	69ba      	ldr	r2, [r7, #24]
 8017f44:	4013      	ands	r3, r2
 8017f46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	68da      	ldr	r2, [r3, #12]
 8017f4c:	69fb      	ldr	r3, [r7, #28]
 8017f4e:	005b      	lsls	r3, r3, #1
 8017f50:	fa02 f303 	lsl.w	r3, r2, r3
 8017f54:	69ba      	ldr	r2, [r7, #24]
 8017f56:	4313      	orrs	r3, r2
 8017f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	69ba      	ldr	r2, [r7, #24]
 8017f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	685b      	ldr	r3, [r3, #4]
 8017f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8017f66:	2201      	movs	r2, #1
 8017f68:	69fb      	ldr	r3, [r7, #28]
 8017f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8017f6e:	43db      	mvns	r3, r3
 8017f70:	69ba      	ldr	r2, [r7, #24]
 8017f72:	4013      	ands	r3, r2
 8017f74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8017f76:	683b      	ldr	r3, [r7, #0]
 8017f78:	685b      	ldr	r3, [r3, #4]
 8017f7a:	091b      	lsrs	r3, r3, #4
 8017f7c:	f003 0201 	and.w	r2, r3, #1
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	fa02 f303 	lsl.w	r3, r2, r3
 8017f86:	69ba      	ldr	r2, [r7, #24]
 8017f88:	4313      	orrs	r3, r2
 8017f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	69ba      	ldr	r2, [r7, #24]
 8017f90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	68db      	ldr	r3, [r3, #12]
 8017f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8017f98:	69fb      	ldr	r3, [r7, #28]
 8017f9a:	005b      	lsls	r3, r3, #1
 8017f9c:	2203      	movs	r2, #3
 8017f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8017fa2:	43db      	mvns	r3, r3
 8017fa4:	69ba      	ldr	r2, [r7, #24]
 8017fa6:	4013      	ands	r3, r2
 8017fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	689a      	ldr	r2, [r3, #8]
 8017fae:	69fb      	ldr	r3, [r7, #28]
 8017fb0:	005b      	lsls	r3, r3, #1
 8017fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8017fb6:	69ba      	ldr	r2, [r7, #24]
 8017fb8:	4313      	orrs	r3, r2
 8017fba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	69ba      	ldr	r2, [r7, #24]
 8017fc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	685b      	ldr	r3, [r3, #4]
 8017fc6:	2b02      	cmp	r3, #2
 8017fc8:	d003      	beq.n	8017fd2 <HAL_GPIO_Init+0xee>
 8017fca:	683b      	ldr	r3, [r7, #0]
 8017fcc:	685b      	ldr	r3, [r3, #4]
 8017fce:	2b12      	cmp	r3, #18
 8017fd0:	d123      	bne.n	801801a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8017fd2:	69fb      	ldr	r3, [r7, #28]
 8017fd4:	08da      	lsrs	r2, r3, #3
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	3208      	adds	r2, #8
 8017fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8017fe0:	69fb      	ldr	r3, [r7, #28]
 8017fe2:	f003 0307 	and.w	r3, r3, #7
 8017fe6:	009b      	lsls	r3, r3, #2
 8017fe8:	220f      	movs	r2, #15
 8017fea:	fa02 f303 	lsl.w	r3, r2, r3
 8017fee:	43db      	mvns	r3, r3
 8017ff0:	69ba      	ldr	r2, [r7, #24]
 8017ff2:	4013      	ands	r3, r2
 8017ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8017ff6:	683b      	ldr	r3, [r7, #0]
 8017ff8:	691a      	ldr	r2, [r3, #16]
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	f003 0307 	and.w	r3, r3, #7
 8018000:	009b      	lsls	r3, r3, #2
 8018002:	fa02 f303 	lsl.w	r3, r2, r3
 8018006:	69ba      	ldr	r2, [r7, #24]
 8018008:	4313      	orrs	r3, r2
 801800a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801800c:	69fb      	ldr	r3, [r7, #28]
 801800e:	08da      	lsrs	r2, r3, #3
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	3208      	adds	r2, #8
 8018014:	69b9      	ldr	r1, [r7, #24]
 8018016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	005b      	lsls	r3, r3, #1
 8018024:	2203      	movs	r2, #3
 8018026:	fa02 f303 	lsl.w	r3, r2, r3
 801802a:	43db      	mvns	r3, r3
 801802c:	69ba      	ldr	r2, [r7, #24]
 801802e:	4013      	ands	r3, r2
 8018030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	685b      	ldr	r3, [r3, #4]
 8018036:	f003 0203 	and.w	r2, r3, #3
 801803a:	69fb      	ldr	r3, [r7, #28]
 801803c:	005b      	lsls	r3, r3, #1
 801803e:	fa02 f303 	lsl.w	r3, r2, r3
 8018042:	69ba      	ldr	r2, [r7, #24]
 8018044:	4313      	orrs	r3, r2
 8018046:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	69ba      	ldr	r2, [r7, #24]
 801804c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	685b      	ldr	r3, [r3, #4]
 8018052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018056:	2b00      	cmp	r3, #0
 8018058:	f000 80e0 	beq.w	801821c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801805c:	4b2f      	ldr	r3, [pc, #188]	; (801811c <HAL_GPIO_Init+0x238>)
 801805e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8018062:	4a2e      	ldr	r2, [pc, #184]	; (801811c <HAL_GPIO_Init+0x238>)
 8018064:	f043 0302 	orr.w	r3, r3, #2
 8018068:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801806c:	4b2b      	ldr	r3, [pc, #172]	; (801811c <HAL_GPIO_Init+0x238>)
 801806e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8018072:	f003 0302 	and.w	r3, r3, #2
 8018076:	60fb      	str	r3, [r7, #12]
 8018078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801807a:	4a29      	ldr	r2, [pc, #164]	; (8018120 <HAL_GPIO_Init+0x23c>)
 801807c:	69fb      	ldr	r3, [r7, #28]
 801807e:	089b      	lsrs	r3, r3, #2
 8018080:	3302      	adds	r3, #2
 8018082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8018088:	69fb      	ldr	r3, [r7, #28]
 801808a:	f003 0303 	and.w	r3, r3, #3
 801808e:	009b      	lsls	r3, r3, #2
 8018090:	220f      	movs	r2, #15
 8018092:	fa02 f303 	lsl.w	r3, r2, r3
 8018096:	43db      	mvns	r3, r3
 8018098:	69ba      	ldr	r2, [r7, #24]
 801809a:	4013      	ands	r3, r2
 801809c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	4a20      	ldr	r2, [pc, #128]	; (8018124 <HAL_GPIO_Init+0x240>)
 80180a2:	4293      	cmp	r3, r2
 80180a4:	d052      	beq.n	801814c <HAL_GPIO_Init+0x268>
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	4a1f      	ldr	r2, [pc, #124]	; (8018128 <HAL_GPIO_Init+0x244>)
 80180aa:	4293      	cmp	r3, r2
 80180ac:	d031      	beq.n	8018112 <HAL_GPIO_Init+0x22e>
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	4a1e      	ldr	r2, [pc, #120]	; (801812c <HAL_GPIO_Init+0x248>)
 80180b2:	4293      	cmp	r3, r2
 80180b4:	d02b      	beq.n	801810e <HAL_GPIO_Init+0x22a>
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	4a1d      	ldr	r2, [pc, #116]	; (8018130 <HAL_GPIO_Init+0x24c>)
 80180ba:	4293      	cmp	r3, r2
 80180bc:	d025      	beq.n	801810a <HAL_GPIO_Init+0x226>
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	4a1c      	ldr	r2, [pc, #112]	; (8018134 <HAL_GPIO_Init+0x250>)
 80180c2:	4293      	cmp	r3, r2
 80180c4:	d01f      	beq.n	8018106 <HAL_GPIO_Init+0x222>
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	4a1b      	ldr	r2, [pc, #108]	; (8018138 <HAL_GPIO_Init+0x254>)
 80180ca:	4293      	cmp	r3, r2
 80180cc:	d019      	beq.n	8018102 <HAL_GPIO_Init+0x21e>
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	4a1a      	ldr	r2, [pc, #104]	; (801813c <HAL_GPIO_Init+0x258>)
 80180d2:	4293      	cmp	r3, r2
 80180d4:	d013      	beq.n	80180fe <HAL_GPIO_Init+0x21a>
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	4a19      	ldr	r2, [pc, #100]	; (8018140 <HAL_GPIO_Init+0x25c>)
 80180da:	4293      	cmp	r3, r2
 80180dc:	d00d      	beq.n	80180fa <HAL_GPIO_Init+0x216>
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	4a18      	ldr	r2, [pc, #96]	; (8018144 <HAL_GPIO_Init+0x260>)
 80180e2:	4293      	cmp	r3, r2
 80180e4:	d007      	beq.n	80180f6 <HAL_GPIO_Init+0x212>
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	4a17      	ldr	r2, [pc, #92]	; (8018148 <HAL_GPIO_Init+0x264>)
 80180ea:	4293      	cmp	r3, r2
 80180ec:	d101      	bne.n	80180f2 <HAL_GPIO_Init+0x20e>
 80180ee:	2309      	movs	r3, #9
 80180f0:	e02d      	b.n	801814e <HAL_GPIO_Init+0x26a>
 80180f2:	230a      	movs	r3, #10
 80180f4:	e02b      	b.n	801814e <HAL_GPIO_Init+0x26a>
 80180f6:	2308      	movs	r3, #8
 80180f8:	e029      	b.n	801814e <HAL_GPIO_Init+0x26a>
 80180fa:	2307      	movs	r3, #7
 80180fc:	e027      	b.n	801814e <HAL_GPIO_Init+0x26a>
 80180fe:	2306      	movs	r3, #6
 8018100:	e025      	b.n	801814e <HAL_GPIO_Init+0x26a>
 8018102:	2305      	movs	r3, #5
 8018104:	e023      	b.n	801814e <HAL_GPIO_Init+0x26a>
 8018106:	2304      	movs	r3, #4
 8018108:	e021      	b.n	801814e <HAL_GPIO_Init+0x26a>
 801810a:	2303      	movs	r3, #3
 801810c:	e01f      	b.n	801814e <HAL_GPIO_Init+0x26a>
 801810e:	2302      	movs	r3, #2
 8018110:	e01d      	b.n	801814e <HAL_GPIO_Init+0x26a>
 8018112:	2301      	movs	r3, #1
 8018114:	e01b      	b.n	801814e <HAL_GPIO_Init+0x26a>
 8018116:	bf00      	nop
 8018118:	58000080 	.word	0x58000080
 801811c:	58024400 	.word	0x58024400
 8018120:	58000400 	.word	0x58000400
 8018124:	58020000 	.word	0x58020000
 8018128:	58020400 	.word	0x58020400
 801812c:	58020800 	.word	0x58020800
 8018130:	58020c00 	.word	0x58020c00
 8018134:	58021000 	.word	0x58021000
 8018138:	58021400 	.word	0x58021400
 801813c:	58021800 	.word	0x58021800
 8018140:	58021c00 	.word	0x58021c00
 8018144:	58022000 	.word	0x58022000
 8018148:	58022400 	.word	0x58022400
 801814c:	2300      	movs	r3, #0
 801814e:	69fa      	ldr	r2, [r7, #28]
 8018150:	f002 0203 	and.w	r2, r2, #3
 8018154:	0092      	lsls	r2, r2, #2
 8018156:	4093      	lsls	r3, r2
 8018158:	69ba      	ldr	r2, [r7, #24]
 801815a:	4313      	orrs	r3, r2
 801815c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801815e:	4938      	ldr	r1, [pc, #224]	; (8018240 <HAL_GPIO_Init+0x35c>)
 8018160:	69fb      	ldr	r3, [r7, #28]
 8018162:	089b      	lsrs	r3, r3, #2
 8018164:	3302      	adds	r3, #2
 8018166:	69ba      	ldr	r2, [r7, #24]
 8018168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801816c:	697b      	ldr	r3, [r7, #20]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8018172:	693b      	ldr	r3, [r7, #16]
 8018174:	43db      	mvns	r3, r3
 8018176:	69ba      	ldr	r2, [r7, #24]
 8018178:	4013      	ands	r3, r2
 801817a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	685b      	ldr	r3, [r3, #4]
 8018180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018184:	2b00      	cmp	r3, #0
 8018186:	d003      	beq.n	8018190 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8018188:	69ba      	ldr	r2, [r7, #24]
 801818a:	693b      	ldr	r3, [r7, #16]
 801818c:	4313      	orrs	r3, r2
 801818e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8018190:	697b      	ldr	r3, [r7, #20]
 8018192:	69ba      	ldr	r2, [r7, #24]
 8018194:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	685b      	ldr	r3, [r3, #4]
 801819a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801819c:	693b      	ldr	r3, [r7, #16]
 801819e:	43db      	mvns	r3, r3
 80181a0:	69ba      	ldr	r2, [r7, #24]
 80181a2:	4013      	ands	r3, r2
 80181a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	685b      	ldr	r3, [r3, #4]
 80181aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d003      	beq.n	80181ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80181b2:	69ba      	ldr	r2, [r7, #24]
 80181b4:	693b      	ldr	r3, [r7, #16]
 80181b6:	4313      	orrs	r3, r2
 80181b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80181ba:	697b      	ldr	r3, [r7, #20]
 80181bc:	69ba      	ldr	r2, [r7, #24]
 80181be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80181c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80181c8:	693b      	ldr	r3, [r7, #16]
 80181ca:	43db      	mvns	r3, r3
 80181cc:	69ba      	ldr	r2, [r7, #24]
 80181ce:	4013      	ands	r3, r2
 80181d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	685b      	ldr	r3, [r3, #4]
 80181d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d003      	beq.n	80181e6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80181de:	69ba      	ldr	r2, [r7, #24]
 80181e0:	693b      	ldr	r3, [r7, #16]
 80181e2:	4313      	orrs	r3, r2
 80181e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80181e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181ea:	69bb      	ldr	r3, [r7, #24]
 80181ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80181ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181f2:	685b      	ldr	r3, [r3, #4]
 80181f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80181f6:	693b      	ldr	r3, [r7, #16]
 80181f8:	43db      	mvns	r3, r3
 80181fa:	69ba      	ldr	r2, [r7, #24]
 80181fc:	4013      	ands	r3, r2
 80181fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8018200:	683b      	ldr	r3, [r7, #0]
 8018202:	685b      	ldr	r3, [r3, #4]
 8018204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018208:	2b00      	cmp	r3, #0
 801820a:	d003      	beq.n	8018214 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 801820c:	69ba      	ldr	r2, [r7, #24]
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	4313      	orrs	r3, r2
 8018212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8018214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018218:	69bb      	ldr	r3, [r7, #24]
 801821a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 801821c:	69fb      	ldr	r3, [r7, #28]
 801821e:	3301      	adds	r3, #1
 8018220:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8018222:	683b      	ldr	r3, [r7, #0]
 8018224:	681a      	ldr	r2, [r3, #0]
 8018226:	69fb      	ldr	r3, [r7, #28]
 8018228:	fa22 f303 	lsr.w	r3, r2, r3
 801822c:	2b00      	cmp	r3, #0
 801822e:	f47f ae63 	bne.w	8017ef8 <HAL_GPIO_Init+0x14>
  }
}
 8018232:	bf00      	nop
 8018234:	3724      	adds	r7, #36	; 0x24
 8018236:	46bd      	mov	sp, r7
 8018238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823c:	4770      	bx	lr
 801823e:	bf00      	nop
 8018240:	58000400 	.word	0x58000400

08018244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8018244:	b480      	push	{r7}
 8018246:	b085      	sub	sp, #20
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
 801824c:	460b      	mov	r3, r1
 801824e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	691a      	ldr	r2, [r3, #16]
 8018254:	887b      	ldrh	r3, [r7, #2]
 8018256:	4013      	ands	r3, r2
 8018258:	2b00      	cmp	r3, #0
 801825a:	d002      	beq.n	8018262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801825c:	2301      	movs	r3, #1
 801825e:	73fb      	strb	r3, [r7, #15]
 8018260:	e001      	b.n	8018266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8018262:	2300      	movs	r3, #0
 8018264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8018266:	7bfb      	ldrb	r3, [r7, #15]
}
 8018268:	4618      	mov	r0, r3
 801826a:	3714      	adds	r7, #20
 801826c:	46bd      	mov	sp, r7
 801826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018272:	4770      	bx	lr

08018274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8018274:	b480      	push	{r7}
 8018276:	b083      	sub	sp, #12
 8018278:	af00      	add	r7, sp, #0
 801827a:	6078      	str	r0, [r7, #4]
 801827c:	460b      	mov	r3, r1
 801827e:	807b      	strh	r3, [r7, #2]
 8018280:	4613      	mov	r3, r2
 8018282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8018284:	787b      	ldrb	r3, [r7, #1]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d003      	beq.n	8018292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801828a:	887a      	ldrh	r2, [r7, #2]
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8018290:	e003      	b.n	801829a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8018292:	887b      	ldrh	r3, [r7, #2]
 8018294:	041a      	lsls	r2, r3, #16
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	619a      	str	r2, [r3, #24]
}
 801829a:	bf00      	nop
 801829c:	370c      	adds	r7, #12
 801829e:	46bd      	mov	sp, r7
 80182a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a4:	4770      	bx	lr
	...

080182a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b082      	sub	sp, #8
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d101      	bne.n	80182ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80182b6:	2301      	movs	r3, #1
 80182b8:	e07f      	b.n	80183ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80182c0:	b2db      	uxtb	r3, r3
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d106      	bne.n	80182d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	2200      	movs	r2, #0
 80182ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80182ce:	6878      	ldr	r0, [r7, #4]
 80182d0:	f7fa fe1a 	bl	8012f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	2224      	movs	r2, #36	; 0x24
 80182d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	681a      	ldr	r2, [r3, #0]
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	f022 0201 	bic.w	r2, r2, #1
 80182ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	685a      	ldr	r2, [r3, #4]
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80182f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	689a      	ldr	r2, [r3, #8]
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018308:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	68db      	ldr	r3, [r3, #12]
 801830e:	2b01      	cmp	r3, #1
 8018310:	d107      	bne.n	8018322 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	689a      	ldr	r2, [r3, #8]
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801831e:	609a      	str	r2, [r3, #8]
 8018320:	e006      	b.n	8018330 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	689a      	ldr	r2, [r3, #8]
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801832e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	68db      	ldr	r3, [r3, #12]
 8018334:	2b02      	cmp	r3, #2
 8018336:	d104      	bne.n	8018342 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018340:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	6859      	ldr	r1, [r3, #4]
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	681a      	ldr	r2, [r3, #0]
 801834c:	4b1d      	ldr	r3, [pc, #116]	; (80183c4 <HAL_I2C_Init+0x11c>)
 801834e:	430b      	orrs	r3, r1
 8018350:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	68da      	ldr	r2, [r3, #12]
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018360:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	691a      	ldr	r2, [r3, #16]
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	695b      	ldr	r3, [r3, #20]
 801836a:	ea42 0103 	orr.w	r1, r2, r3
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	699b      	ldr	r3, [r3, #24]
 8018372:	021a      	lsls	r2, r3, #8
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	430a      	orrs	r2, r1
 801837a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	69d9      	ldr	r1, [r3, #28]
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6a1a      	ldr	r2, [r3, #32]
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	430a      	orrs	r2, r1
 801838a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	681a      	ldr	r2, [r3, #0]
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	f042 0201 	orr.w	r2, r2, #1
 801839a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	2200      	movs	r2, #0
 80183a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	2220      	movs	r2, #32
 80183a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	2200      	movs	r2, #0
 80183ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2200      	movs	r2, #0
 80183b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80183b8:	2300      	movs	r3, #0
}
 80183ba:	4618      	mov	r0, r3
 80183bc:	3708      	adds	r7, #8
 80183be:	46bd      	mov	sp, r7
 80183c0:	bd80      	pop	{r7, pc}
 80183c2:	bf00      	nop
 80183c4:	02008000 	.word	0x02008000

080183c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b088      	sub	sp, #32
 80183cc:	af02      	add	r7, sp, #8
 80183ce:	60f8      	str	r0, [r7, #12]
 80183d0:	4608      	mov	r0, r1
 80183d2:	4611      	mov	r1, r2
 80183d4:	461a      	mov	r2, r3
 80183d6:	4603      	mov	r3, r0
 80183d8:	817b      	strh	r3, [r7, #10]
 80183da:	460b      	mov	r3, r1
 80183dc:	813b      	strh	r3, [r7, #8]
 80183de:	4613      	mov	r3, r2
 80183e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80183e8:	b2db      	uxtb	r3, r3
 80183ea:	2b20      	cmp	r3, #32
 80183ec:	f040 80f9 	bne.w	80185e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80183f0:	6a3b      	ldr	r3, [r7, #32]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d002      	beq.n	80183fc <HAL_I2C_Mem_Write+0x34>
 80183f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d105      	bne.n	8018408 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018402:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018404:	2301      	movs	r3, #1
 8018406:	e0ed      	b.n	80185e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801840e:	2b01      	cmp	r3, #1
 8018410:	d101      	bne.n	8018416 <HAL_I2C_Mem_Write+0x4e>
 8018412:	2302      	movs	r3, #2
 8018414:	e0e6      	b.n	80185e4 <HAL_I2C_Mem_Write+0x21c>
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	2201      	movs	r2, #1
 801841a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801841e:	f7fc f9c3 	bl	80147a8 <HAL_GetTick>
 8018422:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018424:	697b      	ldr	r3, [r7, #20]
 8018426:	9300      	str	r3, [sp, #0]
 8018428:	2319      	movs	r3, #25
 801842a:	2201      	movs	r2, #1
 801842c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018430:	68f8      	ldr	r0, [r7, #12]
 8018432:	f002 f8f9 	bl	801a628 <I2C_WaitOnFlagUntilTimeout>
 8018436:	4603      	mov	r3, r0
 8018438:	2b00      	cmp	r3, #0
 801843a:	d001      	beq.n	8018440 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 801843c:	2301      	movs	r3, #1
 801843e:	e0d1      	b.n	80185e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	2221      	movs	r2, #33	; 0x21
 8018444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	2240      	movs	r2, #64	; 0x40
 801844c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	2200      	movs	r2, #0
 8018454:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	6a3a      	ldr	r2, [r7, #32]
 801845a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	2200      	movs	r2, #0
 8018466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018468:	88f8      	ldrh	r0, [r7, #6]
 801846a:	893a      	ldrh	r2, [r7, #8]
 801846c:	8979      	ldrh	r1, [r7, #10]
 801846e:	697b      	ldr	r3, [r7, #20]
 8018470:	9301      	str	r3, [sp, #4]
 8018472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018474:	9300      	str	r3, [sp, #0]
 8018476:	4603      	mov	r3, r0
 8018478:	68f8      	ldr	r0, [r7, #12]
 801847a:	f001 f939 	bl	80196f0 <I2C_RequestMemoryWrite>
 801847e:	4603      	mov	r3, r0
 8018480:	2b00      	cmp	r3, #0
 8018482:	d005      	beq.n	8018490 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	2200      	movs	r2, #0
 8018488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801848c:	2301      	movs	r3, #1
 801848e:	e0a9      	b.n	80185e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018494:	b29b      	uxth	r3, r3
 8018496:	2bff      	cmp	r3, #255	; 0xff
 8018498:	d90e      	bls.n	80184b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	22ff      	movs	r2, #255	; 0xff
 801849e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184a4:	b2da      	uxtb	r2, r3
 80184a6:	8979      	ldrh	r1, [r7, #10]
 80184a8:	2300      	movs	r3, #0
 80184aa:	9300      	str	r3, [sp, #0]
 80184ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80184b0:	68f8      	ldr	r0, [r7, #12]
 80184b2:	f002 f9db 	bl	801a86c <I2C_TransferConfig>
 80184b6:	e00f      	b.n	80184d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184bc:	b29a      	uxth	r2, r3
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184c6:	b2da      	uxtb	r2, r3
 80184c8:	8979      	ldrh	r1, [r7, #10]
 80184ca:	2300      	movs	r3, #0
 80184cc:	9300      	str	r3, [sp, #0]
 80184ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80184d2:	68f8      	ldr	r0, [r7, #12]
 80184d4:	f002 f9ca 	bl	801a86c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80184d8:	697a      	ldr	r2, [r7, #20]
 80184da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80184dc:	68f8      	ldr	r0, [r7, #12]
 80184de:	f002 f8e3 	bl	801a6a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80184e2:	4603      	mov	r3, r0
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d001      	beq.n	80184ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80184e8:	2301      	movs	r3, #1
 80184ea:	e07b      	b.n	80185e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184f0:	781a      	ldrb	r2, [r3, #0]
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184fc:	1c5a      	adds	r2, r3, #1
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018506:	b29b      	uxth	r3, r3
 8018508:	3b01      	subs	r3, #1
 801850a:	b29a      	uxth	r2, r3
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018514:	3b01      	subs	r3, #1
 8018516:	b29a      	uxth	r2, r3
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018520:	b29b      	uxth	r3, r3
 8018522:	2b00      	cmp	r3, #0
 8018524:	d034      	beq.n	8018590 <HAL_I2C_Mem_Write+0x1c8>
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801852a:	2b00      	cmp	r3, #0
 801852c:	d130      	bne.n	8018590 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	9300      	str	r3, [sp, #0]
 8018532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018534:	2200      	movs	r2, #0
 8018536:	2180      	movs	r1, #128	; 0x80
 8018538:	68f8      	ldr	r0, [r7, #12]
 801853a:	f002 f875 	bl	801a628 <I2C_WaitOnFlagUntilTimeout>
 801853e:	4603      	mov	r3, r0
 8018540:	2b00      	cmp	r3, #0
 8018542:	d001      	beq.n	8018548 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8018544:	2301      	movs	r3, #1
 8018546:	e04d      	b.n	80185e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801854c:	b29b      	uxth	r3, r3
 801854e:	2bff      	cmp	r3, #255	; 0xff
 8018550:	d90e      	bls.n	8018570 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	22ff      	movs	r2, #255	; 0xff
 8018556:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801855c:	b2da      	uxtb	r2, r3
 801855e:	8979      	ldrh	r1, [r7, #10]
 8018560:	2300      	movs	r3, #0
 8018562:	9300      	str	r3, [sp, #0]
 8018564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018568:	68f8      	ldr	r0, [r7, #12]
 801856a:	f002 f97f 	bl	801a86c <I2C_TransferConfig>
 801856e:	e00f      	b.n	8018590 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018574:	b29a      	uxth	r2, r3
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801857e:	b2da      	uxtb	r2, r3
 8018580:	8979      	ldrh	r1, [r7, #10]
 8018582:	2300      	movs	r3, #0
 8018584:	9300      	str	r3, [sp, #0]
 8018586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801858a:	68f8      	ldr	r0, [r7, #12]
 801858c:	f002 f96e 	bl	801a86c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018594:	b29b      	uxth	r3, r3
 8018596:	2b00      	cmp	r3, #0
 8018598:	d19e      	bne.n	80184d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801859a:	697a      	ldr	r2, [r7, #20]
 801859c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801859e:	68f8      	ldr	r0, [r7, #12]
 80185a0:	f002 f8c2 	bl	801a728 <I2C_WaitOnSTOPFlagUntilTimeout>
 80185a4:	4603      	mov	r3, r0
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d001      	beq.n	80185ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80185aa:	2301      	movs	r3, #1
 80185ac:	e01a      	b.n	80185e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	2220      	movs	r2, #32
 80185b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	6859      	ldr	r1, [r3, #4]
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	681a      	ldr	r2, [r3, #0]
 80185c0:	4b0a      	ldr	r3, [pc, #40]	; (80185ec <HAL_I2C_Mem_Write+0x224>)
 80185c2:	400b      	ands	r3, r1
 80185c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	2220      	movs	r2, #32
 80185ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	2200      	movs	r2, #0
 80185d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	2200      	movs	r2, #0
 80185da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80185de:	2300      	movs	r3, #0
 80185e0:	e000      	b.n	80185e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80185e2:	2302      	movs	r3, #2
  }
}
 80185e4:	4618      	mov	r0, r3
 80185e6:	3718      	adds	r7, #24
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd80      	pop	{r7, pc}
 80185ec:	fe00e800 	.word	0xfe00e800

080185f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b088      	sub	sp, #32
 80185f4:	af02      	add	r7, sp, #8
 80185f6:	60f8      	str	r0, [r7, #12]
 80185f8:	4608      	mov	r0, r1
 80185fa:	4611      	mov	r1, r2
 80185fc:	461a      	mov	r2, r3
 80185fe:	4603      	mov	r3, r0
 8018600:	817b      	strh	r3, [r7, #10]
 8018602:	460b      	mov	r3, r1
 8018604:	813b      	strh	r3, [r7, #8]
 8018606:	4613      	mov	r3, r2
 8018608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018610:	b2db      	uxtb	r3, r3
 8018612:	2b20      	cmp	r3, #32
 8018614:	f040 80fd 	bne.w	8018812 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8018618:	6a3b      	ldr	r3, [r7, #32]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d002      	beq.n	8018624 <HAL_I2C_Mem_Read+0x34>
 801861e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018620:	2b00      	cmp	r3, #0
 8018622:	d105      	bne.n	8018630 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	f44f 7200 	mov.w	r2, #512	; 0x200
 801862a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801862c:	2301      	movs	r3, #1
 801862e:	e0f1      	b.n	8018814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018636:	2b01      	cmp	r3, #1
 8018638:	d101      	bne.n	801863e <HAL_I2C_Mem_Read+0x4e>
 801863a:	2302      	movs	r3, #2
 801863c:	e0ea      	b.n	8018814 <HAL_I2C_Mem_Read+0x224>
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	2201      	movs	r2, #1
 8018642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018646:	f7fc f8af 	bl	80147a8 <HAL_GetTick>
 801864a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801864c:	697b      	ldr	r3, [r7, #20]
 801864e:	9300      	str	r3, [sp, #0]
 8018650:	2319      	movs	r3, #25
 8018652:	2201      	movs	r2, #1
 8018654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018658:	68f8      	ldr	r0, [r7, #12]
 801865a:	f001 ffe5 	bl	801a628 <I2C_WaitOnFlagUntilTimeout>
 801865e:	4603      	mov	r3, r0
 8018660:	2b00      	cmp	r3, #0
 8018662:	d001      	beq.n	8018668 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8018664:	2301      	movs	r3, #1
 8018666:	e0d5      	b.n	8018814 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	2222      	movs	r2, #34	; 0x22
 801866c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	2240      	movs	r2, #64	; 0x40
 8018674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	2200      	movs	r2, #0
 801867c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	6a3a      	ldr	r2, [r7, #32]
 8018682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	2200      	movs	r2, #0
 801868e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018690:	88f8      	ldrh	r0, [r7, #6]
 8018692:	893a      	ldrh	r2, [r7, #8]
 8018694:	8979      	ldrh	r1, [r7, #10]
 8018696:	697b      	ldr	r3, [r7, #20]
 8018698:	9301      	str	r3, [sp, #4]
 801869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801869c:	9300      	str	r3, [sp, #0]
 801869e:	4603      	mov	r3, r0
 80186a0:	68f8      	ldr	r0, [r7, #12]
 80186a2:	f001 f879 	bl	8019798 <I2C_RequestMemoryRead>
 80186a6:	4603      	mov	r3, r0
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d005      	beq.n	80186b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	2200      	movs	r2, #0
 80186b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80186b4:	2301      	movs	r3, #1
 80186b6:	e0ad      	b.n	8018814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186bc:	b29b      	uxth	r3, r3
 80186be:	2bff      	cmp	r3, #255	; 0xff
 80186c0:	d90e      	bls.n	80186e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	22ff      	movs	r2, #255	; 0xff
 80186c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80186cc:	b2da      	uxtb	r2, r3
 80186ce:	8979      	ldrh	r1, [r7, #10]
 80186d0:	4b52      	ldr	r3, [pc, #328]	; (801881c <HAL_I2C_Mem_Read+0x22c>)
 80186d2:	9300      	str	r3, [sp, #0]
 80186d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80186d8:	68f8      	ldr	r0, [r7, #12]
 80186da:	f002 f8c7 	bl	801a86c <I2C_TransferConfig>
 80186de:	e00f      	b.n	8018700 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186e4:	b29a      	uxth	r2, r3
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80186ee:	b2da      	uxtb	r2, r3
 80186f0:	8979      	ldrh	r1, [r7, #10]
 80186f2:	4b4a      	ldr	r3, [pc, #296]	; (801881c <HAL_I2C_Mem_Read+0x22c>)
 80186f4:	9300      	str	r3, [sp, #0]
 80186f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80186fa:	68f8      	ldr	r0, [r7, #12]
 80186fc:	f002 f8b6 	bl	801a86c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8018700:	697b      	ldr	r3, [r7, #20]
 8018702:	9300      	str	r3, [sp, #0]
 8018704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018706:	2200      	movs	r2, #0
 8018708:	2104      	movs	r1, #4
 801870a:	68f8      	ldr	r0, [r7, #12]
 801870c:	f001 ff8c 	bl	801a628 <I2C_WaitOnFlagUntilTimeout>
 8018710:	4603      	mov	r3, r0
 8018712:	2b00      	cmp	r3, #0
 8018714:	d001      	beq.n	801871a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8018716:	2301      	movs	r3, #1
 8018718:	e07c      	b.n	8018814 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018724:	b2d2      	uxtb	r2, r2
 8018726:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801872c:	1c5a      	adds	r2, r3, #1
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018736:	3b01      	subs	r3, #1
 8018738:	b29a      	uxth	r2, r3
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018742:	b29b      	uxth	r3, r3
 8018744:	3b01      	subs	r3, #1
 8018746:	b29a      	uxth	r2, r3
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018750:	b29b      	uxth	r3, r3
 8018752:	2b00      	cmp	r3, #0
 8018754:	d034      	beq.n	80187c0 <HAL_I2C_Mem_Read+0x1d0>
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801875a:	2b00      	cmp	r3, #0
 801875c:	d130      	bne.n	80187c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	9300      	str	r3, [sp, #0]
 8018762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018764:	2200      	movs	r2, #0
 8018766:	2180      	movs	r1, #128	; 0x80
 8018768:	68f8      	ldr	r0, [r7, #12]
 801876a:	f001 ff5d 	bl	801a628 <I2C_WaitOnFlagUntilTimeout>
 801876e:	4603      	mov	r3, r0
 8018770:	2b00      	cmp	r3, #0
 8018772:	d001      	beq.n	8018778 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8018774:	2301      	movs	r3, #1
 8018776:	e04d      	b.n	8018814 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801877c:	b29b      	uxth	r3, r3
 801877e:	2bff      	cmp	r3, #255	; 0xff
 8018780:	d90e      	bls.n	80187a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	22ff      	movs	r2, #255	; 0xff
 8018786:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801878c:	b2da      	uxtb	r2, r3
 801878e:	8979      	ldrh	r1, [r7, #10]
 8018790:	2300      	movs	r3, #0
 8018792:	9300      	str	r3, [sp, #0]
 8018794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018798:	68f8      	ldr	r0, [r7, #12]
 801879a:	f002 f867 	bl	801a86c <I2C_TransferConfig>
 801879e:	e00f      	b.n	80187c0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187a4:	b29a      	uxth	r2, r3
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80187ae:	b2da      	uxtb	r2, r3
 80187b0:	8979      	ldrh	r1, [r7, #10]
 80187b2:	2300      	movs	r3, #0
 80187b4:	9300      	str	r3, [sp, #0]
 80187b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80187ba:	68f8      	ldr	r0, [r7, #12]
 80187bc:	f002 f856 	bl	801a86c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d19a      	bne.n	8018700 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80187ca:	697a      	ldr	r2, [r7, #20]
 80187cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80187ce:	68f8      	ldr	r0, [r7, #12]
 80187d0:	f001 ffaa 	bl	801a728 <I2C_WaitOnSTOPFlagUntilTimeout>
 80187d4:	4603      	mov	r3, r0
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d001      	beq.n	80187de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80187da:	2301      	movs	r3, #1
 80187dc:	e01a      	b.n	8018814 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	2220      	movs	r2, #32
 80187e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	6859      	ldr	r1, [r3, #4]
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	681a      	ldr	r2, [r3, #0]
 80187f0:	4b0b      	ldr	r3, [pc, #44]	; (8018820 <HAL_I2C_Mem_Read+0x230>)
 80187f2:	400b      	ands	r3, r1
 80187f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	2220      	movs	r2, #32
 80187fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	2200      	movs	r2, #0
 8018802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	2200      	movs	r2, #0
 801880a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801880e:	2300      	movs	r3, #0
 8018810:	e000      	b.n	8018814 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8018812:	2302      	movs	r3, #2
  }
}
 8018814:	4618      	mov	r0, r3
 8018816:	3718      	adds	r7, #24
 8018818:	46bd      	mov	sp, r7
 801881a:	bd80      	pop	{r7, pc}
 801881c:	80002400 	.word	0x80002400
 8018820:	fe00e800 	.word	0xfe00e800

08018824 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b088      	sub	sp, #32
 8018828:	af02      	add	r7, sp, #8
 801882a:	60f8      	str	r0, [r7, #12]
 801882c:	4608      	mov	r0, r1
 801882e:	4611      	mov	r1, r2
 8018830:	461a      	mov	r2, r3
 8018832:	4603      	mov	r3, r0
 8018834:	817b      	strh	r3, [r7, #10]
 8018836:	460b      	mov	r3, r1
 8018838:	813b      	strh	r3, [r7, #8]
 801883a:	4613      	mov	r3, r2
 801883c:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018844:	b2db      	uxtb	r3, r3
 8018846:	2b20      	cmp	r3, #32
 8018848:	d176      	bne.n	8018938 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 801884a:	6a3b      	ldr	r3, [r7, #32]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d002      	beq.n	8018856 <HAL_I2C_Mem_Read_IT+0x32>
 8018850:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018852:	2b00      	cmp	r3, #0
 8018854:	d105      	bne.n	8018862 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	f44f 7200 	mov.w	r2, #512	; 0x200
 801885c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801885e:	2301      	movs	r3, #1
 8018860:	e06b      	b.n	801893a <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	699b      	ldr	r3, [r3, #24]
 8018868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801886c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018870:	d101      	bne.n	8018876 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8018872:	2302      	movs	r3, #2
 8018874:	e061      	b.n	801893a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801887c:	2b01      	cmp	r3, #1
 801887e:	d101      	bne.n	8018884 <HAL_I2C_Mem_Read_IT+0x60>
 8018880:	2302      	movs	r3, #2
 8018882:	e05a      	b.n	801893a <HAL_I2C_Mem_Read_IT+0x116>
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	2201      	movs	r2, #1
 8018888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801888c:	f7fb ff8c 	bl	80147a8 <HAL_GetTick>
 8018890:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	2222      	movs	r2, #34	; 0x22
 8018896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	2240      	movs	r2, #64	; 0x40
 801889e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	2200      	movs	r2, #0
 80188a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	6a3a      	ldr	r2, [r7, #32]
 80188ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80188b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	4a23      	ldr	r2, [pc, #140]	; (8018944 <HAL_I2C_Mem_Read_IT+0x120>)
 80188b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	4a22      	ldr	r2, [pc, #136]	; (8018948 <HAL_I2C_Mem_Read_IT+0x124>)
 80188be:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188c4:	b29b      	uxth	r3, r3
 80188c6:	2bff      	cmp	r3, #255	; 0xff
 80188c8:	d906      	bls.n	80188d8 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	22ff      	movs	r2, #255	; 0xff
 80188ce:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80188d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80188d4:	617b      	str	r3, [r7, #20]
 80188d6:	e007      	b.n	80188e8 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188dc:	b29a      	uxth	r2, r3
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80188e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80188e6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80188e8:	88f8      	ldrh	r0, [r7, #6]
 80188ea:	893a      	ldrh	r2, [r7, #8]
 80188ec:	8979      	ldrh	r1, [r7, #10]
 80188ee:	693b      	ldr	r3, [r7, #16]
 80188f0:	9301      	str	r3, [sp, #4]
 80188f2:	2319      	movs	r3, #25
 80188f4:	9300      	str	r3, [sp, #0]
 80188f6:	4603      	mov	r3, r0
 80188f8:	68f8      	ldr	r0, [r7, #12]
 80188fa:	f000 ff4d 	bl	8019798 <I2C_RequestMemoryRead>
 80188fe:	4603      	mov	r3, r0
 8018900:	2b00      	cmp	r3, #0
 8018902:	d005      	beq.n	8018910 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	2200      	movs	r2, #0
 8018908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801890c:	2301      	movs	r3, #1
 801890e:	e014      	b.n	801893a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018914:	b2da      	uxtb	r2, r3
 8018916:	8979      	ldrh	r1, [r7, #10]
 8018918:	4b0c      	ldr	r3, [pc, #48]	; (801894c <HAL_I2C_Mem_Read_IT+0x128>)
 801891a:	9300      	str	r3, [sp, #0]
 801891c:	697b      	ldr	r3, [r7, #20]
 801891e:	68f8      	ldr	r0, [r7, #12]
 8018920:	f001 ffa4 	bl	801a86c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	2200      	movs	r2, #0
 8018928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 801892c:	2102      	movs	r1, #2
 801892e:	68f8      	ldr	r0, [r7, #12]
 8018930:	f001 ffca 	bl	801a8c8 <I2C_Enable_IRQ>

    return HAL_OK;
 8018934:	2300      	movs	r3, #0
 8018936:	e000      	b.n	801893a <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8018938:	2302      	movs	r3, #2
  }
}
 801893a:	4618      	mov	r0, r3
 801893c:	3718      	adds	r7, #24
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}
 8018942:	bf00      	nop
 8018944:	ffff0000 	.word	0xffff0000
 8018948:	08018cf3 	.word	0x08018cf3
 801894c:	80002400 	.word	0x80002400

08018950 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b08a      	sub	sp, #40	; 0x28
 8018954:	af02      	add	r7, sp, #8
 8018956:	60f8      	str	r0, [r7, #12]
 8018958:	4608      	mov	r0, r1
 801895a:	4611      	mov	r1, r2
 801895c:	461a      	mov	r2, r3
 801895e:	4603      	mov	r3, r0
 8018960:	817b      	strh	r3, [r7, #10]
 8018962:	460b      	mov	r3, r1
 8018964:	813b      	strh	r3, [r7, #8]
 8018966:	4613      	mov	r3, r2
 8018968:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018970:	b2db      	uxtb	r3, r3
 8018972:	2b20      	cmp	r3, #32
 8018974:	f040 80d5 	bne.w	8018b22 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8018978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801897a:	2b00      	cmp	r3, #0
 801897c:	d002      	beq.n	8018984 <HAL_I2C_Mem_Read_DMA+0x34>
 801897e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018980:	2b00      	cmp	r3, #0
 8018982:	d105      	bne.n	8018990 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	f44f 7200 	mov.w	r2, #512	; 0x200
 801898a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801898c:	2301      	movs	r3, #1
 801898e:	e0c9      	b.n	8018b24 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	699b      	ldr	r3, [r3, #24]
 8018996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801899a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801899e:	d101      	bne.n	80189a4 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80189a0:	2302      	movs	r3, #2
 80189a2:	e0bf      	b.n	8018b24 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80189aa:	2b01      	cmp	r3, #1
 80189ac:	d101      	bne.n	80189b2 <HAL_I2C_Mem_Read_DMA+0x62>
 80189ae:	2302      	movs	r3, #2
 80189b0:	e0b8      	b.n	8018b24 <HAL_I2C_Mem_Read_DMA+0x1d4>
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	2201      	movs	r2, #1
 80189b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80189ba:	f7fb fef5 	bl	80147a8 <HAL_GetTick>
 80189be:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	2222      	movs	r2, #34	; 0x22
 80189c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	2240      	movs	r2, #64	; 0x40
 80189cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	2200      	movs	r2, #0
 80189d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80189e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	4a51      	ldr	r2, [pc, #324]	; (8018b2c <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80189e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	4a51      	ldr	r2, [pc, #324]	; (8018b30 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80189ec:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	2bff      	cmp	r3, #255	; 0xff
 80189f6:	d906      	bls.n	8018a06 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	22ff      	movs	r2, #255	; 0xff
 80189fc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80189fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018a02:	61fb      	str	r3, [r7, #28]
 8018a04:	e007      	b.n	8018a16 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a0a:	b29a      	uxth	r2, r3
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8018a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018a14:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8018a16:	88f8      	ldrh	r0, [r7, #6]
 8018a18:	893a      	ldrh	r2, [r7, #8]
 8018a1a:	8979      	ldrh	r1, [r7, #10]
 8018a1c:	69bb      	ldr	r3, [r7, #24]
 8018a1e:	9301      	str	r3, [sp, #4]
 8018a20:	2319      	movs	r3, #25
 8018a22:	9300      	str	r3, [sp, #0]
 8018a24:	4603      	mov	r3, r0
 8018a26:	68f8      	ldr	r0, [r7, #12]
 8018a28:	f000 feb6 	bl	8019798 <I2C_RequestMemoryRead>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d005      	beq.n	8018a3e <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	2200      	movs	r2, #0
 8018a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	e072      	b.n	8018b24 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d020      	beq.n	8018a88 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a4a:	4a3a      	ldr	r2, [pc, #232]	; (8018b34 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8018a4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a52:	4a39      	ldr	r2, [pc, #228]	; (8018b38 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8018a54:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a62:	2200      	movs	r2, #0
 8018a64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	3324      	adds	r3, #36	; 0x24
 8018a70:	4619      	mov	r1, r3
 8018a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a78:	f7fd fa5a 	bl	8015f30 <HAL_DMA_Start_IT>
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8018a80:	7dfb      	ldrb	r3, [r7, #23]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d139      	bne.n	8018afa <HAL_I2C_Mem_Read_DMA+0x1aa>
 8018a86:	e013      	b.n	8018ab0 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	2220      	movs	r2, #32
 8018a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	2200      	movs	r2, #0
 8018a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018aac:	2301      	movs	r3, #1
 8018aae:	e039      	b.n	8018b24 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ab4:	b2da      	uxtb	r2, r3
 8018ab6:	8979      	ldrh	r1, [r7, #10]
 8018ab8:	4b20      	ldr	r3, [pc, #128]	; (8018b3c <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8018aba:	9300      	str	r3, [sp, #0]
 8018abc:	69fb      	ldr	r3, [r7, #28]
 8018abe:	68f8      	ldr	r0, [r7, #12]
 8018ac0:	f001 fed4 	bl	801a86c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ac8:	b29a      	uxth	r2, r3
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ace:	1ad3      	subs	r3, r2, r3
 8018ad0:	b29a      	uxth	r2, r3
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	2200      	movs	r2, #0
 8018ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8018ade:	2110      	movs	r1, #16
 8018ae0:	68f8      	ldr	r0, [r7, #12]
 8018ae2:	f001 fef1 	bl	801a8c8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	681a      	ldr	r2, [r3, #0]
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018af4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8018af6:	2300      	movs	r3, #0
 8018af8:	e014      	b.n	8018b24 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	2220      	movs	r2, #32
 8018afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	2200      	movs	r2, #0
 8018b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b0e:	f043 0210 	orr.w	r2, r3, #16
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018b1e:	2301      	movs	r3, #1
 8018b20:	e000      	b.n	8018b24 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8018b22:	2302      	movs	r3, #2
  }
}
 8018b24:	4618      	mov	r0, r3
 8018b26:	3720      	adds	r7, #32
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}
 8018b2c:	ffff0000 	.word	0xffff0000
 8018b30:	0801914b 	.word	0x0801914b
 8018b34:	0801a2e7 	.word	0x0801a2e7
 8018b38:	0801a37d 	.word	0x0801a37d
 8018b3c:	80002400 	.word	0x80002400

08018b40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b084      	sub	sp, #16
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	699b      	ldr	r3, [r3, #24]
 8018b4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d005      	beq.n	8018b6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b64:	68ba      	ldr	r2, [r7, #8]
 8018b66:	68f9      	ldr	r1, [r7, #12]
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	4798      	blx	r3
  }
}
 8018b6c:	bf00      	nop
 8018b6e:	3710      	adds	r7, #16
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}

08018b74 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b086      	sub	sp, #24
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	699b      	ldr	r3, [r3, #24]
 8018b82:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	0a1b      	lsrs	r3, r3, #8
 8018b90:	f003 0301 	and.w	r3, r3, #1
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d010      	beq.n	8018bba <HAL_I2C_ER_IRQHandler+0x46>
 8018b98:	693b      	ldr	r3, [r7, #16]
 8018b9a:	09db      	lsrs	r3, r3, #7
 8018b9c:	f003 0301 	and.w	r3, r3, #1
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d00a      	beq.n	8018bba <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ba8:	f043 0201 	orr.w	r2, r3, #1
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018bb8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8018bba:	697b      	ldr	r3, [r7, #20]
 8018bbc:	0a9b      	lsrs	r3, r3, #10
 8018bbe:	f003 0301 	and.w	r3, r3, #1
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d010      	beq.n	8018be8 <HAL_I2C_ER_IRQHandler+0x74>
 8018bc6:	693b      	ldr	r3, [r7, #16]
 8018bc8:	09db      	lsrs	r3, r3, #7
 8018bca:	f003 0301 	and.w	r3, r3, #1
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d00a      	beq.n	8018be8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bd6:	f043 0208 	orr.w	r2, r3, #8
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018be6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8018be8:	697b      	ldr	r3, [r7, #20]
 8018bea:	0a5b      	lsrs	r3, r3, #9
 8018bec:	f003 0301 	and.w	r3, r3, #1
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d010      	beq.n	8018c16 <HAL_I2C_ER_IRQHandler+0xa2>
 8018bf4:	693b      	ldr	r3, [r7, #16]
 8018bf6:	09db      	lsrs	r3, r3, #7
 8018bf8:	f003 0301 	and.w	r3, r3, #1
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d00a      	beq.n	8018c16 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c04:	f043 0202 	orr.w	r2, r3, #2
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018c14:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c1a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	f003 030b 	and.w	r3, r3, #11
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d003      	beq.n	8018c2e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8018c26:	68f9      	ldr	r1, [r7, #12]
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f001 fa41 	bl	801a0b0 <I2C_ITError>
  }
}
 8018c2e:	bf00      	nop
 8018c30:	3718      	adds	r7, #24
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bd80      	pop	{r7, pc}

08018c36 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018c36:	b480      	push	{r7}
 8018c38:	b083      	sub	sp, #12
 8018c3a:	af00      	add	r7, sp, #0
 8018c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8018c3e:	bf00      	nop
 8018c40:	370c      	adds	r7, #12
 8018c42:	46bd      	mov	sp, r7
 8018c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c48:	4770      	bx	lr

08018c4a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018c4a:	b480      	push	{r7}
 8018c4c:	b083      	sub	sp, #12
 8018c4e:	af00      	add	r7, sp, #0
 8018c50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8018c52:	bf00      	nop
 8018c54:	370c      	adds	r7, #12
 8018c56:	46bd      	mov	sp, r7
 8018c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5c:	4770      	bx	lr

08018c5e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018c5e:	b480      	push	{r7}
 8018c60:	b083      	sub	sp, #12
 8018c62:	af00      	add	r7, sp, #0
 8018c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8018c66:	bf00      	nop
 8018c68:	370c      	adds	r7, #12
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c70:	4770      	bx	lr

08018c72 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018c72:	b480      	push	{r7}
 8018c74:	b083      	sub	sp, #12
 8018c76:	af00      	add	r7, sp, #0
 8018c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8018c7a:	bf00      	nop
 8018c7c:	370c      	adds	r7, #12
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c84:	4770      	bx	lr

08018c86 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8018c86:	b480      	push	{r7}
 8018c88:	b083      	sub	sp, #12
 8018c8a:	af00      	add	r7, sp, #0
 8018c8c:	6078      	str	r0, [r7, #4]
 8018c8e:	460b      	mov	r3, r1
 8018c90:	70fb      	strb	r3, [r7, #3]
 8018c92:	4613      	mov	r3, r2
 8018c94:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8018c96:	bf00      	nop
 8018c98:	370c      	adds	r7, #12
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca0:	4770      	bx	lr

08018ca2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018ca2:	b480      	push	{r7}
 8018ca4:	b083      	sub	sp, #12
 8018ca6:	af00      	add	r7, sp, #0
 8018ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8018caa:	bf00      	nop
 8018cac:	370c      	adds	r7, #12
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb4:	4770      	bx	lr

08018cb6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018cb6:	b480      	push	{r7}
 8018cb8:	b083      	sub	sp, #12
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8018cbe:	bf00      	nop
 8018cc0:	370c      	adds	r7, #12
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc8:	4770      	bx	lr

08018cca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8018cca:	b480      	push	{r7}
 8018ccc:	b083      	sub	sp, #12
 8018cce:	af00      	add	r7, sp, #0
 8018cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8018cd2:	bf00      	nop
 8018cd4:	370c      	adds	r7, #12
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cdc:	4770      	bx	lr

08018cde <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018cde:	b480      	push	{r7}
 8018ce0:	b083      	sub	sp, #12
 8018ce2:	af00      	add	r7, sp, #0
 8018ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8018ce6:	bf00      	nop
 8018ce8:	370c      	adds	r7, #12
 8018cea:	46bd      	mov	sp, r7
 8018cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf0:	4770      	bx	lr

08018cf2 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8018cf2:	b580      	push	{r7, lr}
 8018cf4:	b088      	sub	sp, #32
 8018cf6:	af02      	add	r7, sp, #8
 8018cf8:	60f8      	str	r0, [r7, #12]
 8018cfa:	60b9      	str	r1, [r7, #8]
 8018cfc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8018cfe:	68bb      	ldr	r3, [r7, #8]
 8018d00:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018d08:	2b01      	cmp	r3, #1
 8018d0a:	d101      	bne.n	8018d10 <I2C_Master_ISR_IT+0x1e>
 8018d0c:	2302      	movs	r3, #2
 8018d0e:	e115      	b.n	8018f3c <I2C_Master_ISR_IT+0x24a>
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	2201      	movs	r2, #1
 8018d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	091b      	lsrs	r3, r3, #4
 8018d1c:	f003 0301 	and.w	r3, r3, #1
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d013      	beq.n	8018d4c <I2C_Master_ISR_IT+0x5a>
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	091b      	lsrs	r3, r3, #4
 8018d28:	f003 0301 	and.w	r3, r3, #1
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d00d      	beq.n	8018d4c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	2210      	movs	r2, #16
 8018d36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d3c:	f043 0204 	orr.w	r2, r3, #4
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018d44:	68f8      	ldr	r0, [r7, #12]
 8018d46:	f001 faaa 	bl	801a29e <I2C_Flush_TXDR>
 8018d4a:	e0e2      	b.n	8018f12 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8018d4c:	697b      	ldr	r3, [r7, #20]
 8018d4e:	089b      	lsrs	r3, r3, #2
 8018d50:	f003 0301 	and.w	r3, r3, #1
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d023      	beq.n	8018da0 <I2C_Master_ISR_IT+0xae>
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	089b      	lsrs	r3, r3, #2
 8018d5c:	f003 0301 	and.w	r3, r3, #1
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d01d      	beq.n	8018da0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8018d64:	697b      	ldr	r3, [r7, #20]
 8018d66:	f023 0304 	bic.w	r3, r3, #4
 8018d6a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d76:	b2d2      	uxtb	r2, r2
 8018d78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d7e:	1c5a      	adds	r2, r3, #1
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d88:	3b01      	subs	r3, #1
 8018d8a:	b29a      	uxth	r2, r3
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d94:	b29b      	uxth	r3, r3
 8018d96:	3b01      	subs	r3, #1
 8018d98:	b29a      	uxth	r2, r3
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8018d9e:	e0b8      	b.n	8018f12 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	085b      	lsrs	r3, r3, #1
 8018da4:	f003 0301 	and.w	r3, r3, #1
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d01e      	beq.n	8018dea <I2C_Master_ISR_IT+0xf8>
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	085b      	lsrs	r3, r3, #1
 8018db0:	f003 0301 	and.w	r3, r3, #1
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d018      	beq.n	8018dea <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dbc:	781a      	ldrb	r2, [r3, #0]
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc8:	1c5a      	adds	r2, r3, #1
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018dd2:	3b01      	subs	r3, #1
 8018dd4:	b29a      	uxth	r2, r3
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dde:	b29b      	uxth	r3, r3
 8018de0:	3b01      	subs	r3, #1
 8018de2:	b29a      	uxth	r2, r3
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8018de8:	e093      	b.n	8018f12 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8018dea:	697b      	ldr	r3, [r7, #20]
 8018dec:	09db      	lsrs	r3, r3, #7
 8018dee:	f003 0301 	and.w	r3, r3, #1
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d05e      	beq.n	8018eb4 <I2C_Master_ISR_IT+0x1c2>
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	099b      	lsrs	r3, r3, #6
 8018dfa:	f003 0301 	and.w	r3, r3, #1
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d058      	beq.n	8018eb4 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e06:	b29b      	uxth	r3, r3
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d041      	beq.n	8018e90 <I2C_Master_ISR_IT+0x19e>
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d13d      	bne.n	8018e90 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	685b      	ldr	r3, [r3, #4]
 8018e1a:	b29b      	uxth	r3, r3
 8018e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018e20:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e26:	b29b      	uxth	r3, r3
 8018e28:	2bff      	cmp	r3, #255	; 0xff
 8018e2a:	d90e      	bls.n	8018e4a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	22ff      	movs	r2, #255	; 0xff
 8018e30:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e36:	b2da      	uxtb	r2, r3
 8018e38:	8a79      	ldrh	r1, [r7, #18]
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	9300      	str	r3, [sp, #0]
 8018e3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018e42:	68f8      	ldr	r0, [r7, #12]
 8018e44:	f001 fd12 	bl	801a86c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018e48:	e033      	b.n	8018eb2 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e4e:	b29a      	uxth	r2, r3
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018e5c:	d00c      	beq.n	8018e78 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e62:	b2da      	uxtb	r2, r3
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8018e68:	8a79      	ldrh	r1, [r7, #18]
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	9300      	str	r3, [sp, #0]
 8018e6e:	4603      	mov	r3, r0
 8018e70:	68f8      	ldr	r0, [r7, #12]
 8018e72:	f001 fcfb 	bl	801a86c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018e76:	e01c      	b.n	8018eb2 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e7c:	b2da      	uxtb	r2, r3
 8018e7e:	8a79      	ldrh	r1, [r7, #18]
 8018e80:	2300      	movs	r3, #0
 8018e82:	9300      	str	r3, [sp, #0]
 8018e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018e88:	68f8      	ldr	r0, [r7, #12]
 8018e8a:	f001 fcef 	bl	801a86c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018e8e:	e010      	b.n	8018eb2 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	685b      	ldr	r3, [r3, #4]
 8018e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8018e9e:	d003      	beq.n	8018ea8 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8018ea0:	68f8      	ldr	r0, [r7, #12]
 8018ea2:	f000 fd51 	bl	8019948 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018ea6:	e034      	b.n	8018f12 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8018ea8:	2140      	movs	r1, #64	; 0x40
 8018eaa:	68f8      	ldr	r0, [r7, #12]
 8018eac:	f001 f900 	bl	801a0b0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018eb0:	e02f      	b.n	8018f12 <I2C_Master_ISR_IT+0x220>
 8018eb2:	e02e      	b.n	8018f12 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8018eb4:	697b      	ldr	r3, [r7, #20]
 8018eb6:	099b      	lsrs	r3, r3, #6
 8018eb8:	f003 0301 	and.w	r3, r3, #1
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d028      	beq.n	8018f12 <I2C_Master_ISR_IT+0x220>
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	099b      	lsrs	r3, r3, #6
 8018ec4:	f003 0301 	and.w	r3, r3, #1
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d022      	beq.n	8018f12 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ed0:	b29b      	uxth	r3, r3
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d119      	bne.n	8018f0a <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	685b      	ldr	r3, [r3, #4]
 8018edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8018ee4:	d015      	beq.n	8018f12 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018eea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018eee:	d108      	bne.n	8018f02 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	685a      	ldr	r2, [r3, #4]
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8018efe:	605a      	str	r2, [r3, #4]
 8018f00:	e007      	b.n	8018f12 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8018f02:	68f8      	ldr	r0, [r7, #12]
 8018f04:	f000 fd20 	bl	8019948 <I2C_ITMasterSeqCplt>
 8018f08:	e003      	b.n	8018f12 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8018f0a:	2140      	movs	r1, #64	; 0x40
 8018f0c:	68f8      	ldr	r0, [r7, #12]
 8018f0e:	f001 f8cf 	bl	801a0b0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8018f12:	697b      	ldr	r3, [r7, #20]
 8018f14:	095b      	lsrs	r3, r3, #5
 8018f16:	f003 0301 	and.w	r3, r3, #1
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d009      	beq.n	8018f32 <I2C_Master_ISR_IT+0x240>
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	095b      	lsrs	r3, r3, #5
 8018f22:	f003 0301 	and.w	r3, r3, #1
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d003      	beq.n	8018f32 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8018f2a:	6979      	ldr	r1, [r7, #20]
 8018f2c:	68f8      	ldr	r0, [r7, #12]
 8018f2e:	f000 fda7 	bl	8019a80 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	2200      	movs	r2, #0
 8018f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8018f3a:	2300      	movs	r3, #0
}
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	3718      	adds	r7, #24
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}

08018f44 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b086      	sub	sp, #24
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	60f8      	str	r0, [r7, #12]
 8018f4c:	60b9      	str	r1, [r7, #8]
 8018f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f54:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8018f56:	68bb      	ldr	r3, [r7, #8]
 8018f58:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018f60:	2b01      	cmp	r3, #1
 8018f62:	d101      	bne.n	8018f68 <I2C_Slave_ISR_IT+0x24>
 8018f64:	2302      	movs	r3, #2
 8018f66:	e0ec      	b.n	8019142 <I2C_Slave_ISR_IT+0x1fe>
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	2201      	movs	r2, #1
 8018f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8018f70:	693b      	ldr	r3, [r7, #16]
 8018f72:	095b      	lsrs	r3, r3, #5
 8018f74:	f003 0301 	and.w	r3, r3, #1
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d009      	beq.n	8018f90 <I2C_Slave_ISR_IT+0x4c>
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	095b      	lsrs	r3, r3, #5
 8018f80:	f003 0301 	and.w	r3, r3, #1
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d003      	beq.n	8018f90 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8018f88:	6939      	ldr	r1, [r7, #16]
 8018f8a:	68f8      	ldr	r0, [r7, #12]
 8018f8c:	f000 fe42 	bl	8019c14 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8018f90:	693b      	ldr	r3, [r7, #16]
 8018f92:	091b      	lsrs	r3, r3, #4
 8018f94:	f003 0301 	and.w	r3, r3, #1
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d04d      	beq.n	8019038 <I2C_Slave_ISR_IT+0xf4>
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	091b      	lsrs	r3, r3, #4
 8018fa0:	f003 0301 	and.w	r3, r3, #1
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d047      	beq.n	8019038 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018fac:	b29b      	uxth	r3, r3
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d128      	bne.n	8019004 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018fb8:	b2db      	uxtb	r3, r3
 8018fba:	2b28      	cmp	r3, #40	; 0x28
 8018fbc:	d108      	bne.n	8018fd0 <I2C_Slave_ISR_IT+0x8c>
 8018fbe:	697b      	ldr	r3, [r7, #20]
 8018fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8018fc4:	d104      	bne.n	8018fd0 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8018fc6:	6939      	ldr	r1, [r7, #16]
 8018fc8:	68f8      	ldr	r0, [r7, #12]
 8018fca:	f001 f81b 	bl	801a004 <I2C_ITListenCplt>
 8018fce:	e032      	b.n	8019036 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018fd6:	b2db      	uxtb	r3, r3
 8018fd8:	2b29      	cmp	r3, #41	; 0x29
 8018fda:	d10e      	bne.n	8018ffa <I2C_Slave_ISR_IT+0xb6>
 8018fdc:	697b      	ldr	r3, [r7, #20]
 8018fde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018fe2:	d00a      	beq.n	8018ffa <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	2210      	movs	r2, #16
 8018fea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8018fec:	68f8      	ldr	r0, [r7, #12]
 8018fee:	f001 f956 	bl	801a29e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8018ff2:	68f8      	ldr	r0, [r7, #12]
 8018ff4:	f000 fce5 	bl	80199c2 <I2C_ITSlaveSeqCplt>
 8018ff8:	e01d      	b.n	8019036 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	2210      	movs	r2, #16
 8019000:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8019002:	e096      	b.n	8019132 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	2210      	movs	r2, #16
 801900a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019010:	f043 0204 	orr.w	r2, r3, #4
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8019018:	697b      	ldr	r3, [r7, #20]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d004      	beq.n	8019028 <I2C_Slave_ISR_IT+0xe4>
 801901e:	697b      	ldr	r3, [r7, #20]
 8019020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019024:	f040 8085 	bne.w	8019132 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801902c:	4619      	mov	r1, r3
 801902e:	68f8      	ldr	r0, [r7, #12]
 8019030:	f001 f83e 	bl	801a0b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8019034:	e07d      	b.n	8019132 <I2C_Slave_ISR_IT+0x1ee>
 8019036:	e07c      	b.n	8019132 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8019038:	693b      	ldr	r3, [r7, #16]
 801903a:	089b      	lsrs	r3, r3, #2
 801903c:	f003 0301 	and.w	r3, r3, #1
 8019040:	2b00      	cmp	r3, #0
 8019042:	d030      	beq.n	80190a6 <I2C_Slave_ISR_IT+0x162>
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	089b      	lsrs	r3, r3, #2
 8019048:	f003 0301 	and.w	r3, r3, #1
 801904c:	2b00      	cmp	r3, #0
 801904e:	d02a      	beq.n	80190a6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019054:	b29b      	uxth	r3, r3
 8019056:	2b00      	cmp	r3, #0
 8019058:	d018      	beq.n	801908c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019064:	b2d2      	uxtb	r2, r2
 8019066:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801906c:	1c5a      	adds	r2, r3, #1
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019076:	3b01      	subs	r3, #1
 8019078:	b29a      	uxth	r2, r3
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019082:	b29b      	uxth	r3, r3
 8019084:	3b01      	subs	r3, #1
 8019086:	b29a      	uxth	r2, r3
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019090:	b29b      	uxth	r3, r3
 8019092:	2b00      	cmp	r3, #0
 8019094:	d14f      	bne.n	8019136 <I2C_Slave_ISR_IT+0x1f2>
 8019096:	697b      	ldr	r3, [r7, #20]
 8019098:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801909c:	d04b      	beq.n	8019136 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801909e:	68f8      	ldr	r0, [r7, #12]
 80190a0:	f000 fc8f 	bl	80199c2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80190a4:	e047      	b.n	8019136 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80190a6:	693b      	ldr	r3, [r7, #16]
 80190a8:	08db      	lsrs	r3, r3, #3
 80190aa:	f003 0301 	and.w	r3, r3, #1
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d00a      	beq.n	80190c8 <I2C_Slave_ISR_IT+0x184>
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	08db      	lsrs	r3, r3, #3
 80190b6:	f003 0301 	and.w	r3, r3, #1
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d004      	beq.n	80190c8 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80190be:	6939      	ldr	r1, [r7, #16]
 80190c0:	68f8      	ldr	r0, [r7, #12]
 80190c2:	f000 fbbd 	bl	8019840 <I2C_ITAddrCplt>
 80190c6:	e037      	b.n	8019138 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80190c8:	693b      	ldr	r3, [r7, #16]
 80190ca:	085b      	lsrs	r3, r3, #1
 80190cc:	f003 0301 	and.w	r3, r3, #1
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d031      	beq.n	8019138 <I2C_Slave_ISR_IT+0x1f4>
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	085b      	lsrs	r3, r3, #1
 80190d8:	f003 0301 	and.w	r3, r3, #1
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d02b      	beq.n	8019138 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d018      	beq.n	801911c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190ee:	781a      	ldrb	r2, [r3, #0]
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190fa:	1c5a      	adds	r2, r3, #1
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019104:	b29b      	uxth	r3, r3
 8019106:	3b01      	subs	r3, #1
 8019108:	b29a      	uxth	r2, r3
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019112:	3b01      	subs	r3, #1
 8019114:	b29a      	uxth	r2, r3
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	851a      	strh	r2, [r3, #40]	; 0x28
 801911a:	e00d      	b.n	8019138 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801911c:	697b      	ldr	r3, [r7, #20]
 801911e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019122:	d002      	beq.n	801912a <I2C_Slave_ISR_IT+0x1e6>
 8019124:	697b      	ldr	r3, [r7, #20]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d106      	bne.n	8019138 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801912a:	68f8      	ldr	r0, [r7, #12]
 801912c:	f000 fc49 	bl	80199c2 <I2C_ITSlaveSeqCplt>
 8019130:	e002      	b.n	8019138 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8019132:	bf00      	nop
 8019134:	e000      	b.n	8019138 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8019136:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	2200      	movs	r2, #0
 801913c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019140:	2300      	movs	r3, #0
}
 8019142:	4618      	mov	r0, r3
 8019144:	3718      	adds	r7, #24
 8019146:	46bd      	mov	sp, r7
 8019148:	bd80      	pop	{r7, pc}

0801914a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 801914a:	b580      	push	{r7, lr}
 801914c:	b088      	sub	sp, #32
 801914e:	af02      	add	r7, sp, #8
 8019150:	60f8      	str	r0, [r7, #12]
 8019152:	60b9      	str	r1, [r7, #8]
 8019154:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801915c:	2b01      	cmp	r3, #1
 801915e:	d101      	bne.n	8019164 <I2C_Master_ISR_DMA+0x1a>
 8019160:	2302      	movs	r3, #2
 8019162:	e0e1      	b.n	8019328 <I2C_Master_ISR_DMA+0x1de>
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	2201      	movs	r2, #1
 8019168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801916c:	68bb      	ldr	r3, [r7, #8]
 801916e:	091b      	lsrs	r3, r3, #4
 8019170:	f003 0301 	and.w	r3, r3, #1
 8019174:	2b00      	cmp	r3, #0
 8019176:	d017      	beq.n	80191a8 <I2C_Master_ISR_DMA+0x5e>
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	091b      	lsrs	r3, r3, #4
 801917c:	f003 0301 	and.w	r3, r3, #1
 8019180:	2b00      	cmp	r3, #0
 8019182:	d011      	beq.n	80191a8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	2210      	movs	r2, #16
 801918a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019190:	f043 0204 	orr.w	r2, r3, #4
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8019198:	2120      	movs	r1, #32
 801919a:	68f8      	ldr	r0, [r7, #12]
 801919c:	f001 fb94 	bl	801a8c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80191a0:	68f8      	ldr	r0, [r7, #12]
 80191a2:	f001 f87c 	bl	801a29e <I2C_Flush_TXDR>
 80191a6:	e0ba      	b.n	801931e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80191a8:	68bb      	ldr	r3, [r7, #8]
 80191aa:	09db      	lsrs	r3, r3, #7
 80191ac:	f003 0301 	and.w	r3, r3, #1
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d072      	beq.n	801929a <I2C_Master_ISR_DMA+0x150>
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	099b      	lsrs	r3, r3, #6
 80191b8:	f003 0301 	and.w	r3, r3, #1
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d06c      	beq.n	801929a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	681a      	ldr	r2, [r3, #0]
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80191ce:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191d4:	b29b      	uxth	r3, r3
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d04e      	beq.n	8019278 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	685b      	ldr	r3, [r3, #4]
 80191e0:	b29b      	uxth	r3, r3
 80191e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80191e6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	2bff      	cmp	r3, #255	; 0xff
 80191f0:	d906      	bls.n	8019200 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	22ff      	movs	r2, #255	; 0xff
 80191f6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80191f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80191fc:	617b      	str	r3, [r7, #20]
 80191fe:	e010      	b.n	8019222 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019204:	b29a      	uxth	r2, r3
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801920e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019212:	d003      	beq.n	801921c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019218:	617b      	str	r3, [r7, #20]
 801921a:	e002      	b.n	8019222 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801921c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019220:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019226:	b2da      	uxtb	r2, r3
 8019228:	8a79      	ldrh	r1, [r7, #18]
 801922a:	2300      	movs	r3, #0
 801922c:	9300      	str	r3, [sp, #0]
 801922e:	697b      	ldr	r3, [r7, #20]
 8019230:	68f8      	ldr	r0, [r7, #12]
 8019232:	f001 fb1b 	bl	801a86c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801923a:	b29a      	uxth	r2, r3
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019240:	1ad3      	subs	r3, r2, r3
 8019242:	b29a      	uxth	r2, r3
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801924e:	b2db      	uxtb	r3, r3
 8019250:	2b22      	cmp	r3, #34	; 0x22
 8019252:	d108      	bne.n	8019266 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	681a      	ldr	r2, [r3, #0]
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019262:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8019264:	e05b      	b.n	801931e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	681a      	ldr	r2, [r3, #0]
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019274:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8019276:	e052      	b.n	801931e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	685b      	ldr	r3, [r3, #4]
 801927e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019286:	d003      	beq.n	8019290 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8019288:	68f8      	ldr	r0, [r7, #12]
 801928a:	f000 fb5d 	bl	8019948 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 801928e:	e046      	b.n	801931e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8019290:	2140      	movs	r1, #64	; 0x40
 8019292:	68f8      	ldr	r0, [r7, #12]
 8019294:	f000 ff0c 	bl	801a0b0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8019298:	e041      	b.n	801931e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	099b      	lsrs	r3, r3, #6
 801929e:	f003 0301 	and.w	r3, r3, #1
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d029      	beq.n	80192fa <I2C_Master_ISR_DMA+0x1b0>
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	099b      	lsrs	r3, r3, #6
 80192aa:	f003 0301 	and.w	r3, r3, #1
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d023      	beq.n	80192fa <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192b6:	b29b      	uxth	r3, r3
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d119      	bne.n	80192f0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	685b      	ldr	r3, [r3, #4]
 80192c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80192c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80192ca:	d027      	beq.n	801931c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80192d4:	d108      	bne.n	80192e8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	685a      	ldr	r2, [r3, #4]
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80192e4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80192e6:	e019      	b.n	801931c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80192e8:	68f8      	ldr	r0, [r7, #12]
 80192ea:	f000 fb2d 	bl	8019948 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80192ee:	e015      	b.n	801931c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80192f0:	2140      	movs	r1, #64	; 0x40
 80192f2:	68f8      	ldr	r0, [r7, #12]
 80192f4:	f000 fedc 	bl	801a0b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80192f8:	e010      	b.n	801931c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80192fa:	68bb      	ldr	r3, [r7, #8]
 80192fc:	095b      	lsrs	r3, r3, #5
 80192fe:	f003 0301 	and.w	r3, r3, #1
 8019302:	2b00      	cmp	r3, #0
 8019304:	d00b      	beq.n	801931e <I2C_Master_ISR_DMA+0x1d4>
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	095b      	lsrs	r3, r3, #5
 801930a:	f003 0301 	and.w	r3, r3, #1
 801930e:	2b00      	cmp	r3, #0
 8019310:	d005      	beq.n	801931e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8019312:	68b9      	ldr	r1, [r7, #8]
 8019314:	68f8      	ldr	r0, [r7, #12]
 8019316:	f000 fbb3 	bl	8019a80 <I2C_ITMasterCplt>
 801931a:	e000      	b.n	801931e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 801931c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	2200      	movs	r2, #0
 8019322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019326:	2300      	movs	r3, #0
}
 8019328:	4618      	mov	r0, r3
 801932a:	3718      	adds	r7, #24
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}

08019330 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b088      	sub	sp, #32
 8019334:	af00      	add	r7, sp, #0
 8019336:	60f8      	str	r0, [r7, #12]
 8019338:	60b9      	str	r1, [r7, #8]
 801933a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019340:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8019342:	2300      	movs	r3, #0
 8019344:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801934c:	2b01      	cmp	r3, #1
 801934e:	d101      	bne.n	8019354 <I2C_Slave_ISR_DMA+0x24>
 8019350:	2302      	movs	r3, #2
 8019352:	e1c8      	b.n	80196e6 <I2C_Slave_ISR_DMA+0x3b6>
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	2201      	movs	r2, #1
 8019358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801935c:	68bb      	ldr	r3, [r7, #8]
 801935e:	095b      	lsrs	r3, r3, #5
 8019360:	f003 0301 	and.w	r3, r3, #1
 8019364:	2b00      	cmp	r3, #0
 8019366:	d009      	beq.n	801937c <I2C_Slave_ISR_DMA+0x4c>
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	095b      	lsrs	r3, r3, #5
 801936c:	f003 0301 	and.w	r3, r3, #1
 8019370:	2b00      	cmp	r3, #0
 8019372:	d003      	beq.n	801937c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8019374:	68b9      	ldr	r1, [r7, #8]
 8019376:	68f8      	ldr	r0, [r7, #12]
 8019378:	f000 fc4c 	bl	8019c14 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	091b      	lsrs	r3, r3, #4
 8019380:	f003 0301 	and.w	r3, r3, #1
 8019384:	2b00      	cmp	r3, #0
 8019386:	f000 8199 	beq.w	80196bc <I2C_Slave_ISR_DMA+0x38c>
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	091b      	lsrs	r3, r3, #4
 801938e:	f003 0301 	and.w	r3, r3, #1
 8019392:	2b00      	cmp	r3, #0
 8019394:	f000 8192 	beq.w	80196bc <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	0b9b      	lsrs	r3, r3, #14
 801939c:	f003 0301 	and.w	r3, r3, #1
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d106      	bne.n	80193b2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	0bdb      	lsrs	r3, r3, #15
 80193a8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	f000 817e 	beq.w	80196ae <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d07c      	beq.n	80194b4 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	0bdb      	lsrs	r3, r3, #15
 80193be:	f003 0301 	and.w	r3, r3, #1
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d076      	beq.n	80194b4 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	4a8d      	ldr	r2, [pc, #564]	; (8019604 <I2C_Slave_ISR_DMA+0x2d4>)
 80193ce:	4293      	cmp	r3, r2
 80193d0:	d059      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	4a8b      	ldr	r2, [pc, #556]	; (8019608 <I2C_Slave_ISR_DMA+0x2d8>)
 80193da:	4293      	cmp	r3, r2
 80193dc:	d053      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	4a89      	ldr	r2, [pc, #548]	; (801960c <I2C_Slave_ISR_DMA+0x2dc>)
 80193e6:	4293      	cmp	r3, r2
 80193e8:	d04d      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	4a87      	ldr	r2, [pc, #540]	; (8019610 <I2C_Slave_ISR_DMA+0x2e0>)
 80193f2:	4293      	cmp	r3, r2
 80193f4:	d047      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	4a85      	ldr	r2, [pc, #532]	; (8019614 <I2C_Slave_ISR_DMA+0x2e4>)
 80193fe:	4293      	cmp	r3, r2
 8019400:	d041      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	4a83      	ldr	r2, [pc, #524]	; (8019618 <I2C_Slave_ISR_DMA+0x2e8>)
 801940a:	4293      	cmp	r3, r2
 801940c:	d03b      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	4a81      	ldr	r2, [pc, #516]	; (801961c <I2C_Slave_ISR_DMA+0x2ec>)
 8019416:	4293      	cmp	r3, r2
 8019418:	d035      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	4a7f      	ldr	r2, [pc, #508]	; (8019620 <I2C_Slave_ISR_DMA+0x2f0>)
 8019422:	4293      	cmp	r3, r2
 8019424:	d02f      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	4a7d      	ldr	r2, [pc, #500]	; (8019624 <I2C_Slave_ISR_DMA+0x2f4>)
 801942e:	4293      	cmp	r3, r2
 8019430:	d029      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	4a7b      	ldr	r2, [pc, #492]	; (8019628 <I2C_Slave_ISR_DMA+0x2f8>)
 801943a:	4293      	cmp	r3, r2
 801943c:	d023      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	4a79      	ldr	r2, [pc, #484]	; (801962c <I2C_Slave_ISR_DMA+0x2fc>)
 8019446:	4293      	cmp	r3, r2
 8019448:	d01d      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	4a77      	ldr	r2, [pc, #476]	; (8019630 <I2C_Slave_ISR_DMA+0x300>)
 8019452:	4293      	cmp	r3, r2
 8019454:	d017      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	4a75      	ldr	r2, [pc, #468]	; (8019634 <I2C_Slave_ISR_DMA+0x304>)
 801945e:	4293      	cmp	r3, r2
 8019460:	d011      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	4a73      	ldr	r2, [pc, #460]	; (8019638 <I2C_Slave_ISR_DMA+0x308>)
 801946a:	4293      	cmp	r3, r2
 801946c:	d00b      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	4a71      	ldr	r2, [pc, #452]	; (801963c <I2C_Slave_ISR_DMA+0x30c>)
 8019476:	4293      	cmp	r3, r2
 8019478:	d005      	beq.n	8019486 <I2C_Slave_ISR_DMA+0x156>
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	4a6f      	ldr	r2, [pc, #444]	; (8019640 <I2C_Slave_ISR_DMA+0x310>)
 8019482:	4293      	cmp	r3, r2
 8019484:	d109      	bne.n	801949a <I2C_Slave_ISR_DMA+0x16a>
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	685b      	ldr	r3, [r3, #4]
 801948e:	2b00      	cmp	r3, #0
 8019490:	bf0c      	ite	eq
 8019492:	2301      	moveq	r3, #1
 8019494:	2300      	movne	r3, #0
 8019496:	b2db      	uxtb	r3, r3
 8019498:	e008      	b.n	80194ac <I2C_Slave_ISR_DMA+0x17c>
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	685b      	ldr	r3, [r3, #4]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	bf0c      	ite	eq
 80194a6:	2301      	moveq	r3, #1
 80194a8:	2300      	movne	r3, #0
 80194aa:	b2db      	uxtb	r3, r3
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d001      	beq.n	80194b4 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80194b0:	2301      	movs	r3, #1
 80194b2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d07c      	beq.n	80195b6 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	0b9b      	lsrs	r3, r3, #14
 80194c0:	f003 0301 	and.w	r3, r3, #1
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d076      	beq.n	80195b6 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	4a4d      	ldr	r2, [pc, #308]	; (8019604 <I2C_Slave_ISR_DMA+0x2d4>)
 80194d0:	4293      	cmp	r3, r2
 80194d2:	d059      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4a4b      	ldr	r2, [pc, #300]	; (8019608 <I2C_Slave_ISR_DMA+0x2d8>)
 80194dc:	4293      	cmp	r3, r2
 80194de:	d053      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	4a49      	ldr	r2, [pc, #292]	; (801960c <I2C_Slave_ISR_DMA+0x2dc>)
 80194e8:	4293      	cmp	r3, r2
 80194ea:	d04d      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	4a47      	ldr	r2, [pc, #284]	; (8019610 <I2C_Slave_ISR_DMA+0x2e0>)
 80194f4:	4293      	cmp	r3, r2
 80194f6:	d047      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	4a45      	ldr	r2, [pc, #276]	; (8019614 <I2C_Slave_ISR_DMA+0x2e4>)
 8019500:	4293      	cmp	r3, r2
 8019502:	d041      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	4a43      	ldr	r2, [pc, #268]	; (8019618 <I2C_Slave_ISR_DMA+0x2e8>)
 801950c:	4293      	cmp	r3, r2
 801950e:	d03b      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	4a41      	ldr	r2, [pc, #260]	; (801961c <I2C_Slave_ISR_DMA+0x2ec>)
 8019518:	4293      	cmp	r3, r2
 801951a:	d035      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	4a3f      	ldr	r2, [pc, #252]	; (8019620 <I2C_Slave_ISR_DMA+0x2f0>)
 8019524:	4293      	cmp	r3, r2
 8019526:	d02f      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	4a3d      	ldr	r2, [pc, #244]	; (8019624 <I2C_Slave_ISR_DMA+0x2f4>)
 8019530:	4293      	cmp	r3, r2
 8019532:	d029      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	4a3b      	ldr	r2, [pc, #236]	; (8019628 <I2C_Slave_ISR_DMA+0x2f8>)
 801953c:	4293      	cmp	r3, r2
 801953e:	d023      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	4a39      	ldr	r2, [pc, #228]	; (801962c <I2C_Slave_ISR_DMA+0x2fc>)
 8019548:	4293      	cmp	r3, r2
 801954a:	d01d      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 801954c:	68fb      	ldr	r3, [r7, #12]
 801954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	4a37      	ldr	r2, [pc, #220]	; (8019630 <I2C_Slave_ISR_DMA+0x300>)
 8019554:	4293      	cmp	r3, r2
 8019556:	d017      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	4a35      	ldr	r2, [pc, #212]	; (8019634 <I2C_Slave_ISR_DMA+0x304>)
 8019560:	4293      	cmp	r3, r2
 8019562:	d011      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	4a33      	ldr	r2, [pc, #204]	; (8019638 <I2C_Slave_ISR_DMA+0x308>)
 801956c:	4293      	cmp	r3, r2
 801956e:	d00b      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	4a31      	ldr	r2, [pc, #196]	; (801963c <I2C_Slave_ISR_DMA+0x30c>)
 8019578:	4293      	cmp	r3, r2
 801957a:	d005      	beq.n	8019588 <I2C_Slave_ISR_DMA+0x258>
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	4a2f      	ldr	r2, [pc, #188]	; (8019640 <I2C_Slave_ISR_DMA+0x310>)
 8019584:	4293      	cmp	r3, r2
 8019586:	d109      	bne.n	801959c <I2C_Slave_ISR_DMA+0x26c>
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	685b      	ldr	r3, [r3, #4]
 8019590:	2b00      	cmp	r3, #0
 8019592:	bf0c      	ite	eq
 8019594:	2301      	moveq	r3, #1
 8019596:	2300      	movne	r3, #0
 8019598:	b2db      	uxtb	r3, r3
 801959a:	e008      	b.n	80195ae <I2C_Slave_ISR_DMA+0x27e>
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	685b      	ldr	r3, [r3, #4]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	bf0c      	ite	eq
 80195a8:	2301      	moveq	r3, #1
 80195aa:	2300      	movne	r3, #0
 80195ac:	b2db      	uxtb	r3, r3
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d001      	beq.n	80195b6 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 80195b2:	2301      	movs	r3, #1
 80195b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80195b6:	69fb      	ldr	r3, [r7, #28]
 80195b8:	2b01      	cmp	r3, #1
 80195ba:	d148      	bne.n	801964e <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80195c2:	b2db      	uxtb	r3, r3
 80195c4:	2b28      	cmp	r3, #40	; 0x28
 80195c6:	d108      	bne.n	80195da <I2C_Slave_ISR_DMA+0x2aa>
 80195c8:	69bb      	ldr	r3, [r7, #24]
 80195ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80195ce:	d104      	bne.n	80195da <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80195d0:	68b9      	ldr	r1, [r7, #8]
 80195d2:	68f8      	ldr	r0, [r7, #12]
 80195d4:	f000 fd16 	bl	801a004 <I2C_ITListenCplt>
 80195d8:	e068      	b.n	80196ac <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80195e0:	b2db      	uxtb	r3, r3
 80195e2:	2b29      	cmp	r3, #41	; 0x29
 80195e4:	d12e      	bne.n	8019644 <I2C_Slave_ISR_DMA+0x314>
 80195e6:	69bb      	ldr	r3, [r7, #24]
 80195e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80195ec:	d02a      	beq.n	8019644 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	2210      	movs	r2, #16
 80195f4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80195f6:	68f8      	ldr	r0, [r7, #12]
 80195f8:	f000 fe51 	bl	801a29e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80195fc:	68f8      	ldr	r0, [r7, #12]
 80195fe:	f000 f9e0 	bl	80199c2 <I2C_ITSlaveSeqCplt>
 8019602:	e053      	b.n	80196ac <I2C_Slave_ISR_DMA+0x37c>
 8019604:	40020010 	.word	0x40020010
 8019608:	40020028 	.word	0x40020028
 801960c:	40020040 	.word	0x40020040
 8019610:	40020058 	.word	0x40020058
 8019614:	40020070 	.word	0x40020070
 8019618:	40020088 	.word	0x40020088
 801961c:	400200a0 	.word	0x400200a0
 8019620:	400200b8 	.word	0x400200b8
 8019624:	40020410 	.word	0x40020410
 8019628:	40020428 	.word	0x40020428
 801962c:	40020440 	.word	0x40020440
 8019630:	40020458 	.word	0x40020458
 8019634:	40020470 	.word	0x40020470
 8019638:	40020488 	.word	0x40020488
 801963c:	400204a0 	.word	0x400204a0
 8019640:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	2210      	movs	r2, #16
 801964a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801964c:	e034      	b.n	80196b8 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	2210      	movs	r2, #16
 8019654:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801965a:	f043 0204 	orr.w	r2, r3, #4
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019668:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801966a:	69bb      	ldr	r3, [r7, #24]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d003      	beq.n	8019678 <I2C_Slave_ISR_DMA+0x348>
 8019670:	69bb      	ldr	r3, [r7, #24]
 8019672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019676:	d11f      	bne.n	80196b8 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8019678:	7dfb      	ldrb	r3, [r7, #23]
 801967a:	2b21      	cmp	r3, #33	; 0x21
 801967c:	d002      	beq.n	8019684 <I2C_Slave_ISR_DMA+0x354>
 801967e:	7dfb      	ldrb	r3, [r7, #23]
 8019680:	2b29      	cmp	r3, #41	; 0x29
 8019682:	d103      	bne.n	801968c <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2221      	movs	r2, #33	; 0x21
 8019688:	631a      	str	r2, [r3, #48]	; 0x30
 801968a:	e008      	b.n	801969e <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801968c:	7dfb      	ldrb	r3, [r7, #23]
 801968e:	2b22      	cmp	r3, #34	; 0x22
 8019690:	d002      	beq.n	8019698 <I2C_Slave_ISR_DMA+0x368>
 8019692:	7dfb      	ldrb	r3, [r7, #23]
 8019694:	2b2a      	cmp	r3, #42	; 0x2a
 8019696:	d102      	bne.n	801969e <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	2222      	movs	r2, #34	; 0x22
 801969c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196a2:	4619      	mov	r1, r3
 80196a4:	68f8      	ldr	r0, [r7, #12]
 80196a6:	f000 fd03 	bl	801a0b0 <I2C_ITError>
      if (treatdmanack == 1U)
 80196aa:	e005      	b.n	80196b8 <I2C_Slave_ISR_DMA+0x388>
 80196ac:	e004      	b.n	80196b8 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	2210      	movs	r2, #16
 80196b4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80196b6:	e011      	b.n	80196dc <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 80196b8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80196ba:	e00f      	b.n	80196dc <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80196bc:	68bb      	ldr	r3, [r7, #8]
 80196be:	08db      	lsrs	r3, r3, #3
 80196c0:	f003 0301 	and.w	r3, r3, #1
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d009      	beq.n	80196dc <I2C_Slave_ISR_DMA+0x3ac>
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	08db      	lsrs	r3, r3, #3
 80196cc:	f003 0301 	and.w	r3, r3, #1
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d003      	beq.n	80196dc <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80196d4:	68b9      	ldr	r1, [r7, #8]
 80196d6:	68f8      	ldr	r0, [r7, #12]
 80196d8:	f000 f8b2 	bl	8019840 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	2200      	movs	r2, #0
 80196e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80196e4:	2300      	movs	r3, #0
}
 80196e6:	4618      	mov	r0, r3
 80196e8:	3720      	adds	r7, #32
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}
 80196ee:	bf00      	nop

080196f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b086      	sub	sp, #24
 80196f4:	af02      	add	r7, sp, #8
 80196f6:	60f8      	str	r0, [r7, #12]
 80196f8:	4608      	mov	r0, r1
 80196fa:	4611      	mov	r1, r2
 80196fc:	461a      	mov	r2, r3
 80196fe:	4603      	mov	r3, r0
 8019700:	817b      	strh	r3, [r7, #10]
 8019702:	460b      	mov	r3, r1
 8019704:	813b      	strh	r3, [r7, #8]
 8019706:	4613      	mov	r3, r2
 8019708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801970a:	88fb      	ldrh	r3, [r7, #6]
 801970c:	b2da      	uxtb	r2, r3
 801970e:	8979      	ldrh	r1, [r7, #10]
 8019710:	4b20      	ldr	r3, [pc, #128]	; (8019794 <I2C_RequestMemoryWrite+0xa4>)
 8019712:	9300      	str	r3, [sp, #0]
 8019714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019718:	68f8      	ldr	r0, [r7, #12]
 801971a:	f001 f8a7 	bl	801a86c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801971e:	69fa      	ldr	r2, [r7, #28]
 8019720:	69b9      	ldr	r1, [r7, #24]
 8019722:	68f8      	ldr	r0, [r7, #12]
 8019724:	f000 ffc0 	bl	801a6a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8019728:	4603      	mov	r3, r0
 801972a:	2b00      	cmp	r3, #0
 801972c:	d001      	beq.n	8019732 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801972e:	2301      	movs	r3, #1
 8019730:	e02c      	b.n	801978c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019732:	88fb      	ldrh	r3, [r7, #6]
 8019734:	2b01      	cmp	r3, #1
 8019736:	d105      	bne.n	8019744 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019738:	893b      	ldrh	r3, [r7, #8]
 801973a:	b2da      	uxtb	r2, r3
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	629a      	str	r2, [r3, #40]	; 0x28
 8019742:	e015      	b.n	8019770 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8019744:	893b      	ldrh	r3, [r7, #8]
 8019746:	0a1b      	lsrs	r3, r3, #8
 8019748:	b29b      	uxth	r3, r3
 801974a:	b2da      	uxtb	r2, r3
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019752:	69fa      	ldr	r2, [r7, #28]
 8019754:	69b9      	ldr	r1, [r7, #24]
 8019756:	68f8      	ldr	r0, [r7, #12]
 8019758:	f000 ffa6 	bl	801a6a8 <I2C_WaitOnTXISFlagUntilTimeout>
 801975c:	4603      	mov	r3, r0
 801975e:	2b00      	cmp	r3, #0
 8019760:	d001      	beq.n	8019766 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8019762:	2301      	movs	r3, #1
 8019764:	e012      	b.n	801978c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019766:	893b      	ldrh	r3, [r7, #8]
 8019768:	b2da      	uxtb	r2, r3
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8019770:	69fb      	ldr	r3, [r7, #28]
 8019772:	9300      	str	r3, [sp, #0]
 8019774:	69bb      	ldr	r3, [r7, #24]
 8019776:	2200      	movs	r2, #0
 8019778:	2180      	movs	r1, #128	; 0x80
 801977a:	68f8      	ldr	r0, [r7, #12]
 801977c:	f000 ff54 	bl	801a628 <I2C_WaitOnFlagUntilTimeout>
 8019780:	4603      	mov	r3, r0
 8019782:	2b00      	cmp	r3, #0
 8019784:	d001      	beq.n	801978a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8019786:	2301      	movs	r3, #1
 8019788:	e000      	b.n	801978c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801978a:	2300      	movs	r3, #0
}
 801978c:	4618      	mov	r0, r3
 801978e:	3710      	adds	r7, #16
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}
 8019794:	80002000 	.word	0x80002000

08019798 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b086      	sub	sp, #24
 801979c:	af02      	add	r7, sp, #8
 801979e:	60f8      	str	r0, [r7, #12]
 80197a0:	4608      	mov	r0, r1
 80197a2:	4611      	mov	r1, r2
 80197a4:	461a      	mov	r2, r3
 80197a6:	4603      	mov	r3, r0
 80197a8:	817b      	strh	r3, [r7, #10]
 80197aa:	460b      	mov	r3, r1
 80197ac:	813b      	strh	r3, [r7, #8]
 80197ae:	4613      	mov	r3, r2
 80197b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80197b2:	88fb      	ldrh	r3, [r7, #6]
 80197b4:	b2da      	uxtb	r2, r3
 80197b6:	8979      	ldrh	r1, [r7, #10]
 80197b8:	4b20      	ldr	r3, [pc, #128]	; (801983c <I2C_RequestMemoryRead+0xa4>)
 80197ba:	9300      	str	r3, [sp, #0]
 80197bc:	2300      	movs	r3, #0
 80197be:	68f8      	ldr	r0, [r7, #12]
 80197c0:	f001 f854 	bl	801a86c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80197c4:	69fa      	ldr	r2, [r7, #28]
 80197c6:	69b9      	ldr	r1, [r7, #24]
 80197c8:	68f8      	ldr	r0, [r7, #12]
 80197ca:	f000 ff6d 	bl	801a6a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80197ce:	4603      	mov	r3, r0
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d001      	beq.n	80197d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80197d4:	2301      	movs	r3, #1
 80197d6:	e02c      	b.n	8019832 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80197d8:	88fb      	ldrh	r3, [r7, #6]
 80197da:	2b01      	cmp	r3, #1
 80197dc:	d105      	bne.n	80197ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80197de:	893b      	ldrh	r3, [r7, #8]
 80197e0:	b2da      	uxtb	r2, r3
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	629a      	str	r2, [r3, #40]	; 0x28
 80197e8:	e015      	b.n	8019816 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80197ea:	893b      	ldrh	r3, [r7, #8]
 80197ec:	0a1b      	lsrs	r3, r3, #8
 80197ee:	b29b      	uxth	r3, r3
 80197f0:	b2da      	uxtb	r2, r3
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80197f8:	69fa      	ldr	r2, [r7, #28]
 80197fa:	69b9      	ldr	r1, [r7, #24]
 80197fc:	68f8      	ldr	r0, [r7, #12]
 80197fe:	f000 ff53 	bl	801a6a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8019802:	4603      	mov	r3, r0
 8019804:	2b00      	cmp	r3, #0
 8019806:	d001      	beq.n	801980c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8019808:	2301      	movs	r3, #1
 801980a:	e012      	b.n	8019832 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801980c:	893b      	ldrh	r3, [r7, #8]
 801980e:	b2da      	uxtb	r2, r3
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8019816:	69fb      	ldr	r3, [r7, #28]
 8019818:	9300      	str	r3, [sp, #0]
 801981a:	69bb      	ldr	r3, [r7, #24]
 801981c:	2200      	movs	r2, #0
 801981e:	2140      	movs	r1, #64	; 0x40
 8019820:	68f8      	ldr	r0, [r7, #12]
 8019822:	f000 ff01 	bl	801a628 <I2C_WaitOnFlagUntilTimeout>
 8019826:	4603      	mov	r3, r0
 8019828:	2b00      	cmp	r3, #0
 801982a:	d001      	beq.n	8019830 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801982c:	2301      	movs	r3, #1
 801982e:	e000      	b.n	8019832 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8019830:	2300      	movs	r3, #0
}
 8019832:	4618      	mov	r0, r3
 8019834:	3710      	adds	r7, #16
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}
 801983a:	bf00      	nop
 801983c:	80002000 	.word	0x80002000

08019840 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b084      	sub	sp, #16
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
 8019848:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019850:	b2db      	uxtb	r3, r3
 8019852:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019856:	2b28      	cmp	r3, #40	; 0x28
 8019858:	d16a      	bne.n	8019930 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	699b      	ldr	r3, [r3, #24]
 8019860:	0c1b      	lsrs	r3, r3, #16
 8019862:	b2db      	uxtb	r3, r3
 8019864:	f003 0301 	and.w	r3, r3, #1
 8019868:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	699b      	ldr	r3, [r3, #24]
 8019870:	0c1b      	lsrs	r3, r3, #16
 8019872:	b29b      	uxth	r3, r3
 8019874:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019878:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	689b      	ldr	r3, [r3, #8]
 8019880:	b29b      	uxth	r3, r3
 8019882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019886:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	68db      	ldr	r3, [r3, #12]
 801988e:	b29b      	uxth	r3, r3
 8019890:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019894:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	68db      	ldr	r3, [r3, #12]
 801989a:	2b02      	cmp	r3, #2
 801989c:	d138      	bne.n	8019910 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 801989e:	897b      	ldrh	r3, [r7, #10]
 80198a0:	09db      	lsrs	r3, r3, #7
 80198a2:	b29a      	uxth	r2, r3
 80198a4:	89bb      	ldrh	r3, [r7, #12]
 80198a6:	4053      	eors	r3, r2
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	f003 0306 	and.w	r3, r3, #6
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d11c      	bne.n	80198ec <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80198b2:	897b      	ldrh	r3, [r7, #10]
 80198b4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80198ba:	1c5a      	adds	r2, r3, #1
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80198c4:	2b02      	cmp	r3, #2
 80198c6:	d13b      	bne.n	8019940 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	2200      	movs	r2, #0
 80198cc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	2208      	movs	r2, #8
 80198d4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	2200      	movs	r2, #0
 80198da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80198de:	89ba      	ldrh	r2, [r7, #12]
 80198e0:	7bfb      	ldrb	r3, [r7, #15]
 80198e2:	4619      	mov	r1, r3
 80198e4:	6878      	ldr	r0, [r7, #4]
 80198e6:	f7ff f9ce 	bl	8018c86 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80198ea:	e029      	b.n	8019940 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80198ec:	893b      	ldrh	r3, [r7, #8]
 80198ee:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80198f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80198f4:	6878      	ldr	r0, [r7, #4]
 80198f6:	f001 f84b 	bl	801a990 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	2200      	movs	r2, #0
 80198fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019902:	89ba      	ldrh	r2, [r7, #12]
 8019904:	7bfb      	ldrb	r3, [r7, #15]
 8019906:	4619      	mov	r1, r3
 8019908:	6878      	ldr	r0, [r7, #4]
 801990a:	f7ff f9bc 	bl	8018c86 <HAL_I2C_AddrCallback>
}
 801990e:	e017      	b.n	8019940 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8019910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f001 f83b 	bl	801a990 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	2200      	movs	r2, #0
 801991e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019922:	89ba      	ldrh	r2, [r7, #12]
 8019924:	7bfb      	ldrb	r3, [r7, #15]
 8019926:	4619      	mov	r1, r3
 8019928:	6878      	ldr	r0, [r7, #4]
 801992a:	f7ff f9ac 	bl	8018c86 <HAL_I2C_AddrCallback>
}
 801992e:	e007      	b.n	8019940 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	2208      	movs	r2, #8
 8019936:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2200      	movs	r2, #0
 801993c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8019940:	bf00      	nop
 8019942:	3710      	adds	r7, #16
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}

08019948 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b082      	sub	sp, #8
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	2200      	movs	r2, #0
 8019954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801995e:	b2db      	uxtb	r3, r3
 8019960:	2b21      	cmp	r3, #33	; 0x21
 8019962:	d115      	bne.n	8019990 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	2220      	movs	r2, #32
 8019968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	2211      	movs	r2, #17
 8019970:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	2200      	movs	r2, #0
 8019976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019978:	2101      	movs	r1, #1
 801997a:	6878      	ldr	r0, [r7, #4]
 801997c:	f001 f808 	bl	801a990 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	2200      	movs	r2, #0
 8019984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8019988:	6878      	ldr	r0, [r7, #4]
 801998a:	f7ff f954 	bl	8018c36 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801998e:	e014      	b.n	80199ba <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	2220      	movs	r2, #32
 8019994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	2212      	movs	r2, #18
 801999c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	2200      	movs	r2, #0
 80199a2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80199a4:	2102      	movs	r1, #2
 80199a6:	6878      	ldr	r0, [r7, #4]
 80199a8:	f000 fff2 	bl	801a990 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	2200      	movs	r2, #0
 80199b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80199b4:	6878      	ldr	r0, [r7, #4]
 80199b6:	f7ff f948 	bl	8018c4a <HAL_I2C_MasterRxCpltCallback>
}
 80199ba:	bf00      	nop
 80199bc:	3708      	adds	r7, #8
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}

080199c2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80199c2:	b580      	push	{r7, lr}
 80199c4:	b084      	sub	sp, #16
 80199c6:	af00      	add	r7, sp, #0
 80199c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	2200      	movs	r2, #0
 80199d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	0b9b      	lsrs	r3, r3, #14
 80199de:	f003 0301 	and.w	r3, r3, #1
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d008      	beq.n	80199f8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	681a      	ldr	r2, [r3, #0]
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80199f4:	601a      	str	r2, [r3, #0]
 80199f6:	e00d      	b.n	8019a14 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	0bdb      	lsrs	r3, r3, #15
 80199fc:	f003 0301 	and.w	r3, r3, #1
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d007      	beq.n	8019a14 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	681a      	ldr	r2, [r3, #0]
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8019a12:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019a1a:	b2db      	uxtb	r3, r3
 8019a1c:	2b29      	cmp	r3, #41	; 0x29
 8019a1e:	d112      	bne.n	8019a46 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	2228      	movs	r2, #40	; 0x28
 8019a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	2221      	movs	r2, #33	; 0x21
 8019a2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019a2e:	2101      	movs	r1, #1
 8019a30:	6878      	ldr	r0, [r7, #4]
 8019a32:	f000 ffad 	bl	801a990 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	2200      	movs	r2, #0
 8019a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019a3e:	6878      	ldr	r0, [r7, #4]
 8019a40:	f7ff f90d 	bl	8018c5e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8019a44:	e017      	b.n	8019a76 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8019a50:	d111      	bne.n	8019a76 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	2228      	movs	r2, #40	; 0x28
 8019a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	2222      	movs	r2, #34	; 0x22
 8019a5e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8019a60:	2102      	movs	r1, #2
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	f000 ff94 	bl	801a990 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019a70:	6878      	ldr	r0, [r7, #4]
 8019a72:	f7ff f8fe 	bl	8018c72 <HAL_I2C_SlaveRxCpltCallback>
}
 8019a76:	bf00      	nop
 8019a78:	3710      	adds	r7, #16
 8019a7a:	46bd      	mov	sp, r7
 8019a7c:	bd80      	pop	{r7, pc}
	...

08019a80 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b086      	sub	sp, #24
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	2220      	movs	r2, #32
 8019a94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019a9c:	b2db      	uxtb	r3, r3
 8019a9e:	2b21      	cmp	r3, #33	; 0x21
 8019aa0:	d107      	bne.n	8019ab2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019aa2:	2101      	movs	r1, #1
 8019aa4:	6878      	ldr	r0, [r7, #4]
 8019aa6:	f000 ff73 	bl	801a990 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	2211      	movs	r2, #17
 8019aae:	631a      	str	r2, [r3, #48]	; 0x30
 8019ab0:	e00c      	b.n	8019acc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019ab8:	b2db      	uxtb	r3, r3
 8019aba:	2b22      	cmp	r3, #34	; 0x22
 8019abc:	d106      	bne.n	8019acc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8019abe:	2102      	movs	r1, #2
 8019ac0:	6878      	ldr	r0, [r7, #4]
 8019ac2:	f000 ff65 	bl	801a990 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	2212      	movs	r2, #18
 8019aca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	6859      	ldr	r1, [r3, #4]
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	681a      	ldr	r2, [r3, #0]
 8019ad6:	4b4d      	ldr	r3, [pc, #308]	; (8019c0c <I2C_ITMasterCplt+0x18c>)
 8019ad8:	400b      	ands	r3, r1
 8019ada:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	2200      	movs	r2, #0
 8019ae0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	4a4a      	ldr	r2, [pc, #296]	; (8019c10 <I2C_ITMasterCplt+0x190>)
 8019ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8019ae8:	697b      	ldr	r3, [r7, #20]
 8019aea:	091b      	lsrs	r3, r3, #4
 8019aec:	f003 0301 	and.w	r3, r3, #1
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d009      	beq.n	8019b08 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	2210      	movs	r2, #16
 8019afa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b00:	f043 0204 	orr.w	r2, r3, #4
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	2b60      	cmp	r3, #96	; 0x60
 8019b12:	d10b      	bne.n	8019b2c <I2C_ITMasterCplt+0xac>
 8019b14:	697b      	ldr	r3, [r7, #20]
 8019b16:	089b      	lsrs	r3, r3, #2
 8019b18:	f003 0301 	and.w	r3, r3, #1
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d005      	beq.n	8019b2c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b26:	b2db      	uxtb	r3, r3
 8019b28:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8019b2a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8019b2c:	6878      	ldr	r0, [r7, #4]
 8019b2e:	f000 fbb6 	bl	801a29e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b36:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019b3e:	b2db      	uxtb	r3, r3
 8019b40:	2b60      	cmp	r3, #96	; 0x60
 8019b42:	d002      	beq.n	8019b4a <I2C_ITMasterCplt+0xca>
 8019b44:	693b      	ldr	r3, [r7, #16]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d006      	beq.n	8019b58 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b4e:	4619      	mov	r1, r3
 8019b50:	6878      	ldr	r0, [r7, #4]
 8019b52:	f000 faad 	bl	801a0b0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8019b56:	e054      	b.n	8019c02 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019b5e:	b2db      	uxtb	r3, r3
 8019b60:	2b21      	cmp	r3, #33	; 0x21
 8019b62:	d124      	bne.n	8019bae <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	2220      	movs	r2, #32
 8019b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	2200      	movs	r2, #0
 8019b70:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019b78:	b2db      	uxtb	r3, r3
 8019b7a:	2b40      	cmp	r3, #64	; 0x40
 8019b7c:	d10b      	bne.n	8019b96 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	2200      	movs	r2, #0
 8019b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	2200      	movs	r2, #0
 8019b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8019b8e:	6878      	ldr	r0, [r7, #4]
 8019b90:	f7ff f891 	bl	8018cb6 <HAL_I2C_MemTxCpltCallback>
}
 8019b94:	e035      	b.n	8019c02 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	2200      	movs	r2, #0
 8019b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	2200      	movs	r2, #0
 8019ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8019ba6:	6878      	ldr	r0, [r7, #4]
 8019ba8:	f7ff f845 	bl	8018c36 <HAL_I2C_MasterTxCpltCallback>
}
 8019bac:	e029      	b.n	8019c02 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019bb4:	b2db      	uxtb	r3, r3
 8019bb6:	2b22      	cmp	r3, #34	; 0x22
 8019bb8:	d123      	bne.n	8019c02 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	2220      	movs	r2, #32
 8019bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	2200      	movs	r2, #0
 8019bc6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019bce:	b2db      	uxtb	r3, r3
 8019bd0:	2b40      	cmp	r3, #64	; 0x40
 8019bd2:	d10b      	bne.n	8019bec <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	2200      	movs	r2, #0
 8019bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2200      	movs	r2, #0
 8019be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8019be4:	6878      	ldr	r0, [r7, #4]
 8019be6:	f7f8 fc4f 	bl	8012488 <HAL_I2C_MemRxCpltCallback>
}
 8019bea:	e00a      	b.n	8019c02 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	2200      	movs	r2, #0
 8019bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	2200      	movs	r2, #0
 8019bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8019bfc:	6878      	ldr	r0, [r7, #4]
 8019bfe:	f7ff f824 	bl	8018c4a <HAL_I2C_MasterRxCpltCallback>
}
 8019c02:	bf00      	nop
 8019c04:	3718      	adds	r7, #24
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}
 8019c0a:	bf00      	nop
 8019c0c:	fe00e800 	.word	0xfe00e800
 8019c10:	ffff0000 	.word	0xffff0000

08019c14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b086      	sub	sp, #24
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019c30:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	2220      	movs	r2, #32
 8019c38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8019c3a:	7bfb      	ldrb	r3, [r7, #15]
 8019c3c:	2b21      	cmp	r3, #33	; 0x21
 8019c3e:	d002      	beq.n	8019c46 <I2C_ITSlaveCplt+0x32>
 8019c40:	7bfb      	ldrb	r3, [r7, #15]
 8019c42:	2b29      	cmp	r3, #41	; 0x29
 8019c44:	d108      	bne.n	8019c58 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8019c46:	f248 0101 	movw	r1, #32769	; 0x8001
 8019c4a:	6878      	ldr	r0, [r7, #4]
 8019c4c:	f000 fea0 	bl	801a990 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	2221      	movs	r2, #33	; 0x21
 8019c54:	631a      	str	r2, [r3, #48]	; 0x30
 8019c56:	e00d      	b.n	8019c74 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8019c58:	7bfb      	ldrb	r3, [r7, #15]
 8019c5a:	2b22      	cmp	r3, #34	; 0x22
 8019c5c:	d002      	beq.n	8019c64 <I2C_ITSlaveCplt+0x50>
 8019c5e:	7bfb      	ldrb	r3, [r7, #15]
 8019c60:	2b2a      	cmp	r3, #42	; 0x2a
 8019c62:	d107      	bne.n	8019c74 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8019c64:	f248 0102 	movw	r1, #32770	; 0x8002
 8019c68:	6878      	ldr	r0, [r7, #4]
 8019c6a:	f000 fe91 	bl	801a990 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	2222      	movs	r2, #34	; 0x22
 8019c72:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	685a      	ldr	r2, [r3, #4]
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019c82:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	6859      	ldr	r1, [r3, #4]
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	681a      	ldr	r2, [r3, #0]
 8019c8e:	4b80      	ldr	r3, [pc, #512]	; (8019e90 <I2C_ITSlaveCplt+0x27c>)
 8019c90:	400b      	ands	r3, r1
 8019c92:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8019c94:	6878      	ldr	r0, [r7, #4]
 8019c96:	f000 fb02 	bl	801a29e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8019c9a:	693b      	ldr	r3, [r7, #16]
 8019c9c:	0b9b      	lsrs	r3, r3, #14
 8019c9e:	f003 0301 	and.w	r3, r3, #1
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d07a      	beq.n	8019d9c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	681a      	ldr	r2, [r3, #0]
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8019cb4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	f000 8111 	beq.w	8019ee2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	4a73      	ldr	r2, [pc, #460]	; (8019e94 <I2C_ITSlaveCplt+0x280>)
 8019cc8:	4293      	cmp	r3, r2
 8019cca:	d059      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	4a71      	ldr	r2, [pc, #452]	; (8019e98 <I2C_ITSlaveCplt+0x284>)
 8019cd4:	4293      	cmp	r3, r2
 8019cd6:	d053      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	4a6f      	ldr	r2, [pc, #444]	; (8019e9c <I2C_ITSlaveCplt+0x288>)
 8019ce0:	4293      	cmp	r3, r2
 8019ce2:	d04d      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	4a6d      	ldr	r2, [pc, #436]	; (8019ea0 <I2C_ITSlaveCplt+0x28c>)
 8019cec:	4293      	cmp	r3, r2
 8019cee:	d047      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	4a6b      	ldr	r2, [pc, #428]	; (8019ea4 <I2C_ITSlaveCplt+0x290>)
 8019cf8:	4293      	cmp	r3, r2
 8019cfa:	d041      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	4a69      	ldr	r2, [pc, #420]	; (8019ea8 <I2C_ITSlaveCplt+0x294>)
 8019d04:	4293      	cmp	r3, r2
 8019d06:	d03b      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	4a67      	ldr	r2, [pc, #412]	; (8019eac <I2C_ITSlaveCplt+0x298>)
 8019d10:	4293      	cmp	r3, r2
 8019d12:	d035      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	4a65      	ldr	r2, [pc, #404]	; (8019eb0 <I2C_ITSlaveCplt+0x29c>)
 8019d1c:	4293      	cmp	r3, r2
 8019d1e:	d02f      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	4a63      	ldr	r2, [pc, #396]	; (8019eb4 <I2C_ITSlaveCplt+0x2a0>)
 8019d28:	4293      	cmp	r3, r2
 8019d2a:	d029      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	4a61      	ldr	r2, [pc, #388]	; (8019eb8 <I2C_ITSlaveCplt+0x2a4>)
 8019d34:	4293      	cmp	r3, r2
 8019d36:	d023      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	4a5f      	ldr	r2, [pc, #380]	; (8019ebc <I2C_ITSlaveCplt+0x2a8>)
 8019d40:	4293      	cmp	r3, r2
 8019d42:	d01d      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	4a5d      	ldr	r2, [pc, #372]	; (8019ec0 <I2C_ITSlaveCplt+0x2ac>)
 8019d4c:	4293      	cmp	r3, r2
 8019d4e:	d017      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	4a5b      	ldr	r2, [pc, #364]	; (8019ec4 <I2C_ITSlaveCplt+0x2b0>)
 8019d58:	4293      	cmp	r3, r2
 8019d5a:	d011      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	4a59      	ldr	r2, [pc, #356]	; (8019ec8 <I2C_ITSlaveCplt+0x2b4>)
 8019d64:	4293      	cmp	r3, r2
 8019d66:	d00b      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	4a57      	ldr	r2, [pc, #348]	; (8019ecc <I2C_ITSlaveCplt+0x2b8>)
 8019d70:	4293      	cmp	r3, r2
 8019d72:	d005      	beq.n	8019d80 <I2C_ITSlaveCplt+0x16c>
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	4a55      	ldr	r2, [pc, #340]	; (8019ed0 <I2C_ITSlaveCplt+0x2bc>)
 8019d7c:	4293      	cmp	r3, r2
 8019d7e:	d105      	bne.n	8019d8c <I2C_ITSlaveCplt+0x178>
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	685b      	ldr	r3, [r3, #4]
 8019d88:	b29b      	uxth	r3, r3
 8019d8a:	e004      	b.n	8019d96 <I2C_ITSlaveCplt+0x182>
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	685b      	ldr	r3, [r3, #4]
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	687a      	ldr	r2, [r7, #4]
 8019d98:	8553      	strh	r3, [r2, #42]	; 0x2a
 8019d9a:	e0a2      	b.n	8019ee2 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8019d9c:	693b      	ldr	r3, [r7, #16]
 8019d9e:	0bdb      	lsrs	r3, r3, #15
 8019da0:	f003 0301 	and.w	r3, r3, #1
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	f000 809c 	beq.w	8019ee2 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	681a      	ldr	r2, [r3, #0]
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8019db8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	f000 808f 	beq.w	8019ee2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	4a32      	ldr	r2, [pc, #200]	; (8019e94 <I2C_ITSlaveCplt+0x280>)
 8019dcc:	4293      	cmp	r3, r2
 8019dce:	d059      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	4a30      	ldr	r2, [pc, #192]	; (8019e98 <I2C_ITSlaveCplt+0x284>)
 8019dd8:	4293      	cmp	r3, r2
 8019dda:	d053      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	4a2e      	ldr	r2, [pc, #184]	; (8019e9c <I2C_ITSlaveCplt+0x288>)
 8019de4:	4293      	cmp	r3, r2
 8019de6:	d04d      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	4a2c      	ldr	r2, [pc, #176]	; (8019ea0 <I2C_ITSlaveCplt+0x28c>)
 8019df0:	4293      	cmp	r3, r2
 8019df2:	d047      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	4a2a      	ldr	r2, [pc, #168]	; (8019ea4 <I2C_ITSlaveCplt+0x290>)
 8019dfc:	4293      	cmp	r3, r2
 8019dfe:	d041      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	4a28      	ldr	r2, [pc, #160]	; (8019ea8 <I2C_ITSlaveCplt+0x294>)
 8019e08:	4293      	cmp	r3, r2
 8019e0a:	d03b      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	4a26      	ldr	r2, [pc, #152]	; (8019eac <I2C_ITSlaveCplt+0x298>)
 8019e14:	4293      	cmp	r3, r2
 8019e16:	d035      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	4a24      	ldr	r2, [pc, #144]	; (8019eb0 <I2C_ITSlaveCplt+0x29c>)
 8019e20:	4293      	cmp	r3, r2
 8019e22:	d02f      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	4a22      	ldr	r2, [pc, #136]	; (8019eb4 <I2C_ITSlaveCplt+0x2a0>)
 8019e2c:	4293      	cmp	r3, r2
 8019e2e:	d029      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	4a20      	ldr	r2, [pc, #128]	; (8019eb8 <I2C_ITSlaveCplt+0x2a4>)
 8019e38:	4293      	cmp	r3, r2
 8019e3a:	d023      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	4a1e      	ldr	r2, [pc, #120]	; (8019ebc <I2C_ITSlaveCplt+0x2a8>)
 8019e44:	4293      	cmp	r3, r2
 8019e46:	d01d      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	4a1c      	ldr	r2, [pc, #112]	; (8019ec0 <I2C_ITSlaveCplt+0x2ac>)
 8019e50:	4293      	cmp	r3, r2
 8019e52:	d017      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	4a1a      	ldr	r2, [pc, #104]	; (8019ec4 <I2C_ITSlaveCplt+0x2b0>)
 8019e5c:	4293      	cmp	r3, r2
 8019e5e:	d011      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	4a18      	ldr	r2, [pc, #96]	; (8019ec8 <I2C_ITSlaveCplt+0x2b4>)
 8019e68:	4293      	cmp	r3, r2
 8019e6a:	d00b      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	4a16      	ldr	r2, [pc, #88]	; (8019ecc <I2C_ITSlaveCplt+0x2b8>)
 8019e74:	4293      	cmp	r3, r2
 8019e76:	d005      	beq.n	8019e84 <I2C_ITSlaveCplt+0x270>
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	4a14      	ldr	r2, [pc, #80]	; (8019ed0 <I2C_ITSlaveCplt+0x2bc>)
 8019e80:	4293      	cmp	r3, r2
 8019e82:	d127      	bne.n	8019ed4 <I2C_ITSlaveCplt+0x2c0>
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	685b      	ldr	r3, [r3, #4]
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	e026      	b.n	8019ede <I2C_ITSlaveCplt+0x2ca>
 8019e90:	fe00e800 	.word	0xfe00e800
 8019e94:	40020010 	.word	0x40020010
 8019e98:	40020028 	.word	0x40020028
 8019e9c:	40020040 	.word	0x40020040
 8019ea0:	40020058 	.word	0x40020058
 8019ea4:	40020070 	.word	0x40020070
 8019ea8:	40020088 	.word	0x40020088
 8019eac:	400200a0 	.word	0x400200a0
 8019eb0:	400200b8 	.word	0x400200b8
 8019eb4:	40020410 	.word	0x40020410
 8019eb8:	40020428 	.word	0x40020428
 8019ebc:	40020440 	.word	0x40020440
 8019ec0:	40020458 	.word	0x40020458
 8019ec4:	40020470 	.word	0x40020470
 8019ec8:	40020488 	.word	0x40020488
 8019ecc:	400204a0 	.word	0x400204a0
 8019ed0:	400204b8 	.word	0x400204b8
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	685b      	ldr	r3, [r3, #4]
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	687a      	ldr	r2, [r7, #4]
 8019ee0:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	089b      	lsrs	r3, r3, #2
 8019ee6:	f003 0301 	and.w	r3, r3, #1
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d020      	beq.n	8019f30 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	f023 0304 	bic.w	r3, r3, #4
 8019ef4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f00:	b2d2      	uxtb	r2, r2
 8019f02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f08:	1c5a      	adds	r2, r3, #1
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d00c      	beq.n	8019f30 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019f1a:	3b01      	subs	r3, #1
 8019f1c:	b29a      	uxth	r2, r3
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019f26:	b29b      	uxth	r3, r3
 8019f28:	3b01      	subs	r3, #1
 8019f2a:	b29a      	uxth	r2, r3
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019f34:	b29b      	uxth	r3, r3
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d005      	beq.n	8019f46 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f3e:	f043 0204 	orr.w	r2, r3, #4
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	2200      	movs	r2, #0
 8019f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	2200      	movs	r2, #0
 8019f52:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d010      	beq.n	8019f7e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f60:	4619      	mov	r1, r3
 8019f62:	6878      	ldr	r0, [r7, #4]
 8019f64:	f000 f8a4 	bl	801a0b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019f6e:	b2db      	uxtb	r3, r3
 8019f70:	2b28      	cmp	r3, #40	; 0x28
 8019f72:	d141      	bne.n	8019ff8 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8019f74:	6979      	ldr	r1, [r7, #20]
 8019f76:	6878      	ldr	r0, [r7, #4]
 8019f78:	f000 f844 	bl	801a004 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019f7c:	e03c      	b.n	8019ff8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019f86:	d014      	beq.n	8019fb2 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8019f88:	6878      	ldr	r0, [r7, #4]
 8019f8a:	f7ff fd1a 	bl	80199c2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	4a1b      	ldr	r2, [pc, #108]	; (801a000 <I2C_ITSlaveCplt+0x3ec>)
 8019f92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	2220      	movs	r2, #32
 8019f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	2200      	movs	r2, #0
 8019fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8019faa:	6878      	ldr	r0, [r7, #4]
 8019fac:	f7fe fe79 	bl	8018ca2 <HAL_I2C_ListenCpltCallback>
}
 8019fb0:	e022      	b.n	8019ff8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019fb8:	b2db      	uxtb	r3, r3
 8019fba:	2b22      	cmp	r3, #34	; 0x22
 8019fbc:	d10e      	bne.n	8019fdc <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	2220      	movs	r2, #32
 8019fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	2200      	movs	r2, #0
 8019fca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	2200      	movs	r2, #0
 8019fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	f7fe fe4c 	bl	8018c72 <HAL_I2C_SlaveRxCpltCallback>
}
 8019fda:	e00d      	b.n	8019ff8 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	2220      	movs	r2, #32
 8019fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	2200      	movs	r2, #0
 8019fe8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	2200      	movs	r2, #0
 8019fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019ff2:	6878      	ldr	r0, [r7, #4]
 8019ff4:	f7fe fe33 	bl	8018c5e <HAL_I2C_SlaveTxCpltCallback>
}
 8019ff8:	bf00      	nop
 8019ffa:	3718      	adds	r7, #24
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	bd80      	pop	{r7, pc}
 801a000:	ffff0000 	.word	0xffff0000

0801a004 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b082      	sub	sp, #8
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
 801a00c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	4a26      	ldr	r2, [pc, #152]	; (801a0ac <I2C_ITListenCplt+0xa8>)
 801a012:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	2200      	movs	r2, #0
 801a018:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	2220      	movs	r2, #32
 801a01e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	2200      	movs	r2, #0
 801a026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	2200      	movs	r2, #0
 801a02e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801a030:	683b      	ldr	r3, [r7, #0]
 801a032:	089b      	lsrs	r3, r3, #2
 801a034:	f003 0301 	and.w	r3, r3, #1
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d022      	beq.n	801a082 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a046:	b2d2      	uxtb	r2, r2
 801a048:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a04e:	1c5a      	adds	r2, r3, #1
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d012      	beq.n	801a082 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a060:	3b01      	subs	r3, #1
 801a062:	b29a      	uxth	r2, r3
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a06c:	b29b      	uxth	r3, r3
 801a06e:	3b01      	subs	r3, #1
 801a070:	b29a      	uxth	r2, r3
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a07a:	f043 0204 	orr.w	r2, r3, #4
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a082:	f248 0103 	movw	r1, #32771	; 0x8003
 801a086:	6878      	ldr	r0, [r7, #4]
 801a088:	f000 fc82 	bl	801a990 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	2210      	movs	r2, #16
 801a092:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	2200      	movs	r2, #0
 801a098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801a09c:	6878      	ldr	r0, [r7, #4]
 801a09e:	f7fe fe00 	bl	8018ca2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801a0a2:	bf00      	nop
 801a0a4:	3708      	adds	r7, #8
 801a0a6:	46bd      	mov	sp, r7
 801a0a8:	bd80      	pop	{r7, pc}
 801a0aa:	bf00      	nop
 801a0ac:	ffff0000 	.word	0xffff0000

0801a0b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801a0b0:	b580      	push	{r7, lr}
 801a0b2:	b084      	sub	sp, #16
 801a0b4:	af00      	add	r7, sp, #0
 801a0b6:	6078      	str	r0, [r7, #4]
 801a0b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a0c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	4a5d      	ldr	r2, [pc, #372]	; (801a244 <I2C_ITError+0x194>)
 801a0ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	431a      	orrs	r2, r3
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801a0e2:	7bfb      	ldrb	r3, [r7, #15]
 801a0e4:	2b28      	cmp	r3, #40	; 0x28
 801a0e6:	d005      	beq.n	801a0f4 <I2C_ITError+0x44>
 801a0e8:	7bfb      	ldrb	r3, [r7, #15]
 801a0ea:	2b29      	cmp	r3, #41	; 0x29
 801a0ec:	d002      	beq.n	801a0f4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801a0ee:	7bfb      	ldrb	r3, [r7, #15]
 801a0f0:	2b2a      	cmp	r3, #42	; 0x2a
 801a0f2:	d10b      	bne.n	801a10c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a0f4:	2103      	movs	r1, #3
 801a0f6:	6878      	ldr	r0, [r7, #4]
 801a0f8:	f000 fc4a 	bl	801a990 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	2228      	movs	r2, #40	; 0x28
 801a100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	4a50      	ldr	r2, [pc, #320]	; (801a248 <I2C_ITError+0x198>)
 801a108:	635a      	str	r2, [r3, #52]	; 0x34
 801a10a:	e011      	b.n	801a130 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a10c:	f248 0103 	movw	r1, #32771	; 0x8003
 801a110:	6878      	ldr	r0, [r7, #4]
 801a112:	f000 fc3d 	bl	801a990 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a11c:	b2db      	uxtb	r3, r3
 801a11e:	2b60      	cmp	r3, #96	; 0x60
 801a120:	d003      	beq.n	801a12a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	2220      	movs	r2, #32
 801a126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	2200      	movs	r2, #0
 801a12e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a134:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d039      	beq.n	801a1b2 <I2C_ITError+0x102>
 801a13e:	68bb      	ldr	r3, [r7, #8]
 801a140:	2b11      	cmp	r3, #17
 801a142:	d002      	beq.n	801a14a <I2C_ITError+0x9a>
 801a144:	68bb      	ldr	r3, [r7, #8]
 801a146:	2b21      	cmp	r3, #33	; 0x21
 801a148:	d133      	bne.n	801a1b2 <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a158:	d107      	bne.n	801a16a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	681a      	ldr	r2, [r3, #0]
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a168:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a16e:	4618      	mov	r0, r3
 801a170:	f7fd fab6 	bl	80176e0 <HAL_DMA_GetState>
 801a174:	4603      	mov	r3, r0
 801a176:	2b01      	cmp	r3, #1
 801a178:	d017      	beq.n	801a1aa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a17e:	4a33      	ldr	r2, [pc, #204]	; (801a24c <I2C_ITError+0x19c>)
 801a180:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	2200      	movs	r2, #0
 801a186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a18e:	4618      	mov	r0, r3
 801a190:	f7fc f938 	bl	8016404 <HAL_DMA_Abort_IT>
 801a194:	4603      	mov	r3, r0
 801a196:	2b00      	cmp	r3, #0
 801a198:	d04d      	beq.n	801a236 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1a0:	687a      	ldr	r2, [r7, #4]
 801a1a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801a1a4:	4610      	mov	r0, r2
 801a1a6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801a1a8:	e045      	b.n	801a236 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801a1aa:	6878      	ldr	r0, [r7, #4]
 801a1ac:	f000 f850 	bl	801a250 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801a1b0:	e041      	b.n	801a236 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d039      	beq.n	801a22e <I2C_ITError+0x17e>
 801a1ba:	68bb      	ldr	r3, [r7, #8]
 801a1bc:	2b12      	cmp	r3, #18
 801a1be:	d002      	beq.n	801a1c6 <I2C_ITError+0x116>
 801a1c0:	68bb      	ldr	r3, [r7, #8]
 801a1c2:	2b22      	cmp	r3, #34	; 0x22
 801a1c4:	d133      	bne.n	801a22e <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a1d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a1d4:	d107      	bne.n	801a1e6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	681a      	ldr	r2, [r3, #0]
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a1e4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f7fd fa78 	bl	80176e0 <HAL_DMA_GetState>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	2b01      	cmp	r3, #1
 801a1f4:	d017      	beq.n	801a226 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1fa:	4a14      	ldr	r2, [pc, #80]	; (801a24c <I2C_ITError+0x19c>)
 801a1fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	2200      	movs	r2, #0
 801a202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a20a:	4618      	mov	r0, r3
 801a20c:	f7fc f8fa 	bl	8016404 <HAL_DMA_Abort_IT>
 801a210:	4603      	mov	r3, r0
 801a212:	2b00      	cmp	r3, #0
 801a214:	d011      	beq.n	801a23a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a21c:	687a      	ldr	r2, [r7, #4]
 801a21e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801a220:	4610      	mov	r0, r2
 801a222:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801a224:	e009      	b.n	801a23a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801a226:	6878      	ldr	r0, [r7, #4]
 801a228:	f000 f812 	bl	801a250 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801a22c:	e005      	b.n	801a23a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801a22e:	6878      	ldr	r0, [r7, #4]
 801a230:	f000 f80e 	bl	801a250 <I2C_TreatErrorCallback>
  }
}
 801a234:	e002      	b.n	801a23c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801a236:	bf00      	nop
 801a238:	e000      	b.n	801a23c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801a23a:	bf00      	nop
}
 801a23c:	bf00      	nop
 801a23e:	3710      	adds	r7, #16
 801a240:	46bd      	mov	sp, r7
 801a242:	bd80      	pop	{r7, pc}
 801a244:	ffff0000 	.word	0xffff0000
 801a248:	08018f45 	.word	0x08018f45
 801a24c:	0801a5ed 	.word	0x0801a5ed

0801a250 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b082      	sub	sp, #8
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a25e:	b2db      	uxtb	r3, r3
 801a260:	2b60      	cmp	r3, #96	; 0x60
 801a262:	d10e      	bne.n	801a282 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	2220      	movs	r2, #32
 801a268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	2200      	movs	r2, #0
 801a270:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	2200      	movs	r2, #0
 801a276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801a27a:	6878      	ldr	r0, [r7, #4]
 801a27c:	f7fe fd2f 	bl	8018cde <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a280:	e009      	b.n	801a296 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	2200      	movs	r2, #0
 801a286:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	2200      	movs	r2, #0
 801a28c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 801a290:	6878      	ldr	r0, [r7, #4]
 801a292:	f7fe fd1a 	bl	8018cca <HAL_I2C_ErrorCallback>
}
 801a296:	bf00      	nop
 801a298:	3708      	adds	r7, #8
 801a29a:	46bd      	mov	sp, r7
 801a29c:	bd80      	pop	{r7, pc}

0801a29e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801a29e:	b480      	push	{r7}
 801a2a0:	b083      	sub	sp, #12
 801a2a2:	af00      	add	r7, sp, #0
 801a2a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	699b      	ldr	r3, [r3, #24]
 801a2ac:	f003 0302 	and.w	r3, r3, #2
 801a2b0:	2b02      	cmp	r3, #2
 801a2b2:	d103      	bne.n	801a2bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	699b      	ldr	r3, [r3, #24]
 801a2c2:	f003 0301 	and.w	r3, r3, #1
 801a2c6:	2b01      	cmp	r3, #1
 801a2c8:	d007      	beq.n	801a2da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	699a      	ldr	r2, [r3, #24]
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	f042 0201 	orr.w	r2, r2, #1
 801a2d8:	619a      	str	r2, [r3, #24]
  }
}
 801a2da:	bf00      	nop
 801a2dc:	370c      	adds	r7, #12
 801a2de:	46bd      	mov	sp, r7
 801a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e4:	4770      	bx	lr

0801a2e6 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801a2e6:	b580      	push	{r7, lr}
 801a2e8:	b084      	sub	sp, #16
 801a2ea:	af00      	add	r7, sp, #0
 801a2ec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2f2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	681a      	ldr	r2, [r3, #0]
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a302:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a308:	b29b      	uxth	r3, r3
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d104      	bne.n	801a318 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801a30e:	2120      	movs	r1, #32
 801a310:	68f8      	ldr	r0, [r7, #12]
 801a312:	f000 fad9 	bl	801a8c8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801a316:	e02d      	b.n	801a374 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a31c:	68fa      	ldr	r2, [r7, #12]
 801a31e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801a320:	441a      	add	r2, r3
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a32a:	b29b      	uxth	r3, r3
 801a32c:	2bff      	cmp	r3, #255	; 0xff
 801a32e:	d903      	bls.n	801a338 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	22ff      	movs	r2, #255	; 0xff
 801a334:	851a      	strh	r2, [r3, #40]	; 0x28
 801a336:	e004      	b.n	801a342 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a33c:	b29a      	uxth	r2, r3
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	3324      	adds	r3, #36	; 0x24
 801a34c:	4619      	mov	r1, r3
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a352:	461a      	mov	r2, r3
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a358:	f7fb fdea 	bl	8015f30 <HAL_DMA_Start_IT>
 801a35c:	4603      	mov	r3, r0
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d004      	beq.n	801a36c <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801a362:	2110      	movs	r1, #16
 801a364:	68f8      	ldr	r0, [r7, #12]
 801a366:	f7ff fea3 	bl	801a0b0 <I2C_ITError>
}
 801a36a:	e003      	b.n	801a374 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801a36c:	2140      	movs	r1, #64	; 0x40
 801a36e:	68f8      	ldr	r0, [r7, #12]
 801a370:	f000 faaa 	bl	801a8c8 <I2C_Enable_IRQ>
}
 801a374:	bf00      	nop
 801a376:	3710      	adds	r7, #16
 801a378:	46bd      	mov	sp, r7
 801a37a:	bd80      	pop	{r7, pc}

0801a37c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b084      	sub	sp, #16
 801a380:	af00      	add	r7, sp, #0
 801a382:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 801a384:	2300      	movs	r3, #0
 801a386:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a38c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 801a38e:	68bb      	ldr	r3, [r7, #8]
 801a390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a392:	2b00      	cmp	r3, #0
 801a394:	d076      	beq.n	801a484 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 801a396:	68bb      	ldr	r3, [r7, #8]
 801a398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	4a83      	ldr	r2, [pc, #524]	; (801a5ac <I2C_DMAError+0x230>)
 801a39e:	4293      	cmp	r3, r2
 801a3a0:	d059      	beq.n	801a456 <I2C_DMAError+0xda>
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	4a81      	ldr	r2, [pc, #516]	; (801a5b0 <I2C_DMAError+0x234>)
 801a3aa:	4293      	cmp	r3, r2
 801a3ac:	d053      	beq.n	801a456 <I2C_DMAError+0xda>
 801a3ae:	68bb      	ldr	r3, [r7, #8]
 801a3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	4a7f      	ldr	r2, [pc, #508]	; (801a5b4 <I2C_DMAError+0x238>)
 801a3b6:	4293      	cmp	r3, r2
 801a3b8:	d04d      	beq.n	801a456 <I2C_DMAError+0xda>
 801a3ba:	68bb      	ldr	r3, [r7, #8]
 801a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	4a7d      	ldr	r2, [pc, #500]	; (801a5b8 <I2C_DMAError+0x23c>)
 801a3c2:	4293      	cmp	r3, r2
 801a3c4:	d047      	beq.n	801a456 <I2C_DMAError+0xda>
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	4a7b      	ldr	r2, [pc, #492]	; (801a5bc <I2C_DMAError+0x240>)
 801a3ce:	4293      	cmp	r3, r2
 801a3d0:	d041      	beq.n	801a456 <I2C_DMAError+0xda>
 801a3d2:	68bb      	ldr	r3, [r7, #8]
 801a3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	4a79      	ldr	r2, [pc, #484]	; (801a5c0 <I2C_DMAError+0x244>)
 801a3da:	4293      	cmp	r3, r2
 801a3dc:	d03b      	beq.n	801a456 <I2C_DMAError+0xda>
 801a3de:	68bb      	ldr	r3, [r7, #8]
 801a3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	4a77      	ldr	r2, [pc, #476]	; (801a5c4 <I2C_DMAError+0x248>)
 801a3e6:	4293      	cmp	r3, r2
 801a3e8:	d035      	beq.n	801a456 <I2C_DMAError+0xda>
 801a3ea:	68bb      	ldr	r3, [r7, #8]
 801a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	4a75      	ldr	r2, [pc, #468]	; (801a5c8 <I2C_DMAError+0x24c>)
 801a3f2:	4293      	cmp	r3, r2
 801a3f4:	d02f      	beq.n	801a456 <I2C_DMAError+0xda>
 801a3f6:	68bb      	ldr	r3, [r7, #8]
 801a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	4a73      	ldr	r2, [pc, #460]	; (801a5cc <I2C_DMAError+0x250>)
 801a3fe:	4293      	cmp	r3, r2
 801a400:	d029      	beq.n	801a456 <I2C_DMAError+0xda>
 801a402:	68bb      	ldr	r3, [r7, #8]
 801a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	4a71      	ldr	r2, [pc, #452]	; (801a5d0 <I2C_DMAError+0x254>)
 801a40a:	4293      	cmp	r3, r2
 801a40c:	d023      	beq.n	801a456 <I2C_DMAError+0xda>
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	4a6f      	ldr	r2, [pc, #444]	; (801a5d4 <I2C_DMAError+0x258>)
 801a416:	4293      	cmp	r3, r2
 801a418:	d01d      	beq.n	801a456 <I2C_DMAError+0xda>
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	4a6d      	ldr	r2, [pc, #436]	; (801a5d8 <I2C_DMAError+0x25c>)
 801a422:	4293      	cmp	r3, r2
 801a424:	d017      	beq.n	801a456 <I2C_DMAError+0xda>
 801a426:	68bb      	ldr	r3, [r7, #8]
 801a428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	4a6b      	ldr	r2, [pc, #428]	; (801a5dc <I2C_DMAError+0x260>)
 801a42e:	4293      	cmp	r3, r2
 801a430:	d011      	beq.n	801a456 <I2C_DMAError+0xda>
 801a432:	68bb      	ldr	r3, [r7, #8]
 801a434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	4a69      	ldr	r2, [pc, #420]	; (801a5e0 <I2C_DMAError+0x264>)
 801a43a:	4293      	cmp	r3, r2
 801a43c:	d00b      	beq.n	801a456 <I2C_DMAError+0xda>
 801a43e:	68bb      	ldr	r3, [r7, #8]
 801a440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	4a67      	ldr	r2, [pc, #412]	; (801a5e4 <I2C_DMAError+0x268>)
 801a446:	4293      	cmp	r3, r2
 801a448:	d005      	beq.n	801a456 <I2C_DMAError+0xda>
 801a44a:	68bb      	ldr	r3, [r7, #8]
 801a44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	4a65      	ldr	r2, [pc, #404]	; (801a5e8 <I2C_DMAError+0x26c>)
 801a452:	4293      	cmp	r3, r2
 801a454:	d109      	bne.n	801a46a <I2C_DMAError+0xee>
 801a456:	68bb      	ldr	r3, [r7, #8]
 801a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	685b      	ldr	r3, [r3, #4]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	bf0c      	ite	eq
 801a462:	2301      	moveq	r3, #1
 801a464:	2300      	movne	r3, #0
 801a466:	b2db      	uxtb	r3, r3
 801a468:	e008      	b.n	801a47c <I2C_DMAError+0x100>
 801a46a:	68bb      	ldr	r3, [r7, #8]
 801a46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	685b      	ldr	r3, [r3, #4]
 801a472:	2b00      	cmp	r3, #0
 801a474:	bf0c      	ite	eq
 801a476:	2301      	moveq	r3, #1
 801a478:	2300      	movne	r3, #0
 801a47a:	b2db      	uxtb	r3, r3
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d001      	beq.n	801a484 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 801a480:	2301      	movs	r3, #1
 801a482:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 801a484:	68bb      	ldr	r3, [r7, #8]
 801a486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d076      	beq.n	801a57a <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 801a48c:	68bb      	ldr	r3, [r7, #8]
 801a48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	4a46      	ldr	r2, [pc, #280]	; (801a5ac <I2C_DMAError+0x230>)
 801a494:	4293      	cmp	r3, r2
 801a496:	d059      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	4a44      	ldr	r2, [pc, #272]	; (801a5b0 <I2C_DMAError+0x234>)
 801a4a0:	4293      	cmp	r3, r2
 801a4a2:	d053      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	4a42      	ldr	r2, [pc, #264]	; (801a5b4 <I2C_DMAError+0x238>)
 801a4ac:	4293      	cmp	r3, r2
 801a4ae:	d04d      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a4b0:	68bb      	ldr	r3, [r7, #8]
 801a4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	4a40      	ldr	r2, [pc, #256]	; (801a5b8 <I2C_DMAError+0x23c>)
 801a4b8:	4293      	cmp	r3, r2
 801a4ba:	d047      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a4bc:	68bb      	ldr	r3, [r7, #8]
 801a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	4a3e      	ldr	r2, [pc, #248]	; (801a5bc <I2C_DMAError+0x240>)
 801a4c4:	4293      	cmp	r3, r2
 801a4c6:	d041      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a4c8:	68bb      	ldr	r3, [r7, #8]
 801a4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	4a3c      	ldr	r2, [pc, #240]	; (801a5c0 <I2C_DMAError+0x244>)
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	d03b      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a4d4:	68bb      	ldr	r3, [r7, #8]
 801a4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	4a3a      	ldr	r2, [pc, #232]	; (801a5c4 <I2C_DMAError+0x248>)
 801a4dc:	4293      	cmp	r3, r2
 801a4de:	d035      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	4a38      	ldr	r2, [pc, #224]	; (801a5c8 <I2C_DMAError+0x24c>)
 801a4e8:	4293      	cmp	r3, r2
 801a4ea:	d02f      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a4ec:	68bb      	ldr	r3, [r7, #8]
 801a4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	4a36      	ldr	r2, [pc, #216]	; (801a5cc <I2C_DMAError+0x250>)
 801a4f4:	4293      	cmp	r3, r2
 801a4f6:	d029      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a4f8:	68bb      	ldr	r3, [r7, #8]
 801a4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	4a34      	ldr	r2, [pc, #208]	; (801a5d0 <I2C_DMAError+0x254>)
 801a500:	4293      	cmp	r3, r2
 801a502:	d023      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a504:	68bb      	ldr	r3, [r7, #8]
 801a506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	4a32      	ldr	r2, [pc, #200]	; (801a5d4 <I2C_DMAError+0x258>)
 801a50c:	4293      	cmp	r3, r2
 801a50e:	d01d      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a510:	68bb      	ldr	r3, [r7, #8]
 801a512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	4a30      	ldr	r2, [pc, #192]	; (801a5d8 <I2C_DMAError+0x25c>)
 801a518:	4293      	cmp	r3, r2
 801a51a:	d017      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a51c:	68bb      	ldr	r3, [r7, #8]
 801a51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	4a2e      	ldr	r2, [pc, #184]	; (801a5dc <I2C_DMAError+0x260>)
 801a524:	4293      	cmp	r3, r2
 801a526:	d011      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a528:	68bb      	ldr	r3, [r7, #8]
 801a52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	4a2c      	ldr	r2, [pc, #176]	; (801a5e0 <I2C_DMAError+0x264>)
 801a530:	4293      	cmp	r3, r2
 801a532:	d00b      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a534:	68bb      	ldr	r3, [r7, #8]
 801a536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	4a2a      	ldr	r2, [pc, #168]	; (801a5e4 <I2C_DMAError+0x268>)
 801a53c:	4293      	cmp	r3, r2
 801a53e:	d005      	beq.n	801a54c <I2C_DMAError+0x1d0>
 801a540:	68bb      	ldr	r3, [r7, #8]
 801a542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	4a28      	ldr	r2, [pc, #160]	; (801a5e8 <I2C_DMAError+0x26c>)
 801a548:	4293      	cmp	r3, r2
 801a54a:	d109      	bne.n	801a560 <I2C_DMAError+0x1e4>
 801a54c:	68bb      	ldr	r3, [r7, #8]
 801a54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	685b      	ldr	r3, [r3, #4]
 801a554:	2b00      	cmp	r3, #0
 801a556:	bf0c      	ite	eq
 801a558:	2301      	moveq	r3, #1
 801a55a:	2300      	movne	r3, #0
 801a55c:	b2db      	uxtb	r3, r3
 801a55e:	e008      	b.n	801a572 <I2C_DMAError+0x1f6>
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	685b      	ldr	r3, [r3, #4]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	bf0c      	ite	eq
 801a56c:	2301      	moveq	r3, #1
 801a56e:	2300      	movne	r3, #0
 801a570:	b2db      	uxtb	r3, r3
 801a572:	2b00      	cmp	r3, #0
 801a574:	d001      	beq.n	801a57a <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 801a576:	2301      	movs	r3, #1
 801a578:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 801a57a:	6878      	ldr	r0, [r7, #4]
 801a57c:	f7fd f8be 	bl	80176fc <HAL_DMA_GetError>
 801a580:	4603      	mov	r3, r0
 801a582:	2b02      	cmp	r3, #2
 801a584:	d00e      	beq.n	801a5a4 <I2C_DMAError+0x228>
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d00b      	beq.n	801a5a4 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801a58c:	68bb      	ldr	r3, [r7, #8]
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	685a      	ldr	r2, [r3, #4]
 801a592:	68bb      	ldr	r3, [r7, #8]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a59a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801a59c:	2110      	movs	r1, #16
 801a59e:	68b8      	ldr	r0, [r7, #8]
 801a5a0:	f7ff fd86 	bl	801a0b0 <I2C_ITError>
  }
}
 801a5a4:	bf00      	nop
 801a5a6:	3710      	adds	r7, #16
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	bd80      	pop	{r7, pc}
 801a5ac:	40020010 	.word	0x40020010
 801a5b0:	40020028 	.word	0x40020028
 801a5b4:	40020040 	.word	0x40020040
 801a5b8:	40020058 	.word	0x40020058
 801a5bc:	40020070 	.word	0x40020070
 801a5c0:	40020088 	.word	0x40020088
 801a5c4:	400200a0 	.word	0x400200a0
 801a5c8:	400200b8 	.word	0x400200b8
 801a5cc:	40020410 	.word	0x40020410
 801a5d0:	40020428 	.word	0x40020428
 801a5d4:	40020440 	.word	0x40020440
 801a5d8:	40020458 	.word	0x40020458
 801a5dc:	40020470 	.word	0x40020470
 801a5e0:	40020488 	.word	0x40020488
 801a5e4:	400204a0 	.word	0x400204a0
 801a5e8:	400204b8 	.word	0x400204b8

0801a5ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b084      	sub	sp, #16
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5f8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d003      	beq.n	801a60a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a606:	2200      	movs	r2, #0
 801a608:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d003      	beq.n	801a61a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a616:	2200      	movs	r2, #0
 801a618:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 801a61a:	68f8      	ldr	r0, [r7, #12]
 801a61c:	f7ff fe18 	bl	801a250 <I2C_TreatErrorCallback>
}
 801a620:	bf00      	nop
 801a622:	3710      	adds	r7, #16
 801a624:	46bd      	mov	sp, r7
 801a626:	bd80      	pop	{r7, pc}

0801a628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b084      	sub	sp, #16
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	60f8      	str	r0, [r7, #12]
 801a630:	60b9      	str	r1, [r7, #8]
 801a632:	603b      	str	r3, [r7, #0]
 801a634:	4613      	mov	r3, r2
 801a636:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a638:	e022      	b.n	801a680 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a63a:	683b      	ldr	r3, [r7, #0]
 801a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a640:	d01e      	beq.n	801a680 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a642:	f7fa f8b1 	bl	80147a8 <HAL_GetTick>
 801a646:	4602      	mov	r2, r0
 801a648:	69bb      	ldr	r3, [r7, #24]
 801a64a:	1ad3      	subs	r3, r2, r3
 801a64c:	683a      	ldr	r2, [r7, #0]
 801a64e:	429a      	cmp	r2, r3
 801a650:	d302      	bcc.n	801a658 <I2C_WaitOnFlagUntilTimeout+0x30>
 801a652:	683b      	ldr	r3, [r7, #0]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d113      	bne.n	801a680 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a65c:	f043 0220 	orr.w	r2, r3, #32
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	2220      	movs	r2, #32
 801a668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	2200      	movs	r2, #0
 801a670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	2200      	movs	r2, #0
 801a678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801a67c:	2301      	movs	r3, #1
 801a67e:	e00f      	b.n	801a6a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	699a      	ldr	r2, [r3, #24]
 801a686:	68bb      	ldr	r3, [r7, #8]
 801a688:	4013      	ands	r3, r2
 801a68a:	68ba      	ldr	r2, [r7, #8]
 801a68c:	429a      	cmp	r2, r3
 801a68e:	bf0c      	ite	eq
 801a690:	2301      	moveq	r3, #1
 801a692:	2300      	movne	r3, #0
 801a694:	b2db      	uxtb	r3, r3
 801a696:	461a      	mov	r2, r3
 801a698:	79fb      	ldrb	r3, [r7, #7]
 801a69a:	429a      	cmp	r2, r3
 801a69c:	d0cd      	beq.n	801a63a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801a69e:	2300      	movs	r3, #0
}
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	3710      	adds	r7, #16
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	bd80      	pop	{r7, pc}

0801a6a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b084      	sub	sp, #16
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	60f8      	str	r0, [r7, #12]
 801a6b0:	60b9      	str	r1, [r7, #8]
 801a6b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a6b4:	e02c      	b.n	801a710 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801a6b6:	687a      	ldr	r2, [r7, #4]
 801a6b8:	68b9      	ldr	r1, [r7, #8]
 801a6ba:	68f8      	ldr	r0, [r7, #12]
 801a6bc:	f000 f870 	bl	801a7a0 <I2C_IsAcknowledgeFailed>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d001      	beq.n	801a6ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a6c6:	2301      	movs	r3, #1
 801a6c8:	e02a      	b.n	801a720 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a6ca:	68bb      	ldr	r3, [r7, #8]
 801a6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6d0:	d01e      	beq.n	801a710 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a6d2:	f7fa f869 	bl	80147a8 <HAL_GetTick>
 801a6d6:	4602      	mov	r2, r0
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	1ad3      	subs	r3, r2, r3
 801a6dc:	68ba      	ldr	r2, [r7, #8]
 801a6de:	429a      	cmp	r2, r3
 801a6e0:	d302      	bcc.n	801a6e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801a6e2:	68bb      	ldr	r3, [r7, #8]
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d113      	bne.n	801a710 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6ec:	f043 0220 	orr.w	r2, r3, #32
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	2220      	movs	r2, #32
 801a6f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	2200      	movs	r2, #0
 801a700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	2200      	movs	r2, #0
 801a708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801a70c:	2301      	movs	r3, #1
 801a70e:	e007      	b.n	801a720 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	699b      	ldr	r3, [r3, #24]
 801a716:	f003 0302 	and.w	r3, r3, #2
 801a71a:	2b02      	cmp	r3, #2
 801a71c:	d1cb      	bne.n	801a6b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a71e:	2300      	movs	r3, #0
}
 801a720:	4618      	mov	r0, r3
 801a722:	3710      	adds	r7, #16
 801a724:	46bd      	mov	sp, r7
 801a726:	bd80      	pop	{r7, pc}

0801a728 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b084      	sub	sp, #16
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	60f8      	str	r0, [r7, #12]
 801a730:	60b9      	str	r1, [r7, #8]
 801a732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a734:	e028      	b.n	801a788 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801a736:	687a      	ldr	r2, [r7, #4]
 801a738:	68b9      	ldr	r1, [r7, #8]
 801a73a:	68f8      	ldr	r0, [r7, #12]
 801a73c:	f000 f830 	bl	801a7a0 <I2C_IsAcknowledgeFailed>
 801a740:	4603      	mov	r3, r0
 801a742:	2b00      	cmp	r3, #0
 801a744:	d001      	beq.n	801a74a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a746:	2301      	movs	r3, #1
 801a748:	e026      	b.n	801a798 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a74a:	f7fa f82d 	bl	80147a8 <HAL_GetTick>
 801a74e:	4602      	mov	r2, r0
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	1ad3      	subs	r3, r2, r3
 801a754:	68ba      	ldr	r2, [r7, #8]
 801a756:	429a      	cmp	r2, r3
 801a758:	d302      	bcc.n	801a760 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801a75a:	68bb      	ldr	r3, [r7, #8]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d113      	bne.n	801a788 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a764:	f043 0220 	orr.w	r2, r3, #32
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	2220      	movs	r2, #32
 801a770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	2200      	movs	r2, #0
 801a778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	2200      	movs	r2, #0
 801a780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801a784:	2301      	movs	r3, #1
 801a786:	e007      	b.n	801a798 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	699b      	ldr	r3, [r3, #24]
 801a78e:	f003 0320 	and.w	r3, r3, #32
 801a792:	2b20      	cmp	r3, #32
 801a794:	d1cf      	bne.n	801a736 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801a796:	2300      	movs	r3, #0
}
 801a798:	4618      	mov	r0, r3
 801a79a:	3710      	adds	r7, #16
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}

0801a7a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b084      	sub	sp, #16
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	60f8      	str	r0, [r7, #12]
 801a7a8:	60b9      	str	r1, [r7, #8]
 801a7aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	699b      	ldr	r3, [r3, #24]
 801a7b2:	f003 0310 	and.w	r3, r3, #16
 801a7b6:	2b10      	cmp	r3, #16
 801a7b8:	d151      	bne.n	801a85e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a7ba:	e022      	b.n	801a802 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7c2:	d01e      	beq.n	801a802 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a7c4:	f7f9 fff0 	bl	80147a8 <HAL_GetTick>
 801a7c8:	4602      	mov	r2, r0
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	1ad3      	subs	r3, r2, r3
 801a7ce:	68ba      	ldr	r2, [r7, #8]
 801a7d0:	429a      	cmp	r2, r3
 801a7d2:	d302      	bcc.n	801a7da <I2C_IsAcknowledgeFailed+0x3a>
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d113      	bne.n	801a802 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a7de:	f043 0220 	orr.w	r2, r3, #32
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	2220      	movs	r2, #32
 801a7ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	2200      	movs	r2, #0
 801a7f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801a7f6:	68fb      	ldr	r3, [r7, #12]
 801a7f8:	2200      	movs	r2, #0
 801a7fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 801a7fe:	2301      	movs	r3, #1
 801a800:	e02e      	b.n	801a860 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	699b      	ldr	r3, [r3, #24]
 801a808:	f003 0320 	and.w	r3, r3, #32
 801a80c:	2b20      	cmp	r3, #32
 801a80e:	d1d5      	bne.n	801a7bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	2210      	movs	r2, #16
 801a816:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	2220      	movs	r2, #32
 801a81e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801a820:	68f8      	ldr	r0, [r7, #12]
 801a822:	f7ff fd3c 	bl	801a29e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	6859      	ldr	r1, [r3, #4]
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	681a      	ldr	r2, [r3, #0]
 801a830:	4b0d      	ldr	r3, [pc, #52]	; (801a868 <I2C_IsAcknowledgeFailed+0xc8>)
 801a832:	400b      	ands	r3, r1
 801a834:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a83a:	f043 0204 	orr.w	r2, r3, #4
 801a83e:	68fb      	ldr	r3, [r7, #12]
 801a840:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	2220      	movs	r2, #32
 801a846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	2200      	movs	r2, #0
 801a84e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	2200      	movs	r2, #0
 801a856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801a85a:	2301      	movs	r3, #1
 801a85c:	e000      	b.n	801a860 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 801a85e:	2300      	movs	r3, #0
}
 801a860:	4618      	mov	r0, r3
 801a862:	3710      	adds	r7, #16
 801a864:	46bd      	mov	sp, r7
 801a866:	bd80      	pop	{r7, pc}
 801a868:	fe00e800 	.word	0xfe00e800

0801a86c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 801a86c:	b480      	push	{r7}
 801a86e:	b085      	sub	sp, #20
 801a870:	af00      	add	r7, sp, #0
 801a872:	60f8      	str	r0, [r7, #12]
 801a874:	607b      	str	r3, [r7, #4]
 801a876:	460b      	mov	r3, r1
 801a878:	817b      	strh	r3, [r7, #10]
 801a87a:	4613      	mov	r3, r2
 801a87c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	685a      	ldr	r2, [r3, #4]
 801a884:	69bb      	ldr	r3, [r7, #24]
 801a886:	0d5b      	lsrs	r3, r3, #21
 801a888:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801a88c:	4b0d      	ldr	r3, [pc, #52]	; (801a8c4 <I2C_TransferConfig+0x58>)
 801a88e:	430b      	orrs	r3, r1
 801a890:	43db      	mvns	r3, r3
 801a892:	ea02 0103 	and.w	r1, r2, r3
 801a896:	897b      	ldrh	r3, [r7, #10]
 801a898:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801a89c:	7a7b      	ldrb	r3, [r7, #9]
 801a89e:	041b      	lsls	r3, r3, #16
 801a8a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801a8a4:	431a      	orrs	r2, r3
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	431a      	orrs	r2, r3
 801a8aa:	69bb      	ldr	r3, [r7, #24]
 801a8ac:	431a      	orrs	r2, r3
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	430a      	orrs	r2, r1
 801a8b4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 801a8b6:	bf00      	nop
 801a8b8:	3714      	adds	r7, #20
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8c0:	4770      	bx	lr
 801a8c2:	bf00      	nop
 801a8c4:	03ff63ff 	.word	0x03ff63ff

0801a8c8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801a8c8:	b480      	push	{r7}
 801a8ca:	b085      	sub	sp, #20
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
 801a8d0:	460b      	mov	r3, r1
 801a8d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8dc:	4a2a      	ldr	r2, [pc, #168]	; (801a988 <I2C_Enable_IRQ+0xc0>)
 801a8de:	4293      	cmp	r3, r2
 801a8e0:	d004      	beq.n	801a8ec <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801a8e6:	4a29      	ldr	r2, [pc, #164]	; (801a98c <I2C_Enable_IRQ+0xc4>)
 801a8e8:	4293      	cmp	r3, r2
 801a8ea:	d11d      	bne.n	801a928 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801a8ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	da03      	bge.n	801a8fc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801a8fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801a8fc:	887b      	ldrh	r3, [r7, #2]
 801a8fe:	2b10      	cmp	r3, #16
 801a900:	d103      	bne.n	801a90a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801a908:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801a90a:	887b      	ldrh	r3, [r7, #2]
 801a90c:	2b20      	cmp	r3, #32
 801a90e:	d103      	bne.n	801a918 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801a916:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801a918:	887b      	ldrh	r3, [r7, #2]
 801a91a:	2b40      	cmp	r3, #64	; 0x40
 801a91c:	d125      	bne.n	801a96a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a924:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801a926:	e020      	b.n	801a96a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801a928:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	da03      	bge.n	801a938 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801a936:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801a938:	887b      	ldrh	r3, [r7, #2]
 801a93a:	f003 0301 	and.w	r3, r3, #1
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d003      	beq.n	801a94a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 801a948:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801a94a:	887b      	ldrh	r3, [r7, #2]
 801a94c:	f003 0302 	and.w	r3, r3, #2
 801a950:	2b00      	cmp	r3, #0
 801a952:	d003      	beq.n	801a95c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 801a95a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801a95c:	887b      	ldrh	r3, [r7, #2]
 801a95e:	2b20      	cmp	r3, #32
 801a960:	d103      	bne.n	801a96a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	f043 0320 	orr.w	r3, r3, #32
 801a968:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	6819      	ldr	r1, [r3, #0]
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	68fa      	ldr	r2, [r7, #12]
 801a976:	430a      	orrs	r2, r1
 801a978:	601a      	str	r2, [r3, #0]
}
 801a97a:	bf00      	nop
 801a97c:	3714      	adds	r7, #20
 801a97e:	46bd      	mov	sp, r7
 801a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a984:	4770      	bx	lr
 801a986:	bf00      	nop
 801a988:	0801914b 	.word	0x0801914b
 801a98c:	08019331 	.word	0x08019331

0801a990 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801a990:	b480      	push	{r7}
 801a992:	b085      	sub	sp, #20
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
 801a998:	460b      	mov	r3, r1
 801a99a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801a99c:	2300      	movs	r3, #0
 801a99e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801a9a0:	887b      	ldrh	r3, [r7, #2]
 801a9a2:	f003 0301 	and.w	r3, r3, #1
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d00f      	beq.n	801a9ca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 801a9b0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a9b8:	b2db      	uxtb	r3, r3
 801a9ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801a9be:	2b28      	cmp	r3, #40	; 0x28
 801a9c0:	d003      	beq.n	801a9ca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801a9c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801a9ca:	887b      	ldrh	r3, [r7, #2]
 801a9cc:	f003 0302 	and.w	r3, r3, #2
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d00f      	beq.n	801a9f4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 801a9da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a9e2:	b2db      	uxtb	r3, r3
 801a9e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801a9e8:	2b28      	cmp	r3, #40	; 0x28
 801a9ea:	d003      	beq.n	801a9f4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801a9f2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801a9f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	da03      	bge.n	801aa04 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801aa02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801aa04:	887b      	ldrh	r3, [r7, #2]
 801aa06:	2b10      	cmp	r3, #16
 801aa08:	d103      	bne.n	801aa12 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801aa10:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801aa12:	887b      	ldrh	r3, [r7, #2]
 801aa14:	2b20      	cmp	r3, #32
 801aa16:	d103      	bne.n	801aa20 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	f043 0320 	orr.w	r3, r3, #32
 801aa1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801aa20:	887b      	ldrh	r3, [r7, #2]
 801aa22:	2b40      	cmp	r3, #64	; 0x40
 801aa24:	d103      	bne.n	801aa2e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa2c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	6819      	ldr	r1, [r3, #0]
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	43da      	mvns	r2, r3
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	400a      	ands	r2, r1
 801aa3e:	601a      	str	r2, [r3, #0]
}
 801aa40:	bf00      	nop
 801aa42:	3714      	adds	r7, #20
 801aa44:	46bd      	mov	sp, r7
 801aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa4a:	4770      	bx	lr

0801aa4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801aa4c:	b480      	push	{r7}
 801aa4e:	b083      	sub	sp, #12
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	6078      	str	r0, [r7, #4]
 801aa54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801aa5c:	b2db      	uxtb	r3, r3
 801aa5e:	2b20      	cmp	r3, #32
 801aa60:	d138      	bne.n	801aad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aa68:	2b01      	cmp	r3, #1
 801aa6a:	d101      	bne.n	801aa70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801aa6c:	2302      	movs	r3, #2
 801aa6e:	e032      	b.n	801aad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	2201      	movs	r2, #1
 801aa74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	2224      	movs	r2, #36	; 0x24
 801aa7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	681a      	ldr	r2, [r3, #0]
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	f022 0201 	bic.w	r2, r2, #1
 801aa8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	681a      	ldr	r2, [r3, #0]
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801aa9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	6819      	ldr	r1, [r3, #0]
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	683a      	ldr	r2, [r7, #0]
 801aaac:	430a      	orrs	r2, r1
 801aaae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	681a      	ldr	r2, [r3, #0]
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	f042 0201 	orr.w	r2, r2, #1
 801aabe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	2220      	movs	r2, #32
 801aac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2200      	movs	r2, #0
 801aacc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801aad0:	2300      	movs	r3, #0
 801aad2:	e000      	b.n	801aad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801aad4:	2302      	movs	r3, #2
  }
}
 801aad6:	4618      	mov	r0, r3
 801aad8:	370c      	adds	r7, #12
 801aada:	46bd      	mov	sp, r7
 801aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae0:	4770      	bx	lr

0801aae2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801aae2:	b480      	push	{r7}
 801aae4:	b085      	sub	sp, #20
 801aae6:	af00      	add	r7, sp, #0
 801aae8:	6078      	str	r0, [r7, #4]
 801aaea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801aaf2:	b2db      	uxtb	r3, r3
 801aaf4:	2b20      	cmp	r3, #32
 801aaf6:	d139      	bne.n	801ab6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aafe:	2b01      	cmp	r3, #1
 801ab00:	d101      	bne.n	801ab06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801ab02:	2302      	movs	r3, #2
 801ab04:	e033      	b.n	801ab6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	2201      	movs	r2, #1
 801ab0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	2224      	movs	r2, #36	; 0x24
 801ab12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	681a      	ldr	r2, [r3, #0]
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	f022 0201 	bic.w	r2, r2, #1
 801ab24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801ab34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801ab36:	683b      	ldr	r3, [r7, #0]
 801ab38:	021b      	lsls	r3, r3, #8
 801ab3a:	68fa      	ldr	r2, [r7, #12]
 801ab3c:	4313      	orrs	r3, r2
 801ab3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	68fa      	ldr	r2, [r7, #12]
 801ab46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	681a      	ldr	r2, [r3, #0]
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	f042 0201 	orr.w	r2, r2, #1
 801ab56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	2220      	movs	r2, #32
 801ab5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	2200      	movs	r2, #0
 801ab64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801ab68:	2300      	movs	r3, #0
 801ab6a:	e000      	b.n	801ab6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801ab6c:	2302      	movs	r3, #2
  }
}
 801ab6e:	4618      	mov	r0, r3
 801ab70:	3714      	adds	r7, #20
 801ab72:	46bd      	mov	sp, r7
 801ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab78:	4770      	bx	lr

0801ab7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801ab7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab7c:	b08f      	sub	sp, #60	; 0x3c
 801ab7e:	af0a      	add	r7, sp, #40	; 0x28
 801ab80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d101      	bne.n	801ab8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801ab88:	2301      	movs	r3, #1
 801ab8a:	e116      	b.n	801adba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 801ab98:	b2db      	uxtb	r3, r3
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d106      	bne.n	801abac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	2200      	movs	r2, #0
 801aba2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801aba6:	6878      	ldr	r0, [r7, #4]
 801aba8:	f7f9 fd2c 	bl	8014604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	2203      	movs	r2, #3
 801abb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801abb4:	68bb      	ldr	r3, [r7, #8]
 801abb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801abb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d102      	bne.n	801abc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	2200      	movs	r2, #0
 801abc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	4618      	mov	r0, r3
 801abcc:	f008 fa1a 	bl	8023004 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	603b      	str	r3, [r7, #0]
 801abd6:	687e      	ldr	r6, [r7, #4]
 801abd8:	466d      	mov	r5, sp
 801abda:	f106 0410 	add.w	r4, r6, #16
 801abde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801abe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801abe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801abe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801abe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 801abea:	e885 0003 	stmia.w	r5, {r0, r1}
 801abee:	1d33      	adds	r3, r6, #4
 801abf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801abf2:	6838      	ldr	r0, [r7, #0]
 801abf4:	f008 f9a4 	bl	8022f40 <USB_CoreInit>
 801abf8:	4603      	mov	r3, r0
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d005      	beq.n	801ac0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	2202      	movs	r2, #2
 801ac02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801ac06:	2301      	movs	r3, #1
 801ac08:	e0d7      	b.n	801adba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	2100      	movs	r1, #0
 801ac10:	4618      	mov	r0, r3
 801ac12:	f008 fa08 	bl	8023026 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801ac16:	2300      	movs	r3, #0
 801ac18:	73fb      	strb	r3, [r7, #15]
 801ac1a:	e04a      	b.n	801acb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801ac1c:	7bfa      	ldrb	r2, [r7, #15]
 801ac1e:	6879      	ldr	r1, [r7, #4]
 801ac20:	4613      	mov	r3, r2
 801ac22:	00db      	lsls	r3, r3, #3
 801ac24:	1a9b      	subs	r3, r3, r2
 801ac26:	009b      	lsls	r3, r3, #2
 801ac28:	440b      	add	r3, r1
 801ac2a:	333d      	adds	r3, #61	; 0x3d
 801ac2c:	2201      	movs	r2, #1
 801ac2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801ac30:	7bfa      	ldrb	r2, [r7, #15]
 801ac32:	6879      	ldr	r1, [r7, #4]
 801ac34:	4613      	mov	r3, r2
 801ac36:	00db      	lsls	r3, r3, #3
 801ac38:	1a9b      	subs	r3, r3, r2
 801ac3a:	009b      	lsls	r3, r3, #2
 801ac3c:	440b      	add	r3, r1
 801ac3e:	333c      	adds	r3, #60	; 0x3c
 801ac40:	7bfa      	ldrb	r2, [r7, #15]
 801ac42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 801ac44:	7bfa      	ldrb	r2, [r7, #15]
 801ac46:	7bfb      	ldrb	r3, [r7, #15]
 801ac48:	b298      	uxth	r0, r3
 801ac4a:	6879      	ldr	r1, [r7, #4]
 801ac4c:	4613      	mov	r3, r2
 801ac4e:	00db      	lsls	r3, r3, #3
 801ac50:	1a9b      	subs	r3, r3, r2
 801ac52:	009b      	lsls	r3, r3, #2
 801ac54:	440b      	add	r3, r1
 801ac56:	3342      	adds	r3, #66	; 0x42
 801ac58:	4602      	mov	r2, r0
 801ac5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801ac5c:	7bfa      	ldrb	r2, [r7, #15]
 801ac5e:	6879      	ldr	r1, [r7, #4]
 801ac60:	4613      	mov	r3, r2
 801ac62:	00db      	lsls	r3, r3, #3
 801ac64:	1a9b      	subs	r3, r3, r2
 801ac66:	009b      	lsls	r3, r3, #2
 801ac68:	440b      	add	r3, r1
 801ac6a:	333f      	adds	r3, #63	; 0x3f
 801ac6c:	2200      	movs	r2, #0
 801ac6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801ac70:	7bfa      	ldrb	r2, [r7, #15]
 801ac72:	6879      	ldr	r1, [r7, #4]
 801ac74:	4613      	mov	r3, r2
 801ac76:	00db      	lsls	r3, r3, #3
 801ac78:	1a9b      	subs	r3, r3, r2
 801ac7a:	009b      	lsls	r3, r3, #2
 801ac7c:	440b      	add	r3, r1
 801ac7e:	3344      	adds	r3, #68	; 0x44
 801ac80:	2200      	movs	r2, #0
 801ac82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801ac84:	7bfa      	ldrb	r2, [r7, #15]
 801ac86:	6879      	ldr	r1, [r7, #4]
 801ac88:	4613      	mov	r3, r2
 801ac8a:	00db      	lsls	r3, r3, #3
 801ac8c:	1a9b      	subs	r3, r3, r2
 801ac8e:	009b      	lsls	r3, r3, #2
 801ac90:	440b      	add	r3, r1
 801ac92:	3348      	adds	r3, #72	; 0x48
 801ac94:	2200      	movs	r2, #0
 801ac96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801ac98:	7bfa      	ldrb	r2, [r7, #15]
 801ac9a:	6879      	ldr	r1, [r7, #4]
 801ac9c:	4613      	mov	r3, r2
 801ac9e:	00db      	lsls	r3, r3, #3
 801aca0:	1a9b      	subs	r3, r3, r2
 801aca2:	009b      	lsls	r3, r3, #2
 801aca4:	440b      	add	r3, r1
 801aca6:	3350      	adds	r3, #80	; 0x50
 801aca8:	2200      	movs	r2, #0
 801acaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801acac:	7bfb      	ldrb	r3, [r7, #15]
 801acae:	3301      	adds	r3, #1
 801acb0:	73fb      	strb	r3, [r7, #15]
 801acb2:	7bfa      	ldrb	r2, [r7, #15]
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	685b      	ldr	r3, [r3, #4]
 801acb8:	429a      	cmp	r2, r3
 801acba:	d3af      	bcc.n	801ac1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801acbc:	2300      	movs	r3, #0
 801acbe:	73fb      	strb	r3, [r7, #15]
 801acc0:	e044      	b.n	801ad4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801acc2:	7bfa      	ldrb	r2, [r7, #15]
 801acc4:	6879      	ldr	r1, [r7, #4]
 801acc6:	4613      	mov	r3, r2
 801acc8:	00db      	lsls	r3, r3, #3
 801acca:	1a9b      	subs	r3, r3, r2
 801accc:	009b      	lsls	r3, r3, #2
 801acce:	440b      	add	r3, r1
 801acd0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 801acd4:	2200      	movs	r2, #0
 801acd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801acd8:	7bfa      	ldrb	r2, [r7, #15]
 801acda:	6879      	ldr	r1, [r7, #4]
 801acdc:	4613      	mov	r3, r2
 801acde:	00db      	lsls	r3, r3, #3
 801ace0:	1a9b      	subs	r3, r3, r2
 801ace2:	009b      	lsls	r3, r3, #2
 801ace4:	440b      	add	r3, r1
 801ace6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801acea:	7bfa      	ldrb	r2, [r7, #15]
 801acec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801acee:	7bfa      	ldrb	r2, [r7, #15]
 801acf0:	6879      	ldr	r1, [r7, #4]
 801acf2:	4613      	mov	r3, r2
 801acf4:	00db      	lsls	r3, r3, #3
 801acf6:	1a9b      	subs	r3, r3, r2
 801acf8:	009b      	lsls	r3, r3, #2
 801acfa:	440b      	add	r3, r1
 801acfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801ad00:	2200      	movs	r2, #0
 801ad02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801ad04:	7bfa      	ldrb	r2, [r7, #15]
 801ad06:	6879      	ldr	r1, [r7, #4]
 801ad08:	4613      	mov	r3, r2
 801ad0a:	00db      	lsls	r3, r3, #3
 801ad0c:	1a9b      	subs	r3, r3, r2
 801ad0e:	009b      	lsls	r3, r3, #2
 801ad10:	440b      	add	r3, r1
 801ad12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801ad16:	2200      	movs	r2, #0
 801ad18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801ad1a:	7bfa      	ldrb	r2, [r7, #15]
 801ad1c:	6879      	ldr	r1, [r7, #4]
 801ad1e:	4613      	mov	r3, r2
 801ad20:	00db      	lsls	r3, r3, #3
 801ad22:	1a9b      	subs	r3, r3, r2
 801ad24:	009b      	lsls	r3, r3, #2
 801ad26:	440b      	add	r3, r1
 801ad28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ad2c:	2200      	movs	r2, #0
 801ad2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801ad30:	7bfa      	ldrb	r2, [r7, #15]
 801ad32:	6879      	ldr	r1, [r7, #4]
 801ad34:	4613      	mov	r3, r2
 801ad36:	00db      	lsls	r3, r3, #3
 801ad38:	1a9b      	subs	r3, r3, r2
 801ad3a:	009b      	lsls	r3, r3, #2
 801ad3c:	440b      	add	r3, r1
 801ad3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801ad42:	2200      	movs	r2, #0
 801ad44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801ad46:	7bfb      	ldrb	r3, [r7, #15]
 801ad48:	3301      	adds	r3, #1
 801ad4a:	73fb      	strb	r3, [r7, #15]
 801ad4c:	7bfa      	ldrb	r2, [r7, #15]
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	685b      	ldr	r3, [r3, #4]
 801ad52:	429a      	cmp	r2, r3
 801ad54:	d3b5      	bcc.n	801acc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	603b      	str	r3, [r7, #0]
 801ad5c:	687e      	ldr	r6, [r7, #4]
 801ad5e:	466d      	mov	r5, sp
 801ad60:	f106 0410 	add.w	r4, r6, #16
 801ad64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ad70:	e885 0003 	stmia.w	r5, {r0, r1}
 801ad74:	1d33      	adds	r3, r6, #4
 801ad76:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad78:	6838      	ldr	r0, [r7, #0]
 801ad7a:	f008 f97f 	bl	802307c <USB_DevInit>
 801ad7e:	4603      	mov	r3, r0
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d005      	beq.n	801ad90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	2202      	movs	r2, #2
 801ad88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801ad8c:	2301      	movs	r3, #1
 801ad8e:	e014      	b.n	801adba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	2200      	movs	r2, #0
 801ad94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	2201      	movs	r2, #1
 801ad9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ada4:	2b01      	cmp	r3, #1
 801ada6:	d102      	bne.n	801adae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801ada8:	6878      	ldr	r0, [r7, #4]
 801adaa:	f000 f80b 	bl	801adc4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	4618      	mov	r0, r3
 801adb4:	f008 fb21 	bl	80233fa <USB_DevDisconnect>

  return HAL_OK;
 801adb8:	2300      	movs	r3, #0
}
 801adba:	4618      	mov	r0, r3
 801adbc:	3714      	adds	r7, #20
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801adc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801adc4:	b480      	push	{r7}
 801adc6:	b085      	sub	sp, #20
 801adc8:	af00      	add	r7, sp, #0
 801adca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	2201      	movs	r2, #1
 801add6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	2200      	movs	r2, #0
 801adde:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	699b      	ldr	r3, [r3, #24]
 801ade6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801adf2:	4b05      	ldr	r3, [pc, #20]	; (801ae08 <HAL_PCDEx_ActivateLPM+0x44>)
 801adf4:	4313      	orrs	r3, r2
 801adf6:	68fa      	ldr	r2, [r7, #12]
 801adf8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801adfa:	2300      	movs	r3, #0
}
 801adfc:	4618      	mov	r0, r3
 801adfe:	3714      	adds	r7, #20
 801ae00:	46bd      	mov	sp, r7
 801ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae06:	4770      	bx	lr
 801ae08:	10000003 	.word	0x10000003

0801ae0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801ae0c:	b580      	push	{r7, lr}
 801ae0e:	b084      	sub	sp, #16
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801ae14:	4b19      	ldr	r3, [pc, #100]	; (801ae7c <HAL_PWREx_ConfigSupply+0x70>)
 801ae16:	68db      	ldr	r3, [r3, #12]
 801ae18:	f003 0304 	and.w	r3, r3, #4
 801ae1c:	2b04      	cmp	r3, #4
 801ae1e:	d00a      	beq.n	801ae36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801ae20:	4b16      	ldr	r3, [pc, #88]	; (801ae7c <HAL_PWREx_ConfigSupply+0x70>)
 801ae22:	68db      	ldr	r3, [r3, #12]
 801ae24:	f003 0307 	and.w	r3, r3, #7
 801ae28:	687a      	ldr	r2, [r7, #4]
 801ae2a:	429a      	cmp	r2, r3
 801ae2c:	d001      	beq.n	801ae32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801ae2e:	2301      	movs	r3, #1
 801ae30:	e01f      	b.n	801ae72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801ae32:	2300      	movs	r3, #0
 801ae34:	e01d      	b.n	801ae72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801ae36:	4b11      	ldr	r3, [pc, #68]	; (801ae7c <HAL_PWREx_ConfigSupply+0x70>)
 801ae38:	68db      	ldr	r3, [r3, #12]
 801ae3a:	f023 0207 	bic.w	r2, r3, #7
 801ae3e:	490f      	ldr	r1, [pc, #60]	; (801ae7c <HAL_PWREx_ConfigSupply+0x70>)
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	4313      	orrs	r3, r2
 801ae44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801ae46:	f7f9 fcaf 	bl	80147a8 <HAL_GetTick>
 801ae4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ae4c:	e009      	b.n	801ae62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801ae4e:	f7f9 fcab 	bl	80147a8 <HAL_GetTick>
 801ae52:	4602      	mov	r2, r0
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	1ad3      	subs	r3, r2, r3
 801ae58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ae5c:	d901      	bls.n	801ae62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801ae5e:	2301      	movs	r3, #1
 801ae60:	e007      	b.n	801ae72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ae62:	4b06      	ldr	r3, [pc, #24]	; (801ae7c <HAL_PWREx_ConfigSupply+0x70>)
 801ae64:	685b      	ldr	r3, [r3, #4]
 801ae66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ae6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ae6e:	d1ee      	bne.n	801ae4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801ae70:	2300      	movs	r3, #0
}
 801ae72:	4618      	mov	r0, r3
 801ae74:	3710      	adds	r7, #16
 801ae76:	46bd      	mov	sp, r7
 801ae78:	bd80      	pop	{r7, pc}
 801ae7a:	bf00      	nop
 801ae7c:	58024800 	.word	0x58024800

0801ae80 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 801ae80:	b480      	push	{r7}
 801ae82:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 801ae84:	4b05      	ldr	r3, [pc, #20]	; (801ae9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 801ae86:	68db      	ldr	r3, [r3, #12]
 801ae88:	4a04      	ldr	r2, [pc, #16]	; (801ae9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 801ae8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801ae8e:	60d3      	str	r3, [r2, #12]
}
 801ae90:	bf00      	nop
 801ae92:	46bd      	mov	sp, r7
 801ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae98:	4770      	bx	lr
 801ae9a:	bf00      	nop
 801ae9c:	58024800 	.word	0x58024800

0801aea0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b08c      	sub	sp, #48	; 0x30
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d101      	bne.n	801aeb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801aeae:	2301      	movs	r3, #1
 801aeb0:	e3ff      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	f003 0301 	and.w	r3, r3, #1
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	f000 8087 	beq.w	801afce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801aec0:	4b99      	ldr	r3, [pc, #612]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801aec2:	691b      	ldr	r3, [r3, #16]
 801aec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801aec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801aeca:	4b97      	ldr	r3, [pc, #604]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801aecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aece:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aed2:	2b10      	cmp	r3, #16
 801aed4:	d007      	beq.n	801aee6 <HAL_RCC_OscConfig+0x46>
 801aed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aed8:	2b18      	cmp	r3, #24
 801aeda:	d110      	bne.n	801aefe <HAL_RCC_OscConfig+0x5e>
 801aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aede:	f003 0303 	and.w	r3, r3, #3
 801aee2:	2b02      	cmp	r3, #2
 801aee4:	d10b      	bne.n	801aefe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801aee6:	4b90      	ldr	r3, [pc, #576]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d06c      	beq.n	801afcc <HAL_RCC_OscConfig+0x12c>
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	685b      	ldr	r3, [r3, #4]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d168      	bne.n	801afcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801aefa:	2301      	movs	r3, #1
 801aefc:	e3d9      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	685b      	ldr	r3, [r3, #4]
 801af02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af06:	d106      	bne.n	801af16 <HAL_RCC_OscConfig+0x76>
 801af08:	4b87      	ldr	r3, [pc, #540]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	4a86      	ldr	r2, [pc, #536]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801af12:	6013      	str	r3, [r2, #0]
 801af14:	e02e      	b.n	801af74 <HAL_RCC_OscConfig+0xd4>
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	685b      	ldr	r3, [r3, #4]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d10c      	bne.n	801af38 <HAL_RCC_OscConfig+0x98>
 801af1e:	4b82      	ldr	r3, [pc, #520]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	4a81      	ldr	r2, [pc, #516]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801af28:	6013      	str	r3, [r2, #0]
 801af2a:	4b7f      	ldr	r3, [pc, #508]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	4a7e      	ldr	r2, [pc, #504]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801af34:	6013      	str	r3, [r2, #0]
 801af36:	e01d      	b.n	801af74 <HAL_RCC_OscConfig+0xd4>
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	685b      	ldr	r3, [r3, #4]
 801af3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801af40:	d10c      	bne.n	801af5c <HAL_RCC_OscConfig+0xbc>
 801af42:	4b79      	ldr	r3, [pc, #484]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	4a78      	ldr	r2, [pc, #480]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801af4c:	6013      	str	r3, [r2, #0]
 801af4e:	4b76      	ldr	r3, [pc, #472]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	4a75      	ldr	r2, [pc, #468]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801af58:	6013      	str	r3, [r2, #0]
 801af5a:	e00b      	b.n	801af74 <HAL_RCC_OscConfig+0xd4>
 801af5c:	4b72      	ldr	r3, [pc, #456]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	4a71      	ldr	r2, [pc, #452]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801af66:	6013      	str	r3, [r2, #0]
 801af68:	4b6f      	ldr	r3, [pc, #444]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	4a6e      	ldr	r2, [pc, #440]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801af72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	685b      	ldr	r3, [r3, #4]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d013      	beq.n	801afa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af7c:	f7f9 fc14 	bl	80147a8 <HAL_GetTick>
 801af80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801af82:	e008      	b.n	801af96 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801af84:	f7f9 fc10 	bl	80147a8 <HAL_GetTick>
 801af88:	4602      	mov	r2, r0
 801af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af8c:	1ad3      	subs	r3, r2, r3
 801af8e:	2b64      	cmp	r3, #100	; 0x64
 801af90:	d901      	bls.n	801af96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801af92:	2303      	movs	r3, #3
 801af94:	e38d      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801af96:	4b64      	ldr	r3, [pc, #400]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d0f0      	beq.n	801af84 <HAL_RCC_OscConfig+0xe4>
 801afa2:	e014      	b.n	801afce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801afa4:	f7f9 fc00 	bl	80147a8 <HAL_GetTick>
 801afa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801afaa:	e008      	b.n	801afbe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801afac:	f7f9 fbfc 	bl	80147a8 <HAL_GetTick>
 801afb0:	4602      	mov	r2, r0
 801afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afb4:	1ad3      	subs	r3, r2, r3
 801afb6:	2b64      	cmp	r3, #100	; 0x64
 801afb8:	d901      	bls.n	801afbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801afba:	2303      	movs	r3, #3
 801afbc:	e379      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801afbe:	4b5a      	ldr	r3, [pc, #360]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d1f0      	bne.n	801afac <HAL_RCC_OscConfig+0x10c>
 801afca:	e000      	b.n	801afce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801afcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	f003 0302 	and.w	r3, r3, #2
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	f000 80ae 	beq.w	801b138 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801afdc:	4b52      	ldr	r3, [pc, #328]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801afde:	691b      	ldr	r3, [r3, #16]
 801afe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801afe4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801afe6:	4b50      	ldr	r3, [pc, #320]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801afe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801afec:	6a3b      	ldr	r3, [r7, #32]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d007      	beq.n	801b002 <HAL_RCC_OscConfig+0x162>
 801aff2:	6a3b      	ldr	r3, [r7, #32]
 801aff4:	2b18      	cmp	r3, #24
 801aff6:	d13a      	bne.n	801b06e <HAL_RCC_OscConfig+0x1ce>
 801aff8:	69fb      	ldr	r3, [r7, #28]
 801affa:	f003 0303 	and.w	r3, r3, #3
 801affe:	2b00      	cmp	r3, #0
 801b000:	d135      	bne.n	801b06e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b002:	4b49      	ldr	r3, [pc, #292]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	f003 0304 	and.w	r3, r3, #4
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d005      	beq.n	801b01a <HAL_RCC_OscConfig+0x17a>
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	68db      	ldr	r3, [r3, #12]
 801b012:	2b00      	cmp	r3, #0
 801b014:	d101      	bne.n	801b01a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801b016:	2301      	movs	r3, #1
 801b018:	e34b      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b01a:	f7f9 fbf3 	bl	8014804 <HAL_GetREVID>
 801b01e:	4602      	mov	r2, r0
 801b020:	f241 0303 	movw	r3, #4099	; 0x1003
 801b024:	429a      	cmp	r2, r3
 801b026:	d817      	bhi.n	801b058 <HAL_RCC_OscConfig+0x1b8>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	691b      	ldr	r3, [r3, #16]
 801b02c:	2b40      	cmp	r3, #64	; 0x40
 801b02e:	d108      	bne.n	801b042 <HAL_RCC_OscConfig+0x1a2>
 801b030:	4b3d      	ldr	r3, [pc, #244]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b032:	685b      	ldr	r3, [r3, #4]
 801b034:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801b038:	4a3b      	ldr	r2, [pc, #236]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b03a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b03e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b040:	e07a      	b.n	801b138 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b042:	4b39      	ldr	r3, [pc, #228]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b044:	685b      	ldr	r3, [r3, #4]
 801b046:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	691b      	ldr	r3, [r3, #16]
 801b04e:	031b      	lsls	r3, r3, #12
 801b050:	4935      	ldr	r1, [pc, #212]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b052:	4313      	orrs	r3, r2
 801b054:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b056:	e06f      	b.n	801b138 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b058:	4b33      	ldr	r3, [pc, #204]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b05a:	685b      	ldr	r3, [r3, #4]
 801b05c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	691b      	ldr	r3, [r3, #16]
 801b064:	061b      	lsls	r3, r3, #24
 801b066:	4930      	ldr	r1, [pc, #192]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b068:	4313      	orrs	r3, r2
 801b06a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b06c:	e064      	b.n	801b138 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	68db      	ldr	r3, [r3, #12]
 801b072:	2b00      	cmp	r3, #0
 801b074:	d045      	beq.n	801b102 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b076:	4b2c      	ldr	r3, [pc, #176]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	f023 0219 	bic.w	r2, r3, #25
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	68db      	ldr	r3, [r3, #12]
 801b082:	4929      	ldr	r1, [pc, #164]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b084:	4313      	orrs	r3, r2
 801b086:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b088:	f7f9 fb8e 	bl	80147a8 <HAL_GetTick>
 801b08c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b08e:	e008      	b.n	801b0a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b090:	f7f9 fb8a 	bl	80147a8 <HAL_GetTick>
 801b094:	4602      	mov	r2, r0
 801b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b098:	1ad3      	subs	r3, r2, r3
 801b09a:	2b02      	cmp	r3, #2
 801b09c:	d901      	bls.n	801b0a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 801b09e:	2303      	movs	r3, #3
 801b0a0:	e307      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b0a2:	4b21      	ldr	r3, [pc, #132]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	f003 0304 	and.w	r3, r3, #4
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	d0f0      	beq.n	801b090 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b0ae:	f7f9 fba9 	bl	8014804 <HAL_GetREVID>
 801b0b2:	4602      	mov	r2, r0
 801b0b4:	f241 0303 	movw	r3, #4099	; 0x1003
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	d817      	bhi.n	801b0ec <HAL_RCC_OscConfig+0x24c>
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	691b      	ldr	r3, [r3, #16]
 801b0c0:	2b40      	cmp	r3, #64	; 0x40
 801b0c2:	d108      	bne.n	801b0d6 <HAL_RCC_OscConfig+0x236>
 801b0c4:	4b18      	ldr	r3, [pc, #96]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b0c6:	685b      	ldr	r3, [r3, #4]
 801b0c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801b0cc:	4a16      	ldr	r2, [pc, #88]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b0ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b0d2:	6053      	str	r3, [r2, #4]
 801b0d4:	e030      	b.n	801b138 <HAL_RCC_OscConfig+0x298>
 801b0d6:	4b14      	ldr	r3, [pc, #80]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b0d8:	685b      	ldr	r3, [r3, #4]
 801b0da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	691b      	ldr	r3, [r3, #16]
 801b0e2:	031b      	lsls	r3, r3, #12
 801b0e4:	4910      	ldr	r1, [pc, #64]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b0e6:	4313      	orrs	r3, r2
 801b0e8:	604b      	str	r3, [r1, #4]
 801b0ea:	e025      	b.n	801b138 <HAL_RCC_OscConfig+0x298>
 801b0ec:	4b0e      	ldr	r3, [pc, #56]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b0ee:	685b      	ldr	r3, [r3, #4]
 801b0f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	691b      	ldr	r3, [r3, #16]
 801b0f8:	061b      	lsls	r3, r3, #24
 801b0fa:	490b      	ldr	r1, [pc, #44]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b0fc:	4313      	orrs	r3, r2
 801b0fe:	604b      	str	r3, [r1, #4]
 801b100:	e01a      	b.n	801b138 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b102:	4b09      	ldr	r3, [pc, #36]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	4a08      	ldr	r2, [pc, #32]	; (801b128 <HAL_RCC_OscConfig+0x288>)
 801b108:	f023 0301 	bic.w	r3, r3, #1
 801b10c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b10e:	f7f9 fb4b 	bl	80147a8 <HAL_GetTick>
 801b112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b114:	e00a      	b.n	801b12c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b116:	f7f9 fb47 	bl	80147a8 <HAL_GetTick>
 801b11a:	4602      	mov	r2, r0
 801b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b11e:	1ad3      	subs	r3, r2, r3
 801b120:	2b02      	cmp	r3, #2
 801b122:	d903      	bls.n	801b12c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 801b124:	2303      	movs	r3, #3
 801b126:	e2c4      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
 801b128:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b12c:	4ba4      	ldr	r3, [pc, #656]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	f003 0304 	and.w	r3, r3, #4
 801b134:	2b00      	cmp	r3, #0
 801b136:	d1ee      	bne.n	801b116 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	681b      	ldr	r3, [r3, #0]
 801b13c:	f003 0310 	and.w	r3, r3, #16
 801b140:	2b00      	cmp	r3, #0
 801b142:	f000 80a9 	beq.w	801b298 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b146:	4b9e      	ldr	r3, [pc, #632]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b148:	691b      	ldr	r3, [r3, #16]
 801b14a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b14e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b150:	4b9b      	ldr	r3, [pc, #620]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b154:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b156:	69bb      	ldr	r3, [r7, #24]
 801b158:	2b08      	cmp	r3, #8
 801b15a:	d007      	beq.n	801b16c <HAL_RCC_OscConfig+0x2cc>
 801b15c:	69bb      	ldr	r3, [r7, #24]
 801b15e:	2b18      	cmp	r3, #24
 801b160:	d13a      	bne.n	801b1d8 <HAL_RCC_OscConfig+0x338>
 801b162:	697b      	ldr	r3, [r7, #20]
 801b164:	f003 0303 	and.w	r3, r3, #3
 801b168:	2b01      	cmp	r3, #1
 801b16a:	d135      	bne.n	801b1d8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b16c:	4b94      	ldr	r3, [pc, #592]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b174:	2b00      	cmp	r3, #0
 801b176:	d005      	beq.n	801b184 <HAL_RCC_OscConfig+0x2e4>
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	69db      	ldr	r3, [r3, #28]
 801b17c:	2b80      	cmp	r3, #128	; 0x80
 801b17e:	d001      	beq.n	801b184 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 801b180:	2301      	movs	r3, #1
 801b182:	e296      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b184:	f7f9 fb3e 	bl	8014804 <HAL_GetREVID>
 801b188:	4602      	mov	r2, r0
 801b18a:	f241 0303 	movw	r3, #4099	; 0x1003
 801b18e:	429a      	cmp	r2, r3
 801b190:	d817      	bhi.n	801b1c2 <HAL_RCC_OscConfig+0x322>
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	6a1b      	ldr	r3, [r3, #32]
 801b196:	2b20      	cmp	r3, #32
 801b198:	d108      	bne.n	801b1ac <HAL_RCC_OscConfig+0x30c>
 801b19a:	4b89      	ldr	r3, [pc, #548]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b19c:	685b      	ldr	r3, [r3, #4]
 801b19e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801b1a2:	4a87      	ldr	r2, [pc, #540]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b1a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b1a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b1aa:	e075      	b.n	801b298 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b1ac:	4b84      	ldr	r3, [pc, #528]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b1ae:	685b      	ldr	r3, [r3, #4]
 801b1b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	6a1b      	ldr	r3, [r3, #32]
 801b1b8:	069b      	lsls	r3, r3, #26
 801b1ba:	4981      	ldr	r1, [pc, #516]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b1bc:	4313      	orrs	r3, r2
 801b1be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b1c0:	e06a      	b.n	801b298 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b1c2:	4b7f      	ldr	r3, [pc, #508]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b1c4:	68db      	ldr	r3, [r3, #12]
 801b1c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6a1b      	ldr	r3, [r3, #32]
 801b1ce:	061b      	lsls	r3, r3, #24
 801b1d0:	497b      	ldr	r1, [pc, #492]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b1d2:	4313      	orrs	r3, r2
 801b1d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b1d6:	e05f      	b.n	801b298 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	69db      	ldr	r3, [r3, #28]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d042      	beq.n	801b266 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b1e0:	4b77      	ldr	r3, [pc, #476]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	4a76      	ldr	r2, [pc, #472]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b1e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b1ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b1ec:	f7f9 fadc 	bl	80147a8 <HAL_GetTick>
 801b1f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b1f2:	e008      	b.n	801b206 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801b1f4:	f7f9 fad8 	bl	80147a8 <HAL_GetTick>
 801b1f8:	4602      	mov	r2, r0
 801b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1fc:	1ad3      	subs	r3, r2, r3
 801b1fe:	2b02      	cmp	r3, #2
 801b200:	d901      	bls.n	801b206 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 801b202:	2303      	movs	r3, #3
 801b204:	e255      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b206:	4b6e      	ldr	r3, [pc, #440]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d0f0      	beq.n	801b1f4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b212:	f7f9 faf7 	bl	8014804 <HAL_GetREVID>
 801b216:	4602      	mov	r2, r0
 801b218:	f241 0303 	movw	r3, #4099	; 0x1003
 801b21c:	429a      	cmp	r2, r3
 801b21e:	d817      	bhi.n	801b250 <HAL_RCC_OscConfig+0x3b0>
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	6a1b      	ldr	r3, [r3, #32]
 801b224:	2b20      	cmp	r3, #32
 801b226:	d108      	bne.n	801b23a <HAL_RCC_OscConfig+0x39a>
 801b228:	4b65      	ldr	r3, [pc, #404]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b22a:	685b      	ldr	r3, [r3, #4]
 801b22c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801b230:	4a63      	ldr	r2, [pc, #396]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b236:	6053      	str	r3, [r2, #4]
 801b238:	e02e      	b.n	801b298 <HAL_RCC_OscConfig+0x3f8>
 801b23a:	4b61      	ldr	r3, [pc, #388]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b23c:	685b      	ldr	r3, [r3, #4]
 801b23e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	6a1b      	ldr	r3, [r3, #32]
 801b246:	069b      	lsls	r3, r3, #26
 801b248:	495d      	ldr	r1, [pc, #372]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b24a:	4313      	orrs	r3, r2
 801b24c:	604b      	str	r3, [r1, #4]
 801b24e:	e023      	b.n	801b298 <HAL_RCC_OscConfig+0x3f8>
 801b250:	4b5b      	ldr	r3, [pc, #364]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b252:	68db      	ldr	r3, [r3, #12]
 801b254:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	6a1b      	ldr	r3, [r3, #32]
 801b25c:	061b      	lsls	r3, r3, #24
 801b25e:	4958      	ldr	r1, [pc, #352]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b260:	4313      	orrs	r3, r2
 801b262:	60cb      	str	r3, [r1, #12]
 801b264:	e018      	b.n	801b298 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b266:	4b56      	ldr	r3, [pc, #344]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	4a55      	ldr	r2, [pc, #340]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b26c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b272:	f7f9 fa99 	bl	80147a8 <HAL_GetTick>
 801b276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b278:	e008      	b.n	801b28c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801b27a:	f7f9 fa95 	bl	80147a8 <HAL_GetTick>
 801b27e:	4602      	mov	r2, r0
 801b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b282:	1ad3      	subs	r3, r2, r3
 801b284:	2b02      	cmp	r3, #2
 801b286:	d901      	bls.n	801b28c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 801b288:	2303      	movs	r3, #3
 801b28a:	e212      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b28c:	4b4c      	ldr	r3, [pc, #304]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b294:	2b00      	cmp	r3, #0
 801b296:	d1f0      	bne.n	801b27a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	f003 0308 	and.w	r3, r3, #8
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d036      	beq.n	801b312 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	695b      	ldr	r3, [r3, #20]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d019      	beq.n	801b2e0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b2ac:	4b44      	ldr	r3, [pc, #272]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b2ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2b0:	4a43      	ldr	r2, [pc, #268]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b2b2:	f043 0301 	orr.w	r3, r3, #1
 801b2b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b2b8:	f7f9 fa76 	bl	80147a8 <HAL_GetTick>
 801b2bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b2be:	e008      	b.n	801b2d2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b2c0:	f7f9 fa72 	bl	80147a8 <HAL_GetTick>
 801b2c4:	4602      	mov	r2, r0
 801b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2c8:	1ad3      	subs	r3, r2, r3
 801b2ca:	2b02      	cmp	r3, #2
 801b2cc:	d901      	bls.n	801b2d2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 801b2ce:	2303      	movs	r3, #3
 801b2d0:	e1ef      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b2d2:	4b3b      	ldr	r3, [pc, #236]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b2d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2d6:	f003 0302 	and.w	r3, r3, #2
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d0f0      	beq.n	801b2c0 <HAL_RCC_OscConfig+0x420>
 801b2de:	e018      	b.n	801b312 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b2e0:	4b37      	ldr	r3, [pc, #220]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b2e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2e4:	4a36      	ldr	r2, [pc, #216]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b2e6:	f023 0301 	bic.w	r3, r3, #1
 801b2ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b2ec:	f7f9 fa5c 	bl	80147a8 <HAL_GetTick>
 801b2f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b2f2:	e008      	b.n	801b306 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b2f4:	f7f9 fa58 	bl	80147a8 <HAL_GetTick>
 801b2f8:	4602      	mov	r2, r0
 801b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2fc:	1ad3      	subs	r3, r2, r3
 801b2fe:	2b02      	cmp	r3, #2
 801b300:	d901      	bls.n	801b306 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 801b302:	2303      	movs	r3, #3
 801b304:	e1d5      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b306:	4b2e      	ldr	r3, [pc, #184]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b30a:	f003 0302 	and.w	r3, r3, #2
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d1f0      	bne.n	801b2f4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	f003 0320 	and.w	r3, r3, #32
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d036      	beq.n	801b38c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	699b      	ldr	r3, [r3, #24]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d019      	beq.n	801b35a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b326:	4b26      	ldr	r3, [pc, #152]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	4a25      	ldr	r2, [pc, #148]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b32c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b330:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b332:	f7f9 fa39 	bl	80147a8 <HAL_GetTick>
 801b336:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b338:	e008      	b.n	801b34c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801b33a:	f7f9 fa35 	bl	80147a8 <HAL_GetTick>
 801b33e:	4602      	mov	r2, r0
 801b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b342:	1ad3      	subs	r3, r2, r3
 801b344:	2b02      	cmp	r3, #2
 801b346:	d901      	bls.n	801b34c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 801b348:	2303      	movs	r3, #3
 801b34a:	e1b2      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b34c:	4b1c      	ldr	r3, [pc, #112]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b354:	2b00      	cmp	r3, #0
 801b356:	d0f0      	beq.n	801b33a <HAL_RCC_OscConfig+0x49a>
 801b358:	e018      	b.n	801b38c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b35a:	4b19      	ldr	r3, [pc, #100]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	4a18      	ldr	r2, [pc, #96]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b364:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b366:	f7f9 fa1f 	bl	80147a8 <HAL_GetTick>
 801b36a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b36c:	e008      	b.n	801b380 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801b36e:	f7f9 fa1b 	bl	80147a8 <HAL_GetTick>
 801b372:	4602      	mov	r2, r0
 801b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b376:	1ad3      	subs	r3, r2, r3
 801b378:	2b02      	cmp	r3, #2
 801b37a:	d901      	bls.n	801b380 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 801b37c:	2303      	movs	r3, #3
 801b37e:	e198      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b380:	4b0f      	ldr	r3, [pc, #60]	; (801b3c0 <HAL_RCC_OscConfig+0x520>)
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d1f0      	bne.n	801b36e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	f003 0304 	and.w	r3, r3, #4
 801b394:	2b00      	cmp	r3, #0
 801b396:	f000 8085 	beq.w	801b4a4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801b39a:	4b0a      	ldr	r3, [pc, #40]	; (801b3c4 <HAL_RCC_OscConfig+0x524>)
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	4a09      	ldr	r2, [pc, #36]	; (801b3c4 <HAL_RCC_OscConfig+0x524>)
 801b3a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b3a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b3a6:	f7f9 f9ff 	bl	80147a8 <HAL_GetTick>
 801b3aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b3ac:	e00c      	b.n	801b3c8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b3ae:	f7f9 f9fb 	bl	80147a8 <HAL_GetTick>
 801b3b2:	4602      	mov	r2, r0
 801b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3b6:	1ad3      	subs	r3, r2, r3
 801b3b8:	2b64      	cmp	r3, #100	; 0x64
 801b3ba:	d905      	bls.n	801b3c8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 801b3bc:	2303      	movs	r3, #3
 801b3be:	e178      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
 801b3c0:	58024400 	.word	0x58024400
 801b3c4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b3c8:	4b96      	ldr	r3, [pc, #600]	; (801b624 <HAL_RCC_OscConfig+0x784>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d0ec      	beq.n	801b3ae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	689b      	ldr	r3, [r3, #8]
 801b3d8:	2b01      	cmp	r3, #1
 801b3da:	d106      	bne.n	801b3ea <HAL_RCC_OscConfig+0x54a>
 801b3dc:	4b92      	ldr	r3, [pc, #584]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3e0:	4a91      	ldr	r2, [pc, #580]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b3e2:	f043 0301 	orr.w	r3, r3, #1
 801b3e6:	6713      	str	r3, [r2, #112]	; 0x70
 801b3e8:	e02d      	b.n	801b446 <HAL_RCC_OscConfig+0x5a6>
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	689b      	ldr	r3, [r3, #8]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d10c      	bne.n	801b40c <HAL_RCC_OscConfig+0x56c>
 801b3f2:	4b8d      	ldr	r3, [pc, #564]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3f6:	4a8c      	ldr	r2, [pc, #560]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b3f8:	f023 0301 	bic.w	r3, r3, #1
 801b3fc:	6713      	str	r3, [r2, #112]	; 0x70
 801b3fe:	4b8a      	ldr	r3, [pc, #552]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b402:	4a89      	ldr	r2, [pc, #548]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b404:	f023 0304 	bic.w	r3, r3, #4
 801b408:	6713      	str	r3, [r2, #112]	; 0x70
 801b40a:	e01c      	b.n	801b446 <HAL_RCC_OscConfig+0x5a6>
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	689b      	ldr	r3, [r3, #8]
 801b410:	2b05      	cmp	r3, #5
 801b412:	d10c      	bne.n	801b42e <HAL_RCC_OscConfig+0x58e>
 801b414:	4b84      	ldr	r3, [pc, #528]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b418:	4a83      	ldr	r2, [pc, #524]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b41a:	f043 0304 	orr.w	r3, r3, #4
 801b41e:	6713      	str	r3, [r2, #112]	; 0x70
 801b420:	4b81      	ldr	r3, [pc, #516]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b424:	4a80      	ldr	r2, [pc, #512]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b426:	f043 0301 	orr.w	r3, r3, #1
 801b42a:	6713      	str	r3, [r2, #112]	; 0x70
 801b42c:	e00b      	b.n	801b446 <HAL_RCC_OscConfig+0x5a6>
 801b42e:	4b7e      	ldr	r3, [pc, #504]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b432:	4a7d      	ldr	r2, [pc, #500]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b434:	f023 0301 	bic.w	r3, r3, #1
 801b438:	6713      	str	r3, [r2, #112]	; 0x70
 801b43a:	4b7b      	ldr	r3, [pc, #492]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b43e:	4a7a      	ldr	r2, [pc, #488]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b440:	f023 0304 	bic.w	r3, r3, #4
 801b444:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	689b      	ldr	r3, [r3, #8]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d015      	beq.n	801b47a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b44e:	f7f9 f9ab 	bl	80147a8 <HAL_GetTick>
 801b452:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b454:	e00a      	b.n	801b46c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b456:	f7f9 f9a7 	bl	80147a8 <HAL_GetTick>
 801b45a:	4602      	mov	r2, r0
 801b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b45e:	1ad3      	subs	r3, r2, r3
 801b460:	f241 3288 	movw	r2, #5000	; 0x1388
 801b464:	4293      	cmp	r3, r2
 801b466:	d901      	bls.n	801b46c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 801b468:	2303      	movs	r3, #3
 801b46a:	e122      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b46c:	4b6e      	ldr	r3, [pc, #440]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b470:	f003 0302 	and.w	r3, r3, #2
 801b474:	2b00      	cmp	r3, #0
 801b476:	d0ee      	beq.n	801b456 <HAL_RCC_OscConfig+0x5b6>
 801b478:	e014      	b.n	801b4a4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b47a:	f7f9 f995 	bl	80147a8 <HAL_GetTick>
 801b47e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b480:	e00a      	b.n	801b498 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b482:	f7f9 f991 	bl	80147a8 <HAL_GetTick>
 801b486:	4602      	mov	r2, r0
 801b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b48a:	1ad3      	subs	r3, r2, r3
 801b48c:	f241 3288 	movw	r2, #5000	; 0x1388
 801b490:	4293      	cmp	r3, r2
 801b492:	d901      	bls.n	801b498 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 801b494:	2303      	movs	r3, #3
 801b496:	e10c      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b498:	4b63      	ldr	r3, [pc, #396]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b49c:	f003 0302 	and.w	r3, r3, #2
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d1ee      	bne.n	801b482 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	f000 8101 	beq.w	801b6b0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801b4ae:	4b5e      	ldr	r3, [pc, #376]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b4b0:	691b      	ldr	r3, [r3, #16]
 801b4b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b4b6:	2b18      	cmp	r3, #24
 801b4b8:	f000 80bc 	beq.w	801b634 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4c0:	2b02      	cmp	r3, #2
 801b4c2:	f040 8095 	bne.w	801b5f0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b4c6:	4b58      	ldr	r3, [pc, #352]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	4a57      	ldr	r2, [pc, #348]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b4cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b4d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4d2:	f7f9 f969 	bl	80147a8 <HAL_GetTick>
 801b4d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b4d8:	e008      	b.n	801b4ec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b4da:	f7f9 f965 	bl	80147a8 <HAL_GetTick>
 801b4de:	4602      	mov	r2, r0
 801b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e2:	1ad3      	subs	r3, r2, r3
 801b4e4:	2b02      	cmp	r3, #2
 801b4e6:	d901      	bls.n	801b4ec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 801b4e8:	2303      	movs	r3, #3
 801b4ea:	e0e2      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b4ec:	4b4e      	ldr	r3, [pc, #312]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d1f0      	bne.n	801b4da <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b4f8:	4b4b      	ldr	r3, [pc, #300]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b4fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b4fc:	4b4b      	ldr	r3, [pc, #300]	; (801b62c <HAL_RCC_OscConfig+0x78c>)
 801b4fe:	4013      	ands	r3, r2
 801b500:	687a      	ldr	r2, [r7, #4]
 801b502:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801b504:	687a      	ldr	r2, [r7, #4]
 801b506:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b508:	0112      	lsls	r2, r2, #4
 801b50a:	430a      	orrs	r2, r1
 801b50c:	4946      	ldr	r1, [pc, #280]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b50e:	4313      	orrs	r3, r2
 801b510:	628b      	str	r3, [r1, #40]	; 0x28
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b516:	3b01      	subs	r3, #1
 801b518:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b520:	3b01      	subs	r3, #1
 801b522:	025b      	lsls	r3, r3, #9
 801b524:	b29b      	uxth	r3, r3
 801b526:	431a      	orrs	r2, r3
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b52c:	3b01      	subs	r3, #1
 801b52e:	041b      	lsls	r3, r3, #16
 801b530:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801b534:	431a      	orrs	r2, r3
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b53a:	3b01      	subs	r3, #1
 801b53c:	061b      	lsls	r3, r3, #24
 801b53e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801b542:	4939      	ldr	r1, [pc, #228]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b544:	4313      	orrs	r3, r2
 801b546:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 801b548:	4b37      	ldr	r3, [pc, #220]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b54c:	4a36      	ldr	r2, [pc, #216]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b54e:	f023 0301 	bic.w	r3, r3, #1
 801b552:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b554:	4b34      	ldr	r3, [pc, #208]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b558:	4b35      	ldr	r3, [pc, #212]	; (801b630 <HAL_RCC_OscConfig+0x790>)
 801b55a:	4013      	ands	r3, r2
 801b55c:	687a      	ldr	r2, [r7, #4]
 801b55e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b560:	00d2      	lsls	r2, r2, #3
 801b562:	4931      	ldr	r1, [pc, #196]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b564:	4313      	orrs	r3, r2
 801b566:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801b568:	4b2f      	ldr	r3, [pc, #188]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b56c:	f023 020c 	bic.w	r2, r3, #12
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b574:	492c      	ldr	r1, [pc, #176]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b576:	4313      	orrs	r3, r2
 801b578:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801b57a:	4b2b      	ldr	r3, [pc, #172]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b57e:	f023 0202 	bic.w	r2, r3, #2
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b586:	4928      	ldr	r1, [pc, #160]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b588:	4313      	orrs	r3, r2
 801b58a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801b58c:	4b26      	ldr	r3, [pc, #152]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b590:	4a25      	ldr	r2, [pc, #148]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b598:	4b23      	ldr	r3, [pc, #140]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b59c:	4a22      	ldr	r2, [pc, #136]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b59e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b5a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801b5a4:	4b20      	ldr	r3, [pc, #128]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5a8:	4a1f      	ldr	r2, [pc, #124]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b5aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b5ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 801b5b0:	4b1d      	ldr	r3, [pc, #116]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5b4:	4a1c      	ldr	r2, [pc, #112]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b5b6:	f043 0301 	orr.w	r3, r3, #1
 801b5ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b5bc:	4b1a      	ldr	r3, [pc, #104]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	4a19      	ldr	r2, [pc, #100]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b5c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b5c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5c8:	f7f9 f8ee 	bl	80147a8 <HAL_GetTick>
 801b5cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b5ce:	e008      	b.n	801b5e2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b5d0:	f7f9 f8ea 	bl	80147a8 <HAL_GetTick>
 801b5d4:	4602      	mov	r2, r0
 801b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5d8:	1ad3      	subs	r3, r2, r3
 801b5da:	2b02      	cmp	r3, #2
 801b5dc:	d901      	bls.n	801b5e2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 801b5de:	2303      	movs	r3, #3
 801b5e0:	e067      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b5e2:	4b11      	ldr	r3, [pc, #68]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d0f0      	beq.n	801b5d0 <HAL_RCC_OscConfig+0x730>
 801b5ee:	e05f      	b.n	801b6b0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b5f0:	4b0d      	ldr	r3, [pc, #52]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	4a0c      	ldr	r2, [pc, #48]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b5f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b5fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5fc:	f7f9 f8d4 	bl	80147a8 <HAL_GetTick>
 801b600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b602:	e008      	b.n	801b616 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b604:	f7f9 f8d0 	bl	80147a8 <HAL_GetTick>
 801b608:	4602      	mov	r2, r0
 801b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b60c:	1ad3      	subs	r3, r2, r3
 801b60e:	2b02      	cmp	r3, #2
 801b610:	d901      	bls.n	801b616 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 801b612:	2303      	movs	r3, #3
 801b614:	e04d      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b616:	4b04      	ldr	r3, [pc, #16]	; (801b628 <HAL_RCC_OscConfig+0x788>)
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d1f0      	bne.n	801b604 <HAL_RCC_OscConfig+0x764>
 801b622:	e045      	b.n	801b6b0 <HAL_RCC_OscConfig+0x810>
 801b624:	58024800 	.word	0x58024800
 801b628:	58024400 	.word	0x58024400
 801b62c:	fffffc0c 	.word	0xfffffc0c
 801b630:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801b634:	4b21      	ldr	r3, [pc, #132]	; (801b6bc <HAL_RCC_OscConfig+0x81c>)
 801b636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b638:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801b63a:	4b20      	ldr	r3, [pc, #128]	; (801b6bc <HAL_RCC_OscConfig+0x81c>)
 801b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b63e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b644:	2b01      	cmp	r3, #1
 801b646:	d031      	beq.n	801b6ac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b648:	693b      	ldr	r3, [r7, #16]
 801b64a:	f003 0203 	and.w	r2, r3, #3
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b652:	429a      	cmp	r2, r3
 801b654:	d12a      	bne.n	801b6ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b656:	693b      	ldr	r3, [r7, #16]
 801b658:	091b      	lsrs	r3, r3, #4
 801b65a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b662:	429a      	cmp	r2, r3
 801b664:	d122      	bne.n	801b6ac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b670:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b672:	429a      	cmp	r2, r3
 801b674:	d11a      	bne.n	801b6ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b676:	68fb      	ldr	r3, [r7, #12]
 801b678:	0a5b      	lsrs	r3, r3, #9
 801b67a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b682:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b684:	429a      	cmp	r2, r3
 801b686:	d111      	bne.n	801b6ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	0c1b      	lsrs	r3, r3, #16
 801b68c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b694:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b696:	429a      	cmp	r2, r3
 801b698:	d108      	bne.n	801b6ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	0e1b      	lsrs	r3, r3, #24
 801b69e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b6a8:	429a      	cmp	r2, r3
 801b6aa:	d001      	beq.n	801b6b0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 801b6ac:	2301      	movs	r3, #1
 801b6ae:	e000      	b.n	801b6b2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 801b6b0:	2300      	movs	r3, #0
}
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	3730      	adds	r7, #48	; 0x30
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bd80      	pop	{r7, pc}
 801b6ba:	bf00      	nop
 801b6bc:	58024400 	.word	0x58024400

0801b6c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b086      	sub	sp, #24
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	6078      	str	r0, [r7, #4]
 801b6c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d101      	bne.n	801b6d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	e19c      	b.n	801ba0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b6d4:	4b8a      	ldr	r3, [pc, #552]	; (801b900 <HAL_RCC_ClockConfig+0x240>)
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	f003 030f 	and.w	r3, r3, #15
 801b6dc:	683a      	ldr	r2, [r7, #0]
 801b6de:	429a      	cmp	r2, r3
 801b6e0:	d910      	bls.n	801b704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b6e2:	4b87      	ldr	r3, [pc, #540]	; (801b900 <HAL_RCC_ClockConfig+0x240>)
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	f023 020f 	bic.w	r2, r3, #15
 801b6ea:	4985      	ldr	r1, [pc, #532]	; (801b900 <HAL_RCC_ClockConfig+0x240>)
 801b6ec:	683b      	ldr	r3, [r7, #0]
 801b6ee:	4313      	orrs	r3, r2
 801b6f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b6f2:	4b83      	ldr	r3, [pc, #524]	; (801b900 <HAL_RCC_ClockConfig+0x240>)
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	f003 030f 	and.w	r3, r3, #15
 801b6fa:	683a      	ldr	r2, [r7, #0]
 801b6fc:	429a      	cmp	r2, r3
 801b6fe:	d001      	beq.n	801b704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801b700:	2301      	movs	r3, #1
 801b702:	e184      	b.n	801ba0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	f003 0304 	and.w	r3, r3, #4
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d010      	beq.n	801b732 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	691a      	ldr	r2, [r3, #16]
 801b714:	4b7b      	ldr	r3, [pc, #492]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b716:	699b      	ldr	r3, [r3, #24]
 801b718:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b71c:	429a      	cmp	r2, r3
 801b71e:	d908      	bls.n	801b732 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b720:	4b78      	ldr	r3, [pc, #480]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b722:	699b      	ldr	r3, [r3, #24]
 801b724:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	691b      	ldr	r3, [r3, #16]
 801b72c:	4975      	ldr	r1, [pc, #468]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b72e:	4313      	orrs	r3, r2
 801b730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	f003 0308 	and.w	r3, r3, #8
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d010      	beq.n	801b760 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	695a      	ldr	r2, [r3, #20]
 801b742:	4b70      	ldr	r3, [pc, #448]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b744:	69db      	ldr	r3, [r3, #28]
 801b746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b74a:	429a      	cmp	r2, r3
 801b74c:	d908      	bls.n	801b760 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b74e:	4b6d      	ldr	r3, [pc, #436]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b750:	69db      	ldr	r3, [r3, #28]
 801b752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	695b      	ldr	r3, [r3, #20]
 801b75a:	496a      	ldr	r1, [pc, #424]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b75c:	4313      	orrs	r3, r2
 801b75e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	f003 0310 	and.w	r3, r3, #16
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d010      	beq.n	801b78e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	699a      	ldr	r2, [r3, #24]
 801b770:	4b64      	ldr	r3, [pc, #400]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b772:	69db      	ldr	r3, [r3, #28]
 801b774:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b778:	429a      	cmp	r2, r3
 801b77a:	d908      	bls.n	801b78e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b77c:	4b61      	ldr	r3, [pc, #388]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b77e:	69db      	ldr	r3, [r3, #28]
 801b780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	699b      	ldr	r3, [r3, #24]
 801b788:	495e      	ldr	r1, [pc, #376]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b78a:	4313      	orrs	r3, r2
 801b78c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	f003 0320 	and.w	r3, r3, #32
 801b796:	2b00      	cmp	r3, #0
 801b798:	d010      	beq.n	801b7bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	69da      	ldr	r2, [r3, #28]
 801b79e:	4b59      	ldr	r3, [pc, #356]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b7a0:	6a1b      	ldr	r3, [r3, #32]
 801b7a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b7a6:	429a      	cmp	r2, r3
 801b7a8:	d908      	bls.n	801b7bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801b7aa:	4b56      	ldr	r3, [pc, #344]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b7ac:	6a1b      	ldr	r3, [r3, #32]
 801b7ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	69db      	ldr	r3, [r3, #28]
 801b7b6:	4953      	ldr	r1, [pc, #332]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b7b8:	4313      	orrs	r3, r2
 801b7ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	f003 0302 	and.w	r3, r3, #2
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d010      	beq.n	801b7ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	68da      	ldr	r2, [r3, #12]
 801b7cc:	4b4d      	ldr	r3, [pc, #308]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b7ce:	699b      	ldr	r3, [r3, #24]
 801b7d0:	f003 030f 	and.w	r3, r3, #15
 801b7d4:	429a      	cmp	r2, r3
 801b7d6:	d908      	bls.n	801b7ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b7d8:	4b4a      	ldr	r3, [pc, #296]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b7da:	699b      	ldr	r3, [r3, #24]
 801b7dc:	f023 020f 	bic.w	r2, r3, #15
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	68db      	ldr	r3, [r3, #12]
 801b7e4:	4947      	ldr	r1, [pc, #284]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b7e6:	4313      	orrs	r3, r2
 801b7e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	f003 0301 	and.w	r3, r3, #1
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d055      	beq.n	801b8a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801b7f6:	4b43      	ldr	r3, [pc, #268]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b7f8:	699b      	ldr	r3, [r3, #24]
 801b7fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	689b      	ldr	r3, [r3, #8]
 801b802:	4940      	ldr	r1, [pc, #256]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b804:	4313      	orrs	r3, r2
 801b806:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	685b      	ldr	r3, [r3, #4]
 801b80c:	2b02      	cmp	r3, #2
 801b80e:	d107      	bne.n	801b820 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b810:	4b3c      	ldr	r3, [pc, #240]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d121      	bne.n	801b860 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801b81c:	2301      	movs	r3, #1
 801b81e:	e0f6      	b.n	801ba0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	685b      	ldr	r3, [r3, #4]
 801b824:	2b03      	cmp	r3, #3
 801b826:	d107      	bne.n	801b838 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b828:	4b36      	ldr	r3, [pc, #216]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b830:	2b00      	cmp	r3, #0
 801b832:	d115      	bne.n	801b860 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801b834:	2301      	movs	r3, #1
 801b836:	e0ea      	b.n	801ba0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	685b      	ldr	r3, [r3, #4]
 801b83c:	2b01      	cmp	r3, #1
 801b83e:	d107      	bne.n	801b850 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b840:	4b30      	ldr	r3, [pc, #192]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d109      	bne.n	801b860 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801b84c:	2301      	movs	r3, #1
 801b84e:	e0de      	b.n	801ba0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b850:	4b2c      	ldr	r3, [pc, #176]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	f003 0304 	and.w	r3, r3, #4
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d101      	bne.n	801b860 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801b85c:	2301      	movs	r3, #1
 801b85e:	e0d6      	b.n	801ba0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b860:	4b28      	ldr	r3, [pc, #160]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b862:	691b      	ldr	r3, [r3, #16]
 801b864:	f023 0207 	bic.w	r2, r3, #7
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	685b      	ldr	r3, [r3, #4]
 801b86c:	4925      	ldr	r1, [pc, #148]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b86e:	4313      	orrs	r3, r2
 801b870:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b872:	f7f8 ff99 	bl	80147a8 <HAL_GetTick>
 801b876:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b878:	e00a      	b.n	801b890 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b87a:	f7f8 ff95 	bl	80147a8 <HAL_GetTick>
 801b87e:	4602      	mov	r2, r0
 801b880:	697b      	ldr	r3, [r7, #20]
 801b882:	1ad3      	subs	r3, r2, r3
 801b884:	f241 3288 	movw	r2, #5000	; 0x1388
 801b888:	4293      	cmp	r3, r2
 801b88a:	d901      	bls.n	801b890 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801b88c:	2303      	movs	r3, #3
 801b88e:	e0be      	b.n	801ba0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b890:	4b1c      	ldr	r3, [pc, #112]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b892:	691b      	ldr	r3, [r3, #16]
 801b894:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	685b      	ldr	r3, [r3, #4]
 801b89c:	00db      	lsls	r3, r3, #3
 801b89e:	429a      	cmp	r2, r3
 801b8a0:	d1eb      	bne.n	801b87a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	f003 0302 	and.w	r3, r3, #2
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d010      	beq.n	801b8d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	68da      	ldr	r2, [r3, #12]
 801b8b2:	4b14      	ldr	r3, [pc, #80]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b8b4:	699b      	ldr	r3, [r3, #24]
 801b8b6:	f003 030f 	and.w	r3, r3, #15
 801b8ba:	429a      	cmp	r2, r3
 801b8bc:	d208      	bcs.n	801b8d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b8be:	4b11      	ldr	r3, [pc, #68]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b8c0:	699b      	ldr	r3, [r3, #24]
 801b8c2:	f023 020f 	bic.w	r2, r3, #15
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	68db      	ldr	r3, [r3, #12]
 801b8ca:	490e      	ldr	r1, [pc, #56]	; (801b904 <HAL_RCC_ClockConfig+0x244>)
 801b8cc:	4313      	orrs	r3, r2
 801b8ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b8d0:	4b0b      	ldr	r3, [pc, #44]	; (801b900 <HAL_RCC_ClockConfig+0x240>)
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	f003 030f 	and.w	r3, r3, #15
 801b8d8:	683a      	ldr	r2, [r7, #0]
 801b8da:	429a      	cmp	r2, r3
 801b8dc:	d214      	bcs.n	801b908 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b8de:	4b08      	ldr	r3, [pc, #32]	; (801b900 <HAL_RCC_ClockConfig+0x240>)
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	f023 020f 	bic.w	r2, r3, #15
 801b8e6:	4906      	ldr	r1, [pc, #24]	; (801b900 <HAL_RCC_ClockConfig+0x240>)
 801b8e8:	683b      	ldr	r3, [r7, #0]
 801b8ea:	4313      	orrs	r3, r2
 801b8ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b8ee:	4b04      	ldr	r3, [pc, #16]	; (801b900 <HAL_RCC_ClockConfig+0x240>)
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	f003 030f 	and.w	r3, r3, #15
 801b8f6:	683a      	ldr	r2, [r7, #0]
 801b8f8:	429a      	cmp	r2, r3
 801b8fa:	d005      	beq.n	801b908 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801b8fc:	2301      	movs	r3, #1
 801b8fe:	e086      	b.n	801ba0e <HAL_RCC_ClockConfig+0x34e>
 801b900:	52002000 	.word	0x52002000
 801b904:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	f003 0304 	and.w	r3, r3, #4
 801b910:	2b00      	cmp	r3, #0
 801b912:	d010      	beq.n	801b936 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	691a      	ldr	r2, [r3, #16]
 801b918:	4b3f      	ldr	r3, [pc, #252]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b91a:	699b      	ldr	r3, [r3, #24]
 801b91c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b920:	429a      	cmp	r2, r3
 801b922:	d208      	bcs.n	801b936 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b924:	4b3c      	ldr	r3, [pc, #240]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b926:	699b      	ldr	r3, [r3, #24]
 801b928:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	691b      	ldr	r3, [r3, #16]
 801b930:	4939      	ldr	r1, [pc, #228]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b932:	4313      	orrs	r3, r2
 801b934:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	f003 0308 	and.w	r3, r3, #8
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d010      	beq.n	801b964 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	695a      	ldr	r2, [r3, #20]
 801b946:	4b34      	ldr	r3, [pc, #208]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b948:	69db      	ldr	r3, [r3, #28]
 801b94a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b94e:	429a      	cmp	r2, r3
 801b950:	d208      	bcs.n	801b964 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b952:	4b31      	ldr	r3, [pc, #196]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b954:	69db      	ldr	r3, [r3, #28]
 801b956:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	695b      	ldr	r3, [r3, #20]
 801b95e:	492e      	ldr	r1, [pc, #184]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b960:	4313      	orrs	r3, r2
 801b962:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	f003 0310 	and.w	r3, r3, #16
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	d010      	beq.n	801b992 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	699a      	ldr	r2, [r3, #24]
 801b974:	4b28      	ldr	r3, [pc, #160]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b976:	69db      	ldr	r3, [r3, #28]
 801b978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b97c:	429a      	cmp	r2, r3
 801b97e:	d208      	bcs.n	801b992 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b980:	4b25      	ldr	r3, [pc, #148]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b982:	69db      	ldr	r3, [r3, #28]
 801b984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	699b      	ldr	r3, [r3, #24]
 801b98c:	4922      	ldr	r1, [pc, #136]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b98e:	4313      	orrs	r3, r2
 801b990:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	f003 0320 	and.w	r3, r3, #32
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d010      	beq.n	801b9c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	69da      	ldr	r2, [r3, #28]
 801b9a2:	4b1d      	ldr	r3, [pc, #116]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b9a4:	6a1b      	ldr	r3, [r3, #32]
 801b9a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b9aa:	429a      	cmp	r2, r3
 801b9ac:	d208      	bcs.n	801b9c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801b9ae:	4b1a      	ldr	r3, [pc, #104]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b9b0:	6a1b      	ldr	r3, [r3, #32]
 801b9b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	69db      	ldr	r3, [r3, #28]
 801b9ba:	4917      	ldr	r1, [pc, #92]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b9bc:	4313      	orrs	r3, r2
 801b9be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801b9c0:	f000 f834 	bl	801ba2c <HAL_RCC_GetSysClockFreq>
 801b9c4:	4601      	mov	r1, r0
 801b9c6:	4b14      	ldr	r3, [pc, #80]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b9c8:	699b      	ldr	r3, [r3, #24]
 801b9ca:	0a1b      	lsrs	r3, r3, #8
 801b9cc:	f003 030f 	and.w	r3, r3, #15
 801b9d0:	4a12      	ldr	r2, [pc, #72]	; (801ba1c <HAL_RCC_ClockConfig+0x35c>)
 801b9d2:	5cd3      	ldrb	r3, [r2, r3]
 801b9d4:	f003 031f 	and.w	r3, r3, #31
 801b9d8:	fa21 f303 	lsr.w	r3, r1, r3
 801b9dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b9de:	4b0e      	ldr	r3, [pc, #56]	; (801ba18 <HAL_RCC_ClockConfig+0x358>)
 801b9e0:	699b      	ldr	r3, [r3, #24]
 801b9e2:	f003 030f 	and.w	r3, r3, #15
 801b9e6:	4a0d      	ldr	r2, [pc, #52]	; (801ba1c <HAL_RCC_ClockConfig+0x35c>)
 801b9e8:	5cd3      	ldrb	r3, [r2, r3]
 801b9ea:	f003 031f 	and.w	r3, r3, #31
 801b9ee:	693a      	ldr	r2, [r7, #16]
 801b9f0:	fa22 f303 	lsr.w	r3, r2, r3
 801b9f4:	4a0a      	ldr	r2, [pc, #40]	; (801ba20 <HAL_RCC_ClockConfig+0x360>)
 801b9f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b9f8:	4a0a      	ldr	r2, [pc, #40]	; (801ba24 <HAL_RCC_ClockConfig+0x364>)
 801b9fa:	693b      	ldr	r3, [r7, #16]
 801b9fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 801b9fe:	4b0a      	ldr	r3, [pc, #40]	; (801ba28 <HAL_RCC_ClockConfig+0x368>)
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	4618      	mov	r0, r3
 801ba04:	f7f7 fd60 	bl	80134c8 <HAL_InitTick>
 801ba08:	4603      	mov	r3, r0
 801ba0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801ba0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba0e:	4618      	mov	r0, r3
 801ba10:	3718      	adds	r7, #24
 801ba12:	46bd      	mov	sp, r7
 801ba14:	bd80      	pop	{r7, pc}
 801ba16:	bf00      	nop
 801ba18:	58024400 	.word	0x58024400
 801ba1c:	0802efe4 	.word	0x0802efe4
 801ba20:	2400069c 	.word	0x2400069c
 801ba24:	24000698 	.word	0x24000698
 801ba28:	240006a0 	.word	0x240006a0

0801ba2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ba2c:	b480      	push	{r7}
 801ba2e:	b089      	sub	sp, #36	; 0x24
 801ba30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ba32:	4baf      	ldr	r3, [pc, #700]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801ba34:	691b      	ldr	r3, [r3, #16]
 801ba36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ba3a:	2b18      	cmp	r3, #24
 801ba3c:	f200 814e 	bhi.w	801bcdc <HAL_RCC_GetSysClockFreq+0x2b0>
 801ba40:	a201      	add	r2, pc, #4	; (adr r2, 801ba48 <HAL_RCC_GetSysClockFreq+0x1c>)
 801ba42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba46:	bf00      	nop
 801ba48:	0801baad 	.word	0x0801baad
 801ba4c:	0801bcdd 	.word	0x0801bcdd
 801ba50:	0801bcdd 	.word	0x0801bcdd
 801ba54:	0801bcdd 	.word	0x0801bcdd
 801ba58:	0801bcdd 	.word	0x0801bcdd
 801ba5c:	0801bcdd 	.word	0x0801bcdd
 801ba60:	0801bcdd 	.word	0x0801bcdd
 801ba64:	0801bcdd 	.word	0x0801bcdd
 801ba68:	0801bad3 	.word	0x0801bad3
 801ba6c:	0801bcdd 	.word	0x0801bcdd
 801ba70:	0801bcdd 	.word	0x0801bcdd
 801ba74:	0801bcdd 	.word	0x0801bcdd
 801ba78:	0801bcdd 	.word	0x0801bcdd
 801ba7c:	0801bcdd 	.word	0x0801bcdd
 801ba80:	0801bcdd 	.word	0x0801bcdd
 801ba84:	0801bcdd 	.word	0x0801bcdd
 801ba88:	0801bad9 	.word	0x0801bad9
 801ba8c:	0801bcdd 	.word	0x0801bcdd
 801ba90:	0801bcdd 	.word	0x0801bcdd
 801ba94:	0801bcdd 	.word	0x0801bcdd
 801ba98:	0801bcdd 	.word	0x0801bcdd
 801ba9c:	0801bcdd 	.word	0x0801bcdd
 801baa0:	0801bcdd 	.word	0x0801bcdd
 801baa4:	0801bcdd 	.word	0x0801bcdd
 801baa8:	0801badf 	.word	0x0801badf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801baac:	4b90      	ldr	r3, [pc, #576]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	f003 0320 	and.w	r3, r3, #32
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d009      	beq.n	801bacc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801bab8:	4b8d      	ldr	r3, [pc, #564]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	08db      	lsrs	r3, r3, #3
 801babe:	f003 0303 	and.w	r3, r3, #3
 801bac2:	4a8c      	ldr	r2, [pc, #560]	; (801bcf4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801bac4:	fa22 f303 	lsr.w	r3, r2, r3
 801bac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 801baca:	e10a      	b.n	801bce2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801bacc:	4b89      	ldr	r3, [pc, #548]	; (801bcf4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801bace:	61bb      	str	r3, [r7, #24]
    break;
 801bad0:	e107      	b.n	801bce2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801bad2:	4b89      	ldr	r3, [pc, #548]	; (801bcf8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 801bad4:	61bb      	str	r3, [r7, #24]
    break;
 801bad6:	e104      	b.n	801bce2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 801bad8:	4b88      	ldr	r3, [pc, #544]	; (801bcfc <HAL_RCC_GetSysClockFreq+0x2d0>)
 801bada:	61bb      	str	r3, [r7, #24]
    break;
 801badc:	e101      	b.n	801bce2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801bade:	4b84      	ldr	r3, [pc, #528]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bae2:	f003 0303 	and.w	r3, r3, #3
 801bae6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 801bae8:	4b81      	ldr	r3, [pc, #516]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801baea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801baec:	091b      	lsrs	r3, r3, #4
 801baee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801baf2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801baf4:	4b7e      	ldr	r3, [pc, #504]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801baf8:	f003 0301 	and.w	r3, r3, #1
 801bafc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801bafe:	4b7c      	ldr	r3, [pc, #496]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb02:	08db      	lsrs	r3, r3, #3
 801bb04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb08:	68fa      	ldr	r2, [r7, #12]
 801bb0a:	fb02 f303 	mul.w	r3, r2, r3
 801bb0e:	ee07 3a90 	vmov	s15, r3
 801bb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb16:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 801bb1a:	693b      	ldr	r3, [r7, #16]
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	f000 80da 	beq.w	801bcd6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 801bb22:	697b      	ldr	r3, [r7, #20]
 801bb24:	2b01      	cmp	r3, #1
 801bb26:	d05a      	beq.n	801bbde <HAL_RCC_GetSysClockFreq+0x1b2>
 801bb28:	2b01      	cmp	r3, #1
 801bb2a:	d302      	bcc.n	801bb32 <HAL_RCC_GetSysClockFreq+0x106>
 801bb2c:	2b02      	cmp	r3, #2
 801bb2e:	d078      	beq.n	801bc22 <HAL_RCC_GetSysClockFreq+0x1f6>
 801bb30:	e099      	b.n	801bc66 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bb32:	4b6f      	ldr	r3, [pc, #444]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	f003 0320 	and.w	r3, r3, #32
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d02d      	beq.n	801bb9a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801bb3e:	4b6c      	ldr	r3, [pc, #432]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	08db      	lsrs	r3, r3, #3
 801bb44:	f003 0303 	and.w	r3, r3, #3
 801bb48:	4a6a      	ldr	r2, [pc, #424]	; (801bcf4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801bb4a:	fa22 f303 	lsr.w	r3, r2, r3
 801bb4e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	ee07 3a90 	vmov	s15, r3
 801bb56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb5a:	693b      	ldr	r3, [r7, #16]
 801bb5c:	ee07 3a90 	vmov	s15, r3
 801bb60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb68:	4b61      	ldr	r3, [pc, #388]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bb6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb70:	ee07 3a90 	vmov	s15, r3
 801bb74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb78:	ed97 6a02 	vldr	s12, [r7, #8]
 801bb7c:	eddf 5a60 	vldr	s11, [pc, #384]	; 801bd00 <HAL_RCC_GetSysClockFreq+0x2d4>
 801bb80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bb84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bb88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb90:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bb94:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 801bb98:	e087      	b.n	801bcaa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801bb9a:	693b      	ldr	r3, [r7, #16]
 801bb9c:	ee07 3a90 	vmov	s15, r3
 801bba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bba4:	eddf 6a57 	vldr	s13, [pc, #348]	; 801bd04 <HAL_RCC_GetSysClockFreq+0x2d8>
 801bba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bbac:	4b50      	ldr	r3, [pc, #320]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbb4:	ee07 3a90 	vmov	s15, r3
 801bbb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bbbc:	ed97 6a02 	vldr	s12, [r7, #8]
 801bbc0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 801bd00 <HAL_RCC_GetSysClockFreq+0x2d4>
 801bbc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bbc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bbcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bbd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bbd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bbd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801bbdc:	e065      	b.n	801bcaa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801bbde:	693b      	ldr	r3, [r7, #16]
 801bbe0:	ee07 3a90 	vmov	s15, r3
 801bbe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bbe8:	eddf 6a47 	vldr	s13, [pc, #284]	; 801bd08 <HAL_RCC_GetSysClockFreq+0x2dc>
 801bbec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bbf0:	4b3f      	ldr	r3, [pc, #252]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbf8:	ee07 3a90 	vmov	s15, r3
 801bbfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc00:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc04:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801bd00 <HAL_RCC_GetSysClockFreq+0x2d4>
 801bc08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc18:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801bc20:	e043      	b.n	801bcaa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801bc22:	693b      	ldr	r3, [r7, #16]
 801bc24:	ee07 3a90 	vmov	s15, r3
 801bc28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc2c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801bd0c <HAL_RCC_GetSysClockFreq+0x2e0>
 801bc30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc34:	4b2e      	ldr	r3, [pc, #184]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc3c:	ee07 3a90 	vmov	s15, r3
 801bc40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc44:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc48:	eddf 5a2d 	vldr	s11, [pc, #180]	; 801bd00 <HAL_RCC_GetSysClockFreq+0x2d4>
 801bc4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801bc64:	e021      	b.n	801bcaa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801bc66:	693b      	ldr	r3, [r7, #16]
 801bc68:	ee07 3a90 	vmov	s15, r3
 801bc6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc70:	eddf 6a25 	vldr	s13, [pc, #148]	; 801bd08 <HAL_RCC_GetSysClockFreq+0x2dc>
 801bc74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc78:	4b1d      	ldr	r3, [pc, #116]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc80:	ee07 3a90 	vmov	s15, r3
 801bc84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc88:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc8c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 801bd00 <HAL_RCC_GetSysClockFreq+0x2d4>
 801bc90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bca4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801bca8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 801bcaa:	4b11      	ldr	r3, [pc, #68]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bcac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcae:	0a5b      	lsrs	r3, r3, #9
 801bcb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bcb4:	3301      	adds	r3, #1
 801bcb6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 801bcb8:	683b      	ldr	r3, [r7, #0]
 801bcba:	ee07 3a90 	vmov	s15, r3
 801bcbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bcc2:	edd7 6a07 	vldr	s13, [r7, #28]
 801bcc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bcca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bcce:	ee17 3a90 	vmov	r3, s15
 801bcd2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801bcd4:	e005      	b.n	801bce2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	61bb      	str	r3, [r7, #24]
    break;
 801bcda:	e002      	b.n	801bce2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 801bcdc:	4b06      	ldr	r3, [pc, #24]	; (801bcf8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 801bcde:	61bb      	str	r3, [r7, #24]
    break;
 801bce0:	bf00      	nop
  }

  return sysclockfreq;
 801bce2:	69bb      	ldr	r3, [r7, #24]
}
 801bce4:	4618      	mov	r0, r3
 801bce6:	3724      	adds	r7, #36	; 0x24
 801bce8:	46bd      	mov	sp, r7
 801bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcee:	4770      	bx	lr
 801bcf0:	58024400 	.word	0x58024400
 801bcf4:	03d09000 	.word	0x03d09000
 801bcf8:	003d0900 	.word	0x003d0900
 801bcfc:	007a1200 	.word	0x007a1200
 801bd00:	46000000 	.word	0x46000000
 801bd04:	4c742400 	.word	0x4c742400
 801bd08:	4a742400 	.word	0x4a742400
 801bd0c:	4af42400 	.word	0x4af42400

0801bd10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b082      	sub	sp, #8
 801bd14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801bd16:	f7ff fe89 	bl	801ba2c <HAL_RCC_GetSysClockFreq>
 801bd1a:	4601      	mov	r1, r0
 801bd1c:	4b10      	ldr	r3, [pc, #64]	; (801bd60 <HAL_RCC_GetHCLKFreq+0x50>)
 801bd1e:	699b      	ldr	r3, [r3, #24]
 801bd20:	0a1b      	lsrs	r3, r3, #8
 801bd22:	f003 030f 	and.w	r3, r3, #15
 801bd26:	4a0f      	ldr	r2, [pc, #60]	; (801bd64 <HAL_RCC_GetHCLKFreq+0x54>)
 801bd28:	5cd3      	ldrb	r3, [r2, r3]
 801bd2a:	f003 031f 	and.w	r3, r3, #31
 801bd2e:	fa21 f303 	lsr.w	r3, r1, r3
 801bd32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bd34:	4b0a      	ldr	r3, [pc, #40]	; (801bd60 <HAL_RCC_GetHCLKFreq+0x50>)
 801bd36:	699b      	ldr	r3, [r3, #24]
 801bd38:	f003 030f 	and.w	r3, r3, #15
 801bd3c:	4a09      	ldr	r2, [pc, #36]	; (801bd64 <HAL_RCC_GetHCLKFreq+0x54>)
 801bd3e:	5cd3      	ldrb	r3, [r2, r3]
 801bd40:	f003 031f 	and.w	r3, r3, #31
 801bd44:	687a      	ldr	r2, [r7, #4]
 801bd46:	fa22 f303 	lsr.w	r3, r2, r3
 801bd4a:	4a07      	ldr	r2, [pc, #28]	; (801bd68 <HAL_RCC_GetHCLKFreq+0x58>)
 801bd4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bd4e:	4a07      	ldr	r2, [pc, #28]	; (801bd6c <HAL_RCC_GetHCLKFreq+0x5c>)
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801bd54:	4b04      	ldr	r3, [pc, #16]	; (801bd68 <HAL_RCC_GetHCLKFreq+0x58>)
 801bd56:	681b      	ldr	r3, [r3, #0]
}
 801bd58:	4618      	mov	r0, r3
 801bd5a:	3708      	adds	r7, #8
 801bd5c:	46bd      	mov	sp, r7
 801bd5e:	bd80      	pop	{r7, pc}
 801bd60:	58024400 	.word	0x58024400
 801bd64:	0802efe4 	.word	0x0802efe4
 801bd68:	2400069c 	.word	0x2400069c
 801bd6c:	24000698 	.word	0x24000698

0801bd70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801bd74:	f7ff ffcc 	bl	801bd10 <HAL_RCC_GetHCLKFreq>
 801bd78:	4601      	mov	r1, r0
 801bd7a:	4b06      	ldr	r3, [pc, #24]	; (801bd94 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bd7c:	69db      	ldr	r3, [r3, #28]
 801bd7e:	091b      	lsrs	r3, r3, #4
 801bd80:	f003 0307 	and.w	r3, r3, #7
 801bd84:	4a04      	ldr	r2, [pc, #16]	; (801bd98 <HAL_RCC_GetPCLK1Freq+0x28>)
 801bd86:	5cd3      	ldrb	r3, [r2, r3]
 801bd88:	f003 031f 	and.w	r3, r3, #31
 801bd8c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801bd90:	4618      	mov	r0, r3
 801bd92:	bd80      	pop	{r7, pc}
 801bd94:	58024400 	.word	0x58024400
 801bd98:	0802efe4 	.word	0x0802efe4

0801bd9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801bd9c:	b580      	push	{r7, lr}
 801bd9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801bda0:	f7ff ffb6 	bl	801bd10 <HAL_RCC_GetHCLKFreq>
 801bda4:	4601      	mov	r1, r0
 801bda6:	4b06      	ldr	r3, [pc, #24]	; (801bdc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 801bda8:	69db      	ldr	r3, [r3, #28]
 801bdaa:	0a1b      	lsrs	r3, r3, #8
 801bdac:	f003 0307 	and.w	r3, r3, #7
 801bdb0:	4a04      	ldr	r2, [pc, #16]	; (801bdc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 801bdb2:	5cd3      	ldrb	r3, [r2, r3]
 801bdb4:	f003 031f 	and.w	r3, r3, #31
 801bdb8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	bd80      	pop	{r7, pc}
 801bdc0:	58024400 	.word	0x58024400
 801bdc4:	0802efe4 	.word	0x0802efe4

0801bdc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801bdc8:	b480      	push	{r7}
 801bdca:	b083      	sub	sp, #12
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
 801bdd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	223f      	movs	r2, #63	; 0x3f
 801bdd6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801bdd8:	4b1a      	ldr	r3, [pc, #104]	; (801be44 <HAL_RCC_GetClockConfig+0x7c>)
 801bdda:	691b      	ldr	r3, [r3, #16]
 801bddc:	f003 0207 	and.w	r2, r3, #7
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801bde4:	4b17      	ldr	r3, [pc, #92]	; (801be44 <HAL_RCC_GetClockConfig+0x7c>)
 801bde6:	699b      	ldr	r3, [r3, #24]
 801bde8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801bdf0:	4b14      	ldr	r3, [pc, #80]	; (801be44 <HAL_RCC_GetClockConfig+0x7c>)
 801bdf2:	699b      	ldr	r3, [r3, #24]
 801bdf4:	f003 020f 	and.w	r2, r3, #15
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801bdfc:	4b11      	ldr	r3, [pc, #68]	; (801be44 <HAL_RCC_GetClockConfig+0x7c>)
 801bdfe:	699b      	ldr	r3, [r3, #24]
 801be00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801be08:	4b0e      	ldr	r3, [pc, #56]	; (801be44 <HAL_RCC_GetClockConfig+0x7c>)
 801be0a:	69db      	ldr	r3, [r3, #28]
 801be0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801be14:	4b0b      	ldr	r3, [pc, #44]	; (801be44 <HAL_RCC_GetClockConfig+0x7c>)
 801be16:	69db      	ldr	r3, [r3, #28]
 801be18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801be20:	4b08      	ldr	r3, [pc, #32]	; (801be44 <HAL_RCC_GetClockConfig+0x7c>)
 801be22:	6a1b      	ldr	r3, [r3, #32]
 801be24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801be2c:	4b06      	ldr	r3, [pc, #24]	; (801be48 <HAL_RCC_GetClockConfig+0x80>)
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	f003 020f 	and.w	r2, r3, #15
 801be34:	683b      	ldr	r3, [r7, #0]
 801be36:	601a      	str	r2, [r3, #0]
}
 801be38:	bf00      	nop
 801be3a:	370c      	adds	r7, #12
 801be3c:	46bd      	mov	sp, r7
 801be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be42:	4770      	bx	lr
 801be44:	58024400 	.word	0x58024400
 801be48:	52002000 	.word	0x52002000

0801be4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b086      	sub	sp, #24
 801be50:	af00      	add	r7, sp, #0
 801be52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801be54:	2300      	movs	r3, #0
 801be56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801be58:	2300      	movs	r3, #0
 801be5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801be64:	2b00      	cmp	r3, #0
 801be66:	d03d      	beq.n	801bee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801be6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801be70:	d013      	beq.n	801be9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 801be72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801be76:	d802      	bhi.n	801be7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d007      	beq.n	801be8c <HAL_RCCEx_PeriphCLKConfig+0x40>
 801be7c:	e01f      	b.n	801bebe <HAL_RCCEx_PeriphCLKConfig+0x72>
 801be7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801be82:	d013      	beq.n	801beac <HAL_RCCEx_PeriphCLKConfig+0x60>
 801be84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801be88:	d01c      	beq.n	801bec4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 801be8a:	e018      	b.n	801bebe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801be8c:	4baf      	ldr	r3, [pc, #700]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be90:	4aae      	ldr	r2, [pc, #696]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801be92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801be96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801be98:	e015      	b.n	801bec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	3304      	adds	r3, #4
 801be9e:	2102      	movs	r1, #2
 801bea0:	4618      	mov	r0, r3
 801bea2:	f001 fd33 	bl	801d90c <RCCEx_PLL2_Config>
 801bea6:	4603      	mov	r3, r0
 801bea8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801beaa:	e00c      	b.n	801bec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	3324      	adds	r3, #36	; 0x24
 801beb0:	2102      	movs	r1, #2
 801beb2:	4618      	mov	r0, r3
 801beb4:	f001 fddc 	bl	801da70 <RCCEx_PLL3_Config>
 801beb8:	4603      	mov	r3, r0
 801beba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801bebc:	e003      	b.n	801bec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801bebe:	2301      	movs	r3, #1
 801bec0:	75fb      	strb	r3, [r7, #23]
      break;
 801bec2:	e000      	b.n	801bec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 801bec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 801bec6:	7dfb      	ldrb	r3, [r7, #23]
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d109      	bne.n	801bee0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801becc:	4b9f      	ldr	r3, [pc, #636]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801bece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bed8:	499c      	ldr	r1, [pc, #624]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801beda:	4313      	orrs	r3, r2
 801bedc:	650b      	str	r3, [r1, #80]	; 0x50
 801bede:	e001      	b.n	801bee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bee0:	7dfb      	ldrb	r3, [r7, #23]
 801bee2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801beec:	2b00      	cmp	r3, #0
 801beee:	d03d      	beq.n	801bf6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bef4:	2b04      	cmp	r3, #4
 801bef6:	d826      	bhi.n	801bf46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 801bef8:	a201      	add	r2, pc, #4	; (adr r2, 801bf00 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 801befa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801befe:	bf00      	nop
 801bf00:	0801bf15 	.word	0x0801bf15
 801bf04:	0801bf23 	.word	0x0801bf23
 801bf08:	0801bf35 	.word	0x0801bf35
 801bf0c:	0801bf4d 	.word	0x0801bf4d
 801bf10:	0801bf4d 	.word	0x0801bf4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bf14:	4b8d      	ldr	r3, [pc, #564]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801bf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf18:	4a8c      	ldr	r2, [pc, #560]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801bf1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bf1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801bf20:	e015      	b.n	801bf4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	3304      	adds	r3, #4
 801bf26:	2100      	movs	r1, #0
 801bf28:	4618      	mov	r0, r3
 801bf2a:	f001 fcef 	bl	801d90c <RCCEx_PLL2_Config>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801bf32:	e00c      	b.n	801bf4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	3324      	adds	r3, #36	; 0x24
 801bf38:	2100      	movs	r1, #0
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	f001 fd98 	bl	801da70 <RCCEx_PLL3_Config>
 801bf40:	4603      	mov	r3, r0
 801bf42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801bf44:	e003      	b.n	801bf4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801bf46:	2301      	movs	r3, #1
 801bf48:	75fb      	strb	r3, [r7, #23]
      break;
 801bf4a:	e000      	b.n	801bf4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 801bf4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801bf4e:	7dfb      	ldrb	r3, [r7, #23]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d109      	bne.n	801bf68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801bf54:	4b7d      	ldr	r3, [pc, #500]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801bf56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bf58:	f023 0207 	bic.w	r2, r3, #7
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf60:	497a      	ldr	r1, [pc, #488]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801bf62:	4313      	orrs	r3, r2
 801bf64:	650b      	str	r3, [r1, #80]	; 0x50
 801bf66:	e001      	b.n	801bf6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bf68:	7dfb      	ldrb	r3, [r7, #23]
 801bf6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d03e      	beq.n	801bff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf7c:	2b80      	cmp	r3, #128	; 0x80
 801bf7e:	d01c      	beq.n	801bfba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 801bf80:	2b80      	cmp	r3, #128	; 0x80
 801bf82:	d804      	bhi.n	801bf8e <HAL_RCCEx_PeriphCLKConfig+0x142>
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d008      	beq.n	801bf9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 801bf88:	2b40      	cmp	r3, #64	; 0x40
 801bf8a:	d00d      	beq.n	801bfa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 801bf8c:	e01e      	b.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x180>
 801bf8e:	2bc0      	cmp	r3, #192	; 0xc0
 801bf90:	d01f      	beq.n	801bfd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 801bf92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf96:	d01e      	beq.n	801bfd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 801bf98:	e018      	b.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bf9a:	4b6c      	ldr	r3, [pc, #432]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801bf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf9e:	4a6b      	ldr	r2, [pc, #428]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801bfa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bfa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801bfa6:	e017      	b.n	801bfd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	3304      	adds	r3, #4
 801bfac:	2100      	movs	r1, #0
 801bfae:	4618      	mov	r0, r3
 801bfb0:	f001 fcac 	bl	801d90c <RCCEx_PLL2_Config>
 801bfb4:	4603      	mov	r3, r0
 801bfb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801bfb8:	e00e      	b.n	801bfd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	3324      	adds	r3, #36	; 0x24
 801bfbe:	2100      	movs	r1, #0
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	f001 fd55 	bl	801da70 <RCCEx_PLL3_Config>
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801bfca:	e005      	b.n	801bfd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801bfcc:	2301      	movs	r3, #1
 801bfce:	75fb      	strb	r3, [r7, #23]
      break;
 801bfd0:	e002      	b.n	801bfd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 801bfd2:	bf00      	nop
 801bfd4:	e000      	b.n	801bfd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 801bfd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 801bfd8:	7dfb      	ldrb	r3, [r7, #23]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d109      	bne.n	801bff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801bfde:	4b5b      	ldr	r3, [pc, #364]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801bfe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bfe2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bfea:	4958      	ldr	r1, [pc, #352]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801bfec:	4313      	orrs	r3, r2
 801bfee:	650b      	str	r3, [r1, #80]	; 0x50
 801bff0:	e001      	b.n	801bff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bff2:	7dfb      	ldrb	r3, [r7, #23]
 801bff4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d044      	beq.n	801c08c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c00c:	d01f      	beq.n	801c04e <HAL_RCCEx_PeriphCLKConfig+0x202>
 801c00e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c012:	d805      	bhi.n	801c020 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 801c014:	2b00      	cmp	r3, #0
 801c016:	d00a      	beq.n	801c02e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801c018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c01c:	d00e      	beq.n	801c03c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 801c01e:	e01f      	b.n	801c060 <HAL_RCCEx_PeriphCLKConfig+0x214>
 801c020:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801c024:	d01f      	beq.n	801c066 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 801c026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c02a:	d01e      	beq.n	801c06a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801c02c:	e018      	b.n	801c060 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c02e:	4b47      	ldr	r3, [pc, #284]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c032:	4a46      	ldr	r2, [pc, #280]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c03a:	e017      	b.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	3304      	adds	r3, #4
 801c040:	2100      	movs	r1, #0
 801c042:	4618      	mov	r0, r3
 801c044:	f001 fc62 	bl	801d90c <RCCEx_PLL2_Config>
 801c048:	4603      	mov	r3, r0
 801c04a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801c04c:	e00e      	b.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	3324      	adds	r3, #36	; 0x24
 801c052:	2100      	movs	r1, #0
 801c054:	4618      	mov	r0, r3
 801c056:	f001 fd0b 	bl	801da70 <RCCEx_PLL3_Config>
 801c05a:	4603      	mov	r3, r0
 801c05c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c05e:	e005      	b.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801c060:	2301      	movs	r3, #1
 801c062:	75fb      	strb	r3, [r7, #23]
      break;
 801c064:	e002      	b.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 801c066:	bf00      	nop
 801c068:	e000      	b.n	801c06c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 801c06a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c06c:	7dfb      	ldrb	r3, [r7, #23]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d10a      	bne.n	801c088 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801c072:	4b36      	ldr	r3, [pc, #216]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c076:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c080:	4932      	ldr	r1, [pc, #200]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c082:	4313      	orrs	r3, r2
 801c084:	658b      	str	r3, [r1, #88]	; 0x58
 801c086:	e001      	b.n	801c08c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c088:	7dfb      	ldrb	r3, [r7, #23]
 801c08a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c094:	2b00      	cmp	r3, #0
 801c096:	d044      	beq.n	801c122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c09e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c0a2:	d01f      	beq.n	801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801c0a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c0a8:	d805      	bhi.n	801c0b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d00a      	beq.n	801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 801c0ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c0b2:	d00e      	beq.n	801c0d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 801c0b4:	e01f      	b.n	801c0f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 801c0b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c0ba:	d01f      	beq.n	801c0fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801c0bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c0c0:	d01e      	beq.n	801c100 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801c0c2:	e018      	b.n	801c0f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c0c4:	4b21      	ldr	r3, [pc, #132]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0c8:	4a20      	ldr	r2, [pc, #128]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c0ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c0ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c0d0:	e017      	b.n	801c102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	3304      	adds	r3, #4
 801c0d6:	2100      	movs	r1, #0
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f001 fc17 	bl	801d90c <RCCEx_PLL2_Config>
 801c0de:	4603      	mov	r3, r0
 801c0e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801c0e2:	e00e      	b.n	801c102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	3324      	adds	r3, #36	; 0x24
 801c0e8:	2100      	movs	r1, #0
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	f001 fcc0 	bl	801da70 <RCCEx_PLL3_Config>
 801c0f0:	4603      	mov	r3, r0
 801c0f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c0f4:	e005      	b.n	801c102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801c0f6:	2301      	movs	r3, #1
 801c0f8:	75fb      	strb	r3, [r7, #23]
      break;
 801c0fa:	e002      	b.n	801c102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 801c0fc:	bf00      	nop
 801c0fe:	e000      	b.n	801c102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 801c100:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c102:	7dfb      	ldrb	r3, [r7, #23]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d10a      	bne.n	801c11e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c108:	4b10      	ldr	r3, [pc, #64]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c10c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c116:	490d      	ldr	r1, [pc, #52]	; (801c14c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c118:	4313      	orrs	r3, r2
 801c11a:	658b      	str	r3, [r1, #88]	; 0x58
 801c11c:	e001      	b.n	801c122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c11e:	7dfb      	ldrb	r3, [r7, #23]
 801c120:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d035      	beq.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c132:	2b10      	cmp	r3, #16
 801c134:	d00c      	beq.n	801c150 <HAL_RCCEx_PeriphCLKConfig+0x304>
 801c136:	2b10      	cmp	r3, #16
 801c138:	d802      	bhi.n	801c140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d01b      	beq.n	801c176 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 801c13e:	e017      	b.n	801c170 <HAL_RCCEx_PeriphCLKConfig+0x324>
 801c140:	2b20      	cmp	r3, #32
 801c142:	d00c      	beq.n	801c15e <HAL_RCCEx_PeriphCLKConfig+0x312>
 801c144:	2b30      	cmp	r3, #48	; 0x30
 801c146:	d018      	beq.n	801c17a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 801c148:	e012      	b.n	801c170 <HAL_RCCEx_PeriphCLKConfig+0x324>
 801c14a:	bf00      	nop
 801c14c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c150:	4baf      	ldr	r3, [pc, #700]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c154:	4aae      	ldr	r2, [pc, #696]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c15a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801c15c:	e00e      	b.n	801c17c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	3304      	adds	r3, #4
 801c162:	2102      	movs	r1, #2
 801c164:	4618      	mov	r0, r3
 801c166:	f001 fbd1 	bl	801d90c <RCCEx_PLL2_Config>
 801c16a:	4603      	mov	r3, r0
 801c16c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801c16e:	e005      	b.n	801c17c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801c170:	2301      	movs	r3, #1
 801c172:	75fb      	strb	r3, [r7, #23]
      break;
 801c174:	e002      	b.n	801c17c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 801c176:	bf00      	nop
 801c178:	e000      	b.n	801c17c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 801c17a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c17c:	7dfb      	ldrb	r3, [r7, #23]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d109      	bne.n	801c196 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801c182:	4ba3      	ldr	r3, [pc, #652]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c186:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c18e:	49a0      	ldr	r1, [pc, #640]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c190:	4313      	orrs	r3, r2
 801c192:	64cb      	str	r3, [r1, #76]	; 0x4c
 801c194:	e001      	b.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c196:	7dfb      	ldrb	r3, [r7, #23]
 801c198:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d042      	beq.n	801c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c1aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c1ae:	d01f      	beq.n	801c1f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 801c1b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c1b4:	d805      	bhi.n	801c1c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d00a      	beq.n	801c1d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 801c1ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c1be:	d00e      	beq.n	801c1de <HAL_RCCEx_PeriphCLKConfig+0x392>
 801c1c0:	e01f      	b.n	801c202 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 801c1c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c1c6:	d01f      	beq.n	801c208 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 801c1c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c1cc:	d01e      	beq.n	801c20c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 801c1ce:	e018      	b.n	801c202 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c1d0:	4b8f      	ldr	r3, [pc, #572]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1d4:	4a8e      	ldr	r2, [pc, #568]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c1d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c1da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801c1dc:	e017      	b.n	801c20e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	3304      	adds	r3, #4
 801c1e2:	2100      	movs	r1, #0
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	f001 fb91 	bl	801d90c <RCCEx_PLL2_Config>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801c1ee:	e00e      	b.n	801c20e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	3324      	adds	r3, #36	; 0x24
 801c1f4:	2100      	movs	r1, #0
 801c1f6:	4618      	mov	r0, r3
 801c1f8:	f001 fc3a 	bl	801da70 <RCCEx_PLL3_Config>
 801c1fc:	4603      	mov	r3, r0
 801c1fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801c200:	e005      	b.n	801c20e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c202:	2301      	movs	r3, #1
 801c204:	75fb      	strb	r3, [r7, #23]
      break;
 801c206:	e002      	b.n	801c20e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 801c208:	bf00      	nop
 801c20a:	e000      	b.n	801c20e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 801c20c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c20e:	7dfb      	ldrb	r3, [r7, #23]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d109      	bne.n	801c228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c214:	4b7e      	ldr	r3, [pc, #504]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c218:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c220:	497b      	ldr	r1, [pc, #492]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c222:	4313      	orrs	r3, r2
 801c224:	650b      	str	r3, [r1, #80]	; 0x50
 801c226:	e001      	b.n	801c22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c228:	7dfb      	ldrb	r3, [r7, #23]
 801c22a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c234:	2b00      	cmp	r3, #0
 801c236:	d042      	beq.n	801c2be <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c23c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c240:	d01b      	beq.n	801c27a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 801c242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c246:	d805      	bhi.n	801c254 <HAL_RCCEx_PeriphCLKConfig+0x408>
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d022      	beq.n	801c292 <HAL_RCCEx_PeriphCLKConfig+0x446>
 801c24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c250:	d00a      	beq.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 801c252:	e01b      	b.n	801c28c <HAL_RCCEx_PeriphCLKConfig+0x440>
 801c254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c258:	d01d      	beq.n	801c296 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 801c25a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c25e:	d01c      	beq.n	801c29a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 801c260:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c264:	d01b      	beq.n	801c29e <HAL_RCCEx_PeriphCLKConfig+0x452>
 801c266:	e011      	b.n	801c28c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	3304      	adds	r3, #4
 801c26c:	2101      	movs	r1, #1
 801c26e:	4618      	mov	r0, r3
 801c270:	f001 fb4c 	bl	801d90c <RCCEx_PLL2_Config>
 801c274:	4603      	mov	r3, r0
 801c276:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801c278:	e012      	b.n	801c2a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	3324      	adds	r3, #36	; 0x24
 801c27e:	2101      	movs	r1, #1
 801c280:	4618      	mov	r0, r3
 801c282:	f001 fbf5 	bl	801da70 <RCCEx_PLL3_Config>
 801c286:	4603      	mov	r3, r0
 801c288:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801c28a:	e009      	b.n	801c2a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c28c:	2301      	movs	r3, #1
 801c28e:	75fb      	strb	r3, [r7, #23]
      break;
 801c290:	e006      	b.n	801c2a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801c292:	bf00      	nop
 801c294:	e004      	b.n	801c2a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801c296:	bf00      	nop
 801c298:	e002      	b.n	801c2a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801c29a:	bf00      	nop
 801c29c:	e000      	b.n	801c2a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801c29e:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c2a0:	7dfb      	ldrb	r3, [r7, #23]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d109      	bne.n	801c2ba <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801c2a6:	4b5a      	ldr	r3, [pc, #360]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c2a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c2aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c2b2:	4957      	ldr	r1, [pc, #348]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c2b4:	4313      	orrs	r3, r2
 801c2b6:	650b      	str	r3, [r1, #80]	; 0x50
 801c2b8:	e001      	b.n	801c2be <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c2ba:	7dfb      	ldrb	r3, [r7, #23]
 801c2bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d044      	beq.n	801c354 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c2d4:	d01b      	beq.n	801c30e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801c2d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c2da:	d805      	bhi.n	801c2e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d022      	beq.n	801c326 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801c2e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c2e4:	d00a      	beq.n	801c2fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 801c2e6:	e01b      	b.n	801c320 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 801c2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c2ec:	d01d      	beq.n	801c32a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801c2ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c2f2:	d01c      	beq.n	801c32e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 801c2f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c2f8:	d01b      	beq.n	801c332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 801c2fa:	e011      	b.n	801c320 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	3304      	adds	r3, #4
 801c300:	2101      	movs	r1, #1
 801c302:	4618      	mov	r0, r3
 801c304:	f001 fb02 	bl	801d90c <RCCEx_PLL2_Config>
 801c308:	4603      	mov	r3, r0
 801c30a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801c30c:	e012      	b.n	801c334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	3324      	adds	r3, #36	; 0x24
 801c312:	2101      	movs	r1, #1
 801c314:	4618      	mov	r0, r3
 801c316:	f001 fbab 	bl	801da70 <RCCEx_PLL3_Config>
 801c31a:	4603      	mov	r3, r0
 801c31c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801c31e:	e009      	b.n	801c334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 801c320:	2301      	movs	r3, #1
 801c322:	75fb      	strb	r3, [r7, #23]
      break;
 801c324:	e006      	b.n	801c334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801c326:	bf00      	nop
 801c328:	e004      	b.n	801c334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801c32a:	bf00      	nop
 801c32c:	e002      	b.n	801c334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801c32e:	bf00      	nop
 801c330:	e000      	b.n	801c334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801c332:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c334:	7dfb      	ldrb	r3, [r7, #23]
 801c336:	2b00      	cmp	r3, #0
 801c338:	d10a      	bne.n	801c350 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801c33a:	4b35      	ldr	r3, [pc, #212]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c33e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c348:	4931      	ldr	r1, [pc, #196]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c34a:	4313      	orrs	r3, r2
 801c34c:	658b      	str	r3, [r1, #88]	; 0x58
 801c34e:	e001      	b.n	801c354 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c350:	7dfb      	ldrb	r3, [r7, #23]
 801c352:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d02d      	beq.n	801c3bc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c368:	d005      	beq.n	801c376 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 801c36a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c36e:	d009      	beq.n	801c384 <HAL_RCCEx_PeriphCLKConfig+0x538>
 801c370:	2b00      	cmp	r3, #0
 801c372:	d013      	beq.n	801c39c <HAL_RCCEx_PeriphCLKConfig+0x550>
 801c374:	e00f      	b.n	801c396 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c376:	4b26      	ldr	r3, [pc, #152]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c37a:	4a25      	ldr	r2, [pc, #148]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c37c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801c382:	e00c      	b.n	801c39e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	3304      	adds	r3, #4
 801c388:	2101      	movs	r1, #1
 801c38a:	4618      	mov	r0, r3
 801c38c:	f001 fabe 	bl	801d90c <RCCEx_PLL2_Config>
 801c390:	4603      	mov	r3, r0
 801c392:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801c394:	e003      	b.n	801c39e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c396:	2301      	movs	r3, #1
 801c398:	75fb      	strb	r3, [r7, #23]
      break;
 801c39a:	e000      	b.n	801c39e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 801c39c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c39e:	7dfb      	ldrb	r3, [r7, #23]
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d109      	bne.n	801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801c3a4:	4b1a      	ldr	r3, [pc, #104]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c3a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c3b0:	4917      	ldr	r1, [pc, #92]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c3b2:	4313      	orrs	r3, r2
 801c3b4:	650b      	str	r3, [r1, #80]	; 0x50
 801c3b6:	e001      	b.n	801c3bc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c3b8:	7dfb      	ldrb	r3, [r7, #23]
 801c3ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d035      	beq.n	801c434 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c3cc:	2b03      	cmp	r3, #3
 801c3ce:	d81b      	bhi.n	801c408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 801c3d0:	a201      	add	r2, pc, #4	; (adr r2, 801c3d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 801c3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c3d6:	bf00      	nop
 801c3d8:	0801c415 	.word	0x0801c415
 801c3dc:	0801c3e9 	.word	0x0801c3e9
 801c3e0:	0801c3f7 	.word	0x0801c3f7
 801c3e4:	0801c415 	.word	0x0801c415
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c3e8:	4b09      	ldr	r3, [pc, #36]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3ec:	4a08      	ldr	r2, [pc, #32]	; (801c410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c3f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 801c3f4:	e00f      	b.n	801c416 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	3304      	adds	r3, #4
 801c3fa:	2102      	movs	r1, #2
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	f001 fa85 	bl	801d90c <RCCEx_PLL2_Config>
 801c402:	4603      	mov	r3, r0
 801c404:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 801c406:	e006      	b.n	801c416 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801c408:	2301      	movs	r3, #1
 801c40a:	75fb      	strb	r3, [r7, #23]
      break;
 801c40c:	e003      	b.n	801c416 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 801c40e:	bf00      	nop
 801c410:	58024400 	.word	0x58024400
      break;
 801c414:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c416:	7dfb      	ldrb	r3, [r7, #23]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d109      	bne.n	801c430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801c41c:	4bba      	ldr	r3, [pc, #744]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c41e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c420:	f023 0203 	bic.w	r2, r3, #3
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c428:	49b7      	ldr	r1, [pc, #732]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c42a:	4313      	orrs	r3, r2
 801c42c:	64cb      	str	r3, [r1, #76]	; 0x4c
 801c42e:	e001      	b.n	801c434 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c430:	7dfb      	ldrb	r3, [r7, #23]
 801c432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	f000 8086 	beq.w	801c54e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c442:	4bb2      	ldr	r3, [pc, #712]	; (801c70c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	4ab1      	ldr	r2, [pc, #708]	; (801c70c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 801c448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c44c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c44e:	f7f8 f9ab 	bl	80147a8 <HAL_GetTick>
 801c452:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c454:	e009      	b.n	801c46a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c456:	f7f8 f9a7 	bl	80147a8 <HAL_GetTick>
 801c45a:	4602      	mov	r2, r0
 801c45c:	693b      	ldr	r3, [r7, #16]
 801c45e:	1ad3      	subs	r3, r2, r3
 801c460:	2b64      	cmp	r3, #100	; 0x64
 801c462:	d902      	bls.n	801c46a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 801c464:	2303      	movs	r3, #3
 801c466:	75fb      	strb	r3, [r7, #23]
        break;
 801c468:	e005      	b.n	801c476 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c46a:	4ba8      	ldr	r3, [pc, #672]	; (801c70c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c472:	2b00      	cmp	r3, #0
 801c474:	d0ef      	beq.n	801c456 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 801c476:	7dfb      	ldrb	r3, [r7, #23]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d166      	bne.n	801c54a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801c47c:	4ba2      	ldr	r3, [pc, #648]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c47e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c486:	4053      	eors	r3, r2
 801c488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d013      	beq.n	801c4b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c490:	4b9d      	ldr	r3, [pc, #628]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c498:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c49a:	4b9b      	ldr	r3, [pc, #620]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c49e:	4a9a      	ldr	r2, [pc, #616]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c4a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c4a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c4a6:	4b98      	ldr	r3, [pc, #608]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4aa:	4a97      	ldr	r2, [pc, #604]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c4ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c4b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801c4b2:	4a95      	ldr	r2, [pc, #596]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c4be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c4c2:	d115      	bne.n	801c4f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c4c4:	f7f8 f970 	bl	80147a8 <HAL_GetTick>
 801c4c8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c4ca:	e00b      	b.n	801c4e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c4cc:	f7f8 f96c 	bl	80147a8 <HAL_GetTick>
 801c4d0:	4602      	mov	r2, r0
 801c4d2:	693b      	ldr	r3, [r7, #16]
 801c4d4:	1ad3      	subs	r3, r2, r3
 801c4d6:	f241 3288 	movw	r2, #5000	; 0x1388
 801c4da:	4293      	cmp	r3, r2
 801c4dc:	d902      	bls.n	801c4e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 801c4de:	2303      	movs	r3, #3
 801c4e0:	75fb      	strb	r3, [r7, #23]
            break;
 801c4e2:	e005      	b.n	801c4f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c4e4:	4b88      	ldr	r3, [pc, #544]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4e8:	f003 0302 	and.w	r3, r3, #2
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d0ed      	beq.n	801c4cc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 801c4f0:	7dfb      	ldrb	r3, [r7, #23]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d126      	bne.n	801c544 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c4fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c504:	d10d      	bne.n	801c522 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 801c506:	4b80      	ldr	r3, [pc, #512]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c508:	691b      	ldr	r3, [r3, #16]
 801c50a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c514:	0919      	lsrs	r1, r3, #4
 801c516:	4b7e      	ldr	r3, [pc, #504]	; (801c710 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 801c518:	400b      	ands	r3, r1
 801c51a:	497b      	ldr	r1, [pc, #492]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c51c:	4313      	orrs	r3, r2
 801c51e:	610b      	str	r3, [r1, #16]
 801c520:	e005      	b.n	801c52e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 801c522:	4b79      	ldr	r3, [pc, #484]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c524:	691b      	ldr	r3, [r3, #16]
 801c526:	4a78      	ldr	r2, [pc, #480]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c528:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c52c:	6113      	str	r3, [r2, #16]
 801c52e:	4b76      	ldr	r3, [pc, #472]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c53c:	4972      	ldr	r1, [pc, #456]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c53e:	4313      	orrs	r3, r2
 801c540:	670b      	str	r3, [r1, #112]	; 0x70
 801c542:	e004      	b.n	801c54e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c544:	7dfb      	ldrb	r3, [r7, #23]
 801c546:	75bb      	strb	r3, [r7, #22]
 801c548:	e001      	b.n	801c54e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c54a:	7dfb      	ldrb	r3, [r7, #23]
 801c54c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	f003 0301 	and.w	r3, r3, #1
 801c556:	2b00      	cmp	r3, #0
 801c558:	d07d      	beq.n	801c656 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c55e:	2b28      	cmp	r3, #40	; 0x28
 801c560:	d866      	bhi.n	801c630 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 801c562:	a201      	add	r2, pc, #4	; (adr r2, 801c568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 801c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c568:	0801c637 	.word	0x0801c637
 801c56c:	0801c631 	.word	0x0801c631
 801c570:	0801c631 	.word	0x0801c631
 801c574:	0801c631 	.word	0x0801c631
 801c578:	0801c631 	.word	0x0801c631
 801c57c:	0801c631 	.word	0x0801c631
 801c580:	0801c631 	.word	0x0801c631
 801c584:	0801c631 	.word	0x0801c631
 801c588:	0801c60d 	.word	0x0801c60d
 801c58c:	0801c631 	.word	0x0801c631
 801c590:	0801c631 	.word	0x0801c631
 801c594:	0801c631 	.word	0x0801c631
 801c598:	0801c631 	.word	0x0801c631
 801c59c:	0801c631 	.word	0x0801c631
 801c5a0:	0801c631 	.word	0x0801c631
 801c5a4:	0801c631 	.word	0x0801c631
 801c5a8:	0801c61f 	.word	0x0801c61f
 801c5ac:	0801c631 	.word	0x0801c631
 801c5b0:	0801c631 	.word	0x0801c631
 801c5b4:	0801c631 	.word	0x0801c631
 801c5b8:	0801c631 	.word	0x0801c631
 801c5bc:	0801c631 	.word	0x0801c631
 801c5c0:	0801c631 	.word	0x0801c631
 801c5c4:	0801c631 	.word	0x0801c631
 801c5c8:	0801c637 	.word	0x0801c637
 801c5cc:	0801c631 	.word	0x0801c631
 801c5d0:	0801c631 	.word	0x0801c631
 801c5d4:	0801c631 	.word	0x0801c631
 801c5d8:	0801c631 	.word	0x0801c631
 801c5dc:	0801c631 	.word	0x0801c631
 801c5e0:	0801c631 	.word	0x0801c631
 801c5e4:	0801c631 	.word	0x0801c631
 801c5e8:	0801c637 	.word	0x0801c637
 801c5ec:	0801c631 	.word	0x0801c631
 801c5f0:	0801c631 	.word	0x0801c631
 801c5f4:	0801c631 	.word	0x0801c631
 801c5f8:	0801c631 	.word	0x0801c631
 801c5fc:	0801c631 	.word	0x0801c631
 801c600:	0801c631 	.word	0x0801c631
 801c604:	0801c631 	.word	0x0801c631
 801c608:	0801c637 	.word	0x0801c637
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	3304      	adds	r3, #4
 801c610:	2101      	movs	r1, #1
 801c612:	4618      	mov	r0, r3
 801c614:	f001 f97a 	bl	801d90c <RCCEx_PLL2_Config>
 801c618:	4603      	mov	r3, r0
 801c61a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801c61c:	e00c      	b.n	801c638 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	3324      	adds	r3, #36	; 0x24
 801c622:	2101      	movs	r1, #1
 801c624:	4618      	mov	r0, r3
 801c626:	f001 fa23 	bl	801da70 <RCCEx_PLL3_Config>
 801c62a:	4603      	mov	r3, r0
 801c62c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801c62e:	e003      	b.n	801c638 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c630:	2301      	movs	r3, #1
 801c632:	75fb      	strb	r3, [r7, #23]
      break;
 801c634:	e000      	b.n	801c638 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 801c636:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c638:	7dfb      	ldrb	r3, [r7, #23]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d109      	bne.n	801c652 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801c63e:	4b32      	ldr	r3, [pc, #200]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c642:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c64a:	492f      	ldr	r1, [pc, #188]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c64c:	4313      	orrs	r3, r2
 801c64e:	654b      	str	r3, [r1, #84]	; 0x54
 801c650:	e001      	b.n	801c656 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c652:	7dfb      	ldrb	r3, [r7, #23]
 801c654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	f003 0302 	and.w	r3, r3, #2
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d037      	beq.n	801c6d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c666:	2b05      	cmp	r3, #5
 801c668:	d820      	bhi.n	801c6ac <HAL_RCCEx_PeriphCLKConfig+0x860>
 801c66a:	a201      	add	r2, pc, #4	; (adr r2, 801c670 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 801c66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c670:	0801c6b3 	.word	0x0801c6b3
 801c674:	0801c689 	.word	0x0801c689
 801c678:	0801c69b 	.word	0x0801c69b
 801c67c:	0801c6b3 	.word	0x0801c6b3
 801c680:	0801c6b3 	.word	0x0801c6b3
 801c684:	0801c6b3 	.word	0x0801c6b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	3304      	adds	r3, #4
 801c68c:	2101      	movs	r1, #1
 801c68e:	4618      	mov	r0, r3
 801c690:	f001 f93c 	bl	801d90c <RCCEx_PLL2_Config>
 801c694:	4603      	mov	r3, r0
 801c696:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801c698:	e00c      	b.n	801c6b4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	3324      	adds	r3, #36	; 0x24
 801c69e:	2101      	movs	r1, #1
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	f001 f9e5 	bl	801da70 <RCCEx_PLL3_Config>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801c6aa:	e003      	b.n	801c6b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c6ac:	2301      	movs	r3, #1
 801c6ae:	75fb      	strb	r3, [r7, #23]
      break;
 801c6b0:	e000      	b.n	801c6b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 801c6b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c6b4:	7dfb      	ldrb	r3, [r7, #23]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d109      	bne.n	801c6ce <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801c6ba:	4b13      	ldr	r3, [pc, #76]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c6be:	f023 0207 	bic.w	r2, r3, #7
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c6c6:	4910      	ldr	r1, [pc, #64]	; (801c708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c6c8:	4313      	orrs	r3, r2
 801c6ca:	654b      	str	r3, [r1, #84]	; 0x54
 801c6cc:	e001      	b.n	801c6d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c6ce:	7dfb      	ldrb	r3, [r7, #23]
 801c6d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	f003 0304 	and.w	r3, r3, #4
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d040      	beq.n	801c760 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c6e4:	2b05      	cmp	r3, #5
 801c6e6:	d827      	bhi.n	801c738 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 801c6e8:	a201      	add	r2, pc, #4	; (adr r2, 801c6f0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 801c6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6ee:	bf00      	nop
 801c6f0:	0801c73f 	.word	0x0801c73f
 801c6f4:	0801c715 	.word	0x0801c715
 801c6f8:	0801c727 	.word	0x0801c727
 801c6fc:	0801c73f 	.word	0x0801c73f
 801c700:	0801c73f 	.word	0x0801c73f
 801c704:	0801c73f 	.word	0x0801c73f
 801c708:	58024400 	.word	0x58024400
 801c70c:	58024800 	.word	0x58024800
 801c710:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	3304      	adds	r3, #4
 801c718:	2101      	movs	r1, #1
 801c71a:	4618      	mov	r0, r3
 801c71c:	f001 f8f6 	bl	801d90c <RCCEx_PLL2_Config>
 801c720:	4603      	mov	r3, r0
 801c722:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801c724:	e00c      	b.n	801c740 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	3324      	adds	r3, #36	; 0x24
 801c72a:	2101      	movs	r1, #1
 801c72c:	4618      	mov	r0, r3
 801c72e:	f001 f99f 	bl	801da70 <RCCEx_PLL3_Config>
 801c732:	4603      	mov	r3, r0
 801c734:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801c736:	e003      	b.n	801c740 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c738:	2301      	movs	r3, #1
 801c73a:	75fb      	strb	r3, [r7, #23]
      break;
 801c73c:	e000      	b.n	801c740 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 801c73e:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c740:	7dfb      	ldrb	r3, [r7, #23]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d10a      	bne.n	801c75c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c746:	4bb2      	ldr	r3, [pc, #712]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c74a:	f023 0207 	bic.w	r2, r3, #7
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c754:	49ae      	ldr	r1, [pc, #696]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c756:	4313      	orrs	r3, r2
 801c758:	658b      	str	r3, [r1, #88]	; 0x58
 801c75a:	e001      	b.n	801c760 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c75c:	7dfb      	ldrb	r3, [r7, #23]
 801c75e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	f003 0320 	and.w	r3, r3, #32
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d044      	beq.n	801c7f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c776:	d01b      	beq.n	801c7b0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 801c778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c77c:	d805      	bhi.n	801c78a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d022      	beq.n	801c7c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 801c782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c786:	d00a      	beq.n	801c79e <HAL_RCCEx_PeriphCLKConfig+0x952>
 801c788:	e01b      	b.n	801c7c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 801c78a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c78e:	d01d      	beq.n	801c7cc <HAL_RCCEx_PeriphCLKConfig+0x980>
 801c790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c794:	d01c      	beq.n	801c7d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 801c796:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c79a:	d01b      	beq.n	801c7d4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 801c79c:	e011      	b.n	801c7c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	3304      	adds	r3, #4
 801c7a2:	2100      	movs	r1, #0
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f001 f8b1 	bl	801d90c <RCCEx_PLL2_Config>
 801c7aa:	4603      	mov	r3, r0
 801c7ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801c7ae:	e012      	b.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	3324      	adds	r3, #36	; 0x24
 801c7b4:	2102      	movs	r1, #2
 801c7b6:	4618      	mov	r0, r3
 801c7b8:	f001 f95a 	bl	801da70 <RCCEx_PLL3_Config>
 801c7bc:	4603      	mov	r3, r0
 801c7be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801c7c0:	e009      	b.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c7c2:	2301      	movs	r3, #1
 801c7c4:	75fb      	strb	r3, [r7, #23]
      break;
 801c7c6:	e006      	b.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801c7c8:	bf00      	nop
 801c7ca:	e004      	b.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801c7cc:	bf00      	nop
 801c7ce:	e002      	b.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801c7d0:	bf00      	nop
 801c7d2:	e000      	b.n	801c7d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801c7d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c7d6:	7dfb      	ldrb	r3, [r7, #23]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d10a      	bne.n	801c7f2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c7dc:	4b8c      	ldr	r3, [pc, #560]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c7de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c7e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c7ea:	4989      	ldr	r1, [pc, #548]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c7ec:	4313      	orrs	r3, r2
 801c7ee:	654b      	str	r3, [r1, #84]	; 0x54
 801c7f0:	e001      	b.n	801c7f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c7f2:	7dfb      	ldrb	r3, [r7, #23]
 801c7f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	681b      	ldr	r3, [r3, #0]
 801c7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d044      	beq.n	801c88c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c80c:	d01b      	beq.n	801c846 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 801c80e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c812:	d805      	bhi.n	801c820 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 801c814:	2b00      	cmp	r3, #0
 801c816:	d022      	beq.n	801c85e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 801c818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c81c:	d00a      	beq.n	801c834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 801c81e:	e01b      	b.n	801c858 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 801c820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c824:	d01d      	beq.n	801c862 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 801c826:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c82a:	d01c      	beq.n	801c866 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 801c82c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c830:	d01b      	beq.n	801c86a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 801c832:	e011      	b.n	801c858 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	3304      	adds	r3, #4
 801c838:	2100      	movs	r1, #0
 801c83a:	4618      	mov	r0, r3
 801c83c:	f001 f866 	bl	801d90c <RCCEx_PLL2_Config>
 801c840:	4603      	mov	r3, r0
 801c842:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801c844:	e012      	b.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	3324      	adds	r3, #36	; 0x24
 801c84a:	2102      	movs	r1, #2
 801c84c:	4618      	mov	r0, r3
 801c84e:	f001 f90f 	bl	801da70 <RCCEx_PLL3_Config>
 801c852:	4603      	mov	r3, r0
 801c854:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801c856:	e009      	b.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c858:	2301      	movs	r3, #1
 801c85a:	75fb      	strb	r3, [r7, #23]
      break;
 801c85c:	e006      	b.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801c85e:	bf00      	nop
 801c860:	e004      	b.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801c862:	bf00      	nop
 801c864:	e002      	b.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801c866:	bf00      	nop
 801c868:	e000      	b.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801c86a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c86c:	7dfb      	ldrb	r3, [r7, #23]
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d10a      	bne.n	801c888 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801c872:	4b67      	ldr	r3, [pc, #412]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c876:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c880:	4963      	ldr	r1, [pc, #396]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c882:	4313      	orrs	r3, r2
 801c884:	658b      	str	r3, [r1, #88]	; 0x58
 801c886:	e001      	b.n	801c88c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c888:	7dfb      	ldrb	r3, [r7, #23]
 801c88a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c894:	2b00      	cmp	r3, #0
 801c896:	d044      	beq.n	801c922 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c89e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c8a2:	d01b      	beq.n	801c8dc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 801c8a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c8a8:	d805      	bhi.n	801c8b6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d022      	beq.n	801c8f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801c8ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c8b2:	d00a      	beq.n	801c8ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 801c8b4:	e01b      	b.n	801c8ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 801c8b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c8ba:	d01d      	beq.n	801c8f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 801c8bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801c8c0:	d01c      	beq.n	801c8fc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 801c8c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801c8c6:	d01b      	beq.n	801c900 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 801c8c8:	e011      	b.n	801c8ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	3304      	adds	r3, #4
 801c8ce:	2100      	movs	r1, #0
 801c8d0:	4618      	mov	r0, r3
 801c8d2:	f001 f81b 	bl	801d90c <RCCEx_PLL2_Config>
 801c8d6:	4603      	mov	r3, r0
 801c8d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801c8da:	e012      	b.n	801c902 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	3324      	adds	r3, #36	; 0x24
 801c8e0:	2102      	movs	r1, #2
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f001 f8c4 	bl	801da70 <RCCEx_PLL3_Config>
 801c8e8:	4603      	mov	r3, r0
 801c8ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801c8ec:	e009      	b.n	801c902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c8ee:	2301      	movs	r3, #1
 801c8f0:	75fb      	strb	r3, [r7, #23]
      break;
 801c8f2:	e006      	b.n	801c902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801c8f4:	bf00      	nop
 801c8f6:	e004      	b.n	801c902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801c8f8:	bf00      	nop
 801c8fa:	e002      	b.n	801c902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801c8fc:	bf00      	nop
 801c8fe:	e000      	b.n	801c902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801c900:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c902:	7dfb      	ldrb	r3, [r7, #23]
 801c904:	2b00      	cmp	r3, #0
 801c906:	d10a      	bne.n	801c91e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801c908:	4b41      	ldr	r3, [pc, #260]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c90a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c90c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c916:	493e      	ldr	r1, [pc, #248]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c918:	4313      	orrs	r3, r2
 801c91a:	658b      	str	r3, [r1, #88]	; 0x58
 801c91c:	e001      	b.n	801c922 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c91e:	7dfb      	ldrb	r3, [r7, #23]
 801c920:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	f003 0308 	and.w	r3, r3, #8
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d01a      	beq.n	801c964 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c938:	d10a      	bne.n	801c950 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	3324      	adds	r3, #36	; 0x24
 801c93e:	2102      	movs	r1, #2
 801c940:	4618      	mov	r0, r3
 801c942:	f001 f895 	bl	801da70 <RCCEx_PLL3_Config>
 801c946:	4603      	mov	r3, r0
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d001      	beq.n	801c950 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 801c94c:	2301      	movs	r3, #1
 801c94e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801c950:	4b2f      	ldr	r3, [pc, #188]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c95e:	492c      	ldr	r1, [pc, #176]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c960:	4313      	orrs	r3, r2
 801c962:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	f003 0310 	and.w	r3, r3, #16
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d01a      	beq.n	801c9a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c97a:	d10a      	bne.n	801c992 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	3324      	adds	r3, #36	; 0x24
 801c980:	2102      	movs	r1, #2
 801c982:	4618      	mov	r0, r3
 801c984:	f001 f874 	bl	801da70 <RCCEx_PLL3_Config>
 801c988:	4603      	mov	r3, r0
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d001      	beq.n	801c992 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 801c98e:	2301      	movs	r3, #1
 801c990:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801c992:	4b1f      	ldr	r3, [pc, #124]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c9a0:	491b      	ldr	r1, [pc, #108]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c9a2:	4313      	orrs	r3, r2
 801c9a4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d032      	beq.n	801ca18 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801c9b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c9bc:	d00d      	beq.n	801c9da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 801c9be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c9c2:	d016      	beq.n	801c9f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d111      	bne.n	801c9ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	3304      	adds	r3, #4
 801c9cc:	2100      	movs	r1, #0
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	f000 ff9c 	bl	801d90c <RCCEx_PLL2_Config>
 801c9d4:	4603      	mov	r3, r0
 801c9d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801c9d8:	e00c      	b.n	801c9f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	3324      	adds	r3, #36	; 0x24
 801c9de:	2102      	movs	r1, #2
 801c9e0:	4618      	mov	r0, r3
 801c9e2:	f001 f845 	bl	801da70 <RCCEx_PLL3_Config>
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801c9ea:	e003      	b.n	801c9f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c9ec:	2301      	movs	r3, #1
 801c9ee:	75fb      	strb	r3, [r7, #23]
      break;
 801c9f0:	e000      	b.n	801c9f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 801c9f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c9f4:	7dfb      	ldrb	r3, [r7, #23]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d10c      	bne.n	801ca14 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801c9fa:	4b05      	ldr	r3, [pc, #20]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801c9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c9fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ca08:	4901      	ldr	r1, [pc, #4]	; (801ca10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801ca0a:	4313      	orrs	r3, r2
 801ca0c:	658b      	str	r3, [r1, #88]	; 0x58
 801ca0e:	e003      	b.n	801ca18 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 801ca10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca14:	7dfb      	ldrb	r3, [r7, #23]
 801ca16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d02f      	beq.n	801ca84 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ca2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801ca2e:	d00c      	beq.n	801ca4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 801ca30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801ca34:	d015      	beq.n	801ca62 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 801ca36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ca3a:	d10f      	bne.n	801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ca3c:	4b79      	ldr	r3, [pc, #484]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801ca3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca40:	4a78      	ldr	r2, [pc, #480]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801ca42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ca46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801ca48:	e00c      	b.n	801ca64 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	3324      	adds	r3, #36	; 0x24
 801ca4e:	2101      	movs	r1, #1
 801ca50:	4618      	mov	r0, r3
 801ca52:	f001 f80d 	bl	801da70 <RCCEx_PLL3_Config>
 801ca56:	4603      	mov	r3, r0
 801ca58:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 801ca5a:	e003      	b.n	801ca64 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801ca5c:	2301      	movs	r3, #1
 801ca5e:	75fb      	strb	r3, [r7, #23]
      break;
 801ca60:	e000      	b.n	801ca64 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 801ca62:	bf00      	nop
    }

    if(ret == HAL_OK)
 801ca64:	7dfb      	ldrb	r3, [r7, #23]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d10a      	bne.n	801ca80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ca6a:	4b6e      	ldr	r3, [pc, #440]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801ca6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ca78:	496a      	ldr	r1, [pc, #424]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801ca7a:	4313      	orrs	r3, r2
 801ca7c:	654b      	str	r3, [r1, #84]	; 0x54
 801ca7e:	e001      	b.n	801ca84 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca80:	7dfb      	ldrb	r3, [r7, #23]
 801ca82:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d029      	beq.n	801cae4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d003      	beq.n	801caa0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 801ca98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ca9c:	d007      	beq.n	801caae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 801ca9e:	e00f      	b.n	801cac0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801caa0:	4b60      	ldr	r3, [pc, #384]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801caa4:	4a5f      	ldr	r2, [pc, #380]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801caa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801caaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801caac:	e00b      	b.n	801cac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	3304      	adds	r3, #4
 801cab2:	2102      	movs	r1, #2
 801cab4:	4618      	mov	r0, r3
 801cab6:	f000 ff29 	bl	801d90c <RCCEx_PLL2_Config>
 801caba:	4603      	mov	r3, r0
 801cabc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801cabe:	e002      	b.n	801cac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 801cac0:	2301      	movs	r3, #1
 801cac2:	75fb      	strb	r3, [r7, #23]
      break;
 801cac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cac6:	7dfb      	ldrb	r3, [r7, #23]
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d109      	bne.n	801cae0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801cacc:	4b55      	ldr	r3, [pc, #340]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cad8:	4952      	ldr	r1, [pc, #328]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cada:	4313      	orrs	r3, r2
 801cadc:	64cb      	str	r3, [r1, #76]	; 0x4c
 801cade:	e001      	b.n	801cae4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cae0:	7dfb      	ldrb	r3, [r7, #23]
 801cae2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801caec:	2b00      	cmp	r3, #0
 801caee:	d00a      	beq.n	801cb06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	3324      	adds	r3, #36	; 0x24
 801caf4:	2102      	movs	r1, #2
 801caf6:	4618      	mov	r0, r3
 801caf8:	f000 ffba 	bl	801da70 <RCCEx_PLL3_Config>
 801cafc:	4603      	mov	r3, r0
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d001      	beq.n	801cb06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 801cb02:	2301      	movs	r3, #1
 801cb04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d02f      	beq.n	801cb72 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cb16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cb1a:	d00c      	beq.n	801cb36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801cb1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cb20:	d802      	bhi.n	801cb28 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d011      	beq.n	801cb4a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 801cb26:	e00d      	b.n	801cb44 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 801cb28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb2c:	d00f      	beq.n	801cb4e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 801cb2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cb32:	d00e      	beq.n	801cb52 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 801cb34:	e006      	b.n	801cb44 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cb36:	4b3b      	ldr	r3, [pc, #236]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb3a:	4a3a      	ldr	r2, [pc, #232]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cb3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cb40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801cb42:	e007      	b.n	801cb54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cb44:	2301      	movs	r3, #1
 801cb46:	75fb      	strb	r3, [r7, #23]
      break;
 801cb48:	e004      	b.n	801cb54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801cb4a:	bf00      	nop
 801cb4c:	e002      	b.n	801cb54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801cb4e:	bf00      	nop
 801cb50:	e000      	b.n	801cb54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801cb52:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cb54:	7dfb      	ldrb	r3, [r7, #23]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d109      	bne.n	801cb6e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cb5a:	4b32      	ldr	r3, [pc, #200]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cb66:	492f      	ldr	r1, [pc, #188]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cb68:	4313      	orrs	r3, r2
 801cb6a:	654b      	str	r3, [r1, #84]	; 0x54
 801cb6c:	e001      	b.n	801cb72 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb6e:	7dfb      	ldrb	r3, [r7, #23]
 801cb70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d008      	beq.n	801cb90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801cb7e:	4b29      	ldr	r3, [pc, #164]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cb80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cb82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb8a:	4926      	ldr	r1, [pc, #152]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cb8c:	4313      	orrs	r3, r2
 801cb8e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d009      	beq.n	801cbb0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801cb9c:	4b21      	ldr	r3, [pc, #132]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cb9e:	691b      	ldr	r3, [r3, #16]
 801cba0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801cbaa:	491e      	ldr	r1, [pc, #120]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cbac:	4313      	orrs	r3, r2
 801cbae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	d008      	beq.n	801cbce <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801cbbc:	4b19      	ldr	r3, [pc, #100]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cbc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cbc8:	4916      	ldr	r1, [pc, #88]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cbca:	4313      	orrs	r3, r2
 801cbcc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d00d      	beq.n	801cbf6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801cbda:	4b12      	ldr	r3, [pc, #72]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cbdc:	691b      	ldr	r3, [r3, #16]
 801cbde:	4a11      	ldr	r2, [pc, #68]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cbe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801cbe4:	6113      	str	r3, [r2, #16]
 801cbe6:	4b0f      	ldr	r3, [pc, #60]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cbe8:	691a      	ldr	r2, [r3, #16]
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801cbf0:	490c      	ldr	r1, [pc, #48]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cbf2:	4313      	orrs	r3, r2
 801cbf4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	da08      	bge.n	801cc10 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801cbfe:	4b09      	ldr	r3, [pc, #36]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cc00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cc02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc0a:	4906      	ldr	r1, [pc, #24]	; (801cc24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cc0c:	4313      	orrs	r3, r2
 801cc0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 801cc10:	7dbb      	ldrb	r3, [r7, #22]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d101      	bne.n	801cc1a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 801cc16:	2300      	movs	r3, #0
 801cc18:	e000      	b.n	801cc1c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 801cc1a:	2301      	movs	r3, #1
}
 801cc1c:	4618      	mov	r0, r3
 801cc1e:	3718      	adds	r7, #24
 801cc20:	46bd      	mov	sp, r7
 801cc22:	bd80      	pop	{r7, pc}
 801cc24:	58024400 	.word	0x58024400

0801cc28 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b090      	sub	sp, #64	; 0x40
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cc36:	d150      	bne.n	801ccda <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 801cc38:	4ba1      	ldr	r3, [pc, #644]	; (801cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801cc3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc3c:	f003 0307 	and.w	r3, r3, #7
 801cc40:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc44:	2b04      	cmp	r3, #4
 801cc46:	d844      	bhi.n	801ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 801cc48:	a201      	add	r2, pc, #4	; (adr r2, 801cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 801cc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc4e:	bf00      	nop
 801cc50:	0801cc65 	.word	0x0801cc65
 801cc54:	0801cc75 	.word	0x0801cc75
 801cc58:	0801cc85 	.word	0x0801cc85
 801cc5c:	0801cccd 	.word	0x0801cccd
 801cc60:	0801cc95 	.word	0x0801cc95
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801cc64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f000 fd03 	bl	801d674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cc72:	e241      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cc74:	f107 0318 	add.w	r3, r7, #24
 801cc78:	4618      	mov	r0, r3
 801cc7a:	f000 fa63 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cc7e:	69bb      	ldr	r3, [r7, #24]
 801cc80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cc82:	e239      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cc84:	f107 030c 	add.w	r3, r7, #12
 801cc88:	4618      	mov	r0, r3
 801cc8a:	f000 fba7 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cc92:	e231      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801cc94:	4b8a      	ldr	r3, [pc, #552]	; (801cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801cc96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cc98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801cc9c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801cc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d102      	bne.n	801ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801cca4:	4b87      	ldr	r3, [pc, #540]	; (801cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801cca8:	e226      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801ccaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ccac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ccb0:	d102      	bne.n	801ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 801ccb2:	4b85      	ldr	r3, [pc, #532]	; (801cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801ccb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ccb6:	e21f      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801ccb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ccba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ccbe:	d102      	bne.n	801ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 801ccc0:	4b82      	ldr	r3, [pc, #520]	; (801cecc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801ccc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ccc4:	e218      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801ccc6:	2300      	movs	r3, #0
 801ccc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ccca:	e215      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801cccc:	4b80      	ldr	r3, [pc, #512]	; (801ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 801ccce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ccd0:	e212      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ccd6:	bf00      	nop
 801ccd8:	e20e      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cce0:	d14f      	bne.n	801cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 801cce2:	4b77      	ldr	r3, [pc, #476]	; (801cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801cce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cce6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 801ccea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ccee:	2b80      	cmp	r3, #128	; 0x80
 801ccf0:	d01c      	beq.n	801cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 801ccf2:	2b80      	cmp	r3, #128	; 0x80
 801ccf4:	d804      	bhi.n	801cd00 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d008      	beq.n	801cd0c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 801ccfa:	2b40      	cmp	r3, #64	; 0x40
 801ccfc:	d00e      	beq.n	801cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 801ccfe:	e03c      	b.n	801cd7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 801cd00:	2bc0      	cmp	r3, #192	; 0xc0
 801cd02:	d037      	beq.n	801cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 801cd04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cd08:	d018      	beq.n	801cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 801cd0a:	e036      	b.n	801cd7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801cd0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd10:	4618      	mov	r0, r3
 801cd12:	f000 fcaf 	bl	801d674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cd1a:	e1ed      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cd1c:	f107 0318 	add.w	r3, r7, #24
 801cd20:	4618      	mov	r0, r3
 801cd22:	f000 fa0f 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cd26:	69bb      	ldr	r3, [r7, #24]
 801cd28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cd2a:	e1e5      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cd2c:	f107 030c 	add.w	r3, r7, #12
 801cd30:	4618      	mov	r0, r3
 801cd32:	f000 fb53 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cd3a:	e1dd      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801cd3c:	4b60      	ldr	r3, [pc, #384]	; (801cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801cd3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801cd44:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801cd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d102      	bne.n	801cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801cd4c:	4b5d      	ldr	r3, [pc, #372]	; (801cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801cd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801cd50:	e1d2      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801cd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801cd58:	d102      	bne.n	801cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 801cd5a:	4b5b      	ldr	r3, [pc, #364]	; (801cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801cd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cd5e:	e1cb      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801cd66:	d102      	bne.n	801cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 801cd68:	4b58      	ldr	r3, [pc, #352]	; (801cecc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cd6c:	e1c4      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cd72:	e1c1      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801cd74:	4b56      	ldr	r3, [pc, #344]	; (801ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 801cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cd78:	e1be      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801cd7a:	2300      	movs	r3, #0
 801cd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cd7e:	bf00      	nop
 801cd80:	e1ba      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cd88:	d153      	bne.n	801ce32 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 801cd8a:	4b4d      	ldr	r3, [pc, #308]	; (801cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801cd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd8e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801cd92:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cd9a:	d01f      	beq.n	801cddc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 801cd9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cda0:	d805      	bhi.n	801cdae <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d00a      	beq.n	801cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 801cda6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801cdaa:	d00f      	beq.n	801cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 801cdac:	e03d      	b.n	801ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 801cdae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801cdb2:	d037      	beq.n	801ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 801cdb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cdb8:	d018      	beq.n	801cdec <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 801cdba:	e036      	b.n	801ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801cdbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cdc0:	4618      	mov	r0, r3
 801cdc2:	f000 fc57 	bl	801d674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cdca:	e195      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cdcc:	f107 0318 	add.w	r3, r7, #24
 801cdd0:	4618      	mov	r0, r3
 801cdd2:	f000 f9b7 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cdd6:	69bb      	ldr	r3, [r7, #24]
 801cdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cdda:	e18d      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cddc:	f107 030c 	add.w	r3, r7, #12
 801cde0:	4618      	mov	r0, r3
 801cde2:	f000 fafb 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cdea:	e185      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801cdec:	4b34      	ldr	r3, [pc, #208]	; (801cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801cdee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cdf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801cdf4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d102      	bne.n	801ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801cdfc:	4b31      	ldr	r3, [pc, #196]	; (801cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801cdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801ce00:	e17a      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801ce02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ce08:	d102      	bne.n	801ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 801ce0a:	4b2f      	ldr	r3, [pc, #188]	; (801cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801ce0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ce0e:	e173      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801ce10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ce16:	d102      	bne.n	801ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 801ce18:	4b2c      	ldr	r3, [pc, #176]	; (801cecc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801ce1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ce1c:	e16c      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801ce1e:	2300      	movs	r3, #0
 801ce20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ce22:	e169      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801ce24:	4b2a      	ldr	r3, [pc, #168]	; (801ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 801ce26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ce28:	e166      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ce2e:	bf00      	nop
 801ce30:	e162      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ce38:	d15d      	bne.n	801cef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 801ce3a:	4b21      	ldr	r3, [pc, #132]	; (801cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801ce3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801ce42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801ce4a:	d01f      	beq.n	801ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 801ce4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801ce50:	d805      	bhi.n	801ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d00a      	beq.n	801ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 801ce56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ce5a:	d00f      	beq.n	801ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 801ce5c:	e047      	b.n	801ceee <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 801ce5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801ce62:	d041      	beq.n	801cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 801ce64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801ce68:	d018      	beq.n	801ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 801ce6a:	e040      	b.n	801ceee <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801ce6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce70:	4618      	mov	r0, r3
 801ce72:	f000 fbff 	bl	801d674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ce7a:	e13d      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ce7c:	f107 0318 	add.w	r3, r7, #24
 801ce80:	4618      	mov	r0, r3
 801ce82:	f000 f95f 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801ce86:	69bb      	ldr	r3, [r7, #24]
 801ce88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ce8a:	e135      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ce8c:	f107 030c 	add.w	r3, r7, #12
 801ce90:	4618      	mov	r0, r3
 801ce92:	f000 faa3 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ce9a:	e12d      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801ce9c:	4b08      	ldr	r3, [pc, #32]	; (801cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801ce9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cea0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801cea4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801cea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d102      	bne.n	801ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801ceac:	4b05      	ldr	r3, [pc, #20]	; (801cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801ceb0:	e122      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801ceb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ceb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ceb8:	d10c      	bne.n	801ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 801ceba:	4b03      	ldr	r3, [pc, #12]	; (801cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801cebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cebe:	e11b      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 801cec0:	58024400 	.word	0x58024400
 801cec4:	03d09000 	.word	0x03d09000
 801cec8:	003d0900 	.word	0x003d0900
 801cecc:	007a1200 	.word	0x007a1200
 801ced0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801ced4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ced6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ceda:	d102      	bne.n	801cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 801cedc:	4b89      	ldr	r3, [pc, #548]	; (801d104 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801cede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cee0:	e10a      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801cee2:	2300      	movs	r3, #0
 801cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cee6:	e107      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801cee8:	4b87      	ldr	r3, [pc, #540]	; (801d108 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 801ceea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801ceec:	e104      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801ceee:	2300      	movs	r3, #0
 801cef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cef2:	bf00      	nop
 801cef4:	e100      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cefc:	d153      	bne.n	801cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 801cefe:	4b83      	ldr	r3, [pc, #524]	; (801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801cf00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf02:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801cf06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801cf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cf0e:	d01f      	beq.n	801cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 801cf10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cf14:	d805      	bhi.n	801cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d00a      	beq.n	801cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 801cf1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cf1e:	d00f      	beq.n	801cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 801cf20:	e03d      	b.n	801cf9e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 801cf22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801cf26:	d037      	beq.n	801cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 801cf28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cf2c:	d018      	beq.n	801cf60 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 801cf2e:	e036      	b.n	801cf9e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801cf30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cf34:	4618      	mov	r0, r3
 801cf36:	f000 fb9d 	bl	801d674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cf3e:	e0db      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cf40:	f107 0318 	add.w	r3, r7, #24
 801cf44:	4618      	mov	r0, r3
 801cf46:	f000 f8fd 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cf4a:	69bb      	ldr	r3, [r7, #24]
 801cf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cf4e:	e0d3      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cf50:	f107 030c 	add.w	r3, r7, #12
 801cf54:	4618      	mov	r0, r3
 801cf56:	f000 fa41 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cf5e:	e0cb      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801cf60:	4b6a      	ldr	r3, [pc, #424]	; (801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801cf62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801cf68:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801cf6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d102      	bne.n	801cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801cf70:	4b67      	ldr	r3, [pc, #412]	; (801d110 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 801cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801cf74:	e0c0      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801cf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801cf7c:	d102      	bne.n	801cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 801cf7e:	4b65      	ldr	r3, [pc, #404]	; (801d114 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801cf80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cf82:	e0b9      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801cf84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801cf8a:	d102      	bne.n	801cf92 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 801cf8c:	4b5d      	ldr	r3, [pc, #372]	; (801d104 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cf90:	e0b2      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801cf92:	2300      	movs	r3, #0
 801cf94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cf96:	e0af      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801cf98:	4b5b      	ldr	r3, [pc, #364]	; (801d108 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 801cf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cf9c:	e0ac      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801cf9e:	2300      	movs	r3, #0
 801cfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cfa2:	bf00      	nop
 801cfa4:	e0a8      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801cfac:	d13d      	bne.n	801d02a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 801cfae:	4b57      	ldr	r3, [pc, #348]	; (801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801cfb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cfb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801cfb6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cfbe:	d00c      	beq.n	801cfda <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801cfc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cfc4:	d011      	beq.n	801cfea <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d12b      	bne.n	801d022 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cfca:	f107 0318 	add.w	r3, r7, #24
 801cfce:	4618      	mov	r0, r3
 801cfd0:	f000 f8b8 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cfd4:	69bb      	ldr	r3, [r7, #24]
 801cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cfd8:	e08e      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cfda:	f107 030c 	add.w	r3, r7, #12
 801cfde:	4618      	mov	r0, r3
 801cfe0:	f000 f9fc 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801cfe4:	697b      	ldr	r3, [r7, #20]
 801cfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801cfe8:	e086      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801cfea:	4b48      	ldr	r3, [pc, #288]	; (801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801cfec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cfee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801cff2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801cff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d102      	bne.n	801d000 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801cffa:	4b45      	ldr	r3, [pc, #276]	; (801d110 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 801cffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801cffe:	e07b      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801d000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d006:	d102      	bne.n	801d00e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 801d008:	4b42      	ldr	r3, [pc, #264]	; (801d114 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d00c:	e074      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801d00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d014:	d102      	bne.n	801d01c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 801d016:	4b3b      	ldr	r3, [pc, #236]	; (801d104 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801d018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d01a:	e06d      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801d01c:	2300      	movs	r3, #0
 801d01e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d020:	e06a      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801d022:	2300      	movs	r3, #0
 801d024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d026:	bf00      	nop
 801d028:	e066      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d030:	d11f      	bne.n	801d072 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 801d032:	4b36      	ldr	r3, [pc, #216]	; (801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801d034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d03a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d003      	beq.n	801d04a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 801d042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d046:	d008      	beq.n	801d05a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 801d048:	e00f      	b.n	801d06a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d04a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d04e:	4618      	mov	r0, r3
 801d050:	f000 fb10 	bl	801d674 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d058:	e04e      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d05a:	f107 0318 	add.w	r3, r7, #24
 801d05e:	4618      	mov	r0, r3
 801d060:	f000 f870 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801d064:	6a3b      	ldr	r3, [r7, #32]
 801d066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d068:	e046      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801d06a:	2300      	movs	r3, #0
 801d06c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d06e:	bf00      	nop
 801d070:	e042      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d078:	d13c      	bne.n	801d0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 801d07a:	4b24      	ldr	r3, [pc, #144]	; (801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801d07c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d07e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801d082:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d08a:	d01e      	beq.n	801d0ca <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 801d08c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d090:	d805      	bhi.n	801d09e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 801d092:	2b00      	cmp	r3, #0
 801d094:	d00d      	beq.n	801d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801d096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d09a:	d00e      	beq.n	801d0ba <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 801d09c:	e026      	b.n	801d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 801d09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d0a2:	d01d      	beq.n	801d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 801d0a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d0a8:	d01d      	beq.n	801d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 801d0aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d0ae:	d014      	beq.n	801d0da <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 801d0b0:	e01c      	b.n	801d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801d0b2:	f000 f831 	bl	801d118 <HAL_RCCEx_GetD3PCLK1Freq>
 801d0b6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 801d0b8:	e01e      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d0ba:	f107 0318 	add.w	r3, r7, #24
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f000 f840 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d0c4:	69fb      	ldr	r3, [r7, #28]
 801d0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d0c8:	e016      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d0ca:	f107 030c 	add.w	r3, r7, #12
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f000 f984 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d0d4:	693b      	ldr	r3, [r7, #16]
 801d0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d0d8:	e00e      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 801d0da:	4b0d      	ldr	r3, [pc, #52]	; (801d110 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 801d0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d0de:	e00b      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 801d0e0:	4b0c      	ldr	r3, [pc, #48]	; (801d114 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801d0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d0e4:	e008      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 801d0e6:	4b07      	ldr	r3, [pc, #28]	; (801d104 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801d0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d0ea:	e005      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 801d0ec:	2300      	movs	r3, #0
 801d0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d0f0:	bf00      	nop
 801d0f2:	e001      	b.n	801d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 801d0f4:	2300      	movs	r3, #0
 801d0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 801d0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	3740      	adds	r7, #64	; 0x40
 801d0fe:	46bd      	mov	sp, r7
 801d100:	bd80      	pop	{r7, pc}
 801d102:	bf00      	nop
 801d104:	007a1200 	.word	0x007a1200
 801d108:	00bb8000 	.word	0x00bb8000
 801d10c:	58024400 	.word	0x58024400
 801d110:	03d09000 	.word	0x03d09000
 801d114:	003d0900 	.word	0x003d0900

0801d118 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801d11c:	f7fe fdf8 	bl	801bd10 <HAL_RCC_GetHCLKFreq>
 801d120:	4601      	mov	r1, r0
 801d122:	4b06      	ldr	r3, [pc, #24]	; (801d13c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801d124:	6a1b      	ldr	r3, [r3, #32]
 801d126:	091b      	lsrs	r3, r3, #4
 801d128:	f003 0307 	and.w	r3, r3, #7
 801d12c:	4a04      	ldr	r2, [pc, #16]	; (801d140 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801d12e:	5cd3      	ldrb	r3, [r2, r3]
 801d130:	f003 031f 	and.w	r3, r3, #31
 801d134:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801d138:	4618      	mov	r0, r3
 801d13a:	bd80      	pop	{r7, pc}
 801d13c:	58024400 	.word	0x58024400
 801d140:	0802efe4 	.word	0x0802efe4

0801d144 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 801d144:	b480      	push	{r7}
 801d146:	b089      	sub	sp, #36	; 0x24
 801d148:	af00      	add	r7, sp, #0
 801d14a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d14c:	4b9d      	ldr	r3, [pc, #628]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d150:	f003 0303 	and.w	r3, r3, #3
 801d154:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 801d156:	4b9b      	ldr	r3, [pc, #620]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d15a:	0b1b      	lsrs	r3, r3, #12
 801d15c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d160:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801d162:	4b98      	ldr	r3, [pc, #608]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d166:	091b      	lsrs	r3, r3, #4
 801d168:	f003 0301 	and.w	r3, r3, #1
 801d16c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801d16e:	4b95      	ldr	r3, [pc, #596]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d172:	08db      	lsrs	r3, r3, #3
 801d174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d178:	693a      	ldr	r2, [r7, #16]
 801d17a:	fb02 f303 	mul.w	r3, r2, r3
 801d17e:	ee07 3a90 	vmov	s15, r3
 801d182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801d18a:	697b      	ldr	r3, [r7, #20]
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	f000 810a 	beq.w	801d3a6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 801d192:	69bb      	ldr	r3, [r7, #24]
 801d194:	2b01      	cmp	r3, #1
 801d196:	d05a      	beq.n	801d24e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 801d198:	2b01      	cmp	r3, #1
 801d19a:	d302      	bcc.n	801d1a2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 801d19c:	2b02      	cmp	r3, #2
 801d19e:	d078      	beq.n	801d292 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 801d1a0:	e099      	b.n	801d2d6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d1a2:	4b88      	ldr	r3, [pc, #544]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	f003 0320 	and.w	r3, r3, #32
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d02d      	beq.n	801d20a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801d1ae:	4b85      	ldr	r3, [pc, #532]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	08db      	lsrs	r3, r3, #3
 801d1b4:	f003 0303 	and.w	r3, r3, #3
 801d1b8:	4a83      	ldr	r2, [pc, #524]	; (801d3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 801d1ba:	fa22 f303 	lsr.w	r3, r2, r3
 801d1be:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d1c0:	68bb      	ldr	r3, [r7, #8]
 801d1c2:	ee07 3a90 	vmov	s15, r3
 801d1c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d1ca:	697b      	ldr	r3, [r7, #20]
 801d1cc:	ee07 3a90 	vmov	s15, r3
 801d1d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d1d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d1d8:	4b7a      	ldr	r3, [pc, #488]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d1e0:	ee07 3a90 	vmov	s15, r3
 801d1e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d1e8:	ed97 6a03 	vldr	s12, [r7, #12]
 801d1ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 801d3cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d1f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d1f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d1f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d200:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d204:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801d208:	e087      	b.n	801d31a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d20a:	697b      	ldr	r3, [r7, #20]
 801d20c:	ee07 3a90 	vmov	s15, r3
 801d210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d214:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801d3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 801d218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d21c:	4b69      	ldr	r3, [pc, #420]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d224:	ee07 3a90 	vmov	s15, r3
 801d228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d22c:	ed97 6a03 	vldr	s12, [r7, #12]
 801d230:	eddf 5a66 	vldr	s11, [pc, #408]	; 801d3cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d23c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d244:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d248:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d24c:	e065      	b.n	801d31a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d24e:	697b      	ldr	r3, [r7, #20]
 801d250:	ee07 3a90 	vmov	s15, r3
 801d254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d258:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801d3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 801d25c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d260:	4b58      	ldr	r3, [pc, #352]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d268:	ee07 3a90 	vmov	s15, r3
 801d26c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d270:	ed97 6a03 	vldr	s12, [r7, #12]
 801d274:	eddf 5a55 	vldr	s11, [pc, #340]	; 801d3cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d27c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d288:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d28c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d290:	e043      	b.n	801d31a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d292:	697b      	ldr	r3, [r7, #20]
 801d294:	ee07 3a90 	vmov	s15, r3
 801d298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d29c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801d3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 801d2a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d2a4:	4b47      	ldr	r3, [pc, #284]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d2ac:	ee07 3a90 	vmov	s15, r3
 801d2b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d2b4:	ed97 6a03 	vldr	s12, [r7, #12]
 801d2b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 801d3cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d2bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d2c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d2c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d2cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d2d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d2d4:	e021      	b.n	801d31a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d2d6:	697b      	ldr	r3, [r7, #20]
 801d2d8:	ee07 3a90 	vmov	s15, r3
 801d2dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d2e0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 801d3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 801d2e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d2e8:	4b36      	ldr	r3, [pc, #216]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d2f0:	ee07 3a90 	vmov	s15, r3
 801d2f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d2f8:	ed97 6a03 	vldr	s12, [r7, #12]
 801d2fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 801d3cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d30c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d310:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d314:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d318:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 801d31a:	4b2a      	ldr	r3, [pc, #168]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d31e:	0a5b      	lsrs	r3, r3, #9
 801d320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d324:	ee07 3a90 	vmov	s15, r3
 801d328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d32c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d330:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d334:	edd7 6a07 	vldr	s13, [r7, #28]
 801d338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d340:	ee17 2a90 	vmov	r2, s15
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 801d348:	4b1e      	ldr	r3, [pc, #120]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d34c:	0c1b      	lsrs	r3, r3, #16
 801d34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d352:	ee07 3a90 	vmov	s15, r3
 801d356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d35a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d35e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d362:	edd7 6a07 	vldr	s13, [r7, #28]
 801d366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d36a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d36e:	ee17 2a90 	vmov	r2, s15
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 801d376:	4b13      	ldr	r3, [pc, #76]	; (801d3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d37a:	0e1b      	lsrs	r3, r3, #24
 801d37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d380:	ee07 3a90 	vmov	s15, r3
 801d384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d38c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d390:	edd7 6a07 	vldr	s13, [r7, #28]
 801d394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d39c:	ee17 2a90 	vmov	r2, s15
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801d3a4:	e008      	b.n	801d3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	2200      	movs	r2, #0
 801d3aa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	2200      	movs	r2, #0
 801d3b0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	2200      	movs	r2, #0
 801d3b6:	609a      	str	r2, [r3, #8]
}
 801d3b8:	bf00      	nop
 801d3ba:	3724      	adds	r7, #36	; 0x24
 801d3bc:	46bd      	mov	sp, r7
 801d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3c2:	4770      	bx	lr
 801d3c4:	58024400 	.word	0x58024400
 801d3c8:	03d09000 	.word	0x03d09000
 801d3cc:	46000000 	.word	0x46000000
 801d3d0:	4c742400 	.word	0x4c742400
 801d3d4:	4a742400 	.word	0x4a742400
 801d3d8:	4af42400 	.word	0x4af42400

0801d3dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 801d3dc:	b480      	push	{r7}
 801d3de:	b089      	sub	sp, #36	; 0x24
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d3e4:	4b9d      	ldr	r3, [pc, #628]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3e8:	f003 0303 	and.w	r3, r3, #3
 801d3ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801d3ee:	4b9b      	ldr	r3, [pc, #620]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3f2:	0d1b      	lsrs	r3, r3, #20
 801d3f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d3f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801d3fa:	4b98      	ldr	r3, [pc, #608]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3fe:	0a1b      	lsrs	r3, r3, #8
 801d400:	f003 0301 	and.w	r3, r3, #1
 801d404:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 801d406:	4b95      	ldr	r3, [pc, #596]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d40a:	08db      	lsrs	r3, r3, #3
 801d40c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d410:	693a      	ldr	r2, [r7, #16]
 801d412:	fb02 f303 	mul.w	r3, r2, r3
 801d416:	ee07 3a90 	vmov	s15, r3
 801d41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d41e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801d422:	697b      	ldr	r3, [r7, #20]
 801d424:	2b00      	cmp	r3, #0
 801d426:	f000 810a 	beq.w	801d63e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 801d42a:	69bb      	ldr	r3, [r7, #24]
 801d42c:	2b01      	cmp	r3, #1
 801d42e:	d05a      	beq.n	801d4e6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 801d430:	2b01      	cmp	r3, #1
 801d432:	d302      	bcc.n	801d43a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 801d434:	2b02      	cmp	r3, #2
 801d436:	d078      	beq.n	801d52a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 801d438:	e099      	b.n	801d56e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d43a:	4b88      	ldr	r3, [pc, #544]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	f003 0320 	and.w	r3, r3, #32
 801d442:	2b00      	cmp	r3, #0
 801d444:	d02d      	beq.n	801d4a2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801d446:	4b85      	ldr	r3, [pc, #532]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	08db      	lsrs	r3, r3, #3
 801d44c:	f003 0303 	and.w	r3, r3, #3
 801d450:	4a83      	ldr	r2, [pc, #524]	; (801d660 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 801d452:	fa22 f303 	lsr.w	r3, r2, r3
 801d456:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801d458:	68bb      	ldr	r3, [r7, #8]
 801d45a:	ee07 3a90 	vmov	s15, r3
 801d45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d462:	697b      	ldr	r3, [r7, #20]
 801d464:	ee07 3a90 	vmov	s15, r3
 801d468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d46c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d470:	4b7a      	ldr	r3, [pc, #488]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d478:	ee07 3a90 	vmov	s15, r3
 801d47c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d480:	ed97 6a03 	vldr	s12, [r7, #12]
 801d484:	eddf 5a77 	vldr	s11, [pc, #476]	; 801d664 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801d488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d48c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d49c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801d4a0:	e087      	b.n	801d5b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801d4a2:	697b      	ldr	r3, [r7, #20]
 801d4a4:	ee07 3a90 	vmov	s15, r3
 801d4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d4ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801d668 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 801d4b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d4b4:	4b69      	ldr	r3, [pc, #420]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d4bc:	ee07 3a90 	vmov	s15, r3
 801d4c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d4c4:	ed97 6a03 	vldr	s12, [r7, #12]
 801d4c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 801d664 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801d4cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d4d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d4d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d4d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d4e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d4e4:	e065      	b.n	801d5b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801d4e6:	697b      	ldr	r3, [r7, #20]
 801d4e8:	ee07 3a90 	vmov	s15, r3
 801d4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d4f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801d66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 801d4f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d4f8:	4b58      	ldr	r3, [pc, #352]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d500:	ee07 3a90 	vmov	s15, r3
 801d504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d508:	ed97 6a03 	vldr	s12, [r7, #12]
 801d50c:	eddf 5a55 	vldr	s11, [pc, #340]	; 801d664 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801d510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d51c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d520:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d524:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d528:	e043      	b.n	801d5b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801d52a:	697b      	ldr	r3, [r7, #20]
 801d52c:	ee07 3a90 	vmov	s15, r3
 801d530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d534:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801d670 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 801d538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d53c:	4b47      	ldr	r3, [pc, #284]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d544:	ee07 3a90 	vmov	s15, r3
 801d548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d54c:	ed97 6a03 	vldr	s12, [r7, #12]
 801d550:	eddf 5a44 	vldr	s11, [pc, #272]	; 801d664 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801d554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d55c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d564:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d568:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d56c:	e021      	b.n	801d5b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801d56e:	697b      	ldr	r3, [r7, #20]
 801d570:	ee07 3a90 	vmov	s15, r3
 801d574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d578:	eddf 6a3c 	vldr	s13, [pc, #240]	; 801d66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 801d57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d580:	4b36      	ldr	r3, [pc, #216]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d588:	ee07 3a90 	vmov	s15, r3
 801d58c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d590:	ed97 6a03 	vldr	s12, [r7, #12]
 801d594:	eddf 5a33 	vldr	s11, [pc, #204]	; 801d664 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801d598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d59c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d5a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d5a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d5ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d5b0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 801d5b2:	4b2a      	ldr	r3, [pc, #168]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5b6:	0a5b      	lsrs	r3, r3, #9
 801d5b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d5bc:	ee07 3a90 	vmov	s15, r3
 801d5c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d5c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d5c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d5cc:	edd7 6a07 	vldr	s13, [r7, #28]
 801d5d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d5d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d5d8:	ee17 2a90 	vmov	r2, s15
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801d5e0:	4b1e      	ldr	r3, [pc, #120]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5e4:	0c1b      	lsrs	r3, r3, #16
 801d5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d5ea:	ee07 3a90 	vmov	s15, r3
 801d5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d5f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d5f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d5fa:	edd7 6a07 	vldr	s13, [r7, #28]
 801d5fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d606:	ee17 2a90 	vmov	r2, s15
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 801d60e:	4b13      	ldr	r3, [pc, #76]	; (801d65c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d612:	0e1b      	lsrs	r3, r3, #24
 801d614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d618:	ee07 3a90 	vmov	s15, r3
 801d61c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d624:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d628:	edd7 6a07 	vldr	s13, [r7, #28]
 801d62c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d634:	ee17 2a90 	vmov	r2, s15
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801d63c:	e008      	b.n	801d650 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	2200      	movs	r2, #0
 801d642:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	2200      	movs	r2, #0
 801d648:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	2200      	movs	r2, #0
 801d64e:	609a      	str	r2, [r3, #8]
}
 801d650:	bf00      	nop
 801d652:	3724      	adds	r7, #36	; 0x24
 801d654:	46bd      	mov	sp, r7
 801d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d65a:	4770      	bx	lr
 801d65c:	58024400 	.word	0x58024400
 801d660:	03d09000 	.word	0x03d09000
 801d664:	46000000 	.word	0x46000000
 801d668:	4c742400 	.word	0x4c742400
 801d66c:	4a742400 	.word	0x4a742400
 801d670:	4af42400 	.word	0x4af42400

0801d674 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 801d674:	b480      	push	{r7}
 801d676:	b089      	sub	sp, #36	; 0x24
 801d678:	af00      	add	r7, sp, #0
 801d67a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d67c:	4b9d      	ldr	r3, [pc, #628]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d680:	f003 0303 	and.w	r3, r3, #3
 801d684:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 801d686:	4b9b      	ldr	r3, [pc, #620]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d68a:	091b      	lsrs	r3, r3, #4
 801d68c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d690:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801d692:	4b98      	ldr	r3, [pc, #608]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d696:	f003 0301 	and.w	r3, r3, #1
 801d69a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801d69c:	4b95      	ldr	r3, [pc, #596]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d6a0:	08db      	lsrs	r3, r3, #3
 801d6a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d6a6:	693a      	ldr	r2, [r7, #16]
 801d6a8:	fb02 f303 	mul.w	r3, r2, r3
 801d6ac:	ee07 3a90 	vmov	s15, r3
 801d6b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d6b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801d6b8:	697b      	ldr	r3, [r7, #20]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	f000 810a 	beq.w	801d8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 801d6c0:	69bb      	ldr	r3, [r7, #24]
 801d6c2:	2b01      	cmp	r3, #1
 801d6c4:	d05a      	beq.n	801d77c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 801d6c6:	2b01      	cmp	r3, #1
 801d6c8:	d302      	bcc.n	801d6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 801d6ca:	2b02      	cmp	r3, #2
 801d6cc:	d078      	beq.n	801d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 801d6ce:	e099      	b.n	801d804 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d6d0:	4b88      	ldr	r3, [pc, #544]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	f003 0320 	and.w	r3, r3, #32
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	d02d      	beq.n	801d738 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801d6dc:	4b85      	ldr	r3, [pc, #532]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	08db      	lsrs	r3, r3, #3
 801d6e2:	f003 0303 	and.w	r3, r3, #3
 801d6e6:	4a84      	ldr	r2, [pc, #528]	; (801d8f8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 801d6e8:	fa22 f303 	lsr.w	r3, r2, r3
 801d6ec:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801d6ee:	68bb      	ldr	r3, [r7, #8]
 801d6f0:	ee07 3a90 	vmov	s15, r3
 801d6f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d6f8:	697b      	ldr	r3, [r7, #20]
 801d6fa:	ee07 3a90 	vmov	s15, r3
 801d6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d706:	4b7b      	ldr	r3, [pc, #492]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d70e:	ee07 3a90 	vmov	s15, r3
 801d712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d716:	ed97 6a03 	vldr	s12, [r7, #12]
 801d71a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801d8fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801d71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d732:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801d736:	e087      	b.n	801d848 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801d738:	697b      	ldr	r3, [r7, #20]
 801d73a:	ee07 3a90 	vmov	s15, r3
 801d73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d742:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801d900 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 801d746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d74a:	4b6a      	ldr	r3, [pc, #424]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d752:	ee07 3a90 	vmov	s15, r3
 801d756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d75a:	ed97 6a03 	vldr	s12, [r7, #12]
 801d75e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801d8fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801d762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d76a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d772:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d77a:	e065      	b.n	801d848 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801d77c:	697b      	ldr	r3, [r7, #20]
 801d77e:	ee07 3a90 	vmov	s15, r3
 801d782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d786:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801d904 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 801d78a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d78e:	4b59      	ldr	r3, [pc, #356]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d796:	ee07 3a90 	vmov	s15, r3
 801d79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d79e:	ed97 6a03 	vldr	s12, [r7, #12]
 801d7a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801d8fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801d7a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d7aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d7ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d7ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d7be:	e043      	b.n	801d848 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801d7c0:	697b      	ldr	r3, [r7, #20]
 801d7c2:	ee07 3a90 	vmov	s15, r3
 801d7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d7ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801d908 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801d7ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d7d2:	4b48      	ldr	r3, [pc, #288]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d7da:	ee07 3a90 	vmov	s15, r3
 801d7de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d7e2:	ed97 6a03 	vldr	s12, [r7, #12]
 801d7e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 801d8fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801d7ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d7ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d7f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d7fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d802:	e021      	b.n	801d848 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801d804:	697b      	ldr	r3, [r7, #20]
 801d806:	ee07 3a90 	vmov	s15, r3
 801d80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d80e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801d904 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 801d812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d816:	4b37      	ldr	r3, [pc, #220]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d81e:	ee07 3a90 	vmov	s15, r3
 801d822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d826:	ed97 6a03 	vldr	s12, [r7, #12]
 801d82a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801d8fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801d82e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d83a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d83e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d846:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 801d848:	4b2a      	ldr	r3, [pc, #168]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d84c:	0a5b      	lsrs	r3, r3, #9
 801d84e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d852:	ee07 3a90 	vmov	s15, r3
 801d856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d85a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d85e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d862:	edd7 6a07 	vldr	s13, [r7, #28]
 801d866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d86a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d86e:	ee17 2a90 	vmov	r2, s15
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 801d876:	4b1f      	ldr	r3, [pc, #124]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d87a:	0c1b      	lsrs	r3, r3, #16
 801d87c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d880:	ee07 3a90 	vmov	s15, r3
 801d884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d88c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d890:	edd7 6a07 	vldr	s13, [r7, #28]
 801d894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d89c:	ee17 2a90 	vmov	r2, s15
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 801d8a4:	4b13      	ldr	r3, [pc, #76]	; (801d8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801d8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d8a8:	0e1b      	lsrs	r3, r3, #24
 801d8aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d8ae:	ee07 3a90 	vmov	s15, r3
 801d8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d8ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d8be:	edd7 6a07 	vldr	s13, [r7, #28]
 801d8c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d8c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d8ca:	ee17 2a90 	vmov	r2, s15
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801d8d2:	e008      	b.n	801d8e6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	2200      	movs	r2, #0
 801d8d8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	2200      	movs	r2, #0
 801d8de:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	2200      	movs	r2, #0
 801d8e4:	609a      	str	r2, [r3, #8]
}
 801d8e6:	bf00      	nop
 801d8e8:	3724      	adds	r7, #36	; 0x24
 801d8ea:	46bd      	mov	sp, r7
 801d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8f0:	4770      	bx	lr
 801d8f2:	bf00      	nop
 801d8f4:	58024400 	.word	0x58024400
 801d8f8:	03d09000 	.word	0x03d09000
 801d8fc:	46000000 	.word	0x46000000
 801d900:	4c742400 	.word	0x4c742400
 801d904:	4a742400 	.word	0x4a742400
 801d908:	4af42400 	.word	0x4af42400

0801d90c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801d90c:	b580      	push	{r7, lr}
 801d90e:	b084      	sub	sp, #16
 801d910:	af00      	add	r7, sp, #0
 801d912:	6078      	str	r0, [r7, #4]
 801d914:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d916:	2300      	movs	r3, #0
 801d918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d91a:	4b53      	ldr	r3, [pc, #332]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d91e:	f003 0303 	and.w	r3, r3, #3
 801d922:	2b03      	cmp	r3, #3
 801d924:	d101      	bne.n	801d92a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801d926:	2301      	movs	r3, #1
 801d928:	e099      	b.n	801da5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801d92a:	4b4f      	ldr	r3, [pc, #316]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d92c:	681b      	ldr	r3, [r3, #0]
 801d92e:	4a4e      	ldr	r2, [pc, #312]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d930:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d936:	f7f6 ff37 	bl	80147a8 <HAL_GetTick>
 801d93a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801d93c:	e008      	b.n	801d950 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801d93e:	f7f6 ff33 	bl	80147a8 <HAL_GetTick>
 801d942:	4602      	mov	r2, r0
 801d944:	68bb      	ldr	r3, [r7, #8]
 801d946:	1ad3      	subs	r3, r2, r3
 801d948:	2b02      	cmp	r3, #2
 801d94a:	d901      	bls.n	801d950 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801d94c:	2303      	movs	r3, #3
 801d94e:	e086      	b.n	801da5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801d950:	4b45      	ldr	r3, [pc, #276]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d952:	681b      	ldr	r3, [r3, #0]
 801d954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d1f0      	bne.n	801d93e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801d95c:	4b42      	ldr	r3, [pc, #264]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d960:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	031b      	lsls	r3, r3, #12
 801d96a:	493f      	ldr	r1, [pc, #252]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d96c:	4313      	orrs	r3, r2
 801d96e:	628b      	str	r3, [r1, #40]	; 0x28
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	685b      	ldr	r3, [r3, #4]
 801d974:	3b01      	subs	r3, #1
 801d976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	689b      	ldr	r3, [r3, #8]
 801d97e:	3b01      	subs	r3, #1
 801d980:	025b      	lsls	r3, r3, #9
 801d982:	b29b      	uxth	r3, r3
 801d984:	431a      	orrs	r2, r3
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	68db      	ldr	r3, [r3, #12]
 801d98a:	3b01      	subs	r3, #1
 801d98c:	041b      	lsls	r3, r3, #16
 801d98e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801d992:	431a      	orrs	r2, r3
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	691b      	ldr	r3, [r3, #16]
 801d998:	3b01      	subs	r3, #1
 801d99a:	061b      	lsls	r3, r3, #24
 801d99c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801d9a0:	4931      	ldr	r1, [pc, #196]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9a2:	4313      	orrs	r3, r2
 801d9a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801d9a6:	4b30      	ldr	r3, [pc, #192]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	695b      	ldr	r3, [r3, #20]
 801d9b2:	492d      	ldr	r1, [pc, #180]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9b4:	4313      	orrs	r3, r2
 801d9b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801d9b8:	4b2b      	ldr	r3, [pc, #172]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9bc:	f023 0220 	bic.w	r2, r3, #32
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	699b      	ldr	r3, [r3, #24]
 801d9c4:	4928      	ldr	r1, [pc, #160]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9c6:	4313      	orrs	r3, r2
 801d9c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801d9ca:	4b27      	ldr	r3, [pc, #156]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9ce:	4a26      	ldr	r2, [pc, #152]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9d0:	f023 0310 	bic.w	r3, r3, #16
 801d9d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801d9d6:	4b24      	ldr	r3, [pc, #144]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d9da:	4b24      	ldr	r3, [pc, #144]	; (801da6c <RCCEx_PLL2_Config+0x160>)
 801d9dc:	4013      	ands	r3, r2
 801d9de:	687a      	ldr	r2, [r7, #4]
 801d9e0:	69d2      	ldr	r2, [r2, #28]
 801d9e2:	00d2      	lsls	r2, r2, #3
 801d9e4:	4920      	ldr	r1, [pc, #128]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9e6:	4313      	orrs	r3, r2
 801d9e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801d9ea:	4b1f      	ldr	r3, [pc, #124]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9ee:	4a1e      	ldr	r2, [pc, #120]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9f0:	f043 0310 	orr.w	r3, r3, #16
 801d9f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801d9f6:	683b      	ldr	r3, [r7, #0]
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	d106      	bne.n	801da0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801d9fc:	4b1a      	ldr	r3, [pc, #104]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801d9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da00:	4a19      	ldr	r2, [pc, #100]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801da02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801da06:	62d3      	str	r3, [r2, #44]	; 0x2c
 801da08:	e00f      	b.n	801da2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801da0a:	683b      	ldr	r3, [r7, #0]
 801da0c:	2b01      	cmp	r3, #1
 801da0e:	d106      	bne.n	801da1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801da10:	4b15      	ldr	r3, [pc, #84]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da14:	4a14      	ldr	r2, [pc, #80]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801da16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801da1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801da1c:	e005      	b.n	801da2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801da1e:	4b12      	ldr	r3, [pc, #72]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801da20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da22:	4a11      	ldr	r2, [pc, #68]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801da24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801da28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801da2a:	4b0f      	ldr	r3, [pc, #60]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801da2c:	681b      	ldr	r3, [r3, #0]
 801da2e:	4a0e      	ldr	r2, [pc, #56]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801da30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801da34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801da36:	f7f6 feb7 	bl	80147a8 <HAL_GetTick>
 801da3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801da3c:	e008      	b.n	801da50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801da3e:	f7f6 feb3 	bl	80147a8 <HAL_GetTick>
 801da42:	4602      	mov	r2, r0
 801da44:	68bb      	ldr	r3, [r7, #8]
 801da46:	1ad3      	subs	r3, r2, r3
 801da48:	2b02      	cmp	r3, #2
 801da4a:	d901      	bls.n	801da50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801da4c:	2303      	movs	r3, #3
 801da4e:	e006      	b.n	801da5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801da50:	4b05      	ldr	r3, [pc, #20]	; (801da68 <RCCEx_PLL2_Config+0x15c>)
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d0f0      	beq.n	801da3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801da5c:	7bfb      	ldrb	r3, [r7, #15]
}
 801da5e:	4618      	mov	r0, r3
 801da60:	3710      	adds	r7, #16
 801da62:	46bd      	mov	sp, r7
 801da64:	bd80      	pop	{r7, pc}
 801da66:	bf00      	nop
 801da68:	58024400 	.word	0x58024400
 801da6c:	ffff0007 	.word	0xffff0007

0801da70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801da70:	b580      	push	{r7, lr}
 801da72:	b084      	sub	sp, #16
 801da74:	af00      	add	r7, sp, #0
 801da76:	6078      	str	r0, [r7, #4]
 801da78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801da7a:	2300      	movs	r3, #0
 801da7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801da7e:	4b53      	ldr	r3, [pc, #332]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801da80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da82:	f003 0303 	and.w	r3, r3, #3
 801da86:	2b03      	cmp	r3, #3
 801da88:	d101      	bne.n	801da8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801da8a:	2301      	movs	r3, #1
 801da8c:	e099      	b.n	801dbc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801da8e:	4b4f      	ldr	r3, [pc, #316]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	4a4e      	ldr	r2, [pc, #312]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801da94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801da98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801da9a:	f7f6 fe85 	bl	80147a8 <HAL_GetTick>
 801da9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801daa0:	e008      	b.n	801dab4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801daa2:	f7f6 fe81 	bl	80147a8 <HAL_GetTick>
 801daa6:	4602      	mov	r2, r0
 801daa8:	68bb      	ldr	r3, [r7, #8]
 801daaa:	1ad3      	subs	r3, r2, r3
 801daac:	2b02      	cmp	r3, #2
 801daae:	d901      	bls.n	801dab4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801dab0:	2303      	movs	r3, #3
 801dab2:	e086      	b.n	801dbc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801dab4:	4b45      	ldr	r3, [pc, #276]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801dab6:	681b      	ldr	r3, [r3, #0]
 801dab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	d1f0      	bne.n	801daa2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801dac0:	4b42      	ldr	r3, [pc, #264]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801dac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dac4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	051b      	lsls	r3, r3, #20
 801dace:	493f      	ldr	r1, [pc, #252]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801dad0:	4313      	orrs	r3, r2
 801dad2:	628b      	str	r3, [r1, #40]	; 0x28
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	685b      	ldr	r3, [r3, #4]
 801dad8:	3b01      	subs	r3, #1
 801dada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	689b      	ldr	r3, [r3, #8]
 801dae2:	3b01      	subs	r3, #1
 801dae4:	025b      	lsls	r3, r3, #9
 801dae6:	b29b      	uxth	r3, r3
 801dae8:	431a      	orrs	r2, r3
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	68db      	ldr	r3, [r3, #12]
 801daee:	3b01      	subs	r3, #1
 801daf0:	041b      	lsls	r3, r3, #16
 801daf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801daf6:	431a      	orrs	r2, r3
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	691b      	ldr	r3, [r3, #16]
 801dafc:	3b01      	subs	r3, #1
 801dafe:	061b      	lsls	r3, r3, #24
 801db00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801db04:	4931      	ldr	r1, [pc, #196]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db06:	4313      	orrs	r3, r2
 801db08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801db0a:	4b30      	ldr	r3, [pc, #192]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	695b      	ldr	r3, [r3, #20]
 801db16:	492d      	ldr	r1, [pc, #180]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db18:	4313      	orrs	r3, r2
 801db1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801db1c:	4b2b      	ldr	r3, [pc, #172]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	699b      	ldr	r3, [r3, #24]
 801db28:	4928      	ldr	r1, [pc, #160]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db2a:	4313      	orrs	r3, r2
 801db2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801db2e:	4b27      	ldr	r3, [pc, #156]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db32:	4a26      	ldr	r2, [pc, #152]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801db38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801db3a:	4b24      	ldr	r3, [pc, #144]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801db3e:	4b24      	ldr	r3, [pc, #144]	; (801dbd0 <RCCEx_PLL3_Config+0x160>)
 801db40:	4013      	ands	r3, r2
 801db42:	687a      	ldr	r2, [r7, #4]
 801db44:	69d2      	ldr	r2, [r2, #28]
 801db46:	00d2      	lsls	r2, r2, #3
 801db48:	4920      	ldr	r1, [pc, #128]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db4a:	4313      	orrs	r3, r2
 801db4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801db4e:	4b1f      	ldr	r3, [pc, #124]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db52:	4a1e      	ldr	r2, [pc, #120]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801db58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801db5a:	683b      	ldr	r3, [r7, #0]
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d106      	bne.n	801db6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801db60:	4b1a      	ldr	r3, [pc, #104]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db64:	4a19      	ldr	r2, [pc, #100]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801db6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801db6c:	e00f      	b.n	801db8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	2b01      	cmp	r3, #1
 801db72:	d106      	bne.n	801db82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801db74:	4b15      	ldr	r3, [pc, #84]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db78:	4a14      	ldr	r2, [pc, #80]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801db7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 801db80:	e005      	b.n	801db8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801db82:	4b12      	ldr	r3, [pc, #72]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db86:	4a11      	ldr	r2, [pc, #68]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801db8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801db8e:	4b0f      	ldr	r3, [pc, #60]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	4a0e      	ldr	r2, [pc, #56]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801db94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801db98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801db9a:	f7f6 fe05 	bl	80147a8 <HAL_GetTick>
 801db9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801dba0:	e008      	b.n	801dbb4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801dba2:	f7f6 fe01 	bl	80147a8 <HAL_GetTick>
 801dba6:	4602      	mov	r2, r0
 801dba8:	68bb      	ldr	r3, [r7, #8]
 801dbaa:	1ad3      	subs	r3, r2, r3
 801dbac:	2b02      	cmp	r3, #2
 801dbae:	d901      	bls.n	801dbb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801dbb0:	2303      	movs	r3, #3
 801dbb2:	e006      	b.n	801dbc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801dbb4:	4b05      	ldr	r3, [pc, #20]	; (801dbcc <RCCEx_PLL3_Config+0x15c>)
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	d0f0      	beq.n	801dba2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801dbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 801dbc2:	4618      	mov	r0, r3
 801dbc4:	3710      	adds	r7, #16
 801dbc6:	46bd      	mov	sp, r7
 801dbc8:	bd80      	pop	{r7, pc}
 801dbca:	bf00      	nop
 801dbcc:	58024400 	.word	0x58024400
 801dbd0:	ffff0007 	.word	0xffff0007

0801dbd4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801dbd4:	b580      	push	{r7, lr}
 801dbd6:	b08a      	sub	sp, #40	; 0x28
 801dbd8:	af00      	add	r7, sp, #0
 801dbda:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d101      	bne.n	801dbe6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801dbe2:	2301      	movs	r3, #1
 801dbe4:	e07c      	b.n	801dce0 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dbec:	b2db      	uxtb	r3, r3
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d10c      	bne.n	801dc0c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	699b      	ldr	r3, [r3, #24]
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d102      	bne.n	801dc06 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	2202      	movs	r2, #2
 801dc04:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801dc06:	6878      	ldr	r0, [r7, #4]
 801dc08:	f7f5 fbc0 	bl	801338c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	2203      	movs	r2, #3
 801dc10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801dc14:	6878      	ldr	r0, [r7, #4]
 801dc16:	f000 f867 	bl	801dce8 <HAL_SD_InitCard>
 801dc1a:	4603      	mov	r3, r0
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d001      	beq.n	801dc24 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 801dc20:	2301      	movs	r3, #1
 801dc22:	e05d      	b.n	801dce0 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801dc24:	f107 0308 	add.w	r3, r7, #8
 801dc28:	4619      	mov	r1, r3
 801dc2a:	6878      	ldr	r0, [r7, #4]
 801dc2c:	f000 fdb6 	bl	801e79c <HAL_SD_GetCardStatus>
 801dc30:	4603      	mov	r3, r0
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d001      	beq.n	801dc3a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 801dc36:	2301      	movs	r3, #1
 801dc38:	e052      	b.n	801dce0 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 801dc3a:	7e3b      	ldrb	r3, [r7, #24]
 801dc3c:	b2db      	uxtb	r3, r3
 801dc3e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 801dc40:	7e7b      	ldrb	r3, [r7, #25]
 801dc42:	b2db      	uxtb	r3, r3
 801dc44:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc4a:	2b01      	cmp	r3, #1
 801dc4c:	d10a      	bne.n	801dc64 <HAL_SD_Init+0x90>
 801dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d102      	bne.n	801dc5a <HAL_SD_Init+0x86>
 801dc54:	6a3b      	ldr	r3, [r7, #32]
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d004      	beq.n	801dc64 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801dc60:	65da      	str	r2, [r3, #92]	; 0x5c
 801dc62:	e00b      	b.n	801dc7c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc68:	2b01      	cmp	r3, #1
 801dc6a:	d104      	bne.n	801dc76 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801dc72:	65da      	str	r2, [r3, #92]	; 0x5c
 801dc74:	e002      	b.n	801dc7c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	2200      	movs	r2, #0
 801dc7a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	68db      	ldr	r3, [r3, #12]
 801dc80:	4619      	mov	r1, r3
 801dc82:	6878      	ldr	r0, [r7, #4]
 801dc84:	f000 fe6c 	bl	801e960 <HAL_SD_ConfigWideBusOperation>
 801dc88:	4603      	mov	r3, r0
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	d001      	beq.n	801dc92 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 801dc8e:	2301      	movs	r3, #1
 801dc90:	e026      	b.n	801dce0 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801dc92:	f7f6 fd89 	bl	80147a8 <HAL_GetTick>
 801dc96:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801dc98:	e011      	b.n	801dcbe <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 801dc9a:	f7f6 fd85 	bl	80147a8 <HAL_GetTick>
 801dc9e:	4602      	mov	r2, r0
 801dca0:	69fb      	ldr	r3, [r7, #28]
 801dca2:	1ad3      	subs	r3, r2, r3
 801dca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dca8:	d109      	bne.n	801dcbe <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801dcb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	2201      	movs	r2, #1
 801dcb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 801dcba:	2303      	movs	r3, #3
 801dcbc:	e010      	b.n	801dce0 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801dcbe:	6878      	ldr	r0, [r7, #4]
 801dcc0:	f000 fef8 	bl	801eab4 <HAL_SD_GetCardState>
 801dcc4:	4603      	mov	r3, r0
 801dcc6:	2b04      	cmp	r3, #4
 801dcc8:	d1e7      	bne.n	801dc9a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	2200      	movs	r2, #0
 801dcce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	2200      	movs	r2, #0
 801dcd4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	2201      	movs	r2, #1
 801dcda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801dcde:	2300      	movs	r3, #0
}
 801dce0:	4618      	mov	r0, r3
 801dce2:	3728      	adds	r7, #40	; 0x28
 801dce4:	46bd      	mov	sp, r7
 801dce6:	bd80      	pop	{r7, pc}

0801dce8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 801dce8:	b5b0      	push	{r4, r5, r7, lr}
 801dcea:	b08e      	sub	sp, #56	; 0x38
 801dcec:	af04      	add	r7, sp, #16
 801dcee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801dcf0:	2300      	movs	r3, #0
 801dcf2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801dcf4:	2300      	movs	r3, #0
 801dcf6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801dcf8:	2300      	movs	r3, #0
 801dcfa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801dcfc:	2300      	movs	r3, #0
 801dcfe:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801dd00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801dd04:	f7fe ff90 	bl	801cc28 <HAL_RCCEx_GetPeriphCLKFreq>
 801dd08:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 801dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd0c:	0a1b      	lsrs	r3, r3, #8
 801dd0e:	4a40      	ldr	r2, [pc, #256]	; (801de10 <HAL_SD_InitCard+0x128>)
 801dd10:	fba2 2303 	umull	r2, r3, r2, r3
 801dd14:	091b      	lsrs	r3, r3, #4
 801dd16:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	699b      	ldr	r3, [r3, #24]
 801dd1c:	2b02      	cmp	r3, #2
 801dd1e:	d107      	bne.n	801dd30 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	681b      	ldr	r3, [r3, #0]
 801dd24:	681a      	ldr	r2, [r3, #0]
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	f042 0210 	orr.w	r2, r2, #16
 801dd2e:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	681d      	ldr	r5, [r3, #0]
 801dd34:	466c      	mov	r4, sp
 801dd36:	f107 0314 	add.w	r3, r7, #20
 801dd3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801dd3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801dd42:	f107 0308 	add.w	r3, r7, #8
 801dd46:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dd48:	4628      	mov	r0, r5
 801dd4a:	f004 fb0d 	bl	8022368 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	4618      	mov	r0, r3
 801dd54:	f004 fb50 	bl	80223f8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 801dd58:	69bb      	ldr	r3, [r7, #24]
 801dd5a:	005b      	lsls	r3, r3, #1
 801dd5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 801dd62:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 801dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	d008      	beq.n	801dd7c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 801dd6a:	4a2a      	ldr	r2, [pc, #168]	; (801de14 <HAL_SD_InitCard+0x12c>)
 801dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd6e:	fbb2 f3f3 	udiv	r3, r2, r3
 801dd72:	3301      	adds	r3, #1
 801dd74:	4618      	mov	r0, r3
 801dd76:	f7f6 fd23 	bl	80147c0 <HAL_Delay>
 801dd7a:	e002      	b.n	801dd82 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 801dd7c:	2002      	movs	r0, #2
 801dd7e:	f7f6 fd1f 	bl	80147c0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801dd82:	6878      	ldr	r0, [r7, #4]
 801dd84:	f000 ff74 	bl	801ec70 <SD_PowerON>
 801dd88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801dd8a:	6a3b      	ldr	r3, [r7, #32]
 801dd8c:	2b00      	cmp	r3, #0
 801dd8e:	d00b      	beq.n	801dda8 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	2201      	movs	r2, #1
 801dd94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dd9c:	6a3b      	ldr	r3, [r7, #32]
 801dd9e:	431a      	orrs	r2, r3
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801dda4:	2301      	movs	r3, #1
 801dda6:	e02e      	b.n	801de06 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801dda8:	6878      	ldr	r0, [r7, #4]
 801ddaa:	f000 fea3 	bl	801eaf4 <SD_InitCard>
 801ddae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801ddb0:	6a3b      	ldr	r3, [r7, #32]
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	d00b      	beq.n	801ddce <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	2201      	movs	r2, #1
 801ddba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ddc2:	6a3b      	ldr	r3, [r7, #32]
 801ddc4:	431a      	orrs	r2, r3
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801ddca:	2301      	movs	r3, #1
 801ddcc:	e01b      	b.n	801de06 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	f004 fba4 	bl	8022524 <SDMMC_CmdBlockLength>
 801dddc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801ddde:	6a3b      	ldr	r3, [r7, #32]
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d00f      	beq.n	801de04 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	4a0b      	ldr	r2, [pc, #44]	; (801de18 <HAL_SD_InitCard+0x130>)
 801ddea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ddf0:	6a3b      	ldr	r3, [r7, #32]
 801ddf2:	431a      	orrs	r2, r3
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	2201      	movs	r2, #1
 801ddfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801de00:	2301      	movs	r3, #1
 801de02:	e000      	b.n	801de06 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 801de04:	2300      	movs	r3, #0
}
 801de06:	4618      	mov	r0, r3
 801de08:	3728      	adds	r7, #40	; 0x28
 801de0a:	46bd      	mov	sp, r7
 801de0c:	bdb0      	pop	{r4, r5, r7, pc}
 801de0e:	bf00      	nop
 801de10:	014f8b59 	.word	0x014f8b59
 801de14:	00012110 	.word	0x00012110
 801de18:	1fe00fff 	.word	0x1fe00fff

0801de1c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801de1c:	b580      	push	{r7, lr}
 801de1e:	b08c      	sub	sp, #48	; 0x30
 801de20:	af00      	add	r7, sp, #0
 801de22:	60f8      	str	r0, [r7, #12]
 801de24:	60b9      	str	r1, [r7, #8]
 801de26:	607a      	str	r2, [r7, #4]
 801de28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801de2e:	68bb      	ldr	r3, [r7, #8]
 801de30:	2b00      	cmp	r3, #0
 801de32:	d107      	bne.n	801de44 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801de40:	2301      	movs	r3, #1
 801de42:	e08d      	b.n	801df60 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801de4a:	b2db      	uxtb	r3, r3
 801de4c:	2b01      	cmp	r3, #1
 801de4e:	f040 8086 	bne.w	801df5e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801de52:	68fb      	ldr	r3, [r7, #12]
 801de54:	2200      	movs	r2, #0
 801de56:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801de58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de5a:	683b      	ldr	r3, [r7, #0]
 801de5c:	441a      	add	r2, r3
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801de62:	429a      	cmp	r2, r3
 801de64:	d907      	bls.n	801de76 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de6a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801de72:	2301      	movs	r3, #1
 801de74:	e074      	b.n	801df60 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801de76:	68fb      	ldr	r3, [r7, #12]
 801de78:	2203      	movs	r2, #3
 801de7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801de7e:	68fb      	ldr	r3, [r7, #12]
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	2200      	movs	r2, #0
 801de84:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 801de86:	68fb      	ldr	r3, [r7, #12]
 801de88:	68ba      	ldr	r2, [r7, #8]
 801de8a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 801de8c:	683b      	ldr	r3, [r7, #0]
 801de8e:	025a      	lsls	r2, r3, #9
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801de98:	2b01      	cmp	r3, #1
 801de9a:	d002      	beq.n	801dea2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 801de9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de9e:	025b      	lsls	r3, r3, #9
 801dea0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801dea2:	f04f 33ff 	mov.w	r3, #4294967295
 801dea6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801dea8:	683b      	ldr	r3, [r7, #0]
 801deaa:	025b      	lsls	r3, r3, #9
 801deac:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801deae:	2390      	movs	r3, #144	; 0x90
 801deb0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801deb2:	2302      	movs	r3, #2
 801deb4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801deb6:	2300      	movs	r3, #0
 801deb8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801deba:	2300      	movs	r3, #0
 801debc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	f107 0210 	add.w	r2, r7, #16
 801dec6:	4611      	mov	r1, r2
 801dec8:	4618      	mov	r0, r3
 801deca:	f004 faff 	bl	80224cc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	68da      	ldr	r2, [r3, #12]
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dedc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	681b      	ldr	r3, [r3, #0]
 801dee2:	68ba      	ldr	r2, [r7, #8]
 801dee4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	2201      	movs	r2, #1
 801deec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 801deee:	683b      	ldr	r3, [r7, #0]
 801def0:	2b01      	cmp	r3, #1
 801def2:	d90a      	bls.n	801df0a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	2282      	movs	r2, #130	; 0x82
 801def8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801df00:	4618      	mov	r0, r3
 801df02:	f004 fb55 	bl	80225b0 <SDMMC_CmdReadMultiBlock>
 801df06:	62f8      	str	r0, [r7, #44]	; 0x2c
 801df08:	e009      	b.n	801df1e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	2281      	movs	r2, #129	; 0x81
 801df0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	681b      	ldr	r3, [r3, #0]
 801df14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801df16:	4618      	mov	r0, r3
 801df18:	f004 fb27 	bl	802256a <SDMMC_CmdReadSingleBlock>
 801df1c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 801df1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df20:	2b00      	cmp	r3, #0
 801df22:	d012      	beq.n	801df4a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	681b      	ldr	r3, [r3, #0]
 801df28:	4a0f      	ldr	r2, [pc, #60]	; (801df68 <HAL_SD_ReadBlocks_DMA+0x14c>)
 801df2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801df2c:	68fb      	ldr	r3, [r7, #12]
 801df2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801df30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df32:	431a      	orrs	r2, r3
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	2201      	movs	r2, #1
 801df3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	2200      	movs	r2, #0
 801df44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 801df46:	2301      	movs	r3, #1
 801df48:	e00a      	b.n	801df60 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 801df58:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 801df5a:	2300      	movs	r3, #0
 801df5c:	e000      	b.n	801df60 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801df5e:	2302      	movs	r3, #2
  }
}
 801df60:	4618      	mov	r0, r3
 801df62:	3730      	adds	r7, #48	; 0x30
 801df64:	46bd      	mov	sp, r7
 801df66:	bd80      	pop	{r7, pc}
 801df68:	1fe00fff 	.word	0x1fe00fff

0801df6c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801df6c:	b580      	push	{r7, lr}
 801df6e:	b08c      	sub	sp, #48	; 0x30
 801df70:	af00      	add	r7, sp, #0
 801df72:	60f8      	str	r0, [r7, #12]
 801df74:	60b9      	str	r1, [r7, #8]
 801df76:	607a      	str	r2, [r7, #4]
 801df78:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801df7e:	68bb      	ldr	r3, [r7, #8]
 801df80:	2b00      	cmp	r3, #0
 801df82:	d107      	bne.n	801df94 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801df84:	68fb      	ldr	r3, [r7, #12]
 801df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801df8c:	68fb      	ldr	r3, [r7, #12]
 801df8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801df90:	2301      	movs	r3, #1
 801df92:	e08d      	b.n	801e0b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801df9a:	b2db      	uxtb	r3, r3
 801df9c:	2b01      	cmp	r3, #1
 801df9e:	f040 8086 	bne.w	801e0ae <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	2200      	movs	r2, #0
 801dfa6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801dfa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dfaa:	683b      	ldr	r3, [r7, #0]
 801dfac:	441a      	add	r2, r3
 801dfae:	68fb      	ldr	r3, [r7, #12]
 801dfb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801dfb2:	429a      	cmp	r2, r3
 801dfb4:	d907      	bls.n	801dfc6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801dfbe:	68fb      	ldr	r3, [r7, #12]
 801dfc0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801dfc2:	2301      	movs	r3, #1
 801dfc4:	e074      	b.n	801e0b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801dfc6:	68fb      	ldr	r3, [r7, #12]
 801dfc8:	2203      	movs	r2, #3
 801dfca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801dfce:	68fb      	ldr	r3, [r7, #12]
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	2200      	movs	r2, #0
 801dfd4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 801dfd6:	68fb      	ldr	r3, [r7, #12]
 801dfd8:	68ba      	ldr	r2, [r7, #8]
 801dfda:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 801dfdc:	683b      	ldr	r3, [r7, #0]
 801dfde:	025a      	lsls	r2, r3, #9
 801dfe0:	68fb      	ldr	r3, [r7, #12]
 801dfe2:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801dfe4:	68fb      	ldr	r3, [r7, #12]
 801dfe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dfe8:	2b01      	cmp	r3, #1
 801dfea:	d002      	beq.n	801dff2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 801dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfee:	025b      	lsls	r3, r3, #9
 801dff0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801dff2:	f04f 33ff 	mov.w	r3, #4294967295
 801dff6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801dff8:	683b      	ldr	r3, [r7, #0]
 801dffa:	025b      	lsls	r3, r3, #9
 801dffc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801dffe:	2390      	movs	r3, #144	; 0x90
 801e000:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801e002:	2300      	movs	r3, #0
 801e004:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801e006:	2300      	movs	r3, #0
 801e008:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801e00a:	2300      	movs	r3, #0
 801e00c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801e00e:	68fb      	ldr	r3, [r7, #12]
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	f107 0210 	add.w	r2, r7, #16
 801e016:	4611      	mov	r1, r2
 801e018:	4618      	mov	r0, r3
 801e01a:	f004 fa57 	bl	80224cc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	681b      	ldr	r3, [r3, #0]
 801e022:	68da      	ldr	r2, [r3, #12]
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e02c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801e02e:	68fb      	ldr	r3, [r7, #12]
 801e030:	681b      	ldr	r3, [r3, #0]
 801e032:	68ba      	ldr	r2, [r7, #8]
 801e034:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801e036:	68fb      	ldr	r3, [r7, #12]
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	2201      	movs	r2, #1
 801e03c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 801e03e:	683b      	ldr	r3, [r7, #0]
 801e040:	2b01      	cmp	r3, #1
 801e042:	d90a      	bls.n	801e05a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	22a0      	movs	r2, #160	; 0xa0
 801e048:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801e04a:	68fb      	ldr	r3, [r7, #12]
 801e04c:	681b      	ldr	r3, [r3, #0]
 801e04e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e050:	4618      	mov	r0, r3
 801e052:	f004 faf3 	bl	802263c <SDMMC_CmdWriteMultiBlock>
 801e056:	62f8      	str	r0, [r7, #44]	; 0x2c
 801e058:	e009      	b.n	801e06e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	2290      	movs	r2, #144	; 0x90
 801e05e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e066:	4618      	mov	r0, r3
 801e068:	f004 fac5 	bl	80225f6 <SDMMC_CmdWriteSingleBlock>
 801e06c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 801e06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e070:	2b00      	cmp	r3, #0
 801e072:	d012      	beq.n	801e09a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	4a0f      	ldr	r2, [pc, #60]	; (801e0b8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 801e07a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801e07c:	68fb      	ldr	r3, [r7, #12]
 801e07e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e082:	431a      	orrs	r2, r3
 801e084:	68fb      	ldr	r3, [r7, #12]
 801e086:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801e088:	68fb      	ldr	r3, [r7, #12]
 801e08a:	2201      	movs	r2, #1
 801e08c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	2200      	movs	r2, #0
 801e094:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 801e096:	2301      	movs	r3, #1
 801e098:	e00a      	b.n	801e0b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	681b      	ldr	r3, [r3, #0]
 801e0a4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 801e0a8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801e0aa:	2300      	movs	r3, #0
 801e0ac:	e000      	b.n	801e0b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801e0ae:	2302      	movs	r3, #2
  }
}
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	3730      	adds	r7, #48	; 0x30
 801e0b4:	46bd      	mov	sp, r7
 801e0b6:	bd80      	pop	{r7, pc}
 801e0b8:	1fe00fff 	.word	0x1fe00fff

0801e0bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 801e0bc:	b580      	push	{r7, lr}
 801e0be:	b084      	sub	sp, #16
 801e0c0:	af00      	add	r7, sp, #0
 801e0c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d008      	beq.n	801e0ea <HAL_SD_IRQHandler+0x2e>
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	f003 0308 	and.w	r3, r3, #8
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d003      	beq.n	801e0ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801e0e2:	6878      	ldr	r0, [r7, #4]
 801e0e4:	f001 f92a 	bl	801f33c <SD_Read_IT>
 801e0e8:	e19a      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	681b      	ldr	r3, [r3, #0]
 801e0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	f000 80ac 	beq.w	801e252 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e102:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	681b      	ldr	r3, [r3, #0]
 801e108:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	681a      	ldr	r2, [r3, #0]
 801e10e:	4b9d      	ldr	r3, [pc, #628]	; (801e384 <HAL_SD_IRQHandler+0x2c8>)
 801e110:	400b      	ands	r3, r1
 801e112:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801e122:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	681b      	ldr	r3, [r3, #0]
 801e128:	68da      	ldr	r2, [r3, #12]
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e132:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 801e134:	68fb      	ldr	r3, [r7, #12]
 801e136:	f003 0308 	and.w	r3, r3, #8
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	d038      	beq.n	801e1b0 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801e13e:	68fb      	ldr	r3, [r7, #12]
 801e140:	f003 0302 	and.w	r3, r3, #2
 801e144:	2b00      	cmp	r3, #0
 801e146:	d104      	bne.n	801e152 <HAL_SD_IRQHandler+0x96>
 801e148:	68fb      	ldr	r3, [r7, #12]
 801e14a:	f003 0320 	and.w	r3, r3, #32
 801e14e:	2b00      	cmp	r3, #0
 801e150:	d011      	beq.n	801e176 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	4618      	mov	r0, r3
 801e158:	f004 fa94 	bl	8022684 <SDMMC_CmdStopTransfer>
 801e15c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 801e15e:	68bb      	ldr	r3, [r7, #8]
 801e160:	2b00      	cmp	r3, #0
 801e162:	d008      	beq.n	801e176 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e168:	68bb      	ldr	r3, [r7, #8]
 801e16a:	431a      	orrs	r2, r3
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801e170:	6878      	ldr	r0, [r7, #4]
 801e172:	f000 f959 	bl	801e428 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	4a83      	ldr	r2, [pc, #524]	; (801e388 <HAL_SD_IRQHandler+0x2cc>)
 801e17c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	2201      	movs	r2, #1
 801e182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	2200      	movs	r2, #0
 801e18a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	f003 0301 	and.w	r3, r3, #1
 801e192:	2b00      	cmp	r3, #0
 801e194:	d104      	bne.n	801e1a0 <HAL_SD_IRQHandler+0xe4>
 801e196:	68fb      	ldr	r3, [r7, #12]
 801e198:	f003 0302 	and.w	r3, r3, #2
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d003      	beq.n	801e1a8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801e1a0:	6878      	ldr	r0, [r7, #4]
 801e1a2:	f005 fa13 	bl	80235cc <HAL_SD_RxCpltCallback>
 801e1a6:	e13b      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 801e1a8:	6878      	ldr	r0, [r7, #4]
 801e1aa:	f005 fa05 	bl	80235b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801e1ae:	e137      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 801e1b0:	68fb      	ldr	r3, [r7, #12]
 801e1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	f000 8132 	beq.w	801e420 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	2200      	movs	r2, #0
 801e1c2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	681b      	ldr	r3, [r3, #0]
 801e1c8:	2200      	movs	r2, #0
 801e1ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	2200      	movs	r2, #0
 801e1d2:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	f003 0302 	and.w	r3, r3, #2
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d104      	bne.n	801e1e8 <HAL_SD_IRQHandler+0x12c>
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	f003 0320 	and.w	r3, r3, #32
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d011      	beq.n	801e20c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	4618      	mov	r0, r3
 801e1ee:	f004 fa49 	bl	8022684 <SDMMC_CmdStopTransfer>
 801e1f2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 801e1f4:	68bb      	ldr	r3, [r7, #8]
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d008      	beq.n	801e20c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e1fe:	68bb      	ldr	r3, [r7, #8]
 801e200:	431a      	orrs	r2, r3
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 801e206:	6878      	ldr	r0, [r7, #4]
 801e208:	f000 f90e 	bl	801e428 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	2201      	movs	r2, #1
 801e210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	2200      	movs	r2, #0
 801e218:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	f003 0310 	and.w	r3, r3, #16
 801e220:	2b00      	cmp	r3, #0
 801e222:	d104      	bne.n	801e22e <HAL_SD_IRQHandler+0x172>
 801e224:	68fb      	ldr	r3, [r7, #12]
 801e226:	f003 0320 	and.w	r3, r3, #32
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d002      	beq.n	801e234 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 801e22e:	6878      	ldr	r0, [r7, #4]
 801e230:	f005 f9c2 	bl	80235b8 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801e234:	68fb      	ldr	r3, [r7, #12]
 801e236:	f003 0301 	and.w	r3, r3, #1
 801e23a:	2b00      	cmp	r3, #0
 801e23c:	d105      	bne.n	801e24a <HAL_SD_IRQHandler+0x18e>
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	f003 0302 	and.w	r3, r3, #2
 801e244:	2b00      	cmp	r3, #0
 801e246:	f000 80eb 	beq.w	801e420 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 801e24a:	6878      	ldr	r0, [r7, #4]
 801e24c:	f005 f9be 	bl	80235cc <HAL_SD_RxCpltCallback>
}
 801e250:	e0e6      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	681b      	ldr	r3, [r3, #0]
 801e256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d008      	beq.n	801e272 <HAL_SD_IRQHandler+0x1b6>
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	f003 0308 	and.w	r3, r3, #8
 801e266:	2b00      	cmp	r3, #0
 801e268:	d003      	beq.n	801e272 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 801e26a:	6878      	ldr	r0, [r7, #4]
 801e26c:	f001 f8ac 	bl	801f3c8 <SD_Write_IT>
 801e270:	e0d6      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e278:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	f000 80a2 	beq.w	801e3c6 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e288:	f003 0302 	and.w	r3, r3, #2
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d005      	beq.n	801e29c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e294:	f043 0202 	orr.w	r2, r3, #2
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e2a2:	f003 0308 	and.w	r3, r3, #8
 801e2a6:	2b00      	cmp	r3, #0
 801e2a8:	d005      	beq.n	801e2b6 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2ae:	f043 0208 	orr.w	r2, r3, #8
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e2bc:	f003 0320 	and.w	r3, r3, #32
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d005      	beq.n	801e2d0 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2c8:	f043 0220 	orr.w	r2, r3, #32
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	681b      	ldr	r3, [r3, #0]
 801e2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e2d6:	f003 0310 	and.w	r3, r3, #16
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d005      	beq.n	801e2ea <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2e2:	f043 0210 	orr.w	r2, r3, #16
 801e2e6:	687b      	ldr	r3, [r7, #4]
 801e2e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	681b      	ldr	r3, [r3, #0]
 801e2ee:	4a26      	ldr	r2, [pc, #152]	; (801e388 <HAL_SD_IRQHandler+0x2cc>)
 801e2f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 801e300:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	68da      	ldr	r2, [r3, #12]
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e310:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e320:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	681b      	ldr	r3, [r3, #0]
 801e326:	68da      	ldr	r2, [r3, #12]
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801e330:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	4618      	mov	r0, r3
 801e338:	f004 f9a4 	bl	8022684 <SDMMC_CmdStopTransfer>
 801e33c:	4602      	mov	r2, r0
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e342:	431a      	orrs	r2, r3
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	681b      	ldr	r3, [r3, #0]
 801e34c:	68da      	ldr	r2, [r3, #12]
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e356:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e360:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 801e362:	68fb      	ldr	r3, [r7, #12]
 801e364:	f003 0308 	and.w	r3, r3, #8
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d00f      	beq.n	801e38c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	2201      	movs	r2, #1
 801e370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	2200      	movs	r2, #0
 801e378:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 801e37a:	6878      	ldr	r0, [r7, #4]
 801e37c:	f000 f854 	bl	801e428 <HAL_SD_ErrorCallback>
}
 801e380:	e04e      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
 801e382:	bf00      	nop
 801e384:	ffff3ec5 	.word	0xffff3ec5
 801e388:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 801e38c:	68fb      	ldr	r3, [r7, #12]
 801e38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e392:	2b00      	cmp	r3, #0
 801e394:	d044      	beq.n	801e420 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e39a:	2b00      	cmp	r3, #0
 801e39c:	d040      	beq.n	801e420 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801e3ac:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	2200      	movs	r2, #0
 801e3b4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	2201      	movs	r2, #1
 801e3ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 801e3be:	6878      	ldr	r0, [r7, #4]
 801e3c0:	f000 f832 	bl	801e428 <HAL_SD_ErrorCallback>
}
 801e3c4:	e02c      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e3cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d025      	beq.n	801e420 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	681b      	ldr	r3, [r3, #0]
 801e3d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e3dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	681b      	ldr	r3, [r3, #0]
 801e3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e3e4:	f003 0304 	and.w	r3, r3, #4
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d10c      	bne.n	801e406 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	f003 0320 	and.w	r3, r3, #32
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d003      	beq.n	801e3fe <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 801e3f6:	6878      	ldr	r0, [r7, #4]
 801e3f8:	f001 f84e 	bl	801f498 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 801e3fc:	e010      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 801e3fe:	6878      	ldr	r0, [r7, #4]
 801e400:	f001 f836 	bl	801f470 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 801e404:	e00c      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801e406:	68fb      	ldr	r3, [r7, #12]
 801e408:	f003 0320 	and.w	r3, r3, #32
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d003      	beq.n	801e418 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 801e410:	6878      	ldr	r0, [r7, #4]
 801e412:	f001 f837 	bl	801f484 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 801e416:	e003      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 801e418:	6878      	ldr	r0, [r7, #4]
 801e41a:	f001 f81f 	bl	801f45c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 801e41e:	e7ff      	b.n	801e420 <HAL_SD_IRQHandler+0x364>
 801e420:	bf00      	nop
 801e422:	3710      	adds	r7, #16
 801e424:	46bd      	mov	sp, r7
 801e426:	bd80      	pop	{r7, pc}

0801e428 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 801e428:	b480      	push	{r7}
 801e42a:	b083      	sub	sp, #12
 801e42c:	af00      	add	r7, sp, #0
 801e42e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801e430:	bf00      	nop
 801e432:	370c      	adds	r7, #12
 801e434:	46bd      	mov	sp, r7
 801e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e43a:	4770      	bx	lr

0801e43c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 801e43c:	b480      	push	{r7}
 801e43e:	b083      	sub	sp, #12
 801e440:	af00      	add	r7, sp, #0
 801e442:	4603      	mov	r3, r0
 801e444:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 801e446:	bf00      	nop
 801e448:	370c      	adds	r7, #12
 801e44a:	46bd      	mov	sp, r7
 801e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e450:	4770      	bx	lr
	...

0801e454 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801e454:	b480      	push	{r7}
 801e456:	b083      	sub	sp, #12
 801e458:	af00      	add	r7, sp, #0
 801e45a:	6078      	str	r0, [r7, #4]
 801e45c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e462:	0f9b      	lsrs	r3, r3, #30
 801e464:	b2da      	uxtb	r2, r3
 801e466:	683b      	ldr	r3, [r7, #0]
 801e468:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e46e:	0e9b      	lsrs	r3, r3, #26
 801e470:	b2db      	uxtb	r3, r3
 801e472:	f003 030f 	and.w	r3, r3, #15
 801e476:	b2da      	uxtb	r2, r3
 801e478:	683b      	ldr	r3, [r7, #0]
 801e47a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e480:	0e1b      	lsrs	r3, r3, #24
 801e482:	b2db      	uxtb	r3, r3
 801e484:	f003 0303 	and.w	r3, r3, #3
 801e488:	b2da      	uxtb	r2, r3
 801e48a:	683b      	ldr	r3, [r7, #0]
 801e48c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e492:	0c1b      	lsrs	r3, r3, #16
 801e494:	b2da      	uxtb	r2, r3
 801e496:	683b      	ldr	r3, [r7, #0]
 801e498:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e49e:	0a1b      	lsrs	r3, r3, #8
 801e4a0:	b2da      	uxtb	r2, r3
 801e4a2:	683b      	ldr	r3, [r7, #0]
 801e4a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e4aa:	b2da      	uxtb	r2, r3
 801e4ac:	683b      	ldr	r3, [r7, #0]
 801e4ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e4b4:	0d1b      	lsrs	r3, r3, #20
 801e4b6:	b29a      	uxth	r2, r3
 801e4b8:	683b      	ldr	r3, [r7, #0]
 801e4ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e4c0:	0c1b      	lsrs	r3, r3, #16
 801e4c2:	b2db      	uxtb	r3, r3
 801e4c4:	f003 030f 	and.w	r3, r3, #15
 801e4c8:	b2da      	uxtb	r2, r3
 801e4ca:	683b      	ldr	r3, [r7, #0]
 801e4cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e4d2:	0bdb      	lsrs	r3, r3, #15
 801e4d4:	b2db      	uxtb	r3, r3
 801e4d6:	f003 0301 	and.w	r3, r3, #1
 801e4da:	b2da      	uxtb	r2, r3
 801e4dc:	683b      	ldr	r3, [r7, #0]
 801e4de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e4e4:	0b9b      	lsrs	r3, r3, #14
 801e4e6:	b2db      	uxtb	r3, r3
 801e4e8:	f003 0301 	and.w	r3, r3, #1
 801e4ec:	b2da      	uxtb	r2, r3
 801e4ee:	683b      	ldr	r3, [r7, #0]
 801e4f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e4f6:	0b5b      	lsrs	r3, r3, #13
 801e4f8:	b2db      	uxtb	r3, r3
 801e4fa:	f003 0301 	and.w	r3, r3, #1
 801e4fe:	b2da      	uxtb	r2, r3
 801e500:	683b      	ldr	r3, [r7, #0]
 801e502:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e508:	0b1b      	lsrs	r3, r3, #12
 801e50a:	b2db      	uxtb	r3, r3
 801e50c:	f003 0301 	and.w	r3, r3, #1
 801e510:	b2da      	uxtb	r2, r3
 801e512:	683b      	ldr	r3, [r7, #0]
 801e514:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801e516:	683b      	ldr	r3, [r7, #0]
 801e518:	2200      	movs	r2, #0
 801e51a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e520:	2b00      	cmp	r3, #0
 801e522:	d163      	bne.n	801e5ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e528:	009a      	lsls	r2, r3, #2
 801e52a:	f640 73fc 	movw	r3, #4092	; 0xffc
 801e52e:	4013      	ands	r3, r2
 801e530:	687a      	ldr	r2, [r7, #4]
 801e532:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801e534:	0f92      	lsrs	r2, r2, #30
 801e536:	431a      	orrs	r2, r3
 801e538:	683b      	ldr	r3, [r7, #0]
 801e53a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e540:	0edb      	lsrs	r3, r3, #27
 801e542:	b2db      	uxtb	r3, r3
 801e544:	f003 0307 	and.w	r3, r3, #7
 801e548:	b2da      	uxtb	r2, r3
 801e54a:	683b      	ldr	r3, [r7, #0]
 801e54c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e552:	0e1b      	lsrs	r3, r3, #24
 801e554:	b2db      	uxtb	r3, r3
 801e556:	f003 0307 	and.w	r3, r3, #7
 801e55a:	b2da      	uxtb	r2, r3
 801e55c:	683b      	ldr	r3, [r7, #0]
 801e55e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e564:	0d5b      	lsrs	r3, r3, #21
 801e566:	b2db      	uxtb	r3, r3
 801e568:	f003 0307 	and.w	r3, r3, #7
 801e56c:	b2da      	uxtb	r2, r3
 801e56e:	683b      	ldr	r3, [r7, #0]
 801e570:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e576:	0c9b      	lsrs	r3, r3, #18
 801e578:	b2db      	uxtb	r3, r3
 801e57a:	f003 0307 	and.w	r3, r3, #7
 801e57e:	b2da      	uxtb	r2, r3
 801e580:	683b      	ldr	r3, [r7, #0]
 801e582:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e588:	0bdb      	lsrs	r3, r3, #15
 801e58a:	b2db      	uxtb	r3, r3
 801e58c:	f003 0307 	and.w	r3, r3, #7
 801e590:	b2da      	uxtb	r2, r3
 801e592:	683b      	ldr	r3, [r7, #0]
 801e594:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801e596:	683b      	ldr	r3, [r7, #0]
 801e598:	691b      	ldr	r3, [r3, #16]
 801e59a:	1c5a      	adds	r2, r3, #1
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801e5a0:	683b      	ldr	r3, [r7, #0]
 801e5a2:	7e1b      	ldrb	r3, [r3, #24]
 801e5a4:	b2db      	uxtb	r3, r3
 801e5a6:	f003 0307 	and.w	r3, r3, #7
 801e5aa:	3302      	adds	r3, #2
 801e5ac:	2201      	movs	r2, #1
 801e5ae:	fa02 f303 	lsl.w	r3, r2, r3
 801e5b2:	687a      	ldr	r2, [r7, #4]
 801e5b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801e5b6:	fb02 f203 	mul.w	r2, r2, r3
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801e5be:	683b      	ldr	r3, [r7, #0]
 801e5c0:	7a1b      	ldrb	r3, [r3, #8]
 801e5c2:	b2db      	uxtb	r3, r3
 801e5c4:	f003 030f 	and.w	r3, r3, #15
 801e5c8:	2201      	movs	r2, #1
 801e5ca:	409a      	lsls	r2, r3
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e5d4:	687a      	ldr	r2, [r7, #4]
 801e5d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801e5d8:	0a52      	lsrs	r2, r2, #9
 801e5da:	fb02 f203 	mul.w	r2, r2, r3
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e5e8:	659a      	str	r2, [r3, #88]	; 0x58
 801e5ea:	e031      	b.n	801e650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e5f0:	2b01      	cmp	r3, #1
 801e5f2:	d11d      	bne.n	801e630 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e5f8:	041b      	lsls	r3, r3, #16
 801e5fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e602:	0c1b      	lsrs	r3, r3, #16
 801e604:	431a      	orrs	r2, r3
 801e606:	683b      	ldr	r3, [r7, #0]
 801e608:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801e60a:	683b      	ldr	r3, [r7, #0]
 801e60c:	691b      	ldr	r3, [r3, #16]
 801e60e:	3301      	adds	r3, #1
 801e610:	029a      	lsls	r2, r3, #10
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e624:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	659a      	str	r2, [r3, #88]	; 0x58
 801e62e:	e00f      	b.n	801e650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	4a58      	ldr	r2, [pc, #352]	; (801e798 <HAL_SD_GetCardCSD+0x344>)
 801e636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e63c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	2201      	movs	r2, #1
 801e648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801e64c:	2301      	movs	r3, #1
 801e64e:	e09d      	b.n	801e78c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e654:	0b9b      	lsrs	r3, r3, #14
 801e656:	b2db      	uxtb	r3, r3
 801e658:	f003 0301 	and.w	r3, r3, #1
 801e65c:	b2da      	uxtb	r2, r3
 801e65e:	683b      	ldr	r3, [r7, #0]
 801e660:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e666:	09db      	lsrs	r3, r3, #7
 801e668:	b2db      	uxtb	r3, r3
 801e66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e66e:	b2da      	uxtb	r2, r3
 801e670:	683b      	ldr	r3, [r7, #0]
 801e672:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e678:	b2db      	uxtb	r3, r3
 801e67a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e67e:	b2da      	uxtb	r2, r3
 801e680:	683b      	ldr	r3, [r7, #0]
 801e682:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e688:	0fdb      	lsrs	r3, r3, #31
 801e68a:	b2da      	uxtb	r2, r3
 801e68c:	683b      	ldr	r3, [r7, #0]
 801e68e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e694:	0f5b      	lsrs	r3, r3, #29
 801e696:	b2db      	uxtb	r3, r3
 801e698:	f003 0303 	and.w	r3, r3, #3
 801e69c:	b2da      	uxtb	r2, r3
 801e69e:	683b      	ldr	r3, [r7, #0]
 801e6a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6a6:	0e9b      	lsrs	r3, r3, #26
 801e6a8:	b2db      	uxtb	r3, r3
 801e6aa:	f003 0307 	and.w	r3, r3, #7
 801e6ae:	b2da      	uxtb	r2, r3
 801e6b0:	683b      	ldr	r3, [r7, #0]
 801e6b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6b8:	0d9b      	lsrs	r3, r3, #22
 801e6ba:	b2db      	uxtb	r3, r3
 801e6bc:	f003 030f 	and.w	r3, r3, #15
 801e6c0:	b2da      	uxtb	r2, r3
 801e6c2:	683b      	ldr	r3, [r7, #0]
 801e6c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6ca:	0d5b      	lsrs	r3, r3, #21
 801e6cc:	b2db      	uxtb	r3, r3
 801e6ce:	f003 0301 	and.w	r3, r3, #1
 801e6d2:	b2da      	uxtb	r2, r3
 801e6d4:	683b      	ldr	r3, [r7, #0]
 801e6d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801e6da:	683b      	ldr	r3, [r7, #0]
 801e6dc:	2200      	movs	r2, #0
 801e6de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6e6:	0c1b      	lsrs	r3, r3, #16
 801e6e8:	b2db      	uxtb	r3, r3
 801e6ea:	f003 0301 	and.w	r3, r3, #1
 801e6ee:	b2da      	uxtb	r2, r3
 801e6f0:	683b      	ldr	r3, [r7, #0]
 801e6f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6fa:	0bdb      	lsrs	r3, r3, #15
 801e6fc:	b2db      	uxtb	r3, r3
 801e6fe:	f003 0301 	and.w	r3, r3, #1
 801e702:	b2da      	uxtb	r2, r3
 801e704:	683b      	ldr	r3, [r7, #0]
 801e706:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e70e:	0b9b      	lsrs	r3, r3, #14
 801e710:	b2db      	uxtb	r3, r3
 801e712:	f003 0301 	and.w	r3, r3, #1
 801e716:	b2da      	uxtb	r2, r3
 801e718:	683b      	ldr	r3, [r7, #0]
 801e71a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e722:	0b5b      	lsrs	r3, r3, #13
 801e724:	b2db      	uxtb	r3, r3
 801e726:	f003 0301 	and.w	r3, r3, #1
 801e72a:	b2da      	uxtb	r2, r3
 801e72c:	683b      	ldr	r3, [r7, #0]
 801e72e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e736:	0b1b      	lsrs	r3, r3, #12
 801e738:	b2db      	uxtb	r3, r3
 801e73a:	f003 0301 	and.w	r3, r3, #1
 801e73e:	b2da      	uxtb	r2, r3
 801e740:	683b      	ldr	r3, [r7, #0]
 801e742:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e74a:	0a9b      	lsrs	r3, r3, #10
 801e74c:	b2db      	uxtb	r3, r3
 801e74e:	f003 0303 	and.w	r3, r3, #3
 801e752:	b2da      	uxtb	r2, r3
 801e754:	683b      	ldr	r3, [r7, #0]
 801e756:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e75e:	0a1b      	lsrs	r3, r3, #8
 801e760:	b2db      	uxtb	r3, r3
 801e762:	f003 0303 	and.w	r3, r3, #3
 801e766:	b2da      	uxtb	r2, r3
 801e768:	683b      	ldr	r3, [r7, #0]
 801e76a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e772:	085b      	lsrs	r3, r3, #1
 801e774:	b2db      	uxtb	r3, r3
 801e776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e77a:	b2da      	uxtb	r2, r3
 801e77c:	683b      	ldr	r3, [r7, #0]
 801e77e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801e782:	683b      	ldr	r3, [r7, #0]
 801e784:	2201      	movs	r2, #1
 801e786:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 801e78a:	2300      	movs	r3, #0
}
 801e78c:	4618      	mov	r0, r3
 801e78e:	370c      	adds	r7, #12
 801e790:	46bd      	mov	sp, r7
 801e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e796:	4770      	bx	lr
 801e798:	1fe00fff 	.word	0x1fe00fff

0801e79c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b094      	sub	sp, #80	; 0x50
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	6078      	str	r0, [r7, #4]
 801e7a4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 801e7ac:	f107 0308 	add.w	r3, r7, #8
 801e7b0:	4619      	mov	r1, r3
 801e7b2:	6878      	ldr	r0, [r7, #4]
 801e7b4:	f000 fb64 	bl	801ee80 <SD_SendSDStatus>
 801e7b8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 801e7ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d011      	beq.n	801e7e4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	681b      	ldr	r3, [r3, #0]
 801e7c4:	4a4f      	ldr	r2, [pc, #316]	; (801e904 <HAL_SD_GetCardStatus+0x168>)
 801e7c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e7ce:	431a      	orrs	r2, r3
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	2201      	movs	r2, #1
 801e7d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 801e7dc:	2301      	movs	r3, #1
 801e7de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801e7e2:	e070      	b.n	801e8c6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801e7e4:	68bb      	ldr	r3, [r7, #8]
 801e7e6:	099b      	lsrs	r3, r3, #6
 801e7e8:	b2db      	uxtb	r3, r3
 801e7ea:	f003 0303 	and.w	r3, r3, #3
 801e7ee:	b2da      	uxtb	r2, r3
 801e7f0:	683b      	ldr	r3, [r7, #0]
 801e7f2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 801e7f4:	68bb      	ldr	r3, [r7, #8]
 801e7f6:	095b      	lsrs	r3, r3, #5
 801e7f8:	b2db      	uxtb	r3, r3
 801e7fa:	f003 0301 	and.w	r3, r3, #1
 801e7fe:	b2da      	uxtb	r2, r3
 801e800:	683b      	ldr	r3, [r7, #0]
 801e802:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801e804:	68bb      	ldr	r3, [r7, #8]
 801e806:	0a1b      	lsrs	r3, r3, #8
 801e808:	b29b      	uxth	r3, r3
 801e80a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801e80e:	b29a      	uxth	r2, r3
 801e810:	68bb      	ldr	r3, [r7, #8]
 801e812:	0e1b      	lsrs	r3, r3, #24
 801e814:	b29b      	uxth	r3, r3
 801e816:	4313      	orrs	r3, r2
 801e818:	b29a      	uxth	r2, r3
 801e81a:	683b      	ldr	r3, [r7, #0]
 801e81c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801e81e:	68fb      	ldr	r3, [r7, #12]
 801e820:	061a      	lsls	r2, r3, #24
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	021b      	lsls	r3, r3, #8
 801e826:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801e82a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801e82c:	68fb      	ldr	r3, [r7, #12]
 801e82e:	0a1b      	lsrs	r3, r3, #8
 801e830:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801e834:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801e836:	68fb      	ldr	r3, [r7, #12]
 801e838:	0e1b      	lsrs	r3, r3, #24
 801e83a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801e83c:	683b      	ldr	r3, [r7, #0]
 801e83e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 801e840:	693b      	ldr	r3, [r7, #16]
 801e842:	b2da      	uxtb	r2, r3
 801e844:	683b      	ldr	r3, [r7, #0]
 801e846:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 801e848:	693b      	ldr	r3, [r7, #16]
 801e84a:	0a1b      	lsrs	r3, r3, #8
 801e84c:	b2da      	uxtb	r2, r3
 801e84e:	683b      	ldr	r3, [r7, #0]
 801e850:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801e852:	693b      	ldr	r3, [r7, #16]
 801e854:	0d1b      	lsrs	r3, r3, #20
 801e856:	b2db      	uxtb	r3, r3
 801e858:	f003 030f 	and.w	r3, r3, #15
 801e85c:	b2da      	uxtb	r2, r3
 801e85e:	683b      	ldr	r3, [r7, #0]
 801e860:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801e862:	693b      	ldr	r3, [r7, #16]
 801e864:	0c1b      	lsrs	r3, r3, #16
 801e866:	b29b      	uxth	r3, r3
 801e868:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801e86c:	b29a      	uxth	r2, r3
 801e86e:	697b      	ldr	r3, [r7, #20]
 801e870:	b29b      	uxth	r3, r3
 801e872:	b2db      	uxtb	r3, r3
 801e874:	b29b      	uxth	r3, r3
 801e876:	4313      	orrs	r3, r2
 801e878:	b29a      	uxth	r2, r3
 801e87a:	683b      	ldr	r3, [r7, #0]
 801e87c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801e87e:	697b      	ldr	r3, [r7, #20]
 801e880:	0a9b      	lsrs	r3, r3, #10
 801e882:	b2db      	uxtb	r3, r3
 801e884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e888:	b2da      	uxtb	r2, r3
 801e88a:	683b      	ldr	r3, [r7, #0]
 801e88c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801e88e:	697b      	ldr	r3, [r7, #20]
 801e890:	0a1b      	lsrs	r3, r3, #8
 801e892:	b2db      	uxtb	r3, r3
 801e894:	f003 0303 	and.w	r3, r3, #3
 801e898:	b2da      	uxtb	r2, r3
 801e89a:	683b      	ldr	r3, [r7, #0]
 801e89c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801e89e:	697b      	ldr	r3, [r7, #20]
 801e8a0:	091b      	lsrs	r3, r3, #4
 801e8a2:	b2db      	uxtb	r3, r3
 801e8a4:	f003 030f 	and.w	r3, r3, #15
 801e8a8:	b2da      	uxtb	r2, r3
 801e8aa:	683b      	ldr	r3, [r7, #0]
 801e8ac:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801e8ae:	697b      	ldr	r3, [r7, #20]
 801e8b0:	b2db      	uxtb	r3, r3
 801e8b2:	f003 030f 	and.w	r3, r3, #15
 801e8b6:	b2da      	uxtb	r2, r3
 801e8b8:	683b      	ldr	r3, [r7, #0]
 801e8ba:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 801e8bc:	69bb      	ldr	r3, [r7, #24]
 801e8be:	0e1b      	lsrs	r3, r3, #24
 801e8c0:	b2da      	uxtb	r2, r3
 801e8c2:	683b      	ldr	r3, [r7, #0]
 801e8c4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801e8c6:	687b      	ldr	r3, [r7, #4]
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e8ce:	4618      	mov	r0, r3
 801e8d0:	f003 fe28 	bl	8022524 <SDMMC_CmdBlockLength>
 801e8d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 801e8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d00d      	beq.n	801e8f8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	4a08      	ldr	r2, [pc, #32]	; (801e904 <HAL_SD_GetCardStatus+0x168>)
 801e8e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e8e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	2201      	movs	r2, #1
 801e8ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 801e8f2:	2301      	movs	r3, #1
 801e8f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 801e8f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 801e8fc:	4618      	mov	r0, r3
 801e8fe:	3750      	adds	r7, #80	; 0x50
 801e900:	46bd      	mov	sp, r7
 801e902:	bd80      	pop	{r7, pc}
 801e904:	1fe00fff 	.word	0x1fe00fff

0801e908 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 801e908:	b480      	push	{r7}
 801e90a:	b083      	sub	sp, #12
 801e90c:	af00      	add	r7, sp, #0
 801e90e:	6078      	str	r0, [r7, #4]
 801e910:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e916:	683b      	ldr	r3, [r7, #0]
 801e918:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e91e:	683b      	ldr	r3, [r7, #0]
 801e920:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e926:	683b      	ldr	r3, [r7, #0]
 801e928:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801e92e:	683b      	ldr	r3, [r7, #0]
 801e930:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e936:	683b      	ldr	r3, [r7, #0]
 801e938:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e93e:	683b      	ldr	r3, [r7, #0]
 801e940:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801e946:	683b      	ldr	r3, [r7, #0]
 801e948:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801e94e:	683b      	ldr	r3, [r7, #0]
 801e950:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801e952:	2300      	movs	r3, #0
}
 801e954:	4618      	mov	r0, r3
 801e956:	370c      	adds	r7, #12
 801e958:	46bd      	mov	sp, r7
 801e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e95e:	4770      	bx	lr

0801e960 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 801e960:	b5b0      	push	{r4, r5, r7, lr}
 801e962:	b08e      	sub	sp, #56	; 0x38
 801e964:	af04      	add	r7, sp, #16
 801e966:	6078      	str	r0, [r7, #4]
 801e968:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801e96a:	2300      	movs	r3, #0
 801e96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	2203      	movs	r2, #3
 801e974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e97c:	2b03      	cmp	r3, #3
 801e97e:	d02e      	beq.n	801e9de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 801e980:	683b      	ldr	r3, [r7, #0]
 801e982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e986:	d106      	bne.n	801e996 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e98c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	639a      	str	r2, [r3, #56]	; 0x38
 801e994:	e029      	b.n	801e9ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801e996:	683b      	ldr	r3, [r7, #0]
 801e998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e99c:	d10a      	bne.n	801e9b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801e99e:	6878      	ldr	r0, [r7, #4]
 801e9a0:	f000 fb66 	bl	801f070 <SD_WideBus_Enable>
 801e9a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801e9a6:	687b      	ldr	r3, [r7, #4]
 801e9a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e9aa:	6a3b      	ldr	r3, [r7, #32]
 801e9ac:	431a      	orrs	r2, r3
 801e9ae:	687b      	ldr	r3, [r7, #4]
 801e9b0:	639a      	str	r2, [r3, #56]	; 0x38
 801e9b2:	e01a      	b.n	801e9ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 801e9b4:	683b      	ldr	r3, [r7, #0]
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	d10a      	bne.n	801e9d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801e9ba:	6878      	ldr	r0, [r7, #4]
 801e9bc:	f000 fba3 	bl	801f106 <SD_WideBus_Disable>
 801e9c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e9c6:	6a3b      	ldr	r3, [r7, #32]
 801e9c8:	431a      	orrs	r2, r3
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	639a      	str	r2, [r3, #56]	; 0x38
 801e9ce:	e00c      	b.n	801e9ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e9d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	639a      	str	r2, [r3, #56]	; 0x38
 801e9dc:	e005      	b.n	801e9ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e9e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e9ee:	2b00      	cmp	r3, #0
 801e9f0:	d007      	beq.n	801ea02 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	4a2e      	ldr	r2, [pc, #184]	; (801eab0 <HAL_SD_ConfigWideBusOperation+0x150>)
 801e9f8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801e9fa:	2301      	movs	r3, #1
 801e9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ea00:	e034      	b.n	801ea6c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	685b      	ldr	r3, [r3, #4]
 801ea06:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	689b      	ldr	r3, [r3, #8]
 801ea0c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 801ea0e:	683b      	ldr	r3, [r7, #0]
 801ea10:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	691b      	ldr	r3, [r3, #16]
 801ea16:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	695b      	ldr	r3, [r3, #20]
 801ea1c:	2b03      	cmp	r3, #3
 801ea1e:	d903      	bls.n	801ea28 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	695b      	ldr	r3, [r3, #20]
 801ea24:	61bb      	str	r3, [r7, #24]
 801ea26:	e012      	b.n	801ea4e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ea2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ea30:	d103      	bne.n	801ea3a <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	695b      	ldr	r3, [r3, #20]
 801ea36:	61bb      	str	r3, [r7, #24]
 801ea38:	e009      	b.n	801ea4e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ea3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ea42:	d102      	bne.n	801ea4a <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 801ea44:	2302      	movs	r3, #2
 801ea46:	61bb      	str	r3, [r7, #24]
 801ea48:	e001      	b.n	801ea4e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 801ea4a:	2304      	movs	r3, #4
 801ea4c:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 801ea4e:	687b      	ldr	r3, [r7, #4]
 801ea50:	681d      	ldr	r5, [r3, #0]
 801ea52:	466c      	mov	r4, sp
 801ea54:	f107 0314 	add.w	r3, r7, #20
 801ea58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ea5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ea60:	f107 0308 	add.w	r3, r7, #8
 801ea64:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ea66:	4628      	mov	r0, r5
 801ea68:	f003 fc7e 	bl	8022368 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	681b      	ldr	r3, [r3, #0]
 801ea70:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ea74:	4618      	mov	r0, r3
 801ea76:	f003 fd55 	bl	8022524 <SDMMC_CmdBlockLength>
 801ea7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801ea7c:	6a3b      	ldr	r3, [r7, #32]
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d00c      	beq.n	801ea9c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	681b      	ldr	r3, [r3, #0]
 801ea86:	4a0a      	ldr	r2, [pc, #40]	; (801eab0 <HAL_SD_ConfigWideBusOperation+0x150>)
 801ea88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ea8e:	6a3b      	ldr	r3, [r7, #32]
 801ea90:	431a      	orrs	r2, r3
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801ea96:	2301      	movs	r3, #1
 801ea98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	2201      	movs	r2, #1
 801eaa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 801eaa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801eaa8:	4618      	mov	r0, r3
 801eaaa:	3728      	adds	r7, #40	; 0x28
 801eaac:	46bd      	mov	sp, r7
 801eaae:	bdb0      	pop	{r4, r5, r7, pc}
 801eab0:	1fe00fff 	.word	0x1fe00fff

0801eab4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801eab4:	b580      	push	{r7, lr}
 801eab6:	b086      	sub	sp, #24
 801eab8:	af00      	add	r7, sp, #0
 801eaba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801eabc:	2300      	movs	r3, #0
 801eabe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 801eac0:	f107 030c 	add.w	r3, r7, #12
 801eac4:	4619      	mov	r1, r3
 801eac6:	6878      	ldr	r0, [r7, #4]
 801eac8:	f000 faaa 	bl	801f020 <SD_SendStatus>
 801eacc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801eace:	697b      	ldr	r3, [r7, #20]
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	d005      	beq.n	801eae0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ead8:	697b      	ldr	r3, [r7, #20]
 801eada:	431a      	orrs	r2, r3
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801eae0:	68fb      	ldr	r3, [r7, #12]
 801eae2:	0a5b      	lsrs	r3, r3, #9
 801eae4:	f003 030f 	and.w	r3, r3, #15
 801eae8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801eaea:	693b      	ldr	r3, [r7, #16]
}
 801eaec:	4618      	mov	r0, r3
 801eaee:	3718      	adds	r7, #24
 801eaf0:	46bd      	mov	sp, r7
 801eaf2:	bd80      	pop	{r7, pc}

0801eaf4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801eaf4:	b590      	push	{r4, r7, lr}
 801eaf6:	b091      	sub	sp, #68	; 0x44
 801eaf8:	af00      	add	r7, sp, #0
 801eafa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 801eafc:	2301      	movs	r3, #1
 801eafe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	4618      	mov	r0, r3
 801eb06:	f003 fc88 	bl	802241a <SDMMC_GetPowerState>
 801eb0a:	4603      	mov	r3, r0
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d102      	bne.n	801eb16 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801eb10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801eb14:	e0a8      	b.n	801ec68 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eb1a:	2b03      	cmp	r3, #3
 801eb1c:	d02e      	beq.n	801eb7c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	4618      	mov	r0, r3
 801eb24:	f003 fed4 	bl	80228d0 <SDMMC_CmdSendCID>
 801eb28:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801eb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d001      	beq.n	801eb34 <SD_InitCard+0x40>
    {
      return errorstate;
 801eb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eb32:	e099      	b.n	801ec68 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	2100      	movs	r1, #0
 801eb3a:	4618      	mov	r0, r3
 801eb3c:	f003 fcb3 	bl	80224a6 <SDMMC_GetResponse>
 801eb40:	4602      	mov	r2, r0
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	2104      	movs	r1, #4
 801eb4c:	4618      	mov	r0, r3
 801eb4e:	f003 fcaa 	bl	80224a6 <SDMMC_GetResponse>
 801eb52:	4602      	mov	r2, r0
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	2108      	movs	r1, #8
 801eb5e:	4618      	mov	r0, r3
 801eb60:	f003 fca1 	bl	80224a6 <SDMMC_GetResponse>
 801eb64:	4602      	mov	r2, r0
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801eb6a:	687b      	ldr	r3, [r7, #4]
 801eb6c:	681b      	ldr	r3, [r3, #0]
 801eb6e:	210c      	movs	r1, #12
 801eb70:	4618      	mov	r0, r3
 801eb72:	f003 fc98 	bl	80224a6 <SDMMC_GetResponse>
 801eb76:	4602      	mov	r2, r0
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801eb7c:	687b      	ldr	r3, [r7, #4]
 801eb7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eb80:	2b03      	cmp	r3, #3
 801eb82:	d00d      	beq.n	801eba0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	681b      	ldr	r3, [r3, #0]
 801eb88:	f107 020e 	add.w	r2, r7, #14
 801eb8c:	4611      	mov	r1, r2
 801eb8e:	4618      	mov	r0, r3
 801eb90:	f003 fedd 	bl	802294e <SDMMC_CmdSetRelAdd>
 801eb94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801eb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d001      	beq.n	801eba0 <SD_InitCard+0xac>
    {
      return errorstate;
 801eb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eb9e:	e063      	b.n	801ec68 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eba4:	2b03      	cmp	r3, #3
 801eba6:	d036      	beq.n	801ec16 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801eba8:	89fb      	ldrh	r3, [r7, #14]
 801ebaa:	461a      	mov	r2, r3
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	681a      	ldr	r2, [r3, #0]
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ebb8:	041b      	lsls	r3, r3, #16
 801ebba:	4619      	mov	r1, r3
 801ebbc:	4610      	mov	r0, r2
 801ebbe:	f003 fea6 	bl	802290e <SDMMC_CmdSendCSD>
 801ebc2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801ebc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d001      	beq.n	801ebce <SD_InitCard+0xda>
    {
      return errorstate;
 801ebca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ebcc:	e04c      	b.n	801ec68 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	681b      	ldr	r3, [r3, #0]
 801ebd2:	2100      	movs	r1, #0
 801ebd4:	4618      	mov	r0, r3
 801ebd6:	f003 fc66 	bl	80224a6 <SDMMC_GetResponse>
 801ebda:	4602      	mov	r2, r0
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	2104      	movs	r1, #4
 801ebe6:	4618      	mov	r0, r3
 801ebe8:	f003 fc5d 	bl	80224a6 <SDMMC_GetResponse>
 801ebec:	4602      	mov	r2, r0
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	2108      	movs	r1, #8
 801ebf8:	4618      	mov	r0, r3
 801ebfa:	f003 fc54 	bl	80224a6 <SDMMC_GetResponse>
 801ebfe:	4602      	mov	r2, r0
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	210c      	movs	r1, #12
 801ec0a:	4618      	mov	r0, r3
 801ec0c:	f003 fc4b 	bl	80224a6 <SDMMC_GetResponse>
 801ec10:	4602      	mov	r2, r0
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801ec16:	687b      	ldr	r3, [r7, #4]
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	2104      	movs	r1, #4
 801ec1c:	4618      	mov	r0, r3
 801ec1e:	f003 fc42 	bl	80224a6 <SDMMC_GetResponse>
 801ec22:	4603      	mov	r3, r0
 801ec24:	0d1a      	lsrs	r2, r3, #20
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801ec2a:	f107 0310 	add.w	r3, r7, #16
 801ec2e:	4619      	mov	r1, r3
 801ec30:	6878      	ldr	r0, [r7, #4]
 801ec32:	f7ff fc0f 	bl	801e454 <HAL_SD_GetCardCSD>
 801ec36:	4603      	mov	r3, r0
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	d002      	beq.n	801ec42 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801ec3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ec40:	e012      	b.n	801ec68 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	6819      	ldr	r1, [r3, #0]
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ec4a:	041b      	lsls	r3, r3, #16
 801ec4c:	f04f 0400 	mov.w	r4, #0
 801ec50:	461a      	mov	r2, r3
 801ec52:	4623      	mov	r3, r4
 801ec54:	4608      	mov	r0, r1
 801ec56:	f003 fd51 	bl	80226fc <SDMMC_CmdSelDesel>
 801ec5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 801ec5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec5e:	2b00      	cmp	r3, #0
 801ec60:	d001      	beq.n	801ec66 <SD_InitCard+0x172>
  {
    return errorstate;
 801ec62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec64:	e000      	b.n	801ec68 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801ec66:	2300      	movs	r3, #0
}
 801ec68:	4618      	mov	r0, r3
 801ec6a:	3744      	adds	r7, #68	; 0x44
 801ec6c:	46bd      	mov	sp, r7
 801ec6e:	bd90      	pop	{r4, r7, pc}

0801ec70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801ec70:	b580      	push	{r7, lr}
 801ec72:	b088      	sub	sp, #32
 801ec74:	af00      	add	r7, sp, #0
 801ec76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801ec78:	2300      	movs	r3, #0
 801ec7a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 801ec7c:	2300      	movs	r3, #0
 801ec7e:	61fb      	str	r3, [r7, #28]
 801ec80:	2300      	movs	r3, #0
 801ec82:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 801ec84:	f7f5 fd90 	bl	80147a8 <HAL_GetTick>
 801ec88:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	4618      	mov	r0, r3
 801ec90:	f003 fd58 	bl	8022744 <SDMMC_CmdGoIdleState>
 801ec94:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 801ec96:	693b      	ldr	r3, [r7, #16]
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d001      	beq.n	801eca0 <SD_PowerON+0x30>
  {
    return errorstate;
 801ec9c:	693b      	ldr	r3, [r7, #16]
 801ec9e:	e0e9      	b.n	801ee74 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	4618      	mov	r0, r3
 801eca6:	f003 fd6b 	bl	8022780 <SDMMC_CmdOperCond>
 801ecaa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 801ecac:	693b      	ldr	r3, [r7, #16]
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d00d      	beq.n	801ecce <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	2200      	movs	r2, #0
 801ecb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	4618      	mov	r0, r3
 801ecbe:	f003 fd41 	bl	8022744 <SDMMC_CmdGoIdleState>
 801ecc2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801ecc4:	693b      	ldr	r3, [r7, #16]
 801ecc6:	2b00      	cmp	r3, #0
 801ecc8:	d004      	beq.n	801ecd4 <SD_PowerON+0x64>
    {
      return errorstate;
 801ecca:	693b      	ldr	r3, [r7, #16]
 801eccc:	e0d2      	b.n	801ee74 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	2201      	movs	r2, #1
 801ecd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecd8:	2b01      	cmp	r3, #1
 801ecda:	d137      	bne.n	801ed4c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	2100      	movs	r1, #0
 801ece2:	4618      	mov	r0, r3
 801ece4:	f003 fd6c 	bl	80227c0 <SDMMC_CmdAppCommand>
 801ece8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801ecea:	693b      	ldr	r3, [r7, #16]
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	d02d      	beq.n	801ed4c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801ecf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ecf4:	e0be      	b.n	801ee74 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	2100      	movs	r1, #0
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	f003 fd5f 	bl	80227c0 <SDMMC_CmdAppCommand>
 801ed02:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801ed04:	693b      	ldr	r3, [r7, #16]
 801ed06:	2b00      	cmp	r3, #0
 801ed08:	d001      	beq.n	801ed0e <SD_PowerON+0x9e>
    {
      return errorstate;
 801ed0a:	693b      	ldr	r3, [r7, #16]
 801ed0c:	e0b2      	b.n	801ee74 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	495a      	ldr	r1, [pc, #360]	; (801ee7c <SD_PowerON+0x20c>)
 801ed14:	4618      	mov	r0, r3
 801ed16:	f003 fd76 	bl	8022806 <SDMMC_CmdAppOperCommand>
 801ed1a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801ed1c:	693b      	ldr	r3, [r7, #16]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d002      	beq.n	801ed28 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801ed22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ed26:	e0a5      	b.n	801ee74 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	681b      	ldr	r3, [r3, #0]
 801ed2c:	2100      	movs	r1, #0
 801ed2e:	4618      	mov	r0, r3
 801ed30:	f003 fbb9 	bl	80224a6 <SDMMC_GetResponse>
 801ed34:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801ed36:	69fb      	ldr	r3, [r7, #28]
 801ed38:	0fdb      	lsrs	r3, r3, #31
 801ed3a:	2b01      	cmp	r3, #1
 801ed3c:	d101      	bne.n	801ed42 <SD_PowerON+0xd2>
 801ed3e:	2301      	movs	r3, #1
 801ed40:	e000      	b.n	801ed44 <SD_PowerON+0xd4>
 801ed42:	2300      	movs	r3, #0
 801ed44:	61bb      	str	r3, [r7, #24]

    count++;
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	3301      	adds	r3, #1
 801ed4a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ed52:	4293      	cmp	r3, r2
 801ed54:	d802      	bhi.n	801ed5c <SD_PowerON+0xec>
 801ed56:	69bb      	ldr	r3, [r7, #24]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d0cc      	beq.n	801ecf6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801ed5c:	68fb      	ldr	r3, [r7, #12]
 801ed5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ed62:	4293      	cmp	r3, r2
 801ed64:	d902      	bls.n	801ed6c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801ed66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ed6a:	e083      	b.n	801ee74 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801ed6c:	69fb      	ldr	r3, [r7, #28]
 801ed6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801ed72:	2b00      	cmp	r3, #0
 801ed74:	d07d      	beq.n	801ee72 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801ed76:	687b      	ldr	r3, [r7, #4]
 801ed78:	2201      	movs	r2, #1
 801ed7a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	699b      	ldr	r3, [r3, #24]
 801ed80:	2b02      	cmp	r3, #2
 801ed82:	d176      	bne.n	801ee72 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 801ed84:	69fb      	ldr	r3, [r7, #28]
 801ed86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d071      	beq.n	801ee72 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ed94:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	681a      	ldr	r2, [r3, #0]
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	681b      	ldr	r3, [r3, #0]
 801eda0:	f042 0208 	orr.w	r2, r2, #8
 801eda4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	681b      	ldr	r3, [r3, #0]
 801edaa:	4618      	mov	r0, r3
 801edac:	f003 fe36 	bl	8022a1c <SDMMC_CmdVoltageSwitch>
 801edb0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 801edb2:	693b      	ldr	r3, [r7, #16]
 801edb4:	2b00      	cmp	r3, #0
 801edb6:	d00c      	beq.n	801edd2 <SD_PowerON+0x162>
        {
          return errorstate;
 801edb8:	693b      	ldr	r3, [r7, #16]
 801edba:	e05b      	b.n	801ee74 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801edbc:	f7f5 fcf4 	bl	80147a8 <HAL_GetTick>
 801edc0:	4602      	mov	r2, r0
 801edc2:	697b      	ldr	r3, [r7, #20]
 801edc4:	1ad3      	subs	r3, r2, r3
 801edc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801edca:	d102      	bne.n	801edd2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 801edcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801edd0:	e050      	b.n	801ee74 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801edd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801eddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801ede0:	d1ec      	bne.n	801edbc <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	681b      	ldr	r3, [r3, #0]
 801ede6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801edea:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801edf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801edf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801edfa:	d002      	beq.n	801ee02 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 801edfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ee00:	e038      	b.n	801ee74 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 801ee02:	2001      	movs	r0, #1
 801ee04:	f7ff fb1a 	bl	801e43c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	681b      	ldr	r3, [r3, #0]
 801ee0c:	681a      	ldr	r2, [r3, #0]
 801ee0e:	687b      	ldr	r3, [r7, #4]
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	f042 0204 	orr.w	r2, r2, #4
 801ee16:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801ee18:	e00a      	b.n	801ee30 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801ee1a:	f7f5 fcc5 	bl	80147a8 <HAL_GetTick>
 801ee1e:	4602      	mov	r2, r0
 801ee20:	697b      	ldr	r3, [r7, #20]
 801ee22:	1ad3      	subs	r3, r2, r3
 801ee24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee28:	d102      	bne.n	801ee30 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 801ee2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ee2e:	e021      	b.n	801ee74 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ee36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ee3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801ee3e:	d1ec      	bne.n	801ee1a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	681b      	ldr	r3, [r3, #0]
 801ee44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801ee48:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ee50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ee54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ee58:	d102      	bne.n	801ee60 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801ee5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ee5e:	e009      	b.n	801ee74 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	2213      	movs	r2, #19
 801ee66:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	f04f 32ff 	mov.w	r2, #4294967295
 801ee70:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801ee72:	2300      	movs	r3, #0
}
 801ee74:	4618      	mov	r0, r3
 801ee76:	3720      	adds	r7, #32
 801ee78:	46bd      	mov	sp, r7
 801ee7a:	bd80      	pop	{r7, pc}
 801ee7c:	c1100000 	.word	0xc1100000

0801ee80 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801ee80:	b580      	push	{r7, lr}
 801ee82:	b08c      	sub	sp, #48	; 0x30
 801ee84:	af00      	add	r7, sp, #0
 801ee86:	6078      	str	r0, [r7, #4]
 801ee88:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801ee8a:	f7f5 fc8d 	bl	80147a8 <HAL_GetTick>
 801ee8e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801ee90:	683b      	ldr	r3, [r7, #0]
 801ee92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	2100      	movs	r1, #0
 801ee9a:	4618      	mov	r0, r3
 801ee9c:	f003 fb03 	bl	80224a6 <SDMMC_GetResponse>
 801eea0:	4603      	mov	r3, r0
 801eea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801eea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801eeaa:	d102      	bne.n	801eeb2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801eeac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801eeb0:	e0b0      	b.n	801f014 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	2140      	movs	r1, #64	; 0x40
 801eeb8:	4618      	mov	r0, r3
 801eeba:	f003 fb33 	bl	8022524 <SDMMC_CmdBlockLength>
 801eebe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801eec0:	6a3b      	ldr	r3, [r7, #32]
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d005      	beq.n	801eed2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801eece:	6a3b      	ldr	r3, [r7, #32]
 801eed0:	e0a0      	b.n	801f014 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801eed2:	687b      	ldr	r3, [r7, #4]
 801eed4:	681a      	ldr	r2, [r3, #0]
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801eeda:	041b      	lsls	r3, r3, #16
 801eedc:	4619      	mov	r1, r3
 801eede:	4610      	mov	r0, r2
 801eee0:	f003 fc6e 	bl	80227c0 <SDMMC_CmdAppCommand>
 801eee4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801eee6:	6a3b      	ldr	r3, [r7, #32]
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	d005      	beq.n	801eef8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801eef4:	6a3b      	ldr	r3, [r7, #32]
 801eef6:	e08d      	b.n	801f014 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801eef8:	f04f 33ff 	mov.w	r3, #4294967295
 801eefc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801eefe:	2340      	movs	r3, #64	; 0x40
 801ef00:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801ef02:	2360      	movs	r3, #96	; 0x60
 801ef04:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801ef06:	2302      	movs	r3, #2
 801ef08:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801ef0a:	2300      	movs	r3, #0
 801ef0c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801ef0e:	2301      	movs	r3, #1
 801ef10:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	f107 0208 	add.w	r2, r7, #8
 801ef1a:	4611      	mov	r1, r2
 801ef1c:	4618      	mov	r0, r3
 801ef1e:	f003 fad5 	bl	80224cc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	4618      	mov	r0, r3
 801ef28:	f003 fd56 	bl	80229d8 <SDMMC_CmdStatusRegister>
 801ef2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801ef2e:	6a3b      	ldr	r3, [r7, #32]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d02b      	beq.n	801ef8c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801ef3c:	6a3b      	ldr	r3, [r7, #32]
 801ef3e:	e069      	b.n	801f014 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ef46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ef4a:	2b00      	cmp	r3, #0
 801ef4c:	d013      	beq.n	801ef76 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 801ef4e:	2300      	movs	r3, #0
 801ef50:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ef52:	e00d      	b.n	801ef70 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	681b      	ldr	r3, [r3, #0]
 801ef58:	4618      	mov	r0, r3
 801ef5a:	f003 fa2f 	bl	80223bc <SDMMC_ReadFIFO>
 801ef5e:	4602      	mov	r2, r0
 801ef60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef62:	601a      	str	r2, [r3, #0]
        pData++;
 801ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef66:	3304      	adds	r3, #4
 801ef68:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 801ef6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef6c:	3301      	adds	r3, #1
 801ef6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef72:	2b07      	cmp	r3, #7
 801ef74:	d9ee      	bls.n	801ef54 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801ef76:	f7f5 fc17 	bl	80147a8 <HAL_GetTick>
 801ef7a:	4602      	mov	r2, r0
 801ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef7e:	1ad3      	subs	r3, r2, r3
 801ef80:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef84:	d102      	bne.n	801ef8c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801ef86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ef8a:	e043      	b.n	801f014 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ef92:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d0d2      	beq.n	801ef40 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efa0:	f003 0308 	and.w	r3, r3, #8
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d001      	beq.n	801efac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801efa8:	2308      	movs	r3, #8
 801efaa:	e033      	b.n	801f014 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efb2:	f003 0302 	and.w	r3, r3, #2
 801efb6:	2b00      	cmp	r3, #0
 801efb8:	d001      	beq.n	801efbe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801efba:	2302      	movs	r3, #2
 801efbc:	e02a      	b.n	801f014 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	681b      	ldr	r3, [r3, #0]
 801efc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efc4:	f003 0320 	and.w	r3, r3, #32
 801efc8:	2b00      	cmp	r3, #0
 801efca:	d017      	beq.n	801effc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 801efcc:	2320      	movs	r3, #32
 801efce:	e021      	b.n	801f014 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	4618      	mov	r0, r3
 801efd6:	f003 f9f1 	bl	80223bc <SDMMC_ReadFIFO>
 801efda:	4602      	mov	r2, r0
 801efdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801efde:	601a      	str	r2, [r3, #0]
    pData++;
 801efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801efe2:	3304      	adds	r3, #4
 801efe4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801efe6:	f7f5 fbdf 	bl	80147a8 <HAL_GetTick>
 801efea:	4602      	mov	r2, r0
 801efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efee:	1ad3      	subs	r3, r2, r3
 801eff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eff4:	d102      	bne.n	801effc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801eff6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801effa:	e00b      	b.n	801f014 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801f006:	2b00      	cmp	r3, #0
 801f008:	d1e2      	bne.n	801efd0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	681b      	ldr	r3, [r3, #0]
 801f00e:	4a03      	ldr	r2, [pc, #12]	; (801f01c <SD_SendSDStatus+0x19c>)
 801f010:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 801f012:	2300      	movs	r3, #0
}
 801f014:	4618      	mov	r0, r3
 801f016:	3730      	adds	r7, #48	; 0x30
 801f018:	46bd      	mov	sp, r7
 801f01a:	bd80      	pop	{r7, pc}
 801f01c:	18000f3a 	.word	0x18000f3a

0801f020 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b084      	sub	sp, #16
 801f024:	af00      	add	r7, sp, #0
 801f026:	6078      	str	r0, [r7, #4]
 801f028:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801f02a:	683b      	ldr	r3, [r7, #0]
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d102      	bne.n	801f036 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801f030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801f034:	e018      	b.n	801f068 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	681a      	ldr	r2, [r3, #0]
 801f03a:	687b      	ldr	r3, [r7, #4]
 801f03c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f03e:	041b      	lsls	r3, r3, #16
 801f040:	4619      	mov	r1, r3
 801f042:	4610      	mov	r0, r2
 801f044:	f003 fca5 	bl	8022992 <SDMMC_CmdSendStatus>
 801f048:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f04a:	68fb      	ldr	r3, [r7, #12]
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	d001      	beq.n	801f054 <SD_SendStatus+0x34>
  {
    return errorstate;
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	e009      	b.n	801f068 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	2100      	movs	r1, #0
 801f05a:	4618      	mov	r0, r3
 801f05c:	f003 fa23 	bl	80224a6 <SDMMC_GetResponse>
 801f060:	4602      	mov	r2, r0
 801f062:	683b      	ldr	r3, [r7, #0]
 801f064:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801f066:	2300      	movs	r3, #0
}
 801f068:	4618      	mov	r0, r3
 801f06a:	3710      	adds	r7, #16
 801f06c:	46bd      	mov	sp, r7
 801f06e:	bd80      	pop	{r7, pc}

0801f070 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801f070:	b580      	push	{r7, lr}
 801f072:	b086      	sub	sp, #24
 801f074:	af00      	add	r7, sp, #0
 801f076:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801f078:	2300      	movs	r3, #0
 801f07a:	60fb      	str	r3, [r7, #12]
 801f07c:	2300      	movs	r3, #0
 801f07e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	2100      	movs	r1, #0
 801f086:	4618      	mov	r0, r3
 801f088:	f003 fa0d 	bl	80224a6 <SDMMC_GetResponse>
 801f08c:	4603      	mov	r3, r0
 801f08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801f096:	d102      	bne.n	801f09e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801f098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f09c:	e02f      	b.n	801f0fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801f09e:	f107 030c 	add.w	r3, r7, #12
 801f0a2:	4619      	mov	r1, r3
 801f0a4:	6878      	ldr	r0, [r7, #4]
 801f0a6:	f000 f879 	bl	801f19c <SD_FindSCR>
 801f0aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f0ac:	697b      	ldr	r3, [r7, #20]
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	d001      	beq.n	801f0b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801f0b2:	697b      	ldr	r3, [r7, #20]
 801f0b4:	e023      	b.n	801f0fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801f0b6:	693b      	ldr	r3, [r7, #16]
 801f0b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d01c      	beq.n	801f0fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	681a      	ldr	r2, [r3, #0]
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f0c8:	041b      	lsls	r3, r3, #16
 801f0ca:	4619      	mov	r1, r3
 801f0cc:	4610      	mov	r0, r2
 801f0ce:	f003 fb77 	bl	80227c0 <SDMMC_CmdAppCommand>
 801f0d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f0d4:	697b      	ldr	r3, [r7, #20]
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	d001      	beq.n	801f0de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801f0da:	697b      	ldr	r3, [r7, #20]
 801f0dc:	e00f      	b.n	801f0fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	2102      	movs	r1, #2
 801f0e4:	4618      	mov	r0, r3
 801f0e6:	f003 fbae 	bl	8022846 <SDMMC_CmdBusWidth>
 801f0ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f0ec:	697b      	ldr	r3, [r7, #20]
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d001      	beq.n	801f0f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801f0f2:	697b      	ldr	r3, [r7, #20]
 801f0f4:	e003      	b.n	801f0fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801f0f6:	2300      	movs	r3, #0
 801f0f8:	e001      	b.n	801f0fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801f0fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801f0fe:	4618      	mov	r0, r3
 801f100:	3718      	adds	r7, #24
 801f102:	46bd      	mov	sp, r7
 801f104:	bd80      	pop	{r7, pc}

0801f106 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801f106:	b580      	push	{r7, lr}
 801f108:	b086      	sub	sp, #24
 801f10a:	af00      	add	r7, sp, #0
 801f10c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801f10e:	2300      	movs	r3, #0
 801f110:	60fb      	str	r3, [r7, #12]
 801f112:	2300      	movs	r3, #0
 801f114:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	2100      	movs	r1, #0
 801f11c:	4618      	mov	r0, r3
 801f11e:	f003 f9c2 	bl	80224a6 <SDMMC_GetResponse>
 801f122:	4603      	mov	r3, r0
 801f124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801f12c:	d102      	bne.n	801f134 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801f12e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f132:	e02f      	b.n	801f194 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801f134:	f107 030c 	add.w	r3, r7, #12
 801f138:	4619      	mov	r1, r3
 801f13a:	6878      	ldr	r0, [r7, #4]
 801f13c:	f000 f82e 	bl	801f19c <SD_FindSCR>
 801f140:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f142:	697b      	ldr	r3, [r7, #20]
 801f144:	2b00      	cmp	r3, #0
 801f146:	d001      	beq.n	801f14c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801f148:	697b      	ldr	r3, [r7, #20]
 801f14a:	e023      	b.n	801f194 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801f14c:	693b      	ldr	r3, [r7, #16]
 801f14e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801f152:	2b00      	cmp	r3, #0
 801f154:	d01c      	beq.n	801f190 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	681a      	ldr	r2, [r3, #0]
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f15e:	041b      	lsls	r3, r3, #16
 801f160:	4619      	mov	r1, r3
 801f162:	4610      	mov	r0, r2
 801f164:	f003 fb2c 	bl	80227c0 <SDMMC_CmdAppCommand>
 801f168:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f16a:	697b      	ldr	r3, [r7, #20]
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	d001      	beq.n	801f174 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801f170:	697b      	ldr	r3, [r7, #20]
 801f172:	e00f      	b.n	801f194 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	681b      	ldr	r3, [r3, #0]
 801f178:	2100      	movs	r1, #0
 801f17a:	4618      	mov	r0, r3
 801f17c:	f003 fb63 	bl	8022846 <SDMMC_CmdBusWidth>
 801f180:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f182:	697b      	ldr	r3, [r7, #20]
 801f184:	2b00      	cmp	r3, #0
 801f186:	d001      	beq.n	801f18c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801f188:	697b      	ldr	r3, [r7, #20]
 801f18a:	e003      	b.n	801f194 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801f18c:	2300      	movs	r3, #0
 801f18e:	e001      	b.n	801f194 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801f190:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801f194:	4618      	mov	r0, r3
 801f196:	3718      	adds	r7, #24
 801f198:	46bd      	mov	sp, r7
 801f19a:	bd80      	pop	{r7, pc}

0801f19c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801f19c:	b580      	push	{r7, lr}
 801f19e:	b08e      	sub	sp, #56	; 0x38
 801f1a0:	af00      	add	r7, sp, #0
 801f1a2:	6078      	str	r0, [r7, #4]
 801f1a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801f1a6:	f7f5 faff 	bl	80147a8 <HAL_GetTick>
 801f1aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 801f1ac:	2300      	movs	r3, #0
 801f1ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801f1b0:	2300      	movs	r3, #0
 801f1b2:	60bb      	str	r3, [r7, #8]
 801f1b4:	2300      	movs	r3, #0
 801f1b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801f1b8:	683b      	ldr	r3, [r7, #0]
 801f1ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	2108      	movs	r1, #8
 801f1c2:	4618      	mov	r0, r3
 801f1c4:	f003 f9ae 	bl	8022524 <SDMMC_CmdBlockLength>
 801f1c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801f1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d001      	beq.n	801f1d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 801f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1d2:	e0ad      	b.n	801f330 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	681a      	ldr	r2, [r3, #0]
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f1dc:	041b      	lsls	r3, r3, #16
 801f1de:	4619      	mov	r1, r3
 801f1e0:	4610      	mov	r0, r2
 801f1e2:	f003 faed 	bl	80227c0 <SDMMC_CmdAppCommand>
 801f1e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	d001      	beq.n	801f1f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 801f1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1f0:	e09e      	b.n	801f330 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801f1f2:	f04f 33ff 	mov.w	r3, #4294967295
 801f1f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801f1f8:	2308      	movs	r3, #8
 801f1fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 801f1fc:	2330      	movs	r3, #48	; 0x30
 801f1fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801f200:	2302      	movs	r3, #2
 801f202:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801f204:	2300      	movs	r3, #0
 801f206:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801f208:	2301      	movs	r3, #1
 801f20a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	f107 0210 	add.w	r2, r7, #16
 801f214:	4611      	mov	r1, r2
 801f216:	4618      	mov	r0, r3
 801f218:	f003 f958 	bl	80224cc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	4618      	mov	r0, r3
 801f222:	f003 fb33 	bl	802288c <SDMMC_CmdSendSCR>
 801f226:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801f228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d027      	beq.n	801f27e <SD_FindSCR+0xe2>
  {
    return errorstate;
 801f22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f230:	e07e      	b.n	801f330 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d113      	bne.n	801f268 <SD_FindSCR+0xcc>
 801f240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f242:	2b00      	cmp	r3, #0
 801f244:	d110      	bne.n	801f268 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	681b      	ldr	r3, [r3, #0]
 801f24a:	4618      	mov	r0, r3
 801f24c:	f003 f8b6 	bl	80223bc <SDMMC_ReadFIFO>
 801f250:	4603      	mov	r3, r0
 801f252:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	4618      	mov	r0, r3
 801f25a:	f003 f8af 	bl	80223bc <SDMMC_ReadFIFO>
 801f25e:	4603      	mov	r3, r0
 801f260:	60fb      	str	r3, [r7, #12]
      index++;
 801f262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f264:	3301      	adds	r3, #1
 801f266:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801f268:	f7f5 fa9e 	bl	80147a8 <HAL_GetTick>
 801f26c:	4602      	mov	r2, r0
 801f26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f270:	1ad3      	subs	r3, r2, r3
 801f272:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f276:	d102      	bne.n	801f27e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801f278:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801f27c:	e058      	b.n	801f330 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	681b      	ldr	r3, [r3, #0]
 801f282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801f284:	f240 532a 	movw	r3, #1322	; 0x52a
 801f288:	4013      	ands	r3, r2
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d0d1      	beq.n	801f232 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	681b      	ldr	r3, [r3, #0]
 801f292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f294:	f003 0308 	and.w	r3, r3, #8
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d005      	beq.n	801f2a8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	2208      	movs	r2, #8
 801f2a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801f2a4:	2308      	movs	r3, #8
 801f2a6:	e043      	b.n	801f330 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	681b      	ldr	r3, [r3, #0]
 801f2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f2ae:	f003 0302 	and.w	r3, r3, #2
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	d005      	beq.n	801f2c2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801f2b6:	687b      	ldr	r3, [r7, #4]
 801f2b8:	681b      	ldr	r3, [r3, #0]
 801f2ba:	2202      	movs	r2, #2
 801f2bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801f2be:	2302      	movs	r3, #2
 801f2c0:	e036      	b.n	801f330 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	681b      	ldr	r3, [r3, #0]
 801f2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f2c8:	f003 0320 	and.w	r3, r3, #32
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	d005      	beq.n	801f2dc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	681b      	ldr	r3, [r3, #0]
 801f2d4:	2220      	movs	r2, #32
 801f2d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801f2d8:	2320      	movs	r3, #32
 801f2da:	e029      	b.n	801f330 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	4a15      	ldr	r2, [pc, #84]	; (801f338 <SD_FindSCR+0x19c>)
 801f2e2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	061a      	lsls	r2, r3, #24
 801f2e8:	68fb      	ldr	r3, [r7, #12]
 801f2ea:	021b      	lsls	r3, r3, #8
 801f2ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801f2f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801f2f2:	68fb      	ldr	r3, [r7, #12]
 801f2f4:	0a1b      	lsrs	r3, r3, #8
 801f2f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801f2fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801f2fc:	68fb      	ldr	r3, [r7, #12]
 801f2fe:	0e1b      	lsrs	r3, r3, #24
 801f300:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801f302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f304:	601a      	str	r2, [r3, #0]
    scr++;
 801f306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f308:	3304      	adds	r3, #4
 801f30a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801f30c:	68bb      	ldr	r3, [r7, #8]
 801f30e:	061a      	lsls	r2, r3, #24
 801f310:	68bb      	ldr	r3, [r7, #8]
 801f312:	021b      	lsls	r3, r3, #8
 801f314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801f318:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801f31a:	68bb      	ldr	r3, [r7, #8]
 801f31c:	0a1b      	lsrs	r3, r3, #8
 801f31e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801f322:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	0e1b      	lsrs	r3, r3, #24
 801f328:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f32c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801f32e:	2300      	movs	r3, #0
}
 801f330:	4618      	mov	r0, r3
 801f332:	3738      	adds	r7, #56	; 0x38
 801f334:	46bd      	mov	sp, r7
 801f336:	bd80      	pop	{r7, pc}
 801f338:	18000f3a 	.word	0x18000f3a

0801f33c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 801f33c:	b580      	push	{r7, lr}
 801f33e:	b086      	sub	sp, #24
 801f340:	af00      	add	r7, sp, #0
 801f342:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f348:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f34e:	2b1f      	cmp	r3, #31
 801f350:	d936      	bls.n	801f3c0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 801f352:	2300      	movs	r3, #0
 801f354:	617b      	str	r3, [r7, #20]
 801f356:	e027      	b.n	801f3a8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	681b      	ldr	r3, [r3, #0]
 801f35c:	4618      	mov	r0, r3
 801f35e:	f003 f82d 	bl	80223bc <SDMMC_ReadFIFO>
 801f362:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 801f364:	68fb      	ldr	r3, [r7, #12]
 801f366:	b2da      	uxtb	r2, r3
 801f368:	693b      	ldr	r3, [r7, #16]
 801f36a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f36c:	693b      	ldr	r3, [r7, #16]
 801f36e:	3301      	adds	r3, #1
 801f370:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801f372:	68fb      	ldr	r3, [r7, #12]
 801f374:	0a1b      	lsrs	r3, r3, #8
 801f376:	b2da      	uxtb	r2, r3
 801f378:	693b      	ldr	r3, [r7, #16]
 801f37a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f37c:	693b      	ldr	r3, [r7, #16]
 801f37e:	3301      	adds	r3, #1
 801f380:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801f382:	68fb      	ldr	r3, [r7, #12]
 801f384:	0c1b      	lsrs	r3, r3, #16
 801f386:	b2da      	uxtb	r2, r3
 801f388:	693b      	ldr	r3, [r7, #16]
 801f38a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f38c:	693b      	ldr	r3, [r7, #16]
 801f38e:	3301      	adds	r3, #1
 801f390:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801f392:	68fb      	ldr	r3, [r7, #12]
 801f394:	0e1b      	lsrs	r3, r3, #24
 801f396:	b2da      	uxtb	r2, r3
 801f398:	693b      	ldr	r3, [r7, #16]
 801f39a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f39c:	693b      	ldr	r3, [r7, #16]
 801f39e:	3301      	adds	r3, #1
 801f3a0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801f3a2:	697b      	ldr	r3, [r7, #20]
 801f3a4:	3301      	adds	r3, #1
 801f3a6:	617b      	str	r3, [r7, #20]
 801f3a8:	697b      	ldr	r3, [r7, #20]
 801f3aa:	2b07      	cmp	r3, #7
 801f3ac:	d9d4      	bls.n	801f358 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	693a      	ldr	r2, [r7, #16]
 801f3b2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 801f3b4:	687b      	ldr	r3, [r7, #4]
 801f3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f3b8:	f1a3 0220 	sub.w	r2, r3, #32
 801f3bc:	687b      	ldr	r3, [r7, #4]
 801f3be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 801f3c0:	bf00      	nop
 801f3c2:	3718      	adds	r7, #24
 801f3c4:	46bd      	mov	sp, r7
 801f3c6:	bd80      	pop	{r7, pc}

0801f3c8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801f3c8:	b580      	push	{r7, lr}
 801f3ca:	b086      	sub	sp, #24
 801f3cc:	af00      	add	r7, sp, #0
 801f3ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	6a1b      	ldr	r3, [r3, #32]
 801f3d4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3da:	2b1f      	cmp	r3, #31
 801f3dc:	d93a      	bls.n	801f454 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 801f3de:	2300      	movs	r3, #0
 801f3e0:	617b      	str	r3, [r7, #20]
 801f3e2:	e02b      	b.n	801f43c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 801f3e4:	693b      	ldr	r3, [r7, #16]
 801f3e6:	781b      	ldrb	r3, [r3, #0]
 801f3e8:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f3ea:	693b      	ldr	r3, [r7, #16]
 801f3ec:	3301      	adds	r3, #1
 801f3ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801f3f0:	693b      	ldr	r3, [r7, #16]
 801f3f2:	781b      	ldrb	r3, [r3, #0]
 801f3f4:	021a      	lsls	r2, r3, #8
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	4313      	orrs	r3, r2
 801f3fa:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f3fc:	693b      	ldr	r3, [r7, #16]
 801f3fe:	3301      	adds	r3, #1
 801f400:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801f402:	693b      	ldr	r3, [r7, #16]
 801f404:	781b      	ldrb	r3, [r3, #0]
 801f406:	041a      	lsls	r2, r3, #16
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	4313      	orrs	r3, r2
 801f40c:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f40e:	693b      	ldr	r3, [r7, #16]
 801f410:	3301      	adds	r3, #1
 801f412:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801f414:	693b      	ldr	r3, [r7, #16]
 801f416:	781b      	ldrb	r3, [r3, #0]
 801f418:	061a      	lsls	r2, r3, #24
 801f41a:	68fb      	ldr	r3, [r7, #12]
 801f41c:	4313      	orrs	r3, r2
 801f41e:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f420:	693b      	ldr	r3, [r7, #16]
 801f422:	3301      	adds	r3, #1
 801f424:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	f107 020c 	add.w	r2, r7, #12
 801f42e:	4611      	mov	r1, r2
 801f430:	4618      	mov	r0, r3
 801f432:	f002 ffd0 	bl	80223d6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 801f436:	697b      	ldr	r3, [r7, #20]
 801f438:	3301      	adds	r3, #1
 801f43a:	617b      	str	r3, [r7, #20]
 801f43c:	697b      	ldr	r3, [r7, #20]
 801f43e:	2b07      	cmp	r3, #7
 801f440:	d9d0      	bls.n	801f3e4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	693a      	ldr	r2, [r7, #16]
 801f446:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f44c:	f1a3 0220 	sub.w	r2, r3, #32
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 801f454:	bf00      	nop
 801f456:	3718      	adds	r7, #24
 801f458:	46bd      	mov	sp, r7
 801f45a:	bd80      	pop	{r7, pc}

0801f45c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801f45c:	b480      	push	{r7}
 801f45e:	b083      	sub	sp, #12
 801f460:	af00      	add	r7, sp, #0
 801f462:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801f464:	bf00      	nop
 801f466:	370c      	adds	r7, #12
 801f468:	46bd      	mov	sp, r7
 801f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f46e:	4770      	bx	lr

0801f470 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801f470:	b480      	push	{r7}
 801f472:	b083      	sub	sp, #12
 801f474:	af00      	add	r7, sp, #0
 801f476:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801f478:	bf00      	nop
 801f47a:	370c      	adds	r7, #12
 801f47c:	46bd      	mov	sp, r7
 801f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f482:	4770      	bx	lr

0801f484 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801f484:	b480      	push	{r7}
 801f486:	b083      	sub	sp, #12
 801f488:	af00      	add	r7, sp, #0
 801f48a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801f48c:	bf00      	nop
 801f48e:	370c      	adds	r7, #12
 801f490:	46bd      	mov	sp, r7
 801f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f496:	4770      	bx	lr

0801f498 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801f498:	b480      	push	{r7}
 801f49a:	b083      	sub	sp, #12
 801f49c:	af00      	add	r7, sp, #0
 801f49e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801f4a0:	bf00      	nop
 801f4a2:	370c      	adds	r7, #12
 801f4a4:	46bd      	mov	sp, r7
 801f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4aa:	4770      	bx	lr

0801f4ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f4ac:	b580      	push	{r7, lr}
 801f4ae:	b082      	sub	sp, #8
 801f4b0:	af00      	add	r7, sp, #0
 801f4b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	d101      	bne.n	801f4be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f4ba:	2301      	movs	r3, #1
 801f4bc:	e049      	b.n	801f552 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f4be:	687b      	ldr	r3, [r7, #4]
 801f4c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f4c4:	b2db      	uxtb	r3, r3
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d106      	bne.n	801f4d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	2200      	movs	r2, #0
 801f4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f4d2:	6878      	ldr	r0, [r7, #4]
 801f4d4:	f7f4 fc74 	bl	8013dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	2202      	movs	r2, #2
 801f4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	681a      	ldr	r2, [r3, #0]
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	3304      	adds	r3, #4
 801f4e8:	4619      	mov	r1, r3
 801f4ea:	4610      	mov	r0, r2
 801f4ec:	f000 fd98 	bl	8020020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	2201      	movs	r2, #1
 801f4f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	2201      	movs	r2, #1
 801f4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f500:	687b      	ldr	r3, [r7, #4]
 801f502:	2201      	movs	r2, #1
 801f504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	2201      	movs	r2, #1
 801f50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	2201      	movs	r2, #1
 801f514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	2201      	movs	r2, #1
 801f51c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	2201      	movs	r2, #1
 801f524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	2201      	movs	r2, #1
 801f52c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	2201      	movs	r2, #1
 801f534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f538:	687b      	ldr	r3, [r7, #4]
 801f53a:	2201      	movs	r2, #1
 801f53c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	2201      	movs	r2, #1
 801f544:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	2201      	movs	r2, #1
 801f54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f550:	2300      	movs	r3, #0
}
 801f552:	4618      	mov	r0, r3
 801f554:	3708      	adds	r7, #8
 801f556:	46bd      	mov	sp, r7
 801f558:	bd80      	pop	{r7, pc}
	...

0801f55c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f55c:	b480      	push	{r7}
 801f55e:	b085      	sub	sp, #20
 801f560:	af00      	add	r7, sp, #0
 801f562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f56a:	b2db      	uxtb	r3, r3
 801f56c:	2b01      	cmp	r3, #1
 801f56e:	d001      	beq.n	801f574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f570:	2301      	movs	r3, #1
 801f572:	e021      	b.n	801f5b8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	2202      	movs	r2, #2
 801f578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	68da      	ldr	r2, [r3, #12]
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	681b      	ldr	r3, [r3, #0]
 801f586:	f042 0201 	orr.w	r2, r2, #1
 801f58a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	689a      	ldr	r2, [r3, #8]
 801f592:	4b0c      	ldr	r3, [pc, #48]	; (801f5c4 <HAL_TIM_Base_Start_IT+0x68>)
 801f594:	4013      	ands	r3, r2
 801f596:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f598:	68fb      	ldr	r3, [r7, #12]
 801f59a:	2b06      	cmp	r3, #6
 801f59c:	d00b      	beq.n	801f5b6 <HAL_TIM_Base_Start_IT+0x5a>
 801f59e:	68fb      	ldr	r3, [r7, #12]
 801f5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f5a4:	d007      	beq.n	801f5b6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	681a      	ldr	r2, [r3, #0]
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	f042 0201 	orr.w	r2, r2, #1
 801f5b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801f5b6:	2300      	movs	r3, #0
}
 801f5b8:	4618      	mov	r0, r3
 801f5ba:	3714      	adds	r7, #20
 801f5bc:	46bd      	mov	sp, r7
 801f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5c2:	4770      	bx	lr
 801f5c4:	00010007 	.word	0x00010007

0801f5c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801f5c8:	b580      	push	{r7, lr}
 801f5ca:	b082      	sub	sp, #8
 801f5cc:	af00      	add	r7, sp, #0
 801f5ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d101      	bne.n	801f5da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801f5d6:	2301      	movs	r3, #1
 801f5d8:	e049      	b.n	801f66e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f5e0:	b2db      	uxtb	r3, r3
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	d106      	bne.n	801f5f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	2200      	movs	r2, #0
 801f5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801f5ee:	6878      	ldr	r0, [r7, #4]
 801f5f0:	f000 f841 	bl	801f676 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	2202      	movs	r2, #2
 801f5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	681a      	ldr	r2, [r3, #0]
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	3304      	adds	r3, #4
 801f604:	4619      	mov	r1, r3
 801f606:	4610      	mov	r0, r2
 801f608:	f000 fd0a 	bl	8020020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	2201      	movs	r2, #1
 801f610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	2201      	movs	r2, #1
 801f618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	2201      	movs	r2, #1
 801f620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	2201      	movs	r2, #1
 801f628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	2201      	movs	r2, #1
 801f630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f634:	687b      	ldr	r3, [r7, #4]
 801f636:	2201      	movs	r2, #1
 801f638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	2201      	movs	r2, #1
 801f640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	2201      	movs	r2, #1
 801f648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	2201      	movs	r2, #1
 801f650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f654:	687b      	ldr	r3, [r7, #4]
 801f656:	2201      	movs	r2, #1
 801f658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f65c:	687b      	ldr	r3, [r7, #4]
 801f65e:	2201      	movs	r2, #1
 801f660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	2201      	movs	r2, #1
 801f668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f66c:	2300      	movs	r3, #0
}
 801f66e:	4618      	mov	r0, r3
 801f670:	3708      	adds	r7, #8
 801f672:	46bd      	mov	sp, r7
 801f674:	bd80      	pop	{r7, pc}

0801f676 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801f676:	b480      	push	{r7}
 801f678:	b083      	sub	sp, #12
 801f67a:	af00      	add	r7, sp, #0
 801f67c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801f67e:	bf00      	nop
 801f680:	370c      	adds	r7, #12
 801f682:	46bd      	mov	sp, r7
 801f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f688:	4770      	bx	lr
	...

0801f68c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f68c:	b580      	push	{r7, lr}
 801f68e:	b084      	sub	sp, #16
 801f690:	af00      	add	r7, sp, #0
 801f692:	6078      	str	r0, [r7, #4]
 801f694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801f696:	683b      	ldr	r3, [r7, #0]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d109      	bne.n	801f6b0 <HAL_TIM_PWM_Start+0x24>
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f6a2:	b2db      	uxtb	r3, r3
 801f6a4:	2b01      	cmp	r3, #1
 801f6a6:	bf14      	ite	ne
 801f6a8:	2301      	movne	r3, #1
 801f6aa:	2300      	moveq	r3, #0
 801f6ac:	b2db      	uxtb	r3, r3
 801f6ae:	e03c      	b.n	801f72a <HAL_TIM_PWM_Start+0x9e>
 801f6b0:	683b      	ldr	r3, [r7, #0]
 801f6b2:	2b04      	cmp	r3, #4
 801f6b4:	d109      	bne.n	801f6ca <HAL_TIM_PWM_Start+0x3e>
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801f6bc:	b2db      	uxtb	r3, r3
 801f6be:	2b01      	cmp	r3, #1
 801f6c0:	bf14      	ite	ne
 801f6c2:	2301      	movne	r3, #1
 801f6c4:	2300      	moveq	r3, #0
 801f6c6:	b2db      	uxtb	r3, r3
 801f6c8:	e02f      	b.n	801f72a <HAL_TIM_PWM_Start+0x9e>
 801f6ca:	683b      	ldr	r3, [r7, #0]
 801f6cc:	2b08      	cmp	r3, #8
 801f6ce:	d109      	bne.n	801f6e4 <HAL_TIM_PWM_Start+0x58>
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801f6d6:	b2db      	uxtb	r3, r3
 801f6d8:	2b01      	cmp	r3, #1
 801f6da:	bf14      	ite	ne
 801f6dc:	2301      	movne	r3, #1
 801f6de:	2300      	moveq	r3, #0
 801f6e0:	b2db      	uxtb	r3, r3
 801f6e2:	e022      	b.n	801f72a <HAL_TIM_PWM_Start+0x9e>
 801f6e4:	683b      	ldr	r3, [r7, #0]
 801f6e6:	2b0c      	cmp	r3, #12
 801f6e8:	d109      	bne.n	801f6fe <HAL_TIM_PWM_Start+0x72>
 801f6ea:	687b      	ldr	r3, [r7, #4]
 801f6ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f6f0:	b2db      	uxtb	r3, r3
 801f6f2:	2b01      	cmp	r3, #1
 801f6f4:	bf14      	ite	ne
 801f6f6:	2301      	movne	r3, #1
 801f6f8:	2300      	moveq	r3, #0
 801f6fa:	b2db      	uxtb	r3, r3
 801f6fc:	e015      	b.n	801f72a <HAL_TIM_PWM_Start+0x9e>
 801f6fe:	683b      	ldr	r3, [r7, #0]
 801f700:	2b10      	cmp	r3, #16
 801f702:	d109      	bne.n	801f718 <HAL_TIM_PWM_Start+0x8c>
 801f704:	687b      	ldr	r3, [r7, #4]
 801f706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f70a:	b2db      	uxtb	r3, r3
 801f70c:	2b01      	cmp	r3, #1
 801f70e:	bf14      	ite	ne
 801f710:	2301      	movne	r3, #1
 801f712:	2300      	moveq	r3, #0
 801f714:	b2db      	uxtb	r3, r3
 801f716:	e008      	b.n	801f72a <HAL_TIM_PWM_Start+0x9e>
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801f71e:	b2db      	uxtb	r3, r3
 801f720:	2b01      	cmp	r3, #1
 801f722:	bf14      	ite	ne
 801f724:	2301      	movne	r3, #1
 801f726:	2300      	moveq	r3, #0
 801f728:	b2db      	uxtb	r3, r3
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d001      	beq.n	801f732 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801f72e:	2301      	movs	r3, #1
 801f730:	e06e      	b.n	801f810 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801f732:	683b      	ldr	r3, [r7, #0]
 801f734:	2b00      	cmp	r3, #0
 801f736:	d104      	bne.n	801f742 <HAL_TIM_PWM_Start+0xb6>
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	2202      	movs	r2, #2
 801f73c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f740:	e023      	b.n	801f78a <HAL_TIM_PWM_Start+0xfe>
 801f742:	683b      	ldr	r3, [r7, #0]
 801f744:	2b04      	cmp	r3, #4
 801f746:	d104      	bne.n	801f752 <HAL_TIM_PWM_Start+0xc6>
 801f748:	687b      	ldr	r3, [r7, #4]
 801f74a:	2202      	movs	r2, #2
 801f74c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f750:	e01b      	b.n	801f78a <HAL_TIM_PWM_Start+0xfe>
 801f752:	683b      	ldr	r3, [r7, #0]
 801f754:	2b08      	cmp	r3, #8
 801f756:	d104      	bne.n	801f762 <HAL_TIM_PWM_Start+0xd6>
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	2202      	movs	r2, #2
 801f75c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f760:	e013      	b.n	801f78a <HAL_TIM_PWM_Start+0xfe>
 801f762:	683b      	ldr	r3, [r7, #0]
 801f764:	2b0c      	cmp	r3, #12
 801f766:	d104      	bne.n	801f772 <HAL_TIM_PWM_Start+0xe6>
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	2202      	movs	r2, #2
 801f76c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f770:	e00b      	b.n	801f78a <HAL_TIM_PWM_Start+0xfe>
 801f772:	683b      	ldr	r3, [r7, #0]
 801f774:	2b10      	cmp	r3, #16
 801f776:	d104      	bne.n	801f782 <HAL_TIM_PWM_Start+0xf6>
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	2202      	movs	r2, #2
 801f77c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f780:	e003      	b.n	801f78a <HAL_TIM_PWM_Start+0xfe>
 801f782:	687b      	ldr	r3, [r7, #4]
 801f784:	2202      	movs	r2, #2
 801f786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801f78a:	687b      	ldr	r3, [r7, #4]
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	2201      	movs	r2, #1
 801f790:	6839      	ldr	r1, [r7, #0]
 801f792:	4618      	mov	r0, r3
 801f794:	f001 f84a 	bl	802082c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	681b      	ldr	r3, [r3, #0]
 801f79c:	4a1e      	ldr	r2, [pc, #120]	; (801f818 <HAL_TIM_PWM_Start+0x18c>)
 801f79e:	4293      	cmp	r3, r2
 801f7a0:	d013      	beq.n	801f7ca <HAL_TIM_PWM_Start+0x13e>
 801f7a2:	687b      	ldr	r3, [r7, #4]
 801f7a4:	681b      	ldr	r3, [r3, #0]
 801f7a6:	4a1d      	ldr	r2, [pc, #116]	; (801f81c <HAL_TIM_PWM_Start+0x190>)
 801f7a8:	4293      	cmp	r3, r2
 801f7aa:	d00e      	beq.n	801f7ca <HAL_TIM_PWM_Start+0x13e>
 801f7ac:	687b      	ldr	r3, [r7, #4]
 801f7ae:	681b      	ldr	r3, [r3, #0]
 801f7b0:	4a1b      	ldr	r2, [pc, #108]	; (801f820 <HAL_TIM_PWM_Start+0x194>)
 801f7b2:	4293      	cmp	r3, r2
 801f7b4:	d009      	beq.n	801f7ca <HAL_TIM_PWM_Start+0x13e>
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	4a1a      	ldr	r2, [pc, #104]	; (801f824 <HAL_TIM_PWM_Start+0x198>)
 801f7bc:	4293      	cmp	r3, r2
 801f7be:	d004      	beq.n	801f7ca <HAL_TIM_PWM_Start+0x13e>
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	681b      	ldr	r3, [r3, #0]
 801f7c4:	4a18      	ldr	r2, [pc, #96]	; (801f828 <HAL_TIM_PWM_Start+0x19c>)
 801f7c6:	4293      	cmp	r3, r2
 801f7c8:	d101      	bne.n	801f7ce <HAL_TIM_PWM_Start+0x142>
 801f7ca:	2301      	movs	r3, #1
 801f7cc:	e000      	b.n	801f7d0 <HAL_TIM_PWM_Start+0x144>
 801f7ce:	2300      	movs	r3, #0
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	d007      	beq.n	801f7e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801f7e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f7e4:	687b      	ldr	r3, [r7, #4]
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	689a      	ldr	r2, [r3, #8]
 801f7ea:	4b10      	ldr	r3, [pc, #64]	; (801f82c <HAL_TIM_PWM_Start+0x1a0>)
 801f7ec:	4013      	ands	r3, r2
 801f7ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f7f0:	68fb      	ldr	r3, [r7, #12]
 801f7f2:	2b06      	cmp	r3, #6
 801f7f4:	d00b      	beq.n	801f80e <HAL_TIM_PWM_Start+0x182>
 801f7f6:	68fb      	ldr	r3, [r7, #12]
 801f7f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f7fc:	d007      	beq.n	801f80e <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	681a      	ldr	r2, [r3, #0]
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	f042 0201 	orr.w	r2, r2, #1
 801f80c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801f80e:	2300      	movs	r3, #0
}
 801f810:	4618      	mov	r0, r3
 801f812:	3710      	adds	r7, #16
 801f814:	46bd      	mov	sp, r7
 801f816:	bd80      	pop	{r7, pc}
 801f818:	40010000 	.word	0x40010000
 801f81c:	40010400 	.word	0x40010400
 801f820:	40014000 	.word	0x40014000
 801f824:	40014400 	.word	0x40014400
 801f828:	40014800 	.word	0x40014800
 801f82c:	00010007 	.word	0x00010007

0801f830 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f830:	b580      	push	{r7, lr}
 801f832:	b082      	sub	sp, #8
 801f834:	af00      	add	r7, sp, #0
 801f836:	6078      	str	r0, [r7, #4]
 801f838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801f83a:	687b      	ldr	r3, [r7, #4]
 801f83c:	681b      	ldr	r3, [r3, #0]
 801f83e:	2200      	movs	r2, #0
 801f840:	6839      	ldr	r1, [r7, #0]
 801f842:	4618      	mov	r0, r3
 801f844:	f000 fff2 	bl	802082c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	4a3e      	ldr	r2, [pc, #248]	; (801f948 <HAL_TIM_PWM_Stop+0x118>)
 801f84e:	4293      	cmp	r3, r2
 801f850:	d013      	beq.n	801f87a <HAL_TIM_PWM_Stop+0x4a>
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	681b      	ldr	r3, [r3, #0]
 801f856:	4a3d      	ldr	r2, [pc, #244]	; (801f94c <HAL_TIM_PWM_Stop+0x11c>)
 801f858:	4293      	cmp	r3, r2
 801f85a:	d00e      	beq.n	801f87a <HAL_TIM_PWM_Stop+0x4a>
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	681b      	ldr	r3, [r3, #0]
 801f860:	4a3b      	ldr	r2, [pc, #236]	; (801f950 <HAL_TIM_PWM_Stop+0x120>)
 801f862:	4293      	cmp	r3, r2
 801f864:	d009      	beq.n	801f87a <HAL_TIM_PWM_Stop+0x4a>
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	4a3a      	ldr	r2, [pc, #232]	; (801f954 <HAL_TIM_PWM_Stop+0x124>)
 801f86c:	4293      	cmp	r3, r2
 801f86e:	d004      	beq.n	801f87a <HAL_TIM_PWM_Stop+0x4a>
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	4a38      	ldr	r2, [pc, #224]	; (801f958 <HAL_TIM_PWM_Stop+0x128>)
 801f876:	4293      	cmp	r3, r2
 801f878:	d101      	bne.n	801f87e <HAL_TIM_PWM_Stop+0x4e>
 801f87a:	2301      	movs	r3, #1
 801f87c:	e000      	b.n	801f880 <HAL_TIM_PWM_Stop+0x50>
 801f87e:	2300      	movs	r3, #0
 801f880:	2b00      	cmp	r3, #0
 801f882:	d017      	beq.n	801f8b4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	681b      	ldr	r3, [r3, #0]
 801f888:	6a1a      	ldr	r2, [r3, #32]
 801f88a:	f241 1311 	movw	r3, #4369	; 0x1111
 801f88e:	4013      	ands	r3, r2
 801f890:	2b00      	cmp	r3, #0
 801f892:	d10f      	bne.n	801f8b4 <HAL_TIM_PWM_Stop+0x84>
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	681b      	ldr	r3, [r3, #0]
 801f898:	6a1a      	ldr	r2, [r3, #32]
 801f89a:	f240 4344 	movw	r3, #1092	; 0x444
 801f89e:	4013      	ands	r3, r2
 801f8a0:	2b00      	cmp	r3, #0
 801f8a2:	d107      	bne.n	801f8b4 <HAL_TIM_PWM_Stop+0x84>
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	681b      	ldr	r3, [r3, #0]
 801f8ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801f8b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801f8b4:	687b      	ldr	r3, [r7, #4]
 801f8b6:	681b      	ldr	r3, [r3, #0]
 801f8b8:	6a1a      	ldr	r2, [r3, #32]
 801f8ba:	f241 1311 	movw	r3, #4369	; 0x1111
 801f8be:	4013      	ands	r3, r2
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d10f      	bne.n	801f8e4 <HAL_TIM_PWM_Stop+0xb4>
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	681b      	ldr	r3, [r3, #0]
 801f8c8:	6a1a      	ldr	r2, [r3, #32]
 801f8ca:	f240 4344 	movw	r3, #1092	; 0x444
 801f8ce:	4013      	ands	r3, r2
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d107      	bne.n	801f8e4 <HAL_TIM_PWM_Stop+0xb4>
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	681b      	ldr	r3, [r3, #0]
 801f8d8:	681a      	ldr	r2, [r3, #0]
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	f022 0201 	bic.w	r2, r2, #1
 801f8e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801f8e4:	683b      	ldr	r3, [r7, #0]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d104      	bne.n	801f8f4 <HAL_TIM_PWM_Stop+0xc4>
 801f8ea:	687b      	ldr	r3, [r7, #4]
 801f8ec:	2201      	movs	r2, #1
 801f8ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f8f2:	e023      	b.n	801f93c <HAL_TIM_PWM_Stop+0x10c>
 801f8f4:	683b      	ldr	r3, [r7, #0]
 801f8f6:	2b04      	cmp	r3, #4
 801f8f8:	d104      	bne.n	801f904 <HAL_TIM_PWM_Stop+0xd4>
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	2201      	movs	r2, #1
 801f8fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f902:	e01b      	b.n	801f93c <HAL_TIM_PWM_Stop+0x10c>
 801f904:	683b      	ldr	r3, [r7, #0]
 801f906:	2b08      	cmp	r3, #8
 801f908:	d104      	bne.n	801f914 <HAL_TIM_PWM_Stop+0xe4>
 801f90a:	687b      	ldr	r3, [r7, #4]
 801f90c:	2201      	movs	r2, #1
 801f90e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f912:	e013      	b.n	801f93c <HAL_TIM_PWM_Stop+0x10c>
 801f914:	683b      	ldr	r3, [r7, #0]
 801f916:	2b0c      	cmp	r3, #12
 801f918:	d104      	bne.n	801f924 <HAL_TIM_PWM_Stop+0xf4>
 801f91a:	687b      	ldr	r3, [r7, #4]
 801f91c:	2201      	movs	r2, #1
 801f91e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f922:	e00b      	b.n	801f93c <HAL_TIM_PWM_Stop+0x10c>
 801f924:	683b      	ldr	r3, [r7, #0]
 801f926:	2b10      	cmp	r3, #16
 801f928:	d104      	bne.n	801f934 <HAL_TIM_PWM_Stop+0x104>
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	2201      	movs	r2, #1
 801f92e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f932:	e003      	b.n	801f93c <HAL_TIM_PWM_Stop+0x10c>
 801f934:	687b      	ldr	r3, [r7, #4]
 801f936:	2201      	movs	r2, #1
 801f938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801f93c:	2300      	movs	r3, #0
}
 801f93e:	4618      	mov	r0, r3
 801f940:	3708      	adds	r7, #8
 801f942:	46bd      	mov	sp, r7
 801f944:	bd80      	pop	{r7, pc}
 801f946:	bf00      	nop
 801f948:	40010000 	.word	0x40010000
 801f94c:	40010400 	.word	0x40010400
 801f950:	40014000 	.word	0x40014000
 801f954:	40014400 	.word	0x40014400
 801f958:	40014800 	.word	0x40014800

0801f95c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f95c:	b580      	push	{r7, lr}
 801f95e:	b082      	sub	sp, #8
 801f960:	af00      	add	r7, sp, #0
 801f962:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	691b      	ldr	r3, [r3, #16]
 801f96a:	f003 0302 	and.w	r3, r3, #2
 801f96e:	2b02      	cmp	r3, #2
 801f970:	d122      	bne.n	801f9b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	68db      	ldr	r3, [r3, #12]
 801f978:	f003 0302 	and.w	r3, r3, #2
 801f97c:	2b02      	cmp	r3, #2
 801f97e:	d11b      	bne.n	801f9b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	681b      	ldr	r3, [r3, #0]
 801f984:	f06f 0202 	mvn.w	r2, #2
 801f988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	2201      	movs	r2, #1
 801f98e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	699b      	ldr	r3, [r3, #24]
 801f996:	f003 0303 	and.w	r3, r3, #3
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	d003      	beq.n	801f9a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801f99e:	6878      	ldr	r0, [r7, #4]
 801f9a0:	f7f2 fea8 	bl	80126f4 <HAL_TIM_IC_CaptureCallback>
 801f9a4:	e005      	b.n	801f9b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801f9a6:	6878      	ldr	r0, [r7, #4]
 801f9a8:	f000 fb1c 	bl	801ffe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f9ac:	6878      	ldr	r0, [r7, #4]
 801f9ae:	f000 fb23 	bl	801fff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f9b2:	687b      	ldr	r3, [r7, #4]
 801f9b4:	2200      	movs	r2, #0
 801f9b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	691b      	ldr	r3, [r3, #16]
 801f9be:	f003 0304 	and.w	r3, r3, #4
 801f9c2:	2b04      	cmp	r3, #4
 801f9c4:	d122      	bne.n	801fa0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	681b      	ldr	r3, [r3, #0]
 801f9ca:	68db      	ldr	r3, [r3, #12]
 801f9cc:	f003 0304 	and.w	r3, r3, #4
 801f9d0:	2b04      	cmp	r3, #4
 801f9d2:	d11b      	bne.n	801fa0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801f9d4:	687b      	ldr	r3, [r7, #4]
 801f9d6:	681b      	ldr	r3, [r3, #0]
 801f9d8:	f06f 0204 	mvn.w	r2, #4
 801f9dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	2202      	movs	r2, #2
 801f9e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f9e4:	687b      	ldr	r3, [r7, #4]
 801f9e6:	681b      	ldr	r3, [r3, #0]
 801f9e8:	699b      	ldr	r3, [r3, #24]
 801f9ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d003      	beq.n	801f9fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f9f2:	6878      	ldr	r0, [r7, #4]
 801f9f4:	f7f2 fe7e 	bl	80126f4 <HAL_TIM_IC_CaptureCallback>
 801f9f8:	e005      	b.n	801fa06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f9fa:	6878      	ldr	r0, [r7, #4]
 801f9fc:	f000 faf2 	bl	801ffe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fa00:	6878      	ldr	r0, [r7, #4]
 801fa02:	f000 faf9 	bl	801fff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	2200      	movs	r2, #0
 801fa0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	691b      	ldr	r3, [r3, #16]
 801fa12:	f003 0308 	and.w	r3, r3, #8
 801fa16:	2b08      	cmp	r3, #8
 801fa18:	d122      	bne.n	801fa60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	681b      	ldr	r3, [r3, #0]
 801fa1e:	68db      	ldr	r3, [r3, #12]
 801fa20:	f003 0308 	and.w	r3, r3, #8
 801fa24:	2b08      	cmp	r3, #8
 801fa26:	d11b      	bne.n	801fa60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	681b      	ldr	r3, [r3, #0]
 801fa2c:	f06f 0208 	mvn.w	r2, #8
 801fa30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	2204      	movs	r2, #4
 801fa36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	69db      	ldr	r3, [r3, #28]
 801fa3e:	f003 0303 	and.w	r3, r3, #3
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d003      	beq.n	801fa4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801fa46:	6878      	ldr	r0, [r7, #4]
 801fa48:	f7f2 fe54 	bl	80126f4 <HAL_TIM_IC_CaptureCallback>
 801fa4c:	e005      	b.n	801fa5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801fa4e:	6878      	ldr	r0, [r7, #4]
 801fa50:	f000 fac8 	bl	801ffe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801fa54:	6878      	ldr	r0, [r7, #4]
 801fa56:	f000 facf 	bl	801fff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801fa5a:	687b      	ldr	r3, [r7, #4]
 801fa5c:	2200      	movs	r2, #0
 801fa5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801fa60:	687b      	ldr	r3, [r7, #4]
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	691b      	ldr	r3, [r3, #16]
 801fa66:	f003 0310 	and.w	r3, r3, #16
 801fa6a:	2b10      	cmp	r3, #16
 801fa6c:	d122      	bne.n	801fab4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	681b      	ldr	r3, [r3, #0]
 801fa72:	68db      	ldr	r3, [r3, #12]
 801fa74:	f003 0310 	and.w	r3, r3, #16
 801fa78:	2b10      	cmp	r3, #16
 801fa7a:	d11b      	bne.n	801fab4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	f06f 0210 	mvn.w	r2, #16
 801fa84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	2208      	movs	r2, #8
 801fa8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801fa8c:	687b      	ldr	r3, [r7, #4]
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	69db      	ldr	r3, [r3, #28]
 801fa92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d003      	beq.n	801faa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801fa9a:	6878      	ldr	r0, [r7, #4]
 801fa9c:	f7f2 fe2a 	bl	80126f4 <HAL_TIM_IC_CaptureCallback>
 801faa0:	e005      	b.n	801faae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801faa2:	6878      	ldr	r0, [r7, #4]
 801faa4:	f000 fa9e 	bl	801ffe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801faa8:	6878      	ldr	r0, [r7, #4]
 801faaa:	f000 faa5 	bl	801fff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	2200      	movs	r2, #0
 801fab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	681b      	ldr	r3, [r3, #0]
 801fab8:	691b      	ldr	r3, [r3, #16]
 801faba:	f003 0301 	and.w	r3, r3, #1
 801fabe:	2b01      	cmp	r3, #1
 801fac0:	d10e      	bne.n	801fae0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801fac2:	687b      	ldr	r3, [r7, #4]
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	68db      	ldr	r3, [r3, #12]
 801fac8:	f003 0301 	and.w	r3, r3, #1
 801facc:	2b01      	cmp	r3, #1
 801face:	d107      	bne.n	801fae0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	681b      	ldr	r3, [r3, #0]
 801fad4:	f06f 0201 	mvn.w	r2, #1
 801fad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801fada:	6878      	ldr	r0, [r7, #4]
 801fadc:	f7f3 fc18 	bl	8013310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	681b      	ldr	r3, [r3, #0]
 801fae4:	691b      	ldr	r3, [r3, #16]
 801fae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801faea:	2b80      	cmp	r3, #128	; 0x80
 801faec:	d10e      	bne.n	801fb0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	681b      	ldr	r3, [r3, #0]
 801faf2:	68db      	ldr	r3, [r3, #12]
 801faf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801faf8:	2b80      	cmp	r3, #128	; 0x80
 801fafa:	d107      	bne.n	801fb0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	681b      	ldr	r3, [r3, #0]
 801fb00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801fb04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801fb06:	6878      	ldr	r0, [r7, #4]
 801fb08:	f000 ffc6 	bl	8020a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	681b      	ldr	r3, [r3, #0]
 801fb10:	691b      	ldr	r3, [r3, #16]
 801fb12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fb16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fb1a:	d10e      	bne.n	801fb3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	681b      	ldr	r3, [r3, #0]
 801fb20:	68db      	ldr	r3, [r3, #12]
 801fb22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fb26:	2b80      	cmp	r3, #128	; 0x80
 801fb28:	d107      	bne.n	801fb3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801fb2a:	687b      	ldr	r3, [r7, #4]
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801fb32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801fb34:	6878      	ldr	r0, [r7, #4]
 801fb36:	f000 ffb9 	bl	8020aac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801fb3a:	687b      	ldr	r3, [r7, #4]
 801fb3c:	681b      	ldr	r3, [r3, #0]
 801fb3e:	691b      	ldr	r3, [r3, #16]
 801fb40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fb44:	2b40      	cmp	r3, #64	; 0x40
 801fb46:	d10e      	bne.n	801fb66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	68db      	ldr	r3, [r3, #12]
 801fb4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fb52:	2b40      	cmp	r3, #64	; 0x40
 801fb54:	d107      	bne.n	801fb66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801fb5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801fb60:	6878      	ldr	r0, [r7, #4]
 801fb62:	f000 fa53 	bl	802000c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	681b      	ldr	r3, [r3, #0]
 801fb6a:	691b      	ldr	r3, [r3, #16]
 801fb6c:	f003 0320 	and.w	r3, r3, #32
 801fb70:	2b20      	cmp	r3, #32
 801fb72:	d10e      	bne.n	801fb92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	681b      	ldr	r3, [r3, #0]
 801fb78:	68db      	ldr	r3, [r3, #12]
 801fb7a:	f003 0320 	and.w	r3, r3, #32
 801fb7e:	2b20      	cmp	r3, #32
 801fb80:	d107      	bne.n	801fb92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801fb82:	687b      	ldr	r3, [r7, #4]
 801fb84:	681b      	ldr	r3, [r3, #0]
 801fb86:	f06f 0220 	mvn.w	r2, #32
 801fb8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801fb8c:	6878      	ldr	r0, [r7, #4]
 801fb8e:	f000 ff79 	bl	8020a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801fb92:	bf00      	nop
 801fb94:	3708      	adds	r7, #8
 801fb96:	46bd      	mov	sp, r7
 801fb98:	bd80      	pop	{r7, pc}
	...

0801fb9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801fb9c:	b580      	push	{r7, lr}
 801fb9e:	b084      	sub	sp, #16
 801fba0:	af00      	add	r7, sp, #0
 801fba2:	60f8      	str	r0, [r7, #12]
 801fba4:	60b9      	str	r1, [r7, #8]
 801fba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801fba8:	68fb      	ldr	r3, [r7, #12]
 801fbaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fbae:	2b01      	cmp	r3, #1
 801fbb0:	d101      	bne.n	801fbb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801fbb2:	2302      	movs	r3, #2
 801fbb4:	e0fd      	b.n	801fdb2 <HAL_TIM_PWM_ConfigChannel+0x216>
 801fbb6:	68fb      	ldr	r3, [r7, #12]
 801fbb8:	2201      	movs	r2, #1
 801fbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	2b14      	cmp	r3, #20
 801fbc2:	f200 80f0 	bhi.w	801fda6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 801fbc6:	a201      	add	r2, pc, #4	; (adr r2, 801fbcc <HAL_TIM_PWM_ConfigChannel+0x30>)
 801fbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbcc:	0801fc21 	.word	0x0801fc21
 801fbd0:	0801fda7 	.word	0x0801fda7
 801fbd4:	0801fda7 	.word	0x0801fda7
 801fbd8:	0801fda7 	.word	0x0801fda7
 801fbdc:	0801fc61 	.word	0x0801fc61
 801fbe0:	0801fda7 	.word	0x0801fda7
 801fbe4:	0801fda7 	.word	0x0801fda7
 801fbe8:	0801fda7 	.word	0x0801fda7
 801fbec:	0801fca3 	.word	0x0801fca3
 801fbf0:	0801fda7 	.word	0x0801fda7
 801fbf4:	0801fda7 	.word	0x0801fda7
 801fbf8:	0801fda7 	.word	0x0801fda7
 801fbfc:	0801fce3 	.word	0x0801fce3
 801fc00:	0801fda7 	.word	0x0801fda7
 801fc04:	0801fda7 	.word	0x0801fda7
 801fc08:	0801fda7 	.word	0x0801fda7
 801fc0c:	0801fd25 	.word	0x0801fd25
 801fc10:	0801fda7 	.word	0x0801fda7
 801fc14:	0801fda7 	.word	0x0801fda7
 801fc18:	0801fda7 	.word	0x0801fda7
 801fc1c:	0801fd65 	.word	0x0801fd65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801fc20:	68fb      	ldr	r3, [r7, #12]
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	68b9      	ldr	r1, [r7, #8]
 801fc26:	4618      	mov	r0, r3
 801fc28:	f000 fa94 	bl	8020154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801fc2c:	68fb      	ldr	r3, [r7, #12]
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	699a      	ldr	r2, [r3, #24]
 801fc32:	68fb      	ldr	r3, [r7, #12]
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	f042 0208 	orr.w	r2, r2, #8
 801fc3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801fc3c:	68fb      	ldr	r3, [r7, #12]
 801fc3e:	681b      	ldr	r3, [r3, #0]
 801fc40:	699a      	ldr	r2, [r3, #24]
 801fc42:	68fb      	ldr	r3, [r7, #12]
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	f022 0204 	bic.w	r2, r2, #4
 801fc4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801fc4c:	68fb      	ldr	r3, [r7, #12]
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	6999      	ldr	r1, [r3, #24]
 801fc52:	68bb      	ldr	r3, [r7, #8]
 801fc54:	691a      	ldr	r2, [r3, #16]
 801fc56:	68fb      	ldr	r3, [r7, #12]
 801fc58:	681b      	ldr	r3, [r3, #0]
 801fc5a:	430a      	orrs	r2, r1
 801fc5c:	619a      	str	r2, [r3, #24]
      break;
 801fc5e:	e0a3      	b.n	801fda8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801fc60:	68fb      	ldr	r3, [r7, #12]
 801fc62:	681b      	ldr	r3, [r3, #0]
 801fc64:	68b9      	ldr	r1, [r7, #8]
 801fc66:	4618      	mov	r0, r3
 801fc68:	f000 fb04 	bl	8020274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801fc6c:	68fb      	ldr	r3, [r7, #12]
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	699a      	ldr	r2, [r3, #24]
 801fc72:	68fb      	ldr	r3, [r7, #12]
 801fc74:	681b      	ldr	r3, [r3, #0]
 801fc76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fc7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801fc7c:	68fb      	ldr	r3, [r7, #12]
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	699a      	ldr	r2, [r3, #24]
 801fc82:	68fb      	ldr	r3, [r7, #12]
 801fc84:	681b      	ldr	r3, [r3, #0]
 801fc86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fc8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801fc8c:	68fb      	ldr	r3, [r7, #12]
 801fc8e:	681b      	ldr	r3, [r3, #0]
 801fc90:	6999      	ldr	r1, [r3, #24]
 801fc92:	68bb      	ldr	r3, [r7, #8]
 801fc94:	691b      	ldr	r3, [r3, #16]
 801fc96:	021a      	lsls	r2, r3, #8
 801fc98:	68fb      	ldr	r3, [r7, #12]
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	430a      	orrs	r2, r1
 801fc9e:	619a      	str	r2, [r3, #24]
      break;
 801fca0:	e082      	b.n	801fda8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801fca2:	68fb      	ldr	r3, [r7, #12]
 801fca4:	681b      	ldr	r3, [r3, #0]
 801fca6:	68b9      	ldr	r1, [r7, #8]
 801fca8:	4618      	mov	r0, r3
 801fcaa:	f000 fb6d 	bl	8020388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801fcae:	68fb      	ldr	r3, [r7, #12]
 801fcb0:	681b      	ldr	r3, [r3, #0]
 801fcb2:	69da      	ldr	r2, [r3, #28]
 801fcb4:	68fb      	ldr	r3, [r7, #12]
 801fcb6:	681b      	ldr	r3, [r3, #0]
 801fcb8:	f042 0208 	orr.w	r2, r2, #8
 801fcbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801fcbe:	68fb      	ldr	r3, [r7, #12]
 801fcc0:	681b      	ldr	r3, [r3, #0]
 801fcc2:	69da      	ldr	r2, [r3, #28]
 801fcc4:	68fb      	ldr	r3, [r7, #12]
 801fcc6:	681b      	ldr	r3, [r3, #0]
 801fcc8:	f022 0204 	bic.w	r2, r2, #4
 801fccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801fcce:	68fb      	ldr	r3, [r7, #12]
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	69d9      	ldr	r1, [r3, #28]
 801fcd4:	68bb      	ldr	r3, [r7, #8]
 801fcd6:	691a      	ldr	r2, [r3, #16]
 801fcd8:	68fb      	ldr	r3, [r7, #12]
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	430a      	orrs	r2, r1
 801fcde:	61da      	str	r2, [r3, #28]
      break;
 801fce0:	e062      	b.n	801fda8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801fce2:	68fb      	ldr	r3, [r7, #12]
 801fce4:	681b      	ldr	r3, [r3, #0]
 801fce6:	68b9      	ldr	r1, [r7, #8]
 801fce8:	4618      	mov	r0, r3
 801fcea:	f000 fbd3 	bl	8020494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801fcee:	68fb      	ldr	r3, [r7, #12]
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	69da      	ldr	r2, [r3, #28]
 801fcf4:	68fb      	ldr	r3, [r7, #12]
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fcfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801fcfe:	68fb      	ldr	r3, [r7, #12]
 801fd00:	681b      	ldr	r3, [r3, #0]
 801fd02:	69da      	ldr	r2, [r3, #28]
 801fd04:	68fb      	ldr	r3, [r7, #12]
 801fd06:	681b      	ldr	r3, [r3, #0]
 801fd08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fd0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801fd0e:	68fb      	ldr	r3, [r7, #12]
 801fd10:	681b      	ldr	r3, [r3, #0]
 801fd12:	69d9      	ldr	r1, [r3, #28]
 801fd14:	68bb      	ldr	r3, [r7, #8]
 801fd16:	691b      	ldr	r3, [r3, #16]
 801fd18:	021a      	lsls	r2, r3, #8
 801fd1a:	68fb      	ldr	r3, [r7, #12]
 801fd1c:	681b      	ldr	r3, [r3, #0]
 801fd1e:	430a      	orrs	r2, r1
 801fd20:	61da      	str	r2, [r3, #28]
      break;
 801fd22:	e041      	b.n	801fda8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801fd24:	68fb      	ldr	r3, [r7, #12]
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	68b9      	ldr	r1, [r7, #8]
 801fd2a:	4618      	mov	r0, r3
 801fd2c:	f000 fc1a 	bl	8020564 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801fd30:	68fb      	ldr	r3, [r7, #12]
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd36:	68fb      	ldr	r3, [r7, #12]
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	f042 0208 	orr.w	r2, r2, #8
 801fd3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801fd40:	68fb      	ldr	r3, [r7, #12]
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd46:	68fb      	ldr	r3, [r7, #12]
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	f022 0204 	bic.w	r2, r2, #4
 801fd4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801fd50:	68fb      	ldr	r3, [r7, #12]
 801fd52:	681b      	ldr	r3, [r3, #0]
 801fd54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801fd56:	68bb      	ldr	r3, [r7, #8]
 801fd58:	691a      	ldr	r2, [r3, #16]
 801fd5a:	68fb      	ldr	r3, [r7, #12]
 801fd5c:	681b      	ldr	r3, [r3, #0]
 801fd5e:	430a      	orrs	r2, r1
 801fd60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801fd62:	e021      	b.n	801fda8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801fd64:	68fb      	ldr	r3, [r7, #12]
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	68b9      	ldr	r1, [r7, #8]
 801fd6a:	4618      	mov	r0, r3
 801fd6c:	f000 fc5c 	bl	8020628 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801fd70:	68fb      	ldr	r3, [r7, #12]
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd76:	68fb      	ldr	r3, [r7, #12]
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fd7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801fd80:	68fb      	ldr	r3, [r7, #12]
 801fd82:	681b      	ldr	r3, [r3, #0]
 801fd84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd86:	68fb      	ldr	r3, [r7, #12]
 801fd88:	681b      	ldr	r3, [r3, #0]
 801fd8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fd8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801fd96:	68bb      	ldr	r3, [r7, #8]
 801fd98:	691b      	ldr	r3, [r3, #16]
 801fd9a:	021a      	lsls	r2, r3, #8
 801fd9c:	68fb      	ldr	r3, [r7, #12]
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	430a      	orrs	r2, r1
 801fda2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801fda4:	e000      	b.n	801fda8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 801fda6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801fda8:	68fb      	ldr	r3, [r7, #12]
 801fdaa:	2200      	movs	r2, #0
 801fdac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801fdb0:	2300      	movs	r3, #0
}
 801fdb2:	4618      	mov	r0, r3
 801fdb4:	3710      	adds	r7, #16
 801fdb6:	46bd      	mov	sp, r7
 801fdb8:	bd80      	pop	{r7, pc}
 801fdba:	bf00      	nop

0801fdbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801fdbc:	b580      	push	{r7, lr}
 801fdbe:	b084      	sub	sp, #16
 801fdc0:	af00      	add	r7, sp, #0
 801fdc2:	6078      	str	r0, [r7, #4]
 801fdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fdcc:	2b01      	cmp	r3, #1
 801fdce:	d101      	bne.n	801fdd4 <HAL_TIM_ConfigClockSource+0x18>
 801fdd0:	2302      	movs	r3, #2
 801fdd2:	e0b7      	b.n	801ff44 <HAL_TIM_ConfigClockSource+0x188>
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	2201      	movs	r2, #1
 801fdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	2202      	movs	r2, #2
 801fde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	681b      	ldr	r3, [r3, #0]
 801fde8:	689b      	ldr	r3, [r3, #8]
 801fdea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801fdec:	68fa      	ldr	r2, [r7, #12]
 801fdee:	4b57      	ldr	r3, [pc, #348]	; (801ff4c <HAL_TIM_ConfigClockSource+0x190>)
 801fdf0:	4013      	ands	r3, r2
 801fdf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801fdf4:	68fb      	ldr	r3, [r7, #12]
 801fdf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801fdfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	68fa      	ldr	r2, [r7, #12]
 801fe02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801fe04:	683b      	ldr	r3, [r7, #0]
 801fe06:	681b      	ldr	r3, [r3, #0]
 801fe08:	2b70      	cmp	r3, #112	; 0x70
 801fe0a:	d02e      	beq.n	801fe6a <HAL_TIM_ConfigClockSource+0xae>
 801fe0c:	2b70      	cmp	r3, #112	; 0x70
 801fe0e:	d812      	bhi.n	801fe36 <HAL_TIM_ConfigClockSource+0x7a>
 801fe10:	2b30      	cmp	r3, #48	; 0x30
 801fe12:	f000 8084 	beq.w	801ff1e <HAL_TIM_ConfigClockSource+0x162>
 801fe16:	2b30      	cmp	r3, #48	; 0x30
 801fe18:	d806      	bhi.n	801fe28 <HAL_TIM_ConfigClockSource+0x6c>
 801fe1a:	2b10      	cmp	r3, #16
 801fe1c:	d07f      	beq.n	801ff1e <HAL_TIM_ConfigClockSource+0x162>
 801fe1e:	2b20      	cmp	r3, #32
 801fe20:	d07d      	beq.n	801ff1e <HAL_TIM_ConfigClockSource+0x162>
 801fe22:	2b00      	cmp	r3, #0
 801fe24:	d07b      	beq.n	801ff1e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801fe26:	e084      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 801fe28:	2b50      	cmp	r3, #80	; 0x50
 801fe2a:	d048      	beq.n	801febe <HAL_TIM_ConfigClockSource+0x102>
 801fe2c:	2b60      	cmp	r3, #96	; 0x60
 801fe2e:	d056      	beq.n	801fede <HAL_TIM_ConfigClockSource+0x122>
 801fe30:	2b40      	cmp	r3, #64	; 0x40
 801fe32:	d064      	beq.n	801fefe <HAL_TIM_ConfigClockSource+0x142>
      break;
 801fe34:	e07d      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 801fe36:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801fe3a:	d070      	beq.n	801ff1e <HAL_TIM_ConfigClockSource+0x162>
 801fe3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801fe40:	d809      	bhi.n	801fe56 <HAL_TIM_ConfigClockSource+0x9a>
 801fe42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fe46:	d027      	beq.n	801fe98 <HAL_TIM_ConfigClockSource+0xdc>
 801fe48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fe4c:	d067      	beq.n	801ff1e <HAL_TIM_ConfigClockSource+0x162>
 801fe4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fe52:	d06d      	beq.n	801ff30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801fe54:	e06d      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 801fe56:	4a3e      	ldr	r2, [pc, #248]	; (801ff50 <HAL_TIM_ConfigClockSource+0x194>)
 801fe58:	4293      	cmp	r3, r2
 801fe5a:	d060      	beq.n	801ff1e <HAL_TIM_ConfigClockSource+0x162>
 801fe5c:	4a3d      	ldr	r2, [pc, #244]	; (801ff54 <HAL_TIM_ConfigClockSource+0x198>)
 801fe5e:	4293      	cmp	r3, r2
 801fe60:	d05d      	beq.n	801ff1e <HAL_TIM_ConfigClockSource+0x162>
 801fe62:	4a3d      	ldr	r2, [pc, #244]	; (801ff58 <HAL_TIM_ConfigClockSource+0x19c>)
 801fe64:	4293      	cmp	r3, r2
 801fe66:	d05a      	beq.n	801ff1e <HAL_TIM_ConfigClockSource+0x162>
      break;
 801fe68:	e063      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	6818      	ldr	r0, [r3, #0]
 801fe6e:	683b      	ldr	r3, [r7, #0]
 801fe70:	6899      	ldr	r1, [r3, #8]
 801fe72:	683b      	ldr	r3, [r7, #0]
 801fe74:	685a      	ldr	r2, [r3, #4]
 801fe76:	683b      	ldr	r3, [r7, #0]
 801fe78:	68db      	ldr	r3, [r3, #12]
 801fe7a:	f000 fcb7 	bl	80207ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801fe7e:	687b      	ldr	r3, [r7, #4]
 801fe80:	681b      	ldr	r3, [r3, #0]
 801fe82:	689b      	ldr	r3, [r3, #8]
 801fe84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801fe86:	68fb      	ldr	r3, [r7, #12]
 801fe88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801fe8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	681b      	ldr	r3, [r3, #0]
 801fe92:	68fa      	ldr	r2, [r7, #12]
 801fe94:	609a      	str	r2, [r3, #8]
      break;
 801fe96:	e04c      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	6818      	ldr	r0, [r3, #0]
 801fe9c:	683b      	ldr	r3, [r7, #0]
 801fe9e:	6899      	ldr	r1, [r3, #8]
 801fea0:	683b      	ldr	r3, [r7, #0]
 801fea2:	685a      	ldr	r2, [r3, #4]
 801fea4:	683b      	ldr	r3, [r7, #0]
 801fea6:	68db      	ldr	r3, [r3, #12]
 801fea8:	f000 fca0 	bl	80207ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	681b      	ldr	r3, [r3, #0]
 801feb0:	689a      	ldr	r2, [r3, #8]
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	681b      	ldr	r3, [r3, #0]
 801feb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801feba:	609a      	str	r2, [r3, #8]
      break;
 801febc:	e039      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	6818      	ldr	r0, [r3, #0]
 801fec2:	683b      	ldr	r3, [r7, #0]
 801fec4:	6859      	ldr	r1, [r3, #4]
 801fec6:	683b      	ldr	r3, [r7, #0]
 801fec8:	68db      	ldr	r3, [r3, #12]
 801feca:	461a      	mov	r2, r3
 801fecc:	f000 fc10 	bl	80206f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	2150      	movs	r1, #80	; 0x50
 801fed6:	4618      	mov	r0, r3
 801fed8:	f000 fc6a 	bl	80207b0 <TIM_ITRx_SetConfig>
      break;
 801fedc:	e029      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801fede:	687b      	ldr	r3, [r7, #4]
 801fee0:	6818      	ldr	r0, [r3, #0]
 801fee2:	683b      	ldr	r3, [r7, #0]
 801fee4:	6859      	ldr	r1, [r3, #4]
 801fee6:	683b      	ldr	r3, [r7, #0]
 801fee8:	68db      	ldr	r3, [r3, #12]
 801feea:	461a      	mov	r2, r3
 801feec:	f000 fc2f 	bl	802074e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	681b      	ldr	r3, [r3, #0]
 801fef4:	2160      	movs	r1, #96	; 0x60
 801fef6:	4618      	mov	r0, r3
 801fef8:	f000 fc5a 	bl	80207b0 <TIM_ITRx_SetConfig>
      break;
 801fefc:	e019      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	6818      	ldr	r0, [r3, #0]
 801ff02:	683b      	ldr	r3, [r7, #0]
 801ff04:	6859      	ldr	r1, [r3, #4]
 801ff06:	683b      	ldr	r3, [r7, #0]
 801ff08:	68db      	ldr	r3, [r3, #12]
 801ff0a:	461a      	mov	r2, r3
 801ff0c:	f000 fbf0 	bl	80206f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	681b      	ldr	r3, [r3, #0]
 801ff14:	2140      	movs	r1, #64	; 0x40
 801ff16:	4618      	mov	r0, r3
 801ff18:	f000 fc4a 	bl	80207b0 <TIM_ITRx_SetConfig>
      break;
 801ff1c:	e009      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801ff1e:	687b      	ldr	r3, [r7, #4]
 801ff20:	681a      	ldr	r2, [r3, #0]
 801ff22:	683b      	ldr	r3, [r7, #0]
 801ff24:	681b      	ldr	r3, [r3, #0]
 801ff26:	4619      	mov	r1, r3
 801ff28:	4610      	mov	r0, r2
 801ff2a:	f000 fc41 	bl	80207b0 <TIM_ITRx_SetConfig>
      break;
 801ff2e:	e000      	b.n	801ff32 <HAL_TIM_ConfigClockSource+0x176>
      break;
 801ff30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	2201      	movs	r2, #1
 801ff36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	2200      	movs	r2, #0
 801ff3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801ff42:	2300      	movs	r3, #0
}
 801ff44:	4618      	mov	r0, r3
 801ff46:	3710      	adds	r7, #16
 801ff48:	46bd      	mov	sp, r7
 801ff4a:	bd80      	pop	{r7, pc}
 801ff4c:	ffceff88 	.word	0xffceff88
 801ff50:	00100030 	.word	0x00100030
 801ff54:	00100040 	.word	0x00100040
 801ff58:	00100020 	.word	0x00100020

0801ff5c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ff5c:	b480      	push	{r7}
 801ff5e:	b085      	sub	sp, #20
 801ff60:	af00      	add	r7, sp, #0
 801ff62:	6078      	str	r0, [r7, #4]
 801ff64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801ff66:	2300      	movs	r3, #0
 801ff68:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801ff6a:	683b      	ldr	r3, [r7, #0]
 801ff6c:	2b0c      	cmp	r3, #12
 801ff6e:	d831      	bhi.n	801ffd4 <HAL_TIM_ReadCapturedValue+0x78>
 801ff70:	a201      	add	r2, pc, #4	; (adr r2, 801ff78 <HAL_TIM_ReadCapturedValue+0x1c>)
 801ff72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff76:	bf00      	nop
 801ff78:	0801ffad 	.word	0x0801ffad
 801ff7c:	0801ffd5 	.word	0x0801ffd5
 801ff80:	0801ffd5 	.word	0x0801ffd5
 801ff84:	0801ffd5 	.word	0x0801ffd5
 801ff88:	0801ffb7 	.word	0x0801ffb7
 801ff8c:	0801ffd5 	.word	0x0801ffd5
 801ff90:	0801ffd5 	.word	0x0801ffd5
 801ff94:	0801ffd5 	.word	0x0801ffd5
 801ff98:	0801ffc1 	.word	0x0801ffc1
 801ff9c:	0801ffd5 	.word	0x0801ffd5
 801ffa0:	0801ffd5 	.word	0x0801ffd5
 801ffa4:	0801ffd5 	.word	0x0801ffd5
 801ffa8:	0801ffcb 	.word	0x0801ffcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ffb2:	60fb      	str	r3, [r7, #12]

      break;
 801ffb4:	e00f      	b.n	801ffd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ffbc:	60fb      	str	r3, [r7, #12]

      break;
 801ffbe:	e00a      	b.n	801ffd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ffc6:	60fb      	str	r3, [r7, #12]

      break;
 801ffc8:	e005      	b.n	801ffd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801ffca:	687b      	ldr	r3, [r7, #4]
 801ffcc:	681b      	ldr	r3, [r3, #0]
 801ffce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ffd0:	60fb      	str	r3, [r7, #12]

      break;
 801ffd2:	e000      	b.n	801ffd6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801ffd4:	bf00      	nop
  }

  return tmpreg;
 801ffd6:	68fb      	ldr	r3, [r7, #12]
}
 801ffd8:	4618      	mov	r0, r3
 801ffda:	3714      	adds	r7, #20
 801ffdc:	46bd      	mov	sp, r7
 801ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffe2:	4770      	bx	lr

0801ffe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801ffe4:	b480      	push	{r7}
 801ffe6:	b083      	sub	sp, #12
 801ffe8:	af00      	add	r7, sp, #0
 801ffea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801ffec:	bf00      	nop
 801ffee:	370c      	adds	r7, #12
 801fff0:	46bd      	mov	sp, r7
 801fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fff6:	4770      	bx	lr

0801fff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801fff8:	b480      	push	{r7}
 801fffa:	b083      	sub	sp, #12
 801fffc:	af00      	add	r7, sp, #0
 801fffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8020000:	bf00      	nop
 8020002:	370c      	adds	r7, #12
 8020004:	46bd      	mov	sp, r7
 8020006:	f85d 7b04 	ldr.w	r7, [sp], #4
 802000a:	4770      	bx	lr

0802000c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802000c:	b480      	push	{r7}
 802000e:	b083      	sub	sp, #12
 8020010:	af00      	add	r7, sp, #0
 8020012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8020014:	bf00      	nop
 8020016:	370c      	adds	r7, #12
 8020018:	46bd      	mov	sp, r7
 802001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802001e:	4770      	bx	lr

08020020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8020020:	b480      	push	{r7}
 8020022:	b085      	sub	sp, #20
 8020024:	af00      	add	r7, sp, #0
 8020026:	6078      	str	r0, [r7, #4]
 8020028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	681b      	ldr	r3, [r3, #0]
 802002e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	4a40      	ldr	r2, [pc, #256]	; (8020134 <TIM_Base_SetConfig+0x114>)
 8020034:	4293      	cmp	r3, r2
 8020036:	d013      	beq.n	8020060 <TIM_Base_SetConfig+0x40>
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802003e:	d00f      	beq.n	8020060 <TIM_Base_SetConfig+0x40>
 8020040:	687b      	ldr	r3, [r7, #4]
 8020042:	4a3d      	ldr	r2, [pc, #244]	; (8020138 <TIM_Base_SetConfig+0x118>)
 8020044:	4293      	cmp	r3, r2
 8020046:	d00b      	beq.n	8020060 <TIM_Base_SetConfig+0x40>
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	4a3c      	ldr	r2, [pc, #240]	; (802013c <TIM_Base_SetConfig+0x11c>)
 802004c:	4293      	cmp	r3, r2
 802004e:	d007      	beq.n	8020060 <TIM_Base_SetConfig+0x40>
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	4a3b      	ldr	r2, [pc, #236]	; (8020140 <TIM_Base_SetConfig+0x120>)
 8020054:	4293      	cmp	r3, r2
 8020056:	d003      	beq.n	8020060 <TIM_Base_SetConfig+0x40>
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	4a3a      	ldr	r2, [pc, #232]	; (8020144 <TIM_Base_SetConfig+0x124>)
 802005c:	4293      	cmp	r3, r2
 802005e:	d108      	bne.n	8020072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020060:	68fb      	ldr	r3, [r7, #12]
 8020062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020068:	683b      	ldr	r3, [r7, #0]
 802006a:	685b      	ldr	r3, [r3, #4]
 802006c:	68fa      	ldr	r2, [r7, #12]
 802006e:	4313      	orrs	r3, r2
 8020070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	4a2f      	ldr	r2, [pc, #188]	; (8020134 <TIM_Base_SetConfig+0x114>)
 8020076:	4293      	cmp	r3, r2
 8020078:	d01f      	beq.n	80200ba <TIM_Base_SetConfig+0x9a>
 802007a:	687b      	ldr	r3, [r7, #4]
 802007c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020080:	d01b      	beq.n	80200ba <TIM_Base_SetConfig+0x9a>
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	4a2c      	ldr	r2, [pc, #176]	; (8020138 <TIM_Base_SetConfig+0x118>)
 8020086:	4293      	cmp	r3, r2
 8020088:	d017      	beq.n	80200ba <TIM_Base_SetConfig+0x9a>
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	4a2b      	ldr	r2, [pc, #172]	; (802013c <TIM_Base_SetConfig+0x11c>)
 802008e:	4293      	cmp	r3, r2
 8020090:	d013      	beq.n	80200ba <TIM_Base_SetConfig+0x9a>
 8020092:	687b      	ldr	r3, [r7, #4]
 8020094:	4a2a      	ldr	r2, [pc, #168]	; (8020140 <TIM_Base_SetConfig+0x120>)
 8020096:	4293      	cmp	r3, r2
 8020098:	d00f      	beq.n	80200ba <TIM_Base_SetConfig+0x9a>
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	4a29      	ldr	r2, [pc, #164]	; (8020144 <TIM_Base_SetConfig+0x124>)
 802009e:	4293      	cmp	r3, r2
 80200a0:	d00b      	beq.n	80200ba <TIM_Base_SetConfig+0x9a>
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	4a28      	ldr	r2, [pc, #160]	; (8020148 <TIM_Base_SetConfig+0x128>)
 80200a6:	4293      	cmp	r3, r2
 80200a8:	d007      	beq.n	80200ba <TIM_Base_SetConfig+0x9a>
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	4a27      	ldr	r2, [pc, #156]	; (802014c <TIM_Base_SetConfig+0x12c>)
 80200ae:	4293      	cmp	r3, r2
 80200b0:	d003      	beq.n	80200ba <TIM_Base_SetConfig+0x9a>
 80200b2:	687b      	ldr	r3, [r7, #4]
 80200b4:	4a26      	ldr	r2, [pc, #152]	; (8020150 <TIM_Base_SetConfig+0x130>)
 80200b6:	4293      	cmp	r3, r2
 80200b8:	d108      	bne.n	80200cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80200ba:	68fb      	ldr	r3, [r7, #12]
 80200bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80200c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80200c2:	683b      	ldr	r3, [r7, #0]
 80200c4:	68db      	ldr	r3, [r3, #12]
 80200c6:	68fa      	ldr	r2, [r7, #12]
 80200c8:	4313      	orrs	r3, r2
 80200ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80200cc:	68fb      	ldr	r3, [r7, #12]
 80200ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80200d2:	683b      	ldr	r3, [r7, #0]
 80200d4:	695b      	ldr	r3, [r3, #20]
 80200d6:	4313      	orrs	r3, r2
 80200d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	68fa      	ldr	r2, [r7, #12]
 80200de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80200e0:	683b      	ldr	r3, [r7, #0]
 80200e2:	689a      	ldr	r2, [r3, #8]
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80200e8:	683b      	ldr	r3, [r7, #0]
 80200ea:	681a      	ldr	r2, [r3, #0]
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80200f0:	687b      	ldr	r3, [r7, #4]
 80200f2:	4a10      	ldr	r2, [pc, #64]	; (8020134 <TIM_Base_SetConfig+0x114>)
 80200f4:	4293      	cmp	r3, r2
 80200f6:	d00f      	beq.n	8020118 <TIM_Base_SetConfig+0xf8>
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	4a12      	ldr	r2, [pc, #72]	; (8020144 <TIM_Base_SetConfig+0x124>)
 80200fc:	4293      	cmp	r3, r2
 80200fe:	d00b      	beq.n	8020118 <TIM_Base_SetConfig+0xf8>
 8020100:	687b      	ldr	r3, [r7, #4]
 8020102:	4a11      	ldr	r2, [pc, #68]	; (8020148 <TIM_Base_SetConfig+0x128>)
 8020104:	4293      	cmp	r3, r2
 8020106:	d007      	beq.n	8020118 <TIM_Base_SetConfig+0xf8>
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	4a10      	ldr	r2, [pc, #64]	; (802014c <TIM_Base_SetConfig+0x12c>)
 802010c:	4293      	cmp	r3, r2
 802010e:	d003      	beq.n	8020118 <TIM_Base_SetConfig+0xf8>
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	4a0f      	ldr	r2, [pc, #60]	; (8020150 <TIM_Base_SetConfig+0x130>)
 8020114:	4293      	cmp	r3, r2
 8020116:	d103      	bne.n	8020120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020118:	683b      	ldr	r3, [r7, #0]
 802011a:	691a      	ldr	r2, [r3, #16]
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	2201      	movs	r2, #1
 8020124:	615a      	str	r2, [r3, #20]
}
 8020126:	bf00      	nop
 8020128:	3714      	adds	r7, #20
 802012a:	46bd      	mov	sp, r7
 802012c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020130:	4770      	bx	lr
 8020132:	bf00      	nop
 8020134:	40010000 	.word	0x40010000
 8020138:	40000400 	.word	0x40000400
 802013c:	40000800 	.word	0x40000800
 8020140:	40000c00 	.word	0x40000c00
 8020144:	40010400 	.word	0x40010400
 8020148:	40014000 	.word	0x40014000
 802014c:	40014400 	.word	0x40014400
 8020150:	40014800 	.word	0x40014800

08020154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020154:	b480      	push	{r7}
 8020156:	b087      	sub	sp, #28
 8020158:	af00      	add	r7, sp, #0
 802015a:	6078      	str	r0, [r7, #4]
 802015c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	6a1b      	ldr	r3, [r3, #32]
 8020162:	f023 0201 	bic.w	r2, r3, #1
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	6a1b      	ldr	r3, [r3, #32]
 802016e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020170:	687b      	ldr	r3, [r7, #4]
 8020172:	685b      	ldr	r3, [r3, #4]
 8020174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	699b      	ldr	r3, [r3, #24]
 802017a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802017c:	68fa      	ldr	r2, [r7, #12]
 802017e:	4b37      	ldr	r3, [pc, #220]	; (802025c <TIM_OC1_SetConfig+0x108>)
 8020180:	4013      	ands	r3, r2
 8020182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020184:	68fb      	ldr	r3, [r7, #12]
 8020186:	f023 0303 	bic.w	r3, r3, #3
 802018a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802018c:	683b      	ldr	r3, [r7, #0]
 802018e:	681b      	ldr	r3, [r3, #0]
 8020190:	68fa      	ldr	r2, [r7, #12]
 8020192:	4313      	orrs	r3, r2
 8020194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020196:	697b      	ldr	r3, [r7, #20]
 8020198:	f023 0302 	bic.w	r3, r3, #2
 802019c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802019e:	683b      	ldr	r3, [r7, #0]
 80201a0:	689b      	ldr	r3, [r3, #8]
 80201a2:	697a      	ldr	r2, [r7, #20]
 80201a4:	4313      	orrs	r3, r2
 80201a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	4a2d      	ldr	r2, [pc, #180]	; (8020260 <TIM_OC1_SetConfig+0x10c>)
 80201ac:	4293      	cmp	r3, r2
 80201ae:	d00f      	beq.n	80201d0 <TIM_OC1_SetConfig+0x7c>
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	4a2c      	ldr	r2, [pc, #176]	; (8020264 <TIM_OC1_SetConfig+0x110>)
 80201b4:	4293      	cmp	r3, r2
 80201b6:	d00b      	beq.n	80201d0 <TIM_OC1_SetConfig+0x7c>
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	4a2b      	ldr	r2, [pc, #172]	; (8020268 <TIM_OC1_SetConfig+0x114>)
 80201bc:	4293      	cmp	r3, r2
 80201be:	d007      	beq.n	80201d0 <TIM_OC1_SetConfig+0x7c>
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	4a2a      	ldr	r2, [pc, #168]	; (802026c <TIM_OC1_SetConfig+0x118>)
 80201c4:	4293      	cmp	r3, r2
 80201c6:	d003      	beq.n	80201d0 <TIM_OC1_SetConfig+0x7c>
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	4a29      	ldr	r2, [pc, #164]	; (8020270 <TIM_OC1_SetConfig+0x11c>)
 80201cc:	4293      	cmp	r3, r2
 80201ce:	d10c      	bne.n	80201ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80201d0:	697b      	ldr	r3, [r7, #20]
 80201d2:	f023 0308 	bic.w	r3, r3, #8
 80201d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80201d8:	683b      	ldr	r3, [r7, #0]
 80201da:	68db      	ldr	r3, [r3, #12]
 80201dc:	697a      	ldr	r2, [r7, #20]
 80201de:	4313      	orrs	r3, r2
 80201e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80201e2:	697b      	ldr	r3, [r7, #20]
 80201e4:	f023 0304 	bic.w	r3, r3, #4
 80201e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	4a1c      	ldr	r2, [pc, #112]	; (8020260 <TIM_OC1_SetConfig+0x10c>)
 80201ee:	4293      	cmp	r3, r2
 80201f0:	d00f      	beq.n	8020212 <TIM_OC1_SetConfig+0xbe>
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	4a1b      	ldr	r2, [pc, #108]	; (8020264 <TIM_OC1_SetConfig+0x110>)
 80201f6:	4293      	cmp	r3, r2
 80201f8:	d00b      	beq.n	8020212 <TIM_OC1_SetConfig+0xbe>
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	4a1a      	ldr	r2, [pc, #104]	; (8020268 <TIM_OC1_SetConfig+0x114>)
 80201fe:	4293      	cmp	r3, r2
 8020200:	d007      	beq.n	8020212 <TIM_OC1_SetConfig+0xbe>
 8020202:	687b      	ldr	r3, [r7, #4]
 8020204:	4a19      	ldr	r2, [pc, #100]	; (802026c <TIM_OC1_SetConfig+0x118>)
 8020206:	4293      	cmp	r3, r2
 8020208:	d003      	beq.n	8020212 <TIM_OC1_SetConfig+0xbe>
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	4a18      	ldr	r2, [pc, #96]	; (8020270 <TIM_OC1_SetConfig+0x11c>)
 802020e:	4293      	cmp	r3, r2
 8020210:	d111      	bne.n	8020236 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020212:	693b      	ldr	r3, [r7, #16]
 8020214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802021a:	693b      	ldr	r3, [r7, #16]
 802021c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020222:	683b      	ldr	r3, [r7, #0]
 8020224:	695b      	ldr	r3, [r3, #20]
 8020226:	693a      	ldr	r2, [r7, #16]
 8020228:	4313      	orrs	r3, r2
 802022a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802022c:	683b      	ldr	r3, [r7, #0]
 802022e:	699b      	ldr	r3, [r3, #24]
 8020230:	693a      	ldr	r2, [r7, #16]
 8020232:	4313      	orrs	r3, r2
 8020234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	693a      	ldr	r2, [r7, #16]
 802023a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	68fa      	ldr	r2, [r7, #12]
 8020240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020242:	683b      	ldr	r3, [r7, #0]
 8020244:	685a      	ldr	r2, [r3, #4]
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	697a      	ldr	r2, [r7, #20]
 802024e:	621a      	str	r2, [r3, #32]
}
 8020250:	bf00      	nop
 8020252:	371c      	adds	r7, #28
 8020254:	46bd      	mov	sp, r7
 8020256:	f85d 7b04 	ldr.w	r7, [sp], #4
 802025a:	4770      	bx	lr
 802025c:	fffeff8f 	.word	0xfffeff8f
 8020260:	40010000 	.word	0x40010000
 8020264:	40010400 	.word	0x40010400
 8020268:	40014000 	.word	0x40014000
 802026c:	40014400 	.word	0x40014400
 8020270:	40014800 	.word	0x40014800

08020274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020274:	b480      	push	{r7}
 8020276:	b087      	sub	sp, #28
 8020278:	af00      	add	r7, sp, #0
 802027a:	6078      	str	r0, [r7, #4]
 802027c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	6a1b      	ldr	r3, [r3, #32]
 8020282:	f023 0210 	bic.w	r2, r3, #16
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	6a1b      	ldr	r3, [r3, #32]
 802028e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020290:	687b      	ldr	r3, [r7, #4]
 8020292:	685b      	ldr	r3, [r3, #4]
 8020294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	699b      	ldr	r3, [r3, #24]
 802029a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802029c:	68fa      	ldr	r2, [r7, #12]
 802029e:	4b34      	ldr	r3, [pc, #208]	; (8020370 <TIM_OC2_SetConfig+0xfc>)
 80202a0:	4013      	ands	r3, r2
 80202a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80202a4:	68fb      	ldr	r3, [r7, #12]
 80202a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80202aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80202ac:	683b      	ldr	r3, [r7, #0]
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	021b      	lsls	r3, r3, #8
 80202b2:	68fa      	ldr	r2, [r7, #12]
 80202b4:	4313      	orrs	r3, r2
 80202b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80202b8:	697b      	ldr	r3, [r7, #20]
 80202ba:	f023 0320 	bic.w	r3, r3, #32
 80202be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80202c0:	683b      	ldr	r3, [r7, #0]
 80202c2:	689b      	ldr	r3, [r3, #8]
 80202c4:	011b      	lsls	r3, r3, #4
 80202c6:	697a      	ldr	r2, [r7, #20]
 80202c8:	4313      	orrs	r3, r2
 80202ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	4a29      	ldr	r2, [pc, #164]	; (8020374 <TIM_OC2_SetConfig+0x100>)
 80202d0:	4293      	cmp	r3, r2
 80202d2:	d003      	beq.n	80202dc <TIM_OC2_SetConfig+0x68>
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	4a28      	ldr	r2, [pc, #160]	; (8020378 <TIM_OC2_SetConfig+0x104>)
 80202d8:	4293      	cmp	r3, r2
 80202da:	d10d      	bne.n	80202f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80202dc:	697b      	ldr	r3, [r7, #20]
 80202de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80202e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80202e4:	683b      	ldr	r3, [r7, #0]
 80202e6:	68db      	ldr	r3, [r3, #12]
 80202e8:	011b      	lsls	r3, r3, #4
 80202ea:	697a      	ldr	r2, [r7, #20]
 80202ec:	4313      	orrs	r3, r2
 80202ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80202f0:	697b      	ldr	r3, [r7, #20]
 80202f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80202f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	4a1e      	ldr	r2, [pc, #120]	; (8020374 <TIM_OC2_SetConfig+0x100>)
 80202fc:	4293      	cmp	r3, r2
 80202fe:	d00f      	beq.n	8020320 <TIM_OC2_SetConfig+0xac>
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	4a1d      	ldr	r2, [pc, #116]	; (8020378 <TIM_OC2_SetConfig+0x104>)
 8020304:	4293      	cmp	r3, r2
 8020306:	d00b      	beq.n	8020320 <TIM_OC2_SetConfig+0xac>
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	4a1c      	ldr	r2, [pc, #112]	; (802037c <TIM_OC2_SetConfig+0x108>)
 802030c:	4293      	cmp	r3, r2
 802030e:	d007      	beq.n	8020320 <TIM_OC2_SetConfig+0xac>
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	4a1b      	ldr	r2, [pc, #108]	; (8020380 <TIM_OC2_SetConfig+0x10c>)
 8020314:	4293      	cmp	r3, r2
 8020316:	d003      	beq.n	8020320 <TIM_OC2_SetConfig+0xac>
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	4a1a      	ldr	r2, [pc, #104]	; (8020384 <TIM_OC2_SetConfig+0x110>)
 802031c:	4293      	cmp	r3, r2
 802031e:	d113      	bne.n	8020348 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020320:	693b      	ldr	r3, [r7, #16]
 8020322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020328:	693b      	ldr	r3, [r7, #16]
 802032a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802032e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020330:	683b      	ldr	r3, [r7, #0]
 8020332:	695b      	ldr	r3, [r3, #20]
 8020334:	009b      	lsls	r3, r3, #2
 8020336:	693a      	ldr	r2, [r7, #16]
 8020338:	4313      	orrs	r3, r2
 802033a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802033c:	683b      	ldr	r3, [r7, #0]
 802033e:	699b      	ldr	r3, [r3, #24]
 8020340:	009b      	lsls	r3, r3, #2
 8020342:	693a      	ldr	r2, [r7, #16]
 8020344:	4313      	orrs	r3, r2
 8020346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	693a      	ldr	r2, [r7, #16]
 802034c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802034e:	687b      	ldr	r3, [r7, #4]
 8020350:	68fa      	ldr	r2, [r7, #12]
 8020352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020354:	683b      	ldr	r3, [r7, #0]
 8020356:	685a      	ldr	r2, [r3, #4]
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	697a      	ldr	r2, [r7, #20]
 8020360:	621a      	str	r2, [r3, #32]
}
 8020362:	bf00      	nop
 8020364:	371c      	adds	r7, #28
 8020366:	46bd      	mov	sp, r7
 8020368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802036c:	4770      	bx	lr
 802036e:	bf00      	nop
 8020370:	feff8fff 	.word	0xfeff8fff
 8020374:	40010000 	.word	0x40010000
 8020378:	40010400 	.word	0x40010400
 802037c:	40014000 	.word	0x40014000
 8020380:	40014400 	.word	0x40014400
 8020384:	40014800 	.word	0x40014800

08020388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020388:	b480      	push	{r7}
 802038a:	b087      	sub	sp, #28
 802038c:	af00      	add	r7, sp, #0
 802038e:	6078      	str	r0, [r7, #4]
 8020390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	6a1b      	ldr	r3, [r3, #32]
 8020396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802039a:	687b      	ldr	r3, [r7, #4]
 802039c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	6a1b      	ldr	r3, [r3, #32]
 80203a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80203a4:	687b      	ldr	r3, [r7, #4]
 80203a6:	685b      	ldr	r3, [r3, #4]
 80203a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	69db      	ldr	r3, [r3, #28]
 80203ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80203b0:	68fb      	ldr	r3, [r7, #12]
 80203b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80203b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80203b8:	68fb      	ldr	r3, [r7, #12]
 80203ba:	f023 0303 	bic.w	r3, r3, #3
 80203be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80203c0:	683b      	ldr	r3, [r7, #0]
 80203c2:	681b      	ldr	r3, [r3, #0]
 80203c4:	68fa      	ldr	r2, [r7, #12]
 80203c6:	4313      	orrs	r3, r2
 80203c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80203ca:	697b      	ldr	r3, [r7, #20]
 80203cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80203d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80203d2:	683b      	ldr	r3, [r7, #0]
 80203d4:	689b      	ldr	r3, [r3, #8]
 80203d6:	021b      	lsls	r3, r3, #8
 80203d8:	697a      	ldr	r2, [r7, #20]
 80203da:	4313      	orrs	r3, r2
 80203dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80203de:	687b      	ldr	r3, [r7, #4]
 80203e0:	4a27      	ldr	r2, [pc, #156]	; (8020480 <TIM_OC3_SetConfig+0xf8>)
 80203e2:	4293      	cmp	r3, r2
 80203e4:	d003      	beq.n	80203ee <TIM_OC3_SetConfig+0x66>
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	4a26      	ldr	r2, [pc, #152]	; (8020484 <TIM_OC3_SetConfig+0xfc>)
 80203ea:	4293      	cmp	r3, r2
 80203ec:	d10d      	bne.n	802040a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80203ee:	697b      	ldr	r3, [r7, #20]
 80203f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80203f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80203f6:	683b      	ldr	r3, [r7, #0]
 80203f8:	68db      	ldr	r3, [r3, #12]
 80203fa:	021b      	lsls	r3, r3, #8
 80203fc:	697a      	ldr	r2, [r7, #20]
 80203fe:	4313      	orrs	r3, r2
 8020400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020402:	697b      	ldr	r3, [r7, #20]
 8020404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	4a1c      	ldr	r2, [pc, #112]	; (8020480 <TIM_OC3_SetConfig+0xf8>)
 802040e:	4293      	cmp	r3, r2
 8020410:	d00f      	beq.n	8020432 <TIM_OC3_SetConfig+0xaa>
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	4a1b      	ldr	r2, [pc, #108]	; (8020484 <TIM_OC3_SetConfig+0xfc>)
 8020416:	4293      	cmp	r3, r2
 8020418:	d00b      	beq.n	8020432 <TIM_OC3_SetConfig+0xaa>
 802041a:	687b      	ldr	r3, [r7, #4]
 802041c:	4a1a      	ldr	r2, [pc, #104]	; (8020488 <TIM_OC3_SetConfig+0x100>)
 802041e:	4293      	cmp	r3, r2
 8020420:	d007      	beq.n	8020432 <TIM_OC3_SetConfig+0xaa>
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	4a19      	ldr	r2, [pc, #100]	; (802048c <TIM_OC3_SetConfig+0x104>)
 8020426:	4293      	cmp	r3, r2
 8020428:	d003      	beq.n	8020432 <TIM_OC3_SetConfig+0xaa>
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	4a18      	ldr	r2, [pc, #96]	; (8020490 <TIM_OC3_SetConfig+0x108>)
 802042e:	4293      	cmp	r3, r2
 8020430:	d113      	bne.n	802045a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020432:	693b      	ldr	r3, [r7, #16]
 8020434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802043a:	693b      	ldr	r3, [r7, #16]
 802043c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020442:	683b      	ldr	r3, [r7, #0]
 8020444:	695b      	ldr	r3, [r3, #20]
 8020446:	011b      	lsls	r3, r3, #4
 8020448:	693a      	ldr	r2, [r7, #16]
 802044a:	4313      	orrs	r3, r2
 802044c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802044e:	683b      	ldr	r3, [r7, #0]
 8020450:	699b      	ldr	r3, [r3, #24]
 8020452:	011b      	lsls	r3, r3, #4
 8020454:	693a      	ldr	r2, [r7, #16]
 8020456:	4313      	orrs	r3, r2
 8020458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	693a      	ldr	r2, [r7, #16]
 802045e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020460:	687b      	ldr	r3, [r7, #4]
 8020462:	68fa      	ldr	r2, [r7, #12]
 8020464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020466:	683b      	ldr	r3, [r7, #0]
 8020468:	685a      	ldr	r2, [r3, #4]
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	697a      	ldr	r2, [r7, #20]
 8020472:	621a      	str	r2, [r3, #32]
}
 8020474:	bf00      	nop
 8020476:	371c      	adds	r7, #28
 8020478:	46bd      	mov	sp, r7
 802047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802047e:	4770      	bx	lr
 8020480:	40010000 	.word	0x40010000
 8020484:	40010400 	.word	0x40010400
 8020488:	40014000 	.word	0x40014000
 802048c:	40014400 	.word	0x40014400
 8020490:	40014800 	.word	0x40014800

08020494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020494:	b480      	push	{r7}
 8020496:	b087      	sub	sp, #28
 8020498:	af00      	add	r7, sp, #0
 802049a:	6078      	str	r0, [r7, #4]
 802049c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802049e:	687b      	ldr	r3, [r7, #4]
 80204a0:	6a1b      	ldr	r3, [r3, #32]
 80204a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80204a6:	687b      	ldr	r3, [r7, #4]
 80204a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	6a1b      	ldr	r3, [r3, #32]
 80204ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	685b      	ldr	r3, [r3, #4]
 80204b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80204b6:	687b      	ldr	r3, [r7, #4]
 80204b8:	69db      	ldr	r3, [r3, #28]
 80204ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80204bc:	68fb      	ldr	r3, [r7, #12]
 80204be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80204c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80204c4:	68fb      	ldr	r3, [r7, #12]
 80204c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80204ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80204cc:	683b      	ldr	r3, [r7, #0]
 80204ce:	681b      	ldr	r3, [r3, #0]
 80204d0:	021b      	lsls	r3, r3, #8
 80204d2:	68fa      	ldr	r2, [r7, #12]
 80204d4:	4313      	orrs	r3, r2
 80204d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80204d8:	693b      	ldr	r3, [r7, #16]
 80204da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80204de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80204e0:	683b      	ldr	r3, [r7, #0]
 80204e2:	689b      	ldr	r3, [r3, #8]
 80204e4:	031b      	lsls	r3, r3, #12
 80204e6:	693a      	ldr	r2, [r7, #16]
 80204e8:	4313      	orrs	r3, r2
 80204ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	4a18      	ldr	r2, [pc, #96]	; (8020550 <TIM_OC4_SetConfig+0xbc>)
 80204f0:	4293      	cmp	r3, r2
 80204f2:	d00f      	beq.n	8020514 <TIM_OC4_SetConfig+0x80>
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	4a17      	ldr	r2, [pc, #92]	; (8020554 <TIM_OC4_SetConfig+0xc0>)
 80204f8:	4293      	cmp	r3, r2
 80204fa:	d00b      	beq.n	8020514 <TIM_OC4_SetConfig+0x80>
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	4a16      	ldr	r2, [pc, #88]	; (8020558 <TIM_OC4_SetConfig+0xc4>)
 8020500:	4293      	cmp	r3, r2
 8020502:	d007      	beq.n	8020514 <TIM_OC4_SetConfig+0x80>
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	4a15      	ldr	r2, [pc, #84]	; (802055c <TIM_OC4_SetConfig+0xc8>)
 8020508:	4293      	cmp	r3, r2
 802050a:	d003      	beq.n	8020514 <TIM_OC4_SetConfig+0x80>
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	4a14      	ldr	r2, [pc, #80]	; (8020560 <TIM_OC4_SetConfig+0xcc>)
 8020510:	4293      	cmp	r3, r2
 8020512:	d109      	bne.n	8020528 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020514:	697b      	ldr	r3, [r7, #20]
 8020516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802051a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802051c:	683b      	ldr	r3, [r7, #0]
 802051e:	695b      	ldr	r3, [r3, #20]
 8020520:	019b      	lsls	r3, r3, #6
 8020522:	697a      	ldr	r2, [r7, #20]
 8020524:	4313      	orrs	r3, r2
 8020526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	697a      	ldr	r2, [r7, #20]
 802052c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802052e:	687b      	ldr	r3, [r7, #4]
 8020530:	68fa      	ldr	r2, [r7, #12]
 8020532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020534:	683b      	ldr	r3, [r7, #0]
 8020536:	685a      	ldr	r2, [r3, #4]
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802053c:	687b      	ldr	r3, [r7, #4]
 802053e:	693a      	ldr	r2, [r7, #16]
 8020540:	621a      	str	r2, [r3, #32]
}
 8020542:	bf00      	nop
 8020544:	371c      	adds	r7, #28
 8020546:	46bd      	mov	sp, r7
 8020548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802054c:	4770      	bx	lr
 802054e:	bf00      	nop
 8020550:	40010000 	.word	0x40010000
 8020554:	40010400 	.word	0x40010400
 8020558:	40014000 	.word	0x40014000
 802055c:	40014400 	.word	0x40014400
 8020560:	40014800 	.word	0x40014800

08020564 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8020564:	b480      	push	{r7}
 8020566:	b087      	sub	sp, #28
 8020568:	af00      	add	r7, sp, #0
 802056a:	6078      	str	r0, [r7, #4]
 802056c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	6a1b      	ldr	r3, [r3, #32]
 8020572:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	6a1b      	ldr	r3, [r3, #32]
 802057e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020580:	687b      	ldr	r3, [r7, #4]
 8020582:	685b      	ldr	r3, [r3, #4]
 8020584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020586:	687b      	ldr	r3, [r7, #4]
 8020588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802058a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 802058c:	68fb      	ldr	r3, [r7, #12]
 802058e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020594:	683b      	ldr	r3, [r7, #0]
 8020596:	681b      	ldr	r3, [r3, #0]
 8020598:	68fa      	ldr	r2, [r7, #12]
 802059a:	4313      	orrs	r3, r2
 802059c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 802059e:	693b      	ldr	r3, [r7, #16]
 80205a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80205a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80205a6:	683b      	ldr	r3, [r7, #0]
 80205a8:	689b      	ldr	r3, [r3, #8]
 80205aa:	041b      	lsls	r3, r3, #16
 80205ac:	693a      	ldr	r2, [r7, #16]
 80205ae:	4313      	orrs	r3, r2
 80205b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80205b2:	687b      	ldr	r3, [r7, #4]
 80205b4:	4a17      	ldr	r2, [pc, #92]	; (8020614 <TIM_OC5_SetConfig+0xb0>)
 80205b6:	4293      	cmp	r3, r2
 80205b8:	d00f      	beq.n	80205da <TIM_OC5_SetConfig+0x76>
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	4a16      	ldr	r2, [pc, #88]	; (8020618 <TIM_OC5_SetConfig+0xb4>)
 80205be:	4293      	cmp	r3, r2
 80205c0:	d00b      	beq.n	80205da <TIM_OC5_SetConfig+0x76>
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	4a15      	ldr	r2, [pc, #84]	; (802061c <TIM_OC5_SetConfig+0xb8>)
 80205c6:	4293      	cmp	r3, r2
 80205c8:	d007      	beq.n	80205da <TIM_OC5_SetConfig+0x76>
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	4a14      	ldr	r2, [pc, #80]	; (8020620 <TIM_OC5_SetConfig+0xbc>)
 80205ce:	4293      	cmp	r3, r2
 80205d0:	d003      	beq.n	80205da <TIM_OC5_SetConfig+0x76>
 80205d2:	687b      	ldr	r3, [r7, #4]
 80205d4:	4a13      	ldr	r2, [pc, #76]	; (8020624 <TIM_OC5_SetConfig+0xc0>)
 80205d6:	4293      	cmp	r3, r2
 80205d8:	d109      	bne.n	80205ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80205da:	697b      	ldr	r3, [r7, #20]
 80205dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80205e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80205e2:	683b      	ldr	r3, [r7, #0]
 80205e4:	695b      	ldr	r3, [r3, #20]
 80205e6:	021b      	lsls	r3, r3, #8
 80205e8:	697a      	ldr	r2, [r7, #20]
 80205ea:	4313      	orrs	r3, r2
 80205ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	697a      	ldr	r2, [r7, #20]
 80205f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	68fa      	ldr	r2, [r7, #12]
 80205f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80205fa:	683b      	ldr	r3, [r7, #0]
 80205fc:	685a      	ldr	r2, [r3, #4]
 80205fe:	687b      	ldr	r3, [r7, #4]
 8020600:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	693a      	ldr	r2, [r7, #16]
 8020606:	621a      	str	r2, [r3, #32]
}
 8020608:	bf00      	nop
 802060a:	371c      	adds	r7, #28
 802060c:	46bd      	mov	sp, r7
 802060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020612:	4770      	bx	lr
 8020614:	40010000 	.word	0x40010000
 8020618:	40010400 	.word	0x40010400
 802061c:	40014000 	.word	0x40014000
 8020620:	40014400 	.word	0x40014400
 8020624:	40014800 	.word	0x40014800

08020628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8020628:	b480      	push	{r7}
 802062a:	b087      	sub	sp, #28
 802062c:	af00      	add	r7, sp, #0
 802062e:	6078      	str	r0, [r7, #4]
 8020630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020632:	687b      	ldr	r3, [r7, #4]
 8020634:	6a1b      	ldr	r3, [r3, #32]
 8020636:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 802063a:	687b      	ldr	r3, [r7, #4]
 802063c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802063e:	687b      	ldr	r3, [r7, #4]
 8020640:	6a1b      	ldr	r3, [r3, #32]
 8020642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	685b      	ldr	r3, [r3, #4]
 8020648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 802064a:	687b      	ldr	r3, [r7, #4]
 802064c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802064e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8020650:	68fb      	ldr	r3, [r7, #12]
 8020652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020658:	683b      	ldr	r3, [r7, #0]
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	021b      	lsls	r3, r3, #8
 802065e:	68fa      	ldr	r2, [r7, #12]
 8020660:	4313      	orrs	r3, r2
 8020662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8020664:	693b      	ldr	r3, [r7, #16]
 8020666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802066a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 802066c:	683b      	ldr	r3, [r7, #0]
 802066e:	689b      	ldr	r3, [r3, #8]
 8020670:	051b      	lsls	r3, r3, #20
 8020672:	693a      	ldr	r2, [r7, #16]
 8020674:	4313      	orrs	r3, r2
 8020676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	4a18      	ldr	r2, [pc, #96]	; (80206dc <TIM_OC6_SetConfig+0xb4>)
 802067c:	4293      	cmp	r3, r2
 802067e:	d00f      	beq.n	80206a0 <TIM_OC6_SetConfig+0x78>
 8020680:	687b      	ldr	r3, [r7, #4]
 8020682:	4a17      	ldr	r2, [pc, #92]	; (80206e0 <TIM_OC6_SetConfig+0xb8>)
 8020684:	4293      	cmp	r3, r2
 8020686:	d00b      	beq.n	80206a0 <TIM_OC6_SetConfig+0x78>
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	4a16      	ldr	r2, [pc, #88]	; (80206e4 <TIM_OC6_SetConfig+0xbc>)
 802068c:	4293      	cmp	r3, r2
 802068e:	d007      	beq.n	80206a0 <TIM_OC6_SetConfig+0x78>
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	4a15      	ldr	r2, [pc, #84]	; (80206e8 <TIM_OC6_SetConfig+0xc0>)
 8020694:	4293      	cmp	r3, r2
 8020696:	d003      	beq.n	80206a0 <TIM_OC6_SetConfig+0x78>
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	4a14      	ldr	r2, [pc, #80]	; (80206ec <TIM_OC6_SetConfig+0xc4>)
 802069c:	4293      	cmp	r3, r2
 802069e:	d109      	bne.n	80206b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80206a0:	697b      	ldr	r3, [r7, #20]
 80206a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80206a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80206a8:	683b      	ldr	r3, [r7, #0]
 80206aa:	695b      	ldr	r3, [r3, #20]
 80206ac:	029b      	lsls	r3, r3, #10
 80206ae:	697a      	ldr	r2, [r7, #20]
 80206b0:	4313      	orrs	r3, r2
 80206b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	697a      	ldr	r2, [r7, #20]
 80206b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80206ba:	687b      	ldr	r3, [r7, #4]
 80206bc:	68fa      	ldr	r2, [r7, #12]
 80206be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80206c0:	683b      	ldr	r3, [r7, #0]
 80206c2:	685a      	ldr	r2, [r3, #4]
 80206c4:	687b      	ldr	r3, [r7, #4]
 80206c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	693a      	ldr	r2, [r7, #16]
 80206cc:	621a      	str	r2, [r3, #32]
}
 80206ce:	bf00      	nop
 80206d0:	371c      	adds	r7, #28
 80206d2:	46bd      	mov	sp, r7
 80206d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206d8:	4770      	bx	lr
 80206da:	bf00      	nop
 80206dc:	40010000 	.word	0x40010000
 80206e0:	40010400 	.word	0x40010400
 80206e4:	40014000 	.word	0x40014000
 80206e8:	40014400 	.word	0x40014400
 80206ec:	40014800 	.word	0x40014800

080206f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80206f0:	b480      	push	{r7}
 80206f2:	b087      	sub	sp, #28
 80206f4:	af00      	add	r7, sp, #0
 80206f6:	60f8      	str	r0, [r7, #12]
 80206f8:	60b9      	str	r1, [r7, #8]
 80206fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80206fc:	68fb      	ldr	r3, [r7, #12]
 80206fe:	6a1b      	ldr	r3, [r3, #32]
 8020700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020702:	68fb      	ldr	r3, [r7, #12]
 8020704:	6a1b      	ldr	r3, [r3, #32]
 8020706:	f023 0201 	bic.w	r2, r3, #1
 802070a:	68fb      	ldr	r3, [r7, #12]
 802070c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802070e:	68fb      	ldr	r3, [r7, #12]
 8020710:	699b      	ldr	r3, [r3, #24]
 8020712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020714:	693b      	ldr	r3, [r7, #16]
 8020716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802071a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	011b      	lsls	r3, r3, #4
 8020720:	693a      	ldr	r2, [r7, #16]
 8020722:	4313      	orrs	r3, r2
 8020724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020726:	697b      	ldr	r3, [r7, #20]
 8020728:	f023 030a 	bic.w	r3, r3, #10
 802072c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802072e:	697a      	ldr	r2, [r7, #20]
 8020730:	68bb      	ldr	r3, [r7, #8]
 8020732:	4313      	orrs	r3, r2
 8020734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020736:	68fb      	ldr	r3, [r7, #12]
 8020738:	693a      	ldr	r2, [r7, #16]
 802073a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802073c:	68fb      	ldr	r3, [r7, #12]
 802073e:	697a      	ldr	r2, [r7, #20]
 8020740:	621a      	str	r2, [r3, #32]
}
 8020742:	bf00      	nop
 8020744:	371c      	adds	r7, #28
 8020746:	46bd      	mov	sp, r7
 8020748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802074c:	4770      	bx	lr

0802074e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802074e:	b480      	push	{r7}
 8020750:	b087      	sub	sp, #28
 8020752:	af00      	add	r7, sp, #0
 8020754:	60f8      	str	r0, [r7, #12]
 8020756:	60b9      	str	r1, [r7, #8]
 8020758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802075a:	68fb      	ldr	r3, [r7, #12]
 802075c:	6a1b      	ldr	r3, [r3, #32]
 802075e:	f023 0210 	bic.w	r2, r3, #16
 8020762:	68fb      	ldr	r3, [r7, #12]
 8020764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	699b      	ldr	r3, [r3, #24]
 802076a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802076c:	68fb      	ldr	r3, [r7, #12]
 802076e:	6a1b      	ldr	r3, [r3, #32]
 8020770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020772:	697b      	ldr	r3, [r7, #20]
 8020774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802077a:	687b      	ldr	r3, [r7, #4]
 802077c:	031b      	lsls	r3, r3, #12
 802077e:	697a      	ldr	r2, [r7, #20]
 8020780:	4313      	orrs	r3, r2
 8020782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020784:	693b      	ldr	r3, [r7, #16]
 8020786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802078a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802078c:	68bb      	ldr	r3, [r7, #8]
 802078e:	011b      	lsls	r3, r3, #4
 8020790:	693a      	ldr	r2, [r7, #16]
 8020792:	4313      	orrs	r3, r2
 8020794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020796:	68fb      	ldr	r3, [r7, #12]
 8020798:	697a      	ldr	r2, [r7, #20]
 802079a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802079c:	68fb      	ldr	r3, [r7, #12]
 802079e:	693a      	ldr	r2, [r7, #16]
 80207a0:	621a      	str	r2, [r3, #32]
}
 80207a2:	bf00      	nop
 80207a4:	371c      	adds	r7, #28
 80207a6:	46bd      	mov	sp, r7
 80207a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ac:	4770      	bx	lr
	...

080207b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80207b0:	b480      	push	{r7}
 80207b2:	b085      	sub	sp, #20
 80207b4:	af00      	add	r7, sp, #0
 80207b6:	6078      	str	r0, [r7, #4]
 80207b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	689b      	ldr	r3, [r3, #8]
 80207be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80207c0:	68fa      	ldr	r2, [r7, #12]
 80207c2:	4b09      	ldr	r3, [pc, #36]	; (80207e8 <TIM_ITRx_SetConfig+0x38>)
 80207c4:	4013      	ands	r3, r2
 80207c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80207c8:	683a      	ldr	r2, [r7, #0]
 80207ca:	68fb      	ldr	r3, [r7, #12]
 80207cc:	4313      	orrs	r3, r2
 80207ce:	f043 0307 	orr.w	r3, r3, #7
 80207d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	68fa      	ldr	r2, [r7, #12]
 80207d8:	609a      	str	r2, [r3, #8]
}
 80207da:	bf00      	nop
 80207dc:	3714      	adds	r7, #20
 80207de:	46bd      	mov	sp, r7
 80207e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207e4:	4770      	bx	lr
 80207e6:	bf00      	nop
 80207e8:	ffcfff8f 	.word	0xffcfff8f

080207ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80207ec:	b480      	push	{r7}
 80207ee:	b087      	sub	sp, #28
 80207f0:	af00      	add	r7, sp, #0
 80207f2:	60f8      	str	r0, [r7, #12]
 80207f4:	60b9      	str	r1, [r7, #8]
 80207f6:	607a      	str	r2, [r7, #4]
 80207f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80207fa:	68fb      	ldr	r3, [r7, #12]
 80207fc:	689b      	ldr	r3, [r3, #8]
 80207fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020800:	697b      	ldr	r3, [r7, #20]
 8020802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020808:	683b      	ldr	r3, [r7, #0]
 802080a:	021a      	lsls	r2, r3, #8
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	431a      	orrs	r2, r3
 8020810:	68bb      	ldr	r3, [r7, #8]
 8020812:	4313      	orrs	r3, r2
 8020814:	697a      	ldr	r2, [r7, #20]
 8020816:	4313      	orrs	r3, r2
 8020818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	697a      	ldr	r2, [r7, #20]
 802081e:	609a      	str	r2, [r3, #8]
}
 8020820:	bf00      	nop
 8020822:	371c      	adds	r7, #28
 8020824:	46bd      	mov	sp, r7
 8020826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802082a:	4770      	bx	lr

0802082c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802082c:	b480      	push	{r7}
 802082e:	b087      	sub	sp, #28
 8020830:	af00      	add	r7, sp, #0
 8020832:	60f8      	str	r0, [r7, #12]
 8020834:	60b9      	str	r1, [r7, #8]
 8020836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020838:	68bb      	ldr	r3, [r7, #8]
 802083a:	f003 031f 	and.w	r3, r3, #31
 802083e:	2201      	movs	r2, #1
 8020840:	fa02 f303 	lsl.w	r3, r2, r3
 8020844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020846:	68fb      	ldr	r3, [r7, #12]
 8020848:	6a1a      	ldr	r2, [r3, #32]
 802084a:	697b      	ldr	r3, [r7, #20]
 802084c:	43db      	mvns	r3, r3
 802084e:	401a      	ands	r2, r3
 8020850:	68fb      	ldr	r3, [r7, #12]
 8020852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020854:	68fb      	ldr	r3, [r7, #12]
 8020856:	6a1a      	ldr	r2, [r3, #32]
 8020858:	68bb      	ldr	r3, [r7, #8]
 802085a:	f003 031f 	and.w	r3, r3, #31
 802085e:	6879      	ldr	r1, [r7, #4]
 8020860:	fa01 f303 	lsl.w	r3, r1, r3
 8020864:	431a      	orrs	r2, r3
 8020866:	68fb      	ldr	r3, [r7, #12]
 8020868:	621a      	str	r2, [r3, #32]
}
 802086a:	bf00      	nop
 802086c:	371c      	adds	r7, #28
 802086e:	46bd      	mov	sp, r7
 8020870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020874:	4770      	bx	lr
	...

08020878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020878:	b480      	push	{r7}
 802087a:	b085      	sub	sp, #20
 802087c:	af00      	add	r7, sp, #0
 802087e:	6078      	str	r0, [r7, #4]
 8020880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020888:	2b01      	cmp	r3, #1
 802088a:	d101      	bne.n	8020890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802088c:	2302      	movs	r3, #2
 802088e:	e068      	b.n	8020962 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	2201      	movs	r2, #1
 8020894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	2202      	movs	r2, #2
 802089c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	685b      	ldr	r3, [r3, #4]
 80208a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80208a8:	687b      	ldr	r3, [r7, #4]
 80208aa:	681b      	ldr	r3, [r3, #0]
 80208ac:	689b      	ldr	r3, [r3, #8]
 80208ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80208b0:	687b      	ldr	r3, [r7, #4]
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	4a2e      	ldr	r2, [pc, #184]	; (8020970 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80208b6:	4293      	cmp	r3, r2
 80208b8:	d004      	beq.n	80208c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	681b      	ldr	r3, [r3, #0]
 80208be:	4a2d      	ldr	r2, [pc, #180]	; (8020974 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80208c0:	4293      	cmp	r3, r2
 80208c2:	d108      	bne.n	80208d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80208c4:	68fb      	ldr	r3, [r7, #12]
 80208c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80208ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80208cc:	683b      	ldr	r3, [r7, #0]
 80208ce:	685b      	ldr	r3, [r3, #4]
 80208d0:	68fa      	ldr	r2, [r7, #12]
 80208d2:	4313      	orrs	r3, r2
 80208d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80208d6:	68fb      	ldr	r3, [r7, #12]
 80208d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80208dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80208de:	683b      	ldr	r3, [r7, #0]
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	68fa      	ldr	r2, [r7, #12]
 80208e4:	4313      	orrs	r3, r2
 80208e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	681b      	ldr	r3, [r3, #0]
 80208ec:	68fa      	ldr	r2, [r7, #12]
 80208ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80208f0:	687b      	ldr	r3, [r7, #4]
 80208f2:	681b      	ldr	r3, [r3, #0]
 80208f4:	4a1e      	ldr	r2, [pc, #120]	; (8020970 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80208f6:	4293      	cmp	r3, r2
 80208f8:	d01d      	beq.n	8020936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	681b      	ldr	r3, [r3, #0]
 80208fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020902:	d018      	beq.n	8020936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	4a1b      	ldr	r2, [pc, #108]	; (8020978 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802090a:	4293      	cmp	r3, r2
 802090c:	d013      	beq.n	8020936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	681b      	ldr	r3, [r3, #0]
 8020912:	4a1a      	ldr	r2, [pc, #104]	; (802097c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8020914:	4293      	cmp	r3, r2
 8020916:	d00e      	beq.n	8020936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8020918:	687b      	ldr	r3, [r7, #4]
 802091a:	681b      	ldr	r3, [r3, #0]
 802091c:	4a18      	ldr	r2, [pc, #96]	; (8020980 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802091e:	4293      	cmp	r3, r2
 8020920:	d009      	beq.n	8020936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8020922:	687b      	ldr	r3, [r7, #4]
 8020924:	681b      	ldr	r3, [r3, #0]
 8020926:	4a13      	ldr	r2, [pc, #76]	; (8020974 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8020928:	4293      	cmp	r3, r2
 802092a:	d004      	beq.n	8020936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 802092c:	687b      	ldr	r3, [r7, #4]
 802092e:	681b      	ldr	r3, [r3, #0]
 8020930:	4a14      	ldr	r2, [pc, #80]	; (8020984 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8020932:	4293      	cmp	r3, r2
 8020934:	d10c      	bne.n	8020950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020936:	68bb      	ldr	r3, [r7, #8]
 8020938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802093c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802093e:	683b      	ldr	r3, [r7, #0]
 8020940:	689b      	ldr	r3, [r3, #8]
 8020942:	68ba      	ldr	r2, [r7, #8]
 8020944:	4313      	orrs	r3, r2
 8020946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	681b      	ldr	r3, [r3, #0]
 802094c:	68ba      	ldr	r2, [r7, #8]
 802094e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020950:	687b      	ldr	r3, [r7, #4]
 8020952:	2201      	movs	r2, #1
 8020954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	2200      	movs	r2, #0
 802095c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020960:	2300      	movs	r3, #0
}
 8020962:	4618      	mov	r0, r3
 8020964:	3714      	adds	r7, #20
 8020966:	46bd      	mov	sp, r7
 8020968:	f85d 7b04 	ldr.w	r7, [sp], #4
 802096c:	4770      	bx	lr
 802096e:	bf00      	nop
 8020970:	40010000 	.word	0x40010000
 8020974:	40010400 	.word	0x40010400
 8020978:	40000400 	.word	0x40000400
 802097c:	40000800 	.word	0x40000800
 8020980:	40000c00 	.word	0x40000c00
 8020984:	40001800 	.word	0x40001800

08020988 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8020988:	b480      	push	{r7}
 802098a:	b085      	sub	sp, #20
 802098c:	af00      	add	r7, sp, #0
 802098e:	6078      	str	r0, [r7, #4]
 8020990:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8020992:	2300      	movs	r3, #0
 8020994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8020996:	687b      	ldr	r3, [r7, #4]
 8020998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802099c:	2b01      	cmp	r3, #1
 802099e:	d101      	bne.n	80209a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80209a0:	2302      	movs	r3, #2
 80209a2:	e065      	b.n	8020a70 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80209a4:	687b      	ldr	r3, [r7, #4]
 80209a6:	2201      	movs	r2, #1
 80209a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80209ac:	68fb      	ldr	r3, [r7, #12]
 80209ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80209b2:	683b      	ldr	r3, [r7, #0]
 80209b4:	68db      	ldr	r3, [r3, #12]
 80209b6:	4313      	orrs	r3, r2
 80209b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80209ba:	68fb      	ldr	r3, [r7, #12]
 80209bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80209c0:	683b      	ldr	r3, [r7, #0]
 80209c2:	689b      	ldr	r3, [r3, #8]
 80209c4:	4313      	orrs	r3, r2
 80209c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80209c8:	68fb      	ldr	r3, [r7, #12]
 80209ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80209ce:	683b      	ldr	r3, [r7, #0]
 80209d0:	685b      	ldr	r3, [r3, #4]
 80209d2:	4313      	orrs	r3, r2
 80209d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80209d6:	68fb      	ldr	r3, [r7, #12]
 80209d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80209dc:	683b      	ldr	r3, [r7, #0]
 80209de:	681b      	ldr	r3, [r3, #0]
 80209e0:	4313      	orrs	r3, r2
 80209e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80209e4:	68fb      	ldr	r3, [r7, #12]
 80209e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80209ea:	683b      	ldr	r3, [r7, #0]
 80209ec:	691b      	ldr	r3, [r3, #16]
 80209ee:	4313      	orrs	r3, r2
 80209f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80209f2:	68fb      	ldr	r3, [r7, #12]
 80209f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80209f8:	683b      	ldr	r3, [r7, #0]
 80209fa:	695b      	ldr	r3, [r3, #20]
 80209fc:	4313      	orrs	r3, r2
 80209fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8020a00:	68fb      	ldr	r3, [r7, #12]
 8020a02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8020a06:	683b      	ldr	r3, [r7, #0]
 8020a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a0a:	4313      	orrs	r3, r2
 8020a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8020a0e:	68fb      	ldr	r3, [r7, #12]
 8020a10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8020a14:	683b      	ldr	r3, [r7, #0]
 8020a16:	699b      	ldr	r3, [r3, #24]
 8020a18:	041b      	lsls	r3, r3, #16
 8020a1a:	4313      	orrs	r3, r2
 8020a1c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	681b      	ldr	r3, [r3, #0]
 8020a22:	4a16      	ldr	r2, [pc, #88]	; (8020a7c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8020a24:	4293      	cmp	r3, r2
 8020a26:	d004      	beq.n	8020a32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8020a28:	687b      	ldr	r3, [r7, #4]
 8020a2a:	681b      	ldr	r3, [r3, #0]
 8020a2c:	4a14      	ldr	r2, [pc, #80]	; (8020a80 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8020a2e:	4293      	cmp	r3, r2
 8020a30:	d115      	bne.n	8020a5e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8020a38:	683b      	ldr	r3, [r7, #0]
 8020a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a3c:	051b      	lsls	r3, r3, #20
 8020a3e:	4313      	orrs	r3, r2
 8020a40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8020a42:	68fb      	ldr	r3, [r7, #12]
 8020a44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8020a48:	683b      	ldr	r3, [r7, #0]
 8020a4a:	69db      	ldr	r3, [r3, #28]
 8020a4c:	4313      	orrs	r3, r2
 8020a4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8020a50:	68fb      	ldr	r3, [r7, #12]
 8020a52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8020a56:	683b      	ldr	r3, [r7, #0]
 8020a58:	6a1b      	ldr	r3, [r3, #32]
 8020a5a:	4313      	orrs	r3, r2
 8020a5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8020a5e:	687b      	ldr	r3, [r7, #4]
 8020a60:	681b      	ldr	r3, [r3, #0]
 8020a62:	68fa      	ldr	r2, [r7, #12]
 8020a64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	2200      	movs	r2, #0
 8020a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020a6e:	2300      	movs	r3, #0
}
 8020a70:	4618      	mov	r0, r3
 8020a72:	3714      	adds	r7, #20
 8020a74:	46bd      	mov	sp, r7
 8020a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a7a:	4770      	bx	lr
 8020a7c:	40010000 	.word	0x40010000
 8020a80:	40010400 	.word	0x40010400

08020a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8020a84:	b480      	push	{r7}
 8020a86:	b083      	sub	sp, #12
 8020a88:	af00      	add	r7, sp, #0
 8020a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8020a8c:	bf00      	nop
 8020a8e:	370c      	adds	r7, #12
 8020a90:	46bd      	mov	sp, r7
 8020a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a96:	4770      	bx	lr

08020a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8020a98:	b480      	push	{r7}
 8020a9a:	b083      	sub	sp, #12
 8020a9c:	af00      	add	r7, sp, #0
 8020a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8020aa0:	bf00      	nop
 8020aa2:	370c      	adds	r7, #12
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aaa:	4770      	bx	lr

08020aac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8020aac:	b480      	push	{r7}
 8020aae:	b083      	sub	sp, #12
 8020ab0:	af00      	add	r7, sp, #0
 8020ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8020ab4:	bf00      	nop
 8020ab6:	370c      	adds	r7, #12
 8020ab8:	46bd      	mov	sp, r7
 8020aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020abe:	4770      	bx	lr

08020ac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020ac0:	b580      	push	{r7, lr}
 8020ac2:	b082      	sub	sp, #8
 8020ac4:	af00      	add	r7, sp, #0
 8020ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	d101      	bne.n	8020ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020ace:	2301      	movs	r3, #1
 8020ad0:	e042      	b.n	8020b58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020ad8:	2b00      	cmp	r3, #0
 8020ada:	d106      	bne.n	8020aea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	2200      	movs	r2, #0
 8020ae0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8020ae4:	6878      	ldr	r0, [r7, #4]
 8020ae6:	f7f3 fbd7 	bl	8014298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	2224      	movs	r2, #36	; 0x24
 8020aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	681b      	ldr	r3, [r3, #0]
 8020af6:	681a      	ldr	r2, [r3, #0]
 8020af8:	687b      	ldr	r3, [r7, #4]
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	f022 0201 	bic.w	r2, r2, #1
 8020b00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8020b02:	6878      	ldr	r0, [r7, #4]
 8020b04:	f000 fae8 	bl	80210d8 <UART_SetConfig>
 8020b08:	4603      	mov	r3, r0
 8020b0a:	2b01      	cmp	r3, #1
 8020b0c:	d101      	bne.n	8020b12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8020b0e:	2301      	movs	r3, #1
 8020b10:	e022      	b.n	8020b58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d002      	beq.n	8020b20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8020b1a:	6878      	ldr	r0, [r7, #4]
 8020b1c:	f001 f88c 	bl	8021c38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	685a      	ldr	r2, [r3, #4]
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	681b      	ldr	r3, [r3, #0]
 8020b2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8020b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	689a      	ldr	r2, [r3, #8]
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8020b3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	681a      	ldr	r2, [r3, #0]
 8020b46:	687b      	ldr	r3, [r7, #4]
 8020b48:	681b      	ldr	r3, [r3, #0]
 8020b4a:	f042 0201 	orr.w	r2, r2, #1
 8020b4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8020b50:	6878      	ldr	r0, [r7, #4]
 8020b52:	f001 f913 	bl	8021d7c <UART_CheckIdleState>
 8020b56:	4603      	mov	r3, r0
}
 8020b58:	4618      	mov	r0, r3
 8020b5a:	3708      	adds	r7, #8
 8020b5c:	46bd      	mov	sp, r7
 8020b5e:	bd80      	pop	{r7, pc}

08020b60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8020b60:	b580      	push	{r7, lr}
 8020b62:	b08a      	sub	sp, #40	; 0x28
 8020b64:	af02      	add	r7, sp, #8
 8020b66:	60f8      	str	r0, [r7, #12]
 8020b68:	60b9      	str	r1, [r7, #8]
 8020b6a:	603b      	str	r3, [r7, #0]
 8020b6c:	4613      	mov	r3, r2
 8020b6e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8020b70:	68fb      	ldr	r3, [r7, #12]
 8020b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020b76:	2b20      	cmp	r3, #32
 8020b78:	f040 8083 	bne.w	8020c82 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8020b7c:	68bb      	ldr	r3, [r7, #8]
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d002      	beq.n	8020b88 <HAL_UART_Transmit+0x28>
 8020b82:	88fb      	ldrh	r3, [r7, #6]
 8020b84:	2b00      	cmp	r3, #0
 8020b86:	d101      	bne.n	8020b8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8020b88:	2301      	movs	r3, #1
 8020b8a:	e07b      	b.n	8020c84 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8020b92:	2b01      	cmp	r3, #1
 8020b94:	d101      	bne.n	8020b9a <HAL_UART_Transmit+0x3a>
 8020b96:	2302      	movs	r3, #2
 8020b98:	e074      	b.n	8020c84 <HAL_UART_Transmit+0x124>
 8020b9a:	68fb      	ldr	r3, [r7, #12]
 8020b9c:	2201      	movs	r2, #1
 8020b9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020ba2:	68fb      	ldr	r3, [r7, #12]
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8020baa:	68fb      	ldr	r3, [r7, #12]
 8020bac:	2221      	movs	r2, #33	; 0x21
 8020bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8020bb2:	f7f3 fdf9 	bl	80147a8 <HAL_GetTick>
 8020bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8020bb8:	68fb      	ldr	r3, [r7, #12]
 8020bba:	88fa      	ldrh	r2, [r7, #6]
 8020bbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	88fa      	ldrh	r2, [r7, #6]
 8020bc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8020bc8:	68fb      	ldr	r3, [r7, #12]
 8020bca:	689b      	ldr	r3, [r3, #8]
 8020bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020bd0:	d108      	bne.n	8020be4 <HAL_UART_Transmit+0x84>
 8020bd2:	68fb      	ldr	r3, [r7, #12]
 8020bd4:	691b      	ldr	r3, [r3, #16]
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	d104      	bne.n	8020be4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8020bda:	2300      	movs	r3, #0
 8020bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8020bde:	68bb      	ldr	r3, [r7, #8]
 8020be0:	61bb      	str	r3, [r7, #24]
 8020be2:	e003      	b.n	8020bec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8020be4:	68bb      	ldr	r3, [r7, #8]
 8020be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8020be8:	2300      	movs	r3, #0
 8020bea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8020bec:	68fb      	ldr	r3, [r7, #12]
 8020bee:	2200      	movs	r2, #0
 8020bf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8020bf4:	e02c      	b.n	8020c50 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8020bf6:	683b      	ldr	r3, [r7, #0]
 8020bf8:	9300      	str	r3, [sp, #0]
 8020bfa:	697b      	ldr	r3, [r7, #20]
 8020bfc:	2200      	movs	r2, #0
 8020bfe:	2180      	movs	r1, #128	; 0x80
 8020c00:	68f8      	ldr	r0, [r7, #12]
 8020c02:	f001 f903 	bl	8021e0c <UART_WaitOnFlagUntilTimeout>
 8020c06:	4603      	mov	r3, r0
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d001      	beq.n	8020c10 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8020c0c:	2303      	movs	r3, #3
 8020c0e:	e039      	b.n	8020c84 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8020c10:	69fb      	ldr	r3, [r7, #28]
 8020c12:	2b00      	cmp	r3, #0
 8020c14:	d10b      	bne.n	8020c2e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8020c16:	69bb      	ldr	r3, [r7, #24]
 8020c18:	881b      	ldrh	r3, [r3, #0]
 8020c1a:	461a      	mov	r2, r3
 8020c1c:	68fb      	ldr	r3, [r7, #12]
 8020c1e:	681b      	ldr	r3, [r3, #0]
 8020c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8020c24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8020c26:	69bb      	ldr	r3, [r7, #24]
 8020c28:	3302      	adds	r3, #2
 8020c2a:	61bb      	str	r3, [r7, #24]
 8020c2c:	e007      	b.n	8020c3e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8020c2e:	69fb      	ldr	r3, [r7, #28]
 8020c30:	781a      	ldrb	r2, [r3, #0]
 8020c32:	68fb      	ldr	r3, [r7, #12]
 8020c34:	681b      	ldr	r3, [r3, #0]
 8020c36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8020c38:	69fb      	ldr	r3, [r7, #28]
 8020c3a:	3301      	adds	r3, #1
 8020c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8020c3e:	68fb      	ldr	r3, [r7, #12]
 8020c40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8020c44:	b29b      	uxth	r3, r3
 8020c46:	3b01      	subs	r3, #1
 8020c48:	b29a      	uxth	r2, r3
 8020c4a:	68fb      	ldr	r3, [r7, #12]
 8020c4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8020c50:	68fb      	ldr	r3, [r7, #12]
 8020c52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8020c56:	b29b      	uxth	r3, r3
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	d1cc      	bne.n	8020bf6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8020c5c:	683b      	ldr	r3, [r7, #0]
 8020c5e:	9300      	str	r3, [sp, #0]
 8020c60:	697b      	ldr	r3, [r7, #20]
 8020c62:	2200      	movs	r2, #0
 8020c64:	2140      	movs	r1, #64	; 0x40
 8020c66:	68f8      	ldr	r0, [r7, #12]
 8020c68:	f001 f8d0 	bl	8021e0c <UART_WaitOnFlagUntilTimeout>
 8020c6c:	4603      	mov	r3, r0
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d001      	beq.n	8020c76 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8020c72:	2303      	movs	r3, #3
 8020c74:	e006      	b.n	8020c84 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8020c76:	68fb      	ldr	r3, [r7, #12]
 8020c78:	2220      	movs	r2, #32
 8020c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8020c7e:	2300      	movs	r3, #0
 8020c80:	e000      	b.n	8020c84 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8020c82:	2302      	movs	r3, #2
  }
}
 8020c84:	4618      	mov	r0, r3
 8020c86:	3720      	adds	r7, #32
 8020c88:	46bd      	mov	sp, r7
 8020c8a:	bd80      	pop	{r7, pc}

08020c8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020c8c:	b580      	push	{r7, lr}
 8020c8e:	b084      	sub	sp, #16
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	60f8      	str	r0, [r7, #12]
 8020c94:	60b9      	str	r1, [r7, #8]
 8020c96:	4613      	mov	r3, r2
 8020c98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8020c9a:	68fb      	ldr	r3, [r7, #12]
 8020c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020ca0:	2b20      	cmp	r3, #32
 8020ca2:	d170      	bne.n	8020d86 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8020ca4:	68bb      	ldr	r3, [r7, #8]
 8020ca6:	2b00      	cmp	r3, #0
 8020ca8:	d002      	beq.n	8020cb0 <HAL_UART_Receive_DMA+0x24>
 8020caa:	88fb      	ldrh	r3, [r7, #6]
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d101      	bne.n	8020cb4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8020cb0:	2301      	movs	r3, #1
 8020cb2:	e069      	b.n	8020d88 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8020cb4:	68fb      	ldr	r3, [r7, #12]
 8020cb6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8020cba:	2b01      	cmp	r3, #1
 8020cbc:	d101      	bne.n	8020cc2 <HAL_UART_Receive_DMA+0x36>
 8020cbe:	2302      	movs	r3, #2
 8020cc0:	e062      	b.n	8020d88 <HAL_UART_Receive_DMA+0xfc>
 8020cc2:	68fb      	ldr	r3, [r7, #12]
 8020cc4:	2201      	movs	r2, #1
 8020cc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8020cca:	68fb      	ldr	r3, [r7, #12]
 8020ccc:	68ba      	ldr	r2, [r7, #8]
 8020cce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8020cd0:	68fb      	ldr	r3, [r7, #12]
 8020cd2:	88fa      	ldrh	r2, [r7, #6]
 8020cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020cd8:	68fb      	ldr	r3, [r7, #12]
 8020cda:	2200      	movs	r2, #0
 8020cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8020ce0:	68fb      	ldr	r3, [r7, #12]
 8020ce2:	2222      	movs	r2, #34	; 0x22
 8020ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8020ce8:	68fb      	ldr	r3, [r7, #12]
 8020cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8020cec:	2b00      	cmp	r3, #0
 8020cee:	d02c      	beq.n	8020d4a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8020cf0:	68fb      	ldr	r3, [r7, #12]
 8020cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8020cf4:	4a26      	ldr	r2, [pc, #152]	; (8020d90 <HAL_UART_Receive_DMA+0x104>)
 8020cf6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8020cf8:	68fb      	ldr	r3, [r7, #12]
 8020cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8020cfc:	4a25      	ldr	r2, [pc, #148]	; (8020d94 <HAL_UART_Receive_DMA+0x108>)
 8020cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8020d00:	68fb      	ldr	r3, [r7, #12]
 8020d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8020d04:	4a24      	ldr	r2, [pc, #144]	; (8020d98 <HAL_UART_Receive_DMA+0x10c>)
 8020d06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8020d08:	68fb      	ldr	r3, [r7, #12]
 8020d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8020d0c:	2200      	movs	r2, #0
 8020d0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8020d10:	68fb      	ldr	r3, [r7, #12]
 8020d12:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8020d14:	68fb      	ldr	r3, [r7, #12]
 8020d16:	681b      	ldr	r3, [r3, #0]
 8020d18:	3324      	adds	r3, #36	; 0x24
 8020d1a:	4619      	mov	r1, r3
 8020d1c:	68fb      	ldr	r3, [r7, #12]
 8020d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020d20:	461a      	mov	r2, r3
 8020d22:	88fb      	ldrh	r3, [r7, #6]
 8020d24:	f7f5 f904 	bl	8015f30 <HAL_DMA_Start_IT>
 8020d28:	4603      	mov	r3, r0
 8020d2a:	2b00      	cmp	r3, #0
 8020d2c:	d00d      	beq.n	8020d4a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8020d2e:	68fb      	ldr	r3, [r7, #12]
 8020d30:	2210      	movs	r2, #16
 8020d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8020d36:	68fb      	ldr	r3, [r7, #12]
 8020d38:	2200      	movs	r2, #0
 8020d3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8020d3e:	68fb      	ldr	r3, [r7, #12]
 8020d40:	2220      	movs	r2, #32
 8020d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8020d46:	2301      	movs	r3, #1
 8020d48:	e01e      	b.n	8020d88 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8020d4a:	68fb      	ldr	r3, [r7, #12]
 8020d4c:	2200      	movs	r2, #0
 8020d4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8020d52:	68fb      	ldr	r3, [r7, #12]
 8020d54:	681b      	ldr	r3, [r3, #0]
 8020d56:	681a      	ldr	r2, [r3, #0]
 8020d58:	68fb      	ldr	r3, [r7, #12]
 8020d5a:	681b      	ldr	r3, [r3, #0]
 8020d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020d60:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020d62:	68fb      	ldr	r3, [r7, #12]
 8020d64:	681b      	ldr	r3, [r3, #0]
 8020d66:	689a      	ldr	r2, [r3, #8]
 8020d68:	68fb      	ldr	r3, [r7, #12]
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	f042 0201 	orr.w	r2, r2, #1
 8020d70:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020d72:	68fb      	ldr	r3, [r7, #12]
 8020d74:	681b      	ldr	r3, [r3, #0]
 8020d76:	689a      	ldr	r2, [r3, #8]
 8020d78:	68fb      	ldr	r3, [r7, #12]
 8020d7a:	681b      	ldr	r3, [r3, #0]
 8020d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8020d80:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8020d82:	2300      	movs	r3, #0
 8020d84:	e000      	b.n	8020d88 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8020d86:	2302      	movs	r3, #2
  }
}
 8020d88:	4618      	mov	r0, r3
 8020d8a:	3710      	adds	r7, #16
 8020d8c:	46bd      	mov	sp, r7
 8020d8e:	bd80      	pop	{r7, pc}
 8020d90:	08021f91 	.word	0x08021f91
 8020d94:	08021ff7 	.word	0x08021ff7
 8020d98:	08022013 	.word	0x08022013

08020d9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8020d9c:	b580      	push	{r7, lr}
 8020d9e:	b088      	sub	sp, #32
 8020da0:	af00      	add	r7, sp, #0
 8020da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	681b      	ldr	r3, [r3, #0]
 8020da8:	69db      	ldr	r3, [r3, #28]
 8020daa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8020dac:	687b      	ldr	r3, [r7, #4]
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	681b      	ldr	r3, [r3, #0]
 8020db2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	681b      	ldr	r3, [r3, #0]
 8020db8:	689b      	ldr	r3, [r3, #8]
 8020dba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8020dbc:	69fa      	ldr	r2, [r7, #28]
 8020dbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8020dc2:	4013      	ands	r3, r2
 8020dc4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8020dc6:	693b      	ldr	r3, [r7, #16]
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	d118      	bne.n	8020dfe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8020dcc:	69fb      	ldr	r3, [r7, #28]
 8020dce:	f003 0320 	and.w	r3, r3, #32
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d013      	beq.n	8020dfe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8020dd6:	69bb      	ldr	r3, [r7, #24]
 8020dd8:	f003 0320 	and.w	r3, r3, #32
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d104      	bne.n	8020dea <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8020de0:	697b      	ldr	r3, [r7, #20]
 8020de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d009      	beq.n	8020dfe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8020dea:	687b      	ldr	r3, [r7, #4]
 8020dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	f000 8145 	beq.w	802107e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020df8:	6878      	ldr	r0, [r7, #4]
 8020dfa:	4798      	blx	r3
      }
      return;
 8020dfc:	e13f      	b.n	802107e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8020dfe:	693b      	ldr	r3, [r7, #16]
 8020e00:	2b00      	cmp	r3, #0
 8020e02:	f000 80e8 	beq.w	8020fd6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8020e06:	697a      	ldr	r2, [r7, #20]
 8020e08:	4ba1      	ldr	r3, [pc, #644]	; (8021090 <HAL_UART_IRQHandler+0x2f4>)
 8020e0a:	4013      	ands	r3, r2
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d105      	bne.n	8020e1c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8020e10:	69ba      	ldr	r2, [r7, #24]
 8020e12:	4ba0      	ldr	r3, [pc, #640]	; (8021094 <HAL_UART_IRQHandler+0x2f8>)
 8020e14:	4013      	ands	r3, r2
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	f000 80dd 	beq.w	8020fd6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8020e1c:	69fb      	ldr	r3, [r7, #28]
 8020e1e:	f003 0301 	and.w	r3, r3, #1
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	d010      	beq.n	8020e48 <HAL_UART_IRQHandler+0xac>
 8020e26:	69bb      	ldr	r3, [r7, #24]
 8020e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	d00b      	beq.n	8020e48 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	2201      	movs	r2, #1
 8020e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020e3e:	f043 0201 	orr.w	r2, r3, #1
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8020e48:	69fb      	ldr	r3, [r7, #28]
 8020e4a:	f003 0302 	and.w	r3, r3, #2
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d010      	beq.n	8020e74 <HAL_UART_IRQHandler+0xd8>
 8020e52:	697b      	ldr	r3, [r7, #20]
 8020e54:	f003 0301 	and.w	r3, r3, #1
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	d00b      	beq.n	8020e74 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	2202      	movs	r2, #2
 8020e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020e6a:	f043 0204 	orr.w	r2, r3, #4
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8020e74:	69fb      	ldr	r3, [r7, #28]
 8020e76:	f003 0304 	and.w	r3, r3, #4
 8020e7a:	2b00      	cmp	r3, #0
 8020e7c:	d010      	beq.n	8020ea0 <HAL_UART_IRQHandler+0x104>
 8020e7e:	697b      	ldr	r3, [r7, #20]
 8020e80:	f003 0301 	and.w	r3, r3, #1
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	d00b      	beq.n	8020ea0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	681b      	ldr	r3, [r3, #0]
 8020e8c:	2204      	movs	r2, #4
 8020e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020e96:	f043 0202 	orr.w	r2, r3, #2
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8020ea0:	69fb      	ldr	r3, [r7, #28]
 8020ea2:	f003 0308 	and.w	r3, r3, #8
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d015      	beq.n	8020ed6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8020eaa:	69bb      	ldr	r3, [r7, #24]
 8020eac:	f003 0320 	and.w	r3, r3, #32
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d104      	bne.n	8020ebe <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8020eb4:	697a      	ldr	r2, [r7, #20]
 8020eb6:	4b76      	ldr	r3, [pc, #472]	; (8021090 <HAL_UART_IRQHandler+0x2f4>)
 8020eb8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d00b      	beq.n	8020ed6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	681b      	ldr	r3, [r3, #0]
 8020ec2:	2208      	movs	r2, #8
 8020ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020ecc:	f043 0208 	orr.w	r2, r3, #8
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8020ed6:	69fb      	ldr	r3, [r7, #28]
 8020ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020edc:	2b00      	cmp	r3, #0
 8020ede:	d011      	beq.n	8020f04 <HAL_UART_IRQHandler+0x168>
 8020ee0:	69bb      	ldr	r3, [r7, #24]
 8020ee2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	d00c      	beq.n	8020f04 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020eea:	687b      	ldr	r3, [r7, #4]
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020efa:	f043 0220 	orr.w	r2, r3, #32
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8020f04:	687b      	ldr	r3, [r7, #4]
 8020f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020f0a:	2b00      	cmp	r3, #0
 8020f0c:	f000 80b9 	beq.w	8021082 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8020f10:	69fb      	ldr	r3, [r7, #28]
 8020f12:	f003 0320 	and.w	r3, r3, #32
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d011      	beq.n	8020f3e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8020f1a:	69bb      	ldr	r3, [r7, #24]
 8020f1c:	f003 0320 	and.w	r3, r3, #32
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d104      	bne.n	8020f2e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8020f24:	697b      	ldr	r3, [r7, #20]
 8020f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d007      	beq.n	8020f3e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	d003      	beq.n	8020f3e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020f3a:	6878      	ldr	r0, [r7, #4]
 8020f3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020f44:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	681b      	ldr	r3, [r3, #0]
 8020f4a:	689b      	ldr	r3, [r3, #8]
 8020f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020f50:	2b40      	cmp	r3, #64	; 0x40
 8020f52:	d004      	beq.n	8020f5e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8020f54:	68fb      	ldr	r3, [r7, #12]
 8020f56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d031      	beq.n	8020fc2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8020f5e:	6878      	ldr	r0, [r7, #4]
 8020f60:	f000 fff2 	bl	8021f48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	689b      	ldr	r3, [r3, #8]
 8020f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020f6e:	2b40      	cmp	r3, #64	; 0x40
 8020f70:	d123      	bne.n	8020fba <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	681b      	ldr	r3, [r3, #0]
 8020f76:	689a      	ldr	r2, [r3, #8]
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	681b      	ldr	r3, [r3, #0]
 8020f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8020f80:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8020f82:	687b      	ldr	r3, [r7, #4]
 8020f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d013      	beq.n	8020fb2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8020f8e:	4a42      	ldr	r2, [pc, #264]	; (8021098 <HAL_UART_IRQHandler+0x2fc>)
 8020f90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8020f92:	687b      	ldr	r3, [r7, #4]
 8020f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8020f96:	4618      	mov	r0, r3
 8020f98:	f7f5 fa34 	bl	8016404 <HAL_DMA_Abort_IT>
 8020f9c:	4603      	mov	r3, r0
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	d017      	beq.n	8020fd2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8020fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020fa8:	687a      	ldr	r2, [r7, #4]
 8020faa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8020fac:	4610      	mov	r0, r2
 8020fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020fb0:	e00f      	b.n	8020fd2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8020fb2:	6878      	ldr	r0, [r7, #4]
 8020fb4:	f000 f886 	bl	80210c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020fb8:	e00b      	b.n	8020fd2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8020fba:	6878      	ldr	r0, [r7, #4]
 8020fbc:	f000 f882 	bl	80210c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020fc0:	e007      	b.n	8020fd2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8020fc2:	6878      	ldr	r0, [r7, #4]
 8020fc4:	f000 f87e 	bl	80210c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	2200      	movs	r2, #0
 8020fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8020fd0:	e057      	b.n	8021082 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020fd2:	bf00      	nop
    return;
 8020fd4:	e055      	b.n	8021082 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8020fd6:	69fb      	ldr	r3, [r7, #28]
 8020fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020fdc:	2b00      	cmp	r3, #0
 8020fde:	d00d      	beq.n	8020ffc <HAL_UART_IRQHandler+0x260>
 8020fe0:	697b      	ldr	r3, [r7, #20]
 8020fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	d008      	beq.n	8020ffc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	681b      	ldr	r3, [r3, #0]
 8020fee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8020ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8020ff4:	6878      	ldr	r0, [r7, #4]
 8020ff6:	f001 f87c 	bl	80220f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8020ffa:	e045      	b.n	8021088 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8020ffc:	69fb      	ldr	r3, [r7, #28]
 8020ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021002:	2b00      	cmp	r3, #0
 8021004:	d012      	beq.n	802102c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8021006:	69bb      	ldr	r3, [r7, #24]
 8021008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802100c:	2b00      	cmp	r3, #0
 802100e:	d104      	bne.n	802101a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8021010:	697b      	ldr	r3, [r7, #20]
 8021012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021016:	2b00      	cmp	r3, #0
 8021018:	d008      	beq.n	802102c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 802101a:	687b      	ldr	r3, [r7, #4]
 802101c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802101e:	2b00      	cmp	r3, #0
 8021020:	d031      	beq.n	8021086 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8021022:	687b      	ldr	r3, [r7, #4]
 8021024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021026:	6878      	ldr	r0, [r7, #4]
 8021028:	4798      	blx	r3
    }
    return;
 802102a:	e02c      	b.n	8021086 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 802102c:	69fb      	ldr	r3, [r7, #28]
 802102e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021032:	2b00      	cmp	r3, #0
 8021034:	d008      	beq.n	8021048 <HAL_UART_IRQHandler+0x2ac>
 8021036:	69bb      	ldr	r3, [r7, #24]
 8021038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802103c:	2b00      	cmp	r3, #0
 802103e:	d003      	beq.n	8021048 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8021040:	6878      	ldr	r0, [r7, #4]
 8021042:	f001 f83c 	bl	80220be <UART_EndTransmit_IT>
    return;
 8021046:	e01f      	b.n	8021088 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8021048:	69fb      	ldr	r3, [r7, #28]
 802104a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802104e:	2b00      	cmp	r3, #0
 8021050:	d008      	beq.n	8021064 <HAL_UART_IRQHandler+0x2c8>
 8021052:	69bb      	ldr	r3, [r7, #24]
 8021054:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8021058:	2b00      	cmp	r3, #0
 802105a:	d003      	beq.n	8021064 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 802105c:	6878      	ldr	r0, [r7, #4]
 802105e:	f001 f85c 	bl	802211a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8021062:	e011      	b.n	8021088 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8021064:	69fb      	ldr	r3, [r7, #28]
 8021066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802106a:	2b00      	cmp	r3, #0
 802106c:	d00c      	beq.n	8021088 <HAL_UART_IRQHandler+0x2ec>
 802106e:	69bb      	ldr	r3, [r7, #24]
 8021070:	2b00      	cmp	r3, #0
 8021072:	da09      	bge.n	8021088 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8021074:	6878      	ldr	r0, [r7, #4]
 8021076:	f001 f846 	bl	8022106 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 802107a:	bf00      	nop
 802107c:	e004      	b.n	8021088 <HAL_UART_IRQHandler+0x2ec>
      return;
 802107e:	bf00      	nop
 8021080:	e002      	b.n	8021088 <HAL_UART_IRQHandler+0x2ec>
    return;
 8021082:	bf00      	nop
 8021084:	e000      	b.n	8021088 <HAL_UART_IRQHandler+0x2ec>
    return;
 8021086:	bf00      	nop
  }
}
 8021088:	3720      	adds	r7, #32
 802108a:	46bd      	mov	sp, r7
 802108c:	bd80      	pop	{r7, pc}
 802108e:	bf00      	nop
 8021090:	10000001 	.word	0x10000001
 8021094:	04000120 	.word	0x04000120
 8021098:	08022093 	.word	0x08022093

0802109c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 802109c:	b480      	push	{r7}
 802109e:	b083      	sub	sp, #12
 80210a0:	af00      	add	r7, sp, #0
 80210a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80210a4:	bf00      	nop
 80210a6:	370c      	adds	r7, #12
 80210a8:	46bd      	mov	sp, r7
 80210aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ae:	4770      	bx	lr

080210b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80210b0:	b480      	push	{r7}
 80210b2:	b083      	sub	sp, #12
 80210b4:	af00      	add	r7, sp, #0
 80210b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80210b8:	bf00      	nop
 80210ba:	370c      	adds	r7, #12
 80210bc:	46bd      	mov	sp, r7
 80210be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210c2:	4770      	bx	lr

080210c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80210c4:	b480      	push	{r7}
 80210c6:	b083      	sub	sp, #12
 80210c8:	af00      	add	r7, sp, #0
 80210ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80210cc:	bf00      	nop
 80210ce:	370c      	adds	r7, #12
 80210d0:	46bd      	mov	sp, r7
 80210d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210d6:	4770      	bx	lr

080210d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80210d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80210dc:	b08e      	sub	sp, #56	; 0x38
 80210de:	af00      	add	r7, sp, #0
 80210e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80210e2:	2300      	movs	r3, #0
 80210e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	689a      	ldr	r2, [r3, #8]
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	691b      	ldr	r3, [r3, #16]
 80210f0:	431a      	orrs	r2, r3
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	695b      	ldr	r3, [r3, #20]
 80210f6:	431a      	orrs	r2, r3
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	69db      	ldr	r3, [r3, #28]
 80210fc:	4313      	orrs	r3, r2
 80210fe:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021106:	4313      	orrs	r3, r2
 8021108:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	681b      	ldr	r3, [r3, #0]
 802110e:	681a      	ldr	r2, [r3, #0]
 8021110:	4bc1      	ldr	r3, [pc, #772]	; (8021418 <UART_SetConfig+0x340>)
 8021112:	4013      	ands	r3, r2
 8021114:	687a      	ldr	r2, [r7, #4]
 8021116:	6812      	ldr	r2, [r2, #0]
 8021118:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802111a:	430b      	orrs	r3, r1
 802111c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802111e:	687b      	ldr	r3, [r7, #4]
 8021120:	681b      	ldr	r3, [r3, #0]
 8021122:	685b      	ldr	r3, [r3, #4]
 8021124:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	68da      	ldr	r2, [r3, #12]
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	430a      	orrs	r2, r1
 8021132:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8021134:	687b      	ldr	r3, [r7, #4]
 8021136:	699b      	ldr	r3, [r3, #24]
 8021138:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	4ab7      	ldr	r2, [pc, #732]	; (802141c <UART_SetConfig+0x344>)
 8021140:	4293      	cmp	r3, r2
 8021142:	d004      	beq.n	802114e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	6a1b      	ldr	r3, [r3, #32]
 8021148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802114a:	4313      	orrs	r3, r2
 802114c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802114e:	687b      	ldr	r3, [r7, #4]
 8021150:	681b      	ldr	r3, [r3, #0]
 8021152:	689a      	ldr	r2, [r3, #8]
 8021154:	4bb2      	ldr	r3, [pc, #712]	; (8021420 <UART_SetConfig+0x348>)
 8021156:	4013      	ands	r3, r2
 8021158:	687a      	ldr	r2, [r7, #4]
 802115a:	6812      	ldr	r2, [r2, #0]
 802115c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802115e:	430b      	orrs	r3, r1
 8021160:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021168:	f023 010f 	bic.w	r1, r3, #15
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021170:	687b      	ldr	r3, [r7, #4]
 8021172:	681b      	ldr	r3, [r3, #0]
 8021174:	430a      	orrs	r2, r1
 8021176:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	4aa9      	ldr	r2, [pc, #676]	; (8021424 <UART_SetConfig+0x34c>)
 802117e:	4293      	cmp	r3, r2
 8021180:	d177      	bne.n	8021272 <UART_SetConfig+0x19a>
 8021182:	4ba9      	ldr	r3, [pc, #676]	; (8021428 <UART_SetConfig+0x350>)
 8021184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802118a:	2b28      	cmp	r3, #40	; 0x28
 802118c:	d86c      	bhi.n	8021268 <UART_SetConfig+0x190>
 802118e:	a201      	add	r2, pc, #4	; (adr r2, 8021194 <UART_SetConfig+0xbc>)
 8021190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021194:	08021239 	.word	0x08021239
 8021198:	08021269 	.word	0x08021269
 802119c:	08021269 	.word	0x08021269
 80211a0:	08021269 	.word	0x08021269
 80211a4:	08021269 	.word	0x08021269
 80211a8:	08021269 	.word	0x08021269
 80211ac:	08021269 	.word	0x08021269
 80211b0:	08021269 	.word	0x08021269
 80211b4:	08021241 	.word	0x08021241
 80211b8:	08021269 	.word	0x08021269
 80211bc:	08021269 	.word	0x08021269
 80211c0:	08021269 	.word	0x08021269
 80211c4:	08021269 	.word	0x08021269
 80211c8:	08021269 	.word	0x08021269
 80211cc:	08021269 	.word	0x08021269
 80211d0:	08021269 	.word	0x08021269
 80211d4:	08021249 	.word	0x08021249
 80211d8:	08021269 	.word	0x08021269
 80211dc:	08021269 	.word	0x08021269
 80211e0:	08021269 	.word	0x08021269
 80211e4:	08021269 	.word	0x08021269
 80211e8:	08021269 	.word	0x08021269
 80211ec:	08021269 	.word	0x08021269
 80211f0:	08021269 	.word	0x08021269
 80211f4:	08021251 	.word	0x08021251
 80211f8:	08021269 	.word	0x08021269
 80211fc:	08021269 	.word	0x08021269
 8021200:	08021269 	.word	0x08021269
 8021204:	08021269 	.word	0x08021269
 8021208:	08021269 	.word	0x08021269
 802120c:	08021269 	.word	0x08021269
 8021210:	08021269 	.word	0x08021269
 8021214:	08021259 	.word	0x08021259
 8021218:	08021269 	.word	0x08021269
 802121c:	08021269 	.word	0x08021269
 8021220:	08021269 	.word	0x08021269
 8021224:	08021269 	.word	0x08021269
 8021228:	08021269 	.word	0x08021269
 802122c:	08021269 	.word	0x08021269
 8021230:	08021269 	.word	0x08021269
 8021234:	08021261 	.word	0x08021261
 8021238:	2301      	movs	r3, #1
 802123a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802123e:	e233      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021240:	2304      	movs	r3, #4
 8021242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021246:	e22f      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021248:	2308      	movs	r3, #8
 802124a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802124e:	e22b      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021250:	2310      	movs	r3, #16
 8021252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021256:	e227      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021258:	2320      	movs	r3, #32
 802125a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802125e:	e223      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021260:	2340      	movs	r3, #64	; 0x40
 8021262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021266:	e21f      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021268:	2380      	movs	r3, #128	; 0x80
 802126a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802126e:	bf00      	nop
 8021270:	e21a      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	681b      	ldr	r3, [r3, #0]
 8021276:	4a6d      	ldr	r2, [pc, #436]	; (802142c <UART_SetConfig+0x354>)
 8021278:	4293      	cmp	r3, r2
 802127a:	d132      	bne.n	80212e2 <UART_SetConfig+0x20a>
 802127c:	4b6a      	ldr	r3, [pc, #424]	; (8021428 <UART_SetConfig+0x350>)
 802127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021280:	f003 0307 	and.w	r3, r3, #7
 8021284:	2b05      	cmp	r3, #5
 8021286:	d827      	bhi.n	80212d8 <UART_SetConfig+0x200>
 8021288:	a201      	add	r2, pc, #4	; (adr r2, 8021290 <UART_SetConfig+0x1b8>)
 802128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802128e:	bf00      	nop
 8021290:	080212a9 	.word	0x080212a9
 8021294:	080212b1 	.word	0x080212b1
 8021298:	080212b9 	.word	0x080212b9
 802129c:	080212c1 	.word	0x080212c1
 80212a0:	080212c9 	.word	0x080212c9
 80212a4:	080212d1 	.word	0x080212d1
 80212a8:	2300      	movs	r3, #0
 80212aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80212ae:	e1fb      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80212b0:	2304      	movs	r3, #4
 80212b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80212b6:	e1f7      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80212b8:	2308      	movs	r3, #8
 80212ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80212be:	e1f3      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80212c0:	2310      	movs	r3, #16
 80212c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80212c6:	e1ef      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80212c8:	2320      	movs	r3, #32
 80212ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80212ce:	e1eb      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80212d0:	2340      	movs	r3, #64	; 0x40
 80212d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80212d6:	e1e7      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80212d8:	2380      	movs	r3, #128	; 0x80
 80212da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80212de:	bf00      	nop
 80212e0:	e1e2      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	681b      	ldr	r3, [r3, #0]
 80212e6:	4a52      	ldr	r2, [pc, #328]	; (8021430 <UART_SetConfig+0x358>)
 80212e8:	4293      	cmp	r3, r2
 80212ea:	d132      	bne.n	8021352 <UART_SetConfig+0x27a>
 80212ec:	4b4e      	ldr	r3, [pc, #312]	; (8021428 <UART_SetConfig+0x350>)
 80212ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80212f0:	f003 0307 	and.w	r3, r3, #7
 80212f4:	2b05      	cmp	r3, #5
 80212f6:	d827      	bhi.n	8021348 <UART_SetConfig+0x270>
 80212f8:	a201      	add	r2, pc, #4	; (adr r2, 8021300 <UART_SetConfig+0x228>)
 80212fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80212fe:	bf00      	nop
 8021300:	08021319 	.word	0x08021319
 8021304:	08021321 	.word	0x08021321
 8021308:	08021329 	.word	0x08021329
 802130c:	08021331 	.word	0x08021331
 8021310:	08021339 	.word	0x08021339
 8021314:	08021341 	.word	0x08021341
 8021318:	2300      	movs	r3, #0
 802131a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802131e:	e1c3      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021320:	2304      	movs	r3, #4
 8021322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021326:	e1bf      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021328:	2308      	movs	r3, #8
 802132a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802132e:	e1bb      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021330:	2310      	movs	r3, #16
 8021332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021336:	e1b7      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021338:	2320      	movs	r3, #32
 802133a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802133e:	e1b3      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021340:	2340      	movs	r3, #64	; 0x40
 8021342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021346:	e1af      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021348:	2380      	movs	r3, #128	; 0x80
 802134a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802134e:	bf00      	nop
 8021350:	e1aa      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	681b      	ldr	r3, [r3, #0]
 8021356:	4a37      	ldr	r2, [pc, #220]	; (8021434 <UART_SetConfig+0x35c>)
 8021358:	4293      	cmp	r3, r2
 802135a:	d132      	bne.n	80213c2 <UART_SetConfig+0x2ea>
 802135c:	4b32      	ldr	r3, [pc, #200]	; (8021428 <UART_SetConfig+0x350>)
 802135e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021360:	f003 0307 	and.w	r3, r3, #7
 8021364:	2b05      	cmp	r3, #5
 8021366:	d827      	bhi.n	80213b8 <UART_SetConfig+0x2e0>
 8021368:	a201      	add	r2, pc, #4	; (adr r2, 8021370 <UART_SetConfig+0x298>)
 802136a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802136e:	bf00      	nop
 8021370:	08021389 	.word	0x08021389
 8021374:	08021391 	.word	0x08021391
 8021378:	08021399 	.word	0x08021399
 802137c:	080213a1 	.word	0x080213a1
 8021380:	080213a9 	.word	0x080213a9
 8021384:	080213b1 	.word	0x080213b1
 8021388:	2300      	movs	r3, #0
 802138a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802138e:	e18b      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021390:	2304      	movs	r3, #4
 8021392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021396:	e187      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021398:	2308      	movs	r3, #8
 802139a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802139e:	e183      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80213a0:	2310      	movs	r3, #16
 80213a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80213a6:	e17f      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80213a8:	2320      	movs	r3, #32
 80213aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80213ae:	e17b      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80213b0:	2340      	movs	r3, #64	; 0x40
 80213b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80213b6:	e177      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80213b8:	2380      	movs	r3, #128	; 0x80
 80213ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80213be:	bf00      	nop
 80213c0:	e172      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	681b      	ldr	r3, [r3, #0]
 80213c6:	4a1c      	ldr	r2, [pc, #112]	; (8021438 <UART_SetConfig+0x360>)
 80213c8:	4293      	cmp	r3, r2
 80213ca:	d144      	bne.n	8021456 <UART_SetConfig+0x37e>
 80213cc:	4b16      	ldr	r3, [pc, #88]	; (8021428 <UART_SetConfig+0x350>)
 80213ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80213d0:	f003 0307 	and.w	r3, r3, #7
 80213d4:	2b05      	cmp	r3, #5
 80213d6:	d839      	bhi.n	802144c <UART_SetConfig+0x374>
 80213d8:	a201      	add	r2, pc, #4	; (adr r2, 80213e0 <UART_SetConfig+0x308>)
 80213da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80213de:	bf00      	nop
 80213e0:	080213f9 	.word	0x080213f9
 80213e4:	08021401 	.word	0x08021401
 80213e8:	08021409 	.word	0x08021409
 80213ec:	08021411 	.word	0x08021411
 80213f0:	0802143d 	.word	0x0802143d
 80213f4:	08021445 	.word	0x08021445
 80213f8:	2300      	movs	r3, #0
 80213fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80213fe:	e153      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021400:	2304      	movs	r3, #4
 8021402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021406:	e14f      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021408:	2308      	movs	r3, #8
 802140a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802140e:	e14b      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021410:	2310      	movs	r3, #16
 8021412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021416:	e147      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021418:	cfff69f3 	.word	0xcfff69f3
 802141c:	58000c00 	.word	0x58000c00
 8021420:	11fff4ff 	.word	0x11fff4ff
 8021424:	40011000 	.word	0x40011000
 8021428:	58024400 	.word	0x58024400
 802142c:	40004400 	.word	0x40004400
 8021430:	40004800 	.word	0x40004800
 8021434:	40004c00 	.word	0x40004c00
 8021438:	40005000 	.word	0x40005000
 802143c:	2320      	movs	r3, #32
 802143e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021442:	e131      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021444:	2340      	movs	r3, #64	; 0x40
 8021446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802144a:	e12d      	b.n	80216a8 <UART_SetConfig+0x5d0>
 802144c:	2380      	movs	r3, #128	; 0x80
 802144e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021452:	bf00      	nop
 8021454:	e128      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	4ab6      	ldr	r2, [pc, #728]	; (8021734 <UART_SetConfig+0x65c>)
 802145c:	4293      	cmp	r3, r2
 802145e:	d178      	bne.n	8021552 <UART_SetConfig+0x47a>
 8021460:	4bb5      	ldr	r3, [pc, #724]	; (8021738 <UART_SetConfig+0x660>)
 8021462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021464:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8021468:	2b28      	cmp	r3, #40	; 0x28
 802146a:	d86d      	bhi.n	8021548 <UART_SetConfig+0x470>
 802146c:	a201      	add	r2, pc, #4	; (adr r2, 8021474 <UART_SetConfig+0x39c>)
 802146e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021472:	bf00      	nop
 8021474:	08021519 	.word	0x08021519
 8021478:	08021549 	.word	0x08021549
 802147c:	08021549 	.word	0x08021549
 8021480:	08021549 	.word	0x08021549
 8021484:	08021549 	.word	0x08021549
 8021488:	08021549 	.word	0x08021549
 802148c:	08021549 	.word	0x08021549
 8021490:	08021549 	.word	0x08021549
 8021494:	08021521 	.word	0x08021521
 8021498:	08021549 	.word	0x08021549
 802149c:	08021549 	.word	0x08021549
 80214a0:	08021549 	.word	0x08021549
 80214a4:	08021549 	.word	0x08021549
 80214a8:	08021549 	.word	0x08021549
 80214ac:	08021549 	.word	0x08021549
 80214b0:	08021549 	.word	0x08021549
 80214b4:	08021529 	.word	0x08021529
 80214b8:	08021549 	.word	0x08021549
 80214bc:	08021549 	.word	0x08021549
 80214c0:	08021549 	.word	0x08021549
 80214c4:	08021549 	.word	0x08021549
 80214c8:	08021549 	.word	0x08021549
 80214cc:	08021549 	.word	0x08021549
 80214d0:	08021549 	.word	0x08021549
 80214d4:	08021531 	.word	0x08021531
 80214d8:	08021549 	.word	0x08021549
 80214dc:	08021549 	.word	0x08021549
 80214e0:	08021549 	.word	0x08021549
 80214e4:	08021549 	.word	0x08021549
 80214e8:	08021549 	.word	0x08021549
 80214ec:	08021549 	.word	0x08021549
 80214f0:	08021549 	.word	0x08021549
 80214f4:	08021539 	.word	0x08021539
 80214f8:	08021549 	.word	0x08021549
 80214fc:	08021549 	.word	0x08021549
 8021500:	08021549 	.word	0x08021549
 8021504:	08021549 	.word	0x08021549
 8021508:	08021549 	.word	0x08021549
 802150c:	08021549 	.word	0x08021549
 8021510:	08021549 	.word	0x08021549
 8021514:	08021541 	.word	0x08021541
 8021518:	2301      	movs	r3, #1
 802151a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802151e:	e0c3      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021520:	2304      	movs	r3, #4
 8021522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021526:	e0bf      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021528:	2308      	movs	r3, #8
 802152a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802152e:	e0bb      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021530:	2310      	movs	r3, #16
 8021532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021536:	e0b7      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021538:	2320      	movs	r3, #32
 802153a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802153e:	e0b3      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021540:	2340      	movs	r3, #64	; 0x40
 8021542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021546:	e0af      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021548:	2380      	movs	r3, #128	; 0x80
 802154a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802154e:	bf00      	nop
 8021550:	e0aa      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	681b      	ldr	r3, [r3, #0]
 8021556:	4a79      	ldr	r2, [pc, #484]	; (802173c <UART_SetConfig+0x664>)
 8021558:	4293      	cmp	r3, r2
 802155a:	d132      	bne.n	80215c2 <UART_SetConfig+0x4ea>
 802155c:	4b76      	ldr	r3, [pc, #472]	; (8021738 <UART_SetConfig+0x660>)
 802155e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021560:	f003 0307 	and.w	r3, r3, #7
 8021564:	2b05      	cmp	r3, #5
 8021566:	d827      	bhi.n	80215b8 <UART_SetConfig+0x4e0>
 8021568:	a201      	add	r2, pc, #4	; (adr r2, 8021570 <UART_SetConfig+0x498>)
 802156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802156e:	bf00      	nop
 8021570:	08021589 	.word	0x08021589
 8021574:	08021591 	.word	0x08021591
 8021578:	08021599 	.word	0x08021599
 802157c:	080215a1 	.word	0x080215a1
 8021580:	080215a9 	.word	0x080215a9
 8021584:	080215b1 	.word	0x080215b1
 8021588:	2300      	movs	r3, #0
 802158a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802158e:	e08b      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021590:	2304      	movs	r3, #4
 8021592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021596:	e087      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021598:	2308      	movs	r3, #8
 802159a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802159e:	e083      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80215a0:	2310      	movs	r3, #16
 80215a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80215a6:	e07f      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80215a8:	2320      	movs	r3, #32
 80215aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80215ae:	e07b      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80215b0:	2340      	movs	r3, #64	; 0x40
 80215b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80215b6:	e077      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80215b8:	2380      	movs	r3, #128	; 0x80
 80215ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80215be:	bf00      	nop
 80215c0:	e072      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	681b      	ldr	r3, [r3, #0]
 80215c6:	4a5e      	ldr	r2, [pc, #376]	; (8021740 <UART_SetConfig+0x668>)
 80215c8:	4293      	cmp	r3, r2
 80215ca:	d132      	bne.n	8021632 <UART_SetConfig+0x55a>
 80215cc:	4b5a      	ldr	r3, [pc, #360]	; (8021738 <UART_SetConfig+0x660>)
 80215ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80215d0:	f003 0307 	and.w	r3, r3, #7
 80215d4:	2b05      	cmp	r3, #5
 80215d6:	d827      	bhi.n	8021628 <UART_SetConfig+0x550>
 80215d8:	a201      	add	r2, pc, #4	; (adr r2, 80215e0 <UART_SetConfig+0x508>)
 80215da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80215de:	bf00      	nop
 80215e0:	080215f9 	.word	0x080215f9
 80215e4:	08021601 	.word	0x08021601
 80215e8:	08021609 	.word	0x08021609
 80215ec:	08021611 	.word	0x08021611
 80215f0:	08021619 	.word	0x08021619
 80215f4:	08021621 	.word	0x08021621
 80215f8:	2300      	movs	r3, #0
 80215fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80215fe:	e053      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021600:	2304      	movs	r3, #4
 8021602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021606:	e04f      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021608:	2308      	movs	r3, #8
 802160a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802160e:	e04b      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021610:	2310      	movs	r3, #16
 8021612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021616:	e047      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021618:	2320      	movs	r3, #32
 802161a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802161e:	e043      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021620:	2340      	movs	r3, #64	; 0x40
 8021622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021626:	e03f      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021628:	2380      	movs	r3, #128	; 0x80
 802162a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802162e:	bf00      	nop
 8021630:	e03a      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	4a43      	ldr	r2, [pc, #268]	; (8021744 <UART_SetConfig+0x66c>)
 8021638:	4293      	cmp	r3, r2
 802163a:	d132      	bne.n	80216a2 <UART_SetConfig+0x5ca>
 802163c:	4b3e      	ldr	r3, [pc, #248]	; (8021738 <UART_SetConfig+0x660>)
 802163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021640:	f003 0307 	and.w	r3, r3, #7
 8021644:	2b05      	cmp	r3, #5
 8021646:	d827      	bhi.n	8021698 <UART_SetConfig+0x5c0>
 8021648:	a201      	add	r2, pc, #4	; (adr r2, 8021650 <UART_SetConfig+0x578>)
 802164a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802164e:	bf00      	nop
 8021650:	08021669 	.word	0x08021669
 8021654:	08021671 	.word	0x08021671
 8021658:	08021679 	.word	0x08021679
 802165c:	08021681 	.word	0x08021681
 8021660:	08021689 	.word	0x08021689
 8021664:	08021691 	.word	0x08021691
 8021668:	2302      	movs	r3, #2
 802166a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802166e:	e01b      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021670:	2304      	movs	r3, #4
 8021672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021676:	e017      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021678:	2308      	movs	r3, #8
 802167a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802167e:	e013      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021680:	2310      	movs	r3, #16
 8021682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021686:	e00f      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021688:	2320      	movs	r3, #32
 802168a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802168e:	e00b      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021690:	2340      	movs	r3, #64	; 0x40
 8021692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021696:	e007      	b.n	80216a8 <UART_SetConfig+0x5d0>
 8021698:	2380      	movs	r3, #128	; 0x80
 802169a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802169e:	bf00      	nop
 80216a0:	e002      	b.n	80216a8 <UART_SetConfig+0x5d0>
 80216a2:	2380      	movs	r3, #128	; 0x80
 80216a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80216a8:	687b      	ldr	r3, [r7, #4]
 80216aa:	681b      	ldr	r3, [r3, #0]
 80216ac:	4a25      	ldr	r2, [pc, #148]	; (8021744 <UART_SetConfig+0x66c>)
 80216ae:	4293      	cmp	r3, r2
 80216b0:	f040 80b8 	bne.w	8021824 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80216b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80216b8:	2b08      	cmp	r3, #8
 80216ba:	d019      	beq.n	80216f0 <UART_SetConfig+0x618>
 80216bc:	2b08      	cmp	r3, #8
 80216be:	dc04      	bgt.n	80216ca <UART_SetConfig+0x5f2>
 80216c0:	2b02      	cmp	r3, #2
 80216c2:	d009      	beq.n	80216d8 <UART_SetConfig+0x600>
 80216c4:	2b04      	cmp	r3, #4
 80216c6:	d00b      	beq.n	80216e0 <UART_SetConfig+0x608>
 80216c8:	e042      	b.n	8021750 <UART_SetConfig+0x678>
 80216ca:	2b20      	cmp	r3, #32
 80216cc:	d02b      	beq.n	8021726 <UART_SetConfig+0x64e>
 80216ce:	2b40      	cmp	r3, #64	; 0x40
 80216d0:	d02c      	beq.n	802172c <UART_SetConfig+0x654>
 80216d2:	2b10      	cmp	r3, #16
 80216d4:	d014      	beq.n	8021700 <UART_SetConfig+0x628>
 80216d6:	e03b      	b.n	8021750 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80216d8:	f7fb fd1e 	bl	801d118 <HAL_RCCEx_GetD3PCLK1Freq>
 80216dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80216de:	e03d      	b.n	802175c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80216e0:	f107 0314 	add.w	r3, r7, #20
 80216e4:	4618      	mov	r0, r3
 80216e6:	f7fb fd2d 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80216ea:	69bb      	ldr	r3, [r7, #24]
 80216ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80216ee:	e035      	b.n	802175c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80216f0:	f107 0308 	add.w	r3, r7, #8
 80216f4:	4618      	mov	r0, r3
 80216f6:	f7fb fe71 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80216fa:	68fb      	ldr	r3, [r7, #12]
 80216fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80216fe:	e02d      	b.n	802175c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021700:	4b0d      	ldr	r3, [pc, #52]	; (8021738 <UART_SetConfig+0x660>)
 8021702:	681b      	ldr	r3, [r3, #0]
 8021704:	f003 0320 	and.w	r3, r3, #32
 8021708:	2b00      	cmp	r3, #0
 802170a:	d009      	beq.n	8021720 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802170c:	4b0a      	ldr	r3, [pc, #40]	; (8021738 <UART_SetConfig+0x660>)
 802170e:	681b      	ldr	r3, [r3, #0]
 8021710:	08db      	lsrs	r3, r3, #3
 8021712:	f003 0303 	and.w	r3, r3, #3
 8021716:	4a0c      	ldr	r2, [pc, #48]	; (8021748 <UART_SetConfig+0x670>)
 8021718:	fa22 f303 	lsr.w	r3, r2, r3
 802171c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802171e:	e01d      	b.n	802175c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8021720:	4b09      	ldr	r3, [pc, #36]	; (8021748 <UART_SetConfig+0x670>)
 8021722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021724:	e01a      	b.n	802175c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021726:	4b09      	ldr	r3, [pc, #36]	; (802174c <UART_SetConfig+0x674>)
 8021728:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802172a:	e017      	b.n	802175c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802172c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021732:	e013      	b.n	802175c <UART_SetConfig+0x684>
 8021734:	40011400 	.word	0x40011400
 8021738:	58024400 	.word	0x58024400
 802173c:	40007800 	.word	0x40007800
 8021740:	40007c00 	.word	0x40007c00
 8021744:	58000c00 	.word	0x58000c00
 8021748:	03d09000 	.word	0x03d09000
 802174c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8021750:	2300      	movs	r3, #0
 8021752:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8021754:	2301      	movs	r3, #1
 8021756:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 802175a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 802175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802175e:	2b00      	cmp	r3, #0
 8021760:	f000 824d 	beq.w	8021bfe <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021768:	4aad      	ldr	r2, [pc, #692]	; (8021a20 <UART_SetConfig+0x948>)
 802176a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802176e:	461a      	mov	r2, r3
 8021770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021772:	fbb3 f3f2 	udiv	r3, r3, r2
 8021776:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021778:	687b      	ldr	r3, [r7, #4]
 802177a:	685a      	ldr	r2, [r3, #4]
 802177c:	4613      	mov	r3, r2
 802177e:	005b      	lsls	r3, r3, #1
 8021780:	4413      	add	r3, r2
 8021782:	6a3a      	ldr	r2, [r7, #32]
 8021784:	429a      	cmp	r2, r3
 8021786:	d305      	bcc.n	8021794 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	685b      	ldr	r3, [r3, #4]
 802178c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802178e:	6a3a      	ldr	r2, [r7, #32]
 8021790:	429a      	cmp	r2, r3
 8021792:	d903      	bls.n	802179c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8021794:	2301      	movs	r3, #1
 8021796:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 802179a:	e230      	b.n	8021bfe <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802179e:	4618      	mov	r0, r3
 80217a0:	f04f 0100 	mov.w	r1, #0
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80217a8:	4a9d      	ldr	r2, [pc, #628]	; (8021a20 <UART_SetConfig+0x948>)
 80217aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80217ae:	b29b      	uxth	r3, r3
 80217b0:	f04f 0400 	mov.w	r4, #0
 80217b4:	461a      	mov	r2, r3
 80217b6:	4623      	mov	r3, r4
 80217b8:	f7de fff6 	bl	80007a8 <__aeabi_uldivmod>
 80217bc:	4603      	mov	r3, r0
 80217be:	460c      	mov	r4, r1
 80217c0:	4619      	mov	r1, r3
 80217c2:	4622      	mov	r2, r4
 80217c4:	f04f 0300 	mov.w	r3, #0
 80217c8:	f04f 0400 	mov.w	r4, #0
 80217cc:	0214      	lsls	r4, r2, #8
 80217ce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80217d2:	020b      	lsls	r3, r1, #8
 80217d4:	687a      	ldr	r2, [r7, #4]
 80217d6:	6852      	ldr	r2, [r2, #4]
 80217d8:	0852      	lsrs	r2, r2, #1
 80217da:	4611      	mov	r1, r2
 80217dc:	f04f 0200 	mov.w	r2, #0
 80217e0:	eb13 0b01 	adds.w	fp, r3, r1
 80217e4:	eb44 0c02 	adc.w	ip, r4, r2
 80217e8:	4658      	mov	r0, fp
 80217ea:	4661      	mov	r1, ip
 80217ec:	687b      	ldr	r3, [r7, #4]
 80217ee:	685b      	ldr	r3, [r3, #4]
 80217f0:	f04f 0400 	mov.w	r4, #0
 80217f4:	461a      	mov	r2, r3
 80217f6:	4623      	mov	r3, r4
 80217f8:	f7de ffd6 	bl	80007a8 <__aeabi_uldivmod>
 80217fc:	4603      	mov	r3, r0
 80217fe:	460c      	mov	r4, r1
 8021800:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8021802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8021808:	d308      	bcc.n	802181c <UART_SetConfig+0x744>
 802180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802180c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021810:	d204      	bcs.n	802181c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8021812:	687b      	ldr	r3, [r7, #4]
 8021814:	681b      	ldr	r3, [r3, #0]
 8021816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021818:	60da      	str	r2, [r3, #12]
 802181a:	e1f0      	b.n	8021bfe <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 802181c:	2301      	movs	r3, #1
 802181e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8021822:	e1ec      	b.n	8021bfe <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	69db      	ldr	r3, [r3, #28]
 8021828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802182c:	f040 8100 	bne.w	8021a30 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8021830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021834:	2b40      	cmp	r3, #64	; 0x40
 8021836:	f200 80b7 	bhi.w	80219a8 <UART_SetConfig+0x8d0>
 802183a:	a201      	add	r2, pc, #4	; (adr r2, 8021840 <UART_SetConfig+0x768>)
 802183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021840:	08021945 	.word	0x08021945
 8021844:	0802194d 	.word	0x0802194d
 8021848:	080219a9 	.word	0x080219a9
 802184c:	080219a9 	.word	0x080219a9
 8021850:	08021955 	.word	0x08021955
 8021854:	080219a9 	.word	0x080219a9
 8021858:	080219a9 	.word	0x080219a9
 802185c:	080219a9 	.word	0x080219a9
 8021860:	08021965 	.word	0x08021965
 8021864:	080219a9 	.word	0x080219a9
 8021868:	080219a9 	.word	0x080219a9
 802186c:	080219a9 	.word	0x080219a9
 8021870:	080219a9 	.word	0x080219a9
 8021874:	080219a9 	.word	0x080219a9
 8021878:	080219a9 	.word	0x080219a9
 802187c:	080219a9 	.word	0x080219a9
 8021880:	08021975 	.word	0x08021975
 8021884:	080219a9 	.word	0x080219a9
 8021888:	080219a9 	.word	0x080219a9
 802188c:	080219a9 	.word	0x080219a9
 8021890:	080219a9 	.word	0x080219a9
 8021894:	080219a9 	.word	0x080219a9
 8021898:	080219a9 	.word	0x080219a9
 802189c:	080219a9 	.word	0x080219a9
 80218a0:	080219a9 	.word	0x080219a9
 80218a4:	080219a9 	.word	0x080219a9
 80218a8:	080219a9 	.word	0x080219a9
 80218ac:	080219a9 	.word	0x080219a9
 80218b0:	080219a9 	.word	0x080219a9
 80218b4:	080219a9 	.word	0x080219a9
 80218b8:	080219a9 	.word	0x080219a9
 80218bc:	080219a9 	.word	0x080219a9
 80218c0:	0802199b 	.word	0x0802199b
 80218c4:	080219a9 	.word	0x080219a9
 80218c8:	080219a9 	.word	0x080219a9
 80218cc:	080219a9 	.word	0x080219a9
 80218d0:	080219a9 	.word	0x080219a9
 80218d4:	080219a9 	.word	0x080219a9
 80218d8:	080219a9 	.word	0x080219a9
 80218dc:	080219a9 	.word	0x080219a9
 80218e0:	080219a9 	.word	0x080219a9
 80218e4:	080219a9 	.word	0x080219a9
 80218e8:	080219a9 	.word	0x080219a9
 80218ec:	080219a9 	.word	0x080219a9
 80218f0:	080219a9 	.word	0x080219a9
 80218f4:	080219a9 	.word	0x080219a9
 80218f8:	080219a9 	.word	0x080219a9
 80218fc:	080219a9 	.word	0x080219a9
 8021900:	080219a9 	.word	0x080219a9
 8021904:	080219a9 	.word	0x080219a9
 8021908:	080219a9 	.word	0x080219a9
 802190c:	080219a9 	.word	0x080219a9
 8021910:	080219a9 	.word	0x080219a9
 8021914:	080219a9 	.word	0x080219a9
 8021918:	080219a9 	.word	0x080219a9
 802191c:	080219a9 	.word	0x080219a9
 8021920:	080219a9 	.word	0x080219a9
 8021924:	080219a9 	.word	0x080219a9
 8021928:	080219a9 	.word	0x080219a9
 802192c:	080219a9 	.word	0x080219a9
 8021930:	080219a9 	.word	0x080219a9
 8021934:	080219a9 	.word	0x080219a9
 8021938:	080219a9 	.word	0x080219a9
 802193c:	080219a9 	.word	0x080219a9
 8021940:	080219a1 	.word	0x080219a1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021944:	f7fa fa14 	bl	801bd70 <HAL_RCC_GetPCLK1Freq>
 8021948:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 802194a:	e033      	b.n	80219b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802194c:	f7fa fa26 	bl	801bd9c <HAL_RCC_GetPCLK2Freq>
 8021950:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8021952:	e02f      	b.n	80219b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021954:	f107 0314 	add.w	r3, r7, #20
 8021958:	4618      	mov	r0, r3
 802195a:	f7fb fbf3 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802195e:	69bb      	ldr	r3, [r7, #24]
 8021960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021962:	e027      	b.n	80219b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021964:	f107 0308 	add.w	r3, r7, #8
 8021968:	4618      	mov	r0, r3
 802196a:	f7fb fd37 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802196e:	68fb      	ldr	r3, [r7, #12]
 8021970:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021972:	e01f      	b.n	80219b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021974:	4b2b      	ldr	r3, [pc, #172]	; (8021a24 <UART_SetConfig+0x94c>)
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	f003 0320 	and.w	r3, r3, #32
 802197c:	2b00      	cmp	r3, #0
 802197e:	d009      	beq.n	8021994 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021980:	4b28      	ldr	r3, [pc, #160]	; (8021a24 <UART_SetConfig+0x94c>)
 8021982:	681b      	ldr	r3, [r3, #0]
 8021984:	08db      	lsrs	r3, r3, #3
 8021986:	f003 0303 	and.w	r3, r3, #3
 802198a:	4a27      	ldr	r2, [pc, #156]	; (8021a28 <UART_SetConfig+0x950>)
 802198c:	fa22 f303 	lsr.w	r3, r2, r3
 8021990:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021992:	e00f      	b.n	80219b4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8021994:	4b24      	ldr	r3, [pc, #144]	; (8021a28 <UART_SetConfig+0x950>)
 8021996:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021998:	e00c      	b.n	80219b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802199a:	4b24      	ldr	r3, [pc, #144]	; (8021a2c <UART_SetConfig+0x954>)
 802199c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802199e:	e009      	b.n	80219b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80219a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80219a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80219a6:	e005      	b.n	80219b4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80219a8:	2300      	movs	r3, #0
 80219aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80219ac:	2301      	movs	r3, #1
 80219ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80219b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80219b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	f000 8121 	beq.w	8021bfe <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80219bc:	687b      	ldr	r3, [r7, #4]
 80219be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80219c0:	4a17      	ldr	r2, [pc, #92]	; (8021a20 <UART_SetConfig+0x948>)
 80219c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80219c6:	461a      	mov	r2, r3
 80219c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80219ce:	005a      	lsls	r2, r3, #1
 80219d0:	687b      	ldr	r3, [r7, #4]
 80219d2:	685b      	ldr	r3, [r3, #4]
 80219d4:	085b      	lsrs	r3, r3, #1
 80219d6:	441a      	add	r2, r3
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	685b      	ldr	r3, [r3, #4]
 80219dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80219e0:	b29b      	uxth	r3, r3
 80219e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80219e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219e6:	2b0f      	cmp	r3, #15
 80219e8:	d916      	bls.n	8021a18 <UART_SetConfig+0x940>
 80219ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80219f0:	d212      	bcs.n	8021a18 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80219f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219f4:	b29b      	uxth	r3, r3
 80219f6:	f023 030f 	bic.w	r3, r3, #15
 80219fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80219fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219fe:	085b      	lsrs	r3, r3, #1
 8021a00:	b29b      	uxth	r3, r3
 8021a02:	f003 0307 	and.w	r3, r3, #7
 8021a06:	b29a      	uxth	r2, r3
 8021a08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021a0a:	4313      	orrs	r3, r2
 8021a0c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021a14:	60da      	str	r2, [r3, #12]
 8021a16:	e0f2      	b.n	8021bfe <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8021a18:	2301      	movs	r3, #1
 8021a1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8021a1e:	e0ee      	b.n	8021bfe <UART_SetConfig+0xb26>
 8021a20:	0802effc 	.word	0x0802effc
 8021a24:	58024400 	.word	0x58024400
 8021a28:	03d09000 	.word	0x03d09000
 8021a2c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8021a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021a34:	2b40      	cmp	r3, #64	; 0x40
 8021a36:	f200 80b7 	bhi.w	8021ba8 <UART_SetConfig+0xad0>
 8021a3a:	a201      	add	r2, pc, #4	; (adr r2, 8021a40 <UART_SetConfig+0x968>)
 8021a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021a40:	08021b45 	.word	0x08021b45
 8021a44:	08021b4d 	.word	0x08021b4d
 8021a48:	08021ba9 	.word	0x08021ba9
 8021a4c:	08021ba9 	.word	0x08021ba9
 8021a50:	08021b55 	.word	0x08021b55
 8021a54:	08021ba9 	.word	0x08021ba9
 8021a58:	08021ba9 	.word	0x08021ba9
 8021a5c:	08021ba9 	.word	0x08021ba9
 8021a60:	08021b65 	.word	0x08021b65
 8021a64:	08021ba9 	.word	0x08021ba9
 8021a68:	08021ba9 	.word	0x08021ba9
 8021a6c:	08021ba9 	.word	0x08021ba9
 8021a70:	08021ba9 	.word	0x08021ba9
 8021a74:	08021ba9 	.word	0x08021ba9
 8021a78:	08021ba9 	.word	0x08021ba9
 8021a7c:	08021ba9 	.word	0x08021ba9
 8021a80:	08021b75 	.word	0x08021b75
 8021a84:	08021ba9 	.word	0x08021ba9
 8021a88:	08021ba9 	.word	0x08021ba9
 8021a8c:	08021ba9 	.word	0x08021ba9
 8021a90:	08021ba9 	.word	0x08021ba9
 8021a94:	08021ba9 	.word	0x08021ba9
 8021a98:	08021ba9 	.word	0x08021ba9
 8021a9c:	08021ba9 	.word	0x08021ba9
 8021aa0:	08021ba9 	.word	0x08021ba9
 8021aa4:	08021ba9 	.word	0x08021ba9
 8021aa8:	08021ba9 	.word	0x08021ba9
 8021aac:	08021ba9 	.word	0x08021ba9
 8021ab0:	08021ba9 	.word	0x08021ba9
 8021ab4:	08021ba9 	.word	0x08021ba9
 8021ab8:	08021ba9 	.word	0x08021ba9
 8021abc:	08021ba9 	.word	0x08021ba9
 8021ac0:	08021b9b 	.word	0x08021b9b
 8021ac4:	08021ba9 	.word	0x08021ba9
 8021ac8:	08021ba9 	.word	0x08021ba9
 8021acc:	08021ba9 	.word	0x08021ba9
 8021ad0:	08021ba9 	.word	0x08021ba9
 8021ad4:	08021ba9 	.word	0x08021ba9
 8021ad8:	08021ba9 	.word	0x08021ba9
 8021adc:	08021ba9 	.word	0x08021ba9
 8021ae0:	08021ba9 	.word	0x08021ba9
 8021ae4:	08021ba9 	.word	0x08021ba9
 8021ae8:	08021ba9 	.word	0x08021ba9
 8021aec:	08021ba9 	.word	0x08021ba9
 8021af0:	08021ba9 	.word	0x08021ba9
 8021af4:	08021ba9 	.word	0x08021ba9
 8021af8:	08021ba9 	.word	0x08021ba9
 8021afc:	08021ba9 	.word	0x08021ba9
 8021b00:	08021ba9 	.word	0x08021ba9
 8021b04:	08021ba9 	.word	0x08021ba9
 8021b08:	08021ba9 	.word	0x08021ba9
 8021b0c:	08021ba9 	.word	0x08021ba9
 8021b10:	08021ba9 	.word	0x08021ba9
 8021b14:	08021ba9 	.word	0x08021ba9
 8021b18:	08021ba9 	.word	0x08021ba9
 8021b1c:	08021ba9 	.word	0x08021ba9
 8021b20:	08021ba9 	.word	0x08021ba9
 8021b24:	08021ba9 	.word	0x08021ba9
 8021b28:	08021ba9 	.word	0x08021ba9
 8021b2c:	08021ba9 	.word	0x08021ba9
 8021b30:	08021ba9 	.word	0x08021ba9
 8021b34:	08021ba9 	.word	0x08021ba9
 8021b38:	08021ba9 	.word	0x08021ba9
 8021b3c:	08021ba9 	.word	0x08021ba9
 8021b40:	08021ba1 	.word	0x08021ba1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021b44:	f7fa f914 	bl	801bd70 <HAL_RCC_GetPCLK1Freq>
 8021b48:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8021b4a:	e033      	b.n	8021bb4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021b4c:	f7fa f926 	bl	801bd9c <HAL_RCC_GetPCLK2Freq>
 8021b50:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8021b52:	e02f      	b.n	8021bb4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021b54:	f107 0314 	add.w	r3, r7, #20
 8021b58:	4618      	mov	r0, r3
 8021b5a:	f7fb faf3 	bl	801d144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021b5e:	69bb      	ldr	r3, [r7, #24]
 8021b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021b62:	e027      	b.n	8021bb4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021b64:	f107 0308 	add.w	r3, r7, #8
 8021b68:	4618      	mov	r0, r3
 8021b6a:	f7fb fc37 	bl	801d3dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021b6e:	68fb      	ldr	r3, [r7, #12]
 8021b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021b72:	e01f      	b.n	8021bb4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021b74:	4b2c      	ldr	r3, [pc, #176]	; (8021c28 <UART_SetConfig+0xb50>)
 8021b76:	681b      	ldr	r3, [r3, #0]
 8021b78:	f003 0320 	and.w	r3, r3, #32
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	d009      	beq.n	8021b94 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021b80:	4b29      	ldr	r3, [pc, #164]	; (8021c28 <UART_SetConfig+0xb50>)
 8021b82:	681b      	ldr	r3, [r3, #0]
 8021b84:	08db      	lsrs	r3, r3, #3
 8021b86:	f003 0303 	and.w	r3, r3, #3
 8021b8a:	4a28      	ldr	r2, [pc, #160]	; (8021c2c <UART_SetConfig+0xb54>)
 8021b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8021b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021b92:	e00f      	b.n	8021bb4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8021b94:	4b25      	ldr	r3, [pc, #148]	; (8021c2c <UART_SetConfig+0xb54>)
 8021b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021b98:	e00c      	b.n	8021bb4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021b9a:	4b25      	ldr	r3, [pc, #148]	; (8021c30 <UART_SetConfig+0xb58>)
 8021b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021b9e:	e009      	b.n	8021bb4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8021ba6:	e005      	b.n	8021bb4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8021ba8:	2300      	movs	r3, #0
 8021baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8021bac:	2301      	movs	r3, #1
 8021bae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8021bb2:	bf00      	nop
    }

    if (pclk != 0U)
 8021bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bb6:	2b00      	cmp	r3, #0
 8021bb8:	d021      	beq.n	8021bfe <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021bbe:	4a1d      	ldr	r2, [pc, #116]	; (8021c34 <UART_SetConfig+0xb5c>)
 8021bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021bc4:	461a      	mov	r2, r3
 8021bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	685b      	ldr	r3, [r3, #4]
 8021bd0:	085b      	lsrs	r3, r3, #1
 8021bd2:	441a      	add	r2, r3
 8021bd4:	687b      	ldr	r3, [r7, #4]
 8021bd6:	685b      	ldr	r3, [r3, #4]
 8021bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8021bdc:	b29b      	uxth	r3, r3
 8021bde:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021be2:	2b0f      	cmp	r3, #15
 8021be4:	d908      	bls.n	8021bf8 <UART_SetConfig+0xb20>
 8021be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021bec:	d204      	bcs.n	8021bf8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	681b      	ldr	r3, [r3, #0]
 8021bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021bf4:	60da      	str	r2, [r3, #12]
 8021bf6:	e002      	b.n	8021bfe <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8021bf8:	2301      	movs	r3, #1
 8021bfa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	2201      	movs	r2, #1
 8021c02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8021c06:	687b      	ldr	r3, [r7, #4]
 8021c08:	2201      	movs	r2, #1
 8021c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	2200      	movs	r2, #0
 8021c12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	2200      	movs	r2, #0
 8021c18:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8021c1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8021c1e:	4618      	mov	r0, r3
 8021c20:	3738      	adds	r7, #56	; 0x38
 8021c22:	46bd      	mov	sp, r7
 8021c24:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8021c28:	58024400 	.word	0x58024400
 8021c2c:	03d09000 	.word	0x03d09000
 8021c30:	003d0900 	.word	0x003d0900
 8021c34:	0802effc 	.word	0x0802effc

08021c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8021c38:	b480      	push	{r7}
 8021c3a:	b083      	sub	sp, #12
 8021c3c:	af00      	add	r7, sp, #0
 8021c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c44:	f003 0301 	and.w	r3, r3, #1
 8021c48:	2b00      	cmp	r3, #0
 8021c4a:	d00a      	beq.n	8021c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8021c4c:	687b      	ldr	r3, [r7, #4]
 8021c4e:	681b      	ldr	r3, [r3, #0]
 8021c50:	685b      	ldr	r3, [r3, #4]
 8021c52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	681b      	ldr	r3, [r3, #0]
 8021c5e:	430a      	orrs	r2, r1
 8021c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c66:	f003 0302 	and.w	r3, r3, #2
 8021c6a:	2b00      	cmp	r3, #0
 8021c6c:	d00a      	beq.n	8021c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	685b      	ldr	r3, [r3, #4]
 8021c74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8021c78:	687b      	ldr	r3, [r7, #4]
 8021c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	681b      	ldr	r3, [r3, #0]
 8021c80:	430a      	orrs	r2, r1
 8021c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c88:	f003 0304 	and.w	r3, r3, #4
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d00a      	beq.n	8021ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021c90:	687b      	ldr	r3, [r7, #4]
 8021c92:	681b      	ldr	r3, [r3, #0]
 8021c94:	685b      	ldr	r3, [r3, #4]
 8021c96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8021c9a:	687b      	ldr	r3, [r7, #4]
 8021c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8021c9e:	687b      	ldr	r3, [r7, #4]
 8021ca0:	681b      	ldr	r3, [r3, #0]
 8021ca2:	430a      	orrs	r2, r1
 8021ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021caa:	f003 0308 	and.w	r3, r3, #8
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d00a      	beq.n	8021cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8021cb2:	687b      	ldr	r3, [r7, #4]
 8021cb4:	681b      	ldr	r3, [r3, #0]
 8021cb6:	685b      	ldr	r3, [r3, #4]
 8021cb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	681b      	ldr	r3, [r3, #0]
 8021cc4:	430a      	orrs	r2, r1
 8021cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021cc8:	687b      	ldr	r3, [r7, #4]
 8021cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ccc:	f003 0310 	and.w	r3, r3, #16
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d00a      	beq.n	8021cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	689b      	ldr	r3, [r3, #8]
 8021cda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	681b      	ldr	r3, [r3, #0]
 8021ce6:	430a      	orrs	r2, r1
 8021ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021cee:	f003 0320 	and.w	r3, r3, #32
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	d00a      	beq.n	8021d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021cf6:	687b      	ldr	r3, [r7, #4]
 8021cf8:	681b      	ldr	r3, [r3, #0]
 8021cfa:	689b      	ldr	r3, [r3, #8]
 8021cfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021d04:	687b      	ldr	r3, [r7, #4]
 8021d06:	681b      	ldr	r3, [r3, #0]
 8021d08:	430a      	orrs	r2, r1
 8021d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8021d0c:	687b      	ldr	r3, [r7, #4]
 8021d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	d01a      	beq.n	8021d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8021d18:	687b      	ldr	r3, [r7, #4]
 8021d1a:	681b      	ldr	r3, [r3, #0]
 8021d1c:	685b      	ldr	r3, [r3, #4]
 8021d1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8021d22:	687b      	ldr	r3, [r7, #4]
 8021d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	681b      	ldr	r3, [r3, #0]
 8021d2a:	430a      	orrs	r2, r1
 8021d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8021d2e:	687b      	ldr	r3, [r7, #4]
 8021d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021d36:	d10a      	bne.n	8021d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	681b      	ldr	r3, [r3, #0]
 8021d3c:	685b      	ldr	r3, [r3, #4]
 8021d3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8021d42:	687b      	ldr	r3, [r7, #4]
 8021d44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	681b      	ldr	r3, [r3, #0]
 8021d4a:	430a      	orrs	r2, r1
 8021d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8021d4e:	687b      	ldr	r3, [r7, #4]
 8021d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d00a      	beq.n	8021d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	681b      	ldr	r3, [r3, #0]
 8021d5e:	685b      	ldr	r3, [r3, #4]
 8021d60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	681b      	ldr	r3, [r3, #0]
 8021d6c:	430a      	orrs	r2, r1
 8021d6e:	605a      	str	r2, [r3, #4]
  }
}
 8021d70:	bf00      	nop
 8021d72:	370c      	adds	r7, #12
 8021d74:	46bd      	mov	sp, r7
 8021d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d7a:	4770      	bx	lr

08021d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8021d7c:	b580      	push	{r7, lr}
 8021d7e:	b086      	sub	sp, #24
 8021d80:	af02      	add	r7, sp, #8
 8021d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021d84:	687b      	ldr	r3, [r7, #4]
 8021d86:	2200      	movs	r2, #0
 8021d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8021d8c:	f7f2 fd0c 	bl	80147a8 <HAL_GetTick>
 8021d90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8021d92:	687b      	ldr	r3, [r7, #4]
 8021d94:	681b      	ldr	r3, [r3, #0]
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	f003 0308 	and.w	r3, r3, #8
 8021d9c:	2b08      	cmp	r3, #8
 8021d9e:	d10e      	bne.n	8021dbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8021da4:	9300      	str	r3, [sp, #0]
 8021da6:	68fb      	ldr	r3, [r7, #12]
 8021da8:	2200      	movs	r2, #0
 8021daa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021dae:	6878      	ldr	r0, [r7, #4]
 8021db0:	f000 f82c 	bl	8021e0c <UART_WaitOnFlagUntilTimeout>
 8021db4:	4603      	mov	r3, r0
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d001      	beq.n	8021dbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8021dba:	2303      	movs	r3, #3
 8021dbc:	e022      	b.n	8021e04 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8021dbe:	687b      	ldr	r3, [r7, #4]
 8021dc0:	681b      	ldr	r3, [r3, #0]
 8021dc2:	681b      	ldr	r3, [r3, #0]
 8021dc4:	f003 0304 	and.w	r3, r3, #4
 8021dc8:	2b04      	cmp	r3, #4
 8021dca:	d10e      	bne.n	8021dea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8021dd0:	9300      	str	r3, [sp, #0]
 8021dd2:	68fb      	ldr	r3, [r7, #12]
 8021dd4:	2200      	movs	r2, #0
 8021dd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8021dda:	6878      	ldr	r0, [r7, #4]
 8021ddc:	f000 f816 	bl	8021e0c <UART_WaitOnFlagUntilTimeout>
 8021de0:	4603      	mov	r3, r0
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d001      	beq.n	8021dea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8021de6:	2303      	movs	r3, #3
 8021de8:	e00c      	b.n	8021e04 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8021dea:	687b      	ldr	r3, [r7, #4]
 8021dec:	2220      	movs	r2, #32
 8021dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8021df2:	687b      	ldr	r3, [r7, #4]
 8021df4:	2220      	movs	r2, #32
 8021df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	2200      	movs	r2, #0
 8021dfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8021e02:	2300      	movs	r3, #0
}
 8021e04:	4618      	mov	r0, r3
 8021e06:	3710      	adds	r7, #16
 8021e08:	46bd      	mov	sp, r7
 8021e0a:	bd80      	pop	{r7, pc}

08021e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8021e0c:	b580      	push	{r7, lr}
 8021e0e:	b084      	sub	sp, #16
 8021e10:	af00      	add	r7, sp, #0
 8021e12:	60f8      	str	r0, [r7, #12]
 8021e14:	60b9      	str	r1, [r7, #8]
 8021e16:	603b      	str	r3, [r7, #0]
 8021e18:	4613      	mov	r3, r2
 8021e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021e1c:	e062      	b.n	8021ee4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8021e1e:	69bb      	ldr	r3, [r7, #24]
 8021e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e24:	d05e      	beq.n	8021ee4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8021e26:	f7f2 fcbf 	bl	80147a8 <HAL_GetTick>
 8021e2a:	4602      	mov	r2, r0
 8021e2c:	683b      	ldr	r3, [r7, #0]
 8021e2e:	1ad3      	subs	r3, r2, r3
 8021e30:	69ba      	ldr	r2, [r7, #24]
 8021e32:	429a      	cmp	r2, r3
 8021e34:	d302      	bcc.n	8021e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8021e36:	69bb      	ldr	r3, [r7, #24]
 8021e38:	2b00      	cmp	r3, #0
 8021e3a:	d11d      	bne.n	8021e78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8021e3c:	68fb      	ldr	r3, [r7, #12]
 8021e3e:	681b      	ldr	r3, [r3, #0]
 8021e40:	681a      	ldr	r2, [r3, #0]
 8021e42:	68fb      	ldr	r3, [r7, #12]
 8021e44:	681b      	ldr	r3, [r3, #0]
 8021e46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8021e4a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021e4c:	68fb      	ldr	r3, [r7, #12]
 8021e4e:	681b      	ldr	r3, [r3, #0]
 8021e50:	689a      	ldr	r2, [r3, #8]
 8021e52:	68fb      	ldr	r3, [r7, #12]
 8021e54:	681b      	ldr	r3, [r3, #0]
 8021e56:	f022 0201 	bic.w	r2, r2, #1
 8021e5a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8021e5c:	68fb      	ldr	r3, [r7, #12]
 8021e5e:	2220      	movs	r2, #32
 8021e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8021e64:	68fb      	ldr	r3, [r7, #12]
 8021e66:	2220      	movs	r2, #32
 8021e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8021e6c:	68fb      	ldr	r3, [r7, #12]
 8021e6e:	2200      	movs	r2, #0
 8021e70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8021e74:	2303      	movs	r3, #3
 8021e76:	e045      	b.n	8021f04 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	681b      	ldr	r3, [r3, #0]
 8021e7c:	681b      	ldr	r3, [r3, #0]
 8021e7e:	f003 0304 	and.w	r3, r3, #4
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d02e      	beq.n	8021ee4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8021e86:	68fb      	ldr	r3, [r7, #12]
 8021e88:	681b      	ldr	r3, [r3, #0]
 8021e8a:	69db      	ldr	r3, [r3, #28]
 8021e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8021e94:	d126      	bne.n	8021ee4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8021e96:	68fb      	ldr	r3, [r7, #12]
 8021e98:	681b      	ldr	r3, [r3, #0]
 8021e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021e9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8021ea0:	68fb      	ldr	r3, [r7, #12]
 8021ea2:	681b      	ldr	r3, [r3, #0]
 8021ea4:	681a      	ldr	r2, [r3, #0]
 8021ea6:	68fb      	ldr	r3, [r7, #12]
 8021ea8:	681b      	ldr	r3, [r3, #0]
 8021eaa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8021eae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021eb0:	68fb      	ldr	r3, [r7, #12]
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	689a      	ldr	r2, [r3, #8]
 8021eb6:	68fb      	ldr	r3, [r7, #12]
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	f022 0201 	bic.w	r2, r2, #1
 8021ebe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8021ec0:	68fb      	ldr	r3, [r7, #12]
 8021ec2:	2220      	movs	r2, #32
 8021ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8021ec8:	68fb      	ldr	r3, [r7, #12]
 8021eca:	2220      	movs	r2, #32
 8021ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8021ed0:	68fb      	ldr	r3, [r7, #12]
 8021ed2:	2220      	movs	r2, #32
 8021ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021ed8:	68fb      	ldr	r3, [r7, #12]
 8021eda:	2200      	movs	r2, #0
 8021edc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8021ee0:	2303      	movs	r3, #3
 8021ee2:	e00f      	b.n	8021f04 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021ee4:	68fb      	ldr	r3, [r7, #12]
 8021ee6:	681b      	ldr	r3, [r3, #0]
 8021ee8:	69da      	ldr	r2, [r3, #28]
 8021eea:	68bb      	ldr	r3, [r7, #8]
 8021eec:	4013      	ands	r3, r2
 8021eee:	68ba      	ldr	r2, [r7, #8]
 8021ef0:	429a      	cmp	r2, r3
 8021ef2:	bf0c      	ite	eq
 8021ef4:	2301      	moveq	r3, #1
 8021ef6:	2300      	movne	r3, #0
 8021ef8:	b2db      	uxtb	r3, r3
 8021efa:	461a      	mov	r2, r3
 8021efc:	79fb      	ldrb	r3, [r7, #7]
 8021efe:	429a      	cmp	r2, r3
 8021f00:	d08d      	beq.n	8021e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8021f02:	2300      	movs	r3, #0
}
 8021f04:	4618      	mov	r0, r3
 8021f06:	3710      	adds	r7, #16
 8021f08:	46bd      	mov	sp, r7
 8021f0a:	bd80      	pop	{r7, pc}

08021f0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8021f0c:	b480      	push	{r7}
 8021f0e:	b083      	sub	sp, #12
 8021f10:	af00      	add	r7, sp, #0
 8021f12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	681b      	ldr	r3, [r3, #0]
 8021f18:	681a      	ldr	r2, [r3, #0]
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8021f22:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	681b      	ldr	r3, [r3, #0]
 8021f28:	689a      	ldr	r2, [r3, #8]
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	681b      	ldr	r3, [r3, #0]
 8021f2e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8021f32:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	2220      	movs	r2, #32
 8021f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8021f3c:	bf00      	nop
 8021f3e:	370c      	adds	r7, #12
 8021f40:	46bd      	mov	sp, r7
 8021f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f46:	4770      	bx	lr

08021f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021f48:	b480      	push	{r7}
 8021f4a:	b083      	sub	sp, #12
 8021f4c:	af00      	add	r7, sp, #0
 8021f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	681b      	ldr	r3, [r3, #0]
 8021f54:	681a      	ldr	r2, [r3, #0]
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	681b      	ldr	r3, [r3, #0]
 8021f5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8021f5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8021f60:	687b      	ldr	r3, [r7, #4]
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	6899      	ldr	r1, [r3, #8]
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	681a      	ldr	r2, [r3, #0]
 8021f6a:	4b08      	ldr	r3, [pc, #32]	; (8021f8c <UART_EndRxTransfer+0x44>)
 8021f6c:	400b      	ands	r3, r1
 8021f6e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021f70:	687b      	ldr	r3, [r7, #4]
 8021f72:	2220      	movs	r2, #32
 8021f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	2200      	movs	r2, #0
 8021f7c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8021f7e:	bf00      	nop
 8021f80:	370c      	adds	r7, #12
 8021f82:	46bd      	mov	sp, r7
 8021f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f88:	4770      	bx	lr
 8021f8a:	bf00      	nop
 8021f8c:	effffffe 	.word	0xeffffffe

08021f90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8021f90:	b580      	push	{r7, lr}
 8021f92:	b084      	sub	sp, #16
 8021f94:	af00      	add	r7, sp, #0
 8021f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8021f98:	687b      	ldr	r3, [r7, #4]
 8021f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021f9c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	69db      	ldr	r3, [r3, #28]
 8021fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021fa6:	d01f      	beq.n	8021fe8 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8021fa8:	68fb      	ldr	r3, [r7, #12]
 8021faa:	2200      	movs	r2, #0
 8021fac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	681b      	ldr	r3, [r3, #0]
 8021fb4:	681a      	ldr	r2, [r3, #0]
 8021fb6:	68fb      	ldr	r3, [r7, #12]
 8021fb8:	681b      	ldr	r3, [r3, #0]
 8021fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8021fbe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021fc0:	68fb      	ldr	r3, [r7, #12]
 8021fc2:	681b      	ldr	r3, [r3, #0]
 8021fc4:	689a      	ldr	r2, [r3, #8]
 8021fc6:	68fb      	ldr	r3, [r7, #12]
 8021fc8:	681b      	ldr	r3, [r3, #0]
 8021fca:	f022 0201 	bic.w	r2, r2, #1
 8021fce:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021fd0:	68fb      	ldr	r3, [r7, #12]
 8021fd2:	681b      	ldr	r3, [r3, #0]
 8021fd4:	689a      	ldr	r2, [r3, #8]
 8021fd6:	68fb      	ldr	r3, [r7, #12]
 8021fd8:	681b      	ldr	r3, [r3, #0]
 8021fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021fde:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8021fe0:	68fb      	ldr	r3, [r7, #12]
 8021fe2:	2220      	movs	r2, #32
 8021fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8021fe8:	68f8      	ldr	r0, [r7, #12]
 8021fea:	f7f0 faef 	bl	80125cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8021fee:	bf00      	nop
 8021ff0:	3710      	adds	r7, #16
 8021ff2:	46bd      	mov	sp, r7
 8021ff4:	bd80      	pop	{r7, pc}

08021ff6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8021ff6:	b580      	push	{r7, lr}
 8021ff8:	b084      	sub	sp, #16
 8021ffa:	af00      	add	r7, sp, #0
 8021ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8021ffe:	687b      	ldr	r3, [r7, #4]
 8022000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022002:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8022004:	68f8      	ldr	r0, [r7, #12]
 8022006:	f7ff f853 	bl	80210b0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802200a:	bf00      	nop
 802200c:	3710      	adds	r7, #16
 802200e:	46bd      	mov	sp, r7
 8022010:	bd80      	pop	{r7, pc}

08022012 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8022012:	b580      	push	{r7, lr}
 8022014:	b086      	sub	sp, #24
 8022016:	af00      	add	r7, sp, #0
 8022018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802201e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8022020:	697b      	ldr	r3, [r7, #20]
 8022022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8022026:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8022028:	697b      	ldr	r3, [r7, #20]
 802202a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802202e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8022030:	697b      	ldr	r3, [r7, #20]
 8022032:	681b      	ldr	r3, [r3, #0]
 8022034:	689b      	ldr	r3, [r3, #8]
 8022036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802203a:	2b80      	cmp	r3, #128	; 0x80
 802203c:	d109      	bne.n	8022052 <UART_DMAError+0x40>
 802203e:	693b      	ldr	r3, [r7, #16]
 8022040:	2b21      	cmp	r3, #33	; 0x21
 8022042:	d106      	bne.n	8022052 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8022044:	697b      	ldr	r3, [r7, #20]
 8022046:	2200      	movs	r2, #0
 8022048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 802204c:	6978      	ldr	r0, [r7, #20]
 802204e:	f7ff ff5d 	bl	8021f0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8022052:	697b      	ldr	r3, [r7, #20]
 8022054:	681b      	ldr	r3, [r3, #0]
 8022056:	689b      	ldr	r3, [r3, #8]
 8022058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802205c:	2b40      	cmp	r3, #64	; 0x40
 802205e:	d109      	bne.n	8022074 <UART_DMAError+0x62>
 8022060:	68fb      	ldr	r3, [r7, #12]
 8022062:	2b22      	cmp	r3, #34	; 0x22
 8022064:	d106      	bne.n	8022074 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8022066:	697b      	ldr	r3, [r7, #20]
 8022068:	2200      	movs	r2, #0
 802206a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 802206e:	6978      	ldr	r0, [r7, #20]
 8022070:	f7ff ff6a 	bl	8021f48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8022074:	697b      	ldr	r3, [r7, #20]
 8022076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802207a:	f043 0210 	orr.w	r2, r3, #16
 802207e:	697b      	ldr	r3, [r7, #20]
 8022080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022084:	6978      	ldr	r0, [r7, #20]
 8022086:	f7ff f81d 	bl	80210c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802208a:	bf00      	nop
 802208c:	3718      	adds	r7, #24
 802208e:	46bd      	mov	sp, r7
 8022090:	bd80      	pop	{r7, pc}

08022092 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8022092:	b580      	push	{r7, lr}
 8022094:	b084      	sub	sp, #16
 8022096:	af00      	add	r7, sp, #0
 8022098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802209a:	687b      	ldr	r3, [r7, #4]
 802209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802209e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	2200      	movs	r2, #0
 80220a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80220a8:	68fb      	ldr	r3, [r7, #12]
 80220aa:	2200      	movs	r2, #0
 80220ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80220b0:	68f8      	ldr	r0, [r7, #12]
 80220b2:	f7ff f807 	bl	80210c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80220b6:	bf00      	nop
 80220b8:	3710      	adds	r7, #16
 80220ba:	46bd      	mov	sp, r7
 80220bc:	bd80      	pop	{r7, pc}

080220be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80220be:	b580      	push	{r7, lr}
 80220c0:	b082      	sub	sp, #8
 80220c2:	af00      	add	r7, sp, #0
 80220c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	681b      	ldr	r3, [r3, #0]
 80220ca:	681a      	ldr	r2, [r3, #0]
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	681b      	ldr	r3, [r3, #0]
 80220d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80220d4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	2220      	movs	r2, #32
 80220da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	2200      	movs	r2, #0
 80220e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80220e4:	6878      	ldr	r0, [r7, #4]
 80220e6:	f7fe ffd9 	bl	802109c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80220ea:	bf00      	nop
 80220ec:	3708      	adds	r7, #8
 80220ee:	46bd      	mov	sp, r7
 80220f0:	bd80      	pop	{r7, pc}

080220f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80220f2:	b480      	push	{r7}
 80220f4:	b083      	sub	sp, #12
 80220f6:	af00      	add	r7, sp, #0
 80220f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80220fa:	bf00      	nop
 80220fc:	370c      	adds	r7, #12
 80220fe:	46bd      	mov	sp, r7
 8022100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022104:	4770      	bx	lr

08022106 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8022106:	b480      	push	{r7}
 8022108:	b083      	sub	sp, #12
 802210a:	af00      	add	r7, sp, #0
 802210c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 802210e:	bf00      	nop
 8022110:	370c      	adds	r7, #12
 8022112:	46bd      	mov	sp, r7
 8022114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022118:	4770      	bx	lr

0802211a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 802211a:	b480      	push	{r7}
 802211c:	b083      	sub	sp, #12
 802211e:	af00      	add	r7, sp, #0
 8022120:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8022122:	bf00      	nop
 8022124:	370c      	adds	r7, #12
 8022126:	46bd      	mov	sp, r7
 8022128:	f85d 7b04 	ldr.w	r7, [sp], #4
 802212c:	4770      	bx	lr

0802212e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802212e:	b480      	push	{r7}
 8022130:	b085      	sub	sp, #20
 8022132:	af00      	add	r7, sp, #0
 8022134:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 802213c:	2b01      	cmp	r3, #1
 802213e:	d101      	bne.n	8022144 <HAL_UARTEx_DisableFifoMode+0x16>
 8022140:	2302      	movs	r3, #2
 8022142:	e027      	b.n	8022194 <HAL_UARTEx_DisableFifoMode+0x66>
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	2201      	movs	r2, #1
 8022148:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 802214c:	687b      	ldr	r3, [r7, #4]
 802214e:	2224      	movs	r2, #36	; 0x24
 8022150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022154:	687b      	ldr	r3, [r7, #4]
 8022156:	681b      	ldr	r3, [r3, #0]
 8022158:	681b      	ldr	r3, [r3, #0]
 802215a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	681b      	ldr	r3, [r3, #0]
 8022160:	681a      	ldr	r2, [r3, #0]
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	681b      	ldr	r3, [r3, #0]
 8022166:	f022 0201 	bic.w	r2, r2, #1
 802216a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802216c:	68fb      	ldr	r3, [r7, #12]
 802216e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8022172:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8022174:	687b      	ldr	r3, [r7, #4]
 8022176:	2200      	movs	r2, #0
 8022178:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	681b      	ldr	r3, [r3, #0]
 802217e:	68fa      	ldr	r2, [r7, #12]
 8022180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	2220      	movs	r2, #32
 8022186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	2200      	movs	r2, #0
 802218e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8022192:	2300      	movs	r3, #0
}
 8022194:	4618      	mov	r0, r3
 8022196:	3714      	adds	r7, #20
 8022198:	46bd      	mov	sp, r7
 802219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802219e:	4770      	bx	lr

080221a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80221a0:	b580      	push	{r7, lr}
 80221a2:	b084      	sub	sp, #16
 80221a4:	af00      	add	r7, sp, #0
 80221a6:	6078      	str	r0, [r7, #4]
 80221a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80221b0:	2b01      	cmp	r3, #1
 80221b2:	d101      	bne.n	80221b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80221b4:	2302      	movs	r3, #2
 80221b6:	e02d      	b.n	8022214 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	2201      	movs	r2, #1
 80221bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	2224      	movs	r2, #36	; 0x24
 80221c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80221c8:	687b      	ldr	r3, [r7, #4]
 80221ca:	681b      	ldr	r3, [r3, #0]
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	681b      	ldr	r3, [r3, #0]
 80221d4:	681a      	ldr	r2, [r3, #0]
 80221d6:	687b      	ldr	r3, [r7, #4]
 80221d8:	681b      	ldr	r3, [r3, #0]
 80221da:	f022 0201 	bic.w	r2, r2, #1
 80221de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	681b      	ldr	r3, [r3, #0]
 80221e4:	689b      	ldr	r3, [r3, #8]
 80221e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80221ea:	687b      	ldr	r3, [r7, #4]
 80221ec:	681b      	ldr	r3, [r3, #0]
 80221ee:	683a      	ldr	r2, [r7, #0]
 80221f0:	430a      	orrs	r2, r1
 80221f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80221f4:	6878      	ldr	r0, [r7, #4]
 80221f6:	f000 f84f 	bl	8022298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	681b      	ldr	r3, [r3, #0]
 80221fe:	68fa      	ldr	r2, [r7, #12]
 8022200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022202:	687b      	ldr	r3, [r7, #4]
 8022204:	2220      	movs	r2, #32
 8022206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	2200      	movs	r2, #0
 802220e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8022212:	2300      	movs	r3, #0
}
 8022214:	4618      	mov	r0, r3
 8022216:	3710      	adds	r7, #16
 8022218:	46bd      	mov	sp, r7
 802221a:	bd80      	pop	{r7, pc}

0802221c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802221c:	b580      	push	{r7, lr}
 802221e:	b084      	sub	sp, #16
 8022220:	af00      	add	r7, sp, #0
 8022222:	6078      	str	r0, [r7, #4]
 8022224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022226:	687b      	ldr	r3, [r7, #4]
 8022228:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 802222c:	2b01      	cmp	r3, #1
 802222e:	d101      	bne.n	8022234 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8022230:	2302      	movs	r3, #2
 8022232:	e02d      	b.n	8022290 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8022234:	687b      	ldr	r3, [r7, #4]
 8022236:	2201      	movs	r2, #1
 8022238:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	2224      	movs	r2, #36	; 0x24
 8022240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022244:	687b      	ldr	r3, [r7, #4]
 8022246:	681b      	ldr	r3, [r3, #0]
 8022248:	681b      	ldr	r3, [r3, #0]
 802224a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	681b      	ldr	r3, [r3, #0]
 8022250:	681a      	ldr	r2, [r3, #0]
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	f022 0201 	bic.w	r2, r2, #1
 802225a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802225c:	687b      	ldr	r3, [r7, #4]
 802225e:	681b      	ldr	r3, [r3, #0]
 8022260:	689b      	ldr	r3, [r3, #8]
 8022262:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	683a      	ldr	r2, [r7, #0]
 802226c:	430a      	orrs	r2, r1
 802226e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022270:	6878      	ldr	r0, [r7, #4]
 8022272:	f000 f811 	bl	8022298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022276:	687b      	ldr	r3, [r7, #4]
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	68fa      	ldr	r2, [r7, #12]
 802227c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802227e:	687b      	ldr	r3, [r7, #4]
 8022280:	2220      	movs	r2, #32
 8022282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	2200      	movs	r2, #0
 802228a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 802228e:	2300      	movs	r3, #0
}
 8022290:	4618      	mov	r0, r3
 8022292:	3710      	adds	r7, #16
 8022294:	46bd      	mov	sp, r7
 8022296:	bd80      	pop	{r7, pc}

08022298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8022298:	b480      	push	{r7}
 802229a:	b089      	sub	sp, #36	; 0x24
 802229c:	af00      	add	r7, sp, #0
 802229e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80222a0:	4a2f      	ldr	r2, [pc, #188]	; (8022360 <UARTEx_SetNbDataToProcess+0xc8>)
 80222a2:	f107 0314 	add.w	r3, r7, #20
 80222a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80222aa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80222ae:	4a2d      	ldr	r2, [pc, #180]	; (8022364 <UARTEx_SetNbDataToProcess+0xcc>)
 80222b0:	f107 030c 	add.w	r3, r7, #12
 80222b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80222b8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80222bc:	687b      	ldr	r3, [r7, #4]
 80222be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	d108      	bne.n	80222d6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	2201      	movs	r2, #1
 80222c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80222cc:	687b      	ldr	r3, [r7, #4]
 80222ce:	2201      	movs	r2, #1
 80222d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80222d4:	e03d      	b.n	8022352 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80222d6:	2310      	movs	r3, #16
 80222d8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80222da:	2310      	movs	r3, #16
 80222dc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	689b      	ldr	r3, [r3, #8]
 80222e4:	0e5b      	lsrs	r3, r3, #25
 80222e6:	b2db      	uxtb	r3, r3
 80222e8:	f003 0307 	and.w	r3, r3, #7
 80222ec:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	681b      	ldr	r3, [r3, #0]
 80222f2:	689b      	ldr	r3, [r3, #8]
 80222f4:	0f5b      	lsrs	r3, r3, #29
 80222f6:	b2db      	uxtb	r3, r3
 80222f8:	f003 0307 	and.w	r3, r3, #7
 80222fc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80222fe:	7fbb      	ldrb	r3, [r7, #30]
 8022300:	7f3a      	ldrb	r2, [r7, #28]
 8022302:	f107 0120 	add.w	r1, r7, #32
 8022306:	440a      	add	r2, r1
 8022308:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 802230c:	fb02 f303 	mul.w	r3, r2, r3
 8022310:	7f3a      	ldrb	r2, [r7, #28]
 8022312:	f107 0120 	add.w	r1, r7, #32
 8022316:	440a      	add	r2, r1
 8022318:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 802231c:	fb93 f3f2 	sdiv	r3, r3, r2
 8022320:	b29a      	uxth	r2, r3
 8022322:	687b      	ldr	r3, [r7, #4]
 8022324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8022328:	7ffb      	ldrb	r3, [r7, #31]
 802232a:	7f7a      	ldrb	r2, [r7, #29]
 802232c:	f107 0120 	add.w	r1, r7, #32
 8022330:	440a      	add	r2, r1
 8022332:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8022336:	fb02 f303 	mul.w	r3, r2, r3
 802233a:	7f7a      	ldrb	r2, [r7, #29]
 802233c:	f107 0120 	add.w	r1, r7, #32
 8022340:	440a      	add	r2, r1
 8022342:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8022346:	fb93 f3f2 	sdiv	r3, r3, r2
 802234a:	b29a      	uxth	r2, r3
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8022352:	bf00      	nop
 8022354:	3724      	adds	r7, #36	; 0x24
 8022356:	46bd      	mov	sp, r7
 8022358:	f85d 7b04 	ldr.w	r7, [sp], #4
 802235c:	4770      	bx	lr
 802235e:	bf00      	nop
 8022360:	0802e530 	.word	0x0802e530
 8022364:	0802e538 	.word	0x0802e538

08022368 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8022368:	b084      	sub	sp, #16
 802236a:	b480      	push	{r7}
 802236c:	b085      	sub	sp, #20
 802236e:	af00      	add	r7, sp, #0
 8022370:	6078      	str	r0, [r7, #4]
 8022372:	f107 001c 	add.w	r0, r7, #28
 8022376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 802237a:	2300      	movs	r3, #0
 802237c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 802237e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8022380:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8022382:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8022384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8022386:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8022388:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 802238a:	431a      	orrs	r2, r3
             Init.ClockDiv
 802238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 802238e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8022390:	68fa      	ldr	r2, [r7, #12]
 8022392:	4313      	orrs	r3, r2
 8022394:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8022396:	687b      	ldr	r3, [r7, #4]
 8022398:	685a      	ldr	r2, [r3, #4]
 802239a:	4b07      	ldr	r3, [pc, #28]	; (80223b8 <SDMMC_Init+0x50>)
 802239c:	4013      	ands	r3, r2
 802239e:	68fa      	ldr	r2, [r7, #12]
 80223a0:	431a      	orrs	r2, r3
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80223a6:	2300      	movs	r3, #0
}
 80223a8:	4618      	mov	r0, r3
 80223aa:	3714      	adds	r7, #20
 80223ac:	46bd      	mov	sp, r7
 80223ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223b2:	b004      	add	sp, #16
 80223b4:	4770      	bx	lr
 80223b6:	bf00      	nop
 80223b8:	ffc02c00 	.word	0xffc02c00

080223bc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80223bc:	b480      	push	{r7}
 80223be:	b083      	sub	sp, #12
 80223c0:	af00      	add	r7, sp, #0
 80223c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80223c4:	687b      	ldr	r3, [r7, #4]
 80223c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80223ca:	4618      	mov	r0, r3
 80223cc:	370c      	adds	r7, #12
 80223ce:	46bd      	mov	sp, r7
 80223d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223d4:	4770      	bx	lr

080223d6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80223d6:	b480      	push	{r7}
 80223d8:	b083      	sub	sp, #12
 80223da:	af00      	add	r7, sp, #0
 80223dc:	6078      	str	r0, [r7, #4]
 80223de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80223e0:	683b      	ldr	r3, [r7, #0]
 80223e2:	681a      	ldr	r2, [r3, #0]
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80223ea:	2300      	movs	r3, #0
}
 80223ec:	4618      	mov	r0, r3
 80223ee:	370c      	adds	r7, #12
 80223f0:	46bd      	mov	sp, r7
 80223f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223f6:	4770      	bx	lr

080223f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80223f8:	b480      	push	{r7}
 80223fa:	b083      	sub	sp, #12
 80223fc:	af00      	add	r7, sp, #0
 80223fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	f043 0203 	orr.w	r2, r3, #3
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 802240c:	2300      	movs	r3, #0
}
 802240e:	4618      	mov	r0, r3
 8022410:	370c      	adds	r7, #12
 8022412:	46bd      	mov	sp, r7
 8022414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022418:	4770      	bx	lr

0802241a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 802241a:	b480      	push	{r7}
 802241c:	b083      	sub	sp, #12
 802241e:	af00      	add	r7, sp, #0
 8022420:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	f003 0303 	and.w	r3, r3, #3
}
 802242a:	4618      	mov	r0, r3
 802242c:	370c      	adds	r7, #12
 802242e:	46bd      	mov	sp, r7
 8022430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022434:	4770      	bx	lr
	...

08022438 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8022438:	b480      	push	{r7}
 802243a:	b085      	sub	sp, #20
 802243c:	af00      	add	r7, sp, #0
 802243e:	6078      	str	r0, [r7, #4]
 8022440:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8022442:	2300      	movs	r3, #0
 8022444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8022446:	683b      	ldr	r3, [r7, #0]
 8022448:	681a      	ldr	r2, [r3, #0]
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 802244e:	683b      	ldr	r3, [r7, #0]
 8022450:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8022452:	683b      	ldr	r3, [r7, #0]
 8022454:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8022456:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8022458:	683b      	ldr	r3, [r7, #0]
 802245a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 802245c:	431a      	orrs	r2, r3
                       Command->CPSM);
 802245e:	683b      	ldr	r3, [r7, #0]
 8022460:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8022462:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8022464:	68fa      	ldr	r2, [r7, #12]
 8022466:	4313      	orrs	r3, r2
 8022468:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	68da      	ldr	r2, [r3, #12]
 802246e:	4b06      	ldr	r3, [pc, #24]	; (8022488 <SDMMC_SendCommand+0x50>)
 8022470:	4013      	ands	r3, r2
 8022472:	68fa      	ldr	r2, [r7, #12]
 8022474:	431a      	orrs	r2, r3
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802247a:	2300      	movs	r3, #0
}
 802247c:	4618      	mov	r0, r3
 802247e:	3714      	adds	r7, #20
 8022480:	46bd      	mov	sp, r7
 8022482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022486:	4770      	bx	lr
 8022488:	fffee0c0 	.word	0xfffee0c0

0802248c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 802248c:	b480      	push	{r7}
 802248e:	b083      	sub	sp, #12
 8022490:	af00      	add	r7, sp, #0
 8022492:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	691b      	ldr	r3, [r3, #16]
 8022498:	b2db      	uxtb	r3, r3
}
 802249a:	4618      	mov	r0, r3
 802249c:	370c      	adds	r7, #12
 802249e:	46bd      	mov	sp, r7
 80224a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224a4:	4770      	bx	lr

080224a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80224a6:	b480      	push	{r7}
 80224a8:	b085      	sub	sp, #20
 80224aa:	af00      	add	r7, sp, #0
 80224ac:	6078      	str	r0, [r7, #4]
 80224ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	3314      	adds	r3, #20
 80224b4:	461a      	mov	r2, r3
 80224b6:	683b      	ldr	r3, [r7, #0]
 80224b8:	4413      	add	r3, r2
 80224ba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80224bc:	68fb      	ldr	r3, [r7, #12]
 80224be:	681b      	ldr	r3, [r3, #0]
}
 80224c0:	4618      	mov	r0, r3
 80224c2:	3714      	adds	r7, #20
 80224c4:	46bd      	mov	sp, r7
 80224c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224ca:	4770      	bx	lr

080224cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80224cc:	b480      	push	{r7}
 80224ce:	b085      	sub	sp, #20
 80224d0:	af00      	add	r7, sp, #0
 80224d2:	6078      	str	r0, [r7, #4]
 80224d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80224d6:	2300      	movs	r3, #0
 80224d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80224da:	683b      	ldr	r3, [r7, #0]
 80224dc:	681a      	ldr	r2, [r3, #0]
 80224de:	687b      	ldr	r3, [r7, #4]
 80224e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80224e2:	683b      	ldr	r3, [r7, #0]
 80224e4:	685a      	ldr	r2, [r3, #4]
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80224ea:	683b      	ldr	r3, [r7, #0]
 80224ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80224ee:	683b      	ldr	r3, [r7, #0]
 80224f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80224f2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80224f4:	683b      	ldr	r3, [r7, #0]
 80224f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80224f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80224fa:	683b      	ldr	r3, [r7, #0]
 80224fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80224fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8022500:	68fa      	ldr	r2, [r7, #12]
 8022502:	4313      	orrs	r3, r2
 8022504:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802250a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802250e:	68fb      	ldr	r3, [r7, #12]
 8022510:	431a      	orrs	r2, r3
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8022516:	2300      	movs	r3, #0

}
 8022518:	4618      	mov	r0, r3
 802251a:	3714      	adds	r7, #20
 802251c:	46bd      	mov	sp, r7
 802251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022522:	4770      	bx	lr

08022524 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8022524:	b580      	push	{r7, lr}
 8022526:	b088      	sub	sp, #32
 8022528:	af00      	add	r7, sp, #0
 802252a:	6078      	str	r0, [r7, #4]
 802252c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 802252e:	683b      	ldr	r3, [r7, #0]
 8022530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8022532:	2310      	movs	r3, #16
 8022534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022536:	f44f 7380 	mov.w	r3, #256	; 0x100
 802253a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802253c:	2300      	movs	r3, #0
 802253e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022544:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022546:	f107 0308 	add.w	r3, r7, #8
 802254a:	4619      	mov	r1, r3
 802254c:	6878      	ldr	r0, [r7, #4]
 802254e:	f7ff ff73 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8022552:	f241 3288 	movw	r2, #5000	; 0x1388
 8022556:	2110      	movs	r1, #16
 8022558:	6878      	ldr	r0, [r7, #4]
 802255a:	f000 faaf 	bl	8022abc <SDMMC_GetCmdResp1>
 802255e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022560:	69fb      	ldr	r3, [r7, #28]
}
 8022562:	4618      	mov	r0, r3
 8022564:	3720      	adds	r7, #32
 8022566:	46bd      	mov	sp, r7
 8022568:	bd80      	pop	{r7, pc}

0802256a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 802256a:	b580      	push	{r7, lr}
 802256c:	b088      	sub	sp, #32
 802256e:	af00      	add	r7, sp, #0
 8022570:	6078      	str	r0, [r7, #4]
 8022572:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8022574:	683b      	ldr	r3, [r7, #0]
 8022576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8022578:	2311      	movs	r3, #17
 802257a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802257c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022582:	2300      	movs	r3, #0
 8022584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802258a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802258c:	f107 0308 	add.w	r3, r7, #8
 8022590:	4619      	mov	r1, r3
 8022592:	6878      	ldr	r0, [r7, #4]
 8022594:	f7ff ff50 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8022598:	f241 3288 	movw	r2, #5000	; 0x1388
 802259c:	2111      	movs	r1, #17
 802259e:	6878      	ldr	r0, [r7, #4]
 80225a0:	f000 fa8c 	bl	8022abc <SDMMC_GetCmdResp1>
 80225a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80225a6:	69fb      	ldr	r3, [r7, #28]
}
 80225a8:	4618      	mov	r0, r3
 80225aa:	3720      	adds	r7, #32
 80225ac:	46bd      	mov	sp, r7
 80225ae:	bd80      	pop	{r7, pc}

080225b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80225b0:	b580      	push	{r7, lr}
 80225b2:	b088      	sub	sp, #32
 80225b4:	af00      	add	r7, sp, #0
 80225b6:	6078      	str	r0, [r7, #4]
 80225b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80225ba:	683b      	ldr	r3, [r7, #0]
 80225bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80225be:	2312      	movs	r3, #18
 80225c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80225c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80225c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80225c8:	2300      	movs	r3, #0
 80225ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80225cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80225d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80225d2:	f107 0308 	add.w	r3, r7, #8
 80225d6:	4619      	mov	r1, r3
 80225d8:	6878      	ldr	r0, [r7, #4]
 80225da:	f7ff ff2d 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80225de:	f241 3288 	movw	r2, #5000	; 0x1388
 80225e2:	2112      	movs	r1, #18
 80225e4:	6878      	ldr	r0, [r7, #4]
 80225e6:	f000 fa69 	bl	8022abc <SDMMC_GetCmdResp1>
 80225ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80225ec:	69fb      	ldr	r3, [r7, #28]
}
 80225ee:	4618      	mov	r0, r3
 80225f0:	3720      	adds	r7, #32
 80225f2:	46bd      	mov	sp, r7
 80225f4:	bd80      	pop	{r7, pc}

080225f6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80225f6:	b580      	push	{r7, lr}
 80225f8:	b088      	sub	sp, #32
 80225fa:	af00      	add	r7, sp, #0
 80225fc:	6078      	str	r0, [r7, #4]
 80225fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8022600:	683b      	ldr	r3, [r7, #0]
 8022602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8022604:	2318      	movs	r3, #24
 8022606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022608:	f44f 7380 	mov.w	r3, #256	; 0x100
 802260c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802260e:	2300      	movs	r3, #0
 8022610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022618:	f107 0308 	add.w	r3, r7, #8
 802261c:	4619      	mov	r1, r3
 802261e:	6878      	ldr	r0, [r7, #4]
 8022620:	f7ff ff0a 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8022624:	f241 3288 	movw	r2, #5000	; 0x1388
 8022628:	2118      	movs	r1, #24
 802262a:	6878      	ldr	r0, [r7, #4]
 802262c:	f000 fa46 	bl	8022abc <SDMMC_GetCmdResp1>
 8022630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022632:	69fb      	ldr	r3, [r7, #28]
}
 8022634:	4618      	mov	r0, r3
 8022636:	3720      	adds	r7, #32
 8022638:	46bd      	mov	sp, r7
 802263a:	bd80      	pop	{r7, pc}

0802263c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 802263c:	b580      	push	{r7, lr}
 802263e:	b088      	sub	sp, #32
 8022640:	af00      	add	r7, sp, #0
 8022642:	6078      	str	r0, [r7, #4]
 8022644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8022646:	683b      	ldr	r3, [r7, #0]
 8022648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 802264a:	2319      	movs	r3, #25
 802264c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802264e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022654:	2300      	movs	r3, #0
 8022656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802265c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802265e:	f107 0308 	add.w	r3, r7, #8
 8022662:	4619      	mov	r1, r3
 8022664:	6878      	ldr	r0, [r7, #4]
 8022666:	f7ff fee7 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 802266a:	f241 3288 	movw	r2, #5000	; 0x1388
 802266e:	2119      	movs	r1, #25
 8022670:	6878      	ldr	r0, [r7, #4]
 8022672:	f000 fa23 	bl	8022abc <SDMMC_GetCmdResp1>
 8022676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022678:	69fb      	ldr	r3, [r7, #28]
}
 802267a:	4618      	mov	r0, r3
 802267c:	3720      	adds	r7, #32
 802267e:	46bd      	mov	sp, r7
 8022680:	bd80      	pop	{r7, pc}
	...

08022684 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8022684:	b580      	push	{r7, lr}
 8022686:	b088      	sub	sp, #32
 8022688:	af00      	add	r7, sp, #0
 802268a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 802268c:	2300      	movs	r3, #0
 802268e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8022690:	230c      	movs	r3, #12
 8022692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802269a:	2300      	movs	r3, #0
 802269c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802269e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80226a2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	68db      	ldr	r3, [r3, #12]
 80226a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80226b0:	687b      	ldr	r3, [r7, #4]
 80226b2:	68db      	ldr	r3, [r3, #12]
 80226b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80226bc:	f107 0308 	add.w	r3, r7, #8
 80226c0:	4619      	mov	r1, r3
 80226c2:	6878      	ldr	r0, [r7, #4]
 80226c4:	f7ff feb8 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80226c8:	4a0b      	ldr	r2, [pc, #44]	; (80226f8 <SDMMC_CmdStopTransfer+0x74>)
 80226ca:	210c      	movs	r1, #12
 80226cc:	6878      	ldr	r0, [r7, #4]
 80226ce:	f000 f9f5 	bl	8022abc <SDMMC_GetCmdResp1>
 80226d2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	68db      	ldr	r3, [r3, #12]
 80226d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80226e0:	69fb      	ldr	r3, [r7, #28]
 80226e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80226e6:	d101      	bne.n	80226ec <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80226e8:	2300      	movs	r3, #0
 80226ea:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80226ec:	69fb      	ldr	r3, [r7, #28]
}
 80226ee:	4618      	mov	r0, r3
 80226f0:	3720      	adds	r7, #32
 80226f2:	46bd      	mov	sp, r7
 80226f4:	bd80      	pop	{r7, pc}
 80226f6:	bf00      	nop
 80226f8:	05f5e100 	.word	0x05f5e100

080226fc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80226fc:	b580      	push	{r7, lr}
 80226fe:	b08a      	sub	sp, #40	; 0x28
 8022700:	af00      	add	r7, sp, #0
 8022702:	60f8      	str	r0, [r7, #12]
 8022704:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8022708:	683b      	ldr	r3, [r7, #0]
 802270a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 802270c:	2307      	movs	r3, #7
 802270e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022714:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022716:	2300      	movs	r3, #0
 8022718:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802271a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802271e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022720:	f107 0310 	add.w	r3, r7, #16
 8022724:	4619      	mov	r1, r3
 8022726:	68f8      	ldr	r0, [r7, #12]
 8022728:	f7ff fe86 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 802272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8022730:	2107      	movs	r1, #7
 8022732:	68f8      	ldr	r0, [r7, #12]
 8022734:	f000 f9c2 	bl	8022abc <SDMMC_GetCmdResp1>
 8022738:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 802273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802273c:	4618      	mov	r0, r3
 802273e:	3728      	adds	r7, #40	; 0x28
 8022740:	46bd      	mov	sp, r7
 8022742:	bd80      	pop	{r7, pc}

08022744 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8022744:	b580      	push	{r7, lr}
 8022746:	b088      	sub	sp, #32
 8022748:	af00      	add	r7, sp, #0
 802274a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 802274c:	2300      	movs	r3, #0
 802274e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8022750:	2300      	movs	r3, #0
 8022752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8022754:	2300      	movs	r3, #0
 8022756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022758:	2300      	movs	r3, #0
 802275a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802275c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022760:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022762:	f107 0308 	add.w	r3, r7, #8
 8022766:	4619      	mov	r1, r3
 8022768:	6878      	ldr	r0, [r7, #4]
 802276a:	f7ff fe65 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 802276e:	6878      	ldr	r0, [r7, #4]
 8022770:	f000 f976 	bl	8022a60 <SDMMC_GetCmdError>
 8022774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022776:	69fb      	ldr	r3, [r7, #28]
}
 8022778:	4618      	mov	r0, r3
 802277a:	3720      	adds	r7, #32
 802277c:	46bd      	mov	sp, r7
 802277e:	bd80      	pop	{r7, pc}

08022780 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8022780:	b580      	push	{r7, lr}
 8022782:	b088      	sub	sp, #32
 8022784:	af00      	add	r7, sp, #0
 8022786:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8022788:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 802278c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 802278e:	2308      	movs	r3, #8
 8022790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022798:	2300      	movs	r3, #0
 802279a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802279c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80227a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80227a2:	f107 0308 	add.w	r3, r7, #8
 80227a6:	4619      	mov	r1, r3
 80227a8:	6878      	ldr	r0, [r7, #4]
 80227aa:	f7ff fe45 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80227ae:	6878      	ldr	r0, [r7, #4]
 80227b0:	f000 fb78 	bl	8022ea4 <SDMMC_GetCmdResp7>
 80227b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80227b6:	69fb      	ldr	r3, [r7, #28]
}
 80227b8:	4618      	mov	r0, r3
 80227ba:	3720      	adds	r7, #32
 80227bc:	46bd      	mov	sp, r7
 80227be:	bd80      	pop	{r7, pc}

080227c0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80227c0:	b580      	push	{r7, lr}
 80227c2:	b088      	sub	sp, #32
 80227c4:	af00      	add	r7, sp, #0
 80227c6:	6078      	str	r0, [r7, #4]
 80227c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80227ca:	683b      	ldr	r3, [r7, #0]
 80227cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80227ce:	2337      	movs	r3, #55	; 0x37
 80227d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80227d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80227d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80227d8:	2300      	movs	r3, #0
 80227da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80227dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80227e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80227e2:	f107 0308 	add.w	r3, r7, #8
 80227e6:	4619      	mov	r1, r3
 80227e8:	6878      	ldr	r0, [r7, #4]
 80227ea:	f7ff fe25 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80227ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80227f2:	2137      	movs	r1, #55	; 0x37
 80227f4:	6878      	ldr	r0, [r7, #4]
 80227f6:	f000 f961 	bl	8022abc <SDMMC_GetCmdResp1>
 80227fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80227fc:	69fb      	ldr	r3, [r7, #28]
}
 80227fe:	4618      	mov	r0, r3
 8022800:	3720      	adds	r7, #32
 8022802:	46bd      	mov	sp, r7
 8022804:	bd80      	pop	{r7, pc}

08022806 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8022806:	b580      	push	{r7, lr}
 8022808:	b088      	sub	sp, #32
 802280a:	af00      	add	r7, sp, #0
 802280c:	6078      	str	r0, [r7, #4]
 802280e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8022810:	683b      	ldr	r3, [r7, #0]
 8022812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8022814:	2329      	movs	r3, #41	; 0x29
 8022816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022818:	f44f 7380 	mov.w	r3, #256	; 0x100
 802281c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802281e:	2300      	movs	r3, #0
 8022820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022826:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022828:	f107 0308 	add.w	r3, r7, #8
 802282c:	4619      	mov	r1, r3
 802282e:	6878      	ldr	r0, [r7, #4]
 8022830:	f7ff fe02 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8022834:	6878      	ldr	r0, [r7, #4]
 8022836:	f000 fa7d 	bl	8022d34 <SDMMC_GetCmdResp3>
 802283a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802283c:	69fb      	ldr	r3, [r7, #28]
}
 802283e:	4618      	mov	r0, r3
 8022840:	3720      	adds	r7, #32
 8022842:	46bd      	mov	sp, r7
 8022844:	bd80      	pop	{r7, pc}

08022846 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8022846:	b580      	push	{r7, lr}
 8022848:	b088      	sub	sp, #32
 802284a:	af00      	add	r7, sp, #0
 802284c:	6078      	str	r0, [r7, #4]
 802284e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8022850:	683b      	ldr	r3, [r7, #0]
 8022852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8022854:	2306      	movs	r3, #6
 8022856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022858:	f44f 7380 	mov.w	r3, #256	; 0x100
 802285c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802285e:	2300      	movs	r3, #0
 8022860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022868:	f107 0308 	add.w	r3, r7, #8
 802286c:	4619      	mov	r1, r3
 802286e:	6878      	ldr	r0, [r7, #4]
 8022870:	f7ff fde2 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8022874:	f241 3288 	movw	r2, #5000	; 0x1388
 8022878:	2106      	movs	r1, #6
 802287a:	6878      	ldr	r0, [r7, #4]
 802287c:	f000 f91e 	bl	8022abc <SDMMC_GetCmdResp1>
 8022880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022882:	69fb      	ldr	r3, [r7, #28]
}
 8022884:	4618      	mov	r0, r3
 8022886:	3720      	adds	r7, #32
 8022888:	46bd      	mov	sp, r7
 802288a:	bd80      	pop	{r7, pc}

0802288c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 802288c:	b580      	push	{r7, lr}
 802288e:	b088      	sub	sp, #32
 8022890:	af00      	add	r7, sp, #0
 8022892:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8022894:	2300      	movs	r3, #0
 8022896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8022898:	2333      	movs	r3, #51	; 0x33
 802289a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802289c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80228a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80228a2:	2300      	movs	r3, #0
 80228a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80228a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80228aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80228ac:	f107 0308 	add.w	r3, r7, #8
 80228b0:	4619      	mov	r1, r3
 80228b2:	6878      	ldr	r0, [r7, #4]
 80228b4:	f7ff fdc0 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80228b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80228bc:	2133      	movs	r1, #51	; 0x33
 80228be:	6878      	ldr	r0, [r7, #4]
 80228c0:	f000 f8fc 	bl	8022abc <SDMMC_GetCmdResp1>
 80228c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80228c6:	69fb      	ldr	r3, [r7, #28]
}
 80228c8:	4618      	mov	r0, r3
 80228ca:	3720      	adds	r7, #32
 80228cc:	46bd      	mov	sp, r7
 80228ce:	bd80      	pop	{r7, pc}

080228d0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80228d0:	b580      	push	{r7, lr}
 80228d2:	b088      	sub	sp, #32
 80228d4:	af00      	add	r7, sp, #0
 80228d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80228d8:	2300      	movs	r3, #0
 80228da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80228dc:	2302      	movs	r3, #2
 80228de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80228e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80228e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80228e6:	2300      	movs	r3, #0
 80228e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80228ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80228ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80228f0:	f107 0308 	add.w	r3, r7, #8
 80228f4:	4619      	mov	r1, r3
 80228f6:	6878      	ldr	r0, [r7, #4]
 80228f8:	f7ff fd9e 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80228fc:	6878      	ldr	r0, [r7, #4]
 80228fe:	f000 f9cf 	bl	8022ca0 <SDMMC_GetCmdResp2>
 8022902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022904:	69fb      	ldr	r3, [r7, #28]
}
 8022906:	4618      	mov	r0, r3
 8022908:	3720      	adds	r7, #32
 802290a:	46bd      	mov	sp, r7
 802290c:	bd80      	pop	{r7, pc}

0802290e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802290e:	b580      	push	{r7, lr}
 8022910:	b088      	sub	sp, #32
 8022912:	af00      	add	r7, sp, #0
 8022914:	6078      	str	r0, [r7, #4]
 8022916:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8022918:	683b      	ldr	r3, [r7, #0]
 802291a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 802291c:	2309      	movs	r3, #9
 802291e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8022920:	f44f 7340 	mov.w	r3, #768	; 0x300
 8022924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022926:	2300      	movs	r3, #0
 8022928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802292a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802292e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022930:	f107 0308 	add.w	r3, r7, #8
 8022934:	4619      	mov	r1, r3
 8022936:	6878      	ldr	r0, [r7, #4]
 8022938:	f7ff fd7e 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802293c:	6878      	ldr	r0, [r7, #4]
 802293e:	f000 f9af 	bl	8022ca0 <SDMMC_GetCmdResp2>
 8022942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022944:	69fb      	ldr	r3, [r7, #28]
}
 8022946:	4618      	mov	r0, r3
 8022948:	3720      	adds	r7, #32
 802294a:	46bd      	mov	sp, r7
 802294c:	bd80      	pop	{r7, pc}

0802294e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 802294e:	b580      	push	{r7, lr}
 8022950:	b088      	sub	sp, #32
 8022952:	af00      	add	r7, sp, #0
 8022954:	6078      	str	r0, [r7, #4]
 8022956:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8022958:	2300      	movs	r3, #0
 802295a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 802295c:	2303      	movs	r3, #3
 802295e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022966:	2300      	movs	r3, #0
 8022968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802296a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802296e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022970:	f107 0308 	add.w	r3, r7, #8
 8022974:	4619      	mov	r1, r3
 8022976:	6878      	ldr	r0, [r7, #4]
 8022978:	f7ff fd5e 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 802297c:	683a      	ldr	r2, [r7, #0]
 802297e:	2103      	movs	r1, #3
 8022980:	6878      	ldr	r0, [r7, #4]
 8022982:	f000 fa17 	bl	8022db4 <SDMMC_GetCmdResp6>
 8022986:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022988:	69fb      	ldr	r3, [r7, #28]
}
 802298a:	4618      	mov	r0, r3
 802298c:	3720      	adds	r7, #32
 802298e:	46bd      	mov	sp, r7
 8022990:	bd80      	pop	{r7, pc}

08022992 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8022992:	b580      	push	{r7, lr}
 8022994:	b088      	sub	sp, #32
 8022996:	af00      	add	r7, sp, #0
 8022998:	6078      	str	r0, [r7, #4]
 802299a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 802299c:	683b      	ldr	r3, [r7, #0]
 802299e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80229a0:	230d      	movs	r3, #13
 80229a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80229a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80229a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80229aa:	2300      	movs	r3, #0
 80229ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80229ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80229b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80229b4:	f107 0308 	add.w	r3, r7, #8
 80229b8:	4619      	mov	r1, r3
 80229ba:	6878      	ldr	r0, [r7, #4]
 80229bc:	f7ff fd3c 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80229c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80229c4:	210d      	movs	r1, #13
 80229c6:	6878      	ldr	r0, [r7, #4]
 80229c8:	f000 f878 	bl	8022abc <SDMMC_GetCmdResp1>
 80229cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80229ce:	69fb      	ldr	r3, [r7, #28]
}
 80229d0:	4618      	mov	r0, r3
 80229d2:	3720      	adds	r7, #32
 80229d4:	46bd      	mov	sp, r7
 80229d6:	bd80      	pop	{r7, pc}

080229d8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80229d8:	b580      	push	{r7, lr}
 80229da:	b088      	sub	sp, #32
 80229dc:	af00      	add	r7, sp, #0
 80229de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80229e0:	2300      	movs	r3, #0
 80229e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80229e4:	230d      	movs	r3, #13
 80229e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80229e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80229ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80229ee:	2300      	movs	r3, #0
 80229f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80229f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80229f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80229f8:	f107 0308 	add.w	r3, r7, #8
 80229fc:	4619      	mov	r1, r3
 80229fe:	6878      	ldr	r0, [r7, #4]
 8022a00:	f7ff fd1a 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8022a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8022a08:	210d      	movs	r1, #13
 8022a0a:	6878      	ldr	r0, [r7, #4]
 8022a0c:	f000 f856 	bl	8022abc <SDMMC_GetCmdResp1>
 8022a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022a12:	69fb      	ldr	r3, [r7, #28]
}
 8022a14:	4618      	mov	r0, r3
 8022a16:	3720      	adds	r7, #32
 8022a18:	46bd      	mov	sp, r7
 8022a1a:	bd80      	pop	{r7, pc}

08022a1c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8022a1c:	b580      	push	{r7, lr}
 8022a1e:	b088      	sub	sp, #32
 8022a20:	af00      	add	r7, sp, #0
 8022a22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8022a24:	2300      	movs	r3, #0
 8022a26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8022a28:	230b      	movs	r3, #11
 8022a2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022a32:	2300      	movs	r3, #0
 8022a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022a3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022a3c:	f107 0308 	add.w	r3, r7, #8
 8022a40:	4619      	mov	r1, r3
 8022a42:	6878      	ldr	r0, [r7, #4]
 8022a44:	f7ff fcf8 	bl	8022438 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8022a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8022a4c:	210b      	movs	r1, #11
 8022a4e:	6878      	ldr	r0, [r7, #4]
 8022a50:	f000 f834 	bl	8022abc <SDMMC_GetCmdResp1>
 8022a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022a56:	69fb      	ldr	r3, [r7, #28]
}
 8022a58:	4618      	mov	r0, r3
 8022a5a:	3720      	adds	r7, #32
 8022a5c:	46bd      	mov	sp, r7
 8022a5e:	bd80      	pop	{r7, pc}

08022a60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8022a60:	b480      	push	{r7}
 8022a62:	b085      	sub	sp, #20
 8022a64:	af00      	add	r7, sp, #0
 8022a66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022a68:	4b11      	ldr	r3, [pc, #68]	; (8022ab0 <SDMMC_GetCmdError+0x50>)
 8022a6a:	681b      	ldr	r3, [r3, #0]
 8022a6c:	4a11      	ldr	r2, [pc, #68]	; (8022ab4 <SDMMC_GetCmdError+0x54>)
 8022a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8022a72:	0a5b      	lsrs	r3, r3, #9
 8022a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8022a78:	fb02 f303 	mul.w	r3, r2, r3
 8022a7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8022a7e:	68fb      	ldr	r3, [r7, #12]
 8022a80:	1e5a      	subs	r2, r3, #1
 8022a82:	60fa      	str	r2, [r7, #12]
 8022a84:	2b00      	cmp	r3, #0
 8022a86:	d102      	bne.n	8022a8e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8022a88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022a8c:	e009      	b.n	8022aa2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022a96:	2b00      	cmp	r3, #0
 8022a98:	d0f1      	beq.n	8022a7e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	4a06      	ldr	r2, [pc, #24]	; (8022ab8 <SDMMC_GetCmdError+0x58>)
 8022a9e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8022aa0:	2300      	movs	r3, #0
}
 8022aa2:	4618      	mov	r0, r3
 8022aa4:	3714      	adds	r7, #20
 8022aa6:	46bd      	mov	sp, r7
 8022aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aac:	4770      	bx	lr
 8022aae:	bf00      	nop
 8022ab0:	24000698 	.word	0x24000698
 8022ab4:	10624dd3 	.word	0x10624dd3
 8022ab8:	002000c5 	.word	0x002000c5

08022abc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8022abc:	b580      	push	{r7, lr}
 8022abe:	b088      	sub	sp, #32
 8022ac0:	af00      	add	r7, sp, #0
 8022ac2:	60f8      	str	r0, [r7, #12]
 8022ac4:	460b      	mov	r3, r1
 8022ac6:	607a      	str	r2, [r7, #4]
 8022ac8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8022aca:	4b70      	ldr	r3, [pc, #448]	; (8022c8c <SDMMC_GetCmdResp1+0x1d0>)
 8022acc:	681b      	ldr	r3, [r3, #0]
 8022ace:	4a70      	ldr	r2, [pc, #448]	; (8022c90 <SDMMC_GetCmdResp1+0x1d4>)
 8022ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8022ad4:	0a5a      	lsrs	r2, r3, #9
 8022ad6:	687b      	ldr	r3, [r7, #4]
 8022ad8:	fb02 f303 	mul.w	r3, r2, r3
 8022adc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8022ade:	69fb      	ldr	r3, [r7, #28]
 8022ae0:	1e5a      	subs	r2, r3, #1
 8022ae2:	61fa      	str	r2, [r7, #28]
 8022ae4:	2b00      	cmp	r3, #0
 8022ae6:	d102      	bne.n	8022aee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8022ae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022aec:	e0c9      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8022aee:	68fb      	ldr	r3, [r7, #12]
 8022af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022af2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8022af4:	69ba      	ldr	r2, [r7, #24]
 8022af6:	4b67      	ldr	r3, [pc, #412]	; (8022c94 <SDMMC_GetCmdResp1+0x1d8>)
 8022af8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8022afa:	2b00      	cmp	r3, #0
 8022afc:	d0ef      	beq.n	8022ade <SDMMC_GetCmdResp1+0x22>
 8022afe:	69bb      	ldr	r3, [r7, #24]
 8022b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	d1ea      	bne.n	8022ade <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022b08:	68fb      	ldr	r3, [r7, #12]
 8022b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022b0c:	f003 0304 	and.w	r3, r3, #4
 8022b10:	2b00      	cmp	r3, #0
 8022b12:	d004      	beq.n	8022b1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022b14:	68fb      	ldr	r3, [r7, #12]
 8022b16:	2204      	movs	r2, #4
 8022b18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8022b1a:	2304      	movs	r3, #4
 8022b1c:	e0b1      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8022b1e:	68fb      	ldr	r3, [r7, #12]
 8022b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022b22:	f003 0301 	and.w	r3, r3, #1
 8022b26:	2b00      	cmp	r3, #0
 8022b28:	d004      	beq.n	8022b34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8022b2a:	68fb      	ldr	r3, [r7, #12]
 8022b2c:	2201      	movs	r2, #1
 8022b2e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022b30:	2301      	movs	r3, #1
 8022b32:	e0a6      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022b34:	68fb      	ldr	r3, [r7, #12]
 8022b36:	4a58      	ldr	r2, [pc, #352]	; (8022c98 <SDMMC_GetCmdResp1+0x1dc>)
 8022b38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8022b3a:	68f8      	ldr	r0, [r7, #12]
 8022b3c:	f7ff fca6 	bl	802248c <SDMMC_GetCommandResponse>
 8022b40:	4603      	mov	r3, r0
 8022b42:	461a      	mov	r2, r3
 8022b44:	7afb      	ldrb	r3, [r7, #11]
 8022b46:	4293      	cmp	r3, r2
 8022b48:	d001      	beq.n	8022b4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022b4a:	2301      	movs	r3, #1
 8022b4c:	e099      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8022b4e:	2100      	movs	r1, #0
 8022b50:	68f8      	ldr	r0, [r7, #12]
 8022b52:	f7ff fca8 	bl	80224a6 <SDMMC_GetResponse>
 8022b56:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8022b58:	697a      	ldr	r2, [r7, #20]
 8022b5a:	4b50      	ldr	r3, [pc, #320]	; (8022c9c <SDMMC_GetCmdResp1+0x1e0>)
 8022b5c:	4013      	ands	r3, r2
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	d101      	bne.n	8022b66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8022b62:	2300      	movs	r3, #0
 8022b64:	e08d      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8022b66:	697b      	ldr	r3, [r7, #20]
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	da02      	bge.n	8022b72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8022b6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8022b70:	e087      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8022b72:	697b      	ldr	r3, [r7, #20]
 8022b74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	d001      	beq.n	8022b80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8022b7c:	2340      	movs	r3, #64	; 0x40
 8022b7e:	e080      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8022b80:	697b      	ldr	r3, [r7, #20]
 8022b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022b86:	2b00      	cmp	r3, #0
 8022b88:	d001      	beq.n	8022b8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8022b8a:	2380      	movs	r3, #128	; 0x80
 8022b8c:	e079      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8022b8e:	697b      	ldr	r3, [r7, #20]
 8022b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022b94:	2b00      	cmp	r3, #0
 8022b96:	d002      	beq.n	8022b9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8022b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022b9c:	e071      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8022b9e:	697b      	ldr	r3, [r7, #20]
 8022ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022ba4:	2b00      	cmp	r3, #0
 8022ba6:	d002      	beq.n	8022bae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8022ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022bac:	e069      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8022bae:	697b      	ldr	r3, [r7, #20]
 8022bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022bb4:	2b00      	cmp	r3, #0
 8022bb6:	d002      	beq.n	8022bbe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8022bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022bbc:	e061      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8022bbe:	697b      	ldr	r3, [r7, #20]
 8022bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	d002      	beq.n	8022bce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8022bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022bcc:	e059      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8022bce:	697b      	ldr	r3, [r7, #20]
 8022bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	d002      	beq.n	8022bde <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8022bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022bdc:	e051      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8022bde:	697b      	ldr	r3, [r7, #20]
 8022be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	d002      	beq.n	8022bee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8022be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022bec:	e049      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8022bee:	697b      	ldr	r3, [r7, #20]
 8022bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	d002      	beq.n	8022bfe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8022bf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8022bfc:	e041      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8022bfe:	697b      	ldr	r3, [r7, #20]
 8022c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	d002      	beq.n	8022c0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8022c08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8022c0c:	e039      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8022c0e:	697b      	ldr	r3, [r7, #20]
 8022c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d002      	beq.n	8022c1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8022c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8022c1c:	e031      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8022c1e:	697b      	ldr	r3, [r7, #20]
 8022c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	d002      	beq.n	8022c2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8022c28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8022c2c:	e029      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8022c2e:	697b      	ldr	r3, [r7, #20]
 8022c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022c34:	2b00      	cmp	r3, #0
 8022c36:	d002      	beq.n	8022c3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8022c38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022c3c:	e021      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8022c3e:	697b      	ldr	r3, [r7, #20]
 8022c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8022c44:	2b00      	cmp	r3, #0
 8022c46:	d002      	beq.n	8022c4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8022c48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8022c4c:	e019      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8022c4e:	697b      	ldr	r3, [r7, #20]
 8022c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	d002      	beq.n	8022c5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8022c58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022c5c:	e011      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8022c5e:	697b      	ldr	r3, [r7, #20]
 8022c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022c64:	2b00      	cmp	r3, #0
 8022c66:	d002      	beq.n	8022c6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8022c68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8022c6c:	e009      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8022c6e:	697b      	ldr	r3, [r7, #20]
 8022c70:	f003 0308 	and.w	r3, r3, #8
 8022c74:	2b00      	cmp	r3, #0
 8022c76:	d002      	beq.n	8022c7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8022c78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8022c7c:	e001      	b.n	8022c82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8022c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8022c82:	4618      	mov	r0, r3
 8022c84:	3720      	adds	r7, #32
 8022c86:	46bd      	mov	sp, r7
 8022c88:	bd80      	pop	{r7, pc}
 8022c8a:	bf00      	nop
 8022c8c:	24000698 	.word	0x24000698
 8022c90:	10624dd3 	.word	0x10624dd3
 8022c94:	00200045 	.word	0x00200045
 8022c98:	002000c5 	.word	0x002000c5
 8022c9c:	fdffe008 	.word	0xfdffe008

08022ca0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8022ca0:	b480      	push	{r7}
 8022ca2:	b085      	sub	sp, #20
 8022ca4:	af00      	add	r7, sp, #0
 8022ca6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022ca8:	4b1f      	ldr	r3, [pc, #124]	; (8022d28 <SDMMC_GetCmdResp2+0x88>)
 8022caa:	681b      	ldr	r3, [r3, #0]
 8022cac:	4a1f      	ldr	r2, [pc, #124]	; (8022d2c <SDMMC_GetCmdResp2+0x8c>)
 8022cae:	fba2 2303 	umull	r2, r3, r2, r3
 8022cb2:	0a5b      	lsrs	r3, r3, #9
 8022cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8022cb8:	fb02 f303 	mul.w	r3, r2, r3
 8022cbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8022cbe:	68fb      	ldr	r3, [r7, #12]
 8022cc0:	1e5a      	subs	r2, r3, #1
 8022cc2:	60fa      	str	r2, [r7, #12]
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d102      	bne.n	8022cce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8022cc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022ccc:	e026      	b.n	8022d1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022cd2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022cd4:	68bb      	ldr	r3, [r7, #8]
 8022cd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	d0ef      	beq.n	8022cbe <SDMMC_GetCmdResp2+0x1e>
 8022cde:	68bb      	ldr	r3, [r7, #8]
 8022ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022ce4:	2b00      	cmp	r3, #0
 8022ce6:	d1ea      	bne.n	8022cbe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022cec:	f003 0304 	and.w	r3, r3, #4
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	d004      	beq.n	8022cfe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	2204      	movs	r2, #4
 8022cf8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8022cfa:	2304      	movs	r3, #4
 8022cfc:	e00e      	b.n	8022d1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8022cfe:	687b      	ldr	r3, [r7, #4]
 8022d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022d02:	f003 0301 	and.w	r3, r3, #1
 8022d06:	2b00      	cmp	r3, #0
 8022d08:	d004      	beq.n	8022d14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8022d0a:	687b      	ldr	r3, [r7, #4]
 8022d0c:	2201      	movs	r2, #1
 8022d0e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022d10:	2301      	movs	r3, #1
 8022d12:	e003      	b.n	8022d1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	4a06      	ldr	r2, [pc, #24]	; (8022d30 <SDMMC_GetCmdResp2+0x90>)
 8022d18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8022d1a:	2300      	movs	r3, #0
}
 8022d1c:	4618      	mov	r0, r3
 8022d1e:	3714      	adds	r7, #20
 8022d20:	46bd      	mov	sp, r7
 8022d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d26:	4770      	bx	lr
 8022d28:	24000698 	.word	0x24000698
 8022d2c:	10624dd3 	.word	0x10624dd3
 8022d30:	002000c5 	.word	0x002000c5

08022d34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8022d34:	b480      	push	{r7}
 8022d36:	b085      	sub	sp, #20
 8022d38:	af00      	add	r7, sp, #0
 8022d3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022d3c:	4b1a      	ldr	r3, [pc, #104]	; (8022da8 <SDMMC_GetCmdResp3+0x74>)
 8022d3e:	681b      	ldr	r3, [r3, #0]
 8022d40:	4a1a      	ldr	r2, [pc, #104]	; (8022dac <SDMMC_GetCmdResp3+0x78>)
 8022d42:	fba2 2303 	umull	r2, r3, r2, r3
 8022d46:	0a5b      	lsrs	r3, r3, #9
 8022d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8022d4c:	fb02 f303 	mul.w	r3, r2, r3
 8022d50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8022d52:	68fb      	ldr	r3, [r7, #12]
 8022d54:	1e5a      	subs	r2, r3, #1
 8022d56:	60fa      	str	r2, [r7, #12]
 8022d58:	2b00      	cmp	r3, #0
 8022d5a:	d102      	bne.n	8022d62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8022d5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022d60:	e01b      	b.n	8022d9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022d66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022d68:	68bb      	ldr	r3, [r7, #8]
 8022d6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	d0ef      	beq.n	8022d52 <SDMMC_GetCmdResp3+0x1e>
 8022d72:	68bb      	ldr	r3, [r7, #8]
 8022d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022d78:	2b00      	cmp	r3, #0
 8022d7a:	d1ea      	bne.n	8022d52 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022d80:	f003 0304 	and.w	r3, r3, #4
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	d004      	beq.n	8022d92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	2204      	movs	r2, #4
 8022d8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8022d8e:	2304      	movs	r3, #4
 8022d90:	e003      	b.n	8022d9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022d92:	687b      	ldr	r3, [r7, #4]
 8022d94:	4a06      	ldr	r2, [pc, #24]	; (8022db0 <SDMMC_GetCmdResp3+0x7c>)
 8022d96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8022d98:	2300      	movs	r3, #0
}
 8022d9a:	4618      	mov	r0, r3
 8022d9c:	3714      	adds	r7, #20
 8022d9e:	46bd      	mov	sp, r7
 8022da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022da4:	4770      	bx	lr
 8022da6:	bf00      	nop
 8022da8:	24000698 	.word	0x24000698
 8022dac:	10624dd3 	.word	0x10624dd3
 8022db0:	002000c5 	.word	0x002000c5

08022db4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8022db4:	b580      	push	{r7, lr}
 8022db6:	b088      	sub	sp, #32
 8022db8:	af00      	add	r7, sp, #0
 8022dba:	60f8      	str	r0, [r7, #12]
 8022dbc:	460b      	mov	r3, r1
 8022dbe:	607a      	str	r2, [r7, #4]
 8022dc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022dc2:	4b35      	ldr	r3, [pc, #212]	; (8022e98 <SDMMC_GetCmdResp6+0xe4>)
 8022dc4:	681b      	ldr	r3, [r3, #0]
 8022dc6:	4a35      	ldr	r2, [pc, #212]	; (8022e9c <SDMMC_GetCmdResp6+0xe8>)
 8022dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8022dcc:	0a5b      	lsrs	r3, r3, #9
 8022dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8022dd2:	fb02 f303 	mul.w	r3, r2, r3
 8022dd6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8022dd8:	69fb      	ldr	r3, [r7, #28]
 8022dda:	1e5a      	subs	r2, r3, #1
 8022ddc:	61fa      	str	r2, [r7, #28]
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	d102      	bne.n	8022de8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8022de2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022de6:	e052      	b.n	8022e8e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8022de8:	68fb      	ldr	r3, [r7, #12]
 8022dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022dec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022dee:	69bb      	ldr	r3, [r7, #24]
 8022df0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8022df4:	2b00      	cmp	r3, #0
 8022df6:	d0ef      	beq.n	8022dd8 <SDMMC_GetCmdResp6+0x24>
 8022df8:	69bb      	ldr	r3, [r7, #24]
 8022dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	d1ea      	bne.n	8022dd8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022e02:	68fb      	ldr	r3, [r7, #12]
 8022e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022e06:	f003 0304 	and.w	r3, r3, #4
 8022e0a:	2b00      	cmp	r3, #0
 8022e0c:	d004      	beq.n	8022e18 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022e0e:	68fb      	ldr	r3, [r7, #12]
 8022e10:	2204      	movs	r2, #4
 8022e12:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8022e14:	2304      	movs	r3, #4
 8022e16:	e03a      	b.n	8022e8e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8022e18:	68fb      	ldr	r3, [r7, #12]
 8022e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022e1c:	f003 0301 	and.w	r3, r3, #1
 8022e20:	2b00      	cmp	r3, #0
 8022e22:	d004      	beq.n	8022e2e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8022e24:	68fb      	ldr	r3, [r7, #12]
 8022e26:	2201      	movs	r2, #1
 8022e28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022e2a:	2301      	movs	r3, #1
 8022e2c:	e02f      	b.n	8022e8e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8022e2e:	68f8      	ldr	r0, [r7, #12]
 8022e30:	f7ff fb2c 	bl	802248c <SDMMC_GetCommandResponse>
 8022e34:	4603      	mov	r3, r0
 8022e36:	461a      	mov	r2, r3
 8022e38:	7afb      	ldrb	r3, [r7, #11]
 8022e3a:	4293      	cmp	r3, r2
 8022e3c:	d001      	beq.n	8022e42 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022e3e:	2301      	movs	r3, #1
 8022e40:	e025      	b.n	8022e8e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022e42:	68fb      	ldr	r3, [r7, #12]
 8022e44:	4a16      	ldr	r2, [pc, #88]	; (8022ea0 <SDMMC_GetCmdResp6+0xec>)
 8022e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8022e48:	2100      	movs	r1, #0
 8022e4a:	68f8      	ldr	r0, [r7, #12]
 8022e4c:	f7ff fb2b 	bl	80224a6 <SDMMC_GetResponse>
 8022e50:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8022e52:	697b      	ldr	r3, [r7, #20]
 8022e54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8022e58:	2b00      	cmp	r3, #0
 8022e5a:	d106      	bne.n	8022e6a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8022e5c:	697b      	ldr	r3, [r7, #20]
 8022e5e:	0c1b      	lsrs	r3, r3, #16
 8022e60:	b29a      	uxth	r2, r3
 8022e62:	687b      	ldr	r3, [r7, #4]
 8022e64:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8022e66:	2300      	movs	r3, #0
 8022e68:	e011      	b.n	8022e8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8022e6a:	697b      	ldr	r3, [r7, #20]
 8022e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	d002      	beq.n	8022e7a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8022e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022e78:	e009      	b.n	8022e8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8022e7a:	697b      	ldr	r3, [r7, #20]
 8022e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8022e80:	2b00      	cmp	r3, #0
 8022e82:	d002      	beq.n	8022e8a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8022e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022e88:	e001      	b.n	8022e8e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8022e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8022e8e:	4618      	mov	r0, r3
 8022e90:	3720      	adds	r7, #32
 8022e92:	46bd      	mov	sp, r7
 8022e94:	bd80      	pop	{r7, pc}
 8022e96:	bf00      	nop
 8022e98:	24000698 	.word	0x24000698
 8022e9c:	10624dd3 	.word	0x10624dd3
 8022ea0:	002000c5 	.word	0x002000c5

08022ea4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8022ea4:	b480      	push	{r7}
 8022ea6:	b085      	sub	sp, #20
 8022ea8:	af00      	add	r7, sp, #0
 8022eaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022eac:	4b22      	ldr	r3, [pc, #136]	; (8022f38 <SDMMC_GetCmdResp7+0x94>)
 8022eae:	681b      	ldr	r3, [r3, #0]
 8022eb0:	4a22      	ldr	r2, [pc, #136]	; (8022f3c <SDMMC_GetCmdResp7+0x98>)
 8022eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8022eb6:	0a5b      	lsrs	r3, r3, #9
 8022eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8022ebc:	fb02 f303 	mul.w	r3, r2, r3
 8022ec0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8022ec2:	68fb      	ldr	r3, [r7, #12]
 8022ec4:	1e5a      	subs	r2, r3, #1
 8022ec6:	60fa      	str	r2, [r7, #12]
 8022ec8:	2b00      	cmp	r3, #0
 8022eca:	d102      	bne.n	8022ed2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8022ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022ed0:	e02c      	b.n	8022f2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022ed6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022ed8:	68bb      	ldr	r3, [r7, #8]
 8022eda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8022ede:	2b00      	cmp	r3, #0
 8022ee0:	d0ef      	beq.n	8022ec2 <SDMMC_GetCmdResp7+0x1e>
 8022ee2:	68bb      	ldr	r3, [r7, #8]
 8022ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d1ea      	bne.n	8022ec2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022ef0:	f003 0304 	and.w	r3, r3, #4
 8022ef4:	2b00      	cmp	r3, #0
 8022ef6:	d004      	beq.n	8022f02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022ef8:	687b      	ldr	r3, [r7, #4]
 8022efa:	2204      	movs	r2, #4
 8022efc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8022efe:	2304      	movs	r3, #4
 8022f00:	e014      	b.n	8022f2c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8022f02:	687b      	ldr	r3, [r7, #4]
 8022f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022f06:	f003 0301 	and.w	r3, r3, #1
 8022f0a:	2b00      	cmp	r3, #0
 8022f0c:	d004      	beq.n	8022f18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8022f0e:	687b      	ldr	r3, [r7, #4]
 8022f10:	2201      	movs	r2, #1
 8022f12:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022f14:	2301      	movs	r3, #1
 8022f16:	e009      	b.n	8022f2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8022f18:	687b      	ldr	r3, [r7, #4]
 8022f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f20:	2b00      	cmp	r3, #0
 8022f22:	d002      	beq.n	8022f2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8022f24:	687b      	ldr	r3, [r7, #4]
 8022f26:	2240      	movs	r2, #64	; 0x40
 8022f28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8022f2a:	2300      	movs	r3, #0

}
 8022f2c:	4618      	mov	r0, r3
 8022f2e:	3714      	adds	r7, #20
 8022f30:	46bd      	mov	sp, r7
 8022f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f36:	4770      	bx	lr
 8022f38:	24000698 	.word	0x24000698
 8022f3c:	10624dd3 	.word	0x10624dd3

08022f40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8022f40:	b084      	sub	sp, #16
 8022f42:	b580      	push	{r7, lr}
 8022f44:	b084      	sub	sp, #16
 8022f46:	af00      	add	r7, sp, #0
 8022f48:	6078      	str	r0, [r7, #4]
 8022f4a:	f107 001c 	add.w	r0, r7, #28
 8022f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8022f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f54:	2b01      	cmp	r3, #1
 8022f56:	d120      	bne.n	8022f9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8022f64:	687b      	ldr	r3, [r7, #4]
 8022f66:	68da      	ldr	r2, [r3, #12]
 8022f68:	4b25      	ldr	r3, [pc, #148]	; (8023000 <USB_CoreInit+0xc0>)
 8022f6a:	4013      	ands	r3, r2
 8022f6c:	687a      	ldr	r2, [r7, #4]
 8022f6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8022f70:	687b      	ldr	r3, [r7, #4]
 8022f72:	68db      	ldr	r3, [r3, #12]
 8022f74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8022f78:	687b      	ldr	r3, [r7, #4]
 8022f7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8022f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022f7e:	2b01      	cmp	r3, #1
 8022f80:	d105      	bne.n	8022f8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8022f82:	687b      	ldr	r3, [r7, #4]
 8022f84:	68db      	ldr	r3, [r3, #12]
 8022f86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8022f8a:	687b      	ldr	r3, [r7, #4]
 8022f8c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8022f8e:	6878      	ldr	r0, [r7, #4]
 8022f90:	f000 fa4c 	bl	802342c <USB_CoreReset>
 8022f94:	4603      	mov	r3, r0
 8022f96:	73fb      	strb	r3, [r7, #15]
 8022f98:	e01a      	b.n	8022fd0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8022f9a:	687b      	ldr	r3, [r7, #4]
 8022f9c:	68db      	ldr	r3, [r3, #12]
 8022f9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8022fa6:	6878      	ldr	r0, [r7, #4]
 8022fa8:	f000 fa40 	bl	802342c <USB_CoreReset>
 8022fac:	4603      	mov	r3, r0
 8022fae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8022fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022fb2:	2b00      	cmp	r3, #0
 8022fb4:	d106      	bne.n	8022fc4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022fba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	639a      	str	r2, [r3, #56]	; 0x38
 8022fc2:	e005      	b.n	8022fd0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8022fc4:	687b      	ldr	r3, [r7, #4]
 8022fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022fc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8022fcc:	687b      	ldr	r3, [r7, #4]
 8022fce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8022fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022fd2:	2b01      	cmp	r3, #1
 8022fd4:	d10b      	bne.n	8022fee <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	689b      	ldr	r3, [r3, #8]
 8022fda:	f043 0206 	orr.w	r2, r3, #6
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	689b      	ldr	r3, [r3, #8]
 8022fe6:	f043 0220 	orr.w	r2, r3, #32
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8022fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8022ff0:	4618      	mov	r0, r3
 8022ff2:	3710      	adds	r7, #16
 8022ff4:	46bd      	mov	sp, r7
 8022ff6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022ffa:	b004      	add	sp, #16
 8022ffc:	4770      	bx	lr
 8022ffe:	bf00      	nop
 8023000:	ffbdffbf 	.word	0xffbdffbf

08023004 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8023004:	b480      	push	{r7}
 8023006:	b083      	sub	sp, #12
 8023008:	af00      	add	r7, sp, #0
 802300a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802300c:	687b      	ldr	r3, [r7, #4]
 802300e:	689b      	ldr	r3, [r3, #8]
 8023010:	f023 0201 	bic.w	r2, r3, #1
 8023014:	687b      	ldr	r3, [r7, #4]
 8023016:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8023018:	2300      	movs	r3, #0
}
 802301a:	4618      	mov	r0, r3
 802301c:	370c      	adds	r7, #12
 802301e:	46bd      	mov	sp, r7
 8023020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023024:	4770      	bx	lr

08023026 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8023026:	b580      	push	{r7, lr}
 8023028:	b082      	sub	sp, #8
 802302a:	af00      	add	r7, sp, #0
 802302c:	6078      	str	r0, [r7, #4]
 802302e:	460b      	mov	r3, r1
 8023030:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	68db      	ldr	r3, [r3, #12]
 8023036:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802303e:	78fb      	ldrb	r3, [r7, #3]
 8023040:	2b01      	cmp	r3, #1
 8023042:	d106      	bne.n	8023052 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8023044:	687b      	ldr	r3, [r7, #4]
 8023046:	68db      	ldr	r3, [r3, #12]
 8023048:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	60da      	str	r2, [r3, #12]
 8023050:	e00b      	b.n	802306a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8023052:	78fb      	ldrb	r3, [r7, #3]
 8023054:	2b00      	cmp	r3, #0
 8023056:	d106      	bne.n	8023066 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	68db      	ldr	r3, [r3, #12]
 802305c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	60da      	str	r2, [r3, #12]
 8023064:	e001      	b.n	802306a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8023066:	2301      	movs	r3, #1
 8023068:	e003      	b.n	8023072 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 802306a:	2032      	movs	r0, #50	; 0x32
 802306c:	f7f1 fba8 	bl	80147c0 <HAL_Delay>

  return HAL_OK;
 8023070:	2300      	movs	r3, #0
}
 8023072:	4618      	mov	r0, r3
 8023074:	3708      	adds	r7, #8
 8023076:	46bd      	mov	sp, r7
 8023078:	bd80      	pop	{r7, pc}
	...

0802307c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802307c:	b084      	sub	sp, #16
 802307e:	b580      	push	{r7, lr}
 8023080:	b086      	sub	sp, #24
 8023082:	af00      	add	r7, sp, #0
 8023084:	6078      	str	r0, [r7, #4]
 8023086:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802308a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802308e:	2300      	movs	r3, #0
 8023090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8023092:	687b      	ldr	r3, [r7, #4]
 8023094:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8023096:	2300      	movs	r3, #0
 8023098:	613b      	str	r3, [r7, #16]
 802309a:	e009      	b.n	80230b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 802309c:	687a      	ldr	r2, [r7, #4]
 802309e:	693b      	ldr	r3, [r7, #16]
 80230a0:	3340      	adds	r3, #64	; 0x40
 80230a2:	009b      	lsls	r3, r3, #2
 80230a4:	4413      	add	r3, r2
 80230a6:	2200      	movs	r2, #0
 80230a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80230aa:	693b      	ldr	r3, [r7, #16]
 80230ac:	3301      	adds	r3, #1
 80230ae:	613b      	str	r3, [r7, #16]
 80230b0:	693b      	ldr	r3, [r7, #16]
 80230b2:	2b0e      	cmp	r3, #14
 80230b4:	d9f2      	bls.n	802309c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80230b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80230b8:	2b00      	cmp	r3, #0
 80230ba:	d11c      	bne.n	80230f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80230bc:	68fb      	ldr	r3, [r7, #12]
 80230be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80230c2:	685b      	ldr	r3, [r3, #4]
 80230c4:	68fa      	ldr	r2, [r7, #12]
 80230c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80230ca:	f043 0302 	orr.w	r3, r3, #2
 80230ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80230d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80230d8:	687b      	ldr	r3, [r7, #4]
 80230da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80230dc:	687b      	ldr	r3, [r7, #4]
 80230de:	681b      	ldr	r3, [r3, #0]
 80230e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80230e4:	687b      	ldr	r3, [r7, #4]
 80230e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80230e8:	687b      	ldr	r3, [r7, #4]
 80230ea:	681b      	ldr	r3, [r3, #0]
 80230ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80230f0:	687b      	ldr	r3, [r7, #4]
 80230f2:	601a      	str	r2, [r3, #0]
 80230f4:	e005      	b.n	8023102 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80230f6:	687b      	ldr	r3, [r7, #4]
 80230f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80230fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8023102:	68fb      	ldr	r3, [r7, #12]
 8023104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8023108:	461a      	mov	r2, r3
 802310a:	2300      	movs	r3, #0
 802310c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 802310e:	68fb      	ldr	r3, [r7, #12]
 8023110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023114:	4619      	mov	r1, r3
 8023116:	68fb      	ldr	r3, [r7, #12]
 8023118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802311c:	461a      	mov	r2, r3
 802311e:	680b      	ldr	r3, [r1, #0]
 8023120:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8023122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023124:	2b01      	cmp	r3, #1
 8023126:	d10c      	bne.n	8023142 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8023128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802312a:	2b00      	cmp	r3, #0
 802312c:	d104      	bne.n	8023138 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 802312e:	2100      	movs	r1, #0
 8023130:	6878      	ldr	r0, [r7, #4]
 8023132:	f000 f949 	bl	80233c8 <USB_SetDevSpeed>
 8023136:	e008      	b.n	802314a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8023138:	2101      	movs	r1, #1
 802313a:	6878      	ldr	r0, [r7, #4]
 802313c:	f000 f944 	bl	80233c8 <USB_SetDevSpeed>
 8023140:	e003      	b.n	802314a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8023142:	2103      	movs	r1, #3
 8023144:	6878      	ldr	r0, [r7, #4]
 8023146:	f000 f93f 	bl	80233c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802314a:	2110      	movs	r1, #16
 802314c:	6878      	ldr	r0, [r7, #4]
 802314e:	f000 f8f3 	bl	8023338 <USB_FlushTxFifo>
 8023152:	4603      	mov	r3, r0
 8023154:	2b00      	cmp	r3, #0
 8023156:	d001      	beq.n	802315c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8023158:	2301      	movs	r3, #1
 802315a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802315c:	6878      	ldr	r0, [r7, #4]
 802315e:	f000 f911 	bl	8023384 <USB_FlushRxFifo>
 8023162:	4603      	mov	r3, r0
 8023164:	2b00      	cmp	r3, #0
 8023166:	d001      	beq.n	802316c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8023168:	2301      	movs	r3, #1
 802316a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 802316c:	68fb      	ldr	r3, [r7, #12]
 802316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023172:	461a      	mov	r2, r3
 8023174:	2300      	movs	r3, #0
 8023176:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8023178:	68fb      	ldr	r3, [r7, #12]
 802317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802317e:	461a      	mov	r2, r3
 8023180:	2300      	movs	r3, #0
 8023182:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8023184:	68fb      	ldr	r3, [r7, #12]
 8023186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802318a:	461a      	mov	r2, r3
 802318c:	2300      	movs	r3, #0
 802318e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023190:	2300      	movs	r3, #0
 8023192:	613b      	str	r3, [r7, #16]
 8023194:	e043      	b.n	802321e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8023196:	693b      	ldr	r3, [r7, #16]
 8023198:	015a      	lsls	r2, r3, #5
 802319a:	68fb      	ldr	r3, [r7, #12]
 802319c:	4413      	add	r3, r2
 802319e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80231a2:	681b      	ldr	r3, [r3, #0]
 80231a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80231a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80231ac:	d118      	bne.n	80231e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80231ae:	693b      	ldr	r3, [r7, #16]
 80231b0:	2b00      	cmp	r3, #0
 80231b2:	d10a      	bne.n	80231ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80231b4:	693b      	ldr	r3, [r7, #16]
 80231b6:	015a      	lsls	r2, r3, #5
 80231b8:	68fb      	ldr	r3, [r7, #12]
 80231ba:	4413      	add	r3, r2
 80231bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80231c0:	461a      	mov	r2, r3
 80231c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80231c6:	6013      	str	r3, [r2, #0]
 80231c8:	e013      	b.n	80231f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80231ca:	693b      	ldr	r3, [r7, #16]
 80231cc:	015a      	lsls	r2, r3, #5
 80231ce:	68fb      	ldr	r3, [r7, #12]
 80231d0:	4413      	add	r3, r2
 80231d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80231d6:	461a      	mov	r2, r3
 80231d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80231dc:	6013      	str	r3, [r2, #0]
 80231de:	e008      	b.n	80231f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80231e0:	693b      	ldr	r3, [r7, #16]
 80231e2:	015a      	lsls	r2, r3, #5
 80231e4:	68fb      	ldr	r3, [r7, #12]
 80231e6:	4413      	add	r3, r2
 80231e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80231ec:	461a      	mov	r2, r3
 80231ee:	2300      	movs	r3, #0
 80231f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80231f2:	693b      	ldr	r3, [r7, #16]
 80231f4:	015a      	lsls	r2, r3, #5
 80231f6:	68fb      	ldr	r3, [r7, #12]
 80231f8:	4413      	add	r3, r2
 80231fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80231fe:	461a      	mov	r2, r3
 8023200:	2300      	movs	r3, #0
 8023202:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8023204:	693b      	ldr	r3, [r7, #16]
 8023206:	015a      	lsls	r2, r3, #5
 8023208:	68fb      	ldr	r3, [r7, #12]
 802320a:	4413      	add	r3, r2
 802320c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023210:	461a      	mov	r2, r3
 8023212:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8023216:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023218:	693b      	ldr	r3, [r7, #16]
 802321a:	3301      	adds	r3, #1
 802321c:	613b      	str	r3, [r7, #16]
 802321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023220:	693a      	ldr	r2, [r7, #16]
 8023222:	429a      	cmp	r2, r3
 8023224:	d3b7      	bcc.n	8023196 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023226:	2300      	movs	r3, #0
 8023228:	613b      	str	r3, [r7, #16]
 802322a:	e043      	b.n	80232b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802322c:	693b      	ldr	r3, [r7, #16]
 802322e:	015a      	lsls	r2, r3, #5
 8023230:	68fb      	ldr	r3, [r7, #12]
 8023232:	4413      	add	r3, r2
 8023234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023238:	681b      	ldr	r3, [r3, #0]
 802323a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802323e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023242:	d118      	bne.n	8023276 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8023244:	693b      	ldr	r3, [r7, #16]
 8023246:	2b00      	cmp	r3, #0
 8023248:	d10a      	bne.n	8023260 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802324a:	693b      	ldr	r3, [r7, #16]
 802324c:	015a      	lsls	r2, r3, #5
 802324e:	68fb      	ldr	r3, [r7, #12]
 8023250:	4413      	add	r3, r2
 8023252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023256:	461a      	mov	r2, r3
 8023258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802325c:	6013      	str	r3, [r2, #0]
 802325e:	e013      	b.n	8023288 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8023260:	693b      	ldr	r3, [r7, #16]
 8023262:	015a      	lsls	r2, r3, #5
 8023264:	68fb      	ldr	r3, [r7, #12]
 8023266:	4413      	add	r3, r2
 8023268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802326c:	461a      	mov	r2, r3
 802326e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8023272:	6013      	str	r3, [r2, #0]
 8023274:	e008      	b.n	8023288 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8023276:	693b      	ldr	r3, [r7, #16]
 8023278:	015a      	lsls	r2, r3, #5
 802327a:	68fb      	ldr	r3, [r7, #12]
 802327c:	4413      	add	r3, r2
 802327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023282:	461a      	mov	r2, r3
 8023284:	2300      	movs	r3, #0
 8023286:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8023288:	693b      	ldr	r3, [r7, #16]
 802328a:	015a      	lsls	r2, r3, #5
 802328c:	68fb      	ldr	r3, [r7, #12]
 802328e:	4413      	add	r3, r2
 8023290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023294:	461a      	mov	r2, r3
 8023296:	2300      	movs	r3, #0
 8023298:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802329a:	693b      	ldr	r3, [r7, #16]
 802329c:	015a      	lsls	r2, r3, #5
 802329e:	68fb      	ldr	r3, [r7, #12]
 80232a0:	4413      	add	r3, r2
 80232a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80232a6:	461a      	mov	r2, r3
 80232a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80232ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80232ae:	693b      	ldr	r3, [r7, #16]
 80232b0:	3301      	adds	r3, #1
 80232b2:	613b      	str	r3, [r7, #16]
 80232b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232b6:	693a      	ldr	r2, [r7, #16]
 80232b8:	429a      	cmp	r2, r3
 80232ba:	d3b7      	bcc.n	802322c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80232bc:	68fb      	ldr	r3, [r7, #12]
 80232be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80232c2:	691b      	ldr	r3, [r3, #16]
 80232c4:	68fa      	ldr	r2, [r7, #12]
 80232c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80232ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80232ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	2200      	movs	r2, #0
 80232d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80232dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80232de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232e0:	2b00      	cmp	r3, #0
 80232e2:	d105      	bne.n	80232f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	699b      	ldr	r3, [r3, #24]
 80232e8:	f043 0210 	orr.w	r2, r3, #16
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80232f0:	687b      	ldr	r3, [r7, #4]
 80232f2:	699a      	ldr	r2, [r3, #24]
 80232f4:	4b0e      	ldr	r3, [pc, #56]	; (8023330 <USB_DevInit+0x2b4>)
 80232f6:	4313      	orrs	r3, r2
 80232f8:	687a      	ldr	r2, [r7, #4]
 80232fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80232fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80232fe:	2b00      	cmp	r3, #0
 8023300:	d005      	beq.n	802330e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8023302:	687b      	ldr	r3, [r7, #4]
 8023304:	699b      	ldr	r3, [r3, #24]
 8023306:	f043 0208 	orr.w	r2, r3, #8
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802330e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023310:	2b01      	cmp	r3, #1
 8023312:	d105      	bne.n	8023320 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8023314:	687b      	ldr	r3, [r7, #4]
 8023316:	699a      	ldr	r2, [r3, #24]
 8023318:	4b06      	ldr	r3, [pc, #24]	; (8023334 <USB_DevInit+0x2b8>)
 802331a:	4313      	orrs	r3, r2
 802331c:	687a      	ldr	r2, [r7, #4]
 802331e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8023320:	7dfb      	ldrb	r3, [r7, #23]
}
 8023322:	4618      	mov	r0, r3
 8023324:	3718      	adds	r7, #24
 8023326:	46bd      	mov	sp, r7
 8023328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802332c:	b004      	add	sp, #16
 802332e:	4770      	bx	lr
 8023330:	803c3800 	.word	0x803c3800
 8023334:	40000004 	.word	0x40000004

08023338 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8023338:	b480      	push	{r7}
 802333a:	b085      	sub	sp, #20
 802333c:	af00      	add	r7, sp, #0
 802333e:	6078      	str	r0, [r7, #4]
 8023340:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8023342:	2300      	movs	r3, #0
 8023344:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8023346:	683b      	ldr	r3, [r7, #0]
 8023348:	019b      	lsls	r3, r3, #6
 802334a:	f043 0220 	orr.w	r2, r3, #32
 802334e:	687b      	ldr	r3, [r7, #4]
 8023350:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8023352:	68fb      	ldr	r3, [r7, #12]
 8023354:	3301      	adds	r3, #1
 8023356:	60fb      	str	r3, [r7, #12]
 8023358:	68fb      	ldr	r3, [r7, #12]
 802335a:	4a09      	ldr	r2, [pc, #36]	; (8023380 <USB_FlushTxFifo+0x48>)
 802335c:	4293      	cmp	r3, r2
 802335e:	d901      	bls.n	8023364 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8023360:	2303      	movs	r3, #3
 8023362:	e006      	b.n	8023372 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8023364:	687b      	ldr	r3, [r7, #4]
 8023366:	691b      	ldr	r3, [r3, #16]
 8023368:	f003 0320 	and.w	r3, r3, #32
 802336c:	2b20      	cmp	r3, #32
 802336e:	d0f0      	beq.n	8023352 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8023370:	2300      	movs	r3, #0
}
 8023372:	4618      	mov	r0, r3
 8023374:	3714      	adds	r7, #20
 8023376:	46bd      	mov	sp, r7
 8023378:	f85d 7b04 	ldr.w	r7, [sp], #4
 802337c:	4770      	bx	lr
 802337e:	bf00      	nop
 8023380:	00030d40 	.word	0x00030d40

08023384 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8023384:	b480      	push	{r7}
 8023386:	b085      	sub	sp, #20
 8023388:	af00      	add	r7, sp, #0
 802338a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 802338c:	2300      	movs	r3, #0
 802338e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8023390:	687b      	ldr	r3, [r7, #4]
 8023392:	2210      	movs	r2, #16
 8023394:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8023396:	68fb      	ldr	r3, [r7, #12]
 8023398:	3301      	adds	r3, #1
 802339a:	60fb      	str	r3, [r7, #12]
 802339c:	68fb      	ldr	r3, [r7, #12]
 802339e:	4a09      	ldr	r2, [pc, #36]	; (80233c4 <USB_FlushRxFifo+0x40>)
 80233a0:	4293      	cmp	r3, r2
 80233a2:	d901      	bls.n	80233a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80233a4:	2303      	movs	r3, #3
 80233a6:	e006      	b.n	80233b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	691b      	ldr	r3, [r3, #16]
 80233ac:	f003 0310 	and.w	r3, r3, #16
 80233b0:	2b10      	cmp	r3, #16
 80233b2:	d0f0      	beq.n	8023396 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80233b4:	2300      	movs	r3, #0
}
 80233b6:	4618      	mov	r0, r3
 80233b8:	3714      	adds	r7, #20
 80233ba:	46bd      	mov	sp, r7
 80233bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233c0:	4770      	bx	lr
 80233c2:	bf00      	nop
 80233c4:	00030d40 	.word	0x00030d40

080233c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80233c8:	b480      	push	{r7}
 80233ca:	b085      	sub	sp, #20
 80233cc:	af00      	add	r7, sp, #0
 80233ce:	6078      	str	r0, [r7, #4]
 80233d0:	460b      	mov	r3, r1
 80233d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80233d8:	68fb      	ldr	r3, [r7, #12]
 80233da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80233de:	681a      	ldr	r2, [r3, #0]
 80233e0:	78fb      	ldrb	r3, [r7, #3]
 80233e2:	68f9      	ldr	r1, [r7, #12]
 80233e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80233e8:	4313      	orrs	r3, r2
 80233ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80233ec:	2300      	movs	r3, #0
}
 80233ee:	4618      	mov	r0, r3
 80233f0:	3714      	adds	r7, #20
 80233f2:	46bd      	mov	sp, r7
 80233f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233f8:	4770      	bx	lr

080233fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80233fa:	b580      	push	{r7, lr}
 80233fc:	b084      	sub	sp, #16
 80233fe:	af00      	add	r7, sp, #0
 8023400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8023402:	687b      	ldr	r3, [r7, #4]
 8023404:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8023406:	68fb      	ldr	r3, [r7, #12]
 8023408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802340c:	685b      	ldr	r3, [r3, #4]
 802340e:	68fa      	ldr	r2, [r7, #12]
 8023410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8023414:	f043 0302 	orr.w	r3, r3, #2
 8023418:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 802341a:	2003      	movs	r0, #3
 802341c:	f7f1 f9d0 	bl	80147c0 <HAL_Delay>

  return HAL_OK;
 8023420:	2300      	movs	r3, #0
}
 8023422:	4618      	mov	r0, r3
 8023424:	3710      	adds	r7, #16
 8023426:	46bd      	mov	sp, r7
 8023428:	bd80      	pop	{r7, pc}
	...

0802342c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802342c:	b480      	push	{r7}
 802342e:	b085      	sub	sp, #20
 8023430:	af00      	add	r7, sp, #0
 8023432:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8023434:	2300      	movs	r3, #0
 8023436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8023438:	68fb      	ldr	r3, [r7, #12]
 802343a:	3301      	adds	r3, #1
 802343c:	60fb      	str	r3, [r7, #12]
 802343e:	68fb      	ldr	r3, [r7, #12]
 8023440:	4a13      	ldr	r2, [pc, #76]	; (8023490 <USB_CoreReset+0x64>)
 8023442:	4293      	cmp	r3, r2
 8023444:	d901      	bls.n	802344a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8023446:	2303      	movs	r3, #3
 8023448:	e01b      	b.n	8023482 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	691b      	ldr	r3, [r3, #16]
 802344e:	2b00      	cmp	r3, #0
 8023450:	daf2      	bge.n	8023438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8023452:	2300      	movs	r3, #0
 8023454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8023456:	687b      	ldr	r3, [r7, #4]
 8023458:	691b      	ldr	r3, [r3, #16]
 802345a:	f043 0201 	orr.w	r2, r3, #1
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8023462:	68fb      	ldr	r3, [r7, #12]
 8023464:	3301      	adds	r3, #1
 8023466:	60fb      	str	r3, [r7, #12]
 8023468:	68fb      	ldr	r3, [r7, #12]
 802346a:	4a09      	ldr	r2, [pc, #36]	; (8023490 <USB_CoreReset+0x64>)
 802346c:	4293      	cmp	r3, r2
 802346e:	d901      	bls.n	8023474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8023470:	2303      	movs	r3, #3
 8023472:	e006      	b.n	8023482 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8023474:	687b      	ldr	r3, [r7, #4]
 8023476:	691b      	ldr	r3, [r3, #16]
 8023478:	f003 0301 	and.w	r3, r3, #1
 802347c:	2b01      	cmp	r3, #1
 802347e:	d0f0      	beq.n	8023462 <USB_CoreReset+0x36>

  return HAL_OK;
 8023480:	2300      	movs	r3, #0
}
 8023482:	4618      	mov	r0, r3
 8023484:	3714      	adds	r7, #20
 8023486:	46bd      	mov	sp, r7
 8023488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802348c:	4770      	bx	lr
 802348e:	bf00      	nop
 8023490:	00030d40 	.word	0x00030d40

08023494 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8023494:	b580      	push	{r7, lr}
 8023496:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8023498:	4904      	ldr	r1, [pc, #16]	; (80234ac <MX_FATFS_Init+0x18>)
 802349a:	4805      	ldr	r0, [pc, #20]	; (80234b0 <MX_FATFS_Init+0x1c>)
 802349c:	f002 fcb4 	bl	8025e08 <FATFS_LinkDriver>
 80234a0:	4603      	mov	r3, r0
 80234a2:	461a      	mov	r2, r3
 80234a4:	4b03      	ldr	r3, [pc, #12]	; (80234b4 <MX_FATFS_Init+0x20>)
 80234a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80234a8:	bf00      	nop
 80234aa:	bd80      	pop	{r7, pc}
 80234ac:	2400cda8 	.word	0x2400cda8
 80234b0:	0802f014 	.word	0x0802f014
 80234b4:	2400cda4 	.word	0x2400cda4

080234b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80234b8:	b480      	push	{r7}
 80234ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80234bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80234be:	4618      	mov	r0, r3
 80234c0:	46bd      	mov	sp, r7
 80234c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234c6:	4770      	bx	lr

080234c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80234c8:	b580      	push	{r7, lr}
 80234ca:	b082      	sub	sp, #8
 80234cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80234ce:	2300      	movs	r3, #0
 80234d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80234d2:	f000 f885 	bl	80235e0 <BSP_SD_IsDetected>
 80234d6:	4603      	mov	r3, r0
 80234d8:	2b01      	cmp	r3, #1
 80234da:	d001      	beq.n	80234e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80234dc:	2302      	movs	r3, #2
 80234de:	e012      	b.n	8023506 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80234e0:	480b      	ldr	r0, [pc, #44]	; (8023510 <BSP_SD_Init+0x48>)
 80234e2:	f7fa fb77 	bl	801dbd4 <HAL_SD_Init>
 80234e6:	4603      	mov	r3, r0
 80234e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80234ea:	79fb      	ldrb	r3, [r7, #7]
 80234ec:	2b00      	cmp	r3, #0
 80234ee:	d109      	bne.n	8023504 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80234f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80234f4:	4806      	ldr	r0, [pc, #24]	; (8023510 <BSP_SD_Init+0x48>)
 80234f6:	f7fb fa33 	bl	801e960 <HAL_SD_ConfigWideBusOperation>
 80234fa:	4603      	mov	r3, r0
 80234fc:	2b00      	cmp	r3, #0
 80234fe:	d001      	beq.n	8023504 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8023500:	2301      	movs	r3, #1
 8023502:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8023504:	79fb      	ldrb	r3, [r7, #7]
}
 8023506:	4618      	mov	r0, r3
 8023508:	3708      	adds	r7, #8
 802350a:	46bd      	mov	sp, r7
 802350c:	bd80      	pop	{r7, pc}
 802350e:	bf00      	nop
 8023510:	2400c47c 	.word	0x2400c47c

08023514 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8023514:	b580      	push	{r7, lr}
 8023516:	b086      	sub	sp, #24
 8023518:	af00      	add	r7, sp, #0
 802351a:	60f8      	str	r0, [r7, #12]
 802351c:	60b9      	str	r1, [r7, #8]
 802351e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8023520:	2300      	movs	r3, #0
 8023522:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	68ba      	ldr	r2, [r7, #8]
 8023528:	68f9      	ldr	r1, [r7, #12]
 802352a:	4806      	ldr	r0, [pc, #24]	; (8023544 <BSP_SD_ReadBlocks_DMA+0x30>)
 802352c:	f7fa fc76 	bl	801de1c <HAL_SD_ReadBlocks_DMA>
 8023530:	4603      	mov	r3, r0
 8023532:	2b00      	cmp	r3, #0
 8023534:	d001      	beq.n	802353a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8023536:	2301      	movs	r3, #1
 8023538:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802353a:	7dfb      	ldrb	r3, [r7, #23]
}
 802353c:	4618      	mov	r0, r3
 802353e:	3718      	adds	r7, #24
 8023540:	46bd      	mov	sp, r7
 8023542:	bd80      	pop	{r7, pc}
 8023544:	2400c47c 	.word	0x2400c47c

08023548 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8023548:	b580      	push	{r7, lr}
 802354a:	b086      	sub	sp, #24
 802354c:	af00      	add	r7, sp, #0
 802354e:	60f8      	str	r0, [r7, #12]
 8023550:	60b9      	str	r1, [r7, #8]
 8023552:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8023554:	2300      	movs	r3, #0
 8023556:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	68ba      	ldr	r2, [r7, #8]
 802355c:	68f9      	ldr	r1, [r7, #12]
 802355e:	4806      	ldr	r0, [pc, #24]	; (8023578 <BSP_SD_WriteBlocks_DMA+0x30>)
 8023560:	f7fa fd04 	bl	801df6c <HAL_SD_WriteBlocks_DMA>
 8023564:	4603      	mov	r3, r0
 8023566:	2b00      	cmp	r3, #0
 8023568:	d001      	beq.n	802356e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 802356a:	2301      	movs	r3, #1
 802356c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802356e:	7dfb      	ldrb	r3, [r7, #23]
}
 8023570:	4618      	mov	r0, r3
 8023572:	3718      	adds	r7, #24
 8023574:	46bd      	mov	sp, r7
 8023576:	bd80      	pop	{r7, pc}
 8023578:	2400c47c 	.word	0x2400c47c

0802357c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 802357c:	b580      	push	{r7, lr}
 802357e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8023580:	4805      	ldr	r0, [pc, #20]	; (8023598 <BSP_SD_GetCardState+0x1c>)
 8023582:	f7fb fa97 	bl	801eab4 <HAL_SD_GetCardState>
 8023586:	4603      	mov	r3, r0
 8023588:	2b04      	cmp	r3, #4
 802358a:	bf14      	ite	ne
 802358c:	2301      	movne	r3, #1
 802358e:	2300      	moveq	r3, #0
 8023590:	b2db      	uxtb	r3, r3
}
 8023592:	4618      	mov	r0, r3
 8023594:	bd80      	pop	{r7, pc}
 8023596:	bf00      	nop
 8023598:	2400c47c 	.word	0x2400c47c

0802359c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 802359c:	b580      	push	{r7, lr}
 802359e:	b082      	sub	sp, #8
 80235a0:	af00      	add	r7, sp, #0
 80235a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80235a4:	6879      	ldr	r1, [r7, #4]
 80235a6:	4803      	ldr	r0, [pc, #12]	; (80235b4 <BSP_SD_GetCardInfo+0x18>)
 80235a8:	f7fb f9ae 	bl	801e908 <HAL_SD_GetCardInfo>
}
 80235ac:	bf00      	nop
 80235ae:	3708      	adds	r7, #8
 80235b0:	46bd      	mov	sp, r7
 80235b2:	bd80      	pop	{r7, pc}
 80235b4:	2400c47c 	.word	0x2400c47c

080235b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80235b8:	b580      	push	{r7, lr}
 80235ba:	b082      	sub	sp, #8
 80235bc:	af00      	add	r7, sp, #0
 80235be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80235c0:	f000 f9ac 	bl	802391c <BSP_SD_WriteCpltCallback>
}
 80235c4:	bf00      	nop
 80235c6:	3708      	adds	r7, #8
 80235c8:	46bd      	mov	sp, r7
 80235ca:	bd80      	pop	{r7, pc}

080235cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80235cc:	b580      	push	{r7, lr}
 80235ce:	b082      	sub	sp, #8
 80235d0:	af00      	add	r7, sp, #0
 80235d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80235d4:	f000 f9b4 	bl	8023940 <BSP_SD_ReadCpltCallback>
}
 80235d8:	bf00      	nop
 80235da:	3708      	adds	r7, #8
 80235dc:	46bd      	mov	sp, r7
 80235de:	bd80      	pop	{r7, pc}

080235e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80235e0:	b580      	push	{r7, lr}
 80235e2:	b082      	sub	sp, #8
 80235e4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80235e6:	2301      	movs	r3, #1
 80235e8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80235ea:	f000 f80b 	bl	8023604 <BSP_PlatformIsDetected>
 80235ee:	4603      	mov	r3, r0
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d101      	bne.n	80235f8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80235f4:	2300      	movs	r3, #0
 80235f6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80235f8:	79fb      	ldrb	r3, [r7, #7]
 80235fa:	b2db      	uxtb	r3, r3
}
 80235fc:	4618      	mov	r0, r3
 80235fe:	3708      	adds	r7, #8
 8023600:	46bd      	mov	sp, r7
 8023602:	bd80      	pop	{r7, pc}

08023604 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8023604:	b580      	push	{r7, lr}
 8023606:	b082      	sub	sp, #8
 8023608:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 802360a:	2301      	movs	r3, #1
 802360c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 802360e:	2108      	movs	r1, #8
 8023610:	4806      	ldr	r0, [pc, #24]	; (802362c <BSP_PlatformIsDetected+0x28>)
 8023612:	f7f4 fe17 	bl	8018244 <HAL_GPIO_ReadPin>
 8023616:	4603      	mov	r3, r0
 8023618:	2b00      	cmp	r3, #0
 802361a:	d001      	beq.n	8023620 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 802361c:	2300      	movs	r3, #0
 802361e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8023620:	79fb      	ldrb	r3, [r7, #7]
}
 8023622:	4618      	mov	r0, r3
 8023624:	3708      	adds	r7, #8
 8023626:	46bd      	mov	sp, r7
 8023628:	bd80      	pop	{r7, pc}
 802362a:	bf00      	nop
 802362c:	58021800 	.word	0x58021800

08023630 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8023630:	b580      	push	{r7, lr}
 8023632:	b084      	sub	sp, #16
 8023634:	af00      	add	r7, sp, #0
 8023636:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8023638:	f002 fd08 	bl	802604c <osKernelGetTickCount>
 802363c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 802363e:	e006      	b.n	802364e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8023640:	f7ff ff9c 	bl	802357c <BSP_SD_GetCardState>
 8023644:	4603      	mov	r3, r0
 8023646:	2b00      	cmp	r3, #0
 8023648:	d101      	bne.n	802364e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 802364a:	2300      	movs	r3, #0
 802364c:	e009      	b.n	8023662 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 802364e:	f002 fcfd 	bl	802604c <osKernelGetTickCount>
 8023652:	4602      	mov	r2, r0
 8023654:	68fb      	ldr	r3, [r7, #12]
 8023656:	1ad3      	subs	r3, r2, r3
 8023658:	687a      	ldr	r2, [r7, #4]
 802365a:	429a      	cmp	r2, r3
 802365c:	d8f0      	bhi.n	8023640 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 802365e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023662:	4618      	mov	r0, r3
 8023664:	3710      	adds	r7, #16
 8023666:	46bd      	mov	sp, r7
 8023668:	bd80      	pop	{r7, pc}
	...

0802366c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 802366c:	b580      	push	{r7, lr}
 802366e:	b082      	sub	sp, #8
 8023670:	af00      	add	r7, sp, #0
 8023672:	4603      	mov	r3, r0
 8023674:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8023676:	4b0b      	ldr	r3, [pc, #44]	; (80236a4 <SD_CheckStatus+0x38>)
 8023678:	2201      	movs	r2, #1
 802367a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 802367c:	f7ff ff7e 	bl	802357c <BSP_SD_GetCardState>
 8023680:	4603      	mov	r3, r0
 8023682:	2b00      	cmp	r3, #0
 8023684:	d107      	bne.n	8023696 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8023686:	4b07      	ldr	r3, [pc, #28]	; (80236a4 <SD_CheckStatus+0x38>)
 8023688:	781b      	ldrb	r3, [r3, #0]
 802368a:	b2db      	uxtb	r3, r3
 802368c:	f023 0301 	bic.w	r3, r3, #1
 8023690:	b2da      	uxtb	r2, r3
 8023692:	4b04      	ldr	r3, [pc, #16]	; (80236a4 <SD_CheckStatus+0x38>)
 8023694:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8023696:	4b03      	ldr	r3, [pc, #12]	; (80236a4 <SD_CheckStatus+0x38>)
 8023698:	781b      	ldrb	r3, [r3, #0]
 802369a:	b2db      	uxtb	r3, r3
}
 802369c:	4618      	mov	r0, r3
 802369e:	3708      	adds	r7, #8
 80236a0:	46bd      	mov	sp, r7
 80236a2:	bd80      	pop	{r7, pc}
 80236a4:	240006a5 	.word	0x240006a5

080236a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80236a8:	b580      	push	{r7, lr}
 80236aa:	b082      	sub	sp, #8
 80236ac:	af00      	add	r7, sp, #0
 80236ae:	4603      	mov	r3, r0
 80236b0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80236b2:	4b1c      	ldr	r3, [pc, #112]	; (8023724 <SD_initialize+0x7c>)
 80236b4:	2201      	movs	r2, #1
 80236b6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80236b8:	f002 fc38 	bl	8025f2c <osKernelGetState>
 80236bc:	4603      	mov	r3, r0
 80236be:	2b02      	cmp	r3, #2
 80236c0:	d129      	bne.n	8023716 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80236c2:	f7ff ff01 	bl	80234c8 <BSP_SD_Init>
 80236c6:	4603      	mov	r3, r0
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	d107      	bne.n	80236dc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80236cc:	79fb      	ldrb	r3, [r7, #7]
 80236ce:	4618      	mov	r0, r3
 80236d0:	f7ff ffcc 	bl	802366c <SD_CheckStatus>
 80236d4:	4603      	mov	r3, r0
 80236d6:	461a      	mov	r2, r3
 80236d8:	4b12      	ldr	r3, [pc, #72]	; (8023724 <SD_initialize+0x7c>)
 80236da:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80236dc:	4b11      	ldr	r3, [pc, #68]	; (8023724 <SD_initialize+0x7c>)
 80236de:	781b      	ldrb	r3, [r3, #0]
 80236e0:	b2db      	uxtb	r3, r3
 80236e2:	2b01      	cmp	r3, #1
 80236e4:	d017      	beq.n	8023716 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80236e6:	4b10      	ldr	r3, [pc, #64]	; (8023728 <SD_initialize+0x80>)
 80236e8:	681b      	ldr	r3, [r3, #0]
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	d107      	bne.n	80236fe <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80236ee:	2200      	movs	r2, #0
 80236f0:	2102      	movs	r1, #2
 80236f2:	200a      	movs	r0, #10
 80236f4:	f003 f8f2 	bl	80268dc <osMessageQueueNew>
 80236f8:	4602      	mov	r2, r0
 80236fa:	4b0b      	ldr	r3, [pc, #44]	; (8023728 <SD_initialize+0x80>)
 80236fc:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 80236fe:	4b0a      	ldr	r3, [pc, #40]	; (8023728 <SD_initialize+0x80>)
 8023700:	681b      	ldr	r3, [r3, #0]
 8023702:	2b00      	cmp	r3, #0
 8023704:	d107      	bne.n	8023716 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8023706:	4b07      	ldr	r3, [pc, #28]	; (8023724 <SD_initialize+0x7c>)
 8023708:	781b      	ldrb	r3, [r3, #0]
 802370a:	b2db      	uxtb	r3, r3
 802370c:	f043 0301 	orr.w	r3, r3, #1
 8023710:	b2da      	uxtb	r2, r3
 8023712:	4b04      	ldr	r3, [pc, #16]	; (8023724 <SD_initialize+0x7c>)
 8023714:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8023716:	4b03      	ldr	r3, [pc, #12]	; (8023724 <SD_initialize+0x7c>)
 8023718:	781b      	ldrb	r3, [r3, #0]
 802371a:	b2db      	uxtb	r3, r3
}
 802371c:	4618      	mov	r0, r3
 802371e:	3708      	adds	r7, #8
 8023720:	46bd      	mov	sp, r7
 8023722:	bd80      	pop	{r7, pc}
 8023724:	240006a5 	.word	0x240006a5
 8023728:	240013f4 	.word	0x240013f4

0802372c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 802372c:	b580      	push	{r7, lr}
 802372e:	b082      	sub	sp, #8
 8023730:	af00      	add	r7, sp, #0
 8023732:	4603      	mov	r3, r0
 8023734:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8023736:	79fb      	ldrb	r3, [r7, #7]
 8023738:	4618      	mov	r0, r3
 802373a:	f7ff ff97 	bl	802366c <SD_CheckStatus>
 802373e:	4603      	mov	r3, r0
}
 8023740:	4618      	mov	r0, r3
 8023742:	3708      	adds	r7, #8
 8023744:	46bd      	mov	sp, r7
 8023746:	bd80      	pop	{r7, pc}

08023748 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8023748:	b580      	push	{r7, lr}
 802374a:	b088      	sub	sp, #32
 802374c:	af00      	add	r7, sp, #0
 802374e:	60b9      	str	r1, [r7, #8]
 8023750:	607a      	str	r2, [r7, #4]
 8023752:	603b      	str	r3, [r7, #0]
 8023754:	4603      	mov	r3, r0
 8023756:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8023758:	2301      	movs	r3, #1
 802375a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 802375c:	f247 5030 	movw	r0, #30000	; 0x7530
 8023760:	f7ff ff66 	bl	8023630 <SD_CheckStatusWithTimeout>
 8023764:	4603      	mov	r3, r0
 8023766:	2b00      	cmp	r3, #0
 8023768:	da01      	bge.n	802376e <SD_read+0x26>
  {
    return res;
 802376a:	7ffb      	ldrb	r3, [r7, #31]
 802376c:	e02f      	b.n	80237ce <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 802376e:	683a      	ldr	r2, [r7, #0]
 8023770:	6879      	ldr	r1, [r7, #4]
 8023772:	68b8      	ldr	r0, [r7, #8]
 8023774:	f7ff fece 	bl	8023514 <BSP_SD_ReadBlocks_DMA>
 8023778:	4603      	mov	r3, r0
 802377a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 802377c:	7fbb      	ldrb	r3, [r7, #30]
 802377e:	2b00      	cmp	r3, #0
 8023780:	d124      	bne.n	80237cc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8023782:	4b15      	ldr	r3, [pc, #84]	; (80237d8 <SD_read+0x90>)
 8023784:	6818      	ldr	r0, [r3, #0]
 8023786:	f107 0112 	add.w	r1, r7, #18
 802378a:	f247 5330 	movw	r3, #30000	; 0x7530
 802378e:	2200      	movs	r2, #0
 8023790:	f003 f99e 	bl	8026ad0 <osMessageQueueGet>
 8023794:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8023796:	69bb      	ldr	r3, [r7, #24]
 8023798:	2b00      	cmp	r3, #0
 802379a:	d117      	bne.n	80237cc <SD_read+0x84>
 802379c:	8a7b      	ldrh	r3, [r7, #18]
 802379e:	2b01      	cmp	r3, #1
 80237a0:	d114      	bne.n	80237cc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80237a2:	f002 fc53 	bl	802604c <osKernelGetTickCount>
 80237a6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80237a8:	e007      	b.n	80237ba <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80237aa:	f7ff fee7 	bl	802357c <BSP_SD_GetCardState>
 80237ae:	4603      	mov	r3, r0
 80237b0:	2b00      	cmp	r3, #0
 80237b2:	d102      	bne.n	80237ba <SD_read+0x72>
              {
                res = RES_OK;
 80237b4:	2300      	movs	r3, #0
 80237b6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80237b8:	e008      	b.n	80237cc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80237ba:	f002 fc47 	bl	802604c <osKernelGetTickCount>
 80237be:	4602      	mov	r2, r0
 80237c0:	697b      	ldr	r3, [r7, #20]
 80237c2:	1ad3      	subs	r3, r2, r3
 80237c4:	f247 522f 	movw	r2, #29999	; 0x752f
 80237c8:	4293      	cmp	r3, r2
 80237ca:	d9ee      	bls.n	80237aa <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80237cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80237ce:	4618      	mov	r0, r3
 80237d0:	3720      	adds	r7, #32
 80237d2:	46bd      	mov	sp, r7
 80237d4:	bd80      	pop	{r7, pc}
 80237d6:	bf00      	nop
 80237d8:	240013f4 	.word	0x240013f4

080237dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80237dc:	b580      	push	{r7, lr}
 80237de:	b088      	sub	sp, #32
 80237e0:	af00      	add	r7, sp, #0
 80237e2:	60b9      	str	r1, [r7, #8]
 80237e4:	607a      	str	r2, [r7, #4]
 80237e6:	603b      	str	r3, [r7, #0]
 80237e8:	4603      	mov	r3, r0
 80237ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80237ec:	2301      	movs	r3, #1
 80237ee:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80237f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80237f4:	f7ff ff1c 	bl	8023630 <SD_CheckStatusWithTimeout>
 80237f8:	4603      	mov	r3, r0
 80237fa:	2b00      	cmp	r3, #0
 80237fc:	da01      	bge.n	8023802 <SD_write+0x26>
  {
    return res;
 80237fe:	7ffb      	ldrb	r3, [r7, #31]
 8023800:	e02d      	b.n	802385e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8023802:	683a      	ldr	r2, [r7, #0]
 8023804:	6879      	ldr	r1, [r7, #4]
 8023806:	68b8      	ldr	r0, [r7, #8]
 8023808:	f7ff fe9e 	bl	8023548 <BSP_SD_WriteBlocks_DMA>
 802380c:	4603      	mov	r3, r0
 802380e:	2b00      	cmp	r3, #0
 8023810:	d124      	bne.n	802385c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8023812:	4b15      	ldr	r3, [pc, #84]	; (8023868 <SD_write+0x8c>)
 8023814:	6818      	ldr	r0, [r3, #0]
 8023816:	f107 0112 	add.w	r1, r7, #18
 802381a:	f247 5330 	movw	r3, #30000	; 0x7530
 802381e:	2200      	movs	r2, #0
 8023820:	f003 f956 	bl	8026ad0 <osMessageQueueGet>
 8023824:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8023826:	69bb      	ldr	r3, [r7, #24]
 8023828:	2b00      	cmp	r3, #0
 802382a:	d117      	bne.n	802385c <SD_write+0x80>
 802382c:	8a7b      	ldrh	r3, [r7, #18]
 802382e:	2b02      	cmp	r3, #2
 8023830:	d114      	bne.n	802385c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8023832:	f002 fc0b 	bl	802604c <osKernelGetTickCount>
 8023836:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8023838:	e007      	b.n	802384a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 802383a:	f7ff fe9f 	bl	802357c <BSP_SD_GetCardState>
 802383e:	4603      	mov	r3, r0
 8023840:	2b00      	cmp	r3, #0
 8023842:	d102      	bne.n	802384a <SD_write+0x6e>
          {
            res = RES_OK;
 8023844:	2300      	movs	r3, #0
 8023846:	77fb      	strb	r3, [r7, #31]
            break;
 8023848:	e008      	b.n	802385c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 802384a:	f002 fbff 	bl	802604c <osKernelGetTickCount>
 802384e:	4602      	mov	r2, r0
 8023850:	697b      	ldr	r3, [r7, #20]
 8023852:	1ad3      	subs	r3, r2, r3
 8023854:	f247 522f 	movw	r2, #29999	; 0x752f
 8023858:	4293      	cmp	r3, r2
 802385a:	d9ee      	bls.n	802383a <SD_write+0x5e>
    }

  }
#endif

  return res;
 802385c:	7ffb      	ldrb	r3, [r7, #31]
}
 802385e:	4618      	mov	r0, r3
 8023860:	3720      	adds	r7, #32
 8023862:	46bd      	mov	sp, r7
 8023864:	bd80      	pop	{r7, pc}
 8023866:	bf00      	nop
 8023868:	240013f4 	.word	0x240013f4

0802386c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 802386c:	b580      	push	{r7, lr}
 802386e:	b08c      	sub	sp, #48	; 0x30
 8023870:	af00      	add	r7, sp, #0
 8023872:	4603      	mov	r3, r0
 8023874:	603a      	str	r2, [r7, #0]
 8023876:	71fb      	strb	r3, [r7, #7]
 8023878:	460b      	mov	r3, r1
 802387a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 802387c:	2301      	movs	r3, #1
 802387e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8023882:	4b25      	ldr	r3, [pc, #148]	; (8023918 <SD_ioctl+0xac>)
 8023884:	781b      	ldrb	r3, [r3, #0]
 8023886:	b2db      	uxtb	r3, r3
 8023888:	f003 0301 	and.w	r3, r3, #1
 802388c:	2b00      	cmp	r3, #0
 802388e:	d001      	beq.n	8023894 <SD_ioctl+0x28>
 8023890:	2303      	movs	r3, #3
 8023892:	e03c      	b.n	802390e <SD_ioctl+0xa2>

  switch (cmd)
 8023894:	79bb      	ldrb	r3, [r7, #6]
 8023896:	2b03      	cmp	r3, #3
 8023898:	d834      	bhi.n	8023904 <SD_ioctl+0x98>
 802389a:	a201      	add	r2, pc, #4	; (adr r2, 80238a0 <SD_ioctl+0x34>)
 802389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80238a0:	080238b1 	.word	0x080238b1
 80238a4:	080238b9 	.word	0x080238b9
 80238a8:	080238d1 	.word	0x080238d1
 80238ac:	080238eb 	.word	0x080238eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80238b0:	2300      	movs	r3, #0
 80238b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80238b6:	e028      	b.n	802390a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80238b8:	f107 0308 	add.w	r3, r7, #8
 80238bc:	4618      	mov	r0, r3
 80238be:	f7ff fe6d 	bl	802359c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80238c2:	6a3a      	ldr	r2, [r7, #32]
 80238c4:	683b      	ldr	r3, [r7, #0]
 80238c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80238c8:	2300      	movs	r3, #0
 80238ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80238ce:	e01c      	b.n	802390a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80238d0:	f107 0308 	add.w	r3, r7, #8
 80238d4:	4618      	mov	r0, r3
 80238d6:	f7ff fe61 	bl	802359c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80238da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80238dc:	b29a      	uxth	r2, r3
 80238de:	683b      	ldr	r3, [r7, #0]
 80238e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80238e2:	2300      	movs	r3, #0
 80238e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80238e8:	e00f      	b.n	802390a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80238ea:	f107 0308 	add.w	r3, r7, #8
 80238ee:	4618      	mov	r0, r3
 80238f0:	f7ff fe54 	bl	802359c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80238f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80238f6:	0a5a      	lsrs	r2, r3, #9
 80238f8:	683b      	ldr	r3, [r7, #0]
 80238fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80238fc:	2300      	movs	r3, #0
 80238fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8023902:	e002      	b.n	802390a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8023904:	2304      	movs	r3, #4
 8023906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 802390a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802390e:	4618      	mov	r0, r3
 8023910:	3730      	adds	r7, #48	; 0x30
 8023912:	46bd      	mov	sp, r7
 8023914:	bd80      	pop	{r7, pc}
 8023916:	bf00      	nop
 8023918:	240006a5 	.word	0x240006a5

0802391c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 802391c:	b580      	push	{r7, lr}
 802391e:	b082      	sub	sp, #8
 8023920:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8023922:	2302      	movs	r3, #2
 8023924:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8023926:	4b05      	ldr	r3, [pc, #20]	; (802393c <BSP_SD_WriteCpltCallback+0x20>)
 8023928:	6818      	ldr	r0, [r3, #0]
 802392a:	1db9      	adds	r1, r7, #6
 802392c:	2300      	movs	r3, #0
 802392e:	2200      	movs	r2, #0
 8023930:	f003 f85a 	bl	80269e8 <osMessageQueuePut>
#endif
}
 8023934:	bf00      	nop
 8023936:	3708      	adds	r7, #8
 8023938:	46bd      	mov	sp, r7
 802393a:	bd80      	pop	{r7, pc}
 802393c:	240013f4 	.word	0x240013f4

08023940 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8023940:	b580      	push	{r7, lr}
 8023942:	b082      	sub	sp, #8
 8023944:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8023946:	2301      	movs	r3, #1
 8023948:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 802394a:	4b05      	ldr	r3, [pc, #20]	; (8023960 <BSP_SD_ReadCpltCallback+0x20>)
 802394c:	6818      	ldr	r0, [r3, #0]
 802394e:	1db9      	adds	r1, r7, #6
 8023950:	2300      	movs	r3, #0
 8023952:	2200      	movs	r2, #0
 8023954:	f003 f848 	bl	80269e8 <osMessageQueuePut>
#endif
}
 8023958:	bf00      	nop
 802395a:	3708      	adds	r7, #8
 802395c:	46bd      	mov	sp, r7
 802395e:	bd80      	pop	{r7, pc}
 8023960:	240013f4 	.word	0x240013f4

08023964 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8023964:	b580      	push	{r7, lr}
 8023966:	b084      	sub	sp, #16
 8023968:	af00      	add	r7, sp, #0
 802396a:	4603      	mov	r3, r0
 802396c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 802396e:	79fb      	ldrb	r3, [r7, #7]
 8023970:	4a08      	ldr	r2, [pc, #32]	; (8023994 <disk_status+0x30>)
 8023972:	009b      	lsls	r3, r3, #2
 8023974:	4413      	add	r3, r2
 8023976:	685b      	ldr	r3, [r3, #4]
 8023978:	685b      	ldr	r3, [r3, #4]
 802397a:	79fa      	ldrb	r2, [r7, #7]
 802397c:	4905      	ldr	r1, [pc, #20]	; (8023994 <disk_status+0x30>)
 802397e:	440a      	add	r2, r1
 8023980:	7a12      	ldrb	r2, [r2, #8]
 8023982:	4610      	mov	r0, r2
 8023984:	4798      	blx	r3
 8023986:	4603      	mov	r3, r0
 8023988:	73fb      	strb	r3, [r7, #15]
  return stat;
 802398a:	7bfb      	ldrb	r3, [r7, #15]
}
 802398c:	4618      	mov	r0, r3
 802398e:	3710      	adds	r7, #16
 8023990:	46bd      	mov	sp, r7
 8023992:	bd80      	pop	{r7, pc}
 8023994:	24001420 	.word	0x24001420

08023998 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8023998:	b580      	push	{r7, lr}
 802399a:	b084      	sub	sp, #16
 802399c:	af00      	add	r7, sp, #0
 802399e:	4603      	mov	r3, r0
 80239a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80239a2:	2300      	movs	r3, #0
 80239a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80239a6:	79fb      	ldrb	r3, [r7, #7]
 80239a8:	4a0d      	ldr	r2, [pc, #52]	; (80239e0 <disk_initialize+0x48>)
 80239aa:	5cd3      	ldrb	r3, [r2, r3]
 80239ac:	2b00      	cmp	r3, #0
 80239ae:	d111      	bne.n	80239d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80239b0:	79fb      	ldrb	r3, [r7, #7]
 80239b2:	4a0b      	ldr	r2, [pc, #44]	; (80239e0 <disk_initialize+0x48>)
 80239b4:	2101      	movs	r1, #1
 80239b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80239b8:	79fb      	ldrb	r3, [r7, #7]
 80239ba:	4a09      	ldr	r2, [pc, #36]	; (80239e0 <disk_initialize+0x48>)
 80239bc:	009b      	lsls	r3, r3, #2
 80239be:	4413      	add	r3, r2
 80239c0:	685b      	ldr	r3, [r3, #4]
 80239c2:	681b      	ldr	r3, [r3, #0]
 80239c4:	79fa      	ldrb	r2, [r7, #7]
 80239c6:	4906      	ldr	r1, [pc, #24]	; (80239e0 <disk_initialize+0x48>)
 80239c8:	440a      	add	r2, r1
 80239ca:	7a12      	ldrb	r2, [r2, #8]
 80239cc:	4610      	mov	r0, r2
 80239ce:	4798      	blx	r3
 80239d0:	4603      	mov	r3, r0
 80239d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80239d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80239d6:	4618      	mov	r0, r3
 80239d8:	3710      	adds	r7, #16
 80239da:	46bd      	mov	sp, r7
 80239dc:	bd80      	pop	{r7, pc}
 80239de:	bf00      	nop
 80239e0:	24001420 	.word	0x24001420

080239e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80239e4:	b590      	push	{r4, r7, lr}
 80239e6:	b087      	sub	sp, #28
 80239e8:	af00      	add	r7, sp, #0
 80239ea:	60b9      	str	r1, [r7, #8]
 80239ec:	607a      	str	r2, [r7, #4]
 80239ee:	603b      	str	r3, [r7, #0]
 80239f0:	4603      	mov	r3, r0
 80239f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80239f4:	7bfb      	ldrb	r3, [r7, #15]
 80239f6:	4a0a      	ldr	r2, [pc, #40]	; (8023a20 <disk_read+0x3c>)
 80239f8:	009b      	lsls	r3, r3, #2
 80239fa:	4413      	add	r3, r2
 80239fc:	685b      	ldr	r3, [r3, #4]
 80239fe:	689c      	ldr	r4, [r3, #8]
 8023a00:	7bfb      	ldrb	r3, [r7, #15]
 8023a02:	4a07      	ldr	r2, [pc, #28]	; (8023a20 <disk_read+0x3c>)
 8023a04:	4413      	add	r3, r2
 8023a06:	7a18      	ldrb	r0, [r3, #8]
 8023a08:	683b      	ldr	r3, [r7, #0]
 8023a0a:	687a      	ldr	r2, [r7, #4]
 8023a0c:	68b9      	ldr	r1, [r7, #8]
 8023a0e:	47a0      	blx	r4
 8023a10:	4603      	mov	r3, r0
 8023a12:	75fb      	strb	r3, [r7, #23]
  return res;
 8023a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8023a16:	4618      	mov	r0, r3
 8023a18:	371c      	adds	r7, #28
 8023a1a:	46bd      	mov	sp, r7
 8023a1c:	bd90      	pop	{r4, r7, pc}
 8023a1e:	bf00      	nop
 8023a20:	24001420 	.word	0x24001420

08023a24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8023a24:	b590      	push	{r4, r7, lr}
 8023a26:	b087      	sub	sp, #28
 8023a28:	af00      	add	r7, sp, #0
 8023a2a:	60b9      	str	r1, [r7, #8]
 8023a2c:	607a      	str	r2, [r7, #4]
 8023a2e:	603b      	str	r3, [r7, #0]
 8023a30:	4603      	mov	r3, r0
 8023a32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8023a34:	7bfb      	ldrb	r3, [r7, #15]
 8023a36:	4a0a      	ldr	r2, [pc, #40]	; (8023a60 <disk_write+0x3c>)
 8023a38:	009b      	lsls	r3, r3, #2
 8023a3a:	4413      	add	r3, r2
 8023a3c:	685b      	ldr	r3, [r3, #4]
 8023a3e:	68dc      	ldr	r4, [r3, #12]
 8023a40:	7bfb      	ldrb	r3, [r7, #15]
 8023a42:	4a07      	ldr	r2, [pc, #28]	; (8023a60 <disk_write+0x3c>)
 8023a44:	4413      	add	r3, r2
 8023a46:	7a18      	ldrb	r0, [r3, #8]
 8023a48:	683b      	ldr	r3, [r7, #0]
 8023a4a:	687a      	ldr	r2, [r7, #4]
 8023a4c:	68b9      	ldr	r1, [r7, #8]
 8023a4e:	47a0      	blx	r4
 8023a50:	4603      	mov	r3, r0
 8023a52:	75fb      	strb	r3, [r7, #23]
  return res;
 8023a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8023a56:	4618      	mov	r0, r3
 8023a58:	371c      	adds	r7, #28
 8023a5a:	46bd      	mov	sp, r7
 8023a5c:	bd90      	pop	{r4, r7, pc}
 8023a5e:	bf00      	nop
 8023a60:	24001420 	.word	0x24001420

08023a64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8023a64:	b580      	push	{r7, lr}
 8023a66:	b084      	sub	sp, #16
 8023a68:	af00      	add	r7, sp, #0
 8023a6a:	4603      	mov	r3, r0
 8023a6c:	603a      	str	r2, [r7, #0]
 8023a6e:	71fb      	strb	r3, [r7, #7]
 8023a70:	460b      	mov	r3, r1
 8023a72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8023a74:	79fb      	ldrb	r3, [r7, #7]
 8023a76:	4a09      	ldr	r2, [pc, #36]	; (8023a9c <disk_ioctl+0x38>)
 8023a78:	009b      	lsls	r3, r3, #2
 8023a7a:	4413      	add	r3, r2
 8023a7c:	685b      	ldr	r3, [r3, #4]
 8023a7e:	691b      	ldr	r3, [r3, #16]
 8023a80:	79fa      	ldrb	r2, [r7, #7]
 8023a82:	4906      	ldr	r1, [pc, #24]	; (8023a9c <disk_ioctl+0x38>)
 8023a84:	440a      	add	r2, r1
 8023a86:	7a10      	ldrb	r0, [r2, #8]
 8023a88:	79b9      	ldrb	r1, [r7, #6]
 8023a8a:	683a      	ldr	r2, [r7, #0]
 8023a8c:	4798      	blx	r3
 8023a8e:	4603      	mov	r3, r0
 8023a90:	73fb      	strb	r3, [r7, #15]
  return res;
 8023a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8023a94:	4618      	mov	r0, r3
 8023a96:	3710      	adds	r7, #16
 8023a98:	46bd      	mov	sp, r7
 8023a9a:	bd80      	pop	{r7, pc}
 8023a9c:	24001420 	.word	0x24001420

08023aa0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8023aa0:	b480      	push	{r7}
 8023aa2:	b085      	sub	sp, #20
 8023aa4:	af00      	add	r7, sp, #0
 8023aa6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	3301      	adds	r3, #1
 8023aac:	781b      	ldrb	r3, [r3, #0]
 8023aae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8023ab0:	89fb      	ldrh	r3, [r7, #14]
 8023ab2:	021b      	lsls	r3, r3, #8
 8023ab4:	b21a      	sxth	r2, r3
 8023ab6:	687b      	ldr	r3, [r7, #4]
 8023ab8:	781b      	ldrb	r3, [r3, #0]
 8023aba:	b21b      	sxth	r3, r3
 8023abc:	4313      	orrs	r3, r2
 8023abe:	b21b      	sxth	r3, r3
 8023ac0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8023ac2:	89fb      	ldrh	r3, [r7, #14]
}
 8023ac4:	4618      	mov	r0, r3
 8023ac6:	3714      	adds	r7, #20
 8023ac8:	46bd      	mov	sp, r7
 8023aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ace:	4770      	bx	lr

08023ad0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8023ad0:	b480      	push	{r7}
 8023ad2:	b085      	sub	sp, #20
 8023ad4:	af00      	add	r7, sp, #0
 8023ad6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8023ad8:	687b      	ldr	r3, [r7, #4]
 8023ada:	3303      	adds	r3, #3
 8023adc:	781b      	ldrb	r3, [r3, #0]
 8023ade:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8023ae0:	68fb      	ldr	r3, [r7, #12]
 8023ae2:	021b      	lsls	r3, r3, #8
 8023ae4:	687a      	ldr	r2, [r7, #4]
 8023ae6:	3202      	adds	r2, #2
 8023ae8:	7812      	ldrb	r2, [r2, #0]
 8023aea:	4313      	orrs	r3, r2
 8023aec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8023aee:	68fb      	ldr	r3, [r7, #12]
 8023af0:	021b      	lsls	r3, r3, #8
 8023af2:	687a      	ldr	r2, [r7, #4]
 8023af4:	3201      	adds	r2, #1
 8023af6:	7812      	ldrb	r2, [r2, #0]
 8023af8:	4313      	orrs	r3, r2
 8023afa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8023afc:	68fb      	ldr	r3, [r7, #12]
 8023afe:	021b      	lsls	r3, r3, #8
 8023b00:	687a      	ldr	r2, [r7, #4]
 8023b02:	7812      	ldrb	r2, [r2, #0]
 8023b04:	4313      	orrs	r3, r2
 8023b06:	60fb      	str	r3, [r7, #12]
	return rv;
 8023b08:	68fb      	ldr	r3, [r7, #12]
}
 8023b0a:	4618      	mov	r0, r3
 8023b0c:	3714      	adds	r7, #20
 8023b0e:	46bd      	mov	sp, r7
 8023b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b14:	4770      	bx	lr

08023b16 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8023b16:	b480      	push	{r7}
 8023b18:	b083      	sub	sp, #12
 8023b1a:	af00      	add	r7, sp, #0
 8023b1c:	6078      	str	r0, [r7, #4]
 8023b1e:	460b      	mov	r3, r1
 8023b20:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	1c5a      	adds	r2, r3, #1
 8023b26:	607a      	str	r2, [r7, #4]
 8023b28:	887a      	ldrh	r2, [r7, #2]
 8023b2a:	b2d2      	uxtb	r2, r2
 8023b2c:	701a      	strb	r2, [r3, #0]
 8023b2e:	887b      	ldrh	r3, [r7, #2]
 8023b30:	0a1b      	lsrs	r3, r3, #8
 8023b32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8023b34:	687b      	ldr	r3, [r7, #4]
 8023b36:	1c5a      	adds	r2, r3, #1
 8023b38:	607a      	str	r2, [r7, #4]
 8023b3a:	887a      	ldrh	r2, [r7, #2]
 8023b3c:	b2d2      	uxtb	r2, r2
 8023b3e:	701a      	strb	r2, [r3, #0]
}
 8023b40:	bf00      	nop
 8023b42:	370c      	adds	r7, #12
 8023b44:	46bd      	mov	sp, r7
 8023b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b4a:	4770      	bx	lr

08023b4c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8023b4c:	b480      	push	{r7}
 8023b4e:	b083      	sub	sp, #12
 8023b50:	af00      	add	r7, sp, #0
 8023b52:	6078      	str	r0, [r7, #4]
 8023b54:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8023b56:	687b      	ldr	r3, [r7, #4]
 8023b58:	1c5a      	adds	r2, r3, #1
 8023b5a:	607a      	str	r2, [r7, #4]
 8023b5c:	683a      	ldr	r2, [r7, #0]
 8023b5e:	b2d2      	uxtb	r2, r2
 8023b60:	701a      	strb	r2, [r3, #0]
 8023b62:	683b      	ldr	r3, [r7, #0]
 8023b64:	0a1b      	lsrs	r3, r3, #8
 8023b66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	1c5a      	adds	r2, r3, #1
 8023b6c:	607a      	str	r2, [r7, #4]
 8023b6e:	683a      	ldr	r2, [r7, #0]
 8023b70:	b2d2      	uxtb	r2, r2
 8023b72:	701a      	strb	r2, [r3, #0]
 8023b74:	683b      	ldr	r3, [r7, #0]
 8023b76:	0a1b      	lsrs	r3, r3, #8
 8023b78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8023b7a:	687b      	ldr	r3, [r7, #4]
 8023b7c:	1c5a      	adds	r2, r3, #1
 8023b7e:	607a      	str	r2, [r7, #4]
 8023b80:	683a      	ldr	r2, [r7, #0]
 8023b82:	b2d2      	uxtb	r2, r2
 8023b84:	701a      	strb	r2, [r3, #0]
 8023b86:	683b      	ldr	r3, [r7, #0]
 8023b88:	0a1b      	lsrs	r3, r3, #8
 8023b8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8023b8c:	687b      	ldr	r3, [r7, #4]
 8023b8e:	1c5a      	adds	r2, r3, #1
 8023b90:	607a      	str	r2, [r7, #4]
 8023b92:	683a      	ldr	r2, [r7, #0]
 8023b94:	b2d2      	uxtb	r2, r2
 8023b96:	701a      	strb	r2, [r3, #0]
}
 8023b98:	bf00      	nop
 8023b9a:	370c      	adds	r7, #12
 8023b9c:	46bd      	mov	sp, r7
 8023b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ba2:	4770      	bx	lr

08023ba4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8023ba4:	b480      	push	{r7}
 8023ba6:	b087      	sub	sp, #28
 8023ba8:	af00      	add	r7, sp, #0
 8023baa:	60f8      	str	r0, [r7, #12]
 8023bac:	60b9      	str	r1, [r7, #8]
 8023bae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8023bb0:	68fb      	ldr	r3, [r7, #12]
 8023bb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8023bb4:	68bb      	ldr	r3, [r7, #8]
 8023bb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	2b00      	cmp	r3, #0
 8023bbc:	d00d      	beq.n	8023bda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8023bbe:	693a      	ldr	r2, [r7, #16]
 8023bc0:	1c53      	adds	r3, r2, #1
 8023bc2:	613b      	str	r3, [r7, #16]
 8023bc4:	697b      	ldr	r3, [r7, #20]
 8023bc6:	1c59      	adds	r1, r3, #1
 8023bc8:	6179      	str	r1, [r7, #20]
 8023bca:	7812      	ldrb	r2, [r2, #0]
 8023bcc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8023bce:	687b      	ldr	r3, [r7, #4]
 8023bd0:	3b01      	subs	r3, #1
 8023bd2:	607b      	str	r3, [r7, #4]
 8023bd4:	687b      	ldr	r3, [r7, #4]
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	d1f1      	bne.n	8023bbe <mem_cpy+0x1a>
	}
}
 8023bda:	bf00      	nop
 8023bdc:	371c      	adds	r7, #28
 8023bde:	46bd      	mov	sp, r7
 8023be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023be4:	4770      	bx	lr

08023be6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8023be6:	b480      	push	{r7}
 8023be8:	b087      	sub	sp, #28
 8023bea:	af00      	add	r7, sp, #0
 8023bec:	60f8      	str	r0, [r7, #12]
 8023bee:	60b9      	str	r1, [r7, #8]
 8023bf0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8023bf2:	68fb      	ldr	r3, [r7, #12]
 8023bf4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8023bf6:	697b      	ldr	r3, [r7, #20]
 8023bf8:	1c5a      	adds	r2, r3, #1
 8023bfa:	617a      	str	r2, [r7, #20]
 8023bfc:	68ba      	ldr	r2, [r7, #8]
 8023bfe:	b2d2      	uxtb	r2, r2
 8023c00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8023c02:	687b      	ldr	r3, [r7, #4]
 8023c04:	3b01      	subs	r3, #1
 8023c06:	607b      	str	r3, [r7, #4]
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	2b00      	cmp	r3, #0
 8023c0c:	d1f3      	bne.n	8023bf6 <mem_set+0x10>
}
 8023c0e:	bf00      	nop
 8023c10:	371c      	adds	r7, #28
 8023c12:	46bd      	mov	sp, r7
 8023c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c18:	4770      	bx	lr

08023c1a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8023c1a:	b480      	push	{r7}
 8023c1c:	b089      	sub	sp, #36	; 0x24
 8023c1e:	af00      	add	r7, sp, #0
 8023c20:	60f8      	str	r0, [r7, #12]
 8023c22:	60b9      	str	r1, [r7, #8]
 8023c24:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8023c26:	68fb      	ldr	r3, [r7, #12]
 8023c28:	61fb      	str	r3, [r7, #28]
 8023c2a:	68bb      	ldr	r3, [r7, #8]
 8023c2c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8023c2e:	2300      	movs	r3, #0
 8023c30:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8023c32:	69fb      	ldr	r3, [r7, #28]
 8023c34:	1c5a      	adds	r2, r3, #1
 8023c36:	61fa      	str	r2, [r7, #28]
 8023c38:	781b      	ldrb	r3, [r3, #0]
 8023c3a:	4619      	mov	r1, r3
 8023c3c:	69bb      	ldr	r3, [r7, #24]
 8023c3e:	1c5a      	adds	r2, r3, #1
 8023c40:	61ba      	str	r2, [r7, #24]
 8023c42:	781b      	ldrb	r3, [r3, #0]
 8023c44:	1acb      	subs	r3, r1, r3
 8023c46:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8023c48:	687b      	ldr	r3, [r7, #4]
 8023c4a:	3b01      	subs	r3, #1
 8023c4c:	607b      	str	r3, [r7, #4]
 8023c4e:	687b      	ldr	r3, [r7, #4]
 8023c50:	2b00      	cmp	r3, #0
 8023c52:	d002      	beq.n	8023c5a <mem_cmp+0x40>
 8023c54:	697b      	ldr	r3, [r7, #20]
 8023c56:	2b00      	cmp	r3, #0
 8023c58:	d0eb      	beq.n	8023c32 <mem_cmp+0x18>

	return r;
 8023c5a:	697b      	ldr	r3, [r7, #20]
}
 8023c5c:	4618      	mov	r0, r3
 8023c5e:	3724      	adds	r7, #36	; 0x24
 8023c60:	46bd      	mov	sp, r7
 8023c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c66:	4770      	bx	lr

08023c68 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8023c68:	b480      	push	{r7}
 8023c6a:	b083      	sub	sp, #12
 8023c6c:	af00      	add	r7, sp, #0
 8023c6e:	6078      	str	r0, [r7, #4]
 8023c70:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8023c72:	e002      	b.n	8023c7a <chk_chr+0x12>
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	3301      	adds	r3, #1
 8023c78:	607b      	str	r3, [r7, #4]
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	781b      	ldrb	r3, [r3, #0]
 8023c7e:	2b00      	cmp	r3, #0
 8023c80:	d005      	beq.n	8023c8e <chk_chr+0x26>
 8023c82:	687b      	ldr	r3, [r7, #4]
 8023c84:	781b      	ldrb	r3, [r3, #0]
 8023c86:	461a      	mov	r2, r3
 8023c88:	683b      	ldr	r3, [r7, #0]
 8023c8a:	4293      	cmp	r3, r2
 8023c8c:	d1f2      	bne.n	8023c74 <chk_chr+0xc>
	return *str;
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	781b      	ldrb	r3, [r3, #0]
}
 8023c92:	4618      	mov	r0, r3
 8023c94:	370c      	adds	r7, #12
 8023c96:	46bd      	mov	sp, r7
 8023c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c9c:	4770      	bx	lr

08023c9e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8023c9e:	b580      	push	{r7, lr}
 8023ca0:	b082      	sub	sp, #8
 8023ca2:	af00      	add	r7, sp, #0
 8023ca4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8023ca6:	687b      	ldr	r3, [r7, #4]
 8023ca8:	2b00      	cmp	r3, #0
 8023caa:	d009      	beq.n	8023cc0 <lock_fs+0x22>
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	68db      	ldr	r3, [r3, #12]
 8023cb0:	4618      	mov	r0, r3
 8023cb2:	f002 f8df 	bl	8025e74 <ff_req_grant>
 8023cb6:	4603      	mov	r3, r0
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	d001      	beq.n	8023cc0 <lock_fs+0x22>
 8023cbc:	2301      	movs	r3, #1
 8023cbe:	e000      	b.n	8023cc2 <lock_fs+0x24>
 8023cc0:	2300      	movs	r3, #0
}
 8023cc2:	4618      	mov	r0, r3
 8023cc4:	3708      	adds	r7, #8
 8023cc6:	46bd      	mov	sp, r7
 8023cc8:	bd80      	pop	{r7, pc}

08023cca <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8023cca:	b580      	push	{r7, lr}
 8023ccc:	b082      	sub	sp, #8
 8023cce:	af00      	add	r7, sp, #0
 8023cd0:	6078      	str	r0, [r7, #4]
 8023cd2:	460b      	mov	r3, r1
 8023cd4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8023cd6:	687b      	ldr	r3, [r7, #4]
 8023cd8:	2b00      	cmp	r3, #0
 8023cda:	d00d      	beq.n	8023cf8 <unlock_fs+0x2e>
 8023cdc:	78fb      	ldrb	r3, [r7, #3]
 8023cde:	2b0c      	cmp	r3, #12
 8023ce0:	d00a      	beq.n	8023cf8 <unlock_fs+0x2e>
 8023ce2:	78fb      	ldrb	r3, [r7, #3]
 8023ce4:	2b0b      	cmp	r3, #11
 8023ce6:	d007      	beq.n	8023cf8 <unlock_fs+0x2e>
 8023ce8:	78fb      	ldrb	r3, [r7, #3]
 8023cea:	2b0f      	cmp	r3, #15
 8023cec:	d004      	beq.n	8023cf8 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8023cee:	687b      	ldr	r3, [r7, #4]
 8023cf0:	68db      	ldr	r3, [r3, #12]
 8023cf2:	4618      	mov	r0, r3
 8023cf4:	f002 f8d3 	bl	8025e9e <ff_rel_grant>
	}
}
 8023cf8:	bf00      	nop
 8023cfa:	3708      	adds	r7, #8
 8023cfc:	46bd      	mov	sp, r7
 8023cfe:	bd80      	pop	{r7, pc}

08023d00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8023d00:	b480      	push	{r7}
 8023d02:	b085      	sub	sp, #20
 8023d04:	af00      	add	r7, sp, #0
 8023d06:	6078      	str	r0, [r7, #4]
 8023d08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8023d0a:	2300      	movs	r3, #0
 8023d0c:	60bb      	str	r3, [r7, #8]
 8023d0e:	68bb      	ldr	r3, [r7, #8]
 8023d10:	60fb      	str	r3, [r7, #12]
 8023d12:	e029      	b.n	8023d68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8023d14:	4a27      	ldr	r2, [pc, #156]	; (8023db4 <chk_lock+0xb4>)
 8023d16:	68fb      	ldr	r3, [r7, #12]
 8023d18:	011b      	lsls	r3, r3, #4
 8023d1a:	4413      	add	r3, r2
 8023d1c:	681b      	ldr	r3, [r3, #0]
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	d01d      	beq.n	8023d5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8023d22:	4a24      	ldr	r2, [pc, #144]	; (8023db4 <chk_lock+0xb4>)
 8023d24:	68fb      	ldr	r3, [r7, #12]
 8023d26:	011b      	lsls	r3, r3, #4
 8023d28:	4413      	add	r3, r2
 8023d2a:	681a      	ldr	r2, [r3, #0]
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	681b      	ldr	r3, [r3, #0]
 8023d30:	429a      	cmp	r2, r3
 8023d32:	d116      	bne.n	8023d62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8023d34:	4a1f      	ldr	r2, [pc, #124]	; (8023db4 <chk_lock+0xb4>)
 8023d36:	68fb      	ldr	r3, [r7, #12]
 8023d38:	011b      	lsls	r3, r3, #4
 8023d3a:	4413      	add	r3, r2
 8023d3c:	3304      	adds	r3, #4
 8023d3e:	681a      	ldr	r2, [r3, #0]
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8023d44:	429a      	cmp	r2, r3
 8023d46:	d10c      	bne.n	8023d62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8023d48:	4a1a      	ldr	r2, [pc, #104]	; (8023db4 <chk_lock+0xb4>)
 8023d4a:	68fb      	ldr	r3, [r7, #12]
 8023d4c:	011b      	lsls	r3, r3, #4
 8023d4e:	4413      	add	r3, r2
 8023d50:	3308      	adds	r3, #8
 8023d52:	681a      	ldr	r2, [r3, #0]
 8023d54:	687b      	ldr	r3, [r7, #4]
 8023d56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8023d58:	429a      	cmp	r2, r3
 8023d5a:	d102      	bne.n	8023d62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8023d5c:	e007      	b.n	8023d6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8023d5e:	2301      	movs	r3, #1
 8023d60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8023d62:	68fb      	ldr	r3, [r7, #12]
 8023d64:	3301      	adds	r3, #1
 8023d66:	60fb      	str	r3, [r7, #12]
 8023d68:	68fb      	ldr	r3, [r7, #12]
 8023d6a:	2b01      	cmp	r3, #1
 8023d6c:	d9d2      	bls.n	8023d14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8023d6e:	68fb      	ldr	r3, [r7, #12]
 8023d70:	2b02      	cmp	r3, #2
 8023d72:	d109      	bne.n	8023d88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8023d74:	68bb      	ldr	r3, [r7, #8]
 8023d76:	2b00      	cmp	r3, #0
 8023d78:	d102      	bne.n	8023d80 <chk_lock+0x80>
 8023d7a:	683b      	ldr	r3, [r7, #0]
 8023d7c:	2b02      	cmp	r3, #2
 8023d7e:	d101      	bne.n	8023d84 <chk_lock+0x84>
 8023d80:	2300      	movs	r3, #0
 8023d82:	e010      	b.n	8023da6 <chk_lock+0xa6>
 8023d84:	2312      	movs	r3, #18
 8023d86:	e00e      	b.n	8023da6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8023d88:	683b      	ldr	r3, [r7, #0]
 8023d8a:	2b00      	cmp	r3, #0
 8023d8c:	d108      	bne.n	8023da0 <chk_lock+0xa0>
 8023d8e:	4a09      	ldr	r2, [pc, #36]	; (8023db4 <chk_lock+0xb4>)
 8023d90:	68fb      	ldr	r3, [r7, #12]
 8023d92:	011b      	lsls	r3, r3, #4
 8023d94:	4413      	add	r3, r2
 8023d96:	330c      	adds	r3, #12
 8023d98:	881b      	ldrh	r3, [r3, #0]
 8023d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023d9e:	d101      	bne.n	8023da4 <chk_lock+0xa4>
 8023da0:	2310      	movs	r3, #16
 8023da2:	e000      	b.n	8023da6 <chk_lock+0xa6>
 8023da4:	2300      	movs	r3, #0
}
 8023da6:	4618      	mov	r0, r3
 8023da8:	3714      	adds	r7, #20
 8023daa:	46bd      	mov	sp, r7
 8023dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023db0:	4770      	bx	lr
 8023db2:	bf00      	nop
 8023db4:	24001400 	.word	0x24001400

08023db8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8023db8:	b480      	push	{r7}
 8023dba:	b083      	sub	sp, #12
 8023dbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8023dbe:	2300      	movs	r3, #0
 8023dc0:	607b      	str	r3, [r7, #4]
 8023dc2:	e002      	b.n	8023dca <enq_lock+0x12>
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	3301      	adds	r3, #1
 8023dc8:	607b      	str	r3, [r7, #4]
 8023dca:	687b      	ldr	r3, [r7, #4]
 8023dcc:	2b01      	cmp	r3, #1
 8023dce:	d806      	bhi.n	8023dde <enq_lock+0x26>
 8023dd0:	4a09      	ldr	r2, [pc, #36]	; (8023df8 <enq_lock+0x40>)
 8023dd2:	687b      	ldr	r3, [r7, #4]
 8023dd4:	011b      	lsls	r3, r3, #4
 8023dd6:	4413      	add	r3, r2
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	d1f2      	bne.n	8023dc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	2b02      	cmp	r3, #2
 8023de2:	bf14      	ite	ne
 8023de4:	2301      	movne	r3, #1
 8023de6:	2300      	moveq	r3, #0
 8023de8:	b2db      	uxtb	r3, r3
}
 8023dea:	4618      	mov	r0, r3
 8023dec:	370c      	adds	r7, #12
 8023dee:	46bd      	mov	sp, r7
 8023df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023df4:	4770      	bx	lr
 8023df6:	bf00      	nop
 8023df8:	24001400 	.word	0x24001400

08023dfc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8023dfc:	b480      	push	{r7}
 8023dfe:	b085      	sub	sp, #20
 8023e00:	af00      	add	r7, sp, #0
 8023e02:	6078      	str	r0, [r7, #4]
 8023e04:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8023e06:	2300      	movs	r3, #0
 8023e08:	60fb      	str	r3, [r7, #12]
 8023e0a:	e01f      	b.n	8023e4c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8023e0c:	4a41      	ldr	r2, [pc, #260]	; (8023f14 <inc_lock+0x118>)
 8023e0e:	68fb      	ldr	r3, [r7, #12]
 8023e10:	011b      	lsls	r3, r3, #4
 8023e12:	4413      	add	r3, r2
 8023e14:	681a      	ldr	r2, [r3, #0]
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	681b      	ldr	r3, [r3, #0]
 8023e1a:	429a      	cmp	r2, r3
 8023e1c:	d113      	bne.n	8023e46 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8023e1e:	4a3d      	ldr	r2, [pc, #244]	; (8023f14 <inc_lock+0x118>)
 8023e20:	68fb      	ldr	r3, [r7, #12]
 8023e22:	011b      	lsls	r3, r3, #4
 8023e24:	4413      	add	r3, r2
 8023e26:	3304      	adds	r3, #4
 8023e28:	681a      	ldr	r2, [r3, #0]
 8023e2a:	687b      	ldr	r3, [r7, #4]
 8023e2c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8023e2e:	429a      	cmp	r2, r3
 8023e30:	d109      	bne.n	8023e46 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8023e32:	4a38      	ldr	r2, [pc, #224]	; (8023f14 <inc_lock+0x118>)
 8023e34:	68fb      	ldr	r3, [r7, #12]
 8023e36:	011b      	lsls	r3, r3, #4
 8023e38:	4413      	add	r3, r2
 8023e3a:	3308      	adds	r3, #8
 8023e3c:	681a      	ldr	r2, [r3, #0]
 8023e3e:	687b      	ldr	r3, [r7, #4]
 8023e40:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8023e42:	429a      	cmp	r2, r3
 8023e44:	d006      	beq.n	8023e54 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8023e46:	68fb      	ldr	r3, [r7, #12]
 8023e48:	3301      	adds	r3, #1
 8023e4a:	60fb      	str	r3, [r7, #12]
 8023e4c:	68fb      	ldr	r3, [r7, #12]
 8023e4e:	2b01      	cmp	r3, #1
 8023e50:	d9dc      	bls.n	8023e0c <inc_lock+0x10>
 8023e52:	e000      	b.n	8023e56 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8023e54:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8023e56:	68fb      	ldr	r3, [r7, #12]
 8023e58:	2b02      	cmp	r3, #2
 8023e5a:	d132      	bne.n	8023ec2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8023e5c:	2300      	movs	r3, #0
 8023e5e:	60fb      	str	r3, [r7, #12]
 8023e60:	e002      	b.n	8023e68 <inc_lock+0x6c>
 8023e62:	68fb      	ldr	r3, [r7, #12]
 8023e64:	3301      	adds	r3, #1
 8023e66:	60fb      	str	r3, [r7, #12]
 8023e68:	68fb      	ldr	r3, [r7, #12]
 8023e6a:	2b01      	cmp	r3, #1
 8023e6c:	d806      	bhi.n	8023e7c <inc_lock+0x80>
 8023e6e:	4a29      	ldr	r2, [pc, #164]	; (8023f14 <inc_lock+0x118>)
 8023e70:	68fb      	ldr	r3, [r7, #12]
 8023e72:	011b      	lsls	r3, r3, #4
 8023e74:	4413      	add	r3, r2
 8023e76:	681b      	ldr	r3, [r3, #0]
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d1f2      	bne.n	8023e62 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8023e7c:	68fb      	ldr	r3, [r7, #12]
 8023e7e:	2b02      	cmp	r3, #2
 8023e80:	d101      	bne.n	8023e86 <inc_lock+0x8a>
 8023e82:	2300      	movs	r3, #0
 8023e84:	e040      	b.n	8023f08 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8023e86:	687b      	ldr	r3, [r7, #4]
 8023e88:	681a      	ldr	r2, [r3, #0]
 8023e8a:	4922      	ldr	r1, [pc, #136]	; (8023f14 <inc_lock+0x118>)
 8023e8c:	68fb      	ldr	r3, [r7, #12]
 8023e8e:	011b      	lsls	r3, r3, #4
 8023e90:	440b      	add	r3, r1
 8023e92:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8023e94:	687b      	ldr	r3, [r7, #4]
 8023e96:	689a      	ldr	r2, [r3, #8]
 8023e98:	491e      	ldr	r1, [pc, #120]	; (8023f14 <inc_lock+0x118>)
 8023e9a:	68fb      	ldr	r3, [r7, #12]
 8023e9c:	011b      	lsls	r3, r3, #4
 8023e9e:	440b      	add	r3, r1
 8023ea0:	3304      	adds	r3, #4
 8023ea2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8023ea4:	687b      	ldr	r3, [r7, #4]
 8023ea6:	695a      	ldr	r2, [r3, #20]
 8023ea8:	491a      	ldr	r1, [pc, #104]	; (8023f14 <inc_lock+0x118>)
 8023eaa:	68fb      	ldr	r3, [r7, #12]
 8023eac:	011b      	lsls	r3, r3, #4
 8023eae:	440b      	add	r3, r1
 8023eb0:	3308      	adds	r3, #8
 8023eb2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8023eb4:	4a17      	ldr	r2, [pc, #92]	; (8023f14 <inc_lock+0x118>)
 8023eb6:	68fb      	ldr	r3, [r7, #12]
 8023eb8:	011b      	lsls	r3, r3, #4
 8023eba:	4413      	add	r3, r2
 8023ebc:	330c      	adds	r3, #12
 8023ebe:	2200      	movs	r2, #0
 8023ec0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8023ec2:	683b      	ldr	r3, [r7, #0]
 8023ec4:	2b00      	cmp	r3, #0
 8023ec6:	d009      	beq.n	8023edc <inc_lock+0xe0>
 8023ec8:	4a12      	ldr	r2, [pc, #72]	; (8023f14 <inc_lock+0x118>)
 8023eca:	68fb      	ldr	r3, [r7, #12]
 8023ecc:	011b      	lsls	r3, r3, #4
 8023ece:	4413      	add	r3, r2
 8023ed0:	330c      	adds	r3, #12
 8023ed2:	881b      	ldrh	r3, [r3, #0]
 8023ed4:	2b00      	cmp	r3, #0
 8023ed6:	d001      	beq.n	8023edc <inc_lock+0xe0>
 8023ed8:	2300      	movs	r3, #0
 8023eda:	e015      	b.n	8023f08 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8023edc:	683b      	ldr	r3, [r7, #0]
 8023ede:	2b00      	cmp	r3, #0
 8023ee0:	d108      	bne.n	8023ef4 <inc_lock+0xf8>
 8023ee2:	4a0c      	ldr	r2, [pc, #48]	; (8023f14 <inc_lock+0x118>)
 8023ee4:	68fb      	ldr	r3, [r7, #12]
 8023ee6:	011b      	lsls	r3, r3, #4
 8023ee8:	4413      	add	r3, r2
 8023eea:	330c      	adds	r3, #12
 8023eec:	881b      	ldrh	r3, [r3, #0]
 8023eee:	3301      	adds	r3, #1
 8023ef0:	b29a      	uxth	r2, r3
 8023ef2:	e001      	b.n	8023ef8 <inc_lock+0xfc>
 8023ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023ef8:	4906      	ldr	r1, [pc, #24]	; (8023f14 <inc_lock+0x118>)
 8023efa:	68fb      	ldr	r3, [r7, #12]
 8023efc:	011b      	lsls	r3, r3, #4
 8023efe:	440b      	add	r3, r1
 8023f00:	330c      	adds	r3, #12
 8023f02:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8023f04:	68fb      	ldr	r3, [r7, #12]
 8023f06:	3301      	adds	r3, #1
}
 8023f08:	4618      	mov	r0, r3
 8023f0a:	3714      	adds	r7, #20
 8023f0c:	46bd      	mov	sp, r7
 8023f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f12:	4770      	bx	lr
 8023f14:	24001400 	.word	0x24001400

08023f18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8023f18:	b480      	push	{r7}
 8023f1a:	b085      	sub	sp, #20
 8023f1c:	af00      	add	r7, sp, #0
 8023f1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8023f20:	687b      	ldr	r3, [r7, #4]
 8023f22:	3b01      	subs	r3, #1
 8023f24:	607b      	str	r3, [r7, #4]
 8023f26:	687b      	ldr	r3, [r7, #4]
 8023f28:	2b01      	cmp	r3, #1
 8023f2a:	d825      	bhi.n	8023f78 <dec_lock+0x60>
		n = Files[i].ctr;
 8023f2c:	4a17      	ldr	r2, [pc, #92]	; (8023f8c <dec_lock+0x74>)
 8023f2e:	687b      	ldr	r3, [r7, #4]
 8023f30:	011b      	lsls	r3, r3, #4
 8023f32:	4413      	add	r3, r2
 8023f34:	330c      	adds	r3, #12
 8023f36:	881b      	ldrh	r3, [r3, #0]
 8023f38:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8023f3a:	89fb      	ldrh	r3, [r7, #14]
 8023f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023f40:	d101      	bne.n	8023f46 <dec_lock+0x2e>
 8023f42:	2300      	movs	r3, #0
 8023f44:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8023f46:	89fb      	ldrh	r3, [r7, #14]
 8023f48:	2b00      	cmp	r3, #0
 8023f4a:	d002      	beq.n	8023f52 <dec_lock+0x3a>
 8023f4c:	89fb      	ldrh	r3, [r7, #14]
 8023f4e:	3b01      	subs	r3, #1
 8023f50:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8023f52:	4a0e      	ldr	r2, [pc, #56]	; (8023f8c <dec_lock+0x74>)
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	011b      	lsls	r3, r3, #4
 8023f58:	4413      	add	r3, r2
 8023f5a:	330c      	adds	r3, #12
 8023f5c:	89fa      	ldrh	r2, [r7, #14]
 8023f5e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8023f60:	89fb      	ldrh	r3, [r7, #14]
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	d105      	bne.n	8023f72 <dec_lock+0x5a>
 8023f66:	4a09      	ldr	r2, [pc, #36]	; (8023f8c <dec_lock+0x74>)
 8023f68:	687b      	ldr	r3, [r7, #4]
 8023f6a:	011b      	lsls	r3, r3, #4
 8023f6c:	4413      	add	r3, r2
 8023f6e:	2200      	movs	r2, #0
 8023f70:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8023f72:	2300      	movs	r3, #0
 8023f74:	737b      	strb	r3, [r7, #13]
 8023f76:	e001      	b.n	8023f7c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8023f78:	2302      	movs	r3, #2
 8023f7a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8023f7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8023f7e:	4618      	mov	r0, r3
 8023f80:	3714      	adds	r7, #20
 8023f82:	46bd      	mov	sp, r7
 8023f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f88:	4770      	bx	lr
 8023f8a:	bf00      	nop
 8023f8c:	24001400 	.word	0x24001400

08023f90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8023f90:	b480      	push	{r7}
 8023f92:	b085      	sub	sp, #20
 8023f94:	af00      	add	r7, sp, #0
 8023f96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8023f98:	2300      	movs	r3, #0
 8023f9a:	60fb      	str	r3, [r7, #12]
 8023f9c:	e010      	b.n	8023fc0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8023f9e:	4a0d      	ldr	r2, [pc, #52]	; (8023fd4 <clear_lock+0x44>)
 8023fa0:	68fb      	ldr	r3, [r7, #12]
 8023fa2:	011b      	lsls	r3, r3, #4
 8023fa4:	4413      	add	r3, r2
 8023fa6:	681b      	ldr	r3, [r3, #0]
 8023fa8:	687a      	ldr	r2, [r7, #4]
 8023faa:	429a      	cmp	r2, r3
 8023fac:	d105      	bne.n	8023fba <clear_lock+0x2a>
 8023fae:	4a09      	ldr	r2, [pc, #36]	; (8023fd4 <clear_lock+0x44>)
 8023fb0:	68fb      	ldr	r3, [r7, #12]
 8023fb2:	011b      	lsls	r3, r3, #4
 8023fb4:	4413      	add	r3, r2
 8023fb6:	2200      	movs	r2, #0
 8023fb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8023fba:	68fb      	ldr	r3, [r7, #12]
 8023fbc:	3301      	adds	r3, #1
 8023fbe:	60fb      	str	r3, [r7, #12]
 8023fc0:	68fb      	ldr	r3, [r7, #12]
 8023fc2:	2b01      	cmp	r3, #1
 8023fc4:	d9eb      	bls.n	8023f9e <clear_lock+0xe>
	}
}
 8023fc6:	bf00      	nop
 8023fc8:	3714      	adds	r7, #20
 8023fca:	46bd      	mov	sp, r7
 8023fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fd0:	4770      	bx	lr
 8023fd2:	bf00      	nop
 8023fd4:	24001400 	.word	0x24001400

08023fd8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8023fd8:	b580      	push	{r7, lr}
 8023fda:	b086      	sub	sp, #24
 8023fdc:	af00      	add	r7, sp, #0
 8023fde:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8023fe0:	2300      	movs	r3, #0
 8023fe2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8023fe4:	687b      	ldr	r3, [r7, #4]
 8023fe6:	78db      	ldrb	r3, [r3, #3]
 8023fe8:	2b00      	cmp	r3, #0
 8023fea:	d034      	beq.n	8024056 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8023fec:	687b      	ldr	r3, [r7, #4]
 8023fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ff0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8023ff2:	687b      	ldr	r3, [r7, #4]
 8023ff4:	7858      	ldrb	r0, [r3, #1]
 8023ff6:	687b      	ldr	r3, [r7, #4]
 8023ff8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8023ffc:	2301      	movs	r3, #1
 8023ffe:	697a      	ldr	r2, [r7, #20]
 8024000:	f7ff fd10 	bl	8023a24 <disk_write>
 8024004:	4603      	mov	r3, r0
 8024006:	2b00      	cmp	r3, #0
 8024008:	d002      	beq.n	8024010 <sync_window+0x38>
			res = FR_DISK_ERR;
 802400a:	2301      	movs	r3, #1
 802400c:	73fb      	strb	r3, [r7, #15]
 802400e:	e022      	b.n	8024056 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	2200      	movs	r2, #0
 8024014:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8024016:	687b      	ldr	r3, [r7, #4]
 8024018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802401a:	697a      	ldr	r2, [r7, #20]
 802401c:	1ad2      	subs	r2, r2, r3
 802401e:	687b      	ldr	r3, [r7, #4]
 8024020:	69db      	ldr	r3, [r3, #28]
 8024022:	429a      	cmp	r2, r3
 8024024:	d217      	bcs.n	8024056 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	789b      	ldrb	r3, [r3, #2]
 802402a:	613b      	str	r3, [r7, #16]
 802402c:	e010      	b.n	8024050 <sync_window+0x78>
					wsect += fs->fsize;
 802402e:	687b      	ldr	r3, [r7, #4]
 8024030:	69db      	ldr	r3, [r3, #28]
 8024032:	697a      	ldr	r2, [r7, #20]
 8024034:	4413      	add	r3, r2
 8024036:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8024038:	687b      	ldr	r3, [r7, #4]
 802403a:	7858      	ldrb	r0, [r3, #1]
 802403c:	687b      	ldr	r3, [r7, #4]
 802403e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8024042:	2301      	movs	r3, #1
 8024044:	697a      	ldr	r2, [r7, #20]
 8024046:	f7ff fced 	bl	8023a24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802404a:	693b      	ldr	r3, [r7, #16]
 802404c:	3b01      	subs	r3, #1
 802404e:	613b      	str	r3, [r7, #16]
 8024050:	693b      	ldr	r3, [r7, #16]
 8024052:	2b01      	cmp	r3, #1
 8024054:	d8eb      	bhi.n	802402e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8024056:	7bfb      	ldrb	r3, [r7, #15]
}
 8024058:	4618      	mov	r0, r3
 802405a:	3718      	adds	r7, #24
 802405c:	46bd      	mov	sp, r7
 802405e:	bd80      	pop	{r7, pc}

08024060 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8024060:	b580      	push	{r7, lr}
 8024062:	b084      	sub	sp, #16
 8024064:	af00      	add	r7, sp, #0
 8024066:	6078      	str	r0, [r7, #4]
 8024068:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 802406a:	2300      	movs	r3, #0
 802406c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 802406e:	687b      	ldr	r3, [r7, #4]
 8024070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024072:	683a      	ldr	r2, [r7, #0]
 8024074:	429a      	cmp	r2, r3
 8024076:	d01b      	beq.n	80240b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8024078:	6878      	ldr	r0, [r7, #4]
 802407a:	f7ff ffad 	bl	8023fd8 <sync_window>
 802407e:	4603      	mov	r3, r0
 8024080:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8024082:	7bfb      	ldrb	r3, [r7, #15]
 8024084:	2b00      	cmp	r3, #0
 8024086:	d113      	bne.n	80240b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8024088:	687b      	ldr	r3, [r7, #4]
 802408a:	7858      	ldrb	r0, [r3, #1]
 802408c:	687b      	ldr	r3, [r7, #4]
 802408e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8024092:	2301      	movs	r3, #1
 8024094:	683a      	ldr	r2, [r7, #0]
 8024096:	f7ff fca5 	bl	80239e4 <disk_read>
 802409a:	4603      	mov	r3, r0
 802409c:	2b00      	cmp	r3, #0
 802409e:	d004      	beq.n	80240aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80240a0:	f04f 33ff 	mov.w	r3, #4294967295
 80240a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80240a6:	2301      	movs	r3, #1
 80240a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80240aa:	687b      	ldr	r3, [r7, #4]
 80240ac:	683a      	ldr	r2, [r7, #0]
 80240ae:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80240b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80240b2:	4618      	mov	r0, r3
 80240b4:	3710      	adds	r7, #16
 80240b6:	46bd      	mov	sp, r7
 80240b8:	bd80      	pop	{r7, pc}
	...

080240bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80240bc:	b580      	push	{r7, lr}
 80240be:	b084      	sub	sp, #16
 80240c0:	af00      	add	r7, sp, #0
 80240c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80240c4:	6878      	ldr	r0, [r7, #4]
 80240c6:	f7ff ff87 	bl	8023fd8 <sync_window>
 80240ca:	4603      	mov	r3, r0
 80240cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80240ce:	7bfb      	ldrb	r3, [r7, #15]
 80240d0:	2b00      	cmp	r3, #0
 80240d2:	d158      	bne.n	8024186 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	781b      	ldrb	r3, [r3, #0]
 80240d8:	2b03      	cmp	r3, #3
 80240da:	d148      	bne.n	802416e <sync_fs+0xb2>
 80240dc:	687b      	ldr	r3, [r7, #4]
 80240de:	791b      	ldrb	r3, [r3, #4]
 80240e0:	2b01      	cmp	r3, #1
 80240e2:	d144      	bne.n	802416e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	3334      	adds	r3, #52	; 0x34
 80240e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80240ec:	2100      	movs	r1, #0
 80240ee:	4618      	mov	r0, r3
 80240f0:	f7ff fd79 	bl	8023be6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	3334      	adds	r3, #52	; 0x34
 80240f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80240fc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8024100:	4618      	mov	r0, r3
 8024102:	f7ff fd08 	bl	8023b16 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8024106:	687b      	ldr	r3, [r7, #4]
 8024108:	3334      	adds	r3, #52	; 0x34
 802410a:	4921      	ldr	r1, [pc, #132]	; (8024190 <sync_fs+0xd4>)
 802410c:	4618      	mov	r0, r3
 802410e:	f7ff fd1d 	bl	8023b4c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	3334      	adds	r3, #52	; 0x34
 8024116:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 802411a:	491e      	ldr	r1, [pc, #120]	; (8024194 <sync_fs+0xd8>)
 802411c:	4618      	mov	r0, r3
 802411e:	f7ff fd15 	bl	8023b4c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	3334      	adds	r3, #52	; 0x34
 8024126:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 802412a:	687b      	ldr	r3, [r7, #4]
 802412c:	695b      	ldr	r3, [r3, #20]
 802412e:	4619      	mov	r1, r3
 8024130:	4610      	mov	r0, r2
 8024132:	f7ff fd0b 	bl	8023b4c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8024136:	687b      	ldr	r3, [r7, #4]
 8024138:	3334      	adds	r3, #52	; 0x34
 802413a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 802413e:	687b      	ldr	r3, [r7, #4]
 8024140:	691b      	ldr	r3, [r3, #16]
 8024142:	4619      	mov	r1, r3
 8024144:	4610      	mov	r0, r2
 8024146:	f7ff fd01 	bl	8023b4c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	6a1b      	ldr	r3, [r3, #32]
 802414e:	1c5a      	adds	r2, r3, #1
 8024150:	687b      	ldr	r3, [r7, #4]
 8024152:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	7858      	ldrb	r0, [r3, #1]
 8024158:	687b      	ldr	r3, [r7, #4]
 802415a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 802415e:	687b      	ldr	r3, [r7, #4]
 8024160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8024162:	2301      	movs	r3, #1
 8024164:	f7ff fc5e 	bl	8023a24 <disk_write>
			fs->fsi_flag = 0;
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	2200      	movs	r2, #0
 802416c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	785b      	ldrb	r3, [r3, #1]
 8024172:	2200      	movs	r2, #0
 8024174:	2100      	movs	r1, #0
 8024176:	4618      	mov	r0, r3
 8024178:	f7ff fc74 	bl	8023a64 <disk_ioctl>
 802417c:	4603      	mov	r3, r0
 802417e:	2b00      	cmp	r3, #0
 8024180:	d001      	beq.n	8024186 <sync_fs+0xca>
 8024182:	2301      	movs	r3, #1
 8024184:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8024186:	7bfb      	ldrb	r3, [r7, #15]
}
 8024188:	4618      	mov	r0, r3
 802418a:	3710      	adds	r7, #16
 802418c:	46bd      	mov	sp, r7
 802418e:	bd80      	pop	{r7, pc}
 8024190:	41615252 	.word	0x41615252
 8024194:	61417272 	.word	0x61417272

08024198 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8024198:	b480      	push	{r7}
 802419a:	b083      	sub	sp, #12
 802419c:	af00      	add	r7, sp, #0
 802419e:	6078      	str	r0, [r7, #4]
 80241a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80241a2:	683b      	ldr	r3, [r7, #0]
 80241a4:	3b02      	subs	r3, #2
 80241a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80241a8:	687b      	ldr	r3, [r7, #4]
 80241aa:	699b      	ldr	r3, [r3, #24]
 80241ac:	3b02      	subs	r3, #2
 80241ae:	683a      	ldr	r2, [r7, #0]
 80241b0:	429a      	cmp	r2, r3
 80241b2:	d301      	bcc.n	80241b8 <clust2sect+0x20>
 80241b4:	2300      	movs	r3, #0
 80241b6:	e008      	b.n	80241ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	895b      	ldrh	r3, [r3, #10]
 80241bc:	461a      	mov	r2, r3
 80241be:	683b      	ldr	r3, [r7, #0]
 80241c0:	fb03 f202 	mul.w	r2, r3, r2
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80241c8:	4413      	add	r3, r2
}
 80241ca:	4618      	mov	r0, r3
 80241cc:	370c      	adds	r7, #12
 80241ce:	46bd      	mov	sp, r7
 80241d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241d4:	4770      	bx	lr

080241d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80241d6:	b580      	push	{r7, lr}
 80241d8:	b086      	sub	sp, #24
 80241da:	af00      	add	r7, sp, #0
 80241dc:	6078      	str	r0, [r7, #4]
 80241de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	681b      	ldr	r3, [r3, #0]
 80241e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80241e6:	683b      	ldr	r3, [r7, #0]
 80241e8:	2b01      	cmp	r3, #1
 80241ea:	d904      	bls.n	80241f6 <get_fat+0x20>
 80241ec:	693b      	ldr	r3, [r7, #16]
 80241ee:	699b      	ldr	r3, [r3, #24]
 80241f0:	683a      	ldr	r2, [r7, #0]
 80241f2:	429a      	cmp	r2, r3
 80241f4:	d302      	bcc.n	80241fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80241f6:	2301      	movs	r3, #1
 80241f8:	617b      	str	r3, [r7, #20]
 80241fa:	e08c      	b.n	8024316 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80241fc:	f04f 33ff 	mov.w	r3, #4294967295
 8024200:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8024202:	693b      	ldr	r3, [r7, #16]
 8024204:	781b      	ldrb	r3, [r3, #0]
 8024206:	2b02      	cmp	r3, #2
 8024208:	d045      	beq.n	8024296 <get_fat+0xc0>
 802420a:	2b03      	cmp	r3, #3
 802420c:	d05d      	beq.n	80242ca <get_fat+0xf4>
 802420e:	2b01      	cmp	r3, #1
 8024210:	d177      	bne.n	8024302 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8024212:	683b      	ldr	r3, [r7, #0]
 8024214:	60fb      	str	r3, [r7, #12]
 8024216:	68fb      	ldr	r3, [r7, #12]
 8024218:	085b      	lsrs	r3, r3, #1
 802421a:	68fa      	ldr	r2, [r7, #12]
 802421c:	4413      	add	r3, r2
 802421e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024220:	693b      	ldr	r3, [r7, #16]
 8024222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024224:	68fb      	ldr	r3, [r7, #12]
 8024226:	0a5b      	lsrs	r3, r3, #9
 8024228:	4413      	add	r3, r2
 802422a:	4619      	mov	r1, r3
 802422c:	6938      	ldr	r0, [r7, #16]
 802422e:	f7ff ff17 	bl	8024060 <move_window>
 8024232:	4603      	mov	r3, r0
 8024234:	2b00      	cmp	r3, #0
 8024236:	d167      	bne.n	8024308 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8024238:	68fb      	ldr	r3, [r7, #12]
 802423a:	1c5a      	adds	r2, r3, #1
 802423c:	60fa      	str	r2, [r7, #12]
 802423e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024242:	693a      	ldr	r2, [r7, #16]
 8024244:	4413      	add	r3, r2
 8024246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802424a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802424c:	693b      	ldr	r3, [r7, #16]
 802424e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024250:	68fb      	ldr	r3, [r7, #12]
 8024252:	0a5b      	lsrs	r3, r3, #9
 8024254:	4413      	add	r3, r2
 8024256:	4619      	mov	r1, r3
 8024258:	6938      	ldr	r0, [r7, #16]
 802425a:	f7ff ff01 	bl	8024060 <move_window>
 802425e:	4603      	mov	r3, r0
 8024260:	2b00      	cmp	r3, #0
 8024262:	d153      	bne.n	802430c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8024264:	68fb      	ldr	r3, [r7, #12]
 8024266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802426a:	693a      	ldr	r2, [r7, #16]
 802426c:	4413      	add	r3, r2
 802426e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8024272:	021b      	lsls	r3, r3, #8
 8024274:	461a      	mov	r2, r3
 8024276:	68bb      	ldr	r3, [r7, #8]
 8024278:	4313      	orrs	r3, r2
 802427a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 802427c:	683b      	ldr	r3, [r7, #0]
 802427e:	f003 0301 	and.w	r3, r3, #1
 8024282:	2b00      	cmp	r3, #0
 8024284:	d002      	beq.n	802428c <get_fat+0xb6>
 8024286:	68bb      	ldr	r3, [r7, #8]
 8024288:	091b      	lsrs	r3, r3, #4
 802428a:	e002      	b.n	8024292 <get_fat+0xbc>
 802428c:	68bb      	ldr	r3, [r7, #8]
 802428e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024292:	617b      	str	r3, [r7, #20]
			break;
 8024294:	e03f      	b.n	8024316 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8024296:	693b      	ldr	r3, [r7, #16]
 8024298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802429a:	683b      	ldr	r3, [r7, #0]
 802429c:	0a1b      	lsrs	r3, r3, #8
 802429e:	4413      	add	r3, r2
 80242a0:	4619      	mov	r1, r3
 80242a2:	6938      	ldr	r0, [r7, #16]
 80242a4:	f7ff fedc 	bl	8024060 <move_window>
 80242a8:	4603      	mov	r3, r0
 80242aa:	2b00      	cmp	r3, #0
 80242ac:	d130      	bne.n	8024310 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80242ae:	693b      	ldr	r3, [r7, #16]
 80242b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80242b4:	683b      	ldr	r3, [r7, #0]
 80242b6:	005b      	lsls	r3, r3, #1
 80242b8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80242bc:	4413      	add	r3, r2
 80242be:	4618      	mov	r0, r3
 80242c0:	f7ff fbee 	bl	8023aa0 <ld_word>
 80242c4:	4603      	mov	r3, r0
 80242c6:	617b      	str	r3, [r7, #20]
			break;
 80242c8:	e025      	b.n	8024316 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80242ca:	693b      	ldr	r3, [r7, #16]
 80242cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80242ce:	683b      	ldr	r3, [r7, #0]
 80242d0:	09db      	lsrs	r3, r3, #7
 80242d2:	4413      	add	r3, r2
 80242d4:	4619      	mov	r1, r3
 80242d6:	6938      	ldr	r0, [r7, #16]
 80242d8:	f7ff fec2 	bl	8024060 <move_window>
 80242dc:	4603      	mov	r3, r0
 80242de:	2b00      	cmp	r3, #0
 80242e0:	d118      	bne.n	8024314 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80242e2:	693b      	ldr	r3, [r7, #16]
 80242e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80242e8:	683b      	ldr	r3, [r7, #0]
 80242ea:	009b      	lsls	r3, r3, #2
 80242ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80242f0:	4413      	add	r3, r2
 80242f2:	4618      	mov	r0, r3
 80242f4:	f7ff fbec 	bl	8023ad0 <ld_dword>
 80242f8:	4603      	mov	r3, r0
 80242fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80242fe:	617b      	str	r3, [r7, #20]
			break;
 8024300:	e009      	b.n	8024316 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8024302:	2301      	movs	r3, #1
 8024304:	617b      	str	r3, [r7, #20]
 8024306:	e006      	b.n	8024316 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024308:	bf00      	nop
 802430a:	e004      	b.n	8024316 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802430c:	bf00      	nop
 802430e:	e002      	b.n	8024316 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8024310:	bf00      	nop
 8024312:	e000      	b.n	8024316 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8024314:	bf00      	nop
		}
	}

	return val;
 8024316:	697b      	ldr	r3, [r7, #20]
}
 8024318:	4618      	mov	r0, r3
 802431a:	3718      	adds	r7, #24
 802431c:	46bd      	mov	sp, r7
 802431e:	bd80      	pop	{r7, pc}

08024320 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8024320:	b590      	push	{r4, r7, lr}
 8024322:	b089      	sub	sp, #36	; 0x24
 8024324:	af00      	add	r7, sp, #0
 8024326:	60f8      	str	r0, [r7, #12]
 8024328:	60b9      	str	r1, [r7, #8]
 802432a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 802432c:	2302      	movs	r3, #2
 802432e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8024330:	68bb      	ldr	r3, [r7, #8]
 8024332:	2b01      	cmp	r3, #1
 8024334:	f240 80d6 	bls.w	80244e4 <put_fat+0x1c4>
 8024338:	68fb      	ldr	r3, [r7, #12]
 802433a:	699b      	ldr	r3, [r3, #24]
 802433c:	68ba      	ldr	r2, [r7, #8]
 802433e:	429a      	cmp	r2, r3
 8024340:	f080 80d0 	bcs.w	80244e4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8024344:	68fb      	ldr	r3, [r7, #12]
 8024346:	781b      	ldrb	r3, [r3, #0]
 8024348:	2b02      	cmp	r3, #2
 802434a:	d073      	beq.n	8024434 <put_fat+0x114>
 802434c:	2b03      	cmp	r3, #3
 802434e:	f000 8091 	beq.w	8024474 <put_fat+0x154>
 8024352:	2b01      	cmp	r3, #1
 8024354:	f040 80c6 	bne.w	80244e4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8024358:	68bb      	ldr	r3, [r7, #8]
 802435a:	61bb      	str	r3, [r7, #24]
 802435c:	69bb      	ldr	r3, [r7, #24]
 802435e:	085b      	lsrs	r3, r3, #1
 8024360:	69ba      	ldr	r2, [r7, #24]
 8024362:	4413      	add	r3, r2
 8024364:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8024366:	68fb      	ldr	r3, [r7, #12]
 8024368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802436a:	69bb      	ldr	r3, [r7, #24]
 802436c:	0a5b      	lsrs	r3, r3, #9
 802436e:	4413      	add	r3, r2
 8024370:	4619      	mov	r1, r3
 8024372:	68f8      	ldr	r0, [r7, #12]
 8024374:	f7ff fe74 	bl	8024060 <move_window>
 8024378:	4603      	mov	r3, r0
 802437a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802437c:	7ffb      	ldrb	r3, [r7, #31]
 802437e:	2b00      	cmp	r3, #0
 8024380:	f040 80a9 	bne.w	80244d6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8024384:	68fb      	ldr	r3, [r7, #12]
 8024386:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802438a:	69bb      	ldr	r3, [r7, #24]
 802438c:	1c59      	adds	r1, r3, #1
 802438e:	61b9      	str	r1, [r7, #24]
 8024390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024394:	4413      	add	r3, r2
 8024396:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8024398:	68bb      	ldr	r3, [r7, #8]
 802439a:	f003 0301 	and.w	r3, r3, #1
 802439e:	2b00      	cmp	r3, #0
 80243a0:	d00d      	beq.n	80243be <put_fat+0x9e>
 80243a2:	697b      	ldr	r3, [r7, #20]
 80243a4:	781b      	ldrb	r3, [r3, #0]
 80243a6:	b25b      	sxtb	r3, r3
 80243a8:	f003 030f 	and.w	r3, r3, #15
 80243ac:	b25a      	sxtb	r2, r3
 80243ae:	687b      	ldr	r3, [r7, #4]
 80243b0:	b2db      	uxtb	r3, r3
 80243b2:	011b      	lsls	r3, r3, #4
 80243b4:	b25b      	sxtb	r3, r3
 80243b6:	4313      	orrs	r3, r2
 80243b8:	b25b      	sxtb	r3, r3
 80243ba:	b2db      	uxtb	r3, r3
 80243bc:	e001      	b.n	80243c2 <put_fat+0xa2>
 80243be:	687b      	ldr	r3, [r7, #4]
 80243c0:	b2db      	uxtb	r3, r3
 80243c2:	697a      	ldr	r2, [r7, #20]
 80243c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80243c6:	68fb      	ldr	r3, [r7, #12]
 80243c8:	2201      	movs	r2, #1
 80243ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80243cc:	68fb      	ldr	r3, [r7, #12]
 80243ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80243d0:	69bb      	ldr	r3, [r7, #24]
 80243d2:	0a5b      	lsrs	r3, r3, #9
 80243d4:	4413      	add	r3, r2
 80243d6:	4619      	mov	r1, r3
 80243d8:	68f8      	ldr	r0, [r7, #12]
 80243da:	f7ff fe41 	bl	8024060 <move_window>
 80243de:	4603      	mov	r3, r0
 80243e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80243e2:	7ffb      	ldrb	r3, [r7, #31]
 80243e4:	2b00      	cmp	r3, #0
 80243e6:	d178      	bne.n	80244da <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80243e8:	68fb      	ldr	r3, [r7, #12]
 80243ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80243ee:	69bb      	ldr	r3, [r7, #24]
 80243f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80243f4:	4413      	add	r3, r2
 80243f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80243f8:	68bb      	ldr	r3, [r7, #8]
 80243fa:	f003 0301 	and.w	r3, r3, #1
 80243fe:	2b00      	cmp	r3, #0
 8024400:	d003      	beq.n	802440a <put_fat+0xea>
 8024402:	687b      	ldr	r3, [r7, #4]
 8024404:	091b      	lsrs	r3, r3, #4
 8024406:	b2db      	uxtb	r3, r3
 8024408:	e00e      	b.n	8024428 <put_fat+0x108>
 802440a:	697b      	ldr	r3, [r7, #20]
 802440c:	781b      	ldrb	r3, [r3, #0]
 802440e:	b25b      	sxtb	r3, r3
 8024410:	f023 030f 	bic.w	r3, r3, #15
 8024414:	b25a      	sxtb	r2, r3
 8024416:	687b      	ldr	r3, [r7, #4]
 8024418:	0a1b      	lsrs	r3, r3, #8
 802441a:	b25b      	sxtb	r3, r3
 802441c:	f003 030f 	and.w	r3, r3, #15
 8024420:	b25b      	sxtb	r3, r3
 8024422:	4313      	orrs	r3, r2
 8024424:	b25b      	sxtb	r3, r3
 8024426:	b2db      	uxtb	r3, r3
 8024428:	697a      	ldr	r2, [r7, #20]
 802442a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 802442c:	68fb      	ldr	r3, [r7, #12]
 802442e:	2201      	movs	r2, #1
 8024430:	70da      	strb	r2, [r3, #3]
			break;
 8024432:	e057      	b.n	80244e4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8024434:	68fb      	ldr	r3, [r7, #12]
 8024436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024438:	68bb      	ldr	r3, [r7, #8]
 802443a:	0a1b      	lsrs	r3, r3, #8
 802443c:	4413      	add	r3, r2
 802443e:	4619      	mov	r1, r3
 8024440:	68f8      	ldr	r0, [r7, #12]
 8024442:	f7ff fe0d 	bl	8024060 <move_window>
 8024446:	4603      	mov	r3, r0
 8024448:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802444a:	7ffb      	ldrb	r3, [r7, #31]
 802444c:	2b00      	cmp	r3, #0
 802444e:	d146      	bne.n	80244de <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8024450:	68fb      	ldr	r3, [r7, #12]
 8024452:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024456:	68bb      	ldr	r3, [r7, #8]
 8024458:	005b      	lsls	r3, r3, #1
 802445a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 802445e:	4413      	add	r3, r2
 8024460:	687a      	ldr	r2, [r7, #4]
 8024462:	b292      	uxth	r2, r2
 8024464:	4611      	mov	r1, r2
 8024466:	4618      	mov	r0, r3
 8024468:	f7ff fb55 	bl	8023b16 <st_word>
			fs->wflag = 1;
 802446c:	68fb      	ldr	r3, [r7, #12]
 802446e:	2201      	movs	r2, #1
 8024470:	70da      	strb	r2, [r3, #3]
			break;
 8024472:	e037      	b.n	80244e4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8024474:	68fb      	ldr	r3, [r7, #12]
 8024476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024478:	68bb      	ldr	r3, [r7, #8]
 802447a:	09db      	lsrs	r3, r3, #7
 802447c:	4413      	add	r3, r2
 802447e:	4619      	mov	r1, r3
 8024480:	68f8      	ldr	r0, [r7, #12]
 8024482:	f7ff fded 	bl	8024060 <move_window>
 8024486:	4603      	mov	r3, r0
 8024488:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802448a:	7ffb      	ldrb	r3, [r7, #31]
 802448c:	2b00      	cmp	r3, #0
 802448e:	d128      	bne.n	80244e2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8024490:	687b      	ldr	r3, [r7, #4]
 8024492:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8024496:	68fb      	ldr	r3, [r7, #12]
 8024498:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802449c:	68bb      	ldr	r3, [r7, #8]
 802449e:	009b      	lsls	r3, r3, #2
 80244a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80244a4:	4413      	add	r3, r2
 80244a6:	4618      	mov	r0, r3
 80244a8:	f7ff fb12 	bl	8023ad0 <ld_dword>
 80244ac:	4603      	mov	r3, r0
 80244ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80244b2:	4323      	orrs	r3, r4
 80244b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80244b6:	68fb      	ldr	r3, [r7, #12]
 80244b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80244bc:	68bb      	ldr	r3, [r7, #8]
 80244be:	009b      	lsls	r3, r3, #2
 80244c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80244c4:	4413      	add	r3, r2
 80244c6:	6879      	ldr	r1, [r7, #4]
 80244c8:	4618      	mov	r0, r3
 80244ca:	f7ff fb3f 	bl	8023b4c <st_dword>
			fs->wflag = 1;
 80244ce:	68fb      	ldr	r3, [r7, #12]
 80244d0:	2201      	movs	r2, #1
 80244d2:	70da      	strb	r2, [r3, #3]
			break;
 80244d4:	e006      	b.n	80244e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80244d6:	bf00      	nop
 80244d8:	e004      	b.n	80244e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80244da:	bf00      	nop
 80244dc:	e002      	b.n	80244e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80244de:	bf00      	nop
 80244e0:	e000      	b.n	80244e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80244e2:	bf00      	nop
		}
	}
	return res;
 80244e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80244e6:	4618      	mov	r0, r3
 80244e8:	3724      	adds	r7, #36	; 0x24
 80244ea:	46bd      	mov	sp, r7
 80244ec:	bd90      	pop	{r4, r7, pc}

080244ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80244ee:	b580      	push	{r7, lr}
 80244f0:	b088      	sub	sp, #32
 80244f2:	af00      	add	r7, sp, #0
 80244f4:	60f8      	str	r0, [r7, #12]
 80244f6:	60b9      	str	r1, [r7, #8]
 80244f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80244fa:	2300      	movs	r3, #0
 80244fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80244fe:	68fb      	ldr	r3, [r7, #12]
 8024500:	681b      	ldr	r3, [r3, #0]
 8024502:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8024504:	68bb      	ldr	r3, [r7, #8]
 8024506:	2b01      	cmp	r3, #1
 8024508:	d904      	bls.n	8024514 <remove_chain+0x26>
 802450a:	69bb      	ldr	r3, [r7, #24]
 802450c:	699b      	ldr	r3, [r3, #24]
 802450e:	68ba      	ldr	r2, [r7, #8]
 8024510:	429a      	cmp	r2, r3
 8024512:	d301      	bcc.n	8024518 <remove_chain+0x2a>
 8024514:	2302      	movs	r3, #2
 8024516:	e04b      	b.n	80245b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8024518:	687b      	ldr	r3, [r7, #4]
 802451a:	2b00      	cmp	r3, #0
 802451c:	d00c      	beq.n	8024538 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 802451e:	f04f 32ff 	mov.w	r2, #4294967295
 8024522:	6879      	ldr	r1, [r7, #4]
 8024524:	69b8      	ldr	r0, [r7, #24]
 8024526:	f7ff fefb 	bl	8024320 <put_fat>
 802452a:	4603      	mov	r3, r0
 802452c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 802452e:	7ffb      	ldrb	r3, [r7, #31]
 8024530:	2b00      	cmp	r3, #0
 8024532:	d001      	beq.n	8024538 <remove_chain+0x4a>
 8024534:	7ffb      	ldrb	r3, [r7, #31]
 8024536:	e03b      	b.n	80245b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8024538:	68b9      	ldr	r1, [r7, #8]
 802453a:	68f8      	ldr	r0, [r7, #12]
 802453c:	f7ff fe4b 	bl	80241d6 <get_fat>
 8024540:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8024542:	697b      	ldr	r3, [r7, #20]
 8024544:	2b00      	cmp	r3, #0
 8024546:	d031      	beq.n	80245ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8024548:	697b      	ldr	r3, [r7, #20]
 802454a:	2b01      	cmp	r3, #1
 802454c:	d101      	bne.n	8024552 <remove_chain+0x64>
 802454e:	2302      	movs	r3, #2
 8024550:	e02e      	b.n	80245b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8024552:	697b      	ldr	r3, [r7, #20]
 8024554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024558:	d101      	bne.n	802455e <remove_chain+0x70>
 802455a:	2301      	movs	r3, #1
 802455c:	e028      	b.n	80245b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 802455e:	2200      	movs	r2, #0
 8024560:	68b9      	ldr	r1, [r7, #8]
 8024562:	69b8      	ldr	r0, [r7, #24]
 8024564:	f7ff fedc 	bl	8024320 <put_fat>
 8024568:	4603      	mov	r3, r0
 802456a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 802456c:	7ffb      	ldrb	r3, [r7, #31]
 802456e:	2b00      	cmp	r3, #0
 8024570:	d001      	beq.n	8024576 <remove_chain+0x88>
 8024572:	7ffb      	ldrb	r3, [r7, #31]
 8024574:	e01c      	b.n	80245b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8024576:	69bb      	ldr	r3, [r7, #24]
 8024578:	695a      	ldr	r2, [r3, #20]
 802457a:	69bb      	ldr	r3, [r7, #24]
 802457c:	699b      	ldr	r3, [r3, #24]
 802457e:	3b02      	subs	r3, #2
 8024580:	429a      	cmp	r2, r3
 8024582:	d20b      	bcs.n	802459c <remove_chain+0xae>
			fs->free_clst++;
 8024584:	69bb      	ldr	r3, [r7, #24]
 8024586:	695b      	ldr	r3, [r3, #20]
 8024588:	1c5a      	adds	r2, r3, #1
 802458a:	69bb      	ldr	r3, [r7, #24]
 802458c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 802458e:	69bb      	ldr	r3, [r7, #24]
 8024590:	791b      	ldrb	r3, [r3, #4]
 8024592:	f043 0301 	orr.w	r3, r3, #1
 8024596:	b2da      	uxtb	r2, r3
 8024598:	69bb      	ldr	r3, [r7, #24]
 802459a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 802459c:	697b      	ldr	r3, [r7, #20]
 802459e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80245a0:	69bb      	ldr	r3, [r7, #24]
 80245a2:	699b      	ldr	r3, [r3, #24]
 80245a4:	68ba      	ldr	r2, [r7, #8]
 80245a6:	429a      	cmp	r2, r3
 80245a8:	d3c6      	bcc.n	8024538 <remove_chain+0x4a>
 80245aa:	e000      	b.n	80245ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80245ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80245ae:	2300      	movs	r3, #0
}
 80245b0:	4618      	mov	r0, r3
 80245b2:	3720      	adds	r7, #32
 80245b4:	46bd      	mov	sp, r7
 80245b6:	bd80      	pop	{r7, pc}

080245b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80245b8:	b580      	push	{r7, lr}
 80245ba:	b088      	sub	sp, #32
 80245bc:	af00      	add	r7, sp, #0
 80245be:	6078      	str	r0, [r7, #4]
 80245c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80245c2:	687b      	ldr	r3, [r7, #4]
 80245c4:	681b      	ldr	r3, [r3, #0]
 80245c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80245c8:	683b      	ldr	r3, [r7, #0]
 80245ca:	2b00      	cmp	r3, #0
 80245cc:	d10d      	bne.n	80245ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80245ce:	693b      	ldr	r3, [r7, #16]
 80245d0:	691b      	ldr	r3, [r3, #16]
 80245d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80245d4:	69bb      	ldr	r3, [r7, #24]
 80245d6:	2b00      	cmp	r3, #0
 80245d8:	d004      	beq.n	80245e4 <create_chain+0x2c>
 80245da:	693b      	ldr	r3, [r7, #16]
 80245dc:	699b      	ldr	r3, [r3, #24]
 80245de:	69ba      	ldr	r2, [r7, #24]
 80245e0:	429a      	cmp	r2, r3
 80245e2:	d31b      	bcc.n	802461c <create_chain+0x64>
 80245e4:	2301      	movs	r3, #1
 80245e6:	61bb      	str	r3, [r7, #24]
 80245e8:	e018      	b.n	802461c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80245ea:	6839      	ldr	r1, [r7, #0]
 80245ec:	6878      	ldr	r0, [r7, #4]
 80245ee:	f7ff fdf2 	bl	80241d6 <get_fat>
 80245f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80245f4:	68fb      	ldr	r3, [r7, #12]
 80245f6:	2b01      	cmp	r3, #1
 80245f8:	d801      	bhi.n	80245fe <create_chain+0x46>
 80245fa:	2301      	movs	r3, #1
 80245fc:	e070      	b.n	80246e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80245fe:	68fb      	ldr	r3, [r7, #12]
 8024600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024604:	d101      	bne.n	802460a <create_chain+0x52>
 8024606:	68fb      	ldr	r3, [r7, #12]
 8024608:	e06a      	b.n	80246e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 802460a:	693b      	ldr	r3, [r7, #16]
 802460c:	699b      	ldr	r3, [r3, #24]
 802460e:	68fa      	ldr	r2, [r7, #12]
 8024610:	429a      	cmp	r2, r3
 8024612:	d201      	bcs.n	8024618 <create_chain+0x60>
 8024614:	68fb      	ldr	r3, [r7, #12]
 8024616:	e063      	b.n	80246e0 <create_chain+0x128>
		scl = clst;
 8024618:	683b      	ldr	r3, [r7, #0]
 802461a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 802461c:	69bb      	ldr	r3, [r7, #24]
 802461e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8024620:	69fb      	ldr	r3, [r7, #28]
 8024622:	3301      	adds	r3, #1
 8024624:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8024626:	693b      	ldr	r3, [r7, #16]
 8024628:	699b      	ldr	r3, [r3, #24]
 802462a:	69fa      	ldr	r2, [r7, #28]
 802462c:	429a      	cmp	r2, r3
 802462e:	d307      	bcc.n	8024640 <create_chain+0x88>
				ncl = 2;
 8024630:	2302      	movs	r3, #2
 8024632:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8024634:	69fa      	ldr	r2, [r7, #28]
 8024636:	69bb      	ldr	r3, [r7, #24]
 8024638:	429a      	cmp	r2, r3
 802463a:	d901      	bls.n	8024640 <create_chain+0x88>
 802463c:	2300      	movs	r3, #0
 802463e:	e04f      	b.n	80246e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8024640:	69f9      	ldr	r1, [r7, #28]
 8024642:	6878      	ldr	r0, [r7, #4]
 8024644:	f7ff fdc7 	bl	80241d6 <get_fat>
 8024648:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 802464a:	68fb      	ldr	r3, [r7, #12]
 802464c:	2b00      	cmp	r3, #0
 802464e:	d00e      	beq.n	802466e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8024650:	68fb      	ldr	r3, [r7, #12]
 8024652:	2b01      	cmp	r3, #1
 8024654:	d003      	beq.n	802465e <create_chain+0xa6>
 8024656:	68fb      	ldr	r3, [r7, #12]
 8024658:	f1b3 3fff 	cmp.w	r3, #4294967295
 802465c:	d101      	bne.n	8024662 <create_chain+0xaa>
 802465e:	68fb      	ldr	r3, [r7, #12]
 8024660:	e03e      	b.n	80246e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8024662:	69fa      	ldr	r2, [r7, #28]
 8024664:	69bb      	ldr	r3, [r7, #24]
 8024666:	429a      	cmp	r2, r3
 8024668:	d1da      	bne.n	8024620 <create_chain+0x68>
 802466a:	2300      	movs	r3, #0
 802466c:	e038      	b.n	80246e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 802466e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8024670:	f04f 32ff 	mov.w	r2, #4294967295
 8024674:	69f9      	ldr	r1, [r7, #28]
 8024676:	6938      	ldr	r0, [r7, #16]
 8024678:	f7ff fe52 	bl	8024320 <put_fat>
 802467c:	4603      	mov	r3, r0
 802467e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8024680:	7dfb      	ldrb	r3, [r7, #23]
 8024682:	2b00      	cmp	r3, #0
 8024684:	d109      	bne.n	802469a <create_chain+0xe2>
 8024686:	683b      	ldr	r3, [r7, #0]
 8024688:	2b00      	cmp	r3, #0
 802468a:	d006      	beq.n	802469a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 802468c:	69fa      	ldr	r2, [r7, #28]
 802468e:	6839      	ldr	r1, [r7, #0]
 8024690:	6938      	ldr	r0, [r7, #16]
 8024692:	f7ff fe45 	bl	8024320 <put_fat>
 8024696:	4603      	mov	r3, r0
 8024698:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 802469a:	7dfb      	ldrb	r3, [r7, #23]
 802469c:	2b00      	cmp	r3, #0
 802469e:	d116      	bne.n	80246ce <create_chain+0x116>
		fs->last_clst = ncl;
 80246a0:	693b      	ldr	r3, [r7, #16]
 80246a2:	69fa      	ldr	r2, [r7, #28]
 80246a4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80246a6:	693b      	ldr	r3, [r7, #16]
 80246a8:	695a      	ldr	r2, [r3, #20]
 80246aa:	693b      	ldr	r3, [r7, #16]
 80246ac:	699b      	ldr	r3, [r3, #24]
 80246ae:	3b02      	subs	r3, #2
 80246b0:	429a      	cmp	r2, r3
 80246b2:	d804      	bhi.n	80246be <create_chain+0x106>
 80246b4:	693b      	ldr	r3, [r7, #16]
 80246b6:	695b      	ldr	r3, [r3, #20]
 80246b8:	1e5a      	subs	r2, r3, #1
 80246ba:	693b      	ldr	r3, [r7, #16]
 80246bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80246be:	693b      	ldr	r3, [r7, #16]
 80246c0:	791b      	ldrb	r3, [r3, #4]
 80246c2:	f043 0301 	orr.w	r3, r3, #1
 80246c6:	b2da      	uxtb	r2, r3
 80246c8:	693b      	ldr	r3, [r7, #16]
 80246ca:	711a      	strb	r2, [r3, #4]
 80246cc:	e007      	b.n	80246de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80246ce:	7dfb      	ldrb	r3, [r7, #23]
 80246d0:	2b01      	cmp	r3, #1
 80246d2:	d102      	bne.n	80246da <create_chain+0x122>
 80246d4:	f04f 33ff 	mov.w	r3, #4294967295
 80246d8:	e000      	b.n	80246dc <create_chain+0x124>
 80246da:	2301      	movs	r3, #1
 80246dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80246de:	69fb      	ldr	r3, [r7, #28]
}
 80246e0:	4618      	mov	r0, r3
 80246e2:	3720      	adds	r7, #32
 80246e4:	46bd      	mov	sp, r7
 80246e6:	bd80      	pop	{r7, pc}

080246e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80246e8:	b480      	push	{r7}
 80246ea:	b087      	sub	sp, #28
 80246ec:	af00      	add	r7, sp, #0
 80246ee:	6078      	str	r0, [r7, #4]
 80246f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80246f2:	687b      	ldr	r3, [r7, #4]
 80246f4:	681b      	ldr	r3, [r3, #0]
 80246f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80246f8:	687b      	ldr	r3, [r7, #4]
 80246fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80246fc:	3304      	adds	r3, #4
 80246fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8024700:	683b      	ldr	r3, [r7, #0]
 8024702:	0a5b      	lsrs	r3, r3, #9
 8024704:	68fa      	ldr	r2, [r7, #12]
 8024706:	8952      	ldrh	r2, [r2, #10]
 8024708:	fbb3 f3f2 	udiv	r3, r3, r2
 802470c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 802470e:	693b      	ldr	r3, [r7, #16]
 8024710:	1d1a      	adds	r2, r3, #4
 8024712:	613a      	str	r2, [r7, #16]
 8024714:	681b      	ldr	r3, [r3, #0]
 8024716:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8024718:	68bb      	ldr	r3, [r7, #8]
 802471a:	2b00      	cmp	r3, #0
 802471c:	d101      	bne.n	8024722 <clmt_clust+0x3a>
 802471e:	2300      	movs	r3, #0
 8024720:	e010      	b.n	8024744 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8024722:	697a      	ldr	r2, [r7, #20]
 8024724:	68bb      	ldr	r3, [r7, #8]
 8024726:	429a      	cmp	r2, r3
 8024728:	d307      	bcc.n	802473a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 802472a:	697a      	ldr	r2, [r7, #20]
 802472c:	68bb      	ldr	r3, [r7, #8]
 802472e:	1ad3      	subs	r3, r2, r3
 8024730:	617b      	str	r3, [r7, #20]
 8024732:	693b      	ldr	r3, [r7, #16]
 8024734:	3304      	adds	r3, #4
 8024736:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8024738:	e7e9      	b.n	802470e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 802473a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 802473c:	693b      	ldr	r3, [r7, #16]
 802473e:	681a      	ldr	r2, [r3, #0]
 8024740:	697b      	ldr	r3, [r7, #20]
 8024742:	4413      	add	r3, r2
}
 8024744:	4618      	mov	r0, r3
 8024746:	371c      	adds	r7, #28
 8024748:	46bd      	mov	sp, r7
 802474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802474e:	4770      	bx	lr

08024750 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8024750:	b580      	push	{r7, lr}
 8024752:	b086      	sub	sp, #24
 8024754:	af00      	add	r7, sp, #0
 8024756:	6078      	str	r0, [r7, #4]
 8024758:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 802475a:	687b      	ldr	r3, [r7, #4]
 802475c:	681b      	ldr	r3, [r3, #0]
 802475e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8024760:	683b      	ldr	r3, [r7, #0]
 8024762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8024766:	d204      	bcs.n	8024772 <dir_sdi+0x22>
 8024768:	683b      	ldr	r3, [r7, #0]
 802476a:	f003 031f 	and.w	r3, r3, #31
 802476e:	2b00      	cmp	r3, #0
 8024770:	d001      	beq.n	8024776 <dir_sdi+0x26>
		return FR_INT_ERR;
 8024772:	2302      	movs	r3, #2
 8024774:	e063      	b.n	802483e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8024776:	687b      	ldr	r3, [r7, #4]
 8024778:	683a      	ldr	r2, [r7, #0]
 802477a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 802477c:	687b      	ldr	r3, [r7, #4]
 802477e:	689b      	ldr	r3, [r3, #8]
 8024780:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8024782:	697b      	ldr	r3, [r7, #20]
 8024784:	2b00      	cmp	r3, #0
 8024786:	d106      	bne.n	8024796 <dir_sdi+0x46>
 8024788:	693b      	ldr	r3, [r7, #16]
 802478a:	781b      	ldrb	r3, [r3, #0]
 802478c:	2b02      	cmp	r3, #2
 802478e:	d902      	bls.n	8024796 <dir_sdi+0x46>
		clst = fs->dirbase;
 8024790:	693b      	ldr	r3, [r7, #16]
 8024792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024794:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8024796:	697b      	ldr	r3, [r7, #20]
 8024798:	2b00      	cmp	r3, #0
 802479a:	d10c      	bne.n	80247b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 802479c:	683b      	ldr	r3, [r7, #0]
 802479e:	095b      	lsrs	r3, r3, #5
 80247a0:	693a      	ldr	r2, [r7, #16]
 80247a2:	8912      	ldrh	r2, [r2, #8]
 80247a4:	4293      	cmp	r3, r2
 80247a6:	d301      	bcc.n	80247ac <dir_sdi+0x5c>
 80247a8:	2302      	movs	r3, #2
 80247aa:	e048      	b.n	802483e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80247ac:	693b      	ldr	r3, [r7, #16]
 80247ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	61da      	str	r2, [r3, #28]
 80247b4:	e029      	b.n	802480a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80247b6:	693b      	ldr	r3, [r7, #16]
 80247b8:	895b      	ldrh	r3, [r3, #10]
 80247ba:	025b      	lsls	r3, r3, #9
 80247bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80247be:	e019      	b.n	80247f4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80247c0:	687b      	ldr	r3, [r7, #4]
 80247c2:	6979      	ldr	r1, [r7, #20]
 80247c4:	4618      	mov	r0, r3
 80247c6:	f7ff fd06 	bl	80241d6 <get_fat>
 80247ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80247cc:	697b      	ldr	r3, [r7, #20]
 80247ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80247d2:	d101      	bne.n	80247d8 <dir_sdi+0x88>
 80247d4:	2301      	movs	r3, #1
 80247d6:	e032      	b.n	802483e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80247d8:	697b      	ldr	r3, [r7, #20]
 80247da:	2b01      	cmp	r3, #1
 80247dc:	d904      	bls.n	80247e8 <dir_sdi+0x98>
 80247de:	693b      	ldr	r3, [r7, #16]
 80247e0:	699b      	ldr	r3, [r3, #24]
 80247e2:	697a      	ldr	r2, [r7, #20]
 80247e4:	429a      	cmp	r2, r3
 80247e6:	d301      	bcc.n	80247ec <dir_sdi+0x9c>
 80247e8:	2302      	movs	r3, #2
 80247ea:	e028      	b.n	802483e <dir_sdi+0xee>
			ofs -= csz;
 80247ec:	683a      	ldr	r2, [r7, #0]
 80247ee:	68fb      	ldr	r3, [r7, #12]
 80247f0:	1ad3      	subs	r3, r2, r3
 80247f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80247f4:	683a      	ldr	r2, [r7, #0]
 80247f6:	68fb      	ldr	r3, [r7, #12]
 80247f8:	429a      	cmp	r2, r3
 80247fa:	d2e1      	bcs.n	80247c0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80247fc:	6979      	ldr	r1, [r7, #20]
 80247fe:	6938      	ldr	r0, [r7, #16]
 8024800:	f7ff fcca 	bl	8024198 <clust2sect>
 8024804:	4602      	mov	r2, r0
 8024806:	687b      	ldr	r3, [r7, #4]
 8024808:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	697a      	ldr	r2, [r7, #20]
 802480e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8024810:	687b      	ldr	r3, [r7, #4]
 8024812:	69db      	ldr	r3, [r3, #28]
 8024814:	2b00      	cmp	r3, #0
 8024816:	d101      	bne.n	802481c <dir_sdi+0xcc>
 8024818:	2302      	movs	r3, #2
 802481a:	e010      	b.n	802483e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 802481c:	687b      	ldr	r3, [r7, #4]
 802481e:	69da      	ldr	r2, [r3, #28]
 8024820:	683b      	ldr	r3, [r7, #0]
 8024822:	0a5b      	lsrs	r3, r3, #9
 8024824:	441a      	add	r2, r3
 8024826:	687b      	ldr	r3, [r7, #4]
 8024828:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 802482a:	693b      	ldr	r3, [r7, #16]
 802482c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024830:	683b      	ldr	r3, [r7, #0]
 8024832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024836:	441a      	add	r2, r3
 8024838:	687b      	ldr	r3, [r7, #4]
 802483a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802483c:	2300      	movs	r3, #0
}
 802483e:	4618      	mov	r0, r3
 8024840:	3718      	adds	r7, #24
 8024842:	46bd      	mov	sp, r7
 8024844:	bd80      	pop	{r7, pc}

08024846 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8024846:	b580      	push	{r7, lr}
 8024848:	b086      	sub	sp, #24
 802484a:	af00      	add	r7, sp, #0
 802484c:	6078      	str	r0, [r7, #4]
 802484e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8024850:	687b      	ldr	r3, [r7, #4]
 8024852:	681b      	ldr	r3, [r3, #0]
 8024854:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8024856:	687b      	ldr	r3, [r7, #4]
 8024858:	695b      	ldr	r3, [r3, #20]
 802485a:	3320      	adds	r3, #32
 802485c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 802485e:	687b      	ldr	r3, [r7, #4]
 8024860:	69db      	ldr	r3, [r3, #28]
 8024862:	2b00      	cmp	r3, #0
 8024864:	d003      	beq.n	802486e <dir_next+0x28>
 8024866:	68bb      	ldr	r3, [r7, #8]
 8024868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802486c:	d301      	bcc.n	8024872 <dir_next+0x2c>
 802486e:	2304      	movs	r3, #4
 8024870:	e0aa      	b.n	80249c8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8024872:	68bb      	ldr	r3, [r7, #8]
 8024874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024878:	2b00      	cmp	r3, #0
 802487a:	f040 8098 	bne.w	80249ae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 802487e:	687b      	ldr	r3, [r7, #4]
 8024880:	69db      	ldr	r3, [r3, #28]
 8024882:	1c5a      	adds	r2, r3, #1
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8024888:	687b      	ldr	r3, [r7, #4]
 802488a:	699b      	ldr	r3, [r3, #24]
 802488c:	2b00      	cmp	r3, #0
 802488e:	d10b      	bne.n	80248a8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8024890:	68bb      	ldr	r3, [r7, #8]
 8024892:	095b      	lsrs	r3, r3, #5
 8024894:	68fa      	ldr	r2, [r7, #12]
 8024896:	8912      	ldrh	r2, [r2, #8]
 8024898:	4293      	cmp	r3, r2
 802489a:	f0c0 8088 	bcc.w	80249ae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 802489e:	687b      	ldr	r3, [r7, #4]
 80248a0:	2200      	movs	r2, #0
 80248a2:	61da      	str	r2, [r3, #28]
 80248a4:	2304      	movs	r3, #4
 80248a6:	e08f      	b.n	80249c8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80248a8:	68bb      	ldr	r3, [r7, #8]
 80248aa:	0a5b      	lsrs	r3, r3, #9
 80248ac:	68fa      	ldr	r2, [r7, #12]
 80248ae:	8952      	ldrh	r2, [r2, #10]
 80248b0:	3a01      	subs	r2, #1
 80248b2:	4013      	ands	r3, r2
 80248b4:	2b00      	cmp	r3, #0
 80248b6:	d17a      	bne.n	80249ae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80248b8:	687a      	ldr	r2, [r7, #4]
 80248ba:	687b      	ldr	r3, [r7, #4]
 80248bc:	699b      	ldr	r3, [r3, #24]
 80248be:	4619      	mov	r1, r3
 80248c0:	4610      	mov	r0, r2
 80248c2:	f7ff fc88 	bl	80241d6 <get_fat>
 80248c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80248c8:	697b      	ldr	r3, [r7, #20]
 80248ca:	2b01      	cmp	r3, #1
 80248cc:	d801      	bhi.n	80248d2 <dir_next+0x8c>
 80248ce:	2302      	movs	r3, #2
 80248d0:	e07a      	b.n	80249c8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80248d2:	697b      	ldr	r3, [r7, #20]
 80248d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80248d8:	d101      	bne.n	80248de <dir_next+0x98>
 80248da:	2301      	movs	r3, #1
 80248dc:	e074      	b.n	80249c8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80248de:	68fb      	ldr	r3, [r7, #12]
 80248e0:	699b      	ldr	r3, [r3, #24]
 80248e2:	697a      	ldr	r2, [r7, #20]
 80248e4:	429a      	cmp	r2, r3
 80248e6:	d358      	bcc.n	802499a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80248e8:	683b      	ldr	r3, [r7, #0]
 80248ea:	2b00      	cmp	r3, #0
 80248ec:	d104      	bne.n	80248f8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80248ee:	687b      	ldr	r3, [r7, #4]
 80248f0:	2200      	movs	r2, #0
 80248f2:	61da      	str	r2, [r3, #28]
 80248f4:	2304      	movs	r3, #4
 80248f6:	e067      	b.n	80249c8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80248f8:	687a      	ldr	r2, [r7, #4]
 80248fa:	687b      	ldr	r3, [r7, #4]
 80248fc:	699b      	ldr	r3, [r3, #24]
 80248fe:	4619      	mov	r1, r3
 8024900:	4610      	mov	r0, r2
 8024902:	f7ff fe59 	bl	80245b8 <create_chain>
 8024906:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8024908:	697b      	ldr	r3, [r7, #20]
 802490a:	2b00      	cmp	r3, #0
 802490c:	d101      	bne.n	8024912 <dir_next+0xcc>
 802490e:	2307      	movs	r3, #7
 8024910:	e05a      	b.n	80249c8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8024912:	697b      	ldr	r3, [r7, #20]
 8024914:	2b01      	cmp	r3, #1
 8024916:	d101      	bne.n	802491c <dir_next+0xd6>
 8024918:	2302      	movs	r3, #2
 802491a:	e055      	b.n	80249c8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 802491c:	697b      	ldr	r3, [r7, #20]
 802491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024922:	d101      	bne.n	8024928 <dir_next+0xe2>
 8024924:	2301      	movs	r3, #1
 8024926:	e04f      	b.n	80249c8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8024928:	68f8      	ldr	r0, [r7, #12]
 802492a:	f7ff fb55 	bl	8023fd8 <sync_window>
 802492e:	4603      	mov	r3, r0
 8024930:	2b00      	cmp	r3, #0
 8024932:	d001      	beq.n	8024938 <dir_next+0xf2>
 8024934:	2301      	movs	r3, #1
 8024936:	e047      	b.n	80249c8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8024938:	68fb      	ldr	r3, [r7, #12]
 802493a:	3334      	adds	r3, #52	; 0x34
 802493c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024940:	2100      	movs	r1, #0
 8024942:	4618      	mov	r0, r3
 8024944:	f7ff f94f 	bl	8023be6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8024948:	2300      	movs	r3, #0
 802494a:	613b      	str	r3, [r7, #16]
 802494c:	6979      	ldr	r1, [r7, #20]
 802494e:	68f8      	ldr	r0, [r7, #12]
 8024950:	f7ff fc22 	bl	8024198 <clust2sect>
 8024954:	4602      	mov	r2, r0
 8024956:	68fb      	ldr	r3, [r7, #12]
 8024958:	631a      	str	r2, [r3, #48]	; 0x30
 802495a:	e012      	b.n	8024982 <dir_next+0x13c>
						fs->wflag = 1;
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	2201      	movs	r2, #1
 8024960:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8024962:	68f8      	ldr	r0, [r7, #12]
 8024964:	f7ff fb38 	bl	8023fd8 <sync_window>
 8024968:	4603      	mov	r3, r0
 802496a:	2b00      	cmp	r3, #0
 802496c:	d001      	beq.n	8024972 <dir_next+0x12c>
 802496e:	2301      	movs	r3, #1
 8024970:	e02a      	b.n	80249c8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8024972:	693b      	ldr	r3, [r7, #16]
 8024974:	3301      	adds	r3, #1
 8024976:	613b      	str	r3, [r7, #16]
 8024978:	68fb      	ldr	r3, [r7, #12]
 802497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802497c:	1c5a      	adds	r2, r3, #1
 802497e:	68fb      	ldr	r3, [r7, #12]
 8024980:	631a      	str	r2, [r3, #48]	; 0x30
 8024982:	68fb      	ldr	r3, [r7, #12]
 8024984:	895b      	ldrh	r3, [r3, #10]
 8024986:	461a      	mov	r2, r3
 8024988:	693b      	ldr	r3, [r7, #16]
 802498a:	4293      	cmp	r3, r2
 802498c:	d3e6      	bcc.n	802495c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 802498e:	68fb      	ldr	r3, [r7, #12]
 8024990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8024992:	693b      	ldr	r3, [r7, #16]
 8024994:	1ad2      	subs	r2, r2, r3
 8024996:	68fb      	ldr	r3, [r7, #12]
 8024998:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 802499a:	687b      	ldr	r3, [r7, #4]
 802499c:	697a      	ldr	r2, [r7, #20]
 802499e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80249a0:	6979      	ldr	r1, [r7, #20]
 80249a2:	68f8      	ldr	r0, [r7, #12]
 80249a4:	f7ff fbf8 	bl	8024198 <clust2sect>
 80249a8:	4602      	mov	r2, r0
 80249aa:	687b      	ldr	r3, [r7, #4]
 80249ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80249ae:	687b      	ldr	r3, [r7, #4]
 80249b0:	68ba      	ldr	r2, [r7, #8]
 80249b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80249b4:	68fb      	ldr	r3, [r7, #12]
 80249b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80249ba:	68bb      	ldr	r3, [r7, #8]
 80249bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80249c0:	441a      	add	r2, r3
 80249c2:	687b      	ldr	r3, [r7, #4]
 80249c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80249c6:	2300      	movs	r3, #0
}
 80249c8:	4618      	mov	r0, r3
 80249ca:	3718      	adds	r7, #24
 80249cc:	46bd      	mov	sp, r7
 80249ce:	bd80      	pop	{r7, pc}

080249d0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80249d0:	b580      	push	{r7, lr}
 80249d2:	b086      	sub	sp, #24
 80249d4:	af00      	add	r7, sp, #0
 80249d6:	6078      	str	r0, [r7, #4]
 80249d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	681b      	ldr	r3, [r3, #0]
 80249de:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80249e0:	2100      	movs	r1, #0
 80249e2:	6878      	ldr	r0, [r7, #4]
 80249e4:	f7ff feb4 	bl	8024750 <dir_sdi>
 80249e8:	4603      	mov	r3, r0
 80249ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80249ec:	7dfb      	ldrb	r3, [r7, #23]
 80249ee:	2b00      	cmp	r3, #0
 80249f0:	d12b      	bne.n	8024a4a <dir_alloc+0x7a>
		n = 0;
 80249f2:	2300      	movs	r3, #0
 80249f4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80249f6:	687b      	ldr	r3, [r7, #4]
 80249f8:	69db      	ldr	r3, [r3, #28]
 80249fa:	4619      	mov	r1, r3
 80249fc:	68f8      	ldr	r0, [r7, #12]
 80249fe:	f7ff fb2f 	bl	8024060 <move_window>
 8024a02:	4603      	mov	r3, r0
 8024a04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8024a06:	7dfb      	ldrb	r3, [r7, #23]
 8024a08:	2b00      	cmp	r3, #0
 8024a0a:	d11d      	bne.n	8024a48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8024a0c:	687b      	ldr	r3, [r7, #4]
 8024a0e:	6a1b      	ldr	r3, [r3, #32]
 8024a10:	781b      	ldrb	r3, [r3, #0]
 8024a12:	2be5      	cmp	r3, #229	; 0xe5
 8024a14:	d004      	beq.n	8024a20 <dir_alloc+0x50>
 8024a16:	687b      	ldr	r3, [r7, #4]
 8024a18:	6a1b      	ldr	r3, [r3, #32]
 8024a1a:	781b      	ldrb	r3, [r3, #0]
 8024a1c:	2b00      	cmp	r3, #0
 8024a1e:	d107      	bne.n	8024a30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8024a20:	693b      	ldr	r3, [r7, #16]
 8024a22:	3301      	adds	r3, #1
 8024a24:	613b      	str	r3, [r7, #16]
 8024a26:	693a      	ldr	r2, [r7, #16]
 8024a28:	683b      	ldr	r3, [r7, #0]
 8024a2a:	429a      	cmp	r2, r3
 8024a2c:	d102      	bne.n	8024a34 <dir_alloc+0x64>
 8024a2e:	e00c      	b.n	8024a4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8024a30:	2300      	movs	r3, #0
 8024a32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8024a34:	2101      	movs	r1, #1
 8024a36:	6878      	ldr	r0, [r7, #4]
 8024a38:	f7ff ff05 	bl	8024846 <dir_next>
 8024a3c:	4603      	mov	r3, r0
 8024a3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8024a40:	7dfb      	ldrb	r3, [r7, #23]
 8024a42:	2b00      	cmp	r3, #0
 8024a44:	d0d7      	beq.n	80249f6 <dir_alloc+0x26>
 8024a46:	e000      	b.n	8024a4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8024a48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8024a4a:	7dfb      	ldrb	r3, [r7, #23]
 8024a4c:	2b04      	cmp	r3, #4
 8024a4e:	d101      	bne.n	8024a54 <dir_alloc+0x84>
 8024a50:	2307      	movs	r3, #7
 8024a52:	75fb      	strb	r3, [r7, #23]
	return res;
 8024a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8024a56:	4618      	mov	r0, r3
 8024a58:	3718      	adds	r7, #24
 8024a5a:	46bd      	mov	sp, r7
 8024a5c:	bd80      	pop	{r7, pc}

08024a5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8024a5e:	b580      	push	{r7, lr}
 8024a60:	b084      	sub	sp, #16
 8024a62:	af00      	add	r7, sp, #0
 8024a64:	6078      	str	r0, [r7, #4]
 8024a66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8024a68:	683b      	ldr	r3, [r7, #0]
 8024a6a:	331a      	adds	r3, #26
 8024a6c:	4618      	mov	r0, r3
 8024a6e:	f7ff f817 	bl	8023aa0 <ld_word>
 8024a72:	4603      	mov	r3, r0
 8024a74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8024a76:	687b      	ldr	r3, [r7, #4]
 8024a78:	781b      	ldrb	r3, [r3, #0]
 8024a7a:	2b03      	cmp	r3, #3
 8024a7c:	d109      	bne.n	8024a92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8024a7e:	683b      	ldr	r3, [r7, #0]
 8024a80:	3314      	adds	r3, #20
 8024a82:	4618      	mov	r0, r3
 8024a84:	f7ff f80c 	bl	8023aa0 <ld_word>
 8024a88:	4603      	mov	r3, r0
 8024a8a:	041b      	lsls	r3, r3, #16
 8024a8c:	68fa      	ldr	r2, [r7, #12]
 8024a8e:	4313      	orrs	r3, r2
 8024a90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8024a92:	68fb      	ldr	r3, [r7, #12]
}
 8024a94:	4618      	mov	r0, r3
 8024a96:	3710      	adds	r7, #16
 8024a98:	46bd      	mov	sp, r7
 8024a9a:	bd80      	pop	{r7, pc}

08024a9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8024a9c:	b580      	push	{r7, lr}
 8024a9e:	b084      	sub	sp, #16
 8024aa0:	af00      	add	r7, sp, #0
 8024aa2:	60f8      	str	r0, [r7, #12]
 8024aa4:	60b9      	str	r1, [r7, #8]
 8024aa6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8024aa8:	68bb      	ldr	r3, [r7, #8]
 8024aaa:	331a      	adds	r3, #26
 8024aac:	687a      	ldr	r2, [r7, #4]
 8024aae:	b292      	uxth	r2, r2
 8024ab0:	4611      	mov	r1, r2
 8024ab2:	4618      	mov	r0, r3
 8024ab4:	f7ff f82f 	bl	8023b16 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8024ab8:	68fb      	ldr	r3, [r7, #12]
 8024aba:	781b      	ldrb	r3, [r3, #0]
 8024abc:	2b03      	cmp	r3, #3
 8024abe:	d109      	bne.n	8024ad4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8024ac0:	68bb      	ldr	r3, [r7, #8]
 8024ac2:	f103 0214 	add.w	r2, r3, #20
 8024ac6:	687b      	ldr	r3, [r7, #4]
 8024ac8:	0c1b      	lsrs	r3, r3, #16
 8024aca:	b29b      	uxth	r3, r3
 8024acc:	4619      	mov	r1, r3
 8024ace:	4610      	mov	r0, r2
 8024ad0:	f7ff f821 	bl	8023b16 <st_word>
	}
}
 8024ad4:	bf00      	nop
 8024ad6:	3710      	adds	r7, #16
 8024ad8:	46bd      	mov	sp, r7
 8024ada:	bd80      	pop	{r7, pc}

08024adc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8024adc:	b580      	push	{r7, lr}
 8024ade:	b086      	sub	sp, #24
 8024ae0:	af00      	add	r7, sp, #0
 8024ae2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8024ae4:	687b      	ldr	r3, [r7, #4]
 8024ae6:	681b      	ldr	r3, [r3, #0]
 8024ae8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8024aea:	2100      	movs	r1, #0
 8024aec:	6878      	ldr	r0, [r7, #4]
 8024aee:	f7ff fe2f 	bl	8024750 <dir_sdi>
 8024af2:	4603      	mov	r3, r0
 8024af4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8024af6:	7dfb      	ldrb	r3, [r7, #23]
 8024af8:	2b00      	cmp	r3, #0
 8024afa:	d001      	beq.n	8024b00 <dir_find+0x24>
 8024afc:	7dfb      	ldrb	r3, [r7, #23]
 8024afe:	e03e      	b.n	8024b7e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	69db      	ldr	r3, [r3, #28]
 8024b04:	4619      	mov	r1, r3
 8024b06:	6938      	ldr	r0, [r7, #16]
 8024b08:	f7ff faaa 	bl	8024060 <move_window>
 8024b0c:	4603      	mov	r3, r0
 8024b0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8024b10:	7dfb      	ldrb	r3, [r7, #23]
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	d12f      	bne.n	8024b76 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	6a1b      	ldr	r3, [r3, #32]
 8024b1a:	781b      	ldrb	r3, [r3, #0]
 8024b1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8024b1e:	7bfb      	ldrb	r3, [r7, #15]
 8024b20:	2b00      	cmp	r3, #0
 8024b22:	d102      	bne.n	8024b2a <dir_find+0x4e>
 8024b24:	2304      	movs	r3, #4
 8024b26:	75fb      	strb	r3, [r7, #23]
 8024b28:	e028      	b.n	8024b7c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8024b2a:	687b      	ldr	r3, [r7, #4]
 8024b2c:	6a1b      	ldr	r3, [r3, #32]
 8024b2e:	330b      	adds	r3, #11
 8024b30:	781b      	ldrb	r3, [r3, #0]
 8024b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024b36:	b2da      	uxtb	r2, r3
 8024b38:	687b      	ldr	r3, [r7, #4]
 8024b3a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	6a1b      	ldr	r3, [r3, #32]
 8024b40:	330b      	adds	r3, #11
 8024b42:	781b      	ldrb	r3, [r3, #0]
 8024b44:	f003 0308 	and.w	r3, r3, #8
 8024b48:	2b00      	cmp	r3, #0
 8024b4a:	d10a      	bne.n	8024b62 <dir_find+0x86>
 8024b4c:	687b      	ldr	r3, [r7, #4]
 8024b4e:	6a18      	ldr	r0, [r3, #32]
 8024b50:	687b      	ldr	r3, [r7, #4]
 8024b52:	3324      	adds	r3, #36	; 0x24
 8024b54:	220b      	movs	r2, #11
 8024b56:	4619      	mov	r1, r3
 8024b58:	f7ff f85f 	bl	8023c1a <mem_cmp>
 8024b5c:	4603      	mov	r3, r0
 8024b5e:	2b00      	cmp	r3, #0
 8024b60:	d00b      	beq.n	8024b7a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8024b62:	2100      	movs	r1, #0
 8024b64:	6878      	ldr	r0, [r7, #4]
 8024b66:	f7ff fe6e 	bl	8024846 <dir_next>
 8024b6a:	4603      	mov	r3, r0
 8024b6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8024b6e:	7dfb      	ldrb	r3, [r7, #23]
 8024b70:	2b00      	cmp	r3, #0
 8024b72:	d0c5      	beq.n	8024b00 <dir_find+0x24>
 8024b74:	e002      	b.n	8024b7c <dir_find+0xa0>
		if (res != FR_OK) break;
 8024b76:	bf00      	nop
 8024b78:	e000      	b.n	8024b7c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8024b7a:	bf00      	nop

	return res;
 8024b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8024b7e:	4618      	mov	r0, r3
 8024b80:	3718      	adds	r7, #24
 8024b82:	46bd      	mov	sp, r7
 8024b84:	bd80      	pop	{r7, pc}

08024b86 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8024b86:	b580      	push	{r7, lr}
 8024b88:	b084      	sub	sp, #16
 8024b8a:	af00      	add	r7, sp, #0
 8024b8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	681b      	ldr	r3, [r3, #0]
 8024b92:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8024b94:	2101      	movs	r1, #1
 8024b96:	6878      	ldr	r0, [r7, #4]
 8024b98:	f7ff ff1a 	bl	80249d0 <dir_alloc>
 8024b9c:	4603      	mov	r3, r0
 8024b9e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8024ba0:	7bfb      	ldrb	r3, [r7, #15]
 8024ba2:	2b00      	cmp	r3, #0
 8024ba4:	d11c      	bne.n	8024be0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8024ba6:	687b      	ldr	r3, [r7, #4]
 8024ba8:	69db      	ldr	r3, [r3, #28]
 8024baa:	4619      	mov	r1, r3
 8024bac:	68b8      	ldr	r0, [r7, #8]
 8024bae:	f7ff fa57 	bl	8024060 <move_window>
 8024bb2:	4603      	mov	r3, r0
 8024bb4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8024bb6:	7bfb      	ldrb	r3, [r7, #15]
 8024bb8:	2b00      	cmp	r3, #0
 8024bba:	d111      	bne.n	8024be0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8024bbc:	687b      	ldr	r3, [r7, #4]
 8024bbe:	6a1b      	ldr	r3, [r3, #32]
 8024bc0:	2220      	movs	r2, #32
 8024bc2:	2100      	movs	r1, #0
 8024bc4:	4618      	mov	r0, r3
 8024bc6:	f7ff f80e 	bl	8023be6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	6a18      	ldr	r0, [r3, #32]
 8024bce:	687b      	ldr	r3, [r7, #4]
 8024bd0:	3324      	adds	r3, #36	; 0x24
 8024bd2:	220b      	movs	r2, #11
 8024bd4:	4619      	mov	r1, r3
 8024bd6:	f7fe ffe5 	bl	8023ba4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8024bda:	68bb      	ldr	r3, [r7, #8]
 8024bdc:	2201      	movs	r2, #1
 8024bde:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8024be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8024be2:	4618      	mov	r0, r3
 8024be4:	3710      	adds	r7, #16
 8024be6:	46bd      	mov	sp, r7
 8024be8:	bd80      	pop	{r7, pc}
	...

08024bec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8024bec:	b580      	push	{r7, lr}
 8024bee:	b088      	sub	sp, #32
 8024bf0:	af00      	add	r7, sp, #0
 8024bf2:	6078      	str	r0, [r7, #4]
 8024bf4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8024bf6:	683b      	ldr	r3, [r7, #0]
 8024bf8:	681b      	ldr	r3, [r3, #0]
 8024bfa:	60fb      	str	r3, [r7, #12]
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	3324      	adds	r3, #36	; 0x24
 8024c00:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8024c02:	220b      	movs	r2, #11
 8024c04:	2120      	movs	r1, #32
 8024c06:	68b8      	ldr	r0, [r7, #8]
 8024c08:	f7fe ffed 	bl	8023be6 <mem_set>
	si = i = 0; ni = 8;
 8024c0c:	2300      	movs	r3, #0
 8024c0e:	613b      	str	r3, [r7, #16]
 8024c10:	693b      	ldr	r3, [r7, #16]
 8024c12:	617b      	str	r3, [r7, #20]
 8024c14:	2308      	movs	r3, #8
 8024c16:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8024c18:	697b      	ldr	r3, [r7, #20]
 8024c1a:	1c5a      	adds	r2, r3, #1
 8024c1c:	617a      	str	r2, [r7, #20]
 8024c1e:	68fa      	ldr	r2, [r7, #12]
 8024c20:	4413      	add	r3, r2
 8024c22:	781b      	ldrb	r3, [r3, #0]
 8024c24:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8024c26:	7ffb      	ldrb	r3, [r7, #31]
 8024c28:	2b20      	cmp	r3, #32
 8024c2a:	d94e      	bls.n	8024cca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8024c2c:	7ffb      	ldrb	r3, [r7, #31]
 8024c2e:	2b2f      	cmp	r3, #47	; 0x2f
 8024c30:	d006      	beq.n	8024c40 <create_name+0x54>
 8024c32:	7ffb      	ldrb	r3, [r7, #31]
 8024c34:	2b5c      	cmp	r3, #92	; 0x5c
 8024c36:	d110      	bne.n	8024c5a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8024c38:	e002      	b.n	8024c40 <create_name+0x54>
 8024c3a:	697b      	ldr	r3, [r7, #20]
 8024c3c:	3301      	adds	r3, #1
 8024c3e:	617b      	str	r3, [r7, #20]
 8024c40:	68fa      	ldr	r2, [r7, #12]
 8024c42:	697b      	ldr	r3, [r7, #20]
 8024c44:	4413      	add	r3, r2
 8024c46:	781b      	ldrb	r3, [r3, #0]
 8024c48:	2b2f      	cmp	r3, #47	; 0x2f
 8024c4a:	d0f6      	beq.n	8024c3a <create_name+0x4e>
 8024c4c:	68fa      	ldr	r2, [r7, #12]
 8024c4e:	697b      	ldr	r3, [r7, #20]
 8024c50:	4413      	add	r3, r2
 8024c52:	781b      	ldrb	r3, [r3, #0]
 8024c54:	2b5c      	cmp	r3, #92	; 0x5c
 8024c56:	d0f0      	beq.n	8024c3a <create_name+0x4e>
			break;
 8024c58:	e038      	b.n	8024ccc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8024c5a:	7ffb      	ldrb	r3, [r7, #31]
 8024c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8024c5e:	d003      	beq.n	8024c68 <create_name+0x7c>
 8024c60:	693a      	ldr	r2, [r7, #16]
 8024c62:	69bb      	ldr	r3, [r7, #24]
 8024c64:	429a      	cmp	r2, r3
 8024c66:	d30c      	bcc.n	8024c82 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8024c68:	69bb      	ldr	r3, [r7, #24]
 8024c6a:	2b0b      	cmp	r3, #11
 8024c6c:	d002      	beq.n	8024c74 <create_name+0x88>
 8024c6e:	7ffb      	ldrb	r3, [r7, #31]
 8024c70:	2b2e      	cmp	r3, #46	; 0x2e
 8024c72:	d001      	beq.n	8024c78 <create_name+0x8c>
 8024c74:	2306      	movs	r3, #6
 8024c76:	e044      	b.n	8024d02 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8024c78:	2308      	movs	r3, #8
 8024c7a:	613b      	str	r3, [r7, #16]
 8024c7c:	230b      	movs	r3, #11
 8024c7e:	61bb      	str	r3, [r7, #24]
			continue;
 8024c80:	e022      	b.n	8024cc8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8024c82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8024c86:	2b00      	cmp	r3, #0
 8024c88:	da04      	bge.n	8024c94 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8024c8a:	7ffb      	ldrb	r3, [r7, #31]
 8024c8c:	3b80      	subs	r3, #128	; 0x80
 8024c8e:	4a1f      	ldr	r2, [pc, #124]	; (8024d0c <create_name+0x120>)
 8024c90:	5cd3      	ldrb	r3, [r2, r3]
 8024c92:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8024c94:	7ffb      	ldrb	r3, [r7, #31]
 8024c96:	4619      	mov	r1, r3
 8024c98:	481d      	ldr	r0, [pc, #116]	; (8024d10 <create_name+0x124>)
 8024c9a:	f7fe ffe5 	bl	8023c68 <chk_chr>
 8024c9e:	4603      	mov	r3, r0
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	d001      	beq.n	8024ca8 <create_name+0xbc>
 8024ca4:	2306      	movs	r3, #6
 8024ca6:	e02c      	b.n	8024d02 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8024ca8:	7ffb      	ldrb	r3, [r7, #31]
 8024caa:	2b60      	cmp	r3, #96	; 0x60
 8024cac:	d905      	bls.n	8024cba <create_name+0xce>
 8024cae:	7ffb      	ldrb	r3, [r7, #31]
 8024cb0:	2b7a      	cmp	r3, #122	; 0x7a
 8024cb2:	d802      	bhi.n	8024cba <create_name+0xce>
 8024cb4:	7ffb      	ldrb	r3, [r7, #31]
 8024cb6:	3b20      	subs	r3, #32
 8024cb8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8024cba:	693b      	ldr	r3, [r7, #16]
 8024cbc:	1c5a      	adds	r2, r3, #1
 8024cbe:	613a      	str	r2, [r7, #16]
 8024cc0:	68ba      	ldr	r2, [r7, #8]
 8024cc2:	4413      	add	r3, r2
 8024cc4:	7ffa      	ldrb	r2, [r7, #31]
 8024cc6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8024cc8:	e7a6      	b.n	8024c18 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8024cca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8024ccc:	68fa      	ldr	r2, [r7, #12]
 8024cce:	697b      	ldr	r3, [r7, #20]
 8024cd0:	441a      	add	r2, r3
 8024cd2:	683b      	ldr	r3, [r7, #0]
 8024cd4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8024cd6:	693b      	ldr	r3, [r7, #16]
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	d101      	bne.n	8024ce0 <create_name+0xf4>
 8024cdc:	2306      	movs	r3, #6
 8024cde:	e010      	b.n	8024d02 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8024ce0:	68bb      	ldr	r3, [r7, #8]
 8024ce2:	781b      	ldrb	r3, [r3, #0]
 8024ce4:	2be5      	cmp	r3, #229	; 0xe5
 8024ce6:	d102      	bne.n	8024cee <create_name+0x102>
 8024ce8:	68bb      	ldr	r3, [r7, #8]
 8024cea:	2205      	movs	r2, #5
 8024cec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8024cee:	7ffb      	ldrb	r3, [r7, #31]
 8024cf0:	2b20      	cmp	r3, #32
 8024cf2:	d801      	bhi.n	8024cf8 <create_name+0x10c>
 8024cf4:	2204      	movs	r2, #4
 8024cf6:	e000      	b.n	8024cfa <create_name+0x10e>
 8024cf8:	2200      	movs	r2, #0
 8024cfa:	68bb      	ldr	r3, [r7, #8]
 8024cfc:	330b      	adds	r3, #11
 8024cfe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8024d00:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8024d02:	4618      	mov	r0, r3
 8024d04:	3720      	adds	r7, #32
 8024d06:	46bd      	mov	sp, r7
 8024d08:	bd80      	pop	{r7, pc}
 8024d0a:	bf00      	nop
 8024d0c:	0802f028 	.word	0x0802f028
 8024d10:	0802e540 	.word	0x0802e540

08024d14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8024d14:	b580      	push	{r7, lr}
 8024d16:	b086      	sub	sp, #24
 8024d18:	af00      	add	r7, sp, #0
 8024d1a:	6078      	str	r0, [r7, #4]
 8024d1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8024d1e:	687b      	ldr	r3, [r7, #4]
 8024d20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8024d22:	693b      	ldr	r3, [r7, #16]
 8024d24:	681b      	ldr	r3, [r3, #0]
 8024d26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8024d28:	e002      	b.n	8024d30 <follow_path+0x1c>
 8024d2a:	683b      	ldr	r3, [r7, #0]
 8024d2c:	3301      	adds	r3, #1
 8024d2e:	603b      	str	r3, [r7, #0]
 8024d30:	683b      	ldr	r3, [r7, #0]
 8024d32:	781b      	ldrb	r3, [r3, #0]
 8024d34:	2b2f      	cmp	r3, #47	; 0x2f
 8024d36:	d0f8      	beq.n	8024d2a <follow_path+0x16>
 8024d38:	683b      	ldr	r3, [r7, #0]
 8024d3a:	781b      	ldrb	r3, [r3, #0]
 8024d3c:	2b5c      	cmp	r3, #92	; 0x5c
 8024d3e:	d0f4      	beq.n	8024d2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8024d40:	693b      	ldr	r3, [r7, #16]
 8024d42:	2200      	movs	r2, #0
 8024d44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8024d46:	683b      	ldr	r3, [r7, #0]
 8024d48:	781b      	ldrb	r3, [r3, #0]
 8024d4a:	2b1f      	cmp	r3, #31
 8024d4c:	d80a      	bhi.n	8024d64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8024d4e:	687b      	ldr	r3, [r7, #4]
 8024d50:	2280      	movs	r2, #128	; 0x80
 8024d52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8024d56:	2100      	movs	r1, #0
 8024d58:	6878      	ldr	r0, [r7, #4]
 8024d5a:	f7ff fcf9 	bl	8024750 <dir_sdi>
 8024d5e:	4603      	mov	r3, r0
 8024d60:	75fb      	strb	r3, [r7, #23]
 8024d62:	e043      	b.n	8024dec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8024d64:	463b      	mov	r3, r7
 8024d66:	4619      	mov	r1, r3
 8024d68:	6878      	ldr	r0, [r7, #4]
 8024d6a:	f7ff ff3f 	bl	8024bec <create_name>
 8024d6e:	4603      	mov	r3, r0
 8024d70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8024d72:	7dfb      	ldrb	r3, [r7, #23]
 8024d74:	2b00      	cmp	r3, #0
 8024d76:	d134      	bne.n	8024de2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8024d78:	6878      	ldr	r0, [r7, #4]
 8024d7a:	f7ff feaf 	bl	8024adc <dir_find>
 8024d7e:	4603      	mov	r3, r0
 8024d80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8024d88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8024d8a:	7dfb      	ldrb	r3, [r7, #23]
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	d00a      	beq.n	8024da6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8024d90:	7dfb      	ldrb	r3, [r7, #23]
 8024d92:	2b04      	cmp	r3, #4
 8024d94:	d127      	bne.n	8024de6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8024d96:	7afb      	ldrb	r3, [r7, #11]
 8024d98:	f003 0304 	and.w	r3, r3, #4
 8024d9c:	2b00      	cmp	r3, #0
 8024d9e:	d122      	bne.n	8024de6 <follow_path+0xd2>
 8024da0:	2305      	movs	r3, #5
 8024da2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8024da4:	e01f      	b.n	8024de6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8024da6:	7afb      	ldrb	r3, [r7, #11]
 8024da8:	f003 0304 	and.w	r3, r3, #4
 8024dac:	2b00      	cmp	r3, #0
 8024dae:	d11c      	bne.n	8024dea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8024db0:	693b      	ldr	r3, [r7, #16]
 8024db2:	799b      	ldrb	r3, [r3, #6]
 8024db4:	f003 0310 	and.w	r3, r3, #16
 8024db8:	2b00      	cmp	r3, #0
 8024dba:	d102      	bne.n	8024dc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8024dbc:	2305      	movs	r3, #5
 8024dbe:	75fb      	strb	r3, [r7, #23]
 8024dc0:	e014      	b.n	8024dec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8024dc2:	68fb      	ldr	r3, [r7, #12]
 8024dc4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024dc8:	687b      	ldr	r3, [r7, #4]
 8024dca:	695b      	ldr	r3, [r3, #20]
 8024dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024dd0:	4413      	add	r3, r2
 8024dd2:	4619      	mov	r1, r3
 8024dd4:	68f8      	ldr	r0, [r7, #12]
 8024dd6:	f7ff fe42 	bl	8024a5e <ld_clust>
 8024dda:	4602      	mov	r2, r0
 8024ddc:	693b      	ldr	r3, [r7, #16]
 8024dde:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8024de0:	e7c0      	b.n	8024d64 <follow_path+0x50>
			if (res != FR_OK) break;
 8024de2:	bf00      	nop
 8024de4:	e002      	b.n	8024dec <follow_path+0xd8>
				break;
 8024de6:	bf00      	nop
 8024de8:	e000      	b.n	8024dec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8024dea:	bf00      	nop
			}
		}
	}

	return res;
 8024dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8024dee:	4618      	mov	r0, r3
 8024df0:	3718      	adds	r7, #24
 8024df2:	46bd      	mov	sp, r7
 8024df4:	bd80      	pop	{r7, pc}

08024df6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8024df6:	b480      	push	{r7}
 8024df8:	b087      	sub	sp, #28
 8024dfa:	af00      	add	r7, sp, #0
 8024dfc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8024dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8024e02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	681b      	ldr	r3, [r3, #0]
 8024e08:	2b00      	cmp	r3, #0
 8024e0a:	d031      	beq.n	8024e70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8024e0c:	687b      	ldr	r3, [r7, #4]
 8024e0e:	681b      	ldr	r3, [r3, #0]
 8024e10:	617b      	str	r3, [r7, #20]
 8024e12:	e002      	b.n	8024e1a <get_ldnumber+0x24>
 8024e14:	697b      	ldr	r3, [r7, #20]
 8024e16:	3301      	adds	r3, #1
 8024e18:	617b      	str	r3, [r7, #20]
 8024e1a:	697b      	ldr	r3, [r7, #20]
 8024e1c:	781b      	ldrb	r3, [r3, #0]
 8024e1e:	2b20      	cmp	r3, #32
 8024e20:	d903      	bls.n	8024e2a <get_ldnumber+0x34>
 8024e22:	697b      	ldr	r3, [r7, #20]
 8024e24:	781b      	ldrb	r3, [r3, #0]
 8024e26:	2b3a      	cmp	r3, #58	; 0x3a
 8024e28:	d1f4      	bne.n	8024e14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8024e2a:	697b      	ldr	r3, [r7, #20]
 8024e2c:	781b      	ldrb	r3, [r3, #0]
 8024e2e:	2b3a      	cmp	r3, #58	; 0x3a
 8024e30:	d11c      	bne.n	8024e6c <get_ldnumber+0x76>
			tp = *path;
 8024e32:	687b      	ldr	r3, [r7, #4]
 8024e34:	681b      	ldr	r3, [r3, #0]
 8024e36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8024e38:	68fb      	ldr	r3, [r7, #12]
 8024e3a:	1c5a      	adds	r2, r3, #1
 8024e3c:	60fa      	str	r2, [r7, #12]
 8024e3e:	781b      	ldrb	r3, [r3, #0]
 8024e40:	3b30      	subs	r3, #48	; 0x30
 8024e42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8024e44:	68bb      	ldr	r3, [r7, #8]
 8024e46:	2b09      	cmp	r3, #9
 8024e48:	d80e      	bhi.n	8024e68 <get_ldnumber+0x72>
 8024e4a:	68fa      	ldr	r2, [r7, #12]
 8024e4c:	697b      	ldr	r3, [r7, #20]
 8024e4e:	429a      	cmp	r2, r3
 8024e50:	d10a      	bne.n	8024e68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8024e52:	68bb      	ldr	r3, [r7, #8]
 8024e54:	2b00      	cmp	r3, #0
 8024e56:	d107      	bne.n	8024e68 <get_ldnumber+0x72>
					vol = (int)i;
 8024e58:	68bb      	ldr	r3, [r7, #8]
 8024e5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8024e5c:	697b      	ldr	r3, [r7, #20]
 8024e5e:	3301      	adds	r3, #1
 8024e60:	617b      	str	r3, [r7, #20]
 8024e62:	687b      	ldr	r3, [r7, #4]
 8024e64:	697a      	ldr	r2, [r7, #20]
 8024e66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8024e68:	693b      	ldr	r3, [r7, #16]
 8024e6a:	e002      	b.n	8024e72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8024e6c:	2300      	movs	r3, #0
 8024e6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8024e70:	693b      	ldr	r3, [r7, #16]
}
 8024e72:	4618      	mov	r0, r3
 8024e74:	371c      	adds	r7, #28
 8024e76:	46bd      	mov	sp, r7
 8024e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e7c:	4770      	bx	lr
	...

08024e80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8024e80:	b580      	push	{r7, lr}
 8024e82:	b082      	sub	sp, #8
 8024e84:	af00      	add	r7, sp, #0
 8024e86:	6078      	str	r0, [r7, #4]
 8024e88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8024e8a:	687b      	ldr	r3, [r7, #4]
 8024e8c:	2200      	movs	r2, #0
 8024e8e:	70da      	strb	r2, [r3, #3]
 8024e90:	687b      	ldr	r3, [r7, #4]
 8024e92:	f04f 32ff 	mov.w	r2, #4294967295
 8024e96:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8024e98:	6839      	ldr	r1, [r7, #0]
 8024e9a:	6878      	ldr	r0, [r7, #4]
 8024e9c:	f7ff f8e0 	bl	8024060 <move_window>
 8024ea0:	4603      	mov	r3, r0
 8024ea2:	2b00      	cmp	r3, #0
 8024ea4:	d001      	beq.n	8024eaa <check_fs+0x2a>
 8024ea6:	2304      	movs	r3, #4
 8024ea8:	e038      	b.n	8024f1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8024eaa:	687b      	ldr	r3, [r7, #4]
 8024eac:	3334      	adds	r3, #52	; 0x34
 8024eae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8024eb2:	4618      	mov	r0, r3
 8024eb4:	f7fe fdf4 	bl	8023aa0 <ld_word>
 8024eb8:	4603      	mov	r3, r0
 8024eba:	461a      	mov	r2, r3
 8024ebc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8024ec0:	429a      	cmp	r2, r3
 8024ec2:	d001      	beq.n	8024ec8 <check_fs+0x48>
 8024ec4:	2303      	movs	r3, #3
 8024ec6:	e029      	b.n	8024f1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8024ec8:	687b      	ldr	r3, [r7, #4]
 8024eca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8024ece:	2be9      	cmp	r3, #233	; 0xe9
 8024ed0:	d009      	beq.n	8024ee6 <check_fs+0x66>
 8024ed2:	687b      	ldr	r3, [r7, #4]
 8024ed4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8024ed8:	2beb      	cmp	r3, #235	; 0xeb
 8024eda:	d11e      	bne.n	8024f1a <check_fs+0x9a>
 8024edc:	687b      	ldr	r3, [r7, #4]
 8024ede:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8024ee2:	2b90      	cmp	r3, #144	; 0x90
 8024ee4:	d119      	bne.n	8024f1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8024ee6:	687b      	ldr	r3, [r7, #4]
 8024ee8:	3334      	adds	r3, #52	; 0x34
 8024eea:	3336      	adds	r3, #54	; 0x36
 8024eec:	4618      	mov	r0, r3
 8024eee:	f7fe fdef 	bl	8023ad0 <ld_dword>
 8024ef2:	4603      	mov	r3, r0
 8024ef4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8024ef8:	4a0a      	ldr	r2, [pc, #40]	; (8024f24 <check_fs+0xa4>)
 8024efa:	4293      	cmp	r3, r2
 8024efc:	d101      	bne.n	8024f02 <check_fs+0x82>
 8024efe:	2300      	movs	r3, #0
 8024f00:	e00c      	b.n	8024f1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8024f02:	687b      	ldr	r3, [r7, #4]
 8024f04:	3334      	adds	r3, #52	; 0x34
 8024f06:	3352      	adds	r3, #82	; 0x52
 8024f08:	4618      	mov	r0, r3
 8024f0a:	f7fe fde1 	bl	8023ad0 <ld_dword>
 8024f0e:	4602      	mov	r2, r0
 8024f10:	4b05      	ldr	r3, [pc, #20]	; (8024f28 <check_fs+0xa8>)
 8024f12:	429a      	cmp	r2, r3
 8024f14:	d101      	bne.n	8024f1a <check_fs+0x9a>
 8024f16:	2300      	movs	r3, #0
 8024f18:	e000      	b.n	8024f1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8024f1a:	2302      	movs	r3, #2
}
 8024f1c:	4618      	mov	r0, r3
 8024f1e:	3708      	adds	r7, #8
 8024f20:	46bd      	mov	sp, r7
 8024f22:	bd80      	pop	{r7, pc}
 8024f24:	00544146 	.word	0x00544146
 8024f28:	33544146 	.word	0x33544146

08024f2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8024f2c:	b580      	push	{r7, lr}
 8024f2e:	b096      	sub	sp, #88	; 0x58
 8024f30:	af00      	add	r7, sp, #0
 8024f32:	60f8      	str	r0, [r7, #12]
 8024f34:	60b9      	str	r1, [r7, #8]
 8024f36:	4613      	mov	r3, r2
 8024f38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8024f3a:	68bb      	ldr	r3, [r7, #8]
 8024f3c:	2200      	movs	r2, #0
 8024f3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8024f40:	68f8      	ldr	r0, [r7, #12]
 8024f42:	f7ff ff58 	bl	8024df6 <get_ldnumber>
 8024f46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8024f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024f4a:	2b00      	cmp	r3, #0
 8024f4c:	da01      	bge.n	8024f52 <find_volume+0x26>
 8024f4e:	230b      	movs	r3, #11
 8024f50:	e236      	b.n	80253c0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8024f52:	4aac      	ldr	r2, [pc, #688]	; (8025204 <find_volume+0x2d8>)
 8024f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8024f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024f5e:	2b00      	cmp	r3, #0
 8024f60:	d101      	bne.n	8024f66 <find_volume+0x3a>
 8024f62:	230c      	movs	r3, #12
 8024f64:	e22c      	b.n	80253c0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8024f66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8024f68:	f7fe fe99 	bl	8023c9e <lock_fs>
 8024f6c:	4603      	mov	r3, r0
 8024f6e:	2b00      	cmp	r3, #0
 8024f70:	d101      	bne.n	8024f76 <find_volume+0x4a>
 8024f72:	230f      	movs	r3, #15
 8024f74:	e224      	b.n	80253c0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8024f76:	68bb      	ldr	r3, [r7, #8]
 8024f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024f7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8024f7c:	79fb      	ldrb	r3, [r7, #7]
 8024f7e:	f023 0301 	bic.w	r3, r3, #1
 8024f82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8024f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024f86:	781b      	ldrb	r3, [r3, #0]
 8024f88:	2b00      	cmp	r3, #0
 8024f8a:	d01a      	beq.n	8024fc2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8024f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024f8e:	785b      	ldrb	r3, [r3, #1]
 8024f90:	4618      	mov	r0, r3
 8024f92:	f7fe fce7 	bl	8023964 <disk_status>
 8024f96:	4603      	mov	r3, r0
 8024f98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8024f9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024fa0:	f003 0301 	and.w	r3, r3, #1
 8024fa4:	2b00      	cmp	r3, #0
 8024fa6:	d10c      	bne.n	8024fc2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8024fa8:	79fb      	ldrb	r3, [r7, #7]
 8024faa:	2b00      	cmp	r3, #0
 8024fac:	d007      	beq.n	8024fbe <find_volume+0x92>
 8024fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024fb2:	f003 0304 	and.w	r3, r3, #4
 8024fb6:	2b00      	cmp	r3, #0
 8024fb8:	d001      	beq.n	8024fbe <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8024fba:	230a      	movs	r3, #10
 8024fbc:	e200      	b.n	80253c0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8024fbe:	2300      	movs	r3, #0
 8024fc0:	e1fe      	b.n	80253c0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8024fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024fc4:	2200      	movs	r2, #0
 8024fc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8024fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024fca:	b2da      	uxtb	r2, r3
 8024fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024fce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8024fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024fd2:	785b      	ldrb	r3, [r3, #1]
 8024fd4:	4618      	mov	r0, r3
 8024fd6:	f7fe fcdf 	bl	8023998 <disk_initialize>
 8024fda:	4603      	mov	r3, r0
 8024fdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8024fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024fe4:	f003 0301 	and.w	r3, r3, #1
 8024fe8:	2b00      	cmp	r3, #0
 8024fea:	d001      	beq.n	8024ff0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8024fec:	2303      	movs	r3, #3
 8024fee:	e1e7      	b.n	80253c0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8024ff0:	79fb      	ldrb	r3, [r7, #7]
 8024ff2:	2b00      	cmp	r3, #0
 8024ff4:	d007      	beq.n	8025006 <find_volume+0xda>
 8024ff6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024ffa:	f003 0304 	and.w	r3, r3, #4
 8024ffe:	2b00      	cmp	r3, #0
 8025000:	d001      	beq.n	8025006 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8025002:	230a      	movs	r3, #10
 8025004:	e1dc      	b.n	80253c0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8025006:	2300      	movs	r3, #0
 8025008:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 802500a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802500c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802500e:	f7ff ff37 	bl	8024e80 <check_fs>
 8025012:	4603      	mov	r3, r0
 8025014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8025018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802501c:	2b02      	cmp	r3, #2
 802501e:	d14b      	bne.n	80250b8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8025020:	2300      	movs	r3, #0
 8025022:	643b      	str	r3, [r7, #64]	; 0x40
 8025024:	e01f      	b.n	8025066 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8025026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025028:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802502c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802502e:	011b      	lsls	r3, r3, #4
 8025030:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8025034:	4413      	add	r3, r2
 8025036:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8025038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802503a:	3304      	adds	r3, #4
 802503c:	781b      	ldrb	r3, [r3, #0]
 802503e:	2b00      	cmp	r3, #0
 8025040:	d006      	beq.n	8025050 <find_volume+0x124>
 8025042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025044:	3308      	adds	r3, #8
 8025046:	4618      	mov	r0, r3
 8025048:	f7fe fd42 	bl	8023ad0 <ld_dword>
 802504c:	4602      	mov	r2, r0
 802504e:	e000      	b.n	8025052 <find_volume+0x126>
 8025050:	2200      	movs	r2, #0
 8025052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025054:	009b      	lsls	r3, r3, #2
 8025056:	f107 0158 	add.w	r1, r7, #88	; 0x58
 802505a:	440b      	add	r3, r1
 802505c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8025060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025062:	3301      	adds	r3, #1
 8025064:	643b      	str	r3, [r7, #64]	; 0x40
 8025066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025068:	2b03      	cmp	r3, #3
 802506a:	d9dc      	bls.n	8025026 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 802506c:	2300      	movs	r3, #0
 802506e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8025070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025072:	2b00      	cmp	r3, #0
 8025074:	d002      	beq.n	802507c <find_volume+0x150>
 8025076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025078:	3b01      	subs	r3, #1
 802507a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 802507c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802507e:	009b      	lsls	r3, r3, #2
 8025080:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8025084:	4413      	add	r3, r2
 8025086:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802508a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 802508c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802508e:	2b00      	cmp	r3, #0
 8025090:	d005      	beq.n	802509e <find_volume+0x172>
 8025092:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025096:	f7ff fef3 	bl	8024e80 <check_fs>
 802509a:	4603      	mov	r3, r0
 802509c:	e000      	b.n	80250a0 <find_volume+0x174>
 802509e:	2303      	movs	r3, #3
 80250a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80250a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80250a8:	2b01      	cmp	r3, #1
 80250aa:	d905      	bls.n	80250b8 <find_volume+0x18c>
 80250ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80250ae:	3301      	adds	r3, #1
 80250b0:	643b      	str	r3, [r7, #64]	; 0x40
 80250b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80250b4:	2b03      	cmp	r3, #3
 80250b6:	d9e1      	bls.n	802507c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80250b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80250bc:	2b04      	cmp	r3, #4
 80250be:	d101      	bne.n	80250c4 <find_volume+0x198>
 80250c0:	2301      	movs	r3, #1
 80250c2:	e17d      	b.n	80253c0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80250c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80250c8:	2b01      	cmp	r3, #1
 80250ca:	d901      	bls.n	80250d0 <find_volume+0x1a4>
 80250cc:	230d      	movs	r3, #13
 80250ce:	e177      	b.n	80253c0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80250d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80250d2:	3334      	adds	r3, #52	; 0x34
 80250d4:	330b      	adds	r3, #11
 80250d6:	4618      	mov	r0, r3
 80250d8:	f7fe fce2 	bl	8023aa0 <ld_word>
 80250dc:	4603      	mov	r3, r0
 80250de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80250e2:	d001      	beq.n	80250e8 <find_volume+0x1bc>
 80250e4:	230d      	movs	r3, #13
 80250e6:	e16b      	b.n	80253c0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80250e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80250ea:	3334      	adds	r3, #52	; 0x34
 80250ec:	3316      	adds	r3, #22
 80250ee:	4618      	mov	r0, r3
 80250f0:	f7fe fcd6 	bl	8023aa0 <ld_word>
 80250f4:	4603      	mov	r3, r0
 80250f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80250f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80250fa:	2b00      	cmp	r3, #0
 80250fc:	d106      	bne.n	802510c <find_volume+0x1e0>
 80250fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025100:	3334      	adds	r3, #52	; 0x34
 8025102:	3324      	adds	r3, #36	; 0x24
 8025104:	4618      	mov	r0, r3
 8025106:	f7fe fce3 	bl	8023ad0 <ld_dword>
 802510a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 802510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802510e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025110:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8025112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025114:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8025118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802511a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 802511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802511e:	789b      	ldrb	r3, [r3, #2]
 8025120:	2b01      	cmp	r3, #1
 8025122:	d005      	beq.n	8025130 <find_volume+0x204>
 8025124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025126:	789b      	ldrb	r3, [r3, #2]
 8025128:	2b02      	cmp	r3, #2
 802512a:	d001      	beq.n	8025130 <find_volume+0x204>
 802512c:	230d      	movs	r3, #13
 802512e:	e147      	b.n	80253c0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8025130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025132:	789b      	ldrb	r3, [r3, #2]
 8025134:	461a      	mov	r2, r3
 8025136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025138:	fb02 f303 	mul.w	r3, r2, r3
 802513c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 802513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025144:	b29a      	uxth	r2, r3
 8025146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025148:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 802514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802514c:	895b      	ldrh	r3, [r3, #10]
 802514e:	2b00      	cmp	r3, #0
 8025150:	d008      	beq.n	8025164 <find_volume+0x238>
 8025152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025154:	895b      	ldrh	r3, [r3, #10]
 8025156:	461a      	mov	r2, r3
 8025158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802515a:	895b      	ldrh	r3, [r3, #10]
 802515c:	3b01      	subs	r3, #1
 802515e:	4013      	ands	r3, r2
 8025160:	2b00      	cmp	r3, #0
 8025162:	d001      	beq.n	8025168 <find_volume+0x23c>
 8025164:	230d      	movs	r3, #13
 8025166:	e12b      	b.n	80253c0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8025168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802516a:	3334      	adds	r3, #52	; 0x34
 802516c:	3311      	adds	r3, #17
 802516e:	4618      	mov	r0, r3
 8025170:	f7fe fc96 	bl	8023aa0 <ld_word>
 8025174:	4603      	mov	r3, r0
 8025176:	461a      	mov	r2, r3
 8025178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802517a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 802517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802517e:	891b      	ldrh	r3, [r3, #8]
 8025180:	f003 030f 	and.w	r3, r3, #15
 8025184:	b29b      	uxth	r3, r3
 8025186:	2b00      	cmp	r3, #0
 8025188:	d001      	beq.n	802518e <find_volume+0x262>
 802518a:	230d      	movs	r3, #13
 802518c:	e118      	b.n	80253c0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 802518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025190:	3334      	adds	r3, #52	; 0x34
 8025192:	3313      	adds	r3, #19
 8025194:	4618      	mov	r0, r3
 8025196:	f7fe fc83 	bl	8023aa0 <ld_word>
 802519a:	4603      	mov	r3, r0
 802519c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 802519e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80251a0:	2b00      	cmp	r3, #0
 80251a2:	d106      	bne.n	80251b2 <find_volume+0x286>
 80251a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251a6:	3334      	adds	r3, #52	; 0x34
 80251a8:	3320      	adds	r3, #32
 80251aa:	4618      	mov	r0, r3
 80251ac:	f7fe fc90 	bl	8023ad0 <ld_dword>
 80251b0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80251b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251b4:	3334      	adds	r3, #52	; 0x34
 80251b6:	330e      	adds	r3, #14
 80251b8:	4618      	mov	r0, r3
 80251ba:	f7fe fc71 	bl	8023aa0 <ld_word>
 80251be:	4603      	mov	r3, r0
 80251c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80251c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80251c4:	2b00      	cmp	r3, #0
 80251c6:	d101      	bne.n	80251cc <find_volume+0x2a0>
 80251c8:	230d      	movs	r3, #13
 80251ca:	e0f9      	b.n	80253c0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80251cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80251ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80251d0:	4413      	add	r3, r2
 80251d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80251d4:	8912      	ldrh	r2, [r2, #8]
 80251d6:	0912      	lsrs	r2, r2, #4
 80251d8:	b292      	uxth	r2, r2
 80251da:	4413      	add	r3, r2
 80251dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80251de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80251e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80251e2:	429a      	cmp	r2, r3
 80251e4:	d201      	bcs.n	80251ea <find_volume+0x2be>
 80251e6:	230d      	movs	r3, #13
 80251e8:	e0ea      	b.n	80253c0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80251ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80251ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80251ee:	1ad3      	subs	r3, r2, r3
 80251f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80251f2:	8952      	ldrh	r2, [r2, #10]
 80251f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80251f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80251fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80251fc:	2b00      	cmp	r3, #0
 80251fe:	d103      	bne.n	8025208 <find_volume+0x2dc>
 8025200:	230d      	movs	r3, #13
 8025202:	e0dd      	b.n	80253c0 <find_volume+0x494>
 8025204:	240013f8 	.word	0x240013f8
		fmt = FS_FAT32;
 8025208:	2303      	movs	r3, #3
 802520a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 802520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025210:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8025214:	4293      	cmp	r3, r2
 8025216:	d802      	bhi.n	802521e <find_volume+0x2f2>
 8025218:	2302      	movs	r3, #2
 802521a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 802521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025220:	f640 72f5 	movw	r2, #4085	; 0xff5
 8025224:	4293      	cmp	r3, r2
 8025226:	d802      	bhi.n	802522e <find_volume+0x302>
 8025228:	2301      	movs	r3, #1
 802522a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 802522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025230:	1c9a      	adds	r2, r3, #2
 8025232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025234:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8025236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802523a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 802523c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802523e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025240:	441a      	add	r2, r3
 8025242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025244:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8025246:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802524a:	441a      	add	r2, r3
 802524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802524e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8025250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025254:	2b03      	cmp	r3, #3
 8025256:	d11e      	bne.n	8025296 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8025258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802525a:	3334      	adds	r3, #52	; 0x34
 802525c:	332a      	adds	r3, #42	; 0x2a
 802525e:	4618      	mov	r0, r3
 8025260:	f7fe fc1e 	bl	8023aa0 <ld_word>
 8025264:	4603      	mov	r3, r0
 8025266:	2b00      	cmp	r3, #0
 8025268:	d001      	beq.n	802526e <find_volume+0x342>
 802526a:	230d      	movs	r3, #13
 802526c:	e0a8      	b.n	80253c0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 802526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025270:	891b      	ldrh	r3, [r3, #8]
 8025272:	2b00      	cmp	r3, #0
 8025274:	d001      	beq.n	802527a <find_volume+0x34e>
 8025276:	230d      	movs	r3, #13
 8025278:	e0a2      	b.n	80253c0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 802527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802527c:	3334      	adds	r3, #52	; 0x34
 802527e:	332c      	adds	r3, #44	; 0x2c
 8025280:	4618      	mov	r0, r3
 8025282:	f7fe fc25 	bl	8023ad0 <ld_dword>
 8025286:	4602      	mov	r2, r0
 8025288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802528a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 802528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802528e:	699b      	ldr	r3, [r3, #24]
 8025290:	009b      	lsls	r3, r3, #2
 8025292:	647b      	str	r3, [r7, #68]	; 0x44
 8025294:	e01f      	b.n	80252d6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8025296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025298:	891b      	ldrh	r3, [r3, #8]
 802529a:	2b00      	cmp	r3, #0
 802529c:	d101      	bne.n	80252a2 <find_volume+0x376>
 802529e:	230d      	movs	r3, #13
 80252a0:	e08e      	b.n	80253c0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80252a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80252a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80252a8:	441a      	add	r2, r3
 80252aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252ac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80252ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80252b2:	2b02      	cmp	r3, #2
 80252b4:	d103      	bne.n	80252be <find_volume+0x392>
 80252b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252b8:	699b      	ldr	r3, [r3, #24]
 80252ba:	005b      	lsls	r3, r3, #1
 80252bc:	e00a      	b.n	80252d4 <find_volume+0x3a8>
 80252be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252c0:	699a      	ldr	r2, [r3, #24]
 80252c2:	4613      	mov	r3, r2
 80252c4:	005b      	lsls	r3, r3, #1
 80252c6:	4413      	add	r3, r2
 80252c8:	085a      	lsrs	r2, r3, #1
 80252ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252cc:	699b      	ldr	r3, [r3, #24]
 80252ce:	f003 0301 	and.w	r3, r3, #1
 80252d2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80252d4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80252d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252d8:	69da      	ldr	r2, [r3, #28]
 80252da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80252dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80252e0:	0a5b      	lsrs	r3, r3, #9
 80252e2:	429a      	cmp	r2, r3
 80252e4:	d201      	bcs.n	80252ea <find_volume+0x3be>
 80252e6:	230d      	movs	r3, #13
 80252e8:	e06a      	b.n	80253c0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80252ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252ec:	f04f 32ff 	mov.w	r2, #4294967295
 80252f0:	615a      	str	r2, [r3, #20]
 80252f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252f4:	695a      	ldr	r2, [r3, #20]
 80252f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80252fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252fc:	2280      	movs	r2, #128	; 0x80
 80252fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8025300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025304:	2b03      	cmp	r3, #3
 8025306:	d149      	bne.n	802539c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8025308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802530a:	3334      	adds	r3, #52	; 0x34
 802530c:	3330      	adds	r3, #48	; 0x30
 802530e:	4618      	mov	r0, r3
 8025310:	f7fe fbc6 	bl	8023aa0 <ld_word>
 8025314:	4603      	mov	r3, r0
 8025316:	2b01      	cmp	r3, #1
 8025318:	d140      	bne.n	802539c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 802531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802531c:	3301      	adds	r3, #1
 802531e:	4619      	mov	r1, r3
 8025320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025322:	f7fe fe9d 	bl	8024060 <move_window>
 8025326:	4603      	mov	r3, r0
 8025328:	2b00      	cmp	r3, #0
 802532a:	d137      	bne.n	802539c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 802532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802532e:	2200      	movs	r2, #0
 8025330:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8025332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025334:	3334      	adds	r3, #52	; 0x34
 8025336:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802533a:	4618      	mov	r0, r3
 802533c:	f7fe fbb0 	bl	8023aa0 <ld_word>
 8025340:	4603      	mov	r3, r0
 8025342:	461a      	mov	r2, r3
 8025344:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8025348:	429a      	cmp	r2, r3
 802534a:	d127      	bne.n	802539c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 802534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802534e:	3334      	adds	r3, #52	; 0x34
 8025350:	4618      	mov	r0, r3
 8025352:	f7fe fbbd 	bl	8023ad0 <ld_dword>
 8025356:	4602      	mov	r2, r0
 8025358:	4b1b      	ldr	r3, [pc, #108]	; (80253c8 <find_volume+0x49c>)
 802535a:	429a      	cmp	r2, r3
 802535c:	d11e      	bne.n	802539c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 802535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025360:	3334      	adds	r3, #52	; 0x34
 8025362:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8025366:	4618      	mov	r0, r3
 8025368:	f7fe fbb2 	bl	8023ad0 <ld_dword>
 802536c:	4602      	mov	r2, r0
 802536e:	4b17      	ldr	r3, [pc, #92]	; (80253cc <find_volume+0x4a0>)
 8025370:	429a      	cmp	r2, r3
 8025372:	d113      	bne.n	802539c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8025374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025376:	3334      	adds	r3, #52	; 0x34
 8025378:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 802537c:	4618      	mov	r0, r3
 802537e:	f7fe fba7 	bl	8023ad0 <ld_dword>
 8025382:	4602      	mov	r2, r0
 8025384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025386:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8025388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802538a:	3334      	adds	r3, #52	; 0x34
 802538c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8025390:	4618      	mov	r0, r3
 8025392:	f7fe fb9d 	bl	8023ad0 <ld_dword>
 8025396:	4602      	mov	r2, r0
 8025398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802539a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 802539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802539e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80253a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80253a4:	4b0a      	ldr	r3, [pc, #40]	; (80253d0 <find_volume+0x4a4>)
 80253a6:	881b      	ldrh	r3, [r3, #0]
 80253a8:	3301      	adds	r3, #1
 80253aa:	b29a      	uxth	r2, r3
 80253ac:	4b08      	ldr	r3, [pc, #32]	; (80253d0 <find_volume+0x4a4>)
 80253ae:	801a      	strh	r2, [r3, #0]
 80253b0:	4b07      	ldr	r3, [pc, #28]	; (80253d0 <find_volume+0x4a4>)
 80253b2:	881a      	ldrh	r2, [r3, #0]
 80253b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80253b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80253b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80253ba:	f7fe fde9 	bl	8023f90 <clear_lock>
#endif
	return FR_OK;
 80253be:	2300      	movs	r3, #0
}
 80253c0:	4618      	mov	r0, r3
 80253c2:	3758      	adds	r7, #88	; 0x58
 80253c4:	46bd      	mov	sp, r7
 80253c6:	bd80      	pop	{r7, pc}
 80253c8:	41615252 	.word	0x41615252
 80253cc:	61417272 	.word	0x61417272
 80253d0:	240013fc 	.word	0x240013fc

080253d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80253d4:	b580      	push	{r7, lr}
 80253d6:	b084      	sub	sp, #16
 80253d8:	af00      	add	r7, sp, #0
 80253da:	6078      	str	r0, [r7, #4]
 80253dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80253de:	2309      	movs	r3, #9
 80253e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80253e2:	687b      	ldr	r3, [r7, #4]
 80253e4:	2b00      	cmp	r3, #0
 80253e6:	d02e      	beq.n	8025446 <validate+0x72>
 80253e8:	687b      	ldr	r3, [r7, #4]
 80253ea:	681b      	ldr	r3, [r3, #0]
 80253ec:	2b00      	cmp	r3, #0
 80253ee:	d02a      	beq.n	8025446 <validate+0x72>
 80253f0:	687b      	ldr	r3, [r7, #4]
 80253f2:	681b      	ldr	r3, [r3, #0]
 80253f4:	781b      	ldrb	r3, [r3, #0]
 80253f6:	2b00      	cmp	r3, #0
 80253f8:	d025      	beq.n	8025446 <validate+0x72>
 80253fa:	687b      	ldr	r3, [r7, #4]
 80253fc:	889a      	ldrh	r2, [r3, #4]
 80253fe:	687b      	ldr	r3, [r7, #4]
 8025400:	681b      	ldr	r3, [r3, #0]
 8025402:	88db      	ldrh	r3, [r3, #6]
 8025404:	429a      	cmp	r2, r3
 8025406:	d11e      	bne.n	8025446 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8025408:	687b      	ldr	r3, [r7, #4]
 802540a:	681b      	ldr	r3, [r3, #0]
 802540c:	4618      	mov	r0, r3
 802540e:	f7fe fc46 	bl	8023c9e <lock_fs>
 8025412:	4603      	mov	r3, r0
 8025414:	2b00      	cmp	r3, #0
 8025416:	d014      	beq.n	8025442 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8025418:	687b      	ldr	r3, [r7, #4]
 802541a:	681b      	ldr	r3, [r3, #0]
 802541c:	785b      	ldrb	r3, [r3, #1]
 802541e:	4618      	mov	r0, r3
 8025420:	f7fe faa0 	bl	8023964 <disk_status>
 8025424:	4603      	mov	r3, r0
 8025426:	f003 0301 	and.w	r3, r3, #1
 802542a:	2b00      	cmp	r3, #0
 802542c:	d102      	bne.n	8025434 <validate+0x60>
				res = FR_OK;
 802542e:	2300      	movs	r3, #0
 8025430:	73fb      	strb	r3, [r7, #15]
 8025432:	e008      	b.n	8025446 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8025434:	687b      	ldr	r3, [r7, #4]
 8025436:	681b      	ldr	r3, [r3, #0]
 8025438:	2100      	movs	r1, #0
 802543a:	4618      	mov	r0, r3
 802543c:	f7fe fc45 	bl	8023cca <unlock_fs>
 8025440:	e001      	b.n	8025446 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8025442:	230f      	movs	r3, #15
 8025444:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8025446:	7bfb      	ldrb	r3, [r7, #15]
 8025448:	2b00      	cmp	r3, #0
 802544a:	d102      	bne.n	8025452 <validate+0x7e>
 802544c:	687b      	ldr	r3, [r7, #4]
 802544e:	681b      	ldr	r3, [r3, #0]
 8025450:	e000      	b.n	8025454 <validate+0x80>
 8025452:	2300      	movs	r3, #0
 8025454:	683a      	ldr	r2, [r7, #0]
 8025456:	6013      	str	r3, [r2, #0]
	return res;
 8025458:	7bfb      	ldrb	r3, [r7, #15]
}
 802545a:	4618      	mov	r0, r3
 802545c:	3710      	adds	r7, #16
 802545e:	46bd      	mov	sp, r7
 8025460:	bd80      	pop	{r7, pc}
	...

08025464 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8025464:	b580      	push	{r7, lr}
 8025466:	b088      	sub	sp, #32
 8025468:	af00      	add	r7, sp, #0
 802546a:	60f8      	str	r0, [r7, #12]
 802546c:	60b9      	str	r1, [r7, #8]
 802546e:	4613      	mov	r3, r2
 8025470:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8025472:	68bb      	ldr	r3, [r7, #8]
 8025474:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8025476:	f107 0310 	add.w	r3, r7, #16
 802547a:	4618      	mov	r0, r3
 802547c:	f7ff fcbb 	bl	8024df6 <get_ldnumber>
 8025480:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8025482:	69fb      	ldr	r3, [r7, #28]
 8025484:	2b00      	cmp	r3, #0
 8025486:	da01      	bge.n	802548c <f_mount+0x28>
 8025488:	230b      	movs	r3, #11
 802548a:	e048      	b.n	802551e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 802548c:	4a26      	ldr	r2, [pc, #152]	; (8025528 <f_mount+0xc4>)
 802548e:	69fb      	ldr	r3, [r7, #28]
 8025490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025494:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8025496:	69bb      	ldr	r3, [r7, #24]
 8025498:	2b00      	cmp	r3, #0
 802549a:	d00f      	beq.n	80254bc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 802549c:	69b8      	ldr	r0, [r7, #24]
 802549e:	f7fe fd77 	bl	8023f90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80254a2:	69bb      	ldr	r3, [r7, #24]
 80254a4:	68db      	ldr	r3, [r3, #12]
 80254a6:	4618      	mov	r0, r3
 80254a8:	f000 fcd8 	bl	8025e5c <ff_del_syncobj>
 80254ac:	4603      	mov	r3, r0
 80254ae:	2b00      	cmp	r3, #0
 80254b0:	d101      	bne.n	80254b6 <f_mount+0x52>
 80254b2:	2302      	movs	r3, #2
 80254b4:	e033      	b.n	802551e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80254b6:	69bb      	ldr	r3, [r7, #24]
 80254b8:	2200      	movs	r2, #0
 80254ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80254bc:	68fb      	ldr	r3, [r7, #12]
 80254be:	2b00      	cmp	r3, #0
 80254c0:	d00f      	beq.n	80254e2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80254c2:	68fb      	ldr	r3, [r7, #12]
 80254c4:	2200      	movs	r2, #0
 80254c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80254c8:	69fb      	ldr	r3, [r7, #28]
 80254ca:	b2da      	uxtb	r2, r3
 80254cc:	68fb      	ldr	r3, [r7, #12]
 80254ce:	330c      	adds	r3, #12
 80254d0:	4619      	mov	r1, r3
 80254d2:	4610      	mov	r0, r2
 80254d4:	f000 fca7 	bl	8025e26 <ff_cre_syncobj>
 80254d8:	4603      	mov	r3, r0
 80254da:	2b00      	cmp	r3, #0
 80254dc:	d101      	bne.n	80254e2 <f_mount+0x7e>
 80254de:	2302      	movs	r3, #2
 80254e0:	e01d      	b.n	802551e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80254e2:	68fa      	ldr	r2, [r7, #12]
 80254e4:	4910      	ldr	r1, [pc, #64]	; (8025528 <f_mount+0xc4>)
 80254e6:	69fb      	ldr	r3, [r7, #28]
 80254e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80254ec:	68fb      	ldr	r3, [r7, #12]
 80254ee:	2b00      	cmp	r3, #0
 80254f0:	d002      	beq.n	80254f8 <f_mount+0x94>
 80254f2:	79fb      	ldrb	r3, [r7, #7]
 80254f4:	2b01      	cmp	r3, #1
 80254f6:	d001      	beq.n	80254fc <f_mount+0x98>
 80254f8:	2300      	movs	r3, #0
 80254fa:	e010      	b.n	802551e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80254fc:	f107 010c 	add.w	r1, r7, #12
 8025500:	f107 0308 	add.w	r3, r7, #8
 8025504:	2200      	movs	r2, #0
 8025506:	4618      	mov	r0, r3
 8025508:	f7ff fd10 	bl	8024f2c <find_volume>
 802550c:	4603      	mov	r3, r0
 802550e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8025510:	68fb      	ldr	r3, [r7, #12]
 8025512:	7dfa      	ldrb	r2, [r7, #23]
 8025514:	4611      	mov	r1, r2
 8025516:	4618      	mov	r0, r3
 8025518:	f7fe fbd7 	bl	8023cca <unlock_fs>
 802551c:	7dfb      	ldrb	r3, [r7, #23]
}
 802551e:	4618      	mov	r0, r3
 8025520:	3720      	adds	r7, #32
 8025522:	46bd      	mov	sp, r7
 8025524:	bd80      	pop	{r7, pc}
 8025526:	bf00      	nop
 8025528:	240013f8 	.word	0x240013f8

0802552c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 802552c:	b580      	push	{r7, lr}
 802552e:	b098      	sub	sp, #96	; 0x60
 8025530:	af00      	add	r7, sp, #0
 8025532:	60f8      	str	r0, [r7, #12]
 8025534:	60b9      	str	r1, [r7, #8]
 8025536:	4613      	mov	r3, r2
 8025538:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 802553a:	68fb      	ldr	r3, [r7, #12]
 802553c:	2b00      	cmp	r3, #0
 802553e:	d101      	bne.n	8025544 <f_open+0x18>
 8025540:	2309      	movs	r3, #9
 8025542:	e1b4      	b.n	80258ae <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8025544:	79fb      	ldrb	r3, [r7, #7]
 8025546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802554a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 802554c:	79fa      	ldrb	r2, [r7, #7]
 802554e:	f107 0110 	add.w	r1, r7, #16
 8025552:	f107 0308 	add.w	r3, r7, #8
 8025556:	4618      	mov	r0, r3
 8025558:	f7ff fce8 	bl	8024f2c <find_volume>
 802555c:	4603      	mov	r3, r0
 802555e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8025562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025566:	2b00      	cmp	r3, #0
 8025568:	f040 8191 	bne.w	802588e <f_open+0x362>
		dj.obj.fs = fs;
 802556c:	693b      	ldr	r3, [r7, #16]
 802556e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8025570:	68ba      	ldr	r2, [r7, #8]
 8025572:	f107 0314 	add.w	r3, r7, #20
 8025576:	4611      	mov	r1, r2
 8025578:	4618      	mov	r0, r3
 802557a:	f7ff fbcb 	bl	8024d14 <follow_path>
 802557e:	4603      	mov	r3, r0
 8025580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8025584:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025588:	2b00      	cmp	r3, #0
 802558a:	d11a      	bne.n	80255c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 802558c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8025590:	b25b      	sxtb	r3, r3
 8025592:	2b00      	cmp	r3, #0
 8025594:	da03      	bge.n	802559e <f_open+0x72>
				res = FR_INVALID_NAME;
 8025596:	2306      	movs	r3, #6
 8025598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 802559c:	e011      	b.n	80255c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 802559e:	79fb      	ldrb	r3, [r7, #7]
 80255a0:	f023 0301 	bic.w	r3, r3, #1
 80255a4:	2b00      	cmp	r3, #0
 80255a6:	bf14      	ite	ne
 80255a8:	2301      	movne	r3, #1
 80255aa:	2300      	moveq	r3, #0
 80255ac:	b2db      	uxtb	r3, r3
 80255ae:	461a      	mov	r2, r3
 80255b0:	f107 0314 	add.w	r3, r7, #20
 80255b4:	4611      	mov	r1, r2
 80255b6:	4618      	mov	r0, r3
 80255b8:	f7fe fba2 	bl	8023d00 <chk_lock>
 80255bc:	4603      	mov	r3, r0
 80255be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80255c2:	79fb      	ldrb	r3, [r7, #7]
 80255c4:	f003 031c 	and.w	r3, r3, #28
 80255c8:	2b00      	cmp	r3, #0
 80255ca:	d07f      	beq.n	80256cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80255cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80255d0:	2b00      	cmp	r3, #0
 80255d2:	d017      	beq.n	8025604 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80255d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80255d8:	2b04      	cmp	r3, #4
 80255da:	d10e      	bne.n	80255fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80255dc:	f7fe fbec 	bl	8023db8 <enq_lock>
 80255e0:	4603      	mov	r3, r0
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	d006      	beq.n	80255f4 <f_open+0xc8>
 80255e6:	f107 0314 	add.w	r3, r7, #20
 80255ea:	4618      	mov	r0, r3
 80255ec:	f7ff facb 	bl	8024b86 <dir_register>
 80255f0:	4603      	mov	r3, r0
 80255f2:	e000      	b.n	80255f6 <f_open+0xca>
 80255f4:	2312      	movs	r3, #18
 80255f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80255fa:	79fb      	ldrb	r3, [r7, #7]
 80255fc:	f043 0308 	orr.w	r3, r3, #8
 8025600:	71fb      	strb	r3, [r7, #7]
 8025602:	e010      	b.n	8025626 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8025604:	7ebb      	ldrb	r3, [r7, #26]
 8025606:	f003 0311 	and.w	r3, r3, #17
 802560a:	2b00      	cmp	r3, #0
 802560c:	d003      	beq.n	8025616 <f_open+0xea>
					res = FR_DENIED;
 802560e:	2307      	movs	r3, #7
 8025610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8025614:	e007      	b.n	8025626 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8025616:	79fb      	ldrb	r3, [r7, #7]
 8025618:	f003 0304 	and.w	r3, r3, #4
 802561c:	2b00      	cmp	r3, #0
 802561e:	d002      	beq.n	8025626 <f_open+0xfa>
 8025620:	2308      	movs	r3, #8
 8025622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8025626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802562a:	2b00      	cmp	r3, #0
 802562c:	d168      	bne.n	8025700 <f_open+0x1d4>
 802562e:	79fb      	ldrb	r3, [r7, #7]
 8025630:	f003 0308 	and.w	r3, r3, #8
 8025634:	2b00      	cmp	r3, #0
 8025636:	d063      	beq.n	8025700 <f_open+0x1d4>
				dw = GET_FATTIME();
 8025638:	f7fd ff3e 	bl	80234b8 <get_fattime>
 802563c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 802563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025640:	330e      	adds	r3, #14
 8025642:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025644:	4618      	mov	r0, r3
 8025646:	f7fe fa81 	bl	8023b4c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 802564a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802564c:	3316      	adds	r3, #22
 802564e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025650:	4618      	mov	r0, r3
 8025652:	f7fe fa7b 	bl	8023b4c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8025656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025658:	330b      	adds	r3, #11
 802565a:	2220      	movs	r2, #32
 802565c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 802565e:	693b      	ldr	r3, [r7, #16]
 8025660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025662:	4611      	mov	r1, r2
 8025664:	4618      	mov	r0, r3
 8025666:	f7ff f9fa 	bl	8024a5e <ld_clust>
 802566a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 802566c:	693b      	ldr	r3, [r7, #16]
 802566e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025670:	2200      	movs	r2, #0
 8025672:	4618      	mov	r0, r3
 8025674:	f7ff fa12 	bl	8024a9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8025678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802567a:	331c      	adds	r3, #28
 802567c:	2100      	movs	r1, #0
 802567e:	4618      	mov	r0, r3
 8025680:	f7fe fa64 	bl	8023b4c <st_dword>
					fs->wflag = 1;
 8025684:	693b      	ldr	r3, [r7, #16]
 8025686:	2201      	movs	r2, #1
 8025688:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 802568a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802568c:	2b00      	cmp	r3, #0
 802568e:	d037      	beq.n	8025700 <f_open+0x1d4>
						dw = fs->winsect;
 8025690:	693b      	ldr	r3, [r7, #16]
 8025692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025694:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8025696:	f107 0314 	add.w	r3, r7, #20
 802569a:	2200      	movs	r2, #0
 802569c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 802569e:	4618      	mov	r0, r3
 80256a0:	f7fe ff25 	bl	80244ee <remove_chain>
 80256a4:	4603      	mov	r3, r0
 80256a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80256aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80256ae:	2b00      	cmp	r3, #0
 80256b0:	d126      	bne.n	8025700 <f_open+0x1d4>
							res = move_window(fs, dw);
 80256b2:	693b      	ldr	r3, [r7, #16]
 80256b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80256b6:	4618      	mov	r0, r3
 80256b8:	f7fe fcd2 	bl	8024060 <move_window>
 80256bc:	4603      	mov	r3, r0
 80256be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80256c2:	693b      	ldr	r3, [r7, #16]
 80256c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80256c6:	3a01      	subs	r2, #1
 80256c8:	611a      	str	r2, [r3, #16]
 80256ca:	e019      	b.n	8025700 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80256cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	d115      	bne.n	8025700 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80256d4:	7ebb      	ldrb	r3, [r7, #26]
 80256d6:	f003 0310 	and.w	r3, r3, #16
 80256da:	2b00      	cmp	r3, #0
 80256dc:	d003      	beq.n	80256e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80256de:	2304      	movs	r3, #4
 80256e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80256e4:	e00c      	b.n	8025700 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80256e6:	79fb      	ldrb	r3, [r7, #7]
 80256e8:	f003 0302 	and.w	r3, r3, #2
 80256ec:	2b00      	cmp	r3, #0
 80256ee:	d007      	beq.n	8025700 <f_open+0x1d4>
 80256f0:	7ebb      	ldrb	r3, [r7, #26]
 80256f2:	f003 0301 	and.w	r3, r3, #1
 80256f6:	2b00      	cmp	r3, #0
 80256f8:	d002      	beq.n	8025700 <f_open+0x1d4>
						res = FR_DENIED;
 80256fa:	2307      	movs	r3, #7
 80256fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8025700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025704:	2b00      	cmp	r3, #0
 8025706:	d128      	bne.n	802575a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8025708:	79fb      	ldrb	r3, [r7, #7]
 802570a:	f003 0308 	and.w	r3, r3, #8
 802570e:	2b00      	cmp	r3, #0
 8025710:	d003      	beq.n	802571a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8025712:	79fb      	ldrb	r3, [r7, #7]
 8025714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025718:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 802571a:	693b      	ldr	r3, [r7, #16]
 802571c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802571e:	68fb      	ldr	r3, [r7, #12]
 8025720:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8025722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025724:	68fb      	ldr	r3, [r7, #12]
 8025726:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8025728:	79fb      	ldrb	r3, [r7, #7]
 802572a:	f023 0301 	bic.w	r3, r3, #1
 802572e:	2b00      	cmp	r3, #0
 8025730:	bf14      	ite	ne
 8025732:	2301      	movne	r3, #1
 8025734:	2300      	moveq	r3, #0
 8025736:	b2db      	uxtb	r3, r3
 8025738:	461a      	mov	r2, r3
 802573a:	f107 0314 	add.w	r3, r7, #20
 802573e:	4611      	mov	r1, r2
 8025740:	4618      	mov	r0, r3
 8025742:	f7fe fb5b 	bl	8023dfc <inc_lock>
 8025746:	4602      	mov	r2, r0
 8025748:	68fb      	ldr	r3, [r7, #12]
 802574a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 802574c:	68fb      	ldr	r3, [r7, #12]
 802574e:	691b      	ldr	r3, [r3, #16]
 8025750:	2b00      	cmp	r3, #0
 8025752:	d102      	bne.n	802575a <f_open+0x22e>
 8025754:	2302      	movs	r3, #2
 8025756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 802575a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802575e:	2b00      	cmp	r3, #0
 8025760:	f040 8095 	bne.w	802588e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8025764:	693b      	ldr	r3, [r7, #16]
 8025766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025768:	4611      	mov	r1, r2
 802576a:	4618      	mov	r0, r3
 802576c:	f7ff f977 	bl	8024a5e <ld_clust>
 8025770:	4602      	mov	r2, r0
 8025772:	68fb      	ldr	r3, [r7, #12]
 8025774:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8025776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025778:	331c      	adds	r3, #28
 802577a:	4618      	mov	r0, r3
 802577c:	f7fe f9a8 	bl	8023ad0 <ld_dword>
 8025780:	4602      	mov	r2, r0
 8025782:	68fb      	ldr	r3, [r7, #12]
 8025784:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8025786:	68fb      	ldr	r3, [r7, #12]
 8025788:	2200      	movs	r2, #0
 802578a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 802578c:	693a      	ldr	r2, [r7, #16]
 802578e:	68fb      	ldr	r3, [r7, #12]
 8025790:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8025792:	693b      	ldr	r3, [r7, #16]
 8025794:	88da      	ldrh	r2, [r3, #6]
 8025796:	68fb      	ldr	r3, [r7, #12]
 8025798:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 802579a:	68fb      	ldr	r3, [r7, #12]
 802579c:	79fa      	ldrb	r2, [r7, #7]
 802579e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80257a0:	68fb      	ldr	r3, [r7, #12]
 80257a2:	2200      	movs	r2, #0
 80257a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80257a6:	68fb      	ldr	r3, [r7, #12]
 80257a8:	2200      	movs	r2, #0
 80257aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80257ac:	68fb      	ldr	r3, [r7, #12]
 80257ae:	2200      	movs	r2, #0
 80257b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80257b2:	68fb      	ldr	r3, [r7, #12]
 80257b4:	3330      	adds	r3, #48	; 0x30
 80257b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80257ba:	2100      	movs	r1, #0
 80257bc:	4618      	mov	r0, r3
 80257be:	f7fe fa12 	bl	8023be6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80257c2:	79fb      	ldrb	r3, [r7, #7]
 80257c4:	f003 0320 	and.w	r3, r3, #32
 80257c8:	2b00      	cmp	r3, #0
 80257ca:	d060      	beq.n	802588e <f_open+0x362>
 80257cc:	68fb      	ldr	r3, [r7, #12]
 80257ce:	68db      	ldr	r3, [r3, #12]
 80257d0:	2b00      	cmp	r3, #0
 80257d2:	d05c      	beq.n	802588e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80257d4:	68fb      	ldr	r3, [r7, #12]
 80257d6:	68da      	ldr	r2, [r3, #12]
 80257d8:	68fb      	ldr	r3, [r7, #12]
 80257da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80257dc:	693b      	ldr	r3, [r7, #16]
 80257de:	895b      	ldrh	r3, [r3, #10]
 80257e0:	025b      	lsls	r3, r3, #9
 80257e2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80257e4:	68fb      	ldr	r3, [r7, #12]
 80257e6:	689b      	ldr	r3, [r3, #8]
 80257e8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80257ea:	68fb      	ldr	r3, [r7, #12]
 80257ec:	68db      	ldr	r3, [r3, #12]
 80257ee:	657b      	str	r3, [r7, #84]	; 0x54
 80257f0:	e016      	b.n	8025820 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80257f2:	68fb      	ldr	r3, [r7, #12]
 80257f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80257f6:	4618      	mov	r0, r3
 80257f8:	f7fe fced 	bl	80241d6 <get_fat>
 80257fc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80257fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025800:	2b01      	cmp	r3, #1
 8025802:	d802      	bhi.n	802580a <f_open+0x2de>
 8025804:	2302      	movs	r3, #2
 8025806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 802580a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025810:	d102      	bne.n	8025818 <f_open+0x2ec>
 8025812:	2301      	movs	r3, #1
 8025814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8025818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802581a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802581c:	1ad3      	subs	r3, r2, r3
 802581e:	657b      	str	r3, [r7, #84]	; 0x54
 8025820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025824:	2b00      	cmp	r3, #0
 8025826:	d103      	bne.n	8025830 <f_open+0x304>
 8025828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802582a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802582c:	429a      	cmp	r2, r3
 802582e:	d8e0      	bhi.n	80257f2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8025830:	68fb      	ldr	r3, [r7, #12]
 8025832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8025834:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8025836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802583a:	2b00      	cmp	r3, #0
 802583c:	d127      	bne.n	802588e <f_open+0x362>
 802583e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8025844:	2b00      	cmp	r3, #0
 8025846:	d022      	beq.n	802588e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8025848:	693b      	ldr	r3, [r7, #16]
 802584a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802584c:	4618      	mov	r0, r3
 802584e:	f7fe fca3 	bl	8024198 <clust2sect>
 8025852:	6478      	str	r0, [r7, #68]	; 0x44
 8025854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025856:	2b00      	cmp	r3, #0
 8025858:	d103      	bne.n	8025862 <f_open+0x336>
						res = FR_INT_ERR;
 802585a:	2302      	movs	r3, #2
 802585c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8025860:	e015      	b.n	802588e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8025862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025864:	0a5a      	lsrs	r2, r3, #9
 8025866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025868:	441a      	add	r2, r3
 802586a:	68fb      	ldr	r3, [r7, #12]
 802586c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 802586e:	693b      	ldr	r3, [r7, #16]
 8025870:	7858      	ldrb	r0, [r3, #1]
 8025872:	68fb      	ldr	r3, [r7, #12]
 8025874:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8025878:	68fb      	ldr	r3, [r7, #12]
 802587a:	6a1a      	ldr	r2, [r3, #32]
 802587c:	2301      	movs	r3, #1
 802587e:	f7fe f8b1 	bl	80239e4 <disk_read>
 8025882:	4603      	mov	r3, r0
 8025884:	2b00      	cmp	r3, #0
 8025886:	d002      	beq.n	802588e <f_open+0x362>
 8025888:	2301      	movs	r3, #1
 802588a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 802588e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025892:	2b00      	cmp	r3, #0
 8025894:	d002      	beq.n	802589c <f_open+0x370>
 8025896:	68fb      	ldr	r3, [r7, #12]
 8025898:	2200      	movs	r2, #0
 802589a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 802589c:	693b      	ldr	r3, [r7, #16]
 802589e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80258a2:	4611      	mov	r1, r2
 80258a4:	4618      	mov	r0, r3
 80258a6:	f7fe fa10 	bl	8023cca <unlock_fs>
 80258aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80258ae:	4618      	mov	r0, r3
 80258b0:	3760      	adds	r7, #96	; 0x60
 80258b2:	46bd      	mov	sp, r7
 80258b4:	bd80      	pop	{r7, pc}

080258b6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80258b6:	b580      	push	{r7, lr}
 80258b8:	b08c      	sub	sp, #48	; 0x30
 80258ba:	af00      	add	r7, sp, #0
 80258bc:	60f8      	str	r0, [r7, #12]
 80258be:	60b9      	str	r1, [r7, #8]
 80258c0:	607a      	str	r2, [r7, #4]
 80258c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80258c4:	68bb      	ldr	r3, [r7, #8]
 80258c6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80258c8:	683b      	ldr	r3, [r7, #0]
 80258ca:	2200      	movs	r2, #0
 80258cc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80258ce:	68fb      	ldr	r3, [r7, #12]
 80258d0:	f107 0210 	add.w	r2, r7, #16
 80258d4:	4611      	mov	r1, r2
 80258d6:	4618      	mov	r0, r3
 80258d8:	f7ff fd7c 	bl	80253d4 <validate>
 80258dc:	4603      	mov	r3, r0
 80258de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80258e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80258e6:	2b00      	cmp	r3, #0
 80258e8:	d107      	bne.n	80258fa <f_write+0x44>
 80258ea:	68fb      	ldr	r3, [r7, #12]
 80258ec:	7d5b      	ldrb	r3, [r3, #21]
 80258ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80258f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80258f6:	2b00      	cmp	r3, #0
 80258f8:	d009      	beq.n	802590e <f_write+0x58>
 80258fa:	693b      	ldr	r3, [r7, #16]
 80258fc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8025900:	4611      	mov	r1, r2
 8025902:	4618      	mov	r0, r3
 8025904:	f7fe f9e1 	bl	8023cca <unlock_fs>
 8025908:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802590c:	e173      	b.n	8025bf6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 802590e:	68fb      	ldr	r3, [r7, #12]
 8025910:	7d1b      	ldrb	r3, [r3, #20]
 8025912:	f003 0302 	and.w	r3, r3, #2
 8025916:	2b00      	cmp	r3, #0
 8025918:	d106      	bne.n	8025928 <f_write+0x72>
 802591a:	693b      	ldr	r3, [r7, #16]
 802591c:	2107      	movs	r1, #7
 802591e:	4618      	mov	r0, r3
 8025920:	f7fe f9d3 	bl	8023cca <unlock_fs>
 8025924:	2307      	movs	r3, #7
 8025926:	e166      	b.n	8025bf6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8025928:	68fb      	ldr	r3, [r7, #12]
 802592a:	699a      	ldr	r2, [r3, #24]
 802592c:	687b      	ldr	r3, [r7, #4]
 802592e:	441a      	add	r2, r3
 8025930:	68fb      	ldr	r3, [r7, #12]
 8025932:	699b      	ldr	r3, [r3, #24]
 8025934:	429a      	cmp	r2, r3
 8025936:	f080 814b 	bcs.w	8025bd0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 802593a:	68fb      	ldr	r3, [r7, #12]
 802593c:	699b      	ldr	r3, [r3, #24]
 802593e:	43db      	mvns	r3, r3
 8025940:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8025942:	e145      	b.n	8025bd0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8025944:	68fb      	ldr	r3, [r7, #12]
 8025946:	699b      	ldr	r3, [r3, #24]
 8025948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802594c:	2b00      	cmp	r3, #0
 802594e:	f040 8101 	bne.w	8025b54 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8025952:	68fb      	ldr	r3, [r7, #12]
 8025954:	699b      	ldr	r3, [r3, #24]
 8025956:	0a5b      	lsrs	r3, r3, #9
 8025958:	693a      	ldr	r2, [r7, #16]
 802595a:	8952      	ldrh	r2, [r2, #10]
 802595c:	3a01      	subs	r2, #1
 802595e:	4013      	ands	r3, r2
 8025960:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8025962:	69bb      	ldr	r3, [r7, #24]
 8025964:	2b00      	cmp	r3, #0
 8025966:	d14d      	bne.n	8025a04 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8025968:	68fb      	ldr	r3, [r7, #12]
 802596a:	699b      	ldr	r3, [r3, #24]
 802596c:	2b00      	cmp	r3, #0
 802596e:	d10c      	bne.n	802598a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8025970:	68fb      	ldr	r3, [r7, #12]
 8025972:	689b      	ldr	r3, [r3, #8]
 8025974:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8025976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025978:	2b00      	cmp	r3, #0
 802597a:	d11a      	bne.n	80259b2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 802597c:	68fb      	ldr	r3, [r7, #12]
 802597e:	2100      	movs	r1, #0
 8025980:	4618      	mov	r0, r3
 8025982:	f7fe fe19 	bl	80245b8 <create_chain>
 8025986:	62b8      	str	r0, [r7, #40]	; 0x28
 8025988:	e013      	b.n	80259b2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 802598a:	68fb      	ldr	r3, [r7, #12]
 802598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802598e:	2b00      	cmp	r3, #0
 8025990:	d007      	beq.n	80259a2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8025992:	68fb      	ldr	r3, [r7, #12]
 8025994:	699b      	ldr	r3, [r3, #24]
 8025996:	4619      	mov	r1, r3
 8025998:	68f8      	ldr	r0, [r7, #12]
 802599a:	f7fe fea5 	bl	80246e8 <clmt_clust>
 802599e:	62b8      	str	r0, [r7, #40]	; 0x28
 80259a0:	e007      	b.n	80259b2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80259a2:	68fa      	ldr	r2, [r7, #12]
 80259a4:	68fb      	ldr	r3, [r7, #12]
 80259a6:	69db      	ldr	r3, [r3, #28]
 80259a8:	4619      	mov	r1, r3
 80259aa:	4610      	mov	r0, r2
 80259ac:	f7fe fe04 	bl	80245b8 <create_chain>
 80259b0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80259b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80259b4:	2b00      	cmp	r3, #0
 80259b6:	f000 8110 	beq.w	8025bda <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80259ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80259bc:	2b01      	cmp	r3, #1
 80259be:	d109      	bne.n	80259d4 <f_write+0x11e>
 80259c0:	68fb      	ldr	r3, [r7, #12]
 80259c2:	2202      	movs	r2, #2
 80259c4:	755a      	strb	r2, [r3, #21]
 80259c6:	693b      	ldr	r3, [r7, #16]
 80259c8:	2102      	movs	r1, #2
 80259ca:	4618      	mov	r0, r3
 80259cc:	f7fe f97d 	bl	8023cca <unlock_fs>
 80259d0:	2302      	movs	r3, #2
 80259d2:	e110      	b.n	8025bf6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80259d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80259d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80259da:	d109      	bne.n	80259f0 <f_write+0x13a>
 80259dc:	68fb      	ldr	r3, [r7, #12]
 80259de:	2201      	movs	r2, #1
 80259e0:	755a      	strb	r2, [r3, #21]
 80259e2:	693b      	ldr	r3, [r7, #16]
 80259e4:	2101      	movs	r1, #1
 80259e6:	4618      	mov	r0, r3
 80259e8:	f7fe f96f 	bl	8023cca <unlock_fs>
 80259ec:	2301      	movs	r3, #1
 80259ee:	e102      	b.n	8025bf6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80259f0:	68fb      	ldr	r3, [r7, #12]
 80259f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80259f4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80259f6:	68fb      	ldr	r3, [r7, #12]
 80259f8:	689b      	ldr	r3, [r3, #8]
 80259fa:	2b00      	cmp	r3, #0
 80259fc:	d102      	bne.n	8025a04 <f_write+0x14e>
 80259fe:	68fb      	ldr	r3, [r7, #12]
 8025a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025a02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8025a04:	68fb      	ldr	r3, [r7, #12]
 8025a06:	7d1b      	ldrb	r3, [r3, #20]
 8025a08:	b25b      	sxtb	r3, r3
 8025a0a:	2b00      	cmp	r3, #0
 8025a0c:	da1d      	bge.n	8025a4a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8025a0e:	693b      	ldr	r3, [r7, #16]
 8025a10:	7858      	ldrb	r0, [r3, #1]
 8025a12:	68fb      	ldr	r3, [r7, #12]
 8025a14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8025a18:	68fb      	ldr	r3, [r7, #12]
 8025a1a:	6a1a      	ldr	r2, [r3, #32]
 8025a1c:	2301      	movs	r3, #1
 8025a1e:	f7fe f801 	bl	8023a24 <disk_write>
 8025a22:	4603      	mov	r3, r0
 8025a24:	2b00      	cmp	r3, #0
 8025a26:	d009      	beq.n	8025a3c <f_write+0x186>
 8025a28:	68fb      	ldr	r3, [r7, #12]
 8025a2a:	2201      	movs	r2, #1
 8025a2c:	755a      	strb	r2, [r3, #21]
 8025a2e:	693b      	ldr	r3, [r7, #16]
 8025a30:	2101      	movs	r1, #1
 8025a32:	4618      	mov	r0, r3
 8025a34:	f7fe f949 	bl	8023cca <unlock_fs>
 8025a38:	2301      	movs	r3, #1
 8025a3a:	e0dc      	b.n	8025bf6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8025a3c:	68fb      	ldr	r3, [r7, #12]
 8025a3e:	7d1b      	ldrb	r3, [r3, #20]
 8025a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025a44:	b2da      	uxtb	r2, r3
 8025a46:	68fb      	ldr	r3, [r7, #12]
 8025a48:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8025a4a:	693a      	ldr	r2, [r7, #16]
 8025a4c:	68fb      	ldr	r3, [r7, #12]
 8025a4e:	69db      	ldr	r3, [r3, #28]
 8025a50:	4619      	mov	r1, r3
 8025a52:	4610      	mov	r0, r2
 8025a54:	f7fe fba0 	bl	8024198 <clust2sect>
 8025a58:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8025a5a:	697b      	ldr	r3, [r7, #20]
 8025a5c:	2b00      	cmp	r3, #0
 8025a5e:	d109      	bne.n	8025a74 <f_write+0x1be>
 8025a60:	68fb      	ldr	r3, [r7, #12]
 8025a62:	2202      	movs	r2, #2
 8025a64:	755a      	strb	r2, [r3, #21]
 8025a66:	693b      	ldr	r3, [r7, #16]
 8025a68:	2102      	movs	r1, #2
 8025a6a:	4618      	mov	r0, r3
 8025a6c:	f7fe f92d 	bl	8023cca <unlock_fs>
 8025a70:	2302      	movs	r3, #2
 8025a72:	e0c0      	b.n	8025bf6 <f_write+0x340>
			sect += csect;
 8025a74:	697a      	ldr	r2, [r7, #20]
 8025a76:	69bb      	ldr	r3, [r7, #24]
 8025a78:	4413      	add	r3, r2
 8025a7a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8025a7c:	687b      	ldr	r3, [r7, #4]
 8025a7e:	0a5b      	lsrs	r3, r3, #9
 8025a80:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8025a82:	6a3b      	ldr	r3, [r7, #32]
 8025a84:	2b00      	cmp	r3, #0
 8025a86:	d041      	beq.n	8025b0c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8025a88:	69ba      	ldr	r2, [r7, #24]
 8025a8a:	6a3b      	ldr	r3, [r7, #32]
 8025a8c:	4413      	add	r3, r2
 8025a8e:	693a      	ldr	r2, [r7, #16]
 8025a90:	8952      	ldrh	r2, [r2, #10]
 8025a92:	4293      	cmp	r3, r2
 8025a94:	d905      	bls.n	8025aa2 <f_write+0x1ec>
					cc = fs->csize - csect;
 8025a96:	693b      	ldr	r3, [r7, #16]
 8025a98:	895b      	ldrh	r3, [r3, #10]
 8025a9a:	461a      	mov	r2, r3
 8025a9c:	69bb      	ldr	r3, [r7, #24]
 8025a9e:	1ad3      	subs	r3, r2, r3
 8025aa0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8025aa2:	693b      	ldr	r3, [r7, #16]
 8025aa4:	7858      	ldrb	r0, [r3, #1]
 8025aa6:	6a3b      	ldr	r3, [r7, #32]
 8025aa8:	697a      	ldr	r2, [r7, #20]
 8025aaa:	69f9      	ldr	r1, [r7, #28]
 8025aac:	f7fd ffba 	bl	8023a24 <disk_write>
 8025ab0:	4603      	mov	r3, r0
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	d009      	beq.n	8025aca <f_write+0x214>
 8025ab6:	68fb      	ldr	r3, [r7, #12]
 8025ab8:	2201      	movs	r2, #1
 8025aba:	755a      	strb	r2, [r3, #21]
 8025abc:	693b      	ldr	r3, [r7, #16]
 8025abe:	2101      	movs	r1, #1
 8025ac0:	4618      	mov	r0, r3
 8025ac2:	f7fe f902 	bl	8023cca <unlock_fs>
 8025ac6:	2301      	movs	r3, #1
 8025ac8:	e095      	b.n	8025bf6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8025aca:	68fb      	ldr	r3, [r7, #12]
 8025acc:	6a1a      	ldr	r2, [r3, #32]
 8025ace:	697b      	ldr	r3, [r7, #20]
 8025ad0:	1ad3      	subs	r3, r2, r3
 8025ad2:	6a3a      	ldr	r2, [r7, #32]
 8025ad4:	429a      	cmp	r2, r3
 8025ad6:	d915      	bls.n	8025b04 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8025ad8:	68fb      	ldr	r3, [r7, #12]
 8025ada:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8025ade:	68fb      	ldr	r3, [r7, #12]
 8025ae0:	6a1a      	ldr	r2, [r3, #32]
 8025ae2:	697b      	ldr	r3, [r7, #20]
 8025ae4:	1ad3      	subs	r3, r2, r3
 8025ae6:	025b      	lsls	r3, r3, #9
 8025ae8:	69fa      	ldr	r2, [r7, #28]
 8025aea:	4413      	add	r3, r2
 8025aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8025af0:	4619      	mov	r1, r3
 8025af2:	f7fe f857 	bl	8023ba4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8025af6:	68fb      	ldr	r3, [r7, #12]
 8025af8:	7d1b      	ldrb	r3, [r3, #20]
 8025afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025afe:	b2da      	uxtb	r2, r3
 8025b00:	68fb      	ldr	r3, [r7, #12]
 8025b02:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8025b04:	6a3b      	ldr	r3, [r7, #32]
 8025b06:	025b      	lsls	r3, r3, #9
 8025b08:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8025b0a:	e044      	b.n	8025b96 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8025b0c:	68fb      	ldr	r3, [r7, #12]
 8025b0e:	6a1b      	ldr	r3, [r3, #32]
 8025b10:	697a      	ldr	r2, [r7, #20]
 8025b12:	429a      	cmp	r2, r3
 8025b14:	d01b      	beq.n	8025b4e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8025b16:	68fb      	ldr	r3, [r7, #12]
 8025b18:	699a      	ldr	r2, [r3, #24]
 8025b1a:	68fb      	ldr	r3, [r7, #12]
 8025b1c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8025b1e:	429a      	cmp	r2, r3
 8025b20:	d215      	bcs.n	8025b4e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8025b22:	693b      	ldr	r3, [r7, #16]
 8025b24:	7858      	ldrb	r0, [r3, #1]
 8025b26:	68fb      	ldr	r3, [r7, #12]
 8025b28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8025b2c:	2301      	movs	r3, #1
 8025b2e:	697a      	ldr	r2, [r7, #20]
 8025b30:	f7fd ff58 	bl	80239e4 <disk_read>
 8025b34:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8025b36:	2b00      	cmp	r3, #0
 8025b38:	d009      	beq.n	8025b4e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8025b3a:	68fb      	ldr	r3, [r7, #12]
 8025b3c:	2201      	movs	r2, #1
 8025b3e:	755a      	strb	r2, [r3, #21]
 8025b40:	693b      	ldr	r3, [r7, #16]
 8025b42:	2101      	movs	r1, #1
 8025b44:	4618      	mov	r0, r3
 8025b46:	f7fe f8c0 	bl	8023cca <unlock_fs>
 8025b4a:	2301      	movs	r3, #1
 8025b4c:	e053      	b.n	8025bf6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8025b4e:	68fb      	ldr	r3, [r7, #12]
 8025b50:	697a      	ldr	r2, [r7, #20]
 8025b52:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8025b54:	68fb      	ldr	r3, [r7, #12]
 8025b56:	699b      	ldr	r3, [r3, #24]
 8025b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8025b5c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8025b60:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8025b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025b64:	687b      	ldr	r3, [r7, #4]
 8025b66:	429a      	cmp	r2, r3
 8025b68:	d901      	bls.n	8025b6e <f_write+0x2b8>
 8025b6a:	687b      	ldr	r3, [r7, #4]
 8025b6c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8025b6e:	68fb      	ldr	r3, [r7, #12]
 8025b70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8025b74:	68fb      	ldr	r3, [r7, #12]
 8025b76:	699b      	ldr	r3, [r3, #24]
 8025b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8025b7c:	4413      	add	r3, r2
 8025b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025b80:	69f9      	ldr	r1, [r7, #28]
 8025b82:	4618      	mov	r0, r3
 8025b84:	f7fe f80e 	bl	8023ba4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8025b88:	68fb      	ldr	r3, [r7, #12]
 8025b8a:	7d1b      	ldrb	r3, [r3, #20]
 8025b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8025b90:	b2da      	uxtb	r2, r3
 8025b92:	68fb      	ldr	r3, [r7, #12]
 8025b94:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8025b96:	69fa      	ldr	r2, [r7, #28]
 8025b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b9a:	4413      	add	r3, r2
 8025b9c:	61fb      	str	r3, [r7, #28]
 8025b9e:	68fb      	ldr	r3, [r7, #12]
 8025ba0:	699a      	ldr	r2, [r3, #24]
 8025ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ba4:	441a      	add	r2, r3
 8025ba6:	68fb      	ldr	r3, [r7, #12]
 8025ba8:	619a      	str	r2, [r3, #24]
 8025baa:	68fb      	ldr	r3, [r7, #12]
 8025bac:	68da      	ldr	r2, [r3, #12]
 8025bae:	68fb      	ldr	r3, [r7, #12]
 8025bb0:	699b      	ldr	r3, [r3, #24]
 8025bb2:	429a      	cmp	r2, r3
 8025bb4:	bf38      	it	cc
 8025bb6:	461a      	movcc	r2, r3
 8025bb8:	68fb      	ldr	r3, [r7, #12]
 8025bba:	60da      	str	r2, [r3, #12]
 8025bbc:	683b      	ldr	r3, [r7, #0]
 8025bbe:	681a      	ldr	r2, [r3, #0]
 8025bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025bc2:	441a      	add	r2, r3
 8025bc4:	683b      	ldr	r3, [r7, #0]
 8025bc6:	601a      	str	r2, [r3, #0]
 8025bc8:	687a      	ldr	r2, [r7, #4]
 8025bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025bcc:	1ad3      	subs	r3, r2, r3
 8025bce:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8025bd0:	687b      	ldr	r3, [r7, #4]
 8025bd2:	2b00      	cmp	r3, #0
 8025bd4:	f47f aeb6 	bne.w	8025944 <f_write+0x8e>
 8025bd8:	e000      	b.n	8025bdc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8025bda:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8025bdc:	68fb      	ldr	r3, [r7, #12]
 8025bde:	7d1b      	ldrb	r3, [r3, #20]
 8025be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025be4:	b2da      	uxtb	r2, r3
 8025be6:	68fb      	ldr	r3, [r7, #12]
 8025be8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8025bea:	693b      	ldr	r3, [r7, #16]
 8025bec:	2100      	movs	r1, #0
 8025bee:	4618      	mov	r0, r3
 8025bf0:	f7fe f86b 	bl	8023cca <unlock_fs>
 8025bf4:	2300      	movs	r3, #0
}
 8025bf6:	4618      	mov	r0, r3
 8025bf8:	3730      	adds	r7, #48	; 0x30
 8025bfa:	46bd      	mov	sp, r7
 8025bfc:	bd80      	pop	{r7, pc}

08025bfe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8025bfe:	b580      	push	{r7, lr}
 8025c00:	b086      	sub	sp, #24
 8025c02:	af00      	add	r7, sp, #0
 8025c04:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8025c06:	687b      	ldr	r3, [r7, #4]
 8025c08:	f107 0208 	add.w	r2, r7, #8
 8025c0c:	4611      	mov	r1, r2
 8025c0e:	4618      	mov	r0, r3
 8025c10:	f7ff fbe0 	bl	80253d4 <validate>
 8025c14:	4603      	mov	r3, r0
 8025c16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8025c18:	7dfb      	ldrb	r3, [r7, #23]
 8025c1a:	2b00      	cmp	r3, #0
 8025c1c:	d16d      	bne.n	8025cfa <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8025c1e:	687b      	ldr	r3, [r7, #4]
 8025c20:	7d1b      	ldrb	r3, [r3, #20]
 8025c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025c26:	2b00      	cmp	r3, #0
 8025c28:	d067      	beq.n	8025cfa <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8025c2a:	687b      	ldr	r3, [r7, #4]
 8025c2c:	7d1b      	ldrb	r3, [r3, #20]
 8025c2e:	b25b      	sxtb	r3, r3
 8025c30:	2b00      	cmp	r3, #0
 8025c32:	da1a      	bge.n	8025c6a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8025c34:	68bb      	ldr	r3, [r7, #8]
 8025c36:	7858      	ldrb	r0, [r3, #1]
 8025c38:	687b      	ldr	r3, [r7, #4]
 8025c3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8025c3e:	687b      	ldr	r3, [r7, #4]
 8025c40:	6a1a      	ldr	r2, [r3, #32]
 8025c42:	2301      	movs	r3, #1
 8025c44:	f7fd feee 	bl	8023a24 <disk_write>
 8025c48:	4603      	mov	r3, r0
 8025c4a:	2b00      	cmp	r3, #0
 8025c4c:	d006      	beq.n	8025c5c <f_sync+0x5e>
 8025c4e:	68bb      	ldr	r3, [r7, #8]
 8025c50:	2101      	movs	r1, #1
 8025c52:	4618      	mov	r0, r3
 8025c54:	f7fe f839 	bl	8023cca <unlock_fs>
 8025c58:	2301      	movs	r3, #1
 8025c5a:	e055      	b.n	8025d08 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8025c5c:	687b      	ldr	r3, [r7, #4]
 8025c5e:	7d1b      	ldrb	r3, [r3, #20]
 8025c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025c64:	b2da      	uxtb	r2, r3
 8025c66:	687b      	ldr	r3, [r7, #4]
 8025c68:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8025c6a:	f7fd fc25 	bl	80234b8 <get_fattime>
 8025c6e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8025c70:	68ba      	ldr	r2, [r7, #8]
 8025c72:	687b      	ldr	r3, [r7, #4]
 8025c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c76:	4619      	mov	r1, r3
 8025c78:	4610      	mov	r0, r2
 8025c7a:	f7fe f9f1 	bl	8024060 <move_window>
 8025c7e:	4603      	mov	r3, r0
 8025c80:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8025c82:	7dfb      	ldrb	r3, [r7, #23]
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	d138      	bne.n	8025cfa <f_sync+0xfc>
					dir = fp->dir_ptr;
 8025c88:	687b      	ldr	r3, [r7, #4]
 8025c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025c8c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8025c8e:	68fb      	ldr	r3, [r7, #12]
 8025c90:	330b      	adds	r3, #11
 8025c92:	781a      	ldrb	r2, [r3, #0]
 8025c94:	68fb      	ldr	r3, [r7, #12]
 8025c96:	330b      	adds	r3, #11
 8025c98:	f042 0220 	orr.w	r2, r2, #32
 8025c9c:	b2d2      	uxtb	r2, r2
 8025c9e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8025ca0:	687b      	ldr	r3, [r7, #4]
 8025ca2:	6818      	ldr	r0, [r3, #0]
 8025ca4:	687b      	ldr	r3, [r7, #4]
 8025ca6:	689b      	ldr	r3, [r3, #8]
 8025ca8:	461a      	mov	r2, r3
 8025caa:	68f9      	ldr	r1, [r7, #12]
 8025cac:	f7fe fef6 	bl	8024a9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8025cb0:	68fb      	ldr	r3, [r7, #12]
 8025cb2:	f103 021c 	add.w	r2, r3, #28
 8025cb6:	687b      	ldr	r3, [r7, #4]
 8025cb8:	68db      	ldr	r3, [r3, #12]
 8025cba:	4619      	mov	r1, r3
 8025cbc:	4610      	mov	r0, r2
 8025cbe:	f7fd ff45 	bl	8023b4c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8025cc2:	68fb      	ldr	r3, [r7, #12]
 8025cc4:	3316      	adds	r3, #22
 8025cc6:	6939      	ldr	r1, [r7, #16]
 8025cc8:	4618      	mov	r0, r3
 8025cca:	f7fd ff3f 	bl	8023b4c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8025cce:	68fb      	ldr	r3, [r7, #12]
 8025cd0:	3312      	adds	r3, #18
 8025cd2:	2100      	movs	r1, #0
 8025cd4:	4618      	mov	r0, r3
 8025cd6:	f7fd ff1e 	bl	8023b16 <st_word>
					fs->wflag = 1;
 8025cda:	68bb      	ldr	r3, [r7, #8]
 8025cdc:	2201      	movs	r2, #1
 8025cde:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8025ce0:	68bb      	ldr	r3, [r7, #8]
 8025ce2:	4618      	mov	r0, r3
 8025ce4:	f7fe f9ea 	bl	80240bc <sync_fs>
 8025ce8:	4603      	mov	r3, r0
 8025cea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8025cec:	687b      	ldr	r3, [r7, #4]
 8025cee:	7d1b      	ldrb	r3, [r3, #20]
 8025cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025cf4:	b2da      	uxtb	r2, r3
 8025cf6:	687b      	ldr	r3, [r7, #4]
 8025cf8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8025cfa:	68bb      	ldr	r3, [r7, #8]
 8025cfc:	7dfa      	ldrb	r2, [r7, #23]
 8025cfe:	4611      	mov	r1, r2
 8025d00:	4618      	mov	r0, r3
 8025d02:	f7fd ffe2 	bl	8023cca <unlock_fs>
 8025d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8025d08:	4618      	mov	r0, r3
 8025d0a:	3718      	adds	r7, #24
 8025d0c:	46bd      	mov	sp, r7
 8025d0e:	bd80      	pop	{r7, pc}

08025d10 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8025d10:	b580      	push	{r7, lr}
 8025d12:	b084      	sub	sp, #16
 8025d14:	af00      	add	r7, sp, #0
 8025d16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8025d18:	6878      	ldr	r0, [r7, #4]
 8025d1a:	f7ff ff70 	bl	8025bfe <f_sync>
 8025d1e:	4603      	mov	r3, r0
 8025d20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8025d22:	7bfb      	ldrb	r3, [r7, #15]
 8025d24:	2b00      	cmp	r3, #0
 8025d26:	d11d      	bne.n	8025d64 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8025d28:	687b      	ldr	r3, [r7, #4]
 8025d2a:	f107 0208 	add.w	r2, r7, #8
 8025d2e:	4611      	mov	r1, r2
 8025d30:	4618      	mov	r0, r3
 8025d32:	f7ff fb4f 	bl	80253d4 <validate>
 8025d36:	4603      	mov	r3, r0
 8025d38:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8025d3a:	7bfb      	ldrb	r3, [r7, #15]
 8025d3c:	2b00      	cmp	r3, #0
 8025d3e:	d111      	bne.n	8025d64 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8025d40:	687b      	ldr	r3, [r7, #4]
 8025d42:	691b      	ldr	r3, [r3, #16]
 8025d44:	4618      	mov	r0, r3
 8025d46:	f7fe f8e7 	bl	8023f18 <dec_lock>
 8025d4a:	4603      	mov	r3, r0
 8025d4c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8025d4e:	7bfb      	ldrb	r3, [r7, #15]
 8025d50:	2b00      	cmp	r3, #0
 8025d52:	d102      	bne.n	8025d5a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8025d54:	687b      	ldr	r3, [r7, #4]
 8025d56:	2200      	movs	r2, #0
 8025d58:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8025d5a:	68bb      	ldr	r3, [r7, #8]
 8025d5c:	2100      	movs	r1, #0
 8025d5e:	4618      	mov	r0, r3
 8025d60:	f7fd ffb3 	bl	8023cca <unlock_fs>
#endif
		}
	}
	return res;
 8025d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8025d66:	4618      	mov	r0, r3
 8025d68:	3710      	adds	r7, #16
 8025d6a:	46bd      	mov	sp, r7
 8025d6c:	bd80      	pop	{r7, pc}
	...

08025d70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8025d70:	b480      	push	{r7}
 8025d72:	b087      	sub	sp, #28
 8025d74:	af00      	add	r7, sp, #0
 8025d76:	60f8      	str	r0, [r7, #12]
 8025d78:	60b9      	str	r1, [r7, #8]
 8025d7a:	4613      	mov	r3, r2
 8025d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8025d7e:	2301      	movs	r3, #1
 8025d80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8025d82:	2300      	movs	r3, #0
 8025d84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8025d86:	4b1f      	ldr	r3, [pc, #124]	; (8025e04 <FATFS_LinkDriverEx+0x94>)
 8025d88:	7a5b      	ldrb	r3, [r3, #9]
 8025d8a:	b2db      	uxtb	r3, r3
 8025d8c:	2b00      	cmp	r3, #0
 8025d8e:	d131      	bne.n	8025df4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8025d90:	4b1c      	ldr	r3, [pc, #112]	; (8025e04 <FATFS_LinkDriverEx+0x94>)
 8025d92:	7a5b      	ldrb	r3, [r3, #9]
 8025d94:	b2db      	uxtb	r3, r3
 8025d96:	461a      	mov	r2, r3
 8025d98:	4b1a      	ldr	r3, [pc, #104]	; (8025e04 <FATFS_LinkDriverEx+0x94>)
 8025d9a:	2100      	movs	r1, #0
 8025d9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8025d9e:	4b19      	ldr	r3, [pc, #100]	; (8025e04 <FATFS_LinkDriverEx+0x94>)
 8025da0:	7a5b      	ldrb	r3, [r3, #9]
 8025da2:	b2db      	uxtb	r3, r3
 8025da4:	4a17      	ldr	r2, [pc, #92]	; (8025e04 <FATFS_LinkDriverEx+0x94>)
 8025da6:	009b      	lsls	r3, r3, #2
 8025da8:	4413      	add	r3, r2
 8025daa:	68fa      	ldr	r2, [r7, #12]
 8025dac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8025dae:	4b15      	ldr	r3, [pc, #84]	; (8025e04 <FATFS_LinkDriverEx+0x94>)
 8025db0:	7a5b      	ldrb	r3, [r3, #9]
 8025db2:	b2db      	uxtb	r3, r3
 8025db4:	461a      	mov	r2, r3
 8025db6:	4b13      	ldr	r3, [pc, #76]	; (8025e04 <FATFS_LinkDriverEx+0x94>)
 8025db8:	4413      	add	r3, r2
 8025dba:	79fa      	ldrb	r2, [r7, #7]
 8025dbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8025dbe:	4b11      	ldr	r3, [pc, #68]	; (8025e04 <FATFS_LinkDriverEx+0x94>)
 8025dc0:	7a5b      	ldrb	r3, [r3, #9]
 8025dc2:	b2db      	uxtb	r3, r3
 8025dc4:	1c5a      	adds	r2, r3, #1
 8025dc6:	b2d1      	uxtb	r1, r2
 8025dc8:	4a0e      	ldr	r2, [pc, #56]	; (8025e04 <FATFS_LinkDriverEx+0x94>)
 8025dca:	7251      	strb	r1, [r2, #9]
 8025dcc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8025dce:	7dbb      	ldrb	r3, [r7, #22]
 8025dd0:	3330      	adds	r3, #48	; 0x30
 8025dd2:	b2da      	uxtb	r2, r3
 8025dd4:	68bb      	ldr	r3, [r7, #8]
 8025dd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8025dd8:	68bb      	ldr	r3, [r7, #8]
 8025dda:	3301      	adds	r3, #1
 8025ddc:	223a      	movs	r2, #58	; 0x3a
 8025dde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8025de0:	68bb      	ldr	r3, [r7, #8]
 8025de2:	3302      	adds	r3, #2
 8025de4:	222f      	movs	r2, #47	; 0x2f
 8025de6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8025de8:	68bb      	ldr	r3, [r7, #8]
 8025dea:	3303      	adds	r3, #3
 8025dec:	2200      	movs	r2, #0
 8025dee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8025df0:	2300      	movs	r3, #0
 8025df2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8025df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8025df6:	4618      	mov	r0, r3
 8025df8:	371c      	adds	r7, #28
 8025dfa:	46bd      	mov	sp, r7
 8025dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e00:	4770      	bx	lr
 8025e02:	bf00      	nop
 8025e04:	24001420 	.word	0x24001420

08025e08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8025e08:	b580      	push	{r7, lr}
 8025e0a:	b082      	sub	sp, #8
 8025e0c:	af00      	add	r7, sp, #0
 8025e0e:	6078      	str	r0, [r7, #4]
 8025e10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8025e12:	2200      	movs	r2, #0
 8025e14:	6839      	ldr	r1, [r7, #0]
 8025e16:	6878      	ldr	r0, [r7, #4]
 8025e18:	f7ff ffaa 	bl	8025d70 <FATFS_LinkDriverEx>
 8025e1c:	4603      	mov	r3, r0
}
 8025e1e:	4618      	mov	r0, r3
 8025e20:	3708      	adds	r7, #8
 8025e22:	46bd      	mov	sp, r7
 8025e24:	bd80      	pop	{r7, pc}

08025e26 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8025e26:	b580      	push	{r7, lr}
 8025e28:	b084      	sub	sp, #16
 8025e2a:	af00      	add	r7, sp, #0
 8025e2c:	4603      	mov	r3, r0
 8025e2e:	6039      	str	r1, [r7, #0]
 8025e30:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8025e32:	2200      	movs	r2, #0
 8025e34:	2101      	movs	r1, #1
 8025e36:	2001      	movs	r0, #1
 8025e38:	f000 fbbe 	bl	80265b8 <osSemaphoreNew>
 8025e3c:	4602      	mov	r2, r0
 8025e3e:	683b      	ldr	r3, [r7, #0]
 8025e40:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8025e42:	683b      	ldr	r3, [r7, #0]
 8025e44:	681b      	ldr	r3, [r3, #0]
 8025e46:	2b00      	cmp	r3, #0
 8025e48:	bf14      	ite	ne
 8025e4a:	2301      	movne	r3, #1
 8025e4c:	2300      	moveq	r3, #0
 8025e4e:	b2db      	uxtb	r3, r3
 8025e50:	60fb      	str	r3, [r7, #12]

    return ret;
 8025e52:	68fb      	ldr	r3, [r7, #12]
}
 8025e54:	4618      	mov	r0, r3
 8025e56:	3710      	adds	r7, #16
 8025e58:	46bd      	mov	sp, r7
 8025e5a:	bd80      	pop	{r7, pc}

08025e5c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8025e5c:	b580      	push	{r7, lr}
 8025e5e:	b082      	sub	sp, #8
 8025e60:	af00      	add	r7, sp, #0
 8025e62:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8025e64:	6878      	ldr	r0, [r7, #4]
 8025e66:	f000 fd03 	bl	8026870 <osSemaphoreDelete>
#endif
    return 1;
 8025e6a:	2301      	movs	r3, #1
}
 8025e6c:	4618      	mov	r0, r3
 8025e6e:	3708      	adds	r7, #8
 8025e70:	46bd      	mov	sp, r7
 8025e72:	bd80      	pop	{r7, pc}

08025e74 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8025e74:	b580      	push	{r7, lr}
 8025e76:	b084      	sub	sp, #16
 8025e78:	af00      	add	r7, sp, #0
 8025e7a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8025e7c:	2300      	movs	r3, #0
 8025e7e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8025e80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8025e84:	6878      	ldr	r0, [r7, #4]
 8025e86:	f000 fc35 	bl	80266f4 <osSemaphoreAcquire>
 8025e8a:	4603      	mov	r3, r0
 8025e8c:	2b00      	cmp	r3, #0
 8025e8e:	d101      	bne.n	8025e94 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8025e90:	2301      	movs	r3, #1
 8025e92:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8025e94:	68fb      	ldr	r3, [r7, #12]
}
 8025e96:	4618      	mov	r0, r3
 8025e98:	3710      	adds	r7, #16
 8025e9a:	46bd      	mov	sp, r7
 8025e9c:	bd80      	pop	{r7, pc}

08025e9e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8025e9e:	b580      	push	{r7, lr}
 8025ea0:	b082      	sub	sp, #8
 8025ea2:	af00      	add	r7, sp, #0
 8025ea4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8025ea6:	6878      	ldr	r0, [r7, #4]
 8025ea8:	f000 fc8a 	bl	80267c0 <osSemaphoreRelease>
#endif
}
 8025eac:	bf00      	nop
 8025eae:	3708      	adds	r7, #8
 8025eb0:	46bd      	mov	sp, r7
 8025eb2:	bd80      	pop	{r7, pc}

08025eb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8025eb4:	b480      	push	{r7}
 8025eb6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8025eb8:	bf00      	nop
 8025eba:	46bd      	mov	sp, r7
 8025ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ec0:	4770      	bx	lr
	...

08025ec4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8025ec4:	b480      	push	{r7}
 8025ec6:	b085      	sub	sp, #20
 8025ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8025eca:	f3ef 8305 	mrs	r3, IPSR
 8025ece:	60bb      	str	r3, [r7, #8]
  return(result);
 8025ed0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8025ed2:	2b00      	cmp	r3, #0
 8025ed4:	d10f      	bne.n	8025ef6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8025eda:	607b      	str	r3, [r7, #4]
  return(result);
 8025edc:	687b      	ldr	r3, [r7, #4]
 8025ede:	2b00      	cmp	r3, #0
 8025ee0:	d105      	bne.n	8025eee <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8025ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8025ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8025ee8:	683b      	ldr	r3, [r7, #0]
 8025eea:	2b00      	cmp	r3, #0
 8025eec:	d007      	beq.n	8025efe <osKernelInitialize+0x3a>
 8025eee:	4b0e      	ldr	r3, [pc, #56]	; (8025f28 <osKernelInitialize+0x64>)
 8025ef0:	681b      	ldr	r3, [r3, #0]
 8025ef2:	2b02      	cmp	r3, #2
 8025ef4:	d103      	bne.n	8025efe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8025ef6:	f06f 0305 	mvn.w	r3, #5
 8025efa:	60fb      	str	r3, [r7, #12]
 8025efc:	e00c      	b.n	8025f18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8025efe:	4b0a      	ldr	r3, [pc, #40]	; (8025f28 <osKernelInitialize+0x64>)
 8025f00:	681b      	ldr	r3, [r3, #0]
 8025f02:	2b00      	cmp	r3, #0
 8025f04:	d105      	bne.n	8025f12 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8025f06:	4b08      	ldr	r3, [pc, #32]	; (8025f28 <osKernelInitialize+0x64>)
 8025f08:	2201      	movs	r2, #1
 8025f0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8025f0c:	2300      	movs	r3, #0
 8025f0e:	60fb      	str	r3, [r7, #12]
 8025f10:	e002      	b.n	8025f18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8025f12:	f04f 33ff 	mov.w	r3, #4294967295
 8025f16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8025f18:	68fb      	ldr	r3, [r7, #12]
}
 8025f1a:	4618      	mov	r0, r3
 8025f1c:	3714      	adds	r7, #20
 8025f1e:	46bd      	mov	sp, r7
 8025f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f24:	4770      	bx	lr
 8025f26:	bf00      	nop
 8025f28:	2400142c 	.word	0x2400142c

08025f2c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8025f2c:	b580      	push	{r7, lr}
 8025f2e:	b082      	sub	sp, #8
 8025f30:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8025f32:	f002 fe57 	bl	8028be4 <xTaskGetSchedulerState>
 8025f36:	4603      	mov	r3, r0
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	d004      	beq.n	8025f46 <osKernelGetState+0x1a>
 8025f3c:	2b02      	cmp	r3, #2
 8025f3e:	d105      	bne.n	8025f4c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8025f40:	2302      	movs	r3, #2
 8025f42:	607b      	str	r3, [r7, #4]
      break;
 8025f44:	e00c      	b.n	8025f60 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8025f46:	2303      	movs	r3, #3
 8025f48:	607b      	str	r3, [r7, #4]
      break;
 8025f4a:	e009      	b.n	8025f60 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8025f4c:	4b07      	ldr	r3, [pc, #28]	; (8025f6c <osKernelGetState+0x40>)
 8025f4e:	681b      	ldr	r3, [r3, #0]
 8025f50:	2b01      	cmp	r3, #1
 8025f52:	d102      	bne.n	8025f5a <osKernelGetState+0x2e>
        state = osKernelReady;
 8025f54:	2301      	movs	r3, #1
 8025f56:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8025f58:	e001      	b.n	8025f5e <osKernelGetState+0x32>
        state = osKernelInactive;
 8025f5a:	2300      	movs	r3, #0
 8025f5c:	607b      	str	r3, [r7, #4]
      break;
 8025f5e:	bf00      	nop
  }

  return (state);
 8025f60:	687b      	ldr	r3, [r7, #4]
}
 8025f62:	4618      	mov	r0, r3
 8025f64:	3708      	adds	r7, #8
 8025f66:	46bd      	mov	sp, r7
 8025f68:	bd80      	pop	{r7, pc}
 8025f6a:	bf00      	nop
 8025f6c:	2400142c 	.word	0x2400142c

08025f70 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8025f70:	b580      	push	{r7, lr}
 8025f72:	b084      	sub	sp, #16
 8025f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8025f76:	f3ef 8305 	mrs	r3, IPSR
 8025f7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8025f7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8025f7e:	2b00      	cmp	r3, #0
 8025f80:	d10f      	bne.n	8025fa2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025f82:	f3ef 8310 	mrs	r3, PRIMASK
 8025f86:	607b      	str	r3, [r7, #4]
  return(result);
 8025f88:	687b      	ldr	r3, [r7, #4]
 8025f8a:	2b00      	cmp	r3, #0
 8025f8c:	d105      	bne.n	8025f9a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8025f8e:	f3ef 8311 	mrs	r3, BASEPRI
 8025f92:	603b      	str	r3, [r7, #0]
  return(result);
 8025f94:	683b      	ldr	r3, [r7, #0]
 8025f96:	2b00      	cmp	r3, #0
 8025f98:	d007      	beq.n	8025faa <osKernelStart+0x3a>
 8025f9a:	4b0f      	ldr	r3, [pc, #60]	; (8025fd8 <osKernelStart+0x68>)
 8025f9c:	681b      	ldr	r3, [r3, #0]
 8025f9e:	2b02      	cmp	r3, #2
 8025fa0:	d103      	bne.n	8025faa <osKernelStart+0x3a>
    stat = osErrorISR;
 8025fa2:	f06f 0305 	mvn.w	r3, #5
 8025fa6:	60fb      	str	r3, [r7, #12]
 8025fa8:	e010      	b.n	8025fcc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8025faa:	4b0b      	ldr	r3, [pc, #44]	; (8025fd8 <osKernelStart+0x68>)
 8025fac:	681b      	ldr	r3, [r3, #0]
 8025fae:	2b01      	cmp	r3, #1
 8025fb0:	d109      	bne.n	8025fc6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8025fb2:	f7ff ff7f 	bl	8025eb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8025fb6:	4b08      	ldr	r3, [pc, #32]	; (8025fd8 <osKernelStart+0x68>)
 8025fb8:	2202      	movs	r2, #2
 8025fba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8025fbc:	f002 f9ba 	bl	8028334 <vTaskStartScheduler>
      stat = osOK;
 8025fc0:	2300      	movs	r3, #0
 8025fc2:	60fb      	str	r3, [r7, #12]
 8025fc4:	e002      	b.n	8025fcc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8025fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8025fca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8025fcc:	68fb      	ldr	r3, [r7, #12]
}
 8025fce:	4618      	mov	r0, r3
 8025fd0:	3710      	adds	r7, #16
 8025fd2:	46bd      	mov	sp, r7
 8025fd4:	bd80      	pop	{r7, pc}
 8025fd6:	bf00      	nop
 8025fd8:	2400142c 	.word	0x2400142c

08025fdc <osKernelLock>:

int32_t osKernelLock (void) {
 8025fdc:	b580      	push	{r7, lr}
 8025fde:	b084      	sub	sp, #16
 8025fe0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8025fe2:	f3ef 8305 	mrs	r3, IPSR
 8025fe6:	60bb      	str	r3, [r7, #8]
  return(result);
 8025fe8:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 8025fea:	2b00      	cmp	r3, #0
 8025fec:	d10f      	bne.n	802600e <osKernelLock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025fee:	f3ef 8310 	mrs	r3, PRIMASK
 8025ff2:	607b      	str	r3, [r7, #4]
  return(result);
 8025ff4:	687b      	ldr	r3, [r7, #4]
 8025ff6:	2b00      	cmp	r3, #0
 8025ff8:	d105      	bne.n	8026006 <osKernelLock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8025ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8025ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8026000:	683b      	ldr	r3, [r7, #0]
 8026002:	2b00      	cmp	r3, #0
 8026004:	d007      	beq.n	8026016 <osKernelLock+0x3a>
 8026006:	4b10      	ldr	r3, [pc, #64]	; (8026048 <osKernelLock+0x6c>)
 8026008:	681b      	ldr	r3, [r3, #0]
 802600a:	2b02      	cmp	r3, #2
 802600c:	d103      	bne.n	8026016 <osKernelLock+0x3a>
    lock = (int32_t)osErrorISR;
 802600e:	f06f 0305 	mvn.w	r3, #5
 8026012:	60fb      	str	r3, [r7, #12]
 8026014:	e013      	b.n	802603e <osKernelLock+0x62>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8026016:	f002 fde5 	bl	8028be4 <xTaskGetSchedulerState>
 802601a:	4603      	mov	r3, r0
 802601c:	2b00      	cmp	r3, #0
 802601e:	d002      	beq.n	8026026 <osKernelLock+0x4a>
 8026020:	2b02      	cmp	r3, #2
 8026022:	d003      	beq.n	802602c <osKernelLock+0x50>
 8026024:	e007      	b.n	8026036 <osKernelLock+0x5a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8026026:	2301      	movs	r3, #1
 8026028:	60fb      	str	r3, [r7, #12]
        break;
 802602a:	e008      	b.n	802603e <osKernelLock+0x62>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 802602c:	f002 f9e6 	bl	80283fc <vTaskSuspendAll>
        lock = 0;
 8026030:	2300      	movs	r3, #0
 8026032:	60fb      	str	r3, [r7, #12]
        break;
 8026034:	e003      	b.n	802603e <osKernelLock+0x62>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8026036:	f04f 33ff 	mov.w	r3, #4294967295
 802603a:	60fb      	str	r3, [r7, #12]
        break;
 802603c:	bf00      	nop
    }
  }

  return (lock);
 802603e:	68fb      	ldr	r3, [r7, #12]
}
 8026040:	4618      	mov	r0, r3
 8026042:	3710      	adds	r7, #16
 8026044:	46bd      	mov	sp, r7
 8026046:	bd80      	pop	{r7, pc}
 8026048:	2400142c 	.word	0x2400142c

0802604c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 802604c:	b580      	push	{r7, lr}
 802604e:	b084      	sub	sp, #16
 8026050:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026052:	f3ef 8305 	mrs	r3, IPSR
 8026056:	60bb      	str	r3, [r7, #8]
  return(result);
 8026058:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 802605a:	2b00      	cmp	r3, #0
 802605c:	d10f      	bne.n	802607e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802605e:	f3ef 8310 	mrs	r3, PRIMASK
 8026062:	607b      	str	r3, [r7, #4]
  return(result);
 8026064:	687b      	ldr	r3, [r7, #4]
 8026066:	2b00      	cmp	r3, #0
 8026068:	d105      	bne.n	8026076 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802606a:	f3ef 8311 	mrs	r3, BASEPRI
 802606e:	603b      	str	r3, [r7, #0]
  return(result);
 8026070:	683b      	ldr	r3, [r7, #0]
 8026072:	2b00      	cmp	r3, #0
 8026074:	d007      	beq.n	8026086 <osKernelGetTickCount+0x3a>
 8026076:	4b08      	ldr	r3, [pc, #32]	; (8026098 <osKernelGetTickCount+0x4c>)
 8026078:	681b      	ldr	r3, [r3, #0]
 802607a:	2b02      	cmp	r3, #2
 802607c:	d103      	bne.n	8026086 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 802607e:	f002 fa77 	bl	8028570 <xTaskGetTickCountFromISR>
 8026082:	60f8      	str	r0, [r7, #12]
 8026084:	e002      	b.n	802608c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8026086:	f002 fa63 	bl	8028550 <xTaskGetTickCount>
 802608a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 802608c:	68fb      	ldr	r3, [r7, #12]
}
 802608e:	4618      	mov	r0, r3
 8026090:	3710      	adds	r7, #16
 8026092:	46bd      	mov	sp, r7
 8026094:	bd80      	pop	{r7, pc}
 8026096:	bf00      	nop
 8026098:	2400142c 	.word	0x2400142c

0802609c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 802609c:	b580      	push	{r7, lr}
 802609e:	b090      	sub	sp, #64	; 0x40
 80260a0:	af04      	add	r7, sp, #16
 80260a2:	60f8      	str	r0, [r7, #12]
 80260a4:	60b9      	str	r1, [r7, #8]
 80260a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80260a8:	2300      	movs	r3, #0
 80260aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80260ac:	f3ef 8305 	mrs	r3, IPSR
 80260b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80260b2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80260b4:	2b00      	cmp	r3, #0
 80260b6:	f040 808f 	bne.w	80261d8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80260ba:	f3ef 8310 	mrs	r3, PRIMASK
 80260be:	61bb      	str	r3, [r7, #24]
  return(result);
 80260c0:	69bb      	ldr	r3, [r7, #24]
 80260c2:	2b00      	cmp	r3, #0
 80260c4:	d105      	bne.n	80260d2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80260c6:	f3ef 8311 	mrs	r3, BASEPRI
 80260ca:	617b      	str	r3, [r7, #20]
  return(result);
 80260cc:	697b      	ldr	r3, [r7, #20]
 80260ce:	2b00      	cmp	r3, #0
 80260d0:	d003      	beq.n	80260da <osThreadNew+0x3e>
 80260d2:	4b44      	ldr	r3, [pc, #272]	; (80261e4 <osThreadNew+0x148>)
 80260d4:	681b      	ldr	r3, [r3, #0]
 80260d6:	2b02      	cmp	r3, #2
 80260d8:	d07e      	beq.n	80261d8 <osThreadNew+0x13c>
 80260da:	68fb      	ldr	r3, [r7, #12]
 80260dc:	2b00      	cmp	r3, #0
 80260de:	d07b      	beq.n	80261d8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80260e0:	2380      	movs	r3, #128	; 0x80
 80260e2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80260e4:	2318      	movs	r3, #24
 80260e6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80260e8:	2300      	movs	r3, #0
 80260ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80260ec:	f04f 33ff 	mov.w	r3, #4294967295
 80260f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80260f2:	687b      	ldr	r3, [r7, #4]
 80260f4:	2b00      	cmp	r3, #0
 80260f6:	d045      	beq.n	8026184 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80260f8:	687b      	ldr	r3, [r7, #4]
 80260fa:	681b      	ldr	r3, [r3, #0]
 80260fc:	2b00      	cmp	r3, #0
 80260fe:	d002      	beq.n	8026106 <osThreadNew+0x6a>
        name = attr->name;
 8026100:	687b      	ldr	r3, [r7, #4]
 8026102:	681b      	ldr	r3, [r3, #0]
 8026104:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8026106:	687b      	ldr	r3, [r7, #4]
 8026108:	699b      	ldr	r3, [r3, #24]
 802610a:	2b00      	cmp	r3, #0
 802610c:	d002      	beq.n	8026114 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 802610e:	687b      	ldr	r3, [r7, #4]
 8026110:	699b      	ldr	r3, [r3, #24]
 8026112:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8026114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026116:	2b00      	cmp	r3, #0
 8026118:	d008      	beq.n	802612c <osThreadNew+0x90>
 802611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802611c:	2b38      	cmp	r3, #56	; 0x38
 802611e:	d805      	bhi.n	802612c <osThreadNew+0x90>
 8026120:	687b      	ldr	r3, [r7, #4]
 8026122:	685b      	ldr	r3, [r3, #4]
 8026124:	f003 0301 	and.w	r3, r3, #1
 8026128:	2b00      	cmp	r3, #0
 802612a:	d001      	beq.n	8026130 <osThreadNew+0x94>
        return (NULL);
 802612c:	2300      	movs	r3, #0
 802612e:	e054      	b.n	80261da <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8026130:	687b      	ldr	r3, [r7, #4]
 8026132:	695b      	ldr	r3, [r3, #20]
 8026134:	2b00      	cmp	r3, #0
 8026136:	d003      	beq.n	8026140 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8026138:	687b      	ldr	r3, [r7, #4]
 802613a:	695b      	ldr	r3, [r3, #20]
 802613c:	089b      	lsrs	r3, r3, #2
 802613e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8026140:	687b      	ldr	r3, [r7, #4]
 8026142:	689b      	ldr	r3, [r3, #8]
 8026144:	2b00      	cmp	r3, #0
 8026146:	d00e      	beq.n	8026166 <osThreadNew+0xca>
 8026148:	687b      	ldr	r3, [r7, #4]
 802614a:	68db      	ldr	r3, [r3, #12]
 802614c:	2b5b      	cmp	r3, #91	; 0x5b
 802614e:	d90a      	bls.n	8026166 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8026150:	687b      	ldr	r3, [r7, #4]
 8026152:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8026154:	2b00      	cmp	r3, #0
 8026156:	d006      	beq.n	8026166 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	695b      	ldr	r3, [r3, #20]
 802615c:	2b00      	cmp	r3, #0
 802615e:	d002      	beq.n	8026166 <osThreadNew+0xca>
        mem = 1;
 8026160:	2301      	movs	r3, #1
 8026162:	623b      	str	r3, [r7, #32]
 8026164:	e010      	b.n	8026188 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8026166:	687b      	ldr	r3, [r7, #4]
 8026168:	689b      	ldr	r3, [r3, #8]
 802616a:	2b00      	cmp	r3, #0
 802616c:	d10c      	bne.n	8026188 <osThreadNew+0xec>
 802616e:	687b      	ldr	r3, [r7, #4]
 8026170:	68db      	ldr	r3, [r3, #12]
 8026172:	2b00      	cmp	r3, #0
 8026174:	d108      	bne.n	8026188 <osThreadNew+0xec>
 8026176:	687b      	ldr	r3, [r7, #4]
 8026178:	691b      	ldr	r3, [r3, #16]
 802617a:	2b00      	cmp	r3, #0
 802617c:	d104      	bne.n	8026188 <osThreadNew+0xec>
          mem = 0;
 802617e:	2300      	movs	r3, #0
 8026180:	623b      	str	r3, [r7, #32]
 8026182:	e001      	b.n	8026188 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8026184:	2300      	movs	r3, #0
 8026186:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8026188:	6a3b      	ldr	r3, [r7, #32]
 802618a:	2b01      	cmp	r3, #1
 802618c:	d110      	bne.n	80261b0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 802618e:	687b      	ldr	r3, [r7, #4]
 8026190:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8026192:	687a      	ldr	r2, [r7, #4]
 8026194:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8026196:	9202      	str	r2, [sp, #8]
 8026198:	9301      	str	r3, [sp, #4]
 802619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802619c:	9300      	str	r3, [sp, #0]
 802619e:	68bb      	ldr	r3, [r7, #8]
 80261a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80261a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80261a4:	68f8      	ldr	r0, [r7, #12]
 80261a6:	f001 fe79 	bl	8027e9c <xTaskCreateStatic>
 80261aa:	4603      	mov	r3, r0
 80261ac:	613b      	str	r3, [r7, #16]
 80261ae:	e013      	b.n	80261d8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80261b0:	6a3b      	ldr	r3, [r7, #32]
 80261b2:	2b00      	cmp	r3, #0
 80261b4:	d110      	bne.n	80261d8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80261b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80261b8:	b29a      	uxth	r2, r3
 80261ba:	f107 0310 	add.w	r3, r7, #16
 80261be:	9301      	str	r3, [sp, #4]
 80261c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80261c2:	9300      	str	r3, [sp, #0]
 80261c4:	68bb      	ldr	r3, [r7, #8]
 80261c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80261c8:	68f8      	ldr	r0, [r7, #12]
 80261ca:	f001 fec1 	bl	8027f50 <xTaskCreate>
 80261ce:	4603      	mov	r3, r0
 80261d0:	2b01      	cmp	r3, #1
 80261d2:	d001      	beq.n	80261d8 <osThreadNew+0x13c>
          hTask = NULL;
 80261d4:	2300      	movs	r3, #0
 80261d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80261d8:	693b      	ldr	r3, [r7, #16]
}
 80261da:	4618      	mov	r0, r3
 80261dc:	3730      	adds	r7, #48	; 0x30
 80261de:	46bd      	mov	sp, r7
 80261e0:	bd80      	pop	{r7, pc}
 80261e2:	bf00      	nop
 80261e4:	2400142c 	.word	0x2400142c

080261e8 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80261e8:	b580      	push	{r7, lr}
 80261ea:	b08a      	sub	sp, #40	; 0x28
 80261ec:	af02      	add	r7, sp, #8
 80261ee:	6078      	str	r0, [r7, #4]
 80261f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80261f2:	687b      	ldr	r3, [r7, #4]
 80261f4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80261f6:	69fb      	ldr	r3, [r7, #28]
 80261f8:	2b00      	cmp	r3, #0
 80261fa:	d002      	beq.n	8026202 <osThreadFlagsSet+0x1a>
 80261fc:	683b      	ldr	r3, [r7, #0]
 80261fe:	2b00      	cmp	r3, #0
 8026200:	da03      	bge.n	802620a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8026202:	f06f 0303 	mvn.w	r3, #3
 8026206:	60fb      	str	r3, [r7, #12]
 8026208:	e046      	b.n	8026298 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 802620a:	f04f 33ff 	mov.w	r3, #4294967295
 802620e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026210:	f3ef 8305 	mrs	r3, IPSR
 8026214:	61bb      	str	r3, [r7, #24]
  return(result);
 8026216:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8026218:	2b00      	cmp	r3, #0
 802621a:	d10f      	bne.n	802623c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802621c:	f3ef 8310 	mrs	r3, PRIMASK
 8026220:	617b      	str	r3, [r7, #20]
  return(result);
 8026222:	697b      	ldr	r3, [r7, #20]
 8026224:	2b00      	cmp	r3, #0
 8026226:	d105      	bne.n	8026234 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026228:	f3ef 8311 	mrs	r3, BASEPRI
 802622c:	613b      	str	r3, [r7, #16]
  return(result);
 802622e:	693b      	ldr	r3, [r7, #16]
 8026230:	2b00      	cmp	r3, #0
 8026232:	d024      	beq.n	802627e <osThreadFlagsSet+0x96>
 8026234:	4b1b      	ldr	r3, [pc, #108]	; (80262a4 <osThreadFlagsSet+0xbc>)
 8026236:	681b      	ldr	r3, [r3, #0]
 8026238:	2b02      	cmp	r3, #2
 802623a:	d120      	bne.n	802627e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 802623c:	2300      	movs	r3, #0
 802623e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8026240:	f107 0308 	add.w	r3, r7, #8
 8026244:	9300      	str	r3, [sp, #0]
 8026246:	2300      	movs	r3, #0
 8026248:	2201      	movs	r2, #1
 802624a:	6839      	ldr	r1, [r7, #0]
 802624c:	69f8      	ldr	r0, [r7, #28]
 802624e:	f002 ff5d 	bl	802910c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8026252:	f107 020c 	add.w	r2, r7, #12
 8026256:	2300      	movs	r3, #0
 8026258:	9300      	str	r3, [sp, #0]
 802625a:	4613      	mov	r3, r2
 802625c:	2200      	movs	r2, #0
 802625e:	2100      	movs	r1, #0
 8026260:	69f8      	ldr	r0, [r7, #28]
 8026262:	f002 ff53 	bl	802910c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8026266:	68bb      	ldr	r3, [r7, #8]
 8026268:	2b00      	cmp	r3, #0
 802626a:	d015      	beq.n	8026298 <osThreadFlagsSet+0xb0>
 802626c:	4b0e      	ldr	r3, [pc, #56]	; (80262a8 <osThreadFlagsSet+0xc0>)
 802626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026272:	601a      	str	r2, [r3, #0]
 8026274:	f3bf 8f4f 	dsb	sy
 8026278:	f3bf 8f6f 	isb	sy
 802627c:	e00c      	b.n	8026298 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 802627e:	2300      	movs	r3, #0
 8026280:	2201      	movs	r2, #1
 8026282:	6839      	ldr	r1, [r7, #0]
 8026284:	69f8      	ldr	r0, [r7, #28]
 8026286:	f002 fe8d 	bl	8028fa4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 802628a:	f107 030c 	add.w	r3, r7, #12
 802628e:	2200      	movs	r2, #0
 8026290:	2100      	movs	r1, #0
 8026292:	69f8      	ldr	r0, [r7, #28]
 8026294:	f002 fe86 	bl	8028fa4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8026298:	68fb      	ldr	r3, [r7, #12]
}
 802629a:	4618      	mov	r0, r3
 802629c:	3720      	adds	r7, #32
 802629e:	46bd      	mov	sp, r7
 80262a0:	bd80      	pop	{r7, pc}
 80262a2:	bf00      	nop
 80262a4:	2400142c 	.word	0x2400142c
 80262a8:	e000ed04 	.word	0xe000ed04

080262ac <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 80262ac:	b580      	push	{r7, lr}
 80262ae:	b088      	sub	sp, #32
 80262b0:	af00      	add	r7, sp, #0
 80262b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80262b4:	f3ef 8305 	mrs	r3, IPSR
 80262b8:	617b      	str	r3, [r7, #20]
  return(result);
 80262ba:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 80262bc:	2b00      	cmp	r3, #0
 80262be:	d10f      	bne.n	80262e0 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80262c0:	f3ef 8310 	mrs	r3, PRIMASK
 80262c4:	613b      	str	r3, [r7, #16]
  return(result);
 80262c6:	693b      	ldr	r3, [r7, #16]
 80262c8:	2b00      	cmp	r3, #0
 80262ca:	d105      	bne.n	80262d8 <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80262cc:	f3ef 8311 	mrs	r3, BASEPRI
 80262d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80262d2:	68fb      	ldr	r3, [r7, #12]
 80262d4:	2b00      	cmp	r3, #0
 80262d6:	d007      	beq.n	80262e8 <osThreadFlagsClear+0x3c>
 80262d8:	4b1b      	ldr	r3, [pc, #108]	; (8026348 <osThreadFlagsClear+0x9c>)
 80262da:	681b      	ldr	r3, [r3, #0]
 80262dc:	2b02      	cmp	r3, #2
 80262de:	d103      	bne.n	80262e8 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 80262e0:	f06f 0305 	mvn.w	r3, #5
 80262e4:	61fb      	str	r3, [r7, #28]
 80262e6:	e02a      	b.n	802633e <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80262e8:	687b      	ldr	r3, [r7, #4]
 80262ea:	2b00      	cmp	r3, #0
 80262ec:	da03      	bge.n	80262f6 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 80262ee:	f06f 0303 	mvn.w	r3, #3
 80262f2:	61fb      	str	r3, [r7, #28]
 80262f4:	e023      	b.n	802633e <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80262f6:	f002 fc65 	bl	8028bc4 <xTaskGetCurrentTaskHandle>
 80262fa:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80262fc:	f107 0308 	add.w	r3, r7, #8
 8026300:	2200      	movs	r2, #0
 8026302:	2100      	movs	r1, #0
 8026304:	69b8      	ldr	r0, [r7, #24]
 8026306:	f002 fe4d 	bl	8028fa4 <xTaskGenericNotify>
 802630a:	4603      	mov	r3, r0
 802630c:	2b01      	cmp	r3, #1
 802630e:	d113      	bne.n	8026338 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 8026310:	68bb      	ldr	r3, [r7, #8]
 8026312:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 8026314:	687b      	ldr	r3, [r7, #4]
 8026316:	43da      	mvns	r2, r3
 8026318:	68bb      	ldr	r3, [r7, #8]
 802631a:	4013      	ands	r3, r2
 802631c:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 802631e:	68b9      	ldr	r1, [r7, #8]
 8026320:	2300      	movs	r3, #0
 8026322:	2203      	movs	r2, #3
 8026324:	69b8      	ldr	r0, [r7, #24]
 8026326:	f002 fe3d 	bl	8028fa4 <xTaskGenericNotify>
 802632a:	4603      	mov	r3, r0
 802632c:	2b01      	cmp	r3, #1
 802632e:	d006      	beq.n	802633e <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 8026330:	f04f 33ff 	mov.w	r3, #4294967295
 8026334:	61fb      	str	r3, [r7, #28]
 8026336:	e002      	b.n	802633e <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 8026338:	f04f 33ff 	mov.w	r3, #4294967295
 802633c:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 802633e:	69fb      	ldr	r3, [r7, #28]
}
 8026340:	4618      	mov	r0, r3
 8026342:	3720      	adds	r7, #32
 8026344:	46bd      	mov	sp, r7
 8026346:	bd80      	pop	{r7, pc}
 8026348:	2400142c 	.word	0x2400142c

0802634c <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 802634c:	b580      	push	{r7, lr}
 802634e:	b086      	sub	sp, #24
 8026350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026352:	f3ef 8305 	mrs	r3, IPSR
 8026356:	613b      	str	r3, [r7, #16]
  return(result);
 8026358:	693b      	ldr	r3, [r7, #16]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 802635a:	2b00      	cmp	r3, #0
 802635c:	d10f      	bne.n	802637e <osThreadFlagsGet+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802635e:	f3ef 8310 	mrs	r3, PRIMASK
 8026362:	60fb      	str	r3, [r7, #12]
  return(result);
 8026364:	68fb      	ldr	r3, [r7, #12]
 8026366:	2b00      	cmp	r3, #0
 8026368:	d105      	bne.n	8026376 <osThreadFlagsGet+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802636a:	f3ef 8311 	mrs	r3, BASEPRI
 802636e:	60bb      	str	r3, [r7, #8]
  return(result);
 8026370:	68bb      	ldr	r3, [r7, #8]
 8026372:	2b00      	cmp	r3, #0
 8026374:	d007      	beq.n	8026386 <osThreadFlagsGet+0x3a>
 8026376:	4b0e      	ldr	r3, [pc, #56]	; (80263b0 <osThreadFlagsGet+0x64>)
 8026378:	681b      	ldr	r3, [r3, #0]
 802637a:	2b02      	cmp	r3, #2
 802637c:	d103      	bne.n	8026386 <osThreadFlagsGet+0x3a>
    rflags = (uint32_t)osErrorISR;
 802637e:	f06f 0305 	mvn.w	r3, #5
 8026382:	607b      	str	r3, [r7, #4]
 8026384:	e00e      	b.n	80263a4 <osThreadFlagsGet+0x58>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8026386:	f002 fc1d 	bl	8028bc4 <xTaskGetCurrentTaskHandle>
 802638a:	6178      	str	r0, [r7, #20]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 802638c:	1d3b      	adds	r3, r7, #4
 802638e:	2200      	movs	r2, #0
 8026390:	2100      	movs	r1, #0
 8026392:	6978      	ldr	r0, [r7, #20]
 8026394:	f002 fe06 	bl	8028fa4 <xTaskGenericNotify>
 8026398:	4603      	mov	r3, r0
 802639a:	2b01      	cmp	r3, #1
 802639c:	d002      	beq.n	80263a4 <osThreadFlagsGet+0x58>
      rflags = (uint32_t)osError;
 802639e:	f04f 33ff 	mov.w	r3, #4294967295
 80263a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 80263a4:	687b      	ldr	r3, [r7, #4]
}
 80263a6:	4618      	mov	r0, r3
 80263a8:	3718      	adds	r7, #24
 80263aa:	46bd      	mov	sp, r7
 80263ac:	bd80      	pop	{r7, pc}
 80263ae:	bf00      	nop
 80263b0:	2400142c 	.word	0x2400142c

080263b4 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80263b4:	b580      	push	{r7, lr}
 80263b6:	b08e      	sub	sp, #56	; 0x38
 80263b8:	af00      	add	r7, sp, #0
 80263ba:	60f8      	str	r0, [r7, #12]
 80263bc:	60b9      	str	r1, [r7, #8]
 80263be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80263c0:	f3ef 8305 	mrs	r3, IPSR
 80263c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80263c6:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80263c8:	2b00      	cmp	r3, #0
 80263ca:	d10f      	bne.n	80263ec <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80263cc:	f3ef 8310 	mrs	r3, PRIMASK
 80263d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80263d2:	69bb      	ldr	r3, [r7, #24]
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	d105      	bne.n	80263e4 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80263d8:	f3ef 8311 	mrs	r3, BASEPRI
 80263dc:	617b      	str	r3, [r7, #20]
  return(result);
 80263de:	697b      	ldr	r3, [r7, #20]
 80263e0:	2b00      	cmp	r3, #0
 80263e2:	d007      	beq.n	80263f4 <osThreadFlagsWait+0x40>
 80263e4:	4b3c      	ldr	r3, [pc, #240]	; (80264d8 <osThreadFlagsWait+0x124>)
 80263e6:	681b      	ldr	r3, [r3, #0]
 80263e8:	2b02      	cmp	r3, #2
 80263ea:	d103      	bne.n	80263f4 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80263ec:	f06f 0305 	mvn.w	r3, #5
 80263f0:	637b      	str	r3, [r7, #52]	; 0x34
 80263f2:	e06b      	b.n	80264cc <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80263f4:	68fb      	ldr	r3, [r7, #12]
 80263f6:	2b00      	cmp	r3, #0
 80263f8:	da03      	bge.n	8026402 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80263fa:	f06f 0303 	mvn.w	r3, #3
 80263fe:	637b      	str	r3, [r7, #52]	; 0x34
 8026400:	e064      	b.n	80264cc <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8026402:	68bb      	ldr	r3, [r7, #8]
 8026404:	f003 0302 	and.w	r3, r3, #2
 8026408:	2b00      	cmp	r3, #0
 802640a:	d002      	beq.n	8026412 <osThreadFlagsWait+0x5e>
      clear = 0U;
 802640c:	2300      	movs	r3, #0
 802640e:	633b      	str	r3, [r7, #48]	; 0x30
 8026410:	e001      	b.n	8026416 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8026412:	68fb      	ldr	r3, [r7, #12]
 8026414:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8026416:	2300      	movs	r3, #0
 8026418:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 802641a:	687b      	ldr	r3, [r7, #4]
 802641c:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 802641e:	f002 f897 	bl	8028550 <xTaskGetTickCount>
 8026422:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8026424:	f107 0210 	add.w	r2, r7, #16
 8026428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802642a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802642c:	2000      	movs	r0, #0
 802642e:	f002 fd5f 	bl	8028ef0 <xTaskNotifyWait>
 8026432:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8026434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026436:	2b01      	cmp	r3, #1
 8026438:	d137      	bne.n	80264aa <osThreadFlagsWait+0xf6>
        rflags &= flags;
 802643a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802643c:	68fb      	ldr	r3, [r7, #12]
 802643e:	4013      	ands	r3, r2
 8026440:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8026442:	693b      	ldr	r3, [r7, #16]
 8026444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026446:	4313      	orrs	r3, r2
 8026448:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 802644a:	68bb      	ldr	r3, [r7, #8]
 802644c:	f003 0301 	and.w	r3, r3, #1
 8026450:	2b00      	cmp	r3, #0
 8026452:	d00c      	beq.n	802646e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8026454:	68fa      	ldr	r2, [r7, #12]
 8026456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026458:	4013      	ands	r3, r2
 802645a:	68fa      	ldr	r2, [r7, #12]
 802645c:	429a      	cmp	r2, r3
 802645e:	d032      	beq.n	80264c6 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8026460:	687b      	ldr	r3, [r7, #4]
 8026462:	2b00      	cmp	r3, #0
 8026464:	d10f      	bne.n	8026486 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8026466:	f06f 0302 	mvn.w	r3, #2
 802646a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 802646c:	e02e      	b.n	80264cc <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 802646e:	68fa      	ldr	r2, [r7, #12]
 8026470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026472:	4013      	ands	r3, r2
 8026474:	2b00      	cmp	r3, #0
 8026476:	d128      	bne.n	80264ca <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8026478:	687b      	ldr	r3, [r7, #4]
 802647a:	2b00      	cmp	r3, #0
 802647c:	d103      	bne.n	8026486 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 802647e:	f06f 0302 	mvn.w	r3, #2
 8026482:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8026484:	e022      	b.n	80264cc <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8026486:	f002 f863 	bl	8028550 <xTaskGetTickCount>
 802648a:	4602      	mov	r2, r0
 802648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802648e:	1ad3      	subs	r3, r2, r3
 8026490:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8026492:	6a3a      	ldr	r2, [r7, #32]
 8026494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026496:	429a      	cmp	r2, r3
 8026498:	d902      	bls.n	80264a0 <osThreadFlagsWait+0xec>
          tout  = 0;
 802649a:	2300      	movs	r3, #0
 802649c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802649e:	e00e      	b.n	80264be <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 80264a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80264a2:	6a3b      	ldr	r3, [r7, #32]
 80264a4:	1ad3      	subs	r3, r2, r3
 80264a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80264a8:	e009      	b.n	80264be <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	2b00      	cmp	r3, #0
 80264ae:	d103      	bne.n	80264b8 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 80264b0:	f06f 0302 	mvn.w	r3, #2
 80264b4:	637b      	str	r3, [r7, #52]	; 0x34
 80264b6:	e002      	b.n	80264be <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80264b8:	f06f 0301 	mvn.w	r3, #1
 80264bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80264be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80264c0:	2b00      	cmp	r3, #0
 80264c2:	d1af      	bne.n	8026424 <osThreadFlagsWait+0x70>
 80264c4:	e002      	b.n	80264cc <osThreadFlagsWait+0x118>
            break;
 80264c6:	bf00      	nop
 80264c8:	e000      	b.n	80264cc <osThreadFlagsWait+0x118>
            break;
 80264ca:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80264cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80264ce:	4618      	mov	r0, r3
 80264d0:	3738      	adds	r7, #56	; 0x38
 80264d2:	46bd      	mov	sp, r7
 80264d4:	bd80      	pop	{r7, pc}
 80264d6:	bf00      	nop
 80264d8:	2400142c 	.word	0x2400142c

080264dc <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80264dc:	b580      	push	{r7, lr}
 80264de:	b086      	sub	sp, #24
 80264e0:	af00      	add	r7, sp, #0
 80264e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80264e4:	f3ef 8305 	mrs	r3, IPSR
 80264e8:	613b      	str	r3, [r7, #16]
  return(result);
 80264ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80264ec:	2b00      	cmp	r3, #0
 80264ee:	d10f      	bne.n	8026510 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80264f0:	f3ef 8310 	mrs	r3, PRIMASK
 80264f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80264f6:	68fb      	ldr	r3, [r7, #12]
 80264f8:	2b00      	cmp	r3, #0
 80264fa:	d105      	bne.n	8026508 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80264fc:	f3ef 8311 	mrs	r3, BASEPRI
 8026500:	60bb      	str	r3, [r7, #8]
  return(result);
 8026502:	68bb      	ldr	r3, [r7, #8]
 8026504:	2b00      	cmp	r3, #0
 8026506:	d007      	beq.n	8026518 <osDelay+0x3c>
 8026508:	4b0a      	ldr	r3, [pc, #40]	; (8026534 <osDelay+0x58>)
 802650a:	681b      	ldr	r3, [r3, #0]
 802650c:	2b02      	cmp	r3, #2
 802650e:	d103      	bne.n	8026518 <osDelay+0x3c>
    stat = osErrorISR;
 8026510:	f06f 0305 	mvn.w	r3, #5
 8026514:	617b      	str	r3, [r7, #20]
 8026516:	e007      	b.n	8026528 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8026518:	2300      	movs	r3, #0
 802651a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 802651c:	687b      	ldr	r3, [r7, #4]
 802651e:	2b00      	cmp	r3, #0
 8026520:	d002      	beq.n	8026528 <osDelay+0x4c>
      vTaskDelay(ticks);
 8026522:	6878      	ldr	r0, [r7, #4]
 8026524:	f001 fed2 	bl	80282cc <vTaskDelay>
    }
  }

  return (stat);
 8026528:	697b      	ldr	r3, [r7, #20]
}
 802652a:	4618      	mov	r0, r3
 802652c:	3718      	adds	r7, #24
 802652e:	46bd      	mov	sp, r7
 8026530:	bd80      	pop	{r7, pc}
 8026532:	bf00      	nop
 8026534:	2400142c 	.word	0x2400142c

08026538 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8026538:	b580      	push	{r7, lr}
 802653a:	b088      	sub	sp, #32
 802653c:	af00      	add	r7, sp, #0
 802653e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026540:	f3ef 8305 	mrs	r3, IPSR
 8026544:	617b      	str	r3, [r7, #20]
  return(result);
 8026546:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8026548:	2b00      	cmp	r3, #0
 802654a:	d10f      	bne.n	802656c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802654c:	f3ef 8310 	mrs	r3, PRIMASK
 8026550:	613b      	str	r3, [r7, #16]
  return(result);
 8026552:	693b      	ldr	r3, [r7, #16]
 8026554:	2b00      	cmp	r3, #0
 8026556:	d105      	bne.n	8026564 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026558:	f3ef 8311 	mrs	r3, BASEPRI
 802655c:	60fb      	str	r3, [r7, #12]
  return(result);
 802655e:	68fb      	ldr	r3, [r7, #12]
 8026560:	2b00      	cmp	r3, #0
 8026562:	d007      	beq.n	8026574 <osDelayUntil+0x3c>
 8026564:	4b13      	ldr	r3, [pc, #76]	; (80265b4 <osDelayUntil+0x7c>)
 8026566:	681b      	ldr	r3, [r3, #0]
 8026568:	2b02      	cmp	r3, #2
 802656a:	d103      	bne.n	8026574 <osDelayUntil+0x3c>
    stat = osErrorISR;
 802656c:	f06f 0305 	mvn.w	r3, #5
 8026570:	61fb      	str	r3, [r7, #28]
 8026572:	e019      	b.n	80265a8 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8026574:	2300      	movs	r3, #0
 8026576:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8026578:	f001 ffea 	bl	8028550 <xTaskGetTickCount>
 802657c:	4603      	mov	r3, r0
 802657e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8026580:	68bb      	ldr	r3, [r7, #8]
 8026582:	687a      	ldr	r2, [r7, #4]
 8026584:	1ad3      	subs	r3, r2, r3
 8026586:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8026588:	69bb      	ldr	r3, [r7, #24]
 802658a:	2b00      	cmp	r3, #0
 802658c:	d009      	beq.n	80265a2 <osDelayUntil+0x6a>
 802658e:	69bb      	ldr	r3, [r7, #24]
 8026590:	2b00      	cmp	r3, #0
 8026592:	db06      	blt.n	80265a2 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8026594:	f107 0308 	add.w	r3, r7, #8
 8026598:	69b9      	ldr	r1, [r7, #24]
 802659a:	4618      	mov	r0, r3
 802659c:	f001 fe1c 	bl	80281d8 <vTaskDelayUntil>
 80265a0:	e002      	b.n	80265a8 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80265a2:	f06f 0303 	mvn.w	r3, #3
 80265a6:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80265a8:	69fb      	ldr	r3, [r7, #28]
}
 80265aa:	4618      	mov	r0, r3
 80265ac:	3720      	adds	r7, #32
 80265ae:	46bd      	mov	sp, r7
 80265b0:	bd80      	pop	{r7, pc}
 80265b2:	bf00      	nop
 80265b4:	2400142c 	.word	0x2400142c

080265b8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80265b8:	b580      	push	{r7, lr}
 80265ba:	b08c      	sub	sp, #48	; 0x30
 80265bc:	af02      	add	r7, sp, #8
 80265be:	60f8      	str	r0, [r7, #12]
 80265c0:	60b9      	str	r1, [r7, #8]
 80265c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80265c4:	2300      	movs	r3, #0
 80265c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80265c8:	f3ef 8305 	mrs	r3, IPSR
 80265cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80265ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80265d0:	2b00      	cmp	r3, #0
 80265d2:	f040 8087 	bne.w	80266e4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80265d6:	f3ef 8310 	mrs	r3, PRIMASK
 80265da:	617b      	str	r3, [r7, #20]
  return(result);
 80265dc:	697b      	ldr	r3, [r7, #20]
 80265de:	2b00      	cmp	r3, #0
 80265e0:	d105      	bne.n	80265ee <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80265e2:	f3ef 8311 	mrs	r3, BASEPRI
 80265e6:	613b      	str	r3, [r7, #16]
  return(result);
 80265e8:	693b      	ldr	r3, [r7, #16]
 80265ea:	2b00      	cmp	r3, #0
 80265ec:	d003      	beq.n	80265f6 <osSemaphoreNew+0x3e>
 80265ee:	4b40      	ldr	r3, [pc, #256]	; (80266f0 <osSemaphoreNew+0x138>)
 80265f0:	681b      	ldr	r3, [r3, #0]
 80265f2:	2b02      	cmp	r3, #2
 80265f4:	d076      	beq.n	80266e4 <osSemaphoreNew+0x12c>
 80265f6:	68fb      	ldr	r3, [r7, #12]
 80265f8:	2b00      	cmp	r3, #0
 80265fa:	d073      	beq.n	80266e4 <osSemaphoreNew+0x12c>
 80265fc:	68ba      	ldr	r2, [r7, #8]
 80265fe:	68fb      	ldr	r3, [r7, #12]
 8026600:	429a      	cmp	r2, r3
 8026602:	d86f      	bhi.n	80266e4 <osSemaphoreNew+0x12c>
    mem = -1;
 8026604:	f04f 33ff 	mov.w	r3, #4294967295
 8026608:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 802660a:	687b      	ldr	r3, [r7, #4]
 802660c:	2b00      	cmp	r3, #0
 802660e:	d015      	beq.n	802663c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8026610:	687b      	ldr	r3, [r7, #4]
 8026612:	689b      	ldr	r3, [r3, #8]
 8026614:	2b00      	cmp	r3, #0
 8026616:	d006      	beq.n	8026626 <osSemaphoreNew+0x6e>
 8026618:	687b      	ldr	r3, [r7, #4]
 802661a:	68db      	ldr	r3, [r3, #12]
 802661c:	2b4f      	cmp	r3, #79	; 0x4f
 802661e:	d902      	bls.n	8026626 <osSemaphoreNew+0x6e>
        mem = 1;
 8026620:	2301      	movs	r3, #1
 8026622:	623b      	str	r3, [r7, #32]
 8026624:	e00c      	b.n	8026640 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8026626:	687b      	ldr	r3, [r7, #4]
 8026628:	689b      	ldr	r3, [r3, #8]
 802662a:	2b00      	cmp	r3, #0
 802662c:	d108      	bne.n	8026640 <osSemaphoreNew+0x88>
 802662e:	687b      	ldr	r3, [r7, #4]
 8026630:	68db      	ldr	r3, [r3, #12]
 8026632:	2b00      	cmp	r3, #0
 8026634:	d104      	bne.n	8026640 <osSemaphoreNew+0x88>
          mem = 0;
 8026636:	2300      	movs	r3, #0
 8026638:	623b      	str	r3, [r7, #32]
 802663a:	e001      	b.n	8026640 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 802663c:	2300      	movs	r3, #0
 802663e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8026640:	6a3b      	ldr	r3, [r7, #32]
 8026642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026646:	d04d      	beq.n	80266e4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8026648:	68fb      	ldr	r3, [r7, #12]
 802664a:	2b01      	cmp	r3, #1
 802664c:	d129      	bne.n	80266a2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 802664e:	6a3b      	ldr	r3, [r7, #32]
 8026650:	2b01      	cmp	r3, #1
 8026652:	d10b      	bne.n	802666c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8026654:	687b      	ldr	r3, [r7, #4]
 8026656:	689a      	ldr	r2, [r3, #8]
 8026658:	2303      	movs	r3, #3
 802665a:	9300      	str	r3, [sp, #0]
 802665c:	4613      	mov	r3, r2
 802665e:	2200      	movs	r2, #0
 8026660:	2100      	movs	r1, #0
 8026662:	2001      	movs	r0, #1
 8026664:	f000 fc72 	bl	8026f4c <xQueueGenericCreateStatic>
 8026668:	6278      	str	r0, [r7, #36]	; 0x24
 802666a:	e005      	b.n	8026678 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 802666c:	2203      	movs	r2, #3
 802666e:	2100      	movs	r1, #0
 8026670:	2001      	movs	r0, #1
 8026672:	f000 fcde 	bl	8027032 <xQueueGenericCreate>
 8026676:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8026678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802667a:	2b00      	cmp	r3, #0
 802667c:	d022      	beq.n	80266c4 <osSemaphoreNew+0x10c>
 802667e:	68bb      	ldr	r3, [r7, #8]
 8026680:	2b00      	cmp	r3, #0
 8026682:	d01f      	beq.n	80266c4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8026684:	2300      	movs	r3, #0
 8026686:	2200      	movs	r2, #0
 8026688:	2100      	movs	r1, #0
 802668a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802668c:	f000 fd9a 	bl	80271c4 <xQueueGenericSend>
 8026690:	4603      	mov	r3, r0
 8026692:	2b01      	cmp	r3, #1
 8026694:	d016      	beq.n	80266c4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8026696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026698:	f001 fa2f 	bl	8027afa <vQueueDelete>
            hSemaphore = NULL;
 802669c:	2300      	movs	r3, #0
 802669e:	627b      	str	r3, [r7, #36]	; 0x24
 80266a0:	e010      	b.n	80266c4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80266a2:	6a3b      	ldr	r3, [r7, #32]
 80266a4:	2b01      	cmp	r3, #1
 80266a6:	d108      	bne.n	80266ba <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80266a8:	687b      	ldr	r3, [r7, #4]
 80266aa:	689b      	ldr	r3, [r3, #8]
 80266ac:	461a      	mov	r2, r3
 80266ae:	68b9      	ldr	r1, [r7, #8]
 80266b0:	68f8      	ldr	r0, [r7, #12]
 80266b2:	f000 fd20 	bl	80270f6 <xQueueCreateCountingSemaphoreStatic>
 80266b6:	6278      	str	r0, [r7, #36]	; 0x24
 80266b8:	e004      	b.n	80266c4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80266ba:	68b9      	ldr	r1, [r7, #8]
 80266bc:	68f8      	ldr	r0, [r7, #12]
 80266be:	f000 fd4f 	bl	8027160 <xQueueCreateCountingSemaphore>
 80266c2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80266c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80266c6:	2b00      	cmp	r3, #0
 80266c8:	d00c      	beq.n	80266e4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80266ca:	687b      	ldr	r3, [r7, #4]
 80266cc:	2b00      	cmp	r3, #0
 80266ce:	d003      	beq.n	80266d8 <osSemaphoreNew+0x120>
          name = attr->name;
 80266d0:	687b      	ldr	r3, [r7, #4]
 80266d2:	681b      	ldr	r3, [r3, #0]
 80266d4:	61fb      	str	r3, [r7, #28]
 80266d6:	e001      	b.n	80266dc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80266d8:	2300      	movs	r3, #0
 80266da:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80266dc:	69f9      	ldr	r1, [r7, #28]
 80266de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80266e0:	f001 fb56 	bl	8027d90 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80266e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80266e6:	4618      	mov	r0, r3
 80266e8:	3728      	adds	r7, #40	; 0x28
 80266ea:	46bd      	mov	sp, r7
 80266ec:	bd80      	pop	{r7, pc}
 80266ee:	bf00      	nop
 80266f0:	2400142c 	.word	0x2400142c

080266f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80266f4:	b580      	push	{r7, lr}
 80266f6:	b088      	sub	sp, #32
 80266f8:	af00      	add	r7, sp, #0
 80266fa:	6078      	str	r0, [r7, #4]
 80266fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80266fe:	687b      	ldr	r3, [r7, #4]
 8026700:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8026702:	2300      	movs	r3, #0
 8026704:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8026706:	69bb      	ldr	r3, [r7, #24]
 8026708:	2b00      	cmp	r3, #0
 802670a:	d103      	bne.n	8026714 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 802670c:	f06f 0303 	mvn.w	r3, #3
 8026710:	61fb      	str	r3, [r7, #28]
 8026712:	e04b      	b.n	80267ac <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026714:	f3ef 8305 	mrs	r3, IPSR
 8026718:	617b      	str	r3, [r7, #20]
  return(result);
 802671a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 802671c:	2b00      	cmp	r3, #0
 802671e:	d10f      	bne.n	8026740 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026720:	f3ef 8310 	mrs	r3, PRIMASK
 8026724:	613b      	str	r3, [r7, #16]
  return(result);
 8026726:	693b      	ldr	r3, [r7, #16]
 8026728:	2b00      	cmp	r3, #0
 802672a:	d105      	bne.n	8026738 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802672c:	f3ef 8311 	mrs	r3, BASEPRI
 8026730:	60fb      	str	r3, [r7, #12]
  return(result);
 8026732:	68fb      	ldr	r3, [r7, #12]
 8026734:	2b00      	cmp	r3, #0
 8026736:	d026      	beq.n	8026786 <osSemaphoreAcquire+0x92>
 8026738:	4b1f      	ldr	r3, [pc, #124]	; (80267b8 <osSemaphoreAcquire+0xc4>)
 802673a:	681b      	ldr	r3, [r3, #0]
 802673c:	2b02      	cmp	r3, #2
 802673e:	d122      	bne.n	8026786 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8026740:	683b      	ldr	r3, [r7, #0]
 8026742:	2b00      	cmp	r3, #0
 8026744:	d003      	beq.n	802674e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8026746:	f06f 0303 	mvn.w	r3, #3
 802674a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 802674c:	e02d      	b.n	80267aa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 802674e:	2300      	movs	r3, #0
 8026750:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8026752:	f107 0308 	add.w	r3, r7, #8
 8026756:	461a      	mov	r2, r3
 8026758:	2100      	movs	r1, #0
 802675a:	69b8      	ldr	r0, [r7, #24]
 802675c:	f001 f92e 	bl	80279bc <xQueueReceiveFromISR>
 8026760:	4603      	mov	r3, r0
 8026762:	2b01      	cmp	r3, #1
 8026764:	d003      	beq.n	802676e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8026766:	f06f 0302 	mvn.w	r3, #2
 802676a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 802676c:	e01d      	b.n	80267aa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 802676e:	68bb      	ldr	r3, [r7, #8]
 8026770:	2b00      	cmp	r3, #0
 8026772:	d01a      	beq.n	80267aa <osSemaphoreAcquire+0xb6>
 8026774:	4b11      	ldr	r3, [pc, #68]	; (80267bc <osSemaphoreAcquire+0xc8>)
 8026776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802677a:	601a      	str	r2, [r3, #0]
 802677c:	f3bf 8f4f 	dsb	sy
 8026780:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8026784:	e011      	b.n	80267aa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8026786:	6839      	ldr	r1, [r7, #0]
 8026788:	69b8      	ldr	r0, [r7, #24]
 802678a:	f001 f80f 	bl	80277ac <xQueueSemaphoreTake>
 802678e:	4603      	mov	r3, r0
 8026790:	2b01      	cmp	r3, #1
 8026792:	d00b      	beq.n	80267ac <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8026794:	683b      	ldr	r3, [r7, #0]
 8026796:	2b00      	cmp	r3, #0
 8026798:	d003      	beq.n	80267a2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 802679a:	f06f 0301 	mvn.w	r3, #1
 802679e:	61fb      	str	r3, [r7, #28]
 80267a0:	e004      	b.n	80267ac <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80267a2:	f06f 0302 	mvn.w	r3, #2
 80267a6:	61fb      	str	r3, [r7, #28]
 80267a8:	e000      	b.n	80267ac <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80267aa:	bf00      	nop
      }
    }
  }

  return (stat);
 80267ac:	69fb      	ldr	r3, [r7, #28]
}
 80267ae:	4618      	mov	r0, r3
 80267b0:	3720      	adds	r7, #32
 80267b2:	46bd      	mov	sp, r7
 80267b4:	bd80      	pop	{r7, pc}
 80267b6:	bf00      	nop
 80267b8:	2400142c 	.word	0x2400142c
 80267bc:	e000ed04 	.word	0xe000ed04

080267c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80267c0:	b580      	push	{r7, lr}
 80267c2:	b088      	sub	sp, #32
 80267c4:	af00      	add	r7, sp, #0
 80267c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80267c8:	687b      	ldr	r3, [r7, #4]
 80267ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80267cc:	2300      	movs	r3, #0
 80267ce:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80267d0:	69bb      	ldr	r3, [r7, #24]
 80267d2:	2b00      	cmp	r3, #0
 80267d4:	d103      	bne.n	80267de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80267d6:	f06f 0303 	mvn.w	r3, #3
 80267da:	61fb      	str	r3, [r7, #28]
 80267dc:	e03e      	b.n	802685c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80267de:	f3ef 8305 	mrs	r3, IPSR
 80267e2:	617b      	str	r3, [r7, #20]
  return(result);
 80267e4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80267e6:	2b00      	cmp	r3, #0
 80267e8:	d10f      	bne.n	802680a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80267ea:	f3ef 8310 	mrs	r3, PRIMASK
 80267ee:	613b      	str	r3, [r7, #16]
  return(result);
 80267f0:	693b      	ldr	r3, [r7, #16]
 80267f2:	2b00      	cmp	r3, #0
 80267f4:	d105      	bne.n	8026802 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80267f6:	f3ef 8311 	mrs	r3, BASEPRI
 80267fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80267fc:	68fb      	ldr	r3, [r7, #12]
 80267fe:	2b00      	cmp	r3, #0
 8026800:	d01e      	beq.n	8026840 <osSemaphoreRelease+0x80>
 8026802:	4b19      	ldr	r3, [pc, #100]	; (8026868 <osSemaphoreRelease+0xa8>)
 8026804:	681b      	ldr	r3, [r3, #0]
 8026806:	2b02      	cmp	r3, #2
 8026808:	d11a      	bne.n	8026840 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 802680a:	2300      	movs	r3, #0
 802680c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 802680e:	f107 0308 	add.w	r3, r7, #8
 8026812:	4619      	mov	r1, r3
 8026814:	69b8      	ldr	r0, [r7, #24]
 8026816:	f000 fe63 	bl	80274e0 <xQueueGiveFromISR>
 802681a:	4603      	mov	r3, r0
 802681c:	2b01      	cmp	r3, #1
 802681e:	d003      	beq.n	8026828 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8026820:	f06f 0302 	mvn.w	r3, #2
 8026824:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8026826:	e018      	b.n	802685a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8026828:	68bb      	ldr	r3, [r7, #8]
 802682a:	2b00      	cmp	r3, #0
 802682c:	d015      	beq.n	802685a <osSemaphoreRelease+0x9a>
 802682e:	4b0f      	ldr	r3, [pc, #60]	; (802686c <osSemaphoreRelease+0xac>)
 8026830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026834:	601a      	str	r2, [r3, #0]
 8026836:	f3bf 8f4f 	dsb	sy
 802683a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 802683e:	e00c      	b.n	802685a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8026840:	2300      	movs	r3, #0
 8026842:	2200      	movs	r2, #0
 8026844:	2100      	movs	r1, #0
 8026846:	69b8      	ldr	r0, [r7, #24]
 8026848:	f000 fcbc 	bl	80271c4 <xQueueGenericSend>
 802684c:	4603      	mov	r3, r0
 802684e:	2b01      	cmp	r3, #1
 8026850:	d004      	beq.n	802685c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8026852:	f06f 0302 	mvn.w	r3, #2
 8026856:	61fb      	str	r3, [r7, #28]
 8026858:	e000      	b.n	802685c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 802685a:	bf00      	nop
    }
  }

  return (stat);
 802685c:	69fb      	ldr	r3, [r7, #28]
}
 802685e:	4618      	mov	r0, r3
 8026860:	3720      	adds	r7, #32
 8026862:	46bd      	mov	sp, r7
 8026864:	bd80      	pop	{r7, pc}
 8026866:	bf00      	nop
 8026868:	2400142c 	.word	0x2400142c
 802686c:	e000ed04 	.word	0xe000ed04

08026870 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8026870:	b580      	push	{r7, lr}
 8026872:	b088      	sub	sp, #32
 8026874:	af00      	add	r7, sp, #0
 8026876:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8026878:	687b      	ldr	r3, [r7, #4]
 802687a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802687c:	f3ef 8305 	mrs	r3, IPSR
 8026880:	617b      	str	r3, [r7, #20]
  return(result);
 8026882:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8026884:	2b00      	cmp	r3, #0
 8026886:	d10f      	bne.n	80268a8 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026888:	f3ef 8310 	mrs	r3, PRIMASK
 802688c:	613b      	str	r3, [r7, #16]
  return(result);
 802688e:	693b      	ldr	r3, [r7, #16]
 8026890:	2b00      	cmp	r3, #0
 8026892:	d105      	bne.n	80268a0 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026894:	f3ef 8311 	mrs	r3, BASEPRI
 8026898:	60fb      	str	r3, [r7, #12]
  return(result);
 802689a:	68fb      	ldr	r3, [r7, #12]
 802689c:	2b00      	cmp	r3, #0
 802689e:	d007      	beq.n	80268b0 <osSemaphoreDelete+0x40>
 80268a0:	4b0d      	ldr	r3, [pc, #52]	; (80268d8 <osSemaphoreDelete+0x68>)
 80268a2:	681b      	ldr	r3, [r3, #0]
 80268a4:	2b02      	cmp	r3, #2
 80268a6:	d103      	bne.n	80268b0 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80268a8:	f06f 0305 	mvn.w	r3, #5
 80268ac:	61fb      	str	r3, [r7, #28]
 80268ae:	e00e      	b.n	80268ce <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80268b0:	69bb      	ldr	r3, [r7, #24]
 80268b2:	2b00      	cmp	r3, #0
 80268b4:	d103      	bne.n	80268be <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80268b6:	f06f 0303 	mvn.w	r3, #3
 80268ba:	61fb      	str	r3, [r7, #28]
 80268bc:	e007      	b.n	80268ce <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80268be:	69b8      	ldr	r0, [r7, #24]
 80268c0:	f001 fa8e 	bl	8027de0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80268c4:	2300      	movs	r3, #0
 80268c6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80268c8:	69b8      	ldr	r0, [r7, #24]
 80268ca:	f001 f916 	bl	8027afa <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80268ce:	69fb      	ldr	r3, [r7, #28]
}
 80268d0:	4618      	mov	r0, r3
 80268d2:	3720      	adds	r7, #32
 80268d4:	46bd      	mov	sp, r7
 80268d6:	bd80      	pop	{r7, pc}
 80268d8:	2400142c 	.word	0x2400142c

080268dc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80268dc:	b580      	push	{r7, lr}
 80268de:	b08c      	sub	sp, #48	; 0x30
 80268e0:	af02      	add	r7, sp, #8
 80268e2:	60f8      	str	r0, [r7, #12]
 80268e4:	60b9      	str	r1, [r7, #8]
 80268e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80268e8:	2300      	movs	r3, #0
 80268ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80268ec:	f3ef 8305 	mrs	r3, IPSR
 80268f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80268f2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	d170      	bne.n	80269da <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80268f8:	f3ef 8310 	mrs	r3, PRIMASK
 80268fc:	617b      	str	r3, [r7, #20]
  return(result);
 80268fe:	697b      	ldr	r3, [r7, #20]
 8026900:	2b00      	cmp	r3, #0
 8026902:	d105      	bne.n	8026910 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026904:	f3ef 8311 	mrs	r3, BASEPRI
 8026908:	613b      	str	r3, [r7, #16]
  return(result);
 802690a:	693b      	ldr	r3, [r7, #16]
 802690c:	2b00      	cmp	r3, #0
 802690e:	d003      	beq.n	8026918 <osMessageQueueNew+0x3c>
 8026910:	4b34      	ldr	r3, [pc, #208]	; (80269e4 <osMessageQueueNew+0x108>)
 8026912:	681b      	ldr	r3, [r3, #0]
 8026914:	2b02      	cmp	r3, #2
 8026916:	d060      	beq.n	80269da <osMessageQueueNew+0xfe>
 8026918:	68fb      	ldr	r3, [r7, #12]
 802691a:	2b00      	cmp	r3, #0
 802691c:	d05d      	beq.n	80269da <osMessageQueueNew+0xfe>
 802691e:	68bb      	ldr	r3, [r7, #8]
 8026920:	2b00      	cmp	r3, #0
 8026922:	d05a      	beq.n	80269da <osMessageQueueNew+0xfe>
    mem = -1;
 8026924:	f04f 33ff 	mov.w	r3, #4294967295
 8026928:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 802692a:	687b      	ldr	r3, [r7, #4]
 802692c:	2b00      	cmp	r3, #0
 802692e:	d029      	beq.n	8026984 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8026930:	687b      	ldr	r3, [r7, #4]
 8026932:	689b      	ldr	r3, [r3, #8]
 8026934:	2b00      	cmp	r3, #0
 8026936:	d012      	beq.n	802695e <osMessageQueueNew+0x82>
 8026938:	687b      	ldr	r3, [r7, #4]
 802693a:	68db      	ldr	r3, [r3, #12]
 802693c:	2b4f      	cmp	r3, #79	; 0x4f
 802693e:	d90e      	bls.n	802695e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8026940:	687b      	ldr	r3, [r7, #4]
 8026942:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8026944:	2b00      	cmp	r3, #0
 8026946:	d00a      	beq.n	802695e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8026948:	687b      	ldr	r3, [r7, #4]
 802694a:	695a      	ldr	r2, [r3, #20]
 802694c:	68fb      	ldr	r3, [r7, #12]
 802694e:	68b9      	ldr	r1, [r7, #8]
 8026950:	fb01 f303 	mul.w	r3, r1, r3
 8026954:	429a      	cmp	r2, r3
 8026956:	d302      	bcc.n	802695e <osMessageQueueNew+0x82>
        mem = 1;
 8026958:	2301      	movs	r3, #1
 802695a:	623b      	str	r3, [r7, #32]
 802695c:	e014      	b.n	8026988 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 802695e:	687b      	ldr	r3, [r7, #4]
 8026960:	689b      	ldr	r3, [r3, #8]
 8026962:	2b00      	cmp	r3, #0
 8026964:	d110      	bne.n	8026988 <osMessageQueueNew+0xac>
 8026966:	687b      	ldr	r3, [r7, #4]
 8026968:	68db      	ldr	r3, [r3, #12]
 802696a:	2b00      	cmp	r3, #0
 802696c:	d10c      	bne.n	8026988 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 802696e:	687b      	ldr	r3, [r7, #4]
 8026970:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8026972:	2b00      	cmp	r3, #0
 8026974:	d108      	bne.n	8026988 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8026976:	687b      	ldr	r3, [r7, #4]
 8026978:	695b      	ldr	r3, [r3, #20]
 802697a:	2b00      	cmp	r3, #0
 802697c:	d104      	bne.n	8026988 <osMessageQueueNew+0xac>
          mem = 0;
 802697e:	2300      	movs	r3, #0
 8026980:	623b      	str	r3, [r7, #32]
 8026982:	e001      	b.n	8026988 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8026984:	2300      	movs	r3, #0
 8026986:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8026988:	6a3b      	ldr	r3, [r7, #32]
 802698a:	2b01      	cmp	r3, #1
 802698c:	d10c      	bne.n	80269a8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 802698e:	687b      	ldr	r3, [r7, #4]
 8026990:	691a      	ldr	r2, [r3, #16]
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	6899      	ldr	r1, [r3, #8]
 8026996:	2300      	movs	r3, #0
 8026998:	9300      	str	r3, [sp, #0]
 802699a:	460b      	mov	r3, r1
 802699c:	68b9      	ldr	r1, [r7, #8]
 802699e:	68f8      	ldr	r0, [r7, #12]
 80269a0:	f000 fad4 	bl	8026f4c <xQueueGenericCreateStatic>
 80269a4:	6278      	str	r0, [r7, #36]	; 0x24
 80269a6:	e008      	b.n	80269ba <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80269a8:	6a3b      	ldr	r3, [r7, #32]
 80269aa:	2b00      	cmp	r3, #0
 80269ac:	d105      	bne.n	80269ba <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80269ae:	2200      	movs	r2, #0
 80269b0:	68b9      	ldr	r1, [r7, #8]
 80269b2:	68f8      	ldr	r0, [r7, #12]
 80269b4:	f000 fb3d 	bl	8027032 <xQueueGenericCreate>
 80269b8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80269ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80269bc:	2b00      	cmp	r3, #0
 80269be:	d00c      	beq.n	80269da <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	2b00      	cmp	r3, #0
 80269c4:	d003      	beq.n	80269ce <osMessageQueueNew+0xf2>
        name = attr->name;
 80269c6:	687b      	ldr	r3, [r7, #4]
 80269c8:	681b      	ldr	r3, [r3, #0]
 80269ca:	61fb      	str	r3, [r7, #28]
 80269cc:	e001      	b.n	80269d2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80269ce:	2300      	movs	r3, #0
 80269d0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80269d2:	69f9      	ldr	r1, [r7, #28]
 80269d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80269d6:	f001 f9db 	bl	8027d90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80269da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80269dc:	4618      	mov	r0, r3
 80269de:	3728      	adds	r7, #40	; 0x28
 80269e0:	46bd      	mov	sp, r7
 80269e2:	bd80      	pop	{r7, pc}
 80269e4:	2400142c 	.word	0x2400142c

080269e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80269e8:	b580      	push	{r7, lr}
 80269ea:	b08a      	sub	sp, #40	; 0x28
 80269ec:	af00      	add	r7, sp, #0
 80269ee:	60f8      	str	r0, [r7, #12]
 80269f0:	60b9      	str	r1, [r7, #8]
 80269f2:	603b      	str	r3, [r7, #0]
 80269f4:	4613      	mov	r3, r2
 80269f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80269f8:	68fb      	ldr	r3, [r7, #12]
 80269fa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80269fc:	2300      	movs	r3, #0
 80269fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026a00:	f3ef 8305 	mrs	r3, IPSR
 8026a04:	61fb      	str	r3, [r7, #28]
  return(result);
 8026a06:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8026a08:	2b00      	cmp	r3, #0
 8026a0a:	d10f      	bne.n	8026a2c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8026a10:	61bb      	str	r3, [r7, #24]
  return(result);
 8026a12:	69bb      	ldr	r3, [r7, #24]
 8026a14:	2b00      	cmp	r3, #0
 8026a16:	d105      	bne.n	8026a24 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026a18:	f3ef 8311 	mrs	r3, BASEPRI
 8026a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8026a1e:	697b      	ldr	r3, [r7, #20]
 8026a20:	2b00      	cmp	r3, #0
 8026a22:	d02c      	beq.n	8026a7e <osMessageQueuePut+0x96>
 8026a24:	4b28      	ldr	r3, [pc, #160]	; (8026ac8 <osMessageQueuePut+0xe0>)
 8026a26:	681b      	ldr	r3, [r3, #0]
 8026a28:	2b02      	cmp	r3, #2
 8026a2a:	d128      	bne.n	8026a7e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026a2c:	6a3b      	ldr	r3, [r7, #32]
 8026a2e:	2b00      	cmp	r3, #0
 8026a30:	d005      	beq.n	8026a3e <osMessageQueuePut+0x56>
 8026a32:	68bb      	ldr	r3, [r7, #8]
 8026a34:	2b00      	cmp	r3, #0
 8026a36:	d002      	beq.n	8026a3e <osMessageQueuePut+0x56>
 8026a38:	683b      	ldr	r3, [r7, #0]
 8026a3a:	2b00      	cmp	r3, #0
 8026a3c:	d003      	beq.n	8026a46 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8026a3e:	f06f 0303 	mvn.w	r3, #3
 8026a42:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026a44:	e039      	b.n	8026aba <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8026a46:	2300      	movs	r3, #0
 8026a48:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8026a4a:	f107 0210 	add.w	r2, r7, #16
 8026a4e:	2300      	movs	r3, #0
 8026a50:	68b9      	ldr	r1, [r7, #8]
 8026a52:	6a38      	ldr	r0, [r7, #32]
 8026a54:	f000 fcb0 	bl	80273b8 <xQueueGenericSendFromISR>
 8026a58:	4603      	mov	r3, r0
 8026a5a:	2b01      	cmp	r3, #1
 8026a5c:	d003      	beq.n	8026a66 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8026a5e:	f06f 0302 	mvn.w	r3, #2
 8026a62:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026a64:	e029      	b.n	8026aba <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8026a66:	693b      	ldr	r3, [r7, #16]
 8026a68:	2b00      	cmp	r3, #0
 8026a6a:	d026      	beq.n	8026aba <osMessageQueuePut+0xd2>
 8026a6c:	4b17      	ldr	r3, [pc, #92]	; (8026acc <osMessageQueuePut+0xe4>)
 8026a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026a72:	601a      	str	r2, [r3, #0]
 8026a74:	f3bf 8f4f 	dsb	sy
 8026a78:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026a7c:	e01d      	b.n	8026aba <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8026a7e:	6a3b      	ldr	r3, [r7, #32]
 8026a80:	2b00      	cmp	r3, #0
 8026a82:	d002      	beq.n	8026a8a <osMessageQueuePut+0xa2>
 8026a84:	68bb      	ldr	r3, [r7, #8]
 8026a86:	2b00      	cmp	r3, #0
 8026a88:	d103      	bne.n	8026a92 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8026a8a:	f06f 0303 	mvn.w	r3, #3
 8026a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8026a90:	e014      	b.n	8026abc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8026a92:	2300      	movs	r3, #0
 8026a94:	683a      	ldr	r2, [r7, #0]
 8026a96:	68b9      	ldr	r1, [r7, #8]
 8026a98:	6a38      	ldr	r0, [r7, #32]
 8026a9a:	f000 fb93 	bl	80271c4 <xQueueGenericSend>
 8026a9e:	4603      	mov	r3, r0
 8026aa0:	2b01      	cmp	r3, #1
 8026aa2:	d00b      	beq.n	8026abc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8026aa4:	683b      	ldr	r3, [r7, #0]
 8026aa6:	2b00      	cmp	r3, #0
 8026aa8:	d003      	beq.n	8026ab2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8026aaa:	f06f 0301 	mvn.w	r3, #1
 8026aae:	627b      	str	r3, [r7, #36]	; 0x24
 8026ab0:	e004      	b.n	8026abc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8026ab2:	f06f 0302 	mvn.w	r3, #2
 8026ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8026ab8:	e000      	b.n	8026abc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026aba:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8026abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8026abe:	4618      	mov	r0, r3
 8026ac0:	3728      	adds	r7, #40	; 0x28
 8026ac2:	46bd      	mov	sp, r7
 8026ac4:	bd80      	pop	{r7, pc}
 8026ac6:	bf00      	nop
 8026ac8:	2400142c 	.word	0x2400142c
 8026acc:	e000ed04 	.word	0xe000ed04

08026ad0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8026ad0:	b580      	push	{r7, lr}
 8026ad2:	b08a      	sub	sp, #40	; 0x28
 8026ad4:	af00      	add	r7, sp, #0
 8026ad6:	60f8      	str	r0, [r7, #12]
 8026ad8:	60b9      	str	r1, [r7, #8]
 8026ada:	607a      	str	r2, [r7, #4]
 8026adc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8026ade:	68fb      	ldr	r3, [r7, #12]
 8026ae0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8026ae2:	2300      	movs	r3, #0
 8026ae4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026ae6:	f3ef 8305 	mrs	r3, IPSR
 8026aea:	61fb      	str	r3, [r7, #28]
  return(result);
 8026aec:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	d10f      	bne.n	8026b12 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026af2:	f3ef 8310 	mrs	r3, PRIMASK
 8026af6:	61bb      	str	r3, [r7, #24]
  return(result);
 8026af8:	69bb      	ldr	r3, [r7, #24]
 8026afa:	2b00      	cmp	r3, #0
 8026afc:	d105      	bne.n	8026b0a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026afe:	f3ef 8311 	mrs	r3, BASEPRI
 8026b02:	617b      	str	r3, [r7, #20]
  return(result);
 8026b04:	697b      	ldr	r3, [r7, #20]
 8026b06:	2b00      	cmp	r3, #0
 8026b08:	d02c      	beq.n	8026b64 <osMessageQueueGet+0x94>
 8026b0a:	4b28      	ldr	r3, [pc, #160]	; (8026bac <osMessageQueueGet+0xdc>)
 8026b0c:	681b      	ldr	r3, [r3, #0]
 8026b0e:	2b02      	cmp	r3, #2
 8026b10:	d128      	bne.n	8026b64 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026b12:	6a3b      	ldr	r3, [r7, #32]
 8026b14:	2b00      	cmp	r3, #0
 8026b16:	d005      	beq.n	8026b24 <osMessageQueueGet+0x54>
 8026b18:	68bb      	ldr	r3, [r7, #8]
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d002      	beq.n	8026b24 <osMessageQueueGet+0x54>
 8026b1e:	683b      	ldr	r3, [r7, #0]
 8026b20:	2b00      	cmp	r3, #0
 8026b22:	d003      	beq.n	8026b2c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8026b24:	f06f 0303 	mvn.w	r3, #3
 8026b28:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026b2a:	e038      	b.n	8026b9e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8026b2c:	2300      	movs	r3, #0
 8026b2e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8026b30:	f107 0310 	add.w	r3, r7, #16
 8026b34:	461a      	mov	r2, r3
 8026b36:	68b9      	ldr	r1, [r7, #8]
 8026b38:	6a38      	ldr	r0, [r7, #32]
 8026b3a:	f000 ff3f 	bl	80279bc <xQueueReceiveFromISR>
 8026b3e:	4603      	mov	r3, r0
 8026b40:	2b01      	cmp	r3, #1
 8026b42:	d003      	beq.n	8026b4c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8026b44:	f06f 0302 	mvn.w	r3, #2
 8026b48:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026b4a:	e028      	b.n	8026b9e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8026b4c:	693b      	ldr	r3, [r7, #16]
 8026b4e:	2b00      	cmp	r3, #0
 8026b50:	d025      	beq.n	8026b9e <osMessageQueueGet+0xce>
 8026b52:	4b17      	ldr	r3, [pc, #92]	; (8026bb0 <osMessageQueueGet+0xe0>)
 8026b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026b58:	601a      	str	r2, [r3, #0]
 8026b5a:	f3bf 8f4f 	dsb	sy
 8026b5e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026b62:	e01c      	b.n	8026b9e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8026b64:	6a3b      	ldr	r3, [r7, #32]
 8026b66:	2b00      	cmp	r3, #0
 8026b68:	d002      	beq.n	8026b70 <osMessageQueueGet+0xa0>
 8026b6a:	68bb      	ldr	r3, [r7, #8]
 8026b6c:	2b00      	cmp	r3, #0
 8026b6e:	d103      	bne.n	8026b78 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8026b70:	f06f 0303 	mvn.w	r3, #3
 8026b74:	627b      	str	r3, [r7, #36]	; 0x24
 8026b76:	e013      	b.n	8026ba0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8026b78:	683a      	ldr	r2, [r7, #0]
 8026b7a:	68b9      	ldr	r1, [r7, #8]
 8026b7c:	6a38      	ldr	r0, [r7, #32]
 8026b7e:	f000 fd39 	bl	80275f4 <xQueueReceive>
 8026b82:	4603      	mov	r3, r0
 8026b84:	2b01      	cmp	r3, #1
 8026b86:	d00b      	beq.n	8026ba0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8026b88:	683b      	ldr	r3, [r7, #0]
 8026b8a:	2b00      	cmp	r3, #0
 8026b8c:	d003      	beq.n	8026b96 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8026b8e:	f06f 0301 	mvn.w	r3, #1
 8026b92:	627b      	str	r3, [r7, #36]	; 0x24
 8026b94:	e004      	b.n	8026ba0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8026b96:	f06f 0302 	mvn.w	r3, #2
 8026b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8026b9c:	e000      	b.n	8026ba0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8026b9e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8026ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	3728      	adds	r7, #40	; 0x28
 8026ba6:	46bd      	mov	sp, r7
 8026ba8:	bd80      	pop	{r7, pc}
 8026baa:	bf00      	nop
 8026bac:	2400142c 	.word	0x2400142c
 8026bb0:	e000ed04 	.word	0xe000ed04

08026bb4 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8026bb4:	b580      	push	{r7, lr}
 8026bb6:	b08c      	sub	sp, #48	; 0x30
 8026bb8:	af00      	add	r7, sp, #0
 8026bba:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8026bbc:	687b      	ldr	r3, [r7, #4]
 8026bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8026bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026bc2:	2b00      	cmp	r3, #0
 8026bc4:	d102      	bne.n	8026bcc <osMessageQueueGetSpace+0x18>
    space = 0U;
 8026bc6:	2300      	movs	r3, #0
 8026bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026bca:	e033      	b.n	8026c34 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026bcc:	f3ef 8305 	mrs	r3, IPSR
 8026bd0:	623b      	str	r3, [r7, #32]
  return(result);
 8026bd2:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 8026bd4:	2b00      	cmp	r3, #0
 8026bd6:	d10f      	bne.n	8026bf8 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8026bdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8026bde:	69fb      	ldr	r3, [r7, #28]
 8026be0:	2b00      	cmp	r3, #0
 8026be2:	d105      	bne.n	8026bf0 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026be4:	f3ef 8311 	mrs	r3, BASEPRI
 8026be8:	61bb      	str	r3, [r7, #24]
  return(result);
 8026bea:	69bb      	ldr	r3, [r7, #24]
 8026bec:	2b00      	cmp	r3, #0
 8026bee:	d01d      	beq.n	8026c2c <osMessageQueueGetSpace+0x78>
 8026bf0:	4b13      	ldr	r3, [pc, #76]	; (8026c40 <osMessageQueueGetSpace+0x8c>)
 8026bf2:	681b      	ldr	r3, [r3, #0]
 8026bf4:	2b02      	cmp	r3, #2
 8026bf6:	d119      	bne.n	8026c2c <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8026bf8:	f3ef 8211 	mrs	r2, BASEPRI
 8026bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026c00:	f383 8811 	msr	BASEPRI, r3
 8026c04:	f3bf 8f6f 	isb	sy
 8026c08:	f3bf 8f4f 	dsb	sy
 8026c0c:	613a      	str	r2, [r7, #16]
 8026c0e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8026c10:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8026c12:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8026c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8026c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c1c:	1ad3      	subs	r3, r2, r3
 8026c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8026c24:	697b      	ldr	r3, [r7, #20]
 8026c26:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 8026c2a:	e003      	b.n	8026c34 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8026c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026c2e:	f000 ff42 	bl	8027ab6 <uxQueueSpacesAvailable>
 8026c32:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 8026c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8026c36:	4618      	mov	r0, r3
 8026c38:	3730      	adds	r7, #48	; 0x30
 8026c3a:	46bd      	mov	sp, r7
 8026c3c:	bd80      	pop	{r7, pc}
 8026c3e:	bf00      	nop
 8026c40:	2400142c 	.word	0x2400142c

08026c44 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8026c44:	b580      	push	{r7, lr}
 8026c46:	b088      	sub	sp, #32
 8026c48:	af00      	add	r7, sp, #0
 8026c4a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8026c4c:	687b      	ldr	r3, [r7, #4]
 8026c4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026c50:	f3ef 8305 	mrs	r3, IPSR
 8026c54:	617b      	str	r3, [r7, #20]
  return(result);
 8026c56:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8026c58:	2b00      	cmp	r3, #0
 8026c5a:	d10f      	bne.n	8026c7c <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8026c60:	613b      	str	r3, [r7, #16]
  return(result);
 8026c62:	693b      	ldr	r3, [r7, #16]
 8026c64:	2b00      	cmp	r3, #0
 8026c66:	d105      	bne.n	8026c74 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026c68:	f3ef 8311 	mrs	r3, BASEPRI
 8026c6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8026c6e:	68fb      	ldr	r3, [r7, #12]
 8026c70:	2b00      	cmp	r3, #0
 8026c72:	d007      	beq.n	8026c84 <osMessageQueueReset+0x40>
 8026c74:	4b0c      	ldr	r3, [pc, #48]	; (8026ca8 <osMessageQueueReset+0x64>)
 8026c76:	681b      	ldr	r3, [r3, #0]
 8026c78:	2b02      	cmp	r3, #2
 8026c7a:	d103      	bne.n	8026c84 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8026c7c:	f06f 0305 	mvn.w	r3, #5
 8026c80:	61fb      	str	r3, [r7, #28]
 8026c82:	e00c      	b.n	8026c9e <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 8026c84:	69bb      	ldr	r3, [r7, #24]
 8026c86:	2b00      	cmp	r3, #0
 8026c88:	d103      	bne.n	8026c92 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8026c8a:	f06f 0303 	mvn.w	r3, #3
 8026c8e:	61fb      	str	r3, [r7, #28]
 8026c90:	e005      	b.n	8026c9e <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 8026c92:	2300      	movs	r3, #0
 8026c94:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 8026c96:	2100      	movs	r1, #0
 8026c98:	69b8      	ldr	r0, [r7, #24]
 8026c9a:	f000 f8ef 	bl	8026e7c <xQueueGenericReset>
  }

  return (stat);
 8026c9e:	69fb      	ldr	r3, [r7, #28]
}
 8026ca0:	4618      	mov	r0, r3
 8026ca2:	3720      	adds	r7, #32
 8026ca4:	46bd      	mov	sp, r7
 8026ca6:	bd80      	pop	{r7, pc}
 8026ca8:	2400142c 	.word	0x2400142c

08026cac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8026cac:	b480      	push	{r7}
 8026cae:	b085      	sub	sp, #20
 8026cb0:	af00      	add	r7, sp, #0
 8026cb2:	60f8      	str	r0, [r7, #12]
 8026cb4:	60b9      	str	r1, [r7, #8]
 8026cb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8026cb8:	68fb      	ldr	r3, [r7, #12]
 8026cba:	4a07      	ldr	r2, [pc, #28]	; (8026cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8026cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8026cbe:	68bb      	ldr	r3, [r7, #8]
 8026cc0:	4a06      	ldr	r2, [pc, #24]	; (8026cdc <vApplicationGetIdleTaskMemory+0x30>)
 8026cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8026cc4:	687b      	ldr	r3, [r7, #4]
 8026cc6:	2280      	movs	r2, #128	; 0x80
 8026cc8:	601a      	str	r2, [r3, #0]
}
 8026cca:	bf00      	nop
 8026ccc:	3714      	adds	r7, #20
 8026cce:	46bd      	mov	sp, r7
 8026cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cd4:	4770      	bx	lr
 8026cd6:	bf00      	nop
 8026cd8:	24001430 	.word	0x24001430
 8026cdc:	2400148c 	.word	0x2400148c

08026ce0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8026ce0:	b480      	push	{r7}
 8026ce2:	b085      	sub	sp, #20
 8026ce4:	af00      	add	r7, sp, #0
 8026ce6:	60f8      	str	r0, [r7, #12]
 8026ce8:	60b9      	str	r1, [r7, #8]
 8026cea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8026cec:	68fb      	ldr	r3, [r7, #12]
 8026cee:	4a07      	ldr	r2, [pc, #28]	; (8026d0c <vApplicationGetTimerTaskMemory+0x2c>)
 8026cf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8026cf2:	68bb      	ldr	r3, [r7, #8]
 8026cf4:	4a06      	ldr	r2, [pc, #24]	; (8026d10 <vApplicationGetTimerTaskMemory+0x30>)
 8026cf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8026cf8:	687b      	ldr	r3, [r7, #4]
 8026cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8026cfe:	601a      	str	r2, [r3, #0]
}
 8026d00:	bf00      	nop
 8026d02:	3714      	adds	r7, #20
 8026d04:	46bd      	mov	sp, r7
 8026d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d0a:	4770      	bx	lr
 8026d0c:	2400168c 	.word	0x2400168c
 8026d10:	240016e8 	.word	0x240016e8

08026d14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8026d14:	b480      	push	{r7}
 8026d16:	b083      	sub	sp, #12
 8026d18:	af00      	add	r7, sp, #0
 8026d1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8026d1c:	687b      	ldr	r3, [r7, #4]
 8026d1e:	f103 0208 	add.w	r2, r3, #8
 8026d22:	687b      	ldr	r3, [r7, #4]
 8026d24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8026d26:	687b      	ldr	r3, [r7, #4]
 8026d28:	f04f 32ff 	mov.w	r2, #4294967295
 8026d2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8026d2e:	687b      	ldr	r3, [r7, #4]
 8026d30:	f103 0208 	add.w	r2, r3, #8
 8026d34:	687b      	ldr	r3, [r7, #4]
 8026d36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8026d38:	687b      	ldr	r3, [r7, #4]
 8026d3a:	f103 0208 	add.w	r2, r3, #8
 8026d3e:	687b      	ldr	r3, [r7, #4]
 8026d40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	2200      	movs	r2, #0
 8026d46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8026d48:	bf00      	nop
 8026d4a:	370c      	adds	r7, #12
 8026d4c:	46bd      	mov	sp, r7
 8026d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d52:	4770      	bx	lr

08026d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8026d54:	b480      	push	{r7}
 8026d56:	b083      	sub	sp, #12
 8026d58:	af00      	add	r7, sp, #0
 8026d5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8026d5c:	687b      	ldr	r3, [r7, #4]
 8026d5e:	2200      	movs	r2, #0
 8026d60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8026d62:	bf00      	nop
 8026d64:	370c      	adds	r7, #12
 8026d66:	46bd      	mov	sp, r7
 8026d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d6c:	4770      	bx	lr

08026d6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8026d6e:	b480      	push	{r7}
 8026d70:	b085      	sub	sp, #20
 8026d72:	af00      	add	r7, sp, #0
 8026d74:	6078      	str	r0, [r7, #4]
 8026d76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	685b      	ldr	r3, [r3, #4]
 8026d7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8026d7e:	683b      	ldr	r3, [r7, #0]
 8026d80:	68fa      	ldr	r2, [r7, #12]
 8026d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8026d84:	68fb      	ldr	r3, [r7, #12]
 8026d86:	689a      	ldr	r2, [r3, #8]
 8026d88:	683b      	ldr	r3, [r7, #0]
 8026d8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8026d8c:	68fb      	ldr	r3, [r7, #12]
 8026d8e:	689b      	ldr	r3, [r3, #8]
 8026d90:	683a      	ldr	r2, [r7, #0]
 8026d92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8026d94:	68fb      	ldr	r3, [r7, #12]
 8026d96:	683a      	ldr	r2, [r7, #0]
 8026d98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8026d9a:	683b      	ldr	r3, [r7, #0]
 8026d9c:	687a      	ldr	r2, [r7, #4]
 8026d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8026da0:	687b      	ldr	r3, [r7, #4]
 8026da2:	681b      	ldr	r3, [r3, #0]
 8026da4:	1c5a      	adds	r2, r3, #1
 8026da6:	687b      	ldr	r3, [r7, #4]
 8026da8:	601a      	str	r2, [r3, #0]
}
 8026daa:	bf00      	nop
 8026dac:	3714      	adds	r7, #20
 8026dae:	46bd      	mov	sp, r7
 8026db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026db4:	4770      	bx	lr

08026db6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8026db6:	b480      	push	{r7}
 8026db8:	b085      	sub	sp, #20
 8026dba:	af00      	add	r7, sp, #0
 8026dbc:	6078      	str	r0, [r7, #4]
 8026dbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8026dc0:	683b      	ldr	r3, [r7, #0]
 8026dc2:	681b      	ldr	r3, [r3, #0]
 8026dc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8026dc6:	68bb      	ldr	r3, [r7, #8]
 8026dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026dcc:	d103      	bne.n	8026dd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8026dce:	687b      	ldr	r3, [r7, #4]
 8026dd0:	691b      	ldr	r3, [r3, #16]
 8026dd2:	60fb      	str	r3, [r7, #12]
 8026dd4:	e00c      	b.n	8026df0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8026dd6:	687b      	ldr	r3, [r7, #4]
 8026dd8:	3308      	adds	r3, #8
 8026dda:	60fb      	str	r3, [r7, #12]
 8026ddc:	e002      	b.n	8026de4 <vListInsert+0x2e>
 8026dde:	68fb      	ldr	r3, [r7, #12]
 8026de0:	685b      	ldr	r3, [r3, #4]
 8026de2:	60fb      	str	r3, [r7, #12]
 8026de4:	68fb      	ldr	r3, [r7, #12]
 8026de6:	685b      	ldr	r3, [r3, #4]
 8026de8:	681b      	ldr	r3, [r3, #0]
 8026dea:	68ba      	ldr	r2, [r7, #8]
 8026dec:	429a      	cmp	r2, r3
 8026dee:	d2f6      	bcs.n	8026dde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8026df0:	68fb      	ldr	r3, [r7, #12]
 8026df2:	685a      	ldr	r2, [r3, #4]
 8026df4:	683b      	ldr	r3, [r7, #0]
 8026df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8026df8:	683b      	ldr	r3, [r7, #0]
 8026dfa:	685b      	ldr	r3, [r3, #4]
 8026dfc:	683a      	ldr	r2, [r7, #0]
 8026dfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8026e00:	683b      	ldr	r3, [r7, #0]
 8026e02:	68fa      	ldr	r2, [r7, #12]
 8026e04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8026e06:	68fb      	ldr	r3, [r7, #12]
 8026e08:	683a      	ldr	r2, [r7, #0]
 8026e0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8026e0c:	683b      	ldr	r3, [r7, #0]
 8026e0e:	687a      	ldr	r2, [r7, #4]
 8026e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8026e12:	687b      	ldr	r3, [r7, #4]
 8026e14:	681b      	ldr	r3, [r3, #0]
 8026e16:	1c5a      	adds	r2, r3, #1
 8026e18:	687b      	ldr	r3, [r7, #4]
 8026e1a:	601a      	str	r2, [r3, #0]
}
 8026e1c:	bf00      	nop
 8026e1e:	3714      	adds	r7, #20
 8026e20:	46bd      	mov	sp, r7
 8026e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e26:	4770      	bx	lr

08026e28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8026e28:	b480      	push	{r7}
 8026e2a:	b085      	sub	sp, #20
 8026e2c:	af00      	add	r7, sp, #0
 8026e2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8026e30:	687b      	ldr	r3, [r7, #4]
 8026e32:	691b      	ldr	r3, [r3, #16]
 8026e34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8026e36:	687b      	ldr	r3, [r7, #4]
 8026e38:	685b      	ldr	r3, [r3, #4]
 8026e3a:	687a      	ldr	r2, [r7, #4]
 8026e3c:	6892      	ldr	r2, [r2, #8]
 8026e3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8026e40:	687b      	ldr	r3, [r7, #4]
 8026e42:	689b      	ldr	r3, [r3, #8]
 8026e44:	687a      	ldr	r2, [r7, #4]
 8026e46:	6852      	ldr	r2, [r2, #4]
 8026e48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8026e4a:	68fb      	ldr	r3, [r7, #12]
 8026e4c:	685b      	ldr	r3, [r3, #4]
 8026e4e:	687a      	ldr	r2, [r7, #4]
 8026e50:	429a      	cmp	r2, r3
 8026e52:	d103      	bne.n	8026e5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8026e54:	687b      	ldr	r3, [r7, #4]
 8026e56:	689a      	ldr	r2, [r3, #8]
 8026e58:	68fb      	ldr	r3, [r7, #12]
 8026e5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8026e5c:	687b      	ldr	r3, [r7, #4]
 8026e5e:	2200      	movs	r2, #0
 8026e60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8026e62:	68fb      	ldr	r3, [r7, #12]
 8026e64:	681b      	ldr	r3, [r3, #0]
 8026e66:	1e5a      	subs	r2, r3, #1
 8026e68:	68fb      	ldr	r3, [r7, #12]
 8026e6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8026e6c:	68fb      	ldr	r3, [r7, #12]
 8026e6e:	681b      	ldr	r3, [r3, #0]
}
 8026e70:	4618      	mov	r0, r3
 8026e72:	3714      	adds	r7, #20
 8026e74:	46bd      	mov	sp, r7
 8026e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e7a:	4770      	bx	lr

08026e7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8026e7c:	b580      	push	{r7, lr}
 8026e7e:	b084      	sub	sp, #16
 8026e80:	af00      	add	r7, sp, #0
 8026e82:	6078      	str	r0, [r7, #4]
 8026e84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8026e86:	687b      	ldr	r3, [r7, #4]
 8026e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8026e8a:	68fb      	ldr	r3, [r7, #12]
 8026e8c:	2b00      	cmp	r3, #0
 8026e8e:	d109      	bne.n	8026ea4 <xQueueGenericReset+0x28>
	__asm volatile
 8026e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026e94:	f383 8811 	msr	BASEPRI, r3
 8026e98:	f3bf 8f6f 	isb	sy
 8026e9c:	f3bf 8f4f 	dsb	sy
 8026ea0:	60bb      	str	r3, [r7, #8]
 8026ea2:	e7fe      	b.n	8026ea2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8026ea4:	f002 feca 	bl	8029c3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8026ea8:	68fb      	ldr	r3, [r7, #12]
 8026eaa:	681a      	ldr	r2, [r3, #0]
 8026eac:	68fb      	ldr	r3, [r7, #12]
 8026eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026eb0:	68f9      	ldr	r1, [r7, #12]
 8026eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8026eb4:	fb01 f303 	mul.w	r3, r1, r3
 8026eb8:	441a      	add	r2, r3
 8026eba:	68fb      	ldr	r3, [r7, #12]
 8026ebc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8026ebe:	68fb      	ldr	r3, [r7, #12]
 8026ec0:	2200      	movs	r2, #0
 8026ec2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8026ec4:	68fb      	ldr	r3, [r7, #12]
 8026ec6:	681a      	ldr	r2, [r3, #0]
 8026ec8:	68fb      	ldr	r3, [r7, #12]
 8026eca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8026ecc:	68fb      	ldr	r3, [r7, #12]
 8026ece:	681a      	ldr	r2, [r3, #0]
 8026ed0:	68fb      	ldr	r3, [r7, #12]
 8026ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026ed4:	3b01      	subs	r3, #1
 8026ed6:	68f9      	ldr	r1, [r7, #12]
 8026ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8026eda:	fb01 f303 	mul.w	r3, r1, r3
 8026ede:	441a      	add	r2, r3
 8026ee0:	68fb      	ldr	r3, [r7, #12]
 8026ee2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8026ee4:	68fb      	ldr	r3, [r7, #12]
 8026ee6:	22ff      	movs	r2, #255	; 0xff
 8026ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8026eec:	68fb      	ldr	r3, [r7, #12]
 8026eee:	22ff      	movs	r2, #255	; 0xff
 8026ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8026ef4:	683b      	ldr	r3, [r7, #0]
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	d114      	bne.n	8026f24 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8026efa:	68fb      	ldr	r3, [r7, #12]
 8026efc:	691b      	ldr	r3, [r3, #16]
 8026efe:	2b00      	cmp	r3, #0
 8026f00:	d01a      	beq.n	8026f38 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8026f02:	68fb      	ldr	r3, [r7, #12]
 8026f04:	3310      	adds	r3, #16
 8026f06:	4618      	mov	r0, r3
 8026f08:	f001 fca6 	bl	8028858 <xTaskRemoveFromEventList>
 8026f0c:	4603      	mov	r3, r0
 8026f0e:	2b00      	cmp	r3, #0
 8026f10:	d012      	beq.n	8026f38 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8026f12:	4b0d      	ldr	r3, [pc, #52]	; (8026f48 <xQueueGenericReset+0xcc>)
 8026f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026f18:	601a      	str	r2, [r3, #0]
 8026f1a:	f3bf 8f4f 	dsb	sy
 8026f1e:	f3bf 8f6f 	isb	sy
 8026f22:	e009      	b.n	8026f38 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8026f24:	68fb      	ldr	r3, [r7, #12]
 8026f26:	3310      	adds	r3, #16
 8026f28:	4618      	mov	r0, r3
 8026f2a:	f7ff fef3 	bl	8026d14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8026f2e:	68fb      	ldr	r3, [r7, #12]
 8026f30:	3324      	adds	r3, #36	; 0x24
 8026f32:	4618      	mov	r0, r3
 8026f34:	f7ff feee 	bl	8026d14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8026f38:	f002 feae 	bl	8029c98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8026f3c:	2301      	movs	r3, #1
}
 8026f3e:	4618      	mov	r0, r3
 8026f40:	3710      	adds	r7, #16
 8026f42:	46bd      	mov	sp, r7
 8026f44:	bd80      	pop	{r7, pc}
 8026f46:	bf00      	nop
 8026f48:	e000ed04 	.word	0xe000ed04

08026f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8026f4c:	b580      	push	{r7, lr}
 8026f4e:	b08e      	sub	sp, #56	; 0x38
 8026f50:	af02      	add	r7, sp, #8
 8026f52:	60f8      	str	r0, [r7, #12]
 8026f54:	60b9      	str	r1, [r7, #8]
 8026f56:	607a      	str	r2, [r7, #4]
 8026f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8026f5a:	68fb      	ldr	r3, [r7, #12]
 8026f5c:	2b00      	cmp	r3, #0
 8026f5e:	d109      	bne.n	8026f74 <xQueueGenericCreateStatic+0x28>
 8026f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026f64:	f383 8811 	msr	BASEPRI, r3
 8026f68:	f3bf 8f6f 	isb	sy
 8026f6c:	f3bf 8f4f 	dsb	sy
 8026f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8026f72:	e7fe      	b.n	8026f72 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8026f74:	683b      	ldr	r3, [r7, #0]
 8026f76:	2b00      	cmp	r3, #0
 8026f78:	d109      	bne.n	8026f8e <xQueueGenericCreateStatic+0x42>
 8026f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026f7e:	f383 8811 	msr	BASEPRI, r3
 8026f82:	f3bf 8f6f 	isb	sy
 8026f86:	f3bf 8f4f 	dsb	sy
 8026f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8026f8c:	e7fe      	b.n	8026f8c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8026f8e:	687b      	ldr	r3, [r7, #4]
 8026f90:	2b00      	cmp	r3, #0
 8026f92:	d002      	beq.n	8026f9a <xQueueGenericCreateStatic+0x4e>
 8026f94:	68bb      	ldr	r3, [r7, #8]
 8026f96:	2b00      	cmp	r3, #0
 8026f98:	d001      	beq.n	8026f9e <xQueueGenericCreateStatic+0x52>
 8026f9a:	2301      	movs	r3, #1
 8026f9c:	e000      	b.n	8026fa0 <xQueueGenericCreateStatic+0x54>
 8026f9e:	2300      	movs	r3, #0
 8026fa0:	2b00      	cmp	r3, #0
 8026fa2:	d109      	bne.n	8026fb8 <xQueueGenericCreateStatic+0x6c>
 8026fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026fa8:	f383 8811 	msr	BASEPRI, r3
 8026fac:	f3bf 8f6f 	isb	sy
 8026fb0:	f3bf 8f4f 	dsb	sy
 8026fb4:	623b      	str	r3, [r7, #32]
 8026fb6:	e7fe      	b.n	8026fb6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8026fb8:	687b      	ldr	r3, [r7, #4]
 8026fba:	2b00      	cmp	r3, #0
 8026fbc:	d102      	bne.n	8026fc4 <xQueueGenericCreateStatic+0x78>
 8026fbe:	68bb      	ldr	r3, [r7, #8]
 8026fc0:	2b00      	cmp	r3, #0
 8026fc2:	d101      	bne.n	8026fc8 <xQueueGenericCreateStatic+0x7c>
 8026fc4:	2301      	movs	r3, #1
 8026fc6:	e000      	b.n	8026fca <xQueueGenericCreateStatic+0x7e>
 8026fc8:	2300      	movs	r3, #0
 8026fca:	2b00      	cmp	r3, #0
 8026fcc:	d109      	bne.n	8026fe2 <xQueueGenericCreateStatic+0x96>
 8026fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026fd2:	f383 8811 	msr	BASEPRI, r3
 8026fd6:	f3bf 8f6f 	isb	sy
 8026fda:	f3bf 8f4f 	dsb	sy
 8026fde:	61fb      	str	r3, [r7, #28]
 8026fe0:	e7fe      	b.n	8026fe0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8026fe2:	2350      	movs	r3, #80	; 0x50
 8026fe4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8026fe6:	697b      	ldr	r3, [r7, #20]
 8026fe8:	2b50      	cmp	r3, #80	; 0x50
 8026fea:	d009      	beq.n	8027000 <xQueueGenericCreateStatic+0xb4>
 8026fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8026ff0:	f383 8811 	msr	BASEPRI, r3
 8026ff4:	f3bf 8f6f 	isb	sy
 8026ff8:	f3bf 8f4f 	dsb	sy
 8026ffc:	61bb      	str	r3, [r7, #24]
 8026ffe:	e7fe      	b.n	8026ffe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8027000:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8027002:	683b      	ldr	r3, [r7, #0]
 8027004:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8027006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027008:	2b00      	cmp	r3, #0
 802700a:	d00d      	beq.n	8027028 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 802700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802700e:	2201      	movs	r2, #1
 8027010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8027014:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8027018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802701a:	9300      	str	r3, [sp, #0]
 802701c:	4613      	mov	r3, r2
 802701e:	687a      	ldr	r2, [r7, #4]
 8027020:	68b9      	ldr	r1, [r7, #8]
 8027022:	68f8      	ldr	r0, [r7, #12]
 8027024:	f000 f844 	bl	80270b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8027028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 802702a:	4618      	mov	r0, r3
 802702c:	3730      	adds	r7, #48	; 0x30
 802702e:	46bd      	mov	sp, r7
 8027030:	bd80      	pop	{r7, pc}

08027032 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8027032:	b580      	push	{r7, lr}
 8027034:	b08a      	sub	sp, #40	; 0x28
 8027036:	af02      	add	r7, sp, #8
 8027038:	60f8      	str	r0, [r7, #12]
 802703a:	60b9      	str	r1, [r7, #8]
 802703c:	4613      	mov	r3, r2
 802703e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8027040:	68fb      	ldr	r3, [r7, #12]
 8027042:	2b00      	cmp	r3, #0
 8027044:	d109      	bne.n	802705a <xQueueGenericCreate+0x28>
 8027046:	f04f 0350 	mov.w	r3, #80	; 0x50
 802704a:	f383 8811 	msr	BASEPRI, r3
 802704e:	f3bf 8f6f 	isb	sy
 8027052:	f3bf 8f4f 	dsb	sy
 8027056:	613b      	str	r3, [r7, #16]
 8027058:	e7fe      	b.n	8027058 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 802705a:	68bb      	ldr	r3, [r7, #8]
 802705c:	2b00      	cmp	r3, #0
 802705e:	d102      	bne.n	8027066 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8027060:	2300      	movs	r3, #0
 8027062:	61fb      	str	r3, [r7, #28]
 8027064:	e004      	b.n	8027070 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8027066:	68fb      	ldr	r3, [r7, #12]
 8027068:	68ba      	ldr	r2, [r7, #8]
 802706a:	fb02 f303 	mul.w	r3, r2, r3
 802706e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8027070:	69fb      	ldr	r3, [r7, #28]
 8027072:	3350      	adds	r3, #80	; 0x50
 8027074:	4618      	mov	r0, r3
 8027076:	f002 fefb 	bl	8029e70 <pvPortMalloc>
 802707a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 802707c:	69bb      	ldr	r3, [r7, #24]
 802707e:	2b00      	cmp	r3, #0
 8027080:	d011      	beq.n	80270a6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8027082:	69bb      	ldr	r3, [r7, #24]
 8027084:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8027086:	697b      	ldr	r3, [r7, #20]
 8027088:	3350      	adds	r3, #80	; 0x50
 802708a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 802708c:	69bb      	ldr	r3, [r7, #24]
 802708e:	2200      	movs	r2, #0
 8027090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8027094:	79fa      	ldrb	r2, [r7, #7]
 8027096:	69bb      	ldr	r3, [r7, #24]
 8027098:	9300      	str	r3, [sp, #0]
 802709a:	4613      	mov	r3, r2
 802709c:	697a      	ldr	r2, [r7, #20]
 802709e:	68b9      	ldr	r1, [r7, #8]
 80270a0:	68f8      	ldr	r0, [r7, #12]
 80270a2:	f000 f805 	bl	80270b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80270a6:	69bb      	ldr	r3, [r7, #24]
	}
 80270a8:	4618      	mov	r0, r3
 80270aa:	3720      	adds	r7, #32
 80270ac:	46bd      	mov	sp, r7
 80270ae:	bd80      	pop	{r7, pc}

080270b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80270b0:	b580      	push	{r7, lr}
 80270b2:	b084      	sub	sp, #16
 80270b4:	af00      	add	r7, sp, #0
 80270b6:	60f8      	str	r0, [r7, #12]
 80270b8:	60b9      	str	r1, [r7, #8]
 80270ba:	607a      	str	r2, [r7, #4]
 80270bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80270be:	68bb      	ldr	r3, [r7, #8]
 80270c0:	2b00      	cmp	r3, #0
 80270c2:	d103      	bne.n	80270cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80270c4:	69bb      	ldr	r3, [r7, #24]
 80270c6:	69ba      	ldr	r2, [r7, #24]
 80270c8:	601a      	str	r2, [r3, #0]
 80270ca:	e002      	b.n	80270d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80270cc:	69bb      	ldr	r3, [r7, #24]
 80270ce:	687a      	ldr	r2, [r7, #4]
 80270d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80270d2:	69bb      	ldr	r3, [r7, #24]
 80270d4:	68fa      	ldr	r2, [r7, #12]
 80270d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80270d8:	69bb      	ldr	r3, [r7, #24]
 80270da:	68ba      	ldr	r2, [r7, #8]
 80270dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80270de:	2101      	movs	r1, #1
 80270e0:	69b8      	ldr	r0, [r7, #24]
 80270e2:	f7ff fecb 	bl	8026e7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80270e6:	69bb      	ldr	r3, [r7, #24]
 80270e8:	78fa      	ldrb	r2, [r7, #3]
 80270ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80270ee:	bf00      	nop
 80270f0:	3710      	adds	r7, #16
 80270f2:	46bd      	mov	sp, r7
 80270f4:	bd80      	pop	{r7, pc}

080270f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80270f6:	b580      	push	{r7, lr}
 80270f8:	b08a      	sub	sp, #40	; 0x28
 80270fa:	af02      	add	r7, sp, #8
 80270fc:	60f8      	str	r0, [r7, #12]
 80270fe:	60b9      	str	r1, [r7, #8]
 8027100:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8027102:	68fb      	ldr	r3, [r7, #12]
 8027104:	2b00      	cmp	r3, #0
 8027106:	d109      	bne.n	802711c <xQueueCreateCountingSemaphoreStatic+0x26>
 8027108:	f04f 0350 	mov.w	r3, #80	; 0x50
 802710c:	f383 8811 	msr	BASEPRI, r3
 8027110:	f3bf 8f6f 	isb	sy
 8027114:	f3bf 8f4f 	dsb	sy
 8027118:	61bb      	str	r3, [r7, #24]
 802711a:	e7fe      	b.n	802711a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 802711c:	68ba      	ldr	r2, [r7, #8]
 802711e:	68fb      	ldr	r3, [r7, #12]
 8027120:	429a      	cmp	r2, r3
 8027122:	d909      	bls.n	8027138 <xQueueCreateCountingSemaphoreStatic+0x42>
 8027124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027128:	f383 8811 	msr	BASEPRI, r3
 802712c:	f3bf 8f6f 	isb	sy
 8027130:	f3bf 8f4f 	dsb	sy
 8027134:	617b      	str	r3, [r7, #20]
 8027136:	e7fe      	b.n	8027136 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8027138:	2302      	movs	r3, #2
 802713a:	9300      	str	r3, [sp, #0]
 802713c:	687b      	ldr	r3, [r7, #4]
 802713e:	2200      	movs	r2, #0
 8027140:	2100      	movs	r1, #0
 8027142:	68f8      	ldr	r0, [r7, #12]
 8027144:	f7ff ff02 	bl	8026f4c <xQueueGenericCreateStatic>
 8027148:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 802714a:	69fb      	ldr	r3, [r7, #28]
 802714c:	2b00      	cmp	r3, #0
 802714e:	d002      	beq.n	8027156 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8027150:	69fb      	ldr	r3, [r7, #28]
 8027152:	68ba      	ldr	r2, [r7, #8]
 8027154:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8027156:	69fb      	ldr	r3, [r7, #28]
	}
 8027158:	4618      	mov	r0, r3
 802715a:	3720      	adds	r7, #32
 802715c:	46bd      	mov	sp, r7
 802715e:	bd80      	pop	{r7, pc}

08027160 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8027160:	b580      	push	{r7, lr}
 8027162:	b086      	sub	sp, #24
 8027164:	af00      	add	r7, sp, #0
 8027166:	6078      	str	r0, [r7, #4]
 8027168:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 802716a:	687b      	ldr	r3, [r7, #4]
 802716c:	2b00      	cmp	r3, #0
 802716e:	d109      	bne.n	8027184 <xQueueCreateCountingSemaphore+0x24>
 8027170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027174:	f383 8811 	msr	BASEPRI, r3
 8027178:	f3bf 8f6f 	isb	sy
 802717c:	f3bf 8f4f 	dsb	sy
 8027180:	613b      	str	r3, [r7, #16]
 8027182:	e7fe      	b.n	8027182 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8027184:	683a      	ldr	r2, [r7, #0]
 8027186:	687b      	ldr	r3, [r7, #4]
 8027188:	429a      	cmp	r2, r3
 802718a:	d909      	bls.n	80271a0 <xQueueCreateCountingSemaphore+0x40>
 802718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027190:	f383 8811 	msr	BASEPRI, r3
 8027194:	f3bf 8f6f 	isb	sy
 8027198:	f3bf 8f4f 	dsb	sy
 802719c:	60fb      	str	r3, [r7, #12]
 802719e:	e7fe      	b.n	802719e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80271a0:	2202      	movs	r2, #2
 80271a2:	2100      	movs	r1, #0
 80271a4:	6878      	ldr	r0, [r7, #4]
 80271a6:	f7ff ff44 	bl	8027032 <xQueueGenericCreate>
 80271aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80271ac:	697b      	ldr	r3, [r7, #20]
 80271ae:	2b00      	cmp	r3, #0
 80271b0:	d002      	beq.n	80271b8 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80271b2:	697b      	ldr	r3, [r7, #20]
 80271b4:	683a      	ldr	r2, [r7, #0]
 80271b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80271b8:	697b      	ldr	r3, [r7, #20]
	}
 80271ba:	4618      	mov	r0, r3
 80271bc:	3718      	adds	r7, #24
 80271be:	46bd      	mov	sp, r7
 80271c0:	bd80      	pop	{r7, pc}
	...

080271c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80271c4:	b580      	push	{r7, lr}
 80271c6:	b08e      	sub	sp, #56	; 0x38
 80271c8:	af00      	add	r7, sp, #0
 80271ca:	60f8      	str	r0, [r7, #12]
 80271cc:	60b9      	str	r1, [r7, #8]
 80271ce:	607a      	str	r2, [r7, #4]
 80271d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80271d2:	2300      	movs	r3, #0
 80271d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80271d6:	68fb      	ldr	r3, [r7, #12]
 80271d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80271da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80271dc:	2b00      	cmp	r3, #0
 80271de:	d109      	bne.n	80271f4 <xQueueGenericSend+0x30>
 80271e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80271e4:	f383 8811 	msr	BASEPRI, r3
 80271e8:	f3bf 8f6f 	isb	sy
 80271ec:	f3bf 8f4f 	dsb	sy
 80271f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80271f2:	e7fe      	b.n	80271f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80271f4:	68bb      	ldr	r3, [r7, #8]
 80271f6:	2b00      	cmp	r3, #0
 80271f8:	d103      	bne.n	8027202 <xQueueGenericSend+0x3e>
 80271fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80271fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271fe:	2b00      	cmp	r3, #0
 8027200:	d101      	bne.n	8027206 <xQueueGenericSend+0x42>
 8027202:	2301      	movs	r3, #1
 8027204:	e000      	b.n	8027208 <xQueueGenericSend+0x44>
 8027206:	2300      	movs	r3, #0
 8027208:	2b00      	cmp	r3, #0
 802720a:	d109      	bne.n	8027220 <xQueueGenericSend+0x5c>
 802720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027210:	f383 8811 	msr	BASEPRI, r3
 8027214:	f3bf 8f6f 	isb	sy
 8027218:	f3bf 8f4f 	dsb	sy
 802721c:	627b      	str	r3, [r7, #36]	; 0x24
 802721e:	e7fe      	b.n	802721e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8027220:	683b      	ldr	r3, [r7, #0]
 8027222:	2b02      	cmp	r3, #2
 8027224:	d103      	bne.n	802722e <xQueueGenericSend+0x6a>
 8027226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802722a:	2b01      	cmp	r3, #1
 802722c:	d101      	bne.n	8027232 <xQueueGenericSend+0x6e>
 802722e:	2301      	movs	r3, #1
 8027230:	e000      	b.n	8027234 <xQueueGenericSend+0x70>
 8027232:	2300      	movs	r3, #0
 8027234:	2b00      	cmp	r3, #0
 8027236:	d109      	bne.n	802724c <xQueueGenericSend+0x88>
 8027238:	f04f 0350 	mov.w	r3, #80	; 0x50
 802723c:	f383 8811 	msr	BASEPRI, r3
 8027240:	f3bf 8f6f 	isb	sy
 8027244:	f3bf 8f4f 	dsb	sy
 8027248:	623b      	str	r3, [r7, #32]
 802724a:	e7fe      	b.n	802724a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802724c:	f001 fcca 	bl	8028be4 <xTaskGetSchedulerState>
 8027250:	4603      	mov	r3, r0
 8027252:	2b00      	cmp	r3, #0
 8027254:	d102      	bne.n	802725c <xQueueGenericSend+0x98>
 8027256:	687b      	ldr	r3, [r7, #4]
 8027258:	2b00      	cmp	r3, #0
 802725a:	d101      	bne.n	8027260 <xQueueGenericSend+0x9c>
 802725c:	2301      	movs	r3, #1
 802725e:	e000      	b.n	8027262 <xQueueGenericSend+0x9e>
 8027260:	2300      	movs	r3, #0
 8027262:	2b00      	cmp	r3, #0
 8027264:	d109      	bne.n	802727a <xQueueGenericSend+0xb6>
 8027266:	f04f 0350 	mov.w	r3, #80	; 0x50
 802726a:	f383 8811 	msr	BASEPRI, r3
 802726e:	f3bf 8f6f 	isb	sy
 8027272:	f3bf 8f4f 	dsb	sy
 8027276:	61fb      	str	r3, [r7, #28]
 8027278:	e7fe      	b.n	8027278 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802727a:	f002 fcdf 	bl	8029c3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8027282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027286:	429a      	cmp	r2, r3
 8027288:	d302      	bcc.n	8027290 <xQueueGenericSend+0xcc>
 802728a:	683b      	ldr	r3, [r7, #0]
 802728c:	2b02      	cmp	r3, #2
 802728e:	d129      	bne.n	80272e4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8027290:	683a      	ldr	r2, [r7, #0]
 8027292:	68b9      	ldr	r1, [r7, #8]
 8027294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027296:	f000 fc6a 	bl	8027b6e <prvCopyDataToQueue>
 802729a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80272a0:	2b00      	cmp	r3, #0
 80272a2:	d010      	beq.n	80272c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80272a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80272a6:	3324      	adds	r3, #36	; 0x24
 80272a8:	4618      	mov	r0, r3
 80272aa:	f001 fad5 	bl	8028858 <xTaskRemoveFromEventList>
 80272ae:	4603      	mov	r3, r0
 80272b0:	2b00      	cmp	r3, #0
 80272b2:	d013      	beq.n	80272dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80272b4:	4b3f      	ldr	r3, [pc, #252]	; (80273b4 <xQueueGenericSend+0x1f0>)
 80272b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80272ba:	601a      	str	r2, [r3, #0]
 80272bc:	f3bf 8f4f 	dsb	sy
 80272c0:	f3bf 8f6f 	isb	sy
 80272c4:	e00a      	b.n	80272dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80272c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80272c8:	2b00      	cmp	r3, #0
 80272ca:	d007      	beq.n	80272dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80272cc:	4b39      	ldr	r3, [pc, #228]	; (80273b4 <xQueueGenericSend+0x1f0>)
 80272ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80272d2:	601a      	str	r2, [r3, #0]
 80272d4:	f3bf 8f4f 	dsb	sy
 80272d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80272dc:	f002 fcdc 	bl	8029c98 <vPortExitCritical>
				return pdPASS;
 80272e0:	2301      	movs	r3, #1
 80272e2:	e063      	b.n	80273ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80272e4:	687b      	ldr	r3, [r7, #4]
 80272e6:	2b00      	cmp	r3, #0
 80272e8:	d103      	bne.n	80272f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80272ea:	f002 fcd5 	bl	8029c98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80272ee:	2300      	movs	r3, #0
 80272f0:	e05c      	b.n	80273ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80272f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80272f4:	2b00      	cmp	r3, #0
 80272f6:	d106      	bne.n	8027306 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80272f8:	f107 0314 	add.w	r3, r7, #20
 80272fc:	4618      	mov	r0, r3
 80272fe:	f001 fb0d 	bl	802891c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8027302:	2301      	movs	r3, #1
 8027304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8027306:	f002 fcc7 	bl	8029c98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802730a:	f001 f877 	bl	80283fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802730e:	f002 fc95 	bl	8029c3c <vPortEnterCritical>
 8027312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8027318:	b25b      	sxtb	r3, r3
 802731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802731e:	d103      	bne.n	8027328 <xQueueGenericSend+0x164>
 8027320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027322:	2200      	movs	r2, #0
 8027324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8027328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802732a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802732e:	b25b      	sxtb	r3, r3
 8027330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027334:	d103      	bne.n	802733e <xQueueGenericSend+0x17a>
 8027336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027338:	2200      	movs	r2, #0
 802733a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802733e:	f002 fcab 	bl	8029c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8027342:	1d3a      	adds	r2, r7, #4
 8027344:	f107 0314 	add.w	r3, r7, #20
 8027348:	4611      	mov	r1, r2
 802734a:	4618      	mov	r0, r3
 802734c:	f001 fafc 	bl	8028948 <xTaskCheckForTimeOut>
 8027350:	4603      	mov	r3, r0
 8027352:	2b00      	cmp	r3, #0
 8027354:	d124      	bne.n	80273a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8027356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027358:	f000 fd01 	bl	8027d5e <prvIsQueueFull>
 802735c:	4603      	mov	r3, r0
 802735e:	2b00      	cmp	r3, #0
 8027360:	d018      	beq.n	8027394 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8027362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027364:	3310      	adds	r3, #16
 8027366:	687a      	ldr	r2, [r7, #4]
 8027368:	4611      	mov	r1, r2
 802736a:	4618      	mov	r0, r3
 802736c:	f001 fa26 	bl	80287bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8027370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027372:	f000 fc8c 	bl	8027c8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8027376:	f001 f84f 	bl	8028418 <xTaskResumeAll>
 802737a:	4603      	mov	r3, r0
 802737c:	2b00      	cmp	r3, #0
 802737e:	f47f af7c 	bne.w	802727a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8027382:	4b0c      	ldr	r3, [pc, #48]	; (80273b4 <xQueueGenericSend+0x1f0>)
 8027384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027388:	601a      	str	r2, [r3, #0]
 802738a:	f3bf 8f4f 	dsb	sy
 802738e:	f3bf 8f6f 	isb	sy
 8027392:	e772      	b.n	802727a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8027394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027396:	f000 fc7a 	bl	8027c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802739a:	f001 f83d 	bl	8028418 <xTaskResumeAll>
 802739e:	e76c      	b.n	802727a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80273a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80273a2:	f000 fc74 	bl	8027c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80273a6:	f001 f837 	bl	8028418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80273aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80273ac:	4618      	mov	r0, r3
 80273ae:	3738      	adds	r7, #56	; 0x38
 80273b0:	46bd      	mov	sp, r7
 80273b2:	bd80      	pop	{r7, pc}
 80273b4:	e000ed04 	.word	0xe000ed04

080273b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80273b8:	b580      	push	{r7, lr}
 80273ba:	b08e      	sub	sp, #56	; 0x38
 80273bc:	af00      	add	r7, sp, #0
 80273be:	60f8      	str	r0, [r7, #12]
 80273c0:	60b9      	str	r1, [r7, #8]
 80273c2:	607a      	str	r2, [r7, #4]
 80273c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80273c6:	68fb      	ldr	r3, [r7, #12]
 80273c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80273ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	d109      	bne.n	80273e4 <xQueueGenericSendFromISR+0x2c>
 80273d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80273d4:	f383 8811 	msr	BASEPRI, r3
 80273d8:	f3bf 8f6f 	isb	sy
 80273dc:	f3bf 8f4f 	dsb	sy
 80273e0:	627b      	str	r3, [r7, #36]	; 0x24
 80273e2:	e7fe      	b.n	80273e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80273e4:	68bb      	ldr	r3, [r7, #8]
 80273e6:	2b00      	cmp	r3, #0
 80273e8:	d103      	bne.n	80273f2 <xQueueGenericSendFromISR+0x3a>
 80273ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80273ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80273ee:	2b00      	cmp	r3, #0
 80273f0:	d101      	bne.n	80273f6 <xQueueGenericSendFromISR+0x3e>
 80273f2:	2301      	movs	r3, #1
 80273f4:	e000      	b.n	80273f8 <xQueueGenericSendFromISR+0x40>
 80273f6:	2300      	movs	r3, #0
 80273f8:	2b00      	cmp	r3, #0
 80273fa:	d109      	bne.n	8027410 <xQueueGenericSendFromISR+0x58>
 80273fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027400:	f383 8811 	msr	BASEPRI, r3
 8027404:	f3bf 8f6f 	isb	sy
 8027408:	f3bf 8f4f 	dsb	sy
 802740c:	623b      	str	r3, [r7, #32]
 802740e:	e7fe      	b.n	802740e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8027410:	683b      	ldr	r3, [r7, #0]
 8027412:	2b02      	cmp	r3, #2
 8027414:	d103      	bne.n	802741e <xQueueGenericSendFromISR+0x66>
 8027416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802741a:	2b01      	cmp	r3, #1
 802741c:	d101      	bne.n	8027422 <xQueueGenericSendFromISR+0x6a>
 802741e:	2301      	movs	r3, #1
 8027420:	e000      	b.n	8027424 <xQueueGenericSendFromISR+0x6c>
 8027422:	2300      	movs	r3, #0
 8027424:	2b00      	cmp	r3, #0
 8027426:	d109      	bne.n	802743c <xQueueGenericSendFromISR+0x84>
 8027428:	f04f 0350 	mov.w	r3, #80	; 0x50
 802742c:	f383 8811 	msr	BASEPRI, r3
 8027430:	f3bf 8f6f 	isb	sy
 8027434:	f3bf 8f4f 	dsb	sy
 8027438:	61fb      	str	r3, [r7, #28]
 802743a:	e7fe      	b.n	802743a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802743c:	f002 fcda 	bl	8029df4 <vPortValidateInterruptPriority>
	__asm volatile
 8027440:	f3ef 8211 	mrs	r2, BASEPRI
 8027444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027448:	f383 8811 	msr	BASEPRI, r3
 802744c:	f3bf 8f6f 	isb	sy
 8027450:	f3bf 8f4f 	dsb	sy
 8027454:	61ba      	str	r2, [r7, #24]
 8027456:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8027458:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802745a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802745e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8027460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027464:	429a      	cmp	r2, r3
 8027466:	d302      	bcc.n	802746e <xQueueGenericSendFromISR+0xb6>
 8027468:	683b      	ldr	r3, [r7, #0]
 802746a:	2b02      	cmp	r3, #2
 802746c:	d12c      	bne.n	80274c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 802746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8027474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8027478:	683a      	ldr	r2, [r7, #0]
 802747a:	68b9      	ldr	r1, [r7, #8]
 802747c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802747e:	f000 fb76 	bl	8027b6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8027482:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8027486:	f1b3 3fff 	cmp.w	r3, #4294967295
 802748a:	d112      	bne.n	80274b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027490:	2b00      	cmp	r3, #0
 8027492:	d016      	beq.n	80274c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8027494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027496:	3324      	adds	r3, #36	; 0x24
 8027498:	4618      	mov	r0, r3
 802749a:	f001 f9dd 	bl	8028858 <xTaskRemoveFromEventList>
 802749e:	4603      	mov	r3, r0
 80274a0:	2b00      	cmp	r3, #0
 80274a2:	d00e      	beq.n	80274c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80274a4:	687b      	ldr	r3, [r7, #4]
 80274a6:	2b00      	cmp	r3, #0
 80274a8:	d00b      	beq.n	80274c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80274aa:	687b      	ldr	r3, [r7, #4]
 80274ac:	2201      	movs	r2, #1
 80274ae:	601a      	str	r2, [r3, #0]
 80274b0:	e007      	b.n	80274c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80274b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80274b6:	3301      	adds	r3, #1
 80274b8:	b2db      	uxtb	r3, r3
 80274ba:	b25a      	sxtb	r2, r3
 80274bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80274be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80274c2:	2301      	movs	r3, #1
 80274c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80274c6:	e001      	b.n	80274cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80274c8:	2300      	movs	r3, #0
 80274ca:	637b      	str	r3, [r7, #52]	; 0x34
 80274cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80274ce:	613b      	str	r3, [r7, #16]
	__asm volatile
 80274d0:	693b      	ldr	r3, [r7, #16]
 80274d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80274d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80274d8:	4618      	mov	r0, r3
 80274da:	3738      	adds	r7, #56	; 0x38
 80274dc:	46bd      	mov	sp, r7
 80274de:	bd80      	pop	{r7, pc}

080274e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80274e0:	b580      	push	{r7, lr}
 80274e2:	b08e      	sub	sp, #56	; 0x38
 80274e4:	af00      	add	r7, sp, #0
 80274e6:	6078      	str	r0, [r7, #4]
 80274e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80274ea:	687b      	ldr	r3, [r7, #4]
 80274ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80274ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80274f0:	2b00      	cmp	r3, #0
 80274f2:	d109      	bne.n	8027508 <xQueueGiveFromISR+0x28>
	__asm volatile
 80274f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80274f8:	f383 8811 	msr	BASEPRI, r3
 80274fc:	f3bf 8f6f 	isb	sy
 8027500:	f3bf 8f4f 	dsb	sy
 8027504:	623b      	str	r3, [r7, #32]
 8027506:	e7fe      	b.n	8027506 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8027508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802750c:	2b00      	cmp	r3, #0
 802750e:	d009      	beq.n	8027524 <xQueueGiveFromISR+0x44>
 8027510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027514:	f383 8811 	msr	BASEPRI, r3
 8027518:	f3bf 8f6f 	isb	sy
 802751c:	f3bf 8f4f 	dsb	sy
 8027520:	61fb      	str	r3, [r7, #28]
 8027522:	e7fe      	b.n	8027522 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8027524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027526:	681b      	ldr	r3, [r3, #0]
 8027528:	2b00      	cmp	r3, #0
 802752a:	d103      	bne.n	8027534 <xQueueGiveFromISR+0x54>
 802752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802752e:	689b      	ldr	r3, [r3, #8]
 8027530:	2b00      	cmp	r3, #0
 8027532:	d101      	bne.n	8027538 <xQueueGiveFromISR+0x58>
 8027534:	2301      	movs	r3, #1
 8027536:	e000      	b.n	802753a <xQueueGiveFromISR+0x5a>
 8027538:	2300      	movs	r3, #0
 802753a:	2b00      	cmp	r3, #0
 802753c:	d109      	bne.n	8027552 <xQueueGiveFromISR+0x72>
 802753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027542:	f383 8811 	msr	BASEPRI, r3
 8027546:	f3bf 8f6f 	isb	sy
 802754a:	f3bf 8f4f 	dsb	sy
 802754e:	61bb      	str	r3, [r7, #24]
 8027550:	e7fe      	b.n	8027550 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8027552:	f002 fc4f 	bl	8029df4 <vPortValidateInterruptPriority>
	__asm volatile
 8027556:	f3ef 8211 	mrs	r2, BASEPRI
 802755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802755e:	f383 8811 	msr	BASEPRI, r3
 8027562:	f3bf 8f6f 	isb	sy
 8027566:	f3bf 8f4f 	dsb	sy
 802756a:	617a      	str	r2, [r7, #20]
 802756c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 802756e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8027570:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8027572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027576:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8027578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802757a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802757c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802757e:	429a      	cmp	r2, r3
 8027580:	d22b      	bcs.n	80275da <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8027582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8027588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 802758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802758e:	1c5a      	adds	r2, r3, #1
 8027590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027592:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8027594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8027598:	f1b3 3fff 	cmp.w	r3, #4294967295
 802759c:	d112      	bne.n	80275c4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80275a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80275a2:	2b00      	cmp	r3, #0
 80275a4:	d016      	beq.n	80275d4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80275a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80275a8:	3324      	adds	r3, #36	; 0x24
 80275aa:	4618      	mov	r0, r3
 80275ac:	f001 f954 	bl	8028858 <xTaskRemoveFromEventList>
 80275b0:	4603      	mov	r3, r0
 80275b2:	2b00      	cmp	r3, #0
 80275b4:	d00e      	beq.n	80275d4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80275b6:	683b      	ldr	r3, [r7, #0]
 80275b8:	2b00      	cmp	r3, #0
 80275ba:	d00b      	beq.n	80275d4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80275bc:	683b      	ldr	r3, [r7, #0]
 80275be:	2201      	movs	r2, #1
 80275c0:	601a      	str	r2, [r3, #0]
 80275c2:	e007      	b.n	80275d4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80275c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80275c8:	3301      	adds	r3, #1
 80275ca:	b2db      	uxtb	r3, r3
 80275cc:	b25a      	sxtb	r2, r3
 80275ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80275d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80275d4:	2301      	movs	r3, #1
 80275d6:	637b      	str	r3, [r7, #52]	; 0x34
 80275d8:	e001      	b.n	80275de <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80275da:	2300      	movs	r3, #0
 80275dc:	637b      	str	r3, [r7, #52]	; 0x34
 80275de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80275e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80275e2:	68fb      	ldr	r3, [r7, #12]
 80275e4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80275e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80275ea:	4618      	mov	r0, r3
 80275ec:	3738      	adds	r7, #56	; 0x38
 80275ee:	46bd      	mov	sp, r7
 80275f0:	bd80      	pop	{r7, pc}
	...

080275f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80275f4:	b580      	push	{r7, lr}
 80275f6:	b08c      	sub	sp, #48	; 0x30
 80275f8:	af00      	add	r7, sp, #0
 80275fa:	60f8      	str	r0, [r7, #12]
 80275fc:	60b9      	str	r1, [r7, #8]
 80275fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8027600:	2300      	movs	r3, #0
 8027602:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8027604:	68fb      	ldr	r3, [r7, #12]
 8027606:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8027608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802760a:	2b00      	cmp	r3, #0
 802760c:	d109      	bne.n	8027622 <xQueueReceive+0x2e>
	__asm volatile
 802760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027612:	f383 8811 	msr	BASEPRI, r3
 8027616:	f3bf 8f6f 	isb	sy
 802761a:	f3bf 8f4f 	dsb	sy
 802761e:	623b      	str	r3, [r7, #32]
 8027620:	e7fe      	b.n	8027620 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8027622:	68bb      	ldr	r3, [r7, #8]
 8027624:	2b00      	cmp	r3, #0
 8027626:	d103      	bne.n	8027630 <xQueueReceive+0x3c>
 8027628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802762c:	2b00      	cmp	r3, #0
 802762e:	d101      	bne.n	8027634 <xQueueReceive+0x40>
 8027630:	2301      	movs	r3, #1
 8027632:	e000      	b.n	8027636 <xQueueReceive+0x42>
 8027634:	2300      	movs	r3, #0
 8027636:	2b00      	cmp	r3, #0
 8027638:	d109      	bne.n	802764e <xQueueReceive+0x5a>
 802763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802763e:	f383 8811 	msr	BASEPRI, r3
 8027642:	f3bf 8f6f 	isb	sy
 8027646:	f3bf 8f4f 	dsb	sy
 802764a:	61fb      	str	r3, [r7, #28]
 802764c:	e7fe      	b.n	802764c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802764e:	f001 fac9 	bl	8028be4 <xTaskGetSchedulerState>
 8027652:	4603      	mov	r3, r0
 8027654:	2b00      	cmp	r3, #0
 8027656:	d102      	bne.n	802765e <xQueueReceive+0x6a>
 8027658:	687b      	ldr	r3, [r7, #4]
 802765a:	2b00      	cmp	r3, #0
 802765c:	d101      	bne.n	8027662 <xQueueReceive+0x6e>
 802765e:	2301      	movs	r3, #1
 8027660:	e000      	b.n	8027664 <xQueueReceive+0x70>
 8027662:	2300      	movs	r3, #0
 8027664:	2b00      	cmp	r3, #0
 8027666:	d109      	bne.n	802767c <xQueueReceive+0x88>
 8027668:	f04f 0350 	mov.w	r3, #80	; 0x50
 802766c:	f383 8811 	msr	BASEPRI, r3
 8027670:	f3bf 8f6f 	isb	sy
 8027674:	f3bf 8f4f 	dsb	sy
 8027678:	61bb      	str	r3, [r7, #24]
 802767a:	e7fe      	b.n	802767a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802767c:	f002 fade 	bl	8029c3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8027680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027684:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8027686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027688:	2b00      	cmp	r3, #0
 802768a:	d01f      	beq.n	80276cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802768c:	68b9      	ldr	r1, [r7, #8]
 802768e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027690:	f000 fad7 	bl	8027c42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8027694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027696:	1e5a      	subs	r2, r3, #1
 8027698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802769a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802769e:	691b      	ldr	r3, [r3, #16]
 80276a0:	2b00      	cmp	r3, #0
 80276a2:	d00f      	beq.n	80276c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80276a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80276a6:	3310      	adds	r3, #16
 80276a8:	4618      	mov	r0, r3
 80276aa:	f001 f8d5 	bl	8028858 <xTaskRemoveFromEventList>
 80276ae:	4603      	mov	r3, r0
 80276b0:	2b00      	cmp	r3, #0
 80276b2:	d007      	beq.n	80276c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80276b4:	4b3c      	ldr	r3, [pc, #240]	; (80277a8 <xQueueReceive+0x1b4>)
 80276b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80276ba:	601a      	str	r2, [r3, #0]
 80276bc:	f3bf 8f4f 	dsb	sy
 80276c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80276c4:	f002 fae8 	bl	8029c98 <vPortExitCritical>
				return pdPASS;
 80276c8:	2301      	movs	r3, #1
 80276ca:	e069      	b.n	80277a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80276cc:	687b      	ldr	r3, [r7, #4]
 80276ce:	2b00      	cmp	r3, #0
 80276d0:	d103      	bne.n	80276da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80276d2:	f002 fae1 	bl	8029c98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80276d6:	2300      	movs	r3, #0
 80276d8:	e062      	b.n	80277a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80276da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80276dc:	2b00      	cmp	r3, #0
 80276de:	d106      	bne.n	80276ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80276e0:	f107 0310 	add.w	r3, r7, #16
 80276e4:	4618      	mov	r0, r3
 80276e6:	f001 f919 	bl	802891c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80276ea:	2301      	movs	r3, #1
 80276ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80276ee:	f002 fad3 	bl	8029c98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80276f2:	f000 fe83 	bl	80283fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80276f6:	f002 faa1 	bl	8029c3c <vPortEnterCritical>
 80276fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80276fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8027700:	b25b      	sxtb	r3, r3
 8027702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027706:	d103      	bne.n	8027710 <xQueueReceive+0x11c>
 8027708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802770a:	2200      	movs	r2, #0
 802770c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8027710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8027716:	b25b      	sxtb	r3, r3
 8027718:	f1b3 3fff 	cmp.w	r3, #4294967295
 802771c:	d103      	bne.n	8027726 <xQueueReceive+0x132>
 802771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027720:	2200      	movs	r2, #0
 8027722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8027726:	f002 fab7 	bl	8029c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802772a:	1d3a      	adds	r2, r7, #4
 802772c:	f107 0310 	add.w	r3, r7, #16
 8027730:	4611      	mov	r1, r2
 8027732:	4618      	mov	r0, r3
 8027734:	f001 f908 	bl	8028948 <xTaskCheckForTimeOut>
 8027738:	4603      	mov	r3, r0
 802773a:	2b00      	cmp	r3, #0
 802773c:	d123      	bne.n	8027786 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802773e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027740:	f000 faf7 	bl	8027d32 <prvIsQueueEmpty>
 8027744:	4603      	mov	r3, r0
 8027746:	2b00      	cmp	r3, #0
 8027748:	d017      	beq.n	802777a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802774c:	3324      	adds	r3, #36	; 0x24
 802774e:	687a      	ldr	r2, [r7, #4]
 8027750:	4611      	mov	r1, r2
 8027752:	4618      	mov	r0, r3
 8027754:	f001 f832 	bl	80287bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8027758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802775a:	f000 fa98 	bl	8027c8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802775e:	f000 fe5b 	bl	8028418 <xTaskResumeAll>
 8027762:	4603      	mov	r3, r0
 8027764:	2b00      	cmp	r3, #0
 8027766:	d189      	bne.n	802767c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8027768:	4b0f      	ldr	r3, [pc, #60]	; (80277a8 <xQueueReceive+0x1b4>)
 802776a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802776e:	601a      	str	r2, [r3, #0]
 8027770:	f3bf 8f4f 	dsb	sy
 8027774:	f3bf 8f6f 	isb	sy
 8027778:	e780      	b.n	802767c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 802777a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802777c:	f000 fa87 	bl	8027c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8027780:	f000 fe4a 	bl	8028418 <xTaskResumeAll>
 8027784:	e77a      	b.n	802767c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8027786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027788:	f000 fa81 	bl	8027c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802778c:	f000 fe44 	bl	8028418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8027790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027792:	f000 face 	bl	8027d32 <prvIsQueueEmpty>
 8027796:	4603      	mov	r3, r0
 8027798:	2b00      	cmp	r3, #0
 802779a:	f43f af6f 	beq.w	802767c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802779e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80277a0:	4618      	mov	r0, r3
 80277a2:	3730      	adds	r7, #48	; 0x30
 80277a4:	46bd      	mov	sp, r7
 80277a6:	bd80      	pop	{r7, pc}
 80277a8:	e000ed04 	.word	0xe000ed04

080277ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80277ac:	b580      	push	{r7, lr}
 80277ae:	b08e      	sub	sp, #56	; 0x38
 80277b0:	af00      	add	r7, sp, #0
 80277b2:	6078      	str	r0, [r7, #4]
 80277b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80277b6:	2300      	movs	r3, #0
 80277b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80277ba:	687b      	ldr	r3, [r7, #4]
 80277bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80277be:	2300      	movs	r3, #0
 80277c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80277c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80277c4:	2b00      	cmp	r3, #0
 80277c6:	d109      	bne.n	80277dc <xQueueSemaphoreTake+0x30>
 80277c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80277cc:	f383 8811 	msr	BASEPRI, r3
 80277d0:	f3bf 8f6f 	isb	sy
 80277d4:	f3bf 8f4f 	dsb	sy
 80277d8:	623b      	str	r3, [r7, #32]
 80277da:	e7fe      	b.n	80277da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80277dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80277de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80277e0:	2b00      	cmp	r3, #0
 80277e2:	d009      	beq.n	80277f8 <xQueueSemaphoreTake+0x4c>
 80277e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80277e8:	f383 8811 	msr	BASEPRI, r3
 80277ec:	f3bf 8f6f 	isb	sy
 80277f0:	f3bf 8f4f 	dsb	sy
 80277f4:	61fb      	str	r3, [r7, #28]
 80277f6:	e7fe      	b.n	80277f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80277f8:	f001 f9f4 	bl	8028be4 <xTaskGetSchedulerState>
 80277fc:	4603      	mov	r3, r0
 80277fe:	2b00      	cmp	r3, #0
 8027800:	d102      	bne.n	8027808 <xQueueSemaphoreTake+0x5c>
 8027802:	683b      	ldr	r3, [r7, #0]
 8027804:	2b00      	cmp	r3, #0
 8027806:	d101      	bne.n	802780c <xQueueSemaphoreTake+0x60>
 8027808:	2301      	movs	r3, #1
 802780a:	e000      	b.n	802780e <xQueueSemaphoreTake+0x62>
 802780c:	2300      	movs	r3, #0
 802780e:	2b00      	cmp	r3, #0
 8027810:	d109      	bne.n	8027826 <xQueueSemaphoreTake+0x7a>
 8027812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027816:	f383 8811 	msr	BASEPRI, r3
 802781a:	f3bf 8f6f 	isb	sy
 802781e:	f3bf 8f4f 	dsb	sy
 8027822:	61bb      	str	r3, [r7, #24]
 8027824:	e7fe      	b.n	8027824 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8027826:	f002 fa09 	bl	8029c3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 802782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802782e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8027830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027832:	2b00      	cmp	r3, #0
 8027834:	d024      	beq.n	8027880 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8027836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027838:	1e5a      	subs	r2, r3, #1
 802783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802783c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027840:	681b      	ldr	r3, [r3, #0]
 8027842:	2b00      	cmp	r3, #0
 8027844:	d104      	bne.n	8027850 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8027846:	f001 fb3f 	bl	8028ec8 <pvTaskIncrementMutexHeldCount>
 802784a:	4602      	mov	r2, r0
 802784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802784e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8027850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027852:	691b      	ldr	r3, [r3, #16]
 8027854:	2b00      	cmp	r3, #0
 8027856:	d00f      	beq.n	8027878 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8027858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802785a:	3310      	adds	r3, #16
 802785c:	4618      	mov	r0, r3
 802785e:	f000 fffb 	bl	8028858 <xTaskRemoveFromEventList>
 8027862:	4603      	mov	r3, r0
 8027864:	2b00      	cmp	r3, #0
 8027866:	d007      	beq.n	8027878 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8027868:	4b53      	ldr	r3, [pc, #332]	; (80279b8 <xQueueSemaphoreTake+0x20c>)
 802786a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802786e:	601a      	str	r2, [r3, #0]
 8027870:	f3bf 8f4f 	dsb	sy
 8027874:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8027878:	f002 fa0e 	bl	8029c98 <vPortExitCritical>
				return pdPASS;
 802787c:	2301      	movs	r3, #1
 802787e:	e096      	b.n	80279ae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8027880:	683b      	ldr	r3, [r7, #0]
 8027882:	2b00      	cmp	r3, #0
 8027884:	d110      	bne.n	80278a8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8027886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027888:	2b00      	cmp	r3, #0
 802788a:	d009      	beq.n	80278a0 <xQueueSemaphoreTake+0xf4>
 802788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027890:	f383 8811 	msr	BASEPRI, r3
 8027894:	f3bf 8f6f 	isb	sy
 8027898:	f3bf 8f4f 	dsb	sy
 802789c:	617b      	str	r3, [r7, #20]
 802789e:	e7fe      	b.n	802789e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80278a0:	f002 f9fa 	bl	8029c98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80278a4:	2300      	movs	r3, #0
 80278a6:	e082      	b.n	80279ae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80278a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80278aa:	2b00      	cmp	r3, #0
 80278ac:	d106      	bne.n	80278bc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80278ae:	f107 030c 	add.w	r3, r7, #12
 80278b2:	4618      	mov	r0, r3
 80278b4:	f001 f832 	bl	802891c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80278b8:	2301      	movs	r3, #1
 80278ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80278bc:	f002 f9ec 	bl	8029c98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80278c0:	f000 fd9c 	bl	80283fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80278c4:	f002 f9ba 	bl	8029c3c <vPortEnterCritical>
 80278c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80278ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80278ce:	b25b      	sxtb	r3, r3
 80278d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80278d4:	d103      	bne.n	80278de <xQueueSemaphoreTake+0x132>
 80278d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80278d8:	2200      	movs	r2, #0
 80278da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80278de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80278e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80278e4:	b25b      	sxtb	r3, r3
 80278e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80278ea:	d103      	bne.n	80278f4 <xQueueSemaphoreTake+0x148>
 80278ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80278ee:	2200      	movs	r2, #0
 80278f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80278f4:	f002 f9d0 	bl	8029c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80278f8:	463a      	mov	r2, r7
 80278fa:	f107 030c 	add.w	r3, r7, #12
 80278fe:	4611      	mov	r1, r2
 8027900:	4618      	mov	r0, r3
 8027902:	f001 f821 	bl	8028948 <xTaskCheckForTimeOut>
 8027906:	4603      	mov	r3, r0
 8027908:	2b00      	cmp	r3, #0
 802790a:	d132      	bne.n	8027972 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802790c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802790e:	f000 fa10 	bl	8027d32 <prvIsQueueEmpty>
 8027912:	4603      	mov	r3, r0
 8027914:	2b00      	cmp	r3, #0
 8027916:	d026      	beq.n	8027966 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8027918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802791a:	681b      	ldr	r3, [r3, #0]
 802791c:	2b00      	cmp	r3, #0
 802791e:	d109      	bne.n	8027934 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8027920:	f002 f98c 	bl	8029c3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8027924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027926:	689b      	ldr	r3, [r3, #8]
 8027928:	4618      	mov	r0, r3
 802792a:	f001 f979 	bl	8028c20 <xTaskPriorityInherit>
 802792e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8027930:	f002 f9b2 	bl	8029c98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8027934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027936:	3324      	adds	r3, #36	; 0x24
 8027938:	683a      	ldr	r2, [r7, #0]
 802793a:	4611      	mov	r1, r2
 802793c:	4618      	mov	r0, r3
 802793e:	f000 ff3d 	bl	80287bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8027942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8027944:	f000 f9a3 	bl	8027c8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8027948:	f000 fd66 	bl	8028418 <xTaskResumeAll>
 802794c:	4603      	mov	r3, r0
 802794e:	2b00      	cmp	r3, #0
 8027950:	f47f af69 	bne.w	8027826 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8027954:	4b18      	ldr	r3, [pc, #96]	; (80279b8 <xQueueSemaphoreTake+0x20c>)
 8027956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802795a:	601a      	str	r2, [r3, #0]
 802795c:	f3bf 8f4f 	dsb	sy
 8027960:	f3bf 8f6f 	isb	sy
 8027964:	e75f      	b.n	8027826 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8027966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8027968:	f000 f991 	bl	8027c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802796c:	f000 fd54 	bl	8028418 <xTaskResumeAll>
 8027970:	e759      	b.n	8027826 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8027972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8027974:	f000 f98b 	bl	8027c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8027978:	f000 fd4e 	bl	8028418 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802797c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802797e:	f000 f9d8 	bl	8027d32 <prvIsQueueEmpty>
 8027982:	4603      	mov	r3, r0
 8027984:	2b00      	cmp	r3, #0
 8027986:	f43f af4e 	beq.w	8027826 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 802798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802798c:	2b00      	cmp	r3, #0
 802798e:	d00d      	beq.n	80279ac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8027990:	f002 f954 	bl	8029c3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8027994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8027996:	f000 f8d2 	bl	8027b3e <prvGetDisinheritPriorityAfterTimeout>
 802799a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 802799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802799e:	689b      	ldr	r3, [r3, #8]
 80279a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80279a2:	4618      	mov	r0, r3
 80279a4:	f001 fa10 	bl	8028dc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80279a8:	f002 f976 	bl	8029c98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80279ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80279ae:	4618      	mov	r0, r3
 80279b0:	3738      	adds	r7, #56	; 0x38
 80279b2:	46bd      	mov	sp, r7
 80279b4:	bd80      	pop	{r7, pc}
 80279b6:	bf00      	nop
 80279b8:	e000ed04 	.word	0xe000ed04

080279bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80279bc:	b580      	push	{r7, lr}
 80279be:	b08e      	sub	sp, #56	; 0x38
 80279c0:	af00      	add	r7, sp, #0
 80279c2:	60f8      	str	r0, [r7, #12]
 80279c4:	60b9      	str	r1, [r7, #8]
 80279c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80279c8:	68fb      	ldr	r3, [r7, #12]
 80279ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80279cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80279ce:	2b00      	cmp	r3, #0
 80279d0:	d109      	bne.n	80279e6 <xQueueReceiveFromISR+0x2a>
 80279d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80279d6:	f383 8811 	msr	BASEPRI, r3
 80279da:	f3bf 8f6f 	isb	sy
 80279de:	f3bf 8f4f 	dsb	sy
 80279e2:	623b      	str	r3, [r7, #32]
 80279e4:	e7fe      	b.n	80279e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80279e6:	68bb      	ldr	r3, [r7, #8]
 80279e8:	2b00      	cmp	r3, #0
 80279ea:	d103      	bne.n	80279f4 <xQueueReceiveFromISR+0x38>
 80279ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80279ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80279f0:	2b00      	cmp	r3, #0
 80279f2:	d101      	bne.n	80279f8 <xQueueReceiveFromISR+0x3c>
 80279f4:	2301      	movs	r3, #1
 80279f6:	e000      	b.n	80279fa <xQueueReceiveFromISR+0x3e>
 80279f8:	2300      	movs	r3, #0
 80279fa:	2b00      	cmp	r3, #0
 80279fc:	d109      	bne.n	8027a12 <xQueueReceiveFromISR+0x56>
 80279fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027a02:	f383 8811 	msr	BASEPRI, r3
 8027a06:	f3bf 8f6f 	isb	sy
 8027a0a:	f3bf 8f4f 	dsb	sy
 8027a0e:	61fb      	str	r3, [r7, #28]
 8027a10:	e7fe      	b.n	8027a10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8027a12:	f002 f9ef 	bl	8029df4 <vPortValidateInterruptPriority>
	__asm volatile
 8027a16:	f3ef 8211 	mrs	r2, BASEPRI
 8027a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027a1e:	f383 8811 	msr	BASEPRI, r3
 8027a22:	f3bf 8f6f 	isb	sy
 8027a26:	f3bf 8f4f 	dsb	sy
 8027a2a:	61ba      	str	r2, [r7, #24]
 8027a2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8027a2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8027a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8027a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8027a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027a3a:	2b00      	cmp	r3, #0
 8027a3c:	d02f      	beq.n	8027a9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8027a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8027a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8027a48:	68b9      	ldr	r1, [r7, #8]
 8027a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027a4c:	f000 f8f9 	bl	8027c42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8027a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027a52:	1e5a      	subs	r2, r3, #1
 8027a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027a56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8027a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8027a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027a60:	d112      	bne.n	8027a88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8027a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027a64:	691b      	ldr	r3, [r3, #16]
 8027a66:	2b00      	cmp	r3, #0
 8027a68:	d016      	beq.n	8027a98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8027a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027a6c:	3310      	adds	r3, #16
 8027a6e:	4618      	mov	r0, r3
 8027a70:	f000 fef2 	bl	8028858 <xTaskRemoveFromEventList>
 8027a74:	4603      	mov	r3, r0
 8027a76:	2b00      	cmp	r3, #0
 8027a78:	d00e      	beq.n	8027a98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8027a7a:	687b      	ldr	r3, [r7, #4]
 8027a7c:	2b00      	cmp	r3, #0
 8027a7e:	d00b      	beq.n	8027a98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8027a80:	687b      	ldr	r3, [r7, #4]
 8027a82:	2201      	movs	r2, #1
 8027a84:	601a      	str	r2, [r3, #0]
 8027a86:	e007      	b.n	8027a98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8027a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8027a8c:	3301      	adds	r3, #1
 8027a8e:	b2db      	uxtb	r3, r3
 8027a90:	b25a      	sxtb	r2, r3
 8027a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8027a98:	2301      	movs	r3, #1
 8027a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8027a9c:	e001      	b.n	8027aa2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8027a9e:	2300      	movs	r3, #0
 8027aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8027aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027aa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8027aa6:	693b      	ldr	r3, [r7, #16]
 8027aa8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8027aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8027aae:	4618      	mov	r0, r3
 8027ab0:	3738      	adds	r7, #56	; 0x38
 8027ab2:	46bd      	mov	sp, r7
 8027ab4:	bd80      	pop	{r7, pc}

08027ab6 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8027ab6:	b580      	push	{r7, lr}
 8027ab8:	b086      	sub	sp, #24
 8027aba:	af00      	add	r7, sp, #0
 8027abc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8027abe:	687b      	ldr	r3, [r7, #4]
 8027ac0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8027ac2:	697b      	ldr	r3, [r7, #20]
 8027ac4:	2b00      	cmp	r3, #0
 8027ac6:	d109      	bne.n	8027adc <uxQueueSpacesAvailable+0x26>
	__asm volatile
 8027ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027acc:	f383 8811 	msr	BASEPRI, r3
 8027ad0:	f3bf 8f6f 	isb	sy
 8027ad4:	f3bf 8f4f 	dsb	sy
 8027ad8:	60fb      	str	r3, [r7, #12]
 8027ada:	e7fe      	b.n	8027ada <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8027adc:	f002 f8ae 	bl	8029c3c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8027ae0:	697b      	ldr	r3, [r7, #20]
 8027ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8027ae4:	697b      	ldr	r3, [r7, #20]
 8027ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ae8:	1ad3      	subs	r3, r2, r3
 8027aea:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8027aec:	f002 f8d4 	bl	8029c98 <vPortExitCritical>

	return uxReturn;
 8027af0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8027af2:	4618      	mov	r0, r3
 8027af4:	3718      	adds	r7, #24
 8027af6:	46bd      	mov	sp, r7
 8027af8:	bd80      	pop	{r7, pc}

08027afa <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8027afa:	b580      	push	{r7, lr}
 8027afc:	b084      	sub	sp, #16
 8027afe:	af00      	add	r7, sp, #0
 8027b00:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8027b02:	687b      	ldr	r3, [r7, #4]
 8027b04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8027b06:	68fb      	ldr	r3, [r7, #12]
 8027b08:	2b00      	cmp	r3, #0
 8027b0a:	d109      	bne.n	8027b20 <vQueueDelete+0x26>
 8027b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027b10:	f383 8811 	msr	BASEPRI, r3
 8027b14:	f3bf 8f6f 	isb	sy
 8027b18:	f3bf 8f4f 	dsb	sy
 8027b1c:	60bb      	str	r3, [r7, #8]
 8027b1e:	e7fe      	b.n	8027b1e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8027b20:	68f8      	ldr	r0, [r7, #12]
 8027b22:	f000 f95d 	bl	8027de0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8027b26:	68fb      	ldr	r3, [r7, #12]
 8027b28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8027b2c:	2b00      	cmp	r3, #0
 8027b2e:	d102      	bne.n	8027b36 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8027b30:	68f8      	ldr	r0, [r7, #12]
 8027b32:	f002 fa5f 	bl	8029ff4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8027b36:	bf00      	nop
 8027b38:	3710      	adds	r7, #16
 8027b3a:	46bd      	mov	sp, r7
 8027b3c:	bd80      	pop	{r7, pc}

08027b3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8027b3e:	b480      	push	{r7}
 8027b40:	b085      	sub	sp, #20
 8027b42:	af00      	add	r7, sp, #0
 8027b44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8027b46:	687b      	ldr	r3, [r7, #4]
 8027b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027b4a:	2b00      	cmp	r3, #0
 8027b4c:	d006      	beq.n	8027b5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8027b4e:	687b      	ldr	r3, [r7, #4]
 8027b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b52:	681b      	ldr	r3, [r3, #0]
 8027b54:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8027b58:	60fb      	str	r3, [r7, #12]
 8027b5a:	e001      	b.n	8027b60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8027b5c:	2300      	movs	r3, #0
 8027b5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8027b60:	68fb      	ldr	r3, [r7, #12]
	}
 8027b62:	4618      	mov	r0, r3
 8027b64:	3714      	adds	r7, #20
 8027b66:	46bd      	mov	sp, r7
 8027b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b6c:	4770      	bx	lr

08027b6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8027b6e:	b580      	push	{r7, lr}
 8027b70:	b086      	sub	sp, #24
 8027b72:	af00      	add	r7, sp, #0
 8027b74:	60f8      	str	r0, [r7, #12]
 8027b76:	60b9      	str	r1, [r7, #8]
 8027b78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8027b7a:	2300      	movs	r3, #0
 8027b7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8027b7e:	68fb      	ldr	r3, [r7, #12]
 8027b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027b82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8027b84:	68fb      	ldr	r3, [r7, #12]
 8027b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027b88:	2b00      	cmp	r3, #0
 8027b8a:	d10d      	bne.n	8027ba8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8027b8c:	68fb      	ldr	r3, [r7, #12]
 8027b8e:	681b      	ldr	r3, [r3, #0]
 8027b90:	2b00      	cmp	r3, #0
 8027b92:	d14d      	bne.n	8027c30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8027b94:	68fb      	ldr	r3, [r7, #12]
 8027b96:	689b      	ldr	r3, [r3, #8]
 8027b98:	4618      	mov	r0, r3
 8027b9a:	f001 f8a9 	bl	8028cf0 <xTaskPriorityDisinherit>
 8027b9e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8027ba0:	68fb      	ldr	r3, [r7, #12]
 8027ba2:	2200      	movs	r2, #0
 8027ba4:	609a      	str	r2, [r3, #8]
 8027ba6:	e043      	b.n	8027c30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8027ba8:	687b      	ldr	r3, [r7, #4]
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	d119      	bne.n	8027be2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8027bae:	68fb      	ldr	r3, [r7, #12]
 8027bb0:	6858      	ldr	r0, [r3, #4]
 8027bb2:	68fb      	ldr	r3, [r7, #12]
 8027bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027bb6:	461a      	mov	r2, r3
 8027bb8:	68b9      	ldr	r1, [r7, #8]
 8027bba:	f005 fb3d 	bl	802d238 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8027bbe:	68fb      	ldr	r3, [r7, #12]
 8027bc0:	685a      	ldr	r2, [r3, #4]
 8027bc2:	68fb      	ldr	r3, [r7, #12]
 8027bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027bc6:	441a      	add	r2, r3
 8027bc8:	68fb      	ldr	r3, [r7, #12]
 8027bca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8027bcc:	68fb      	ldr	r3, [r7, #12]
 8027bce:	685a      	ldr	r2, [r3, #4]
 8027bd0:	68fb      	ldr	r3, [r7, #12]
 8027bd2:	689b      	ldr	r3, [r3, #8]
 8027bd4:	429a      	cmp	r2, r3
 8027bd6:	d32b      	bcc.n	8027c30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8027bd8:	68fb      	ldr	r3, [r7, #12]
 8027bda:	681a      	ldr	r2, [r3, #0]
 8027bdc:	68fb      	ldr	r3, [r7, #12]
 8027bde:	605a      	str	r2, [r3, #4]
 8027be0:	e026      	b.n	8027c30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8027be2:	68fb      	ldr	r3, [r7, #12]
 8027be4:	68d8      	ldr	r0, [r3, #12]
 8027be6:	68fb      	ldr	r3, [r7, #12]
 8027be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027bea:	461a      	mov	r2, r3
 8027bec:	68b9      	ldr	r1, [r7, #8]
 8027bee:	f005 fb23 	bl	802d238 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8027bf2:	68fb      	ldr	r3, [r7, #12]
 8027bf4:	68da      	ldr	r2, [r3, #12]
 8027bf6:	68fb      	ldr	r3, [r7, #12]
 8027bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027bfa:	425b      	negs	r3, r3
 8027bfc:	441a      	add	r2, r3
 8027bfe:	68fb      	ldr	r3, [r7, #12]
 8027c00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8027c02:	68fb      	ldr	r3, [r7, #12]
 8027c04:	68da      	ldr	r2, [r3, #12]
 8027c06:	68fb      	ldr	r3, [r7, #12]
 8027c08:	681b      	ldr	r3, [r3, #0]
 8027c0a:	429a      	cmp	r2, r3
 8027c0c:	d207      	bcs.n	8027c1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8027c0e:	68fb      	ldr	r3, [r7, #12]
 8027c10:	689a      	ldr	r2, [r3, #8]
 8027c12:	68fb      	ldr	r3, [r7, #12]
 8027c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c16:	425b      	negs	r3, r3
 8027c18:	441a      	add	r2, r3
 8027c1a:	68fb      	ldr	r3, [r7, #12]
 8027c1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8027c1e:	687b      	ldr	r3, [r7, #4]
 8027c20:	2b02      	cmp	r3, #2
 8027c22:	d105      	bne.n	8027c30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8027c24:	693b      	ldr	r3, [r7, #16]
 8027c26:	2b00      	cmp	r3, #0
 8027c28:	d002      	beq.n	8027c30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8027c2a:	693b      	ldr	r3, [r7, #16]
 8027c2c:	3b01      	subs	r3, #1
 8027c2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8027c30:	693b      	ldr	r3, [r7, #16]
 8027c32:	1c5a      	adds	r2, r3, #1
 8027c34:	68fb      	ldr	r3, [r7, #12]
 8027c36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8027c38:	697b      	ldr	r3, [r7, #20]
}
 8027c3a:	4618      	mov	r0, r3
 8027c3c:	3718      	adds	r7, #24
 8027c3e:	46bd      	mov	sp, r7
 8027c40:	bd80      	pop	{r7, pc}

08027c42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8027c42:	b580      	push	{r7, lr}
 8027c44:	b082      	sub	sp, #8
 8027c46:	af00      	add	r7, sp, #0
 8027c48:	6078      	str	r0, [r7, #4]
 8027c4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8027c4c:	687b      	ldr	r3, [r7, #4]
 8027c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c50:	2b00      	cmp	r3, #0
 8027c52:	d018      	beq.n	8027c86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8027c54:	687b      	ldr	r3, [r7, #4]
 8027c56:	68da      	ldr	r2, [r3, #12]
 8027c58:	687b      	ldr	r3, [r7, #4]
 8027c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c5c:	441a      	add	r2, r3
 8027c5e:	687b      	ldr	r3, [r7, #4]
 8027c60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8027c62:	687b      	ldr	r3, [r7, #4]
 8027c64:	68da      	ldr	r2, [r3, #12]
 8027c66:	687b      	ldr	r3, [r7, #4]
 8027c68:	689b      	ldr	r3, [r3, #8]
 8027c6a:	429a      	cmp	r2, r3
 8027c6c:	d303      	bcc.n	8027c76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8027c6e:	687b      	ldr	r3, [r7, #4]
 8027c70:	681a      	ldr	r2, [r3, #0]
 8027c72:	687b      	ldr	r3, [r7, #4]
 8027c74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8027c76:	687b      	ldr	r3, [r7, #4]
 8027c78:	68d9      	ldr	r1, [r3, #12]
 8027c7a:	687b      	ldr	r3, [r7, #4]
 8027c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c7e:	461a      	mov	r2, r3
 8027c80:	6838      	ldr	r0, [r7, #0]
 8027c82:	f005 fad9 	bl	802d238 <memcpy>
	}
}
 8027c86:	bf00      	nop
 8027c88:	3708      	adds	r7, #8
 8027c8a:	46bd      	mov	sp, r7
 8027c8c:	bd80      	pop	{r7, pc}

08027c8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8027c8e:	b580      	push	{r7, lr}
 8027c90:	b084      	sub	sp, #16
 8027c92:	af00      	add	r7, sp, #0
 8027c94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8027c96:	f001 ffd1 	bl	8029c3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8027c9a:	687b      	ldr	r3, [r7, #4]
 8027c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8027ca0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8027ca2:	e011      	b.n	8027cc8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8027ca4:	687b      	ldr	r3, [r7, #4]
 8027ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027ca8:	2b00      	cmp	r3, #0
 8027caa:	d012      	beq.n	8027cd2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8027cac:	687b      	ldr	r3, [r7, #4]
 8027cae:	3324      	adds	r3, #36	; 0x24
 8027cb0:	4618      	mov	r0, r3
 8027cb2:	f000 fdd1 	bl	8028858 <xTaskRemoveFromEventList>
 8027cb6:	4603      	mov	r3, r0
 8027cb8:	2b00      	cmp	r3, #0
 8027cba:	d001      	beq.n	8027cc0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8027cbc:	f000 fea4 	bl	8028a08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8027cc0:	7bfb      	ldrb	r3, [r7, #15]
 8027cc2:	3b01      	subs	r3, #1
 8027cc4:	b2db      	uxtb	r3, r3
 8027cc6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8027cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8027ccc:	2b00      	cmp	r3, #0
 8027cce:	dce9      	bgt.n	8027ca4 <prvUnlockQueue+0x16>
 8027cd0:	e000      	b.n	8027cd4 <prvUnlockQueue+0x46>
					break;
 8027cd2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8027cd4:	687b      	ldr	r3, [r7, #4]
 8027cd6:	22ff      	movs	r2, #255	; 0xff
 8027cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8027cdc:	f001 ffdc 	bl	8029c98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8027ce0:	f001 ffac 	bl	8029c3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8027ce4:	687b      	ldr	r3, [r7, #4]
 8027ce6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8027cea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8027cec:	e011      	b.n	8027d12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8027cee:	687b      	ldr	r3, [r7, #4]
 8027cf0:	691b      	ldr	r3, [r3, #16]
 8027cf2:	2b00      	cmp	r3, #0
 8027cf4:	d012      	beq.n	8027d1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8027cf6:	687b      	ldr	r3, [r7, #4]
 8027cf8:	3310      	adds	r3, #16
 8027cfa:	4618      	mov	r0, r3
 8027cfc:	f000 fdac 	bl	8028858 <xTaskRemoveFromEventList>
 8027d00:	4603      	mov	r3, r0
 8027d02:	2b00      	cmp	r3, #0
 8027d04:	d001      	beq.n	8027d0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8027d06:	f000 fe7f 	bl	8028a08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8027d0a:	7bbb      	ldrb	r3, [r7, #14]
 8027d0c:	3b01      	subs	r3, #1
 8027d0e:	b2db      	uxtb	r3, r3
 8027d10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8027d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8027d16:	2b00      	cmp	r3, #0
 8027d18:	dce9      	bgt.n	8027cee <prvUnlockQueue+0x60>
 8027d1a:	e000      	b.n	8027d1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8027d1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8027d1e:	687b      	ldr	r3, [r7, #4]
 8027d20:	22ff      	movs	r2, #255	; 0xff
 8027d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8027d26:	f001 ffb7 	bl	8029c98 <vPortExitCritical>
}
 8027d2a:	bf00      	nop
 8027d2c:	3710      	adds	r7, #16
 8027d2e:	46bd      	mov	sp, r7
 8027d30:	bd80      	pop	{r7, pc}

08027d32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8027d32:	b580      	push	{r7, lr}
 8027d34:	b084      	sub	sp, #16
 8027d36:	af00      	add	r7, sp, #0
 8027d38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8027d3a:	f001 ff7f 	bl	8029c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8027d3e:	687b      	ldr	r3, [r7, #4]
 8027d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027d42:	2b00      	cmp	r3, #0
 8027d44:	d102      	bne.n	8027d4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8027d46:	2301      	movs	r3, #1
 8027d48:	60fb      	str	r3, [r7, #12]
 8027d4a:	e001      	b.n	8027d50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8027d4c:	2300      	movs	r3, #0
 8027d4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8027d50:	f001 ffa2 	bl	8029c98 <vPortExitCritical>

	return xReturn;
 8027d54:	68fb      	ldr	r3, [r7, #12]
}
 8027d56:	4618      	mov	r0, r3
 8027d58:	3710      	adds	r7, #16
 8027d5a:	46bd      	mov	sp, r7
 8027d5c:	bd80      	pop	{r7, pc}

08027d5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8027d5e:	b580      	push	{r7, lr}
 8027d60:	b084      	sub	sp, #16
 8027d62:	af00      	add	r7, sp, #0
 8027d64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8027d66:	f001 ff69 	bl	8029c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8027d6a:	687b      	ldr	r3, [r7, #4]
 8027d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8027d6e:	687b      	ldr	r3, [r7, #4]
 8027d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027d72:	429a      	cmp	r2, r3
 8027d74:	d102      	bne.n	8027d7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8027d76:	2301      	movs	r3, #1
 8027d78:	60fb      	str	r3, [r7, #12]
 8027d7a:	e001      	b.n	8027d80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8027d7c:	2300      	movs	r3, #0
 8027d7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8027d80:	f001 ff8a 	bl	8029c98 <vPortExitCritical>

	return xReturn;
 8027d84:	68fb      	ldr	r3, [r7, #12]
}
 8027d86:	4618      	mov	r0, r3
 8027d88:	3710      	adds	r7, #16
 8027d8a:	46bd      	mov	sp, r7
 8027d8c:	bd80      	pop	{r7, pc}
	...

08027d90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8027d90:	b480      	push	{r7}
 8027d92:	b085      	sub	sp, #20
 8027d94:	af00      	add	r7, sp, #0
 8027d96:	6078      	str	r0, [r7, #4]
 8027d98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8027d9a:	2300      	movs	r3, #0
 8027d9c:	60fb      	str	r3, [r7, #12]
 8027d9e:	e014      	b.n	8027dca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8027da0:	4a0e      	ldr	r2, [pc, #56]	; (8027ddc <vQueueAddToRegistry+0x4c>)
 8027da2:	68fb      	ldr	r3, [r7, #12]
 8027da4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8027da8:	2b00      	cmp	r3, #0
 8027daa:	d10b      	bne.n	8027dc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8027dac:	490b      	ldr	r1, [pc, #44]	; (8027ddc <vQueueAddToRegistry+0x4c>)
 8027dae:	68fb      	ldr	r3, [r7, #12]
 8027db0:	683a      	ldr	r2, [r7, #0]
 8027db2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8027db6:	4a09      	ldr	r2, [pc, #36]	; (8027ddc <vQueueAddToRegistry+0x4c>)
 8027db8:	68fb      	ldr	r3, [r7, #12]
 8027dba:	00db      	lsls	r3, r3, #3
 8027dbc:	4413      	add	r3, r2
 8027dbe:	687a      	ldr	r2, [r7, #4]
 8027dc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8027dc2:	e005      	b.n	8027dd0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8027dc4:	68fb      	ldr	r3, [r7, #12]
 8027dc6:	3301      	adds	r3, #1
 8027dc8:	60fb      	str	r3, [r7, #12]
 8027dca:	68fb      	ldr	r3, [r7, #12]
 8027dcc:	2b07      	cmp	r3, #7
 8027dce:	d9e7      	bls.n	8027da0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8027dd0:	bf00      	nop
 8027dd2:	3714      	adds	r7, #20
 8027dd4:	46bd      	mov	sp, r7
 8027dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dda:	4770      	bx	lr
 8027ddc:	2400d210 	.word	0x2400d210

08027de0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8027de0:	b480      	push	{r7}
 8027de2:	b085      	sub	sp, #20
 8027de4:	af00      	add	r7, sp, #0
 8027de6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8027de8:	2300      	movs	r3, #0
 8027dea:	60fb      	str	r3, [r7, #12]
 8027dec:	e016      	b.n	8027e1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8027dee:	4a10      	ldr	r2, [pc, #64]	; (8027e30 <vQueueUnregisterQueue+0x50>)
 8027df0:	68fb      	ldr	r3, [r7, #12]
 8027df2:	00db      	lsls	r3, r3, #3
 8027df4:	4413      	add	r3, r2
 8027df6:	685b      	ldr	r3, [r3, #4]
 8027df8:	687a      	ldr	r2, [r7, #4]
 8027dfa:	429a      	cmp	r2, r3
 8027dfc:	d10b      	bne.n	8027e16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8027dfe:	4a0c      	ldr	r2, [pc, #48]	; (8027e30 <vQueueUnregisterQueue+0x50>)
 8027e00:	68fb      	ldr	r3, [r7, #12]
 8027e02:	2100      	movs	r1, #0
 8027e04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8027e08:	4a09      	ldr	r2, [pc, #36]	; (8027e30 <vQueueUnregisterQueue+0x50>)
 8027e0a:	68fb      	ldr	r3, [r7, #12]
 8027e0c:	00db      	lsls	r3, r3, #3
 8027e0e:	4413      	add	r3, r2
 8027e10:	2200      	movs	r2, #0
 8027e12:	605a      	str	r2, [r3, #4]
				break;
 8027e14:	e005      	b.n	8027e22 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8027e16:	68fb      	ldr	r3, [r7, #12]
 8027e18:	3301      	adds	r3, #1
 8027e1a:	60fb      	str	r3, [r7, #12]
 8027e1c:	68fb      	ldr	r3, [r7, #12]
 8027e1e:	2b07      	cmp	r3, #7
 8027e20:	d9e5      	bls.n	8027dee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8027e22:	bf00      	nop
 8027e24:	3714      	adds	r7, #20
 8027e26:	46bd      	mov	sp, r7
 8027e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e2c:	4770      	bx	lr
 8027e2e:	bf00      	nop
 8027e30:	2400d210 	.word	0x2400d210

08027e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8027e34:	b580      	push	{r7, lr}
 8027e36:	b086      	sub	sp, #24
 8027e38:	af00      	add	r7, sp, #0
 8027e3a:	60f8      	str	r0, [r7, #12]
 8027e3c:	60b9      	str	r1, [r7, #8]
 8027e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8027e40:	68fb      	ldr	r3, [r7, #12]
 8027e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8027e44:	f001 fefa 	bl	8029c3c <vPortEnterCritical>
 8027e48:	697b      	ldr	r3, [r7, #20]
 8027e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8027e4e:	b25b      	sxtb	r3, r3
 8027e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027e54:	d103      	bne.n	8027e5e <vQueueWaitForMessageRestricted+0x2a>
 8027e56:	697b      	ldr	r3, [r7, #20]
 8027e58:	2200      	movs	r2, #0
 8027e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8027e5e:	697b      	ldr	r3, [r7, #20]
 8027e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8027e64:	b25b      	sxtb	r3, r3
 8027e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027e6a:	d103      	bne.n	8027e74 <vQueueWaitForMessageRestricted+0x40>
 8027e6c:	697b      	ldr	r3, [r7, #20]
 8027e6e:	2200      	movs	r2, #0
 8027e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8027e74:	f001 ff10 	bl	8029c98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8027e78:	697b      	ldr	r3, [r7, #20]
 8027e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027e7c:	2b00      	cmp	r3, #0
 8027e7e:	d106      	bne.n	8027e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8027e80:	697b      	ldr	r3, [r7, #20]
 8027e82:	3324      	adds	r3, #36	; 0x24
 8027e84:	687a      	ldr	r2, [r7, #4]
 8027e86:	68b9      	ldr	r1, [r7, #8]
 8027e88:	4618      	mov	r0, r3
 8027e8a:	f000 fcbb 	bl	8028804 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8027e8e:	6978      	ldr	r0, [r7, #20]
 8027e90:	f7ff fefd 	bl	8027c8e <prvUnlockQueue>
	}
 8027e94:	bf00      	nop
 8027e96:	3718      	adds	r7, #24
 8027e98:	46bd      	mov	sp, r7
 8027e9a:	bd80      	pop	{r7, pc}

08027e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8027e9c:	b580      	push	{r7, lr}
 8027e9e:	b08e      	sub	sp, #56	; 0x38
 8027ea0:	af04      	add	r7, sp, #16
 8027ea2:	60f8      	str	r0, [r7, #12]
 8027ea4:	60b9      	str	r1, [r7, #8]
 8027ea6:	607a      	str	r2, [r7, #4]
 8027ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8027eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027eac:	2b00      	cmp	r3, #0
 8027eae:	d109      	bne.n	8027ec4 <xTaskCreateStatic+0x28>
 8027eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027eb4:	f383 8811 	msr	BASEPRI, r3
 8027eb8:	f3bf 8f6f 	isb	sy
 8027ebc:	f3bf 8f4f 	dsb	sy
 8027ec0:	623b      	str	r3, [r7, #32]
 8027ec2:	e7fe      	b.n	8027ec2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8027ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027ec6:	2b00      	cmp	r3, #0
 8027ec8:	d109      	bne.n	8027ede <xTaskCreateStatic+0x42>
 8027eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027ece:	f383 8811 	msr	BASEPRI, r3
 8027ed2:	f3bf 8f6f 	isb	sy
 8027ed6:	f3bf 8f4f 	dsb	sy
 8027eda:	61fb      	str	r3, [r7, #28]
 8027edc:	e7fe      	b.n	8027edc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8027ede:	235c      	movs	r3, #92	; 0x5c
 8027ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8027ee2:	693b      	ldr	r3, [r7, #16]
 8027ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8027ee6:	d009      	beq.n	8027efc <xTaskCreateStatic+0x60>
 8027ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027eec:	f383 8811 	msr	BASEPRI, r3
 8027ef0:	f3bf 8f6f 	isb	sy
 8027ef4:	f3bf 8f4f 	dsb	sy
 8027ef8:	61bb      	str	r3, [r7, #24]
 8027efa:	e7fe      	b.n	8027efa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8027efc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8027efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027f00:	2b00      	cmp	r3, #0
 8027f02:	d01e      	beq.n	8027f42 <xTaskCreateStatic+0xa6>
 8027f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	d01b      	beq.n	8027f42 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8027f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027f0c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8027f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027f12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8027f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f16:	2202      	movs	r2, #2
 8027f18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8027f1c:	2300      	movs	r3, #0
 8027f1e:	9303      	str	r3, [sp, #12]
 8027f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f22:	9302      	str	r3, [sp, #8]
 8027f24:	f107 0314 	add.w	r3, r7, #20
 8027f28:	9301      	str	r3, [sp, #4]
 8027f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f2c:	9300      	str	r3, [sp, #0]
 8027f2e:	683b      	ldr	r3, [r7, #0]
 8027f30:	687a      	ldr	r2, [r7, #4]
 8027f32:	68b9      	ldr	r1, [r7, #8]
 8027f34:	68f8      	ldr	r0, [r7, #12]
 8027f36:	f000 f850 	bl	8027fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8027f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027f3c:	f000 f8dc 	bl	80280f8 <prvAddNewTaskToReadyList>
 8027f40:	e001      	b.n	8027f46 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8027f42:	2300      	movs	r3, #0
 8027f44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8027f46:	697b      	ldr	r3, [r7, #20]
	}
 8027f48:	4618      	mov	r0, r3
 8027f4a:	3728      	adds	r7, #40	; 0x28
 8027f4c:	46bd      	mov	sp, r7
 8027f4e:	bd80      	pop	{r7, pc}

08027f50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8027f50:	b580      	push	{r7, lr}
 8027f52:	b08c      	sub	sp, #48	; 0x30
 8027f54:	af04      	add	r7, sp, #16
 8027f56:	60f8      	str	r0, [r7, #12]
 8027f58:	60b9      	str	r1, [r7, #8]
 8027f5a:	603b      	str	r3, [r7, #0]
 8027f5c:	4613      	mov	r3, r2
 8027f5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8027f60:	88fb      	ldrh	r3, [r7, #6]
 8027f62:	009b      	lsls	r3, r3, #2
 8027f64:	4618      	mov	r0, r3
 8027f66:	f001 ff83 	bl	8029e70 <pvPortMalloc>
 8027f6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8027f6c:	697b      	ldr	r3, [r7, #20]
 8027f6e:	2b00      	cmp	r3, #0
 8027f70:	d00e      	beq.n	8027f90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8027f72:	205c      	movs	r0, #92	; 0x5c
 8027f74:	f001 ff7c 	bl	8029e70 <pvPortMalloc>
 8027f78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8027f7a:	69fb      	ldr	r3, [r7, #28]
 8027f7c:	2b00      	cmp	r3, #0
 8027f7e:	d003      	beq.n	8027f88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8027f80:	69fb      	ldr	r3, [r7, #28]
 8027f82:	697a      	ldr	r2, [r7, #20]
 8027f84:	631a      	str	r2, [r3, #48]	; 0x30
 8027f86:	e005      	b.n	8027f94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8027f88:	6978      	ldr	r0, [r7, #20]
 8027f8a:	f002 f833 	bl	8029ff4 <vPortFree>
 8027f8e:	e001      	b.n	8027f94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8027f90:	2300      	movs	r3, #0
 8027f92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8027f94:	69fb      	ldr	r3, [r7, #28]
 8027f96:	2b00      	cmp	r3, #0
 8027f98:	d017      	beq.n	8027fca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8027f9a:	69fb      	ldr	r3, [r7, #28]
 8027f9c:	2200      	movs	r2, #0
 8027f9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8027fa2:	88fa      	ldrh	r2, [r7, #6]
 8027fa4:	2300      	movs	r3, #0
 8027fa6:	9303      	str	r3, [sp, #12]
 8027fa8:	69fb      	ldr	r3, [r7, #28]
 8027faa:	9302      	str	r3, [sp, #8]
 8027fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fae:	9301      	str	r3, [sp, #4]
 8027fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fb2:	9300      	str	r3, [sp, #0]
 8027fb4:	683b      	ldr	r3, [r7, #0]
 8027fb6:	68b9      	ldr	r1, [r7, #8]
 8027fb8:	68f8      	ldr	r0, [r7, #12]
 8027fba:	f000 f80e 	bl	8027fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8027fbe:	69f8      	ldr	r0, [r7, #28]
 8027fc0:	f000 f89a 	bl	80280f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8027fc4:	2301      	movs	r3, #1
 8027fc6:	61bb      	str	r3, [r7, #24]
 8027fc8:	e002      	b.n	8027fd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8027fca:	f04f 33ff 	mov.w	r3, #4294967295
 8027fce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8027fd0:	69bb      	ldr	r3, [r7, #24]
	}
 8027fd2:	4618      	mov	r0, r3
 8027fd4:	3720      	adds	r7, #32
 8027fd6:	46bd      	mov	sp, r7
 8027fd8:	bd80      	pop	{r7, pc}

08027fda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8027fda:	b580      	push	{r7, lr}
 8027fdc:	b088      	sub	sp, #32
 8027fde:	af00      	add	r7, sp, #0
 8027fe0:	60f8      	str	r0, [r7, #12]
 8027fe2:	60b9      	str	r1, [r7, #8]
 8027fe4:	607a      	str	r2, [r7, #4]
 8027fe6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8027fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027fea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8027fec:	687b      	ldr	r3, [r7, #4]
 8027fee:	009b      	lsls	r3, r3, #2
 8027ff0:	461a      	mov	r2, r3
 8027ff2:	21a5      	movs	r1, #165	; 0xa5
 8027ff4:	f005 f92b 	bl	802d24e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8027ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027ffc:	6879      	ldr	r1, [r7, #4]
 8027ffe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8028002:	440b      	add	r3, r1
 8028004:	009b      	lsls	r3, r3, #2
 8028006:	4413      	add	r3, r2
 8028008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 802800a:	69bb      	ldr	r3, [r7, #24]
 802800c:	f023 0307 	bic.w	r3, r3, #7
 8028010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8028012:	69bb      	ldr	r3, [r7, #24]
 8028014:	f003 0307 	and.w	r3, r3, #7
 8028018:	2b00      	cmp	r3, #0
 802801a:	d009      	beq.n	8028030 <prvInitialiseNewTask+0x56>
 802801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028020:	f383 8811 	msr	BASEPRI, r3
 8028024:	f3bf 8f6f 	isb	sy
 8028028:	f3bf 8f4f 	dsb	sy
 802802c:	617b      	str	r3, [r7, #20]
 802802e:	e7fe      	b.n	802802e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8028030:	68bb      	ldr	r3, [r7, #8]
 8028032:	2b00      	cmp	r3, #0
 8028034:	d01f      	beq.n	8028076 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8028036:	2300      	movs	r3, #0
 8028038:	61fb      	str	r3, [r7, #28]
 802803a:	e012      	b.n	8028062 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 802803c:	68ba      	ldr	r2, [r7, #8]
 802803e:	69fb      	ldr	r3, [r7, #28]
 8028040:	4413      	add	r3, r2
 8028042:	7819      	ldrb	r1, [r3, #0]
 8028044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028046:	69fb      	ldr	r3, [r7, #28]
 8028048:	4413      	add	r3, r2
 802804a:	3334      	adds	r3, #52	; 0x34
 802804c:	460a      	mov	r2, r1
 802804e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8028050:	68ba      	ldr	r2, [r7, #8]
 8028052:	69fb      	ldr	r3, [r7, #28]
 8028054:	4413      	add	r3, r2
 8028056:	781b      	ldrb	r3, [r3, #0]
 8028058:	2b00      	cmp	r3, #0
 802805a:	d006      	beq.n	802806a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802805c:	69fb      	ldr	r3, [r7, #28]
 802805e:	3301      	adds	r3, #1
 8028060:	61fb      	str	r3, [r7, #28]
 8028062:	69fb      	ldr	r3, [r7, #28]
 8028064:	2b0f      	cmp	r3, #15
 8028066:	d9e9      	bls.n	802803c <prvInitialiseNewTask+0x62>
 8028068:	e000      	b.n	802806c <prvInitialiseNewTask+0x92>
			{
				break;
 802806a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 802806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802806e:	2200      	movs	r2, #0
 8028070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028074:	e003      	b.n	802807e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8028076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028078:	2200      	movs	r2, #0
 802807a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 802807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028080:	2b37      	cmp	r3, #55	; 0x37
 8028082:	d901      	bls.n	8028088 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8028084:	2337      	movs	r3, #55	; 0x37
 8028086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8028088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802808a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802808c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 802808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8028094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028096:	2200      	movs	r2, #0
 8028098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 802809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802809c:	3304      	adds	r3, #4
 802809e:	4618      	mov	r0, r3
 80280a0:	f7fe fe58 	bl	8026d54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80280a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80280a6:	3318      	adds	r3, #24
 80280a8:	4618      	mov	r0, r3
 80280aa:	f7fe fe53 	bl	8026d54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80280ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80280b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80280b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80280b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80280ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80280bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80280be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80280c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80280c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80280c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80280c6:	2200      	movs	r2, #0
 80280c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80280ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80280cc:	2200      	movs	r2, #0
 80280ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80280d2:	683a      	ldr	r2, [r7, #0]
 80280d4:	68f9      	ldr	r1, [r7, #12]
 80280d6:	69b8      	ldr	r0, [r7, #24]
 80280d8:	f001 fc8a 	bl	80299f0 <pxPortInitialiseStack>
 80280dc:	4602      	mov	r2, r0
 80280de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80280e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80280e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80280e4:	2b00      	cmp	r3, #0
 80280e6:	d002      	beq.n	80280ee <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80280e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80280ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80280ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80280ee:	bf00      	nop
 80280f0:	3720      	adds	r7, #32
 80280f2:	46bd      	mov	sp, r7
 80280f4:	bd80      	pop	{r7, pc}
	...

080280f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80280f8:	b580      	push	{r7, lr}
 80280fa:	b082      	sub	sp, #8
 80280fc:	af00      	add	r7, sp, #0
 80280fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8028100:	f001 fd9c 	bl	8029c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8028104:	4b2d      	ldr	r3, [pc, #180]	; (80281bc <prvAddNewTaskToReadyList+0xc4>)
 8028106:	681b      	ldr	r3, [r3, #0]
 8028108:	3301      	adds	r3, #1
 802810a:	4a2c      	ldr	r2, [pc, #176]	; (80281bc <prvAddNewTaskToReadyList+0xc4>)
 802810c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 802810e:	4b2c      	ldr	r3, [pc, #176]	; (80281c0 <prvAddNewTaskToReadyList+0xc8>)
 8028110:	681b      	ldr	r3, [r3, #0]
 8028112:	2b00      	cmp	r3, #0
 8028114:	d109      	bne.n	802812a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8028116:	4a2a      	ldr	r2, [pc, #168]	; (80281c0 <prvAddNewTaskToReadyList+0xc8>)
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 802811c:	4b27      	ldr	r3, [pc, #156]	; (80281bc <prvAddNewTaskToReadyList+0xc4>)
 802811e:	681b      	ldr	r3, [r3, #0]
 8028120:	2b01      	cmp	r3, #1
 8028122:	d110      	bne.n	8028146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8028124:	f000 fc94 	bl	8028a50 <prvInitialiseTaskLists>
 8028128:	e00d      	b.n	8028146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802812a:	4b26      	ldr	r3, [pc, #152]	; (80281c4 <prvAddNewTaskToReadyList+0xcc>)
 802812c:	681b      	ldr	r3, [r3, #0]
 802812e:	2b00      	cmp	r3, #0
 8028130:	d109      	bne.n	8028146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8028132:	4b23      	ldr	r3, [pc, #140]	; (80281c0 <prvAddNewTaskToReadyList+0xc8>)
 8028134:	681b      	ldr	r3, [r3, #0]
 8028136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028138:	687b      	ldr	r3, [r7, #4]
 802813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802813c:	429a      	cmp	r2, r3
 802813e:	d802      	bhi.n	8028146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8028140:	4a1f      	ldr	r2, [pc, #124]	; (80281c0 <prvAddNewTaskToReadyList+0xc8>)
 8028142:	687b      	ldr	r3, [r7, #4]
 8028144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8028146:	4b20      	ldr	r3, [pc, #128]	; (80281c8 <prvAddNewTaskToReadyList+0xd0>)
 8028148:	681b      	ldr	r3, [r3, #0]
 802814a:	3301      	adds	r3, #1
 802814c:	4a1e      	ldr	r2, [pc, #120]	; (80281c8 <prvAddNewTaskToReadyList+0xd0>)
 802814e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8028150:	4b1d      	ldr	r3, [pc, #116]	; (80281c8 <prvAddNewTaskToReadyList+0xd0>)
 8028152:	681a      	ldr	r2, [r3, #0]
 8028154:	687b      	ldr	r3, [r7, #4]
 8028156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8028158:	687b      	ldr	r3, [r7, #4]
 802815a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802815c:	4b1b      	ldr	r3, [pc, #108]	; (80281cc <prvAddNewTaskToReadyList+0xd4>)
 802815e:	681b      	ldr	r3, [r3, #0]
 8028160:	429a      	cmp	r2, r3
 8028162:	d903      	bls.n	802816c <prvAddNewTaskToReadyList+0x74>
 8028164:	687b      	ldr	r3, [r7, #4]
 8028166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028168:	4a18      	ldr	r2, [pc, #96]	; (80281cc <prvAddNewTaskToReadyList+0xd4>)
 802816a:	6013      	str	r3, [r2, #0]
 802816c:	687b      	ldr	r3, [r7, #4]
 802816e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028170:	4613      	mov	r3, r2
 8028172:	009b      	lsls	r3, r3, #2
 8028174:	4413      	add	r3, r2
 8028176:	009b      	lsls	r3, r3, #2
 8028178:	4a15      	ldr	r2, [pc, #84]	; (80281d0 <prvAddNewTaskToReadyList+0xd8>)
 802817a:	441a      	add	r2, r3
 802817c:	687b      	ldr	r3, [r7, #4]
 802817e:	3304      	adds	r3, #4
 8028180:	4619      	mov	r1, r3
 8028182:	4610      	mov	r0, r2
 8028184:	f7fe fdf3 	bl	8026d6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8028188:	f001 fd86 	bl	8029c98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 802818c:	4b0d      	ldr	r3, [pc, #52]	; (80281c4 <prvAddNewTaskToReadyList+0xcc>)
 802818e:	681b      	ldr	r3, [r3, #0]
 8028190:	2b00      	cmp	r3, #0
 8028192:	d00e      	beq.n	80281b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8028194:	4b0a      	ldr	r3, [pc, #40]	; (80281c0 <prvAddNewTaskToReadyList+0xc8>)
 8028196:	681b      	ldr	r3, [r3, #0]
 8028198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802819a:	687b      	ldr	r3, [r7, #4]
 802819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802819e:	429a      	cmp	r2, r3
 80281a0:	d207      	bcs.n	80281b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80281a2:	4b0c      	ldr	r3, [pc, #48]	; (80281d4 <prvAddNewTaskToReadyList+0xdc>)
 80281a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80281a8:	601a      	str	r2, [r3, #0]
 80281aa:	f3bf 8f4f 	dsb	sy
 80281ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80281b2:	bf00      	nop
 80281b4:	3708      	adds	r7, #8
 80281b6:	46bd      	mov	sp, r7
 80281b8:	bd80      	pop	{r7, pc}
 80281ba:	bf00      	nop
 80281bc:	24001fbc 	.word	0x24001fbc
 80281c0:	24001ae8 	.word	0x24001ae8
 80281c4:	24001fc8 	.word	0x24001fc8
 80281c8:	24001fd8 	.word	0x24001fd8
 80281cc:	24001fc4 	.word	0x24001fc4
 80281d0:	24001aec 	.word	0x24001aec
 80281d4:	e000ed04 	.word	0xe000ed04

080281d8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80281d8:	b580      	push	{r7, lr}
 80281da:	b08a      	sub	sp, #40	; 0x28
 80281dc:	af00      	add	r7, sp, #0
 80281de:	6078      	str	r0, [r7, #4]
 80281e0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80281e2:	2300      	movs	r3, #0
 80281e4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80281e6:	687b      	ldr	r3, [r7, #4]
 80281e8:	2b00      	cmp	r3, #0
 80281ea:	d109      	bne.n	8028200 <vTaskDelayUntil+0x28>
 80281ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80281f0:	f383 8811 	msr	BASEPRI, r3
 80281f4:	f3bf 8f6f 	isb	sy
 80281f8:	f3bf 8f4f 	dsb	sy
 80281fc:	617b      	str	r3, [r7, #20]
 80281fe:	e7fe      	b.n	80281fe <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8028200:	683b      	ldr	r3, [r7, #0]
 8028202:	2b00      	cmp	r3, #0
 8028204:	d109      	bne.n	802821a <vTaskDelayUntil+0x42>
 8028206:	f04f 0350 	mov.w	r3, #80	; 0x50
 802820a:	f383 8811 	msr	BASEPRI, r3
 802820e:	f3bf 8f6f 	isb	sy
 8028212:	f3bf 8f4f 	dsb	sy
 8028216:	613b      	str	r3, [r7, #16]
 8028218:	e7fe      	b.n	8028218 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 802821a:	4b29      	ldr	r3, [pc, #164]	; (80282c0 <vTaskDelayUntil+0xe8>)
 802821c:	681b      	ldr	r3, [r3, #0]
 802821e:	2b00      	cmp	r3, #0
 8028220:	d009      	beq.n	8028236 <vTaskDelayUntil+0x5e>
 8028222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028226:	f383 8811 	msr	BASEPRI, r3
 802822a:	f3bf 8f6f 	isb	sy
 802822e:	f3bf 8f4f 	dsb	sy
 8028232:	60fb      	str	r3, [r7, #12]
 8028234:	e7fe      	b.n	8028234 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8028236:	f000 f8e1 	bl	80283fc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 802823a:	4b22      	ldr	r3, [pc, #136]	; (80282c4 <vTaskDelayUntil+0xec>)
 802823c:	681b      	ldr	r3, [r3, #0]
 802823e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	681b      	ldr	r3, [r3, #0]
 8028244:	683a      	ldr	r2, [r7, #0]
 8028246:	4413      	add	r3, r2
 8028248:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 802824a:	687b      	ldr	r3, [r7, #4]
 802824c:	681b      	ldr	r3, [r3, #0]
 802824e:	6a3a      	ldr	r2, [r7, #32]
 8028250:	429a      	cmp	r2, r3
 8028252:	d20b      	bcs.n	802826c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8028254:	687b      	ldr	r3, [r7, #4]
 8028256:	681b      	ldr	r3, [r3, #0]
 8028258:	69fa      	ldr	r2, [r7, #28]
 802825a:	429a      	cmp	r2, r3
 802825c:	d211      	bcs.n	8028282 <vTaskDelayUntil+0xaa>
 802825e:	69fa      	ldr	r2, [r7, #28]
 8028260:	6a3b      	ldr	r3, [r7, #32]
 8028262:	429a      	cmp	r2, r3
 8028264:	d90d      	bls.n	8028282 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8028266:	2301      	movs	r3, #1
 8028268:	627b      	str	r3, [r7, #36]	; 0x24
 802826a:	e00a      	b.n	8028282 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 802826c:	687b      	ldr	r3, [r7, #4]
 802826e:	681b      	ldr	r3, [r3, #0]
 8028270:	69fa      	ldr	r2, [r7, #28]
 8028272:	429a      	cmp	r2, r3
 8028274:	d303      	bcc.n	802827e <vTaskDelayUntil+0xa6>
 8028276:	69fa      	ldr	r2, [r7, #28]
 8028278:	6a3b      	ldr	r3, [r7, #32]
 802827a:	429a      	cmp	r2, r3
 802827c:	d901      	bls.n	8028282 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 802827e:	2301      	movs	r3, #1
 8028280:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8028282:	687b      	ldr	r3, [r7, #4]
 8028284:	69fa      	ldr	r2, [r7, #28]
 8028286:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8028288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802828a:	2b00      	cmp	r3, #0
 802828c:	d006      	beq.n	802829c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 802828e:	69fa      	ldr	r2, [r7, #28]
 8028290:	6a3b      	ldr	r3, [r7, #32]
 8028292:	1ad3      	subs	r3, r2, r3
 8028294:	2100      	movs	r1, #0
 8028296:	4618      	mov	r0, r3
 8028298:	f001 f810 	bl	80292bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 802829c:	f000 f8bc 	bl	8028418 <xTaskResumeAll>
 80282a0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80282a2:	69bb      	ldr	r3, [r7, #24]
 80282a4:	2b00      	cmp	r3, #0
 80282a6:	d107      	bne.n	80282b8 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80282a8:	4b07      	ldr	r3, [pc, #28]	; (80282c8 <vTaskDelayUntil+0xf0>)
 80282aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80282ae:	601a      	str	r2, [r3, #0]
 80282b0:	f3bf 8f4f 	dsb	sy
 80282b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80282b8:	bf00      	nop
 80282ba:	3728      	adds	r7, #40	; 0x28
 80282bc:	46bd      	mov	sp, r7
 80282be:	bd80      	pop	{r7, pc}
 80282c0:	24001fe4 	.word	0x24001fe4
 80282c4:	24001fc0 	.word	0x24001fc0
 80282c8:	e000ed04 	.word	0xe000ed04

080282cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80282cc:	b580      	push	{r7, lr}
 80282ce:	b084      	sub	sp, #16
 80282d0:	af00      	add	r7, sp, #0
 80282d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80282d4:	2300      	movs	r3, #0
 80282d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80282d8:	687b      	ldr	r3, [r7, #4]
 80282da:	2b00      	cmp	r3, #0
 80282dc:	d016      	beq.n	802830c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80282de:	4b13      	ldr	r3, [pc, #76]	; (802832c <vTaskDelay+0x60>)
 80282e0:	681b      	ldr	r3, [r3, #0]
 80282e2:	2b00      	cmp	r3, #0
 80282e4:	d009      	beq.n	80282fa <vTaskDelay+0x2e>
 80282e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80282ea:	f383 8811 	msr	BASEPRI, r3
 80282ee:	f3bf 8f6f 	isb	sy
 80282f2:	f3bf 8f4f 	dsb	sy
 80282f6:	60bb      	str	r3, [r7, #8]
 80282f8:	e7fe      	b.n	80282f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80282fa:	f000 f87f 	bl	80283fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80282fe:	2100      	movs	r1, #0
 8028300:	6878      	ldr	r0, [r7, #4]
 8028302:	f000 ffdb 	bl	80292bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8028306:	f000 f887 	bl	8028418 <xTaskResumeAll>
 802830a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802830c:	68fb      	ldr	r3, [r7, #12]
 802830e:	2b00      	cmp	r3, #0
 8028310:	d107      	bne.n	8028322 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8028312:	4b07      	ldr	r3, [pc, #28]	; (8028330 <vTaskDelay+0x64>)
 8028314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028318:	601a      	str	r2, [r3, #0]
 802831a:	f3bf 8f4f 	dsb	sy
 802831e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8028322:	bf00      	nop
 8028324:	3710      	adds	r7, #16
 8028326:	46bd      	mov	sp, r7
 8028328:	bd80      	pop	{r7, pc}
 802832a:	bf00      	nop
 802832c:	24001fe4 	.word	0x24001fe4
 8028330:	e000ed04 	.word	0xe000ed04

08028334 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8028334:	b580      	push	{r7, lr}
 8028336:	b08a      	sub	sp, #40	; 0x28
 8028338:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 802833a:	2300      	movs	r3, #0
 802833c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 802833e:	2300      	movs	r3, #0
 8028340:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8028342:	463a      	mov	r2, r7
 8028344:	1d39      	adds	r1, r7, #4
 8028346:	f107 0308 	add.w	r3, r7, #8
 802834a:	4618      	mov	r0, r3
 802834c:	f7fe fcae 	bl	8026cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8028350:	6839      	ldr	r1, [r7, #0]
 8028352:	687b      	ldr	r3, [r7, #4]
 8028354:	68ba      	ldr	r2, [r7, #8]
 8028356:	9202      	str	r2, [sp, #8]
 8028358:	9301      	str	r3, [sp, #4]
 802835a:	2300      	movs	r3, #0
 802835c:	9300      	str	r3, [sp, #0]
 802835e:	2300      	movs	r3, #0
 8028360:	460a      	mov	r2, r1
 8028362:	4920      	ldr	r1, [pc, #128]	; (80283e4 <vTaskStartScheduler+0xb0>)
 8028364:	4820      	ldr	r0, [pc, #128]	; (80283e8 <vTaskStartScheduler+0xb4>)
 8028366:	f7ff fd99 	bl	8027e9c <xTaskCreateStatic>
 802836a:	4602      	mov	r2, r0
 802836c:	4b1f      	ldr	r3, [pc, #124]	; (80283ec <vTaskStartScheduler+0xb8>)
 802836e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8028370:	4b1e      	ldr	r3, [pc, #120]	; (80283ec <vTaskStartScheduler+0xb8>)
 8028372:	681b      	ldr	r3, [r3, #0]
 8028374:	2b00      	cmp	r3, #0
 8028376:	d002      	beq.n	802837e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8028378:	2301      	movs	r3, #1
 802837a:	617b      	str	r3, [r7, #20]
 802837c:	e001      	b.n	8028382 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 802837e:	2300      	movs	r3, #0
 8028380:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8028382:	697b      	ldr	r3, [r7, #20]
 8028384:	2b01      	cmp	r3, #1
 8028386:	d102      	bne.n	802838e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8028388:	f000 ffec 	bl	8029364 <xTimerCreateTimerTask>
 802838c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 802838e:	697b      	ldr	r3, [r7, #20]
 8028390:	2b01      	cmp	r3, #1
 8028392:	d115      	bne.n	80283c0 <vTaskStartScheduler+0x8c>
 8028394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028398:	f383 8811 	msr	BASEPRI, r3
 802839c:	f3bf 8f6f 	isb	sy
 80283a0:	f3bf 8f4f 	dsb	sy
 80283a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80283a6:	4b12      	ldr	r3, [pc, #72]	; (80283f0 <vTaskStartScheduler+0xbc>)
 80283a8:	f04f 32ff 	mov.w	r2, #4294967295
 80283ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80283ae:	4b11      	ldr	r3, [pc, #68]	; (80283f4 <vTaskStartScheduler+0xc0>)
 80283b0:	2201      	movs	r2, #1
 80283b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80283b4:	4b10      	ldr	r3, [pc, #64]	; (80283f8 <vTaskStartScheduler+0xc4>)
 80283b6:	2200      	movs	r2, #0
 80283b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80283ba:	f001 fba1 	bl	8029b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80283be:	e00d      	b.n	80283dc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80283c0:	697b      	ldr	r3, [r7, #20]
 80283c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80283c6:	d109      	bne.n	80283dc <vTaskStartScheduler+0xa8>
 80283c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80283cc:	f383 8811 	msr	BASEPRI, r3
 80283d0:	f3bf 8f6f 	isb	sy
 80283d4:	f3bf 8f4f 	dsb	sy
 80283d8:	60fb      	str	r3, [r7, #12]
 80283da:	e7fe      	b.n	80283da <vTaskStartScheduler+0xa6>
}
 80283dc:	bf00      	nop
 80283de:	3718      	adds	r7, #24
 80283e0:	46bd      	mov	sp, r7
 80283e2:	bd80      	pop	{r7, pc}
 80283e4:	0802e584 	.word	0x0802e584
 80283e8:	08028a21 	.word	0x08028a21
 80283ec:	24001fe0 	.word	0x24001fe0
 80283f0:	24001fdc 	.word	0x24001fdc
 80283f4:	24001fc8 	.word	0x24001fc8
 80283f8:	24001fc0 	.word	0x24001fc0

080283fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80283fc:	b480      	push	{r7}
 80283fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8028400:	4b04      	ldr	r3, [pc, #16]	; (8028414 <vTaskSuspendAll+0x18>)
 8028402:	681b      	ldr	r3, [r3, #0]
 8028404:	3301      	adds	r3, #1
 8028406:	4a03      	ldr	r2, [pc, #12]	; (8028414 <vTaskSuspendAll+0x18>)
 8028408:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 802840a:	bf00      	nop
 802840c:	46bd      	mov	sp, r7
 802840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028412:	4770      	bx	lr
 8028414:	24001fe4 	.word	0x24001fe4

08028418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8028418:	b580      	push	{r7, lr}
 802841a:	b084      	sub	sp, #16
 802841c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802841e:	2300      	movs	r3, #0
 8028420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8028422:	2300      	movs	r3, #0
 8028424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8028426:	4b41      	ldr	r3, [pc, #260]	; (802852c <xTaskResumeAll+0x114>)
 8028428:	681b      	ldr	r3, [r3, #0]
 802842a:	2b00      	cmp	r3, #0
 802842c:	d109      	bne.n	8028442 <xTaskResumeAll+0x2a>
 802842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028432:	f383 8811 	msr	BASEPRI, r3
 8028436:	f3bf 8f6f 	isb	sy
 802843a:	f3bf 8f4f 	dsb	sy
 802843e:	603b      	str	r3, [r7, #0]
 8028440:	e7fe      	b.n	8028440 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8028442:	f001 fbfb 	bl	8029c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8028446:	4b39      	ldr	r3, [pc, #228]	; (802852c <xTaskResumeAll+0x114>)
 8028448:	681b      	ldr	r3, [r3, #0]
 802844a:	3b01      	subs	r3, #1
 802844c:	4a37      	ldr	r2, [pc, #220]	; (802852c <xTaskResumeAll+0x114>)
 802844e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8028450:	4b36      	ldr	r3, [pc, #216]	; (802852c <xTaskResumeAll+0x114>)
 8028452:	681b      	ldr	r3, [r3, #0]
 8028454:	2b00      	cmp	r3, #0
 8028456:	d162      	bne.n	802851e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8028458:	4b35      	ldr	r3, [pc, #212]	; (8028530 <xTaskResumeAll+0x118>)
 802845a:	681b      	ldr	r3, [r3, #0]
 802845c:	2b00      	cmp	r3, #0
 802845e:	d05e      	beq.n	802851e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8028460:	e02f      	b.n	80284c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8028462:	4b34      	ldr	r3, [pc, #208]	; (8028534 <xTaskResumeAll+0x11c>)
 8028464:	68db      	ldr	r3, [r3, #12]
 8028466:	68db      	ldr	r3, [r3, #12]
 8028468:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802846a:	68fb      	ldr	r3, [r7, #12]
 802846c:	3318      	adds	r3, #24
 802846e:	4618      	mov	r0, r3
 8028470:	f7fe fcda 	bl	8026e28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8028474:	68fb      	ldr	r3, [r7, #12]
 8028476:	3304      	adds	r3, #4
 8028478:	4618      	mov	r0, r3
 802847a:	f7fe fcd5 	bl	8026e28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802847e:	68fb      	ldr	r3, [r7, #12]
 8028480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028482:	4b2d      	ldr	r3, [pc, #180]	; (8028538 <xTaskResumeAll+0x120>)
 8028484:	681b      	ldr	r3, [r3, #0]
 8028486:	429a      	cmp	r2, r3
 8028488:	d903      	bls.n	8028492 <xTaskResumeAll+0x7a>
 802848a:	68fb      	ldr	r3, [r7, #12]
 802848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802848e:	4a2a      	ldr	r2, [pc, #168]	; (8028538 <xTaskResumeAll+0x120>)
 8028490:	6013      	str	r3, [r2, #0]
 8028492:	68fb      	ldr	r3, [r7, #12]
 8028494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028496:	4613      	mov	r3, r2
 8028498:	009b      	lsls	r3, r3, #2
 802849a:	4413      	add	r3, r2
 802849c:	009b      	lsls	r3, r3, #2
 802849e:	4a27      	ldr	r2, [pc, #156]	; (802853c <xTaskResumeAll+0x124>)
 80284a0:	441a      	add	r2, r3
 80284a2:	68fb      	ldr	r3, [r7, #12]
 80284a4:	3304      	adds	r3, #4
 80284a6:	4619      	mov	r1, r3
 80284a8:	4610      	mov	r0, r2
 80284aa:	f7fe fc60 	bl	8026d6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80284ae:	68fb      	ldr	r3, [r7, #12]
 80284b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80284b2:	4b23      	ldr	r3, [pc, #140]	; (8028540 <xTaskResumeAll+0x128>)
 80284b4:	681b      	ldr	r3, [r3, #0]
 80284b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80284b8:	429a      	cmp	r2, r3
 80284ba:	d302      	bcc.n	80284c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80284bc:	4b21      	ldr	r3, [pc, #132]	; (8028544 <xTaskResumeAll+0x12c>)
 80284be:	2201      	movs	r2, #1
 80284c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80284c2:	4b1c      	ldr	r3, [pc, #112]	; (8028534 <xTaskResumeAll+0x11c>)
 80284c4:	681b      	ldr	r3, [r3, #0]
 80284c6:	2b00      	cmp	r3, #0
 80284c8:	d1cb      	bne.n	8028462 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80284ca:	68fb      	ldr	r3, [r7, #12]
 80284cc:	2b00      	cmp	r3, #0
 80284ce:	d001      	beq.n	80284d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80284d0:	f000 fb58 	bl	8028b84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80284d4:	4b1c      	ldr	r3, [pc, #112]	; (8028548 <xTaskResumeAll+0x130>)
 80284d6:	681b      	ldr	r3, [r3, #0]
 80284d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80284da:	687b      	ldr	r3, [r7, #4]
 80284dc:	2b00      	cmp	r3, #0
 80284de:	d010      	beq.n	8028502 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80284e0:	f000 f858 	bl	8028594 <xTaskIncrementTick>
 80284e4:	4603      	mov	r3, r0
 80284e6:	2b00      	cmp	r3, #0
 80284e8:	d002      	beq.n	80284f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80284ea:	4b16      	ldr	r3, [pc, #88]	; (8028544 <xTaskResumeAll+0x12c>)
 80284ec:	2201      	movs	r2, #1
 80284ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80284f0:	687b      	ldr	r3, [r7, #4]
 80284f2:	3b01      	subs	r3, #1
 80284f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80284f6:	687b      	ldr	r3, [r7, #4]
 80284f8:	2b00      	cmp	r3, #0
 80284fa:	d1f1      	bne.n	80284e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80284fc:	4b12      	ldr	r3, [pc, #72]	; (8028548 <xTaskResumeAll+0x130>)
 80284fe:	2200      	movs	r2, #0
 8028500:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8028502:	4b10      	ldr	r3, [pc, #64]	; (8028544 <xTaskResumeAll+0x12c>)
 8028504:	681b      	ldr	r3, [r3, #0]
 8028506:	2b00      	cmp	r3, #0
 8028508:	d009      	beq.n	802851e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 802850a:	2301      	movs	r3, #1
 802850c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802850e:	4b0f      	ldr	r3, [pc, #60]	; (802854c <xTaskResumeAll+0x134>)
 8028510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028514:	601a      	str	r2, [r3, #0]
 8028516:	f3bf 8f4f 	dsb	sy
 802851a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802851e:	f001 fbbb 	bl	8029c98 <vPortExitCritical>

	return xAlreadyYielded;
 8028522:	68bb      	ldr	r3, [r7, #8]
}
 8028524:	4618      	mov	r0, r3
 8028526:	3710      	adds	r7, #16
 8028528:	46bd      	mov	sp, r7
 802852a:	bd80      	pop	{r7, pc}
 802852c:	24001fe4 	.word	0x24001fe4
 8028530:	24001fbc 	.word	0x24001fbc
 8028534:	24001f7c 	.word	0x24001f7c
 8028538:	24001fc4 	.word	0x24001fc4
 802853c:	24001aec 	.word	0x24001aec
 8028540:	24001ae8 	.word	0x24001ae8
 8028544:	24001fd0 	.word	0x24001fd0
 8028548:	24001fcc 	.word	0x24001fcc
 802854c:	e000ed04 	.word	0xe000ed04

08028550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8028550:	b480      	push	{r7}
 8028552:	b083      	sub	sp, #12
 8028554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8028556:	4b05      	ldr	r3, [pc, #20]	; (802856c <xTaskGetTickCount+0x1c>)
 8028558:	681b      	ldr	r3, [r3, #0]
 802855a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 802855c:	687b      	ldr	r3, [r7, #4]
}
 802855e:	4618      	mov	r0, r3
 8028560:	370c      	adds	r7, #12
 8028562:	46bd      	mov	sp, r7
 8028564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028568:	4770      	bx	lr
 802856a:	bf00      	nop
 802856c:	24001fc0 	.word	0x24001fc0

08028570 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8028570:	b580      	push	{r7, lr}
 8028572:	b082      	sub	sp, #8
 8028574:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8028576:	f001 fc3d 	bl	8029df4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 802857a:	2300      	movs	r3, #0
 802857c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 802857e:	4b04      	ldr	r3, [pc, #16]	; (8028590 <xTaskGetTickCountFromISR+0x20>)
 8028580:	681b      	ldr	r3, [r3, #0]
 8028582:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8028584:	683b      	ldr	r3, [r7, #0]
}
 8028586:	4618      	mov	r0, r3
 8028588:	3708      	adds	r7, #8
 802858a:	46bd      	mov	sp, r7
 802858c:	bd80      	pop	{r7, pc}
 802858e:	bf00      	nop
 8028590:	24001fc0 	.word	0x24001fc0

08028594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8028594:	b580      	push	{r7, lr}
 8028596:	b086      	sub	sp, #24
 8028598:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 802859a:	2300      	movs	r3, #0
 802859c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802859e:	4b4e      	ldr	r3, [pc, #312]	; (80286d8 <xTaskIncrementTick+0x144>)
 80285a0:	681b      	ldr	r3, [r3, #0]
 80285a2:	2b00      	cmp	r3, #0
 80285a4:	f040 8088 	bne.w	80286b8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80285a8:	4b4c      	ldr	r3, [pc, #304]	; (80286dc <xTaskIncrementTick+0x148>)
 80285aa:	681b      	ldr	r3, [r3, #0]
 80285ac:	3301      	adds	r3, #1
 80285ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80285b0:	4a4a      	ldr	r2, [pc, #296]	; (80286dc <xTaskIncrementTick+0x148>)
 80285b2:	693b      	ldr	r3, [r7, #16]
 80285b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80285b6:	693b      	ldr	r3, [r7, #16]
 80285b8:	2b00      	cmp	r3, #0
 80285ba:	d11f      	bne.n	80285fc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80285bc:	4b48      	ldr	r3, [pc, #288]	; (80286e0 <xTaskIncrementTick+0x14c>)
 80285be:	681b      	ldr	r3, [r3, #0]
 80285c0:	681b      	ldr	r3, [r3, #0]
 80285c2:	2b00      	cmp	r3, #0
 80285c4:	d009      	beq.n	80285da <xTaskIncrementTick+0x46>
 80285c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80285ca:	f383 8811 	msr	BASEPRI, r3
 80285ce:	f3bf 8f6f 	isb	sy
 80285d2:	f3bf 8f4f 	dsb	sy
 80285d6:	603b      	str	r3, [r7, #0]
 80285d8:	e7fe      	b.n	80285d8 <xTaskIncrementTick+0x44>
 80285da:	4b41      	ldr	r3, [pc, #260]	; (80286e0 <xTaskIncrementTick+0x14c>)
 80285dc:	681b      	ldr	r3, [r3, #0]
 80285de:	60fb      	str	r3, [r7, #12]
 80285e0:	4b40      	ldr	r3, [pc, #256]	; (80286e4 <xTaskIncrementTick+0x150>)
 80285e2:	681b      	ldr	r3, [r3, #0]
 80285e4:	4a3e      	ldr	r2, [pc, #248]	; (80286e0 <xTaskIncrementTick+0x14c>)
 80285e6:	6013      	str	r3, [r2, #0]
 80285e8:	4a3e      	ldr	r2, [pc, #248]	; (80286e4 <xTaskIncrementTick+0x150>)
 80285ea:	68fb      	ldr	r3, [r7, #12]
 80285ec:	6013      	str	r3, [r2, #0]
 80285ee:	4b3e      	ldr	r3, [pc, #248]	; (80286e8 <xTaskIncrementTick+0x154>)
 80285f0:	681b      	ldr	r3, [r3, #0]
 80285f2:	3301      	adds	r3, #1
 80285f4:	4a3c      	ldr	r2, [pc, #240]	; (80286e8 <xTaskIncrementTick+0x154>)
 80285f6:	6013      	str	r3, [r2, #0]
 80285f8:	f000 fac4 	bl	8028b84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80285fc:	4b3b      	ldr	r3, [pc, #236]	; (80286ec <xTaskIncrementTick+0x158>)
 80285fe:	681b      	ldr	r3, [r3, #0]
 8028600:	693a      	ldr	r2, [r7, #16]
 8028602:	429a      	cmp	r2, r3
 8028604:	d349      	bcc.n	802869a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8028606:	4b36      	ldr	r3, [pc, #216]	; (80286e0 <xTaskIncrementTick+0x14c>)
 8028608:	681b      	ldr	r3, [r3, #0]
 802860a:	681b      	ldr	r3, [r3, #0]
 802860c:	2b00      	cmp	r3, #0
 802860e:	d104      	bne.n	802861a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8028610:	4b36      	ldr	r3, [pc, #216]	; (80286ec <xTaskIncrementTick+0x158>)
 8028612:	f04f 32ff 	mov.w	r2, #4294967295
 8028616:	601a      	str	r2, [r3, #0]
					break;
 8028618:	e03f      	b.n	802869a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802861a:	4b31      	ldr	r3, [pc, #196]	; (80286e0 <xTaskIncrementTick+0x14c>)
 802861c:	681b      	ldr	r3, [r3, #0]
 802861e:	68db      	ldr	r3, [r3, #12]
 8028620:	68db      	ldr	r3, [r3, #12]
 8028622:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8028624:	68bb      	ldr	r3, [r7, #8]
 8028626:	685b      	ldr	r3, [r3, #4]
 8028628:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 802862a:	693a      	ldr	r2, [r7, #16]
 802862c:	687b      	ldr	r3, [r7, #4]
 802862e:	429a      	cmp	r2, r3
 8028630:	d203      	bcs.n	802863a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8028632:	4a2e      	ldr	r2, [pc, #184]	; (80286ec <xTaskIncrementTick+0x158>)
 8028634:	687b      	ldr	r3, [r7, #4]
 8028636:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8028638:	e02f      	b.n	802869a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802863a:	68bb      	ldr	r3, [r7, #8]
 802863c:	3304      	adds	r3, #4
 802863e:	4618      	mov	r0, r3
 8028640:	f7fe fbf2 	bl	8026e28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8028644:	68bb      	ldr	r3, [r7, #8]
 8028646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028648:	2b00      	cmp	r3, #0
 802864a:	d004      	beq.n	8028656 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802864c:	68bb      	ldr	r3, [r7, #8]
 802864e:	3318      	adds	r3, #24
 8028650:	4618      	mov	r0, r3
 8028652:	f7fe fbe9 	bl	8026e28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8028656:	68bb      	ldr	r3, [r7, #8]
 8028658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802865a:	4b25      	ldr	r3, [pc, #148]	; (80286f0 <xTaskIncrementTick+0x15c>)
 802865c:	681b      	ldr	r3, [r3, #0]
 802865e:	429a      	cmp	r2, r3
 8028660:	d903      	bls.n	802866a <xTaskIncrementTick+0xd6>
 8028662:	68bb      	ldr	r3, [r7, #8]
 8028664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028666:	4a22      	ldr	r2, [pc, #136]	; (80286f0 <xTaskIncrementTick+0x15c>)
 8028668:	6013      	str	r3, [r2, #0]
 802866a:	68bb      	ldr	r3, [r7, #8]
 802866c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802866e:	4613      	mov	r3, r2
 8028670:	009b      	lsls	r3, r3, #2
 8028672:	4413      	add	r3, r2
 8028674:	009b      	lsls	r3, r3, #2
 8028676:	4a1f      	ldr	r2, [pc, #124]	; (80286f4 <xTaskIncrementTick+0x160>)
 8028678:	441a      	add	r2, r3
 802867a:	68bb      	ldr	r3, [r7, #8]
 802867c:	3304      	adds	r3, #4
 802867e:	4619      	mov	r1, r3
 8028680:	4610      	mov	r0, r2
 8028682:	f7fe fb74 	bl	8026d6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8028686:	68bb      	ldr	r3, [r7, #8]
 8028688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802868a:	4b1b      	ldr	r3, [pc, #108]	; (80286f8 <xTaskIncrementTick+0x164>)
 802868c:	681b      	ldr	r3, [r3, #0]
 802868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028690:	429a      	cmp	r2, r3
 8028692:	d3b8      	bcc.n	8028606 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8028694:	2301      	movs	r3, #1
 8028696:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8028698:	e7b5      	b.n	8028606 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 802869a:	4b17      	ldr	r3, [pc, #92]	; (80286f8 <xTaskIncrementTick+0x164>)
 802869c:	681b      	ldr	r3, [r3, #0]
 802869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80286a0:	4914      	ldr	r1, [pc, #80]	; (80286f4 <xTaskIncrementTick+0x160>)
 80286a2:	4613      	mov	r3, r2
 80286a4:	009b      	lsls	r3, r3, #2
 80286a6:	4413      	add	r3, r2
 80286a8:	009b      	lsls	r3, r3, #2
 80286aa:	440b      	add	r3, r1
 80286ac:	681b      	ldr	r3, [r3, #0]
 80286ae:	2b01      	cmp	r3, #1
 80286b0:	d907      	bls.n	80286c2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80286b2:	2301      	movs	r3, #1
 80286b4:	617b      	str	r3, [r7, #20]
 80286b6:	e004      	b.n	80286c2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80286b8:	4b10      	ldr	r3, [pc, #64]	; (80286fc <xTaskIncrementTick+0x168>)
 80286ba:	681b      	ldr	r3, [r3, #0]
 80286bc:	3301      	adds	r3, #1
 80286be:	4a0f      	ldr	r2, [pc, #60]	; (80286fc <xTaskIncrementTick+0x168>)
 80286c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80286c2:	4b0f      	ldr	r3, [pc, #60]	; (8028700 <xTaskIncrementTick+0x16c>)
 80286c4:	681b      	ldr	r3, [r3, #0]
 80286c6:	2b00      	cmp	r3, #0
 80286c8:	d001      	beq.n	80286ce <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80286ca:	2301      	movs	r3, #1
 80286cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80286ce:	697b      	ldr	r3, [r7, #20]
}
 80286d0:	4618      	mov	r0, r3
 80286d2:	3718      	adds	r7, #24
 80286d4:	46bd      	mov	sp, r7
 80286d6:	bd80      	pop	{r7, pc}
 80286d8:	24001fe4 	.word	0x24001fe4
 80286dc:	24001fc0 	.word	0x24001fc0
 80286e0:	24001f74 	.word	0x24001f74
 80286e4:	24001f78 	.word	0x24001f78
 80286e8:	24001fd4 	.word	0x24001fd4
 80286ec:	24001fdc 	.word	0x24001fdc
 80286f0:	24001fc4 	.word	0x24001fc4
 80286f4:	24001aec 	.word	0x24001aec
 80286f8:	24001ae8 	.word	0x24001ae8
 80286fc:	24001fcc 	.word	0x24001fcc
 8028700:	24001fd0 	.word	0x24001fd0

08028704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8028704:	b480      	push	{r7}
 8028706:	b085      	sub	sp, #20
 8028708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 802870a:	4b27      	ldr	r3, [pc, #156]	; (80287a8 <vTaskSwitchContext+0xa4>)
 802870c:	681b      	ldr	r3, [r3, #0]
 802870e:	2b00      	cmp	r3, #0
 8028710:	d003      	beq.n	802871a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8028712:	4b26      	ldr	r3, [pc, #152]	; (80287ac <vTaskSwitchContext+0xa8>)
 8028714:	2201      	movs	r2, #1
 8028716:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8028718:	e040      	b.n	802879c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 802871a:	4b24      	ldr	r3, [pc, #144]	; (80287ac <vTaskSwitchContext+0xa8>)
 802871c:	2200      	movs	r2, #0
 802871e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8028720:	4b23      	ldr	r3, [pc, #140]	; (80287b0 <vTaskSwitchContext+0xac>)
 8028722:	681b      	ldr	r3, [r3, #0]
 8028724:	60fb      	str	r3, [r7, #12]
 8028726:	e00f      	b.n	8028748 <vTaskSwitchContext+0x44>
 8028728:	68fb      	ldr	r3, [r7, #12]
 802872a:	2b00      	cmp	r3, #0
 802872c:	d109      	bne.n	8028742 <vTaskSwitchContext+0x3e>
 802872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028732:	f383 8811 	msr	BASEPRI, r3
 8028736:	f3bf 8f6f 	isb	sy
 802873a:	f3bf 8f4f 	dsb	sy
 802873e:	607b      	str	r3, [r7, #4]
 8028740:	e7fe      	b.n	8028740 <vTaskSwitchContext+0x3c>
 8028742:	68fb      	ldr	r3, [r7, #12]
 8028744:	3b01      	subs	r3, #1
 8028746:	60fb      	str	r3, [r7, #12]
 8028748:	491a      	ldr	r1, [pc, #104]	; (80287b4 <vTaskSwitchContext+0xb0>)
 802874a:	68fa      	ldr	r2, [r7, #12]
 802874c:	4613      	mov	r3, r2
 802874e:	009b      	lsls	r3, r3, #2
 8028750:	4413      	add	r3, r2
 8028752:	009b      	lsls	r3, r3, #2
 8028754:	440b      	add	r3, r1
 8028756:	681b      	ldr	r3, [r3, #0]
 8028758:	2b00      	cmp	r3, #0
 802875a:	d0e5      	beq.n	8028728 <vTaskSwitchContext+0x24>
 802875c:	68fa      	ldr	r2, [r7, #12]
 802875e:	4613      	mov	r3, r2
 8028760:	009b      	lsls	r3, r3, #2
 8028762:	4413      	add	r3, r2
 8028764:	009b      	lsls	r3, r3, #2
 8028766:	4a13      	ldr	r2, [pc, #76]	; (80287b4 <vTaskSwitchContext+0xb0>)
 8028768:	4413      	add	r3, r2
 802876a:	60bb      	str	r3, [r7, #8]
 802876c:	68bb      	ldr	r3, [r7, #8]
 802876e:	685b      	ldr	r3, [r3, #4]
 8028770:	685a      	ldr	r2, [r3, #4]
 8028772:	68bb      	ldr	r3, [r7, #8]
 8028774:	605a      	str	r2, [r3, #4]
 8028776:	68bb      	ldr	r3, [r7, #8]
 8028778:	685a      	ldr	r2, [r3, #4]
 802877a:	68bb      	ldr	r3, [r7, #8]
 802877c:	3308      	adds	r3, #8
 802877e:	429a      	cmp	r2, r3
 8028780:	d104      	bne.n	802878c <vTaskSwitchContext+0x88>
 8028782:	68bb      	ldr	r3, [r7, #8]
 8028784:	685b      	ldr	r3, [r3, #4]
 8028786:	685a      	ldr	r2, [r3, #4]
 8028788:	68bb      	ldr	r3, [r7, #8]
 802878a:	605a      	str	r2, [r3, #4]
 802878c:	68bb      	ldr	r3, [r7, #8]
 802878e:	685b      	ldr	r3, [r3, #4]
 8028790:	68db      	ldr	r3, [r3, #12]
 8028792:	4a09      	ldr	r2, [pc, #36]	; (80287b8 <vTaskSwitchContext+0xb4>)
 8028794:	6013      	str	r3, [r2, #0]
 8028796:	4a06      	ldr	r2, [pc, #24]	; (80287b0 <vTaskSwitchContext+0xac>)
 8028798:	68fb      	ldr	r3, [r7, #12]
 802879a:	6013      	str	r3, [r2, #0]
}
 802879c:	bf00      	nop
 802879e:	3714      	adds	r7, #20
 80287a0:	46bd      	mov	sp, r7
 80287a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287a6:	4770      	bx	lr
 80287a8:	24001fe4 	.word	0x24001fe4
 80287ac:	24001fd0 	.word	0x24001fd0
 80287b0:	24001fc4 	.word	0x24001fc4
 80287b4:	24001aec 	.word	0x24001aec
 80287b8:	24001ae8 	.word	0x24001ae8

080287bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80287bc:	b580      	push	{r7, lr}
 80287be:	b084      	sub	sp, #16
 80287c0:	af00      	add	r7, sp, #0
 80287c2:	6078      	str	r0, [r7, #4]
 80287c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80287c6:	687b      	ldr	r3, [r7, #4]
 80287c8:	2b00      	cmp	r3, #0
 80287ca:	d109      	bne.n	80287e0 <vTaskPlaceOnEventList+0x24>
 80287cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80287d0:	f383 8811 	msr	BASEPRI, r3
 80287d4:	f3bf 8f6f 	isb	sy
 80287d8:	f3bf 8f4f 	dsb	sy
 80287dc:	60fb      	str	r3, [r7, #12]
 80287de:	e7fe      	b.n	80287de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80287e0:	4b07      	ldr	r3, [pc, #28]	; (8028800 <vTaskPlaceOnEventList+0x44>)
 80287e2:	681b      	ldr	r3, [r3, #0]
 80287e4:	3318      	adds	r3, #24
 80287e6:	4619      	mov	r1, r3
 80287e8:	6878      	ldr	r0, [r7, #4]
 80287ea:	f7fe fae4 	bl	8026db6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80287ee:	2101      	movs	r1, #1
 80287f0:	6838      	ldr	r0, [r7, #0]
 80287f2:	f000 fd63 	bl	80292bc <prvAddCurrentTaskToDelayedList>
}
 80287f6:	bf00      	nop
 80287f8:	3710      	adds	r7, #16
 80287fa:	46bd      	mov	sp, r7
 80287fc:	bd80      	pop	{r7, pc}
 80287fe:	bf00      	nop
 8028800:	24001ae8 	.word	0x24001ae8

08028804 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8028804:	b580      	push	{r7, lr}
 8028806:	b086      	sub	sp, #24
 8028808:	af00      	add	r7, sp, #0
 802880a:	60f8      	str	r0, [r7, #12]
 802880c:	60b9      	str	r1, [r7, #8]
 802880e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8028810:	68fb      	ldr	r3, [r7, #12]
 8028812:	2b00      	cmp	r3, #0
 8028814:	d109      	bne.n	802882a <vTaskPlaceOnEventListRestricted+0x26>
 8028816:	f04f 0350 	mov.w	r3, #80	; 0x50
 802881a:	f383 8811 	msr	BASEPRI, r3
 802881e:	f3bf 8f6f 	isb	sy
 8028822:	f3bf 8f4f 	dsb	sy
 8028826:	617b      	str	r3, [r7, #20]
 8028828:	e7fe      	b.n	8028828 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802882a:	4b0a      	ldr	r3, [pc, #40]	; (8028854 <vTaskPlaceOnEventListRestricted+0x50>)
 802882c:	681b      	ldr	r3, [r3, #0]
 802882e:	3318      	adds	r3, #24
 8028830:	4619      	mov	r1, r3
 8028832:	68f8      	ldr	r0, [r7, #12]
 8028834:	f7fe fa9b 	bl	8026d6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8028838:	687b      	ldr	r3, [r7, #4]
 802883a:	2b00      	cmp	r3, #0
 802883c:	d002      	beq.n	8028844 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 802883e:	f04f 33ff 	mov.w	r3, #4294967295
 8028842:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8028844:	6879      	ldr	r1, [r7, #4]
 8028846:	68b8      	ldr	r0, [r7, #8]
 8028848:	f000 fd38 	bl	80292bc <prvAddCurrentTaskToDelayedList>
	}
 802884c:	bf00      	nop
 802884e:	3718      	adds	r7, #24
 8028850:	46bd      	mov	sp, r7
 8028852:	bd80      	pop	{r7, pc}
 8028854:	24001ae8 	.word	0x24001ae8

08028858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8028858:	b580      	push	{r7, lr}
 802885a:	b086      	sub	sp, #24
 802885c:	af00      	add	r7, sp, #0
 802885e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8028860:	687b      	ldr	r3, [r7, #4]
 8028862:	68db      	ldr	r3, [r3, #12]
 8028864:	68db      	ldr	r3, [r3, #12]
 8028866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8028868:	693b      	ldr	r3, [r7, #16]
 802886a:	2b00      	cmp	r3, #0
 802886c:	d109      	bne.n	8028882 <xTaskRemoveFromEventList+0x2a>
 802886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028872:	f383 8811 	msr	BASEPRI, r3
 8028876:	f3bf 8f6f 	isb	sy
 802887a:	f3bf 8f4f 	dsb	sy
 802887e:	60fb      	str	r3, [r7, #12]
 8028880:	e7fe      	b.n	8028880 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8028882:	693b      	ldr	r3, [r7, #16]
 8028884:	3318      	adds	r3, #24
 8028886:	4618      	mov	r0, r3
 8028888:	f7fe face 	bl	8026e28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802888c:	4b1d      	ldr	r3, [pc, #116]	; (8028904 <xTaskRemoveFromEventList+0xac>)
 802888e:	681b      	ldr	r3, [r3, #0]
 8028890:	2b00      	cmp	r3, #0
 8028892:	d11d      	bne.n	80288d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8028894:	693b      	ldr	r3, [r7, #16]
 8028896:	3304      	adds	r3, #4
 8028898:	4618      	mov	r0, r3
 802889a:	f7fe fac5 	bl	8026e28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802889e:	693b      	ldr	r3, [r7, #16]
 80288a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80288a2:	4b19      	ldr	r3, [pc, #100]	; (8028908 <xTaskRemoveFromEventList+0xb0>)
 80288a4:	681b      	ldr	r3, [r3, #0]
 80288a6:	429a      	cmp	r2, r3
 80288a8:	d903      	bls.n	80288b2 <xTaskRemoveFromEventList+0x5a>
 80288aa:	693b      	ldr	r3, [r7, #16]
 80288ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80288ae:	4a16      	ldr	r2, [pc, #88]	; (8028908 <xTaskRemoveFromEventList+0xb0>)
 80288b0:	6013      	str	r3, [r2, #0]
 80288b2:	693b      	ldr	r3, [r7, #16]
 80288b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80288b6:	4613      	mov	r3, r2
 80288b8:	009b      	lsls	r3, r3, #2
 80288ba:	4413      	add	r3, r2
 80288bc:	009b      	lsls	r3, r3, #2
 80288be:	4a13      	ldr	r2, [pc, #76]	; (802890c <xTaskRemoveFromEventList+0xb4>)
 80288c0:	441a      	add	r2, r3
 80288c2:	693b      	ldr	r3, [r7, #16]
 80288c4:	3304      	adds	r3, #4
 80288c6:	4619      	mov	r1, r3
 80288c8:	4610      	mov	r0, r2
 80288ca:	f7fe fa50 	bl	8026d6e <vListInsertEnd>
 80288ce:	e005      	b.n	80288dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80288d0:	693b      	ldr	r3, [r7, #16]
 80288d2:	3318      	adds	r3, #24
 80288d4:	4619      	mov	r1, r3
 80288d6:	480e      	ldr	r0, [pc, #56]	; (8028910 <xTaskRemoveFromEventList+0xb8>)
 80288d8:	f7fe fa49 	bl	8026d6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80288dc:	693b      	ldr	r3, [r7, #16]
 80288de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80288e0:	4b0c      	ldr	r3, [pc, #48]	; (8028914 <xTaskRemoveFromEventList+0xbc>)
 80288e2:	681b      	ldr	r3, [r3, #0]
 80288e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80288e6:	429a      	cmp	r2, r3
 80288e8:	d905      	bls.n	80288f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80288ea:	2301      	movs	r3, #1
 80288ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80288ee:	4b0a      	ldr	r3, [pc, #40]	; (8028918 <xTaskRemoveFromEventList+0xc0>)
 80288f0:	2201      	movs	r2, #1
 80288f2:	601a      	str	r2, [r3, #0]
 80288f4:	e001      	b.n	80288fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80288f6:	2300      	movs	r3, #0
 80288f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80288fa:	697b      	ldr	r3, [r7, #20]
}
 80288fc:	4618      	mov	r0, r3
 80288fe:	3718      	adds	r7, #24
 8028900:	46bd      	mov	sp, r7
 8028902:	bd80      	pop	{r7, pc}
 8028904:	24001fe4 	.word	0x24001fe4
 8028908:	24001fc4 	.word	0x24001fc4
 802890c:	24001aec 	.word	0x24001aec
 8028910:	24001f7c 	.word	0x24001f7c
 8028914:	24001ae8 	.word	0x24001ae8
 8028918:	24001fd0 	.word	0x24001fd0

0802891c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 802891c:	b480      	push	{r7}
 802891e:	b083      	sub	sp, #12
 8028920:	af00      	add	r7, sp, #0
 8028922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8028924:	4b06      	ldr	r3, [pc, #24]	; (8028940 <vTaskInternalSetTimeOutState+0x24>)
 8028926:	681a      	ldr	r2, [r3, #0]
 8028928:	687b      	ldr	r3, [r7, #4]
 802892a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 802892c:	4b05      	ldr	r3, [pc, #20]	; (8028944 <vTaskInternalSetTimeOutState+0x28>)
 802892e:	681a      	ldr	r2, [r3, #0]
 8028930:	687b      	ldr	r3, [r7, #4]
 8028932:	605a      	str	r2, [r3, #4]
}
 8028934:	bf00      	nop
 8028936:	370c      	adds	r7, #12
 8028938:	46bd      	mov	sp, r7
 802893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802893e:	4770      	bx	lr
 8028940:	24001fd4 	.word	0x24001fd4
 8028944:	24001fc0 	.word	0x24001fc0

08028948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8028948:	b580      	push	{r7, lr}
 802894a:	b088      	sub	sp, #32
 802894c:	af00      	add	r7, sp, #0
 802894e:	6078      	str	r0, [r7, #4]
 8028950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8028952:	687b      	ldr	r3, [r7, #4]
 8028954:	2b00      	cmp	r3, #0
 8028956:	d109      	bne.n	802896c <xTaskCheckForTimeOut+0x24>
 8028958:	f04f 0350 	mov.w	r3, #80	; 0x50
 802895c:	f383 8811 	msr	BASEPRI, r3
 8028960:	f3bf 8f6f 	isb	sy
 8028964:	f3bf 8f4f 	dsb	sy
 8028968:	613b      	str	r3, [r7, #16]
 802896a:	e7fe      	b.n	802896a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 802896c:	683b      	ldr	r3, [r7, #0]
 802896e:	2b00      	cmp	r3, #0
 8028970:	d109      	bne.n	8028986 <xTaskCheckForTimeOut+0x3e>
 8028972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028976:	f383 8811 	msr	BASEPRI, r3
 802897a:	f3bf 8f6f 	isb	sy
 802897e:	f3bf 8f4f 	dsb	sy
 8028982:	60fb      	str	r3, [r7, #12]
 8028984:	e7fe      	b.n	8028984 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8028986:	f001 f959 	bl	8029c3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802898a:	4b1d      	ldr	r3, [pc, #116]	; (8028a00 <xTaskCheckForTimeOut+0xb8>)
 802898c:	681b      	ldr	r3, [r3, #0]
 802898e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8028990:	687b      	ldr	r3, [r7, #4]
 8028992:	685b      	ldr	r3, [r3, #4]
 8028994:	69ba      	ldr	r2, [r7, #24]
 8028996:	1ad3      	subs	r3, r2, r3
 8028998:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802899a:	683b      	ldr	r3, [r7, #0]
 802899c:	681b      	ldr	r3, [r3, #0]
 802899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80289a2:	d102      	bne.n	80289aa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80289a4:	2300      	movs	r3, #0
 80289a6:	61fb      	str	r3, [r7, #28]
 80289a8:	e023      	b.n	80289f2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80289aa:	687b      	ldr	r3, [r7, #4]
 80289ac:	681a      	ldr	r2, [r3, #0]
 80289ae:	4b15      	ldr	r3, [pc, #84]	; (8028a04 <xTaskCheckForTimeOut+0xbc>)
 80289b0:	681b      	ldr	r3, [r3, #0]
 80289b2:	429a      	cmp	r2, r3
 80289b4:	d007      	beq.n	80289c6 <xTaskCheckForTimeOut+0x7e>
 80289b6:	687b      	ldr	r3, [r7, #4]
 80289b8:	685b      	ldr	r3, [r3, #4]
 80289ba:	69ba      	ldr	r2, [r7, #24]
 80289bc:	429a      	cmp	r2, r3
 80289be:	d302      	bcc.n	80289c6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80289c0:	2301      	movs	r3, #1
 80289c2:	61fb      	str	r3, [r7, #28]
 80289c4:	e015      	b.n	80289f2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80289c6:	683b      	ldr	r3, [r7, #0]
 80289c8:	681b      	ldr	r3, [r3, #0]
 80289ca:	697a      	ldr	r2, [r7, #20]
 80289cc:	429a      	cmp	r2, r3
 80289ce:	d20b      	bcs.n	80289e8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80289d0:	683b      	ldr	r3, [r7, #0]
 80289d2:	681a      	ldr	r2, [r3, #0]
 80289d4:	697b      	ldr	r3, [r7, #20]
 80289d6:	1ad2      	subs	r2, r2, r3
 80289d8:	683b      	ldr	r3, [r7, #0]
 80289da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80289dc:	6878      	ldr	r0, [r7, #4]
 80289de:	f7ff ff9d 	bl	802891c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80289e2:	2300      	movs	r3, #0
 80289e4:	61fb      	str	r3, [r7, #28]
 80289e6:	e004      	b.n	80289f2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80289e8:	683b      	ldr	r3, [r7, #0]
 80289ea:	2200      	movs	r2, #0
 80289ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80289ee:	2301      	movs	r3, #1
 80289f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80289f2:	f001 f951 	bl	8029c98 <vPortExitCritical>

	return xReturn;
 80289f6:	69fb      	ldr	r3, [r7, #28]
}
 80289f8:	4618      	mov	r0, r3
 80289fa:	3720      	adds	r7, #32
 80289fc:	46bd      	mov	sp, r7
 80289fe:	bd80      	pop	{r7, pc}
 8028a00:	24001fc0 	.word	0x24001fc0
 8028a04:	24001fd4 	.word	0x24001fd4

08028a08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8028a08:	b480      	push	{r7}
 8028a0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8028a0c:	4b03      	ldr	r3, [pc, #12]	; (8028a1c <vTaskMissedYield+0x14>)
 8028a0e:	2201      	movs	r2, #1
 8028a10:	601a      	str	r2, [r3, #0]
}
 8028a12:	bf00      	nop
 8028a14:	46bd      	mov	sp, r7
 8028a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a1a:	4770      	bx	lr
 8028a1c:	24001fd0 	.word	0x24001fd0

08028a20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8028a20:	b580      	push	{r7, lr}
 8028a22:	b082      	sub	sp, #8
 8028a24:	af00      	add	r7, sp, #0
 8028a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8028a28:	f000 f852 	bl	8028ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8028a2c:	4b06      	ldr	r3, [pc, #24]	; (8028a48 <prvIdleTask+0x28>)
 8028a2e:	681b      	ldr	r3, [r3, #0]
 8028a30:	2b01      	cmp	r3, #1
 8028a32:	d9f9      	bls.n	8028a28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8028a34:	4b05      	ldr	r3, [pc, #20]	; (8028a4c <prvIdleTask+0x2c>)
 8028a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028a3a:	601a      	str	r2, [r3, #0]
 8028a3c:	f3bf 8f4f 	dsb	sy
 8028a40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8028a44:	e7f0      	b.n	8028a28 <prvIdleTask+0x8>
 8028a46:	bf00      	nop
 8028a48:	24001aec 	.word	0x24001aec
 8028a4c:	e000ed04 	.word	0xe000ed04

08028a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8028a50:	b580      	push	{r7, lr}
 8028a52:	b082      	sub	sp, #8
 8028a54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8028a56:	2300      	movs	r3, #0
 8028a58:	607b      	str	r3, [r7, #4]
 8028a5a:	e00c      	b.n	8028a76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8028a5c:	687a      	ldr	r2, [r7, #4]
 8028a5e:	4613      	mov	r3, r2
 8028a60:	009b      	lsls	r3, r3, #2
 8028a62:	4413      	add	r3, r2
 8028a64:	009b      	lsls	r3, r3, #2
 8028a66:	4a12      	ldr	r2, [pc, #72]	; (8028ab0 <prvInitialiseTaskLists+0x60>)
 8028a68:	4413      	add	r3, r2
 8028a6a:	4618      	mov	r0, r3
 8028a6c:	f7fe f952 	bl	8026d14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8028a70:	687b      	ldr	r3, [r7, #4]
 8028a72:	3301      	adds	r3, #1
 8028a74:	607b      	str	r3, [r7, #4]
 8028a76:	687b      	ldr	r3, [r7, #4]
 8028a78:	2b37      	cmp	r3, #55	; 0x37
 8028a7a:	d9ef      	bls.n	8028a5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8028a7c:	480d      	ldr	r0, [pc, #52]	; (8028ab4 <prvInitialiseTaskLists+0x64>)
 8028a7e:	f7fe f949 	bl	8026d14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8028a82:	480d      	ldr	r0, [pc, #52]	; (8028ab8 <prvInitialiseTaskLists+0x68>)
 8028a84:	f7fe f946 	bl	8026d14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8028a88:	480c      	ldr	r0, [pc, #48]	; (8028abc <prvInitialiseTaskLists+0x6c>)
 8028a8a:	f7fe f943 	bl	8026d14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8028a8e:	480c      	ldr	r0, [pc, #48]	; (8028ac0 <prvInitialiseTaskLists+0x70>)
 8028a90:	f7fe f940 	bl	8026d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8028a94:	480b      	ldr	r0, [pc, #44]	; (8028ac4 <prvInitialiseTaskLists+0x74>)
 8028a96:	f7fe f93d 	bl	8026d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8028a9a:	4b0b      	ldr	r3, [pc, #44]	; (8028ac8 <prvInitialiseTaskLists+0x78>)
 8028a9c:	4a05      	ldr	r2, [pc, #20]	; (8028ab4 <prvInitialiseTaskLists+0x64>)
 8028a9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8028aa0:	4b0a      	ldr	r3, [pc, #40]	; (8028acc <prvInitialiseTaskLists+0x7c>)
 8028aa2:	4a05      	ldr	r2, [pc, #20]	; (8028ab8 <prvInitialiseTaskLists+0x68>)
 8028aa4:	601a      	str	r2, [r3, #0]
}
 8028aa6:	bf00      	nop
 8028aa8:	3708      	adds	r7, #8
 8028aaa:	46bd      	mov	sp, r7
 8028aac:	bd80      	pop	{r7, pc}
 8028aae:	bf00      	nop
 8028ab0:	24001aec 	.word	0x24001aec
 8028ab4:	24001f4c 	.word	0x24001f4c
 8028ab8:	24001f60 	.word	0x24001f60
 8028abc:	24001f7c 	.word	0x24001f7c
 8028ac0:	24001f90 	.word	0x24001f90
 8028ac4:	24001fa8 	.word	0x24001fa8
 8028ac8:	24001f74 	.word	0x24001f74
 8028acc:	24001f78 	.word	0x24001f78

08028ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8028ad0:	b580      	push	{r7, lr}
 8028ad2:	b082      	sub	sp, #8
 8028ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8028ad6:	e019      	b.n	8028b0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8028ad8:	f001 f8b0 	bl	8029c3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8028adc:	4b0f      	ldr	r3, [pc, #60]	; (8028b1c <prvCheckTasksWaitingTermination+0x4c>)
 8028ade:	68db      	ldr	r3, [r3, #12]
 8028ae0:	68db      	ldr	r3, [r3, #12]
 8028ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8028ae4:	687b      	ldr	r3, [r7, #4]
 8028ae6:	3304      	adds	r3, #4
 8028ae8:	4618      	mov	r0, r3
 8028aea:	f7fe f99d 	bl	8026e28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8028aee:	4b0c      	ldr	r3, [pc, #48]	; (8028b20 <prvCheckTasksWaitingTermination+0x50>)
 8028af0:	681b      	ldr	r3, [r3, #0]
 8028af2:	3b01      	subs	r3, #1
 8028af4:	4a0a      	ldr	r2, [pc, #40]	; (8028b20 <prvCheckTasksWaitingTermination+0x50>)
 8028af6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8028af8:	4b0a      	ldr	r3, [pc, #40]	; (8028b24 <prvCheckTasksWaitingTermination+0x54>)
 8028afa:	681b      	ldr	r3, [r3, #0]
 8028afc:	3b01      	subs	r3, #1
 8028afe:	4a09      	ldr	r2, [pc, #36]	; (8028b24 <prvCheckTasksWaitingTermination+0x54>)
 8028b00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8028b02:	f001 f8c9 	bl	8029c98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8028b06:	6878      	ldr	r0, [r7, #4]
 8028b08:	f000 f80e 	bl	8028b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8028b0c:	4b05      	ldr	r3, [pc, #20]	; (8028b24 <prvCheckTasksWaitingTermination+0x54>)
 8028b0e:	681b      	ldr	r3, [r3, #0]
 8028b10:	2b00      	cmp	r3, #0
 8028b12:	d1e1      	bne.n	8028ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8028b14:	bf00      	nop
 8028b16:	3708      	adds	r7, #8
 8028b18:	46bd      	mov	sp, r7
 8028b1a:	bd80      	pop	{r7, pc}
 8028b1c:	24001f90 	.word	0x24001f90
 8028b20:	24001fbc 	.word	0x24001fbc
 8028b24:	24001fa4 	.word	0x24001fa4

08028b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8028b28:	b580      	push	{r7, lr}
 8028b2a:	b084      	sub	sp, #16
 8028b2c:	af00      	add	r7, sp, #0
 8028b2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8028b30:	687b      	ldr	r3, [r7, #4]
 8028b32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8028b36:	2b00      	cmp	r3, #0
 8028b38:	d108      	bne.n	8028b4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8028b3a:	687b      	ldr	r3, [r7, #4]
 8028b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b3e:	4618      	mov	r0, r3
 8028b40:	f001 fa58 	bl	8029ff4 <vPortFree>
				vPortFree( pxTCB );
 8028b44:	6878      	ldr	r0, [r7, #4]
 8028b46:	f001 fa55 	bl	8029ff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8028b4a:	e017      	b.n	8028b7c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8028b4c:	687b      	ldr	r3, [r7, #4]
 8028b4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8028b52:	2b01      	cmp	r3, #1
 8028b54:	d103      	bne.n	8028b5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8028b56:	6878      	ldr	r0, [r7, #4]
 8028b58:	f001 fa4c 	bl	8029ff4 <vPortFree>
	}
 8028b5c:	e00e      	b.n	8028b7c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8028b5e:	687b      	ldr	r3, [r7, #4]
 8028b60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8028b64:	2b02      	cmp	r3, #2
 8028b66:	d009      	beq.n	8028b7c <prvDeleteTCB+0x54>
 8028b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028b6c:	f383 8811 	msr	BASEPRI, r3
 8028b70:	f3bf 8f6f 	isb	sy
 8028b74:	f3bf 8f4f 	dsb	sy
 8028b78:	60fb      	str	r3, [r7, #12]
 8028b7a:	e7fe      	b.n	8028b7a <prvDeleteTCB+0x52>
	}
 8028b7c:	bf00      	nop
 8028b7e:	3710      	adds	r7, #16
 8028b80:	46bd      	mov	sp, r7
 8028b82:	bd80      	pop	{r7, pc}

08028b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8028b84:	b480      	push	{r7}
 8028b86:	b083      	sub	sp, #12
 8028b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8028b8a:	4b0c      	ldr	r3, [pc, #48]	; (8028bbc <prvResetNextTaskUnblockTime+0x38>)
 8028b8c:	681b      	ldr	r3, [r3, #0]
 8028b8e:	681b      	ldr	r3, [r3, #0]
 8028b90:	2b00      	cmp	r3, #0
 8028b92:	d104      	bne.n	8028b9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8028b94:	4b0a      	ldr	r3, [pc, #40]	; (8028bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8028b96:	f04f 32ff 	mov.w	r2, #4294967295
 8028b9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8028b9c:	e008      	b.n	8028bb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8028b9e:	4b07      	ldr	r3, [pc, #28]	; (8028bbc <prvResetNextTaskUnblockTime+0x38>)
 8028ba0:	681b      	ldr	r3, [r3, #0]
 8028ba2:	68db      	ldr	r3, [r3, #12]
 8028ba4:	68db      	ldr	r3, [r3, #12]
 8028ba6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8028ba8:	687b      	ldr	r3, [r7, #4]
 8028baa:	685b      	ldr	r3, [r3, #4]
 8028bac:	4a04      	ldr	r2, [pc, #16]	; (8028bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8028bae:	6013      	str	r3, [r2, #0]
}
 8028bb0:	bf00      	nop
 8028bb2:	370c      	adds	r7, #12
 8028bb4:	46bd      	mov	sp, r7
 8028bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bba:	4770      	bx	lr
 8028bbc:	24001f74 	.word	0x24001f74
 8028bc0:	24001fdc 	.word	0x24001fdc

08028bc4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8028bc4:	b480      	push	{r7}
 8028bc6:	b083      	sub	sp, #12
 8028bc8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8028bca:	4b05      	ldr	r3, [pc, #20]	; (8028be0 <xTaskGetCurrentTaskHandle+0x1c>)
 8028bcc:	681b      	ldr	r3, [r3, #0]
 8028bce:	607b      	str	r3, [r7, #4]

		return xReturn;
 8028bd0:	687b      	ldr	r3, [r7, #4]
	}
 8028bd2:	4618      	mov	r0, r3
 8028bd4:	370c      	adds	r7, #12
 8028bd6:	46bd      	mov	sp, r7
 8028bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bdc:	4770      	bx	lr
 8028bde:	bf00      	nop
 8028be0:	24001ae8 	.word	0x24001ae8

08028be4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8028be4:	b480      	push	{r7}
 8028be6:	b083      	sub	sp, #12
 8028be8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8028bea:	4b0b      	ldr	r3, [pc, #44]	; (8028c18 <xTaskGetSchedulerState+0x34>)
 8028bec:	681b      	ldr	r3, [r3, #0]
 8028bee:	2b00      	cmp	r3, #0
 8028bf0:	d102      	bne.n	8028bf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8028bf2:	2301      	movs	r3, #1
 8028bf4:	607b      	str	r3, [r7, #4]
 8028bf6:	e008      	b.n	8028c0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8028bf8:	4b08      	ldr	r3, [pc, #32]	; (8028c1c <xTaskGetSchedulerState+0x38>)
 8028bfa:	681b      	ldr	r3, [r3, #0]
 8028bfc:	2b00      	cmp	r3, #0
 8028bfe:	d102      	bne.n	8028c06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8028c00:	2302      	movs	r3, #2
 8028c02:	607b      	str	r3, [r7, #4]
 8028c04:	e001      	b.n	8028c0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8028c06:	2300      	movs	r3, #0
 8028c08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8028c0a:	687b      	ldr	r3, [r7, #4]
	}
 8028c0c:	4618      	mov	r0, r3
 8028c0e:	370c      	adds	r7, #12
 8028c10:	46bd      	mov	sp, r7
 8028c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c16:	4770      	bx	lr
 8028c18:	24001fc8 	.word	0x24001fc8
 8028c1c:	24001fe4 	.word	0x24001fe4

08028c20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8028c20:	b580      	push	{r7, lr}
 8028c22:	b084      	sub	sp, #16
 8028c24:	af00      	add	r7, sp, #0
 8028c26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8028c28:	687b      	ldr	r3, [r7, #4]
 8028c2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8028c2c:	2300      	movs	r3, #0
 8028c2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8028c30:	687b      	ldr	r3, [r7, #4]
 8028c32:	2b00      	cmp	r3, #0
 8028c34:	d051      	beq.n	8028cda <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8028c36:	68bb      	ldr	r3, [r7, #8]
 8028c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028c3a:	4b2a      	ldr	r3, [pc, #168]	; (8028ce4 <xTaskPriorityInherit+0xc4>)
 8028c3c:	681b      	ldr	r3, [r3, #0]
 8028c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028c40:	429a      	cmp	r2, r3
 8028c42:	d241      	bcs.n	8028cc8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8028c44:	68bb      	ldr	r3, [r7, #8]
 8028c46:	699b      	ldr	r3, [r3, #24]
 8028c48:	2b00      	cmp	r3, #0
 8028c4a:	db06      	blt.n	8028c5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8028c4c:	4b25      	ldr	r3, [pc, #148]	; (8028ce4 <xTaskPriorityInherit+0xc4>)
 8028c4e:	681b      	ldr	r3, [r3, #0]
 8028c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028c52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8028c56:	68bb      	ldr	r3, [r7, #8]
 8028c58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8028c5a:	68bb      	ldr	r3, [r7, #8]
 8028c5c:	6959      	ldr	r1, [r3, #20]
 8028c5e:	68bb      	ldr	r3, [r7, #8]
 8028c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028c62:	4613      	mov	r3, r2
 8028c64:	009b      	lsls	r3, r3, #2
 8028c66:	4413      	add	r3, r2
 8028c68:	009b      	lsls	r3, r3, #2
 8028c6a:	4a1f      	ldr	r2, [pc, #124]	; (8028ce8 <xTaskPriorityInherit+0xc8>)
 8028c6c:	4413      	add	r3, r2
 8028c6e:	4299      	cmp	r1, r3
 8028c70:	d122      	bne.n	8028cb8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8028c72:	68bb      	ldr	r3, [r7, #8]
 8028c74:	3304      	adds	r3, #4
 8028c76:	4618      	mov	r0, r3
 8028c78:	f7fe f8d6 	bl	8026e28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8028c7c:	4b19      	ldr	r3, [pc, #100]	; (8028ce4 <xTaskPriorityInherit+0xc4>)
 8028c7e:	681b      	ldr	r3, [r3, #0]
 8028c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028c82:	68bb      	ldr	r3, [r7, #8]
 8028c84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8028c86:	68bb      	ldr	r3, [r7, #8]
 8028c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028c8a:	4b18      	ldr	r3, [pc, #96]	; (8028cec <xTaskPriorityInherit+0xcc>)
 8028c8c:	681b      	ldr	r3, [r3, #0]
 8028c8e:	429a      	cmp	r2, r3
 8028c90:	d903      	bls.n	8028c9a <xTaskPriorityInherit+0x7a>
 8028c92:	68bb      	ldr	r3, [r7, #8]
 8028c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028c96:	4a15      	ldr	r2, [pc, #84]	; (8028cec <xTaskPriorityInherit+0xcc>)
 8028c98:	6013      	str	r3, [r2, #0]
 8028c9a:	68bb      	ldr	r3, [r7, #8]
 8028c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028c9e:	4613      	mov	r3, r2
 8028ca0:	009b      	lsls	r3, r3, #2
 8028ca2:	4413      	add	r3, r2
 8028ca4:	009b      	lsls	r3, r3, #2
 8028ca6:	4a10      	ldr	r2, [pc, #64]	; (8028ce8 <xTaskPriorityInherit+0xc8>)
 8028ca8:	441a      	add	r2, r3
 8028caa:	68bb      	ldr	r3, [r7, #8]
 8028cac:	3304      	adds	r3, #4
 8028cae:	4619      	mov	r1, r3
 8028cb0:	4610      	mov	r0, r2
 8028cb2:	f7fe f85c 	bl	8026d6e <vListInsertEnd>
 8028cb6:	e004      	b.n	8028cc2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8028cb8:	4b0a      	ldr	r3, [pc, #40]	; (8028ce4 <xTaskPriorityInherit+0xc4>)
 8028cba:	681b      	ldr	r3, [r3, #0]
 8028cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028cbe:	68bb      	ldr	r3, [r7, #8]
 8028cc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8028cc2:	2301      	movs	r3, #1
 8028cc4:	60fb      	str	r3, [r7, #12]
 8028cc6:	e008      	b.n	8028cda <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8028cc8:	68bb      	ldr	r3, [r7, #8]
 8028cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8028ccc:	4b05      	ldr	r3, [pc, #20]	; (8028ce4 <xTaskPriorityInherit+0xc4>)
 8028cce:	681b      	ldr	r3, [r3, #0]
 8028cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028cd2:	429a      	cmp	r2, r3
 8028cd4:	d201      	bcs.n	8028cda <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8028cd6:	2301      	movs	r3, #1
 8028cd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8028cda:	68fb      	ldr	r3, [r7, #12]
	}
 8028cdc:	4618      	mov	r0, r3
 8028cde:	3710      	adds	r7, #16
 8028ce0:	46bd      	mov	sp, r7
 8028ce2:	bd80      	pop	{r7, pc}
 8028ce4:	24001ae8 	.word	0x24001ae8
 8028ce8:	24001aec 	.word	0x24001aec
 8028cec:	24001fc4 	.word	0x24001fc4

08028cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8028cf0:	b580      	push	{r7, lr}
 8028cf2:	b086      	sub	sp, #24
 8028cf4:	af00      	add	r7, sp, #0
 8028cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8028cf8:	687b      	ldr	r3, [r7, #4]
 8028cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8028cfc:	2300      	movs	r3, #0
 8028cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8028d00:	687b      	ldr	r3, [r7, #4]
 8028d02:	2b00      	cmp	r3, #0
 8028d04:	d054      	beq.n	8028db0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8028d06:	4b2d      	ldr	r3, [pc, #180]	; (8028dbc <xTaskPriorityDisinherit+0xcc>)
 8028d08:	681b      	ldr	r3, [r3, #0]
 8028d0a:	693a      	ldr	r2, [r7, #16]
 8028d0c:	429a      	cmp	r2, r3
 8028d0e:	d009      	beq.n	8028d24 <xTaskPriorityDisinherit+0x34>
 8028d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028d14:	f383 8811 	msr	BASEPRI, r3
 8028d18:	f3bf 8f6f 	isb	sy
 8028d1c:	f3bf 8f4f 	dsb	sy
 8028d20:	60fb      	str	r3, [r7, #12]
 8028d22:	e7fe      	b.n	8028d22 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8028d24:	693b      	ldr	r3, [r7, #16]
 8028d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028d28:	2b00      	cmp	r3, #0
 8028d2a:	d109      	bne.n	8028d40 <xTaskPriorityDisinherit+0x50>
 8028d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028d30:	f383 8811 	msr	BASEPRI, r3
 8028d34:	f3bf 8f6f 	isb	sy
 8028d38:	f3bf 8f4f 	dsb	sy
 8028d3c:	60bb      	str	r3, [r7, #8]
 8028d3e:	e7fe      	b.n	8028d3e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8028d40:	693b      	ldr	r3, [r7, #16]
 8028d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028d44:	1e5a      	subs	r2, r3, #1
 8028d46:	693b      	ldr	r3, [r7, #16]
 8028d48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8028d4a:	693b      	ldr	r3, [r7, #16]
 8028d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028d4e:	693b      	ldr	r3, [r7, #16]
 8028d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028d52:	429a      	cmp	r2, r3
 8028d54:	d02c      	beq.n	8028db0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8028d56:	693b      	ldr	r3, [r7, #16]
 8028d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028d5a:	2b00      	cmp	r3, #0
 8028d5c:	d128      	bne.n	8028db0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8028d5e:	693b      	ldr	r3, [r7, #16]
 8028d60:	3304      	adds	r3, #4
 8028d62:	4618      	mov	r0, r3
 8028d64:	f7fe f860 	bl	8026e28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8028d68:	693b      	ldr	r3, [r7, #16]
 8028d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8028d6c:	693b      	ldr	r3, [r7, #16]
 8028d6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8028d70:	693b      	ldr	r3, [r7, #16]
 8028d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028d74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8028d78:	693b      	ldr	r3, [r7, #16]
 8028d7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8028d7c:	693b      	ldr	r3, [r7, #16]
 8028d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028d80:	4b0f      	ldr	r3, [pc, #60]	; (8028dc0 <xTaskPriorityDisinherit+0xd0>)
 8028d82:	681b      	ldr	r3, [r3, #0]
 8028d84:	429a      	cmp	r2, r3
 8028d86:	d903      	bls.n	8028d90 <xTaskPriorityDisinherit+0xa0>
 8028d88:	693b      	ldr	r3, [r7, #16]
 8028d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028d8c:	4a0c      	ldr	r2, [pc, #48]	; (8028dc0 <xTaskPriorityDisinherit+0xd0>)
 8028d8e:	6013      	str	r3, [r2, #0]
 8028d90:	693b      	ldr	r3, [r7, #16]
 8028d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028d94:	4613      	mov	r3, r2
 8028d96:	009b      	lsls	r3, r3, #2
 8028d98:	4413      	add	r3, r2
 8028d9a:	009b      	lsls	r3, r3, #2
 8028d9c:	4a09      	ldr	r2, [pc, #36]	; (8028dc4 <xTaskPriorityDisinherit+0xd4>)
 8028d9e:	441a      	add	r2, r3
 8028da0:	693b      	ldr	r3, [r7, #16]
 8028da2:	3304      	adds	r3, #4
 8028da4:	4619      	mov	r1, r3
 8028da6:	4610      	mov	r0, r2
 8028da8:	f7fd ffe1 	bl	8026d6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8028dac:	2301      	movs	r3, #1
 8028dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8028db0:	697b      	ldr	r3, [r7, #20]
	}
 8028db2:	4618      	mov	r0, r3
 8028db4:	3718      	adds	r7, #24
 8028db6:	46bd      	mov	sp, r7
 8028db8:	bd80      	pop	{r7, pc}
 8028dba:	bf00      	nop
 8028dbc:	24001ae8 	.word	0x24001ae8
 8028dc0:	24001fc4 	.word	0x24001fc4
 8028dc4:	24001aec 	.word	0x24001aec

08028dc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8028dc8:	b580      	push	{r7, lr}
 8028dca:	b088      	sub	sp, #32
 8028dcc:	af00      	add	r7, sp, #0
 8028dce:	6078      	str	r0, [r7, #4]
 8028dd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8028dd2:	687b      	ldr	r3, [r7, #4]
 8028dd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8028dd6:	2301      	movs	r3, #1
 8028dd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8028dda:	687b      	ldr	r3, [r7, #4]
 8028ddc:	2b00      	cmp	r3, #0
 8028dde:	d068      	beq.n	8028eb2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8028de0:	69bb      	ldr	r3, [r7, #24]
 8028de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028de4:	2b00      	cmp	r3, #0
 8028de6:	d109      	bne.n	8028dfc <vTaskPriorityDisinheritAfterTimeout+0x34>
 8028de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028dec:	f383 8811 	msr	BASEPRI, r3
 8028df0:	f3bf 8f6f 	isb	sy
 8028df4:	f3bf 8f4f 	dsb	sy
 8028df8:	60fb      	str	r3, [r7, #12]
 8028dfa:	e7fe      	b.n	8028dfa <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8028dfc:	69bb      	ldr	r3, [r7, #24]
 8028dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028e00:	683a      	ldr	r2, [r7, #0]
 8028e02:	429a      	cmp	r2, r3
 8028e04:	d902      	bls.n	8028e0c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8028e06:	683b      	ldr	r3, [r7, #0]
 8028e08:	61fb      	str	r3, [r7, #28]
 8028e0a:	e002      	b.n	8028e12 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8028e0c:	69bb      	ldr	r3, [r7, #24]
 8028e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028e10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8028e12:	69bb      	ldr	r3, [r7, #24]
 8028e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028e16:	69fa      	ldr	r2, [r7, #28]
 8028e18:	429a      	cmp	r2, r3
 8028e1a:	d04a      	beq.n	8028eb2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8028e1c:	69bb      	ldr	r3, [r7, #24]
 8028e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028e20:	697a      	ldr	r2, [r7, #20]
 8028e22:	429a      	cmp	r2, r3
 8028e24:	d145      	bne.n	8028eb2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8028e26:	4b25      	ldr	r3, [pc, #148]	; (8028ebc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8028e28:	681b      	ldr	r3, [r3, #0]
 8028e2a:	69ba      	ldr	r2, [r7, #24]
 8028e2c:	429a      	cmp	r2, r3
 8028e2e:	d109      	bne.n	8028e44 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8028e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028e34:	f383 8811 	msr	BASEPRI, r3
 8028e38:	f3bf 8f6f 	isb	sy
 8028e3c:	f3bf 8f4f 	dsb	sy
 8028e40:	60bb      	str	r3, [r7, #8]
 8028e42:	e7fe      	b.n	8028e42 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8028e44:	69bb      	ldr	r3, [r7, #24]
 8028e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028e48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8028e4a:	69bb      	ldr	r3, [r7, #24]
 8028e4c:	69fa      	ldr	r2, [r7, #28]
 8028e4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8028e50:	69bb      	ldr	r3, [r7, #24]
 8028e52:	699b      	ldr	r3, [r3, #24]
 8028e54:	2b00      	cmp	r3, #0
 8028e56:	db04      	blt.n	8028e62 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8028e58:	69fb      	ldr	r3, [r7, #28]
 8028e5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8028e5e:	69bb      	ldr	r3, [r7, #24]
 8028e60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8028e62:	69bb      	ldr	r3, [r7, #24]
 8028e64:	6959      	ldr	r1, [r3, #20]
 8028e66:	693a      	ldr	r2, [r7, #16]
 8028e68:	4613      	mov	r3, r2
 8028e6a:	009b      	lsls	r3, r3, #2
 8028e6c:	4413      	add	r3, r2
 8028e6e:	009b      	lsls	r3, r3, #2
 8028e70:	4a13      	ldr	r2, [pc, #76]	; (8028ec0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8028e72:	4413      	add	r3, r2
 8028e74:	4299      	cmp	r1, r3
 8028e76:	d11c      	bne.n	8028eb2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8028e78:	69bb      	ldr	r3, [r7, #24]
 8028e7a:	3304      	adds	r3, #4
 8028e7c:	4618      	mov	r0, r3
 8028e7e:	f7fd ffd3 	bl	8026e28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8028e82:	69bb      	ldr	r3, [r7, #24]
 8028e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028e86:	4b0f      	ldr	r3, [pc, #60]	; (8028ec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8028e88:	681b      	ldr	r3, [r3, #0]
 8028e8a:	429a      	cmp	r2, r3
 8028e8c:	d903      	bls.n	8028e96 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8028e8e:	69bb      	ldr	r3, [r7, #24]
 8028e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028e92:	4a0c      	ldr	r2, [pc, #48]	; (8028ec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8028e94:	6013      	str	r3, [r2, #0]
 8028e96:	69bb      	ldr	r3, [r7, #24]
 8028e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028e9a:	4613      	mov	r3, r2
 8028e9c:	009b      	lsls	r3, r3, #2
 8028e9e:	4413      	add	r3, r2
 8028ea0:	009b      	lsls	r3, r3, #2
 8028ea2:	4a07      	ldr	r2, [pc, #28]	; (8028ec0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8028ea4:	441a      	add	r2, r3
 8028ea6:	69bb      	ldr	r3, [r7, #24]
 8028ea8:	3304      	adds	r3, #4
 8028eaa:	4619      	mov	r1, r3
 8028eac:	4610      	mov	r0, r2
 8028eae:	f7fd ff5e 	bl	8026d6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8028eb2:	bf00      	nop
 8028eb4:	3720      	adds	r7, #32
 8028eb6:	46bd      	mov	sp, r7
 8028eb8:	bd80      	pop	{r7, pc}
 8028eba:	bf00      	nop
 8028ebc:	24001ae8 	.word	0x24001ae8
 8028ec0:	24001aec 	.word	0x24001aec
 8028ec4:	24001fc4 	.word	0x24001fc4

08028ec8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8028ec8:	b480      	push	{r7}
 8028eca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8028ecc:	4b07      	ldr	r3, [pc, #28]	; (8028eec <pvTaskIncrementMutexHeldCount+0x24>)
 8028ece:	681b      	ldr	r3, [r3, #0]
 8028ed0:	2b00      	cmp	r3, #0
 8028ed2:	d004      	beq.n	8028ede <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8028ed4:	4b05      	ldr	r3, [pc, #20]	; (8028eec <pvTaskIncrementMutexHeldCount+0x24>)
 8028ed6:	681b      	ldr	r3, [r3, #0]
 8028ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8028eda:	3201      	adds	r2, #1
 8028edc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8028ede:	4b03      	ldr	r3, [pc, #12]	; (8028eec <pvTaskIncrementMutexHeldCount+0x24>)
 8028ee0:	681b      	ldr	r3, [r3, #0]
	}
 8028ee2:	4618      	mov	r0, r3
 8028ee4:	46bd      	mov	sp, r7
 8028ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028eea:	4770      	bx	lr
 8028eec:	24001ae8 	.word	0x24001ae8

08028ef0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8028ef0:	b580      	push	{r7, lr}
 8028ef2:	b086      	sub	sp, #24
 8028ef4:	af00      	add	r7, sp, #0
 8028ef6:	60f8      	str	r0, [r7, #12]
 8028ef8:	60b9      	str	r1, [r7, #8]
 8028efa:	607a      	str	r2, [r7, #4]
 8028efc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8028efe:	f000 fe9d 	bl	8029c3c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8028f02:	4b26      	ldr	r3, [pc, #152]	; (8028f9c <xTaskNotifyWait+0xac>)
 8028f04:	681b      	ldr	r3, [r3, #0]
 8028f06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8028f0a:	b2db      	uxtb	r3, r3
 8028f0c:	2b02      	cmp	r3, #2
 8028f0e:	d01a      	beq.n	8028f46 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8028f10:	4b22      	ldr	r3, [pc, #136]	; (8028f9c <xTaskNotifyWait+0xac>)
 8028f12:	681b      	ldr	r3, [r3, #0]
 8028f14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8028f16:	68fa      	ldr	r2, [r7, #12]
 8028f18:	43d2      	mvns	r2, r2
 8028f1a:	400a      	ands	r2, r1
 8028f1c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8028f1e:	4b1f      	ldr	r3, [pc, #124]	; (8028f9c <xTaskNotifyWait+0xac>)
 8028f20:	681b      	ldr	r3, [r3, #0]
 8028f22:	2201      	movs	r2, #1
 8028f24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8028f28:	683b      	ldr	r3, [r7, #0]
 8028f2a:	2b00      	cmp	r3, #0
 8028f2c:	d00b      	beq.n	8028f46 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8028f2e:	2101      	movs	r1, #1
 8028f30:	6838      	ldr	r0, [r7, #0]
 8028f32:	f000 f9c3 	bl	80292bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8028f36:	4b1a      	ldr	r3, [pc, #104]	; (8028fa0 <xTaskNotifyWait+0xb0>)
 8028f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028f3c:	601a      	str	r2, [r3, #0]
 8028f3e:	f3bf 8f4f 	dsb	sy
 8028f42:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8028f46:	f000 fea7 	bl	8029c98 <vPortExitCritical>

		taskENTER_CRITICAL();
 8028f4a:	f000 fe77 	bl	8029c3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8028f4e:	687b      	ldr	r3, [r7, #4]
 8028f50:	2b00      	cmp	r3, #0
 8028f52:	d004      	beq.n	8028f5e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8028f54:	4b11      	ldr	r3, [pc, #68]	; (8028f9c <xTaskNotifyWait+0xac>)
 8028f56:	681b      	ldr	r3, [r3, #0]
 8028f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8028f5a:	687b      	ldr	r3, [r7, #4]
 8028f5c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8028f5e:	4b0f      	ldr	r3, [pc, #60]	; (8028f9c <xTaskNotifyWait+0xac>)
 8028f60:	681b      	ldr	r3, [r3, #0]
 8028f62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8028f66:	b2db      	uxtb	r3, r3
 8028f68:	2b02      	cmp	r3, #2
 8028f6a:	d002      	beq.n	8028f72 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8028f6c:	2300      	movs	r3, #0
 8028f6e:	617b      	str	r3, [r7, #20]
 8028f70:	e008      	b.n	8028f84 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8028f72:	4b0a      	ldr	r3, [pc, #40]	; (8028f9c <xTaskNotifyWait+0xac>)
 8028f74:	681b      	ldr	r3, [r3, #0]
 8028f76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8028f78:	68ba      	ldr	r2, [r7, #8]
 8028f7a:	43d2      	mvns	r2, r2
 8028f7c:	400a      	ands	r2, r1
 8028f7e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8028f80:	2301      	movs	r3, #1
 8028f82:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8028f84:	4b05      	ldr	r3, [pc, #20]	; (8028f9c <xTaskNotifyWait+0xac>)
 8028f86:	681b      	ldr	r3, [r3, #0]
 8028f88:	2200      	movs	r2, #0
 8028f8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8028f8e:	f000 fe83 	bl	8029c98 <vPortExitCritical>

		return xReturn;
 8028f92:	697b      	ldr	r3, [r7, #20]
	}
 8028f94:	4618      	mov	r0, r3
 8028f96:	3718      	adds	r7, #24
 8028f98:	46bd      	mov	sp, r7
 8028f9a:	bd80      	pop	{r7, pc}
 8028f9c:	24001ae8 	.word	0x24001ae8
 8028fa0:	e000ed04 	.word	0xe000ed04

08028fa4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8028fa4:	b580      	push	{r7, lr}
 8028fa6:	b08a      	sub	sp, #40	; 0x28
 8028fa8:	af00      	add	r7, sp, #0
 8028faa:	60f8      	str	r0, [r7, #12]
 8028fac:	60b9      	str	r1, [r7, #8]
 8028fae:	603b      	str	r3, [r7, #0]
 8028fb0:	4613      	mov	r3, r2
 8028fb2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8028fb4:	2301      	movs	r3, #1
 8028fb6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8028fb8:	68fb      	ldr	r3, [r7, #12]
 8028fba:	2b00      	cmp	r3, #0
 8028fbc:	d109      	bne.n	8028fd2 <xTaskGenericNotify+0x2e>
 8028fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028fc2:	f383 8811 	msr	BASEPRI, r3
 8028fc6:	f3bf 8f6f 	isb	sy
 8028fca:	f3bf 8f4f 	dsb	sy
 8028fce:	61bb      	str	r3, [r7, #24]
 8028fd0:	e7fe      	b.n	8028fd0 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8028fd2:	68fb      	ldr	r3, [r7, #12]
 8028fd4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8028fd6:	f000 fe31 	bl	8029c3c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8028fda:	683b      	ldr	r3, [r7, #0]
 8028fdc:	2b00      	cmp	r3, #0
 8028fde:	d003      	beq.n	8028fe8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8028fe0:	6a3b      	ldr	r3, [r7, #32]
 8028fe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8028fe4:	683b      	ldr	r3, [r7, #0]
 8028fe6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8028fe8:	6a3b      	ldr	r3, [r7, #32]
 8028fea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8028fee:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8028ff0:	6a3b      	ldr	r3, [r7, #32]
 8028ff2:	2202      	movs	r2, #2
 8028ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8028ff8:	79fb      	ldrb	r3, [r7, #7]
 8028ffa:	2b04      	cmp	r3, #4
 8028ffc:	d827      	bhi.n	802904e <xTaskGenericNotify+0xaa>
 8028ffe:	a201      	add	r2, pc, #4	; (adr r2, 8029004 <xTaskGenericNotify+0x60>)
 8029000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029004:	0802906d 	.word	0x0802906d
 8029008:	08029019 	.word	0x08029019
 802900c:	08029027 	.word	0x08029027
 8029010:	08029033 	.word	0x08029033
 8029014:	0802903b 	.word	0x0802903b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8029018:	6a3b      	ldr	r3, [r7, #32]
 802901a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802901c:	68bb      	ldr	r3, [r7, #8]
 802901e:	431a      	orrs	r2, r3
 8029020:	6a3b      	ldr	r3, [r7, #32]
 8029022:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8029024:	e025      	b.n	8029072 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8029026:	6a3b      	ldr	r3, [r7, #32]
 8029028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802902a:	1c5a      	adds	r2, r3, #1
 802902c:	6a3b      	ldr	r3, [r7, #32]
 802902e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8029030:	e01f      	b.n	8029072 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8029032:	6a3b      	ldr	r3, [r7, #32]
 8029034:	68ba      	ldr	r2, [r7, #8]
 8029036:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8029038:	e01b      	b.n	8029072 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 802903a:	7ffb      	ldrb	r3, [r7, #31]
 802903c:	2b02      	cmp	r3, #2
 802903e:	d003      	beq.n	8029048 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8029040:	6a3b      	ldr	r3, [r7, #32]
 8029042:	68ba      	ldr	r2, [r7, #8]
 8029044:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8029046:	e014      	b.n	8029072 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8029048:	2300      	movs	r3, #0
 802904a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 802904c:	e011      	b.n	8029072 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 802904e:	6a3b      	ldr	r3, [r7, #32]
 8029050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029056:	d00b      	beq.n	8029070 <xTaskGenericNotify+0xcc>
 8029058:	f04f 0350 	mov.w	r3, #80	; 0x50
 802905c:	f383 8811 	msr	BASEPRI, r3
 8029060:	f3bf 8f6f 	isb	sy
 8029064:	f3bf 8f4f 	dsb	sy
 8029068:	617b      	str	r3, [r7, #20]
 802906a:	e7fe      	b.n	802906a <xTaskGenericNotify+0xc6>
					break;
 802906c:	bf00      	nop
 802906e:	e000      	b.n	8029072 <xTaskGenericNotify+0xce>

					break;
 8029070:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8029072:	7ffb      	ldrb	r3, [r7, #31]
 8029074:	2b01      	cmp	r3, #1
 8029076:	d139      	bne.n	80290ec <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8029078:	6a3b      	ldr	r3, [r7, #32]
 802907a:	3304      	adds	r3, #4
 802907c:	4618      	mov	r0, r3
 802907e:	f7fd fed3 	bl	8026e28 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8029082:	6a3b      	ldr	r3, [r7, #32]
 8029084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029086:	4b1d      	ldr	r3, [pc, #116]	; (80290fc <xTaskGenericNotify+0x158>)
 8029088:	681b      	ldr	r3, [r3, #0]
 802908a:	429a      	cmp	r2, r3
 802908c:	d903      	bls.n	8029096 <xTaskGenericNotify+0xf2>
 802908e:	6a3b      	ldr	r3, [r7, #32]
 8029090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029092:	4a1a      	ldr	r2, [pc, #104]	; (80290fc <xTaskGenericNotify+0x158>)
 8029094:	6013      	str	r3, [r2, #0]
 8029096:	6a3b      	ldr	r3, [r7, #32]
 8029098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802909a:	4613      	mov	r3, r2
 802909c:	009b      	lsls	r3, r3, #2
 802909e:	4413      	add	r3, r2
 80290a0:	009b      	lsls	r3, r3, #2
 80290a2:	4a17      	ldr	r2, [pc, #92]	; (8029100 <xTaskGenericNotify+0x15c>)
 80290a4:	441a      	add	r2, r3
 80290a6:	6a3b      	ldr	r3, [r7, #32]
 80290a8:	3304      	adds	r3, #4
 80290aa:	4619      	mov	r1, r3
 80290ac:	4610      	mov	r0, r2
 80290ae:	f7fd fe5e 	bl	8026d6e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80290b2:	6a3b      	ldr	r3, [r7, #32]
 80290b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80290b6:	2b00      	cmp	r3, #0
 80290b8:	d009      	beq.n	80290ce <xTaskGenericNotify+0x12a>
 80290ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80290be:	f383 8811 	msr	BASEPRI, r3
 80290c2:	f3bf 8f6f 	isb	sy
 80290c6:	f3bf 8f4f 	dsb	sy
 80290ca:	613b      	str	r3, [r7, #16]
 80290cc:	e7fe      	b.n	80290cc <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80290ce:	6a3b      	ldr	r3, [r7, #32]
 80290d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80290d2:	4b0c      	ldr	r3, [pc, #48]	; (8029104 <xTaskGenericNotify+0x160>)
 80290d4:	681b      	ldr	r3, [r3, #0]
 80290d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80290d8:	429a      	cmp	r2, r3
 80290da:	d907      	bls.n	80290ec <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80290dc:	4b0a      	ldr	r3, [pc, #40]	; (8029108 <xTaskGenericNotify+0x164>)
 80290de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80290e2:	601a      	str	r2, [r3, #0]
 80290e4:	f3bf 8f4f 	dsb	sy
 80290e8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80290ec:	f000 fdd4 	bl	8029c98 <vPortExitCritical>

		return xReturn;
 80290f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80290f2:	4618      	mov	r0, r3
 80290f4:	3728      	adds	r7, #40	; 0x28
 80290f6:	46bd      	mov	sp, r7
 80290f8:	bd80      	pop	{r7, pc}
 80290fa:	bf00      	nop
 80290fc:	24001fc4 	.word	0x24001fc4
 8029100:	24001aec 	.word	0x24001aec
 8029104:	24001ae8 	.word	0x24001ae8
 8029108:	e000ed04 	.word	0xe000ed04

0802910c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 802910c:	b580      	push	{r7, lr}
 802910e:	b08e      	sub	sp, #56	; 0x38
 8029110:	af00      	add	r7, sp, #0
 8029112:	60f8      	str	r0, [r7, #12]
 8029114:	60b9      	str	r1, [r7, #8]
 8029116:	603b      	str	r3, [r7, #0]
 8029118:	4613      	mov	r3, r2
 802911a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 802911c:	2301      	movs	r3, #1
 802911e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8029120:	68fb      	ldr	r3, [r7, #12]
 8029122:	2b00      	cmp	r3, #0
 8029124:	d109      	bne.n	802913a <xTaskGenericNotifyFromISR+0x2e>
 8029126:	f04f 0350 	mov.w	r3, #80	; 0x50
 802912a:	f383 8811 	msr	BASEPRI, r3
 802912e:	f3bf 8f6f 	isb	sy
 8029132:	f3bf 8f4f 	dsb	sy
 8029136:	627b      	str	r3, [r7, #36]	; 0x24
 8029138:	e7fe      	b.n	8029138 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802913a:	f000 fe5b 	bl	8029df4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 802913e:	68fb      	ldr	r3, [r7, #12]
 8029140:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8029142:	f3ef 8211 	mrs	r2, BASEPRI
 8029146:	f04f 0350 	mov.w	r3, #80	; 0x50
 802914a:	f383 8811 	msr	BASEPRI, r3
 802914e:	f3bf 8f6f 	isb	sy
 8029152:	f3bf 8f4f 	dsb	sy
 8029156:	623a      	str	r2, [r7, #32]
 8029158:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 802915a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802915c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 802915e:	683b      	ldr	r3, [r7, #0]
 8029160:	2b00      	cmp	r3, #0
 8029162:	d003      	beq.n	802916c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8029164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029166:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8029168:	683b      	ldr	r3, [r7, #0]
 802916a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 802916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802916e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8029172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8029176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029178:	2202      	movs	r2, #2
 802917a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 802917e:	79fb      	ldrb	r3, [r7, #7]
 8029180:	2b04      	cmp	r3, #4
 8029182:	d829      	bhi.n	80291d8 <xTaskGenericNotifyFromISR+0xcc>
 8029184:	a201      	add	r2, pc, #4	; (adr r2, 802918c <xTaskGenericNotifyFromISR+0x80>)
 8029186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802918a:	bf00      	nop
 802918c:	080291f7 	.word	0x080291f7
 8029190:	080291a1 	.word	0x080291a1
 8029194:	080291af 	.word	0x080291af
 8029198:	080291bb 	.word	0x080291bb
 802919c:	080291c3 	.word	0x080291c3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80291a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80291a4:	68bb      	ldr	r3, [r7, #8]
 80291a6:	431a      	orrs	r2, r3
 80291a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291aa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80291ac:	e026      	b.n	80291fc <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80291ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80291b2:	1c5a      	adds	r2, r3, #1
 80291b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291b6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80291b8:	e020      	b.n	80291fc <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80291ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291bc:	68ba      	ldr	r2, [r7, #8]
 80291be:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80291c0:	e01c      	b.n	80291fc <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80291c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80291c6:	2b02      	cmp	r3, #2
 80291c8:	d003      	beq.n	80291d2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80291ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291cc:	68ba      	ldr	r2, [r7, #8]
 80291ce:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80291d0:	e014      	b.n	80291fc <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80291d2:	2300      	movs	r3, #0
 80291d4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80291d6:	e011      	b.n	80291fc <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80291d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80291da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80291dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80291e0:	d00b      	beq.n	80291fa <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80291e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80291e6:	f383 8811 	msr	BASEPRI, r3
 80291ea:	f3bf 8f6f 	isb	sy
 80291ee:	f3bf 8f4f 	dsb	sy
 80291f2:	61bb      	str	r3, [r7, #24]
 80291f4:	e7fe      	b.n	80291f4 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80291f6:	bf00      	nop
 80291f8:	e000      	b.n	80291fc <xTaskGenericNotifyFromISR+0xf0>
					break;
 80291fa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80291fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029200:	2b01      	cmp	r3, #1
 8029202:	d145      	bne.n	8029290 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8029204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029208:	2b00      	cmp	r3, #0
 802920a:	d009      	beq.n	8029220 <xTaskGenericNotifyFromISR+0x114>
 802920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029210:	f383 8811 	msr	BASEPRI, r3
 8029214:	f3bf 8f6f 	isb	sy
 8029218:	f3bf 8f4f 	dsb	sy
 802921c:	617b      	str	r3, [r7, #20]
 802921e:	e7fe      	b.n	802921e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8029220:	4b20      	ldr	r3, [pc, #128]	; (80292a4 <xTaskGenericNotifyFromISR+0x198>)
 8029222:	681b      	ldr	r3, [r3, #0]
 8029224:	2b00      	cmp	r3, #0
 8029226:	d11d      	bne.n	8029264 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8029228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802922a:	3304      	adds	r3, #4
 802922c:	4618      	mov	r0, r3
 802922e:	f7fd fdfb 	bl	8026e28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8029232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029236:	4b1c      	ldr	r3, [pc, #112]	; (80292a8 <xTaskGenericNotifyFromISR+0x19c>)
 8029238:	681b      	ldr	r3, [r3, #0]
 802923a:	429a      	cmp	r2, r3
 802923c:	d903      	bls.n	8029246 <xTaskGenericNotifyFromISR+0x13a>
 802923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029242:	4a19      	ldr	r2, [pc, #100]	; (80292a8 <xTaskGenericNotifyFromISR+0x19c>)
 8029244:	6013      	str	r3, [r2, #0]
 8029246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802924a:	4613      	mov	r3, r2
 802924c:	009b      	lsls	r3, r3, #2
 802924e:	4413      	add	r3, r2
 8029250:	009b      	lsls	r3, r3, #2
 8029252:	4a16      	ldr	r2, [pc, #88]	; (80292ac <xTaskGenericNotifyFromISR+0x1a0>)
 8029254:	441a      	add	r2, r3
 8029256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029258:	3304      	adds	r3, #4
 802925a:	4619      	mov	r1, r3
 802925c:	4610      	mov	r0, r2
 802925e:	f7fd fd86 	bl	8026d6e <vListInsertEnd>
 8029262:	e005      	b.n	8029270 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8029264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029266:	3318      	adds	r3, #24
 8029268:	4619      	mov	r1, r3
 802926a:	4811      	ldr	r0, [pc, #68]	; (80292b0 <xTaskGenericNotifyFromISR+0x1a4>)
 802926c:	f7fd fd7f 	bl	8026d6e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8029270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029274:	4b0f      	ldr	r3, [pc, #60]	; (80292b4 <xTaskGenericNotifyFromISR+0x1a8>)
 8029276:	681b      	ldr	r3, [r3, #0]
 8029278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802927a:	429a      	cmp	r2, r3
 802927c:	d908      	bls.n	8029290 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 802927e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029280:	2b00      	cmp	r3, #0
 8029282:	d002      	beq.n	802928a <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8029284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029286:	2201      	movs	r2, #1
 8029288:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 802928a:	4b0b      	ldr	r3, [pc, #44]	; (80292b8 <xTaskGenericNotifyFromISR+0x1ac>)
 802928c:	2201      	movs	r2, #1
 802928e:	601a      	str	r2, [r3, #0]
 8029290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029292:	613b      	str	r3, [r7, #16]
	__asm volatile
 8029294:	693b      	ldr	r3, [r7, #16]
 8029296:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 802929a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 802929c:	4618      	mov	r0, r3
 802929e:	3738      	adds	r7, #56	; 0x38
 80292a0:	46bd      	mov	sp, r7
 80292a2:	bd80      	pop	{r7, pc}
 80292a4:	24001fe4 	.word	0x24001fe4
 80292a8:	24001fc4 	.word	0x24001fc4
 80292ac:	24001aec 	.word	0x24001aec
 80292b0:	24001f7c 	.word	0x24001f7c
 80292b4:	24001ae8 	.word	0x24001ae8
 80292b8:	24001fd0 	.word	0x24001fd0

080292bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80292bc:	b580      	push	{r7, lr}
 80292be:	b084      	sub	sp, #16
 80292c0:	af00      	add	r7, sp, #0
 80292c2:	6078      	str	r0, [r7, #4]
 80292c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80292c6:	4b21      	ldr	r3, [pc, #132]	; (802934c <prvAddCurrentTaskToDelayedList+0x90>)
 80292c8:	681b      	ldr	r3, [r3, #0]
 80292ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80292cc:	4b20      	ldr	r3, [pc, #128]	; (8029350 <prvAddCurrentTaskToDelayedList+0x94>)
 80292ce:	681b      	ldr	r3, [r3, #0]
 80292d0:	3304      	adds	r3, #4
 80292d2:	4618      	mov	r0, r3
 80292d4:	f7fd fda8 	bl	8026e28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80292d8:	687b      	ldr	r3, [r7, #4]
 80292da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80292de:	d10a      	bne.n	80292f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80292e0:	683b      	ldr	r3, [r7, #0]
 80292e2:	2b00      	cmp	r3, #0
 80292e4:	d007      	beq.n	80292f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80292e6:	4b1a      	ldr	r3, [pc, #104]	; (8029350 <prvAddCurrentTaskToDelayedList+0x94>)
 80292e8:	681b      	ldr	r3, [r3, #0]
 80292ea:	3304      	adds	r3, #4
 80292ec:	4619      	mov	r1, r3
 80292ee:	4819      	ldr	r0, [pc, #100]	; (8029354 <prvAddCurrentTaskToDelayedList+0x98>)
 80292f0:	f7fd fd3d 	bl	8026d6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80292f4:	e026      	b.n	8029344 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80292f6:	68fa      	ldr	r2, [r7, #12]
 80292f8:	687b      	ldr	r3, [r7, #4]
 80292fa:	4413      	add	r3, r2
 80292fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80292fe:	4b14      	ldr	r3, [pc, #80]	; (8029350 <prvAddCurrentTaskToDelayedList+0x94>)
 8029300:	681b      	ldr	r3, [r3, #0]
 8029302:	68ba      	ldr	r2, [r7, #8]
 8029304:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8029306:	68ba      	ldr	r2, [r7, #8]
 8029308:	68fb      	ldr	r3, [r7, #12]
 802930a:	429a      	cmp	r2, r3
 802930c:	d209      	bcs.n	8029322 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802930e:	4b12      	ldr	r3, [pc, #72]	; (8029358 <prvAddCurrentTaskToDelayedList+0x9c>)
 8029310:	681a      	ldr	r2, [r3, #0]
 8029312:	4b0f      	ldr	r3, [pc, #60]	; (8029350 <prvAddCurrentTaskToDelayedList+0x94>)
 8029314:	681b      	ldr	r3, [r3, #0]
 8029316:	3304      	adds	r3, #4
 8029318:	4619      	mov	r1, r3
 802931a:	4610      	mov	r0, r2
 802931c:	f7fd fd4b 	bl	8026db6 <vListInsert>
}
 8029320:	e010      	b.n	8029344 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8029322:	4b0e      	ldr	r3, [pc, #56]	; (802935c <prvAddCurrentTaskToDelayedList+0xa0>)
 8029324:	681a      	ldr	r2, [r3, #0]
 8029326:	4b0a      	ldr	r3, [pc, #40]	; (8029350 <prvAddCurrentTaskToDelayedList+0x94>)
 8029328:	681b      	ldr	r3, [r3, #0]
 802932a:	3304      	adds	r3, #4
 802932c:	4619      	mov	r1, r3
 802932e:	4610      	mov	r0, r2
 8029330:	f7fd fd41 	bl	8026db6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8029334:	4b0a      	ldr	r3, [pc, #40]	; (8029360 <prvAddCurrentTaskToDelayedList+0xa4>)
 8029336:	681b      	ldr	r3, [r3, #0]
 8029338:	68ba      	ldr	r2, [r7, #8]
 802933a:	429a      	cmp	r2, r3
 802933c:	d202      	bcs.n	8029344 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802933e:	4a08      	ldr	r2, [pc, #32]	; (8029360 <prvAddCurrentTaskToDelayedList+0xa4>)
 8029340:	68bb      	ldr	r3, [r7, #8]
 8029342:	6013      	str	r3, [r2, #0]
}
 8029344:	bf00      	nop
 8029346:	3710      	adds	r7, #16
 8029348:	46bd      	mov	sp, r7
 802934a:	bd80      	pop	{r7, pc}
 802934c:	24001fc0 	.word	0x24001fc0
 8029350:	24001ae8 	.word	0x24001ae8
 8029354:	24001fa8 	.word	0x24001fa8
 8029358:	24001f78 	.word	0x24001f78
 802935c:	24001f74 	.word	0x24001f74
 8029360:	24001fdc 	.word	0x24001fdc

08029364 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8029364:	b580      	push	{r7, lr}
 8029366:	b08a      	sub	sp, #40	; 0x28
 8029368:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802936a:	2300      	movs	r3, #0
 802936c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802936e:	f000 faff 	bl	8029970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8029372:	4b1c      	ldr	r3, [pc, #112]	; (80293e4 <xTimerCreateTimerTask+0x80>)
 8029374:	681b      	ldr	r3, [r3, #0]
 8029376:	2b00      	cmp	r3, #0
 8029378:	d021      	beq.n	80293be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802937a:	2300      	movs	r3, #0
 802937c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802937e:	2300      	movs	r3, #0
 8029380:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8029382:	1d3a      	adds	r2, r7, #4
 8029384:	f107 0108 	add.w	r1, r7, #8
 8029388:	f107 030c 	add.w	r3, r7, #12
 802938c:	4618      	mov	r0, r3
 802938e:	f7fd fca7 	bl	8026ce0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8029392:	6879      	ldr	r1, [r7, #4]
 8029394:	68bb      	ldr	r3, [r7, #8]
 8029396:	68fa      	ldr	r2, [r7, #12]
 8029398:	9202      	str	r2, [sp, #8]
 802939a:	9301      	str	r3, [sp, #4]
 802939c:	2302      	movs	r3, #2
 802939e:	9300      	str	r3, [sp, #0]
 80293a0:	2300      	movs	r3, #0
 80293a2:	460a      	mov	r2, r1
 80293a4:	4910      	ldr	r1, [pc, #64]	; (80293e8 <xTimerCreateTimerTask+0x84>)
 80293a6:	4811      	ldr	r0, [pc, #68]	; (80293ec <xTimerCreateTimerTask+0x88>)
 80293a8:	f7fe fd78 	bl	8027e9c <xTaskCreateStatic>
 80293ac:	4602      	mov	r2, r0
 80293ae:	4b10      	ldr	r3, [pc, #64]	; (80293f0 <xTimerCreateTimerTask+0x8c>)
 80293b0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80293b2:	4b0f      	ldr	r3, [pc, #60]	; (80293f0 <xTimerCreateTimerTask+0x8c>)
 80293b4:	681b      	ldr	r3, [r3, #0]
 80293b6:	2b00      	cmp	r3, #0
 80293b8:	d001      	beq.n	80293be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80293ba:	2301      	movs	r3, #1
 80293bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80293be:	697b      	ldr	r3, [r7, #20]
 80293c0:	2b00      	cmp	r3, #0
 80293c2:	d109      	bne.n	80293d8 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80293c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80293c8:	f383 8811 	msr	BASEPRI, r3
 80293cc:	f3bf 8f6f 	isb	sy
 80293d0:	f3bf 8f4f 	dsb	sy
 80293d4:	613b      	str	r3, [r7, #16]
 80293d6:	e7fe      	b.n	80293d6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80293d8:	697b      	ldr	r3, [r7, #20]
}
 80293da:	4618      	mov	r0, r3
 80293dc:	3718      	adds	r7, #24
 80293de:	46bd      	mov	sp, r7
 80293e0:	bd80      	pop	{r7, pc}
 80293e2:	bf00      	nop
 80293e4:	24002018 	.word	0x24002018
 80293e8:	0802e58c 	.word	0x0802e58c
 80293ec:	08029525 	.word	0x08029525
 80293f0:	2400201c 	.word	0x2400201c

080293f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80293f4:	b580      	push	{r7, lr}
 80293f6:	b08a      	sub	sp, #40	; 0x28
 80293f8:	af00      	add	r7, sp, #0
 80293fa:	60f8      	str	r0, [r7, #12]
 80293fc:	60b9      	str	r1, [r7, #8]
 80293fe:	607a      	str	r2, [r7, #4]
 8029400:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8029402:	2300      	movs	r3, #0
 8029404:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8029406:	68fb      	ldr	r3, [r7, #12]
 8029408:	2b00      	cmp	r3, #0
 802940a:	d109      	bne.n	8029420 <xTimerGenericCommand+0x2c>
 802940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029410:	f383 8811 	msr	BASEPRI, r3
 8029414:	f3bf 8f6f 	isb	sy
 8029418:	f3bf 8f4f 	dsb	sy
 802941c:	623b      	str	r3, [r7, #32]
 802941e:	e7fe      	b.n	802941e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8029420:	4b19      	ldr	r3, [pc, #100]	; (8029488 <xTimerGenericCommand+0x94>)
 8029422:	681b      	ldr	r3, [r3, #0]
 8029424:	2b00      	cmp	r3, #0
 8029426:	d02a      	beq.n	802947e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8029428:	68bb      	ldr	r3, [r7, #8]
 802942a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 802942c:	687b      	ldr	r3, [r7, #4]
 802942e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8029430:	68fb      	ldr	r3, [r7, #12]
 8029432:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8029434:	68bb      	ldr	r3, [r7, #8]
 8029436:	2b05      	cmp	r3, #5
 8029438:	dc18      	bgt.n	802946c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802943a:	f7ff fbd3 	bl	8028be4 <xTaskGetSchedulerState>
 802943e:	4603      	mov	r3, r0
 8029440:	2b02      	cmp	r3, #2
 8029442:	d109      	bne.n	8029458 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8029444:	4b10      	ldr	r3, [pc, #64]	; (8029488 <xTimerGenericCommand+0x94>)
 8029446:	6818      	ldr	r0, [r3, #0]
 8029448:	f107 0110 	add.w	r1, r7, #16
 802944c:	2300      	movs	r3, #0
 802944e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029450:	f7fd feb8 	bl	80271c4 <xQueueGenericSend>
 8029454:	6278      	str	r0, [r7, #36]	; 0x24
 8029456:	e012      	b.n	802947e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8029458:	4b0b      	ldr	r3, [pc, #44]	; (8029488 <xTimerGenericCommand+0x94>)
 802945a:	6818      	ldr	r0, [r3, #0]
 802945c:	f107 0110 	add.w	r1, r7, #16
 8029460:	2300      	movs	r3, #0
 8029462:	2200      	movs	r2, #0
 8029464:	f7fd feae 	bl	80271c4 <xQueueGenericSend>
 8029468:	6278      	str	r0, [r7, #36]	; 0x24
 802946a:	e008      	b.n	802947e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 802946c:	4b06      	ldr	r3, [pc, #24]	; (8029488 <xTimerGenericCommand+0x94>)
 802946e:	6818      	ldr	r0, [r3, #0]
 8029470:	f107 0110 	add.w	r1, r7, #16
 8029474:	2300      	movs	r3, #0
 8029476:	683a      	ldr	r2, [r7, #0]
 8029478:	f7fd ff9e 	bl	80273b8 <xQueueGenericSendFromISR>
 802947c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 802947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8029480:	4618      	mov	r0, r3
 8029482:	3728      	adds	r7, #40	; 0x28
 8029484:	46bd      	mov	sp, r7
 8029486:	bd80      	pop	{r7, pc}
 8029488:	24002018 	.word	0x24002018

0802948c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 802948c:	b580      	push	{r7, lr}
 802948e:	b088      	sub	sp, #32
 8029490:	af02      	add	r7, sp, #8
 8029492:	6078      	str	r0, [r7, #4]
 8029494:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8029496:	4b22      	ldr	r3, [pc, #136]	; (8029520 <prvProcessExpiredTimer+0x94>)
 8029498:	681b      	ldr	r3, [r3, #0]
 802949a:	68db      	ldr	r3, [r3, #12]
 802949c:	68db      	ldr	r3, [r3, #12]
 802949e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80294a0:	697b      	ldr	r3, [r7, #20]
 80294a2:	3304      	adds	r3, #4
 80294a4:	4618      	mov	r0, r3
 80294a6:	f7fd fcbf 	bl	8026e28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80294aa:	697b      	ldr	r3, [r7, #20]
 80294ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80294b0:	f003 0304 	and.w	r3, r3, #4
 80294b4:	2b00      	cmp	r3, #0
 80294b6:	d021      	beq.n	80294fc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80294b8:	697b      	ldr	r3, [r7, #20]
 80294ba:	699a      	ldr	r2, [r3, #24]
 80294bc:	687b      	ldr	r3, [r7, #4]
 80294be:	18d1      	adds	r1, r2, r3
 80294c0:	687b      	ldr	r3, [r7, #4]
 80294c2:	683a      	ldr	r2, [r7, #0]
 80294c4:	6978      	ldr	r0, [r7, #20]
 80294c6:	f000 f8d1 	bl	802966c <prvInsertTimerInActiveList>
 80294ca:	4603      	mov	r3, r0
 80294cc:	2b00      	cmp	r3, #0
 80294ce:	d01e      	beq.n	802950e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80294d0:	2300      	movs	r3, #0
 80294d2:	9300      	str	r3, [sp, #0]
 80294d4:	2300      	movs	r3, #0
 80294d6:	687a      	ldr	r2, [r7, #4]
 80294d8:	2100      	movs	r1, #0
 80294da:	6978      	ldr	r0, [r7, #20]
 80294dc:	f7ff ff8a 	bl	80293f4 <xTimerGenericCommand>
 80294e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80294e2:	693b      	ldr	r3, [r7, #16]
 80294e4:	2b00      	cmp	r3, #0
 80294e6:	d112      	bne.n	802950e <prvProcessExpiredTimer+0x82>
 80294e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80294ec:	f383 8811 	msr	BASEPRI, r3
 80294f0:	f3bf 8f6f 	isb	sy
 80294f4:	f3bf 8f4f 	dsb	sy
 80294f8:	60fb      	str	r3, [r7, #12]
 80294fa:	e7fe      	b.n	80294fa <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80294fc:	697b      	ldr	r3, [r7, #20]
 80294fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8029502:	f023 0301 	bic.w	r3, r3, #1
 8029506:	b2da      	uxtb	r2, r3
 8029508:	697b      	ldr	r3, [r7, #20]
 802950a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802950e:	697b      	ldr	r3, [r7, #20]
 8029510:	6a1b      	ldr	r3, [r3, #32]
 8029512:	6978      	ldr	r0, [r7, #20]
 8029514:	4798      	blx	r3
}
 8029516:	bf00      	nop
 8029518:	3718      	adds	r7, #24
 802951a:	46bd      	mov	sp, r7
 802951c:	bd80      	pop	{r7, pc}
 802951e:	bf00      	nop
 8029520:	24002010 	.word	0x24002010

08029524 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8029524:	b580      	push	{r7, lr}
 8029526:	b084      	sub	sp, #16
 8029528:	af00      	add	r7, sp, #0
 802952a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802952c:	f107 0308 	add.w	r3, r7, #8
 8029530:	4618      	mov	r0, r3
 8029532:	f000 f857 	bl	80295e4 <prvGetNextExpireTime>
 8029536:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8029538:	68bb      	ldr	r3, [r7, #8]
 802953a:	4619      	mov	r1, r3
 802953c:	68f8      	ldr	r0, [r7, #12]
 802953e:	f000 f803 	bl	8029548 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8029542:	f000 f8d5 	bl	80296f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8029546:	e7f1      	b.n	802952c <prvTimerTask+0x8>

08029548 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8029548:	b580      	push	{r7, lr}
 802954a:	b084      	sub	sp, #16
 802954c:	af00      	add	r7, sp, #0
 802954e:	6078      	str	r0, [r7, #4]
 8029550:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8029552:	f7fe ff53 	bl	80283fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8029556:	f107 0308 	add.w	r3, r7, #8
 802955a:	4618      	mov	r0, r3
 802955c:	f000 f866 	bl	802962c <prvSampleTimeNow>
 8029560:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8029562:	68bb      	ldr	r3, [r7, #8]
 8029564:	2b00      	cmp	r3, #0
 8029566:	d130      	bne.n	80295ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8029568:	683b      	ldr	r3, [r7, #0]
 802956a:	2b00      	cmp	r3, #0
 802956c:	d10a      	bne.n	8029584 <prvProcessTimerOrBlockTask+0x3c>
 802956e:	687a      	ldr	r2, [r7, #4]
 8029570:	68fb      	ldr	r3, [r7, #12]
 8029572:	429a      	cmp	r2, r3
 8029574:	d806      	bhi.n	8029584 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8029576:	f7fe ff4f 	bl	8028418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802957a:	68f9      	ldr	r1, [r7, #12]
 802957c:	6878      	ldr	r0, [r7, #4]
 802957e:	f7ff ff85 	bl	802948c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8029582:	e024      	b.n	80295ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8029584:	683b      	ldr	r3, [r7, #0]
 8029586:	2b00      	cmp	r3, #0
 8029588:	d008      	beq.n	802959c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802958a:	4b13      	ldr	r3, [pc, #76]	; (80295d8 <prvProcessTimerOrBlockTask+0x90>)
 802958c:	681b      	ldr	r3, [r3, #0]
 802958e:	681b      	ldr	r3, [r3, #0]
 8029590:	2b00      	cmp	r3, #0
 8029592:	d101      	bne.n	8029598 <prvProcessTimerOrBlockTask+0x50>
 8029594:	2301      	movs	r3, #1
 8029596:	e000      	b.n	802959a <prvProcessTimerOrBlockTask+0x52>
 8029598:	2300      	movs	r3, #0
 802959a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 802959c:	4b0f      	ldr	r3, [pc, #60]	; (80295dc <prvProcessTimerOrBlockTask+0x94>)
 802959e:	6818      	ldr	r0, [r3, #0]
 80295a0:	687a      	ldr	r2, [r7, #4]
 80295a2:	68fb      	ldr	r3, [r7, #12]
 80295a4:	1ad3      	subs	r3, r2, r3
 80295a6:	683a      	ldr	r2, [r7, #0]
 80295a8:	4619      	mov	r1, r3
 80295aa:	f7fe fc43 	bl	8027e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80295ae:	f7fe ff33 	bl	8028418 <xTaskResumeAll>
 80295b2:	4603      	mov	r3, r0
 80295b4:	2b00      	cmp	r3, #0
 80295b6:	d10a      	bne.n	80295ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80295b8:	4b09      	ldr	r3, [pc, #36]	; (80295e0 <prvProcessTimerOrBlockTask+0x98>)
 80295ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80295be:	601a      	str	r2, [r3, #0]
 80295c0:	f3bf 8f4f 	dsb	sy
 80295c4:	f3bf 8f6f 	isb	sy
}
 80295c8:	e001      	b.n	80295ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80295ca:	f7fe ff25 	bl	8028418 <xTaskResumeAll>
}
 80295ce:	bf00      	nop
 80295d0:	3710      	adds	r7, #16
 80295d2:	46bd      	mov	sp, r7
 80295d4:	bd80      	pop	{r7, pc}
 80295d6:	bf00      	nop
 80295d8:	24002014 	.word	0x24002014
 80295dc:	24002018 	.word	0x24002018
 80295e0:	e000ed04 	.word	0xe000ed04

080295e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80295e4:	b480      	push	{r7}
 80295e6:	b085      	sub	sp, #20
 80295e8:	af00      	add	r7, sp, #0
 80295ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80295ec:	4b0e      	ldr	r3, [pc, #56]	; (8029628 <prvGetNextExpireTime+0x44>)
 80295ee:	681b      	ldr	r3, [r3, #0]
 80295f0:	681b      	ldr	r3, [r3, #0]
 80295f2:	2b00      	cmp	r3, #0
 80295f4:	d101      	bne.n	80295fa <prvGetNextExpireTime+0x16>
 80295f6:	2201      	movs	r2, #1
 80295f8:	e000      	b.n	80295fc <prvGetNextExpireTime+0x18>
 80295fa:	2200      	movs	r2, #0
 80295fc:	687b      	ldr	r3, [r7, #4]
 80295fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8029600:	687b      	ldr	r3, [r7, #4]
 8029602:	681b      	ldr	r3, [r3, #0]
 8029604:	2b00      	cmp	r3, #0
 8029606:	d105      	bne.n	8029614 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8029608:	4b07      	ldr	r3, [pc, #28]	; (8029628 <prvGetNextExpireTime+0x44>)
 802960a:	681b      	ldr	r3, [r3, #0]
 802960c:	68db      	ldr	r3, [r3, #12]
 802960e:	681b      	ldr	r3, [r3, #0]
 8029610:	60fb      	str	r3, [r7, #12]
 8029612:	e001      	b.n	8029618 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8029614:	2300      	movs	r3, #0
 8029616:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8029618:	68fb      	ldr	r3, [r7, #12]
}
 802961a:	4618      	mov	r0, r3
 802961c:	3714      	adds	r7, #20
 802961e:	46bd      	mov	sp, r7
 8029620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029624:	4770      	bx	lr
 8029626:	bf00      	nop
 8029628:	24002010 	.word	0x24002010

0802962c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 802962c:	b580      	push	{r7, lr}
 802962e:	b084      	sub	sp, #16
 8029630:	af00      	add	r7, sp, #0
 8029632:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8029634:	f7fe ff8c 	bl	8028550 <xTaskGetTickCount>
 8029638:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802963a:	4b0b      	ldr	r3, [pc, #44]	; (8029668 <prvSampleTimeNow+0x3c>)
 802963c:	681b      	ldr	r3, [r3, #0]
 802963e:	68fa      	ldr	r2, [r7, #12]
 8029640:	429a      	cmp	r2, r3
 8029642:	d205      	bcs.n	8029650 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8029644:	f000 f930 	bl	80298a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8029648:	687b      	ldr	r3, [r7, #4]
 802964a:	2201      	movs	r2, #1
 802964c:	601a      	str	r2, [r3, #0]
 802964e:	e002      	b.n	8029656 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8029650:	687b      	ldr	r3, [r7, #4]
 8029652:	2200      	movs	r2, #0
 8029654:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8029656:	4a04      	ldr	r2, [pc, #16]	; (8029668 <prvSampleTimeNow+0x3c>)
 8029658:	68fb      	ldr	r3, [r7, #12]
 802965a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802965c:	68fb      	ldr	r3, [r7, #12]
}
 802965e:	4618      	mov	r0, r3
 8029660:	3710      	adds	r7, #16
 8029662:	46bd      	mov	sp, r7
 8029664:	bd80      	pop	{r7, pc}
 8029666:	bf00      	nop
 8029668:	24002020 	.word	0x24002020

0802966c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802966c:	b580      	push	{r7, lr}
 802966e:	b086      	sub	sp, #24
 8029670:	af00      	add	r7, sp, #0
 8029672:	60f8      	str	r0, [r7, #12]
 8029674:	60b9      	str	r1, [r7, #8]
 8029676:	607a      	str	r2, [r7, #4]
 8029678:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802967a:	2300      	movs	r3, #0
 802967c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802967e:	68fb      	ldr	r3, [r7, #12]
 8029680:	68ba      	ldr	r2, [r7, #8]
 8029682:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8029684:	68fb      	ldr	r3, [r7, #12]
 8029686:	68fa      	ldr	r2, [r7, #12]
 8029688:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802968a:	68ba      	ldr	r2, [r7, #8]
 802968c:	687b      	ldr	r3, [r7, #4]
 802968e:	429a      	cmp	r2, r3
 8029690:	d812      	bhi.n	80296b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8029692:	687a      	ldr	r2, [r7, #4]
 8029694:	683b      	ldr	r3, [r7, #0]
 8029696:	1ad2      	subs	r2, r2, r3
 8029698:	68fb      	ldr	r3, [r7, #12]
 802969a:	699b      	ldr	r3, [r3, #24]
 802969c:	429a      	cmp	r2, r3
 802969e:	d302      	bcc.n	80296a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80296a0:	2301      	movs	r3, #1
 80296a2:	617b      	str	r3, [r7, #20]
 80296a4:	e01b      	b.n	80296de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80296a6:	4b10      	ldr	r3, [pc, #64]	; (80296e8 <prvInsertTimerInActiveList+0x7c>)
 80296a8:	681a      	ldr	r2, [r3, #0]
 80296aa:	68fb      	ldr	r3, [r7, #12]
 80296ac:	3304      	adds	r3, #4
 80296ae:	4619      	mov	r1, r3
 80296b0:	4610      	mov	r0, r2
 80296b2:	f7fd fb80 	bl	8026db6 <vListInsert>
 80296b6:	e012      	b.n	80296de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80296b8:	687a      	ldr	r2, [r7, #4]
 80296ba:	683b      	ldr	r3, [r7, #0]
 80296bc:	429a      	cmp	r2, r3
 80296be:	d206      	bcs.n	80296ce <prvInsertTimerInActiveList+0x62>
 80296c0:	68ba      	ldr	r2, [r7, #8]
 80296c2:	683b      	ldr	r3, [r7, #0]
 80296c4:	429a      	cmp	r2, r3
 80296c6:	d302      	bcc.n	80296ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80296c8:	2301      	movs	r3, #1
 80296ca:	617b      	str	r3, [r7, #20]
 80296cc:	e007      	b.n	80296de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80296ce:	4b07      	ldr	r3, [pc, #28]	; (80296ec <prvInsertTimerInActiveList+0x80>)
 80296d0:	681a      	ldr	r2, [r3, #0]
 80296d2:	68fb      	ldr	r3, [r7, #12]
 80296d4:	3304      	adds	r3, #4
 80296d6:	4619      	mov	r1, r3
 80296d8:	4610      	mov	r0, r2
 80296da:	f7fd fb6c 	bl	8026db6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80296de:	697b      	ldr	r3, [r7, #20]
}
 80296e0:	4618      	mov	r0, r3
 80296e2:	3718      	adds	r7, #24
 80296e4:	46bd      	mov	sp, r7
 80296e6:	bd80      	pop	{r7, pc}
 80296e8:	24002014 	.word	0x24002014
 80296ec:	24002010 	.word	0x24002010

080296f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80296f0:	b580      	push	{r7, lr}
 80296f2:	b08e      	sub	sp, #56	; 0x38
 80296f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80296f6:	e0c6      	b.n	8029886 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80296f8:	687b      	ldr	r3, [r7, #4]
 80296fa:	2b00      	cmp	r3, #0
 80296fc:	da17      	bge.n	802972e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80296fe:	1d3b      	adds	r3, r7, #4
 8029700:	3304      	adds	r3, #4
 8029702:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8029704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029706:	2b00      	cmp	r3, #0
 8029708:	d109      	bne.n	802971e <prvProcessReceivedCommands+0x2e>
 802970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802970e:	f383 8811 	msr	BASEPRI, r3
 8029712:	f3bf 8f6f 	isb	sy
 8029716:	f3bf 8f4f 	dsb	sy
 802971a:	61fb      	str	r3, [r7, #28]
 802971c:	e7fe      	b.n	802971c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029720:	681b      	ldr	r3, [r3, #0]
 8029722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029724:	6850      	ldr	r0, [r2, #4]
 8029726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029728:	6892      	ldr	r2, [r2, #8]
 802972a:	4611      	mov	r1, r2
 802972c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802972e:	687b      	ldr	r3, [r7, #4]
 8029730:	2b00      	cmp	r3, #0
 8029732:	f2c0 80a7 	blt.w	8029884 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8029736:	68fb      	ldr	r3, [r7, #12]
 8029738:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802973c:	695b      	ldr	r3, [r3, #20]
 802973e:	2b00      	cmp	r3, #0
 8029740:	d004      	beq.n	802974c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8029742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029744:	3304      	adds	r3, #4
 8029746:	4618      	mov	r0, r3
 8029748:	f7fd fb6e 	bl	8026e28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802974c:	463b      	mov	r3, r7
 802974e:	4618      	mov	r0, r3
 8029750:	f7ff ff6c 	bl	802962c <prvSampleTimeNow>
 8029754:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8029756:	687b      	ldr	r3, [r7, #4]
 8029758:	2b09      	cmp	r3, #9
 802975a:	f200 8094 	bhi.w	8029886 <prvProcessReceivedCommands+0x196>
 802975e:	a201      	add	r2, pc, #4	; (adr r2, 8029764 <prvProcessReceivedCommands+0x74>)
 8029760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029764:	0802978d 	.word	0x0802978d
 8029768:	0802978d 	.word	0x0802978d
 802976c:	0802978d 	.word	0x0802978d
 8029770:	080297ff 	.word	0x080297ff
 8029774:	08029813 	.word	0x08029813
 8029778:	0802985b 	.word	0x0802985b
 802977c:	0802978d 	.word	0x0802978d
 8029780:	0802978d 	.word	0x0802978d
 8029784:	080297ff 	.word	0x080297ff
 8029788:	08029813 	.word	0x08029813
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802978e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8029792:	f043 0301 	orr.w	r3, r3, #1
 8029796:	b2da      	uxtb	r2, r3
 8029798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802979a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802979e:	68ba      	ldr	r2, [r7, #8]
 80297a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297a2:	699b      	ldr	r3, [r3, #24]
 80297a4:	18d1      	adds	r1, r2, r3
 80297a6:	68bb      	ldr	r3, [r7, #8]
 80297a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80297aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80297ac:	f7ff ff5e 	bl	802966c <prvInsertTimerInActiveList>
 80297b0:	4603      	mov	r3, r0
 80297b2:	2b00      	cmp	r3, #0
 80297b4:	d067      	beq.n	8029886 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80297b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297b8:	6a1b      	ldr	r3, [r3, #32]
 80297ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80297bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80297be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80297c4:	f003 0304 	and.w	r3, r3, #4
 80297c8:	2b00      	cmp	r3, #0
 80297ca:	d05c      	beq.n	8029886 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80297cc:	68ba      	ldr	r2, [r7, #8]
 80297ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297d0:	699b      	ldr	r3, [r3, #24]
 80297d2:	441a      	add	r2, r3
 80297d4:	2300      	movs	r3, #0
 80297d6:	9300      	str	r3, [sp, #0]
 80297d8:	2300      	movs	r3, #0
 80297da:	2100      	movs	r1, #0
 80297dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80297de:	f7ff fe09 	bl	80293f4 <xTimerGenericCommand>
 80297e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80297e4:	6a3b      	ldr	r3, [r7, #32]
 80297e6:	2b00      	cmp	r3, #0
 80297e8:	d14d      	bne.n	8029886 <prvProcessReceivedCommands+0x196>
 80297ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80297ee:	f383 8811 	msr	BASEPRI, r3
 80297f2:	f3bf 8f6f 	isb	sy
 80297f6:	f3bf 8f4f 	dsb	sy
 80297fa:	61bb      	str	r3, [r7, #24]
 80297fc:	e7fe      	b.n	80297fc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80297fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8029804:	f023 0301 	bic.w	r3, r3, #1
 8029808:	b2da      	uxtb	r2, r3
 802980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802980c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8029810:	e039      	b.n	8029886 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8029812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8029818:	f043 0301 	orr.w	r3, r3, #1
 802981c:	b2da      	uxtb	r2, r3
 802981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029820:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8029824:	68ba      	ldr	r2, [r7, #8]
 8029826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029828:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802982c:	699b      	ldr	r3, [r3, #24]
 802982e:	2b00      	cmp	r3, #0
 8029830:	d109      	bne.n	8029846 <prvProcessReceivedCommands+0x156>
 8029832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029836:	f383 8811 	msr	BASEPRI, r3
 802983a:	f3bf 8f6f 	isb	sy
 802983e:	f3bf 8f4f 	dsb	sy
 8029842:	617b      	str	r3, [r7, #20]
 8029844:	e7fe      	b.n	8029844 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8029846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029848:	699a      	ldr	r2, [r3, #24]
 802984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802984c:	18d1      	adds	r1, r2, r3
 802984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8029854:	f7ff ff0a 	bl	802966c <prvInsertTimerInActiveList>
					break;
 8029858:	e015      	b.n	8029886 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 802985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802985c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8029860:	f003 0302 	and.w	r3, r3, #2
 8029864:	2b00      	cmp	r3, #0
 8029866:	d103      	bne.n	8029870 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8029868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802986a:	f000 fbc3 	bl	8029ff4 <vPortFree>
 802986e:	e00a      	b.n	8029886 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8029870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8029876:	f023 0301 	bic.w	r3, r3, #1
 802987a:	b2da      	uxtb	r2, r3
 802987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802987e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8029882:	e000      	b.n	8029886 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8029884:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8029886:	4b07      	ldr	r3, [pc, #28]	; (80298a4 <prvProcessReceivedCommands+0x1b4>)
 8029888:	681b      	ldr	r3, [r3, #0]
 802988a:	1d39      	adds	r1, r7, #4
 802988c:	2200      	movs	r2, #0
 802988e:	4618      	mov	r0, r3
 8029890:	f7fd feb0 	bl	80275f4 <xQueueReceive>
 8029894:	4603      	mov	r3, r0
 8029896:	2b00      	cmp	r3, #0
 8029898:	f47f af2e 	bne.w	80296f8 <prvProcessReceivedCommands+0x8>
	}
}
 802989c:	bf00      	nop
 802989e:	3730      	adds	r7, #48	; 0x30
 80298a0:	46bd      	mov	sp, r7
 80298a2:	bd80      	pop	{r7, pc}
 80298a4:	24002018 	.word	0x24002018

080298a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80298a8:	b580      	push	{r7, lr}
 80298aa:	b088      	sub	sp, #32
 80298ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80298ae:	e047      	b.n	8029940 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80298b0:	4b2d      	ldr	r3, [pc, #180]	; (8029968 <prvSwitchTimerLists+0xc0>)
 80298b2:	681b      	ldr	r3, [r3, #0]
 80298b4:	68db      	ldr	r3, [r3, #12]
 80298b6:	681b      	ldr	r3, [r3, #0]
 80298b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80298ba:	4b2b      	ldr	r3, [pc, #172]	; (8029968 <prvSwitchTimerLists+0xc0>)
 80298bc:	681b      	ldr	r3, [r3, #0]
 80298be:	68db      	ldr	r3, [r3, #12]
 80298c0:	68db      	ldr	r3, [r3, #12]
 80298c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80298c4:	68fb      	ldr	r3, [r7, #12]
 80298c6:	3304      	adds	r3, #4
 80298c8:	4618      	mov	r0, r3
 80298ca:	f7fd faad 	bl	8026e28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80298ce:	68fb      	ldr	r3, [r7, #12]
 80298d0:	6a1b      	ldr	r3, [r3, #32]
 80298d2:	68f8      	ldr	r0, [r7, #12]
 80298d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80298d6:	68fb      	ldr	r3, [r7, #12]
 80298d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80298dc:	f003 0304 	and.w	r3, r3, #4
 80298e0:	2b00      	cmp	r3, #0
 80298e2:	d02d      	beq.n	8029940 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80298e4:	68fb      	ldr	r3, [r7, #12]
 80298e6:	699b      	ldr	r3, [r3, #24]
 80298e8:	693a      	ldr	r2, [r7, #16]
 80298ea:	4413      	add	r3, r2
 80298ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80298ee:	68ba      	ldr	r2, [r7, #8]
 80298f0:	693b      	ldr	r3, [r7, #16]
 80298f2:	429a      	cmp	r2, r3
 80298f4:	d90e      	bls.n	8029914 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80298f6:	68fb      	ldr	r3, [r7, #12]
 80298f8:	68ba      	ldr	r2, [r7, #8]
 80298fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80298fc:	68fb      	ldr	r3, [r7, #12]
 80298fe:	68fa      	ldr	r2, [r7, #12]
 8029900:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8029902:	4b19      	ldr	r3, [pc, #100]	; (8029968 <prvSwitchTimerLists+0xc0>)
 8029904:	681a      	ldr	r2, [r3, #0]
 8029906:	68fb      	ldr	r3, [r7, #12]
 8029908:	3304      	adds	r3, #4
 802990a:	4619      	mov	r1, r3
 802990c:	4610      	mov	r0, r2
 802990e:	f7fd fa52 	bl	8026db6 <vListInsert>
 8029912:	e015      	b.n	8029940 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8029914:	2300      	movs	r3, #0
 8029916:	9300      	str	r3, [sp, #0]
 8029918:	2300      	movs	r3, #0
 802991a:	693a      	ldr	r2, [r7, #16]
 802991c:	2100      	movs	r1, #0
 802991e:	68f8      	ldr	r0, [r7, #12]
 8029920:	f7ff fd68 	bl	80293f4 <xTimerGenericCommand>
 8029924:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8029926:	687b      	ldr	r3, [r7, #4]
 8029928:	2b00      	cmp	r3, #0
 802992a:	d109      	bne.n	8029940 <prvSwitchTimerLists+0x98>
 802992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029930:	f383 8811 	msr	BASEPRI, r3
 8029934:	f3bf 8f6f 	isb	sy
 8029938:	f3bf 8f4f 	dsb	sy
 802993c:	603b      	str	r3, [r7, #0]
 802993e:	e7fe      	b.n	802993e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8029940:	4b09      	ldr	r3, [pc, #36]	; (8029968 <prvSwitchTimerLists+0xc0>)
 8029942:	681b      	ldr	r3, [r3, #0]
 8029944:	681b      	ldr	r3, [r3, #0]
 8029946:	2b00      	cmp	r3, #0
 8029948:	d1b2      	bne.n	80298b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802994a:	4b07      	ldr	r3, [pc, #28]	; (8029968 <prvSwitchTimerLists+0xc0>)
 802994c:	681b      	ldr	r3, [r3, #0]
 802994e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8029950:	4b06      	ldr	r3, [pc, #24]	; (802996c <prvSwitchTimerLists+0xc4>)
 8029952:	681b      	ldr	r3, [r3, #0]
 8029954:	4a04      	ldr	r2, [pc, #16]	; (8029968 <prvSwitchTimerLists+0xc0>)
 8029956:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8029958:	4a04      	ldr	r2, [pc, #16]	; (802996c <prvSwitchTimerLists+0xc4>)
 802995a:	697b      	ldr	r3, [r7, #20]
 802995c:	6013      	str	r3, [r2, #0]
}
 802995e:	bf00      	nop
 8029960:	3718      	adds	r7, #24
 8029962:	46bd      	mov	sp, r7
 8029964:	bd80      	pop	{r7, pc}
 8029966:	bf00      	nop
 8029968:	24002010 	.word	0x24002010
 802996c:	24002014 	.word	0x24002014

08029970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8029970:	b580      	push	{r7, lr}
 8029972:	b082      	sub	sp, #8
 8029974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8029976:	f000 f961 	bl	8029c3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802997a:	4b15      	ldr	r3, [pc, #84]	; (80299d0 <prvCheckForValidListAndQueue+0x60>)
 802997c:	681b      	ldr	r3, [r3, #0]
 802997e:	2b00      	cmp	r3, #0
 8029980:	d120      	bne.n	80299c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8029982:	4814      	ldr	r0, [pc, #80]	; (80299d4 <prvCheckForValidListAndQueue+0x64>)
 8029984:	f7fd f9c6 	bl	8026d14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8029988:	4813      	ldr	r0, [pc, #76]	; (80299d8 <prvCheckForValidListAndQueue+0x68>)
 802998a:	f7fd f9c3 	bl	8026d14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802998e:	4b13      	ldr	r3, [pc, #76]	; (80299dc <prvCheckForValidListAndQueue+0x6c>)
 8029990:	4a10      	ldr	r2, [pc, #64]	; (80299d4 <prvCheckForValidListAndQueue+0x64>)
 8029992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8029994:	4b12      	ldr	r3, [pc, #72]	; (80299e0 <prvCheckForValidListAndQueue+0x70>)
 8029996:	4a10      	ldr	r2, [pc, #64]	; (80299d8 <prvCheckForValidListAndQueue+0x68>)
 8029998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802999a:	2300      	movs	r3, #0
 802999c:	9300      	str	r3, [sp, #0]
 802999e:	4b11      	ldr	r3, [pc, #68]	; (80299e4 <prvCheckForValidListAndQueue+0x74>)
 80299a0:	4a11      	ldr	r2, [pc, #68]	; (80299e8 <prvCheckForValidListAndQueue+0x78>)
 80299a2:	2110      	movs	r1, #16
 80299a4:	200a      	movs	r0, #10
 80299a6:	f7fd fad1 	bl	8026f4c <xQueueGenericCreateStatic>
 80299aa:	4602      	mov	r2, r0
 80299ac:	4b08      	ldr	r3, [pc, #32]	; (80299d0 <prvCheckForValidListAndQueue+0x60>)
 80299ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80299b0:	4b07      	ldr	r3, [pc, #28]	; (80299d0 <prvCheckForValidListAndQueue+0x60>)
 80299b2:	681b      	ldr	r3, [r3, #0]
 80299b4:	2b00      	cmp	r3, #0
 80299b6:	d005      	beq.n	80299c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80299b8:	4b05      	ldr	r3, [pc, #20]	; (80299d0 <prvCheckForValidListAndQueue+0x60>)
 80299ba:	681b      	ldr	r3, [r3, #0]
 80299bc:	490b      	ldr	r1, [pc, #44]	; (80299ec <prvCheckForValidListAndQueue+0x7c>)
 80299be:	4618      	mov	r0, r3
 80299c0:	f7fe f9e6 	bl	8027d90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80299c4:	f000 f968 	bl	8029c98 <vPortExitCritical>
}
 80299c8:	bf00      	nop
 80299ca:	46bd      	mov	sp, r7
 80299cc:	bd80      	pop	{r7, pc}
 80299ce:	bf00      	nop
 80299d0:	24002018 	.word	0x24002018
 80299d4:	24001fe8 	.word	0x24001fe8
 80299d8:	24001ffc 	.word	0x24001ffc
 80299dc:	24002010 	.word	0x24002010
 80299e0:	24002014 	.word	0x24002014
 80299e4:	240020c4 	.word	0x240020c4
 80299e8:	24002024 	.word	0x24002024
 80299ec:	0802e594 	.word	0x0802e594

080299f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80299f0:	b480      	push	{r7}
 80299f2:	b085      	sub	sp, #20
 80299f4:	af00      	add	r7, sp, #0
 80299f6:	60f8      	str	r0, [r7, #12]
 80299f8:	60b9      	str	r1, [r7, #8]
 80299fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80299fc:	68fb      	ldr	r3, [r7, #12]
 80299fe:	3b04      	subs	r3, #4
 8029a00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8029a02:	68fb      	ldr	r3, [r7, #12]
 8029a04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8029a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8029a0a:	68fb      	ldr	r3, [r7, #12]
 8029a0c:	3b04      	subs	r3, #4
 8029a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8029a10:	68bb      	ldr	r3, [r7, #8]
 8029a12:	f023 0201 	bic.w	r2, r3, #1
 8029a16:	68fb      	ldr	r3, [r7, #12]
 8029a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8029a1a:	68fb      	ldr	r3, [r7, #12]
 8029a1c:	3b04      	subs	r3, #4
 8029a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8029a20:	4a0c      	ldr	r2, [pc, #48]	; (8029a54 <pxPortInitialiseStack+0x64>)
 8029a22:	68fb      	ldr	r3, [r7, #12]
 8029a24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8029a26:	68fb      	ldr	r3, [r7, #12]
 8029a28:	3b14      	subs	r3, #20
 8029a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8029a2c:	687a      	ldr	r2, [r7, #4]
 8029a2e:	68fb      	ldr	r3, [r7, #12]
 8029a30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8029a32:	68fb      	ldr	r3, [r7, #12]
 8029a34:	3b04      	subs	r3, #4
 8029a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8029a38:	68fb      	ldr	r3, [r7, #12]
 8029a3a:	f06f 0202 	mvn.w	r2, #2
 8029a3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8029a40:	68fb      	ldr	r3, [r7, #12]
 8029a42:	3b20      	subs	r3, #32
 8029a44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8029a46:	68fb      	ldr	r3, [r7, #12]
}
 8029a48:	4618      	mov	r0, r3
 8029a4a:	3714      	adds	r7, #20
 8029a4c:	46bd      	mov	sp, r7
 8029a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a52:	4770      	bx	lr
 8029a54:	08029a59 	.word	0x08029a59

08029a58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8029a58:	b480      	push	{r7}
 8029a5a:	b085      	sub	sp, #20
 8029a5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8029a5e:	2300      	movs	r3, #0
 8029a60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8029a62:	4b11      	ldr	r3, [pc, #68]	; (8029aa8 <prvTaskExitError+0x50>)
 8029a64:	681b      	ldr	r3, [r3, #0]
 8029a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029a6a:	d009      	beq.n	8029a80 <prvTaskExitError+0x28>
 8029a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029a70:	f383 8811 	msr	BASEPRI, r3
 8029a74:	f3bf 8f6f 	isb	sy
 8029a78:	f3bf 8f4f 	dsb	sy
 8029a7c:	60fb      	str	r3, [r7, #12]
 8029a7e:	e7fe      	b.n	8029a7e <prvTaskExitError+0x26>
 8029a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029a84:	f383 8811 	msr	BASEPRI, r3
 8029a88:	f3bf 8f6f 	isb	sy
 8029a8c:	f3bf 8f4f 	dsb	sy
 8029a90:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8029a92:	bf00      	nop
 8029a94:	687b      	ldr	r3, [r7, #4]
 8029a96:	2b00      	cmp	r3, #0
 8029a98:	d0fc      	beq.n	8029a94 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8029a9a:	bf00      	nop
 8029a9c:	3714      	adds	r7, #20
 8029a9e:	46bd      	mov	sp, r7
 8029aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029aa4:	4770      	bx	lr
 8029aa6:	bf00      	nop
 8029aa8:	240006a8 	.word	0x240006a8
 8029aac:	00000000 	.word	0x00000000

08029ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8029ab0:	4b07      	ldr	r3, [pc, #28]	; (8029ad0 <pxCurrentTCBConst2>)
 8029ab2:	6819      	ldr	r1, [r3, #0]
 8029ab4:	6808      	ldr	r0, [r1, #0]
 8029ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029aba:	f380 8809 	msr	PSP, r0
 8029abe:	f3bf 8f6f 	isb	sy
 8029ac2:	f04f 0000 	mov.w	r0, #0
 8029ac6:	f380 8811 	msr	BASEPRI, r0
 8029aca:	4770      	bx	lr
 8029acc:	f3af 8000 	nop.w

08029ad0 <pxCurrentTCBConst2>:
 8029ad0:	24001ae8 	.word	0x24001ae8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8029ad4:	bf00      	nop
 8029ad6:	bf00      	nop

08029ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8029ad8:	4808      	ldr	r0, [pc, #32]	; (8029afc <prvPortStartFirstTask+0x24>)
 8029ada:	6800      	ldr	r0, [r0, #0]
 8029adc:	6800      	ldr	r0, [r0, #0]
 8029ade:	f380 8808 	msr	MSP, r0
 8029ae2:	f04f 0000 	mov.w	r0, #0
 8029ae6:	f380 8814 	msr	CONTROL, r0
 8029aea:	b662      	cpsie	i
 8029aec:	b661      	cpsie	f
 8029aee:	f3bf 8f4f 	dsb	sy
 8029af2:	f3bf 8f6f 	isb	sy
 8029af6:	df00      	svc	0
 8029af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8029afa:	bf00      	nop
 8029afc:	e000ed08 	.word	0xe000ed08

08029b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8029b00:	b580      	push	{r7, lr}
 8029b02:	b086      	sub	sp, #24
 8029b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8029b06:	4b44      	ldr	r3, [pc, #272]	; (8029c18 <xPortStartScheduler+0x118>)
 8029b08:	681b      	ldr	r3, [r3, #0]
 8029b0a:	4a44      	ldr	r2, [pc, #272]	; (8029c1c <xPortStartScheduler+0x11c>)
 8029b0c:	4293      	cmp	r3, r2
 8029b0e:	d109      	bne.n	8029b24 <xPortStartScheduler+0x24>
 8029b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029b14:	f383 8811 	msr	BASEPRI, r3
 8029b18:	f3bf 8f6f 	isb	sy
 8029b1c:	f3bf 8f4f 	dsb	sy
 8029b20:	613b      	str	r3, [r7, #16]
 8029b22:	e7fe      	b.n	8029b22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8029b24:	4b3c      	ldr	r3, [pc, #240]	; (8029c18 <xPortStartScheduler+0x118>)
 8029b26:	681b      	ldr	r3, [r3, #0]
 8029b28:	4a3d      	ldr	r2, [pc, #244]	; (8029c20 <xPortStartScheduler+0x120>)
 8029b2a:	4293      	cmp	r3, r2
 8029b2c:	d109      	bne.n	8029b42 <xPortStartScheduler+0x42>
 8029b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029b32:	f383 8811 	msr	BASEPRI, r3
 8029b36:	f3bf 8f6f 	isb	sy
 8029b3a:	f3bf 8f4f 	dsb	sy
 8029b3e:	60fb      	str	r3, [r7, #12]
 8029b40:	e7fe      	b.n	8029b40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8029b42:	4b38      	ldr	r3, [pc, #224]	; (8029c24 <xPortStartScheduler+0x124>)
 8029b44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8029b46:	697b      	ldr	r3, [r7, #20]
 8029b48:	781b      	ldrb	r3, [r3, #0]
 8029b4a:	b2db      	uxtb	r3, r3
 8029b4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8029b4e:	697b      	ldr	r3, [r7, #20]
 8029b50:	22ff      	movs	r2, #255	; 0xff
 8029b52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8029b54:	697b      	ldr	r3, [r7, #20]
 8029b56:	781b      	ldrb	r3, [r3, #0]
 8029b58:	b2db      	uxtb	r3, r3
 8029b5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8029b5c:	78fb      	ldrb	r3, [r7, #3]
 8029b5e:	b2db      	uxtb	r3, r3
 8029b60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8029b64:	b2da      	uxtb	r2, r3
 8029b66:	4b30      	ldr	r3, [pc, #192]	; (8029c28 <xPortStartScheduler+0x128>)
 8029b68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8029b6a:	4b30      	ldr	r3, [pc, #192]	; (8029c2c <xPortStartScheduler+0x12c>)
 8029b6c:	2207      	movs	r2, #7
 8029b6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8029b70:	e009      	b.n	8029b86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8029b72:	4b2e      	ldr	r3, [pc, #184]	; (8029c2c <xPortStartScheduler+0x12c>)
 8029b74:	681b      	ldr	r3, [r3, #0]
 8029b76:	3b01      	subs	r3, #1
 8029b78:	4a2c      	ldr	r2, [pc, #176]	; (8029c2c <xPortStartScheduler+0x12c>)
 8029b7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8029b7c:	78fb      	ldrb	r3, [r7, #3]
 8029b7e:	b2db      	uxtb	r3, r3
 8029b80:	005b      	lsls	r3, r3, #1
 8029b82:	b2db      	uxtb	r3, r3
 8029b84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8029b86:	78fb      	ldrb	r3, [r7, #3]
 8029b88:	b2db      	uxtb	r3, r3
 8029b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029b8e:	2b80      	cmp	r3, #128	; 0x80
 8029b90:	d0ef      	beq.n	8029b72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8029b92:	4b26      	ldr	r3, [pc, #152]	; (8029c2c <xPortStartScheduler+0x12c>)
 8029b94:	681b      	ldr	r3, [r3, #0]
 8029b96:	f1c3 0307 	rsb	r3, r3, #7
 8029b9a:	2b04      	cmp	r3, #4
 8029b9c:	d009      	beq.n	8029bb2 <xPortStartScheduler+0xb2>
 8029b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029ba2:	f383 8811 	msr	BASEPRI, r3
 8029ba6:	f3bf 8f6f 	isb	sy
 8029baa:	f3bf 8f4f 	dsb	sy
 8029bae:	60bb      	str	r3, [r7, #8]
 8029bb0:	e7fe      	b.n	8029bb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8029bb2:	4b1e      	ldr	r3, [pc, #120]	; (8029c2c <xPortStartScheduler+0x12c>)
 8029bb4:	681b      	ldr	r3, [r3, #0]
 8029bb6:	021b      	lsls	r3, r3, #8
 8029bb8:	4a1c      	ldr	r2, [pc, #112]	; (8029c2c <xPortStartScheduler+0x12c>)
 8029bba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8029bbc:	4b1b      	ldr	r3, [pc, #108]	; (8029c2c <xPortStartScheduler+0x12c>)
 8029bbe:	681b      	ldr	r3, [r3, #0]
 8029bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8029bc4:	4a19      	ldr	r2, [pc, #100]	; (8029c2c <xPortStartScheduler+0x12c>)
 8029bc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8029bc8:	687b      	ldr	r3, [r7, #4]
 8029bca:	b2da      	uxtb	r2, r3
 8029bcc:	697b      	ldr	r3, [r7, #20]
 8029bce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8029bd0:	4b17      	ldr	r3, [pc, #92]	; (8029c30 <xPortStartScheduler+0x130>)
 8029bd2:	681b      	ldr	r3, [r3, #0]
 8029bd4:	4a16      	ldr	r2, [pc, #88]	; (8029c30 <xPortStartScheduler+0x130>)
 8029bd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8029bda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8029bdc:	4b14      	ldr	r3, [pc, #80]	; (8029c30 <xPortStartScheduler+0x130>)
 8029bde:	681b      	ldr	r3, [r3, #0]
 8029be0:	4a13      	ldr	r2, [pc, #76]	; (8029c30 <xPortStartScheduler+0x130>)
 8029be2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8029be6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8029be8:	f000 f8d6 	bl	8029d98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8029bec:	4b11      	ldr	r3, [pc, #68]	; (8029c34 <xPortStartScheduler+0x134>)
 8029bee:	2200      	movs	r2, #0
 8029bf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8029bf2:	f000 f8f5 	bl	8029de0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8029bf6:	4b10      	ldr	r3, [pc, #64]	; (8029c38 <xPortStartScheduler+0x138>)
 8029bf8:	681b      	ldr	r3, [r3, #0]
 8029bfa:	4a0f      	ldr	r2, [pc, #60]	; (8029c38 <xPortStartScheduler+0x138>)
 8029bfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8029c00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8029c02:	f7ff ff69 	bl	8029ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8029c06:	f7fe fd7d 	bl	8028704 <vTaskSwitchContext>
	prvTaskExitError();
 8029c0a:	f7ff ff25 	bl	8029a58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8029c0e:	2300      	movs	r3, #0
}
 8029c10:	4618      	mov	r0, r3
 8029c12:	3718      	adds	r7, #24
 8029c14:	46bd      	mov	sp, r7
 8029c16:	bd80      	pop	{r7, pc}
 8029c18:	e000ed00 	.word	0xe000ed00
 8029c1c:	410fc271 	.word	0x410fc271
 8029c20:	410fc270 	.word	0x410fc270
 8029c24:	e000e400 	.word	0xe000e400
 8029c28:	24002114 	.word	0x24002114
 8029c2c:	24002118 	.word	0x24002118
 8029c30:	e000ed20 	.word	0xe000ed20
 8029c34:	240006a8 	.word	0x240006a8
 8029c38:	e000ef34 	.word	0xe000ef34

08029c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8029c3c:	b480      	push	{r7}
 8029c3e:	b083      	sub	sp, #12
 8029c40:	af00      	add	r7, sp, #0
 8029c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029c46:	f383 8811 	msr	BASEPRI, r3
 8029c4a:	f3bf 8f6f 	isb	sy
 8029c4e:	f3bf 8f4f 	dsb	sy
 8029c52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8029c54:	4b0e      	ldr	r3, [pc, #56]	; (8029c90 <vPortEnterCritical+0x54>)
 8029c56:	681b      	ldr	r3, [r3, #0]
 8029c58:	3301      	adds	r3, #1
 8029c5a:	4a0d      	ldr	r2, [pc, #52]	; (8029c90 <vPortEnterCritical+0x54>)
 8029c5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8029c5e:	4b0c      	ldr	r3, [pc, #48]	; (8029c90 <vPortEnterCritical+0x54>)
 8029c60:	681b      	ldr	r3, [r3, #0]
 8029c62:	2b01      	cmp	r3, #1
 8029c64:	d10e      	bne.n	8029c84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8029c66:	4b0b      	ldr	r3, [pc, #44]	; (8029c94 <vPortEnterCritical+0x58>)
 8029c68:	681b      	ldr	r3, [r3, #0]
 8029c6a:	b2db      	uxtb	r3, r3
 8029c6c:	2b00      	cmp	r3, #0
 8029c6e:	d009      	beq.n	8029c84 <vPortEnterCritical+0x48>
 8029c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029c74:	f383 8811 	msr	BASEPRI, r3
 8029c78:	f3bf 8f6f 	isb	sy
 8029c7c:	f3bf 8f4f 	dsb	sy
 8029c80:	603b      	str	r3, [r7, #0]
 8029c82:	e7fe      	b.n	8029c82 <vPortEnterCritical+0x46>
	}
}
 8029c84:	bf00      	nop
 8029c86:	370c      	adds	r7, #12
 8029c88:	46bd      	mov	sp, r7
 8029c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c8e:	4770      	bx	lr
 8029c90:	240006a8 	.word	0x240006a8
 8029c94:	e000ed04 	.word	0xe000ed04

08029c98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8029c98:	b480      	push	{r7}
 8029c9a:	b083      	sub	sp, #12
 8029c9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8029c9e:	4b11      	ldr	r3, [pc, #68]	; (8029ce4 <vPortExitCritical+0x4c>)
 8029ca0:	681b      	ldr	r3, [r3, #0]
 8029ca2:	2b00      	cmp	r3, #0
 8029ca4:	d109      	bne.n	8029cba <vPortExitCritical+0x22>
 8029ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029caa:	f383 8811 	msr	BASEPRI, r3
 8029cae:	f3bf 8f6f 	isb	sy
 8029cb2:	f3bf 8f4f 	dsb	sy
 8029cb6:	607b      	str	r3, [r7, #4]
 8029cb8:	e7fe      	b.n	8029cb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8029cba:	4b0a      	ldr	r3, [pc, #40]	; (8029ce4 <vPortExitCritical+0x4c>)
 8029cbc:	681b      	ldr	r3, [r3, #0]
 8029cbe:	3b01      	subs	r3, #1
 8029cc0:	4a08      	ldr	r2, [pc, #32]	; (8029ce4 <vPortExitCritical+0x4c>)
 8029cc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8029cc4:	4b07      	ldr	r3, [pc, #28]	; (8029ce4 <vPortExitCritical+0x4c>)
 8029cc6:	681b      	ldr	r3, [r3, #0]
 8029cc8:	2b00      	cmp	r3, #0
 8029cca:	d104      	bne.n	8029cd6 <vPortExitCritical+0x3e>
 8029ccc:	2300      	movs	r3, #0
 8029cce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8029cd0:	683b      	ldr	r3, [r7, #0]
 8029cd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8029cd6:	bf00      	nop
 8029cd8:	370c      	adds	r7, #12
 8029cda:	46bd      	mov	sp, r7
 8029cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ce0:	4770      	bx	lr
 8029ce2:	bf00      	nop
 8029ce4:	240006a8 	.word	0x240006a8
	...

08029cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8029cf0:	f3ef 8009 	mrs	r0, PSP
 8029cf4:	f3bf 8f6f 	isb	sy
 8029cf8:	4b15      	ldr	r3, [pc, #84]	; (8029d50 <pxCurrentTCBConst>)
 8029cfa:	681a      	ldr	r2, [r3, #0]
 8029cfc:	f01e 0f10 	tst.w	lr, #16
 8029d00:	bf08      	it	eq
 8029d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8029d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d0a:	6010      	str	r0, [r2, #0]
 8029d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8029d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8029d14:	f380 8811 	msr	BASEPRI, r0
 8029d18:	f3bf 8f4f 	dsb	sy
 8029d1c:	f3bf 8f6f 	isb	sy
 8029d20:	f7fe fcf0 	bl	8028704 <vTaskSwitchContext>
 8029d24:	f04f 0000 	mov.w	r0, #0
 8029d28:	f380 8811 	msr	BASEPRI, r0
 8029d2c:	bc09      	pop	{r0, r3}
 8029d2e:	6819      	ldr	r1, [r3, #0]
 8029d30:	6808      	ldr	r0, [r1, #0]
 8029d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d36:	f01e 0f10 	tst.w	lr, #16
 8029d3a:	bf08      	it	eq
 8029d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8029d40:	f380 8809 	msr	PSP, r0
 8029d44:	f3bf 8f6f 	isb	sy
 8029d48:	4770      	bx	lr
 8029d4a:	bf00      	nop
 8029d4c:	f3af 8000 	nop.w

08029d50 <pxCurrentTCBConst>:
 8029d50:	24001ae8 	.word	0x24001ae8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8029d54:	bf00      	nop
 8029d56:	bf00      	nop

08029d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8029d58:	b580      	push	{r7, lr}
 8029d5a:	b082      	sub	sp, #8
 8029d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8029d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029d62:	f383 8811 	msr	BASEPRI, r3
 8029d66:	f3bf 8f6f 	isb	sy
 8029d6a:	f3bf 8f4f 	dsb	sy
 8029d6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8029d70:	f7fe fc10 	bl	8028594 <xTaskIncrementTick>
 8029d74:	4603      	mov	r3, r0
 8029d76:	2b00      	cmp	r3, #0
 8029d78:	d003      	beq.n	8029d82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8029d7a:	4b06      	ldr	r3, [pc, #24]	; (8029d94 <SysTick_Handler+0x3c>)
 8029d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029d80:	601a      	str	r2, [r3, #0]
 8029d82:	2300      	movs	r3, #0
 8029d84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8029d86:	683b      	ldr	r3, [r7, #0]
 8029d88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8029d8c:	bf00      	nop
 8029d8e:	3708      	adds	r7, #8
 8029d90:	46bd      	mov	sp, r7
 8029d92:	bd80      	pop	{r7, pc}
 8029d94:	e000ed04 	.word	0xe000ed04

08029d98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8029d98:	b480      	push	{r7}
 8029d9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8029d9c:	4b0b      	ldr	r3, [pc, #44]	; (8029dcc <vPortSetupTimerInterrupt+0x34>)
 8029d9e:	2200      	movs	r2, #0
 8029da0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8029da2:	4b0b      	ldr	r3, [pc, #44]	; (8029dd0 <vPortSetupTimerInterrupt+0x38>)
 8029da4:	2200      	movs	r2, #0
 8029da6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8029da8:	4b0a      	ldr	r3, [pc, #40]	; (8029dd4 <vPortSetupTimerInterrupt+0x3c>)
 8029daa:	681b      	ldr	r3, [r3, #0]
 8029dac:	4a0a      	ldr	r2, [pc, #40]	; (8029dd8 <vPortSetupTimerInterrupt+0x40>)
 8029dae:	fba2 2303 	umull	r2, r3, r2, r3
 8029db2:	099b      	lsrs	r3, r3, #6
 8029db4:	4a09      	ldr	r2, [pc, #36]	; (8029ddc <vPortSetupTimerInterrupt+0x44>)
 8029db6:	3b01      	subs	r3, #1
 8029db8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8029dba:	4b04      	ldr	r3, [pc, #16]	; (8029dcc <vPortSetupTimerInterrupt+0x34>)
 8029dbc:	2207      	movs	r2, #7
 8029dbe:	601a      	str	r2, [r3, #0]
}
 8029dc0:	bf00      	nop
 8029dc2:	46bd      	mov	sp, r7
 8029dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dc8:	4770      	bx	lr
 8029dca:	bf00      	nop
 8029dcc:	e000e010 	.word	0xe000e010
 8029dd0:	e000e018 	.word	0xe000e018
 8029dd4:	24000698 	.word	0x24000698
 8029dd8:	10624dd3 	.word	0x10624dd3
 8029ddc:	e000e014 	.word	0xe000e014

08029de0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8029de0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8029df0 <vPortEnableVFP+0x10>
 8029de4:	6801      	ldr	r1, [r0, #0]
 8029de6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8029dea:	6001      	str	r1, [r0, #0]
 8029dec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8029dee:	bf00      	nop
 8029df0:	e000ed88 	.word	0xe000ed88

08029df4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8029df4:	b480      	push	{r7}
 8029df6:	b085      	sub	sp, #20
 8029df8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8029dfa:	f3ef 8305 	mrs	r3, IPSR
 8029dfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8029e00:	68fb      	ldr	r3, [r7, #12]
 8029e02:	2b0f      	cmp	r3, #15
 8029e04:	d913      	bls.n	8029e2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8029e06:	4a16      	ldr	r2, [pc, #88]	; (8029e60 <vPortValidateInterruptPriority+0x6c>)
 8029e08:	68fb      	ldr	r3, [r7, #12]
 8029e0a:	4413      	add	r3, r2
 8029e0c:	781b      	ldrb	r3, [r3, #0]
 8029e0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8029e10:	4b14      	ldr	r3, [pc, #80]	; (8029e64 <vPortValidateInterruptPriority+0x70>)
 8029e12:	781b      	ldrb	r3, [r3, #0]
 8029e14:	7afa      	ldrb	r2, [r7, #11]
 8029e16:	429a      	cmp	r2, r3
 8029e18:	d209      	bcs.n	8029e2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8029e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029e1e:	f383 8811 	msr	BASEPRI, r3
 8029e22:	f3bf 8f6f 	isb	sy
 8029e26:	f3bf 8f4f 	dsb	sy
 8029e2a:	607b      	str	r3, [r7, #4]
 8029e2c:	e7fe      	b.n	8029e2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8029e2e:	4b0e      	ldr	r3, [pc, #56]	; (8029e68 <vPortValidateInterruptPriority+0x74>)
 8029e30:	681b      	ldr	r3, [r3, #0]
 8029e32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8029e36:	4b0d      	ldr	r3, [pc, #52]	; (8029e6c <vPortValidateInterruptPriority+0x78>)
 8029e38:	681b      	ldr	r3, [r3, #0]
 8029e3a:	429a      	cmp	r2, r3
 8029e3c:	d909      	bls.n	8029e52 <vPortValidateInterruptPriority+0x5e>
 8029e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029e42:	f383 8811 	msr	BASEPRI, r3
 8029e46:	f3bf 8f6f 	isb	sy
 8029e4a:	f3bf 8f4f 	dsb	sy
 8029e4e:	603b      	str	r3, [r7, #0]
 8029e50:	e7fe      	b.n	8029e50 <vPortValidateInterruptPriority+0x5c>
	}
 8029e52:	bf00      	nop
 8029e54:	3714      	adds	r7, #20
 8029e56:	46bd      	mov	sp, r7
 8029e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e5c:	4770      	bx	lr
 8029e5e:	bf00      	nop
 8029e60:	e000e3f0 	.word	0xe000e3f0
 8029e64:	24002114 	.word	0x24002114
 8029e68:	e000ed0c 	.word	0xe000ed0c
 8029e6c:	24002118 	.word	0x24002118

08029e70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8029e70:	b580      	push	{r7, lr}
 8029e72:	b08a      	sub	sp, #40	; 0x28
 8029e74:	af00      	add	r7, sp, #0
 8029e76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8029e78:	2300      	movs	r3, #0
 8029e7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8029e7c:	f7fe fabe 	bl	80283fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8029e80:	4b57      	ldr	r3, [pc, #348]	; (8029fe0 <pvPortMalloc+0x170>)
 8029e82:	681b      	ldr	r3, [r3, #0]
 8029e84:	2b00      	cmp	r3, #0
 8029e86:	d101      	bne.n	8029e8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8029e88:	f000 f90c 	bl	802a0a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8029e8c:	4b55      	ldr	r3, [pc, #340]	; (8029fe4 <pvPortMalloc+0x174>)
 8029e8e:	681a      	ldr	r2, [r3, #0]
 8029e90:	687b      	ldr	r3, [r7, #4]
 8029e92:	4013      	ands	r3, r2
 8029e94:	2b00      	cmp	r3, #0
 8029e96:	f040 808c 	bne.w	8029fb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8029e9a:	687b      	ldr	r3, [r7, #4]
 8029e9c:	2b00      	cmp	r3, #0
 8029e9e:	d01c      	beq.n	8029eda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8029ea0:	2208      	movs	r2, #8
 8029ea2:	687b      	ldr	r3, [r7, #4]
 8029ea4:	4413      	add	r3, r2
 8029ea6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8029ea8:	687b      	ldr	r3, [r7, #4]
 8029eaa:	f003 0307 	and.w	r3, r3, #7
 8029eae:	2b00      	cmp	r3, #0
 8029eb0:	d013      	beq.n	8029eda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8029eb2:	687b      	ldr	r3, [r7, #4]
 8029eb4:	f023 0307 	bic.w	r3, r3, #7
 8029eb8:	3308      	adds	r3, #8
 8029eba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8029ebc:	687b      	ldr	r3, [r7, #4]
 8029ebe:	f003 0307 	and.w	r3, r3, #7
 8029ec2:	2b00      	cmp	r3, #0
 8029ec4:	d009      	beq.n	8029eda <pvPortMalloc+0x6a>
 8029ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029eca:	f383 8811 	msr	BASEPRI, r3
 8029ece:	f3bf 8f6f 	isb	sy
 8029ed2:	f3bf 8f4f 	dsb	sy
 8029ed6:	617b      	str	r3, [r7, #20]
 8029ed8:	e7fe      	b.n	8029ed8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8029eda:	687b      	ldr	r3, [r7, #4]
 8029edc:	2b00      	cmp	r3, #0
 8029ede:	d068      	beq.n	8029fb2 <pvPortMalloc+0x142>
 8029ee0:	4b41      	ldr	r3, [pc, #260]	; (8029fe8 <pvPortMalloc+0x178>)
 8029ee2:	681b      	ldr	r3, [r3, #0]
 8029ee4:	687a      	ldr	r2, [r7, #4]
 8029ee6:	429a      	cmp	r2, r3
 8029ee8:	d863      	bhi.n	8029fb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8029eea:	4b40      	ldr	r3, [pc, #256]	; (8029fec <pvPortMalloc+0x17c>)
 8029eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8029eee:	4b3f      	ldr	r3, [pc, #252]	; (8029fec <pvPortMalloc+0x17c>)
 8029ef0:	681b      	ldr	r3, [r3, #0]
 8029ef2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8029ef4:	e004      	b.n	8029f00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8029ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8029efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029efc:	681b      	ldr	r3, [r3, #0]
 8029efe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8029f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f02:	685b      	ldr	r3, [r3, #4]
 8029f04:	687a      	ldr	r2, [r7, #4]
 8029f06:	429a      	cmp	r2, r3
 8029f08:	d903      	bls.n	8029f12 <pvPortMalloc+0xa2>
 8029f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f0c:	681b      	ldr	r3, [r3, #0]
 8029f0e:	2b00      	cmp	r3, #0
 8029f10:	d1f1      	bne.n	8029ef6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8029f12:	4b33      	ldr	r3, [pc, #204]	; (8029fe0 <pvPortMalloc+0x170>)
 8029f14:	681b      	ldr	r3, [r3, #0]
 8029f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029f18:	429a      	cmp	r2, r3
 8029f1a:	d04a      	beq.n	8029fb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8029f1c:	6a3b      	ldr	r3, [r7, #32]
 8029f1e:	681b      	ldr	r3, [r3, #0]
 8029f20:	2208      	movs	r2, #8
 8029f22:	4413      	add	r3, r2
 8029f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8029f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f28:	681a      	ldr	r2, [r3, #0]
 8029f2a:	6a3b      	ldr	r3, [r7, #32]
 8029f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8029f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f30:	685a      	ldr	r2, [r3, #4]
 8029f32:	687b      	ldr	r3, [r7, #4]
 8029f34:	1ad2      	subs	r2, r2, r3
 8029f36:	2308      	movs	r3, #8
 8029f38:	005b      	lsls	r3, r3, #1
 8029f3a:	429a      	cmp	r2, r3
 8029f3c:	d91e      	bls.n	8029f7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8029f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029f40:	687b      	ldr	r3, [r7, #4]
 8029f42:	4413      	add	r3, r2
 8029f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8029f46:	69bb      	ldr	r3, [r7, #24]
 8029f48:	f003 0307 	and.w	r3, r3, #7
 8029f4c:	2b00      	cmp	r3, #0
 8029f4e:	d009      	beq.n	8029f64 <pvPortMalloc+0xf4>
 8029f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029f54:	f383 8811 	msr	BASEPRI, r3
 8029f58:	f3bf 8f6f 	isb	sy
 8029f5c:	f3bf 8f4f 	dsb	sy
 8029f60:	613b      	str	r3, [r7, #16]
 8029f62:	e7fe      	b.n	8029f62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8029f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f66:	685a      	ldr	r2, [r3, #4]
 8029f68:	687b      	ldr	r3, [r7, #4]
 8029f6a:	1ad2      	subs	r2, r2, r3
 8029f6c:	69bb      	ldr	r3, [r7, #24]
 8029f6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8029f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f72:	687a      	ldr	r2, [r7, #4]
 8029f74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8029f76:	69b8      	ldr	r0, [r7, #24]
 8029f78:	f000 f8f6 	bl	802a168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8029f7c:	4b1a      	ldr	r3, [pc, #104]	; (8029fe8 <pvPortMalloc+0x178>)
 8029f7e:	681a      	ldr	r2, [r3, #0]
 8029f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f82:	685b      	ldr	r3, [r3, #4]
 8029f84:	1ad3      	subs	r3, r2, r3
 8029f86:	4a18      	ldr	r2, [pc, #96]	; (8029fe8 <pvPortMalloc+0x178>)
 8029f88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8029f8a:	4b17      	ldr	r3, [pc, #92]	; (8029fe8 <pvPortMalloc+0x178>)
 8029f8c:	681a      	ldr	r2, [r3, #0]
 8029f8e:	4b18      	ldr	r3, [pc, #96]	; (8029ff0 <pvPortMalloc+0x180>)
 8029f90:	681b      	ldr	r3, [r3, #0]
 8029f92:	429a      	cmp	r2, r3
 8029f94:	d203      	bcs.n	8029f9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8029f96:	4b14      	ldr	r3, [pc, #80]	; (8029fe8 <pvPortMalloc+0x178>)
 8029f98:	681b      	ldr	r3, [r3, #0]
 8029f9a:	4a15      	ldr	r2, [pc, #84]	; (8029ff0 <pvPortMalloc+0x180>)
 8029f9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8029f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fa0:	685a      	ldr	r2, [r3, #4]
 8029fa2:	4b10      	ldr	r3, [pc, #64]	; (8029fe4 <pvPortMalloc+0x174>)
 8029fa4:	681b      	ldr	r3, [r3, #0]
 8029fa6:	431a      	orrs	r2, r3
 8029fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029faa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8029fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fae:	2200      	movs	r2, #0
 8029fb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8029fb2:	f7fe fa31 	bl	8028418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8029fb6:	69fb      	ldr	r3, [r7, #28]
 8029fb8:	f003 0307 	and.w	r3, r3, #7
 8029fbc:	2b00      	cmp	r3, #0
 8029fbe:	d009      	beq.n	8029fd4 <pvPortMalloc+0x164>
 8029fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029fc4:	f383 8811 	msr	BASEPRI, r3
 8029fc8:	f3bf 8f6f 	isb	sy
 8029fcc:	f3bf 8f4f 	dsb	sy
 8029fd0:	60fb      	str	r3, [r7, #12]
 8029fd2:	e7fe      	b.n	8029fd2 <pvPortMalloc+0x162>
	return pvReturn;
 8029fd4:	69fb      	ldr	r3, [r7, #28]
}
 8029fd6:	4618      	mov	r0, r3
 8029fd8:	3728      	adds	r7, #40	; 0x28
 8029fda:	46bd      	mov	sp, r7
 8029fdc:	bd80      	pop	{r7, pc}
 8029fde:	bf00      	nop
 8029fe0:	24005d24 	.word	0x24005d24
 8029fe4:	24005d30 	.word	0x24005d30
 8029fe8:	24005d28 	.word	0x24005d28
 8029fec:	24005d1c 	.word	0x24005d1c
 8029ff0:	24005d2c 	.word	0x24005d2c

08029ff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8029ff4:	b580      	push	{r7, lr}
 8029ff6:	b086      	sub	sp, #24
 8029ff8:	af00      	add	r7, sp, #0
 8029ffa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8029ffc:	687b      	ldr	r3, [r7, #4]
 8029ffe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802a000:	687b      	ldr	r3, [r7, #4]
 802a002:	2b00      	cmp	r3, #0
 802a004:	d046      	beq.n	802a094 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 802a006:	2308      	movs	r3, #8
 802a008:	425b      	negs	r3, r3
 802a00a:	697a      	ldr	r2, [r7, #20]
 802a00c:	4413      	add	r3, r2
 802a00e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802a010:	697b      	ldr	r3, [r7, #20]
 802a012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 802a014:	693b      	ldr	r3, [r7, #16]
 802a016:	685a      	ldr	r2, [r3, #4]
 802a018:	4b20      	ldr	r3, [pc, #128]	; (802a09c <vPortFree+0xa8>)
 802a01a:	681b      	ldr	r3, [r3, #0]
 802a01c:	4013      	ands	r3, r2
 802a01e:	2b00      	cmp	r3, #0
 802a020:	d109      	bne.n	802a036 <vPortFree+0x42>
 802a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a026:	f383 8811 	msr	BASEPRI, r3
 802a02a:	f3bf 8f6f 	isb	sy
 802a02e:	f3bf 8f4f 	dsb	sy
 802a032:	60fb      	str	r3, [r7, #12]
 802a034:	e7fe      	b.n	802a034 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 802a036:	693b      	ldr	r3, [r7, #16]
 802a038:	681b      	ldr	r3, [r3, #0]
 802a03a:	2b00      	cmp	r3, #0
 802a03c:	d009      	beq.n	802a052 <vPortFree+0x5e>
 802a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a042:	f383 8811 	msr	BASEPRI, r3
 802a046:	f3bf 8f6f 	isb	sy
 802a04a:	f3bf 8f4f 	dsb	sy
 802a04e:	60bb      	str	r3, [r7, #8]
 802a050:	e7fe      	b.n	802a050 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 802a052:	693b      	ldr	r3, [r7, #16]
 802a054:	685a      	ldr	r2, [r3, #4]
 802a056:	4b11      	ldr	r3, [pc, #68]	; (802a09c <vPortFree+0xa8>)
 802a058:	681b      	ldr	r3, [r3, #0]
 802a05a:	4013      	ands	r3, r2
 802a05c:	2b00      	cmp	r3, #0
 802a05e:	d019      	beq.n	802a094 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 802a060:	693b      	ldr	r3, [r7, #16]
 802a062:	681b      	ldr	r3, [r3, #0]
 802a064:	2b00      	cmp	r3, #0
 802a066:	d115      	bne.n	802a094 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 802a068:	693b      	ldr	r3, [r7, #16]
 802a06a:	685a      	ldr	r2, [r3, #4]
 802a06c:	4b0b      	ldr	r3, [pc, #44]	; (802a09c <vPortFree+0xa8>)
 802a06e:	681b      	ldr	r3, [r3, #0]
 802a070:	43db      	mvns	r3, r3
 802a072:	401a      	ands	r2, r3
 802a074:	693b      	ldr	r3, [r7, #16]
 802a076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 802a078:	f7fe f9c0 	bl	80283fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802a07c:	693b      	ldr	r3, [r7, #16]
 802a07e:	685a      	ldr	r2, [r3, #4]
 802a080:	4b07      	ldr	r3, [pc, #28]	; (802a0a0 <vPortFree+0xac>)
 802a082:	681b      	ldr	r3, [r3, #0]
 802a084:	4413      	add	r3, r2
 802a086:	4a06      	ldr	r2, [pc, #24]	; (802a0a0 <vPortFree+0xac>)
 802a088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802a08a:	6938      	ldr	r0, [r7, #16]
 802a08c:	f000 f86c 	bl	802a168 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 802a090:	f7fe f9c2 	bl	8028418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802a094:	bf00      	nop
 802a096:	3718      	adds	r7, #24
 802a098:	46bd      	mov	sp, r7
 802a09a:	bd80      	pop	{r7, pc}
 802a09c:	24005d30 	.word	0x24005d30
 802a0a0:	24005d28 	.word	0x24005d28

0802a0a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 802a0a4:	b480      	push	{r7}
 802a0a6:	b085      	sub	sp, #20
 802a0a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802a0aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 802a0ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 802a0b0:	4b27      	ldr	r3, [pc, #156]	; (802a150 <prvHeapInit+0xac>)
 802a0b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 802a0b4:	68fb      	ldr	r3, [r7, #12]
 802a0b6:	f003 0307 	and.w	r3, r3, #7
 802a0ba:	2b00      	cmp	r3, #0
 802a0bc:	d00c      	beq.n	802a0d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802a0be:	68fb      	ldr	r3, [r7, #12]
 802a0c0:	3307      	adds	r3, #7
 802a0c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802a0c4:	68fb      	ldr	r3, [r7, #12]
 802a0c6:	f023 0307 	bic.w	r3, r3, #7
 802a0ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802a0cc:	68ba      	ldr	r2, [r7, #8]
 802a0ce:	68fb      	ldr	r3, [r7, #12]
 802a0d0:	1ad3      	subs	r3, r2, r3
 802a0d2:	4a1f      	ldr	r2, [pc, #124]	; (802a150 <prvHeapInit+0xac>)
 802a0d4:	4413      	add	r3, r2
 802a0d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 802a0d8:	68fb      	ldr	r3, [r7, #12]
 802a0da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802a0dc:	4a1d      	ldr	r2, [pc, #116]	; (802a154 <prvHeapInit+0xb0>)
 802a0de:	687b      	ldr	r3, [r7, #4]
 802a0e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 802a0e2:	4b1c      	ldr	r3, [pc, #112]	; (802a154 <prvHeapInit+0xb0>)
 802a0e4:	2200      	movs	r2, #0
 802a0e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 802a0e8:	687b      	ldr	r3, [r7, #4]
 802a0ea:	68ba      	ldr	r2, [r7, #8]
 802a0ec:	4413      	add	r3, r2
 802a0ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 802a0f0:	2208      	movs	r2, #8
 802a0f2:	68fb      	ldr	r3, [r7, #12]
 802a0f4:	1a9b      	subs	r3, r3, r2
 802a0f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802a0f8:	68fb      	ldr	r3, [r7, #12]
 802a0fa:	f023 0307 	bic.w	r3, r3, #7
 802a0fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 802a100:	68fb      	ldr	r3, [r7, #12]
 802a102:	4a15      	ldr	r2, [pc, #84]	; (802a158 <prvHeapInit+0xb4>)
 802a104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 802a106:	4b14      	ldr	r3, [pc, #80]	; (802a158 <prvHeapInit+0xb4>)
 802a108:	681b      	ldr	r3, [r3, #0]
 802a10a:	2200      	movs	r2, #0
 802a10c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802a10e:	4b12      	ldr	r3, [pc, #72]	; (802a158 <prvHeapInit+0xb4>)
 802a110:	681b      	ldr	r3, [r3, #0]
 802a112:	2200      	movs	r2, #0
 802a114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 802a116:	687b      	ldr	r3, [r7, #4]
 802a118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802a11a:	683b      	ldr	r3, [r7, #0]
 802a11c:	68fa      	ldr	r2, [r7, #12]
 802a11e:	1ad2      	subs	r2, r2, r3
 802a120:	683b      	ldr	r3, [r7, #0]
 802a122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 802a124:	4b0c      	ldr	r3, [pc, #48]	; (802a158 <prvHeapInit+0xb4>)
 802a126:	681a      	ldr	r2, [r3, #0]
 802a128:	683b      	ldr	r3, [r7, #0]
 802a12a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802a12c:	683b      	ldr	r3, [r7, #0]
 802a12e:	685b      	ldr	r3, [r3, #4]
 802a130:	4a0a      	ldr	r2, [pc, #40]	; (802a15c <prvHeapInit+0xb8>)
 802a132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802a134:	683b      	ldr	r3, [r7, #0]
 802a136:	685b      	ldr	r3, [r3, #4]
 802a138:	4a09      	ldr	r2, [pc, #36]	; (802a160 <prvHeapInit+0xbc>)
 802a13a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802a13c:	4b09      	ldr	r3, [pc, #36]	; (802a164 <prvHeapInit+0xc0>)
 802a13e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 802a142:	601a      	str	r2, [r3, #0]
}
 802a144:	bf00      	nop
 802a146:	3714      	adds	r7, #20
 802a148:	46bd      	mov	sp, r7
 802a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a14e:	4770      	bx	lr
 802a150:	2400211c 	.word	0x2400211c
 802a154:	24005d1c 	.word	0x24005d1c
 802a158:	24005d24 	.word	0x24005d24
 802a15c:	24005d2c 	.word	0x24005d2c
 802a160:	24005d28 	.word	0x24005d28
 802a164:	24005d30 	.word	0x24005d30

0802a168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 802a168:	b480      	push	{r7}
 802a16a:	b085      	sub	sp, #20
 802a16c:	af00      	add	r7, sp, #0
 802a16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 802a170:	4b28      	ldr	r3, [pc, #160]	; (802a214 <prvInsertBlockIntoFreeList+0xac>)
 802a172:	60fb      	str	r3, [r7, #12]
 802a174:	e002      	b.n	802a17c <prvInsertBlockIntoFreeList+0x14>
 802a176:	68fb      	ldr	r3, [r7, #12]
 802a178:	681b      	ldr	r3, [r3, #0]
 802a17a:	60fb      	str	r3, [r7, #12]
 802a17c:	68fb      	ldr	r3, [r7, #12]
 802a17e:	681b      	ldr	r3, [r3, #0]
 802a180:	687a      	ldr	r2, [r7, #4]
 802a182:	429a      	cmp	r2, r3
 802a184:	d8f7      	bhi.n	802a176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 802a186:	68fb      	ldr	r3, [r7, #12]
 802a188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802a18a:	68fb      	ldr	r3, [r7, #12]
 802a18c:	685b      	ldr	r3, [r3, #4]
 802a18e:	68ba      	ldr	r2, [r7, #8]
 802a190:	4413      	add	r3, r2
 802a192:	687a      	ldr	r2, [r7, #4]
 802a194:	429a      	cmp	r2, r3
 802a196:	d108      	bne.n	802a1aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 802a198:	68fb      	ldr	r3, [r7, #12]
 802a19a:	685a      	ldr	r2, [r3, #4]
 802a19c:	687b      	ldr	r3, [r7, #4]
 802a19e:	685b      	ldr	r3, [r3, #4]
 802a1a0:	441a      	add	r2, r3
 802a1a2:	68fb      	ldr	r3, [r7, #12]
 802a1a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 802a1a6:	68fb      	ldr	r3, [r7, #12]
 802a1a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802a1aa:	687b      	ldr	r3, [r7, #4]
 802a1ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802a1ae:	687b      	ldr	r3, [r7, #4]
 802a1b0:	685b      	ldr	r3, [r3, #4]
 802a1b2:	68ba      	ldr	r2, [r7, #8]
 802a1b4:	441a      	add	r2, r3
 802a1b6:	68fb      	ldr	r3, [r7, #12]
 802a1b8:	681b      	ldr	r3, [r3, #0]
 802a1ba:	429a      	cmp	r2, r3
 802a1bc:	d118      	bne.n	802a1f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802a1be:	68fb      	ldr	r3, [r7, #12]
 802a1c0:	681a      	ldr	r2, [r3, #0]
 802a1c2:	4b15      	ldr	r3, [pc, #84]	; (802a218 <prvInsertBlockIntoFreeList+0xb0>)
 802a1c4:	681b      	ldr	r3, [r3, #0]
 802a1c6:	429a      	cmp	r2, r3
 802a1c8:	d00d      	beq.n	802a1e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802a1ca:	687b      	ldr	r3, [r7, #4]
 802a1cc:	685a      	ldr	r2, [r3, #4]
 802a1ce:	68fb      	ldr	r3, [r7, #12]
 802a1d0:	681b      	ldr	r3, [r3, #0]
 802a1d2:	685b      	ldr	r3, [r3, #4]
 802a1d4:	441a      	add	r2, r3
 802a1d6:	687b      	ldr	r3, [r7, #4]
 802a1d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802a1da:	68fb      	ldr	r3, [r7, #12]
 802a1dc:	681b      	ldr	r3, [r3, #0]
 802a1de:	681a      	ldr	r2, [r3, #0]
 802a1e0:	687b      	ldr	r3, [r7, #4]
 802a1e2:	601a      	str	r2, [r3, #0]
 802a1e4:	e008      	b.n	802a1f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 802a1e6:	4b0c      	ldr	r3, [pc, #48]	; (802a218 <prvInsertBlockIntoFreeList+0xb0>)
 802a1e8:	681a      	ldr	r2, [r3, #0]
 802a1ea:	687b      	ldr	r3, [r7, #4]
 802a1ec:	601a      	str	r2, [r3, #0]
 802a1ee:	e003      	b.n	802a1f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 802a1f0:	68fb      	ldr	r3, [r7, #12]
 802a1f2:	681a      	ldr	r2, [r3, #0]
 802a1f4:	687b      	ldr	r3, [r7, #4]
 802a1f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 802a1f8:	68fa      	ldr	r2, [r7, #12]
 802a1fa:	687b      	ldr	r3, [r7, #4]
 802a1fc:	429a      	cmp	r2, r3
 802a1fe:	d002      	beq.n	802a206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 802a200:	68fb      	ldr	r3, [r7, #12]
 802a202:	687a      	ldr	r2, [r7, #4]
 802a204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802a206:	bf00      	nop
 802a208:	3714      	adds	r7, #20
 802a20a:	46bd      	mov	sp, r7
 802a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a210:	4770      	bx	lr
 802a212:	bf00      	nop
 802a214:	24005d1c 	.word	0x24005d1c
 802a218:	24005d24 	.word	0x24005d24
 802a21c:	00000000 	.word	0x00000000

0802a220 <cos>:
 802a220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a222:	eeb0 7b40 	vmov.f64	d7, d0
 802a226:	ee17 3a90 	vmov	r3, s15
 802a22a:	4a19      	ldr	r2, [pc, #100]	; (802a290 <cos+0x70>)
 802a22c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a230:	4293      	cmp	r3, r2
 802a232:	dc04      	bgt.n	802a23e <cos+0x1e>
 802a234:	ed9f 1b14 	vldr	d1, [pc, #80]	; 802a288 <cos+0x68>
 802a238:	f001 fd62 	bl	802bd00 <__kernel_cos>
 802a23c:	e004      	b.n	802a248 <cos+0x28>
 802a23e:	4a15      	ldr	r2, [pc, #84]	; (802a294 <cos+0x74>)
 802a240:	4293      	cmp	r3, r2
 802a242:	dd04      	ble.n	802a24e <cos+0x2e>
 802a244:	ee30 0b40 	vsub.f64	d0, d0, d0
 802a248:	b005      	add	sp, #20
 802a24a:	f85d fb04 	ldr.w	pc, [sp], #4
 802a24e:	4668      	mov	r0, sp
 802a250:	f001 f952 	bl	802b4f8 <__ieee754_rem_pio2>
 802a254:	f000 0003 	and.w	r0, r0, #3
 802a258:	2801      	cmp	r0, #1
 802a25a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802a25e:	ed9d 0b00 	vldr	d0, [sp]
 802a262:	d007      	beq.n	802a274 <cos+0x54>
 802a264:	2802      	cmp	r0, #2
 802a266:	d00a      	beq.n	802a27e <cos+0x5e>
 802a268:	2800      	cmp	r0, #0
 802a26a:	d0e5      	beq.n	802a238 <cos+0x18>
 802a26c:	2001      	movs	r0, #1
 802a26e:	f002 f84f 	bl	802c310 <__kernel_sin>
 802a272:	e7e9      	b.n	802a248 <cos+0x28>
 802a274:	f002 f84c 	bl	802c310 <__kernel_sin>
 802a278:	eeb1 0b40 	vneg.f64	d0, d0
 802a27c:	e7e4      	b.n	802a248 <cos+0x28>
 802a27e:	f001 fd3f 	bl	802bd00 <__kernel_cos>
 802a282:	e7f9      	b.n	802a278 <cos+0x58>
 802a284:	f3af 8000 	nop.w
	...
 802a290:	3fe921fb 	.word	0x3fe921fb
 802a294:	7fefffff 	.word	0x7fefffff

0802a298 <floor>:
 802a298:	ee10 1a90 	vmov	r1, s1
 802a29c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802a2a0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 802a2a4:	2b13      	cmp	r3, #19
 802a2a6:	b530      	push	{r4, r5, lr}
 802a2a8:	ee10 0a10 	vmov	r0, s0
 802a2ac:	ee10 5a10 	vmov	r5, s0
 802a2b0:	dc33      	bgt.n	802a31a <floor+0x82>
 802a2b2:	2b00      	cmp	r3, #0
 802a2b4:	da17      	bge.n	802a2e6 <floor+0x4e>
 802a2b6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 802a378 <floor+0xe0>
 802a2ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 802a2be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802a2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2c6:	dd09      	ble.n	802a2dc <floor+0x44>
 802a2c8:	2900      	cmp	r1, #0
 802a2ca:	da50      	bge.n	802a36e <floor+0xd6>
 802a2cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802a2d0:	4a2b      	ldr	r2, [pc, #172]	; (802a380 <floor+0xe8>)
 802a2d2:	4303      	orrs	r3, r0
 802a2d4:	2000      	movs	r0, #0
 802a2d6:	4283      	cmp	r3, r0
 802a2d8:	bf18      	it	ne
 802a2da:	4611      	movne	r1, r2
 802a2dc:	460b      	mov	r3, r1
 802a2de:	4602      	mov	r2, r0
 802a2e0:	ec43 2b10 	vmov	d0, r2, r3
 802a2e4:	e020      	b.n	802a328 <floor+0x90>
 802a2e6:	4a27      	ldr	r2, [pc, #156]	; (802a384 <floor+0xec>)
 802a2e8:	411a      	asrs	r2, r3
 802a2ea:	ea01 0402 	and.w	r4, r1, r2
 802a2ee:	4304      	orrs	r4, r0
 802a2f0:	d01a      	beq.n	802a328 <floor+0x90>
 802a2f2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 802a378 <floor+0xe0>
 802a2f6:	ee30 0b07 	vadd.f64	d0, d0, d7
 802a2fa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802a2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a302:	ddeb      	ble.n	802a2dc <floor+0x44>
 802a304:	2900      	cmp	r1, #0
 802a306:	bfbe      	ittt	lt
 802a308:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 802a30c:	fa40 f303 	asrlt.w	r3, r0, r3
 802a310:	18c9      	addlt	r1, r1, r3
 802a312:	ea21 0102 	bic.w	r1, r1, r2
 802a316:	2000      	movs	r0, #0
 802a318:	e7e0      	b.n	802a2dc <floor+0x44>
 802a31a:	2b33      	cmp	r3, #51	; 0x33
 802a31c:	dd05      	ble.n	802a32a <floor+0x92>
 802a31e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802a322:	d101      	bne.n	802a328 <floor+0x90>
 802a324:	ee30 0b00 	vadd.f64	d0, d0, d0
 802a328:	bd30      	pop	{r4, r5, pc}
 802a32a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 802a32e:	f04f 32ff 	mov.w	r2, #4294967295
 802a332:	40e2      	lsrs	r2, r4
 802a334:	4202      	tst	r2, r0
 802a336:	d0f7      	beq.n	802a328 <floor+0x90>
 802a338:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 802a378 <floor+0xe0>
 802a33c:	ee30 0b07 	vadd.f64	d0, d0, d7
 802a340:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802a344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a348:	ddc8      	ble.n	802a2dc <floor+0x44>
 802a34a:	2900      	cmp	r1, #0
 802a34c:	da02      	bge.n	802a354 <floor+0xbc>
 802a34e:	2b14      	cmp	r3, #20
 802a350:	d103      	bne.n	802a35a <floor+0xc2>
 802a352:	3101      	adds	r1, #1
 802a354:	ea20 0002 	bic.w	r0, r0, r2
 802a358:	e7c0      	b.n	802a2dc <floor+0x44>
 802a35a:	2401      	movs	r4, #1
 802a35c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802a360:	fa04 f303 	lsl.w	r3, r4, r3
 802a364:	4418      	add	r0, r3
 802a366:	42a8      	cmp	r0, r5
 802a368:	bf38      	it	cc
 802a36a:	1909      	addcc	r1, r1, r4
 802a36c:	e7f2      	b.n	802a354 <floor+0xbc>
 802a36e:	2000      	movs	r0, #0
 802a370:	4601      	mov	r1, r0
 802a372:	e7b3      	b.n	802a2dc <floor+0x44>
 802a374:	f3af 8000 	nop.w
 802a378:	8800759c 	.word	0x8800759c
 802a37c:	7e37e43c 	.word	0x7e37e43c
 802a380:	bff00000 	.word	0xbff00000
 802a384:	000fffff 	.word	0x000fffff

0802a388 <sin>:
 802a388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a38a:	eeb0 7b40 	vmov.f64	d7, d0
 802a38e:	ee17 3a90 	vmov	r3, s15
 802a392:	4a19      	ldr	r2, [pc, #100]	; (802a3f8 <sin+0x70>)
 802a394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a398:	4293      	cmp	r3, r2
 802a39a:	dc05      	bgt.n	802a3a8 <sin+0x20>
 802a39c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 802a3f0 <sin+0x68>
 802a3a0:	2000      	movs	r0, #0
 802a3a2:	f001 ffb5 	bl	802c310 <__kernel_sin>
 802a3a6:	e004      	b.n	802a3b2 <sin+0x2a>
 802a3a8:	4a14      	ldr	r2, [pc, #80]	; (802a3fc <sin+0x74>)
 802a3aa:	4293      	cmp	r3, r2
 802a3ac:	dd04      	ble.n	802a3b8 <sin+0x30>
 802a3ae:	ee30 0b40 	vsub.f64	d0, d0, d0
 802a3b2:	b005      	add	sp, #20
 802a3b4:	f85d fb04 	ldr.w	pc, [sp], #4
 802a3b8:	4668      	mov	r0, sp
 802a3ba:	f001 f89d 	bl	802b4f8 <__ieee754_rem_pio2>
 802a3be:	f000 0003 	and.w	r0, r0, #3
 802a3c2:	2801      	cmp	r0, #1
 802a3c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 802a3c8:	ed9d 0b00 	vldr	d0, [sp]
 802a3cc:	d004      	beq.n	802a3d8 <sin+0x50>
 802a3ce:	2802      	cmp	r0, #2
 802a3d0:	d005      	beq.n	802a3de <sin+0x56>
 802a3d2:	b950      	cbnz	r0, 802a3ea <sin+0x62>
 802a3d4:	2001      	movs	r0, #1
 802a3d6:	e7e4      	b.n	802a3a2 <sin+0x1a>
 802a3d8:	f001 fc92 	bl	802bd00 <__kernel_cos>
 802a3dc:	e7e9      	b.n	802a3b2 <sin+0x2a>
 802a3de:	2001      	movs	r0, #1
 802a3e0:	f001 ff96 	bl	802c310 <__kernel_sin>
 802a3e4:	eeb1 0b40 	vneg.f64	d0, d0
 802a3e8:	e7e3      	b.n	802a3b2 <sin+0x2a>
 802a3ea:	f001 fc89 	bl	802bd00 <__kernel_cos>
 802a3ee:	e7f9      	b.n	802a3e4 <sin+0x5c>
	...
 802a3f8:	3fe921fb 	.word	0x3fe921fb
 802a3fc:	7fefffff 	.word	0x7fefffff

0802a400 <cosf>:
 802a400:	ee10 3a10 	vmov	r3, s0
 802a404:	b507      	push	{r0, r1, r2, lr}
 802a406:	4a1c      	ldr	r2, [pc, #112]	; (802a478 <cosf+0x78>)
 802a408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a40c:	4293      	cmp	r3, r2
 802a40e:	dc04      	bgt.n	802a41a <cosf+0x1a>
 802a410:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802a47c <cosf+0x7c>
 802a414:	f001 ffd4 	bl	802c3c0 <__kernel_cosf>
 802a418:	e004      	b.n	802a424 <cosf+0x24>
 802a41a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802a41e:	db04      	blt.n	802a42a <cosf+0x2a>
 802a420:	ee30 0a40 	vsub.f32	s0, s0, s0
 802a424:	b003      	add	sp, #12
 802a426:	f85d fb04 	ldr.w	pc, [sp], #4
 802a42a:	4668      	mov	r0, sp
 802a42c:	f001 fb36 	bl	802ba9c <__ieee754_rem_pio2f>
 802a430:	f000 0003 	and.w	r0, r0, #3
 802a434:	2801      	cmp	r0, #1
 802a436:	d007      	beq.n	802a448 <cosf+0x48>
 802a438:	2802      	cmp	r0, #2
 802a43a:	d00e      	beq.n	802a45a <cosf+0x5a>
 802a43c:	b9a0      	cbnz	r0, 802a468 <cosf+0x68>
 802a43e:	eddd 0a01 	vldr	s1, [sp, #4]
 802a442:	ed9d 0a00 	vldr	s0, [sp]
 802a446:	e7e5      	b.n	802a414 <cosf+0x14>
 802a448:	eddd 0a01 	vldr	s1, [sp, #4]
 802a44c:	ed9d 0a00 	vldr	s0, [sp]
 802a450:	f002 fa96 	bl	802c980 <__kernel_sinf>
 802a454:	eeb1 0a40 	vneg.f32	s0, s0
 802a458:	e7e4      	b.n	802a424 <cosf+0x24>
 802a45a:	eddd 0a01 	vldr	s1, [sp, #4]
 802a45e:	ed9d 0a00 	vldr	s0, [sp]
 802a462:	f001 ffad 	bl	802c3c0 <__kernel_cosf>
 802a466:	e7f5      	b.n	802a454 <cosf+0x54>
 802a468:	2001      	movs	r0, #1
 802a46a:	eddd 0a01 	vldr	s1, [sp, #4]
 802a46e:	ed9d 0a00 	vldr	s0, [sp]
 802a472:	f002 fa85 	bl	802c980 <__kernel_sinf>
 802a476:	e7d5      	b.n	802a424 <cosf+0x24>
 802a478:	3f490fd8 	.word	0x3f490fd8
 802a47c:	00000000 	.word	0x00000000

0802a480 <sinf>:
 802a480:	ee10 3a10 	vmov	r3, s0
 802a484:	b507      	push	{r0, r1, r2, lr}
 802a486:	4a1d      	ldr	r2, [pc, #116]	; (802a4fc <sinf+0x7c>)
 802a488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a48c:	4293      	cmp	r3, r2
 802a48e:	dc05      	bgt.n	802a49c <sinf+0x1c>
 802a490:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802a500 <sinf+0x80>
 802a494:	2000      	movs	r0, #0
 802a496:	f002 fa73 	bl	802c980 <__kernel_sinf>
 802a49a:	e004      	b.n	802a4a6 <sinf+0x26>
 802a49c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802a4a0:	db04      	blt.n	802a4ac <sinf+0x2c>
 802a4a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 802a4a6:	b003      	add	sp, #12
 802a4a8:	f85d fb04 	ldr.w	pc, [sp], #4
 802a4ac:	4668      	mov	r0, sp
 802a4ae:	f001 faf5 	bl	802ba9c <__ieee754_rem_pio2f>
 802a4b2:	f000 0003 	and.w	r0, r0, #3
 802a4b6:	2801      	cmp	r0, #1
 802a4b8:	d008      	beq.n	802a4cc <sinf+0x4c>
 802a4ba:	2802      	cmp	r0, #2
 802a4bc:	d00d      	beq.n	802a4da <sinf+0x5a>
 802a4be:	b9b0      	cbnz	r0, 802a4ee <sinf+0x6e>
 802a4c0:	2001      	movs	r0, #1
 802a4c2:	eddd 0a01 	vldr	s1, [sp, #4]
 802a4c6:	ed9d 0a00 	vldr	s0, [sp]
 802a4ca:	e7e4      	b.n	802a496 <sinf+0x16>
 802a4cc:	eddd 0a01 	vldr	s1, [sp, #4]
 802a4d0:	ed9d 0a00 	vldr	s0, [sp]
 802a4d4:	f001 ff74 	bl	802c3c0 <__kernel_cosf>
 802a4d8:	e7e5      	b.n	802a4a6 <sinf+0x26>
 802a4da:	2001      	movs	r0, #1
 802a4dc:	eddd 0a01 	vldr	s1, [sp, #4]
 802a4e0:	ed9d 0a00 	vldr	s0, [sp]
 802a4e4:	f002 fa4c 	bl	802c980 <__kernel_sinf>
 802a4e8:	eeb1 0a40 	vneg.f32	s0, s0
 802a4ec:	e7db      	b.n	802a4a6 <sinf+0x26>
 802a4ee:	eddd 0a01 	vldr	s1, [sp, #4]
 802a4f2:	ed9d 0a00 	vldr	s0, [sp]
 802a4f6:	f001 ff63 	bl	802c3c0 <__kernel_cosf>
 802a4fa:	e7f5      	b.n	802a4e8 <sinf+0x68>
 802a4fc:	3f490fd8 	.word	0x3f490fd8
 802a500:	00000000 	.word	0x00000000

0802a504 <atan2>:
 802a504:	f000 ba78 	b.w	802a9f8 <__ieee754_atan2>

0802a508 <fmod>:
 802a508:	b500      	push	{lr}
 802a50a:	ed2d 8b04 	vpush	{d8-d9}
 802a50e:	eeb0 8b40 	vmov.f64	d8, d0
 802a512:	eeb0 9b41 	vmov.f64	d9, d1
 802a516:	b08b      	sub	sp, #44	; 0x2c
 802a518:	f000 fb50 	bl	802abbc <__ieee754_fmod>
 802a51c:	4b22      	ldr	r3, [pc, #136]	; (802a5a8 <fmod+0xa0>)
 802a51e:	f993 3000 	ldrsb.w	r3, [r3]
 802a522:	1c5a      	adds	r2, r3, #1
 802a524:	d029      	beq.n	802a57a <fmod+0x72>
 802a526:	eeb4 9b49 	vcmp.f64	d9, d9
 802a52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a52e:	d624      	bvs.n	802a57a <fmod+0x72>
 802a530:	eeb4 8b48 	vcmp.f64	d8, d8
 802a534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a538:	d61f      	bvs.n	802a57a <fmod+0x72>
 802a53a:	ed9f 7b19 	vldr	d7, [pc, #100]	; 802a5a0 <fmod+0x98>
 802a53e:	eeb4 9b47 	vcmp.f64	d9, d7
 802a542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a546:	d118      	bne.n	802a57a <fmod+0x72>
 802a548:	2201      	movs	r2, #1
 802a54a:	9200      	str	r2, [sp, #0]
 802a54c:	4a17      	ldr	r2, [pc, #92]	; (802a5ac <fmod+0xa4>)
 802a54e:	9201      	str	r2, [sp, #4]
 802a550:	2200      	movs	r2, #0
 802a552:	ed8d 8b02 	vstr	d8, [sp, #8]
 802a556:	ed8d 9b04 	vstr	d9, [sp, #16]
 802a55a:	9208      	str	r2, [sp, #32]
 802a55c:	b993      	cbnz	r3, 802a584 <fmod+0x7c>
 802a55e:	ed8d 8b06 	vstr	d8, [sp, #24]
 802a562:	4668      	mov	r0, sp
 802a564:	f002 fb5f 	bl	802cc26 <matherr>
 802a568:	b190      	cbz	r0, 802a590 <fmod+0x88>
 802a56a:	9b08      	ldr	r3, [sp, #32]
 802a56c:	b11b      	cbz	r3, 802a576 <fmod+0x6e>
 802a56e:	f002 fe27 	bl	802d1c0 <__errno>
 802a572:	9b08      	ldr	r3, [sp, #32]
 802a574:	6003      	str	r3, [r0, #0]
 802a576:	ed9d 0b06 	vldr	d0, [sp, #24]
 802a57a:	b00b      	add	sp, #44	; 0x2c
 802a57c:	ecbd 8b04 	vpop	{d8-d9}
 802a580:	f85d fb04 	ldr.w	pc, [sp], #4
 802a584:	2b02      	cmp	r3, #2
 802a586:	ee87 6b07 	vdiv.f64	d6, d7, d7
 802a58a:	ed8d 6b06 	vstr	d6, [sp, #24]
 802a58e:	d1e8      	bne.n	802a562 <fmod+0x5a>
 802a590:	f002 fe16 	bl	802d1c0 <__errno>
 802a594:	2321      	movs	r3, #33	; 0x21
 802a596:	6003      	str	r3, [r0, #0]
 802a598:	e7e7      	b.n	802a56a <fmod+0x62>
 802a59a:	bf00      	nop
 802a59c:	f3af 8000 	nop.w
	...
 802a5a8:	240006ac 	.word	0x240006ac
 802a5ac:	0802f0a8 	.word	0x0802f0a8

0802a5b0 <pow>:
 802a5b0:	b570      	push	{r4, r5, r6, lr}
 802a5b2:	ed2d 8b0a 	vpush	{d8-d12}
 802a5b6:	eeb0 9b40 	vmov.f64	d9, d0
 802a5ba:	eeb0 8b41 	vmov.f64	d8, d1
 802a5be:	4c8c      	ldr	r4, [pc, #560]	; (802a7f0 <pow+0x240>)
 802a5c0:	b08a      	sub	sp, #40	; 0x28
 802a5c2:	f000 fc11 	bl	802ade8 <__ieee754_pow>
 802a5c6:	f994 3000 	ldrsb.w	r3, [r4]
 802a5ca:	eeb0 ab40 	vmov.f64	d10, d0
 802a5ce:	1c5a      	adds	r2, r3, #1
 802a5d0:	4626      	mov	r6, r4
 802a5d2:	d04b      	beq.n	802a66c <pow+0xbc>
 802a5d4:	eeb4 8b48 	vcmp.f64	d8, d8
 802a5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a5dc:	d646      	bvs.n	802a66c <pow+0xbc>
 802a5de:	eeb4 9b49 	vcmp.f64	d9, d9
 802a5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a5e6:	d719      	bvc.n	802a61c <pow+0x6c>
 802a5e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802a5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a5f0:	d13c      	bne.n	802a66c <pow+0xbc>
 802a5f2:	2201      	movs	r2, #1
 802a5f4:	9200      	str	r2, [sp, #0]
 802a5f6:	497f      	ldr	r1, [pc, #508]	; (802a7f4 <pow+0x244>)
 802a5f8:	4a7f      	ldr	r2, [pc, #508]	; (802a7f8 <pow+0x248>)
 802a5fa:	9201      	str	r2, [sp, #4]
 802a5fc:	2000      	movs	r0, #0
 802a5fe:	2200      	movs	r2, #0
 802a600:	2b02      	cmp	r3, #2
 802a602:	9208      	str	r2, [sp, #32]
 802a604:	ed8d 9b02 	vstr	d9, [sp, #8]
 802a608:	ed8d 8b04 	vstr	d8, [sp, #16]
 802a60c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802a610:	d02a      	beq.n	802a668 <pow+0xb8>
 802a612:	4668      	mov	r0, sp
 802a614:	f002 fb07 	bl	802cc26 <matherr>
 802a618:	bb00      	cbnz	r0, 802a65c <pow+0xac>
 802a61a:	e04e      	b.n	802a6ba <pow+0x10a>
 802a61c:	ed9f bb72 	vldr	d11, [pc, #456]	; 802a7e8 <pow+0x238>
 802a620:	eeb4 9b4b 	vcmp.f64	d9, d11
 802a624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a628:	eeb0 cb4b 	vmov.f64	d12, d11
 802a62c:	d14a      	bne.n	802a6c4 <pow+0x114>
 802a62e:	eeb4 8b4b 	vcmp.f64	d8, d11
 802a632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a636:	d11f      	bne.n	802a678 <pow+0xc8>
 802a638:	2201      	movs	r2, #1
 802a63a:	9200      	str	r2, [sp, #0]
 802a63c:	4a6e      	ldr	r2, [pc, #440]	; (802a7f8 <pow+0x248>)
 802a63e:	9201      	str	r2, [sp, #4]
 802a640:	2200      	movs	r2, #0
 802a642:	9208      	str	r2, [sp, #32]
 802a644:	ed8d 9b02 	vstr	d9, [sp, #8]
 802a648:	ed8d 8b04 	vstr	d8, [sp, #16]
 802a64c:	ed8d bb06 	vstr	d11, [sp, #24]
 802a650:	2b00      	cmp	r3, #0
 802a652:	d0de      	beq.n	802a612 <pow+0x62>
 802a654:	4b67      	ldr	r3, [pc, #412]	; (802a7f4 <pow+0x244>)
 802a656:	2200      	movs	r2, #0
 802a658:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802a65c:	9b08      	ldr	r3, [sp, #32]
 802a65e:	b11b      	cbz	r3, 802a668 <pow+0xb8>
 802a660:	f002 fdae 	bl	802d1c0 <__errno>
 802a664:	9b08      	ldr	r3, [sp, #32]
 802a666:	6003      	str	r3, [r0, #0]
 802a668:	ed9d ab06 	vldr	d10, [sp, #24]
 802a66c:	eeb0 0b4a 	vmov.f64	d0, d10
 802a670:	b00a      	add	sp, #40	; 0x28
 802a672:	ecbd 8b0a 	vpop	{d8-d12}
 802a676:	bd70      	pop	{r4, r5, r6, pc}
 802a678:	eeb0 0b48 	vmov.f64	d0, d8
 802a67c:	f002 facb 	bl	802cc16 <finite>
 802a680:	2800      	cmp	r0, #0
 802a682:	d0f3      	beq.n	802a66c <pow+0xbc>
 802a684:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 802a688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a68c:	d5ee      	bpl.n	802a66c <pow+0xbc>
 802a68e:	2301      	movs	r3, #1
 802a690:	9300      	str	r3, [sp, #0]
 802a692:	4b59      	ldr	r3, [pc, #356]	; (802a7f8 <pow+0x248>)
 802a694:	9301      	str	r3, [sp, #4]
 802a696:	2300      	movs	r3, #0
 802a698:	9308      	str	r3, [sp, #32]
 802a69a:	f994 3000 	ldrsb.w	r3, [r4]
 802a69e:	ed8d 9b02 	vstr	d9, [sp, #8]
 802a6a2:	ed8d 8b04 	vstr	d8, [sp, #16]
 802a6a6:	b913      	cbnz	r3, 802a6ae <pow+0xfe>
 802a6a8:	ed8d bb06 	vstr	d11, [sp, #24]
 802a6ac:	e7b1      	b.n	802a612 <pow+0x62>
 802a6ae:	4953      	ldr	r1, [pc, #332]	; (802a7fc <pow+0x24c>)
 802a6b0:	2000      	movs	r0, #0
 802a6b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802a6b6:	2b02      	cmp	r3, #2
 802a6b8:	d1ab      	bne.n	802a612 <pow+0x62>
 802a6ba:	f002 fd81 	bl	802d1c0 <__errno>
 802a6be:	2321      	movs	r3, #33	; 0x21
 802a6c0:	6003      	str	r3, [r0, #0]
 802a6c2:	e7cb      	b.n	802a65c <pow+0xac>
 802a6c4:	f002 faa7 	bl	802cc16 <finite>
 802a6c8:	4605      	mov	r5, r0
 802a6ca:	2800      	cmp	r0, #0
 802a6cc:	d164      	bne.n	802a798 <pow+0x1e8>
 802a6ce:	eeb0 0b49 	vmov.f64	d0, d9
 802a6d2:	f002 faa0 	bl	802cc16 <finite>
 802a6d6:	2800      	cmp	r0, #0
 802a6d8:	d05e      	beq.n	802a798 <pow+0x1e8>
 802a6da:	eeb0 0b48 	vmov.f64	d0, d8
 802a6de:	f002 fa9a 	bl	802cc16 <finite>
 802a6e2:	2800      	cmp	r0, #0
 802a6e4:	d058      	beq.n	802a798 <pow+0x1e8>
 802a6e6:	eeb4 ab4a 	vcmp.f64	d10, d10
 802a6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a6ee:	f994 3000 	ldrsb.w	r3, [r4]
 802a6f2:	4a41      	ldr	r2, [pc, #260]	; (802a7f8 <pow+0x248>)
 802a6f4:	d70e      	bvc.n	802a714 <pow+0x164>
 802a6f6:	2101      	movs	r1, #1
 802a6f8:	e9cd 1200 	strd	r1, r2, [sp]
 802a6fc:	9508      	str	r5, [sp, #32]
 802a6fe:	ed8d 9b02 	vstr	d9, [sp, #8]
 802a702:	ed8d 8b04 	vstr	d8, [sp, #16]
 802a706:	2b00      	cmp	r3, #0
 802a708:	d0ce      	beq.n	802a6a8 <pow+0xf8>
 802a70a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 802a70e:	ed8d 7b06 	vstr	d7, [sp, #24]
 802a712:	e7d0      	b.n	802a6b6 <pow+0x106>
 802a714:	2103      	movs	r1, #3
 802a716:	ed8d 8b04 	vstr	d8, [sp, #16]
 802a71a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802a71e:	ee28 8b07 	vmul.f64	d8, d8, d7
 802a722:	e9cd 1200 	strd	r1, r2, [sp]
 802a726:	9508      	str	r5, [sp, #32]
 802a728:	ed8d 9b02 	vstr	d9, [sp, #8]
 802a72c:	b9fb      	cbnz	r3, 802a76e <pow+0x1be>
 802a72e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 802a732:	4b33      	ldr	r3, [pc, #204]	; (802a800 <pow+0x250>)
 802a734:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802a738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a73c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802a740:	d54b      	bpl.n	802a7da <pow+0x22a>
 802a742:	eeb0 0b48 	vmov.f64	d0, d8
 802a746:	f002 fa7b 	bl	802cc40 <rint>
 802a74a:	eeb4 0b48 	vcmp.f64	d0, d8
 802a74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a752:	d004      	beq.n	802a75e <pow+0x1ae>
 802a754:	4b2b      	ldr	r3, [pc, #172]	; (802a804 <pow+0x254>)
 802a756:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802a75a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802a75e:	f996 3000 	ldrsb.w	r3, [r6]
 802a762:	2b02      	cmp	r3, #2
 802a764:	d139      	bne.n	802a7da <pow+0x22a>
 802a766:	f002 fd2b 	bl	802d1c0 <__errno>
 802a76a:	2322      	movs	r3, #34	; 0x22
 802a76c:	e7a8      	b.n	802a6c0 <pow+0x110>
 802a76e:	4b26      	ldr	r3, [pc, #152]	; (802a808 <pow+0x258>)
 802a770:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 802a774:	2200      	movs	r2, #0
 802a776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a77a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802a77e:	d5ee      	bpl.n	802a75e <pow+0x1ae>
 802a780:	eeb0 0b48 	vmov.f64	d0, d8
 802a784:	f002 fa5c 	bl	802cc40 <rint>
 802a788:	eeb4 0b48 	vcmp.f64	d0, d8
 802a78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a790:	d0e5      	beq.n	802a75e <pow+0x1ae>
 802a792:	2200      	movs	r2, #0
 802a794:	4b19      	ldr	r3, [pc, #100]	; (802a7fc <pow+0x24c>)
 802a796:	e7e0      	b.n	802a75a <pow+0x1aa>
 802a798:	eeb5 ab40 	vcmp.f64	d10, #0.0
 802a79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a7a0:	f47f af64 	bne.w	802a66c <pow+0xbc>
 802a7a4:	eeb0 0b49 	vmov.f64	d0, d9
 802a7a8:	f002 fa35 	bl	802cc16 <finite>
 802a7ac:	2800      	cmp	r0, #0
 802a7ae:	f43f af5d 	beq.w	802a66c <pow+0xbc>
 802a7b2:	eeb0 0b48 	vmov.f64	d0, d8
 802a7b6:	f002 fa2e 	bl	802cc16 <finite>
 802a7ba:	2800      	cmp	r0, #0
 802a7bc:	f43f af56 	beq.w	802a66c <pow+0xbc>
 802a7c0:	2304      	movs	r3, #4
 802a7c2:	9300      	str	r3, [sp, #0]
 802a7c4:	4b0c      	ldr	r3, [pc, #48]	; (802a7f8 <pow+0x248>)
 802a7c6:	9301      	str	r3, [sp, #4]
 802a7c8:	2300      	movs	r3, #0
 802a7ca:	9308      	str	r3, [sp, #32]
 802a7cc:	ed8d 9b02 	vstr	d9, [sp, #8]
 802a7d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 802a7d4:	ed8d cb06 	vstr	d12, [sp, #24]
 802a7d8:	e7c1      	b.n	802a75e <pow+0x1ae>
 802a7da:	4668      	mov	r0, sp
 802a7dc:	f002 fa23 	bl	802cc26 <matherr>
 802a7e0:	2800      	cmp	r0, #0
 802a7e2:	f47f af3b 	bne.w	802a65c <pow+0xac>
 802a7e6:	e7be      	b.n	802a766 <pow+0x1b6>
	...
 802a7f0:	240006ac 	.word	0x240006ac
 802a7f4:	3ff00000 	.word	0x3ff00000
 802a7f8:	0802f0ad 	.word	0x0802f0ad
 802a7fc:	fff00000 	.word	0xfff00000
 802a800:	47efffff 	.word	0x47efffff
 802a804:	c7efffff 	.word	0xc7efffff
 802a808:	7ff00000 	.word	0x7ff00000
 802a80c:	00000000 	.word	0x00000000

0802a810 <sqrt>:
 802a810:	b500      	push	{lr}
 802a812:	ed2d 8b02 	vpush	{d8}
 802a816:	eeb0 8b40 	vmov.f64	d8, d0
 802a81a:	b08b      	sub	sp, #44	; 0x2c
 802a81c:	f000 ffa8 	bl	802b770 <__ieee754_sqrt>
 802a820:	4b1f      	ldr	r3, [pc, #124]	; (802a8a0 <sqrt+0x90>)
 802a822:	f993 3000 	ldrsb.w	r3, [r3]
 802a826:	1c5a      	adds	r2, r3, #1
 802a828:	d024      	beq.n	802a874 <sqrt+0x64>
 802a82a:	eeb4 8b48 	vcmp.f64	d8, d8
 802a82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a832:	d61f      	bvs.n	802a874 <sqrt+0x64>
 802a834:	ed9f 7b18 	vldr	d7, [pc, #96]	; 802a898 <sqrt+0x88>
 802a838:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802a83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a840:	d518      	bpl.n	802a874 <sqrt+0x64>
 802a842:	2201      	movs	r2, #1
 802a844:	9200      	str	r2, [sp, #0]
 802a846:	4a17      	ldr	r2, [pc, #92]	; (802a8a4 <sqrt+0x94>)
 802a848:	9201      	str	r2, [sp, #4]
 802a84a:	2200      	movs	r2, #0
 802a84c:	9208      	str	r2, [sp, #32]
 802a84e:	ed8d 8b04 	vstr	d8, [sp, #16]
 802a852:	ed8d 8b02 	vstr	d8, [sp, #8]
 802a856:	b993      	cbnz	r3, 802a87e <sqrt+0x6e>
 802a858:	ed8d 7b06 	vstr	d7, [sp, #24]
 802a85c:	4668      	mov	r0, sp
 802a85e:	f002 f9e2 	bl	802cc26 <matherr>
 802a862:	b190      	cbz	r0, 802a88a <sqrt+0x7a>
 802a864:	9b08      	ldr	r3, [sp, #32]
 802a866:	b11b      	cbz	r3, 802a870 <sqrt+0x60>
 802a868:	f002 fcaa 	bl	802d1c0 <__errno>
 802a86c:	9b08      	ldr	r3, [sp, #32]
 802a86e:	6003      	str	r3, [r0, #0]
 802a870:	ed9d 0b06 	vldr	d0, [sp, #24]
 802a874:	b00b      	add	sp, #44	; 0x2c
 802a876:	ecbd 8b02 	vpop	{d8}
 802a87a:	f85d fb04 	ldr.w	pc, [sp], #4
 802a87e:	2b02      	cmp	r3, #2
 802a880:	ee87 6b07 	vdiv.f64	d6, d7, d7
 802a884:	ed8d 6b06 	vstr	d6, [sp, #24]
 802a888:	d1e8      	bne.n	802a85c <sqrt+0x4c>
 802a88a:	f002 fc99 	bl	802d1c0 <__errno>
 802a88e:	2321      	movs	r3, #33	; 0x21
 802a890:	6003      	str	r3, [r0, #0]
 802a892:	e7e7      	b.n	802a864 <sqrt+0x54>
 802a894:	f3af 8000 	nop.w
	...
 802a8a0:	240006ac 	.word	0x240006ac
 802a8a4:	0802f0b1 	.word	0x0802f0b1

0802a8a8 <asinf>:
 802a8a8:	b510      	push	{r4, lr}
 802a8aa:	ed2d 8b02 	vpush	{d8}
 802a8ae:	4c25      	ldr	r4, [pc, #148]	; (802a944 <asinf+0x9c>)
 802a8b0:	b08a      	sub	sp, #40	; 0x28
 802a8b2:	eeb0 8a40 	vmov.f32	s16, s0
 802a8b6:	f000 ff5f 	bl	802b778 <__ieee754_asinf>
 802a8ba:	f994 3000 	ldrsb.w	r3, [r4]
 802a8be:	3301      	adds	r3, #1
 802a8c0:	eef0 8a40 	vmov.f32	s17, s0
 802a8c4:	d038      	beq.n	802a938 <asinf+0x90>
 802a8c6:	eeb4 8a48 	vcmp.f32	s16, s16
 802a8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a8ce:	d633      	bvs.n	802a938 <asinf+0x90>
 802a8d0:	eeb0 0a48 	vmov.f32	s0, s16
 802a8d4:	f002 fb90 	bl	802cff8 <fabsf>
 802a8d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802a8dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a8e4:	dd28      	ble.n	802a938 <asinf+0x90>
 802a8e6:	2301      	movs	r3, #1
 802a8e8:	9300      	str	r3, [sp, #0]
 802a8ea:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 802a8ee:	4b16      	ldr	r3, [pc, #88]	; (802a948 <asinf+0xa0>)
 802a8f0:	9301      	str	r3, [sp, #4]
 802a8f2:	4816      	ldr	r0, [pc, #88]	; (802a94c <asinf+0xa4>)
 802a8f4:	2300      	movs	r3, #0
 802a8f6:	9308      	str	r3, [sp, #32]
 802a8f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 802a8fc:	ed8d 8b02 	vstr	d8, [sp, #8]
 802a900:	f002 f996 	bl	802cc30 <nan>
 802a904:	f994 3000 	ldrsb.w	r3, [r4]
 802a908:	2b02      	cmp	r3, #2
 802a90a:	ed8d 0b06 	vstr	d0, [sp, #24]
 802a90e:	d104      	bne.n	802a91a <asinf+0x72>
 802a910:	f002 fc56 	bl	802d1c0 <__errno>
 802a914:	2321      	movs	r3, #33	; 0x21
 802a916:	6003      	str	r3, [r0, #0]
 802a918:	e004      	b.n	802a924 <asinf+0x7c>
 802a91a:	4668      	mov	r0, sp
 802a91c:	f002 f983 	bl	802cc26 <matherr>
 802a920:	2800      	cmp	r0, #0
 802a922:	d0f5      	beq.n	802a910 <asinf+0x68>
 802a924:	9b08      	ldr	r3, [sp, #32]
 802a926:	b11b      	cbz	r3, 802a930 <asinf+0x88>
 802a928:	f002 fc4a 	bl	802d1c0 <__errno>
 802a92c:	9b08      	ldr	r3, [sp, #32]
 802a92e:	6003      	str	r3, [r0, #0]
 802a930:	ed9d 0b06 	vldr	d0, [sp, #24]
 802a934:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 802a938:	eeb0 0a68 	vmov.f32	s0, s17
 802a93c:	b00a      	add	sp, #40	; 0x28
 802a93e:	ecbd 8b02 	vpop	{d8}
 802a942:	bd10      	pop	{r4, pc}
 802a944:	240006ac 	.word	0x240006ac
 802a948:	0802f0b6 	.word	0x0802f0b6
 802a94c:	0802f75b 	.word	0x0802f75b

0802a950 <atan2f>:
 802a950:	f000 bffa 	b.w	802b948 <__ieee754_atan2f>
 802a954:	0000      	movs	r0, r0
	...

0802a958 <sqrtf>:
 802a958:	b500      	push	{lr}
 802a95a:	ed2d 8b02 	vpush	{d8}
 802a95e:	b08b      	sub	sp, #44	; 0x2c
 802a960:	eeb0 8a40 	vmov.f32	s16, s0
 802a964:	f001 f9c6 	bl	802bcf4 <__ieee754_sqrtf>
 802a968:	4b21      	ldr	r3, [pc, #132]	; (802a9f0 <sqrtf+0x98>)
 802a96a:	f993 3000 	ldrsb.w	r3, [r3]
 802a96e:	1c5a      	adds	r2, r3, #1
 802a970:	d028      	beq.n	802a9c4 <sqrtf+0x6c>
 802a972:	eeb4 8a48 	vcmp.f32	s16, s16
 802a976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a97a:	d623      	bvs.n	802a9c4 <sqrtf+0x6c>
 802a97c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a984:	d51e      	bpl.n	802a9c4 <sqrtf+0x6c>
 802a986:	2201      	movs	r2, #1
 802a988:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 802a98c:	9200      	str	r2, [sp, #0]
 802a98e:	4a19      	ldr	r2, [pc, #100]	; (802a9f4 <sqrtf+0x9c>)
 802a990:	9201      	str	r2, [sp, #4]
 802a992:	2200      	movs	r2, #0
 802a994:	9208      	str	r2, [sp, #32]
 802a996:	ed8d 8b04 	vstr	d8, [sp, #16]
 802a99a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802a99e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 802a9e8 <sqrtf+0x90>
 802a9a2:	b9a3      	cbnz	r3, 802a9ce <sqrtf+0x76>
 802a9a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 802a9a8:	4668      	mov	r0, sp
 802a9aa:	f002 f93c 	bl	802cc26 <matherr>
 802a9ae:	b1a0      	cbz	r0, 802a9da <sqrtf+0x82>
 802a9b0:	9b08      	ldr	r3, [sp, #32]
 802a9b2:	b11b      	cbz	r3, 802a9bc <sqrtf+0x64>
 802a9b4:	f002 fc04 	bl	802d1c0 <__errno>
 802a9b8:	9b08      	ldr	r3, [sp, #32]
 802a9ba:	6003      	str	r3, [r0, #0]
 802a9bc:	ed9d 0b06 	vldr	d0, [sp, #24]
 802a9c0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802a9c4:	b00b      	add	sp, #44	; 0x2c
 802a9c6:	ecbd 8b02 	vpop	{d8}
 802a9ca:	f85d fb04 	ldr.w	pc, [sp], #4
 802a9ce:	2b02      	cmp	r3, #2
 802a9d0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 802a9d4:	ed8d 6b06 	vstr	d6, [sp, #24]
 802a9d8:	d1e6      	bne.n	802a9a8 <sqrtf+0x50>
 802a9da:	f002 fbf1 	bl	802d1c0 <__errno>
 802a9de:	2321      	movs	r3, #33	; 0x21
 802a9e0:	6003      	str	r3, [r0, #0]
 802a9e2:	e7e5      	b.n	802a9b0 <sqrtf+0x58>
 802a9e4:	f3af 8000 	nop.w
	...
 802a9f0:	240006ac 	.word	0x240006ac
 802a9f4:	0802f0bc 	.word	0x0802f0bc

0802a9f8 <__ieee754_atan2>:
 802a9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a9fa:	ee11 6a10 	vmov	r6, s2
 802a9fe:	ee11 0a90 	vmov	r0, s3
 802aa02:	4273      	negs	r3, r6
 802aa04:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 802aa08:	4333      	orrs	r3, r6
 802aa0a:	4f6b      	ldr	r7, [pc, #428]	; (802abb8 <__ieee754_atan2+0x1c0>)
 802aa0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 802aa10:	42bb      	cmp	r3, r7
 802aa12:	ed8d 0b00 	vstr	d0, [sp]
 802aa16:	d80b      	bhi.n	802aa30 <__ieee754_atan2+0x38>
 802aa18:	e9dd c500 	ldrd	ip, r5, [sp]
 802aa1c:	f1cc 0100 	rsb	r1, ip, #0
 802aa20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802aa24:	ea41 010c 	orr.w	r1, r1, ip
 802aa28:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 802aa2c:	42b9      	cmp	r1, r7
 802aa2e:	d906      	bls.n	802aa3e <__ieee754_atan2+0x46>
 802aa30:	ed9d 7b00 	vldr	d7, [sp]
 802aa34:	ee37 7b01 	vadd.f64	d7, d7, d1
 802aa38:	ed8d 7b00 	vstr	d7, [sp]
 802aa3c:	e063      	b.n	802ab06 <__ieee754_atan2+0x10e>
 802aa3e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 802aa42:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 802aa46:	4331      	orrs	r1, r6
 802aa48:	d104      	bne.n	802aa54 <__ieee754_atan2+0x5c>
 802aa4a:	b003      	add	sp, #12
 802aa4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802aa50:	f001 bfde 	b.w	802ca10 <atan>
 802aa54:	1784      	asrs	r4, r0, #30
 802aa56:	f004 0402 	and.w	r4, r4, #2
 802aa5a:	ea53 010c 	orrs.w	r1, r3, ip
 802aa5e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 802aa62:	d109      	bne.n	802aa78 <__ieee754_atan2+0x80>
 802aa64:	2c02      	cmp	r4, #2
 802aa66:	d078      	beq.n	802ab5a <__ieee754_atan2+0x162>
 802aa68:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 802ab60 <__ieee754_atan2+0x168>
 802aa6c:	ed9d 6b00 	vldr	d6, [sp]
 802aa70:	2c03      	cmp	r4, #3
 802aa72:	fe07 7b06 	vseleq.f64	d7, d7, d6
 802aa76:	e7df      	b.n	802aa38 <__ieee754_atan2+0x40>
 802aa78:	ea52 0106 	orrs.w	r1, r2, r6
 802aa7c:	d107      	bne.n	802aa8e <__ieee754_atan2+0x96>
 802aa7e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 802ab68 <__ieee754_atan2+0x170>
 802aa82:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 802ab70 <__ieee754_atan2+0x178>
 802aa86:	2d00      	cmp	r5, #0
 802aa88:	fe26 7b07 	vselge.f64	d7, d6, d7
 802aa8c:	e7d4      	b.n	802aa38 <__ieee754_atan2+0x40>
 802aa8e:	42ba      	cmp	r2, r7
 802aa90:	d120      	bne.n	802aad4 <__ieee754_atan2+0xdc>
 802aa92:	4293      	cmp	r3, r2
 802aa94:	d111      	bne.n	802aaba <__ieee754_atan2+0xc2>
 802aa96:	2c02      	cmp	r4, #2
 802aa98:	d009      	beq.n	802aaae <__ieee754_atan2+0xb6>
 802aa9a:	2c03      	cmp	r4, #3
 802aa9c:	d00a      	beq.n	802aab4 <__ieee754_atan2+0xbc>
 802aa9e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 802ab78 <__ieee754_atan2+0x180>
 802aaa2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 802ab80 <__ieee754_atan2+0x188>
 802aaa6:	2c01      	cmp	r4, #1
 802aaa8:	fe06 7b07 	vseleq.f64	d7, d6, d7
 802aaac:	e7c4      	b.n	802aa38 <__ieee754_atan2+0x40>
 802aaae:	ed9f 7b36 	vldr	d7, [pc, #216]	; 802ab88 <__ieee754_atan2+0x190>
 802aab2:	e7c1      	b.n	802aa38 <__ieee754_atan2+0x40>
 802aab4:	ed9f 7b36 	vldr	d7, [pc, #216]	; 802ab90 <__ieee754_atan2+0x198>
 802aab8:	e7be      	b.n	802aa38 <__ieee754_atan2+0x40>
 802aaba:	2c02      	cmp	r4, #2
 802aabc:	d04d      	beq.n	802ab5a <__ieee754_atan2+0x162>
 802aabe:	2c03      	cmp	r4, #3
 802aac0:	d005      	beq.n	802aace <__ieee754_atan2+0xd6>
 802aac2:	2c01      	cmp	r4, #1
 802aac4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 802ab98 <__ieee754_atan2+0x1a0>
 802aac8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 802aba0 <__ieee754_atan2+0x1a8>
 802aacc:	e7ec      	b.n	802aaa8 <__ieee754_atan2+0xb0>
 802aace:	ed9f 7b24 	vldr	d7, [pc, #144]	; 802ab60 <__ieee754_atan2+0x168>
 802aad2:	e7b1      	b.n	802aa38 <__ieee754_atan2+0x40>
 802aad4:	42bb      	cmp	r3, r7
 802aad6:	d0d2      	beq.n	802aa7e <__ieee754_atan2+0x86>
 802aad8:	1a9b      	subs	r3, r3, r2
 802aada:	151b      	asrs	r3, r3, #20
 802aadc:	2b3c      	cmp	r3, #60	; 0x3c
 802aade:	dc16      	bgt.n	802ab0e <__ieee754_atan2+0x116>
 802aae0:	2800      	cmp	r0, #0
 802aae2:	da01      	bge.n	802aae8 <__ieee754_atan2+0xf0>
 802aae4:	333c      	adds	r3, #60	; 0x3c
 802aae6:	db17      	blt.n	802ab18 <__ieee754_atan2+0x120>
 802aae8:	ed9d 7b00 	vldr	d7, [sp]
 802aaec:	ee87 0b01 	vdiv.f64	d0, d7, d1
 802aaf0:	f002 f888 	bl	802cc04 <fabs>
 802aaf4:	f001 ff8c 	bl	802ca10 <atan>
 802aaf8:	ed8d 0b00 	vstr	d0, [sp]
 802aafc:	2c01      	cmp	r4, #1
 802aafe:	d00e      	beq.n	802ab1e <__ieee754_atan2+0x126>
 802ab00:	2c02      	cmp	r4, #2
 802ab02:	d014      	beq.n	802ab2e <__ieee754_atan2+0x136>
 802ab04:	b9f4      	cbnz	r4, 802ab44 <__ieee754_atan2+0x14c>
 802ab06:	ed9d 0b00 	vldr	d0, [sp]
 802ab0a:	b003      	add	sp, #12
 802ab0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ab0e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 802ab68 <__ieee754_atan2+0x170>
 802ab12:	ed8d 7b00 	vstr	d7, [sp]
 802ab16:	e7f1      	b.n	802aafc <__ieee754_atan2+0x104>
 802ab18:	ed9f 7b21 	vldr	d7, [pc, #132]	; 802aba0 <__ieee754_atan2+0x1a8>
 802ab1c:	e7f9      	b.n	802ab12 <__ieee754_atan2+0x11a>
 802ab1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ab22:	9901      	ldr	r1, [sp, #4]
 802ab24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802ab28:	e9cd 2300 	strd	r2, r3, [sp]
 802ab2c:	e7eb      	b.n	802ab06 <__ieee754_atan2+0x10e>
 802ab2e:	ed9d 6b00 	vldr	d6, [sp]
 802ab32:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 802aba8 <__ieee754_atan2+0x1b0>
 802ab36:	ee36 7b47 	vsub.f64	d7, d6, d7
 802ab3a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 802abb0 <__ieee754_atan2+0x1b8>
 802ab3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 802ab42:	e779      	b.n	802aa38 <__ieee754_atan2+0x40>
 802ab44:	ed9d 6b00 	vldr	d6, [sp]
 802ab48:	ed9f 7b17 	vldr	d7, [pc, #92]	; 802aba8 <__ieee754_atan2+0x1b0>
 802ab4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 802ab50:	ed9f 6b17 	vldr	d6, [pc, #92]	; 802abb0 <__ieee754_atan2+0x1b8>
 802ab54:	ee37 7b46 	vsub.f64	d7, d7, d6
 802ab58:	e76e      	b.n	802aa38 <__ieee754_atan2+0x40>
 802ab5a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 802abb0 <__ieee754_atan2+0x1b8>
 802ab5e:	e76b      	b.n	802aa38 <__ieee754_atan2+0x40>
 802ab60:	54442d18 	.word	0x54442d18
 802ab64:	c00921fb 	.word	0xc00921fb
 802ab68:	54442d18 	.word	0x54442d18
 802ab6c:	3ff921fb 	.word	0x3ff921fb
 802ab70:	54442d18 	.word	0x54442d18
 802ab74:	bff921fb 	.word	0xbff921fb
 802ab78:	54442d18 	.word	0x54442d18
 802ab7c:	bfe921fb 	.word	0xbfe921fb
 802ab80:	54442d18 	.word	0x54442d18
 802ab84:	3fe921fb 	.word	0x3fe921fb
 802ab88:	7f3321d2 	.word	0x7f3321d2
 802ab8c:	4002d97c 	.word	0x4002d97c
 802ab90:	7f3321d2 	.word	0x7f3321d2
 802ab94:	c002d97c 	.word	0xc002d97c
 802ab98:	00000000 	.word	0x00000000
 802ab9c:	80000000 	.word	0x80000000
	...
 802aba8:	33145c07 	.word	0x33145c07
 802abac:	3ca1a626 	.word	0x3ca1a626
 802abb0:	54442d18 	.word	0x54442d18
 802abb4:	400921fb 	.word	0x400921fb
 802abb8:	7ff00000 	.word	0x7ff00000

0802abbc <__ieee754_fmod>:
 802abbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802abc0:	ed8d 1b00 	vstr	d1, [sp]
 802abc4:	e9dd 5600 	ldrd	r5, r6, [sp]
 802abc8:	f026 4200 	bic.w	r2, r6, #2147483648	; 0x80000000
 802abcc:	ea52 0305 	orrs.w	r3, r2, r5
 802abd0:	46ac      	mov	ip, r5
 802abd2:	d00d      	beq.n	802abf0 <__ieee754_fmod+0x34>
 802abd4:	ee10 9a90 	vmov	r9, s1
 802abd8:	4b7c      	ldr	r3, [pc, #496]	; (802adcc <__ieee754_fmod+0x210>)
 802abda:	f029 4100 	bic.w	r1, r9, #2147483648	; 0x80000000
 802abde:	4299      	cmp	r1, r3
 802abe0:	dc06      	bgt.n	802abf0 <__ieee754_fmod+0x34>
 802abe2:	426b      	negs	r3, r5
 802abe4:	432b      	orrs	r3, r5
 802abe6:	487a      	ldr	r0, [pc, #488]	; (802add0 <__ieee754_fmod+0x214>)
 802abe8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 802abec:	4283      	cmp	r3, r0
 802abee:	d908      	bls.n	802ac02 <__ieee754_fmod+0x46>
 802abf0:	ed9d 7b00 	vldr	d7, [sp]
 802abf4:	ee20 7b07 	vmul.f64	d7, d0, d7
 802abf8:	ee87 0b07 	vdiv.f64	d0, d7, d7
 802abfc:	b003      	add	sp, #12
 802abfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ac02:	4291      	cmp	r1, r2
 802ac04:	ee10 ea10 	vmov	lr, s0
 802ac08:	ee10 7a10 	vmov	r7, s0
 802ac0c:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 802ac10:	dc0a      	bgt.n	802ac28 <__ieee754_fmod+0x6c>
 802ac12:	dbf3      	blt.n	802abfc <__ieee754_fmod+0x40>
 802ac14:	45ae      	cmp	lr, r5
 802ac16:	d3f1      	bcc.n	802abfc <__ieee754_fmod+0x40>
 802ac18:	d106      	bne.n	802ac28 <__ieee754_fmod+0x6c>
 802ac1a:	496e      	ldr	r1, [pc, #440]	; (802add4 <__ieee754_fmod+0x218>)
 802ac1c:	0fe4      	lsrs	r4, r4, #31
 802ac1e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 802ac22:	ed94 0b00 	vldr	d0, [r4]
 802ac26:	e7e9      	b.n	802abfc <__ieee754_fmod+0x40>
 802ac28:	4b6b      	ldr	r3, [pc, #428]	; (802add8 <__ieee754_fmod+0x21c>)
 802ac2a:	4299      	cmp	r1, r3
 802ac2c:	dc50      	bgt.n	802acd0 <__ieee754_fmod+0x114>
 802ac2e:	2900      	cmp	r1, #0
 802ac30:	d143      	bne.n	802acba <__ieee754_fmod+0xfe>
 802ac32:	486a      	ldr	r0, [pc, #424]	; (802addc <__ieee754_fmod+0x220>)
 802ac34:	46f0      	mov	r8, lr
 802ac36:	f1b8 0f00 	cmp.w	r8, #0
 802ac3a:	dc3a      	bgt.n	802acb2 <__ieee754_fmod+0xf6>
 802ac3c:	429a      	cmp	r2, r3
 802ac3e:	dc5a      	bgt.n	802acf6 <__ieee754_fmod+0x13a>
 802ac40:	2a00      	cmp	r2, #0
 802ac42:	d14d      	bne.n	802ace0 <__ieee754_fmod+0x124>
 802ac44:	4b65      	ldr	r3, [pc, #404]	; (802addc <__ieee754_fmod+0x220>)
 802ac46:	46a8      	mov	r8, r5
 802ac48:	f1b8 0f00 	cmp.w	r8, #0
 802ac4c:	dc44      	bgt.n	802acd8 <__ieee754_fmod+0x11c>
 802ac4e:	f8df 8190 	ldr.w	r8, [pc, #400]	; 802ade0 <__ieee754_fmod+0x224>
 802ac52:	4540      	cmp	r0, r8
 802ac54:	db53      	blt.n	802acfe <__ieee754_fmod+0x142>
 802ac56:	f3c9 0113 	ubfx	r1, r9, #0, #20
 802ac5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802ac5e:	f8df e180 	ldr.w	lr, [pc, #384]	; 802ade0 <__ieee754_fmod+0x224>
 802ac62:	4573      	cmp	r3, lr
 802ac64:	db5f      	blt.n	802ad26 <__ieee754_fmod+0x16a>
 802ac66:	f3c6 0613 	ubfx	r6, r6, #0, #20
 802ac6a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 802ac6e:	1ac0      	subs	r0, r0, r3
 802ac70:	1b8a      	subs	r2, r1, r6
 802ac72:	eba7 050c 	sub.w	r5, r7, ip
 802ac76:	2800      	cmp	r0, #0
 802ac78:	d16b      	bne.n	802ad52 <__ieee754_fmod+0x196>
 802ac7a:	4567      	cmp	r7, ip
 802ac7c:	bf38      	it	cc
 802ac7e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 802ac82:	2a00      	cmp	r2, #0
 802ac84:	bfbc      	itt	lt
 802ac86:	463d      	movlt	r5, r7
 802ac88:	460a      	movlt	r2, r1
 802ac8a:	ea52 0105 	orrs.w	r1, r2, r5
 802ac8e:	d0c4      	beq.n	802ac1a <__ieee754_fmod+0x5e>
 802ac90:	4951      	ldr	r1, [pc, #324]	; (802add8 <__ieee754_fmod+0x21c>)
 802ac92:	428a      	cmp	r2, r1
 802ac94:	dd72      	ble.n	802ad7c <__ieee754_fmod+0x1c0>
 802ac96:	4952      	ldr	r1, [pc, #328]	; (802ade0 <__ieee754_fmod+0x224>)
 802ac98:	428b      	cmp	r3, r1
 802ac9a:	db75      	blt.n	802ad88 <__ieee754_fmod+0x1cc>
 802ac9c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 802aca0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 802aca4:	4314      	orrs	r4, r2
 802aca6:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 802acaa:	4628      	mov	r0, r5
 802acac:	ec41 0b10 	vmov	d0, r0, r1
 802acb0:	e7a4      	b.n	802abfc <__ieee754_fmod+0x40>
 802acb2:	3801      	subs	r0, #1
 802acb4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802acb8:	e7bd      	b.n	802ac36 <__ieee754_fmod+0x7a>
 802acba:	4849      	ldr	r0, [pc, #292]	; (802ade0 <__ieee754_fmod+0x224>)
 802acbc:	ea4f 28c1 	mov.w	r8, r1, lsl #11
 802acc0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802acc4:	f1b8 0f00 	cmp.w	r8, #0
 802acc8:	f100 30ff 	add.w	r0, r0, #4294967295
 802accc:	dcf8      	bgt.n	802acc0 <__ieee754_fmod+0x104>
 802acce:	e7b5      	b.n	802ac3c <__ieee754_fmod+0x80>
 802acd0:	1508      	asrs	r0, r1, #20
 802acd2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 802acd6:	e7b1      	b.n	802ac3c <__ieee754_fmod+0x80>
 802acd8:	3b01      	subs	r3, #1
 802acda:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802acde:	e7b3      	b.n	802ac48 <__ieee754_fmod+0x8c>
 802ace0:	4b3f      	ldr	r3, [pc, #252]	; (802ade0 <__ieee754_fmod+0x224>)
 802ace2:	ea4f 28c2 	mov.w	r8, r2, lsl #11
 802ace6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802acea:	f1b8 0f00 	cmp.w	r8, #0
 802acee:	f103 33ff 	add.w	r3, r3, #4294967295
 802acf2:	dcf8      	bgt.n	802ace6 <__ieee754_fmod+0x12a>
 802acf4:	e7ab      	b.n	802ac4e <__ieee754_fmod+0x92>
 802acf6:	1513      	asrs	r3, r2, #20
 802acf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802acfc:	e7a7      	b.n	802ac4e <__ieee754_fmod+0x92>
 802acfe:	eba8 0700 	sub.w	r7, r8, r0
 802ad02:	2f1f      	cmp	r7, #31
 802ad04:	dc09      	bgt.n	802ad1a <__ieee754_fmod+0x15e>
 802ad06:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 802ad0a:	40b9      	lsls	r1, r7
 802ad0c:	fa2e f808 	lsr.w	r8, lr, r8
 802ad10:	ea48 0101 	orr.w	r1, r8, r1
 802ad14:	fa0e f707 	lsl.w	r7, lr, r7
 802ad18:	e7a1      	b.n	802ac5e <__ieee754_fmod+0xa2>
 802ad1a:	4932      	ldr	r1, [pc, #200]	; (802ade4 <__ieee754_fmod+0x228>)
 802ad1c:	1a09      	subs	r1, r1, r0
 802ad1e:	fa0e f101 	lsl.w	r1, lr, r1
 802ad22:	2700      	movs	r7, #0
 802ad24:	e79b      	b.n	802ac5e <__ieee754_fmod+0xa2>
 802ad26:	ebae 0c03 	sub.w	ip, lr, r3
 802ad2a:	f1bc 0f1f 	cmp.w	ip, #31
 802ad2e:	dc09      	bgt.n	802ad44 <__ieee754_fmod+0x188>
 802ad30:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 802ad34:	fa02 f20c 	lsl.w	r2, r2, ip
 802ad38:	fa25 f606 	lsr.w	r6, r5, r6
 802ad3c:	4316      	orrs	r6, r2
 802ad3e:	fa05 fc0c 	lsl.w	ip, r5, ip
 802ad42:	e794      	b.n	802ac6e <__ieee754_fmod+0xb2>
 802ad44:	4e27      	ldr	r6, [pc, #156]	; (802ade4 <__ieee754_fmod+0x228>)
 802ad46:	1af6      	subs	r6, r6, r3
 802ad48:	fa05 f606 	lsl.w	r6, r5, r6
 802ad4c:	f04f 0c00 	mov.w	ip, #0
 802ad50:	e78d      	b.n	802ac6e <__ieee754_fmod+0xb2>
 802ad52:	4567      	cmp	r7, ip
 802ad54:	bf38      	it	cc
 802ad56:	f102 32ff 	addcc.w	r2, r2, #4294967295
 802ad5a:	2a00      	cmp	r2, #0
 802ad5c:	da05      	bge.n	802ad6a <__ieee754_fmod+0x1ae>
 802ad5e:	0ffa      	lsrs	r2, r7, #31
 802ad60:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802ad64:	007f      	lsls	r7, r7, #1
 802ad66:	3801      	subs	r0, #1
 802ad68:	e782      	b.n	802ac70 <__ieee754_fmod+0xb4>
 802ad6a:	ea52 0105 	orrs.w	r1, r2, r5
 802ad6e:	f43f af54 	beq.w	802ac1a <__ieee754_fmod+0x5e>
 802ad72:	0fe9      	lsrs	r1, r5, #31
 802ad74:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 802ad78:	006f      	lsls	r7, r5, #1
 802ad7a:	e7f4      	b.n	802ad66 <__ieee754_fmod+0x1aa>
 802ad7c:	0fe8      	lsrs	r0, r5, #31
 802ad7e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802ad82:	006d      	lsls	r5, r5, #1
 802ad84:	3b01      	subs	r3, #1
 802ad86:	e784      	b.n	802ac92 <__ieee754_fmod+0xd6>
 802ad88:	1ac9      	subs	r1, r1, r3
 802ad8a:	2914      	cmp	r1, #20
 802ad8c:	dc0a      	bgt.n	802ada4 <__ieee754_fmod+0x1e8>
 802ad8e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 802ad92:	fa02 f303 	lsl.w	r3, r2, r3
 802ad96:	40cd      	lsrs	r5, r1
 802ad98:	432b      	orrs	r3, r5
 802ad9a:	410a      	asrs	r2, r1
 802ad9c:	ea42 0104 	orr.w	r1, r2, r4
 802ada0:	4618      	mov	r0, r3
 802ada2:	e783      	b.n	802acac <__ieee754_fmod+0xf0>
 802ada4:	291f      	cmp	r1, #31
 802ada6:	dc07      	bgt.n	802adb8 <__ieee754_fmod+0x1fc>
 802ada8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 802adac:	40cd      	lsrs	r5, r1
 802adae:	fa02 f303 	lsl.w	r3, r2, r3
 802adb2:	432b      	orrs	r3, r5
 802adb4:	4622      	mov	r2, r4
 802adb6:	e7f1      	b.n	802ad9c <__ieee754_fmod+0x1e0>
 802adb8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 802adbc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 802adc0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 802adc4:	33e2      	adds	r3, #226	; 0xe2
 802adc6:	fa42 f303 	asr.w	r3, r2, r3
 802adca:	e7f3      	b.n	802adb4 <__ieee754_fmod+0x1f8>
 802adcc:	7fefffff 	.word	0x7fefffff
 802add0:	7ff00000 	.word	0x7ff00000
 802add4:	0802f0c8 	.word	0x0802f0c8
 802add8:	000fffff 	.word	0x000fffff
 802addc:	fffffbed 	.word	0xfffffbed
 802ade0:	fffffc02 	.word	0xfffffc02
 802ade4:	fffffbe2 	.word	0xfffffbe2

0802ade8 <__ieee754_pow>:
 802ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802adec:	ec57 6b11 	vmov	r6, r7, d1
 802adf0:	ed2d 8b02 	vpush	{d8}
 802adf4:	eeb0 8b40 	vmov.f64	d8, d0
 802adf8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802adfc:	ea58 0306 	orrs.w	r3, r8, r6
 802ae00:	b085      	sub	sp, #20
 802ae02:	46b9      	mov	r9, r7
 802ae04:	ee11 2a10 	vmov	r2, s2
 802ae08:	f000 8306 	beq.w	802b418 <__ieee754_pow+0x630>
 802ae0c:	ee18 aa90 	vmov	sl, s17
 802ae10:	4bb9      	ldr	r3, [pc, #740]	; (802b0f8 <__ieee754_pow+0x310>)
 802ae12:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 802ae16:	429c      	cmp	r4, r3
 802ae18:	ee10 ba10 	vmov	fp, s0
 802ae1c:	dc0b      	bgt.n	802ae36 <__ieee754_pow+0x4e>
 802ae1e:	d105      	bne.n	802ae2c <__ieee754_pow+0x44>
 802ae20:	f1bb 0f00 	cmp.w	fp, #0
 802ae24:	d107      	bne.n	802ae36 <__ieee754_pow+0x4e>
 802ae26:	45a0      	cmp	r8, r4
 802ae28:	dc0d      	bgt.n	802ae46 <__ieee754_pow+0x5e>
 802ae2a:	e001      	b.n	802ae30 <__ieee754_pow+0x48>
 802ae2c:	4598      	cmp	r8, r3
 802ae2e:	dc02      	bgt.n	802ae36 <__ieee754_pow+0x4e>
 802ae30:	4598      	cmp	r8, r3
 802ae32:	d110      	bne.n	802ae56 <__ieee754_pow+0x6e>
 802ae34:	b17a      	cbz	r2, 802ae56 <__ieee754_pow+0x6e>
 802ae36:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802ae3a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802ae3e:	ea54 030b 	orrs.w	r3, r4, fp
 802ae42:	f000 82e9 	beq.w	802b418 <__ieee754_pow+0x630>
 802ae46:	48ad      	ldr	r0, [pc, #692]	; (802b0fc <__ieee754_pow+0x314>)
 802ae48:	b005      	add	sp, #20
 802ae4a:	ecbd 8b02 	vpop	{d8}
 802ae4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ae52:	f001 beed 	b.w	802cc30 <nan>
 802ae56:	f1ba 0f00 	cmp.w	sl, #0
 802ae5a:	da4e      	bge.n	802aefa <__ieee754_pow+0x112>
 802ae5c:	4ba8      	ldr	r3, [pc, #672]	; (802b100 <__ieee754_pow+0x318>)
 802ae5e:	4598      	cmp	r8, r3
 802ae60:	dc49      	bgt.n	802aef6 <__ieee754_pow+0x10e>
 802ae62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802ae66:	4598      	cmp	r8, r3
 802ae68:	dd47      	ble.n	802aefa <__ieee754_pow+0x112>
 802ae6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802ae6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802ae72:	2b14      	cmp	r3, #20
 802ae74:	dd24      	ble.n	802aec0 <__ieee754_pow+0xd8>
 802ae76:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802ae7a:	fa22 f503 	lsr.w	r5, r2, r3
 802ae7e:	fa05 f303 	lsl.w	r3, r5, r3
 802ae82:	4293      	cmp	r3, r2
 802ae84:	d139      	bne.n	802aefa <__ieee754_pow+0x112>
 802ae86:	f005 0501 	and.w	r5, r5, #1
 802ae8a:	f1c5 0502 	rsb	r5, r5, #2
 802ae8e:	2a00      	cmp	r2, #0
 802ae90:	d15a      	bne.n	802af48 <__ieee754_pow+0x160>
 802ae92:	4b99      	ldr	r3, [pc, #612]	; (802b0f8 <__ieee754_pow+0x310>)
 802ae94:	4598      	cmp	r8, r3
 802ae96:	d122      	bne.n	802aede <__ieee754_pow+0xf6>
 802ae98:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802ae9c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802aea0:	ea53 030b 	orrs.w	r3, r3, fp
 802aea4:	f000 82b8 	beq.w	802b418 <__ieee754_pow+0x630>
 802aea8:	4b96      	ldr	r3, [pc, #600]	; (802b104 <__ieee754_pow+0x31c>)
 802aeaa:	429c      	cmp	r4, r3
 802aeac:	dd27      	ble.n	802aefe <__ieee754_pow+0x116>
 802aeae:	f1b9 0f00 	cmp.w	r9, #0
 802aeb2:	f280 82b4 	bge.w	802b41e <__ieee754_pow+0x636>
 802aeb6:	ed9f 7b84 	vldr	d7, [pc, #528]	; 802b0c8 <__ieee754_pow+0x2e0>
 802aeba:	ed8d 7b00 	vstr	d7, [sp]
 802aebe:	e026      	b.n	802af0e <__ieee754_pow+0x126>
 802aec0:	2a00      	cmp	r2, #0
 802aec2:	d140      	bne.n	802af46 <__ieee754_pow+0x15e>
 802aec4:	f1c3 0314 	rsb	r3, r3, #20
 802aec8:	fa48 f503 	asr.w	r5, r8, r3
 802aecc:	fa05 f303 	lsl.w	r3, r5, r3
 802aed0:	4543      	cmp	r3, r8
 802aed2:	f040 82aa 	bne.w	802b42a <__ieee754_pow+0x642>
 802aed6:	f005 0501 	and.w	r5, r5, #1
 802aeda:	f1c5 0502 	rsb	r5, r5, #2
 802aede:	4b8a      	ldr	r3, [pc, #552]	; (802b108 <__ieee754_pow+0x320>)
 802aee0:	4598      	cmp	r8, r3
 802aee2:	d11b      	bne.n	802af1c <__ieee754_pow+0x134>
 802aee4:	f1b9 0f00 	cmp.w	r9, #0
 802aee8:	f280 829c 	bge.w	802b424 <__ieee754_pow+0x63c>
 802aeec:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802aef0:	ee87 7b08 	vdiv.f64	d7, d7, d8
 802aef4:	e7e1      	b.n	802aeba <__ieee754_pow+0xd2>
 802aef6:	2502      	movs	r5, #2
 802aef8:	e7c9      	b.n	802ae8e <__ieee754_pow+0xa6>
 802aefa:	2500      	movs	r5, #0
 802aefc:	e7c7      	b.n	802ae8e <__ieee754_pow+0xa6>
 802aefe:	f1b9 0f00 	cmp.w	r9, #0
 802af02:	dad8      	bge.n	802aeb6 <__ieee754_pow+0xce>
 802af04:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 802af08:	4633      	mov	r3, r6
 802af0a:	e9cd 3400 	strd	r3, r4, [sp]
 802af0e:	ed9d 0b00 	vldr	d0, [sp]
 802af12:	b005      	add	sp, #20
 802af14:	ecbd 8b02 	vpop	{d8}
 802af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af1c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802af20:	d102      	bne.n	802af28 <__ieee754_pow+0x140>
 802af22:	ee28 7b08 	vmul.f64	d7, d8, d8
 802af26:	e7c8      	b.n	802aeba <__ieee754_pow+0xd2>
 802af28:	4b78      	ldr	r3, [pc, #480]	; (802b10c <__ieee754_pow+0x324>)
 802af2a:	4599      	cmp	r9, r3
 802af2c:	d10c      	bne.n	802af48 <__ieee754_pow+0x160>
 802af2e:	f1ba 0f00 	cmp.w	sl, #0
 802af32:	db09      	blt.n	802af48 <__ieee754_pow+0x160>
 802af34:	eeb0 0b48 	vmov.f64	d0, d8
 802af38:	b005      	add	sp, #20
 802af3a:	ecbd 8b02 	vpop	{d8}
 802af3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af42:	f000 bc15 	b.w	802b770 <__ieee754_sqrt>
 802af46:	2500      	movs	r5, #0
 802af48:	eeb0 0b48 	vmov.f64	d0, d8
 802af4c:	f001 fe5a 	bl	802cc04 <fabs>
 802af50:	ed8d 0b00 	vstr	d0, [sp]
 802af54:	f1bb 0f00 	cmp.w	fp, #0
 802af58:	d128      	bne.n	802afac <__ieee754_pow+0x1c4>
 802af5a:	b124      	cbz	r4, 802af66 <__ieee754_pow+0x17e>
 802af5c:	4b6a      	ldr	r3, [pc, #424]	; (802b108 <__ieee754_pow+0x320>)
 802af5e:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 802af62:	429a      	cmp	r2, r3
 802af64:	d122      	bne.n	802afac <__ieee754_pow+0x1c4>
 802af66:	f1b9 0f00 	cmp.w	r9, #0
 802af6a:	da07      	bge.n	802af7c <__ieee754_pow+0x194>
 802af6c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802af70:	ed9d 6b00 	vldr	d6, [sp]
 802af74:	ee87 7b06 	vdiv.f64	d7, d7, d6
 802af78:	ed8d 7b00 	vstr	d7, [sp]
 802af7c:	f1ba 0f00 	cmp.w	sl, #0
 802af80:	dac5      	bge.n	802af0e <__ieee754_pow+0x126>
 802af82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802af86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802af8a:	ea54 0305 	orrs.w	r3, r4, r5
 802af8e:	d106      	bne.n	802af9e <__ieee754_pow+0x1b6>
 802af90:	ed9d 7b00 	vldr	d7, [sp]
 802af94:	ee37 7b47 	vsub.f64	d7, d7, d7
 802af98:	ee87 7b07 	vdiv.f64	d7, d7, d7
 802af9c:	e78d      	b.n	802aeba <__ieee754_pow+0xd2>
 802af9e:	2d01      	cmp	r5, #1
 802afa0:	d1b5      	bne.n	802af0e <__ieee754_pow+0x126>
 802afa2:	ed9d 7b00 	vldr	d7, [sp]
 802afa6:	eeb1 7b47 	vneg.f64	d7, d7
 802afaa:	e786      	b.n	802aeba <__ieee754_pow+0xd2>
 802afac:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 802afb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 802afb4:	ea55 030a 	orrs.w	r3, r5, sl
 802afb8:	d104      	bne.n	802afc4 <__ieee754_pow+0x1dc>
 802afba:	ee38 8b48 	vsub.f64	d8, d8, d8
 802afbe:	ee88 7b08 	vdiv.f64	d7, d8, d8
 802afc2:	e77a      	b.n	802aeba <__ieee754_pow+0xd2>
 802afc4:	4b52      	ldr	r3, [pc, #328]	; (802b110 <__ieee754_pow+0x328>)
 802afc6:	4598      	cmp	r8, r3
 802afc8:	f340 80a8 	ble.w	802b11c <__ieee754_pow+0x334>
 802afcc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802afd0:	4598      	cmp	r8, r3
 802afd2:	dd0b      	ble.n	802afec <__ieee754_pow+0x204>
 802afd4:	4b4b      	ldr	r3, [pc, #300]	; (802b104 <__ieee754_pow+0x31c>)
 802afd6:	429c      	cmp	r4, r3
 802afd8:	dc0e      	bgt.n	802aff8 <__ieee754_pow+0x210>
 802afda:	f1b9 0f00 	cmp.w	r9, #0
 802afde:	f6bf af6a 	bge.w	802aeb6 <__ieee754_pow+0xce>
 802afe2:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 802b0d0 <__ieee754_pow+0x2e8>
 802afe6:	ee27 7b07 	vmul.f64	d7, d7, d7
 802afea:	e766      	b.n	802aeba <__ieee754_pow+0xd2>
 802afec:	4b49      	ldr	r3, [pc, #292]	; (802b114 <__ieee754_pow+0x32c>)
 802afee:	429c      	cmp	r4, r3
 802aff0:	ddf3      	ble.n	802afda <__ieee754_pow+0x1f2>
 802aff2:	4b45      	ldr	r3, [pc, #276]	; (802b108 <__ieee754_pow+0x320>)
 802aff4:	429c      	cmp	r4, r3
 802aff6:	dd03      	ble.n	802b000 <__ieee754_pow+0x218>
 802aff8:	f1b9 0f00 	cmp.w	r9, #0
 802affc:	dcf1      	bgt.n	802afe2 <__ieee754_pow+0x1fa>
 802affe:	e75a      	b.n	802aeb6 <__ieee754_pow+0xce>
 802b000:	ed9d 7b00 	vldr	d7, [sp]
 802b004:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802b008:	ed9f 5b33 	vldr	d5, [pc, #204]	; 802b0d8 <__ieee754_pow+0x2f0>
 802b00c:	ee37 6b46 	vsub.f64	d6, d7, d6
 802b010:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 802b014:	eeb1 3b46 	vneg.f64	d3, d6
 802b018:	eea3 5b07 	vfma.f64	d5, d3, d7
 802b01c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802b020:	eea5 7b46 	vfms.f64	d7, d5, d6
 802b024:	ee26 5b06 	vmul.f64	d5, d6, d6
 802b028:	ee27 5b05 	vmul.f64	d5, d7, d5
 802b02c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 802b0e0 <__ieee754_pow+0x2f8>
 802b030:	ee27 7b45 	vnmul.f64	d7, d7, d5
 802b034:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 802b0e8 <__ieee754_pow+0x300>
 802b038:	eea6 7b05 	vfma.f64	d7, d6, d5
 802b03c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 802b0f0 <__ieee754_pow+0x308>
 802b040:	eeb0 4b47 	vmov.f64	d4, d7
 802b044:	eea6 4b05 	vfma.f64	d4, d6, d5
 802b048:	ec53 2b14 	vmov	r2, r3, d4
 802b04c:	2200      	movs	r2, #0
 802b04e:	ec43 2b14 	vmov	d4, r2, r3
 802b052:	eeb0 6b44 	vmov.f64	d6, d4
 802b056:	eea3 6b05 	vfma.f64	d6, d3, d5
 802b05a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b05e:	3d01      	subs	r5, #1
 802b060:	ea55 030a 	orrs.w	r3, r5, sl
 802b064:	f04f 0200 	mov.w	r2, #0
 802b068:	463b      	mov	r3, r7
 802b06a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802b06e:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 802b072:	ec47 6b15 	vmov	d5, r6, r7
 802b076:	fe06 8b08 	vseleq.f64	d8, d6, d8
 802b07a:	ec47 6b13 	vmov	d3, r6, r7
 802b07e:	ec43 2b16 	vmov	d6, r2, r3
 802b082:	ee27 7b03 	vmul.f64	d7, d7, d3
 802b086:	ee35 5b46 	vsub.f64	d5, d5, d6
 802b08a:	4b23      	ldr	r3, [pc, #140]	; (802b118 <__ieee754_pow+0x330>)
 802b08c:	eea5 7b04 	vfma.f64	d7, d5, d4
 802b090:	ee24 6b06 	vmul.f64	d6, d4, d6
 802b094:	ee37 5b06 	vadd.f64	d5, d7, d6
 802b098:	ee15 1a90 	vmov	r1, s11
 802b09c:	4299      	cmp	r1, r3
 802b09e:	ee15 2a10 	vmov	r2, s10
 802b0a2:	f340 819b 	ble.w	802b3dc <__ieee754_pow+0x5f4>
 802b0a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802b0aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802b0ae:	4313      	orrs	r3, r2
 802b0b0:	f000 810a 	beq.w	802b2c8 <__ieee754_pow+0x4e0>
 802b0b4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 802b0d0 <__ieee754_pow+0x2e8>
 802b0b8:	ee28 8b07 	vmul.f64	d8, d8, d7
 802b0bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 802b0c0:	e6fb      	b.n	802aeba <__ieee754_pow+0xd2>
 802b0c2:	bf00      	nop
 802b0c4:	f3af 8000 	nop.w
	...
 802b0d0:	8800759c 	.word	0x8800759c
 802b0d4:	7e37e43c 	.word	0x7e37e43c
 802b0d8:	55555555 	.word	0x55555555
 802b0dc:	3fd55555 	.word	0x3fd55555
 802b0e0:	652b82fe 	.word	0x652b82fe
 802b0e4:	3ff71547 	.word	0x3ff71547
 802b0e8:	f85ddf44 	.word	0xf85ddf44
 802b0ec:	3e54ae0b 	.word	0x3e54ae0b
 802b0f0:	60000000 	.word	0x60000000
 802b0f4:	3ff71547 	.word	0x3ff71547
 802b0f8:	7ff00000 	.word	0x7ff00000
 802b0fc:	0802f75b 	.word	0x0802f75b
 802b100:	433fffff 	.word	0x433fffff
 802b104:	3fefffff 	.word	0x3fefffff
 802b108:	3ff00000 	.word	0x3ff00000
 802b10c:	3fe00000 	.word	0x3fe00000
 802b110:	41e00000 	.word	0x41e00000
 802b114:	3feffffe 	.word	0x3feffffe
 802b118:	408fffff 	.word	0x408fffff
 802b11c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 802b120:	f280 80ce 	bge.w	802b2c0 <__ieee754_pow+0x4d8>
 802b124:	ed9d 6b00 	vldr	d6, [sp]
 802b128:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 802b430 <__ieee754_pow+0x648>
 802b12c:	ee26 7b07 	vmul.f64	d7, d6, d7
 802b130:	ed8d 7b00 	vstr	d7, [sp]
 802b134:	9c01      	ldr	r4, [sp, #4]
 802b136:	f06f 0334 	mvn.w	r3, #52	; 0x34
 802b13a:	1521      	asrs	r1, r4, #20
 802b13c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802b140:	4419      	add	r1, r3
 802b142:	4be3      	ldr	r3, [pc, #908]	; (802b4d0 <__ieee754_pow+0x6e8>)
 802b144:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802b148:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 802b14c:	429c      	cmp	r4, r3
 802b14e:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 802b152:	dd06      	ble.n	802b162 <__ieee754_pow+0x37a>
 802b154:	4bdf      	ldr	r3, [pc, #892]	; (802b4d4 <__ieee754_pow+0x6ec>)
 802b156:	429c      	cmp	r4, r3
 802b158:	f340 80b4 	ble.w	802b2c4 <__ieee754_pow+0x4dc>
 802b15c:	3101      	adds	r1, #1
 802b15e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 802b162:	2400      	movs	r4, #0
 802b164:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b168:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 802b16c:	4603      	mov	r3, r0
 802b16e:	ec43 2b17 	vmov	d7, r2, r3
 802b172:	4bd9      	ldr	r3, [pc, #868]	; (802b4d8 <__ieee754_pow+0x6f0>)
 802b174:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 802b178:	4463      	add	r3, ip
 802b17a:	ed93 5b00 	vldr	d5, [r3]
 802b17e:	1040      	asrs	r0, r0, #1
 802b180:	ee37 2b45 	vsub.f64	d2, d7, d5
 802b184:	ee35 6b07 	vadd.f64	d6, d5, d7
 802b188:	ee84 1b06 	vdiv.f64	d1, d4, d6
 802b18c:	ee22 6b01 	vmul.f64	d6, d2, d1
 802b190:	ed8d 6b00 	vstr	d6, [sp]
 802b194:	e9dd 8900 	ldrd	r8, r9, [sp]
 802b198:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 802b19c:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 802b1a0:	f04f 0800 	mov.w	r8, #0
 802b1a4:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 802b1a8:	2200      	movs	r2, #0
 802b1aa:	ec49 8b14 	vmov	d4, r8, r9
 802b1ae:	ec43 2b16 	vmov	d6, r2, r3
 802b1b2:	eeb1 3b44 	vneg.f64	d3, d4
 802b1b6:	eea3 2b06 	vfma.f64	d2, d3, d6
 802b1ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 802b1be:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b1c2:	eea3 2b07 	vfma.f64	d2, d3, d7
 802b1c6:	ed9d 7b00 	vldr	d7, [sp]
 802b1ca:	ee22 2b01 	vmul.f64	d2, d2, d1
 802b1ce:	ee27 5b07 	vmul.f64	d5, d7, d7
 802b1d2:	ee37 6b04 	vadd.f64	d6, d7, d4
 802b1d6:	ed9f 1b98 	vldr	d1, [pc, #608]	; 802b438 <__ieee754_pow+0x650>
 802b1da:	ee25 0b05 	vmul.f64	d0, d5, d5
 802b1de:	ee26 6b02 	vmul.f64	d6, d6, d2
 802b1e2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 802b440 <__ieee754_pow+0x658>
 802b1e6:	eea5 7b01 	vfma.f64	d7, d5, d1
 802b1ea:	ed9f 1b97 	vldr	d1, [pc, #604]	; 802b448 <__ieee754_pow+0x660>
 802b1ee:	eea7 1b05 	vfma.f64	d1, d7, d5
 802b1f2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 802b450 <__ieee754_pow+0x668>
 802b1f6:	eea1 7b05 	vfma.f64	d7, d1, d5
 802b1fa:	ed9f 1b97 	vldr	d1, [pc, #604]	; 802b458 <__ieee754_pow+0x670>
 802b1fe:	eea7 1b05 	vfma.f64	d1, d7, d5
 802b202:	ed9f 7b97 	vldr	d7, [pc, #604]	; 802b460 <__ieee754_pow+0x678>
 802b206:	eea1 7b05 	vfma.f64	d7, d1, d5
 802b20a:	eea0 6b07 	vfma.f64	d6, d0, d7
 802b20e:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 802b212:	eeb0 5b47 	vmov.f64	d5, d7
 802b216:	eea4 5b04 	vfma.f64	d5, d4, d4
 802b21a:	ee35 5b06 	vadd.f64	d5, d5, d6
 802b21e:	ed8d 5b02 	vstr	d5, [sp, #8]
 802b222:	f8cd 8008 	str.w	r8, [sp, #8]
 802b226:	ed9d 5b02 	vldr	d5, [sp, #8]
 802b22a:	ee35 7b47 	vsub.f64	d7, d5, d7
 802b22e:	eea3 7b04 	vfma.f64	d7, d3, d4
 802b232:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b236:	ed9d 6b00 	vldr	d6, [sp]
 802b23a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802b23e:	eea2 7b05 	vfma.f64	d7, d2, d5
 802b242:	eeb0 6b47 	vmov.f64	d6, d7
 802b246:	eea4 6b05 	vfma.f64	d6, d4, d5
 802b24a:	ed8d 6b00 	vstr	d6, [sp]
 802b24e:	f8cd 8000 	str.w	r8, [sp]
 802b252:	ed9d 2b00 	vldr	d2, [sp]
 802b256:	eeb0 6b42 	vmov.f64	d6, d2
 802b25a:	eea3 6b05 	vfma.f64	d6, d3, d5
 802b25e:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b262:	ed9f 6b81 	vldr	d6, [pc, #516]	; 802b468 <__ieee754_pow+0x680>
 802b266:	4b9d      	ldr	r3, [pc, #628]	; (802b4dc <__ieee754_pow+0x6f4>)
 802b268:	ee27 7b06 	vmul.f64	d7, d7, d6
 802b26c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 802b470 <__ieee754_pow+0x688>
 802b270:	4463      	add	r3, ip
 802b272:	eea2 7b06 	vfma.f64	d7, d2, d6
 802b276:	ed93 6b00 	vldr	d6, [r3]
 802b27a:	4b99      	ldr	r3, [pc, #612]	; (802b4e0 <__ieee754_pow+0x6f8>)
 802b27c:	ee37 6b06 	vadd.f64	d6, d7, d6
 802b280:	449c      	add	ip, r3
 802b282:	ed9c 1b00 	vldr	d1, [ip]
 802b286:	eeb0 4b46 	vmov.f64	d4, d6
 802b28a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 802b478 <__ieee754_pow+0x690>
 802b28e:	ee07 1a90 	vmov	s15, r1
 802b292:	eea2 4b03 	vfma.f64	d4, d2, d3
 802b296:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802b29a:	ee34 4b01 	vadd.f64	d4, d4, d1
 802b29e:	ee34 5b07 	vadd.f64	d5, d4, d7
 802b2a2:	ed8d 5b00 	vstr	d5, [sp]
 802b2a6:	f8cd 8000 	str.w	r8, [sp]
 802b2aa:	ed9d 4b00 	vldr	d4, [sp]
 802b2ae:	ee34 7b47 	vsub.f64	d7, d4, d7
 802b2b2:	ee37 7b41 	vsub.f64	d7, d7, d1
 802b2b6:	eea2 7b43 	vfms.f64	d7, d2, d3
 802b2ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b2be:	e6ce      	b.n	802b05e <__ieee754_pow+0x276>
 802b2c0:	2300      	movs	r3, #0
 802b2c2:	e73a      	b.n	802b13a <__ieee754_pow+0x352>
 802b2c4:	2401      	movs	r4, #1
 802b2c6:	e74d      	b.n	802b164 <__ieee754_pow+0x37c>
 802b2c8:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 802b480 <__ieee754_pow+0x698>
 802b2cc:	ee35 5b46 	vsub.f64	d5, d5, d6
 802b2d0:	ee37 4b04 	vadd.f64	d4, d7, d4
 802b2d4:	eeb4 4bc5 	vcmpe.f64	d4, d5
 802b2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b2dc:	f73f aeea 	bgt.w	802b0b4 <__ieee754_pow+0x2cc>
 802b2e0:	4a80      	ldr	r2, [pc, #512]	; (802b4e4 <__ieee754_pow+0x6fc>)
 802b2e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802b2e6:	4293      	cmp	r3, r2
 802b2e8:	f340 808e 	ble.w	802b408 <__ieee754_pow+0x620>
 802b2ec:	151b      	asrs	r3, r3, #20
 802b2ee:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 802b2f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802b2f6:	4103      	asrs	r3, r0
 802b2f8:	440b      	add	r3, r1
 802b2fa:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802b2fe:	487a      	ldr	r0, [pc, #488]	; (802b4e8 <__ieee754_pow+0x700>)
 802b300:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802b304:	4110      	asrs	r0, r2
 802b306:	ea23 0500 	bic.w	r5, r3, r0
 802b30a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 802b30e:	2400      	movs	r4, #0
 802b310:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 802b314:	f1c2 0214 	rsb	r2, r2, #20
 802b318:	ec45 4b15 	vmov	d5, r4, r5
 802b31c:	4110      	asrs	r0, r2
 802b31e:	2900      	cmp	r1, #0
 802b320:	bfb8      	it	lt
 802b322:	4240      	neglt	r0, r0
 802b324:	ee36 6b45 	vsub.f64	d6, d6, d5
 802b328:	ee36 5b07 	vadd.f64	d5, d6, d7
 802b32c:	ec53 2b15 	vmov	r2, r3, d5
 802b330:	2200      	movs	r2, #0
 802b332:	ec43 2b15 	vmov	d5, r2, r3
 802b336:	ed9f 4b54 	vldr	d4, [pc, #336]	; 802b488 <__ieee754_pow+0x6a0>
 802b33a:	ee35 6b46 	vsub.f64	d6, d5, d6
 802b33e:	ee37 6b46 	vsub.f64	d6, d7, d6
 802b342:	ed9f 7b53 	vldr	d7, [pc, #332]	; 802b490 <__ieee754_pow+0x6a8>
 802b346:	ee25 7b07 	vmul.f64	d7, d5, d7
 802b34a:	eea6 7b04 	vfma.f64	d7, d6, d4
 802b34e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 802b498 <__ieee754_pow+0x6b0>
 802b352:	eeb0 4b47 	vmov.f64	d4, d7
 802b356:	eea5 4b06 	vfma.f64	d4, d5, d6
 802b35a:	eeb0 3b44 	vmov.f64	d3, d4
 802b35e:	eea5 3b46 	vfms.f64	d3, d5, d6
 802b362:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 802b4a0 <__ieee754_pow+0x6b8>
 802b366:	ee37 7b43 	vsub.f64	d7, d7, d3
 802b36a:	ee24 6b04 	vmul.f64	d6, d4, d4
 802b36e:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 802b4a8 <__ieee754_pow+0x6c0>
 802b372:	eea4 7b07 	vfma.f64	d7, d4, d7
 802b376:	eea6 3b05 	vfma.f64	d3, d6, d5
 802b37a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 802b4b0 <__ieee754_pow+0x6c8>
 802b37e:	eea3 5b06 	vfma.f64	d5, d3, d6
 802b382:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 802b4b8 <__ieee754_pow+0x6d0>
 802b386:	eea5 3b06 	vfma.f64	d3, d5, d6
 802b38a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 802b4c0 <__ieee754_pow+0x6d8>
 802b38e:	eea3 5b06 	vfma.f64	d5, d3, d6
 802b392:	eeb0 3b44 	vmov.f64	d3, d4
 802b396:	eea5 3b46 	vfms.f64	d3, d5, d6
 802b39a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 802b39e:	eeb0 6b43 	vmov.f64	d6, d3
 802b3a2:	ee24 3b03 	vmul.f64	d3, d4, d3
 802b3a6:	ee36 5b45 	vsub.f64	d5, d6, d5
 802b3aa:	ee83 6b05 	vdiv.f64	d6, d3, d5
 802b3ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b3b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802b3b6:	ee37 7b44 	vsub.f64	d7, d7, d4
 802b3ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b3be:	ed8d 7b00 	vstr	d7, [sp]
 802b3c2:	9901      	ldr	r1, [sp, #4]
 802b3c4:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 802b3c8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802b3cc:	da1e      	bge.n	802b40c <__ieee754_pow+0x624>
 802b3ce:	eeb0 0b47 	vmov.f64	d0, d7
 802b3d2:	f001 fcc1 	bl	802cd58 <scalbn>
 802b3d6:	ee20 7b08 	vmul.f64	d7, d0, d8
 802b3da:	e56e      	b.n	802aeba <__ieee754_pow+0xd2>
 802b3dc:	4b43      	ldr	r3, [pc, #268]	; (802b4ec <__ieee754_pow+0x704>)
 802b3de:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 802b3e2:	4298      	cmp	r0, r3
 802b3e4:	f77f af7c 	ble.w	802b2e0 <__ieee754_pow+0x4f8>
 802b3e8:	4b41      	ldr	r3, [pc, #260]	; (802b4f0 <__ieee754_pow+0x708>)
 802b3ea:	440b      	add	r3, r1
 802b3ec:	4313      	orrs	r3, r2
 802b3ee:	d002      	beq.n	802b3f6 <__ieee754_pow+0x60e>
 802b3f0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 802b4c8 <__ieee754_pow+0x6e0>
 802b3f4:	e660      	b.n	802b0b8 <__ieee754_pow+0x2d0>
 802b3f6:	ee35 5b46 	vsub.f64	d5, d5, d6
 802b3fa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802b3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b402:	f6ff af6d 	blt.w	802b2e0 <__ieee754_pow+0x4f8>
 802b406:	e7f3      	b.n	802b3f0 <__ieee754_pow+0x608>
 802b408:	2000      	movs	r0, #0
 802b40a:	e78d      	b.n	802b328 <__ieee754_pow+0x540>
 802b40c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b410:	460b      	mov	r3, r1
 802b412:	ec43 2b10 	vmov	d0, r2, r3
 802b416:	e7de      	b.n	802b3d6 <__ieee754_pow+0x5ee>
 802b418:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802b41c:	e54d      	b.n	802aeba <__ieee754_pow+0xd2>
 802b41e:	e9cd 6700 	strd	r6, r7, [sp]
 802b422:	e574      	b.n	802af0e <__ieee754_pow+0x126>
 802b424:	ed8d 8b00 	vstr	d8, [sp]
 802b428:	e571      	b.n	802af0e <__ieee754_pow+0x126>
 802b42a:	4615      	mov	r5, r2
 802b42c:	e557      	b.n	802aede <__ieee754_pow+0xf6>
 802b42e:	bf00      	nop
 802b430:	00000000 	.word	0x00000000
 802b434:	43400000 	.word	0x43400000
 802b438:	4a454eef 	.word	0x4a454eef
 802b43c:	3fca7e28 	.word	0x3fca7e28
 802b440:	93c9db65 	.word	0x93c9db65
 802b444:	3fcd864a 	.word	0x3fcd864a
 802b448:	a91d4101 	.word	0xa91d4101
 802b44c:	3fd17460 	.word	0x3fd17460
 802b450:	518f264d 	.word	0x518f264d
 802b454:	3fd55555 	.word	0x3fd55555
 802b458:	db6fabff 	.word	0xdb6fabff
 802b45c:	3fdb6db6 	.word	0x3fdb6db6
 802b460:	33333303 	.word	0x33333303
 802b464:	3fe33333 	.word	0x3fe33333
 802b468:	dc3a03fd 	.word	0xdc3a03fd
 802b46c:	3feec709 	.word	0x3feec709
 802b470:	145b01f5 	.word	0x145b01f5
 802b474:	be3e2fe0 	.word	0xbe3e2fe0
 802b478:	e0000000 	.word	0xe0000000
 802b47c:	3feec709 	.word	0x3feec709
 802b480:	652b82fe 	.word	0x652b82fe
 802b484:	3c971547 	.word	0x3c971547
 802b488:	fefa39ef 	.word	0xfefa39ef
 802b48c:	3fe62e42 	.word	0x3fe62e42
 802b490:	0ca86c39 	.word	0x0ca86c39
 802b494:	be205c61 	.word	0xbe205c61
 802b498:	00000000 	.word	0x00000000
 802b49c:	3fe62e43 	.word	0x3fe62e43
 802b4a0:	72bea4d0 	.word	0x72bea4d0
 802b4a4:	3e663769 	.word	0x3e663769
 802b4a8:	c5d26bf1 	.word	0xc5d26bf1
 802b4ac:	bebbbd41 	.word	0xbebbbd41
 802b4b0:	af25de2c 	.word	0xaf25de2c
 802b4b4:	3f11566a 	.word	0x3f11566a
 802b4b8:	16bebd93 	.word	0x16bebd93
 802b4bc:	bf66c16c 	.word	0xbf66c16c
 802b4c0:	5555553e 	.word	0x5555553e
 802b4c4:	3fc55555 	.word	0x3fc55555
 802b4c8:	c2f8f359 	.word	0xc2f8f359
 802b4cc:	01a56e1f 	.word	0x01a56e1f
 802b4d0:	0003988e 	.word	0x0003988e
 802b4d4:	000bb679 	.word	0x000bb679
 802b4d8:	0802f0d8 	.word	0x0802f0d8
 802b4dc:	0802f0f8 	.word	0x0802f0f8
 802b4e0:	0802f0e8 	.word	0x0802f0e8
 802b4e4:	3fe00000 	.word	0x3fe00000
 802b4e8:	000fffff 	.word	0x000fffff
 802b4ec:	4090cbff 	.word	0x4090cbff
 802b4f0:	3f6f3400 	.word	0x3f6f3400
 802b4f4:	00000000 	.word	0x00000000

0802b4f8 <__ieee754_rem_pio2>:
 802b4f8:	b570      	push	{r4, r5, r6, lr}
 802b4fa:	eeb0 7b40 	vmov.f64	d7, d0
 802b4fe:	ee17 5a90 	vmov	r5, s15
 802b502:	4b95      	ldr	r3, [pc, #596]	; (802b758 <__ieee754_rem_pio2+0x260>)
 802b504:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802b508:	429e      	cmp	r6, r3
 802b50a:	b088      	sub	sp, #32
 802b50c:	4604      	mov	r4, r0
 802b50e:	dc07      	bgt.n	802b520 <__ieee754_rem_pio2+0x28>
 802b510:	2200      	movs	r2, #0
 802b512:	2300      	movs	r3, #0
 802b514:	ed84 0b00 	vstr	d0, [r4]
 802b518:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802b51c:	2000      	movs	r0, #0
 802b51e:	e01b      	b.n	802b558 <__ieee754_rem_pio2+0x60>
 802b520:	4b8e      	ldr	r3, [pc, #568]	; (802b75c <__ieee754_rem_pio2+0x264>)
 802b522:	429e      	cmp	r6, r3
 802b524:	dc3b      	bgt.n	802b59e <__ieee754_rem_pio2+0xa6>
 802b526:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 802b52a:	2d00      	cmp	r5, #0
 802b52c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 802b718 <__ieee754_rem_pio2+0x220>
 802b530:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 802b534:	dd19      	ble.n	802b56a <__ieee754_rem_pio2+0x72>
 802b536:	ee30 7b46 	vsub.f64	d7, d0, d6
 802b53a:	429e      	cmp	r6, r3
 802b53c:	d00e      	beq.n	802b55c <__ieee754_rem_pio2+0x64>
 802b53e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 802b720 <__ieee754_rem_pio2+0x228>
 802b542:	ee37 5b46 	vsub.f64	d5, d7, d6
 802b546:	ee37 7b45 	vsub.f64	d7, d7, d5
 802b54a:	ed84 5b00 	vstr	d5, [r4]
 802b54e:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b552:	ed84 7b02 	vstr	d7, [r4, #8]
 802b556:	2001      	movs	r0, #1
 802b558:	b008      	add	sp, #32
 802b55a:	bd70      	pop	{r4, r5, r6, pc}
 802b55c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 802b728 <__ieee754_rem_pio2+0x230>
 802b560:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b564:	ed9f 6b72 	vldr	d6, [pc, #456]	; 802b730 <__ieee754_rem_pio2+0x238>
 802b568:	e7eb      	b.n	802b542 <__ieee754_rem_pio2+0x4a>
 802b56a:	429e      	cmp	r6, r3
 802b56c:	ee30 7b06 	vadd.f64	d7, d0, d6
 802b570:	d00e      	beq.n	802b590 <__ieee754_rem_pio2+0x98>
 802b572:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 802b720 <__ieee754_rem_pio2+0x228>
 802b576:	ee37 5b06 	vadd.f64	d5, d7, d6
 802b57a:	ee37 7b45 	vsub.f64	d7, d7, d5
 802b57e:	ed84 5b00 	vstr	d5, [r4]
 802b582:	ee37 7b06 	vadd.f64	d7, d7, d6
 802b586:	f04f 30ff 	mov.w	r0, #4294967295
 802b58a:	ed84 7b02 	vstr	d7, [r4, #8]
 802b58e:	e7e3      	b.n	802b558 <__ieee754_rem_pio2+0x60>
 802b590:	ed9f 6b65 	vldr	d6, [pc, #404]	; 802b728 <__ieee754_rem_pio2+0x230>
 802b594:	ee37 7b06 	vadd.f64	d7, d7, d6
 802b598:	ed9f 6b65 	vldr	d6, [pc, #404]	; 802b730 <__ieee754_rem_pio2+0x238>
 802b59c:	e7eb      	b.n	802b576 <__ieee754_rem_pio2+0x7e>
 802b59e:	4b70      	ldr	r3, [pc, #448]	; (802b760 <__ieee754_rem_pio2+0x268>)
 802b5a0:	429e      	cmp	r6, r3
 802b5a2:	dc6c      	bgt.n	802b67e <__ieee754_rem_pio2+0x186>
 802b5a4:	f001 fb2e 	bl	802cc04 <fabs>
 802b5a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802b5ac:	ed9f 6b62 	vldr	d6, [pc, #392]	; 802b738 <__ieee754_rem_pio2+0x240>
 802b5b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 802b5b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802b5b8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802b5bc:	ee17 0a90 	vmov	r0, s15
 802b5c0:	eeb1 5b44 	vneg.f64	d5, d4
 802b5c4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 802b718 <__ieee754_rem_pio2+0x220>
 802b5c8:	eea5 0b07 	vfma.f64	d0, d5, d7
 802b5cc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 802b720 <__ieee754_rem_pio2+0x228>
 802b5d0:	281f      	cmp	r0, #31
 802b5d2:	ee24 7b07 	vmul.f64	d7, d4, d7
 802b5d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 802b5da:	dc08      	bgt.n	802b5ee <__ieee754_rem_pio2+0xf6>
 802b5dc:	1e42      	subs	r2, r0, #1
 802b5de:	4b61      	ldr	r3, [pc, #388]	; (802b764 <__ieee754_rem_pio2+0x26c>)
 802b5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802b5e4:	42b3      	cmp	r3, r6
 802b5e6:	d002      	beq.n	802b5ee <__ieee754_rem_pio2+0xf6>
 802b5e8:	ed84 6b00 	vstr	d6, [r4]
 802b5ec:	e022      	b.n	802b634 <__ieee754_rem_pio2+0x13c>
 802b5ee:	ee16 3a90 	vmov	r3, s13
 802b5f2:	1536      	asrs	r6, r6, #20
 802b5f4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 802b5f8:	1af3      	subs	r3, r6, r3
 802b5fa:	2b10      	cmp	r3, #16
 802b5fc:	ddf4      	ble.n	802b5e8 <__ieee754_rem_pio2+0xf0>
 802b5fe:	eeb0 6b40 	vmov.f64	d6, d0
 802b602:	ed9f 3b49 	vldr	d3, [pc, #292]	; 802b728 <__ieee754_rem_pio2+0x230>
 802b606:	eea5 6b03 	vfma.f64	d6, d5, d3
 802b60a:	ee30 7b46 	vsub.f64	d7, d0, d6
 802b60e:	eea5 7b03 	vfma.f64	d7, d5, d3
 802b612:	ed9f 3b47 	vldr	d3, [pc, #284]	; 802b730 <__ieee754_rem_pio2+0x238>
 802b616:	ee94 7b03 	vfnms.f64	d7, d4, d3
 802b61a:	ee36 3b47 	vsub.f64	d3, d6, d7
 802b61e:	ee13 3a90 	vmov	r3, s7
 802b622:	f3c3 530a 	ubfx	r3, r3, #20, #11
 802b626:	1af6      	subs	r6, r6, r3
 802b628:	2e31      	cmp	r6, #49	; 0x31
 802b62a:	dc17      	bgt.n	802b65c <__ieee754_rem_pio2+0x164>
 802b62c:	eeb0 0b46 	vmov.f64	d0, d6
 802b630:	ed84 3b00 	vstr	d3, [r4]
 802b634:	ed94 6b00 	vldr	d6, [r4]
 802b638:	2d00      	cmp	r5, #0
 802b63a:	ee30 0b46 	vsub.f64	d0, d0, d6
 802b63e:	ee30 7b47 	vsub.f64	d7, d0, d7
 802b642:	ed84 7b02 	vstr	d7, [r4, #8]
 802b646:	da87      	bge.n	802b558 <__ieee754_rem_pio2+0x60>
 802b648:	eeb1 6b46 	vneg.f64	d6, d6
 802b64c:	ed84 6b00 	vstr	d6, [r4]
 802b650:	eeb1 7b47 	vneg.f64	d7, d7
 802b654:	4240      	negs	r0, r0
 802b656:	ed84 7b02 	vstr	d7, [r4, #8]
 802b65a:	e77d      	b.n	802b558 <__ieee754_rem_pio2+0x60>
 802b65c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 802b740 <__ieee754_rem_pio2+0x248>
 802b660:	eeb0 0b46 	vmov.f64	d0, d6
 802b664:	eea5 0b03 	vfma.f64	d0, d5, d3
 802b668:	ee36 7b40 	vsub.f64	d7, d6, d0
 802b66c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 802b748 <__ieee754_rem_pio2+0x250>
 802b670:	eea5 7b03 	vfma.f64	d7, d5, d3
 802b674:	ee94 7b06 	vfnms.f64	d7, d4, d6
 802b678:	ee30 6b47 	vsub.f64	d6, d0, d7
 802b67c:	e7b4      	b.n	802b5e8 <__ieee754_rem_pio2+0xf0>
 802b67e:	4b3a      	ldr	r3, [pc, #232]	; (802b768 <__ieee754_rem_pio2+0x270>)
 802b680:	429e      	cmp	r6, r3
 802b682:	dd06      	ble.n	802b692 <__ieee754_rem_pio2+0x19a>
 802b684:	ee30 7b40 	vsub.f64	d7, d0, d0
 802b688:	ed80 7b02 	vstr	d7, [r0, #8]
 802b68c:	ed80 7b00 	vstr	d7, [r0]
 802b690:	e744      	b.n	802b51c <__ieee754_rem_pio2+0x24>
 802b692:	1532      	asrs	r2, r6, #20
 802b694:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 802b698:	ee10 0a10 	vmov	r0, s0
 802b69c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 802b6a0:	ec41 0b17 	vmov	d7, r0, r1
 802b6a4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 802b6a8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 802b750 <__ieee754_rem_pio2+0x258>
 802b6ac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 802b6b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b6b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 802b6b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 802b6bc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 802b6c0:	a908      	add	r1, sp, #32
 802b6c2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 802b6c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b6ca:	ed8d 6b04 	vstr	d6, [sp, #16]
 802b6ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 802b6d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 802b6d6:	2303      	movs	r3, #3
 802b6d8:	ed31 7b02 	vldmdb	r1!, {d7}
 802b6dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802b6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b6e4:	f103 30ff 	add.w	r0, r3, #4294967295
 802b6e8:	d013      	beq.n	802b712 <__ieee754_rem_pio2+0x21a>
 802b6ea:	4920      	ldr	r1, [pc, #128]	; (802b76c <__ieee754_rem_pio2+0x274>)
 802b6ec:	9101      	str	r1, [sp, #4]
 802b6ee:	2102      	movs	r1, #2
 802b6f0:	9100      	str	r1, [sp, #0]
 802b6f2:	a802      	add	r0, sp, #8
 802b6f4:	4621      	mov	r1, r4
 802b6f6:	f000 fb6f 	bl	802bdd8 <__kernel_rem_pio2>
 802b6fa:	2d00      	cmp	r5, #0
 802b6fc:	f6bf af2c 	bge.w	802b558 <__ieee754_rem_pio2+0x60>
 802b700:	ed94 7b00 	vldr	d7, [r4]
 802b704:	eeb1 7b47 	vneg.f64	d7, d7
 802b708:	ed84 7b00 	vstr	d7, [r4]
 802b70c:	ed94 7b02 	vldr	d7, [r4, #8]
 802b710:	e79e      	b.n	802b650 <__ieee754_rem_pio2+0x158>
 802b712:	4603      	mov	r3, r0
 802b714:	e7e0      	b.n	802b6d8 <__ieee754_rem_pio2+0x1e0>
 802b716:	bf00      	nop
 802b718:	54400000 	.word	0x54400000
 802b71c:	3ff921fb 	.word	0x3ff921fb
 802b720:	1a626331 	.word	0x1a626331
 802b724:	3dd0b461 	.word	0x3dd0b461
 802b728:	1a600000 	.word	0x1a600000
 802b72c:	3dd0b461 	.word	0x3dd0b461
 802b730:	2e037073 	.word	0x2e037073
 802b734:	3ba3198a 	.word	0x3ba3198a
 802b738:	6dc9c883 	.word	0x6dc9c883
 802b73c:	3fe45f30 	.word	0x3fe45f30
 802b740:	2e000000 	.word	0x2e000000
 802b744:	3ba3198a 	.word	0x3ba3198a
 802b748:	252049c1 	.word	0x252049c1
 802b74c:	397b839a 	.word	0x397b839a
 802b750:	00000000 	.word	0x00000000
 802b754:	41700000 	.word	0x41700000
 802b758:	3fe921fb 	.word	0x3fe921fb
 802b75c:	4002d97b 	.word	0x4002d97b
 802b760:	413921fb 	.word	0x413921fb
 802b764:	0802f108 	.word	0x0802f108
 802b768:	7fefffff 	.word	0x7fefffff
 802b76c:	0802f188 	.word	0x0802f188

0802b770 <__ieee754_sqrt>:
 802b770:	eeb1 0bc0 	vsqrt.f64	d0, d0
 802b774:	4770      	bx	lr
	...

0802b778 <__ieee754_asinf>:
 802b778:	b538      	push	{r3, r4, r5, lr}
 802b77a:	ee10 5a10 	vmov	r5, s0
 802b77e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802b782:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 802b786:	ed2d 8b04 	vpush	{d8-d9}
 802b78a:	d10c      	bne.n	802b7a6 <__ieee754_asinf+0x2e>
 802b78c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 802b908 <__ieee754_asinf+0x190>
 802b790:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 802b90c <__ieee754_asinf+0x194>
 802b794:	ee60 7a27 	vmul.f32	s15, s0, s15
 802b798:	eee0 7a07 	vfma.f32	s15, s0, s14
 802b79c:	eeb0 0a67 	vmov.f32	s0, s15
 802b7a0:	ecbd 8b04 	vpop	{d8-d9}
 802b7a4:	bd38      	pop	{r3, r4, r5, pc}
 802b7a6:	dd04      	ble.n	802b7b2 <__ieee754_asinf+0x3a>
 802b7a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 802b7ac:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 802b7b0:	e7f6      	b.n	802b7a0 <__ieee754_asinf+0x28>
 802b7b2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 802b7b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 802b7ba:	da0b      	bge.n	802b7d4 <__ieee754_asinf+0x5c>
 802b7bc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 802b7c0:	da52      	bge.n	802b868 <__ieee754_asinf+0xf0>
 802b7c2:	eddf 7a53 	vldr	s15, [pc, #332]	; 802b910 <__ieee754_asinf+0x198>
 802b7c6:	ee70 7a27 	vadd.f32	s15, s0, s15
 802b7ca:	eef4 7ae8 	vcmpe.f32	s15, s17
 802b7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b7d2:	dce5      	bgt.n	802b7a0 <__ieee754_asinf+0x28>
 802b7d4:	f001 fc10 	bl	802cff8 <fabsf>
 802b7d8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 802b7dc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 802b7e0:	ee20 8a08 	vmul.f32	s16, s0, s16
 802b7e4:	eddf 7a4b 	vldr	s15, [pc, #300]	; 802b914 <__ieee754_asinf+0x19c>
 802b7e8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 802b918 <__ieee754_asinf+0x1a0>
 802b7ec:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 802b91c <__ieee754_asinf+0x1a4>
 802b7f0:	eea8 7a27 	vfma.f32	s14, s16, s15
 802b7f4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 802b920 <__ieee754_asinf+0x1a8>
 802b7f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 802b7fc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802b924 <__ieee754_asinf+0x1ac>
 802b800:	eea7 7a88 	vfma.f32	s14, s15, s16
 802b804:	eddf 7a48 	vldr	s15, [pc, #288]	; 802b928 <__ieee754_asinf+0x1b0>
 802b808:	eee7 7a08 	vfma.f32	s15, s14, s16
 802b80c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 802b92c <__ieee754_asinf+0x1b4>
 802b810:	eea7 9a88 	vfma.f32	s18, s15, s16
 802b814:	eddf 7a46 	vldr	s15, [pc, #280]	; 802b930 <__ieee754_asinf+0x1b8>
 802b818:	eee8 7a07 	vfma.f32	s15, s16, s14
 802b81c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 802b934 <__ieee754_asinf+0x1bc>
 802b820:	eea7 7a88 	vfma.f32	s14, s15, s16
 802b824:	eddf 7a44 	vldr	s15, [pc, #272]	; 802b938 <__ieee754_asinf+0x1c0>
 802b828:	eee7 7a08 	vfma.f32	s15, s14, s16
 802b82c:	eeb0 0a48 	vmov.f32	s0, s16
 802b830:	eee7 8a88 	vfma.f32	s17, s15, s16
 802b834:	f000 fa5e 	bl	802bcf4 <__ieee754_sqrtf>
 802b838:	4b40      	ldr	r3, [pc, #256]	; (802b93c <__ieee754_asinf+0x1c4>)
 802b83a:	ee29 9a08 	vmul.f32	s18, s18, s16
 802b83e:	429c      	cmp	r4, r3
 802b840:	ee89 6a28 	vdiv.f32	s12, s18, s17
 802b844:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802b848:	dd3d      	ble.n	802b8c6 <__ieee754_asinf+0x14e>
 802b84a:	eea0 0a06 	vfma.f32	s0, s0, s12
 802b84e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 802b940 <__ieee754_asinf+0x1c8>
 802b852:	eee0 7a07 	vfma.f32	s15, s0, s14
 802b856:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 802b90c <__ieee754_asinf+0x194>
 802b85a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802b85e:	2d00      	cmp	r5, #0
 802b860:	bfd8      	it	le
 802b862:	eeb1 0a40 	vnegle.f32	s0, s0
 802b866:	e79b      	b.n	802b7a0 <__ieee754_asinf+0x28>
 802b868:	ee60 7a00 	vmul.f32	s15, s0, s0
 802b86c:	eddf 6a29 	vldr	s13, [pc, #164]	; 802b914 <__ieee754_asinf+0x19c>
 802b870:	ed9f 7a29 	vldr	s14, [pc, #164]	; 802b918 <__ieee754_asinf+0x1a0>
 802b874:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 802b92c <__ieee754_asinf+0x1b4>
 802b878:	eea7 7aa6 	vfma.f32	s14, s15, s13
 802b87c:	eddf 6a28 	vldr	s13, [pc, #160]	; 802b920 <__ieee754_asinf+0x1a8>
 802b880:	eee7 6a27 	vfma.f32	s13, s14, s15
 802b884:	ed9f 7a27 	vldr	s14, [pc, #156]	; 802b924 <__ieee754_asinf+0x1ac>
 802b888:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802b88c:	eddf 6a26 	vldr	s13, [pc, #152]	; 802b928 <__ieee754_asinf+0x1b0>
 802b890:	eee7 6a27 	vfma.f32	s13, s14, s15
 802b894:	ed9f 7a21 	vldr	s14, [pc, #132]	; 802b91c <__ieee754_asinf+0x1a4>
 802b898:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802b89c:	eddf 6a24 	vldr	s13, [pc, #144]	; 802b930 <__ieee754_asinf+0x1b8>
 802b8a0:	eee7 6a86 	vfma.f32	s13, s15, s12
 802b8a4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 802b934 <__ieee754_asinf+0x1bc>
 802b8a8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802b8ac:	eddf 6a22 	vldr	s13, [pc, #136]	; 802b938 <__ieee754_asinf+0x1c0>
 802b8b0:	eee6 6a27 	vfma.f32	s13, s12, s15
 802b8b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 802b8b8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 802b8bc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 802b8c0:	eea0 0a27 	vfma.f32	s0, s0, s15
 802b8c4:	e76c      	b.n	802b7a0 <__ieee754_asinf+0x28>
 802b8c6:	ee10 3a10 	vmov	r3, s0
 802b8ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802b8ce:	f023 030f 	bic.w	r3, r3, #15
 802b8d2:	ee07 3a90 	vmov	s15, r3
 802b8d6:	eef1 6a67 	vneg.f32	s13, s15
 802b8da:	eea6 8aa7 	vfma.f32	s16, s13, s15
 802b8de:	ee70 5a00 	vadd.f32	s11, s0, s0
 802b8e2:	ee37 0a80 	vadd.f32	s0, s15, s0
 802b8e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 802b908 <__ieee754_asinf+0x190>
 802b8ea:	ee88 5a00 	vdiv.f32	s10, s16, s0
 802b8ee:	ed9f 0a15 	vldr	s0, [pc, #84]	; 802b944 <__ieee754_asinf+0x1cc>
 802b8f2:	eee5 7a47 	vfms.f32	s15, s10, s14
 802b8f6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 802b8fa:	eeb0 6a40 	vmov.f32	s12, s0
 802b8fe:	eea6 6a87 	vfma.f32	s12, s13, s14
 802b902:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802b906:	e7a8      	b.n	802b85a <__ieee754_asinf+0xe2>
 802b908:	b33bbd2e 	.word	0xb33bbd2e
 802b90c:	3fc90fdb 	.word	0x3fc90fdb
 802b910:	7149f2ca 	.word	0x7149f2ca
 802b914:	3811ef08 	.word	0x3811ef08
 802b918:	3a4f7f04 	.word	0x3a4f7f04
 802b91c:	3e2aaaab 	.word	0x3e2aaaab
 802b920:	bd241146 	.word	0xbd241146
 802b924:	3e4e0aa8 	.word	0x3e4e0aa8
 802b928:	bea6b090 	.word	0xbea6b090
 802b92c:	3d9dc62e 	.word	0x3d9dc62e
 802b930:	bf303361 	.word	0xbf303361
 802b934:	4001572d 	.word	0x4001572d
 802b938:	c019d139 	.word	0xc019d139
 802b93c:	3f799999 	.word	0x3f799999
 802b940:	333bbd2e 	.word	0x333bbd2e
 802b944:	3f490fdb 	.word	0x3f490fdb

0802b948 <__ieee754_atan2f>:
 802b948:	ee10 2a90 	vmov	r2, s1
 802b94c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802b950:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802b954:	b510      	push	{r4, lr}
 802b956:	eef0 7a40 	vmov.f32	s15, s0
 802b95a:	dc06      	bgt.n	802b96a <__ieee754_atan2f+0x22>
 802b95c:	ee10 0a10 	vmov	r0, s0
 802b960:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 802b964:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802b968:	dd04      	ble.n	802b974 <__ieee754_atan2f+0x2c>
 802b96a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802b96e:	eeb0 0a67 	vmov.f32	s0, s15
 802b972:	bd10      	pop	{r4, pc}
 802b974:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 802b978:	d103      	bne.n	802b982 <__ieee754_atan2f+0x3a>
 802b97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b97e:	f001 ba69 	b.w	802ce54 <atanf>
 802b982:	1794      	asrs	r4, r2, #30
 802b984:	f004 0402 	and.w	r4, r4, #2
 802b988:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802b98c:	b93b      	cbnz	r3, 802b99e <__ieee754_atan2f+0x56>
 802b98e:	2c02      	cmp	r4, #2
 802b990:	d06b      	beq.n	802ba6a <__ieee754_atan2f+0x122>
 802b992:	ed9f 7a37 	vldr	s14, [pc, #220]	; 802ba70 <__ieee754_atan2f+0x128>
 802b996:	2c03      	cmp	r4, #3
 802b998:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802b99c:	e7e7      	b.n	802b96e <__ieee754_atan2f+0x26>
 802b99e:	b939      	cbnz	r1, 802b9b0 <__ieee754_atan2f+0x68>
 802b9a0:	eddf 7a34 	vldr	s15, [pc, #208]	; 802ba74 <__ieee754_atan2f+0x12c>
 802b9a4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 802ba78 <__ieee754_atan2f+0x130>
 802b9a8:	2800      	cmp	r0, #0
 802b9aa:	fe67 7a87 	vselge.f32	s15, s15, s14
 802b9ae:	e7de      	b.n	802b96e <__ieee754_atan2f+0x26>
 802b9b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802b9b4:	d121      	bne.n	802b9fa <__ieee754_atan2f+0xb2>
 802b9b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802b9ba:	d111      	bne.n	802b9e0 <__ieee754_atan2f+0x98>
 802b9bc:	2c02      	cmp	r4, #2
 802b9be:	d009      	beq.n	802b9d4 <__ieee754_atan2f+0x8c>
 802b9c0:	2c03      	cmp	r4, #3
 802b9c2:	d00a      	beq.n	802b9da <__ieee754_atan2f+0x92>
 802b9c4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 802ba7c <__ieee754_atan2f+0x134>
 802b9c8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 802ba80 <__ieee754_atan2f+0x138>
 802b9cc:	2c01      	cmp	r4, #1
 802b9ce:	fe47 7a87 	vseleq.f32	s15, s15, s14
 802b9d2:	e7cc      	b.n	802b96e <__ieee754_atan2f+0x26>
 802b9d4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802ba84 <__ieee754_atan2f+0x13c>
 802b9d8:	e7c9      	b.n	802b96e <__ieee754_atan2f+0x26>
 802b9da:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802ba88 <__ieee754_atan2f+0x140>
 802b9de:	e7c6      	b.n	802b96e <__ieee754_atan2f+0x26>
 802b9e0:	2c02      	cmp	r4, #2
 802b9e2:	d042      	beq.n	802ba6a <__ieee754_atan2f+0x122>
 802b9e4:	2c03      	cmp	r4, #3
 802b9e6:	d005      	beq.n	802b9f4 <__ieee754_atan2f+0xac>
 802b9e8:	2c01      	cmp	r4, #1
 802b9ea:	eddf 7a28 	vldr	s15, [pc, #160]	; 802ba8c <__ieee754_atan2f+0x144>
 802b9ee:	ed9f 7a28 	vldr	s14, [pc, #160]	; 802ba90 <__ieee754_atan2f+0x148>
 802b9f2:	e7ec      	b.n	802b9ce <__ieee754_atan2f+0x86>
 802b9f4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802ba70 <__ieee754_atan2f+0x128>
 802b9f8:	e7b9      	b.n	802b96e <__ieee754_atan2f+0x26>
 802b9fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802b9fe:	d0cf      	beq.n	802b9a0 <__ieee754_atan2f+0x58>
 802ba00:	1a5b      	subs	r3, r3, r1
 802ba02:	15db      	asrs	r3, r3, #23
 802ba04:	2b3c      	cmp	r3, #60	; 0x3c
 802ba06:	dc1a      	bgt.n	802ba3e <__ieee754_atan2f+0xf6>
 802ba08:	2a00      	cmp	r2, #0
 802ba0a:	da01      	bge.n	802ba10 <__ieee754_atan2f+0xc8>
 802ba0c:	333c      	adds	r3, #60	; 0x3c
 802ba0e:	db19      	blt.n	802ba44 <__ieee754_atan2f+0xfc>
 802ba10:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802ba14:	f001 faf0 	bl	802cff8 <fabsf>
 802ba18:	f001 fa1c 	bl	802ce54 <atanf>
 802ba1c:	eef0 7a40 	vmov.f32	s15, s0
 802ba20:	2c01      	cmp	r4, #1
 802ba22:	d012      	beq.n	802ba4a <__ieee754_atan2f+0x102>
 802ba24:	2c02      	cmp	r4, #2
 802ba26:	d017      	beq.n	802ba58 <__ieee754_atan2f+0x110>
 802ba28:	2c00      	cmp	r4, #0
 802ba2a:	d0a0      	beq.n	802b96e <__ieee754_atan2f+0x26>
 802ba2c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 802ba94 <__ieee754_atan2f+0x14c>
 802ba30:	ee77 7a87 	vadd.f32	s15, s15, s14
 802ba34:	ed9f 7a18 	vldr	s14, [pc, #96]	; 802ba98 <__ieee754_atan2f+0x150>
 802ba38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ba3c:	e797      	b.n	802b96e <__ieee754_atan2f+0x26>
 802ba3e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802ba74 <__ieee754_atan2f+0x12c>
 802ba42:	e7ed      	b.n	802ba20 <__ieee754_atan2f+0xd8>
 802ba44:	eddf 7a12 	vldr	s15, [pc, #72]	; 802ba90 <__ieee754_atan2f+0x148>
 802ba48:	e7ea      	b.n	802ba20 <__ieee754_atan2f+0xd8>
 802ba4a:	ee17 3a90 	vmov	r3, s15
 802ba4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802ba52:	ee07 3a90 	vmov	s15, r3
 802ba56:	e78a      	b.n	802b96e <__ieee754_atan2f+0x26>
 802ba58:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 802ba94 <__ieee754_atan2f+0x14c>
 802ba5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 802ba60:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 802ba98 <__ieee754_atan2f+0x150>
 802ba64:	ee77 7a67 	vsub.f32	s15, s14, s15
 802ba68:	e781      	b.n	802b96e <__ieee754_atan2f+0x26>
 802ba6a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802ba98 <__ieee754_atan2f+0x150>
 802ba6e:	e77e      	b.n	802b96e <__ieee754_atan2f+0x26>
 802ba70:	c0490fdb 	.word	0xc0490fdb
 802ba74:	3fc90fdb 	.word	0x3fc90fdb
 802ba78:	bfc90fdb 	.word	0xbfc90fdb
 802ba7c:	bf490fdb 	.word	0xbf490fdb
 802ba80:	3f490fdb 	.word	0x3f490fdb
 802ba84:	4016cbe4 	.word	0x4016cbe4
 802ba88:	c016cbe4 	.word	0xc016cbe4
 802ba8c:	80000000 	.word	0x80000000
 802ba90:	00000000 	.word	0x00000000
 802ba94:	33bbbd2e 	.word	0x33bbbd2e
 802ba98:	40490fdb 	.word	0x40490fdb

0802ba9c <__ieee754_rem_pio2f>:
 802ba9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ba9e:	ee10 6a10 	vmov	r6, s0
 802baa2:	4b86      	ldr	r3, [pc, #536]	; (802bcbc <__ieee754_rem_pio2f+0x220>)
 802baa4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 802baa8:	429c      	cmp	r4, r3
 802baaa:	b087      	sub	sp, #28
 802baac:	4605      	mov	r5, r0
 802baae:	dc05      	bgt.n	802babc <__ieee754_rem_pio2f+0x20>
 802bab0:	2300      	movs	r3, #0
 802bab2:	ed85 0a00 	vstr	s0, [r5]
 802bab6:	6043      	str	r3, [r0, #4]
 802bab8:	2000      	movs	r0, #0
 802baba:	e020      	b.n	802bafe <__ieee754_rem_pio2f+0x62>
 802babc:	4b80      	ldr	r3, [pc, #512]	; (802bcc0 <__ieee754_rem_pio2f+0x224>)
 802babe:	429c      	cmp	r4, r3
 802bac0:	dc38      	bgt.n	802bb34 <__ieee754_rem_pio2f+0x98>
 802bac2:	2e00      	cmp	r6, #0
 802bac4:	f024 040f 	bic.w	r4, r4, #15
 802bac8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 802bcc4 <__ieee754_rem_pio2f+0x228>
 802bacc:	4b7e      	ldr	r3, [pc, #504]	; (802bcc8 <__ieee754_rem_pio2f+0x22c>)
 802bace:	dd18      	ble.n	802bb02 <__ieee754_rem_pio2f+0x66>
 802bad0:	429c      	cmp	r4, r3
 802bad2:	ee70 7a47 	vsub.f32	s15, s0, s14
 802bad6:	bf09      	itett	eq
 802bad8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 802bccc <__ieee754_rem_pio2f+0x230>
 802badc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 802bcd0 <__ieee754_rem_pio2f+0x234>
 802bae0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802bae4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 802bcd4 <__ieee754_rem_pio2f+0x238>
 802bae8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802baec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802baf0:	edc0 6a00 	vstr	s13, [r0]
 802baf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802baf8:	edc0 7a01 	vstr	s15, [r0, #4]
 802bafc:	2001      	movs	r0, #1
 802bafe:	b007      	add	sp, #28
 802bb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bb02:	429c      	cmp	r4, r3
 802bb04:	ee70 7a07 	vadd.f32	s15, s0, s14
 802bb08:	bf09      	itett	eq
 802bb0a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 802bccc <__ieee754_rem_pio2f+0x230>
 802bb0e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 802bcd0 <__ieee754_rem_pio2f+0x234>
 802bb12:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802bb16:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 802bcd4 <__ieee754_rem_pio2f+0x238>
 802bb1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802bb1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802bb22:	edc0 6a00 	vstr	s13, [r0]
 802bb26:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bb2a:	edc0 7a01 	vstr	s15, [r0, #4]
 802bb2e:	f04f 30ff 	mov.w	r0, #4294967295
 802bb32:	e7e4      	b.n	802bafe <__ieee754_rem_pio2f+0x62>
 802bb34:	4b68      	ldr	r3, [pc, #416]	; (802bcd8 <__ieee754_rem_pio2f+0x23c>)
 802bb36:	429c      	cmp	r4, r3
 802bb38:	dc71      	bgt.n	802bc1e <__ieee754_rem_pio2f+0x182>
 802bb3a:	f001 fa5d 	bl	802cff8 <fabsf>
 802bb3e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802bcdc <__ieee754_rem_pio2f+0x240>
 802bb42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802bb46:	eee0 7a07 	vfma.f32	s15, s0, s14
 802bb4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802bb4e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 802bb52:	ee17 0a90 	vmov	r0, s15
 802bb56:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802bcc4 <__ieee754_rem_pio2f+0x228>
 802bb5a:	eeb1 7a46 	vneg.f32	s14, s12
 802bb5e:	eea7 0a27 	vfma.f32	s0, s14, s15
 802bb62:	281f      	cmp	r0, #31
 802bb64:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802bcd0 <__ieee754_rem_pio2f+0x234>
 802bb68:	ee66 7a27 	vmul.f32	s15, s12, s15
 802bb6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 802bb70:	ee16 3a90 	vmov	r3, s13
 802bb74:	dc1c      	bgt.n	802bbb0 <__ieee754_rem_pio2f+0x114>
 802bb76:	1e47      	subs	r7, r0, #1
 802bb78:	4959      	ldr	r1, [pc, #356]	; (802bce0 <__ieee754_rem_pio2f+0x244>)
 802bb7a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802bb7e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 802bb82:	428a      	cmp	r2, r1
 802bb84:	d014      	beq.n	802bbb0 <__ieee754_rem_pio2f+0x114>
 802bb86:	602b      	str	r3, [r5, #0]
 802bb88:	ed95 7a00 	vldr	s14, [r5]
 802bb8c:	ee30 0a47 	vsub.f32	s0, s0, s14
 802bb90:	2e00      	cmp	r6, #0
 802bb92:	ee30 0a67 	vsub.f32	s0, s0, s15
 802bb96:	ed85 0a01 	vstr	s0, [r5, #4]
 802bb9a:	dab0      	bge.n	802bafe <__ieee754_rem_pio2f+0x62>
 802bb9c:	eeb1 7a47 	vneg.f32	s14, s14
 802bba0:	eeb1 0a40 	vneg.f32	s0, s0
 802bba4:	ed85 7a00 	vstr	s14, [r5]
 802bba8:	ed85 0a01 	vstr	s0, [r5, #4]
 802bbac:	4240      	negs	r0, r0
 802bbae:	e7a6      	b.n	802bafe <__ieee754_rem_pio2f+0x62>
 802bbb0:	15e4      	asrs	r4, r4, #23
 802bbb2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802bbb6:	1aa2      	subs	r2, r4, r2
 802bbb8:	2a08      	cmp	r2, #8
 802bbba:	dde4      	ble.n	802bb86 <__ieee754_rem_pio2f+0xea>
 802bbbc:	eddf 7a43 	vldr	s15, [pc, #268]	; 802bccc <__ieee754_rem_pio2f+0x230>
 802bbc0:	eef0 6a40 	vmov.f32	s13, s0
 802bbc4:	eee7 6a27 	vfma.f32	s13, s14, s15
 802bbc8:	ee30 0a66 	vsub.f32	s0, s0, s13
 802bbcc:	eea7 0a27 	vfma.f32	s0, s14, s15
 802bbd0:	eddf 7a40 	vldr	s15, [pc, #256]	; 802bcd4 <__ieee754_rem_pio2f+0x238>
 802bbd4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 802bbd8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802bbdc:	eef0 7a40 	vmov.f32	s15, s0
 802bbe0:	ee15 3a90 	vmov	r3, s11
 802bbe4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802bbe8:	1aa4      	subs	r4, r4, r2
 802bbea:	2c19      	cmp	r4, #25
 802bbec:	dc04      	bgt.n	802bbf8 <__ieee754_rem_pio2f+0x15c>
 802bbee:	edc5 5a00 	vstr	s11, [r5]
 802bbf2:	eeb0 0a66 	vmov.f32	s0, s13
 802bbf6:	e7c7      	b.n	802bb88 <__ieee754_rem_pio2f+0xec>
 802bbf8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802bce4 <__ieee754_rem_pio2f+0x248>
 802bbfc:	eeb0 0a66 	vmov.f32	s0, s13
 802bc00:	eea7 0a25 	vfma.f32	s0, s14, s11
 802bc04:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802bc08:	eee7 7a25 	vfma.f32	s15, s14, s11
 802bc0c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 802bce8 <__ieee754_rem_pio2f+0x24c>
 802bc10:	eed6 7a07 	vfnms.f32	s15, s12, s14
 802bc14:	ee30 7a67 	vsub.f32	s14, s0, s15
 802bc18:	ed85 7a00 	vstr	s14, [r5]
 802bc1c:	e7b4      	b.n	802bb88 <__ieee754_rem_pio2f+0xec>
 802bc1e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802bc22:	db06      	blt.n	802bc32 <__ieee754_rem_pio2f+0x196>
 802bc24:	ee70 7a40 	vsub.f32	s15, s0, s0
 802bc28:	edc0 7a01 	vstr	s15, [r0, #4]
 802bc2c:	edc0 7a00 	vstr	s15, [r0]
 802bc30:	e742      	b.n	802bab8 <__ieee754_rem_pio2f+0x1c>
 802bc32:	15e2      	asrs	r2, r4, #23
 802bc34:	3a86      	subs	r2, #134	; 0x86
 802bc36:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 802bc3a:	ee07 3a90 	vmov	s15, r3
 802bc3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802bc42:	eddf 6a2a 	vldr	s13, [pc, #168]	; 802bcec <__ieee754_rem_pio2f+0x250>
 802bc46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802bc4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bc4e:	ed8d 7a03 	vstr	s14, [sp, #12]
 802bc52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802bc56:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802bc5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802bc5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bc62:	ed8d 7a04 	vstr	s14, [sp, #16]
 802bc66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802bc6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 802bc6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc72:	edcd 7a05 	vstr	s15, [sp, #20]
 802bc76:	d11e      	bne.n	802bcb6 <__ieee754_rem_pio2f+0x21a>
 802bc78:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802bc7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc80:	bf0c      	ite	eq
 802bc82:	2301      	moveq	r3, #1
 802bc84:	2302      	movne	r3, #2
 802bc86:	491a      	ldr	r1, [pc, #104]	; (802bcf0 <__ieee754_rem_pio2f+0x254>)
 802bc88:	9101      	str	r1, [sp, #4]
 802bc8a:	2102      	movs	r1, #2
 802bc8c:	9100      	str	r1, [sp, #0]
 802bc8e:	a803      	add	r0, sp, #12
 802bc90:	4629      	mov	r1, r5
 802bc92:	f000 fbf3 	bl	802c47c <__kernel_rem_pio2f>
 802bc96:	2e00      	cmp	r6, #0
 802bc98:	f6bf af31 	bge.w	802bafe <__ieee754_rem_pio2f+0x62>
 802bc9c:	edd5 7a00 	vldr	s15, [r5]
 802bca0:	eef1 7a67 	vneg.f32	s15, s15
 802bca4:	edc5 7a00 	vstr	s15, [r5]
 802bca8:	edd5 7a01 	vldr	s15, [r5, #4]
 802bcac:	eef1 7a67 	vneg.f32	s15, s15
 802bcb0:	edc5 7a01 	vstr	s15, [r5, #4]
 802bcb4:	e77a      	b.n	802bbac <__ieee754_rem_pio2f+0x110>
 802bcb6:	2303      	movs	r3, #3
 802bcb8:	e7e5      	b.n	802bc86 <__ieee754_rem_pio2f+0x1ea>
 802bcba:	bf00      	nop
 802bcbc:	3f490fd8 	.word	0x3f490fd8
 802bcc0:	4016cbe3 	.word	0x4016cbe3
 802bcc4:	3fc90f80 	.word	0x3fc90f80
 802bcc8:	3fc90fd0 	.word	0x3fc90fd0
 802bccc:	37354400 	.word	0x37354400
 802bcd0:	37354443 	.word	0x37354443
 802bcd4:	2e85a308 	.word	0x2e85a308
 802bcd8:	43490f80 	.word	0x43490f80
 802bcdc:	3f22f984 	.word	0x3f22f984
 802bce0:	0802f290 	.word	0x0802f290
 802bce4:	2e85a300 	.word	0x2e85a300
 802bce8:	248d3132 	.word	0x248d3132
 802bcec:	43800000 	.word	0x43800000
 802bcf0:	0802f310 	.word	0x0802f310

0802bcf4 <__ieee754_sqrtf>:
 802bcf4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802bcf8:	4770      	bx	lr
 802bcfa:	0000      	movs	r0, r0
 802bcfc:	0000      	movs	r0, r0
	...

0802bd00 <__kernel_cos>:
 802bd00:	ee10 1a90 	vmov	r1, s1
 802bd04:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802bd08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802bd0c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 802bd10:	da05      	bge.n	802bd1e <__kernel_cos+0x1e>
 802bd12:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 802bd16:	ee16 3a90 	vmov	r3, s13
 802bd1a:	2b00      	cmp	r3, #0
 802bd1c:	d03d      	beq.n	802bd9a <__kernel_cos+0x9a>
 802bd1e:	ee20 4b00 	vmul.f64	d4, d0, d0
 802bd22:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 802bd26:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 802bda0 <__kernel_cos+0xa0>
 802bd2a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 802bd2e:	ee24 6b06 	vmul.f64	d6, d4, d6
 802bd32:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 802bda8 <__kernel_cos+0xa8>
 802bd36:	eea4 5b03 	vfma.f64	d5, d4, d3
 802bd3a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 802bdb0 <__kernel_cos+0xb0>
 802bd3e:	eea5 3b04 	vfma.f64	d3, d5, d4
 802bd42:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 802bdb8 <__kernel_cos+0xb8>
 802bd46:	eea3 5b04 	vfma.f64	d5, d3, d4
 802bd4a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 802bdc0 <__kernel_cos+0xc0>
 802bd4e:	4b20      	ldr	r3, [pc, #128]	; (802bdd0 <__kernel_cos+0xd0>)
 802bd50:	eea5 3b04 	vfma.f64	d3, d5, d4
 802bd54:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 802bdc8 <__kernel_cos+0xc8>
 802bd58:	4299      	cmp	r1, r3
 802bd5a:	eea3 5b04 	vfma.f64	d5, d3, d4
 802bd5e:	ee25 5b04 	vmul.f64	d5, d5, d4
 802bd62:	eea4 1b05 	vfma.f64	d1, d4, d5
 802bd66:	dc04      	bgt.n	802bd72 <__kernel_cos+0x72>
 802bd68:	ee36 6b41 	vsub.f64	d6, d6, d1
 802bd6c:	ee37 0b46 	vsub.f64	d0, d7, d6
 802bd70:	4770      	bx	lr
 802bd72:	4b18      	ldr	r3, [pc, #96]	; (802bdd4 <__kernel_cos+0xd4>)
 802bd74:	4299      	cmp	r1, r3
 802bd76:	dc0d      	bgt.n	802bd94 <__kernel_cos+0x94>
 802bd78:	2200      	movs	r2, #0
 802bd7a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 802bd7e:	ec43 2b15 	vmov	d5, r2, r3
 802bd82:	ee37 0b45 	vsub.f64	d0, d7, d5
 802bd86:	ee36 6b45 	vsub.f64	d6, d6, d5
 802bd8a:	ee36 6b41 	vsub.f64	d6, d6, d1
 802bd8e:	ee30 0b46 	vsub.f64	d0, d0, d6
 802bd92:	4770      	bx	lr
 802bd94:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 802bd98:	e7f3      	b.n	802bd82 <__kernel_cos+0x82>
 802bd9a:	eeb0 0b47 	vmov.f64	d0, d7
 802bd9e:	4770      	bx	lr
 802bda0:	be8838d4 	.word	0xbe8838d4
 802bda4:	bda8fae9 	.word	0xbda8fae9
 802bda8:	bdb4b1c4 	.word	0xbdb4b1c4
 802bdac:	3e21ee9e 	.word	0x3e21ee9e
 802bdb0:	809c52ad 	.word	0x809c52ad
 802bdb4:	be927e4f 	.word	0xbe927e4f
 802bdb8:	19cb1590 	.word	0x19cb1590
 802bdbc:	3efa01a0 	.word	0x3efa01a0
 802bdc0:	16c15177 	.word	0x16c15177
 802bdc4:	bf56c16c 	.word	0xbf56c16c
 802bdc8:	5555554c 	.word	0x5555554c
 802bdcc:	3fa55555 	.word	0x3fa55555
 802bdd0:	3fd33332 	.word	0x3fd33332
 802bdd4:	3fe90000 	.word	0x3fe90000

0802bdd8 <__kernel_rem_pio2>:
 802bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bddc:	ed2d 8b06 	vpush	{d8-d10}
 802bde0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 802bde4:	469b      	mov	fp, r3
 802bde6:	460e      	mov	r6, r1
 802bde8:	4bc7      	ldr	r3, [pc, #796]	; (802c108 <__kernel_rem_pio2+0x330>)
 802bdea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 802bdec:	9002      	str	r0, [sp, #8]
 802bdee:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 802bdf2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 802bdf4:	1ed1      	subs	r1, r2, #3
 802bdf6:	2318      	movs	r3, #24
 802bdf8:	f06f 0417 	mvn.w	r4, #23
 802bdfc:	fb91 f1f3 	sdiv	r1, r1, r3
 802be00:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802be04:	f10b 3aff 	add.w	sl, fp, #4294967295
 802be08:	fb01 4404 	mla	r4, r1, r4, r4
 802be0c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 802c0f0 <__kernel_rem_pio2+0x318>
 802be10:	4414      	add	r4, r2
 802be12:	eba1 050a 	sub.w	r5, r1, sl
 802be16:	aa1a      	add	r2, sp, #104	; 0x68
 802be18:	eb09 070a 	add.w	r7, r9, sl
 802be1c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 802be20:	4696      	mov	lr, r2
 802be22:	2300      	movs	r3, #0
 802be24:	42bb      	cmp	r3, r7
 802be26:	dd0f      	ble.n	802be48 <__kernel_rem_pio2+0x70>
 802be28:	af6a      	add	r7, sp, #424	; 0x1a8
 802be2a:	2200      	movs	r2, #0
 802be2c:	454a      	cmp	r2, r9
 802be2e:	dc28      	bgt.n	802be82 <__kernel_rem_pio2+0xaa>
 802be30:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 802be34:	eb0b 0302 	add.w	r3, fp, r2
 802be38:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 802be3c:	9d02      	ldr	r5, [sp, #8]
 802be3e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 802c0f0 <__kernel_rem_pio2+0x318>
 802be42:	f04f 0c00 	mov.w	ip, #0
 802be46:	e016      	b.n	802be76 <__kernel_rem_pio2+0x9e>
 802be48:	42dd      	cmn	r5, r3
 802be4a:	d409      	bmi.n	802be60 <__kernel_rem_pio2+0x88>
 802be4c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802be50:	ee07 2a90 	vmov	s15, r2
 802be54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802be58:	ecae 7b02 	vstmia	lr!, {d7}
 802be5c:	3301      	adds	r3, #1
 802be5e:	e7e1      	b.n	802be24 <__kernel_rem_pio2+0x4c>
 802be60:	eeb0 7b46 	vmov.f64	d7, d6
 802be64:	e7f8      	b.n	802be58 <__kernel_rem_pio2+0x80>
 802be66:	ecb5 5b02 	vldmia	r5!, {d5}
 802be6a:	ed33 6b02 	vldmdb	r3!, {d6}
 802be6e:	f10c 0c01 	add.w	ip, ip, #1
 802be72:	eea5 7b06 	vfma.f64	d7, d5, d6
 802be76:	45d4      	cmp	ip, sl
 802be78:	ddf5      	ble.n	802be66 <__kernel_rem_pio2+0x8e>
 802be7a:	eca7 7b02 	vstmia	r7!, {d7}
 802be7e:	3201      	adds	r2, #1
 802be80:	e7d4      	b.n	802be2c <__kernel_rem_pio2+0x54>
 802be82:	ab06      	add	r3, sp, #24
 802be84:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 802be88:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 802c0f8 <__kernel_rem_pio2+0x320>
 802be8c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 802c100 <__kernel_rem_pio2+0x328>
 802be90:	9304      	str	r3, [sp, #16]
 802be92:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 802be96:	9303      	str	r3, [sp, #12]
 802be98:	464d      	mov	r5, r9
 802be9a:	ab92      	add	r3, sp, #584	; 0x248
 802be9c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 802bea0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802bea4:	3f01      	subs	r7, #1
 802bea6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 802beaa:	00ff      	lsls	r7, r7, #3
 802beac:	ab92      	add	r3, sp, #584	; 0x248
 802beae:	19da      	adds	r2, r3, r7
 802beb0:	3a98      	subs	r2, #152	; 0x98
 802beb2:	2300      	movs	r3, #0
 802beb4:	1ae9      	subs	r1, r5, r3
 802beb6:	2900      	cmp	r1, #0
 802beb8:	dc4e      	bgt.n	802bf58 <__kernel_rem_pio2+0x180>
 802beba:	4620      	mov	r0, r4
 802bebc:	f000 ff4c 	bl	802cd58 <scalbn>
 802bec0:	eeb0 8b40 	vmov.f64	d8, d0
 802bec4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 802bec8:	ee28 0b00 	vmul.f64	d0, d8, d0
 802becc:	f7fe f9e4 	bl	802a298 <floor>
 802bed0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 802bed4:	eea0 8b47 	vfms.f64	d8, d0, d7
 802bed8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 802bedc:	2c00      	cmp	r4, #0
 802bede:	edcd 7a01 	vstr	s15, [sp, #4]
 802bee2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802bee6:	ee38 8b47 	vsub.f64	d8, d8, d7
 802beea:	dd4a      	ble.n	802bf82 <__kernel_rem_pio2+0x1aa>
 802beec:	1e69      	subs	r1, r5, #1
 802beee:	ab06      	add	r3, sp, #24
 802bef0:	f1c4 0018 	rsb	r0, r4, #24
 802bef4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 802bef8:	9a01      	ldr	r2, [sp, #4]
 802befa:	fa4c f300 	asr.w	r3, ip, r0
 802befe:	441a      	add	r2, r3
 802bf00:	4083      	lsls	r3, r0
 802bf02:	9201      	str	r2, [sp, #4]
 802bf04:	ebac 0203 	sub.w	r2, ip, r3
 802bf08:	ab06      	add	r3, sp, #24
 802bf0a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 802bf0e:	f1c4 0317 	rsb	r3, r4, #23
 802bf12:	fa42 f803 	asr.w	r8, r2, r3
 802bf16:	f1b8 0f00 	cmp.w	r8, #0
 802bf1a:	dd43      	ble.n	802bfa4 <__kernel_rem_pio2+0x1cc>
 802bf1c:	9b01      	ldr	r3, [sp, #4]
 802bf1e:	2000      	movs	r0, #0
 802bf20:	3301      	adds	r3, #1
 802bf22:	9301      	str	r3, [sp, #4]
 802bf24:	4601      	mov	r1, r0
 802bf26:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 802bf2a:	4285      	cmp	r5, r0
 802bf2c:	dc6e      	bgt.n	802c00c <__kernel_rem_pio2+0x234>
 802bf2e:	2c00      	cmp	r4, #0
 802bf30:	dd04      	ble.n	802bf3c <__kernel_rem_pio2+0x164>
 802bf32:	2c01      	cmp	r4, #1
 802bf34:	d07f      	beq.n	802c036 <__kernel_rem_pio2+0x25e>
 802bf36:	2c02      	cmp	r4, #2
 802bf38:	f000 8087 	beq.w	802c04a <__kernel_rem_pio2+0x272>
 802bf3c:	f1b8 0f02 	cmp.w	r8, #2
 802bf40:	d130      	bne.n	802bfa4 <__kernel_rem_pio2+0x1cc>
 802bf42:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802bf46:	ee30 8b48 	vsub.f64	d8, d0, d8
 802bf4a:	b359      	cbz	r1, 802bfa4 <__kernel_rem_pio2+0x1cc>
 802bf4c:	4620      	mov	r0, r4
 802bf4e:	f000 ff03 	bl	802cd58 <scalbn>
 802bf52:	ee38 8b40 	vsub.f64	d8, d8, d0
 802bf56:	e025      	b.n	802bfa4 <__kernel_rem_pio2+0x1cc>
 802bf58:	ee20 7b09 	vmul.f64	d7, d0, d9
 802bf5c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 802bf60:	a806      	add	r0, sp, #24
 802bf62:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 802bf66:	eea7 0b4a 	vfms.f64	d0, d7, d10
 802bf6a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802bf6e:	ee10 1a10 	vmov	r1, s0
 802bf72:	ed32 0b02 	vldmdb	r2!, {d0}
 802bf76:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 802bf7a:	ee37 0b00 	vadd.f64	d0, d7, d0
 802bf7e:	3301      	adds	r3, #1
 802bf80:	e798      	b.n	802beb4 <__kernel_rem_pio2+0xdc>
 802bf82:	d106      	bne.n	802bf92 <__kernel_rem_pio2+0x1ba>
 802bf84:	1e6b      	subs	r3, r5, #1
 802bf86:	aa06      	add	r2, sp, #24
 802bf88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802bf8c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 802bf90:	e7c1      	b.n	802bf16 <__kernel_rem_pio2+0x13e>
 802bf92:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802bf96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802bf9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bf9e:	da32      	bge.n	802c006 <__kernel_rem_pio2+0x22e>
 802bfa0:	f04f 0800 	mov.w	r8, #0
 802bfa4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802bfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bfac:	f040 80b0 	bne.w	802c110 <__kernel_rem_pio2+0x338>
 802bfb0:	1e6b      	subs	r3, r5, #1
 802bfb2:	4618      	mov	r0, r3
 802bfb4:	2200      	movs	r2, #0
 802bfb6:	4548      	cmp	r0, r9
 802bfb8:	da4e      	bge.n	802c058 <__kernel_rem_pio2+0x280>
 802bfba:	2a00      	cmp	r2, #0
 802bfbc:	f000 8088 	beq.w	802c0d0 <__kernel_rem_pio2+0x2f8>
 802bfc0:	aa06      	add	r2, sp, #24
 802bfc2:	3c18      	subs	r4, #24
 802bfc4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802bfc8:	2900      	cmp	r1, #0
 802bfca:	f000 808e 	beq.w	802c0ea <__kernel_rem_pio2+0x312>
 802bfce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802bfd2:	4620      	mov	r0, r4
 802bfd4:	9302      	str	r3, [sp, #8]
 802bfd6:	f000 febf 	bl	802cd58 <scalbn>
 802bfda:	9b02      	ldr	r3, [sp, #8]
 802bfdc:	aa6a      	add	r2, sp, #424	; 0x1a8
 802bfde:	00d9      	lsls	r1, r3, #3
 802bfe0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 802c0f8 <__kernel_rem_pio2+0x320>
 802bfe4:	1850      	adds	r0, r2, r1
 802bfe6:	f100 0508 	add.w	r5, r0, #8
 802bfea:	461c      	mov	r4, r3
 802bfec:	2c00      	cmp	r4, #0
 802bfee:	f280 80bd 	bge.w	802c16c <__kernel_rem_pio2+0x394>
 802bff2:	2500      	movs	r5, #0
 802bff4:	1b5c      	subs	r4, r3, r5
 802bff6:	2c00      	cmp	r4, #0
 802bff8:	f2c0 80dd 	blt.w	802c1b6 <__kernel_rem_pio2+0x3de>
 802bffc:	4f43      	ldr	r7, [pc, #268]	; (802c10c <__kernel_rem_pio2+0x334>)
 802bffe:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 802c0f0 <__kernel_rem_pio2+0x318>
 802c002:	2400      	movs	r4, #0
 802c004:	e0cb      	b.n	802c19e <__kernel_rem_pio2+0x3c6>
 802c006:	f04f 0802 	mov.w	r8, #2
 802c00a:	e787      	b.n	802bf1c <__kernel_rem_pio2+0x144>
 802c00c:	ab06      	add	r3, sp, #24
 802c00e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802c012:	b949      	cbnz	r1, 802c028 <__kernel_rem_pio2+0x250>
 802c014:	b12b      	cbz	r3, 802c022 <__kernel_rem_pio2+0x24a>
 802c016:	aa06      	add	r2, sp, #24
 802c018:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 802c01c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802c020:	2301      	movs	r3, #1
 802c022:	3001      	adds	r0, #1
 802c024:	4619      	mov	r1, r3
 802c026:	e780      	b.n	802bf2a <__kernel_rem_pio2+0x152>
 802c028:	aa06      	add	r2, sp, #24
 802c02a:	ebac 0303 	sub.w	r3, ip, r3
 802c02e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802c032:	460b      	mov	r3, r1
 802c034:	e7f5      	b.n	802c022 <__kernel_rem_pio2+0x24a>
 802c036:	1e68      	subs	r0, r5, #1
 802c038:	ab06      	add	r3, sp, #24
 802c03a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802c03e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802c042:	aa06      	add	r2, sp, #24
 802c044:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802c048:	e778      	b.n	802bf3c <__kernel_rem_pio2+0x164>
 802c04a:	1e68      	subs	r0, r5, #1
 802c04c:	ab06      	add	r3, sp, #24
 802c04e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802c052:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802c056:	e7f4      	b.n	802c042 <__kernel_rem_pio2+0x26a>
 802c058:	a906      	add	r1, sp, #24
 802c05a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802c05e:	3801      	subs	r0, #1
 802c060:	430a      	orrs	r2, r1
 802c062:	e7a8      	b.n	802bfb6 <__kernel_rem_pio2+0x1de>
 802c064:	f10c 0c01 	add.w	ip, ip, #1
 802c068:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802c06c:	2a00      	cmp	r2, #0
 802c06e:	d0f9      	beq.n	802c064 <__kernel_rem_pio2+0x28c>
 802c070:	eb0b 0305 	add.w	r3, fp, r5
 802c074:	aa1a      	add	r2, sp, #104	; 0x68
 802c076:	00db      	lsls	r3, r3, #3
 802c078:	1898      	adds	r0, r3, r2
 802c07a:	3008      	adds	r0, #8
 802c07c:	1c69      	adds	r1, r5, #1
 802c07e:	3708      	adds	r7, #8
 802c080:	2200      	movs	r2, #0
 802c082:	4465      	add	r5, ip
 802c084:	9005      	str	r0, [sp, #20]
 802c086:	428d      	cmp	r5, r1
 802c088:	f6ff af07 	blt.w	802be9a <__kernel_rem_pio2+0xc2>
 802c08c:	a81a      	add	r0, sp, #104	; 0x68
 802c08e:	eb02 0c03 	add.w	ip, r2, r3
 802c092:	4484      	add	ip, r0
 802c094:	9803      	ldr	r0, [sp, #12]
 802c096:	f8dd e008 	ldr.w	lr, [sp, #8]
 802c09a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 802c09e:	9001      	str	r0, [sp, #4]
 802c0a0:	ee07 0a90 	vmov	s15, r0
 802c0a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802c0a8:	9805      	ldr	r0, [sp, #20]
 802c0aa:	ed8c 7b00 	vstr	d7, [ip]
 802c0ae:	ed9f 7b10 	vldr	d7, [pc, #64]	; 802c0f0 <__kernel_rem_pio2+0x318>
 802c0b2:	eb00 0802 	add.w	r8, r0, r2
 802c0b6:	f04f 0c00 	mov.w	ip, #0
 802c0ba:	45d4      	cmp	ip, sl
 802c0bc:	dd0c      	ble.n	802c0d8 <__kernel_rem_pio2+0x300>
 802c0be:	eb02 0c07 	add.w	ip, r2, r7
 802c0c2:	a86a      	add	r0, sp, #424	; 0x1a8
 802c0c4:	4484      	add	ip, r0
 802c0c6:	ed8c 7b02 	vstr	d7, [ip, #8]
 802c0ca:	3101      	adds	r1, #1
 802c0cc:	3208      	adds	r2, #8
 802c0ce:	e7da      	b.n	802c086 <__kernel_rem_pio2+0x2ae>
 802c0d0:	9b04      	ldr	r3, [sp, #16]
 802c0d2:	f04f 0c01 	mov.w	ip, #1
 802c0d6:	e7c7      	b.n	802c068 <__kernel_rem_pio2+0x290>
 802c0d8:	ecbe 5b02 	vldmia	lr!, {d5}
 802c0dc:	ed38 6b02 	vldmdb	r8!, {d6}
 802c0e0:	f10c 0c01 	add.w	ip, ip, #1
 802c0e4:	eea5 7b06 	vfma.f64	d7, d5, d6
 802c0e8:	e7e7      	b.n	802c0ba <__kernel_rem_pio2+0x2e2>
 802c0ea:	3b01      	subs	r3, #1
 802c0ec:	e768      	b.n	802bfc0 <__kernel_rem_pio2+0x1e8>
 802c0ee:	bf00      	nop
	...
 802c0fc:	3e700000 	.word	0x3e700000
 802c100:	00000000 	.word	0x00000000
 802c104:	41700000 	.word	0x41700000
 802c108:	0802f668 	.word	0x0802f668
 802c10c:	0802f628 	.word	0x0802f628
 802c110:	4260      	negs	r0, r4
 802c112:	eeb0 0b48 	vmov.f64	d0, d8
 802c116:	f000 fe1f 	bl	802cd58 <scalbn>
 802c11a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 802c2f8 <__kernel_rem_pio2+0x520>
 802c11e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 802c122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c126:	db18      	blt.n	802c15a <__kernel_rem_pio2+0x382>
 802c128:	ed9f 7b75 	vldr	d7, [pc, #468]	; 802c300 <__kernel_rem_pio2+0x528>
 802c12c:	ee20 7b07 	vmul.f64	d7, d0, d7
 802c130:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 802c134:	aa06      	add	r2, sp, #24
 802c136:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 802c13a:	eea5 0b46 	vfms.f64	d0, d5, d6
 802c13e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802c142:	a906      	add	r1, sp, #24
 802c144:	ee10 3a10 	vmov	r3, s0
 802c148:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802c14c:	1c6b      	adds	r3, r5, #1
 802c14e:	ee17 2a10 	vmov	r2, s14
 802c152:	3418      	adds	r4, #24
 802c154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802c158:	e739      	b.n	802bfce <__kernel_rem_pio2+0x1f6>
 802c15a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802c15e:	aa06      	add	r2, sp, #24
 802c160:	ee10 3a10 	vmov	r3, s0
 802c164:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802c168:	462b      	mov	r3, r5
 802c16a:	e730      	b.n	802bfce <__kernel_rem_pio2+0x1f6>
 802c16c:	aa06      	add	r2, sp, #24
 802c16e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 802c172:	9202      	str	r2, [sp, #8]
 802c174:	ee07 2a90 	vmov	s15, r2
 802c178:	3c01      	subs	r4, #1
 802c17a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802c17e:	ee27 7b00 	vmul.f64	d7, d7, d0
 802c182:	ee20 0b06 	vmul.f64	d0, d0, d6
 802c186:	ed25 7b02 	vstmdb	r5!, {d7}
 802c18a:	e72f      	b.n	802bfec <__kernel_rem_pio2+0x214>
 802c18c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 802c190:	ecb7 5b02 	vldmia	r7!, {d5}
 802c194:	ed9c 6b00 	vldr	d6, [ip]
 802c198:	3401      	adds	r4, #1
 802c19a:	eea5 7b06 	vfma.f64	d7, d5, d6
 802c19e:	454c      	cmp	r4, r9
 802c1a0:	dc01      	bgt.n	802c1a6 <__kernel_rem_pio2+0x3ce>
 802c1a2:	42a5      	cmp	r5, r4
 802c1a4:	daf2      	bge.n	802c18c <__kernel_rem_pio2+0x3b4>
 802c1a6:	aa42      	add	r2, sp, #264	; 0x108
 802c1a8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 802c1ac:	ed84 7b00 	vstr	d7, [r4]
 802c1b0:	3501      	adds	r5, #1
 802c1b2:	3808      	subs	r0, #8
 802c1b4:	e71e      	b.n	802bff4 <__kernel_rem_pio2+0x21c>
 802c1b6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 802c1b8:	2a03      	cmp	r2, #3
 802c1ba:	d84e      	bhi.n	802c25a <__kernel_rem_pio2+0x482>
 802c1bc:	e8df f002 	tbb	[pc, r2]
 802c1c0:	021f1f3e 	.word	0x021f1f3e
 802c1c4:	3108      	adds	r1, #8
 802c1c6:	aa42      	add	r2, sp, #264	; 0x108
 802c1c8:	4411      	add	r1, r2
 802c1ca:	4608      	mov	r0, r1
 802c1cc:	461c      	mov	r4, r3
 802c1ce:	2c00      	cmp	r4, #0
 802c1d0:	dc61      	bgt.n	802c296 <__kernel_rem_pio2+0x4be>
 802c1d2:	4608      	mov	r0, r1
 802c1d4:	461c      	mov	r4, r3
 802c1d6:	2c01      	cmp	r4, #1
 802c1d8:	dc6d      	bgt.n	802c2b6 <__kernel_rem_pio2+0x4de>
 802c1da:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 802c308 <__kernel_rem_pio2+0x530>
 802c1de:	2b01      	cmp	r3, #1
 802c1e0:	dc79      	bgt.n	802c2d6 <__kernel_rem_pio2+0x4fe>
 802c1e2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 802c1e6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 802c1ea:	f1b8 0f00 	cmp.w	r8, #0
 802c1ee:	d178      	bne.n	802c2e2 <__kernel_rem_pio2+0x50a>
 802c1f0:	ed86 5b00 	vstr	d5, [r6]
 802c1f4:	ed86 6b02 	vstr	d6, [r6, #8]
 802c1f8:	ed86 7b04 	vstr	d7, [r6, #16]
 802c1fc:	e02d      	b.n	802c25a <__kernel_rem_pio2+0x482>
 802c1fe:	ed9f 6b42 	vldr	d6, [pc, #264]	; 802c308 <__kernel_rem_pio2+0x530>
 802c202:	3108      	adds	r1, #8
 802c204:	aa42      	add	r2, sp, #264	; 0x108
 802c206:	4411      	add	r1, r2
 802c208:	4618      	mov	r0, r3
 802c20a:	2800      	cmp	r0, #0
 802c20c:	da34      	bge.n	802c278 <__kernel_rem_pio2+0x4a0>
 802c20e:	f1b8 0f00 	cmp.w	r8, #0
 802c212:	d037      	beq.n	802c284 <__kernel_rem_pio2+0x4ac>
 802c214:	eeb1 7b46 	vneg.f64	d7, d6
 802c218:	ed86 7b00 	vstr	d7, [r6]
 802c21c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 802c220:	a844      	add	r0, sp, #272	; 0x110
 802c222:	2101      	movs	r1, #1
 802c224:	ee37 7b46 	vsub.f64	d7, d7, d6
 802c228:	428b      	cmp	r3, r1
 802c22a:	da2e      	bge.n	802c28a <__kernel_rem_pio2+0x4b2>
 802c22c:	f1b8 0f00 	cmp.w	r8, #0
 802c230:	d001      	beq.n	802c236 <__kernel_rem_pio2+0x45e>
 802c232:	eeb1 7b47 	vneg.f64	d7, d7
 802c236:	ed86 7b02 	vstr	d7, [r6, #8]
 802c23a:	e00e      	b.n	802c25a <__kernel_rem_pio2+0x482>
 802c23c:	aa92      	add	r2, sp, #584	; 0x248
 802c23e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 802c308 <__kernel_rem_pio2+0x530>
 802c242:	4411      	add	r1, r2
 802c244:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 802c248:	2b00      	cmp	r3, #0
 802c24a:	da0f      	bge.n	802c26c <__kernel_rem_pio2+0x494>
 802c24c:	f1b8 0f00 	cmp.w	r8, #0
 802c250:	d001      	beq.n	802c256 <__kernel_rem_pio2+0x47e>
 802c252:	eeb1 7b47 	vneg.f64	d7, d7
 802c256:	ed86 7b00 	vstr	d7, [r6]
 802c25a:	9b01      	ldr	r3, [sp, #4]
 802c25c:	f003 0007 	and.w	r0, r3, #7
 802c260:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 802c264:	ecbd 8b06 	vpop	{d8-d10}
 802c268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c26c:	ed31 6b02 	vldmdb	r1!, {d6}
 802c270:	3b01      	subs	r3, #1
 802c272:	ee37 7b06 	vadd.f64	d7, d7, d6
 802c276:	e7e7      	b.n	802c248 <__kernel_rem_pio2+0x470>
 802c278:	ed31 7b02 	vldmdb	r1!, {d7}
 802c27c:	3801      	subs	r0, #1
 802c27e:	ee36 6b07 	vadd.f64	d6, d6, d7
 802c282:	e7c2      	b.n	802c20a <__kernel_rem_pio2+0x432>
 802c284:	eeb0 7b46 	vmov.f64	d7, d6
 802c288:	e7c6      	b.n	802c218 <__kernel_rem_pio2+0x440>
 802c28a:	ecb0 6b02 	vldmia	r0!, {d6}
 802c28e:	3101      	adds	r1, #1
 802c290:	ee37 7b06 	vadd.f64	d7, d7, d6
 802c294:	e7c8      	b.n	802c228 <__kernel_rem_pio2+0x450>
 802c296:	ed10 7b04 	vldr	d7, [r0, #-16]
 802c29a:	ed30 5b02 	vldmdb	r0!, {d5}
 802c29e:	3c01      	subs	r4, #1
 802c2a0:	ee37 6b05 	vadd.f64	d6, d7, d5
 802c2a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 802c2a8:	ed00 6b02 	vstr	d6, [r0, #-8]
 802c2ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 802c2b0:	ed80 7b00 	vstr	d7, [r0]
 802c2b4:	e78b      	b.n	802c1ce <__kernel_rem_pio2+0x3f6>
 802c2b6:	ed10 7b04 	vldr	d7, [r0, #-16]
 802c2ba:	ed30 5b02 	vldmdb	r0!, {d5}
 802c2be:	3c01      	subs	r4, #1
 802c2c0:	ee37 6b05 	vadd.f64	d6, d7, d5
 802c2c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 802c2c8:	ed00 6b02 	vstr	d6, [r0, #-8]
 802c2cc:	ee37 7b05 	vadd.f64	d7, d7, d5
 802c2d0:	ed80 7b00 	vstr	d7, [r0]
 802c2d4:	e77f      	b.n	802c1d6 <__kernel_rem_pio2+0x3fe>
 802c2d6:	ed31 6b02 	vldmdb	r1!, {d6}
 802c2da:	3b01      	subs	r3, #1
 802c2dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 802c2e0:	e77d      	b.n	802c1de <__kernel_rem_pio2+0x406>
 802c2e2:	eeb1 5b45 	vneg.f64	d5, d5
 802c2e6:	eeb1 6b46 	vneg.f64	d6, d6
 802c2ea:	ed86 5b00 	vstr	d5, [r6]
 802c2ee:	eeb1 7b47 	vneg.f64	d7, d7
 802c2f2:	ed86 6b02 	vstr	d6, [r6, #8]
 802c2f6:	e77f      	b.n	802c1f8 <__kernel_rem_pio2+0x420>
 802c2f8:	00000000 	.word	0x00000000
 802c2fc:	41700000 	.word	0x41700000
 802c300:	00000000 	.word	0x00000000
 802c304:	3e700000 	.word	0x3e700000
	...

0802c310 <__kernel_sin>:
 802c310:	ee10 3a90 	vmov	r3, s1
 802c314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c318:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802c31c:	da04      	bge.n	802c328 <__kernel_sin+0x18>
 802c31e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 802c322:	ee17 3a90 	vmov	r3, s15
 802c326:	b35b      	cbz	r3, 802c380 <__kernel_sin+0x70>
 802c328:	ee20 6b00 	vmul.f64	d6, d0, d0
 802c32c:	ee20 5b06 	vmul.f64	d5, d0, d6
 802c330:	ed9f 7b15 	vldr	d7, [pc, #84]	; 802c388 <__kernel_sin+0x78>
 802c334:	ed9f 4b16 	vldr	d4, [pc, #88]	; 802c390 <__kernel_sin+0x80>
 802c338:	eea6 4b07 	vfma.f64	d4, d6, d7
 802c33c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 802c398 <__kernel_sin+0x88>
 802c340:	eea4 7b06 	vfma.f64	d7, d4, d6
 802c344:	ed9f 4b16 	vldr	d4, [pc, #88]	; 802c3a0 <__kernel_sin+0x90>
 802c348:	eea7 4b06 	vfma.f64	d4, d7, d6
 802c34c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 802c3a8 <__kernel_sin+0x98>
 802c350:	eea4 7b06 	vfma.f64	d7, d4, d6
 802c354:	b930      	cbnz	r0, 802c364 <__kernel_sin+0x54>
 802c356:	ed9f 4b16 	vldr	d4, [pc, #88]	; 802c3b0 <__kernel_sin+0xa0>
 802c35a:	eea6 4b07 	vfma.f64	d4, d6, d7
 802c35e:	eea4 0b05 	vfma.f64	d0, d4, d5
 802c362:	4770      	bx	lr
 802c364:	ee27 7b45 	vnmul.f64	d7, d7, d5
 802c368:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 802c36c:	eea1 7b04 	vfma.f64	d7, d1, d4
 802c370:	ee97 1b06 	vfnms.f64	d1, d7, d6
 802c374:	ed9f 7b10 	vldr	d7, [pc, #64]	; 802c3b8 <__kernel_sin+0xa8>
 802c378:	eea5 1b07 	vfma.f64	d1, d5, d7
 802c37c:	ee30 0b41 	vsub.f64	d0, d0, d1
 802c380:	4770      	bx	lr
 802c382:	bf00      	nop
 802c384:	f3af 8000 	nop.w
 802c388:	5acfd57c 	.word	0x5acfd57c
 802c38c:	3de5d93a 	.word	0x3de5d93a
 802c390:	8a2b9ceb 	.word	0x8a2b9ceb
 802c394:	be5ae5e6 	.word	0xbe5ae5e6
 802c398:	57b1fe7d 	.word	0x57b1fe7d
 802c39c:	3ec71de3 	.word	0x3ec71de3
 802c3a0:	19c161d5 	.word	0x19c161d5
 802c3a4:	bf2a01a0 	.word	0xbf2a01a0
 802c3a8:	1110f8a6 	.word	0x1110f8a6
 802c3ac:	3f811111 	.word	0x3f811111
 802c3b0:	55555549 	.word	0x55555549
 802c3b4:	bfc55555 	.word	0xbfc55555
 802c3b8:	55555549 	.word	0x55555549
 802c3bc:	3fc55555 	.word	0x3fc55555

0802c3c0 <__kernel_cosf>:
 802c3c0:	ee10 3a10 	vmov	r3, s0
 802c3c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c3c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802c3cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c3d0:	da05      	bge.n	802c3de <__kernel_cosf+0x1e>
 802c3d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802c3d6:	ee17 2a90 	vmov	r2, s15
 802c3da:	2a00      	cmp	r2, #0
 802c3dc:	d03b      	beq.n	802c456 <__kernel_cosf+0x96>
 802c3de:	ee20 6a00 	vmul.f32	s12, s0, s0
 802c3e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802c3e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802c45c <__kernel_cosf+0x9c>
 802c3ea:	4a1d      	ldr	r2, [pc, #116]	; (802c460 <__kernel_cosf+0xa0>)
 802c3ec:	ee66 7a07 	vmul.f32	s15, s12, s14
 802c3f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 802c464 <__kernel_cosf+0xa4>
 802c3f4:	eea6 7a25 	vfma.f32	s14, s12, s11
 802c3f8:	4293      	cmp	r3, r2
 802c3fa:	eddf 5a1b 	vldr	s11, [pc, #108]	; 802c468 <__kernel_cosf+0xa8>
 802c3fe:	eee7 5a06 	vfma.f32	s11, s14, s12
 802c402:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 802c46c <__kernel_cosf+0xac>
 802c406:	eea5 7a86 	vfma.f32	s14, s11, s12
 802c40a:	eddf 5a19 	vldr	s11, [pc, #100]	; 802c470 <__kernel_cosf+0xb0>
 802c40e:	eee7 5a06 	vfma.f32	s11, s14, s12
 802c412:	ed9f 7a18 	vldr	s14, [pc, #96]	; 802c474 <__kernel_cosf+0xb4>
 802c416:	eea5 7a86 	vfma.f32	s14, s11, s12
 802c41a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802c41e:	ee27 7a06 	vmul.f32	s14, s14, s12
 802c422:	eee6 0a07 	vfma.f32	s1, s12, s14
 802c426:	dc04      	bgt.n	802c432 <__kernel_cosf+0x72>
 802c428:	ee77 0ae0 	vsub.f32	s1, s15, s1
 802c42c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 802c430:	4770      	bx	lr
 802c432:	4a11      	ldr	r2, [pc, #68]	; (802c478 <__kernel_cosf+0xb8>)
 802c434:	4293      	cmp	r3, r2
 802c436:	bfda      	itte	le
 802c438:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802c43c:	ee07 3a10 	vmovle	s14, r3
 802c440:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 802c444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c448:	ee36 0ac7 	vsub.f32	s0, s13, s14
 802c44c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802c450:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c454:	4770      	bx	lr
 802c456:	eeb0 0a66 	vmov.f32	s0, s13
 802c45a:	4770      	bx	lr
 802c45c:	ad47d74e 	.word	0xad47d74e
 802c460:	3e999999 	.word	0x3e999999
 802c464:	310f74f6 	.word	0x310f74f6
 802c468:	b493f27c 	.word	0xb493f27c
 802c46c:	37d00d01 	.word	0x37d00d01
 802c470:	bab60b61 	.word	0xbab60b61
 802c474:	3d2aaaab 	.word	0x3d2aaaab
 802c478:	3f480000 	.word	0x3f480000

0802c47c <__kernel_rem_pio2f>:
 802c47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c480:	ed2d 8b04 	vpush	{d8-d9}
 802c484:	b0d7      	sub	sp, #348	; 0x15c
 802c486:	469b      	mov	fp, r3
 802c488:	460e      	mov	r6, r1
 802c48a:	4bbe      	ldr	r3, [pc, #760]	; (802c784 <__kernel_rem_pio2f+0x308>)
 802c48c:	9964      	ldr	r1, [sp, #400]	; 0x190
 802c48e:	9002      	str	r0, [sp, #8]
 802c490:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 802c494:	9865      	ldr	r0, [sp, #404]	; 0x194
 802c496:	ed9f 7abf 	vldr	s14, [pc, #764]	; 802c794 <__kernel_rem_pio2f+0x318>
 802c49a:	1ed1      	subs	r1, r2, #3
 802c49c:	2308      	movs	r3, #8
 802c49e:	fb91 f1f3 	sdiv	r1, r1, r3
 802c4a2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802c4a6:	f10b 3aff 	add.w	sl, fp, #4294967295
 802c4aa:	1c4c      	adds	r4, r1, #1
 802c4ac:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 802c4b0:	eba1 050a 	sub.w	r5, r1, sl
 802c4b4:	aa1a      	add	r2, sp, #104	; 0x68
 802c4b6:	eb09 070a 	add.w	r7, r9, sl
 802c4ba:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 802c4be:	4696      	mov	lr, r2
 802c4c0:	2300      	movs	r3, #0
 802c4c2:	42bb      	cmp	r3, r7
 802c4c4:	dd0f      	ble.n	802c4e6 <__kernel_rem_pio2f+0x6a>
 802c4c6:	af42      	add	r7, sp, #264	; 0x108
 802c4c8:	2200      	movs	r2, #0
 802c4ca:	454a      	cmp	r2, r9
 802c4cc:	dc27      	bgt.n	802c51e <__kernel_rem_pio2f+0xa2>
 802c4ce:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 802c4d2:	eb0b 0302 	add.w	r3, fp, r2
 802c4d6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 802c4da:	9d02      	ldr	r5, [sp, #8]
 802c4dc:	eddf 7aad 	vldr	s15, [pc, #692]	; 802c794 <__kernel_rem_pio2f+0x318>
 802c4e0:	f04f 0c00 	mov.w	ip, #0
 802c4e4:	e015      	b.n	802c512 <__kernel_rem_pio2f+0x96>
 802c4e6:	42dd      	cmn	r5, r3
 802c4e8:	bf5d      	ittte	pl
 802c4ea:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 802c4ee:	ee07 2a90 	vmovpl	s15, r2
 802c4f2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802c4f6:	eef0 7a47 	vmovmi.f32	s15, s14
 802c4fa:	ecee 7a01 	vstmia	lr!, {s15}
 802c4fe:	3301      	adds	r3, #1
 802c500:	e7df      	b.n	802c4c2 <__kernel_rem_pio2f+0x46>
 802c502:	ecf5 6a01 	vldmia	r5!, {s13}
 802c506:	ed33 7a01 	vldmdb	r3!, {s14}
 802c50a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c50e:	f10c 0c01 	add.w	ip, ip, #1
 802c512:	45d4      	cmp	ip, sl
 802c514:	ddf5      	ble.n	802c502 <__kernel_rem_pio2f+0x86>
 802c516:	ece7 7a01 	vstmia	r7!, {s15}
 802c51a:	3201      	adds	r2, #1
 802c51c:	e7d5      	b.n	802c4ca <__kernel_rem_pio2f+0x4e>
 802c51e:	ab06      	add	r3, sp, #24
 802c520:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 802c524:	9304      	str	r3, [sp, #16]
 802c526:	eddf 8a9a 	vldr	s17, [pc, #616]	; 802c790 <__kernel_rem_pio2f+0x314>
 802c52a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 802c78c <__kernel_rem_pio2f+0x310>
 802c52e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 802c532:	9303      	str	r3, [sp, #12]
 802c534:	464d      	mov	r5, r9
 802c536:	ab56      	add	r3, sp, #344	; 0x158
 802c538:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 802c53c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802c540:	3f01      	subs	r7, #1
 802c542:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802c546:	00bf      	lsls	r7, r7, #2
 802c548:	ab56      	add	r3, sp, #344	; 0x158
 802c54a:	19da      	adds	r2, r3, r7
 802c54c:	3a4c      	subs	r2, #76	; 0x4c
 802c54e:	2300      	movs	r3, #0
 802c550:	1ae9      	subs	r1, r5, r3
 802c552:	2900      	cmp	r1, #0
 802c554:	dc4c      	bgt.n	802c5f0 <__kernel_rem_pio2f+0x174>
 802c556:	4620      	mov	r0, r4
 802c558:	f000 fd98 	bl	802d08c <scalbnf>
 802c55c:	eeb0 8a40 	vmov.f32	s16, s0
 802c560:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802c564:	ee28 0a00 	vmul.f32	s0, s16, s0
 802c568:	f000 fd4e 	bl	802d008 <floorf>
 802c56c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802c570:	eea0 8a67 	vfms.f32	s16, s0, s15
 802c574:	2c00      	cmp	r4, #0
 802c576:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802c57a:	edcd 7a01 	vstr	s15, [sp, #4]
 802c57e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c582:	ee38 8a67 	vsub.f32	s16, s16, s15
 802c586:	dd48      	ble.n	802c61a <__kernel_rem_pio2f+0x19e>
 802c588:	1e69      	subs	r1, r5, #1
 802c58a:	ab06      	add	r3, sp, #24
 802c58c:	f1c4 0008 	rsb	r0, r4, #8
 802c590:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 802c594:	9a01      	ldr	r2, [sp, #4]
 802c596:	fa4c f300 	asr.w	r3, ip, r0
 802c59a:	441a      	add	r2, r3
 802c59c:	4083      	lsls	r3, r0
 802c59e:	9201      	str	r2, [sp, #4]
 802c5a0:	ebac 0203 	sub.w	r2, ip, r3
 802c5a4:	ab06      	add	r3, sp, #24
 802c5a6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 802c5aa:	f1c4 0307 	rsb	r3, r4, #7
 802c5ae:	fa42 f803 	asr.w	r8, r2, r3
 802c5b2:	f1b8 0f00 	cmp.w	r8, #0
 802c5b6:	dd41      	ble.n	802c63c <__kernel_rem_pio2f+0x1c0>
 802c5b8:	9b01      	ldr	r3, [sp, #4]
 802c5ba:	2000      	movs	r0, #0
 802c5bc:	3301      	adds	r3, #1
 802c5be:	9301      	str	r3, [sp, #4]
 802c5c0:	4601      	mov	r1, r0
 802c5c2:	4285      	cmp	r5, r0
 802c5c4:	dc6d      	bgt.n	802c6a2 <__kernel_rem_pio2f+0x226>
 802c5c6:	2c00      	cmp	r4, #0
 802c5c8:	dd04      	ble.n	802c5d4 <__kernel_rem_pio2f+0x158>
 802c5ca:	2c01      	cmp	r4, #1
 802c5cc:	d07e      	beq.n	802c6cc <__kernel_rem_pio2f+0x250>
 802c5ce:	2c02      	cmp	r4, #2
 802c5d0:	f000 8086 	beq.w	802c6e0 <__kernel_rem_pio2f+0x264>
 802c5d4:	f1b8 0f02 	cmp.w	r8, #2
 802c5d8:	d130      	bne.n	802c63c <__kernel_rem_pio2f+0x1c0>
 802c5da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802c5de:	ee30 8a48 	vsub.f32	s16, s0, s16
 802c5e2:	b359      	cbz	r1, 802c63c <__kernel_rem_pio2f+0x1c0>
 802c5e4:	4620      	mov	r0, r4
 802c5e6:	f000 fd51 	bl	802d08c <scalbnf>
 802c5ea:	ee38 8a40 	vsub.f32	s16, s16, s0
 802c5ee:	e025      	b.n	802c63c <__kernel_rem_pio2f+0x1c0>
 802c5f0:	ee60 7a28 	vmul.f32	s15, s0, s17
 802c5f4:	a806      	add	r0, sp, #24
 802c5f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c5fe:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802c602:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c606:	ee10 1a10 	vmov	r1, s0
 802c60a:	ed32 0a01 	vldmdb	r2!, {s0}
 802c60e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 802c612:	ee37 0a80 	vadd.f32	s0, s15, s0
 802c616:	3301      	adds	r3, #1
 802c618:	e79a      	b.n	802c550 <__kernel_rem_pio2f+0xd4>
 802c61a:	d106      	bne.n	802c62a <__kernel_rem_pio2f+0x1ae>
 802c61c:	1e6b      	subs	r3, r5, #1
 802c61e:	aa06      	add	r2, sp, #24
 802c620:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802c624:	ea4f 2822 	mov.w	r8, r2, asr #8
 802c628:	e7c3      	b.n	802c5b2 <__kernel_rem_pio2f+0x136>
 802c62a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c62e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802c632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c636:	da31      	bge.n	802c69c <__kernel_rem_pio2f+0x220>
 802c638:	f04f 0800 	mov.w	r8, #0
 802c63c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802c640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c644:	f040 80a8 	bne.w	802c798 <__kernel_rem_pio2f+0x31c>
 802c648:	1e6b      	subs	r3, r5, #1
 802c64a:	4618      	mov	r0, r3
 802c64c:	2200      	movs	r2, #0
 802c64e:	4548      	cmp	r0, r9
 802c650:	da4d      	bge.n	802c6ee <__kernel_rem_pio2f+0x272>
 802c652:	2a00      	cmp	r2, #0
 802c654:	f000 8087 	beq.w	802c766 <__kernel_rem_pio2f+0x2ea>
 802c658:	aa06      	add	r2, sp, #24
 802c65a:	3c08      	subs	r4, #8
 802c65c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802c660:	2900      	cmp	r1, #0
 802c662:	f000 808d 	beq.w	802c780 <__kernel_rem_pio2f+0x304>
 802c666:	4620      	mov	r0, r4
 802c668:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802c66c:	9302      	str	r3, [sp, #8]
 802c66e:	f000 fd0d 	bl	802d08c <scalbnf>
 802c672:	9b02      	ldr	r3, [sp, #8]
 802c674:	ed9f 7a46 	vldr	s14, [pc, #280]	; 802c790 <__kernel_rem_pio2f+0x314>
 802c678:	0099      	lsls	r1, r3, #2
 802c67a:	aa42      	add	r2, sp, #264	; 0x108
 802c67c:	1850      	adds	r0, r2, r1
 802c67e:	1d05      	adds	r5, r0, #4
 802c680:	461c      	mov	r4, r3
 802c682:	2c00      	cmp	r4, #0
 802c684:	f280 80b8 	bge.w	802c7f8 <__kernel_rem_pio2f+0x37c>
 802c688:	2500      	movs	r5, #0
 802c68a:	1b5c      	subs	r4, r3, r5
 802c68c:	2c00      	cmp	r4, #0
 802c68e:	f2c0 80d8 	blt.w	802c842 <__kernel_rem_pio2f+0x3c6>
 802c692:	4f3d      	ldr	r7, [pc, #244]	; (802c788 <__kernel_rem_pio2f+0x30c>)
 802c694:	eddf 7a3f 	vldr	s15, [pc, #252]	; 802c794 <__kernel_rem_pio2f+0x318>
 802c698:	2400      	movs	r4, #0
 802c69a:	e0c6      	b.n	802c82a <__kernel_rem_pio2f+0x3ae>
 802c69c:	f04f 0802 	mov.w	r8, #2
 802c6a0:	e78a      	b.n	802c5b8 <__kernel_rem_pio2f+0x13c>
 802c6a2:	ab06      	add	r3, sp, #24
 802c6a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802c6a8:	b949      	cbnz	r1, 802c6be <__kernel_rem_pio2f+0x242>
 802c6aa:	b12b      	cbz	r3, 802c6b8 <__kernel_rem_pio2f+0x23c>
 802c6ac:	aa06      	add	r2, sp, #24
 802c6ae:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802c6b2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802c6b6:	2301      	movs	r3, #1
 802c6b8:	3001      	adds	r0, #1
 802c6ba:	4619      	mov	r1, r3
 802c6bc:	e781      	b.n	802c5c2 <__kernel_rem_pio2f+0x146>
 802c6be:	aa06      	add	r2, sp, #24
 802c6c0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 802c6c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802c6c8:	460b      	mov	r3, r1
 802c6ca:	e7f5      	b.n	802c6b8 <__kernel_rem_pio2f+0x23c>
 802c6cc:	1e68      	subs	r0, r5, #1
 802c6ce:	ab06      	add	r3, sp, #24
 802c6d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802c6d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c6d8:	aa06      	add	r2, sp, #24
 802c6da:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802c6de:	e779      	b.n	802c5d4 <__kernel_rem_pio2f+0x158>
 802c6e0:	1e68      	subs	r0, r5, #1
 802c6e2:	ab06      	add	r3, sp, #24
 802c6e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802c6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c6ec:	e7f4      	b.n	802c6d8 <__kernel_rem_pio2f+0x25c>
 802c6ee:	a906      	add	r1, sp, #24
 802c6f0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802c6f4:	3801      	subs	r0, #1
 802c6f6:	430a      	orrs	r2, r1
 802c6f8:	e7a9      	b.n	802c64e <__kernel_rem_pio2f+0x1d2>
 802c6fa:	f10c 0c01 	add.w	ip, ip, #1
 802c6fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802c702:	2a00      	cmp	r2, #0
 802c704:	d0f9      	beq.n	802c6fa <__kernel_rem_pio2f+0x27e>
 802c706:	eb0b 0305 	add.w	r3, fp, r5
 802c70a:	aa1a      	add	r2, sp, #104	; 0x68
 802c70c:	009b      	lsls	r3, r3, #2
 802c70e:	1898      	adds	r0, r3, r2
 802c710:	3004      	adds	r0, #4
 802c712:	1c69      	adds	r1, r5, #1
 802c714:	3704      	adds	r7, #4
 802c716:	2200      	movs	r2, #0
 802c718:	4465      	add	r5, ip
 802c71a:	9005      	str	r0, [sp, #20]
 802c71c:	428d      	cmp	r5, r1
 802c71e:	f6ff af0a 	blt.w	802c536 <__kernel_rem_pio2f+0xba>
 802c722:	a81a      	add	r0, sp, #104	; 0x68
 802c724:	eb02 0c03 	add.w	ip, r2, r3
 802c728:	4484      	add	ip, r0
 802c72a:	9803      	ldr	r0, [sp, #12]
 802c72c:	f8dd e008 	ldr.w	lr, [sp, #8]
 802c730:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 802c734:	9001      	str	r0, [sp, #4]
 802c736:	ee07 0a90 	vmov	s15, r0
 802c73a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c73e:	9805      	ldr	r0, [sp, #20]
 802c740:	edcc 7a00 	vstr	s15, [ip]
 802c744:	eddf 7a13 	vldr	s15, [pc, #76]	; 802c794 <__kernel_rem_pio2f+0x318>
 802c748:	eb00 0802 	add.w	r8, r0, r2
 802c74c:	f04f 0c00 	mov.w	ip, #0
 802c750:	45d4      	cmp	ip, sl
 802c752:	dd0c      	ble.n	802c76e <__kernel_rem_pio2f+0x2f2>
 802c754:	eb02 0c07 	add.w	ip, r2, r7
 802c758:	a842      	add	r0, sp, #264	; 0x108
 802c75a:	4484      	add	ip, r0
 802c75c:	edcc 7a01 	vstr	s15, [ip, #4]
 802c760:	3101      	adds	r1, #1
 802c762:	3204      	adds	r2, #4
 802c764:	e7da      	b.n	802c71c <__kernel_rem_pio2f+0x2a0>
 802c766:	9b04      	ldr	r3, [sp, #16]
 802c768:	f04f 0c01 	mov.w	ip, #1
 802c76c:	e7c7      	b.n	802c6fe <__kernel_rem_pio2f+0x282>
 802c76e:	ecfe 6a01 	vldmia	lr!, {s13}
 802c772:	ed38 7a01 	vldmdb	r8!, {s14}
 802c776:	f10c 0c01 	add.w	ip, ip, #1
 802c77a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c77e:	e7e7      	b.n	802c750 <__kernel_rem_pio2f+0x2d4>
 802c780:	3b01      	subs	r3, #1
 802c782:	e769      	b.n	802c658 <__kernel_rem_pio2f+0x1dc>
 802c784:	0802f6a4 	.word	0x0802f6a4
 802c788:	0802f678 	.word	0x0802f678
 802c78c:	43800000 	.word	0x43800000
 802c790:	3b800000 	.word	0x3b800000
 802c794:	00000000 	.word	0x00000000
 802c798:	4260      	negs	r0, r4
 802c79a:	eeb0 0a48 	vmov.f32	s0, s16
 802c79e:	f000 fc75 	bl	802d08c <scalbnf>
 802c7a2:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 802c78c <__kernel_rem_pio2f+0x310>
 802c7a6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802c7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c7ae:	db1a      	blt.n	802c7e6 <__kernel_rem_pio2f+0x36a>
 802c7b0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802c790 <__kernel_rem_pio2f+0x314>
 802c7b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 802c7b8:	aa06      	add	r2, sp, #24
 802c7ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c7be:	a906      	add	r1, sp, #24
 802c7c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c7c4:	3408      	adds	r4, #8
 802c7c6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802c7ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c7ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c7d2:	ee10 3a10 	vmov	r3, s0
 802c7d6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802c7da:	1c6b      	adds	r3, r5, #1
 802c7dc:	ee17 2a90 	vmov	r2, s15
 802c7e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802c7e4:	e73f      	b.n	802c666 <__kernel_rem_pio2f+0x1ea>
 802c7e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c7ea:	aa06      	add	r2, sp, #24
 802c7ec:	ee10 3a10 	vmov	r3, s0
 802c7f0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802c7f4:	462b      	mov	r3, r5
 802c7f6:	e736      	b.n	802c666 <__kernel_rem_pio2f+0x1ea>
 802c7f8:	aa06      	add	r2, sp, #24
 802c7fa:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 802c7fe:	9202      	str	r2, [sp, #8]
 802c800:	ee07 2a90 	vmov	s15, r2
 802c804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c808:	3c01      	subs	r4, #1
 802c80a:	ee67 7a80 	vmul.f32	s15, s15, s0
 802c80e:	ee20 0a07 	vmul.f32	s0, s0, s14
 802c812:	ed65 7a01 	vstmdb	r5!, {s15}
 802c816:	e734      	b.n	802c682 <__kernel_rem_pio2f+0x206>
 802c818:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 802c81c:	ecf7 6a01 	vldmia	r7!, {s13}
 802c820:	ed9c 7a00 	vldr	s14, [ip]
 802c824:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c828:	3401      	adds	r4, #1
 802c82a:	454c      	cmp	r4, r9
 802c82c:	dc01      	bgt.n	802c832 <__kernel_rem_pio2f+0x3b6>
 802c82e:	42a5      	cmp	r5, r4
 802c830:	daf2      	bge.n	802c818 <__kernel_rem_pio2f+0x39c>
 802c832:	aa56      	add	r2, sp, #344	; 0x158
 802c834:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 802c838:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 802c83c:	3501      	adds	r5, #1
 802c83e:	3804      	subs	r0, #4
 802c840:	e723      	b.n	802c68a <__kernel_rem_pio2f+0x20e>
 802c842:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802c844:	2a03      	cmp	r2, #3
 802c846:	d84d      	bhi.n	802c8e4 <__kernel_rem_pio2f+0x468>
 802c848:	e8df f002 	tbb	[pc, r2]
 802c84c:	021f1f3e 	.word	0x021f1f3e
 802c850:	aa56      	add	r2, sp, #344	; 0x158
 802c852:	4411      	add	r1, r2
 802c854:	399c      	subs	r1, #156	; 0x9c
 802c856:	4608      	mov	r0, r1
 802c858:	461c      	mov	r4, r3
 802c85a:	2c00      	cmp	r4, #0
 802c85c:	dc5f      	bgt.n	802c91e <__kernel_rem_pio2f+0x4a2>
 802c85e:	4608      	mov	r0, r1
 802c860:	461c      	mov	r4, r3
 802c862:	2c01      	cmp	r4, #1
 802c864:	dc6b      	bgt.n	802c93e <__kernel_rem_pio2f+0x4c2>
 802c866:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 802c794 <__kernel_rem_pio2f+0x318>
 802c86a:	2b01      	cmp	r3, #1
 802c86c:	dc77      	bgt.n	802c95e <__kernel_rem_pio2f+0x4e2>
 802c86e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802c872:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802c876:	f1b8 0f00 	cmp.w	r8, #0
 802c87a:	d176      	bne.n	802c96a <__kernel_rem_pio2f+0x4ee>
 802c87c:	edc6 6a00 	vstr	s13, [r6]
 802c880:	ed86 7a01 	vstr	s14, [r6, #4]
 802c884:	edc6 7a02 	vstr	s15, [r6, #8]
 802c888:	e02c      	b.n	802c8e4 <__kernel_rem_pio2f+0x468>
 802c88a:	aa56      	add	r2, sp, #344	; 0x158
 802c88c:	4411      	add	r1, r2
 802c88e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 802c794 <__kernel_rem_pio2f+0x318>
 802c892:	399c      	subs	r1, #156	; 0x9c
 802c894:	4618      	mov	r0, r3
 802c896:	2800      	cmp	r0, #0
 802c898:	da32      	bge.n	802c900 <__kernel_rem_pio2f+0x484>
 802c89a:	f1b8 0f00 	cmp.w	r8, #0
 802c89e:	d035      	beq.n	802c90c <__kernel_rem_pio2f+0x490>
 802c8a0:	eef1 7a47 	vneg.f32	s15, s14
 802c8a4:	edc6 7a00 	vstr	s15, [r6]
 802c8a8:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802c8ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c8b0:	a82f      	add	r0, sp, #188	; 0xbc
 802c8b2:	2101      	movs	r1, #1
 802c8b4:	428b      	cmp	r3, r1
 802c8b6:	da2c      	bge.n	802c912 <__kernel_rem_pio2f+0x496>
 802c8b8:	f1b8 0f00 	cmp.w	r8, #0
 802c8bc:	d001      	beq.n	802c8c2 <__kernel_rem_pio2f+0x446>
 802c8be:	eef1 7a67 	vneg.f32	s15, s15
 802c8c2:	edc6 7a01 	vstr	s15, [r6, #4]
 802c8c6:	e00d      	b.n	802c8e4 <__kernel_rem_pio2f+0x468>
 802c8c8:	aa56      	add	r2, sp, #344	; 0x158
 802c8ca:	4411      	add	r1, r2
 802c8cc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802c794 <__kernel_rem_pio2f+0x318>
 802c8d0:	399c      	subs	r1, #156	; 0x9c
 802c8d2:	2b00      	cmp	r3, #0
 802c8d4:	da0e      	bge.n	802c8f4 <__kernel_rem_pio2f+0x478>
 802c8d6:	f1b8 0f00 	cmp.w	r8, #0
 802c8da:	d001      	beq.n	802c8e0 <__kernel_rem_pio2f+0x464>
 802c8dc:	eef1 7a67 	vneg.f32	s15, s15
 802c8e0:	edc6 7a00 	vstr	s15, [r6]
 802c8e4:	9b01      	ldr	r3, [sp, #4]
 802c8e6:	f003 0007 	and.w	r0, r3, #7
 802c8ea:	b057      	add	sp, #348	; 0x15c
 802c8ec:	ecbd 8b04 	vpop	{d8-d9}
 802c8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c8f4:	ed31 7a01 	vldmdb	r1!, {s14}
 802c8f8:	3b01      	subs	r3, #1
 802c8fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c8fe:	e7e8      	b.n	802c8d2 <__kernel_rem_pio2f+0x456>
 802c900:	ed71 7a01 	vldmdb	r1!, {s15}
 802c904:	3801      	subs	r0, #1
 802c906:	ee37 7a27 	vadd.f32	s14, s14, s15
 802c90a:	e7c4      	b.n	802c896 <__kernel_rem_pio2f+0x41a>
 802c90c:	eef0 7a47 	vmov.f32	s15, s14
 802c910:	e7c8      	b.n	802c8a4 <__kernel_rem_pio2f+0x428>
 802c912:	ecb0 7a01 	vldmia	r0!, {s14}
 802c916:	3101      	adds	r1, #1
 802c918:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c91c:	e7ca      	b.n	802c8b4 <__kernel_rem_pio2f+0x438>
 802c91e:	ed50 7a02 	vldr	s15, [r0, #-8]
 802c922:	ed70 6a01 	vldmdb	r0!, {s13}
 802c926:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c92a:	3c01      	subs	r4, #1
 802c92c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c930:	ed00 7a01 	vstr	s14, [r0, #-4]
 802c934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c938:	edc0 7a00 	vstr	s15, [r0]
 802c93c:	e78d      	b.n	802c85a <__kernel_rem_pio2f+0x3de>
 802c93e:	ed50 7a02 	vldr	s15, [r0, #-8]
 802c942:	ed70 6a01 	vldmdb	r0!, {s13}
 802c946:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c94a:	3c01      	subs	r4, #1
 802c94c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c950:	ed00 7a01 	vstr	s14, [r0, #-4]
 802c954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c958:	edc0 7a00 	vstr	s15, [r0]
 802c95c:	e781      	b.n	802c862 <__kernel_rem_pio2f+0x3e6>
 802c95e:	ed31 7a01 	vldmdb	r1!, {s14}
 802c962:	3b01      	subs	r3, #1
 802c964:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c968:	e77f      	b.n	802c86a <__kernel_rem_pio2f+0x3ee>
 802c96a:	eef1 6a66 	vneg.f32	s13, s13
 802c96e:	eeb1 7a47 	vneg.f32	s14, s14
 802c972:	edc6 6a00 	vstr	s13, [r6]
 802c976:	ed86 7a01 	vstr	s14, [r6, #4]
 802c97a:	eef1 7a67 	vneg.f32	s15, s15
 802c97e:	e781      	b.n	802c884 <__kernel_rem_pio2f+0x408>

0802c980 <__kernel_sinf>:
 802c980:	ee10 3a10 	vmov	r3, s0
 802c984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c988:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802c98c:	da04      	bge.n	802c998 <__kernel_sinf+0x18>
 802c98e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802c992:	ee17 3a90 	vmov	r3, s15
 802c996:	b35b      	cbz	r3, 802c9f0 <__kernel_sinf+0x70>
 802c998:	ee20 7a00 	vmul.f32	s14, s0, s0
 802c99c:	eddf 7a15 	vldr	s15, [pc, #84]	; 802c9f4 <__kernel_sinf+0x74>
 802c9a0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802c9f8 <__kernel_sinf+0x78>
 802c9a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c9a8:	eddf 7a14 	vldr	s15, [pc, #80]	; 802c9fc <__kernel_sinf+0x7c>
 802c9ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c9b0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802ca00 <__kernel_sinf+0x80>
 802c9b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 802c9b8:	eddf 7a12 	vldr	s15, [pc, #72]	; 802ca04 <__kernel_sinf+0x84>
 802c9bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 802c9c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c9c4:	b930      	cbnz	r0, 802c9d4 <__kernel_sinf+0x54>
 802c9c6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802ca08 <__kernel_sinf+0x88>
 802c9ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c9ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 802c9d2:	4770      	bx	lr
 802c9d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802c9d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802c9dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 802c9e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802c9e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 802ca0c <__kernel_sinf+0x8c>
 802c9e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802c9ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 802c9f0:	4770      	bx	lr
 802c9f2:	bf00      	nop
 802c9f4:	2f2ec9d3 	.word	0x2f2ec9d3
 802c9f8:	b2d72f34 	.word	0xb2d72f34
 802c9fc:	3638ef1b 	.word	0x3638ef1b
 802ca00:	b9500d01 	.word	0xb9500d01
 802ca04:	3c088889 	.word	0x3c088889
 802ca08:	be2aaaab 	.word	0xbe2aaaab
 802ca0c:	3e2aaaab 	.word	0x3e2aaaab

0802ca10 <atan>:
 802ca10:	b538      	push	{r3, r4, r5, lr}
 802ca12:	eeb0 7b40 	vmov.f64	d7, d0
 802ca16:	ee17 5a90 	vmov	r5, s15
 802ca1a:	4b73      	ldr	r3, [pc, #460]	; (802cbe8 <atan+0x1d8>)
 802ca1c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802ca20:	429c      	cmp	r4, r3
 802ca22:	dd13      	ble.n	802ca4c <atan+0x3c>
 802ca24:	4b71      	ldr	r3, [pc, #452]	; (802cbec <atan+0x1dc>)
 802ca26:	429c      	cmp	r4, r3
 802ca28:	dc03      	bgt.n	802ca32 <atan+0x22>
 802ca2a:	d107      	bne.n	802ca3c <atan+0x2c>
 802ca2c:	ee10 3a10 	vmov	r3, s0
 802ca30:	b123      	cbz	r3, 802ca3c <atan+0x2c>
 802ca32:	ee37 7b07 	vadd.f64	d7, d7, d7
 802ca36:	eeb0 0b47 	vmov.f64	d0, d7
 802ca3a:	bd38      	pop	{r3, r4, r5, pc}
 802ca3c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 802cb78 <atan+0x168>
 802ca40:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 802cb80 <atan+0x170>
 802ca44:	2d00      	cmp	r5, #0
 802ca46:	fe37 7b06 	vselgt.f64	d7, d7, d6
 802ca4a:	e7f4      	b.n	802ca36 <atan+0x26>
 802ca4c:	4b68      	ldr	r3, [pc, #416]	; (802cbf0 <atan+0x1e0>)
 802ca4e:	429c      	cmp	r4, r3
 802ca50:	dc11      	bgt.n	802ca76 <atan+0x66>
 802ca52:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 802ca56:	429c      	cmp	r4, r3
 802ca58:	dc0a      	bgt.n	802ca70 <atan+0x60>
 802ca5a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 802ca5e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 802cb88 <atan+0x178>
 802ca62:	ee30 6b06 	vadd.f64	d6, d0, d6
 802ca66:	eeb4 6bc5 	vcmpe.f64	d6, d5
 802ca6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ca6e:	dce2      	bgt.n	802ca36 <atan+0x26>
 802ca70:	f04f 33ff 	mov.w	r3, #4294967295
 802ca74:	e013      	b.n	802ca9e <atan+0x8e>
 802ca76:	f000 f8c5 	bl	802cc04 <fabs>
 802ca7a:	4b5e      	ldr	r3, [pc, #376]	; (802cbf4 <atan+0x1e4>)
 802ca7c:	429c      	cmp	r4, r3
 802ca7e:	dc4f      	bgt.n	802cb20 <atan+0x110>
 802ca80:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 802ca84:	429c      	cmp	r4, r3
 802ca86:	dc41      	bgt.n	802cb0c <atan+0xfc>
 802ca88:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 802ca8c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802ca90:	2300      	movs	r3, #0
 802ca92:	eea0 6b07 	vfma.f64	d6, d0, d7
 802ca96:	ee30 0b07 	vadd.f64	d0, d0, d7
 802ca9a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 802ca9e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802cb90 <atan+0x180>
 802caa2:	ee27 4b07 	vmul.f64	d4, d7, d7
 802caa6:	ee24 5b04 	vmul.f64	d5, d4, d4
 802caaa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 802cb98 <atan+0x188>
 802caae:	eea5 3b06 	vfma.f64	d3, d5, d6
 802cab2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 802cba0 <atan+0x190>
 802cab6:	eea3 6b05 	vfma.f64	d6, d3, d5
 802caba:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 802cba8 <atan+0x198>
 802cabe:	eea6 3b05 	vfma.f64	d3, d6, d5
 802cac2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 802cbb0 <atan+0x1a0>
 802cac6:	eea3 6b05 	vfma.f64	d6, d3, d5
 802caca:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 802cbb8 <atan+0x1a8>
 802cace:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 802cbc0 <atan+0x1b0>
 802cad2:	eea6 3b05 	vfma.f64	d3, d6, d5
 802cad6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802cbc8 <atan+0x1b8>
 802cada:	eea5 2b06 	vfma.f64	d2, d5, d6
 802cade:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802cbd0 <atan+0x1c0>
 802cae2:	eea2 6b05 	vfma.f64	d6, d2, d5
 802cae6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 802cbd8 <atan+0x1c8>
 802caea:	eea6 2b05 	vfma.f64	d2, d6, d5
 802caee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802cbe0 <atan+0x1d0>
 802caf2:	1c5a      	adds	r2, r3, #1
 802caf4:	eea2 6b05 	vfma.f64	d6, d2, d5
 802caf8:	ee26 6b05 	vmul.f64	d6, d6, d5
 802cafc:	eea3 6b04 	vfma.f64	d6, d3, d4
 802cb00:	ee26 6b07 	vmul.f64	d6, d6, d7
 802cb04:	d121      	bne.n	802cb4a <atan+0x13a>
 802cb06:	ee37 7b46 	vsub.f64	d7, d7, d6
 802cb0a:	e794      	b.n	802ca36 <atan+0x26>
 802cb0c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802cb10:	2301      	movs	r3, #1
 802cb12:	ee30 6b47 	vsub.f64	d6, d0, d7
 802cb16:	ee30 0b07 	vadd.f64	d0, d0, d7
 802cb1a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 802cb1e:	e7be      	b.n	802ca9e <atan+0x8e>
 802cb20:	4b35      	ldr	r3, [pc, #212]	; (802cbf8 <atan+0x1e8>)
 802cb22:	429c      	cmp	r4, r3
 802cb24:	dc0b      	bgt.n	802cb3e <atan+0x12e>
 802cb26:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802cb2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802cb2e:	ee30 5b47 	vsub.f64	d5, d0, d7
 802cb32:	eea0 6b07 	vfma.f64	d6, d0, d7
 802cb36:	2302      	movs	r3, #2
 802cb38:	ee85 7b06 	vdiv.f64	d7, d5, d6
 802cb3c:	e7af      	b.n	802ca9e <atan+0x8e>
 802cb3e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802cb42:	2303      	movs	r3, #3
 802cb44:	ee86 7b00 	vdiv.f64	d7, d6, d0
 802cb48:	e7a9      	b.n	802ca9e <atan+0x8e>
 802cb4a:	4a2c      	ldr	r2, [pc, #176]	; (802cbfc <atan+0x1ec>)
 802cb4c:	492c      	ldr	r1, [pc, #176]	; (802cc00 <atan+0x1f0>)
 802cb4e:	00db      	lsls	r3, r3, #3
 802cb50:	441a      	add	r2, r3
 802cb52:	440b      	add	r3, r1
 802cb54:	ed93 5b00 	vldr	d5, [r3]
 802cb58:	ee36 6b45 	vsub.f64	d6, d6, d5
 802cb5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 802cb60:	ed92 6b00 	vldr	d6, [r2]
 802cb64:	2d00      	cmp	r5, #0
 802cb66:	ee36 7b47 	vsub.f64	d7, d6, d7
 802cb6a:	bfb8      	it	lt
 802cb6c:	eeb1 7b47 	vneglt.f64	d7, d7
 802cb70:	e761      	b.n	802ca36 <atan+0x26>
 802cb72:	bf00      	nop
 802cb74:	f3af 8000 	nop.w
 802cb78:	54442d18 	.word	0x54442d18
 802cb7c:	bff921fb 	.word	0xbff921fb
 802cb80:	54442d18 	.word	0x54442d18
 802cb84:	3ff921fb 	.word	0x3ff921fb
 802cb88:	8800759c 	.word	0x8800759c
 802cb8c:	7e37e43c 	.word	0x7e37e43c
 802cb90:	e322da11 	.word	0xe322da11
 802cb94:	3f90ad3a 	.word	0x3f90ad3a
 802cb98:	24760deb 	.word	0x24760deb
 802cb9c:	3fa97b4b 	.word	0x3fa97b4b
 802cba0:	a0d03d51 	.word	0xa0d03d51
 802cba4:	3fb10d66 	.word	0x3fb10d66
 802cba8:	c54c206e 	.word	0xc54c206e
 802cbac:	3fb745cd 	.word	0x3fb745cd
 802cbb0:	920083ff 	.word	0x920083ff
 802cbb4:	3fc24924 	.word	0x3fc24924
 802cbb8:	5555550d 	.word	0x5555550d
 802cbbc:	3fd55555 	.word	0x3fd55555
 802cbc0:	52defd9a 	.word	0x52defd9a
 802cbc4:	bfadde2d 	.word	0xbfadde2d
 802cbc8:	2c6a6c2f 	.word	0x2c6a6c2f
 802cbcc:	bfa2b444 	.word	0xbfa2b444
 802cbd0:	af749a6d 	.word	0xaf749a6d
 802cbd4:	bfb3b0f2 	.word	0xbfb3b0f2
 802cbd8:	fe231671 	.word	0xfe231671
 802cbdc:	bfbc71c6 	.word	0xbfbc71c6
 802cbe0:	9998ebc4 	.word	0x9998ebc4
 802cbe4:	bfc99999 	.word	0xbfc99999
 802cbe8:	440fffff 	.word	0x440fffff
 802cbec:	7ff00000 	.word	0x7ff00000
 802cbf0:	3fdbffff 	.word	0x3fdbffff
 802cbf4:	3ff2ffff 	.word	0x3ff2ffff
 802cbf8:	40037fff 	.word	0x40037fff
 802cbfc:	0802f6b0 	.word	0x0802f6b0
 802cc00:	0802f6d0 	.word	0x0802f6d0

0802cc04 <fabs>:
 802cc04:	ec51 0b10 	vmov	r0, r1, d0
 802cc08:	ee10 2a10 	vmov	r2, s0
 802cc0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802cc10:	ec43 2b10 	vmov	d0, r2, r3
 802cc14:	4770      	bx	lr

0802cc16 <finite>:
 802cc16:	ee10 3a90 	vmov	r3, s1
 802cc1a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 802cc1e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802cc22:	0fc0      	lsrs	r0, r0, #31
 802cc24:	4770      	bx	lr

0802cc26 <matherr>:
 802cc26:	2000      	movs	r0, #0
 802cc28:	4770      	bx	lr
 802cc2a:	0000      	movs	r0, r0
 802cc2c:	0000      	movs	r0, r0
	...

0802cc30 <nan>:
 802cc30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802cc38 <nan+0x8>
 802cc34:	4770      	bx	lr
 802cc36:	bf00      	nop
 802cc38:	00000000 	.word	0x00000000
 802cc3c:	7ff80000 	.word	0x7ff80000

0802cc40 <rint>:
 802cc40:	b530      	push	{r4, r5, lr}
 802cc42:	b085      	sub	sp, #20
 802cc44:	ed8d 0b00 	vstr	d0, [sp]
 802cc48:	e9dd 2300 	ldrd	r2, r3, [sp]
 802cc4c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 802cc50:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 802cc54:	2813      	cmp	r0, #19
 802cc56:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 802cc5a:	dc5a      	bgt.n	802cd12 <rint+0xd2>
 802cc5c:	2800      	cmp	r0, #0
 802cc5e:	da2f      	bge.n	802ccc0 <rint+0x80>
 802cc60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802cc64:	4311      	orrs	r1, r2
 802cc66:	d027      	beq.n	802ccb8 <rint+0x78>
 802cc68:	f3c3 0513 	ubfx	r5, r3, #0, #20
 802cc6c:	4315      	orrs	r5, r2
 802cc6e:	426a      	negs	r2, r5
 802cc70:	432a      	orrs	r2, r5
 802cc72:	0b12      	lsrs	r2, r2, #12
 802cc74:	0c5b      	lsrs	r3, r3, #17
 802cc76:	045b      	lsls	r3, r3, #17
 802cc78:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 802cc7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 802cc80:	ea42 0103 	orr.w	r1, r2, r3
 802cc84:	4b31      	ldr	r3, [pc, #196]	; (802cd4c <rint+0x10c>)
 802cc86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802cc8a:	ed93 6b00 	vldr	d6, [r3]
 802cc8e:	ec41 0b17 	vmov	d7, r0, r1
 802cc92:	ee36 7b07 	vadd.f64	d7, d6, d7
 802cc96:	ed8d 7b02 	vstr	d7, [sp, #8]
 802cc9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802cc9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 802cca2:	ed8d 7b00 	vstr	d7, [sp]
 802cca6:	9b01      	ldr	r3, [sp, #4]
 802cca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ccac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802ccb0:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 802ccb4:	e9cd 0100 	strd	r0, r1, [sp]
 802ccb8:	ed9d 0b00 	vldr	d0, [sp]
 802ccbc:	b005      	add	sp, #20
 802ccbe:	bd30      	pop	{r4, r5, pc}
 802ccc0:	4923      	ldr	r1, [pc, #140]	; (802cd50 <rint+0x110>)
 802ccc2:	4101      	asrs	r1, r0
 802ccc4:	ea03 0501 	and.w	r5, r3, r1
 802ccc8:	4315      	orrs	r5, r2
 802ccca:	d0f5      	beq.n	802ccb8 <rint+0x78>
 802cccc:	0849      	lsrs	r1, r1, #1
 802ccce:	ea03 0501 	and.w	r5, r3, r1
 802ccd2:	432a      	orrs	r2, r5
 802ccd4:	d00b      	beq.n	802ccee <rint+0xae>
 802ccd6:	ea23 0101 	bic.w	r1, r3, r1
 802ccda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802ccde:	2813      	cmp	r0, #19
 802cce0:	fa43 f300 	asr.w	r3, r3, r0
 802cce4:	bf0c      	ite	eq
 802cce6:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 802ccea:	2200      	movne	r2, #0
 802ccec:	430b      	orrs	r3, r1
 802ccee:	4619      	mov	r1, r3
 802ccf0:	4b16      	ldr	r3, [pc, #88]	; (802cd4c <rint+0x10c>)
 802ccf2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802ccf6:	ed94 6b00 	vldr	d6, [r4]
 802ccfa:	4610      	mov	r0, r2
 802ccfc:	ec41 0b17 	vmov	d7, r0, r1
 802cd00:	ee36 7b07 	vadd.f64	d7, d6, d7
 802cd04:	ed8d 7b02 	vstr	d7, [sp, #8]
 802cd08:	ed9d 7b02 	vldr	d7, [sp, #8]
 802cd0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 802cd10:	e008      	b.n	802cd24 <rint+0xe4>
 802cd12:	2833      	cmp	r0, #51	; 0x33
 802cd14:	dd09      	ble.n	802cd2a <rint+0xea>
 802cd16:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 802cd1a:	d1cd      	bne.n	802ccb8 <rint+0x78>
 802cd1c:	ed9d 7b00 	vldr	d7, [sp]
 802cd20:	ee37 7b07 	vadd.f64	d7, d7, d7
 802cd24:	ed8d 7b00 	vstr	d7, [sp]
 802cd28:	e7c6      	b.n	802ccb8 <rint+0x78>
 802cd2a:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 802cd2e:	f04f 31ff 	mov.w	r1, #4294967295
 802cd32:	40c1      	lsrs	r1, r0
 802cd34:	420a      	tst	r2, r1
 802cd36:	d0bf      	beq.n	802ccb8 <rint+0x78>
 802cd38:	0849      	lsrs	r1, r1, #1
 802cd3a:	420a      	tst	r2, r1
 802cd3c:	bf1f      	itttt	ne
 802cd3e:	ea22 0101 	bicne.w	r1, r2, r1
 802cd42:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 802cd46:	4102      	asrne	r2, r0
 802cd48:	430a      	orrne	r2, r1
 802cd4a:	e7d0      	b.n	802ccee <rint+0xae>
 802cd4c:	0802f6f0 	.word	0x0802f6f0
 802cd50:	000fffff 	.word	0x000fffff
 802cd54:	00000000 	.word	0x00000000

0802cd58 <scalbn>:
 802cd58:	b500      	push	{lr}
 802cd5a:	ed2d 8b02 	vpush	{d8}
 802cd5e:	b083      	sub	sp, #12
 802cd60:	ed8d 0b00 	vstr	d0, [sp]
 802cd64:	9b01      	ldr	r3, [sp, #4]
 802cd66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802cd6a:	b9a2      	cbnz	r2, 802cd96 <scalbn+0x3e>
 802cd6c:	9a00      	ldr	r2, [sp, #0]
 802cd6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802cd72:	4313      	orrs	r3, r2
 802cd74:	d03a      	beq.n	802cdec <scalbn+0x94>
 802cd76:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 802ce30 <scalbn+0xd8>
 802cd7a:	4b35      	ldr	r3, [pc, #212]	; (802ce50 <scalbn+0xf8>)
 802cd7c:	ee20 7b07 	vmul.f64	d7, d0, d7
 802cd80:	4298      	cmp	r0, r3
 802cd82:	ed8d 7b00 	vstr	d7, [sp]
 802cd86:	da11      	bge.n	802cdac <scalbn+0x54>
 802cd88:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 802ce38 <scalbn+0xe0>
 802cd8c:	ed9d 6b00 	vldr	d6, [sp]
 802cd90:	ee27 7b06 	vmul.f64	d7, d7, d6
 802cd94:	e007      	b.n	802cda6 <scalbn+0x4e>
 802cd96:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802cd9a:	428a      	cmp	r2, r1
 802cd9c:	d10a      	bne.n	802cdb4 <scalbn+0x5c>
 802cd9e:	ed9d 7b00 	vldr	d7, [sp]
 802cda2:	ee37 7b07 	vadd.f64	d7, d7, d7
 802cda6:	ed8d 7b00 	vstr	d7, [sp]
 802cdaa:	e01f      	b.n	802cdec <scalbn+0x94>
 802cdac:	9b01      	ldr	r3, [sp, #4]
 802cdae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802cdb2:	3a36      	subs	r2, #54	; 0x36
 802cdb4:	4402      	add	r2, r0
 802cdb6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802cdba:	428a      	cmp	r2, r1
 802cdbc:	dd0a      	ble.n	802cdd4 <scalbn+0x7c>
 802cdbe:	ed9f 8b20 	vldr	d8, [pc, #128]	; 802ce40 <scalbn+0xe8>
 802cdc2:	eeb0 0b48 	vmov.f64	d0, d8
 802cdc6:	ed9d 1b00 	vldr	d1, [sp]
 802cdca:	f000 f9bf 	bl	802d14c <copysign>
 802cdce:	ee20 7b08 	vmul.f64	d7, d0, d8
 802cdd2:	e7e8      	b.n	802cda6 <scalbn+0x4e>
 802cdd4:	2a00      	cmp	r2, #0
 802cdd6:	dd10      	ble.n	802cdfa <scalbn+0xa2>
 802cdd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 802cddc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802cde0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802cde4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802cde8:	e9cd 0100 	strd	r0, r1, [sp]
 802cdec:	ed9d 0b00 	vldr	d0, [sp]
 802cdf0:	b003      	add	sp, #12
 802cdf2:	ecbd 8b02 	vpop	{d8}
 802cdf6:	f85d fb04 	ldr.w	pc, [sp], #4
 802cdfa:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802cdfe:	da06      	bge.n	802ce0e <scalbn+0xb6>
 802ce00:	f24c 3350 	movw	r3, #50000	; 0xc350
 802ce04:	4298      	cmp	r0, r3
 802ce06:	dcda      	bgt.n	802cdbe <scalbn+0x66>
 802ce08:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 802ce38 <scalbn+0xe0>
 802ce0c:	e7d9      	b.n	802cdc2 <scalbn+0x6a>
 802ce0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802ce12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802ce16:	3236      	adds	r2, #54	; 0x36
 802ce18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802ce1c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802ce20:	ec41 0b17 	vmov	d7, r0, r1
 802ce24:	ed9f 6b08 	vldr	d6, [pc, #32]	; 802ce48 <scalbn+0xf0>
 802ce28:	e7b2      	b.n	802cd90 <scalbn+0x38>
 802ce2a:	bf00      	nop
 802ce2c:	f3af 8000 	nop.w
 802ce30:	00000000 	.word	0x00000000
 802ce34:	43500000 	.word	0x43500000
 802ce38:	c2f8f359 	.word	0xc2f8f359
 802ce3c:	01a56e1f 	.word	0x01a56e1f
 802ce40:	8800759c 	.word	0x8800759c
 802ce44:	7e37e43c 	.word	0x7e37e43c
 802ce48:	00000000 	.word	0x00000000
 802ce4c:	3c900000 	.word	0x3c900000
 802ce50:	ffff3cb0 	.word	0xffff3cb0

0802ce54 <atanf>:
 802ce54:	b538      	push	{r3, r4, r5, lr}
 802ce56:	ee10 5a10 	vmov	r5, s0
 802ce5a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802ce5e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 802ce62:	eef0 7a40 	vmov.f32	s15, s0
 802ce66:	db0f      	blt.n	802ce88 <atanf+0x34>
 802ce68:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802ce6c:	dd04      	ble.n	802ce78 <atanf+0x24>
 802ce6e:	ee70 7a00 	vadd.f32	s15, s0, s0
 802ce72:	eeb0 0a67 	vmov.f32	s0, s15
 802ce76:	bd38      	pop	{r3, r4, r5, pc}
 802ce78:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 802cfac <atanf+0x158>
 802ce7c:	eddf 7a4c 	vldr	s15, [pc, #304]	; 802cfb0 <atanf+0x15c>
 802ce80:	2d00      	cmp	r5, #0
 802ce82:	fe77 7a87 	vselgt.f32	s15, s15, s14
 802ce86:	e7f4      	b.n	802ce72 <atanf+0x1e>
 802ce88:	4b4a      	ldr	r3, [pc, #296]	; (802cfb4 <atanf+0x160>)
 802ce8a:	429c      	cmp	r4, r3
 802ce8c:	dc10      	bgt.n	802ceb0 <atanf+0x5c>
 802ce8e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 802ce92:	da0a      	bge.n	802ceaa <atanf+0x56>
 802ce94:	ed9f 7a48 	vldr	s14, [pc, #288]	; 802cfb8 <atanf+0x164>
 802ce98:	ee30 7a07 	vadd.f32	s14, s0, s14
 802ce9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802cea0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802cea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cea8:	dce3      	bgt.n	802ce72 <atanf+0x1e>
 802ceaa:	f04f 33ff 	mov.w	r3, #4294967295
 802ceae:	e013      	b.n	802ced8 <atanf+0x84>
 802ceb0:	f000 f8a2 	bl	802cff8 <fabsf>
 802ceb4:	4b41      	ldr	r3, [pc, #260]	; (802cfbc <atanf+0x168>)
 802ceb6:	429c      	cmp	r4, r3
 802ceb8:	dc4f      	bgt.n	802cf5a <atanf+0x106>
 802ceba:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 802cebe:	429c      	cmp	r4, r3
 802cec0:	dc41      	bgt.n	802cf46 <atanf+0xf2>
 802cec2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802cec6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802ceca:	eea0 7a27 	vfma.f32	s14, s0, s15
 802cece:	2300      	movs	r3, #0
 802ced0:	ee30 0a27 	vadd.f32	s0, s0, s15
 802ced4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802ced8:	1c5a      	adds	r2, r3, #1
 802ceda:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802cede:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802cfc0 <atanf+0x16c>
 802cee2:	eddf 5a38 	vldr	s11, [pc, #224]	; 802cfc4 <atanf+0x170>
 802cee6:	ed9f 5a38 	vldr	s10, [pc, #224]	; 802cfc8 <atanf+0x174>
 802ceea:	ee66 6a06 	vmul.f32	s13, s12, s12
 802ceee:	eee6 5a87 	vfma.f32	s11, s13, s14
 802cef2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 802cfcc <atanf+0x178>
 802cef6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802cefa:	eddf 5a35 	vldr	s11, [pc, #212]	; 802cfd0 <atanf+0x17c>
 802cefe:	eee7 5a26 	vfma.f32	s11, s14, s13
 802cf02:	ed9f 7a34 	vldr	s14, [pc, #208]	; 802cfd4 <atanf+0x180>
 802cf06:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802cf0a:	eddf 5a33 	vldr	s11, [pc, #204]	; 802cfd8 <atanf+0x184>
 802cf0e:	eee7 5a26 	vfma.f32	s11, s14, s13
 802cf12:	ed9f 7a32 	vldr	s14, [pc, #200]	; 802cfdc <atanf+0x188>
 802cf16:	eea6 5a87 	vfma.f32	s10, s13, s14
 802cf1a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 802cfe0 <atanf+0x18c>
 802cf1e:	eea5 7a26 	vfma.f32	s14, s10, s13
 802cf22:	ed9f 5a30 	vldr	s10, [pc, #192]	; 802cfe4 <atanf+0x190>
 802cf26:	eea7 5a26 	vfma.f32	s10, s14, s13
 802cf2a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 802cfe8 <atanf+0x194>
 802cf2e:	eea5 7a26 	vfma.f32	s14, s10, s13
 802cf32:	ee27 7a26 	vmul.f32	s14, s14, s13
 802cf36:	eea5 7a86 	vfma.f32	s14, s11, s12
 802cf3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802cf3e:	d121      	bne.n	802cf84 <atanf+0x130>
 802cf40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802cf44:	e795      	b.n	802ce72 <atanf+0x1e>
 802cf46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802cf4a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802cf4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802cf52:	2301      	movs	r3, #1
 802cf54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802cf58:	e7be      	b.n	802ced8 <atanf+0x84>
 802cf5a:	4b24      	ldr	r3, [pc, #144]	; (802cfec <atanf+0x198>)
 802cf5c:	429c      	cmp	r4, r3
 802cf5e:	dc0b      	bgt.n	802cf78 <atanf+0x124>
 802cf60:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 802cf64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802cf68:	eea0 7a27 	vfma.f32	s14, s0, s15
 802cf6c:	2302      	movs	r3, #2
 802cf6e:	ee70 6a67 	vsub.f32	s13, s0, s15
 802cf72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802cf76:	e7af      	b.n	802ced8 <atanf+0x84>
 802cf78:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802cf7c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802cf80:	2303      	movs	r3, #3
 802cf82:	e7a9      	b.n	802ced8 <atanf+0x84>
 802cf84:	4a1a      	ldr	r2, [pc, #104]	; (802cff0 <atanf+0x19c>)
 802cf86:	491b      	ldr	r1, [pc, #108]	; (802cff4 <atanf+0x1a0>)
 802cf88:	009b      	lsls	r3, r3, #2
 802cf8a:	441a      	add	r2, r3
 802cf8c:	440b      	add	r3, r1
 802cf8e:	edd3 6a00 	vldr	s13, [r3]
 802cf92:	ee37 7a66 	vsub.f32	s14, s14, s13
 802cf96:	2d00      	cmp	r5, #0
 802cf98:	ee77 7a67 	vsub.f32	s15, s14, s15
 802cf9c:	ed92 7a00 	vldr	s14, [r2]
 802cfa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 802cfa4:	bfb8      	it	lt
 802cfa6:	eef1 7a67 	vneglt.f32	s15, s15
 802cfaa:	e762      	b.n	802ce72 <atanf+0x1e>
 802cfac:	bfc90fdb 	.word	0xbfc90fdb
 802cfb0:	3fc90fdb 	.word	0x3fc90fdb
 802cfb4:	3edfffff 	.word	0x3edfffff
 802cfb8:	7149f2ca 	.word	0x7149f2ca
 802cfbc:	3f97ffff 	.word	0x3f97ffff
 802cfc0:	3c8569d7 	.word	0x3c8569d7
 802cfc4:	3d4bda59 	.word	0x3d4bda59
 802cfc8:	bd6ef16b 	.word	0xbd6ef16b
 802cfcc:	3d886b35 	.word	0x3d886b35
 802cfd0:	3dba2e6e 	.word	0x3dba2e6e
 802cfd4:	3e124925 	.word	0x3e124925
 802cfd8:	3eaaaaab 	.word	0x3eaaaaab
 802cfdc:	bd15a221 	.word	0xbd15a221
 802cfe0:	bd9d8795 	.word	0xbd9d8795
 802cfe4:	bde38e38 	.word	0xbde38e38
 802cfe8:	be4ccccd 	.word	0xbe4ccccd
 802cfec:	401bffff 	.word	0x401bffff
 802cff0:	0802f700 	.word	0x0802f700
 802cff4:	0802f710 	.word	0x0802f710

0802cff8 <fabsf>:
 802cff8:	ee10 3a10 	vmov	r3, s0
 802cffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d000:	ee00 3a10 	vmov	s0, r3
 802d004:	4770      	bx	lr
	...

0802d008 <floorf>:
 802d008:	ee10 3a10 	vmov	r3, s0
 802d00c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d010:	0dca      	lsrs	r2, r1, #23
 802d012:	3a7f      	subs	r2, #127	; 0x7f
 802d014:	2a16      	cmp	r2, #22
 802d016:	dc2a      	bgt.n	802d06e <floorf+0x66>
 802d018:	2a00      	cmp	r2, #0
 802d01a:	da11      	bge.n	802d040 <floorf+0x38>
 802d01c:	eddf 7a18 	vldr	s15, [pc, #96]	; 802d080 <floorf+0x78>
 802d020:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d024:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d02c:	dd05      	ble.n	802d03a <floorf+0x32>
 802d02e:	2b00      	cmp	r3, #0
 802d030:	da23      	bge.n	802d07a <floorf+0x72>
 802d032:	4a14      	ldr	r2, [pc, #80]	; (802d084 <floorf+0x7c>)
 802d034:	2900      	cmp	r1, #0
 802d036:	bf18      	it	ne
 802d038:	4613      	movne	r3, r2
 802d03a:	ee00 3a10 	vmov	s0, r3
 802d03e:	4770      	bx	lr
 802d040:	4911      	ldr	r1, [pc, #68]	; (802d088 <floorf+0x80>)
 802d042:	4111      	asrs	r1, r2
 802d044:	420b      	tst	r3, r1
 802d046:	d0fa      	beq.n	802d03e <floorf+0x36>
 802d048:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802d080 <floorf+0x78>
 802d04c:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d050:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d058:	ddef      	ble.n	802d03a <floorf+0x32>
 802d05a:	2b00      	cmp	r3, #0
 802d05c:	bfbe      	ittt	lt
 802d05e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802d062:	fa40 f202 	asrlt.w	r2, r0, r2
 802d066:	189b      	addlt	r3, r3, r2
 802d068:	ea23 0301 	bic.w	r3, r3, r1
 802d06c:	e7e5      	b.n	802d03a <floorf+0x32>
 802d06e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802d072:	d3e4      	bcc.n	802d03e <floorf+0x36>
 802d074:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d078:	4770      	bx	lr
 802d07a:	2300      	movs	r3, #0
 802d07c:	e7dd      	b.n	802d03a <floorf+0x32>
 802d07e:	bf00      	nop
 802d080:	7149f2ca 	.word	0x7149f2ca
 802d084:	bf800000 	.word	0xbf800000
 802d088:	007fffff 	.word	0x007fffff

0802d08c <scalbnf>:
 802d08c:	b508      	push	{r3, lr}
 802d08e:	ee10 2a10 	vmov	r2, s0
 802d092:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 802d096:	ed2d 8b02 	vpush	{d8}
 802d09a:	eef0 0a40 	vmov.f32	s1, s0
 802d09e:	d004      	beq.n	802d0aa <scalbnf+0x1e>
 802d0a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802d0a4:	d306      	bcc.n	802d0b4 <scalbnf+0x28>
 802d0a6:	ee70 0a00 	vadd.f32	s1, s0, s0
 802d0aa:	ecbd 8b02 	vpop	{d8}
 802d0ae:	eeb0 0a60 	vmov.f32	s0, s1
 802d0b2:	bd08      	pop	{r3, pc}
 802d0b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802d0b8:	d21c      	bcs.n	802d0f4 <scalbnf+0x68>
 802d0ba:	4b1f      	ldr	r3, [pc, #124]	; (802d138 <scalbnf+0xac>)
 802d0bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802d13c <scalbnf+0xb0>
 802d0c0:	4298      	cmp	r0, r3
 802d0c2:	ee60 0a27 	vmul.f32	s1, s0, s15
 802d0c6:	db10      	blt.n	802d0ea <scalbnf+0x5e>
 802d0c8:	ee10 2a90 	vmov	r2, s1
 802d0cc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 802d0d0:	3b19      	subs	r3, #25
 802d0d2:	4403      	add	r3, r0
 802d0d4:	2bfe      	cmp	r3, #254	; 0xfe
 802d0d6:	dd0f      	ble.n	802d0f8 <scalbnf+0x6c>
 802d0d8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 802d140 <scalbnf+0xb4>
 802d0dc:	eeb0 0a48 	vmov.f32	s0, s16
 802d0e0:	f000 f843 	bl	802d16a <copysignf>
 802d0e4:	ee60 0a08 	vmul.f32	s1, s0, s16
 802d0e8:	e7df      	b.n	802d0aa <scalbnf+0x1e>
 802d0ea:	eddf 7a16 	vldr	s15, [pc, #88]	; 802d144 <scalbnf+0xb8>
 802d0ee:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802d0f2:	e7da      	b.n	802d0aa <scalbnf+0x1e>
 802d0f4:	0ddb      	lsrs	r3, r3, #23
 802d0f6:	e7ec      	b.n	802d0d2 <scalbnf+0x46>
 802d0f8:	2b00      	cmp	r3, #0
 802d0fa:	dd06      	ble.n	802d10a <scalbnf+0x7e>
 802d0fc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802d100:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802d104:	ee00 3a90 	vmov	s1, r3
 802d108:	e7cf      	b.n	802d0aa <scalbnf+0x1e>
 802d10a:	f113 0f16 	cmn.w	r3, #22
 802d10e:	da06      	bge.n	802d11e <scalbnf+0x92>
 802d110:	f24c 3350 	movw	r3, #50000	; 0xc350
 802d114:	4298      	cmp	r0, r3
 802d116:	dcdf      	bgt.n	802d0d8 <scalbnf+0x4c>
 802d118:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 802d144 <scalbnf+0xb8>
 802d11c:	e7de      	b.n	802d0dc <scalbnf+0x50>
 802d11e:	3319      	adds	r3, #25
 802d120:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802d124:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802d128:	eddf 7a07 	vldr	s15, [pc, #28]	; 802d148 <scalbnf+0xbc>
 802d12c:	ee07 3a10 	vmov	s14, r3
 802d130:	ee67 0a27 	vmul.f32	s1, s14, s15
 802d134:	e7b9      	b.n	802d0aa <scalbnf+0x1e>
 802d136:	bf00      	nop
 802d138:	ffff3cb0 	.word	0xffff3cb0
 802d13c:	4c000000 	.word	0x4c000000
 802d140:	7149f2ca 	.word	0x7149f2ca
 802d144:	0da24260 	.word	0x0da24260
 802d148:	33000000 	.word	0x33000000

0802d14c <copysign>:
 802d14c:	ec51 0b10 	vmov	r0, r1, d0
 802d150:	ee11 0a90 	vmov	r0, s3
 802d154:	ee10 2a10 	vmov	r2, s0
 802d158:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802d15c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 802d160:	ea41 0300 	orr.w	r3, r1, r0
 802d164:	ec43 2b10 	vmov	d0, r2, r3
 802d168:	4770      	bx	lr

0802d16a <copysignf>:
 802d16a:	ee10 3a10 	vmov	r3, s0
 802d16e:	ee10 2a90 	vmov	r2, s1
 802d172:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d176:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802d17a:	4313      	orrs	r3, r2
 802d17c:	ee00 3a10 	vmov	s0, r3
 802d180:	4770      	bx	lr
	...

0802d184 <__assert_func>:
 802d184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802d186:	461c      	mov	r4, r3
 802d188:	4b09      	ldr	r3, [pc, #36]	; (802d1b0 <__assert_func+0x2c>)
 802d18a:	681b      	ldr	r3, [r3, #0]
 802d18c:	4605      	mov	r5, r0
 802d18e:	68d8      	ldr	r0, [r3, #12]
 802d190:	b152      	cbz	r2, 802d1a8 <__assert_func+0x24>
 802d192:	4b08      	ldr	r3, [pc, #32]	; (802d1b4 <__assert_func+0x30>)
 802d194:	9100      	str	r1, [sp, #0]
 802d196:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802d19a:	4907      	ldr	r1, [pc, #28]	; (802d1b8 <__assert_func+0x34>)
 802d19c:	462b      	mov	r3, r5
 802d19e:	4622      	mov	r2, r4
 802d1a0:	f000 f814 	bl	802d1cc <fiprintf>
 802d1a4:	f000 fcfc 	bl	802dba0 <abort>
 802d1a8:	4b04      	ldr	r3, [pc, #16]	; (802d1bc <__assert_func+0x38>)
 802d1aa:	461a      	mov	r2, r3
 802d1ac:	e7f2      	b.n	802d194 <__assert_func+0x10>
 802d1ae:	bf00      	nop
 802d1b0:	240006b0 	.word	0x240006b0
 802d1b4:	0802f720 	.word	0x0802f720
 802d1b8:	0802f72d 	.word	0x0802f72d
 802d1bc:	0802f75b 	.word	0x0802f75b

0802d1c0 <__errno>:
 802d1c0:	4b01      	ldr	r3, [pc, #4]	; (802d1c8 <__errno+0x8>)
 802d1c2:	6818      	ldr	r0, [r3, #0]
 802d1c4:	4770      	bx	lr
 802d1c6:	bf00      	nop
 802d1c8:	240006b0 	.word	0x240006b0

0802d1cc <fiprintf>:
 802d1cc:	b40e      	push	{r1, r2, r3}
 802d1ce:	b503      	push	{r0, r1, lr}
 802d1d0:	4601      	mov	r1, r0
 802d1d2:	ab03      	add	r3, sp, #12
 802d1d4:	4805      	ldr	r0, [pc, #20]	; (802d1ec <fiprintf+0x20>)
 802d1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 802d1da:	6800      	ldr	r0, [r0, #0]
 802d1dc:	9301      	str	r3, [sp, #4]
 802d1de:	f000 f867 	bl	802d2b0 <_vfiprintf_r>
 802d1e2:	b002      	add	sp, #8
 802d1e4:	f85d eb04 	ldr.w	lr, [sp], #4
 802d1e8:	b003      	add	sp, #12
 802d1ea:	4770      	bx	lr
 802d1ec:	240006b0 	.word	0x240006b0

0802d1f0 <__libc_init_array>:
 802d1f0:	b570      	push	{r4, r5, r6, lr}
 802d1f2:	4e0d      	ldr	r6, [pc, #52]	; (802d228 <__libc_init_array+0x38>)
 802d1f4:	4c0d      	ldr	r4, [pc, #52]	; (802d22c <__libc_init_array+0x3c>)
 802d1f6:	1ba4      	subs	r4, r4, r6
 802d1f8:	10a4      	asrs	r4, r4, #2
 802d1fa:	2500      	movs	r5, #0
 802d1fc:	42a5      	cmp	r5, r4
 802d1fe:	d109      	bne.n	802d214 <__libc_init_array+0x24>
 802d200:	4e0b      	ldr	r6, [pc, #44]	; (802d230 <__libc_init_array+0x40>)
 802d202:	4c0c      	ldr	r4, [pc, #48]	; (802d234 <__libc_init_array+0x44>)
 802d204:	f001 f864 	bl	802e2d0 <_init>
 802d208:	1ba4      	subs	r4, r4, r6
 802d20a:	10a4      	asrs	r4, r4, #2
 802d20c:	2500      	movs	r5, #0
 802d20e:	42a5      	cmp	r5, r4
 802d210:	d105      	bne.n	802d21e <__libc_init_array+0x2e>
 802d212:	bd70      	pop	{r4, r5, r6, pc}
 802d214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802d218:	4798      	blx	r3
 802d21a:	3501      	adds	r5, #1
 802d21c:	e7ee      	b.n	802d1fc <__libc_init_array+0xc>
 802d21e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802d222:	4798      	blx	r3
 802d224:	3501      	adds	r5, #1
 802d226:	e7f2      	b.n	802d20e <__libc_init_array+0x1e>
 802d228:	0802f7fc 	.word	0x0802f7fc
 802d22c:	0802f7fc 	.word	0x0802f7fc
 802d230:	0802f7fc 	.word	0x0802f7fc
 802d234:	0802f820 	.word	0x0802f820

0802d238 <memcpy>:
 802d238:	b510      	push	{r4, lr}
 802d23a:	1e43      	subs	r3, r0, #1
 802d23c:	440a      	add	r2, r1
 802d23e:	4291      	cmp	r1, r2
 802d240:	d100      	bne.n	802d244 <memcpy+0xc>
 802d242:	bd10      	pop	{r4, pc}
 802d244:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d248:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d24c:	e7f7      	b.n	802d23e <memcpy+0x6>

0802d24e <memset>:
 802d24e:	4402      	add	r2, r0
 802d250:	4603      	mov	r3, r0
 802d252:	4293      	cmp	r3, r2
 802d254:	d100      	bne.n	802d258 <memset+0xa>
 802d256:	4770      	bx	lr
 802d258:	f803 1b01 	strb.w	r1, [r3], #1
 802d25c:	e7f9      	b.n	802d252 <memset+0x4>

0802d25e <__sfputc_r>:
 802d25e:	6893      	ldr	r3, [r2, #8]
 802d260:	3b01      	subs	r3, #1
 802d262:	2b00      	cmp	r3, #0
 802d264:	b410      	push	{r4}
 802d266:	6093      	str	r3, [r2, #8]
 802d268:	da08      	bge.n	802d27c <__sfputc_r+0x1e>
 802d26a:	6994      	ldr	r4, [r2, #24]
 802d26c:	42a3      	cmp	r3, r4
 802d26e:	db01      	blt.n	802d274 <__sfputc_r+0x16>
 802d270:	290a      	cmp	r1, #10
 802d272:	d103      	bne.n	802d27c <__sfputc_r+0x1e>
 802d274:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d278:	f000 bbd2 	b.w	802da20 <__swbuf_r>
 802d27c:	6813      	ldr	r3, [r2, #0]
 802d27e:	1c58      	adds	r0, r3, #1
 802d280:	6010      	str	r0, [r2, #0]
 802d282:	7019      	strb	r1, [r3, #0]
 802d284:	4608      	mov	r0, r1
 802d286:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d28a:	4770      	bx	lr

0802d28c <__sfputs_r>:
 802d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d28e:	4606      	mov	r6, r0
 802d290:	460f      	mov	r7, r1
 802d292:	4614      	mov	r4, r2
 802d294:	18d5      	adds	r5, r2, r3
 802d296:	42ac      	cmp	r4, r5
 802d298:	d101      	bne.n	802d29e <__sfputs_r+0x12>
 802d29a:	2000      	movs	r0, #0
 802d29c:	e007      	b.n	802d2ae <__sfputs_r+0x22>
 802d29e:	463a      	mov	r2, r7
 802d2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d2a4:	4630      	mov	r0, r6
 802d2a6:	f7ff ffda 	bl	802d25e <__sfputc_r>
 802d2aa:	1c43      	adds	r3, r0, #1
 802d2ac:	d1f3      	bne.n	802d296 <__sfputs_r+0xa>
 802d2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802d2b0 <_vfiprintf_r>:
 802d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d2b4:	460c      	mov	r4, r1
 802d2b6:	b09d      	sub	sp, #116	; 0x74
 802d2b8:	4617      	mov	r7, r2
 802d2ba:	461d      	mov	r5, r3
 802d2bc:	4606      	mov	r6, r0
 802d2be:	b118      	cbz	r0, 802d2c8 <_vfiprintf_r+0x18>
 802d2c0:	6983      	ldr	r3, [r0, #24]
 802d2c2:	b90b      	cbnz	r3, 802d2c8 <_vfiprintf_r+0x18>
 802d2c4:	f000 fd64 	bl	802dd90 <__sinit>
 802d2c8:	4b7c      	ldr	r3, [pc, #496]	; (802d4bc <_vfiprintf_r+0x20c>)
 802d2ca:	429c      	cmp	r4, r3
 802d2cc:	d158      	bne.n	802d380 <_vfiprintf_r+0xd0>
 802d2ce:	6874      	ldr	r4, [r6, #4]
 802d2d0:	89a3      	ldrh	r3, [r4, #12]
 802d2d2:	0718      	lsls	r0, r3, #28
 802d2d4:	d55e      	bpl.n	802d394 <_vfiprintf_r+0xe4>
 802d2d6:	6923      	ldr	r3, [r4, #16]
 802d2d8:	2b00      	cmp	r3, #0
 802d2da:	d05b      	beq.n	802d394 <_vfiprintf_r+0xe4>
 802d2dc:	2300      	movs	r3, #0
 802d2de:	9309      	str	r3, [sp, #36]	; 0x24
 802d2e0:	2320      	movs	r3, #32
 802d2e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d2e6:	2330      	movs	r3, #48	; 0x30
 802d2e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d2ec:	9503      	str	r5, [sp, #12]
 802d2ee:	f04f 0b01 	mov.w	fp, #1
 802d2f2:	46b8      	mov	r8, r7
 802d2f4:	4645      	mov	r5, r8
 802d2f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 802d2fa:	b10b      	cbz	r3, 802d300 <_vfiprintf_r+0x50>
 802d2fc:	2b25      	cmp	r3, #37	; 0x25
 802d2fe:	d154      	bne.n	802d3aa <_vfiprintf_r+0xfa>
 802d300:	ebb8 0a07 	subs.w	sl, r8, r7
 802d304:	d00b      	beq.n	802d31e <_vfiprintf_r+0x6e>
 802d306:	4653      	mov	r3, sl
 802d308:	463a      	mov	r2, r7
 802d30a:	4621      	mov	r1, r4
 802d30c:	4630      	mov	r0, r6
 802d30e:	f7ff ffbd 	bl	802d28c <__sfputs_r>
 802d312:	3001      	adds	r0, #1
 802d314:	f000 80c2 	beq.w	802d49c <_vfiprintf_r+0x1ec>
 802d318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d31a:	4453      	add	r3, sl
 802d31c:	9309      	str	r3, [sp, #36]	; 0x24
 802d31e:	f898 3000 	ldrb.w	r3, [r8]
 802d322:	2b00      	cmp	r3, #0
 802d324:	f000 80ba 	beq.w	802d49c <_vfiprintf_r+0x1ec>
 802d328:	2300      	movs	r3, #0
 802d32a:	f04f 32ff 	mov.w	r2, #4294967295
 802d32e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d332:	9304      	str	r3, [sp, #16]
 802d334:	9307      	str	r3, [sp, #28]
 802d336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d33a:	931a      	str	r3, [sp, #104]	; 0x68
 802d33c:	46a8      	mov	r8, r5
 802d33e:	2205      	movs	r2, #5
 802d340:	f818 1b01 	ldrb.w	r1, [r8], #1
 802d344:	485e      	ldr	r0, [pc, #376]	; (802d4c0 <_vfiprintf_r+0x210>)
 802d346:	f7d2 ffd3 	bl	80002f0 <memchr>
 802d34a:	9b04      	ldr	r3, [sp, #16]
 802d34c:	bb78      	cbnz	r0, 802d3ae <_vfiprintf_r+0xfe>
 802d34e:	06d9      	lsls	r1, r3, #27
 802d350:	bf44      	itt	mi
 802d352:	2220      	movmi	r2, #32
 802d354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802d358:	071a      	lsls	r2, r3, #28
 802d35a:	bf44      	itt	mi
 802d35c:	222b      	movmi	r2, #43	; 0x2b
 802d35e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802d362:	782a      	ldrb	r2, [r5, #0]
 802d364:	2a2a      	cmp	r2, #42	; 0x2a
 802d366:	d02a      	beq.n	802d3be <_vfiprintf_r+0x10e>
 802d368:	9a07      	ldr	r2, [sp, #28]
 802d36a:	46a8      	mov	r8, r5
 802d36c:	2000      	movs	r0, #0
 802d36e:	250a      	movs	r5, #10
 802d370:	4641      	mov	r1, r8
 802d372:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d376:	3b30      	subs	r3, #48	; 0x30
 802d378:	2b09      	cmp	r3, #9
 802d37a:	d969      	bls.n	802d450 <_vfiprintf_r+0x1a0>
 802d37c:	b360      	cbz	r0, 802d3d8 <_vfiprintf_r+0x128>
 802d37e:	e024      	b.n	802d3ca <_vfiprintf_r+0x11a>
 802d380:	4b50      	ldr	r3, [pc, #320]	; (802d4c4 <_vfiprintf_r+0x214>)
 802d382:	429c      	cmp	r4, r3
 802d384:	d101      	bne.n	802d38a <_vfiprintf_r+0xda>
 802d386:	68b4      	ldr	r4, [r6, #8]
 802d388:	e7a2      	b.n	802d2d0 <_vfiprintf_r+0x20>
 802d38a:	4b4f      	ldr	r3, [pc, #316]	; (802d4c8 <_vfiprintf_r+0x218>)
 802d38c:	429c      	cmp	r4, r3
 802d38e:	bf08      	it	eq
 802d390:	68f4      	ldreq	r4, [r6, #12]
 802d392:	e79d      	b.n	802d2d0 <_vfiprintf_r+0x20>
 802d394:	4621      	mov	r1, r4
 802d396:	4630      	mov	r0, r6
 802d398:	f000 fb94 	bl	802dac4 <__swsetup_r>
 802d39c:	2800      	cmp	r0, #0
 802d39e:	d09d      	beq.n	802d2dc <_vfiprintf_r+0x2c>
 802d3a0:	f04f 30ff 	mov.w	r0, #4294967295
 802d3a4:	b01d      	add	sp, #116	; 0x74
 802d3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d3aa:	46a8      	mov	r8, r5
 802d3ac:	e7a2      	b.n	802d2f4 <_vfiprintf_r+0x44>
 802d3ae:	4a44      	ldr	r2, [pc, #272]	; (802d4c0 <_vfiprintf_r+0x210>)
 802d3b0:	1a80      	subs	r0, r0, r2
 802d3b2:	fa0b f000 	lsl.w	r0, fp, r0
 802d3b6:	4318      	orrs	r0, r3
 802d3b8:	9004      	str	r0, [sp, #16]
 802d3ba:	4645      	mov	r5, r8
 802d3bc:	e7be      	b.n	802d33c <_vfiprintf_r+0x8c>
 802d3be:	9a03      	ldr	r2, [sp, #12]
 802d3c0:	1d11      	adds	r1, r2, #4
 802d3c2:	6812      	ldr	r2, [r2, #0]
 802d3c4:	9103      	str	r1, [sp, #12]
 802d3c6:	2a00      	cmp	r2, #0
 802d3c8:	db01      	blt.n	802d3ce <_vfiprintf_r+0x11e>
 802d3ca:	9207      	str	r2, [sp, #28]
 802d3cc:	e004      	b.n	802d3d8 <_vfiprintf_r+0x128>
 802d3ce:	4252      	negs	r2, r2
 802d3d0:	f043 0302 	orr.w	r3, r3, #2
 802d3d4:	9207      	str	r2, [sp, #28]
 802d3d6:	9304      	str	r3, [sp, #16]
 802d3d8:	f898 3000 	ldrb.w	r3, [r8]
 802d3dc:	2b2e      	cmp	r3, #46	; 0x2e
 802d3de:	d10e      	bne.n	802d3fe <_vfiprintf_r+0x14e>
 802d3e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 802d3e4:	2b2a      	cmp	r3, #42	; 0x2a
 802d3e6:	d138      	bne.n	802d45a <_vfiprintf_r+0x1aa>
 802d3e8:	9b03      	ldr	r3, [sp, #12]
 802d3ea:	1d1a      	adds	r2, r3, #4
 802d3ec:	681b      	ldr	r3, [r3, #0]
 802d3ee:	9203      	str	r2, [sp, #12]
 802d3f0:	2b00      	cmp	r3, #0
 802d3f2:	bfb8      	it	lt
 802d3f4:	f04f 33ff 	movlt.w	r3, #4294967295
 802d3f8:	f108 0802 	add.w	r8, r8, #2
 802d3fc:	9305      	str	r3, [sp, #20]
 802d3fe:	4d33      	ldr	r5, [pc, #204]	; (802d4cc <_vfiprintf_r+0x21c>)
 802d400:	f898 1000 	ldrb.w	r1, [r8]
 802d404:	2203      	movs	r2, #3
 802d406:	4628      	mov	r0, r5
 802d408:	f7d2 ff72 	bl	80002f0 <memchr>
 802d40c:	b140      	cbz	r0, 802d420 <_vfiprintf_r+0x170>
 802d40e:	2340      	movs	r3, #64	; 0x40
 802d410:	1b40      	subs	r0, r0, r5
 802d412:	fa03 f000 	lsl.w	r0, r3, r0
 802d416:	9b04      	ldr	r3, [sp, #16]
 802d418:	4303      	orrs	r3, r0
 802d41a:	f108 0801 	add.w	r8, r8, #1
 802d41e:	9304      	str	r3, [sp, #16]
 802d420:	f898 1000 	ldrb.w	r1, [r8]
 802d424:	482a      	ldr	r0, [pc, #168]	; (802d4d0 <_vfiprintf_r+0x220>)
 802d426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d42a:	2206      	movs	r2, #6
 802d42c:	f108 0701 	add.w	r7, r8, #1
 802d430:	f7d2 ff5e 	bl	80002f0 <memchr>
 802d434:	2800      	cmp	r0, #0
 802d436:	d037      	beq.n	802d4a8 <_vfiprintf_r+0x1f8>
 802d438:	4b26      	ldr	r3, [pc, #152]	; (802d4d4 <_vfiprintf_r+0x224>)
 802d43a:	bb1b      	cbnz	r3, 802d484 <_vfiprintf_r+0x1d4>
 802d43c:	9b03      	ldr	r3, [sp, #12]
 802d43e:	3307      	adds	r3, #7
 802d440:	f023 0307 	bic.w	r3, r3, #7
 802d444:	3308      	adds	r3, #8
 802d446:	9303      	str	r3, [sp, #12]
 802d448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d44a:	444b      	add	r3, r9
 802d44c:	9309      	str	r3, [sp, #36]	; 0x24
 802d44e:	e750      	b.n	802d2f2 <_vfiprintf_r+0x42>
 802d450:	fb05 3202 	mla	r2, r5, r2, r3
 802d454:	2001      	movs	r0, #1
 802d456:	4688      	mov	r8, r1
 802d458:	e78a      	b.n	802d370 <_vfiprintf_r+0xc0>
 802d45a:	2300      	movs	r3, #0
 802d45c:	f108 0801 	add.w	r8, r8, #1
 802d460:	9305      	str	r3, [sp, #20]
 802d462:	4619      	mov	r1, r3
 802d464:	250a      	movs	r5, #10
 802d466:	4640      	mov	r0, r8
 802d468:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d46c:	3a30      	subs	r2, #48	; 0x30
 802d46e:	2a09      	cmp	r2, #9
 802d470:	d903      	bls.n	802d47a <_vfiprintf_r+0x1ca>
 802d472:	2b00      	cmp	r3, #0
 802d474:	d0c3      	beq.n	802d3fe <_vfiprintf_r+0x14e>
 802d476:	9105      	str	r1, [sp, #20]
 802d478:	e7c1      	b.n	802d3fe <_vfiprintf_r+0x14e>
 802d47a:	fb05 2101 	mla	r1, r5, r1, r2
 802d47e:	2301      	movs	r3, #1
 802d480:	4680      	mov	r8, r0
 802d482:	e7f0      	b.n	802d466 <_vfiprintf_r+0x1b6>
 802d484:	ab03      	add	r3, sp, #12
 802d486:	9300      	str	r3, [sp, #0]
 802d488:	4622      	mov	r2, r4
 802d48a:	4b13      	ldr	r3, [pc, #76]	; (802d4d8 <_vfiprintf_r+0x228>)
 802d48c:	a904      	add	r1, sp, #16
 802d48e:	4630      	mov	r0, r6
 802d490:	f3af 8000 	nop.w
 802d494:	f1b0 3fff 	cmp.w	r0, #4294967295
 802d498:	4681      	mov	r9, r0
 802d49a:	d1d5      	bne.n	802d448 <_vfiprintf_r+0x198>
 802d49c:	89a3      	ldrh	r3, [r4, #12]
 802d49e:	065b      	lsls	r3, r3, #25
 802d4a0:	f53f af7e 	bmi.w	802d3a0 <_vfiprintf_r+0xf0>
 802d4a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d4a6:	e77d      	b.n	802d3a4 <_vfiprintf_r+0xf4>
 802d4a8:	ab03      	add	r3, sp, #12
 802d4aa:	9300      	str	r3, [sp, #0]
 802d4ac:	4622      	mov	r2, r4
 802d4ae:	4b0a      	ldr	r3, [pc, #40]	; (802d4d8 <_vfiprintf_r+0x228>)
 802d4b0:	a904      	add	r1, sp, #16
 802d4b2:	4630      	mov	r0, r6
 802d4b4:	f000 f888 	bl	802d5c8 <_printf_i>
 802d4b8:	e7ec      	b.n	802d494 <_vfiprintf_r+0x1e4>
 802d4ba:	bf00      	nop
 802d4bc:	0802f7b4 	.word	0x0802f7b4
 802d4c0:	0802f760 	.word	0x0802f760
 802d4c4:	0802f7d4 	.word	0x0802f7d4
 802d4c8:	0802f794 	.word	0x0802f794
 802d4cc:	0802f766 	.word	0x0802f766
 802d4d0:	0802f76a 	.word	0x0802f76a
 802d4d4:	00000000 	.word	0x00000000
 802d4d8:	0802d28d 	.word	0x0802d28d

0802d4dc <_printf_common>:
 802d4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d4e0:	4691      	mov	r9, r2
 802d4e2:	461f      	mov	r7, r3
 802d4e4:	688a      	ldr	r2, [r1, #8]
 802d4e6:	690b      	ldr	r3, [r1, #16]
 802d4e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802d4ec:	4293      	cmp	r3, r2
 802d4ee:	bfb8      	it	lt
 802d4f0:	4613      	movlt	r3, r2
 802d4f2:	f8c9 3000 	str.w	r3, [r9]
 802d4f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802d4fa:	4606      	mov	r6, r0
 802d4fc:	460c      	mov	r4, r1
 802d4fe:	b112      	cbz	r2, 802d506 <_printf_common+0x2a>
 802d500:	3301      	adds	r3, #1
 802d502:	f8c9 3000 	str.w	r3, [r9]
 802d506:	6823      	ldr	r3, [r4, #0]
 802d508:	0699      	lsls	r1, r3, #26
 802d50a:	bf42      	ittt	mi
 802d50c:	f8d9 3000 	ldrmi.w	r3, [r9]
 802d510:	3302      	addmi	r3, #2
 802d512:	f8c9 3000 	strmi.w	r3, [r9]
 802d516:	6825      	ldr	r5, [r4, #0]
 802d518:	f015 0506 	ands.w	r5, r5, #6
 802d51c:	d107      	bne.n	802d52e <_printf_common+0x52>
 802d51e:	f104 0a19 	add.w	sl, r4, #25
 802d522:	68e3      	ldr	r3, [r4, #12]
 802d524:	f8d9 2000 	ldr.w	r2, [r9]
 802d528:	1a9b      	subs	r3, r3, r2
 802d52a:	42ab      	cmp	r3, r5
 802d52c:	dc28      	bgt.n	802d580 <_printf_common+0xa4>
 802d52e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802d532:	6822      	ldr	r2, [r4, #0]
 802d534:	3300      	adds	r3, #0
 802d536:	bf18      	it	ne
 802d538:	2301      	movne	r3, #1
 802d53a:	0692      	lsls	r2, r2, #26
 802d53c:	d42d      	bmi.n	802d59a <_printf_common+0xbe>
 802d53e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802d542:	4639      	mov	r1, r7
 802d544:	4630      	mov	r0, r6
 802d546:	47c0      	blx	r8
 802d548:	3001      	adds	r0, #1
 802d54a:	d020      	beq.n	802d58e <_printf_common+0xb2>
 802d54c:	6823      	ldr	r3, [r4, #0]
 802d54e:	68e5      	ldr	r5, [r4, #12]
 802d550:	f8d9 2000 	ldr.w	r2, [r9]
 802d554:	f003 0306 	and.w	r3, r3, #6
 802d558:	2b04      	cmp	r3, #4
 802d55a:	bf08      	it	eq
 802d55c:	1aad      	subeq	r5, r5, r2
 802d55e:	68a3      	ldr	r3, [r4, #8]
 802d560:	6922      	ldr	r2, [r4, #16]
 802d562:	bf0c      	ite	eq
 802d564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d568:	2500      	movne	r5, #0
 802d56a:	4293      	cmp	r3, r2
 802d56c:	bfc4      	itt	gt
 802d56e:	1a9b      	subgt	r3, r3, r2
 802d570:	18ed      	addgt	r5, r5, r3
 802d572:	f04f 0900 	mov.w	r9, #0
 802d576:	341a      	adds	r4, #26
 802d578:	454d      	cmp	r5, r9
 802d57a:	d11a      	bne.n	802d5b2 <_printf_common+0xd6>
 802d57c:	2000      	movs	r0, #0
 802d57e:	e008      	b.n	802d592 <_printf_common+0xb6>
 802d580:	2301      	movs	r3, #1
 802d582:	4652      	mov	r2, sl
 802d584:	4639      	mov	r1, r7
 802d586:	4630      	mov	r0, r6
 802d588:	47c0      	blx	r8
 802d58a:	3001      	adds	r0, #1
 802d58c:	d103      	bne.n	802d596 <_printf_common+0xba>
 802d58e:	f04f 30ff 	mov.w	r0, #4294967295
 802d592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d596:	3501      	adds	r5, #1
 802d598:	e7c3      	b.n	802d522 <_printf_common+0x46>
 802d59a:	18e1      	adds	r1, r4, r3
 802d59c:	1c5a      	adds	r2, r3, #1
 802d59e:	2030      	movs	r0, #48	; 0x30
 802d5a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802d5a4:	4422      	add	r2, r4
 802d5a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802d5aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802d5ae:	3302      	adds	r3, #2
 802d5b0:	e7c5      	b.n	802d53e <_printf_common+0x62>
 802d5b2:	2301      	movs	r3, #1
 802d5b4:	4622      	mov	r2, r4
 802d5b6:	4639      	mov	r1, r7
 802d5b8:	4630      	mov	r0, r6
 802d5ba:	47c0      	blx	r8
 802d5bc:	3001      	adds	r0, #1
 802d5be:	d0e6      	beq.n	802d58e <_printf_common+0xb2>
 802d5c0:	f109 0901 	add.w	r9, r9, #1
 802d5c4:	e7d8      	b.n	802d578 <_printf_common+0x9c>
	...

0802d5c8 <_printf_i>:
 802d5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802d5cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802d5d0:	460c      	mov	r4, r1
 802d5d2:	7e09      	ldrb	r1, [r1, #24]
 802d5d4:	b085      	sub	sp, #20
 802d5d6:	296e      	cmp	r1, #110	; 0x6e
 802d5d8:	4617      	mov	r7, r2
 802d5da:	4606      	mov	r6, r0
 802d5dc:	4698      	mov	r8, r3
 802d5de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802d5e0:	f000 80b3 	beq.w	802d74a <_printf_i+0x182>
 802d5e4:	d822      	bhi.n	802d62c <_printf_i+0x64>
 802d5e6:	2963      	cmp	r1, #99	; 0x63
 802d5e8:	d036      	beq.n	802d658 <_printf_i+0x90>
 802d5ea:	d80a      	bhi.n	802d602 <_printf_i+0x3a>
 802d5ec:	2900      	cmp	r1, #0
 802d5ee:	f000 80b9 	beq.w	802d764 <_printf_i+0x19c>
 802d5f2:	2958      	cmp	r1, #88	; 0x58
 802d5f4:	f000 8083 	beq.w	802d6fe <_printf_i+0x136>
 802d5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d5fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802d600:	e032      	b.n	802d668 <_printf_i+0xa0>
 802d602:	2964      	cmp	r1, #100	; 0x64
 802d604:	d001      	beq.n	802d60a <_printf_i+0x42>
 802d606:	2969      	cmp	r1, #105	; 0x69
 802d608:	d1f6      	bne.n	802d5f8 <_printf_i+0x30>
 802d60a:	6820      	ldr	r0, [r4, #0]
 802d60c:	6813      	ldr	r3, [r2, #0]
 802d60e:	0605      	lsls	r5, r0, #24
 802d610:	f103 0104 	add.w	r1, r3, #4
 802d614:	d52a      	bpl.n	802d66c <_printf_i+0xa4>
 802d616:	681b      	ldr	r3, [r3, #0]
 802d618:	6011      	str	r1, [r2, #0]
 802d61a:	2b00      	cmp	r3, #0
 802d61c:	da03      	bge.n	802d626 <_printf_i+0x5e>
 802d61e:	222d      	movs	r2, #45	; 0x2d
 802d620:	425b      	negs	r3, r3
 802d622:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802d626:	486f      	ldr	r0, [pc, #444]	; (802d7e4 <_printf_i+0x21c>)
 802d628:	220a      	movs	r2, #10
 802d62a:	e039      	b.n	802d6a0 <_printf_i+0xd8>
 802d62c:	2973      	cmp	r1, #115	; 0x73
 802d62e:	f000 809d 	beq.w	802d76c <_printf_i+0x1a4>
 802d632:	d808      	bhi.n	802d646 <_printf_i+0x7e>
 802d634:	296f      	cmp	r1, #111	; 0x6f
 802d636:	d020      	beq.n	802d67a <_printf_i+0xb2>
 802d638:	2970      	cmp	r1, #112	; 0x70
 802d63a:	d1dd      	bne.n	802d5f8 <_printf_i+0x30>
 802d63c:	6823      	ldr	r3, [r4, #0]
 802d63e:	f043 0320 	orr.w	r3, r3, #32
 802d642:	6023      	str	r3, [r4, #0]
 802d644:	e003      	b.n	802d64e <_printf_i+0x86>
 802d646:	2975      	cmp	r1, #117	; 0x75
 802d648:	d017      	beq.n	802d67a <_printf_i+0xb2>
 802d64a:	2978      	cmp	r1, #120	; 0x78
 802d64c:	d1d4      	bne.n	802d5f8 <_printf_i+0x30>
 802d64e:	2378      	movs	r3, #120	; 0x78
 802d650:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802d654:	4864      	ldr	r0, [pc, #400]	; (802d7e8 <_printf_i+0x220>)
 802d656:	e055      	b.n	802d704 <_printf_i+0x13c>
 802d658:	6813      	ldr	r3, [r2, #0]
 802d65a:	1d19      	adds	r1, r3, #4
 802d65c:	681b      	ldr	r3, [r3, #0]
 802d65e:	6011      	str	r1, [r2, #0]
 802d660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802d668:	2301      	movs	r3, #1
 802d66a:	e08c      	b.n	802d786 <_printf_i+0x1be>
 802d66c:	681b      	ldr	r3, [r3, #0]
 802d66e:	6011      	str	r1, [r2, #0]
 802d670:	f010 0f40 	tst.w	r0, #64	; 0x40
 802d674:	bf18      	it	ne
 802d676:	b21b      	sxthne	r3, r3
 802d678:	e7cf      	b.n	802d61a <_printf_i+0x52>
 802d67a:	6813      	ldr	r3, [r2, #0]
 802d67c:	6825      	ldr	r5, [r4, #0]
 802d67e:	1d18      	adds	r0, r3, #4
 802d680:	6010      	str	r0, [r2, #0]
 802d682:	0628      	lsls	r0, r5, #24
 802d684:	d501      	bpl.n	802d68a <_printf_i+0xc2>
 802d686:	681b      	ldr	r3, [r3, #0]
 802d688:	e002      	b.n	802d690 <_printf_i+0xc8>
 802d68a:	0668      	lsls	r0, r5, #25
 802d68c:	d5fb      	bpl.n	802d686 <_printf_i+0xbe>
 802d68e:	881b      	ldrh	r3, [r3, #0]
 802d690:	4854      	ldr	r0, [pc, #336]	; (802d7e4 <_printf_i+0x21c>)
 802d692:	296f      	cmp	r1, #111	; 0x6f
 802d694:	bf14      	ite	ne
 802d696:	220a      	movne	r2, #10
 802d698:	2208      	moveq	r2, #8
 802d69a:	2100      	movs	r1, #0
 802d69c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802d6a0:	6865      	ldr	r5, [r4, #4]
 802d6a2:	60a5      	str	r5, [r4, #8]
 802d6a4:	2d00      	cmp	r5, #0
 802d6a6:	f2c0 8095 	blt.w	802d7d4 <_printf_i+0x20c>
 802d6aa:	6821      	ldr	r1, [r4, #0]
 802d6ac:	f021 0104 	bic.w	r1, r1, #4
 802d6b0:	6021      	str	r1, [r4, #0]
 802d6b2:	2b00      	cmp	r3, #0
 802d6b4:	d13d      	bne.n	802d732 <_printf_i+0x16a>
 802d6b6:	2d00      	cmp	r5, #0
 802d6b8:	f040 808e 	bne.w	802d7d8 <_printf_i+0x210>
 802d6bc:	4665      	mov	r5, ip
 802d6be:	2a08      	cmp	r2, #8
 802d6c0:	d10b      	bne.n	802d6da <_printf_i+0x112>
 802d6c2:	6823      	ldr	r3, [r4, #0]
 802d6c4:	07db      	lsls	r3, r3, #31
 802d6c6:	d508      	bpl.n	802d6da <_printf_i+0x112>
 802d6c8:	6923      	ldr	r3, [r4, #16]
 802d6ca:	6862      	ldr	r2, [r4, #4]
 802d6cc:	429a      	cmp	r2, r3
 802d6ce:	bfde      	ittt	le
 802d6d0:	2330      	movle	r3, #48	; 0x30
 802d6d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 802d6d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 802d6da:	ebac 0305 	sub.w	r3, ip, r5
 802d6de:	6123      	str	r3, [r4, #16]
 802d6e0:	f8cd 8000 	str.w	r8, [sp]
 802d6e4:	463b      	mov	r3, r7
 802d6e6:	aa03      	add	r2, sp, #12
 802d6e8:	4621      	mov	r1, r4
 802d6ea:	4630      	mov	r0, r6
 802d6ec:	f7ff fef6 	bl	802d4dc <_printf_common>
 802d6f0:	3001      	adds	r0, #1
 802d6f2:	d14d      	bne.n	802d790 <_printf_i+0x1c8>
 802d6f4:	f04f 30ff 	mov.w	r0, #4294967295
 802d6f8:	b005      	add	sp, #20
 802d6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d6fe:	4839      	ldr	r0, [pc, #228]	; (802d7e4 <_printf_i+0x21c>)
 802d700:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802d704:	6813      	ldr	r3, [r2, #0]
 802d706:	6821      	ldr	r1, [r4, #0]
 802d708:	1d1d      	adds	r5, r3, #4
 802d70a:	681b      	ldr	r3, [r3, #0]
 802d70c:	6015      	str	r5, [r2, #0]
 802d70e:	060a      	lsls	r2, r1, #24
 802d710:	d50b      	bpl.n	802d72a <_printf_i+0x162>
 802d712:	07ca      	lsls	r2, r1, #31
 802d714:	bf44      	itt	mi
 802d716:	f041 0120 	orrmi.w	r1, r1, #32
 802d71a:	6021      	strmi	r1, [r4, #0]
 802d71c:	b91b      	cbnz	r3, 802d726 <_printf_i+0x15e>
 802d71e:	6822      	ldr	r2, [r4, #0]
 802d720:	f022 0220 	bic.w	r2, r2, #32
 802d724:	6022      	str	r2, [r4, #0]
 802d726:	2210      	movs	r2, #16
 802d728:	e7b7      	b.n	802d69a <_printf_i+0xd2>
 802d72a:	064d      	lsls	r5, r1, #25
 802d72c:	bf48      	it	mi
 802d72e:	b29b      	uxthmi	r3, r3
 802d730:	e7ef      	b.n	802d712 <_printf_i+0x14a>
 802d732:	4665      	mov	r5, ip
 802d734:	fbb3 f1f2 	udiv	r1, r3, r2
 802d738:	fb02 3311 	mls	r3, r2, r1, r3
 802d73c:	5cc3      	ldrb	r3, [r0, r3]
 802d73e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802d742:	460b      	mov	r3, r1
 802d744:	2900      	cmp	r1, #0
 802d746:	d1f5      	bne.n	802d734 <_printf_i+0x16c>
 802d748:	e7b9      	b.n	802d6be <_printf_i+0xf6>
 802d74a:	6813      	ldr	r3, [r2, #0]
 802d74c:	6825      	ldr	r5, [r4, #0]
 802d74e:	6961      	ldr	r1, [r4, #20]
 802d750:	1d18      	adds	r0, r3, #4
 802d752:	6010      	str	r0, [r2, #0]
 802d754:	0628      	lsls	r0, r5, #24
 802d756:	681b      	ldr	r3, [r3, #0]
 802d758:	d501      	bpl.n	802d75e <_printf_i+0x196>
 802d75a:	6019      	str	r1, [r3, #0]
 802d75c:	e002      	b.n	802d764 <_printf_i+0x19c>
 802d75e:	066a      	lsls	r2, r5, #25
 802d760:	d5fb      	bpl.n	802d75a <_printf_i+0x192>
 802d762:	8019      	strh	r1, [r3, #0]
 802d764:	2300      	movs	r3, #0
 802d766:	6123      	str	r3, [r4, #16]
 802d768:	4665      	mov	r5, ip
 802d76a:	e7b9      	b.n	802d6e0 <_printf_i+0x118>
 802d76c:	6813      	ldr	r3, [r2, #0]
 802d76e:	1d19      	adds	r1, r3, #4
 802d770:	6011      	str	r1, [r2, #0]
 802d772:	681d      	ldr	r5, [r3, #0]
 802d774:	6862      	ldr	r2, [r4, #4]
 802d776:	2100      	movs	r1, #0
 802d778:	4628      	mov	r0, r5
 802d77a:	f7d2 fdb9 	bl	80002f0 <memchr>
 802d77e:	b108      	cbz	r0, 802d784 <_printf_i+0x1bc>
 802d780:	1b40      	subs	r0, r0, r5
 802d782:	6060      	str	r0, [r4, #4]
 802d784:	6863      	ldr	r3, [r4, #4]
 802d786:	6123      	str	r3, [r4, #16]
 802d788:	2300      	movs	r3, #0
 802d78a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d78e:	e7a7      	b.n	802d6e0 <_printf_i+0x118>
 802d790:	6923      	ldr	r3, [r4, #16]
 802d792:	462a      	mov	r2, r5
 802d794:	4639      	mov	r1, r7
 802d796:	4630      	mov	r0, r6
 802d798:	47c0      	blx	r8
 802d79a:	3001      	adds	r0, #1
 802d79c:	d0aa      	beq.n	802d6f4 <_printf_i+0x12c>
 802d79e:	6823      	ldr	r3, [r4, #0]
 802d7a0:	079b      	lsls	r3, r3, #30
 802d7a2:	d413      	bmi.n	802d7cc <_printf_i+0x204>
 802d7a4:	68e0      	ldr	r0, [r4, #12]
 802d7a6:	9b03      	ldr	r3, [sp, #12]
 802d7a8:	4298      	cmp	r0, r3
 802d7aa:	bfb8      	it	lt
 802d7ac:	4618      	movlt	r0, r3
 802d7ae:	e7a3      	b.n	802d6f8 <_printf_i+0x130>
 802d7b0:	2301      	movs	r3, #1
 802d7b2:	464a      	mov	r2, r9
 802d7b4:	4639      	mov	r1, r7
 802d7b6:	4630      	mov	r0, r6
 802d7b8:	47c0      	blx	r8
 802d7ba:	3001      	adds	r0, #1
 802d7bc:	d09a      	beq.n	802d6f4 <_printf_i+0x12c>
 802d7be:	3501      	adds	r5, #1
 802d7c0:	68e3      	ldr	r3, [r4, #12]
 802d7c2:	9a03      	ldr	r2, [sp, #12]
 802d7c4:	1a9b      	subs	r3, r3, r2
 802d7c6:	42ab      	cmp	r3, r5
 802d7c8:	dcf2      	bgt.n	802d7b0 <_printf_i+0x1e8>
 802d7ca:	e7eb      	b.n	802d7a4 <_printf_i+0x1dc>
 802d7cc:	2500      	movs	r5, #0
 802d7ce:	f104 0919 	add.w	r9, r4, #25
 802d7d2:	e7f5      	b.n	802d7c0 <_printf_i+0x1f8>
 802d7d4:	2b00      	cmp	r3, #0
 802d7d6:	d1ac      	bne.n	802d732 <_printf_i+0x16a>
 802d7d8:	7803      	ldrb	r3, [r0, #0]
 802d7da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802d7de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d7e2:	e76c      	b.n	802d6be <_printf_i+0xf6>
 802d7e4:	0802f771 	.word	0x0802f771
 802d7e8:	0802f782 	.word	0x0802f782

0802d7ec <_puts_r>:
 802d7ec:	b570      	push	{r4, r5, r6, lr}
 802d7ee:	460e      	mov	r6, r1
 802d7f0:	4605      	mov	r5, r0
 802d7f2:	b118      	cbz	r0, 802d7fc <_puts_r+0x10>
 802d7f4:	6983      	ldr	r3, [r0, #24]
 802d7f6:	b90b      	cbnz	r3, 802d7fc <_puts_r+0x10>
 802d7f8:	f000 faca 	bl	802dd90 <__sinit>
 802d7fc:	69ab      	ldr	r3, [r5, #24]
 802d7fe:	68ac      	ldr	r4, [r5, #8]
 802d800:	b913      	cbnz	r3, 802d808 <_puts_r+0x1c>
 802d802:	4628      	mov	r0, r5
 802d804:	f000 fac4 	bl	802dd90 <__sinit>
 802d808:	4b23      	ldr	r3, [pc, #140]	; (802d898 <_puts_r+0xac>)
 802d80a:	429c      	cmp	r4, r3
 802d80c:	d117      	bne.n	802d83e <_puts_r+0x52>
 802d80e:	686c      	ldr	r4, [r5, #4]
 802d810:	89a3      	ldrh	r3, [r4, #12]
 802d812:	071b      	lsls	r3, r3, #28
 802d814:	d51d      	bpl.n	802d852 <_puts_r+0x66>
 802d816:	6923      	ldr	r3, [r4, #16]
 802d818:	b1db      	cbz	r3, 802d852 <_puts_r+0x66>
 802d81a:	3e01      	subs	r6, #1
 802d81c:	68a3      	ldr	r3, [r4, #8]
 802d81e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802d822:	3b01      	subs	r3, #1
 802d824:	60a3      	str	r3, [r4, #8]
 802d826:	b9e9      	cbnz	r1, 802d864 <_puts_r+0x78>
 802d828:	2b00      	cmp	r3, #0
 802d82a:	da2e      	bge.n	802d88a <_puts_r+0x9e>
 802d82c:	4622      	mov	r2, r4
 802d82e:	210a      	movs	r1, #10
 802d830:	4628      	mov	r0, r5
 802d832:	f000 f8f5 	bl	802da20 <__swbuf_r>
 802d836:	3001      	adds	r0, #1
 802d838:	d011      	beq.n	802d85e <_puts_r+0x72>
 802d83a:	200a      	movs	r0, #10
 802d83c:	e011      	b.n	802d862 <_puts_r+0x76>
 802d83e:	4b17      	ldr	r3, [pc, #92]	; (802d89c <_puts_r+0xb0>)
 802d840:	429c      	cmp	r4, r3
 802d842:	d101      	bne.n	802d848 <_puts_r+0x5c>
 802d844:	68ac      	ldr	r4, [r5, #8]
 802d846:	e7e3      	b.n	802d810 <_puts_r+0x24>
 802d848:	4b15      	ldr	r3, [pc, #84]	; (802d8a0 <_puts_r+0xb4>)
 802d84a:	429c      	cmp	r4, r3
 802d84c:	bf08      	it	eq
 802d84e:	68ec      	ldreq	r4, [r5, #12]
 802d850:	e7de      	b.n	802d810 <_puts_r+0x24>
 802d852:	4621      	mov	r1, r4
 802d854:	4628      	mov	r0, r5
 802d856:	f000 f935 	bl	802dac4 <__swsetup_r>
 802d85a:	2800      	cmp	r0, #0
 802d85c:	d0dd      	beq.n	802d81a <_puts_r+0x2e>
 802d85e:	f04f 30ff 	mov.w	r0, #4294967295
 802d862:	bd70      	pop	{r4, r5, r6, pc}
 802d864:	2b00      	cmp	r3, #0
 802d866:	da04      	bge.n	802d872 <_puts_r+0x86>
 802d868:	69a2      	ldr	r2, [r4, #24]
 802d86a:	429a      	cmp	r2, r3
 802d86c:	dc06      	bgt.n	802d87c <_puts_r+0x90>
 802d86e:	290a      	cmp	r1, #10
 802d870:	d004      	beq.n	802d87c <_puts_r+0x90>
 802d872:	6823      	ldr	r3, [r4, #0]
 802d874:	1c5a      	adds	r2, r3, #1
 802d876:	6022      	str	r2, [r4, #0]
 802d878:	7019      	strb	r1, [r3, #0]
 802d87a:	e7cf      	b.n	802d81c <_puts_r+0x30>
 802d87c:	4622      	mov	r2, r4
 802d87e:	4628      	mov	r0, r5
 802d880:	f000 f8ce 	bl	802da20 <__swbuf_r>
 802d884:	3001      	adds	r0, #1
 802d886:	d1c9      	bne.n	802d81c <_puts_r+0x30>
 802d888:	e7e9      	b.n	802d85e <_puts_r+0x72>
 802d88a:	6823      	ldr	r3, [r4, #0]
 802d88c:	200a      	movs	r0, #10
 802d88e:	1c5a      	adds	r2, r3, #1
 802d890:	6022      	str	r2, [r4, #0]
 802d892:	7018      	strb	r0, [r3, #0]
 802d894:	e7e5      	b.n	802d862 <_puts_r+0x76>
 802d896:	bf00      	nop
 802d898:	0802f7b4 	.word	0x0802f7b4
 802d89c:	0802f7d4 	.word	0x0802f7d4
 802d8a0:	0802f794 	.word	0x0802f794

0802d8a4 <puts>:
 802d8a4:	4b02      	ldr	r3, [pc, #8]	; (802d8b0 <puts+0xc>)
 802d8a6:	4601      	mov	r1, r0
 802d8a8:	6818      	ldr	r0, [r3, #0]
 802d8aa:	f7ff bf9f 	b.w	802d7ec <_puts_r>
 802d8ae:	bf00      	nop
 802d8b0:	240006b0 	.word	0x240006b0

0802d8b4 <setvbuf>:
 802d8b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802d8b8:	461d      	mov	r5, r3
 802d8ba:	4b51      	ldr	r3, [pc, #324]	; (802da00 <setvbuf+0x14c>)
 802d8bc:	681e      	ldr	r6, [r3, #0]
 802d8be:	4604      	mov	r4, r0
 802d8c0:	460f      	mov	r7, r1
 802d8c2:	4690      	mov	r8, r2
 802d8c4:	b126      	cbz	r6, 802d8d0 <setvbuf+0x1c>
 802d8c6:	69b3      	ldr	r3, [r6, #24]
 802d8c8:	b913      	cbnz	r3, 802d8d0 <setvbuf+0x1c>
 802d8ca:	4630      	mov	r0, r6
 802d8cc:	f000 fa60 	bl	802dd90 <__sinit>
 802d8d0:	4b4c      	ldr	r3, [pc, #304]	; (802da04 <setvbuf+0x150>)
 802d8d2:	429c      	cmp	r4, r3
 802d8d4:	d152      	bne.n	802d97c <setvbuf+0xc8>
 802d8d6:	6874      	ldr	r4, [r6, #4]
 802d8d8:	f1b8 0f02 	cmp.w	r8, #2
 802d8dc:	d006      	beq.n	802d8ec <setvbuf+0x38>
 802d8de:	f1b8 0f01 	cmp.w	r8, #1
 802d8e2:	f200 8089 	bhi.w	802d9f8 <setvbuf+0x144>
 802d8e6:	2d00      	cmp	r5, #0
 802d8e8:	f2c0 8086 	blt.w	802d9f8 <setvbuf+0x144>
 802d8ec:	4621      	mov	r1, r4
 802d8ee:	4630      	mov	r0, r6
 802d8f0:	f000 f9e4 	bl	802dcbc <_fflush_r>
 802d8f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d8f6:	b141      	cbz	r1, 802d90a <setvbuf+0x56>
 802d8f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d8fc:	4299      	cmp	r1, r3
 802d8fe:	d002      	beq.n	802d906 <setvbuf+0x52>
 802d900:	4630      	mov	r0, r6
 802d902:	f000 fb3b 	bl	802df7c <_free_r>
 802d906:	2300      	movs	r3, #0
 802d908:	6363      	str	r3, [r4, #52]	; 0x34
 802d90a:	2300      	movs	r3, #0
 802d90c:	61a3      	str	r3, [r4, #24]
 802d90e:	6063      	str	r3, [r4, #4]
 802d910:	89a3      	ldrh	r3, [r4, #12]
 802d912:	061b      	lsls	r3, r3, #24
 802d914:	d503      	bpl.n	802d91e <setvbuf+0x6a>
 802d916:	6921      	ldr	r1, [r4, #16]
 802d918:	4630      	mov	r0, r6
 802d91a:	f000 fb2f 	bl	802df7c <_free_r>
 802d91e:	89a3      	ldrh	r3, [r4, #12]
 802d920:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 802d924:	f023 0303 	bic.w	r3, r3, #3
 802d928:	f1b8 0f02 	cmp.w	r8, #2
 802d92c:	81a3      	strh	r3, [r4, #12]
 802d92e:	d05d      	beq.n	802d9ec <setvbuf+0x138>
 802d930:	ab01      	add	r3, sp, #4
 802d932:	466a      	mov	r2, sp
 802d934:	4621      	mov	r1, r4
 802d936:	4630      	mov	r0, r6
 802d938:	f000 fab4 	bl	802dea4 <__swhatbuf_r>
 802d93c:	89a3      	ldrh	r3, [r4, #12]
 802d93e:	4318      	orrs	r0, r3
 802d940:	81a0      	strh	r0, [r4, #12]
 802d942:	bb2d      	cbnz	r5, 802d990 <setvbuf+0xdc>
 802d944:	9d00      	ldr	r5, [sp, #0]
 802d946:	4628      	mov	r0, r5
 802d948:	f000 fb10 	bl	802df6c <malloc>
 802d94c:	4607      	mov	r7, r0
 802d94e:	2800      	cmp	r0, #0
 802d950:	d14e      	bne.n	802d9f0 <setvbuf+0x13c>
 802d952:	f8dd 9000 	ldr.w	r9, [sp]
 802d956:	45a9      	cmp	r9, r5
 802d958:	d13c      	bne.n	802d9d4 <setvbuf+0x120>
 802d95a:	f04f 30ff 	mov.w	r0, #4294967295
 802d95e:	89a3      	ldrh	r3, [r4, #12]
 802d960:	f043 0302 	orr.w	r3, r3, #2
 802d964:	81a3      	strh	r3, [r4, #12]
 802d966:	2300      	movs	r3, #0
 802d968:	60a3      	str	r3, [r4, #8]
 802d96a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802d96e:	6023      	str	r3, [r4, #0]
 802d970:	6123      	str	r3, [r4, #16]
 802d972:	2301      	movs	r3, #1
 802d974:	6163      	str	r3, [r4, #20]
 802d976:	b003      	add	sp, #12
 802d978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d97c:	4b22      	ldr	r3, [pc, #136]	; (802da08 <setvbuf+0x154>)
 802d97e:	429c      	cmp	r4, r3
 802d980:	d101      	bne.n	802d986 <setvbuf+0xd2>
 802d982:	68b4      	ldr	r4, [r6, #8]
 802d984:	e7a8      	b.n	802d8d8 <setvbuf+0x24>
 802d986:	4b21      	ldr	r3, [pc, #132]	; (802da0c <setvbuf+0x158>)
 802d988:	429c      	cmp	r4, r3
 802d98a:	bf08      	it	eq
 802d98c:	68f4      	ldreq	r4, [r6, #12]
 802d98e:	e7a3      	b.n	802d8d8 <setvbuf+0x24>
 802d990:	2f00      	cmp	r7, #0
 802d992:	d0d8      	beq.n	802d946 <setvbuf+0x92>
 802d994:	69b3      	ldr	r3, [r6, #24]
 802d996:	b913      	cbnz	r3, 802d99e <setvbuf+0xea>
 802d998:	4630      	mov	r0, r6
 802d99a:	f000 f9f9 	bl	802dd90 <__sinit>
 802d99e:	f1b8 0f01 	cmp.w	r8, #1
 802d9a2:	bf08      	it	eq
 802d9a4:	89a3      	ldrheq	r3, [r4, #12]
 802d9a6:	6027      	str	r7, [r4, #0]
 802d9a8:	bf04      	itt	eq
 802d9aa:	f043 0301 	orreq.w	r3, r3, #1
 802d9ae:	81a3      	strheq	r3, [r4, #12]
 802d9b0:	89a3      	ldrh	r3, [r4, #12]
 802d9b2:	f013 0008 	ands.w	r0, r3, #8
 802d9b6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 802d9ba:	d01b      	beq.n	802d9f4 <setvbuf+0x140>
 802d9bc:	f013 0001 	ands.w	r0, r3, #1
 802d9c0:	bf18      	it	ne
 802d9c2:	426d      	negne	r5, r5
 802d9c4:	f04f 0300 	mov.w	r3, #0
 802d9c8:	bf1d      	ittte	ne
 802d9ca:	60a3      	strne	r3, [r4, #8]
 802d9cc:	61a5      	strne	r5, [r4, #24]
 802d9ce:	4618      	movne	r0, r3
 802d9d0:	60a5      	streq	r5, [r4, #8]
 802d9d2:	e7d0      	b.n	802d976 <setvbuf+0xc2>
 802d9d4:	4648      	mov	r0, r9
 802d9d6:	f000 fac9 	bl	802df6c <malloc>
 802d9da:	4607      	mov	r7, r0
 802d9dc:	2800      	cmp	r0, #0
 802d9de:	d0bc      	beq.n	802d95a <setvbuf+0xa6>
 802d9e0:	89a3      	ldrh	r3, [r4, #12]
 802d9e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d9e6:	81a3      	strh	r3, [r4, #12]
 802d9e8:	464d      	mov	r5, r9
 802d9ea:	e7d3      	b.n	802d994 <setvbuf+0xe0>
 802d9ec:	2000      	movs	r0, #0
 802d9ee:	e7b6      	b.n	802d95e <setvbuf+0xaa>
 802d9f0:	46a9      	mov	r9, r5
 802d9f2:	e7f5      	b.n	802d9e0 <setvbuf+0x12c>
 802d9f4:	60a0      	str	r0, [r4, #8]
 802d9f6:	e7be      	b.n	802d976 <setvbuf+0xc2>
 802d9f8:	f04f 30ff 	mov.w	r0, #4294967295
 802d9fc:	e7bb      	b.n	802d976 <setvbuf+0xc2>
 802d9fe:	bf00      	nop
 802da00:	240006b0 	.word	0x240006b0
 802da04:	0802f7b4 	.word	0x0802f7b4
 802da08:	0802f7d4 	.word	0x0802f7d4
 802da0c:	0802f794 	.word	0x0802f794

0802da10 <strcpy>:
 802da10:	4603      	mov	r3, r0
 802da12:	f811 2b01 	ldrb.w	r2, [r1], #1
 802da16:	f803 2b01 	strb.w	r2, [r3], #1
 802da1a:	2a00      	cmp	r2, #0
 802da1c:	d1f9      	bne.n	802da12 <strcpy+0x2>
 802da1e:	4770      	bx	lr

0802da20 <__swbuf_r>:
 802da20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802da22:	460e      	mov	r6, r1
 802da24:	4614      	mov	r4, r2
 802da26:	4605      	mov	r5, r0
 802da28:	b118      	cbz	r0, 802da32 <__swbuf_r+0x12>
 802da2a:	6983      	ldr	r3, [r0, #24]
 802da2c:	b90b      	cbnz	r3, 802da32 <__swbuf_r+0x12>
 802da2e:	f000 f9af 	bl	802dd90 <__sinit>
 802da32:	4b21      	ldr	r3, [pc, #132]	; (802dab8 <__swbuf_r+0x98>)
 802da34:	429c      	cmp	r4, r3
 802da36:	d12a      	bne.n	802da8e <__swbuf_r+0x6e>
 802da38:	686c      	ldr	r4, [r5, #4]
 802da3a:	69a3      	ldr	r3, [r4, #24]
 802da3c:	60a3      	str	r3, [r4, #8]
 802da3e:	89a3      	ldrh	r3, [r4, #12]
 802da40:	071a      	lsls	r2, r3, #28
 802da42:	d52e      	bpl.n	802daa2 <__swbuf_r+0x82>
 802da44:	6923      	ldr	r3, [r4, #16]
 802da46:	b363      	cbz	r3, 802daa2 <__swbuf_r+0x82>
 802da48:	6923      	ldr	r3, [r4, #16]
 802da4a:	6820      	ldr	r0, [r4, #0]
 802da4c:	1ac0      	subs	r0, r0, r3
 802da4e:	6963      	ldr	r3, [r4, #20]
 802da50:	b2f6      	uxtb	r6, r6
 802da52:	4283      	cmp	r3, r0
 802da54:	4637      	mov	r7, r6
 802da56:	dc04      	bgt.n	802da62 <__swbuf_r+0x42>
 802da58:	4621      	mov	r1, r4
 802da5a:	4628      	mov	r0, r5
 802da5c:	f000 f92e 	bl	802dcbc <_fflush_r>
 802da60:	bb28      	cbnz	r0, 802daae <__swbuf_r+0x8e>
 802da62:	68a3      	ldr	r3, [r4, #8]
 802da64:	3b01      	subs	r3, #1
 802da66:	60a3      	str	r3, [r4, #8]
 802da68:	6823      	ldr	r3, [r4, #0]
 802da6a:	1c5a      	adds	r2, r3, #1
 802da6c:	6022      	str	r2, [r4, #0]
 802da6e:	701e      	strb	r6, [r3, #0]
 802da70:	6963      	ldr	r3, [r4, #20]
 802da72:	3001      	adds	r0, #1
 802da74:	4283      	cmp	r3, r0
 802da76:	d004      	beq.n	802da82 <__swbuf_r+0x62>
 802da78:	89a3      	ldrh	r3, [r4, #12]
 802da7a:	07db      	lsls	r3, r3, #31
 802da7c:	d519      	bpl.n	802dab2 <__swbuf_r+0x92>
 802da7e:	2e0a      	cmp	r6, #10
 802da80:	d117      	bne.n	802dab2 <__swbuf_r+0x92>
 802da82:	4621      	mov	r1, r4
 802da84:	4628      	mov	r0, r5
 802da86:	f000 f919 	bl	802dcbc <_fflush_r>
 802da8a:	b190      	cbz	r0, 802dab2 <__swbuf_r+0x92>
 802da8c:	e00f      	b.n	802daae <__swbuf_r+0x8e>
 802da8e:	4b0b      	ldr	r3, [pc, #44]	; (802dabc <__swbuf_r+0x9c>)
 802da90:	429c      	cmp	r4, r3
 802da92:	d101      	bne.n	802da98 <__swbuf_r+0x78>
 802da94:	68ac      	ldr	r4, [r5, #8]
 802da96:	e7d0      	b.n	802da3a <__swbuf_r+0x1a>
 802da98:	4b09      	ldr	r3, [pc, #36]	; (802dac0 <__swbuf_r+0xa0>)
 802da9a:	429c      	cmp	r4, r3
 802da9c:	bf08      	it	eq
 802da9e:	68ec      	ldreq	r4, [r5, #12]
 802daa0:	e7cb      	b.n	802da3a <__swbuf_r+0x1a>
 802daa2:	4621      	mov	r1, r4
 802daa4:	4628      	mov	r0, r5
 802daa6:	f000 f80d 	bl	802dac4 <__swsetup_r>
 802daaa:	2800      	cmp	r0, #0
 802daac:	d0cc      	beq.n	802da48 <__swbuf_r+0x28>
 802daae:	f04f 37ff 	mov.w	r7, #4294967295
 802dab2:	4638      	mov	r0, r7
 802dab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802dab6:	bf00      	nop
 802dab8:	0802f7b4 	.word	0x0802f7b4
 802dabc:	0802f7d4 	.word	0x0802f7d4
 802dac0:	0802f794 	.word	0x0802f794

0802dac4 <__swsetup_r>:
 802dac4:	4b32      	ldr	r3, [pc, #200]	; (802db90 <__swsetup_r+0xcc>)
 802dac6:	b570      	push	{r4, r5, r6, lr}
 802dac8:	681d      	ldr	r5, [r3, #0]
 802daca:	4606      	mov	r6, r0
 802dacc:	460c      	mov	r4, r1
 802dace:	b125      	cbz	r5, 802dada <__swsetup_r+0x16>
 802dad0:	69ab      	ldr	r3, [r5, #24]
 802dad2:	b913      	cbnz	r3, 802dada <__swsetup_r+0x16>
 802dad4:	4628      	mov	r0, r5
 802dad6:	f000 f95b 	bl	802dd90 <__sinit>
 802dada:	4b2e      	ldr	r3, [pc, #184]	; (802db94 <__swsetup_r+0xd0>)
 802dadc:	429c      	cmp	r4, r3
 802dade:	d10f      	bne.n	802db00 <__swsetup_r+0x3c>
 802dae0:	686c      	ldr	r4, [r5, #4]
 802dae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802dae6:	b29a      	uxth	r2, r3
 802dae8:	0715      	lsls	r5, r2, #28
 802daea:	d42c      	bmi.n	802db46 <__swsetup_r+0x82>
 802daec:	06d0      	lsls	r0, r2, #27
 802daee:	d411      	bmi.n	802db14 <__swsetup_r+0x50>
 802daf0:	2209      	movs	r2, #9
 802daf2:	6032      	str	r2, [r6, #0]
 802daf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802daf8:	81a3      	strh	r3, [r4, #12]
 802dafa:	f04f 30ff 	mov.w	r0, #4294967295
 802dafe:	e03e      	b.n	802db7e <__swsetup_r+0xba>
 802db00:	4b25      	ldr	r3, [pc, #148]	; (802db98 <__swsetup_r+0xd4>)
 802db02:	429c      	cmp	r4, r3
 802db04:	d101      	bne.n	802db0a <__swsetup_r+0x46>
 802db06:	68ac      	ldr	r4, [r5, #8]
 802db08:	e7eb      	b.n	802dae2 <__swsetup_r+0x1e>
 802db0a:	4b24      	ldr	r3, [pc, #144]	; (802db9c <__swsetup_r+0xd8>)
 802db0c:	429c      	cmp	r4, r3
 802db0e:	bf08      	it	eq
 802db10:	68ec      	ldreq	r4, [r5, #12]
 802db12:	e7e6      	b.n	802dae2 <__swsetup_r+0x1e>
 802db14:	0751      	lsls	r1, r2, #29
 802db16:	d512      	bpl.n	802db3e <__swsetup_r+0x7a>
 802db18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802db1a:	b141      	cbz	r1, 802db2e <__swsetup_r+0x6a>
 802db1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802db20:	4299      	cmp	r1, r3
 802db22:	d002      	beq.n	802db2a <__swsetup_r+0x66>
 802db24:	4630      	mov	r0, r6
 802db26:	f000 fa29 	bl	802df7c <_free_r>
 802db2a:	2300      	movs	r3, #0
 802db2c:	6363      	str	r3, [r4, #52]	; 0x34
 802db2e:	89a3      	ldrh	r3, [r4, #12]
 802db30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802db34:	81a3      	strh	r3, [r4, #12]
 802db36:	2300      	movs	r3, #0
 802db38:	6063      	str	r3, [r4, #4]
 802db3a:	6923      	ldr	r3, [r4, #16]
 802db3c:	6023      	str	r3, [r4, #0]
 802db3e:	89a3      	ldrh	r3, [r4, #12]
 802db40:	f043 0308 	orr.w	r3, r3, #8
 802db44:	81a3      	strh	r3, [r4, #12]
 802db46:	6923      	ldr	r3, [r4, #16]
 802db48:	b94b      	cbnz	r3, 802db5e <__swsetup_r+0x9a>
 802db4a:	89a3      	ldrh	r3, [r4, #12]
 802db4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802db50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802db54:	d003      	beq.n	802db5e <__swsetup_r+0x9a>
 802db56:	4621      	mov	r1, r4
 802db58:	4630      	mov	r0, r6
 802db5a:	f000 f9c7 	bl	802deec <__smakebuf_r>
 802db5e:	89a2      	ldrh	r2, [r4, #12]
 802db60:	f012 0301 	ands.w	r3, r2, #1
 802db64:	d00c      	beq.n	802db80 <__swsetup_r+0xbc>
 802db66:	2300      	movs	r3, #0
 802db68:	60a3      	str	r3, [r4, #8]
 802db6a:	6963      	ldr	r3, [r4, #20]
 802db6c:	425b      	negs	r3, r3
 802db6e:	61a3      	str	r3, [r4, #24]
 802db70:	6923      	ldr	r3, [r4, #16]
 802db72:	b953      	cbnz	r3, 802db8a <__swsetup_r+0xc6>
 802db74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802db78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802db7c:	d1ba      	bne.n	802daf4 <__swsetup_r+0x30>
 802db7e:	bd70      	pop	{r4, r5, r6, pc}
 802db80:	0792      	lsls	r2, r2, #30
 802db82:	bf58      	it	pl
 802db84:	6963      	ldrpl	r3, [r4, #20]
 802db86:	60a3      	str	r3, [r4, #8]
 802db88:	e7f2      	b.n	802db70 <__swsetup_r+0xac>
 802db8a:	2000      	movs	r0, #0
 802db8c:	e7f7      	b.n	802db7e <__swsetup_r+0xba>
 802db8e:	bf00      	nop
 802db90:	240006b0 	.word	0x240006b0
 802db94:	0802f7b4 	.word	0x0802f7b4
 802db98:	0802f7d4 	.word	0x0802f7d4
 802db9c:	0802f794 	.word	0x0802f794

0802dba0 <abort>:
 802dba0:	b508      	push	{r3, lr}
 802dba2:	2006      	movs	r0, #6
 802dba4:	f000 faca 	bl	802e13c <raise>
 802dba8:	2001      	movs	r0, #1
 802dbaa:	f7e5 fd89 	bl	80136c0 <_exit>
	...

0802dbb0 <__sflush_r>:
 802dbb0:	898a      	ldrh	r2, [r1, #12]
 802dbb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dbb6:	4605      	mov	r5, r0
 802dbb8:	0710      	lsls	r0, r2, #28
 802dbba:	460c      	mov	r4, r1
 802dbbc:	d458      	bmi.n	802dc70 <__sflush_r+0xc0>
 802dbbe:	684b      	ldr	r3, [r1, #4]
 802dbc0:	2b00      	cmp	r3, #0
 802dbc2:	dc05      	bgt.n	802dbd0 <__sflush_r+0x20>
 802dbc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802dbc6:	2b00      	cmp	r3, #0
 802dbc8:	dc02      	bgt.n	802dbd0 <__sflush_r+0x20>
 802dbca:	2000      	movs	r0, #0
 802dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802dbd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802dbd2:	2e00      	cmp	r6, #0
 802dbd4:	d0f9      	beq.n	802dbca <__sflush_r+0x1a>
 802dbd6:	2300      	movs	r3, #0
 802dbd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802dbdc:	682f      	ldr	r7, [r5, #0]
 802dbde:	6a21      	ldr	r1, [r4, #32]
 802dbe0:	602b      	str	r3, [r5, #0]
 802dbe2:	d032      	beq.n	802dc4a <__sflush_r+0x9a>
 802dbe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802dbe6:	89a3      	ldrh	r3, [r4, #12]
 802dbe8:	075a      	lsls	r2, r3, #29
 802dbea:	d505      	bpl.n	802dbf8 <__sflush_r+0x48>
 802dbec:	6863      	ldr	r3, [r4, #4]
 802dbee:	1ac0      	subs	r0, r0, r3
 802dbf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802dbf2:	b10b      	cbz	r3, 802dbf8 <__sflush_r+0x48>
 802dbf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802dbf6:	1ac0      	subs	r0, r0, r3
 802dbf8:	2300      	movs	r3, #0
 802dbfa:	4602      	mov	r2, r0
 802dbfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802dbfe:	6a21      	ldr	r1, [r4, #32]
 802dc00:	4628      	mov	r0, r5
 802dc02:	47b0      	blx	r6
 802dc04:	1c43      	adds	r3, r0, #1
 802dc06:	89a3      	ldrh	r3, [r4, #12]
 802dc08:	d106      	bne.n	802dc18 <__sflush_r+0x68>
 802dc0a:	6829      	ldr	r1, [r5, #0]
 802dc0c:	291d      	cmp	r1, #29
 802dc0e:	d848      	bhi.n	802dca2 <__sflush_r+0xf2>
 802dc10:	4a29      	ldr	r2, [pc, #164]	; (802dcb8 <__sflush_r+0x108>)
 802dc12:	40ca      	lsrs	r2, r1
 802dc14:	07d6      	lsls	r6, r2, #31
 802dc16:	d544      	bpl.n	802dca2 <__sflush_r+0xf2>
 802dc18:	2200      	movs	r2, #0
 802dc1a:	6062      	str	r2, [r4, #4]
 802dc1c:	04d9      	lsls	r1, r3, #19
 802dc1e:	6922      	ldr	r2, [r4, #16]
 802dc20:	6022      	str	r2, [r4, #0]
 802dc22:	d504      	bpl.n	802dc2e <__sflush_r+0x7e>
 802dc24:	1c42      	adds	r2, r0, #1
 802dc26:	d101      	bne.n	802dc2c <__sflush_r+0x7c>
 802dc28:	682b      	ldr	r3, [r5, #0]
 802dc2a:	b903      	cbnz	r3, 802dc2e <__sflush_r+0x7e>
 802dc2c:	6560      	str	r0, [r4, #84]	; 0x54
 802dc2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dc30:	602f      	str	r7, [r5, #0]
 802dc32:	2900      	cmp	r1, #0
 802dc34:	d0c9      	beq.n	802dbca <__sflush_r+0x1a>
 802dc36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802dc3a:	4299      	cmp	r1, r3
 802dc3c:	d002      	beq.n	802dc44 <__sflush_r+0x94>
 802dc3e:	4628      	mov	r0, r5
 802dc40:	f000 f99c 	bl	802df7c <_free_r>
 802dc44:	2000      	movs	r0, #0
 802dc46:	6360      	str	r0, [r4, #52]	; 0x34
 802dc48:	e7c0      	b.n	802dbcc <__sflush_r+0x1c>
 802dc4a:	2301      	movs	r3, #1
 802dc4c:	4628      	mov	r0, r5
 802dc4e:	47b0      	blx	r6
 802dc50:	1c41      	adds	r1, r0, #1
 802dc52:	d1c8      	bne.n	802dbe6 <__sflush_r+0x36>
 802dc54:	682b      	ldr	r3, [r5, #0]
 802dc56:	2b00      	cmp	r3, #0
 802dc58:	d0c5      	beq.n	802dbe6 <__sflush_r+0x36>
 802dc5a:	2b1d      	cmp	r3, #29
 802dc5c:	d001      	beq.n	802dc62 <__sflush_r+0xb2>
 802dc5e:	2b16      	cmp	r3, #22
 802dc60:	d101      	bne.n	802dc66 <__sflush_r+0xb6>
 802dc62:	602f      	str	r7, [r5, #0]
 802dc64:	e7b1      	b.n	802dbca <__sflush_r+0x1a>
 802dc66:	89a3      	ldrh	r3, [r4, #12]
 802dc68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802dc6c:	81a3      	strh	r3, [r4, #12]
 802dc6e:	e7ad      	b.n	802dbcc <__sflush_r+0x1c>
 802dc70:	690f      	ldr	r7, [r1, #16]
 802dc72:	2f00      	cmp	r7, #0
 802dc74:	d0a9      	beq.n	802dbca <__sflush_r+0x1a>
 802dc76:	0793      	lsls	r3, r2, #30
 802dc78:	680e      	ldr	r6, [r1, #0]
 802dc7a:	bf08      	it	eq
 802dc7c:	694b      	ldreq	r3, [r1, #20]
 802dc7e:	600f      	str	r7, [r1, #0]
 802dc80:	bf18      	it	ne
 802dc82:	2300      	movne	r3, #0
 802dc84:	eba6 0807 	sub.w	r8, r6, r7
 802dc88:	608b      	str	r3, [r1, #8]
 802dc8a:	f1b8 0f00 	cmp.w	r8, #0
 802dc8e:	dd9c      	ble.n	802dbca <__sflush_r+0x1a>
 802dc90:	4643      	mov	r3, r8
 802dc92:	463a      	mov	r2, r7
 802dc94:	6a21      	ldr	r1, [r4, #32]
 802dc96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802dc98:	4628      	mov	r0, r5
 802dc9a:	47b0      	blx	r6
 802dc9c:	2800      	cmp	r0, #0
 802dc9e:	dc06      	bgt.n	802dcae <__sflush_r+0xfe>
 802dca0:	89a3      	ldrh	r3, [r4, #12]
 802dca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802dca6:	81a3      	strh	r3, [r4, #12]
 802dca8:	f04f 30ff 	mov.w	r0, #4294967295
 802dcac:	e78e      	b.n	802dbcc <__sflush_r+0x1c>
 802dcae:	4407      	add	r7, r0
 802dcb0:	eba8 0800 	sub.w	r8, r8, r0
 802dcb4:	e7e9      	b.n	802dc8a <__sflush_r+0xda>
 802dcb6:	bf00      	nop
 802dcb8:	20400001 	.word	0x20400001

0802dcbc <_fflush_r>:
 802dcbc:	b538      	push	{r3, r4, r5, lr}
 802dcbe:	690b      	ldr	r3, [r1, #16]
 802dcc0:	4605      	mov	r5, r0
 802dcc2:	460c      	mov	r4, r1
 802dcc4:	b1db      	cbz	r3, 802dcfe <_fflush_r+0x42>
 802dcc6:	b118      	cbz	r0, 802dcd0 <_fflush_r+0x14>
 802dcc8:	6983      	ldr	r3, [r0, #24]
 802dcca:	b90b      	cbnz	r3, 802dcd0 <_fflush_r+0x14>
 802dccc:	f000 f860 	bl	802dd90 <__sinit>
 802dcd0:	4b0c      	ldr	r3, [pc, #48]	; (802dd04 <_fflush_r+0x48>)
 802dcd2:	429c      	cmp	r4, r3
 802dcd4:	d109      	bne.n	802dcea <_fflush_r+0x2e>
 802dcd6:	686c      	ldr	r4, [r5, #4]
 802dcd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802dcdc:	b17b      	cbz	r3, 802dcfe <_fflush_r+0x42>
 802dcde:	4621      	mov	r1, r4
 802dce0:	4628      	mov	r0, r5
 802dce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802dce6:	f7ff bf63 	b.w	802dbb0 <__sflush_r>
 802dcea:	4b07      	ldr	r3, [pc, #28]	; (802dd08 <_fflush_r+0x4c>)
 802dcec:	429c      	cmp	r4, r3
 802dcee:	d101      	bne.n	802dcf4 <_fflush_r+0x38>
 802dcf0:	68ac      	ldr	r4, [r5, #8]
 802dcf2:	e7f1      	b.n	802dcd8 <_fflush_r+0x1c>
 802dcf4:	4b05      	ldr	r3, [pc, #20]	; (802dd0c <_fflush_r+0x50>)
 802dcf6:	429c      	cmp	r4, r3
 802dcf8:	bf08      	it	eq
 802dcfa:	68ec      	ldreq	r4, [r5, #12]
 802dcfc:	e7ec      	b.n	802dcd8 <_fflush_r+0x1c>
 802dcfe:	2000      	movs	r0, #0
 802dd00:	bd38      	pop	{r3, r4, r5, pc}
 802dd02:	bf00      	nop
 802dd04:	0802f7b4 	.word	0x0802f7b4
 802dd08:	0802f7d4 	.word	0x0802f7d4
 802dd0c:	0802f794 	.word	0x0802f794

0802dd10 <std>:
 802dd10:	2300      	movs	r3, #0
 802dd12:	b510      	push	{r4, lr}
 802dd14:	4604      	mov	r4, r0
 802dd16:	e9c0 3300 	strd	r3, r3, [r0]
 802dd1a:	6083      	str	r3, [r0, #8]
 802dd1c:	8181      	strh	r1, [r0, #12]
 802dd1e:	6643      	str	r3, [r0, #100]	; 0x64
 802dd20:	81c2      	strh	r2, [r0, #14]
 802dd22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802dd26:	6183      	str	r3, [r0, #24]
 802dd28:	4619      	mov	r1, r3
 802dd2a:	2208      	movs	r2, #8
 802dd2c:	305c      	adds	r0, #92	; 0x5c
 802dd2e:	f7ff fa8e 	bl	802d24e <memset>
 802dd32:	4b05      	ldr	r3, [pc, #20]	; (802dd48 <std+0x38>)
 802dd34:	6263      	str	r3, [r4, #36]	; 0x24
 802dd36:	4b05      	ldr	r3, [pc, #20]	; (802dd4c <std+0x3c>)
 802dd38:	62a3      	str	r3, [r4, #40]	; 0x28
 802dd3a:	4b05      	ldr	r3, [pc, #20]	; (802dd50 <std+0x40>)
 802dd3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802dd3e:	4b05      	ldr	r3, [pc, #20]	; (802dd54 <std+0x44>)
 802dd40:	6224      	str	r4, [r4, #32]
 802dd42:	6323      	str	r3, [r4, #48]	; 0x30
 802dd44:	bd10      	pop	{r4, pc}
 802dd46:	bf00      	nop
 802dd48:	0802e175 	.word	0x0802e175
 802dd4c:	0802e197 	.word	0x0802e197
 802dd50:	0802e1cf 	.word	0x0802e1cf
 802dd54:	0802e1f3 	.word	0x0802e1f3

0802dd58 <_cleanup_r>:
 802dd58:	4901      	ldr	r1, [pc, #4]	; (802dd60 <_cleanup_r+0x8>)
 802dd5a:	f000 b885 	b.w	802de68 <_fwalk_reent>
 802dd5e:	bf00      	nop
 802dd60:	0802dcbd 	.word	0x0802dcbd

0802dd64 <__sfmoreglue>:
 802dd64:	b570      	push	{r4, r5, r6, lr}
 802dd66:	1e4a      	subs	r2, r1, #1
 802dd68:	2568      	movs	r5, #104	; 0x68
 802dd6a:	4355      	muls	r5, r2
 802dd6c:	460e      	mov	r6, r1
 802dd6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802dd72:	f000 f951 	bl	802e018 <_malloc_r>
 802dd76:	4604      	mov	r4, r0
 802dd78:	b140      	cbz	r0, 802dd8c <__sfmoreglue+0x28>
 802dd7a:	2100      	movs	r1, #0
 802dd7c:	e9c0 1600 	strd	r1, r6, [r0]
 802dd80:	300c      	adds	r0, #12
 802dd82:	60a0      	str	r0, [r4, #8]
 802dd84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802dd88:	f7ff fa61 	bl	802d24e <memset>
 802dd8c:	4620      	mov	r0, r4
 802dd8e:	bd70      	pop	{r4, r5, r6, pc}

0802dd90 <__sinit>:
 802dd90:	6983      	ldr	r3, [r0, #24]
 802dd92:	b510      	push	{r4, lr}
 802dd94:	4604      	mov	r4, r0
 802dd96:	bb33      	cbnz	r3, 802dde6 <__sinit+0x56>
 802dd98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802dd9c:	6503      	str	r3, [r0, #80]	; 0x50
 802dd9e:	4b12      	ldr	r3, [pc, #72]	; (802dde8 <__sinit+0x58>)
 802dda0:	4a12      	ldr	r2, [pc, #72]	; (802ddec <__sinit+0x5c>)
 802dda2:	681b      	ldr	r3, [r3, #0]
 802dda4:	6282      	str	r2, [r0, #40]	; 0x28
 802dda6:	4298      	cmp	r0, r3
 802dda8:	bf04      	itt	eq
 802ddaa:	2301      	moveq	r3, #1
 802ddac:	6183      	streq	r3, [r0, #24]
 802ddae:	f000 f81f 	bl	802ddf0 <__sfp>
 802ddb2:	6060      	str	r0, [r4, #4]
 802ddb4:	4620      	mov	r0, r4
 802ddb6:	f000 f81b 	bl	802ddf0 <__sfp>
 802ddba:	60a0      	str	r0, [r4, #8]
 802ddbc:	4620      	mov	r0, r4
 802ddbe:	f000 f817 	bl	802ddf0 <__sfp>
 802ddc2:	2200      	movs	r2, #0
 802ddc4:	60e0      	str	r0, [r4, #12]
 802ddc6:	2104      	movs	r1, #4
 802ddc8:	6860      	ldr	r0, [r4, #4]
 802ddca:	f7ff ffa1 	bl	802dd10 <std>
 802ddce:	2201      	movs	r2, #1
 802ddd0:	2109      	movs	r1, #9
 802ddd2:	68a0      	ldr	r0, [r4, #8]
 802ddd4:	f7ff ff9c 	bl	802dd10 <std>
 802ddd8:	2202      	movs	r2, #2
 802ddda:	2112      	movs	r1, #18
 802dddc:	68e0      	ldr	r0, [r4, #12]
 802ddde:	f7ff ff97 	bl	802dd10 <std>
 802dde2:	2301      	movs	r3, #1
 802dde4:	61a3      	str	r3, [r4, #24]
 802dde6:	bd10      	pop	{r4, pc}
 802dde8:	0802f75c 	.word	0x0802f75c
 802ddec:	0802dd59 	.word	0x0802dd59

0802ddf0 <__sfp>:
 802ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ddf2:	4b1b      	ldr	r3, [pc, #108]	; (802de60 <__sfp+0x70>)
 802ddf4:	681e      	ldr	r6, [r3, #0]
 802ddf6:	69b3      	ldr	r3, [r6, #24]
 802ddf8:	4607      	mov	r7, r0
 802ddfa:	b913      	cbnz	r3, 802de02 <__sfp+0x12>
 802ddfc:	4630      	mov	r0, r6
 802ddfe:	f7ff ffc7 	bl	802dd90 <__sinit>
 802de02:	3648      	adds	r6, #72	; 0x48
 802de04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802de08:	3b01      	subs	r3, #1
 802de0a:	d503      	bpl.n	802de14 <__sfp+0x24>
 802de0c:	6833      	ldr	r3, [r6, #0]
 802de0e:	b133      	cbz	r3, 802de1e <__sfp+0x2e>
 802de10:	6836      	ldr	r6, [r6, #0]
 802de12:	e7f7      	b.n	802de04 <__sfp+0x14>
 802de14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802de18:	b16d      	cbz	r5, 802de36 <__sfp+0x46>
 802de1a:	3468      	adds	r4, #104	; 0x68
 802de1c:	e7f4      	b.n	802de08 <__sfp+0x18>
 802de1e:	2104      	movs	r1, #4
 802de20:	4638      	mov	r0, r7
 802de22:	f7ff ff9f 	bl	802dd64 <__sfmoreglue>
 802de26:	6030      	str	r0, [r6, #0]
 802de28:	2800      	cmp	r0, #0
 802de2a:	d1f1      	bne.n	802de10 <__sfp+0x20>
 802de2c:	230c      	movs	r3, #12
 802de2e:	603b      	str	r3, [r7, #0]
 802de30:	4604      	mov	r4, r0
 802de32:	4620      	mov	r0, r4
 802de34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802de36:	4b0b      	ldr	r3, [pc, #44]	; (802de64 <__sfp+0x74>)
 802de38:	6665      	str	r5, [r4, #100]	; 0x64
 802de3a:	e9c4 5500 	strd	r5, r5, [r4]
 802de3e:	60a5      	str	r5, [r4, #8]
 802de40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802de44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802de48:	2208      	movs	r2, #8
 802de4a:	4629      	mov	r1, r5
 802de4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802de50:	f7ff f9fd 	bl	802d24e <memset>
 802de54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802de58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802de5c:	e7e9      	b.n	802de32 <__sfp+0x42>
 802de5e:	bf00      	nop
 802de60:	0802f75c 	.word	0x0802f75c
 802de64:	ffff0001 	.word	0xffff0001

0802de68 <_fwalk_reent>:
 802de68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802de6c:	4680      	mov	r8, r0
 802de6e:	4689      	mov	r9, r1
 802de70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802de74:	2600      	movs	r6, #0
 802de76:	b914      	cbnz	r4, 802de7e <_fwalk_reent+0x16>
 802de78:	4630      	mov	r0, r6
 802de7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802de7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802de82:	3f01      	subs	r7, #1
 802de84:	d501      	bpl.n	802de8a <_fwalk_reent+0x22>
 802de86:	6824      	ldr	r4, [r4, #0]
 802de88:	e7f5      	b.n	802de76 <_fwalk_reent+0xe>
 802de8a:	89ab      	ldrh	r3, [r5, #12]
 802de8c:	2b01      	cmp	r3, #1
 802de8e:	d907      	bls.n	802dea0 <_fwalk_reent+0x38>
 802de90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802de94:	3301      	adds	r3, #1
 802de96:	d003      	beq.n	802dea0 <_fwalk_reent+0x38>
 802de98:	4629      	mov	r1, r5
 802de9a:	4640      	mov	r0, r8
 802de9c:	47c8      	blx	r9
 802de9e:	4306      	orrs	r6, r0
 802dea0:	3568      	adds	r5, #104	; 0x68
 802dea2:	e7ee      	b.n	802de82 <_fwalk_reent+0x1a>

0802dea4 <__swhatbuf_r>:
 802dea4:	b570      	push	{r4, r5, r6, lr}
 802dea6:	460e      	mov	r6, r1
 802dea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802deac:	2900      	cmp	r1, #0
 802deae:	b096      	sub	sp, #88	; 0x58
 802deb0:	4614      	mov	r4, r2
 802deb2:	461d      	mov	r5, r3
 802deb4:	da07      	bge.n	802dec6 <__swhatbuf_r+0x22>
 802deb6:	2300      	movs	r3, #0
 802deb8:	602b      	str	r3, [r5, #0]
 802deba:	89b3      	ldrh	r3, [r6, #12]
 802debc:	061a      	lsls	r2, r3, #24
 802debe:	d410      	bmi.n	802dee2 <__swhatbuf_r+0x3e>
 802dec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802dec4:	e00e      	b.n	802dee4 <__swhatbuf_r+0x40>
 802dec6:	466a      	mov	r2, sp
 802dec8:	f000 f9ba 	bl	802e240 <_fstat_r>
 802decc:	2800      	cmp	r0, #0
 802dece:	dbf2      	blt.n	802deb6 <__swhatbuf_r+0x12>
 802ded0:	9a01      	ldr	r2, [sp, #4]
 802ded2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802ded6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802deda:	425a      	negs	r2, r3
 802dedc:	415a      	adcs	r2, r3
 802dede:	602a      	str	r2, [r5, #0]
 802dee0:	e7ee      	b.n	802dec0 <__swhatbuf_r+0x1c>
 802dee2:	2340      	movs	r3, #64	; 0x40
 802dee4:	2000      	movs	r0, #0
 802dee6:	6023      	str	r3, [r4, #0]
 802dee8:	b016      	add	sp, #88	; 0x58
 802deea:	bd70      	pop	{r4, r5, r6, pc}

0802deec <__smakebuf_r>:
 802deec:	898b      	ldrh	r3, [r1, #12]
 802deee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802def0:	079d      	lsls	r5, r3, #30
 802def2:	4606      	mov	r6, r0
 802def4:	460c      	mov	r4, r1
 802def6:	d507      	bpl.n	802df08 <__smakebuf_r+0x1c>
 802def8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802defc:	6023      	str	r3, [r4, #0]
 802defe:	6123      	str	r3, [r4, #16]
 802df00:	2301      	movs	r3, #1
 802df02:	6163      	str	r3, [r4, #20]
 802df04:	b002      	add	sp, #8
 802df06:	bd70      	pop	{r4, r5, r6, pc}
 802df08:	ab01      	add	r3, sp, #4
 802df0a:	466a      	mov	r2, sp
 802df0c:	f7ff ffca 	bl	802dea4 <__swhatbuf_r>
 802df10:	9900      	ldr	r1, [sp, #0]
 802df12:	4605      	mov	r5, r0
 802df14:	4630      	mov	r0, r6
 802df16:	f000 f87f 	bl	802e018 <_malloc_r>
 802df1a:	b948      	cbnz	r0, 802df30 <__smakebuf_r+0x44>
 802df1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802df20:	059a      	lsls	r2, r3, #22
 802df22:	d4ef      	bmi.n	802df04 <__smakebuf_r+0x18>
 802df24:	f023 0303 	bic.w	r3, r3, #3
 802df28:	f043 0302 	orr.w	r3, r3, #2
 802df2c:	81a3      	strh	r3, [r4, #12]
 802df2e:	e7e3      	b.n	802def8 <__smakebuf_r+0xc>
 802df30:	4b0d      	ldr	r3, [pc, #52]	; (802df68 <__smakebuf_r+0x7c>)
 802df32:	62b3      	str	r3, [r6, #40]	; 0x28
 802df34:	89a3      	ldrh	r3, [r4, #12]
 802df36:	6020      	str	r0, [r4, #0]
 802df38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802df3c:	81a3      	strh	r3, [r4, #12]
 802df3e:	9b00      	ldr	r3, [sp, #0]
 802df40:	6163      	str	r3, [r4, #20]
 802df42:	9b01      	ldr	r3, [sp, #4]
 802df44:	6120      	str	r0, [r4, #16]
 802df46:	b15b      	cbz	r3, 802df60 <__smakebuf_r+0x74>
 802df48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802df4c:	4630      	mov	r0, r6
 802df4e:	f000 f989 	bl	802e264 <_isatty_r>
 802df52:	b128      	cbz	r0, 802df60 <__smakebuf_r+0x74>
 802df54:	89a3      	ldrh	r3, [r4, #12]
 802df56:	f023 0303 	bic.w	r3, r3, #3
 802df5a:	f043 0301 	orr.w	r3, r3, #1
 802df5e:	81a3      	strh	r3, [r4, #12]
 802df60:	89a3      	ldrh	r3, [r4, #12]
 802df62:	431d      	orrs	r5, r3
 802df64:	81a5      	strh	r5, [r4, #12]
 802df66:	e7cd      	b.n	802df04 <__smakebuf_r+0x18>
 802df68:	0802dd59 	.word	0x0802dd59

0802df6c <malloc>:
 802df6c:	4b02      	ldr	r3, [pc, #8]	; (802df78 <malloc+0xc>)
 802df6e:	4601      	mov	r1, r0
 802df70:	6818      	ldr	r0, [r3, #0]
 802df72:	f000 b851 	b.w	802e018 <_malloc_r>
 802df76:	bf00      	nop
 802df78:	240006b0 	.word	0x240006b0

0802df7c <_free_r>:
 802df7c:	b538      	push	{r3, r4, r5, lr}
 802df7e:	4605      	mov	r5, r0
 802df80:	2900      	cmp	r1, #0
 802df82:	d045      	beq.n	802e010 <_free_r+0x94>
 802df84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802df88:	1f0c      	subs	r4, r1, #4
 802df8a:	2b00      	cmp	r3, #0
 802df8c:	bfb8      	it	lt
 802df8e:	18e4      	addlt	r4, r4, r3
 802df90:	f000 f98a 	bl	802e2a8 <__malloc_lock>
 802df94:	4a1f      	ldr	r2, [pc, #124]	; (802e014 <_free_r+0x98>)
 802df96:	6813      	ldr	r3, [r2, #0]
 802df98:	4610      	mov	r0, r2
 802df9a:	b933      	cbnz	r3, 802dfaa <_free_r+0x2e>
 802df9c:	6063      	str	r3, [r4, #4]
 802df9e:	6014      	str	r4, [r2, #0]
 802dfa0:	4628      	mov	r0, r5
 802dfa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802dfa6:	f000 b980 	b.w	802e2aa <__malloc_unlock>
 802dfaa:	42a3      	cmp	r3, r4
 802dfac:	d90c      	bls.n	802dfc8 <_free_r+0x4c>
 802dfae:	6821      	ldr	r1, [r4, #0]
 802dfb0:	1862      	adds	r2, r4, r1
 802dfb2:	4293      	cmp	r3, r2
 802dfb4:	bf04      	itt	eq
 802dfb6:	681a      	ldreq	r2, [r3, #0]
 802dfb8:	685b      	ldreq	r3, [r3, #4]
 802dfba:	6063      	str	r3, [r4, #4]
 802dfbc:	bf04      	itt	eq
 802dfbe:	1852      	addeq	r2, r2, r1
 802dfc0:	6022      	streq	r2, [r4, #0]
 802dfc2:	6004      	str	r4, [r0, #0]
 802dfc4:	e7ec      	b.n	802dfa0 <_free_r+0x24>
 802dfc6:	4613      	mov	r3, r2
 802dfc8:	685a      	ldr	r2, [r3, #4]
 802dfca:	b10a      	cbz	r2, 802dfd0 <_free_r+0x54>
 802dfcc:	42a2      	cmp	r2, r4
 802dfce:	d9fa      	bls.n	802dfc6 <_free_r+0x4a>
 802dfd0:	6819      	ldr	r1, [r3, #0]
 802dfd2:	1858      	adds	r0, r3, r1
 802dfd4:	42a0      	cmp	r0, r4
 802dfd6:	d10b      	bne.n	802dff0 <_free_r+0x74>
 802dfd8:	6820      	ldr	r0, [r4, #0]
 802dfda:	4401      	add	r1, r0
 802dfdc:	1858      	adds	r0, r3, r1
 802dfde:	4282      	cmp	r2, r0
 802dfe0:	6019      	str	r1, [r3, #0]
 802dfe2:	d1dd      	bne.n	802dfa0 <_free_r+0x24>
 802dfe4:	6810      	ldr	r0, [r2, #0]
 802dfe6:	6852      	ldr	r2, [r2, #4]
 802dfe8:	605a      	str	r2, [r3, #4]
 802dfea:	4401      	add	r1, r0
 802dfec:	6019      	str	r1, [r3, #0]
 802dfee:	e7d7      	b.n	802dfa0 <_free_r+0x24>
 802dff0:	d902      	bls.n	802dff8 <_free_r+0x7c>
 802dff2:	230c      	movs	r3, #12
 802dff4:	602b      	str	r3, [r5, #0]
 802dff6:	e7d3      	b.n	802dfa0 <_free_r+0x24>
 802dff8:	6820      	ldr	r0, [r4, #0]
 802dffa:	1821      	adds	r1, r4, r0
 802dffc:	428a      	cmp	r2, r1
 802dffe:	bf04      	itt	eq
 802e000:	6811      	ldreq	r1, [r2, #0]
 802e002:	6852      	ldreq	r2, [r2, #4]
 802e004:	6062      	str	r2, [r4, #4]
 802e006:	bf04      	itt	eq
 802e008:	1809      	addeq	r1, r1, r0
 802e00a:	6021      	streq	r1, [r4, #0]
 802e00c:	605c      	str	r4, [r3, #4]
 802e00e:	e7c7      	b.n	802dfa0 <_free_r+0x24>
 802e010:	bd38      	pop	{r3, r4, r5, pc}
 802e012:	bf00      	nop
 802e014:	24005d34 	.word	0x24005d34

0802e018 <_malloc_r>:
 802e018:	b570      	push	{r4, r5, r6, lr}
 802e01a:	1ccd      	adds	r5, r1, #3
 802e01c:	f025 0503 	bic.w	r5, r5, #3
 802e020:	3508      	adds	r5, #8
 802e022:	2d0c      	cmp	r5, #12
 802e024:	bf38      	it	cc
 802e026:	250c      	movcc	r5, #12
 802e028:	2d00      	cmp	r5, #0
 802e02a:	4606      	mov	r6, r0
 802e02c:	db01      	blt.n	802e032 <_malloc_r+0x1a>
 802e02e:	42a9      	cmp	r1, r5
 802e030:	d903      	bls.n	802e03a <_malloc_r+0x22>
 802e032:	230c      	movs	r3, #12
 802e034:	6033      	str	r3, [r6, #0]
 802e036:	2000      	movs	r0, #0
 802e038:	bd70      	pop	{r4, r5, r6, pc}
 802e03a:	f000 f935 	bl	802e2a8 <__malloc_lock>
 802e03e:	4a21      	ldr	r2, [pc, #132]	; (802e0c4 <_malloc_r+0xac>)
 802e040:	6814      	ldr	r4, [r2, #0]
 802e042:	4621      	mov	r1, r4
 802e044:	b991      	cbnz	r1, 802e06c <_malloc_r+0x54>
 802e046:	4c20      	ldr	r4, [pc, #128]	; (802e0c8 <_malloc_r+0xb0>)
 802e048:	6823      	ldr	r3, [r4, #0]
 802e04a:	b91b      	cbnz	r3, 802e054 <_malloc_r+0x3c>
 802e04c:	4630      	mov	r0, r6
 802e04e:	f000 f83d 	bl	802e0cc <_sbrk_r>
 802e052:	6020      	str	r0, [r4, #0]
 802e054:	4629      	mov	r1, r5
 802e056:	4630      	mov	r0, r6
 802e058:	f000 f838 	bl	802e0cc <_sbrk_r>
 802e05c:	1c43      	adds	r3, r0, #1
 802e05e:	d124      	bne.n	802e0aa <_malloc_r+0x92>
 802e060:	230c      	movs	r3, #12
 802e062:	6033      	str	r3, [r6, #0]
 802e064:	4630      	mov	r0, r6
 802e066:	f000 f920 	bl	802e2aa <__malloc_unlock>
 802e06a:	e7e4      	b.n	802e036 <_malloc_r+0x1e>
 802e06c:	680b      	ldr	r3, [r1, #0]
 802e06e:	1b5b      	subs	r3, r3, r5
 802e070:	d418      	bmi.n	802e0a4 <_malloc_r+0x8c>
 802e072:	2b0b      	cmp	r3, #11
 802e074:	d90f      	bls.n	802e096 <_malloc_r+0x7e>
 802e076:	600b      	str	r3, [r1, #0]
 802e078:	50cd      	str	r5, [r1, r3]
 802e07a:	18cc      	adds	r4, r1, r3
 802e07c:	4630      	mov	r0, r6
 802e07e:	f000 f914 	bl	802e2aa <__malloc_unlock>
 802e082:	f104 000b 	add.w	r0, r4, #11
 802e086:	1d23      	adds	r3, r4, #4
 802e088:	f020 0007 	bic.w	r0, r0, #7
 802e08c:	1ac3      	subs	r3, r0, r3
 802e08e:	d0d3      	beq.n	802e038 <_malloc_r+0x20>
 802e090:	425a      	negs	r2, r3
 802e092:	50e2      	str	r2, [r4, r3]
 802e094:	e7d0      	b.n	802e038 <_malloc_r+0x20>
 802e096:	428c      	cmp	r4, r1
 802e098:	684b      	ldr	r3, [r1, #4]
 802e09a:	bf16      	itet	ne
 802e09c:	6063      	strne	r3, [r4, #4]
 802e09e:	6013      	streq	r3, [r2, #0]
 802e0a0:	460c      	movne	r4, r1
 802e0a2:	e7eb      	b.n	802e07c <_malloc_r+0x64>
 802e0a4:	460c      	mov	r4, r1
 802e0a6:	6849      	ldr	r1, [r1, #4]
 802e0a8:	e7cc      	b.n	802e044 <_malloc_r+0x2c>
 802e0aa:	1cc4      	adds	r4, r0, #3
 802e0ac:	f024 0403 	bic.w	r4, r4, #3
 802e0b0:	42a0      	cmp	r0, r4
 802e0b2:	d005      	beq.n	802e0c0 <_malloc_r+0xa8>
 802e0b4:	1a21      	subs	r1, r4, r0
 802e0b6:	4630      	mov	r0, r6
 802e0b8:	f000 f808 	bl	802e0cc <_sbrk_r>
 802e0bc:	3001      	adds	r0, #1
 802e0be:	d0cf      	beq.n	802e060 <_malloc_r+0x48>
 802e0c0:	6025      	str	r5, [r4, #0]
 802e0c2:	e7db      	b.n	802e07c <_malloc_r+0x64>
 802e0c4:	24005d34 	.word	0x24005d34
 802e0c8:	24005d38 	.word	0x24005d38

0802e0cc <_sbrk_r>:
 802e0cc:	b538      	push	{r3, r4, r5, lr}
 802e0ce:	4c06      	ldr	r4, [pc, #24]	; (802e0e8 <_sbrk_r+0x1c>)
 802e0d0:	2300      	movs	r3, #0
 802e0d2:	4605      	mov	r5, r0
 802e0d4:	4608      	mov	r0, r1
 802e0d6:	6023      	str	r3, [r4, #0]
 802e0d8:	f7e5 fb6a 	bl	80137b0 <_sbrk>
 802e0dc:	1c43      	adds	r3, r0, #1
 802e0de:	d102      	bne.n	802e0e6 <_sbrk_r+0x1a>
 802e0e0:	6823      	ldr	r3, [r4, #0]
 802e0e2:	b103      	cbz	r3, 802e0e6 <_sbrk_r+0x1a>
 802e0e4:	602b      	str	r3, [r5, #0]
 802e0e6:	bd38      	pop	{r3, r4, r5, pc}
 802e0e8:	2400d250 	.word	0x2400d250

0802e0ec <_raise_r>:
 802e0ec:	291f      	cmp	r1, #31
 802e0ee:	b538      	push	{r3, r4, r5, lr}
 802e0f0:	4604      	mov	r4, r0
 802e0f2:	460d      	mov	r5, r1
 802e0f4:	d904      	bls.n	802e100 <_raise_r+0x14>
 802e0f6:	2316      	movs	r3, #22
 802e0f8:	6003      	str	r3, [r0, #0]
 802e0fa:	f04f 30ff 	mov.w	r0, #4294967295
 802e0fe:	bd38      	pop	{r3, r4, r5, pc}
 802e100:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802e102:	b112      	cbz	r2, 802e10a <_raise_r+0x1e>
 802e104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e108:	b94b      	cbnz	r3, 802e11e <_raise_r+0x32>
 802e10a:	4620      	mov	r0, r4
 802e10c:	f000 f830 	bl	802e170 <_getpid_r>
 802e110:	462a      	mov	r2, r5
 802e112:	4601      	mov	r1, r0
 802e114:	4620      	mov	r0, r4
 802e116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e11a:	f000 b817 	b.w	802e14c <_kill_r>
 802e11e:	2b01      	cmp	r3, #1
 802e120:	d00a      	beq.n	802e138 <_raise_r+0x4c>
 802e122:	1c59      	adds	r1, r3, #1
 802e124:	d103      	bne.n	802e12e <_raise_r+0x42>
 802e126:	2316      	movs	r3, #22
 802e128:	6003      	str	r3, [r0, #0]
 802e12a:	2001      	movs	r0, #1
 802e12c:	e7e7      	b.n	802e0fe <_raise_r+0x12>
 802e12e:	2400      	movs	r4, #0
 802e130:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802e134:	4628      	mov	r0, r5
 802e136:	4798      	blx	r3
 802e138:	2000      	movs	r0, #0
 802e13a:	e7e0      	b.n	802e0fe <_raise_r+0x12>

0802e13c <raise>:
 802e13c:	4b02      	ldr	r3, [pc, #8]	; (802e148 <raise+0xc>)
 802e13e:	4601      	mov	r1, r0
 802e140:	6818      	ldr	r0, [r3, #0]
 802e142:	f7ff bfd3 	b.w	802e0ec <_raise_r>
 802e146:	bf00      	nop
 802e148:	240006b0 	.word	0x240006b0

0802e14c <_kill_r>:
 802e14c:	b538      	push	{r3, r4, r5, lr}
 802e14e:	4c07      	ldr	r4, [pc, #28]	; (802e16c <_kill_r+0x20>)
 802e150:	2300      	movs	r3, #0
 802e152:	4605      	mov	r5, r0
 802e154:	4608      	mov	r0, r1
 802e156:	4611      	mov	r1, r2
 802e158:	6023      	str	r3, [r4, #0]
 802e15a:	f7e5 faa1 	bl	80136a0 <_kill>
 802e15e:	1c43      	adds	r3, r0, #1
 802e160:	d102      	bne.n	802e168 <_kill_r+0x1c>
 802e162:	6823      	ldr	r3, [r4, #0]
 802e164:	b103      	cbz	r3, 802e168 <_kill_r+0x1c>
 802e166:	602b      	str	r3, [r5, #0]
 802e168:	bd38      	pop	{r3, r4, r5, pc}
 802e16a:	bf00      	nop
 802e16c:	2400d250 	.word	0x2400d250

0802e170 <_getpid_r>:
 802e170:	f7e5 ba8e 	b.w	8013690 <_getpid>

0802e174 <__sread>:
 802e174:	b510      	push	{r4, lr}
 802e176:	460c      	mov	r4, r1
 802e178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e17c:	f000 f896 	bl	802e2ac <_read_r>
 802e180:	2800      	cmp	r0, #0
 802e182:	bfab      	itete	ge
 802e184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802e186:	89a3      	ldrhlt	r3, [r4, #12]
 802e188:	181b      	addge	r3, r3, r0
 802e18a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802e18e:	bfac      	ite	ge
 802e190:	6563      	strge	r3, [r4, #84]	; 0x54
 802e192:	81a3      	strhlt	r3, [r4, #12]
 802e194:	bd10      	pop	{r4, pc}

0802e196 <__swrite>:
 802e196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e19a:	461f      	mov	r7, r3
 802e19c:	898b      	ldrh	r3, [r1, #12]
 802e19e:	05db      	lsls	r3, r3, #23
 802e1a0:	4605      	mov	r5, r0
 802e1a2:	460c      	mov	r4, r1
 802e1a4:	4616      	mov	r6, r2
 802e1a6:	d505      	bpl.n	802e1b4 <__swrite+0x1e>
 802e1a8:	2302      	movs	r3, #2
 802e1aa:	2200      	movs	r2, #0
 802e1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e1b0:	f000 f868 	bl	802e284 <_lseek_r>
 802e1b4:	89a3      	ldrh	r3, [r4, #12]
 802e1b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e1ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802e1be:	81a3      	strh	r3, [r4, #12]
 802e1c0:	4632      	mov	r2, r6
 802e1c2:	463b      	mov	r3, r7
 802e1c4:	4628      	mov	r0, r5
 802e1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e1ca:	f000 b817 	b.w	802e1fc <_write_r>

0802e1ce <__sseek>:
 802e1ce:	b510      	push	{r4, lr}
 802e1d0:	460c      	mov	r4, r1
 802e1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e1d6:	f000 f855 	bl	802e284 <_lseek_r>
 802e1da:	1c43      	adds	r3, r0, #1
 802e1dc:	89a3      	ldrh	r3, [r4, #12]
 802e1de:	bf15      	itete	ne
 802e1e0:	6560      	strne	r0, [r4, #84]	; 0x54
 802e1e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802e1e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802e1ea:	81a3      	strheq	r3, [r4, #12]
 802e1ec:	bf18      	it	ne
 802e1ee:	81a3      	strhne	r3, [r4, #12]
 802e1f0:	bd10      	pop	{r4, pc}

0802e1f2 <__sclose>:
 802e1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e1f6:	f000 b813 	b.w	802e220 <_close_r>
	...

0802e1fc <_write_r>:
 802e1fc:	b538      	push	{r3, r4, r5, lr}
 802e1fe:	4c07      	ldr	r4, [pc, #28]	; (802e21c <_write_r+0x20>)
 802e200:	4605      	mov	r5, r0
 802e202:	4608      	mov	r0, r1
 802e204:	4611      	mov	r1, r2
 802e206:	2200      	movs	r2, #0
 802e208:	6022      	str	r2, [r4, #0]
 802e20a:	461a      	mov	r2, r3
 802e20c:	f7e5 fa7f 	bl	801370e <_write>
 802e210:	1c43      	adds	r3, r0, #1
 802e212:	d102      	bne.n	802e21a <_write_r+0x1e>
 802e214:	6823      	ldr	r3, [r4, #0]
 802e216:	b103      	cbz	r3, 802e21a <_write_r+0x1e>
 802e218:	602b      	str	r3, [r5, #0]
 802e21a:	bd38      	pop	{r3, r4, r5, pc}
 802e21c:	2400d250 	.word	0x2400d250

0802e220 <_close_r>:
 802e220:	b538      	push	{r3, r4, r5, lr}
 802e222:	4c06      	ldr	r4, [pc, #24]	; (802e23c <_close_r+0x1c>)
 802e224:	2300      	movs	r3, #0
 802e226:	4605      	mov	r5, r0
 802e228:	4608      	mov	r0, r1
 802e22a:	6023      	str	r3, [r4, #0]
 802e22c:	f7e5 fa8b 	bl	8013746 <_close>
 802e230:	1c43      	adds	r3, r0, #1
 802e232:	d102      	bne.n	802e23a <_close_r+0x1a>
 802e234:	6823      	ldr	r3, [r4, #0]
 802e236:	b103      	cbz	r3, 802e23a <_close_r+0x1a>
 802e238:	602b      	str	r3, [r5, #0]
 802e23a:	bd38      	pop	{r3, r4, r5, pc}
 802e23c:	2400d250 	.word	0x2400d250

0802e240 <_fstat_r>:
 802e240:	b538      	push	{r3, r4, r5, lr}
 802e242:	4c07      	ldr	r4, [pc, #28]	; (802e260 <_fstat_r+0x20>)
 802e244:	2300      	movs	r3, #0
 802e246:	4605      	mov	r5, r0
 802e248:	4608      	mov	r0, r1
 802e24a:	4611      	mov	r1, r2
 802e24c:	6023      	str	r3, [r4, #0]
 802e24e:	f7e5 fa86 	bl	801375e <_fstat>
 802e252:	1c43      	adds	r3, r0, #1
 802e254:	d102      	bne.n	802e25c <_fstat_r+0x1c>
 802e256:	6823      	ldr	r3, [r4, #0]
 802e258:	b103      	cbz	r3, 802e25c <_fstat_r+0x1c>
 802e25a:	602b      	str	r3, [r5, #0]
 802e25c:	bd38      	pop	{r3, r4, r5, pc}
 802e25e:	bf00      	nop
 802e260:	2400d250 	.word	0x2400d250

0802e264 <_isatty_r>:
 802e264:	b538      	push	{r3, r4, r5, lr}
 802e266:	4c06      	ldr	r4, [pc, #24]	; (802e280 <_isatty_r+0x1c>)
 802e268:	2300      	movs	r3, #0
 802e26a:	4605      	mov	r5, r0
 802e26c:	4608      	mov	r0, r1
 802e26e:	6023      	str	r3, [r4, #0]
 802e270:	f7e5 fa85 	bl	801377e <_isatty>
 802e274:	1c43      	adds	r3, r0, #1
 802e276:	d102      	bne.n	802e27e <_isatty_r+0x1a>
 802e278:	6823      	ldr	r3, [r4, #0]
 802e27a:	b103      	cbz	r3, 802e27e <_isatty_r+0x1a>
 802e27c:	602b      	str	r3, [r5, #0]
 802e27e:	bd38      	pop	{r3, r4, r5, pc}
 802e280:	2400d250 	.word	0x2400d250

0802e284 <_lseek_r>:
 802e284:	b538      	push	{r3, r4, r5, lr}
 802e286:	4c07      	ldr	r4, [pc, #28]	; (802e2a4 <_lseek_r+0x20>)
 802e288:	4605      	mov	r5, r0
 802e28a:	4608      	mov	r0, r1
 802e28c:	4611      	mov	r1, r2
 802e28e:	2200      	movs	r2, #0
 802e290:	6022      	str	r2, [r4, #0]
 802e292:	461a      	mov	r2, r3
 802e294:	f7e5 fa7e 	bl	8013794 <_lseek>
 802e298:	1c43      	adds	r3, r0, #1
 802e29a:	d102      	bne.n	802e2a2 <_lseek_r+0x1e>
 802e29c:	6823      	ldr	r3, [r4, #0]
 802e29e:	b103      	cbz	r3, 802e2a2 <_lseek_r+0x1e>
 802e2a0:	602b      	str	r3, [r5, #0]
 802e2a2:	bd38      	pop	{r3, r4, r5, pc}
 802e2a4:	2400d250 	.word	0x2400d250

0802e2a8 <__malloc_lock>:
 802e2a8:	4770      	bx	lr

0802e2aa <__malloc_unlock>:
 802e2aa:	4770      	bx	lr

0802e2ac <_read_r>:
 802e2ac:	b538      	push	{r3, r4, r5, lr}
 802e2ae:	4c07      	ldr	r4, [pc, #28]	; (802e2cc <_read_r+0x20>)
 802e2b0:	4605      	mov	r5, r0
 802e2b2:	4608      	mov	r0, r1
 802e2b4:	4611      	mov	r1, r2
 802e2b6:	2200      	movs	r2, #0
 802e2b8:	6022      	str	r2, [r4, #0]
 802e2ba:	461a      	mov	r2, r3
 802e2bc:	f7e5 fa0a 	bl	80136d4 <_read>
 802e2c0:	1c43      	adds	r3, r0, #1
 802e2c2:	d102      	bne.n	802e2ca <_read_r+0x1e>
 802e2c4:	6823      	ldr	r3, [r4, #0]
 802e2c6:	b103      	cbz	r3, 802e2ca <_read_r+0x1e>
 802e2c8:	602b      	str	r3, [r5, #0]
 802e2ca:	bd38      	pop	{r3, r4, r5, pc}
 802e2cc:	2400d250 	.word	0x2400d250

0802e2d0 <_init>:
 802e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e2d2:	bf00      	nop
 802e2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e2d6:	bc08      	pop	{r3}
 802e2d8:	469e      	mov	lr, r3
 802e2da:	4770      	bx	lr

0802e2dc <_fini>:
 802e2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e2de:	bf00      	nop
 802e2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e2e2:	bc08      	pop	{r3}
 802e2e4:	469e      	mov	lr, r3
 802e2e6:	4770      	bx	lr
